{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.8 Early Access Build 3707","PublishedOn":"2018-12-15T02:11:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We have another early access build to share today! This release includes several accessibility, performance, reliability and stability fixes across the major framework libraries. We will continue to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/14/announcing-net-framework-4-8-early-access-build-3707/","RawContent":null},{"Title":"Visual Studio 2019 Preview .NET Productivity","PublishedOn":"2018-12-14T00:13:41+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"As you hopefully heard, the first preview of Visual Studio 2019 is now available. In this post I’ll cover some of the productivity improvements for .NET developers we’re most excited about. For a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/13/visual-studio-2019-net-productivity/","RawContent":null},{"Title":".NET Framework December 2018 Security and Quality Rollup","PublishedOn":"2018-12-11T18:23:48+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the December 2018 Security and Quality Rollup. Security CVE-2018-8540 – Windows Remote Code Execution Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/11/net-framework-december-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Open Sourcing XAML Behaviors for WPF","PublishedOn":"2018-12-10T19:27:32+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are excited to announce that we are open sourcing XAML Behaviors for WPF. In the past, we open sourced XAML Behaviors for UWP which has been a great success and the Behaviors NuGet package...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/10/open-sourcing-xaml-behaviors-for-wpf/","RawContent":null},{"Title":"Take C# 8.0 for a spin","PublishedOn":"2018-12-05T23:51:33+00:00","CommentsCount":79,"FacebookCount":0,"Summary":"Take C# 8.0 for a spin Yesterday we announced the first preview of both Visual Studio 2019 (Making every developer more productive with Visual Studio 2019) and .NET Core 3.0 (Announcing .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/take-c-8-0-for-a-spin/","RawContent":null},{"Title":".NET Framework December 5, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2018-12-05T22:00:42+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the December 5, 2018 Preview of .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/net-framework-december-4-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 1 and Open Sourcing Windows Desktop Frameworks","PublishedOn":"2018-12-04T16:41:34+00:00","CommentsCount":80,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 1. It is the first public release of .NET Core 3. We have some exciting new features to share and would love your feedback. You can develop .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-3-preview-1-and-open-sourcing-windows-desktop-frameworks/","RawContent":null},{"Title":"Announcing .NET Core 2.2","PublishedOn":"2018-12-04T16:36:50+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"We’re excited to announce the release of .NET Core 2.2. It includes diagnostic improvements to the runtime, support for ARM32 for Windows and Azure Active Directory for SQL Client. The biggest...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-2-2/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.2","PublishedOn":"2018-12-04T16:30:21+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we&#8217;re making the final version of EF Core 2.2 available, alongside ASP.NET Core 2.2 and .NET Core 2.2. This is the latest release of our open-source and cross-platform object-database...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-entity-framework-core-2-2/","RawContent":null},{"Title":"Announcing ML.NET 0.8 – Machine Learning for .NET","PublishedOn":"2018-12-04T16:00:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform framework (Windows, Linux, macOS) which makes machine learning accessible for .NET developers. ML.NET allows you to create and use machine learning models...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-ml-net-0-8-machine-learning-for-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8760892630","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:57:54","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Opened issue \"No logo provided for Prism\" (#126) at dotnet/foundation","RelatedBody":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157"},{"Id":"8760886115","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Opened issue \"Missing logo for MVVM Light Toolkit\" (#125) at dotnet/foundation","RelatedBody":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139"},{"Id":"8760884091","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Opened issue \"Missing logo for Umbraco\" (#124) at dotnet/foundation","RelatedBody":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151"},{"Id":"8760881728","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Opened issue \"Missing logo for Steeltoe\" (#123) at dotnet/foundation","RelatedBody":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130"},{"Id":"8760867764","Type":"PullRequestEvent","CreatedAt":"2018-12-16T11:40:46","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Opened pull request \"targets the existing document\" (#122) at dotnet/foundation","RelatedBody":""},{"Id":"8650911785","Type":"PullRequestEvent","CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Opened pull request \"Add Newtonsoft.Json\" (#121) at dotnet/foundation","RelatedBody":"// @jongalloway "},{"Id":"8645831625","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:50","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Merged pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645829054","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:23","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Merged pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8645355358","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:59:20","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Opened pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645349176","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:57:50","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Opened pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8637227393","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:32:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Merged pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."},{"Id":"8637225303","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:31:49","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Merged pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"},{"Id":"8582735181","Type":"IssuesEvent","CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Opened issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91) at dotnet/announcements","RelatedBody":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018[(https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8814317258","Type":"PullRequestEvent","CreatedAt":"2018-12-29T04:59:14","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21691","RelatedDescription":"Merged pull request \"Remove usages of GetCurrentUICultureNoAppX from ResourceManager\" (#21691) at dotnet/coreclr","RelatedBody":"- Makes GetString and GetObject internally consistent.\r\n- Matches the current behaviour of CoreRT, but avoids some unnecessary calls when FEATURE_APPX is used.\r\n\r\nDiscussion at https://github.com/dotnet/coreclr/pull/21672#discussion_r244213776"},{"Id":"8814146494","Type":"IssuesEvent","CreatedAt":"2018-12-29T02:40:55","Actor":"v-haren","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21701","RelatedDescription":"Opened issue \"Unhandled Exception: System.Exception: powershell.exe exited with error code 1\" (#21701) at dotnet/coreclr","RelatedBody":"failed in job: https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/release_2.1/job/sizeondisk_x64/327/\r\n\r\nfailed log:\r\na0006TZ\\runner@a0006TZ \"C:\\Users\\runner\\AppData\\Local\\Temp\\sod613de0f9-93ac\"\r\n[12/28/2018 8:06:56 PM] $ powershell.exe -NoProfile -ExecutionPolicy Bypass -File .\\Dotnet-Install.ps1 -Runtime dotnet -InstallDir .dotnet -Channel master -Architecture x64\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Runtime/3.0.0-preview-27228-2/dotnet-runtime-3.0.0-preview-27228-2-win-x64.zip\r\ndotnet-install: Copying file from C:\\Users\\runner\\AppData\\Local\\Temp\\sod613de0f9-93ac\\ to C:\\Users\\runner\\AppData\\Local\\Temp\\jjwm34zv.tyu\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Runtime/3.0.0-preview-27228-2/dotnet-runtime-3.0.0-preview-27228-2-win-x64.zip\r\nC:\\Users\\runner\\AppData\\Local\\Temp\\sod613de0f9-93ac\\Dotnet-Install.ps1 : Exception calling \"OpenRead\" with \"1\" \r\nargument(s): \"Access to the path 'C:\\Users\\runner\\AppData\\Local\\Temp\\jjwm34zv.tyu' is denied.\"\r\n    + CategoryInfo          : NotSpecified: (:) [Dotnet-Install.ps1], MethodInvocationException\r\n    + FullyQualifiedErrorId : UnauthorizedAccessException,Dotnet-Install.ps1\r\n \r\n\r\nUnhandled Exception: System.Exception: powershell.exe exited with error code 1\r\n   at SoDBench.Program.LaunchProcess(ProcessStartInfo processStartInfo, Int32 timeoutMilliseconds, IDictionary`2 environment)\r\n   at SoDBench.Program.InstallSharedRuntime()\r\n   at SoDBench.Program.SetupDotnet()\r\n   at SoDBench.Program.Main(String[] args)\r\n\r\n"},{"Id":"8813999663","Type":"PullRequestEvent","CreatedAt":"2018-12-29T00:56:35","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21700","RelatedDescription":"Opened pull request \"Refactor Send to Helix step in Azure DevOps\" (#21700) at dotnet/coreclr","RelatedBody":"1. Move all the test job submission logic into separate file **eng/send-to-helix-step.yml**. The idea is to have one platform-independent YAML step template for sending tests to Helix and declutter test-job.yml from duplication of the logic for Windows vs. non-Windows platforms. \r\n2. Pass IsExternal=true and Creator for public submissions\r\n3. Pass IsExternal=false and HelixAccessToken for internal submissions.\r\n4. Pass the parameters to MSBuild via environment. \r\n5. Make all the properties names passed to MSBuild from outside starting with underscore."},{"Id":"8813971678","Type":"PullRequestEvent","CreatedAt":"2018-12-29T00:36:52","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21699","RelatedDescription":"Opened pull request \"Bring Debug CRT DLLs when build IJW tests\" (#21699) at dotnet/coreclr","RelatedBody":"IJW tests must be dynamically linked against UCRT and vcruntime.\r\nWhen submitted to a Helix machine the tests would fail since there are no debug libraries installed in there.\r\n\r\nThis PR adds an ability to specify whether a Interop test needs Debug runtime libraries to be placed next to the test assembly by setting property `$(CopyDebugRuntimeDllsToOutputDirectory)`."},{"Id":"8813955960","Type":"IssuesEvent","CreatedAt":"2018-12-29T00:25:50","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21698","RelatedDescription":"Opened issue \"JIT\\superpmi\\superpmicollect is not designed for running outside of coreclr in-place-build\" (#21698) at dotnet/coreclr","RelatedBody":"Right now **JIT\\superpmi\\superpmicollect** depends on the three other test projects and their corresponding binaries \r\nhttps://github.com/dotnet/coreclr/blob/d70425ced81589ec5fe243da4425d7fc3426314c/tests/src/JIT/superpmi/superpmicollect.cs#L268-L270\r\n\r\nIn Azure DevOps during test job submission only a test folder (i.e. JIT\\supermi) and Core_Root are got deployed to a Helix machine. If we want to keep the test running in Azure DevOps we need to re-design the test (or disable it).\r\n\r\n/cc @dotnet/jit-contrib  "},{"Id":"8813381482","Type":"PullRequestEvent","CreatedAt":"2018-12-28T19:58:18","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21695","RelatedDescription":null,"RelatedBody":"Contributes to https://github.com/dotnet/coreclr/issues/19088"},{"Id":"8813381355","Type":"PullRequestEvent","CreatedAt":"2018-12-28T19:58:14","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21695","RelatedDescription":"Closed pull request \"Lazy alloc ThreadPool local queues\" (#21695) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/coreclr/issues/19088"},{"Id":"8813217419","Type":"PullRequestEvent","CreatedAt":"2018-12-28T18:58:43","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21622","RelatedDescription":"Merged pull request \"Replace Interop.ReadDir.cs with Interop.ReadDir.cs from System.IO.FileSystem\" (#21622) at dotnet/coreclr","RelatedBody":"Currently in CoreFX there are two `Interop.ReadDir.cs` with slightly different implementations\r\n[one](https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/Interop/Unix/System.Native/Interop.ReadDir.cs) is for [TimeZoneInfo.Unix.cs](https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/TimeZoneInfo.Unix.cs#L428) and [another one](https://github.com/dotnet/corefx/blob/master/src/Common/src/Interop/Unix/System.Native/Interop.ReadDir.cs) is for [FileSystemEnumerator.Unix.cs](https://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem/src/System/IO/Enumeration/FileSystemEnumerator.Unix.cs#L178-L179)\r\nThis PR basically removes one of them (the TimeZoneInfo's one)\r\n\r\nIt helps us in Mono because we can't have them two inside the mscorlib."},{"Id":"8813074058","Type":"PullRequestEvent","CreatedAt":"2018-12-28T18:06:58","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21697","RelatedDescription":"Opened pull request \"Fix warning causing error in warning as error (Windows)\" (#21697) at dotnet/coreclr","RelatedBody":"```\r\nLINK : warning LNK4266: missing load config symbol for image built with /GUARD \r\n[C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Checked\\src\\dlls\\clretwrc\\clretwrc.vcxproj]\r\n\r\nc:\\github\\coreclr\\src\\vm\\eventtrace.cpp(4432): warning C4800:\r\n 'BOOLEAN': forcing value to bool 'true' or 'false' (performance warning) \r\n[C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Checked\\src\\vm\\wks\\cee_wks.vcxproj]\r\n\r\nLINK : warning LNK4266: missing load config symbol for image built with /GUARD \r\n[C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Checked\\src\\dlls\\mscorrc\\small\\mscorrc.vcxproj]\r\nLINK : warning LNK4266: missing load config symbol for image built with /GUARD \r\n[C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Checked\\src\\dlls\\mscorrc\\full\\mscorrc.debug.vcxproj]\r\n\r\nc:\\github\\coreclr\\src\\vm\\eventtrace.cpp(4432): error C2220: warning treated as error - no 'object' file generated [C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Checked\\src\\vm\\wks\\cee_wks.vcxproj]\r\nCommand execution failed with exit code 1.\r\n```\r\n\r\nNot sure why I get these in local builds but CI doesn't get them?\r\n\r\n/cc @jkotas "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8814021354","Type":"PullRequestEvent","CreatedAt":"2018-12-29T01:12:06","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10524","RelatedDescription":"Opened pull request \"Add --interactive to dotnet tools\" (#10524) at dotnet/cli","RelatedBody":"fix https://github.com/dotnet/cli/issues/10231"},{"Id":"8813961598","Type":"IssuesEvent","CreatedAt":"2018-12-29T00:29:55","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10523","RelatedDescription":"Opened issue \"Remove workaround to output minimal when \"--interactive\" is used in dotnet tools\" (#10523) at dotnet/cli","RelatedBody":"when https://github.com/NuGet/NuGet.Client/pull/2577 is merge in CLI\r\n\r\nToday output quiet will break \"--interacitve\" experience since it will output nothing. However, minimal output will have the temp project path. After the above nuget change, minimal output will not have temp project path anymore, so the workaround can be removed"},{"Id":"8813958970","Type":"PullRequestEvent","CreatedAt":"2018-12-29T00:27:57","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10522","RelatedDescription":"Opened pull request \"Fixing the version for some of our packages\" (#10522) at dotnet/cli","RelatedBody":"Fixing the version for some of our packages that still referenced CLIVersionPrefix set.\r\n"},{"Id":"8813951124","Type":"PullRequestEvent","CreatedAt":"2018-12-29T00:22:48","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10510","RelatedDescription":"Merged pull request \"Add IsOutputRedirected to TelemetryCommonProperties\" (#10510) at dotnet/cli","RelatedBody":""},{"Id":"8813873705","Type":"PullRequestEvent","CreatedAt":"2018-12-28T23:35:09","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10520","RelatedDescription":"Merged pull request \"Repair the Absolutepath; part 2\" (#10520) at dotnet/cli","RelatedBody":"Addresses: #10293\r\n\r\nPR: https://github.com/dotnet/cli/pull/10512 was not complete\r\n \r\nChange:\r\nDo not cast 'Source' to a variable type - allow usage to do the typing; variable name is now: \"Source\" not: \"Uri\".\r\n\r\n@jerickmsft\r\n"},{"Id":"8813746445","Type":"IssuesEvent","CreatedAt":"2018-12-28T22:27:40","Actor":"robertmclaws","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10521","RelatedDescription":"Opened issue \"dotnet restore ignores PackageReferences in imported Projects\" (#10521) at dotnet/cli","RelatedBody":"This may be somewhat related to #7411. I'm trying to standardize my build environment against almost 2 dozen NuGet package projects in my enterprise, and using a build.props format similar to the [ASP.NET Core team](https://github.com/aspnet/AspNetCore/blob/master/Directory.Build.props) in order to do so. However, I've run into a significant limitation in the CLI/NuGet.\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a csproj file with `dotnet new classlib`.\r\n2. Create a file in the directory above it called `Test.build.props`, and add the following code:\r\n```\r\n  <PropertyGroup>\r\n    <IsBenchmarkProject Condition=\"$(MSBuildProjectName.EndsWith('.Performance'))\">true</IsBenchmarkProject>\r\n    <IsTestProject Condition=\"$(MSBuildProjectName.Contains('.Tests.'))\">true</IsTestProject>\r\n    <IsTestAssetProject Condition=\"$(RepoRelativeProjectDir.Contains('testassets'))\">true</IsTestAssetProject>\r\n    <IsSampleProject Condition=\"$(MSBuildProjectName.Contains('.Samples.'))\">true</IsSampleProject>\r\n    \r\n    <IncludeSource>false</IncludeSource>\r\n    <IncludeSymbols>true</IncludeSymbols>\r\n  </PropertyGroup>\r\n\r\n  <!-- Build NuGet packages for non-resource projects -->\r\n  <PropertyGroup Condition=\" '$(IsBenchmarkProject)' != 'true' And '$(IsTestProject)' != 'true' And '$(IsTestAssetProject)' != 'true' And '!$(IsSampleProject)' != 'true' and $(Configuration) != 'Release' \">\r\n    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>\r\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\r\n  </PropertyGroup>\r\n```\r\n3. Edit the first csproj file and add `<Import Project=\"..\\Test.build.props\" />` as the first line under the root node.\r\n4. Save the files and run `dotnet restore`. **Everything seems to be fine.**\r\n\r\nSo this is a great way to make sure that every project has identical properties for certain NuGet package properties and so forth. But let's say you want to unify your testing process and make it so that every Test project automatically references `FluentAssertions` and it's corresponding Roslyn Analyzer. \r\n\r\n5. Add the following code to `Test.build.props`:\r\n```\r\n  <!-- Build NuGet packages for non-resource projects -->\r\n  <ItemGroup Condition=\" '$(IsTestProject)' == 'true' \">\r\n    <PackageReference Include=\"FluentAssertions\" Version=\"5.5.3\" />\r\n    <PackageReference Include=\"FluentAssertions.Analyzers\" Version=\"0.11.4\" />\r\n  </ItemGroup>\r\n```\r\n6. Save the file and run `dotnet restore`.\r\n7. Navigate to the first project's `obj` folder and open `project.assets.json`.\r\n8. Search for \"Fluent\" in the file. **Note that it presently is not found.**\r\n\r\n## Expected behavior\r\nI would expect the CLI would see the project as a composite of all its' references, and find every PackageReference in the chain.\r\n\r\n## Actual behavior\r\nThe CLI apparently only reads the file passed in, and not any connected files, so it doesn't even know that other PackageReferences exist. The files will be missing from any restores, and dotnet build will fail.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n```\r\n\r\n\r\n"},{"Id":"8813736853","Type":"PullRequestEvent","CreatedAt":"2018-12-28T22:23:01","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10520","RelatedDescription":"Opened pull request \"Repair the Absolutepath; part 2\" (#10520) at dotnet/cli","RelatedBody":"Addresses: #10293\r\n\r\nPR: https://github.com/dotnet/cli/pull/10512 was not complete\r\n \r\nChange:\r\nDo not cast 'Source' to a variable type - allow usage to do the typing; variable name is now: \"Source\" not: \"Uri\".\r\n\r\n@jerickmsft\r\n"},{"Id":"8813605430","Type":"IssuesEvent","CreatedAt":"2018-12-28T21:25:58","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10517","RelatedDescription":"Closed issue \"Project name symbols are dropped in sln add command\" (#10517) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCould be reproed on my Windows 8.1 PC with existing public repo. The same works as expected on another Windows 10 PC.\r\n\r\n1. clone https://github.com/Azure/azure-powershell\r\n2. open cmd from this folder\r\n3. run `dotnet msbuild build.proj`\r\n\r\n## Expected  behavior\r\n\r\nBuild succeeded\r\n\r\n## Actual behavior\r\n\r\nBuild fails at `sln add` stage. Note missing symbol in error message (`ServiceBus\\ommands`) while full command contains correct path with 'C'. Random symbol is dropped depending on the branch selected.\r\nAnother note there is in case I try this command manually, it is truncated due to cmd command length restriction.\r\n\r\n```\r\nCould not find project or directory `D:\\PS\\azure-powershell\\src\\ResourceManager\\ServiceBus\\ommands.ServiceBus\\Commands.ServiceBus.Netcore.csproj`.\r\n \r\n```\r\n\r\nFull output:\r\n```\r\nD:\\PS\\azure-powershell>dotnet msbuild build.proj\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Building Cmdlets...\r\n  2.2.101\r\n  The template \"Solution File\" was created successfully.\r\n  Could not find project or directory `D:\\PS\\azure-powershell\\src\\ResourceManager\\ServiceBus\\ommands.ServiceBus\\Commands.ServiceBus.Netcore.csproj`.\r\n  Usage: dotnet sln <SLN_FILE> add [options] <PROJECT_PATH>\r\n\r\n  Arguments:\r\n    <SLN_FILE>       The solution file to operate on. If not specified, the command will search the current directory for one.\r\n    <PROJECT_PATH>   The paths to the projects to add to the solution.\r\n\r\n  Options:\r\n    -h, --help   Show command line help.\r\nD:\\PS\\azure-powershell\\build.proj(227,5): error MSB3073: The command \"dotnet sln Azure.PowerShell.sln add D:\\PS\\azure-powershell\\src\\ResourceManager\\Advisor\\Commands.Advisor\\Commands.Advisor.Netcore.c\r\nsproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Aks\\Commands.Aks\\Commands.Aks.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\AnalysisServices\\Commands.AnalysisServices.Dataplane\\Commands.A\r\nnalysisServices.Dataplane.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\AnalysisServices\\Commands.AnalysisServices\\Commands.AnalysisServices.Netcore.csproj D:\\PS\\azure-powershell\\src\\Resou\r\nrceManager\\ApiManagement\\Commands.ApiManagement.ServiceManagement\\Commands.ApiManagement.ServiceManagement.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ApiManagement\\Commands.ApiManagemen\r\nt\\Commands.ApiManagement.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ApplicationInsights\\Commands.ApplicationInsights\\Commands.ApplicationInsights.Netcore.csproj D:\\PS\\azure-powershell\\s\r\nrc\\ResourceManager\\Automation\\Commands.Automation\\Commands.Automation.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\AzureBatch\\BatchModelGenerator\\BatchModelGenerator.Netcore.csproj D:\\PS\\\r\nazure-powershell\\src\\ResourceManager\\AzureBatch\\Commands.Batch\\Commands.Batch.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Billing\\Commands.Billing\\Commands.Billing.Netcore.csproj D:\\PS\\a\r\nzure-powershell\\src\\ResourceManager\\Billing\\Commands.Consumption\\Commands.Consumption.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Billing\\Commands.UsageAggregates\\Commands.UsageAggregate\r\ns.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Cdn\\Commands.Cdn\\Commands.Cdn.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\CognitiveServices\\Commands.Management.CognitiveServi\r\nces\\Commands.Management.CognitiveServices.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Compute\\Commands.Compute\\Commands.Compute.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\\r\nContainerInstance\\Commands.ContainerInstance\\Commands.ContainerInstance.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ContainerRegistry\\Commands.ContainerRegistry\\Commands.ContainerRegistr\r\ny.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\DataFactoryV2\\Commands.DataFactories\\Commands.DataFactories.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\DataFactoryV2\\Commands\r\n.DataFactoryV2\\Commands.DataFactoryV2.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\DataLakeAnalytics\\Commands.DataLakeAnalytics\\Commands.DataLakeAnalytics.Netcore.csproj D:\\PS\\azure-power\r\nshell\\src\\ResourceManager\\DataLakeStore\\Commands.DataLakeStore\\Commands.DataLakeStore.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\DataMigration\\Commands.DataMigration\\Commands.DataMigrat\r\nion.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\DeviceProvisioningServices\\Commands.DeviceProvisioningServices\\Commands.DeviceProvisioningServices.Netcore.csproj D:\\PS\\azure-powershell\\s\r\nrc\\ResourceManager\\DevSpaces\\Commands.DevSpaces\\Commands.DevSpaces.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\DevTestLabs\\Commands.DevTestLabs\\Commands.DevTestLabs.Netcore.csproj D:\\PS\\\r\nazure-powershell\\src\\ResourceManager\\Dns\\Commands.Dns\\Commands.Dns.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\EventGrid\\Commands.EventGrid\\Commands.EventGrid.Netcore.csproj D:\\PS\\azure-\r\npowershell\\src\\ResourceManager\\EventHub\\Commands.EventHub\\Commands.EventHub.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\FrontDoor\\Commands.FrontDoor\\Commands.FrontDoor.Netcore.csproj D:\\\r\nPS\\azure-powershell\\src\\ResourceManager\\HDInsight\\Commands.HDInsight\\Commands.HDInsight.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Insights\\Commands.Insights\\Commands.Insights.Netcore.c\r\nsproj D:\\PS\\azure-powershell\\src\\ResourceManager\\IotCentral\\Commands.IotCentral\\Commands.IotCentral.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\IotHub\\Commands.IotHub\\Commands.IotHub.Net\r\ncore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\KeyVault\\Commands.KeyVault\\Commands.KeyVault.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Kusto\\Commands.Kusto\\Commands.Kusto.Netcor\r\ne.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\LogicApp\\Commands.LogicApp\\Commands.LogicApp.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\MachineLearning\\Commands.MachineLearningCompu\r\nte\\Commands.MachineLearningCompute.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\MachineLearning\\Commands.MachineLearning\\Commands.MachineLearning.Netcore.csproj D:\\PS\\azure-powershell\\src\r\n\\ResourceManager\\ManagedServiceIdentity\\Commands.ManagedServiceIdentity\\Commands.ManagedServiceIdentity.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ManagementPartner\\Commands.Partner\\Com\r\nmands.Partner.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Maps\\Commands.Maps\\Commands.Maps.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\MarketplaceOrdering\\Commands.Marketpl\r\naceOrdering\\Commands.MarketplaceOrdering.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Media\\Commands.Media\\Commands.Media.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Network\r\n\\Commands.Network\\Commands.Network.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\NotificationHubs\\Commands.NotificationHubs\\Commands.NotificationHubs.Netcore.csproj D:\\PS\\azure-powershell\\\r\nsrc\\ResourceManager\\OperationalInsights\\Commands.OperationalInsights\\Commands.OperationalInsights.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\PolicyInsights\\Commands.PolicyInsights\\Comma\r\nnds.PolicyInsights.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\PowerBIEmbedded\\Commands.Management.PowerBIEmbedded\\Commands.Management.PowerBIEmbedded.Netcore.csproj D:\\PS\\azure-powershe\r\nll\\src\\ResourceManager\\PowerBIEmbedded\\Commands.PowerBI\\Commands.PowerBI.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Profile\\Commands.Profile\\Commands.Profile.Netcore.csproj D:\\PS\\azure-\r\npowershell\\src\\ResourceManager\\RecoveryServices\\Commands.RecoveryServices.Backup.Helpers\\Commands.RecoveryServices.Backup.Helpers.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryServ\r\nices\\Commands.RecoveryServices.Backup.Logger\\Commands.RecoveryServices.Backup.Logger.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryServices\\Commands.RecoveryServices.Backup.Models\\\r\nCommands.RecoveryServices.Backup.Models.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryServices\\Commands.RecoveryServices.Backup.Providers\\Commands.RecoveryServices.Backup.Providers\r\n.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryServices\\Commands.RecoveryServices.Backup.ServiceClientAdapter\\Commands.RecoveryServices.Backup.ServiceClientAdapter.Netcore.csproj D\r\n:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryServices\\Commands.RecoveryServices.Backup\\Commands.RecoveryServices.Backup.Cmdlets.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryS\r\nervices\\Commands.RecoveryServices.SiteRecovery\\Commands.RecoveryServices.SiteRecovery.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryServices\\Commands.RecoveryServices\\Commands.Reco\r\nveryServices.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RedisCache\\Commands.RedisCache\\Commands.RedisCache.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Relay\\Commands.Relay\r\n\\Commands.Relay.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Reservations\\Commands.Reservations\\Commands.Reservations.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ResourceGra\r\nph\\Commands.ResourceGraph\\Commands.ResourceGraph.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Resources\\Commands.ResourceManager\\Cmdlets\\Commands.Resources.Rest.Netcore.csproj D:\\PS\\azure\r\n-powershell\\src\\ResourceManager\\Resources\\Commands.Resources\\Commands.Resources.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Resources\\Commands.Tags\\Commands.Tags.Netcore.csproj D:\\PS\\azu\r\nre-powershell\\src\\ResourceManager\\Search\\Commands.Management.Search\\Commands.Management.Search.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Security\\Commands.Security\\Commands.Security.Ne\r\ntcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ServiceBus\\Commands.ServiceBus\\Commands.ServiceBus.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ServiceFabric\\Commands.ServiceFabri\r\nc\\Commands.ServiceFabric.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\SignalR\\Commands.SignalR\\Commands.SignalR.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Sql\\Commands.Sql\\\r\nCommands.Sql.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Sql\\LegacySdk\\SqlManagement.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\StorageSync\\Commands.StorageSync\\Commands.S\r\ntorageSync.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Storage\\Commands.Management.Storage\\Commands.Management.Storage.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Storage\\C\r\nommands.Storage\\Commands.Storage.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\StreamAnalytics\\Commands.StreamAnalytics\\Commands.StreamAnalytics.Netcore.csproj D:\\PS\\azure-powershell\\src\\R\r\nesourceManager\\Subscription\\Commands.Subscription\\Commands.Subscription.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\TrafficManager\\Commands.TrafficManager2\\Commands.TrafficManager.Netcor\r\ne.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Websites\\Commands.Websites\\Commands.Websites.Netcore.csproj\" exited with code 1.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```"},{"Id":"8813600573","Type":"PullRequestEvent","CreatedAt":"2018-12-28T21:24:04","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10519","RelatedDescription":"Merged pull request \"Increasing the parallel legs for windows CI legs to 99.\" (#10519) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8805668276","Type":"PullRequestEvent","CreatedAt":"2018-12-26T21:14:18","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Merged pull request \"Fix representation of enum values\" (#1039) at dotnet/standard","RelatedBody":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***"},{"Id":"8789022646","Type":"IssuesEvent","CreatedAt":"2018-12-21T01:08:30","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036) at dotnet/standard","RelatedBody":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?"},{"Id":"8788973753","Type":"PullRequestEvent","CreatedAt":"2018-12-21T00:51:27","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Opened pull request \"Remove the manual config system\" (#1040) at dotnet/standard","RelatedBody":"Fixes https://github.com/dotnet/standard/issues/1032"},{"Id":"8788925569","Type":"PullRequestEvent","CreatedAt":"2018-12-21T00:34:02","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Opened pull request \"Fix representation of enum values\" (#1039) at dotnet/standard","RelatedBody":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n**This doesn't change any API surface but makes diffs more human readable.**"},{"Id":"8787632649","Type":"PullRequestEvent","CreatedAt":"2018-12-20T19:19:31","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Merged pull request \"Add APICompat run for NetStandard2.0\" (#1038) at dotnet/standard","RelatedBody":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029"},{"Id":"8787632638","Type":"IssuesEvent","CreatedAt":"2018-12-20T19:19:31","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1029","RelatedDescription":"Closed issue \"Add ApiCompat run for netstandard2.0\" (#1029) at dotnet/standard","RelatedBody":"We should add an APICompat run that checks against 2.0, similar the ones we already have for 1.0-1.6: https://github.com/dotnet/standard/blob/master/apicompat/baselines/ApiCompatBaseline.netstandard1.6.txt"},{"Id":"8787518101","Type":"PullRequestEvent","CreatedAt":"2018-12-20T18:56:41","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Opened pull request \"Add APICompat run for NetStandard2.0\" (#1038) at dotnet/standard","RelatedBody":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8814322330","Type":"PullRequestEvent","CreatedAt":"2018-12-29T05:03:25","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34269","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#34269) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo"},{"Id":"8814245195","Type":"IssuesEvent","CreatedAt":"2018-12-29T03:53:02","Actor":"lostmsu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34273","RelatedDescription":"Opened issue \"System.Range package similar to System.ValueTuple\" (#34273) at dotnet/corefx","RelatedBody":"My understanding is `System.Range` and `System.Index` are going to be .NET Core 3.0 specific features.\r\nThat prevents me from creating a library, that targets .NET Standard 2.0 (for I need to support .NET 4.7), and implements range indexers for the types defined in it.\r\n\r\nI think it is a huge problem, especially considering the next .NET Standard is not going to be implemented by .NET 4.8.\r\n\r\nAre there any plans to deal with it?\r\n\r\nIs the problem in the desire to implement range-based indexing for the core types like `System.Array`? If so, are there ways to work around that? Can .NET Core 3.0 instead define `System._Range`, and have hypothetical System.Range package implementing an implicit conversion `System._Range` -> `System.Range`? Any other alternatives?"},{"Id":"8813909452","Type":"IssuesEvent","CreatedAt":"2018-12-28T23:56:34","Actor":"wtgodbe","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29674","RelatedDescription":"Closed issue \"runtimeGroups.props is missing some new .NET Core 2.1 RIDs\" (#29674) at dotnet/corefx","RelatedBody":"While reading the [.NET Core 2.1 RC1 announcement](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/), I noticed that new linux distros and architectures are mentioned being supported in .NET Core 2.1.\r\n\r\nHowever, when I checked the current [runtimeGroups.props](https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtimeGroups.props) file, I noticed that it hasn't been updated to cover everything mentioned in the article.\r\n\r\nAlpine 3.8 needs to be added.\r\n\r\nIs Raspbian going to be a supported distro? It's completely missing from the file.\r\n\r\nI'd really like to make sure this gets updated for the final 2.1 release. Should I open a PR? If so, is there anything else not mentioned in the announcement article that should be added as well?\r\n\r\nCC: @weshaggard \r\n\r\n"},{"Id":"8813896432","Type":"IssuesEvent","CreatedAt":"2018-12-28T23:48:35","Actor":"wtgodbe","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29270","RelatedDescription":"Closed issue \"Dumpling documentation points to empty website\" (#29270) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/blob/master/Documentation/debugging/crash-dumps.md has link to https://dumpling.azurewebsites.net/ . This is a empty website.\r\n\r\nWhat is the up to date way to get dumpling crash dumps for corefx?"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8814297306","Type":"IssuesEvent","CreatedAt":"2018-12-29T04:40:08","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32054","RelatedDescription":"Opened issue \"Default Interface Method Base Calls\" (#32054) at dotnet/roslyn","RelatedBody":"[The LDM decided](https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-11-14.md#default-interface-implementations) on the base invocation syntax `base(N.I1<T>).M(s)`.  We also decided that the syntax should be permitted in classes (e.g. to invoke an implementation from a skip-base class or a base interface).\r\n\r\nThis needs to be implemented in the compiler.  Also, we need to decide on an implementation strategy.  What IL would that generate?  Since interface implementations are currently private methods, it may require further CLR changes."},{"Id":"8814275657","Type":"IssuesEvent","CreatedAt":"2018-12-29T04:19:06","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32053","RelatedDescription":"Opened issue \"Bootstrap build produces error about DisableSdkPath\" (#32053) at dotnet/roslyn","RelatedBody":"`build -bootstrap`\r\n\r\n```\r\n...\r\nBuild FAILED.\r\n\r\nC:\\repos\\roslyn\\artifacts\\Bootstrap\\tools\\Microsoft.CSharp.Core.targets(68,10): error MSB4064: The \"DisableSdkPath\" parameter is not supported by the \"Csc\" task. Verify the parameter exists on the task, and it is a settable public instance property. [C:\\repos\\roslyn\\src\\EditorFeatures\\Core.Wpf\\Microsoft.CodeAnalysis.EditorFeatures.Wpf_xaaf1u5k_wpftmp.csproj]\r\nC:\\repos\\roslyn\\artifacts\\Bootstrap\\tools\\Microsoft.CSharp.Core.targets(52,5): error MSB4063: The \"Csc\" task could not be initialized with its input parameters.  [C:\\repos\\roslyn\\src\\EditorFeatures\\Core.Wpf\\Microsoft.CodeAnalysis.Editor\r\nFeatures.Wpf_xaaf1u5k_wpftmp.csproj]\r\n```\r\n\r\nTagging @RikkiGibson @jaredpar as FYI"},{"Id":"8814204136","Type":"PullRequestEvent","CreatedAt":"2018-12-29T03:22:07","Actor":"chsienki","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32052","RelatedDescription":"Opened pull request \"Restrict using pattern\" (#32052) at dotnet/roslyn","RelatedBody":"Restrict using pattern to only ref structs:\r\n- Only run run pattern lookup for ref structs\r\n- Fix valid tests\r\n- Remove invalid tests"},{"Id":"8814175774","Type":"PullRequestEvent","CreatedAt":"2018-12-29T03:01:42","Actor":"jp2masa","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32051","RelatedDescription":"Opened pull request \"Fixed adding attribute list with target specifier\" (#32051) at dotnet/roslyn","RelatedBody":"Fixes #27200\r\n\r\n## Changes\r\n- Fixed adding attribute list with target specifier."},{"Id":"8814091155","Type":"PullRequestEvent","CreatedAt":"2018-12-29T02:01:04","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31954","RelatedDescription":"Merged pull request \"Merge master into features/recursive-patterns\" (#31954) at dotnet/roslyn","RelatedBody":""},{"Id":"8814083300","Type":"IssuesEvent","CreatedAt":"2018-12-29T01:55:40","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32043","RelatedDescription":"Closed issue \"CFG produced for switch expression fails CFG verifier\" (#32043) at dotnet/roslyn","RelatedBody":"See test `SwitchExpression_BasicFlow` in the `features/recursive-patterns` branch, which is skipped with this issue.\r\n\r\nThe CFG currently produced for a switch expression fails the flow graph verifier.  I don't know if it is a problem with the flow graph produced or a problem with the verifier.  Either way, this is preventing us from having adequate test coverage.\r\n\r\nSee https://github.com/dotnet/roslyn/pull/32018 where the relevant implementation and tests were introduced."},{"Id":"8814047255","Type":"PullRequestEvent","CreatedAt":"2018-12-29T01:30:06","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32049","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#32049) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8814023088","Type":"PullRequestEvent","CreatedAt":"2018-12-29T01:13:21","Actor":"chsienki","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31980","RelatedDescription":"Merged pull request \"Await using declarations\" (#31980) at dotnet/roslyn","RelatedBody":"- Add syntax, binding and lowering for await using declarations\r\n- Add tests"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8813224658","Type":"PullRequestEvent","CreatedAt":"2018-12-28T19:01:14","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6739","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6739) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8813220429","Type":"PullRequestEvent","CreatedAt":"2018-12-28T18:59:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6738","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6738) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe"},{"Id":"8813036390","Type":"PullRequestEvent","CreatedAt":"2018-12-28T17:53:39","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6738","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6738) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8812141144","Type":"PullRequestEvent","CreatedAt":"2018-12-28T13:11:41","Actor":"filipnavara","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6726","RelatedDescription":"Closed pull request \"WIP: Move CultureInfo to shared CoreLib\" (#6726) at dotnet/corert","RelatedBody":"Counterpart to https://github.com/dotnet/coreclr/pull/21672"},{"Id":"8810894625","Type":"IssuesEvent","CreatedAt":"2018-12-28T06:20:28","Actor":"ashishnegi","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6737","RelatedDescription":"Opened issue \"Dotnet 2.1 app crashing with duplicate key in environment variable\" (#6737) at dotnet/corert","RelatedBody":"In a particular setup, `Environment.GetEnvironmentVariables();` in dotnet 2.1 `Linux` apps is throwing :\r\n\r\n```cs\r\nSystem.ArgumentException: Item has already been added. Key in dictionary: 'LD_LIBRARY_PATH'  Key being added: 'LD_LIBRARY_PATH'\r\n   at System.Collections.Hashtable.Insert(Object key, Object nvalue, Boolean add)\r\n   at System.Environment.ToHashtable(IEnumerable`1 pairs)\r\n   at Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.Load()\r\n   at Microsoft.Extensions.Configuration.ConfigurationRoot..ctor(IList`1 providers)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()\r\n   at SInnovations.ServiceFabric.RegistrationMiddleware.AspNetCore.FabricContainer..ctor(ServiceCollection services) in C:\\dev\\ServiceFabricGateway\\src\\S-Innovations.ServiceFabric.RegistrationMiddleware.AspNetCore\\FabricContainer.cs:line 172\r\n   at SInnovations.ServiceFabric.GatewayService.Program.Main(String[] args) in C:\\dev\\ServiceFabricGateway\\apps\\S-Innovations.ServiceFabric.GatewayService\\Program.cs:line 78adminuser@nt1vm000001:/mnt/sfroot/_App/S-Innovations.ServiceFabric.GatewayApplicationType_App6/S-InnoPkg.Code.1.0.0$ abric.GatewayServiceP\r\n```\r\n\r\nIf I print command `env` from same bash script that starts `dotnet app.dll`, I see only one `LD_LIBRARY_PATH`.\r\nWhen I use reflection to print the `KeyValuePair`s from `EnvironmentAugments.EnumerateEnvironmentVariables()`  (reference [here](https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Extensions/src/System/Environment.cs#L34)), I see 2 values for LD_LIBARRY_PATH`.\r\n\r\n**Note** : The app works fine if I use dotnet 2.0 runtime.\r\n\r\nIs this our setup bug or dotnet 2.1 bug ? "},{"Id":"8810679418","Type":"PullRequestEvent","CreatedAt":"2018-12-28T04:37:00","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6736","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#6736) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas"},{"Id":"8810495720","Type":"PullRequestEvent","CreatedAt":"2018-12-28T03:06:50","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6736","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#6736) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"8809791413","Type":"PullRequestEvent","CreatedAt":"2018-12-27T21:47:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6730","RelatedDescription":"Merged pull request \"Add `--tokens` option to command line\" (#6730) at dotnet/corert","RelatedBody":"contributes to https://github.com/dotnet/corert/issues/6694\r\nStep forward added `--tokens` options to command line and flow to internal verifiers.\r\n\r\n/cc @jkotas @MichalStrehovsky \r\n\r\n:christmas_tree: Merry Christmas!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2018-12-16T11:40:46","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Open PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"open","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Open PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"294070713","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:02","Actor":"karann-msft","Number":"98","RawContent":null,"Title":"Updates to reflect the latest information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/98","RelatedDescription":"Closed or merged PR \"Updates to reflect the latest information\" (#98)"},{"Id":"316146229","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:34","Actor":"Cheesebaron","Number":"100","RawContent":null,"Title":"Create mvvmcross.md","State":"closed","Body":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415","Url":"https://github.com/dotnet/foundation/pull/100","RelatedDescription":"Closed or merged PR \"Create mvvmcross.md\" (#100)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"},{"Id":"293777118","IsPullRequest":true,"CreatedAt":"2018-03-29T07:03:03","Actor":"mairaw","Number":"97","RawContent":null,"Title":"update CLA PDF link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/97","RelatedDescription":"Closed or merged PR \"update CLA PDF link\" (#97)"},{"Id":"307656482","IsPullRequest":false,"CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Number":"99","RawContent":null,"Title":"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux ","State":"open","Body":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n","Url":"https://github.com/dotnet/foundation/issues/99","RelatedDescription":"Open issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"394498466","IsPullRequest":true,"CreatedAt":"2018-12-29T04:59:14","Actor":"filipnavara","Number":"21691","RawContent":null,"Title":"Remove usages of GetCurrentUICultureNoAppX from ResourceManager","State":"closed","Body":"- Makes GetString and GetObject internally consistent.\r\n- Matches the current behaviour of CoreRT, but avoids some unnecessary calls when FEATURE_APPX is used.\r\n\r\nDiscussion at https://github.com/dotnet/coreclr/pull/21672#discussion_r244213776","Url":"https://github.com/dotnet/coreclr/pull/21691","RelatedDescription":"Closed or merged PR \"Remove usages of GetCurrentUICultureNoAppX from ResourceManager\" (#21691)"},{"Id":"394753537","IsPullRequest":false,"CreatedAt":"2018-12-29T02:40:55","Actor":"v-haren","Number":"21701","RawContent":null,"Title":"Unhandled Exception: System.Exception: powershell.exe exited with error code 1","State":"open","Body":"failed in job: https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/release_2.1/job/sizeondisk_x64/327/\r\n\r\nfailed log:\r\na0006TZ\\runner@a0006TZ \"C:\\Users\\runner\\AppData\\Local\\Temp\\sod613de0f9-93ac\"\r\n[12/28/2018 8:06:56 PM] $ powershell.exe -NoProfile -ExecutionPolicy Bypass -File .\\Dotnet-Install.ps1 -Runtime dotnet -InstallDir .dotnet -Channel master -Architecture x64\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Runtime/3.0.0-preview-27228-2/dotnet-runtime-3.0.0-preview-27228-2-win-x64.zip\r\ndotnet-install: Copying file from C:\\Users\\runner\\AppData\\Local\\Temp\\sod613de0f9-93ac\\ to C:\\Users\\runner\\AppData\\Local\\Temp\\jjwm34zv.tyu\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Runtime/3.0.0-preview-27228-2/dotnet-runtime-3.0.0-preview-27228-2-win-x64.zip\r\nC:\\Users\\runner\\AppData\\Local\\Temp\\sod613de0f9-93ac\\Dotnet-Install.ps1 : Exception calling \"OpenRead\" with \"1\" \r\nargument(s): \"Access to the path 'C:\\Users\\runner\\AppData\\Local\\Temp\\jjwm34zv.tyu' is denied.\"\r\n    + CategoryInfo          : NotSpecified: (:) [Dotnet-Install.ps1], MethodInvocationException\r\n    + FullyQualifiedErrorId : UnauthorizedAccessException,Dotnet-Install.ps1\r\n \r\n\r\nUnhandled Exception: System.Exception: powershell.exe exited with error code 1\r\n   at SoDBench.Program.LaunchProcess(ProcessStartInfo processStartInfo, Int32 timeoutMilliseconds, IDictionary`2 environment)\r\n   at SoDBench.Program.InstallSharedRuntime()\r\n   at SoDBench.Program.SetupDotnet()\r\n   at SoDBench.Program.Main(String[] args)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/21701","RelatedDescription":"Open issue \"Unhandled Exception: System.Exception: powershell.exe exited with error code 1\" (#21701)"},{"Id":"394745581","IsPullRequest":true,"CreatedAt":"2018-12-29T00:56:35","Actor":"echesakovMSFT","Number":"21700","RawContent":null,"Title":"Refactor Send to Helix step in Azure DevOps","State":"open","Body":"1. Move all the test job submission logic into separate file **eng/send-to-helix-step.yml**. The idea is to have one platform-independent YAML step template for sending tests to Helix and declutter test-job.yml from duplication of the logic for Windows vs. non-Windows platforms. \r\n2. Pass IsExternal=true and Creator for public submissions\r\n3. Pass IsExternal=false and HelixAccessToken for internal submissions.\r\n4. Pass the parameters to MSBuild via environment. \r\n5. Make all the properties names passed to MSBuild from outside starting with underscore.\r\n6. Specify HelixArchitecture and HelixConfiguration properties","Url":"https://github.com/dotnet/coreclr/pull/21700","RelatedDescription":"Open PR \"Refactor Send to Helix step in Azure DevOps\" (#21700)"},{"Id":"394743981","IsPullRequest":true,"CreatedAt":"2018-12-29T00:36:52","Actor":"echesakovMSFT","Number":"21699","RawContent":null,"Title":"Bring Debug CRT DLLs when build IJW tests","State":"open","Body":"IJW tests must be dynamically linked against UCRT and vcruntime.\r\nWhen submitted to a Helix machine the tests would fail since there are no debug libraries installed in there.\r\n\r\nThis PR adds an ability to specify whether a Interop test needs Debug runtime libraries to be placed next to the test assembly by setting property `$(CopyDebugRuntimeDllsToOutputDirectory)`.","Url":"https://github.com/dotnet/coreclr/pull/21699","RelatedDescription":"Open PR \"Bring Debug CRT DLLs when build IJW tests\" (#21699)"},{"Id":"394743044","IsPullRequest":false,"CreatedAt":"2018-12-29T00:25:50","Actor":"echesakovMSFT","Number":"21698","RawContent":null,"Title":"JIT\\superpmi\\superpmicollect is not designed for running outside of coreclr in-place-build","State":"open","Body":"**JIT\\superpmi\\superpmicollect** depends on the three following test projects being built and placed next to JIT\\superpmi folder\r\nhttps://github.com/dotnet/coreclr/blob/d70425ced81589ec5fe243da4425d7fc3426314c/tests/src/JIT/superpmi/superpmicollect.cs#L268-L270\r\n\r\nIn Azure DevOps during test job submission only a test folder (i.e. JIT\\supermi) and Core_Root are got deployed to a Helix machine. If we want to keep the test running in Azure DevOps we need to re-design the test (or disable it).\r\n\r\n/cc @dotnet/jit-contrib  \r\n\r\n**Example of failure:**\r\n```\r\nxUnit.net Console Runner v2.4.1 (64-bit .NET Core 4.6.27226.0)\r\n  Discovering: JIT.superpmi.XUnitWrapper\r\n  Discovered:  JIT.superpmi.XUnitWrapper\r\n  Starting:    JIT.superpmi.XUnitWrapper\r\n    JIT_superpmi._superpmicollect_superpmicollect_._superpmicollect_superpmicollect_cmd [FAIL]\r\n      ERROR: we expect the current directory when the test is run to be within the JIT test binaries tree, but it is not: C:\\dotnetbuild\\work\\9e903c31-ba08-443b-bf9c-ee461aed4165\\Work\\86fc3baa-585a-4c45-a793-cc49932f1bd0\\Unzip\\superpmicollect\r\n      \r\n\r\nReturn code:      1\r\nRaw output file:      C:\\dotnetbuild\\work\\9e903c31-ba08-443b-bf9c-ee461aed4165\\Work\\86fc3baa-585a-4c45-a793-cc49932f1bd0\\Unzip\\Reports\\JIT.superpmi\\superpmicollect\\superpmicollect.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\9e903c31-ba08-443b-bf9c-ee461aed4165\\Payload\\corerun.exe\" superpmicollect.exe \r\n      SuperPMI collection and playback - BEGIN\r\n      Setting environment variables:\r\n          SuperPMIShimLogPath=C:\\Users\\runner\\AppData\\Local\\Temp\\u4k1xwyg.fxySPMI\r\n          SuperPMIShimPath=C:\\dotnetbuild\\work\\9e903c31-ba08-443b-bf9c-ee461aed4165\\Payload\\clrjit.dll\r\n          COMPlus_AltJit=*\r\n          COMPlus_AltJitName=superpmi-shim-collector.dll\r\n      SuperPMI collection and playback - FAILED\r\n      Expected: 100\r\n      Actual: 101\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      \r\nTo run the test:\r\n> set CORE_ROOT=C:\\dotnetbuild\\work\\9e903c31-ba08-443b-bf9c-ee461aed4165\\Payload\r\n> C:\\dotnetbuild\\work\\9e903c31-ba08-443b-bf9c-ee461aed4165\\Work\\86fc3baa-585a-4c45-a793-cc49932f1bd0\\Unzip\\superpmicollect\\superpmicollect.cmd\r\n\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n\r\n        D:\\git\\coreclr2\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\JIT.superpmi\\JIT.superpmi.XUnitWrapper.cs(109,0): at JIT_superpmi._superpmicollect_superpmicollect_._superpmicollect_superpmicollect_cmd()\r\n  Finished:    JIT.superpmi.XUnitWrapper\r\n=== TEST EXECUTION SUMMARY ===\r\n   JIT.superpmi.XUnitWrapper  Total: 1, Errors: 0, Failed: 1, Skipped: 0, Time: 2.219s\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21698","RelatedDescription":"Open issue \"JIT\\superpmi\\superpmicollect is not designed for running outside of coreclr in-place-build\" (#21698)"},{"Id":"394690705","IsPullRequest":true,"CreatedAt":"2018-12-28T18:06:57","Actor":"benaadams","Number":"21697","RawContent":null,"Title":"Fix warning causing error in warning as error (Windows)","State":"open","Body":"```\r\nLINK : warning LNK4266: missing load config symbol for image built with /GUARD \r\n[C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Checked\\src\\dlls\\clretwrc\\clretwrc.vcxproj]\r\n\r\nc:\\github\\coreclr\\src\\vm\\eventtrace.cpp(4432): warning C4800:\r\n 'BOOLEAN': forcing value to bool 'true' or 'false' (performance warning) \r\n[C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Checked\\src\\vm\\wks\\cee_wks.vcxproj]\r\n\r\nLINK : warning LNK4266: missing load config symbol for image built with /GUARD \r\n[C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Checked\\src\\dlls\\mscorrc\\small\\mscorrc.vcxproj]\r\nLINK : warning LNK4266: missing load config symbol for image built with /GUARD \r\n[C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Checked\\src\\dlls\\mscorrc\\full\\mscorrc.debug.vcxproj]\r\n\r\nc:\\github\\coreclr\\src\\vm\\eventtrace.cpp(4432): error C2220: warning treated as error - no 'object' file generated [C:\\GitHub\\coreclr\\bin\\obj\\Windows_NT.x64.Checked\\src\\vm\\wks\\cee_wks.vcxproj]\r\nCommand execution failed with exit code 1.\r\n```\r\n\r\nNot sure why I get these in local builds but CI doesn't get them?\r\n\r\n/cc @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/21697","RelatedDescription":"Open PR \"Fix warning causing error in warning as error (Windows)\" (#21697)"},{"Id":"394389331","IsPullRequest":true,"CreatedAt":"2018-12-28T14:46:24","Actor":"dotnet-maestro[bot]","Number":"21686","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18621.6\r\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18621.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18621.6\r\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18621.6\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/21686","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#21686)"},{"Id":"394566675","IsPullRequest":false,"CreatedAt":"2018-12-28T07:15:34","Actor":"dotnet-mc-bot","Number":"21696","RawContent":null,"Title":"Test failure: GC_Features._HeapExpansion_plug_plug_/_HeapExpansion_plug_plug_cmd","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `GC_Features._HeapExpansion_plug_plug_/_HeapExpansion_plug_plug_cmd` has failed.\n\nFailure Message:\n```\n\ncmdLine:/home/helixbot/dotnetbuild/work/8cd58f2e-311c-4f62-a4a4-3a28f2acb243/Work/2b7f6787-19f7-4432-9d74-a0027a7c3b9e/Unzip/HeapExpansion/plug/plug.sh Timed Out\n\n\nReturn code:      -100\nRaw output file:      /home/helixbot/dotnetbuild/work/8cd58f2e-311c-4f62-a4a4-3a28f2acb243/Work/2b7f6787-19f7-4432-9d74-a0027a7c3b9e/Unzip/Reports\\\\GC.Features\\\\HeapExpansion\\\\plug\\\\plug.output.txt\nRaw output:\nBEGIN EXECUTION\n/home/helixbot/dotnetbuild/work/8cd58f2e-311c-4f62-a4a4-3a28f2acb243/Payload/corerun plug.exe\nRunning 100 iterations\n\ncmdLine:/home/helixbot/dotnetbuild/work/8cd58f2e-311c-4f62-a4a4-3a28f2acb243/Work/2b7f6787-19f7-4432-9d74-a0027a7c3b9e/Unzip/HeapExpansion/plug/plug.sh Timed Out\nTest Harness Exitcode is : -100\n\nTo run the test:\n> set CORE_ROOT=/home/helixbot/dotnetbuild/work/8cd58f2e-311c-4f62-a4a4-3a28f2acb243/Payload\n> /home/helixbot/dotnetbuild/work/8cd58f2e-311c-4f62-a4a4-3a28f2acb243/Work/2b7f6787-19f7-4432-9d74-a0027a7c3b9e/Unzip/HeapExpansion/plug/plug.sh\n\nExpected: True\nActual:   False\n```\n\nStack Trace:\n```\n   at GC_Features._HeapExpansion_plug_plug_._HeapExpansion_plug_plug_cmd() in E:\\A\\_work\\174\\s\\bin\\tests\\Windows_NT.x64.Release\\TestWrappers\\GC.Features\\GC.Features.XUnitWrapper.cs:line 1231\n```\n\nBuild : 3.0 - 20181228.01 (Core Tests)\nFailing configurations:\n- Alpine.36.Amd64-x64\n  - \nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20181228.01/workItem/GC.Features.XUnitWrapper/analysis/xunit/GC_Features._HeapExpansion_plug_plug_~2F_HeapExpansion_plug_plug_cmd","Url":"https://github.com/dotnet/coreclr/issues/21696","RelatedDescription":"Open issue \"Test failure: GC_Features._HeapExpansion_plug_plug_/_HeapExpansion_plug_plug_cmd\" (#21696)"},{"Id":"394560975","IsPullRequest":true,"CreatedAt":"2018-12-28T06:41:06","Actor":"benaadams","Number":"21695","RawContent":null,"Title":"Lazy alloc ThreadPool local queues","State":"open","Body":"Defer local queue creation (and add to list of local queues to steal from) to first local item queued to that thread rather than thread creation.\r\n\r\nThis means if 300 threadpool threads are active but no local queuing has happened; there will be no time spent checking if there is something to steal from other threads.\r\n\r\nThis is using an assumption that for the scenario outlined in https://github.com/dotnet/coreclr/issues/19088; that if you are using a MinWorkerThreads an order of magnitude higher than CPU count (x10 - x20) to get work done then you are less likely to be queuing local items to these 160-320 threads; so adding their queues to the list of queues to check can be deferred until something is queued.\r\n\r\nAlso am only going for \"Contributes to\" rather than \"Resolves\" as it could quickly return to every thread having a queue based on the workload (e.g. releases of blocked `SemaphoreSlim.WaitAsync` which queue locally)\r\n\r\nShould also improve the performance for apps that use the threadpool, but only use the global queue and never end up queuing items to the thread's local queues for the app lifetime - though not sure how common that would be?* \r\n\r\n*Could perhaps remove a local queue if its not had anything on it for a while.\r\n\r\nContributes to https://github.com/dotnet/coreclr/issues/19088\r\n\r\n/cc @stephentoub @vancem @kouvel @VSadov ","Url":"https://github.com/dotnet/coreclr/pull/21695","RelatedDescription":"Open PR \"Lazy alloc ThreadPool local queues\" (#21695)"},{"Id":"394534924","IsPullRequest":true,"CreatedAt":"2018-12-28T04:37:19","Actor":"Dotnet-GitSync-Bot","Number":"21694","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/coreclr/pull/21694","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#21694)"},{"Id":"394534462","IsPullRequest":false,"CreatedAt":"2018-12-28T03:02:51","Actor":"echesakovMSFT","Number":"21693","RawContent":null,"Title":"CoInitializeEx returns E_NOTIMPL (0x80004001) on Windows Nano Server","State":"open","Body":"It seems that on Windows Nano Server `CoInitializeEx(NULL, COINIT_APARTMENTTHREADED)` returns ` E_NOTIMPL (0x80004001)` which causes almost immediate failure of Checked coreclr with the following assertion at https://github.com/dotnet/coreclr/blob/master/src/vm/threads.cpp#L5259\r\n\r\n```\r\nExecuted on nano1709c000B98\r\n\r\nAssert failure(PID 2088 [0x00000828], Thread: 3312 [0x0cf0]): !\"Unexpected HRESULT returned from CoInitializeEx!\"\r\n\r\nCORECLR! GetCLRRuntimeHost + 0xD9169 (0x00007ff9`f3d88bd9)\r\nCORECLR! GetCLRRuntimeHost + 0x2ED350 (0x00007ff9`f3f9cdc0)\r\nCORECLR! GetCLRRuntimeHost + 0xE56B1 (0x00007ff9`f3d95121)\r\nCORECLR! coreclr_shutdown_2 + 0x7AB4A (0x00007ff9`f3ca9a2a)\r\nCORERUN! <no symbol> + 0x0 (0x00007ff6`42626166)\r\nCORERUN! <no symbol> + 0x0 (0x00007ff6`42627626)\r\nCORERUN! <no symbol> + 0x0 (0x00007ff6`4264f594)\r\nCORERUN! <no symbol> + 0x0 (0x00007ff6`4264f4be)\r\nCORERUN! <no symbol> + 0x0 (0x00007ff6`4264f37e)\r\nCORERUN! <no symbol> + 0x0 (0x00007ff6`4264f609)\r\n\r\n    File: d:\\git\\coreclr2\\src\\vm\\threads.cpp Line: 5259\r\n\r\n    Image: C:\\work\\865cd393-0258-4fdd-9d5d-ee8e2ed14dda\\Payload\\corerun.exe\r\n\r\nCORE_ROOT=C:\\work\\865cd393-0258-4fdd-9d5d-ee8e2ed14dda\\Payload\r\n\r\nBEGIN EXECUTION\r\n\r\nC:\\work\\865cd393-0258-4fdd-9d5d-ee8e2ed14dda\\Payload\\corerun.exe C:\\work\\865cd393-0258-4fdd-9d5d-ee8e2ed14dda\\Payload\\xunit.console.dll C:\\work\\865cd393-0258-4fdd-9d5d-ee8e2ed14dda\\Work\\c3b6e807-e614-40b9-97c2-cdabc4e814ca\\Unzip\\baseservices.compilerservices.XUnitWrapper.dll -noshadow -xml testResults.xml -notrait category=outerloop -notrait category=failing\r\n\r\nFinished running tests. Exit code = -1073740286\r\n```\r\n\r\nShouldn't VM handle the case of E_NOTIMPL as well?\r\n\r\n\r\n**Steps to reproduce**:\r\n1. `build.cmd x64 checked`\r\n2. `build-test.cmd x64 checked`\r\n3. *(using Docker for Windows assuming coreclr repo is cloned to D:\\git\\coreclr)*\r\n```\r\ndocker run --rm -it -v D:\\git\\coreclr:C:\\git\\coreclr -e CORE_ROOT=C:\\git\\coreclr\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root -w C:\\git\\coreclr\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root mcr.microsoft.com/windows/nanoserver:latest CoreRun.exe xunit.console.dll C:\\git\\coreclr\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\IJW\\Interop.IJW.XUnitWrapper.dll -noshadow -xml testResults.xml -notrait category=outerloop -notrait category=failing\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21693","RelatedDescription":"Open issue \"CoInitializeEx returns E_NOTIMPL (0x80004001) on Windows Nano Server\" (#21693)"},{"Id":"394502187","IsPullRequest":false,"CreatedAt":"2018-12-27T22:37:22","Actor":"wadebaird","Number":"21692","RawContent":null,"Title":"StackOverflowException occurs in Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync in .Net Core 2.2","State":"open","Body":"Got this when moving from 2.1 to 2.2. Everything worked fine in 2.1.\r\n\r\nHere is the callstack:\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.ModelNames.CreatePropertyModelName(string prefix, string propertyName) Line 40\tC#\r\n>\tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindAnyModelProperties(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 326\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanCreateModel(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 267\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 102\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.Internal.PlaceholderBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 19\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 233\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelCoreAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 154\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 106\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.Internal.PlaceholderBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 19\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 233\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelCoreAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 154\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 106\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.Internal.PlaceholderBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 19\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 233\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelCoreAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 154\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 106\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.Internal.PlaceholderBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 19\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 233\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelCoreAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 154\tC#\r\n \tMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) Line 106\tC#\r\n\r\nHere is the value of bindingContext.ModelName in CanBindAnyModelProperties: \r\n\"MenuItem.ParentMenuItem.ParentMenuItem.ParentMenuItem. ...(lots of ParentMenuItem).. .ParentMenuItem.ParentMenuItem\"\r\n\r\nIt is in an ASPNet Core delete page for our MenuItem TableEntity and it has a reference to a ParentMenuItem:\r\n\r\n`public MenuItem ParentMenuItem { get; set; }`\r\n\r\nI have verified there is not a circular reference in the MenuItem data structure. I can provide the code but this should be reproducable in a simple single entity app. \r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/21692","RelatedDescription":"Open issue \"StackOverflowException occurs in Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync in .Net Core 2.2\" (#21692)"},{"Id":"394460918","IsPullRequest":false,"CreatedAt":"2018-12-27T20:48:38","Actor":"sebastienros","Number":"21690","RawContent":null,"Title":"StackOverflowException in Popcnt with self-contained apps","State":"closed","Body":"Using the latest CLR version, when publishing a self-contained \"hello world\" app in ASP.NET we get an SO on the very first request. It repros on both win and lin. \r\n\r\nDebugging it shows this trace:\r\n\r\n```\r\n000000c93163c210 00007ff99787c5af (MethodDesc 00007ff9978f35b0 + 0xf System.Runtime.Intrinsics.X86.Popcnt+X64.get_IsSupported()), calling (MethodDesc 00007ff9978f35b0 + 0 System.Runtime.Intrinsics.X86.Popcnt+X64.get_IsSupported())\r\n000000c93163c240 00007ff99787c5af (MethodDesc 00007ff9978f35b0 + 0xf System.Runtime.Intrinsics.X86.Popcnt+X64.get_IsSupported()), calling (MethodDesc 00007ff9978f35b0 + 0 System.Runtime.Intrinsics.X86.Popcnt+X64.get_IsSupported())\r\n...\r\n```\r\n\r\nProbably this: https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Runtime/Intrinsics/X86/Popcnt.cs#L23\r\n\r\n/cc @tannergooding @fiigii ","Url":"https://github.com/dotnet/coreclr/issues/21690","RelatedDescription":"Closed issue \"StackOverflowException in Popcnt with self-contained apps\" (#21690)"},{"Id":"394405894","IsPullRequest":true,"CreatedAt":"2018-12-27T19:11:58","Actor":"Dotnet-GitSync-Bot","Number":"21689","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/coreclr/pull/21689","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#21689)"},{"Id":"394402784","IsPullRequest":false,"CreatedAt":"2018-12-27T14:03:47","Actor":"dancrn","Number":"21688","RawContent":null,"Title":"`DateTimeOffset.ToLocalTime()` produces spurious offsets when time is before 1847","State":"open","Body":"Hi, I'm dan.\r\n\r\nI use dotnet at work. Recently, I've come across this.. unusual bug, regarding time zone offsets with the `DateTimeOffset` struct.\r\n\r\n# Description\r\nI have a code sample;\r\n\r\n```csharp\r\nvar arbitraryTime = DateTimeOffset.Parse(\"01/12/1847 00:01:15 +00:00\");\r\nConsole.WriteLine($\"Time 1 is: {arbitraryTime.ToLocalTime()}\");\r\n\r\nvar otherArbitraryTime = arbitraryTime.AddTicks(0);\r\nConsole.WriteLine($\"Time 2 is: {otherArbitraryTime.ToLocalTime()}\");\r\n\r\nvar magicArbitraryTime = arbitraryTime.AddTicks(-1);\r\nConsole.WriteLine($\"Time 3 is: {magicArbitraryTime.ToLocalTime()}\");\r\n```\r\n\r\nWhen I run this on my machine, I get this output:\r\n\r\n```\r\n$ dotnet run test.csproj\r\nTime 1 is: 01/12/1847 00:01:15 +00:00\r\nTime 2 is: 01/12/1847 00:01:15 +00:00\r\nTime 3 is: 01/12/1847 00:00:14 -00:01\r\n```\r\n\r\nNote that, after calling `.ToLocalTime()`, a spurious offset of -1 minute has been added to the offset time span. More generally, this is an issue because:\r\n\r\n```csharp\r\nDateTimeOffset.MinValue.ToLocalTime(); // == 01/01/0001 00:00:00 -00:01\r\n```\r\n\r\nAfter updating some libraries we use, we've found that they will call `.ToLocalTime()` (for some reason), and this returned value, as far as our code is concerned, is a non-UTC time zone, in a place where we're really not expecting this to happen.\r\n\r\nAfter a bit of investigation, I've found out that the UK switched from LMT (I did not know this was a time zone before now!) to GMT on `01/12/1847`, and that seems to coincide with the issue I'm seeing - I'm certain that is not a pure coincidence :) However, I'm at a total loss of how to proceed with this - short of changing my timezone settings..\r\n\r\n# Reproduction\r\nNow, this is the tricky part. Only _I_ see this bug, and we deploy to AWS, on linux (Docker & EBS, etc.).\r\n\r\nI'm running Ubuntu 18.04, and i'm running dotnet 2.1.302. My Locale is set to `en_GB.UTF-8`, with a timezone setting of `Europe/London`.\r\n\r\nIf there's any more information I can supply, please let me know.","Url":"https://github.com/dotnet/coreclr/issues/21688","RelatedDescription":"Open issue \"`DateTimeOffset.ToLocalTime()` produces spurious offsets when time is before 1847\" (#21688)"},{"Id":"394397069","IsPullRequest":true,"CreatedAt":"2018-12-27T13:38:05","Actor":"gfoidl","Number":"21687","RawContent":null,"Title":"Updated \"Viewing JIT Dumps\" for .NET Core 3.0","State":"open","Body":"plus some minor wording change","Url":"https://github.com/dotnet/coreclr/pull/21687","RelatedDescription":"Open PR \"Updated \"Viewing JIT Dumps\" for .NET Core 3.0\" (#21687)"},{"Id":"394321722","IsPullRequest":false,"CreatedAt":"2018-12-27T07:46:58","Actor":"AriNuer","Number":"21685","RawContent":null,"Title":"Build failed in x86_arm_altjit_checked_windows_nt_corefx_jitstress1 with exit code 1","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86_arm_altjit/job/jitstress/job/x86_arm_altjit_checked_windows_nt_corefx_jitstress1/391/\r\n**Failed log:**\r\n```\r\nBuild failed.\r\n[D:\\j\\workspace\\x86_arm_altji---bee8c131\\tests\\scripts\\run-corefx-tests.py]: Error: exit code 1\r\n\r\nD:\\j\\workspace\\x86_arm_altji---bee8c131>exit 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21685","RelatedDescription":"Open issue \"Build failed in x86_arm_altjit_checked_windows_nt_corefx_jitstress1 with exit code 1\" (#21685)"},{"Id":"394319071","IsPullRequest":false,"CreatedAt":"2018-12-27T07:33:01","Actor":"AriNuer","Number":"21684","RawContent":null,"Title":"Tests failed in x64_arm64_altjit_checked_windows_nt_corefx_jitstress1","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64_arm64_altjit/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_corefx_jitstress1/395/\r\n**Failed tests:**\r\nSystem.Data.SqlClient.Tests.DiagnosticTest.ExecuteNonQueryAsyncErrorTest\r\nSystem.Drawing.Tests.Graphics_DrawLineTests.DrawLines_Points\r\nSystem.Drawing.Tests.Graphics_DrawBezierTests.DrawBezier_Points\r\n**Failed log:**\r\nSystem.Data.SqlClient.Tests.DiagnosticTest.ExecuteNonQueryAsyncErrorTest\r\n```\r\nSystem.Data.SqlClient.Tests.DiagnosticTest.ExecuteNonQueryAsyncErrorTest [FAIL]\r\n        System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException : Remote process failed with an unhandled exception.\r\n        Stack Trace:\r\n          \r\n          Child exception:\r\n            System.Data.SqlClient.SqlException (0x80131904): Connection Timeout Expired.  The timeout period elapsed during the post-login phase.  The connection could have timed out while waiting for server to complete the login process and respond; Or it could have timed out while attempting to create multiple active connections.  The duration spent while attempting to connect to this server was - [Pre-Login] initialization=321; handshake=2722; [Login] initialization=95; authentication=117; [Post-Login] complete=1851;  ---> System.ComponentModel.Win32Exception (258): The wait operation timed out.\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlInternalConnectionTds.cs(400,0): at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling, String accessToken)\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlConnectionFactory.cs(135,0): at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\Common\\src\\System\\Data\\ProviderBase\\DbConnectionFactory.cs(109,0): at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Data.SqlClient\\src\\System\\Data\\ProviderBase\\DbConnectionPool.cs(677,0): at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Data.SqlClient\\src\\System\\Data\\ProviderBase\\DbConnectionPool.cs(1622,0): at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Data.SqlClient\\src\\System\\Data\\ProviderBase\\DbConnectionPool.cs(1082,0): at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Data.SqlClient\\src\\System\\Data\\ProviderBase\\DbConnectionPool.cs(1049,0): at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Data.SqlClient\\src\\System\\Data\\ProviderBase\\DbConnectionFactory.cs(151,0): at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\Common\\src\\System\\Data\\ProviderBase\\DbConnectionInternal.cs(325,0): at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlConnection.cs(1222,0): at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlConnection.cs(757,0): at System.Data.SqlClient.SqlConnection.Open()\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Data.SqlClient\\tests\\FunctionalTests\\DiagnosticTest.cs(337,0): at System.Data.SqlClient.Tests.DiagnosticTest.<>c.<<ExecuteNonQueryAsyncErrorTest>b__15_1>d.MoveNext()\r\n          --- End of stack trace from previous location where exception was thrown ---\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Data.SqlClient\\tests\\FunctionalTests\\DiagnosticTest.cs(898,0): at System.Data.SqlClient.Tests.DiagnosticTest.CollectStatisticsDiagnosticsAsync(Func`2 sqlOperation, String methodName)\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Data.SqlClient\\tests\\FunctionalTests\\DiagnosticTest.cs(342,0): at System.Data.SqlClient.Tests.DiagnosticTest.<>c.<ExecuteNonQueryAsyncErrorTest>b__15_0()\r\n          ClientConnectionId:c94a8498-7002-4b39-a97c-8ddc54e4fade\r\n          Error Number:-2,State:0,Class:11\r\n          \r\n          Child process:\r\n            System.Data.SqlClient.Tests, Version=4.6.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 System.Data.SqlClient.Tests.DiagnosticTest+<>c Int32 <ExecuteNonQueryAsyncErrorTest>b__15_0()\r\n          \r\n          \r\n  Test: ConnectionOpenTest Enabled Listeners\r\n    Finished:    System.Drawing.Common.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.Drawing.Common.Tests  Total: 4507, Errors: 0, Failed: 2, Skipped: 0, Time: 106.021s\r\n  TDSServerEndPoint ConnectionOpenTest Is Server Socket Bound: True Testing connectivity to the endpoint created for the server.\r\n  ----- end 13:35:48.12 ----- exit code 1 ----------------------------------------------------------\r\n```\r\nSystem.Drawing.Tests.Graphics_DrawLineTests.DrawLines_Points\r\n```\r\nSystem.Drawing.Tests.Graphics_DrawLineTests.DrawLines_Points [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: Byte[] [142, 194, 251, 180, 222, ...]\r\n  Test: ExecuteScalarAsyncErrorTest Listeners Disposed Successfully\r\n        Actual:   Byte[] [212, 29, 140, 217, 143, ...]\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Drawing.Common\\tests\\DrawingTest.cs(21,0): at System.Drawing.Tests.DrawingTest.ValidateImageContent(Image image, Byte[] expectedHash)\r\n  Test: ExecuteXmlReaderErrorTest Enabled Listeners\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Drawing.Common\\tests\\Graphics_DrawLineTests.cs(18,0): at System.Drawing.Tests.Graphics_DrawLineTests.DrawLines_Points()\r\n```\r\nSystem.Drawing.Tests.Graphics_DrawBezierTests.DrawBezier_Points\r\n```\r\nSystem.Drawing.Tests.Graphics_DrawBezierTests.DrawBezier_Points [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: Byte[] [208, 0, 8, 33, 6, ...]\r\n  Test: ExecuteScalarAsyncErrorTest SqlOperation Successful\r\n        Actual:   Byte[] [122, 252, 178, 214, 123, ...]\r\n  Test: ExecuteScalarAsyncErrorTest Listeners Disabled\r\n  TDSServerEndPoint ExecuteScalarAsyncErrorTest Connection Closed\r\n        Stack Trace:\r\n  Test: ExecuteScalarAsyncErrorTest Server Disposed\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Drawing.Common\\tests\\DrawingTest.cs(21,0): at System.Drawing.Tests.DrawingTest.ValidateImageContent(Image image, Byte[] expectedHash)\r\n          D:\\j\\workspace\\x64_arm64_alt---d32d0525\\_\\fx\\src\\System.Drawing.Common\\tests\\Graphics_DrawBezierTests.cs(28,0): at System.Drawing.Tests.Graphics_DrawBezierTests.DrawBezier_Points()\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/21684","RelatedDescription":"Open issue \"Tests failed in x64_arm64_altjit_checked_windows_nt_corefx_jitstress1\" (#21684)"},{"Id":"394224635","IsPullRequest":true,"CreatedAt":"2018-12-27T07:12:26","Actor":"Dotnet-GitSync-Bot","Number":"21681","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/coreclr/pull/21681","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#21681)"},{"Id":"394274156","IsPullRequest":true,"CreatedAt":"2018-12-27T02:09:07","Actor":"sandreenko","Number":"21683","RawContent":null,"Title":"Use `saveNext` unwind opcode on arm64.","State":"open","Body":"According to [Microsoft ARM64 exception handling doc](https://docs.microsoft.com/en-us/cpp/build/arm64-exception-handling?view=vs-2017) we can use `save_next` as unwind code.\r\n\r\nAnd we have had part of it implemented in `genPrologSaveRegPair` but before the cleaning in #21395 it was tricky to support it in the epilog generation and keep prolog/epilog unwind infos matched.\r\n\r\nThis PR adds `genSetUseSaveNextPairs` that marks register pairs that we can save/restore with `save_next` and teaches `genEpilogRestoreRegPair` to use `save_next` (`genPrologSaveRegPair` has already known how to do that).\r\n\r\nAsm diffs for System.Private.CoreLib (arm64 checked, altjit):\r\n```\r\n1 files had text diffs but not size diffs.\r\nSystem.Private.CoreLib.dasm had 65544 diffs\r\n```\r\nthat look like:\r\n```\r\n***** F:\\DIFFS\\DIFFOUT\\DASMSET_86\\BASE\\System.Private.CoreLib.dasm\r\n    C9 8A       save_regp X#6 Z#10 (0x0A); stp x25, x26, [sp, #80]\r\n    C9 08       save_regp X#4 Z#8 (0x08); stp x23, x24, [sp, #64]\r\n    C8 86       save_regp X#2 Z#6 (0x06); stp x21, x22, [sp, #48]\r\n    C8 04       save_regp X#0 Z#4 (0x04); stp x19, x20, [sp, #32]\r\n***** F:\\DIFFS\\DIFFOUT\\DASMSET_86\\DIFF\\SYSTEM.PRIVATE.CORELIB.DASM\r\n    C9 8A       save_regp X#6 Z#10 (0x0A); stp x25, x26, [sp, #80]\r\n    E6          save_next\r\n    E6          save_next\r\n    C8 04       save_regp X#0 Z#4 (0x04); stp x19, x20, [sp, #32]\r\n*****\r\n```\r\nand there is a tiny improvement in the native image `System.Private.CoreLib.dll` size.\r\n\r\n\r\nTested with GC_Stress=0xc and forced holes on arm64.","Url":"https://github.com/dotnet/coreclr/pull/21683","RelatedDescription":"Open PR \"Use `saveNext` unwind opcode on arm64.\" (#21683)"},{"Id":"394241175","IsPullRequest":true,"CreatedAt":"2018-12-27T01:25:51","Actor":"filipnavara","Number":"21682","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"PR #21681 + build fix","Url":"https://github.com/dotnet/coreclr/pull/21682","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#21682)"},{"Id":"393986176","IsPullRequest":false,"CreatedAt":"2018-12-26T16:01:32","Actor":"HamedMasafi","Number":"21673","RawContent":null,"Title":"Bug: WinFX.targets was not found","State":"closed","Body":"I have installed dotnet core 3 preview on opensuse leap 15.0\r\nThe file that I downloaded is: https://dotnet.microsoft.com/download/thank-you/dotnet-sdk-3.0.100-preview-009812-linux-x64-binaries\r\n\r\nI've try to build an app:\r\n\r\n```\r\nhamed@linux-f1fa:~/tmp/> mkdir -p dwin && cd dwin\r\n```\r\n\r\n```\r\nhamed@linux-f1fa:~/tmp/dwin> /opt/apps/dotnet/dotnet new winforms       \r\n\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous. It is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\n\r\nASP.NET Core\r\n------------\r\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\r\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms refer to the platform specific documentation.\r\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\r\nGetting ready...\r\nThe template \"Windows Forms Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on /home/hamed/tmp/dwin/dwin.csproj...\r\n  Restoring packages for /home/hamed/tmp/dwin/dwin.csproj...\r\n  Installing Microsoft.NETCore.DotNetAppHost 3.0.0-preview-27122-01.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 3.0.0-preview-27122-01.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 3.0.0-preview-27122-01.\r\n  Installing Microsoft.NETCore.Platforms 3.0.0-preview.18571.3.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing Microsoft.NETCore.Targets 2.0.0.\r\n  Installing Microsoft.NETCore.App 3.0.0-preview-27122-01.\r\n  Installing Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetAppHost 3.0.0-preview-27122-01.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostResolver 3.0.0-preview-27122-01.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostPolicy 3.0.0-preview-27122-01.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.App 3.0.0-preview-27122-01.\r\n  Generating MSBuild file /home/hamed/tmp/dwin/obj/dwin.csproj.nuget.g.props.\r\n  Generating MSBuild file /home/hamed/tmp/dwin/obj/dwin.csproj.nuget.g.targets.\r\n  Restore completed in 4.87 min for /home/hamed/tmp/dwin/dwin.csproj.\r\n\r\nRestore succeeded.\r\n```\r\n\r\n```\r\nhamed@linux-f1fa:~/tmp/dwin> /opt/apps/dotnet/dotnet run\r\n/opt/apps/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.NET.Sdk.WindowsDesktop.targets(14,2): error MSB4019: The imported project \"/opt/apps/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.WinFX.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk. [/home/hamed/tmp/dwin/dwin.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\nThe file exists but in other case:\r\n```\r\n/opt/apps/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.WinFx.targets\r\n```\r\nThe 'x' on WinFx is lower but dotnet expect to it be upper.\r\n\r\nI've created a copy with this command but I know is not good way for solving bugs\r\n```\r\ncp /opt/apps/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.WinF{x,X}.targets\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21673","RelatedDescription":"Closed issue \"Bug: WinFX.targets was not found\" (#21673)"},{"Id":"394187722","IsPullRequest":false,"CreatedAt":"2018-12-26T15:21:30","Actor":"Lohnegrim","Number":"21680","RawContent":null,"Title":"BadImageFormat Exception when trying to use TextControl in .Net Core 3.0 preview 1","State":"open","Body":".NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\nMaybe simmilar to/relevant https://github.com/dotnet/coreclr/issues/11298 or https://github.com/dotnet/coreclr/issues/18447\r\n\r\nHi,\r\nI tried to Convert and run a project to .Net Core 3.0 Preview 1 and run in a Problem with an External Component. \"Tx TextControl\".\r\n\r\nI reduced the relevant Code to the minimum and Created a repro:\r\n[textcontrol.txtools.zip](https://github.com/dotnet/coreclr/files/2710433/textcontrol.txtools.zip)\r\n\r\nIf it does not work here the Steps for the Repo:\r\n1. Trial from: https://www.textcontrol.com/products/windows-forms/tx-text-control-dotnet/downloads.\r\n2. Add a reference to the txtools from the package.\r\n3. And this Code to a new .Core 3.0 console project:\r\n                TXTextControl.txtools.Initialize();\r\n\r\nI tried multiple Compinations, 32 + 64 bit version for the txtool.dll, and 32, 64, AnyCpu of the .net core project, but I always get BadImageFormat.","Url":"https://github.com/dotnet/coreclr/issues/21680","RelatedDescription":"Open issue \"BadImageFormat Exception when trying to use TextControl in .Net Core 3.0 preview 1\" (#21680)"},{"Id":"394145609","IsPullRequest":true,"CreatedAt":"2018-12-26T13:49:45","Actor":"marek-safar","Number":"21678","RawContent":null,"Title":"Throws PlatformNotSupportedException for SecureString BSTR conversion","State":"closed","Body":"instead of trying to look up ole32 on unix\r\n\r\nUsed PInvokeMarshal.AllocBSTR and PInvokeMarshal.FreeBSTR are Windows specific","Url":"https://github.com/dotnet/coreclr/pull/21678","RelatedDescription":"Closed or merged PR \"Throws PlatformNotSupportedException for SecureString BSTR conversion\" (#21678)"},{"Id":"394147543","IsPullRequest":true,"CreatedAt":"2018-12-26T11:25:17","Actor":"jashook","Number":"21679","RawContent":null,"Title":"Update linux/OSX build instructions","State":"open","Body":"Long overdue update of the build documentation. Hope to do similar work soon to the testing documentation. Please tag anyone necessary for review. Added a few people who I assumed at a minimum would like notification that this is changing.","Url":"https://github.com/dotnet/coreclr/pull/21679","RelatedDescription":"Open PR \"Update linux/OSX build instructions\" (#21679)"},{"Id":"394067523","IsPullRequest":false,"CreatedAt":"2018-12-26T02:36:06","Actor":"VincentBu","Number":"21677","RawContent":null,"Title":"[arm64] System.Net.NetworkInformation.Tests.IPGlobalPropertiesTest.IPGlobalProperties_TcpActiveConnections_Succeed(address: 127.0.0.1) failed","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs8_tst/73/\r\n**Failed tests:**\r\nSystem.Net.NetworkInformation.Tests.IPGlobalPropertiesTest.IPGlobalProperties_TcpActiveConnections_Succeed(address: 127.0.0.1)\r\n**Failed log:**\r\n```\r\n~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs8_tst/_/fx/artifacts/bin/tests/System.Net.NetworkInformation.Functional.Tests/netcoreapp-Linux-Release-arm64 ~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs8_tst/_/fx/artifacts/bin/tests/System.Net.NetworkInformation.Functional.Tests/netcoreapp-Linux-Release-arm64\r\n[37m  Discovering: System.Net.NetworkInformation.Functional.Tests (method display = ClassAndMethod, method display options = None)\r\n[m[37m  Discovered:  System.Net.NetworkInformation.Functional.Tests (found 59 of 74 test cases)\r\n[m[37m  Starting:    System.Net.NetworkInformation.Functional.Tests (parallel test collections = on, max threads = 46)\r\n[m[31;1m    System.Net.NetworkInformation.Tests.IPGlobalPropertiesTest.IPGlobalProperties_TcpActiveConnections_Succeed(address: 127.0.0.1) [FAIL]\r\n[m[37m      Assert.True() Failure\r\n[m[37m      Expected: True\r\n[m[37m      Actual:   False\r\n[m[30;1m      Stack Trace:\r\n[m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs8/_/fx/src/System.Net.NetworkInformation/tests/FunctionalTests/IPGlobalPropertiesTest.cs(108,0): at System.Net.NetworkInformation.Tests.IPGlobalPropertiesTest.IPGlobalProperties_TcpActiveConnections_Succeed(IPAddress address)\r\n[m[37m        --- End of stack trace from previous location where exception was thrown ---\r\n[m[37m  Finished:    System.Net.NetworkInformation.Functional.Tests\r\n[m[37m=== TEST EXECUTION SUMMARY ===\r\n[m[37m   System.Net.NetworkInformation.Functional.Tests  Total: 104, Errors: 0, Failed: 1, Skipped: 0, Time: 7.958s\r\n[m[m~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs8_tst/_/fx/artifacts/bin/tests/System.Net.NetworkInformation.Functional.Tests/netcoreapp-Linux-Release-arm64\r\n----- end 05:33:09 ----- exit code 1 ----------------------------------------------------------\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21677","RelatedDescription":"Open issue \"[arm64] System.Net.NetworkInformation.Tests.IPGlobalPropertiesTest.IPGlobalProperties_TcpActiveConnections_Succeed(address: 127.0.0.1) failed\" (#21677)"},{"Id":"394067176","IsPullRequest":false,"CreatedAt":"2018-12-26T02:32:46","Actor":"VincentBu","Number":"21676","RawContent":null,"Title":"[arm64/linux] System.Net.HttpListener.Tests failed with System.ObjectDisposedException","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_jitstress2_tst/71/\r\n**failed test:**\r\nSystem.Net.HttpListener.Tests\r\n\r\n**Failed log:**\r\n```\r\n~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2_tst/_/fx/artifacts/bin/tests/System.Net.HttpListener.Tests/netcoreapp-Linux-Release-arm64 ~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2_tst/_/fx/artifacts/bin/tests/System.Net.HttpListener.Tests/netcoreapp-Linux-Release-arm64\r\n[37m  Discovering: System.Net.HttpListener.Tests (method display = ClassAndMethod, method display options = None)\r\n[m[37m  Discovered:  System.Net.HttpListener.Tests (found 261 of 298 test cases)\r\n[m[37m  Starting:    System.Net.HttpListener.Tests (parallel test collections = on, max threads = 46)\r\n[m[33;1m    System.Net.Tests.HttpListenerAuthenticationTests.BasicAuthentication_RealmSet_SendsChallengeToClient [SKIP]\r\n[m[37m      Condition(s) not met: \"IsWindowsImplementation\"\r\n[m[33;1m    System.Net.Tests.HttpListenerAuthenticationTests.NoAuthentication_AuthenticationProvided_ReturnsForbiddenStatusCode [SKIP]\r\n[m[37m      Condition(s) not met: \"IsWindowsImplementation\"\r\n[m[33;1m    System.Net.Tests.HttpListenerAuthenticationTests.NoAuthenticationGetContextAsync_AuthenticationProvided_ReturnsForbiddenStatusCode [SKIP]\r\n[m[37m      Condition(s) not met: \"IsWindowsImplementation\"\r\n[m\r\nUnhandled Exception: \r\nUnhandled Exception: System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'System.Net.HttpListener'.\r\n   at System.Net.HttpListener.BeginGetContext(AsyncCallback callback, Object state) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.HttpListener/src/System/Net/Managed/HttpListener.Managed.cs:line 290\r\n   at System.Net.ListenerAsyncResult.Complete(HttpListenerContext context, Boolean synch) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.HttpListener/src/System/Net/Managed/ListenerAsyncResult.Managed.cs:line 159\r\n   at System.Net.HttpListener.RegisterContext(HttpListenerContext context) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.HttpListener/src/System/Net/Managed/HttpListener.Managed.cs:line 224\r\n   at System.Net.LazyAsyncResult.Complete(IntPtr userToken) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/Common/src/System/Net/LazyAsyncResult.cs:line 400\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Net.ContextAwareResult.Complete(IntPtr userToken) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/Common/src/System/Net/ContextAwareResult.cs:line 388\r\n   at System.Net.LazyAsyncResult.ProtectedInvokeCallback(Object result, IntPtr userToken) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/Common/src/System/Net/LazyAsyncResult.cs:line 354\r\n   at System.Net.Sockets.BaseOverlappedAsyncResult.CompletionCallback(Int32 numBytes, SocketError errorCode) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/BaseOverlappedAsyncResult.Unix.cs:line 29\r\n   at System.Net.Sockets.SocketAsyncContext.BufferMemoryReceiveOperation.InvokeCallback(Boolean allowPooling) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs:line 485\r\n   at System.Net.Sockets.SocketAsyncContext.OperationQueue`1.ProcessAsyncOperation(TOperation op) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs:line 870\r\n   at System.Net.Sockets.SocketAsyncContext.ProcessAsyncReadOperation(ReadOperation op) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs:line 1269\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\nSystem.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'System.Net.HttpListener'.\r\n   at System.Net.HttpListener.BeginGetContext(AsyncCallback callback, Object state) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.HttpListener/src/System/Net/Managed/HttpListener.Managed.cs:line 290\r\n   at System.Net.ListenerAsyncResult.Complete(HttpListenerContext context, Boolean synch) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.HttpListener/src/System/Net/Managed/ListenerAsyncResult.Managed.cs:line 159\r\n   at System.Net.HttpListener.RegisterContext(HttpListenerContext context) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.HttpListener/src/System/Net/Managed/HttpListener.Managed.cs:line 224\r\n   at System.Net.LazyAsyncResult.Complete(IntPtr userToken) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/Common/src/System/Net/LazyAsyncResult.cs:line 400\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Net.ContextAwareResult.Complete(IntPtr userToken) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/Common/src/System/Net/ContextAwareResult.cs:line 388\r\n   at System.Net.LazyAsyncResult.ProtectedInvokeCallback(Object result, IntPtr userToken) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/Common/src/System/Net/LazyAsyncResult.cs:line 354\r\n   at System.Net.Sockets.BaseOverlappedAsyncResult.CompletionCallback(Int32 numBytes, SocketError errorCode) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/BaseOverlappedAsyncResult.Unix.cs:line 29\r\n   at System.Net.Sockets.SocketAsyncContext.BufferMemoryReceiveOperation.InvokeCallback(Boolean allowPooling) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs:line 485\r\n   at System.Net.Sockets.SocketAsyncContext.OperationQueue`1.ProcessAsyncOperation(TOperation op) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs:line 870\r\n   at System.Net.Sockets.SocketAsyncContext.ProcessAsyncReadOperation(ReadOperation op) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2/_/fx/src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncContext.Unix.cs:line 1269\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n./RunTests.sh: line 126:  6334 Aborted                 (core dumped) $RUNTIME_PATH/dotnet xunit.console.dll System.Net.HttpListener.Tests.dll -xml testResults.xml -nologo -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=failing -notrait category=Outerloop\r\n~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2_tst/_/fx/artifacts/bin/tests/System.Net.HttpListener.Tests/netcoreapp-Linux-Release-arm64\r\n----- end 22:25:50 ----- exit code 134 ----------------------------------------------------------\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21676","RelatedDescription":"Open issue \"[arm64/linux] System.Net.HttpListener.Tests failed with System.ObjectDisposedException\" (#21676)"},{"Id":"394031939","IsPullRequest":true,"CreatedAt":"2018-12-25T18:40:07","Actor":"ichensky","Number":"21675","RawContent":null,"Title":"Implement Activator.CreateInstance<T> with params","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21675","RelatedDescription":"Closed or merged PR \"Implement Activator.CreateInstance<T> with params\" (#21675)"},{"Id":"394025260","IsPullRequest":true,"CreatedAt":"2018-12-25T14:15:34","Actor":"dotnet-maestro-bot","Number":"21674","RawContent":null,"Title":"Update CoreClr, CoreFx to preview-27229-01, preview.18628.2, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/21674","RelatedDescription":"Open PR \"Update CoreClr, CoreFx to preview-27229-01, preview.18628.2, respectively (master)\" (#21674)"},{"Id":"393949676","IsPullRequest":true,"CreatedAt":"2018-12-25T02:34:11","Actor":"filipnavara","Number":"21672","RawContent":null,"Title":"Move CultureInfo to shared CoreLib","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21672","RelatedDescription":"Open PR \"Move CultureInfo to shared CoreLib\" (#21672)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"394746787","IsPullRequest":true,"CreatedAt":"2018-12-29T01:12:05","Actor":"wli3","Number":"10524","RawContent":null,"Title":"Add --interactive to dotnet tools","State":"open","Body":"fix https://github.com/dotnet/cli/issues/10231","Url":"https://github.com/dotnet/cli/pull/10524","RelatedDescription":"Open PR \"Add --interactive to dotnet tools\" (#10524)"},{"Id":"394743363","IsPullRequest":false,"CreatedAt":"2018-12-29T00:29:55","Actor":"wli3","Number":"10523","RawContent":null,"Title":"Remove workaround to output minimal when \"--interactive\" is used in dotnet tools","State":"open","Body":"when https://github.com/NuGet/NuGet.Client/pull/2577 is merged and inserted to CLI\r\n\r\nToday output quiet will break \"--interacitve\" experience since it will output nothing. However, minimal output will have the temp project path. After the above nuget change, minimal output will not have temp project path anymore, so the workaround can be removed","Url":"https://github.com/dotnet/cli/issues/10523","RelatedDescription":"Open issue \"Remove workaround to output minimal when \"--interactive\" is used in dotnet tools\" (#10523)"},{"Id":"394743217","IsPullRequest":true,"CreatedAt":"2018-12-29T00:27:56","Actor":"livarcocc","Number":"10522","RawContent":null,"Title":"Fixing the version for some of our packages","State":"open","Body":"Fixing the version for some of our packages that still referenced CLIVersionPrefix set.\r\n","Url":"https://github.com/dotnet/cli/pull/10522","RelatedDescription":"Open PR \"Fixing the version for some of our packages\" (#10522)"},{"Id":"394457352","IsPullRequest":true,"CreatedAt":"2018-12-29T00:22:47","Actor":"wli3","Number":"10510","RawContent":null,"Title":"Add IsOutputRedirected to TelemetryCommonProperties","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10510","RelatedDescription":"Closed or merged PR \"Add IsOutputRedirected to TelemetryCommonProperties\" (#10510)"},{"Id":"394730339","IsPullRequest":true,"CreatedAt":"2018-12-28T23:35:08","Actor":"johnbeisner","Number":"10520","RawContent":null,"Title":"Repair the Absolutepath; part 2","State":"closed","Body":"Addresses: #10293\r\n\r\nPR: https://github.com/dotnet/cli/pull/10512 was not complete\r\n \r\nChange:\r\nDo not cast 'Source' to a variable type - allow usage to do the typing; variable name is now: \"Source\" not: \"Uri\".\r\n\r\n@jerickmsft\r\n","Url":"https://github.com/dotnet/cli/pull/10520","RelatedDescription":"Closed or merged PR \"Repair the Absolutepath; part 2\" (#10520)"},{"Id":"394730948","IsPullRequest":false,"CreatedAt":"2018-12-28T22:27:40","Actor":"robertmclaws","Number":"10521","RawContent":null,"Title":"dotnet restore ignores PackageReferences in imported Projects","State":"open","Body":"This may be somewhat related to #7411. I'm trying to standardize my build environment against almost 2 dozen NuGet package projects in my enterprise, and using a build.props format similar to the [ASP.NET Core team](https://github.com/aspnet/AspNetCore/blob/master/Directory.Build.props) in order to do so. However, I've run into a significant limitation in the CLI/NuGet.\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a csproj file with `dotnet new classlib`.\r\n2. Create a file in the directory above it called `Test.build.props`, and add the following code:\r\n```\r\n  <PropertyGroup>\r\n    <IsBenchmarkProject Condition=\"$(MSBuildProjectName.EndsWith('.Performance'))\">true</IsBenchmarkProject>\r\n    <IsTestProject Condition=\"$(MSBuildProjectName.Contains('.Tests.'))\">true</IsTestProject>\r\n    <IsTestAssetProject Condition=\"$(RepoRelativeProjectDir.Contains('testassets'))\">true</IsTestAssetProject>\r\n    <IsSampleProject Condition=\"$(MSBuildProjectName.Contains('.Samples.'))\">true</IsSampleProject>\r\n    \r\n    <IncludeSource>false</IncludeSource>\r\n    <IncludeSymbols>true</IncludeSymbols>\r\n  </PropertyGroup>\r\n\r\n  <!-- Build NuGet packages for non-resource projects -->\r\n  <PropertyGroup Condition=\" '$(IsBenchmarkProject)' != 'true' And '$(IsTestProject)' != 'true' And '$(IsTestAssetProject)' != 'true' And '!$(IsSampleProject)' != 'true' and $(Configuration) != 'Release' \">\r\n    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>\r\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\r\n  </PropertyGroup>\r\n```\r\n3. Edit the first csproj file and add `<Import Project=\"..\\Test.build.props\" />` as the first line under the root node.\r\n4. Save the files and run `dotnet restore`. **Everything seems to be fine.**\r\n\r\nSo this is a great way to make sure that every project has identical properties for certain NuGet package properties and so forth. But let's say you want to unify your testing process and make it so that every Test project automatically references `FluentAssertions` and it's corresponding Roslyn Analyzer. \r\n\r\n5. Add the following code to `Test.build.props`:\r\n```\r\n  <!-- Build NuGet packages for non-resource projects -->\r\n  <ItemGroup Condition=\" '$(IsTestProject)' == 'true' \">\r\n    <PackageReference Include=\"FluentAssertions\" Version=\"5.5.3\" />\r\n    <PackageReference Include=\"FluentAssertions.Analyzers\" Version=\"0.11.4\" />\r\n  </ItemGroup>\r\n```\r\n6. Save the file and run `dotnet restore`.\r\n7. Navigate to the first project's `obj` folder and open `project.assets.json`.\r\n8. Search for \"Fluent\" in the file. **Note that it presently is not found.**\r\n\r\n## Expected behavior\r\nI would expect the CLI would see the project as a composite of all its' references, and find every PackageReference in the chain.\r\n\r\n## Actual behavior\r\nThe CLI apparently only reads the file passed in, and not any connected files, so it doesn't even know that other PackageReferences exist. The files will be missing from any restores, and dotnet build will fail.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10521","RelatedDescription":"Open issue \"dotnet restore ignores PackageReferences in imported Projects\" (#10521)"},{"Id":"394596504","IsPullRequest":false,"CreatedAt":"2018-12-28T21:25:57","Actor":"EvgenyAgafonchikov","Number":"10517","RawContent":null,"Title":"Project name symbols are dropped in sln add command","State":"closed","Body":"## Steps to reproduce\r\nCould be reproed on my Windows 8.1 PC with existing public repo. The same works as expected on another Windows 10 PC.\r\n\r\n1. clone https://github.com/Azure/azure-powershell\r\n2. open cmd from this folder\r\n3. run `dotnet msbuild build.proj`\r\n\r\n## Expected  behavior\r\n\r\nBuild succeeded\r\n\r\n## Actual behavior\r\n\r\nBuild fails at `sln add` stage. Note missing symbol in error message (`ServiceBus\\ommands`) while full command contains correct path with 'C'. Random symbol is dropped depending on the branch selected.\r\nAnother note there is in case I try this command manually, it is truncated due to cmd command length restriction.\r\n\r\n```\r\nCould not find project or directory `D:\\PS\\azure-powershell\\src\\ResourceManager\\ServiceBus\\ommands.ServiceBus\\Commands.ServiceBus.Netcore.csproj`.\r\n \r\n```\r\n\r\nFull output:\r\n```\r\nD:\\PS\\azure-powershell>dotnet msbuild build.proj\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Building Cmdlets...\r\n  2.2.101\r\n  The template \"Solution File\" was created successfully.\r\n  Could not find project or directory `D:\\PS\\azure-powershell\\src\\ResourceManager\\ServiceBus\\ommands.ServiceBus\\Commands.ServiceBus.Netcore.csproj`.\r\n  Usage: dotnet sln <SLN_FILE> add [options] <PROJECT_PATH>\r\n\r\n  Arguments:\r\n    <SLN_FILE>       The solution file to operate on. If not specified, the command will search the current directory for one.\r\n    <PROJECT_PATH>   The paths to the projects to add to the solution.\r\n\r\n  Options:\r\n    -h, --help   Show command line help.\r\nD:\\PS\\azure-powershell\\build.proj(227,5): error MSB3073: The command \"dotnet sln Azure.PowerShell.sln add D:\\PS\\azure-powershell\\src\\ResourceManager\\Advisor\\Commands.Advisor\\Commands.Advisor.Netcore.c\r\nsproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Aks\\Commands.Aks\\Commands.Aks.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\AnalysisServices\\Commands.AnalysisServices.Dataplane\\Commands.A\r\nnalysisServices.Dataplane.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\AnalysisServices\\Commands.AnalysisServices\\Commands.AnalysisServices.Netcore.csproj D:\\PS\\azure-powershell\\src\\Resou\r\nrceManager\\ApiManagement\\Commands.ApiManagement.ServiceManagement\\Commands.ApiManagement.ServiceManagement.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ApiManagement\\Commands.ApiManagemen\r\nt\\Commands.ApiManagement.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ApplicationInsights\\Commands.ApplicationInsights\\Commands.ApplicationInsights.Netcore.csproj D:\\PS\\azure-powershell\\s\r\nrc\\ResourceManager\\Automation\\Commands.Automation\\Commands.Automation.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\AzureBatch\\BatchModelGenerator\\BatchModelGenerator.Netcore.csproj D:\\PS\\\r\nazure-powershell\\src\\ResourceManager\\AzureBatch\\Commands.Batch\\Commands.Batch.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Billing\\Commands.Billing\\Commands.Billing.Netcore.csproj D:\\PS\\a\r\nzure-powershell\\src\\ResourceManager\\Billing\\Commands.Consumption\\Commands.Consumption.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Billing\\Commands.UsageAggregates\\Commands.UsageAggregate\r\ns.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Cdn\\Commands.Cdn\\Commands.Cdn.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\CognitiveServices\\Commands.Management.CognitiveServi\r\nces\\Commands.Management.CognitiveServices.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Compute\\Commands.Compute\\Commands.Compute.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\\r\nContainerInstance\\Commands.ContainerInstance\\Commands.ContainerInstance.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ContainerRegistry\\Commands.ContainerRegistry\\Commands.ContainerRegistr\r\ny.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\DataFactoryV2\\Commands.DataFactories\\Commands.DataFactories.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\DataFactoryV2\\Commands\r\n.DataFactoryV2\\Commands.DataFactoryV2.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\DataLakeAnalytics\\Commands.DataLakeAnalytics\\Commands.DataLakeAnalytics.Netcore.csproj D:\\PS\\azure-power\r\nshell\\src\\ResourceManager\\DataLakeStore\\Commands.DataLakeStore\\Commands.DataLakeStore.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\DataMigration\\Commands.DataMigration\\Commands.DataMigrat\r\nion.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\DeviceProvisioningServices\\Commands.DeviceProvisioningServices\\Commands.DeviceProvisioningServices.Netcore.csproj D:\\PS\\azure-powershell\\s\r\nrc\\ResourceManager\\DevSpaces\\Commands.DevSpaces\\Commands.DevSpaces.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\DevTestLabs\\Commands.DevTestLabs\\Commands.DevTestLabs.Netcore.csproj D:\\PS\\\r\nazure-powershell\\src\\ResourceManager\\Dns\\Commands.Dns\\Commands.Dns.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\EventGrid\\Commands.EventGrid\\Commands.EventGrid.Netcore.csproj D:\\PS\\azure-\r\npowershell\\src\\ResourceManager\\EventHub\\Commands.EventHub\\Commands.EventHub.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\FrontDoor\\Commands.FrontDoor\\Commands.FrontDoor.Netcore.csproj D:\\\r\nPS\\azure-powershell\\src\\ResourceManager\\HDInsight\\Commands.HDInsight\\Commands.HDInsight.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Insights\\Commands.Insights\\Commands.Insights.Netcore.c\r\nsproj D:\\PS\\azure-powershell\\src\\ResourceManager\\IotCentral\\Commands.IotCentral\\Commands.IotCentral.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\IotHub\\Commands.IotHub\\Commands.IotHub.Net\r\ncore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\KeyVault\\Commands.KeyVault\\Commands.KeyVault.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Kusto\\Commands.Kusto\\Commands.Kusto.Netcor\r\ne.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\LogicApp\\Commands.LogicApp\\Commands.LogicApp.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\MachineLearning\\Commands.MachineLearningCompu\r\nte\\Commands.MachineLearningCompute.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\MachineLearning\\Commands.MachineLearning\\Commands.MachineLearning.Netcore.csproj D:\\PS\\azure-powershell\\src\r\n\\ResourceManager\\ManagedServiceIdentity\\Commands.ManagedServiceIdentity\\Commands.ManagedServiceIdentity.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ManagementPartner\\Commands.Partner\\Com\r\nmands.Partner.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Maps\\Commands.Maps\\Commands.Maps.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\MarketplaceOrdering\\Commands.Marketpl\r\naceOrdering\\Commands.MarketplaceOrdering.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Media\\Commands.Media\\Commands.Media.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Network\r\n\\Commands.Network\\Commands.Network.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\NotificationHubs\\Commands.NotificationHubs\\Commands.NotificationHubs.Netcore.csproj D:\\PS\\azure-powershell\\\r\nsrc\\ResourceManager\\OperationalInsights\\Commands.OperationalInsights\\Commands.OperationalInsights.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\PolicyInsights\\Commands.PolicyInsights\\Comma\r\nnds.PolicyInsights.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\PowerBIEmbedded\\Commands.Management.PowerBIEmbedded\\Commands.Management.PowerBIEmbedded.Netcore.csproj D:\\PS\\azure-powershe\r\nll\\src\\ResourceManager\\PowerBIEmbedded\\Commands.PowerBI\\Commands.PowerBI.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Profile\\Commands.Profile\\Commands.Profile.Netcore.csproj D:\\PS\\azure-\r\npowershell\\src\\ResourceManager\\RecoveryServices\\Commands.RecoveryServices.Backup.Helpers\\Commands.RecoveryServices.Backup.Helpers.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryServ\r\nices\\Commands.RecoveryServices.Backup.Logger\\Commands.RecoveryServices.Backup.Logger.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryServices\\Commands.RecoveryServices.Backup.Models\\\r\nCommands.RecoveryServices.Backup.Models.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryServices\\Commands.RecoveryServices.Backup.Providers\\Commands.RecoveryServices.Backup.Providers\r\n.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryServices\\Commands.RecoveryServices.Backup.ServiceClientAdapter\\Commands.RecoveryServices.Backup.ServiceClientAdapter.Netcore.csproj D\r\n:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryServices\\Commands.RecoveryServices.Backup\\Commands.RecoveryServices.Backup.Cmdlets.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryS\r\nervices\\Commands.RecoveryServices.SiteRecovery\\Commands.RecoveryServices.SiteRecovery.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RecoveryServices\\Commands.RecoveryServices\\Commands.Reco\r\nveryServices.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\RedisCache\\Commands.RedisCache\\Commands.RedisCache.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Relay\\Commands.Relay\r\n\\Commands.Relay.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Reservations\\Commands.Reservations\\Commands.Reservations.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ResourceGra\r\nph\\Commands.ResourceGraph\\Commands.ResourceGraph.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Resources\\Commands.ResourceManager\\Cmdlets\\Commands.Resources.Rest.Netcore.csproj D:\\PS\\azure\r\n-powershell\\src\\ResourceManager\\Resources\\Commands.Resources\\Commands.Resources.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Resources\\Commands.Tags\\Commands.Tags.Netcore.csproj D:\\PS\\azu\r\nre-powershell\\src\\ResourceManager\\Search\\Commands.Management.Search\\Commands.Management.Search.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Security\\Commands.Security\\Commands.Security.Ne\r\ntcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ServiceBus\\Commands.ServiceBus\\Commands.ServiceBus.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\ServiceFabric\\Commands.ServiceFabri\r\nc\\Commands.ServiceFabric.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\SignalR\\Commands.SignalR\\Commands.SignalR.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Sql\\Commands.Sql\\\r\nCommands.Sql.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Sql\\LegacySdk\\SqlManagement.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\StorageSync\\Commands.StorageSync\\Commands.S\r\ntorageSync.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Storage\\Commands.Management.Storage\\Commands.Management.Storage.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Storage\\C\r\nommands.Storage\\Commands.Storage.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\StreamAnalytics\\Commands.StreamAnalytics\\Commands.StreamAnalytics.Netcore.csproj D:\\PS\\azure-powershell\\src\\R\r\nesourceManager\\Subscription\\Commands.Subscription\\Commands.Subscription.Netcore.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\TrafficManager\\Commands.TrafficManager2\\Commands.TrafficManager.Netcor\r\ne.csproj D:\\PS\\azure-powershell\\src\\ResourceManager\\Websites\\Commands.Websites\\Commands.Websites.Netcore.csproj\" exited with code 1.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/10517","RelatedDescription":"Closed issue \"Project name symbols are dropped in sln add command\" (#10517)"},{"Id":"394687183","IsPullRequest":true,"CreatedAt":"2018-12-28T21:24:03","Actor":"livarcocc","Number":"10519","RawContent":null,"Title":"Increasing the parallel legs for windows CI legs to 99.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10519","RelatedDescription":"Closed or merged PR \"Increasing the parallel legs for windows CI legs to 99.\" (#10519)"},{"Id":"394466750","IsPullRequest":true,"CreatedAt":"2018-12-28T18:25:40","Actor":"johnbeisner","Number":"10512","RawContent":null,"Title":"Repair the Absolutepath","State":"closed","Body":"Addresses: https://github.com/dotnet/cli/issues/10293\r\n","Url":"https://github.com/dotnet/cli/pull/10512","RelatedDescription":"Closed or merged PR \"Repair the Absolutepath\" (#10512)"},{"Id":"394632233","IsPullRequest":true,"CreatedAt":"2018-12-28T17:37:30","Actor":"dotnet-maestro[bot]","Number":"10518","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18627.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10518","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10518)"},{"Id":"394565283","IsPullRequest":false,"CreatedAt":"2018-12-28T07:07:27","Actor":"mhamri","Number":"10516","RawContent":null,"Title":"Dotnet restore bahave differently on linux and windows","State":"open","Body":"## Steps to reproduce\r\n1- create two projects with .netcore 2.2, `Project A` is a class library and `Project B` is a asp.net core project\r\n2- Project B depends on the Project A\r\n3- in project A which is class library i have an extension file. \r\n```C#\r\nusing Microsoft.AspNetCore.Http;\r\n\r\nnamespace CompanyName.ProjectALibrary\r\n{\r\n    public static class FileTypes\r\n    {\r\n        public static bool IsImage(this IFormFile file)\r\n        {\r\n            return file != null && file.ContentType.Contains(\"image\");\r\n        }\r\n    }\r\n}\r\n```\r\nproject A only has one `Microsoft.NETCore.App 2.2.0` nuget package\r\nbuild with visual studio and `dotnet build` on windows is successful without any error, even with nuget cache clean\r\n\r\nbuild on linux will generate this error:\r\n\r\n````CMD\r\nubuntu@ip-192-168-1-12:/var/www/html/ProjectBnet/source/ProjectB/ProjectB/src/CompanyName.ProjectB$ dotnet restore\r\n  Restore completed in 46.34 ms for /var/www/html/ProjectBnet/source/ProjectB/ProjectA/src/CompanyName.ProjectA/CompanyName.ProjectA.csproj.\r\n  Restore completed in 56.63 ms for /var/www/html/ProjectBnet/source/ProjectB/ProjectB/src/CompanyName.ProjectB/CompanyName.ProjectB.csproj.\r\n  Restore completed in 10.82 ms for /var/www/html/ProjectBnet/source/ProjectB/ProjectB/src/CompanyName.ProjectB/CompanyName.ProjectB.csproj.\r\nubuntu@ip-192-168-1-12:/var/www/html/ProjectBnet/source/ProjectB/ProjectB/src/CompanyName.ProjectB$ dotnet build\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 47.06 ms for /var/www/html/ProjectBnet/source/ProjectB/ProjectA/src/CompanyName.ProjectA/CompanyName.ProjectA.csproj.\r\n  Restore completed in 59.92 ms for /var/www/html/ProjectBnet/source/ProjectB/ProjectB/src/CompanyName.ProjectB/CompanyName.ProjectB.csproj.\r\n  Restore completed in 10.83 ms for /var/www/html/ProjectBnet/source/ProjectB/ProjectB/src/CompanyName.ProjectB/CompanyName.ProjectB.csproj.\r\n/usr/share/dotnet/sdk/2.2.101/Microsoft.ProjectA.CurrentVersion.targets(2110,5): warning MSB3245: Could not resolve this reference. Could not locate the assembly \"Microsoft.AspNetCore.Http.Features, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. [/var/www/html/ProjectBnet/source/ProjectB/ProjectA/src/CompanyName.ProjectA/CompanyName.ProjectA.csproj]\r\nFileTypes.cs(1,17): error CS0234: The type or namespace name 'AspNetCore' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?) [/var/www/html/ProjectBnet/source/ProjectB/ProjectA/src/CompanyName.ProjectA/CompanyName.ProjectA.csproj]\r\nFileTypes.cs(7,41): error CS0246: The type or namespace name 'IFormFile' could not be found (are you missing a using directive or an assembly reference?) [/var/www/html/ProjectBnet/source/ProjectB/ProjectA/src/CompanyName.ProjectA/CompanyName.ProjectA.csproj]\r\n\r\nBuild FAILED.\r\n\r\n/usr/share/dotnet/sdk/2.2.101/Microsoft.ProjectA.CurrentVersion.targets(2110,5): warning MSB3245: Could not resolve this reference. Could not locate the assembly \"Microsoft.AspNetCore.Http.Features, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. [/var/www/html/ProjectBnet/source/ProjectB/ProjectA/src/CompanyName.ProjectA/CompanyName.ProjectA.csproj]\r\nFileTypes.cs(1,17): error CS0234: The type or namespace name 'AspNetCore' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?) [/var/www/html/ProjectBnet/source/ProjectB/ProjectA/src/CompanyName.ProjectA/CompanyName.ProjectA.csproj]\r\nFileTypes.cs(7,41): error CS0246: The type or namespace name 'IFormFile' could not be found (are you missing a using directive or an assembly reference?) [/var/www/html/ProjectBnet/source/ProjectB/ProjectA/src/CompanyName.ProjectA/CompanyName.ProjectA.csproj]\r\n    1 Warning(s)\r\n    2 Error(s)\r\n\r\nTime Elapsed 00:00:02.99\r\n````\r\n\r\n## Expected  behavior\r\n\r\nboth behave same, both throw error or both pass successfully\r\n## Actual behavior\r\non windows pass and on linux fail, i understand that it can be fixed by refering to correct nuget package on project A, but the point is my build pipeline shouldn't fail because of this things, a successful build on windows should result a successful build on windows. \r\n\r\n## Environment data\r\n`dotnet --info` windows output:\r\n\r\n```CMD\r\nC:\\Users\\user-dev\\source\\repos\\user\\ProjectB\\ProjectB\\src\\CompanyName.ProjectB>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n`dotnet --info` linux output:\r\n```CMD\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.101/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.200 [/usr/share/dotnet/sdk]\r\n  2.2.101 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10516","RelatedDescription":"Open issue \"Dotnet restore bahave differently on linux and windows\" (#10516)"},{"Id":"394503605","IsPullRequest":false,"CreatedAt":"2018-12-27T23:53:53","Actor":"KathleenDollard","Number":"10514","RawContent":null,"Title":"Nightly build install fails","State":"closed","Body":"## Steps to reproduce\r\nOn a Mac:\r\nInstall nightly build via the SDK installer\r\nRun either `dotnet --info` (results below) or `dotnet <valid command>`\r\n\r\n## Expected  behavior\r\nThings to work as requested\r\n\r\n## Actual behavior\r\nThe error as shown below. The command does not execute. \r\n\r\n## Environment data\r\n```bash\r\n~ $ dotnet --info\r\nError:\r\n  An assembly specified in the application dependencies manifest (dotnet.deps.json) was not found:\r\n    package: 'System.Security.Cryptography.ProtectedData', version: '4.3.0'\r\n    path: 'runtimes/unix/lib/netstandard1.3/System.Security.Cryptography.ProtectedData.dll'\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  2.0.0 [/usr/local/share/dotnet/sdk]\r\n  2.0.3 [/usr/local/share/dotnet/sdk]\r\n  2.1.3 [/usr/local/share/dotnet/sdk]\r\n  2.1.300-preview1-008174 [/usr/local/share/dotnet/sdk]\r\n  2.1.300-preview2-008065 [/usr/local/share/dotnet/sdk]\r\n  2.1.300-preview2-008260 [/usr/local/share/dotnet/sdk]\r\n  2.1.300-preview2-008530 [/usr/local/share/dotnet/sdk]\r\n  2.1.300-preview2-008533 [/usr/local/share/dotnet/sdk]\r\n  2.1.301 [/usr/local/share/dotnet/sdk]\r\n  2.1.400-preview-009130 [/usr/local/share/dotnet/sdk]\r\n  2.1.401 [/usr/local/share/dotnet/sdk]\r\n  2.1.403 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009974 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30171 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30475 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30171 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30475 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26406-04 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview3-26411-06 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10514","RelatedDescription":"Closed issue \"Nightly build install fails\" (#10514)"},{"Id":"394503873","IsPullRequest":false,"CreatedAt":"2018-12-27T23:46:53","Actor":"KathleenDollard","Number":"10515","RawContent":null,"Title":"Tarball and pkg/SDK installer versions are different in nightly build","State":"closed","Body":"tarball:\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-009844 [/Users/kathleen/Downloads/dotnet-sdk-latest-osx-x64/sdk]\r\n\r\npkg:\r\n  3.0.100-preview-009974 [/usr/local/share/dotnet/sdk]\r\n\r\nExpect them to be the same \r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10515","RelatedDescription":"Closed issue \"Tarball and pkg/SDK installer versions are different in nightly build\" (#10515)"},{"Id":"394470174","IsPullRequest":false,"CreatedAt":"2018-12-27T19:20:39","Actor":"peterhuene","Number":"10513","RawContent":null,"Title":"Unbound variable `DOTNET_INSTALL_DIR` in `eng/restore-toolset.sh`","State":"open","Body":"## Steps to reproduce\r\n\r\n1. `git clone https://github.com/dotnet/cli`\r\n2. `cd cli`\r\n2. `./build.sh`\r\n3. `./build.sh`\r\n\r\n## Expected  behavior\r\n\r\nThe second build should succeed.\r\n\r\n## Actual behavior\r\n\r\n`eng/restore-toolset.sh: line 46: DOTNET_INSTALL_DIR: unbound variable`\r\n\r\n## Workaround\r\n\r\n`DOTNET_INSTALL_DIR=$(pwd)/.dotnet ./build.sh`\r\n\r\n## Environment data\r\n\r\nRepros on macOS 10.14 and Ubuntu 16.04.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10513","RelatedDescription":"Open issue \"Unbound variable `DOTNET_INSTALL_DIR` in `eng/restore-toolset.sh`\" (#10513)"},{"Id":"394461426","IsPullRequest":false,"CreatedAt":"2018-12-27T18:33:50","Actor":"garrychnca","Number":"10511","RawContent":null,"Title":"%2F in path not properly interpreted when dotnet build","State":"open","Body":"## Steps to reproduce\r\nIn linux, put the solution folder under a path which contains \"%2F\" (the url-encoded of /) and run `dotnet build` under the project folder.\r\n\r\nIn my case:\r\n1.  create a folder named \"temp%2Ftemp\"\r\n2.  put the solution folder under the \"temp%2Ftemp\" folder\r\n3.  run `dotnet build`  under the project folder within the solution folder\r\n\r\n## Expected  behavior\r\nThe command should build the project without any error.\r\n\r\n## Actual behavior\r\n```\r\n\r\n[root@vm api]# pwd\r\n/root/workspace/repos/temp%2Ftemp/solution/api\r\n[root@vm api]# dotnet build --verbosity normal\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 12/27/18 10:11:22 AM.\r\n     1>Project \"/root/workspace/repos/temp%2Ftemp/solution/api/solution-api.csproj\" on node 1 (Restore target(s)).\r\n     1>Restore:\r\n         Committing restore...\r\n         Assets file has not changed. Skipping assets file writing. Path: /root/workspace/repos/temp%2Ftemp/solution/api/obj/project.assets.json\r\n         Restore completed in 47.46 ms for /root/workspace/repos/temp%2Ftemp/solution/api/solution-api.csproj.\r\n\r\n         NuGet Config files used:\r\n             /root/.nuget/NuGet/NuGet.Config\r\n\r\n         Feeds used:\r\n             https://api.nuget.org/v3/index.json\r\n     1>Done Building Project \"/root/workspace/repos/temp%2Ftemp/solution/api/solution-api.csproj\" (Restore target(s)).\r\n   1:7>Project \"/root/workspace/repos/temp%2Ftemp/solution/api/solution-api.csproj\" on node 1 (Build target(s)).\r\n     1>/usr/share/dotnet/sdk/2.1.500/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error NETSDK1004: Assets file '/root/workspace/repos/temp/temp/solution/api/obj/project.assets.json' not found. Run a NuGet package restore to generate this file. [/root/workspace/repos/temp%2Ftemp/solution/api/solution-api.csproj]\r\n     1>Done Building Project \"/root/workspace/repos/temp%2Ftemp/solution/api/solution-api.csproj\" (Build target(s)) -- FAILED.\r\n\r\nBuild FAILED.\r\n\r\n       \"/root/workspace/repos/temp%2Ftemp/solution/api/solution-api.csproj\" (Build target) (1:7) ->\r\n       (ResolvePackageAssets target) ->\r\n         /usr/share/dotnet/sdk/2.1.500/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error NETSDK1004: Assets file '/root/workspace/repos/temp/temp/solution/api/obj/project.assets.json' not found. Run a NuGet package restore to generate this file. [/root/workspace/repos/temp%2Ftemp/solution/api/solution-api.csproj]\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.97\r\n[root@vm api]#\r\n```\r\n\r\nPlease note for the above command line output, all the places have \"temp%2Ftemp\" logged except the error logged by `Microsoft.PackageDependencyResolution.targets(198,5)`:\r\n\r\n1>/usr/share/dotnet/sdk/2.1.500/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(198,5): error NETSDK1004: Assets file '/root/workspace/repos/**temp/temp**/solution/api/obj/project.assets.json' not found. Run a NuGet package restore to generate this file. [/root/workspace/repos/temp%2Ftemp/solution/api/solution-api.csproj]\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n[root@vm api]# dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.500/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n[root@vm api]#\r\n```","Url":"https://github.com/dotnet/cli/issues/10511","RelatedDescription":"Open issue \"%2F in path not properly interpreted when dotnet build\" (#10511)"},{"Id":"393671613","IsPullRequest":true,"CreatedAt":"2018-12-27T18:11:35","Actor":"dotnet-maestro[bot]","Number":"10503","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18621.6\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10503","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10503)"},{"Id":"394210055","IsPullRequest":false,"CreatedAt":"2018-12-26T18:12:13","Actor":"spushpendra2000","Number":"10509","RawContent":null,"Title":"LD_LIBRARY_PATH icu issue","State":"closed","Body":"## Steps to reproduce\r\nI am using dotnet core 2.1 on centos. and trying to load the dll.\r\n\r\nWhen running , i am getting this error\r\nFailFast:\r\nCouldn't find a valid ICU package installed on the system. Set the configuration flag System.Globalization.Invariant to true if you want to run with no globalization support.\r\n\r\n   at System.Environment.FailFast(System.String)\r\n   at System.Globalization.GlobalizationMode.GetGlobalizationInvariantMode()\r\n   at System.Globalization.GlobalizationMode..cctor()\r\n   at System.Globalization.CultureData.CreateCultureWithInvariantData()\r\n   at System.Globalization.CultureData.get_Invariant()\r\n   at System.Globalization.CultureInfo..cctor()\r\n   at System.StringComparer..cctor()\r\n   at System.AppDomain.InitializeCompatibilityFlags()\r\n   at System.AppDomain.Setup(System.Object)\r\nAborted (core dumped)\r\n\r\n\r\nI can see the suggestion as per the link\r\nhttps://github.com/dotnet/core/blob/master/Documentation/build-and-install-rhel6-prerequisites.md\r\n\r\nBut I cannot change the icu path and when i tried creating the local folder 'netcoredeps' where my dll is residing it never work and i keep getting the same error.\r\nOnly after the setting the LD_LIBRARY_PATH, it is working.. Please suggest who to resolve this\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10509","RelatedDescription":"Closed issue \"LD_LIBRARY_PATH icu issue\" (#10509)"},{"Id":"394194627","IsPullRequest":false,"CreatedAt":"2018-12-26T18:10:41","Actor":"jkotas","Number":"10508","RawContent":null,"Title":"Bug: WinFX.targets was not found","State":"closed","Body":"_From @HamedMasafi on December 25, 2018 8:31_\n\nI have installed dotnet core 3 preview on opensuse leap 15.0\r\nThe file that I downloaded is: https://dotnet.microsoft.com/download/thank-you/dotnet-sdk-3.0.100-preview-009812-linux-x64-binaries\r\n\r\nI've try to build an app:\r\n\r\n```\r\nhamed@linux-f1fa:~/tmp/> mkdir -p dwin && cd dwin\r\n```\r\n\r\n```\r\nhamed@linux-f1fa:~/tmp/dwin> /opt/apps/dotnet/dotnet new winforms       \r\n\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous. It is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\n\r\nASP.NET Core\r\n------------\r\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\r\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms refer to the platform specific documentation.\r\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\r\nGetting ready...\r\nThe template \"Windows Forms Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on /home/hamed/tmp/dwin/dwin.csproj...\r\n  Restoring packages for /home/hamed/tmp/dwin/dwin.csproj...\r\n  Installing Microsoft.NETCore.DotNetAppHost 3.0.0-preview-27122-01.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 3.0.0-preview-27122-01.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 3.0.0-preview-27122-01.\r\n  Installing Microsoft.NETCore.Platforms 3.0.0-preview.18571.3.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing Microsoft.NETCore.Targets 2.0.0.\r\n  Installing Microsoft.NETCore.App 3.0.0-preview-27122-01.\r\n  Installing Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetAppHost 3.0.0-preview-27122-01.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostResolver 3.0.0-preview-27122-01.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostPolicy 3.0.0-preview-27122-01.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.App 3.0.0-preview-27122-01.\r\n  Generating MSBuild file /home/hamed/tmp/dwin/obj/dwin.csproj.nuget.g.props.\r\n  Generating MSBuild file /home/hamed/tmp/dwin/obj/dwin.csproj.nuget.g.targets.\r\n  Restore completed in 4.87 min for /home/hamed/tmp/dwin/dwin.csproj.\r\n\r\nRestore succeeded.\r\n```\r\n\r\n```\r\nhamed@linux-f1fa:~/tmp/dwin> /opt/apps/dotnet/dotnet run\r\n/opt/apps/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.NET.Sdk.WindowsDesktop.targets(14,2): error MSB4019: The imported project \"/opt/apps/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.WinFX.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk. [/home/hamed/tmp/dwin/dwin.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\nThe file exists but in other case:\r\n```\r\n/opt/apps/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.WinFx.targets\r\n```\r\nThe 'x' on WinFx is lower but dotnet expect to it be upper.\r\n\r\nI've created a copy with this command but I know is not good way for solving bugs\r\n```\r\ncp /opt/apps/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.WinF{x,X}.targets\r\n```\n\n_Copied from original issue: dotnet/coreclr#21673_","Url":"https://github.com/dotnet/cli/issues/10508","RelatedDescription":"Closed issue \"Bug: WinFX.targets was not found\" (#10508)"},{"Id":"393877717","IsPullRequest":true,"CreatedAt":"2018-12-24T17:58:53","Actor":"dotnet-maestro[bot]","Number":"10507","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18623.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10507","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10507)"},{"Id":"393688371","IsPullRequest":false,"CreatedAt":"2018-12-24T00:49:22","Actor":"DoCode","Number":"10506","RawContent":null,"Title":"[dotnet tools] Multiple commands/aliases","State":"closed","Body":"How to create one or more aliases for a dotnet tool?\r\n\r\nIn the project file only the `ToolCommandName` is available:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  ...\r\n  <PropertyGroup>\r\n    ...\r\n    <PackAsTool>true</PackAsTool>\r\n    <ToolCommandName>toolname</ToolCommandName>\r\n  ...\r\n  </PropertyGroup>\r\n  ...\r\n</Project>\r\n```\r\n\r\nExpected:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  ...\r\n  <PropertyGroup>\r\n    ...\r\n    <PackAsTool>true</PackAsTool>\r\n    <ToolCommandNames>toolname;tn;another-alias</ToolCommandNames>\r\n  ...\r\n  </PropertyGroup>\r\n  ...\r\n</Project>\r\n```\r\n\r\nSo the tool can be executed as\r\n```batch\r\n> toolname\r\n> tn\r\n> another-alias\r\n```","Url":"https://github.com/dotnet/cli/issues/10506","RelatedDescription":"Closed issue \"[dotnet tools] Multiple commands/aliases\" (#10506)"},{"Id":"393671616","IsPullRequest":true,"CreatedAt":"2018-12-23T18:29:06","Actor":"dotnet-maestro[bot]","Number":"10504","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18621.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18621.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10504","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10504)"},{"Id":"393680393","IsPullRequest":false,"CreatedAt":"2018-12-23T18:10:11","Actor":"TothZoltan2018","Number":"10505","RawContent":null,"Title":"Install the .NET SDK on Windows Subsystem Linux Ubuntu 18.04 - Reading package lists... Error!","State":"closed","Body":"## Steps to reproduce\r\nI try to install Install .NET SDK ([instruction here)](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial#install) to WSL Ubuntu 18.04 ([instruction here](https://docs.microsoft.com/en-us/windows/wsl/install-win10)) ([package here](https://www.microsoft.com/hu-hu/p/ubuntu-1804-lts/9n9tngvndl3q?activetab=pivot%3Aoverviewtab))\r\n\r\n## Expected  behavior\r\nSuccessfull installation of .Net SDK on Ubuntu WSL\r\n\r\n## Actual behavior\r\n\r\nI could install Ubuntu but I can not install .NET SDK. It looks as if something is wrong with permissions althought the commands I copied from the tutirial use sudo... \r\n<pre>\r\ntothz@hp-PC:~/repos$ wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb\r\ntothz@hp-PC:~/repos$ sudo dpkg -i packages-microsoft-prod.deb\r\n[sudo] password for tothz:\r\n(Reading database ... 28498 files and directories currently installed.)\r\nPreparing to unpack packages-microsoft-prod.deb ...\r\nUnpacking packages-microsoft-prod (1.0-ubuntu18.04.1) over (1.0-ubuntu18.04.1) ...\r\nSetting up packages-microsoft-prod (1.0-ubuntu18.04.1) ...\r\ntothz@hp-PC:~/repos$ sudo add-apt-repository universe\r\n'universe' distribution component is already enabled for all sources.\r\ntothz@hp-PC:~/repos$ sudo apt-get install apt-transport-https\r\nReading package lists... Error!\r\nE: Problem renaming the file /var/cache/apt/srcpkgcache.bin.peXWA6 to /var/cache/apt/srcpkgcache.bin - rename (13: Permission denied)\r\nE: Could not open file /var/lib/dpkg/status - open (2: No such file or directory)\r\nE: Problem opening /var/lib/dpkg/status\r\nE: The package lists or status file could not be parsed or opened.\r\ntothz@hp-PC:~/repos$\r\n</pre>\r\n\r\nI got some tips such as:\r\n$ sudo rm -fr /var/cache/apt\r\n$ sudo mv /var/lib/dpkg/status /var/lib/dpkg/status-bak  #could fail if it doesn't exist\r\n$ sudo touch /var/lib/dpkg/status\r\n$ sudo apt clean\r\n$ sudo apt update && sudo apt upgrade\r\n$ # try again, probably starting with sudo apt install apt-transport-https,\r\n$ # if that's what you are after\r\n\r\nHowever, all in vain.\r\n\r\n## Environment data\r\n\r\nMy Windows bulid number is: \"Microsoft Windows [Version 10.0.17134.471]\"\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10505","RelatedDescription":"Closed issue \"Install the .NET SDK on Windows Subsystem Linux Ubuntu 18.04 - Reading package lists... Error!\" (#10505)"},{"Id":"393614641","IsPullRequest":false,"CreatedAt":"2018-12-21T23:07:21","Actor":"dsplaisted","Number":"10502","RawContent":null,"Title":"Handle targeting packs in PreserveCompilationContext","State":"open","Body":"When doing a build with PreserveCompilationContext, referenced assemblies are copied to the refs folder of the output directory.  However, assemblies coming from NuGet packages aren't copied, and are looked up in the NuGet cache at runtime.\r\n\r\nWith [Targeting packs](https://github.com/dotnet/cli/issues/10006) for .NET Core 3.0, the Framework reference assemblies don't go through the NuGet assets pipeline, and so they are now being copied to the refs folder in the output.\r\n\r\nWe should figure out what to do here.  Possibly the DependencyModel code needs to be updated to understand how to locate .NET Core targeting packs, the same way that it can do with .NET Framework targeting packs.\r\n\r\ncc @natemcmaster @eerhardt ","Url":"https://github.com/dotnet/cli/issues/10502","RelatedDescription":"Open issue \"Handle targeting packs in PreserveCompilationContext\" (#10502)"},{"Id":"393553001","IsPullRequest":false,"CreatedAt":"2018-12-21T18:35:34","Actor":"livarcocc","Number":"10501","RawContent":null,"Title":"Document Composable Shared frameworks design","State":"open","Body":"","Url":"https://github.com/dotnet/cli/issues/10501","RelatedDescription":"Open issue \"Document Composable Shared frameworks design\" (#10501)"},{"Id":"393451631","IsPullRequest":true,"CreatedAt":"2018-12-21T18:14:47","Actor":"dotnet-maestro[bot]","Number":"10500","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18620.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10500","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10500)"},{"Id":"393037859","IsPullRequest":true,"CreatedAt":"2018-12-20T21:31:45","Actor":"dotnet-maestro[bot]","Number":"10498","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18619.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10498","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10498)"},{"Id":"392984041","IsPullRequest":false,"CreatedAt":"2018-12-20T21:01:30","Actor":"nopara73","Number":"10497","RawContent":null,"Title":"Implement `dotnet telemetry on/off` command","State":"closed","Body":"I am building a privacy focused software (https://github.com/zkSNACKs/WalletWasabi/) with .NET Core.  \r\nWhile I am used to getting MS-shamed by some over-enthusiastic Linux users, once in a while their complains are on point. The issue of .NET telemetry is one of those things.  \r\nI have read the related issue here (https://github.com/dotnet/cli/issues/3093) and while I do not agree with, I acknowledge and respect the opinion and the decisions of the maintainers on this matter.  \r\n\r\nHowever I believe providing a\r\n\r\n- [ ] **preemptive** and\r\n- [ ] **easy way** to\r\n- [ ] **permanently** turn off the telemetry\r\n- [ ] while **avoiding future telemetry notifications** at updates\r\n\r\nis reasonable to ask for.\r\n\r\nBy **preemptively** I mean it should not start collecting data, only after the first notification is shown to the user.  \r\nI would suggest a command `dotnet telemetry on/off` to be an **easy way** to turn off the telemetry.  \r\nIt is important that it should turn off the telemetry **permanently**, so future updates won't set it back. I can't imagine that the user's intention is that updates to turn on the telemetry. \r\nAnd finally the purpose of **avoiding future telemetry notifications** is more like making sure the user won't get uncomfortable by reminding him or her about a feature (that is already turned off) that he or she may consider to be slightly unethical.\r\n![image](https://user-images.githubusercontent.com/9156103/50279307-9cb8ef00-0449-11e9-9cf4-d2fa0305961f.png)  ","Url":"https://github.com/dotnet/cli/issues/10497","RelatedDescription":"Closed issue \"Implement `dotnet telemetry on/off` command\" (#10497)"},{"Id":"393172376","IsPullRequest":false,"CreatedAt":"2018-12-20T19:00:41","Actor":"wli3","Number":"10499","RawContent":null,"Title":"Add run `dotnet new tool-manifest` to the error message of cannot find manifest","State":"open","Body":"We should guide the user to run _dotnet new tool-manifest_ if they want to create it when there is no manifest in _dotnet tool restore_ or _dotnet tool install mytool_ ","Url":"https://github.com/dotnet/cli/issues/10499","RelatedDescription":"Open issue \"Add run `dotnet new tool-manifest` to the error message of cannot find manifest\" (#10499)"},{"Id":"392809570","IsPullRequest":false,"CreatedAt":"2018-12-19T22:53:17","Actor":"nguerrera","Number":"10496","RawContent":null,"Title":"Determine how to version in-box RID graph","State":"open","Body":"For initial bring-up, we will have exactly one version of the RID graph in the .NET Core SDK.\r\n\r\nWe need to figure out how to prevent breaking changes. By this we mean that we don't want the assets selected in a build to change with an sdk change and no project change. We thought about versioning it by TFM, but there's just one Platforms package today with increasing version for all TFMs.\r\n\r\ncc @dsplaisted \r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10496","RelatedDescription":"Open issue \"Determine how to version in-box RID graph\" (#10496)"},{"Id":"392592476","IsPullRequest":true,"CreatedAt":"2018-12-19T18:16:02","Actor":"dotnet-maestro[bot]","Number":"10495","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18618.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10495","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10495)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-26T21:14:18","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"closed","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Closed or merged PR \"Fix representation of enum values\" (#1039)"},{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2018-12-21T00:51:26","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"open","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Open PR \"Remove the manual config system\" (#1040)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"},{"Id":"392786865","IsPullRequest":false,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1029","RawContent":null,"Title":"Add ApiCompat run for netstandard2.0","State":"closed","Body":"We should add an APICompat run that checks against 2.0, similar the ones we already have for 1.0-1.6: https://github.com/dotnet/standard/blob/master/apicompat/baselines/ApiCompatBaseline.netstandard1.6.txt","Url":"https://github.com/dotnet/standard/issues/1029","RelatedDescription":"Closed issue \"Add ApiCompat run for netstandard2.0\" (#1029)"},{"Id":"393005614","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Number":"1035","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1035)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2018-12-20T11:58:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"open","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Open issue \"Group source items in a src folder\" (#1037)"},{"Id":"393001679","IsPullRequest":true,"CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Number":"1034","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1034)"},{"Id":"392986163","IsPullRequest":false,"CreatedAt":"2018-12-20T10:40:01","Actor":"ViktorHofer","Number":"1032","RawContent":null,"Title":"Remove slim configuration system and stop overloading Configuration","State":"open","Body":"We should stop overloading the `Configuration` property in favor of the right msbuild properties and remove the `ConfigurationGroup` property to enable native VS support and remove a lot of obsolete stuff.\r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)'==''\">\r\n    <ConfigurationGroup Condition=\"'$(ConfigurationGroup)'==''\">Debug</ConfigurationGroup>\r\n    <Configuration>$(ConfigurationGroup)</Configuration>\r\n    <Configuration Condition=\"'$(TargetGroup)'!=''\">$(TargetGroup)_$(Configuration)</Configuration>\r\n    <Configuration Condition=\"'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'\">$(OSGroup)_$(Configuration)</Configuration>\r\n  </PropertyGroup>\r\n```\r\n\r\ncc @ericstj @wtgodbe ","Url":"https://github.com/dotnet/standard/issues/1032","RelatedDescription":"Open issue \"Remove slim configuration system and stop overloading Configuration\" (#1032)"},{"Id":"392982975","IsPullRequest":false,"CreatedAt":"2018-12-20T10:31:53","Actor":"ViktorHofer","Number":"1031","RawContent":null,"Title":"Remove depproj approach and enable project restore","State":"open","Body":"As discussed in another PR I think it makes sense to remove the depproj approach here in the standard repo and follow the usual way of referencing packages directly in the respective project, in this case netstandard.csproj. Also the netstandard.builds file which restores for different frameworks can be incorporated in the csproj by adding a `TargetFrameworks` property and right PackageReference conditions. \r\n\r\ncc @wtgodbe @ericstj ","Url":"https://github.com/dotnet/standard/issues/1031","RelatedDescription":"Open issue \"Remove depproj approach and enable project restore\" (#1031)"},{"Id":"392822069","IsPullRequest":true,"CreatedAt":"2018-12-20T10:07:40","Actor":"wtgodbe","Number":"1030","RawContent":null,"Title":"Delete CI & redundant publish file","State":"closed","Body":"This deletes the old `netci.groovy` file, since we're using Azure DevOps for CI now. It also deletes `publish.msbuild`, which isn't used anywhere.\r\n\r\n@ViktorHofer PTAL","Url":"https://github.com/dotnet/standard/pull/1030","RelatedDescription":"Closed or merged PR \"Delete CI & redundant publish file\" (#1030)"},{"Id":"391885087","IsPullRequest":true,"CreatedAt":"2018-12-19T23:33:25","Actor":"wtgodbe","Number":"1027","RawContent":null,"Title":"Build Standard entirely against Arcade, without Buildtools","State":"closed","Body":"This cuts out buildtools entirely from the Standard repo, so that we fully rely on the Arcade SDK to build against instead. It replaces the functionality for code analyzers, `ValidateApiCompatForSrc`, and the build tasks.\r\n\r\n@ericstj @safern @danmosemsft @ViktorHofer @chcosta PTAL\r\n\r\nCC @karelz ","Url":"https://github.com/dotnet/standard/pull/1027","RelatedDescription":"Closed or merged PR \"Build Standard entirely against Arcade, without Buildtools\" (#1027)"},{"Id":"390377097","IsPullRequest":true,"CreatedAt":"2018-12-19T01:30:18","Actor":"terrajobst","Number":"1013","RawContent":null,"Title":"Add missing readonly modifiers","State":"closed","Body":"This fixes #842 (or at least is a sizable down payment).","Url":"https://github.com/dotnet/standard/pull/1013","RelatedDescription":"Closed or merged PR \"Add missing readonly modifiers\" (#1013)"},{"Id":"390839367","IsPullRequest":true,"CreatedAt":"2018-12-19T01:29:43","Actor":"terrajobst","Number":"1020","RawContent":null,"Title":"Reduce noise in reference assemblies","State":"closed","Body":"This doesn't change any APIs. It's just reducing noise from in the textual diff of the reference assemblies.\r\n\r\n* Fix trailing whitespace (69cb85e)\r\n* Mark types as partial (c9725f7)\r\n* Replace handwritten base calls with generated ones (78649f6)\r\n","Url":"https://github.com/dotnet/standard/pull/1020","RelatedDescription":"Closed or merged PR \"Reduce noise in reference assemblies\" (#1020)"},{"Id":"392146465","IsPullRequest":true,"CreatedAt":"2018-12-18T13:01:40","Actor":"dotnet-maestro[bot]","Number":"1028","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18617.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18618.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1028","RelatedDescription":"Open PR \"Update dependency files\" (#1028)"},{"Id":"390383237","IsPullRequest":true,"CreatedAt":"2018-12-17T19:11:23","Actor":"terrajobst","Number":"1014","RawContent":null,"Title":"Add IAsyncDisposable","State":"closed","Body":"This adds API support for the new C# 8 feature to call dispose asynchronously:\r\n\r\n```C#\r\nawait using(var stream = File.OpenWrite(path))\r\n{\r\n    await data.WriteAsync(stream);\r\n}\r\n```\r\n\r\nFor more details, see:\r\n\r\nhttps://github.com/dotnet/csharplang/blob/master/proposals/async-streams.md","Url":"https://github.com/dotnet/standard/pull/1014","RelatedDescription":"Closed or merged PR \"Add IAsyncDisposable\" (#1014)"},{"Id":"391702003","IsPullRequest":true,"CreatedAt":"2018-12-17T15:07:31","Actor":"dotnet-maestro[bot]","Number":"1026","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1026","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1026)"},{"Id":"391465145","IsPullRequest":true,"CreatedAt":"2018-12-16T19:53:13","Actor":"dotnet-maestro[bot]","Number":"1025","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1025","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1025)"},{"Id":"391463924","IsPullRequest":false,"CreatedAt":"2018-12-16T12:45:44","Actor":"dmitriyse","Number":"1024","RawContent":null,"Title":"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset","State":"open","Body":"Please open new .NetStandard branch with deep refresh of .Net API surface.\r\nCurrently .NetStandard 2.0 and it's successor .NetStandard 2.1 contains everything that were added in .net since version 1.0. Some API is already outdated and another will become outdated soon.\r\n\r\n.Net Standard 2.1 have some positive movements. It's drops some components to out of standard into additional components.\r\n\r\nBut it's not enough. It's time to stay in .Net Standard only good and modern parts.\r\nFor example:\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(T[] array);\r\n     // ...\r\n}\r\n```\r\ncan be replaced with:\r\n\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(Span<T> output);\r\n     // ...\r\n}\r\n```\r\nAssemblies targeting .NetStandard 2.0, .NetStandard 2.1 and proposed .NetStandard 3.0.0 should be capable to work side-by-side inside the same AppDomain.\r\n\r\nTODO: Add diagram.\r\n","Url":"https://github.com/dotnet/standard/issues/1024","RelatedDescription":"Open issue \"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset\" (#1024)"},{"Id":"391376312","IsPullRequest":true,"CreatedAt":"2018-12-15T13:41:30","Actor":"dotnet-maestro[bot]","Number":"1023","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18614.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1023","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1023)"},{"Id":"391102384","IsPullRequest":true,"CreatedAt":"2018-12-14T13:21:43","Actor":"dotnet-maestro[bot]","Number":"1021","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1021","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1021)"},{"Id":"390833738","IsPullRequest":true,"CreatedAt":"2018-12-13T19:52:44","Actor":"terrajobst","Number":"1019","RawContent":null,"Title":"Require support for default implementations of interfaces","State":"open","Body":"This marker will require all implementations of .NET Standard 2.1 to support default implementations of interfaces. Needless to say that this has runtime impact. The benefit of doing this in the standard is that it allows library authors to use this feature for their interfaces. The downside is that that this is potentially a lot of runtime work. I'm curious to how the board feels about absorbing that change for .NET Standard 2.1, especially @dotnet/nsboard-xamarin and @dotnet/nsboard-unity.","Url":"https://github.com/dotnet/standard/pull/1019","RelatedDescription":"Open PR \"Require support for default implementations of interfaces\" (#1019)"},{"Id":"390830254","IsPullRequest":true,"CreatedAt":"2018-12-13T19:42:55","Actor":"terrajobst","Number":"1018","RawContent":null,"Title":"WIP: Add support for Index and Range","State":"open","Body":"This adds the basic APIs for `Index` and `Range`. However, it misses most of the [companion APIs](https://github.com/dotnet/designs/blob/master/accepted/system-range/system-range.md#companion-apis) because they don't even exist in CoreFx yet. The work is tracked in https://github.com/dotnet/corefx/issues/34076. Once done, I'll update the PR to reflect the final API shape.\r\n\r\nFor now, this PR is just a tracking item to remind us to get it done for 2.1.","Url":"https://github.com/dotnet/standard/pull/1018","RelatedDescription":"Open PR \"WIP: Add support for Index and Range\" (#1018)"},{"Id":"390822437","IsPullRequest":true,"CreatedAt":"2018-12-13T19:20:57","Actor":"terrajobst","Number":"1017","RawContent":null,"Title":"WIP: Add IAsyncEnumerable<T>","State":"open","Body":"This API is depending on the CoreFX work: dotnet/corefx#33909. Once we closed on the design I'll update this PR.","Url":"https://github.com/dotnet/standard/pull/1017","RelatedDescription":"Open PR \"WIP: Add IAsyncEnumerable<T>\" (#1017)"},{"Id":"390444044","IsPullRequest":true,"CreatedAt":"2018-12-13T18:57:05","Actor":"wtgodbe","Number":"1015","RawContent":null,"Title":"Enable publishing to build-assets registry","State":"closed","Body":"Now that Standard is placing build output in `artifacts`, we can opt-in to publishing build assets to the BAR.\r\n\r\n@chcosta @mmitche PTAL","Url":"https://github.com/dotnet/standard/pull/1015","RelatedDescription":"Closed or merged PR \"Enable publishing to build-assets registry\" (#1015)"},{"Id":"390668875","IsPullRequest":true,"CreatedAt":"2018-12-13T13:31:43","Actor":"dotnet-maestro[bot]","Number":"1016","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18612.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1016","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1016)"},{"Id":"390354570","IsPullRequest":true,"CreatedAt":"2018-12-12T23:16:02","Actor":"terrajobst","Number":"1012","RawContent":null,"Title":"Add private fields for structs","State":"closed","Body":"No public API changes, but this fixes #678. \r\n\r\nIn a nutshell, the compiler needs to know whether a struct has any fields in order to apply definitive assignment rules. While stripping all private fields from types is generally OK, we can't do this for structs. Fortunately, for private fields the compiler doesn't really care what they are, but what their characteristics are. For example:\r\n\r\n1. Does the struct have any fields?\r\n\r\n2. Does the struct contain any reference types (to validate generic instantiations that have the unmanaged constraint)?\r\n\r\n3. Does the struct use the generic parameter in a field declaration (to validate cyclic layout problems)?\r\n\r\nThis adds dummy fields to structs to conform to these rules. These aren't computed separately but are instead taken from .NET Core.\r\n\r\nFor more details, see this issue in CoreFX:\r\n\r\nhttps://github.com/dotnet/corefx/issues/6185","Url":"https://github.com/dotnet/standard/pull/1012","RelatedDescription":"Closed or merged PR \"Add private fields for structs\" (#1012)"},{"Id":"390224712","IsPullRequest":false,"CreatedAt":"2018-12-12T19:00:27","Actor":"YairHalberstadt","Number":"1011","RawContent":null,"Title":"Add HashSet.TryGetValue to .Net Standard","State":"closed","Body":"This method is already implemented by .Net Core 2.0 and .Net Framework 4.7.2, so I imagine this would be relatively easy to include in .Net Standard 2.1.","Url":"https://github.com/dotnet/standard/issues/1011","RelatedDescription":"Closed issue \"Add HashSet.TryGetValue to .Net Standard\" (#1011)"},{"Id":"390052989","IsPullRequest":true,"CreatedAt":"2018-12-12T16:50:02","Actor":"terrajobst","Number":"1009","RawContent":null,"Title":"Clean-up reference assembly","State":"closed","Body":"This aligns the physical representation of the reference assembly with how it look like in .NET Core. No changes to the API surface; it's just to remove noise in future diffs.","Url":"https://github.com/dotnet/standard/pull/1009","RelatedDescription":"Closed or merged PR \"Clean-up reference assembly\" (#1009)"},{"Id":"390215935","IsPullRequest":true,"CreatedAt":"2018-12-12T13:46:59","Actor":"dotnet-maestro[bot]","Number":"1010","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18611.14\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1010","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1010)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"394699553","IsPullRequest":true,"CreatedAt":"2018-12-29T05:03:24","Actor":"Dotnet-GitSync-Bot","Number":"34269","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corefx/pull/34269","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34269)"},{"Id":"394758185","IsPullRequest":false,"CreatedAt":"2018-12-29T03:53:02","Actor":"lostmsu","Number":"34273","RawContent":null,"Title":"System.Range package similar to System.ValueTuple","State":"open","Body":"My understanding is `System.Range` and `System.Index` are going to be .NET Core 3.0 specific features.\r\nThat prevents me from creating a library, that targets .NET Standard 2.0 (for I need to support .NET 4.7), and implements range indexers for the types defined in it.\r\n\r\nI think it is a huge problem, especially considering the next .NET Standard is not going to be implemented by .NET 4.8.\r\n\r\nAre there any plans to deal with it?\r\n\r\nIs the problem in the desire to implement range-based indexing for the core types like `System.Array`? If so, are there ways to work around that? Can .NET Core 3.0 instead define `System._Range`, and have hypothetical System.Range package implementing an implicit conversion `System._Range` -> `System.Range`? Any other alternatives?","Url":"https://github.com/dotnet/corefx/issues/34273","RelatedDescription":"Open issue \"System.Range package similar to System.ValueTuple\" (#34273)"},{"Id":"394702376","IsPullRequest":false,"CreatedAt":"2018-12-28T21:35:09","Actor":"Symbai","Number":"34270","RawContent":null,"Title":"Process.Start fails to launch files","State":"closed","Body":"Hi\r\n\r\n.NET Core version: 3.0.100-preview-009844\r\n\r\n### Issue:\r\nProcess.Start() fails on launching files, it throws an Win32Exception \"The specified executable is not a valid application for this OS platform\". \r\n\r\n### Expected:\r\nIt should open the file with whatever program is associated to open this file.\r\n\r\n### Why is this a bug:\r\nI'm reporting this because it works absolutely fine in .NET Framework. With .NET Core 3.0 this could be a breaking change if this is intended. And when it is, what is the \".NET Core way\" to launch a file?\r\n\r\n.NET docs say: https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.start?view=netcore-2.2\r\n\r\n`Start(String) | Starts a process resource by specifying the name of a document or application file and associates the resource with a new Process component.`\r\n\r\n\r\n### Example:\r\n```\r\nclass Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var file = Path.Combine(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) + \"\\\\output.txt\");\r\n            File.WriteAllText(file, \"test\");\r\n            Process.Start(file); //throws\r\n        }\r\n    }\r\n```","Url":"https://github.com/dotnet/corefx/issues/34270","RelatedDescription":"Closed issue \"Process.Start fails to launch files\" (#34270)"},{"Id":"394716359","IsPullRequest":true,"CreatedAt":"2018-12-28T20:47:12","Actor":"Anipik","Number":"34272","RawContent":null,"Title":"Adding msbuild.sh to the root","State":"open","Body":"Currently we are making this file on the run and we are using the path to dotnet as Tools/dotnetcli/dotnet which no longer exists and we are not able to run the tests individually for the projects\r\nThe latest path to dotnet is from the root only i.e  ./dotnet/dotnet\r\n\r\nbefore\r\n```\r\n./Tools/msbuild.sh csprojpath /t:rebuildandtest (no longer working as path to dotnet has changed)\r\n```\r\nafter\r\n```\r\n./msbuild.sh csprojpath /t:rebuildandtest\r\n```","Url":"https://github.com/dotnet/corefx/pull/34272","RelatedDescription":"Open PR \"Adding msbuild.sh to the root\" (#34272)"},{"Id":"394714061","IsPullRequest":true,"CreatedAt":"2018-12-28T20:31:33","Actor":"Anipik","Number":"34271","RawContent":null,"Title":"Using FUTIMENS instead of FUTIMES","State":"open","Body":"When we copy a file, we attempt to copy the timestamp. We need to do this so that systems that compare the timestamps (such as an up-to-date check) do not see the new file as older. Windows does this automatically but for Unix we have to do it explicitly. We use either futimes or futimens. If both are available we currently prefer futimes even though futimens has better (nanosecond) granularity. This causes up-to-date checks to fail on file systems that support nanoseconds, because we see the nanoseconds on the \"source\" but the are zeros on the \"destination\". This PR changes the code to prefer futimens if both are available.\r\n\r\n\r\nRelated to https://github.com/dotnet/sdk/pull/2684\r\n\r\nbefore \r\n```\r\n        Condition(s) not met: \"isHFS\"\r\n      System.IO.Tests.FileInfo_GetSetTimes.CopyToNanoSecondsPresent [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected:   636816254491113521\r\n        Actual: 636816254491113520\r\n```","Url":"https://github.com/dotnet/corefx/pull/34271","RelatedDescription":"Open PR \"Using FUTIMENS instead of FUTIMES\" (#34271)"},{"Id":"394688520","IsPullRequest":true,"CreatedAt":"2018-12-28T19:00:16","Actor":"Dotnet-GitSync-Bot","Number":"34267","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe","Url":"https://github.com/dotnet/corefx/pull/34267","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34267)"},{"Id":"394692070","IsPullRequest":true,"CreatedAt":"2018-12-28T18:15:28","Actor":"AfsanehR","Number":"34268","RawContent":null,"Title":"Fix passing null for credentials in SqlConnectionPoolKey in master","State":"open","Body":"Fixes #34260","Url":"https://github.com/dotnet/corefx/pull/34268","RelatedDescription":"Open PR \"Fix passing null for credentials in SqlConnectionPoolKey in master\" (#34268)"},{"Id":"394673062","IsPullRequest":false,"CreatedAt":"2018-12-28T17:50:59","Actor":"pichurichko","Number":"34266","RawContent":null,"Title":"Different behaviour for Enumerable.ToArray in .net framework ","State":"closed","Body":"Please, review this code snippet:\r\n\r\n```\r\nvar emptyArray = new Object[] {};\r\nvar arr2 = emptyArray.ToArray();\r\nvar res1 = emptyArray == arr2; //false for both frameworks\r\nvar res2 = emptyArray.ToArray() == arr2;//\"false\" for .net framework but \"true\" for .net core 2.1\r\n```","Url":"https://github.com/dotnet/corefx/issues/34266","RelatedDescription":"Closed issue \"Different behaviour for Enumerable.ToArray in .net framework \" (#34266)"},{"Id":"394661452","IsPullRequest":false,"CreatedAt":"2018-12-28T15:32:28","Actor":"Marusyk","Number":"34265","RawContent":null,"Title":"Different behavior of Path.GetDirectoryName() in netcoreapp2.2 is not documented","State":"open","Body":"As described in #19334 there is a difference in behavior here as .Net Core returns `null` when `Path.GetDirectoryName(string.Empty)` and Desktop throws and `ArgumentException` \r\n\r\nBut [documentations](https://docs.microsoft.com/en-us/dotnet/api/system.io.path.getdirectoryname?view=netcore-2.2#System_IO_Path_GetDirectoryName_System_String_) says that an exception throws when the path parameter contains invalid characters, is empty, or contains only white spaces. \r\n\r\nShould it be changed to ?:\r\nhttps://github.com/dotnet/corefx/blob/4a514a62115ccf94636ca96e2d32af7d330d05f6/src/Common/src/CoreLib/System/IO/Path.cs#L77\r\n\r\nRelated #19337","Url":"https://github.com/dotnet/corefx/issues/34265","RelatedDescription":"Open issue \"Different behavior of Path.GetDirectoryName() in netcoreapp2.2 is not documented\" (#34265)"},{"Id":"394649585","IsPullRequest":false,"CreatedAt":"2018-12-28T14:33:08","Actor":"PiGi78","Number":"34264","RawContent":null,"Title":"System.IO.File won't lock file on SLES 12.3","State":"open","Body":"File locks seem don't work on SLES 12.3\r\n\r\nFor give you an example, I did a simple program that manages locks using a FileStream.\r\nIf you look at the attached LockManager, it manages the locks in this way:\r\n- Acquire the lock: Opens a FileStream for write and shares it only for read\r\n- Check if locked: Tries to open a new FileStream for write on the same file. If an exception is thrown, then the file is locked. Elsewhere it is not locked\r\n- Release the lock: Closes the FileStream and deletes the file from the FileSystem\r\n\r\nSo, in the example program:\r\n- An instance of the LockManager locks the file \"main\"\r\n- A different instance of the LockManager tries to locks the same file\r\n\r\nSince the file is alreary locked, the program will go in a kind of dead lock (you have to kill it with ctr+c).\r\n\r\nIf you run it on a Windows system, it works good.\r\nOn SLES 12.3, the second LockManager can acquire the lock on the file. That means that the FileShare doesn't work.\r\n\r\nI hope it can help you\r\n\r\n[TestLock.zip](https://github.com/dotnet/corefx/files/2715007/TestLock.zip)\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34264","RelatedDescription":"Open issue \"System.IO.File won't lock file on SLES 12.3\" (#34264)"},{"Id":"394619074","IsPullRequest":true,"CreatedAt":"2018-12-28T11:46:28","Actor":"ichensky","Number":"34262","RawContent":null,"Title":"make executable build.cmd at cygwin enviroment","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/34262","RelatedDescription":"Open PR \"make executable build.cmd at cygwin enviroment\" (#34262)"},{"Id":"394630302","IsPullRequest":false,"CreatedAt":"2018-12-28T06:20:27","Actor":"ashishnegi","Number":"34263","RawContent":null,"Title":"Dotnet 2.1 & dotnet2.2 app crashing with duplicate key in environment variable","State":"open","Body":"In a particular setup, `Environment.GetEnvironmentVariables();` in dotnet 2.1 `Linux` apps is throwing :\r\n\r\n```cs\r\nSystem.ArgumentException: Item has already been added. Key in dictionary: 'LD_LIBRARY_PATH'  Key being added: 'LD_LIBRARY_PATH'\r\n   at System.Collections.Hashtable.Insert(Object key, Object nvalue, Boolean add)\r\n   at System.Environment.ToHashtable(IEnumerable`1 pairs)\r\n   at Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.Load()\r\n   at Microsoft.Extensions.Configuration.ConfigurationRoot..ctor(IList`1 providers)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()\r\n   at SInnovations.ServiceFabric.RegistrationMiddleware.AspNetCore.FabricContainer..ctor(ServiceCollection services) in C:\\dev\\ServiceFabricGateway\\src\\S-Innovations.ServiceFabric.RegistrationMiddleware.AspNetCore\\FabricContainer.cs:line 172\r\n   at SInnovations.ServiceFabric.GatewayService.Program.Main(String[] args) in C:\\dev\\ServiceFabricGateway\\apps\\S-Innovations.ServiceFabric.GatewayService\\Program.cs:line 78adminuser@nt1vm000001:/mnt/sfroot/_App/S-Innovations.ServiceFabric.GatewayApplicationType_App6/S-InnoPkg.Code.1.0.0$ abric.GatewayServiceP\r\n```\r\n\r\nIf I print command `env` from same bash script that starts `dotnet app.dll`, I see only one `LD_LIBRARY_PATH`.\r\nWhen I use reflection to print the `KeyValuePair`s from `EnvironmentAugments.EnumerateEnvironmentVariables()`  (reference [here](https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Extensions/src/System/Environment.cs#L34)), I see `2` values for `LD_LIBARRY_PATH`.\r\n\r\n**Note** : The app works fine if I use dotnet 2.0 runtime.\r\n\r\nThis was handled gracefully in dotnet 2.0. Linux utilities like `env` also handle this.\r\nThis should be handled gracefully by dotnet >=  2.1 runtime as well.\r\n\r\nI opened the bug here as implementation of `EnvironmentAugment.Unix` is [here](https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/src/Internal/Runtime/Augments/EnvironmentAugments.Unix.cs#L28).","Url":"https://github.com/dotnet/corefx/issues/34263","RelatedDescription":"Open issue \"Dotnet 2.1 & dotnet2.2 app crashing with duplicate key in environment variable\" (#34263)"},{"Id":"394534945","IsPullRequest":true,"CreatedAt":"2018-12-28T04:40:50","Actor":"Dotnet-GitSync-Bot","Number":"34261","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corefx/pull/34261","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corert\" (#34261)"},{"Id":"394224655","IsPullRequest":true,"CreatedAt":"2018-12-28T03:01:58","Actor":"Dotnet-GitSync-Bot","Number":"34250","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corefx/pull/34250","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#34250)"},{"Id":"394511992","IsPullRequest":true,"CreatedAt":"2018-12-27T23:49:02","Actor":"AfsanehR","Number":"34260","RawContent":null,"Title":"Fix passing null for credentials in SqlConnectionPoolKey","State":"open","Body":"Fixes #34205 ","Url":"https://github.com/dotnet/corefx/pull/34260","RelatedDescription":"Open PR \"Fix passing null for credentials in SqlConnectionPoolKey\" (#34260)"},{"Id":"394434272","IsPullRequest":false,"CreatedAt":"2018-12-27T16:17:22","Actor":"AArnott","Number":"34259","RawContent":null,"Title":"IBufferWriter<T>.GetSpan, Advance, then write to original span (before flush)?","State":"open","Body":"Is it considered fair play to use this pattern:\r\n\r\n```cs\r\nvoid WriteArrayWithLengthHeader<T>(IBufferWriter<T> writer, IEnumerable<T> sequence)\r\n{\r\n  // reserve space for the header\r\n  int lengthSpan = writer.GetSpan(4);\r\n  writer.Advance(4);\r\n\r\n  int count = 0;\r\n  foreach (T element in sequence)\r\n  {\r\n    count++;\r\n    Write(writer, element);\r\n  }\r\n\r\n  BitConverter.GetBytes(count).CopyTo(lengthSpan);\r\n}\r\n```\r\n\r\nNotice how I request a span and then Advance past it, so that more content can be written after it, but then go back and write to the original span. \r\nDepending on the `IBufferWriter<T>` implementation, this might work. But I wonder what the interface design would dictate about whether implementations are required to support such a pattern, and thus whether I can depend on all implementations supporting it, or if writing to a span after Advancing is considered not supported since the memory might get consumed or recycled immediately after advancing?\r\n\r\nNote that if this `IBufferWriter<T>` comes from a `PipeWriter<T>`, no one has called `FlushAsync` in this scenario (yet).\r\n\r\nI'm looking for an answer to the question, and also suggesting that we keep the issue open till [the docs](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.ibufferwriter-1?view=netcore-2.2) (which are basically empty at the moment) are updated to include the answer.","Url":"https://github.com/dotnet/corefx/issues/34259","RelatedDescription":"Open issue \"IBufferWriter<T>.GetSpan, Advance, then write to original span (before flush)?\" (#34259)"},{"Id":"394426092","IsPullRequest":false,"CreatedAt":"2018-12-27T15:43:34","Actor":"GrabYourPitchforks","Number":"34258","RawContent":null,"Title":"Remove Unsafe.Unbox from reference assemblies","State":"open","Body":"This API was introduced in https://github.com/dotnet/corefx/issues/30730.\r\n\r\nThe purpose of `Unsafe.Unbox<T>` is to allow mutating boxed instances of value types. However, there's an unintended side effect of this change: it forever locks us in to an implementation where boxing always allocates a new instance of an object.\r\n\r\nIt's possible to imagine a future runtime where certain well-known instances of boxed value types are cached singletons. For example, when boxing the Boolean values `true` or `false`, we could as an optimization return the appropriate cached singleton instead of allocating a new instance every time. We could do the same thing with the integers 0 - 10 for convenience, just as the async state machine infrastructure does today. This could even be extended: we could cache a boxed `default(T)` for any `readonly struct T`.\r\n\r\nTechnically returning a cached singleton in response to a `box` instruction is a violation of ECMA-335, which says that the `box` instruction must perform an allocation. But we already violate ECMA in similar places where the side effect shouldn't be observable. For example, ECMA uses similar language that the `newobj` instruction must perform an allocation, but `new string(new char[0])` returns a cached singleton instance.\r\n\r\nMy recommendation is to remove `Unsafe.Unbox<T>` from the reference assemblies but to keep it in CoreLib. Since CoreLib and the VM are married, we can always evolve the managed and unmanaged code bases together so that if a VM change does come online we won't break any existing managed code.\r\n\r\nTo address the immediate scenario that led to the creation of https://github.com/dotnet/corefx/issues/30730, I suggest those specific call sites create their own stand-in class that mimics a boxed integer, as below.\r\n\r\n```cs\r\ninternal sealed class MyBoxed<T> : IFormattable where T : struct, IFormattable\r\n{\r\n  public T Value;\r\n  public MyBoxed(T value) { Value = value; }\r\n  public override int GetHashCode() => Value.GetHashCode();\r\n  public override string ToString() => Value.ToString();\r\n  public string ToString(string format, IFormatProvider formatProvider) => Value.ToString(format, formatProvider);\r\n}\r\n```\r\n\r\nUsing such a class would not require use of any unsafe code at all.\r\n\r\n/cc @terrajobst @jkotas @stephentoub ","Url":"https://github.com/dotnet/corefx/issues/34258","RelatedDescription":"Open issue \"Remove Unsafe.Unbox from reference assemblies\" (#34258)"},{"Id":"394399560","IsPullRequest":false,"CreatedAt":"2018-12-27T13:49:03","Actor":"fanoI","Number":"34257","RawContent":null,"Title":"StringBuilder.Clear() changes Capacity","State":"open","Body":"This simple code show the issue:\r\n\r\n```cs\r\n            StringBuilder sb = new StringBuilder();\r\n\r\n            Assert.IsTrue(sb.Capacity == 16, \"StringBuilder.Capacity is wrong\");\r\n\r\n            Assert.IsTrue(sb.MaxCapacity == Int32.MaxValue, \"StringBuilder.MaxCapacity is wrong\");\r\n\r\n            Assert.IsTrue(sb.Length == 0, \"StringBuilder.MaxCapacity is wrong\");\r\n\r\n            sb.Append(\"This \");\r\n            sb.Append(\"is \");\r\n            sb.Append(\"a test\");\r\n\r\n            /* Now sb.Lenght should be 14 (the leng of 'This is a test') */\r\n            Assert.IsTrue(sb.Length == 14, \"After Append StringBuilder.Lenght is wrong\");\r\n\r\n            Assert.IsTrue(sb.ToString() == \"This is a test\", \"StringBuilder.Append() does not work\");\r\n\r\n            sb.Append(\"...again\");\r\n\r\n            Assert.IsTrue(sb.Capacity == 32, \"StringBuilder.Capacity is wrong (not doubled!)\");\r\n\r\n            Assert.IsTrue(sb.Length == 22, \"After Append StringBuilder.Lenght is wrong\");\r\n\r\n            Assert.IsTrue(sb.ToString() == \"This is a test...again\", \"StringBuilder.Append() again does not work\");\r\n\r\n            sb.Clear();\r\n            Console.WriteLine($\"sb.Capacity {sb.Capacity}\");\r\n\r\n            // Capacity should not change after Clear\r\n            Assert.IsTrue(sb.Capacity == 32, \"StringBuilder.Capacity after Clear is wrong\");\r\n```\r\n\r\nthis worked on Net Core 2.0 but not anymore in Net Core 2.1 neither 2.2.\r\nIt seems now StringBuilder.Clear() is doing more than simply set Lenght to 0 that is totally not expected, the Capacity indeed becomes 26.\r\n\r\nThe original Net Framework passes this test.","Url":"https://github.com/dotnet/corefx/issues/34257","RelatedDescription":"Open issue \"StringBuilder.Clear() changes Capacity\" (#34257)"},{"Id":"394177412","IsPullRequest":true,"CreatedAt":"2018-12-27T13:45:31","Actor":"MarcoRossignoli","Number":"34246","RawContent":null,"Title":"Update dogfooding guide","State":"closed","Body":"I'm helping a new contributor on gitter.\r\nNew packages folder is under artifacts for new build and under bin on servicing.\r\n\r\n/cc @ViktorHofer @jkotas \r\n\r\nAside question, if I run app on console it works well(custom sdk cli):\r\n```\r\ndotnet\\dotnet.exe  D:\\git\\playground\\dogfooding\\bin\\Debug\\netcoreapp3.0\\win-x64\\dogfooding.dll\r\n```\r\nand also override lib on published folder works well, however if I try to build/run from VS I get error \r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tNETSDK1045\tThe current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.2 or lower, or use a version of the .NET SDK that supports .NET Core 3.0.\tdogfooding\tC:\\Program Files\\dotnet\\sdk\\2.2.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets\t137\t\r\n```\r\nThe error is clear, is there a way to tell to VS to use my downloaded SDK for this project(I mean something csproj or similar trick).","Url":"https://github.com/dotnet/corefx/pull/34246","RelatedDescription":"Closed or merged PR \"Update dogfooding guide\" (#34246)"},{"Id":"394372029","IsPullRequest":false,"CreatedAt":"2018-12-27T11:36:03","Actor":"Lohnegrim","Number":"34256","RawContent":null,"Title":"Microsoft.VisualBasic.Asc/Chr use the Default Encoding, witch is different between .Net Core 3.0 Preview 1 and .Net Framework","State":"open","Body":" Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\nHi,\r\nI noticed that the Microsoft.VisualBasic.Asc and Microsoft.VisualBasic.Chr are relaying on System.Text.Encoding.Default, but since this Returns Different Results in the .Net Framework(CodePage: 1252 on my System) and in .Net Core(CodePage: 65001 on my System), are these not directly compatible.\r\nEven if I add a NuGet Reference to 'System.Text.Encoding.CodePages' and Call 'Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)' there are still differences.\r\nFor Excample: \r\nConsole.Writeline(Asc(Chrw(172)))\r\nReturns on Net Core: -15700\r\nReturns on Net Framework: 172\r\n\r\nThis may/does lead to unexpected results when a Application that relays on Asc/Chr gets converted from .Net Framework to .Net Core 3.0","Url":"https://github.com/dotnet/corefx/issues/34256","RelatedDescription":"Open issue \"Microsoft.VisualBasic.Asc/Chr use the Default Encoding, witch is different between .Net Core 3.0 Preview 1 and .Net Framework\" (#34256)"},{"Id":"394336294","IsPullRequest":false,"CreatedAt":"2018-12-27T08:59:56","Actor":"dmnk","Number":"34255","RawContent":null,"Title":"no way to use proxy for connected service","State":"open","Body":"Environment: \r\n- .net Core SDK 2.2.101\r\n- IIS 10.0 on Win 2016 Server\r\n- VS Studio 2019 16.0.0 Preview 1.1\r\n\r\n\r\nI've tried pretty everything mentioned on github / stack-overflow, and more through connected debugging, but still failed to make dot net core use a proxy for an outbound connection to a connected service.\r\n\r\naltered version of: https://stackoverflow.com/questions/17968307/how-to-set-proxy-credentials-to-specific-wcf-client\r\n```C#\r\nvoid SetProxySettings<TChannel>(ClientBase<TChannel> client,\r\n            bool useProxy, string address, int port, string login, string password)\r\n            where TChannel : class\r\n        {\r\n            if (!useProxy) return;\r\n            var b = client.Endpoint.Binding as BasicHttpBinding;\r\n\r\n            var b_core = client.Endpoint.Binding as System.ServiceModel.Channels.CustomBinding;\r\n            if (b_core != null)\r\n            {\r\n                var element = b_core.Elements[1] as System.ServiceModel.Channels.HttpsTransportBindingElement; //\r\n                element.ProxyAddress = new Uri(string.Format(\"http://{0}:{1}\", address, port));\r\n                return;\r\n            }\r\n\r\n            // further non modified stuff from SO solution\r\n        }\r\n```\r\nBut the customBindings proxyAddress doesn't seem to do anything.\r\n\r\nI've further tried to deploy the api project to an IIS, i guess in \"in-process-hosting-mode\", but essentially just followed the guide at https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?view=aspnetcore-2.2 and deployed from VS 2019 beta via \"file-system-deployment\" and \"framework-dependent deployment\" (which i guess - means in-process hosting).\r\n\r\nThe applications web.config has a section which should set the proxy, but it seems that this part is ignored as well:\r\n```xml\r\n    <system.net>\r\n        <defaultProxy>\r\n            <proxy proxyaddress=\"http://proxy.mydomain.org:8080\" usesystemdefault=\"false\" />\r\n        </defaultProxy>\r\n    </system.net>\r\n</configuration>\r\n```\r\n\r\nIs there any - ideally platform-independent - way, to tell the framework which proxy to use for a connected service?","Url":"https://github.com/dotnet/corefx/issues/34255","RelatedDescription":"Open issue \"no way to use proxy for connected service\" (#34255)"},{"Id":"394322139","IsPullRequest":false,"CreatedAt":"2018-12-27T07:48:58","Actor":"tmat","Number":"34254","RawContent":null,"Title":"[Infra] Report better error when available CMake version is not sufficient","State":"open","Body":"Currently the build fails with the following error when using older CMake than required:\r\n\r\n```\r\nCMake Error: Could not create named generator Visual Studio 15 2017 Win64\r\n```\r\n\r\nThis is with CMake version 3.6.2.\r\nThe bootstrapper should check for the version of required tools and report an error if the minimal required version isn't installed. \r\n\r\nThe minimal required version should also be documented here: https://github.com/dotnet/corefx/blob/master/Documentation/building/windows-instructions.md#required-software only mentions CMake is needed but doesn't specify the version\r\n","Url":"https://github.com/dotnet/corefx/issues/34254","RelatedDescription":"Open issue \"[Infra] Report better error when available CMake version is not sufficient\" (#34254)"},{"Id":"394317295","IsPullRequest":false,"CreatedAt":"2018-12-27T07:23:46","Actor":"FDUdannychen","Number":"34253","RawContent":null,"Title":"CommonSecurityDescriptor losts SACL in sddl format","State":"open","Body":"```c#\r\n        static void Main(string[] args)\r\n        {\r\n            var before = \"O:SYG:SYD:S:(AU;OISAFA;0x100000;;;S-1-5-21-3530929314-3291925079-3043250533-18123169)(AU;CISAFA;0x100000;;;S-1-5-21-3530929314-3291925079-3043250533-18123169)\";\r\n            var csd = new CommonSecurityDescriptor(true, true, before);\r\n            var after = csd.GetSddlForm(AccessControlSections.All);\r\n            Console.WriteLine(before);\r\n            Console.WriteLine(after);\r\n        }\r\n```\r\nThe output:\r\n```\r\nO:SYG:SYD:S:(AU;OISAFA;0x100000;;;S-1-5-21-3530929314-3291925079-3043250533-18123169)(AU;CISAFA;0x100000;;;S-1-5-21-3530929314-3291925079-3043250533-18123169)\r\nO:SYG:SYD:S:(AU;CISAFA;0x100000;;;S-1-5-21-3530929314-3291925079-3043250533-18123169)\r\n```\r\nYou can see the first SACL is gone. Is it a bug or I'm missing something?","Url":"https://github.com/dotnet/corefx/issues/34253","RelatedDescription":"Open issue \"CommonSecurityDescriptor losts SACL in sddl format\" (#34253)"},{"Id":"394135780","IsPullRequest":false,"CreatedAt":"2018-12-27T03:56:50","Actor":"uyquoc","Number":"34244","RawContent":null,"Title":"Issue with CookieContainer when use HttpClientFactory","State":"closed","Body":"Since `HttpClientHandler` objects are pooled when using `HttpClientFactory`, we can have a thread-safe issue with `CookieContainer` of  `HttpClientHandler` object. A sample case as follows:\r\nAssume we have a web application call to api/Token (GET) of API server.\r\n\r\nWeb:\r\n```c#\r\n       public async Task<string> GetToken()\r\n\r\n        {\r\n            var httpClient = _clientFactory.CreateClient();\r\n            var response = await httpClient.GetAsync(\"http://api.local:5089/api/token\");\r\n            var token = await response.Content.ReadAsStringAsync();\r\n            return token;\r\n        }\r\n```\r\n\r\nAPI:\r\n```c#\r\n        public ActionResult<string> Get()\r\n        {   \r\n            string token = HttpContext.Request.Cookies.ContainsKey(\"Token\") ? \r\n                           HttpContext.Request.Cookies[\"Token\"] : Guid.NewGuid().ToString();\r\n            \r\n            HttpContext.Response.Cookies.Append(\"Token\", token);\r\n            return token;\r\n        }\r\n```\r\n\r\nAfter the first request to API, in Web application, `response.Headers.GetValues(\"Set-Cookies\")` will show \"Token\" cookie's value equals \"abc\"\r\nAfter the second request to API, in Web application, `response.Headers.GetValues(\"Set-Cookies\")` will show \"Token\" cookie's value also equals \"abc\"\r\nIf we use `new HttpClient()`, each request to API, we will get new Token value, but we cannot achieve this \r\npurpose with `HttpClientFatory`. How could we deal with this problem when we have to use Cookie in API?","Url":"https://github.com/dotnet/corefx/issues/34244","RelatedDescription":"Closed issue \"Issue with CookieContainer when use HttpClientFactory\" (#34244)"},{"Id":"394222916","IsPullRequest":true,"CreatedAt":"2018-12-27T03:53:16","Actor":"danmosemsft","Number":"34249","RawContent":null,"Title":"Update pinvoke guidelines","State":"closed","Body":"Added some clarification on the width of types, on padding, and the `fixed` keyword. All these were things I had to figure out recently, so it would be useful to document for others.\r\n\r\nIt would also be nice to document when to use `UIntPtr` instead of `IntPtr`, when it isn't dictated by the native header - for example `void*`. Perhaps the guidance is to always use `IntPtr` but that can [overflow on cast](https://stackoverflow.com/a/13171595) so it could matter.","Url":"https://github.com/dotnet/corefx/pull/34249","RelatedDescription":"Closed or merged PR \"Update pinvoke guidelines\" (#34249)"},{"Id":"394258747","IsPullRequest":false,"CreatedAt":"2018-12-26T23:34:22","Actor":"DustinCampbell","Number":"34252","RawContent":null,"Title":"ColorConverter in System.ComponentModel.TypeConverters does not handle SystemColors","State":"open","Body":"It is not possible to set the `BackColor` and `ForeColor` properties of a control to a named value from `SystemColors` using a `PropertyGrid`. This is due to the fact that the `ColorConverter` in .NET Core 3 does not support `SystemColors`.\r\n\r\nThere are two versions of ColorConverter in corefx:\r\n\r\n* [System.ComponentModel.TypeConverter/src/System/Drawing/ColorConverter.cs](https://github.com/dotnet/corefx/blob/master/src/System.ComponentModel.TypeConverter/src/System/Drawing/ColorConverter.cs)\r\n* [System.Drawing.Common/src/System/Drawing/ColorConverter.cs\r\n](https://github.com/dotnet/corefx/blob/master/src/System.Drawing.Common/src/System/Drawing/ColorConverter.cs)\r\n\r\nThe first version does not support SystemColors. Unfortunately, that is also the version that is used for properties of type `System.Drawing.Color` in property descriptors ([link](https://github.com/dotnet/corefx/blob/a5c7e7295ac2e3c889d347d0285794266797db87/src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ReflectTypeDescriptionProvider.cs#L130)), which is why this causes the `PropertyGrid` to fail.\r\n\r\ncc @Tanya-Solyanik ","Url":"https://github.com/dotnet/corefx/issues/34252","RelatedDescription":"Open issue \"ColorConverter in System.ComponentModel.TypeConverters does not handle SystemColors\" (#34252)"},{"Id":"394195465","IsPullRequest":true,"CreatedAt":"2018-12-26T19:56:44","Actor":"ichensky","Number":"34247","RawContent":null,"Title":"fix bug in /src/Native/build-native.cmd","State":"closed","Body":"Without this change script not executes. ","Url":"https://github.com/dotnet/corefx/pull/34247","RelatedDescription":"Closed or merged PR \"fix bug in /src/Native/build-native.cmd\" (#34247)"},{"Id":"394216067","IsPullRequest":false,"CreatedAt":"2018-12-26T18:12:10","Actor":"livarcocc","Number":"34248","RawContent":null,"Title":"LD_LIBRARY_PATH icu issue","State":"open","Body":"_From @spushpendra2000 on December 26, 2018 17:32_\n\n## Steps to reproduce\r\nI am using dotnet core 2.1 on centos. and trying to load the dll.\r\n\r\nWhen running , i am getting this error\r\nFailFast:\r\nCouldn't find a valid ICU package installed on the system. Set the configuration flag System.Globalization.Invariant to true if you want to run with no globalization support.\r\n\r\n   at System.Environment.FailFast(System.String)\r\n   at System.Globalization.GlobalizationMode.GetGlobalizationInvariantMode()\r\n   at System.Globalization.GlobalizationMode..cctor()\r\n   at System.Globalization.CultureData.CreateCultureWithInvariantData()\r\n   at System.Globalization.CultureData.get_Invariant()\r\n   at System.Globalization.CultureInfo..cctor()\r\n   at System.StringComparer..cctor()\r\n   at System.AppDomain.InitializeCompatibilityFlags()\r\n   at System.AppDomain.Setup(System.Object)\r\nAborted (core dumped)\r\n\r\n\r\nI can see the suggestion as per the link\r\nhttps://github.com/dotnet/core/blob/master/Documentation/build-and-install-rhel6-prerequisites.md\r\n\r\nBut I cannot change the icu path and when i tried creating the local folder 'netcoredeps' where my dll is residing it never work and i keep getting the same error.\r\nOnly after the setting the LD_LIBRARY_PATH, it is working.. Please suggest who to resolve this\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#10509_","Url":"https://github.com/dotnet/corefx/issues/34248","RelatedDescription":"Open issue \"LD_LIBRARY_PATH icu issue\" (#34248)"},{"Id":"394176043","IsPullRequest":true,"CreatedAt":"2018-12-26T14:13:24","Actor":"dotnet-maestro-bot","Number":"34245","RawContent":null,"Title":"Update CoreClr, CoreFx, ProjectNTfs, ProjectNTfsTestILC to preview-27229-01, preview.18628.2, beta-27228-00, beta-27228-00, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34245","RelatedDescription":"Open PR \"Update CoreClr, CoreFx, ProjectNTfs, ProjectNTfsTestILC to preview-27229-01, preview.18628.2, beta-27228-00, beta-27228-00, respectively (master)\" (#34245)"},{"Id":"394232703","IsPullRequest":false,"CreatedAt":"2018-12-26T11:20:16","Actor":"Lohnegrim","Number":"34251","RawContent":null,"Title":"Almost all functions in Microsoft.VisualBasic.Strings cannot directly be used in NET Core 3.0.0 Preview 1, but can be used by Microsoft.VisualBasic and get linked by the compiler to Microsoft.VisualBasic.Strings","State":"open","Body":".NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\nHave you experienced this same bug with .NET Framework?\r\nNo\r\n\r\nReporsteps:\r\n1. create a new project using: \r\ndotnet new console -lang vb\r\n2. edit the 'Program.vb', change the Console.Writeline to:\r\nConsole.WriteLine(Microsoft.VisualBasic.Strings.Left(\"Hello World!\",5))\r\n3. try to compile using: \r\ndotnet build\r\n4. You get this Error:\r\nerror BC30456: 'Left' is not a member of 'Strings'. \r\n5. Change the Code from Step 2 to:\r\nConsole.WriteLine(Microsoft.VisualBasic.Left(\"Hello World!\",5))\r\n6. Now the Project compiles and Runs fine, but if you check with ilspy or simmiler tools, you will see that the compiler linkes the Code to the same as in step 2.\r\n\r\nIf you try the same with a .Net Framework Project then it compiles fine in booth cases.\r\n\r\nExpected behavior:\r\nSame as .NET Framework","Url":"https://github.com/dotnet/corefx/issues/34251","RelatedDescription":"Open issue \"Almost all functions in Microsoft.VisualBasic.Strings cannot directly be used in NET Core 3.0.0 Preview 1, but can be used by Microsoft.VisualBasic and get linked by the compiler to Microsoft.VisualBasic.Strings\" (#34251)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"394760632","IsPullRequest":false,"CreatedAt":"2018-12-29T04:40:07","Actor":"gafter","Number":"32054","RawContent":null,"Title":"Default Interface Method Base Calls","State":"open","Body":"[The LDM decided](https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-11-14.md#default-interface-implementations) on the base invocation syntax `base(N.I1<T>).M(s)`.  We also decided that the syntax should be permitted in classes (e.g. to invoke an implementation from a skip-base class or a base interface).\r\n\r\nThis needs to be implemented in the compiler.  Also, we need to decide on an implementation strategy.  What IL would that generate?  Since interface implementations are currently private methods, it may require further CLR changes.","Url":"https://github.com/dotnet/roslyn/issues/32054","RelatedDescription":"Open issue \"Default Interface Method Base Calls\" (#32054)"},{"Id":"394759603","IsPullRequest":false,"CreatedAt":"2018-12-29T04:19:05","Actor":"jcouv","Number":"32053","RawContent":null,"Title":"Bootstrap build produces error about DisableSdkPath","State":"open","Body":"`build.cmd -bootstrap`\r\n\r\n```\r\n...\r\nBuild FAILED.\r\n\r\nC:\\repos\\roslyn\\artifacts\\Bootstrap\\tools\\Microsoft.CSharp.Core.targets(68,10): error MSB4064: The \"DisableSdkPath\" parameter is not supported by the \"Csc\" task. Verify the parameter exists on the task, and it is a settable public instance property. [C:\\repos\\roslyn\\src\\EditorFeatures\\Core.Wpf\\Microsoft.CodeAnalysis.EditorFeatures.Wpf_xaaf1u5k_wpftmp.csproj]\r\nC:\\repos\\roslyn\\artifacts\\Bootstrap\\tools\\Microsoft.CSharp.Core.targets(52,5): error MSB4063: The \"Csc\" task could not be initialized with its input parameters.  [C:\\repos\\roslyn\\src\\EditorFeatures\\Core.Wpf\\Microsoft.CodeAnalysis.Editor\r\nFeatures.Wpf_xaaf1u5k_wpftmp.csproj]\r\n```\r\n\r\nTagging @RikkiGibson @jaredpar as FYI","Url":"https://github.com/dotnet/roslyn/issues/32053","RelatedDescription":"Open issue \"Bootstrap build produces error about DisableSdkPath\" (#32053)"},{"Id":"394756227","IsPullRequest":true,"CreatedAt":"2018-12-29T03:22:07","Actor":"chsienki","Number":"32052","RawContent":null,"Title":"Restrict using pattern","State":"open","Body":"Restrict using pattern to only ref structs:\r\n- Only run run pattern lookup for ref structs\r\n- Fix valid tests\r\n- Remove invalid tests","Url":"https://github.com/dotnet/roslyn/pull/32052","RelatedDescription":"Open PR \"Restrict using pattern\" (#32052)"},{"Id":"394754977","IsPullRequest":true,"CreatedAt":"2018-12-29T03:01:40","Actor":"jp2masa","Number":"32051","RawContent":null,"Title":"Fixed adding attribute list with target specifier","State":"open","Body":"Fixes #27200\r\n\r\n## Changes\r\n- Fixed adding attribute list with target specifier.","Url":"https://github.com/dotnet/roslyn/pull/32051","RelatedDescription":"Open PR \"Fixed adding attribute list with target specifier\" (#32051)"},{"Id":"394725601","IsPullRequest":false,"CreatedAt":"2018-12-29T01:55:40","Actor":"gafter","Number":"32043","RawContent":null,"Title":"CFG produced for switch expression fails CFG verifier","State":"closed","Body":"See test `SwitchExpression_BasicFlow` in the `features/recursive-patterns` branch, which is skipped with this issue.\r\n\r\nThe CFG currently produced for a switch expression fails the flow graph verifier.  I don't know if it is a problem with the flow graph produced or a problem with the verifier.  Either way, this is preventing us from having adequate test coverage.\r\n\r\nSee https://github.com/dotnet/roslyn/pull/32018 where the relevant implementation and tests were introduced.","Url":"https://github.com/dotnet/roslyn/issues/32043","RelatedDescription":"Closed issue \"CFG produced for switch expression fails CFG verifier\" (#32043)"},{"Id":"394740631","IsPullRequest":true,"CreatedAt":"2018-12-29T01:30:06","Actor":"dotnet-bot","Number":"32049","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32049","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32049)"},{"Id":"394740637","IsPullRequest":true,"CreatedAt":"2018-12-29T00:00:29","Actor":"dotnet-bot","Number":"32050","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"open","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32050","RelatedDescription":"Open PR \"Merge master to features/editorconfig-in-compiler\" (#32050)"},{"Id":"394733901","IsPullRequest":false,"CreatedAt":"2018-12-28T23:01:25","Actor":"davkean","Number":"32046","RawContent":null,"Title":"[Regression] Navigating via word/tokens (CTRL+Right Arrow) navigates to end of a line if at start of a comment","State":"closed","Body":"**Version Used**: \r\nVersion 16.0.0 Preview 2.0 [28420.135.d16.0stg]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Press CTRL+Right Arrow at the _$$$_\r\n``` C#\r\n    class Program\r\n    {\r\n        $$$// The active configuration can change multiple times during initialization in cases where we've\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n\r\n```\r\n**Expected Behavior**:\r\nCursor to be navigated to:\r\n```\r\n// $$$The active configuration can change multiple times during initialization in cases where we've\r\n```\r\n\r\n**Actual Behavior**:\r\nCursor is navigated to:\r\n```\r\n// The active configuration can change multiple times during initialization in cases where we've$$$$\r\n```","Url":"https://github.com/dotnet/roslyn/issues/32046","RelatedDescription":"Closed issue \"[Regression] Navigating via word/tokens (CTRL+Right Arrow) navigates to end of a line if at start of a comment\" (#32046)"},{"Id":"394734773","IsPullRequest":true,"CreatedAt":"2018-12-28T23:00:58","Actor":"JoeRobich","Number":"32048","RawContent":null,"Title":"Remove empty leading trivia when removing unused imports.","State":"open","Body":"When removing unused imports we attempt to preserve non-empty leading trivia. We do this by pre-pending it to the next import. However, if that import had non-preservable trivia, it would then be preservable and we could accumulate lots of blanks lines.\r\n\r\nFixes #27006","Url":"https://github.com/dotnet/roslyn/pull/32048","RelatedDescription":"Open PR \"Remove empty leading trivia when removing unused imports.\" (#32048)"},{"Id":"394734452","IsPullRequest":false,"CreatedAt":"2018-12-28T22:58:08","Actor":"gafter","Number":"32047","RawContent":null,"Title":"Null state in unreachable code","State":"open","Body":"I think the null state of an expression should take into account when it occurs in unreachable code.  An expression in unreachable code is never ever `null`.  Even the expression `null` is never null in unreachable code.\r\n\r\nThis is not the same as simply suppressing warnings in unreachable code (though we should consider that too).  For example:\r\n``` c#\r\n#nullable enable\r\npublic class C {\r\n    public void M(bool b, string s) {\r\n        var t = (b || true) ? s : null;\r\n        t.ToString(); // unexpected warning CS8602: Possible dereference of a null reference.\r\n    }\r\n}\r\n```\r\nFormally, my proposal is that an expression is never `null` in an unreachable statement, never `null` when false after the constant true, never `null` when true after the constant false, and never `null` when false after `expr is var x` and similar patterns (which are always true but not a constant).  These all have in common that the “current” state in the nullable analysis should be the unreachable state when evaluating the code in question.  That means there is a nice bottleneck in the rvalue-visiting method where this can be implemented.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/32047","RelatedDescription":"Open issue \"Null state in unreachable code\" (#32047)"},{"Id":"394731413","IsPullRequest":true,"CreatedAt":"2018-12-28T22:31:27","Actor":"ivanbasov","Number":"32045","RawContent":null,"Title":"use global options for async completion","State":"open","Body":"Tagging @AmadeusW for review as well","Url":"https://github.com/dotnet/roslyn/pull/32045","RelatedDescription":"Open PR \"use global options for async completion\" (#32045)"},{"Id":"394728742","IsPullRequest":false,"CreatedAt":"2018-12-28T22:10:24","Actor":"ashmind","Number":"32044","RawContent":null,"Title":"Roslyn build Restore.cmd fails if a parent directory name contains $ character","State":"open","Body":"**Version Used**: \r\ne4a4a214aa0b0f79c87384e26b8e9ef07d7bb181\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Clone Roslyn into a directory that contains `$`, in my case `$TC` \r\n2. Run .\\Restore.cmd\r\n\r\n**Expected Behavior**:\r\nRestore works.\r\n\r\n**Actual Behavior**:\r\n`$TC` is interpreted as a variable name and is substituted with an empty value:\r\n```\r\n& : The term 'D:\\\\work\\142fd509662c8cdc\\!roslyn\\sources\\dotnet\\eng\\build.ps1' is not recognized as the name of a \r\ncmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify \r\nthat the path is correct and try again.\r\nAt line:1 char:3\r\n+ & \"D:\\$TC\\work\\142fd509662c8cdc\\!roslyn\\sources\\dotnet\\eng\\build.ps1\" ...\r\n+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (D:\\\\work\\142fd5...t\\eng\\build.ps1:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n```\r\n\r\n**Potential Fix**:\r\nChange interpolating quotes `\"` to non-interpolating `'`:\r\n```\r\npowershell -ExecutionPolicy ByPass -NoProfile -command \"& '%~dp0eng\\build.ps1' -restore %*\"\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/32044","RelatedDescription":"Open issue \"Roslyn build Restore.cmd fails if a parent directory name contains $ character\" (#32044)"},{"Id":"394685790","IsPullRequest":false,"CreatedAt":"2018-12-28T17:37:26","Actor":"adamfk","Number":"32042","RawContent":null,"Title":"Custom roslyn analyzer to override nullability analysis?","State":"open","Body":"I understand that a bunch of annotations to inform nullability analysis is already in the works #26761, but I'd like to suggest that it would be useful to allow writing custom roslyn analyzers that can override the compiler's nullability warnings.\r\n\r\nMads mentioned in this [video](https://youtu.be/gGUYUJmssYM?t=1428) that a mini language of attributes is being developed to inform nullability analysis to cover 98% of cases. I think that custom analyzers might be able to cover the remaining 2% of cases.\r\n\r\nThe use cases that I'm currently thinking of are initializing fields of an object via reflection during construction.","Url":"https://github.com/dotnet/roslyn/issues/32042","RelatedDescription":"Open issue \"Custom roslyn analyzer to override nullability analysis?\" (#32042)"},{"Id":"394672252","IsPullRequest":true,"CreatedAt":"2018-12-28T16:26:27","Actor":"AlekseyTs","Number":"32041","RawContent":null,"Title":"Ensure nullability mismatch in implemented interface types is treated as a warning.","State":"open","Body":"Fixes #31974\r\nRelated to #30655, fixes for C#\r\nRelated to #31977, fixes for C#\r\nFixes #31858","Url":"https://github.com/dotnet/roslyn/pull/32041","RelatedDescription":"Open PR \"Ensure nullability mismatch in implemented interface types is treated as a warning.\" (#32041)"},{"Id":"394656388","IsPullRequest":false,"CreatedAt":"2018-12-28T15:07:59","Actor":"BrunoZell","Number":"32040","RawContent":null,"Title":"Disposable from using statement inside async stream should be disposed after reentry from yield return","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 Preview 1.1\r\nMicrosoft.NETCore.App (3.0.0-preview-27122-01)\r\n\r\n**Steps to Reproduce**:\r\n\r\nI have a console application to use the new `IAsyncEnumerable` feature in C# 8.0. However, the following code will behave strangely when yielding out of an `using`-statement inside of the iterator block, where the disposable is not always disposed.\r\n\r\nExample to reproduce:\r\n\r\n```\r\nclass Program\r\n{\r\n    private class IdentifyableDisposable : IDisposable\r\n    {\r\n        private static int _currentId = 0;\r\n        private readonly int _thisId;\r\n\r\n        public IdentifyableDisposable()\r\n        {\r\n            _thisId = ++_currentId;\r\n            Console.WriteLine($\"Just created disposable #{_thisId}!\");\r\n        }\r\n\r\n        public void Dispose() =>\r\n            Console.WriteLine($\"Just disposed disposable #{_thisId}!\");\r\n    }\r\n\r\n    static async Task Main(string[] args)\r\n    {\r\n        await foreach (var item in EnumerateAsync())\r\n        {\r\n            Console.WriteLine(item);\r\n        }\r\n\r\n        Console.WriteLine(\"Hello World!\");\r\n        Console.ReadKey();\r\n    }\r\n}\r\n```\r\n\r\nNow compare the two different implementations of `EnumerateAsync` which both should behave equally:\r\n\r\n**With `try-finally`**\r\n\r\n```\r\npublic static async IAsyncEnumerable<int> EnumerateAsync()\r\n{\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        var d = new IdentifyableDisposable();\r\n        try\r\n        {\r\n            if (i % 2 == 0)\r\n                continue; // Will dispose\r\n\r\n            yield return i; // Will dispose\r\n        }\r\n        finally\r\n        {\r\n            d.Dispose();\r\n        }\r\n\r\n        await Task.Delay(TimeSpan.FromSeconds(1));\r\n    }\r\n}\r\n```\r\n\r\n**With `using`**\r\n\r\n```\r\npublic static async IAsyncEnumerable<int> EnumerateAsync()\r\n{\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        using (new IdentifyableDisposable())\r\n        {\r\n            if (i % 2 == 0)\r\n                continue; // Will dispose\r\n\r\n            yield return i; // Won't dispose (except after first continue)\r\n        }\r\n\r\n        await Task.Delay(TimeSpan.FromSeconds(1));\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nI expect all created `IdentifyableDisposable` to be disposed using the `IdentifyableDisposable.Dispose()` method and thus it should be written to the console.\r\n\r\n**Actual Behavior**:\r\nHowever, in the version with the `using`-statement all created `IdentifyableDisposable` which follow an `yield return` are not disposed, even when the `using`-block was exited after reentry into the iterator.\r\n\r\nConsole output:\r\n\r\n**With `try-finally`**\r\n```\r\nJust created disposable #1!\r\nJust disposed disposable #1!\r\nJust created disposable #2!\r\nJust disposed disposable #2!\r\n1\r\nJust created disposable #3!\r\nJust disposed disposable #3!\r\nJust created disposable #4!\r\n3\r\nJust disposed disposable #4!\r\nJust created disposable #5!\r\nJust disposed disposable #5!\r\nJust created disposable #6!\r\n5\r\nJust disposed disposable #6!\r\nJust created disposable #7!\r\nJust disposed disposable #7!\r\nJust created disposable #8!\r\n7\r\nJust disposed disposable #8!\r\nJust created disposable #9!\r\nJust disposed disposable #9!\r\nJust created disposable #10!\r\n9\r\nJust disposed disposable #10!\r\nHello World!\r\n```\r\n\r\n**With `using`**\r\n```\r\nJust created disposable #1!\r\nJust disposed disposable #1!\r\nJust created disposable #2!\r\nJust disposed disposable #2!\r\n1\r\nJust created disposable #3!\r\nJust disposed disposable #3!\r\nJust created disposable #4!\r\n3\r\nJust created disposable #5!\r\nJust disposed disposable #5!\r\nJust created disposable #6!\r\n5\r\nJust created disposable #7!\r\nJust disposed disposable #7!\r\nJust created disposable #8!\r\n7\r\nJust created disposable #9!\r\nJust disposed disposable #9!\r\nJust created disposable #10!\r\n9\r\nHello World!\r\n```","Url":"https://github.com/dotnet/roslyn/issues/32040","RelatedDescription":"Open issue \"Disposable from using statement inside async stream should be disposed after reentry from yield return\" (#32040)"},{"Id":"394621443","IsPullRequest":true,"CreatedAt":"2018-12-28T13:00:10","Actor":"dotnet-bot","Number":"32038","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32038","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32038)"},{"Id":"394621452","IsPullRequest":true,"CreatedAt":"2018-12-28T13:00:06","Actor":"dotnet-bot","Number":"32039","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32039","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#32039)"},{"Id":"394583546","IsPullRequest":true,"CreatedAt":"2018-12-28T08:50:24","Actor":"vepanimas","Number":"32037","RawContent":null,"Title":"[WIP] Code fix for CS8345 (ref structs)","State":"open","Body":"Fixes #31831.\r\n\r\nWIP: Adding tests is in progress.","Url":"https://github.com/dotnet/roslyn/pull/32037","RelatedDescription":"Open PR \"[WIP] Code fix for CS8345 (ref structs)\" (#32037)"},{"Id":"394542454","IsPullRequest":false,"CreatedAt":"2018-12-28T04:11:25","Actor":"davkean","Number":"32036","RawContent":null,"Title":"Roslyn leaking AbstractProjects","State":"open","Body":"**Version Used**: \r\nVersion 16.0.0 Preview 2.0 [28420.135.d16.0stg]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create new Windows Forms App\r\n2. Unload project \r\n3. Reload project\r\n4. Repeat step 2-3 above 2 more times\r\n\r\n**Expected Behavior**:\r\nOnly to have a single representation of the project\r\n\r\n**Actual Behavior**:\r\n4 representations of the project:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/50502341-a928f180-0ab2-11e9-873b-2075e21ca3d5.png)\r\n\r\nDebugged into this, the project-system is correctly disposing the workspace project context. This occurs in both new and old project-system\r\n\r\ntag @jasonmalinowski \r\n","Url":"https://github.com/dotnet/roslyn/issues/32036","RelatedDescription":"Open issue \"Roslyn leaking AbstractProjects\" (#32036)"},{"Id":"394508319","IsPullRequest":true,"CreatedAt":"2018-12-27T23:20:06","Actor":"ivanbasov","Number":"32035","RawContent":null,"Title":"AsyncCompletion: Roslyn incorrectly acts multiple times and throws ","State":"open","Body":"Fixes #31892","Url":"https://github.com/dotnet/roslyn/pull/32035","RelatedDescription":"Open PR \"AsyncCompletion: Roslyn incorrectly acts multiple times and throws \" (#32035)"},{"Id":"394467248","IsPullRequest":false,"CreatedAt":"2018-12-27T19:04:01","Actor":"gafter","Number":"32034","RawContent":null,"Title":"Add tests for IOperation cloning.","State":"open","Body":"From https://github.com/dotnet/roslyn/pull/32018#discussion_r244194618\r\n\r\n> It feels like we need to have targeted tests for cloning, perhaps as part of the `IOperation` tree verification. Please open an issue for that.","Url":"https://github.com/dotnet/roslyn/issues/32034","RelatedDescription":"Open issue \"Add tests for IOperation cloning.\" (#32034)"},{"Id":"394259682","IsPullRequest":true,"CreatedAt":"2018-12-27T04:52:40","Actor":"agocke","Number":"32031","RawContent":null,"Title":"Add record synthesized constructor generation","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32031","RelatedDescription":"Closed or merged PR \"Add record synthesized constructor generation\" (#32031)"},{"Id":"394261081","IsPullRequest":true,"CreatedAt":"2018-12-27T01:30:11","Actor":"dotnet-bot","Number":"32032","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32032","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32032)"},{"Id":"394261087","IsPullRequest":true,"CreatedAt":"2018-12-27T01:30:05","Actor":"dotnet-bot","Number":"32033","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32033","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#32033)"},{"Id":"394255635","IsPullRequest":true,"CreatedAt":"2018-12-26T23:03:29","Actor":"AArnott","Number":"32030","RawContent":null,"Title":"Random code comment typo fixes","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32030","RelatedDescription":"Open PR \"Random code comment typo fixes\" (#32030)"},{"Id":"394254520","IsPullRequest":false,"CreatedAt":"2018-12-26T22:53:05","Actor":"gafter","Number":"32029","RawContent":null,"Title":"Tests skipped with reason \"NonNullTypes does not control warnings\"","State":"open","Body":"There are a number of tests skipped with the reason \"NonNullTypes does not control warnings\".\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/32029","RelatedDescription":"Open issue \"Tests skipped with reason \"NonNullTypes does not control warnings\"\" (#32029)"},{"Id":"394240558","IsPullRequest":true,"CreatedAt":"2018-12-26T21:00:36","Actor":"AArnott","Number":"32028","RawContent":null,"Title":"Update build, debug, test doc","State":"open","Body":"It was out of date in a few places as projects have been moved/renamed/created.","Url":"https://github.com/dotnet/roslyn/pull/32028","RelatedDescription":"Open PR \"Update build, debug, test doc\" (#32028)"},{"Id":"394238061","IsPullRequest":true,"CreatedAt":"2018-12-26T20:42:43","Actor":"AArnott","Number":"32027","RawContent":null,"Title":"Set WarnAsError to false by default for build.cmd script","State":"open","Body":"As requested in https://github.com/dotnet/roslyn/pull/31993#issuecomment-450002539","Url":"https://github.com/dotnet/roslyn/pull/32027","RelatedDescription":"Open PR \"Set WarnAsError to false by default for build.cmd script\" (#32027)"},{"Id":"394235201","IsPullRequest":false,"CreatedAt":"2018-12-26T20:20:55","Actor":"AArnott","Number":"32026","RawContent":null,"Title":"Building, Testing, Debugging wiki page badly outdated","State":"open","Body":"The branch names and links on the https://github.com/dotnet/roslyn/wiki/Building%20Testing%20and%20Debugging wiki are badly outdated.","Url":"https://github.com/dotnet/roslyn/issues/32026","RelatedDescription":"Open issue \"Building, Testing, Debugging wiki page badly outdated\" (#32026)"},{"Id":"394234602","IsPullRequest":false,"CreatedAt":"2018-12-26T20:17:00","Actor":"gafter","Number":"32025","RawContent":null,"Title":"Do not permit a nullable reference type for an `is` operator","State":"open","Body":"The *is-type* operator returns `false` when the left operand is `null`, for example in `e is string?`.  It should therefore be a semantic error when the type given is a nullable reference type, as in this example.  We already make that an error for the *is-pattern* operator, for example in `e is string? s`.","Url":"https://github.com/dotnet/roslyn/issues/32025","RelatedDescription":"Open issue \"Do not permit a nullable reference type for an `is` operator\" (#32025)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"394699573","IsPullRequest":true,"CreatedAt":"2018-12-28T19:01:14","Actor":"Dotnet-GitSync-Bot","Number":"6739","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/6739","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#6739)"},{"Id":"394688538","IsPullRequest":true,"CreatedAt":"2018-12-28T18:59:49","Actor":"Dotnet-GitSync-Bot","Number":"6738","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe","Url":"https://github.com/dotnet/corert/pull/6738","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6738)"},{"Id":"393949868","IsPullRequest":true,"CreatedAt":"2018-12-28T13:11:41","Actor":"filipnavara","Number":"6726","RawContent":null,"Title":"WIP: Move CultureInfo to shared CoreLib","State":"closed","Body":"Counterpart to https://github.com/dotnet/coreclr/pull/21672","Url":"https://github.com/dotnet/corert/pull/6726","RelatedDescription":"Closed or merged PR \"WIP: Move CultureInfo to shared CoreLib\" (#6726)"},{"Id":"394534958","IsPullRequest":true,"CreatedAt":"2018-12-28T04:36:59","Actor":"Dotnet-GitSync-Bot","Number":"6736","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6736","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#6736)"},{"Id":"394038185","IsPullRequest":true,"CreatedAt":"2018-12-27T21:47:04","Actor":"MarcoRossignoli","Number":"6730","RawContent":null,"Title":"Add `--tokens` option to command line","State":"closed","Body":"contributes to https://github.com/dotnet/corert/issues/6694\r\nStep forward added `--tokens` options to command line and flow to internal verifiers.\r\n\r\n/cc @jkotas @MichalStrehovsky \r\n\r\n:christmas_tree: Merry Christmas!","Url":"https://github.com/dotnet/corert/pull/6730","RelatedDescription":"Closed or merged PR \"Add `--tokens` option to command line\" (#6730)"},{"Id":"394405619","IsPullRequest":true,"CreatedAt":"2018-12-27T14:16:53","Actor":"kbaladurin","Number":"6735","RawContent":null,"Title":"[CppCodeGen] Enable Delegates tests","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/6735","RelatedDescription":"Open PR \"[CppCodeGen] Enable Delegates tests\" (#6735)"},{"Id":"394365994","IsPullRequest":true,"CreatedAt":"2018-12-27T14:12:20","Actor":"filipnavara","Number":"6734","RawContent":null,"Title":"Move Contracts.cs (CoreCLR version) to shared CoreLib","State":"closed","Body":"Not sure what to do about `SuppressMessage` attributes, which are present in CoreRT version and not in CoreCLR version.\r\nThe CoreRT version also had couple of `Contract.EndContractBlock();` lines that are missing in CoreCLR, but it looks reasonable to add them.\r\n\r\nOpinions?","Url":"https://github.com/dotnet/corert/pull/6734","RelatedDescription":"Closed or merged PR \"Move Contracts.cs (CoreCLR version) to shared CoreLib\" (#6734)"},{"Id":"394214267","IsPullRequest":true,"CreatedAt":"2018-12-26T19:04:53","Actor":"filipnavara","Number":"6732","RawContent":null,"Title":"Move System/Numerics/Hashing to shared CoreLib.","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6732","RelatedDescription":"Closed or merged PR \"Move System/Numerics/Hashing to shared CoreLib.\" (#6732)"},{"Id":"394223088","IsPullRequest":false,"CreatedAt":"2018-12-26T18:58:00","Actor":"yowl","Number":"6733","RawContent":null,"Title":"wasm: Main thread Sleep fails due to missing initialisation?","State":"open","Body":"Adding the following to the Program Main:\r\n```\r\n        Thread.Sleep(100);\r\n```\r\nCauses the Assert to be triggered at https://github.com/dotnet/corert/blob/574d8319979ef5118f55c57ce2b90ea61f1429e6/src/System.Private.CoreLib/src/System/Threading/WaitSubsystem.ThreadWaitInfo.Unix.cs#L271  The `RuntimeThread.CurrentThread` looks fine but the `_thread` field is 0 (as it would appear are all the `ThreadWaitInfo` fields).  As there's an assert in the only ctor for `ThreadWaitInfo` to prevent this: https://github.com/dotnet/corert/blob/574d8319979ef5118f55c57ce2b90ea61f1429e6/src/System.Private.CoreLib/src/System/Threading/WaitSubsystem.ThreadWaitInfo.Unix.cs#L92 , it would appear the ctor is not being called or the address of the `ThreadWaitInfo` is bogus.  What I can't find is where the main thread is initialised, specifically how the RuntimeThread is created as breakpoints in it's managed ctor at least are not hit.","Url":"https://github.com/dotnet/corert/issues/6733","RelatedDescription":"Open issue \"wasm: Main thread Sleep fails due to missing initialisation?\" (#6733)"},{"Id":"394198074","IsPullRequest":false,"CreatedAt":"2018-12-26T17:46:52","Actor":"ly303550688","Number":"6731","RawContent":null,"Title":"publish shared library but there is no entrypoint","State":"closed","Body":"I use the sample publish a shared library，dumpbin the dll, there's no entrypoint exported.","Url":"https://github.com/dotnet/corert/issues/6731","RelatedDescription":"Closed issue \"publish shared library but there is no entrypoint\" (#6731)"},{"Id":"394038098","IsPullRequest":false,"CreatedAt":"2018-12-25T17:04:11","Actor":"andreakarasho","Number":"6729","RawContent":null,"Title":"Ubuntu 18.04 Segmentation fault (core dumped)","State":"open","Body":"Im running a virtual machine with ubuntu 18.04 x64.\r\nSame code compiled on windows with the win-x64 cmd configuration works good, but not on ubuntu with configuration ubuntu-x64. \r\n\r\n\r\n```\r\n         Segmentation fault (core dumped)\r\n   1:7>/home/andrea/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27225-02/build/Microsoft.NETCore.Native.targets(228,5): error MSB3073: The command \"\"/home/andrea/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27225-02/tools/ilc\" @\"obj/release/netcoreapp2.2/linux-x64/native/ClassicUO.ilc.rsp\"\" exited with code 139. [/home/andrea/Documents/ClassicUO-NetCore/ClassicUO.csproj]\r\n```","Url":"https://github.com/dotnet/corert/issues/6729","RelatedDescription":"Open issue \"Ubuntu 18.04 Segmentation fault (core dumped)\" (#6729)"},{"Id":"394036483","IsPullRequest":false,"CreatedAt":"2018-12-25T16:39:01","Actor":"Fabi","Number":"6728","RawContent":null,"Title":"System.Management namespace exception","State":"open","Body":"Hey!\r\n\r\nI just tried to get an app running that is using `WqlEventQuery` & `ManagementEventWatcher` from the `System.Management` namespace.\r\n\r\nHowever the native code generation is already giving me warnings:\r\n![image](https://user-images.githubusercontent.com/246718/50424839-88228f80-086b-11e9-9a4d-dc5b81a817a1.png)\r\n\r\nThe app later will throw with:\r\n![image](https://user-images.githubusercontent.com/246718/50424842-94a6e800-086b-11e9-8cb5-5c166fef7e04.png)\r\n\r\nThis is the code I use:\r\n```csharp\r\nvar query = new WqlEventQuery(\"__InstanceCreationEvent\", new TimeSpan(0, 0, 1), \"TargetInstance isa \\\"Win32_Process\\\"\");\r\nvar watcher = new ManagementEventWatcher(query);\r\n\r\nwhile (true)\r\n{\r\n    Thread.Sleep(1);\r\n\r\n    // Wait for process start event.\r\n    var e = watcher.WaitForNextEvent();\r\n    var name = ((ManagementBaseObject)e[\"TargetInstance\"])[\"Name\"].ToString().ToLowerInvariant();\r\n    var path = ((ManagementBaseObject)e[\"TargetInstance\"])[\"ExecutablePath\"].ToString();\r\n    var processId = Convert.ToInt32(((ManagementBaseObject)e[\"TargetInstance\"])[\"ProcessID\"]);\r\n\r\n    /// do stuff\r\n}\r\n```\r\n\r\nUsed command line: `dotnet publish -r win-x64 /p:Configuration=Release /p:platform=\"x64\"`\r\n\r\n.NET Core info:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009820\r\n Commit:    799a33c6ba\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18305\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009820\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27205-02\r\n  Commit:  04035b3a4c\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009820 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27205-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```","Url":"https://github.com/dotnet/corert/issues/6728","RelatedDescription":"Open issue \"System.Management namespace exception\" (#6728)"},{"Id":"393991977","IsPullRequest":false,"CreatedAt":"2018-12-25T11:55:12","Actor":"andreakarasho","Number":"6727","RawContent":null,"Title":"Newtosoft.Json  MissingMetadatException","State":"closed","Body":"Hi This is the errror i receive after running my FNA game.\r\n```IGLDevice: OpenGLDevice\r\nOpenGL Device: GeForce GTX 1080/PCIe/SSE2\r\nOpenGL Driver: 4.6.0 NVIDIA 417.35\r\nOpenGL Vendor: NVIDIA Corporation\r\nMojoShader Profile: glsl120\r\nUsing EXT_swap_control_tear VSync!\r\n10:07:59 |  Trace   | C:\\Users\\andre\\Desktop\\CLASSICUO-NETCORE\\ClassicUO\\ClassicUO\\bin\\Release\\netcoreapp2.2\\win-x64\\native\r\nUnhandled Exception: System.Reflection.MissingMetadataException: 'System.Linq.Expressions.ExpressionCreator<Newtonsoft.Json.Serialization.ObjectConstructor<System.Object>>' is missing metadata. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=392859\r\n   at ClassicUO!<BaseAddress>+0x2eb2a3\r\n   at ClassicUO!<BaseAddress>+0x59ee01\r\n   at ClassicUO!<BaseAddress>+0x17ab31\r\n   at ClassicUO!<BaseAddress>+0x1727e9\r\n   at System.Linq.Expressions.Expression.Lambda(Type, Expression, String, Boolean, IEnumerable`1) + 0x5a\r\n   at Newtonsoft.Json.Utilities.ExpressionReflectionDelegateFactory.CreateParameterizedConstructor(MethodBase) + 0xa3\r\n   at Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(Type) + 0x168\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey, Func`2) + 0x6e\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader, Type, Boolean) + 0x32\r\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader, Type) + 0xf9\r\n   at Newtonsoft.Json.JsonConvert.DeserializeObject(String, Type, JsonSerializerSettings) + 0x93\r\n   at Newtonsoft.Json.JsonConvert.DeserializeObject[T](String, JsonSerializerSettings) + 0x26\r\n   at ClassicUO.Configuration.ConfigurationResolver.Load[T](String) + 0x5f\r\n   at ClassicUO.Engine.Initialize() + 0x7b\r\n   at Microsoft.Xna.Framework.Game.DoInitialize() + 0x23\r\n   at Microsoft.Xna.Framework.Game.Run() + 0x22\r\n   at ClassicUO.Engine.Main(String[]) + 0x4b\r\n   at ClassicUO!<BaseAddress>+0x6da3f4\r\n```\r\n\r\nI added the rd.xml file like this\r\n```\r\n<Directives>\r\n  <Application>\r\n    <Assembly Name=\"Newtonsoft.Json\" >\r\n      <Type Name=\"Newtonsoft.Json.Serialization.ObjectConstructor`1[[System.Object,System.Private.CoreLib]]\" Dynamic=\"Required All\" />\r\n    </Assembly>\r\n\r\n  </Application>\r\n</Directives>\r\n```\r\n\r\nProbably rd.xml file is wrong, but i dont understand how setting it right.","Url":"https://github.com/dotnet/corert/issues/6727","RelatedDescription":"Closed issue \"Newtosoft.Json  MissingMetadatException\" (#6727)"},{"Id":"393912014","IsPullRequest":true,"CreatedAt":"2018-12-24T21:14:47","Actor":"kvochko","Number":"6724","RawContent":null,"Title":"Bring up CoreFX tests on ARM","State":"closed","Body":"With this change and https://github.com/dotnet/coreclr/pull/21669 CoreFX tests on Linux/ARM no longer crash, and test results are as follows:\r\n```\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Collections.Tests  Total: 2835, Errors: 0, Failed: 0, Skipped: 13, Time: 68.510s \r\n```\r\nChanges:\r\n* Fixed frame pointer to be R11 instead of R7 in `PInvokeTransitionFrame` and in `RhpCallFilterFunclet`;\r\n* Uncommented `DelegateCtor` helper implementation\r\nCC @jkotas @alpencolt @sergign60 @iarischenko","Url":"https://github.com/dotnet/corert/pull/6724","RelatedDescription":"Closed or merged PR \"Bring up CoreFX tests on ARM\" (#6724)"},{"Id":"393916201","IsPullRequest":true,"CreatedAt":"2018-12-24T17:58:10","Actor":"tonerdo","Number":"6725","RawContent":null,"Title":"[Interpreter] Branching","State":"open","Body":"This PR adds support for the following opcodes:\r\n\r\n* br*\r\n* switch\r\n\r\nThe positive impact of this is that, interpreted assemblies can now be built in Debug mode\r\n\r\ncc @jkotas @MichalStrehovsky \r\n\r\nPS: Merry Christmas 🎉 ","Url":"https://github.com/dotnet/corert/pull/6725","RelatedDescription":"Open PR \"[Interpreter] Branching\" (#6725)"},{"Id":"393752492","IsPullRequest":true,"CreatedAt":"2018-12-24T09:41:00","Actor":"MichalStrehovsky","Number":"6719","RawContent":null,"Title":"Add option to root all application assemblies","State":"closed","Body":"This is similar to the option IL Linker exposes.\r\n\r\nI'm also tweaking the RD.XML rooting logic (that this new root provider calls into) to attempt to root generic types as well, if possible.","Url":"https://github.com/dotnet/corert/pull/6719","RelatedDescription":"Closed or merged PR \"Add option to root all application assemblies\" (#6719)"},{"Id":"393831559","IsPullRequest":false,"CreatedAt":"2018-12-24T08:10:52","Actor":"differentrain","Number":"6723","RawContent":null,"Title":"--","State":"closed","Body":"--","Url":"https://github.com/dotnet/corert/issues/6723","RelatedDescription":"Closed issue \"--\" (#6723)"},{"Id":"393803920","IsPullRequest":true,"CreatedAt":"2018-12-24T06:50:07","Actor":"Dotnet-GitSync-Bot","Number":"6721","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams @filipnavara","Url":"https://github.com/dotnet/corert/pull/6721","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6721)"},{"Id":"393806854","IsPullRequest":true,"CreatedAt":"2018-12-24T06:49:54","Actor":"filipnavara","Number":"6722","RawContent":null,"Title":"Delete file moved to shared partition","State":"closed","Body":"PR #6721  + build fix","Url":"https://github.com/dotnet/corert/pull/6722","RelatedDescription":"Closed or merged PR \"Delete file moved to shared partition\" (#6722)"},{"Id":"393780042","IsPullRequest":true,"CreatedAt":"2018-12-24T05:53:32","Actor":"tonerdo","Number":"6720","RawContent":null,"Title":"[Interpreter] Arithmetic and Binary operators","State":"closed","Body":"This PR adds support for the following opcodes\r\n\r\n### Arithmetic Operators\r\n\r\n* add.*\r\n* sub.*\r\n* mul.*\r\n* div.*\r\n* rem.*\r\n\r\n### Binary operators\r\n\r\n* and\r\n* or\r\n* xor\r\n\r\ncc @MichalStrehovsky @jkotas ","Url":"https://github.com/dotnet/corert/pull/6720","RelatedDescription":"Closed or merged PR \"[Interpreter] Arithmetic and Binary operators\" (#6720)"},{"Id":"393747274","IsPullRequest":true,"CreatedAt":"2018-12-24T03:32:43","Actor":"Dotnet-GitSync-Bot","Number":"6717","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @ichensky","Url":"https://github.com/dotnet/corert/pull/6717","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6717)"},{"Id":"393752456","IsPullRequest":true,"CreatedAt":"2018-12-24T00:05:59","Actor":"MichalStrehovsky","Number":"6718","RawContent":null,"Title":"Mark System.Private.Interpreter as framework assembly","State":"closed","Body":"It's a framework assembly...","Url":"https://github.com/dotnet/corert/pull/6718","RelatedDescription":"Closed or merged PR \"Mark System.Private.Interpreter as framework assembly\" (#6718)"},{"Id":"393707043","IsPullRequest":true,"CreatedAt":"2018-12-23T16:09:40","Actor":"MichalStrehovsky","Number":"6713","RawContent":null,"Title":"Fix ProjectN regression in `ByReference<T>`","State":"closed","Body":"Making the field `initonly` breaks the contract with the codegen.","Url":"https://github.com/dotnet/corert/pull/6713","RelatedDescription":"Closed or merged PR \"Fix ProjectN regression in `ByReference<T>`\" (#6713)"},{"Id":"393728523","IsPullRequest":true,"CreatedAt":"2018-12-23T07:58:23","Actor":"Dotnet-GitSync-Bot","Number":"6716","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6716","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6716)"},{"Id":"393717839","IsPullRequest":true,"CreatedAt":"2018-12-23T06:54:55","Actor":"Dotnet-GitSync-Bot","Number":"6715","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6715","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6715)"},{"Id":"393715548","IsPullRequest":false,"CreatedAt":"2018-12-23T01:39:57","Actor":"yinyue200","Number":"6714","RawContent":null,"Title":"ILT0005 compile error","State":"open","Body":"#### Bug description\r\nCan't compile by .Net Native\r\n\r\n#### Repro steps\r\nBuild the repo in RELEASE Mode https://github.com/yinyue200/vsthreadingwithnetnative\r\n\r\n#### Expected behavior\r\nbuild success\r\n\r\n#### Actual behavior\r\n1>  Processing application code\r\n1>  Computing application closure and generating interop code\r\n1>    Loading 91 modules...\r\n1>    Generating code...\r\n1>    Interop code generated.\r\n1>  Compiling interop code\r\n1>  Generating System.Reflection.DispatchProxy proxy code.\r\n1>  Cleaning up unreferenced code\r\n1>  Generating native code\r\n1>C:\\Users\\username\\.nuget\\packages\\microsoft.net.native.compiler\\2.1.8\\tools\\Microsoft.NetNative.targets(788,5): error : ILT0005: 'C:\\Users\\username\\.nuget\\packages\\runtime.win10-x86.microsoft.net.native.compiler\\2.1.8\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"C:\\Users\\username\\Source\\Repos\\App1\\App1\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\App1.rsp\"' returned exit code -2147483645\r\n\r\n#### Additional context\r\nsee https://github.com/Microsoft/vs-threading/issues/446","Url":"https://github.com/dotnet/corert/issues/6714","RelatedDescription":"Open issue \"ILT0005 compile error\" (#6714)"},{"Id":"393700014","IsPullRequest":true,"CreatedAt":"2018-12-22T22:07:37","Actor":"Dotnet-GitSync-Bot","Number":"6712","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6712","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6712)"},{"Id":"393692146","IsPullRequest":true,"CreatedAt":"2018-12-22T19:53:31","Actor":"Dotnet-GitSync-Bot","Number":"6711","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6711","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6711)"},{"Id":"393638862","IsPullRequest":true,"CreatedAt":"2018-12-22T05:22:03","Actor":"Dotnet-GitSync-Bot","Number":"6710","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @jkotas","Url":"https://github.com/dotnet/corert/pull/6710","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6710)"},{"Id":"393630062","IsPullRequest":true,"CreatedAt":"2018-12-22T03:27:55","Actor":"Dotnet-GitSync-Bot","Number":"6709","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii @fiigii @marek-safar @tannergooding @danmosemsft","Url":"https://github.com/dotnet/corert/pull/6709","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6709)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"394389141","IsPullRequest":true,"CreatedAt":"2018-12-27T18:13:10","Actor":"dotnet-maestro[bot]","Number":"2775","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18621.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18621.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2775","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2775)"},{"Id":"394245543","IsPullRequest":true,"CreatedAt":"2018-12-26T21:37:44","Actor":"dsplaisted","Number":"2774","RawContent":null,"Title":"Resolve assets from targeting pack","State":"open","Body":"First steps for dotnet/cli#10085\r\n\r\n- References \"Targeting Packs\" with ExcludeAssets=\"all\", and resolves assets from the targeting packs directly (instead of going through the assets file)\r\n- References \"Runtime Packs\" if necessary to support self-contained publish (these still go through the assets file for now)\r\n- For now, hard-codes a `KnownFrameworkReference` to Microsoft.NETCore.App, and includes the RID graph directly.  These will need to be added to core-sdk\r\n- The list of runtime packs for each `KnownFrameworkReference`, and the RIDs available, will also need to be supplied by core-sdk","Url":"https://github.com/dotnet/sdk/pull/2774","RelatedDescription":"Open PR \"Resolve assets from targeting pack\" (#2774)"},{"Id":"394162568","IsPullRequest":false,"CreatedAt":"2018-12-26T18:15:36","Actor":"1scrooge","Number":"2773","RawContent":null,"Title":"dotnet`s error with credentials for nuget feed","State":"closed","Body":"After updated dotnet up to 2.1.502 and uper I have an error with credentials for nuget feed when I using apikey\r\n```\r\n/usr/share/dotnet/sdk/2.1.502/NuGet.targets(499,5): error : Unable to parse config file because: Credentials item must have username and password. Path: '/home/user/.nuget/NuGet/NuGet.Config'\r\n```\r\nmy NuGet.Config:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n   <packageSources>\r\n        <add key=\"name_feed\" value=\"http://url_feed/nuget\" />\r\n    </packageSources>\r\n    <packageSourceCredentials>\r\n        <name_feed>\r\n           <apikeys>\r\n             <add key=\"http://url_feed/nuget\" value=\"qwd32dqwd231vdas13\" />\r\n           </apikeys>\r\n        </name_feed>\r\n    </packageSourceCredentials>\r\n</configuration>\r\n```\r\non 2.1.403 version works fine\r\nCould you fix it?","Url":"https://github.com/dotnet/sdk/issues/2773","RelatedDescription":"Closed issue \"dotnet`s error with credentials for nuget feed\" (#2773)"},{"Id":"393841237","IsPullRequest":false,"CreatedAt":"2018-12-25T19:48:07","Actor":"vitlav","Number":"2772","RawContent":null,"Title":" The library 'libhostpolicy.so' required to execute the application was not found in","State":"closed","Body":"## Steps to reproduce\r\n* get the latest SDK binaries (2.1.6, f.i.) and put them on the path (on /usr/lib64/dotnet-bootstrap/ dir actually in my case)\r\n* create empty dir with some old version:\r\n  mkdir /usr/lib64/dotnet-bootstrap/shared/Microsoft.NETCore.App/2.0.5\r\n* `dotnet new console`\r\n* `dotnet run`\r\n\r\n## Expected behavior\r\nProgram runs and prints hello world.\r\n\r\n## Actual behavior\r\n```\r\n/usr/lib64/dotnet-bootstrap/sdk/2.1.500/Roslyn/Microsoft.CSharp.Core.targets(52,5): error : A fatal error was encountered. The library 'libhostpolicy.so' required to execute the application was not found in '/usr/lib64/dotnet-bootstrap/shared/Microsoft.NETCore.App/2.0.5'.\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n $ ls /usr/lib64/dotnet-bootstrap/shared/Microsoft.NETCore.App/\r\n 2.0.5  2.1.6\r\n\r\nWhy it selected random 2.0.5 as preffered version?\r\n\r\n## Environment data\r\n```\r\n$ /usr/lib64/dotnet-bootstrap/dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     altlinux\r\n OS Version:  20170925\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/lib64/dotnet-bootstrap/sdk/2.1.500/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [/usr/lib64/dotnet-bootstrap/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [/usr/lib64/dotnet-bootstrap/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [/usr/lib64/dotnet-bootstrap/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.4 [/usr/lib64/dotnet-bootstrap/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/usr/lib64/dotnet-bootstrap/shared/Microsoft.NETCore.App]\r\n\r\n```","Url":"https://github.com/dotnet/sdk/issues/2772","RelatedDescription":"Closed issue \" The library 'libhostpolicy.so' required to execute the application was not found in\" (#2772)"},{"Id":"393671505","IsPullRequest":true,"CreatedAt":"2018-12-23T18:06:21","Actor":"dotnet-maestro[bot]","Number":"2771","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18620.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18620.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2771","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2771)"},{"Id":"392840072","IsPullRequest":true,"CreatedAt":"2018-12-21T18:00:55","Actor":"wli3","Number":"2766","RawContent":null,"Title":"Fix package version 1000 cannot install","State":"closed","Body":"run `dotnet pack -p:version=1000` with packaged shim, and the result package cannot run. Due to embedded shim has version \"1000\" while the actual nuget folder layout is \"1000.0.0\".\r\n\r\nthe version need to be normalized to much the layout. Per discussion https://github.com/dotnet/cli/issues/9870","Url":"https://github.com/dotnet/sdk/pull/2766","RelatedDescription":"Closed or merged PR \"Fix package version 1000 cannot install\" (#2766)"},{"Id":"393451224","IsPullRequest":true,"CreatedAt":"2018-12-21T17:58:24","Actor":"dotnet-maestro[bot]","Number":"2770","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18620.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2770","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2770)"},{"Id":"393294093","IsPullRequest":false,"CreatedAt":"2018-12-21T03:00:35","Actor":"davidwengier","Number":"2769","RawContent":null,"Title":"Remove duplicate FolderPublish capability for SDK projects","State":"open","Body":"Once https://github.com/dotnet/project-system/pull/4400 has been merged the capability can be removed from the SDK, leaving all publish related capabilities in the same targets file inside the project system, for consistency.\r\n\r\nhttps://github.com/dotnet/sdk/blob/c93f4a14ebcff4a18840b06886c5dcf24ae64a0e/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L585-L588","Url":"https://github.com/dotnet/sdk/issues/2769","RelatedDescription":"Open issue \"Remove duplicate FolderPublish capability for SDK projects\" (#2769)"},{"Id":"392730861","IsPullRequest":false,"CreatedAt":"2018-12-20T21:23:42","Actor":"conniey","Number":"2765","RawContent":null,"Title":"`dotnet test` fails when native assets are required and multiple RuntimeIdentifiers are set","State":"closed","Body":"There are several related questions/issues to this (ie. #1017), so this might be more of a guidance question.\r\n\r\nOur ApiPort tests use ilasm to compile IL files and verify that our MetadataReader is working correctly. (ex. [Microsoft.Fx.Portability.MetadataReader.Tests.csproj](https://github.com/Microsoft/dotnet-apiport/blob/dev/tests/lib/Microsoft.Fx.Portability.MetadataReader.Tests/Microsoft.Fx.Portability.MetadataReader.Tests.csproj).\r\n\r\nIt currently only works on .NET 4.6, but we want to be able to run this test on Linux as well to make sure our MetadataReader works on all platforms.\r\n\r\nWhat is the solution here?\r\n\r\nWhen I set: `<RuntimeIdentifiers>win7-x86;linux-x64</RuntimeIdentifiers>`, all tests when running against both .NET 4.6 and .NETCoreApp2.1 because ildasm cannot be located (since it is not copied to the OuputDirectory).","Url":"https://github.com/dotnet/sdk/issues/2765","RelatedDescription":"Closed issue \"`dotnet test` fails when native assets are required and multiple RuntimeIdentifiers are set\" (#2765)"},{"Id":"393037303","IsPullRequest":true,"CreatedAt":"2018-12-20T20:32:27","Actor":"dotnet-maestro[bot]","Number":"2767","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18619.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18619.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2767","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2767)"},{"Id":"393037322","IsPullRequest":false,"CreatedAt":"2018-12-20T13:01:50","Actor":"vgriph","Number":"2768","RawContent":null,"Title":"Links to app.config is case sensitive","State":"open","Body":"I've been migrating project files from the old project system to use Microsoft.NET.Sdk. We had some projects which share app.config using links of the type\r\n```\r\n<None Include=\"..\\OtherProject\\App.config\">\r\n  <Link>App.config</Link>\r\n</None>\r\n```\r\nHowever, with when using SDK file projects these links are not used for creating target assembly configuration file. After some debugging I found out that\r\n```\r\n<None Include=\"..\\OtherProject\\App.config\">\r\n  <Link>app.config</Link>\r\n</None>\r\n```\r\nworks.","Url":"https://github.com/dotnet/sdk/issues/2768","RelatedDescription":"Open issue \"Links to app.config is case sensitive\" (#2768)"},{"Id":"392591862","IsPullRequest":true,"CreatedAt":"2018-12-19T18:19:29","Actor":"dotnet-maestro[bot]","Number":"2763","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18618.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2763","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2763)"},{"Id":"392680433","IsPullRequest":false,"CreatedAt":"2018-12-19T16:29:03","Actor":"nguerrera","Number":"2764","RawContent":null,"Title":"Changing AssemblyName prevent app from starting","State":"open","Body":"_From @LokiMidgard on December 18, 2018 11:5_\n\nI've created a project and want to rename the created Assembly.\r\nOutputType: `WinExe`  \r\nTargetFramework: `netcoreapp3.0`  \r\nUseWPF: `true`\r\n\r\nOS: `Windows 10`  \r\ndotnet core `3.0.100-preview-009812`\r\n\r\nAfter renaming it I can no longer start the exe or debug it in Visual Studio.\r\nFollowing error appears when I try to start debugging:\r\n```\r\nDas Programm \"[17104] DiceTool.exe\" wurde mit Code -2147450741 (0x8000808b) beendet.\r\nDas Programm \"[17104] DiceTool.exe: Programmablaufverfolgung\" wurde mit Code 0 (0x0) beendet.\r\n```\r\nI try to set `<AssemblyName>DiceTool.Ui</AssemblyName>` to `<AssemblyName>DiceTool</AssemblyName>`.\r\n\r\nReverting this change will fix the issue.\r\n\r\nThe code to reproduce this is in [this Commit](https://github.com/LokiMidgard/Dice-Tool/tree/512a397c8c09de7be3a2c1b106c9a7457fc5c305)\r\n\r\n\n\n_Copied from original issue: dotnet/core#2163_","Url":"https://github.com/dotnet/sdk/issues/2764","RelatedDescription":"Open issue \"Changing AssemblyName prevent app from starting\" (#2764)"},{"Id":"392406799","IsPullRequest":true,"CreatedAt":"2018-12-19T01:43:03","Actor":"livarcocc","Number":"2762","RawContent":null,"Title":"Updating NuGet and CLI version.","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2762","RelatedDescription":"Open PR \"Updating NuGet and CLI version.\" (#2762)"},{"Id":"392386471","IsPullRequest":true,"CreatedAt":"2018-12-19T00:01:31","Actor":"dotnet-bot","Number":"2761","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2761","RelatedDescription":"Open PR \"Merge release/2.2.2xx to master\" (#2761)"},{"Id":"392125219","IsPullRequest":true,"CreatedAt":"2018-12-18T17:37:52","Actor":"dotnet-bot","Number":"2758","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2758","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2758)"},{"Id":"392146705","IsPullRequest":true,"CreatedAt":"2018-12-18T17:35:43","Actor":"dotnet-maestro[bot]","Number":"2759","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18617.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2759","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2759)"},{"Id":"392203074","IsPullRequest":false,"CreatedAt":"2018-12-18T15:18:06","Actor":"weltkante","Number":"2760","RawContent":null,"Title":"References specified in the project file are sometimes dropped and replaced by wrong versions","State":"open","Body":"MsBuild loses assembly references specified in our project file if the SDK happens to import the same assembly (possibly in a different version) from nuget packages.\r\n\r\nWe have an ASP.NET Core project which pulls in Newtonsoft.Json with 11.0.2 package version. Our project file has an explicit reference to Newtonsoft.Json 12.0.0.0 assembly version. The reference is specified via HintPath because we do not want to update every single project file (we have a lot) when we change the 3rd party components we deploy.\r\n```xml\r\n    <Reference Include=\"Newtonsoft.Json\">\r\n      <HintPath>$(ReferenceBasePath)Newtonsoft.Json.dll</HintPath>\r\n    </Reference>\r\n```\r\nThe bug is in [`ResolveLockFileReferences`](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.PackageDependencyResolution.targets#L448) target where in line 448 you are removing references via their name. Since you generate package references without strong identity you will remove any corresponding references specified in the project using the same name, even though they might have different metadata.\r\n\r\nmsbuild logging says\r\n```\r\n    _JoinedResolvedCompileFileDefinitions=\r\n        Newtonsoft.Json\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\newtonsoft.json\\11.0.2\\lib\\net45\\Newtonsoft.Json.dll\r\n                NuGetPackageId=Newtonsoft.Json\r\n                NuGetPackageVersion=11.0.2\r\n                NuGetSourceType=Package\r\n                Private=false\r\n        System.Collections.Immutable\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\system.collections.immutable\\1.5.0\\lib\\netstandard2.0\\System.Collections.Immutable.dll\r\n                NuGetPackageId=System.Collections.Immutable\r\n                NuGetPackageVersion=1.5.0\r\n                NuGetSourceType=Package\r\n                Private=false\r\n        System.Reflection.Metadata\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\system.reflection.metadata\\1.6.0\\lib\\netstandard2.0\\System.Reflection.Metadata.dll\r\n                NuGetPackageId=System.Reflection.Metadata\r\n                NuGetPackageVersion=1.6.0\r\n                NuGetSourceType=Package\r\n                Private=false\r\n    Entfernte Elemente: \r\n    Reference=\r\n        Newtonsoft.Json\r\n                HintPath=..\\..\\..\\ThirdParty\\Newtonsoft.Json.dll\r\n        System.Collections.Immutable\r\n                HintPath=..\\..\\..\\ThirdParty\\System.Collections.Immutable.dll\r\n        System.Reflection.Metadata\r\n                HintPath=..\\..\\..\\ThirdParty\\System.Reflection.Metadata.dll\r\n    Hinzugefügte Elemente: \r\n    Reference=\r\n        Newtonsoft.Json\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\newtonsoft.json\\11.0.2\\lib\\net45\\Newtonsoft.Json.dll\r\n                NuGetPackageId=Newtonsoft.Json\r\n                NuGetPackageVersion=11.0.2\r\n                NuGetSourceType=Package\r\n                Private=false\r\n        System.Collections.Immutable\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\system.collections.immutable\\1.5.0\\lib\\netstandard2.0\\System.Collections.Immutable.dll\r\n                NuGetPackageId=System.Collections.Immutable\r\n                NuGetPackageVersion=1.5.0\r\n                NuGetSourceType=Package\r\n                Private=false\r\n        System.Reflection.Metadata\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\system.reflection.metadata\\1.6.0\\lib\\netstandard2.0\\System.Reflection.Metadata.dll\r\n                NuGetPackageId=System.Reflection.Metadata\r\n                NuGetPackageVersion=1.6.0\r\n                NuGetSourceType=Package\r\n                Private=false\r\n```\r\nThe problem goes away if we specify the reference as\r\n```xml\r\n    <Reference Include=\"Newtonsoft.Json, Version=12.0.0.0\">\r\n      <HintPath>$(ReferenceBasePath)Newtonsoft.Json.dll</HintPath>\r\n    </Reference>\r\n```\r\nbut this is something we do *not* want due to the amount of projects and number of references we would have to maintain manually. For us assembly references are uniquely defined by the version checked into source control in their corresponding third party folder.\r\n\r\nWhile debugging the issue I have seen other msbuild target files acknowledge this problem by rebuilding the references list instead of selectively removing references. Something like\r\n```xml\r\n    <ItemGroup>\r\n      <Reference Remove=\"@(Reference)\"/>\r\n      <Reference Include=\"@(_ModifiedReferences)\"/>\r\n    </ItemGroup>\r\n```\r\nUnfortunately I can't seem to find the place again where I've seen it, but I hope you get the idea of the problem.","Url":"https://github.com/dotnet/sdk/issues/2760","RelatedDescription":"Open issue \"References specified in the project file are sometimes dropped and replaced by wrong versions\" (#2760)"},{"Id":"391940621","IsPullRequest":true,"CreatedAt":"2018-12-18T03:30:25","Actor":"dotnet-bot","Number":"2757","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2757","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#2757)"},{"Id":"391887120","IsPullRequest":true,"CreatedAt":"2018-12-17T21:54:39","Actor":"wli3","Number":"2756","RawContent":null,"Title":"No apphost in PackAsTool","State":"closed","Body":"fix #https://github.com/dotnet/sdk/issues/2749","Url":"https://github.com/dotnet/sdk/pull/2756","RelatedDescription":"Closed or merged PR \"No apphost in PackAsTool\" (#2756)"},{"Id":"391643563","IsPullRequest":false,"CreatedAt":"2018-12-17T16:31:07","Actor":"YunWeiaa","Number":"2754","RawContent":null,"Title":"For .Net Core 3.0, create a winforms app, dotnet run without the windows box poping up.","State":"closed","Body":"### Description:\r\nCreate a winforms app. Build and run. \r\ndotnet new winforms -o MyWinFormsApp \r\ncd MyWinFormsApp \r\ndotnet build \r\ndotnet run\r\n\r\n**Expected**: It should appear a windows box like this\r\n![image](https://user-images.githubusercontent.com/33921754/50080741-c4c90800-0227-11e9-8163-39413bd95ebe.png)\r\n\r\n**Actual**: It doesn’t pop up a windows box.\r\n![image](https://user-images.githubusercontent.com/33921754/50080827-f17d1f80-0227-11e9-9d5e-a6298d7667fb.png)\r\n### Test Environment:\r\nD16.0/28414.68(16.0 preview 2.0) + CLI\\SDK: 3.0.100-preview-009839 \r\ndotnet --info:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009839\r\n Commit:    ee9fe44627\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009839\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27216-02\r\n  Commit:  79edbd4d15\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009839 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27216-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27214-12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2754","RelatedDescription":"Closed issue \"For .Net Core 3.0, create a winforms app, dotnet run without the windows box poping up.\" (#2754)"},{"Id":"391504131","IsPullRequest":true,"CreatedAt":"2018-12-17T16:23:27","Actor":"dagood","Number":"2753","RawContent":null,"Title":"Exclude unit test projects from source-build","State":"closed","Body":"Reopening https://github.com/dotnet/sdk/pull/2642. (I don't seem to have permissions to reopen the PR in-place.)\r\n\r\n> This is a patch for removing test dependencies from source-build: https://github.com/dotnet/source-build/pull/847.\r\n> \r\n> RepoToolset picks up on this `ExcludeFromSourceBuild` property I'm adding and disables restore and build.\r\n> \r\n> @nguerrera, PTAL.\r\n\r\nThis is the patch directly: https://github.com/dotnet/source-build/blob/ecc7b00f5b7cf2d21cb6f545669690f7ab4996fc/patches/sdk/0001-Exclude-unit-test-projects-from-source-build.patch. Getting patch fixes pulled into the repo is important to us to avoid maintenance costs.","Url":"https://github.com/dotnet/sdk/pull/2753","RelatedDescription":"Closed or merged PR \"Exclude unit test projects from source-build\" (#2753)"},{"Id":"391702193","IsPullRequest":true,"CreatedAt":"2018-12-17T16:23:00","Actor":"dotnet-maestro[bot]","Number":"2755","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2755","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2755)"},{"Id":"391465182","IsPullRequest":true,"CreatedAt":"2018-12-16T21:53:20","Actor":"dotnet-maestro[bot]","Number":"2750","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2750","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2750)"},{"Id":"391496812","IsPullRequest":true,"CreatedAt":"2018-12-16T20:07:57","Actor":"nguerrera","Number":"2752","RawContent":null,"Title":"Use latest signtool to avoid MAX_PATH issue in official builds","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2752","RelatedDescription":"Closed or merged PR \"Use latest signtool to avoid MAX_PATH issue in official builds\" (#2752)"},{"Id":"390333769","IsPullRequest":false,"CreatedAt":"2018-12-16T19:45:26","Actor":"abpiskunov","Number":"2747","RawContent":null,"Title":"Add publish capabilities for SDK based ClassLibraries and ConsoleApps","State":"closed","Body":"Per our discussion with @nguerrera and @davkean we need to switch to new capabilities schema for publish (see below). To accomplish that one of the workitems is to add\r\n\r\n- FolderPublish to SDK-based class libraries and console apps , along with WPF and WinForms (if it is not present yet)\r\n- AppServicePublish to SDK-based class libraries and console apps \r\n\r\nThis needs to happen in P2 and earlier rather than later since Publish would need to commit and test changes after all capabilities are added.\r\n\r\nCapabilities \r\n \r\n•         \"Publish\": all projects that support any kind of publish should contain this capability\r\no    All .NET project types\r\n•         \"FolderPublish\": if project supports publishing to folder\r\no    Class libraries  (classic and core). Note: we don't own Publish for classic class libraries and classic ConsoleApps, ClickOnce does. There should be separate work item tracking ClickOnce support for our publish framework. However we can add capability now and it would light up when ClickOnce adds apublish provider.\r\no    Console app (classic, core). \r\no    WebSites, WAP, Web core\r\no    WPF (core and classic)\r\no    WinForms (classic and core)\r\n•         \"AppServicePublish\": if project is publishable to any web related publish target: Web, AppService, etc \r\no    Console apps (classic and core)\r\no    WebSites, WAP, Web core\r\n \r\nPotential pending capabilities:\r\n•         \"ClickOnce\"\r\no    Classic console apps\r\no    WPF (classic)\r\no    WinForms (classic)\r\n•         \"MSIX\"\r\no    Console apps (classic and core)\r\no    WPF (classic and core)\r\no    WinForms (classic and core)\r\n \r\n \r\n \r\nProviders \r\n \r\n•         FolderProvider: AppliesTo(\"Publish&FolderPublish\")\r\n•         AppServiceProvider: AppliesTo(\"Publish&AppServicePublish\")\r\n•         IISProvider: AppliesTo(\"Publish&Web\")\r\n•         AzureVMProvider: AppliesTo(\"Publish&Web\")\r\n•         AppServiceLinuxProvider: AppliesTo(\"Publish&DotNetCoreWeb\")\r\n•         ContainerRegistryProvider:AppliesTo(Publish&AppServicePublish&(Web|DotnetCoreWeb))\r\n•         ClickOnceProvider:AppliesTo(Publish&ClickOnce)\r\n•         MSIXProvider:AppliesTo(Publish&MSIX)\r\n \r\n \r\nWorkitems:\r\n \r\n•\tAdd FolderPublish to WPF and WinForms (classic and core), Class Libraries and Console Apps (classic and core). Some of them already have it , just make sure all of them have. <- CSharp & SDK\r\n•\tAdd AppServicePublish to Console apps (classic and core) <- CSharp and SDK\r\n•\tAdd AppServicePublish to WebSites, WAP, and Core Web <- WAP and WebSdk\r\n \r\nClickOnce and MSIX I would leave to their owner to request/add when they are ready.\r\n","Url":"https://github.com/dotnet/sdk/issues/2747","RelatedDescription":"Closed issue \"Add publish capabilities for SDK based ClassLibraries and ConsoleApps\" (#2747)"},{"Id":"391486333","IsPullRequest":false,"CreatedAt":"2018-12-16T17:09:36","Actor":"joaorosado","Number":"2751","RawContent":null,"Title":"Properties defined in target files do not get applied with multiple TargetFrameworks","State":"open","Body":"I'm adding multitargeting to net461 and netstandard2.0 in some of my projects as a migration path.\r\nWhile doing this and trying I noticed that in one of the targets all the generate AssemblyInfo had the default values.\r\n\r\nCurrently I have a import on my projects that adds extra targets and sets the common properties consistently on all of them.\r\n`<Import Project=\"$(ProjectDir)..\\..\\Commons\\Common.targets\" />`\r\n\r\nthis target file is taking care of the properties import inside (but the problem also occurs if they are defined explicitly in the .targets) \r\n`<Import Project=\"Common.props\" />`\r\n\r\nThis worked fine with one target and in the generated assembly info file that Visual Studio is doing automatically (I can see both files in disk being changed correctly).\r\nBut then when actually doing the real build the AssemblyInfo on the **second** target gets all the default values.\r\n\r\nI've found 2 workarounds for this:\r\n- Import the \"Common.props\" directly on my project.\r\n- Add an empty \"Directory.Build.props\" file on the root of my repository. <- not sure why this fixes it\r\n\r\nWhile I'm OK with any of the workarounds, I'm really worried that other target files get incorrect properties and that the second target framework gets build incorrectly.\r\n\r\nHow is the correct way of doing this?\r\n\r\nTested with both VS 15.9.3 and 15.9.4 \r\n\r\nEdit: can't seem to get any of my workarounds to work now that upgraded to 15.9.4 :(","Url":"https://github.com/dotnet/sdk/issues/2751","RelatedDescription":"Open issue \"Properties defined in target files do not get applied with multiple TargetFrameworks\" (#2751)"},{"Id":"390007564","IsPullRequest":true,"CreatedAt":"2018-12-14T00:15:33","Actor":"dotnet-bot","Number":"2746","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2746","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2746)"},{"Id":"390902820","IsPullRequest":false,"CreatedAt":"2018-12-13T23:21:33","Actor":"wli3","Number":"2749","RawContent":null,"Title":"Pack as tool should not generate exe in nupkg","State":"open","Body":"We generate an executable by default as a new 3.0.xxx feature. However, we should not generate such file during PackAsTool. It should not be harmful however it would be flagged or signed by infrastructure","Url":"https://github.com/dotnet/sdk/issues/2749","RelatedDescription":"Open issue \"Pack as tool should not generate exe in nupkg\" (#2749)"},{"Id":"390775310","IsPullRequest":false,"CreatedAt":"2018-12-13T17:53:16","Actor":"nphmuller","Number":"2748","RawContent":null,"Title":"Option to treat NETSDK warnings as errors","State":"closed","Body":"While updating to 2.2.100 I noticed a couple of warnings were added. Like `NETSDK1071`.\r\nIn my CI I build using the `TreatWarningsAsErrors` flag (`dotnet build /p:TreatWarningsAsErrors=\"true\"`)`.\r\n\r\nThe build still completed succesfully, while `NETSDK1071` was thrown.\r\n\r\nWhat is the recommended way to force a build to fail if any of these warnings are thrown from the SDK?\r\nThe most user friendly way would be to use the same flag as msbuild. But that doesn't seem to be supported atm.","Url":"https://github.com/dotnet/sdk/issues/2748","RelatedDescription":"Closed issue \"Option to treat NETSDK warnings as errors\" (#2748)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalMlaik","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"},{"Id":"319700544","IsPullRequest":false,"CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Number":"65","RawContent":null,"Title":".NET Framework Runtime and Builder Docker repos have merged ","State":"open","Body":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n","Url":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Open issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65)"},{"Id":"315285808","IsPullRequest":false,"CreatedAt":"2018-04-18T00:20:13","Actor":"richlander","Number":"64","RawContent":null,"Title":"April 2018 .NET Updates","State":"open","Body":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [Announcing the .NET Framework 4.7.2](https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/)\r\n* No new patch releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Open issue \"April 2018 .NET Updates\" (#64)"},{"Id":"305721744","IsPullRequest":false,"CreatedAt":"2018-03-15T21:13:36","Actor":"mairaw","Number":"63","RawContent":null,"Title":"Transport Layer Security (TLS) best practices with the .NET Framework article published","State":"open","Body":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices for .NET Framework applications at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675","Url":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Open issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1073371092515840000","CreatedAt":"2018-12-14T00:16:25+00:00","UserScreenname":"dotnet","Text":"C# and Visual Basic files get Regex language support in @VisualStudio 2019 Preview\nhttps://t.co/NL5QgAl9hq https://t.co/WWTK6BT5RG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":368,"FavoriteCount":135,"RawContent":null},{"Id":"1072638045227270144","CreatedAt":"2018-12-11T23:43:33+00:00","UserScreenname":"dotnet","Text":"Blogged: .NET Framework December 2018 Security and Quality Rollup https://t.co/5PllosL5i2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1072146418868064256","CreatedAt":"2018-12-10T15:10:00+00:00","UserScreenname":"dotnet","Text":"Learn about writing tests for @AzureFunctions with Senior Program Manager Jeff Hollan (@jeffhollan) in this episode… https://t.co/18tWdVma7r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":30,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-12-29T05:30:45.2214368Z","RunDurationInMilliseconds":20380}