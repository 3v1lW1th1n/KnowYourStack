{"Data":{"Sdk":{"Events":[{"Id":"10682421515","Type":"IssuesEvent","CreatedAt":"2019-10-22T05:18:47","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/635","RelatedDescription":"Closed issue \"Support for encrypted workbook\" (#635) at OfficeDev/Open-XML-SDK","RelatedBody":"\r\n"},{"Id":"10682418992","Type":"IssuesEvent","CreatedAt":"2019-10-22T05:18:01","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/636","RelatedDescription":"Closed issue \"Make it easy\" (#636) at OfficeDev/Open-XML-SDK","RelatedBody":"package is utter shit.\r\nRewrite it from scratch\r\n\r\nSample:\r\n`using (SpreadsheetDocument sDoc = SpreadsheetDocument.Open(MyExcelStream, ReadOnly))\r\n            {\r\n                WorkbookPart workbookPart = sDoc.WorkbookPart;\r\n                IEnumerable<Sheet> sheets = sDoc.WorkbookPart.Workbook.GetFirstChild<Sheets>().Elements<Sheet>();\r\n                string relationshipId = sheets.First().Id.Value;\r\n                WorksheetPart worksheetPart = (WorksheetPart)sDoc.WorkbookPart.GetPartById(relationshipId);\r\n                Worksheet workSheet = worksheetPart.Worksheet;\r\n                SheetData sheetData = workSheet.GetFirstChild<SheetData>();\r\n                IEnumerable<Row> rows = sheetData.Descendants<Row>();`\r\n\r\nThis is trash. Bad kids.\r\n\r\nLearn:\r\n\r\nEPPLus example:\r\n\r\n`using (var p = new ExcelPackage())\r\n        {\r\n           //A workbook must have at least on cell, so lets add one... \r\n           var ws=p.Workbook.Worksheets.Add(\"MySheet\");\r\n           //To set values in the spreadsheet use the Cells indexer.\r\n           ws.Cells[\"A1\"].Value = \"This is cell A1\";\r\n           //Save the new workbook. We haven't specified the filename so use the Save as method.\r\n           p.SaveAs(new FileInfo(@\"c:\\workbooks\\myworkbook.xlsx\"));\r\n        }`\r\n\r\nClear and easy!!!!\r\n\r\nLearn to program and rewrite this trash please."},{"Id":"10674761281","Type":"IssuesEvent","CreatedAt":"2019-10-21T10:06:07","Actor":"Porkechebure","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/636","RelatedDescription":"Opened issue \"Make it easy\" (#636) at OfficeDev/Open-XML-SDK","RelatedBody":"package is utter shit.\r\nRewrite it from scratch\r\n\r\nSample:\r\n`using (SpreadsheetDocument sDoc = SpreadsheetDocument.Open(MyExcelStream, ReadOnly))\r\n            {\r\n                WorkbookPart workbookPart = sDoc.WorkbookPart;\r\n                IEnumerable<Sheet> sheets = sDoc.WorkbookPart.Workbook.GetFirstChild<Sheets>().Elements<Sheet>();\r\n                string relationshipId = sheets.First().Id.Value;\r\n                WorksheetPart worksheetPart = (WorksheetPart)sDoc.WorkbookPart.GetPartById(relationshipId);\r\n                Worksheet workSheet = worksheetPart.Worksheet;\r\n                SheetData sheetData = workSheet.GetFirstChild<SheetData>();\r\n                IEnumerable<Row> rows = sheetData.Descendants<Row>();`\r\n\r\nThis is trash. Bad kids.\r\n\r\nLearn:\r\n\r\nEPPLus example:\r\n\r\n`using (var p = new ExcelPackage())\r\n        {\r\n           //A workbook must have at least on cell, so lets add one... \r\n           var ws=p.Workbook.Worksheets.Add(\"MySheet\");\r\n           //To set values in the spreadsheet use the Cells indexer.\r\n           ws.Cells[\"A1\"].Value = \"This is cell A1\";\r\n           //Save the new workbook. We haven't specified the filename so use the Save as method.\r\n           p.SaveAs(new FileInfo(@\"c:\\workbooks\\myworkbook.xlsx\"));\r\n        }`\r\n\r\nClear and easy!!!!\r\n\r\nLearn to program and rewrite this trash please."},{"Id":"10629630840","Type":"IssuesEvent","CreatedAt":"2019-10-15T02:24:28","Actor":"nbulusanjr","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/635","RelatedDescription":"Opened issue \"Support for encrypted workbook\" (#635) at OfficeDev/Open-XML-SDK","RelatedBody":"# Before submitting an issue, please fill this out\r\n\r\nIs this a:\r\n- [ ] Issue with the OpenXml library\r\n- [ X] Question on library usage\r\n\r\nIf you have answered that this is a question, please ask it on StackOverflow instead of here.\r\nThis issue tracker is meant to track product issues while StackOverflow excels at answering questions\r\n\r\n---------------- Remove this line and above before posting ----------------\r\n\r\n**Description**\r\n\r\nPlease provide a simple description of the issue encountered.\r\n\r\n**Information**\r\n\r\n- .NET Target: (ie .NET Framework, .NET Core, UWP, Xamarin, etc)\r\n- DocumentFormat.OpenXml Version: (ie 2.7.2)\r\n\r\n**Repro**\r\n\r\n```csharp\r\n// Please add a self-contained, minimum viable repro of the issue.\r\n// If you require external resources, please provide a gist or GitHub repro\r\n// An Xunit style test is preferred, but a console application would work too.\r\n``` \r\n\r\n**Observed**\r\n\r\nPlease add your observed behavior here\r\n\r\n**Expected**\r\n\r\nPlease add your expected behavior here.\r\n"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2019-10-31T05:30:48.191443Z","RunDurationInMilliseconds":1074}