{"Data":{"Issues":{"Issues":[{"Id":"316120236","IsPullRequest":false,"CreatedAt":"2018-04-20T04:02:26","Actor":"panesofglass","Number":"625","RawContent":null,"Title":"Blazor 0.2.0 applications fail to load in Safari on macOS","State":"open","Body":"### Environment:\r\n- macOS High Sierra 10.13.4 (17E199)\r\n- dotnet 2.1.300-preview2-008533\r\n- Blazor 0.2.0\r\n\r\n### Repro steps:\r\n1. Create a blazer stand-alone (or hosted) app from the latest templates\r\n2. Build with `dotnet build $project`\r\n3. Run with `dotnet run --project $project`\r\n\r\n### Expected:\r\nBlazor app runs in Safari as it did for the 0.1.0 runtime and templates\r\n\r\n### Actual\r\n- Safari attempts to load and fails with `This webpage was reloaded because a problem occurred.`\r\n- Safari attempts to reload.\r\n- Safari stops trying to reload after repeated failures.\r\n<img width=\"266\" alt=\"image\" src=\"https://user-images.githubusercontent.com/8803/39030186-b67c2e96-4425-11e8-89dd-64cf3b4158c0.png\">\r\n\r\n### Additional details:\r\n- I attempted to open the JavaScript Console to see what was happening, but the console is closed due to the errors.\r\n- I don't see any errors in the logs, just repeated requests for the same files with the expected HTTP `304` responses.","Url":"https://github.com/aspnet/Blazor/issues/625","RelatedDescription":"Open issue \"Blazor 0.2.0 applications fail to load in Safari on macOS\" (#625)"},{"Id":"316107435","IsPullRequest":false,"CreatedAt":"2018-04-20T02:44:36","Actor":"mellamokb","Number":"624","RawContent":null,"Title":"Computed disabled attribute does not rerender.","State":"open","Body":"I have tested a simple form concept.  There is a checkbox called \"Active\", which when you check the following fields become enabled.\r\n\r\n```\r\n    <div class=\"form-group row\">\r\n        <label class=\"form-check-label col-sm-4\" for=\"Active\">Is Active</label>\r\n        <div class=\"col-sm-8\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" name=\"Active\" id=\"Active\" bind=\"Active\" />\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n        <label class=\"col-form-label col-sm-4\" for=\"Minimum\">% Minimum</label>\r\n        <div class=\"col-sm-8\">\r\n            <input class=\"form-control\" style=\"width:160px;\" type=\"text\" name=\"Minimum\" id=\"Minimum\" bind=\"MinimumStr\" disabled=\"@(!Active)\" />\r\n        </div>\r\n    </div>\r\n```\r\n\r\nHowever, the rendering of being disabled only works on initial load, based on the default checked status of Active checkbox.  When you check or uncheck the Active box, it doesn't update the disabled status of the Minimum textbox, even if you hook into the Active setter and manually call StateHasChanged().","Url":"https://github.com/aspnet/Blazor/issues/624","RelatedDescription":"Open issue \"Computed disabled attribute does not rerender.\" (#624)"},{"Id":"315992875","IsPullRequest":true,"CreatedAt":"2018-04-19T23:06:33","Actor":"danroth27","Number":"621","RawContent":null,"Title":"Change blazorlib output type to Library","State":"closed","Body":"See https://github.com/aspnet/Blazor/issues/614#issuecomment-382567937","Url":"https://github.com/aspnet/Blazor/pull/621","RelatedDescription":"Closed or merged PR \"Change blazorlib output type to Library\" (#621)"},{"Id":"316055243","IsPullRequest":false,"CreatedAt":"2018-04-19T21:56:57","Actor":"floreseken","Number":"623","RawContent":null,"Title":"Nice way to wrap binding for unsupported type","State":"open","Body":"I get it, this is work in progress. So this will be solved in future I guess:\r\n\r\n```\r\n<input bind=\"@Amount\" /><br/>\r\n\r\n@functions\r\n{\r\n    public decimal Amount { get; set; }\r\n}\r\n``` \r\n\r\nNow throws:\r\n\r\n`Error: System.ArgumentException: 'bind' does not accept values of type System.Decimal. To read and write this value type, wrap it in a property of type string with suitable getters and setters`\r\n\r\nSo I can make this work by adding this property (needs more failure checks, I know);\r\n\r\n```\r\n    public decimal Amount { get; set; }\r\n\r\n    [NotMapped]\r\n    public string AmountStr\r\n    {\r\n        get\r\n        {\r\n            return this.dec.ToString();\r\n        }\r\n        set\r\n        {\r\n            this.dec = Convert.ToDecimal(value);\r\n        }\r\n    }\r\n```\r\n\r\nAnd binding to AmountStr.\r\n\r\nBut if you are using (EF poco) objects this really pollutes my model classes.\r\nDoes anybody can suggest a nicer workaround for this?\r\n","Url":"https://github.com/aspnet/Blazor/issues/623","RelatedDescription":"Open issue \"Nice way to wrap binding for unsupported type\" (#623)"},{"Id":"316036728","IsPullRequest":true,"CreatedAt":"2018-04-19T21:29:02","Actor":"SteveSandersonMS","Number":"622","RawContent":null,"Title":"Fake PR to run tests before release/0.2.1","State":"closed","Body":"This is not really a PR. I just want to run the tests on AppVeyor/Travis. Then I'll delete this.","Url":"https://github.com/aspnet/Blazor/pull/622","RelatedDescription":"Closed or merged PR \"Fake PR to run tests before release/0.2.1\" (#622)"},{"Id":"315670146","IsPullRequest":false,"CreatedAt":"2018-04-19T20:15:06","Actor":"humbersoft","Number":"613","RawContent":null,"Title":"Output Blazor version info in blazor.js or similar file","State":"closed","Body":"I don't think this is super important, but it would be nice to know what version of a Blazor my website is running by inspecting via view source code","Url":"https://github.com/aspnet/Blazor/issues/613","RelatedDescription":"Closed issue \"Output Blazor version info in blazor.js or similar file\" (#613)"},{"Id":"315959601","IsPullRequest":true,"CreatedAt":"2018-04-19T20:14:11","Actor":"rynowak","Number":"618","RawContent":null,"Title":"Fix #597 Allow multiple tokens in attributes","State":"closed","Body":"The issue here is that we were missing tests for the design time code\r\npath. We have tests that the bind-... cases work at runtime but were\r\nmissing coverage for the editor.\r\n\r\nI took the most relevant set of the tests for running bind-... code and\r\nadded them to the tests for codegen.","Url":"https://github.com/aspnet/Blazor/pull/618","RelatedDescription":"Closed or merged PR \"Fix #597 Allow multiple tokens in attributes\" (#618)"},{"Id":"315986933","IsPullRequest":false,"CreatedAt":"2018-04-19T20:13:00","Actor":"montyclt","Number":"620","RawContent":null,"Title":"[PROPOSAL] Use Razor directives as class attributes when using code-behind pattern.","State":"closed","Body":"Hello, I propose the use of razor directives as class annotations when using then code-behind pattern.\r\n\r\nAn example, turn the `@page \"/todo\"` directive into class attribute:\r\n\r\n```\r\n[Page(\"/todo\")]\r\nclass TodoPage\r\n{\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/620","RelatedDescription":"Closed issue \"[PROPOSAL] Use Razor directives as class attributes when using code-behind pattern.\" (#620)"},{"Id":"315962095","IsPullRequest":true,"CreatedAt":"2018-04-19T20:06:29","Actor":"SteveSandersonMS","Number":"619","RawContent":null,"Title":"Bootstrap 4 and new styling","State":"closed","Body":"This builds on @fabridamazio's work in #363\r\n\r\nI've reimplemented the layout and styling rules to make it look shinier and adapt to different size screens better. This PR also implements a working \"hamburger\" button for toggling the nav UI on mobile screens.","Url":"https://github.com/aspnet/Blazor/pull/619","RelatedDescription":"Closed or merged PR \"Bootstrap 4 and new styling\" (#619)"},{"Id":"315681931","IsPullRequest":false,"CreatedAt":"2018-04-19T19:35:46","Actor":"dotnetnoobie","Number":"614","RawContent":null,"Title":"BlazorLib - PackageReference 0.2.0-preview1-10195","State":"closed","Body":"Using **Blazor Language Services 15.7.10222** (0.2.0 preview version)\r\n\r\nWhen I make a Blazor **Reusable Component** I get old package references in the .csproj file\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <OutputType>library</OutputType>\r\n    <IsPackable>true</IsPackable>\r\n    <BlazorLinkOnBuild>false</BlazorLinkOnBuild>\r\n\r\n    <!-- This custom package feed is required only when using nightly builds of Blazor -->\r\n    <RestoreSources>https://dotnet.myget.org/F/blazor-dev/api/v3/index.json;$(RestoreSources)</RestoreSources>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- .js/.css files will be referenced via <script>/<link> tags; other content files will just be included in the app's 'dist' directory without any tags referencing them -->\r\n    <EmbeddedResource Include=\"content\\**\\*.js\" LogicalName=\"blazor:js:%(RecursiveDir)%(Filename)%(Extension)\" />\r\n    <EmbeddedResource Include=\"content\\**\\*.css\" LogicalName=\"blazor:css:%(RecursiveDir)%(Filename)%(Extension)\" />\r\n    <EmbeddedResource Include=\"content\\**\" Exclude=\"**\\*.js;**\\*.css\" LogicalName=\"blazor:file:%(RecursiveDir)%(Filename)%(Extension)\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"2.1.0-preview2-final\" PrivateAssets=\"all\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Browser\" Version=\"0.2.0-preview1-10195\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Build\" Version=\"0.2.0-preview1-10195\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThe other thing I noticed is that the **OutputType** is set to **Library**\r\nbut if I look at the properties dialog in VS 2017 preview 3.0\r\nIt tells me I have an output type of **Windows Application** \r\n\r\n![untitled](https://user-images.githubusercontent.com/5423598/38963900-804ec482-43b7-11e8-8418-be74d5d6b6f8.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/614","RelatedDescription":"Closed issue \"BlazorLib - PackageReference 0.2.0-preview1-10195\" (#614)"},{"Id":"315959299","IsPullRequest":false,"CreatedAt":"2018-04-19T16:56:16","Actor":"michaelongithub","Number":"617","RawContent":null,"Title":"Blazor development depending on WebAssembly progress ?","State":"closed","Body":"Hi\r\nif one looks at http://webassembly.org/docs/future-features/ or https://wasm.news it is for the layman difficult to see, if there is real progress after mvp.\r\nSince I am not an expert in these matters at all I wonder:\r\nDoes the Blazor group know what the state of these developments is, maybe even contributing to it?\r\nIs future Blazor development or its finalisation as a real product dependent on wasm being developed further?\r\nHow do you assess the risk, if wasm stagnates or even looses general interest as a consequence of no visible further developement.\r\n\r\nVery interested to hear Your take on that. Even if I misjudge the situation completely.\r\nThanks for info\r\nCheers,Michael\r\n","Url":"https://github.com/aspnet/Blazor/issues/617","RelatedDescription":"Closed issue \"Blazor development depending on WebAssembly progress ?\" (#617)"},{"Id":"315912698","IsPullRequest":false,"CreatedAt":"2018-04-19T15:03:39","Actor":"floreseken","Number":"616","RawContent":null,"Title":"Components without ChildContent dont throw exception when used with contents if shown conditionally","State":"closed","Body":"Consider this component:\r\n\r\n```\r\n<div>\r\n    @Test\r\n</div>\r\n\r\n@functions\r\n{\r\n    public string Test { get; set; } = \"Testing\";\r\n\r\n}\r\n```\r\n\r\nWorks fine if you use it like this somewhere in a page:\r\n\r\n```\r\n<MyComponent></MyComponent>\r\n```\r\n\r\nBut if you (accidently) add content to it, like this:\r\n\r\n```\r\n<MyComponent>Do not do this</MyComponent>\r\n```\r\n\r\nIt will throw a nice exception, something like: 'Object of type 'Components.MyComponent' does not have a property matching the name 'ChildContent'. \r\n\r\nFine\r\n\r\nNow, when I want to show this component conditionally, like so:\r\n\r\n```\r\n@if (show)\r\n{\r\n    <MyComponent>Do not do this</MyComponent>\r\n}\r\n```\r\n\r\nAnd make a button to set 'show = true' then nothing happens. No component is shown which is maybe to be expected, but there is also no exception, which I do expect. \r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/616","RelatedDescription":"Closed issue \"Components without ChildContent dont throw exception when used with contents if shown conditionally\" (#616)"},{"Id":"315849162","IsPullRequest":false,"CreatedAt":"2018-04-19T12:24:09","Actor":"MihaMarkic","Number":"615","RawContent":null,"Title":"TypeError: assembly_load is not a function","State":"closed","Body":"Blazor 0.2.0\r\n\r\nI have the following javascript code where I'm looking for a static method in Program class.\r\n\r\n```\r\nconst assemblyName = \"BlazorWithSharpRedux\";\r\nconst namespace = \"BlazorWithSharpRedux\";\r\nconst typeName = \"Program\";\r\nconst methodName = \"ApplyReduxAction\";\r\n\r\nconst applyReduxAction = Blazor.platform.findMethod(\r\n    assemblyName,\r\n    namespace,\r\n    typeName,\r\n    methodName\r\n);\r\n```\r\n\r\nWhen I run Blazor 0.2.0 I get this error:\r\n\r\n> TypeError: assembly_load is not a function     MonoPlatform.ts:134:21\r\n> findAssembly      MonoPlatform.ts:134:21\r\n> findType       MonoPlatform.ts:147:28\r\n> findMethod        MonoPlatform.ts:160:31\r\n> <anonymous>\r\n\r\nThe script runs after these two:\r\n\r\n```\r\n<script src=\"css/bootstrap/bootstrap-native.min.js\"></script>\r\n<script type=\"blazor-boot\"></script>\r\n```\r\n\r\nAm I doing something wrong?","Url":"https://github.com/aspnet/Blazor/issues/615","RelatedDescription":"Closed issue \"TypeError: assembly_load is not a function\" (#615)"},{"Id":"315664400","IsPullRequest":false,"CreatedAt":"2018-04-18T22:30:44","Actor":"masonwheeler","Number":"612","RawContent":null,"Title":"Visual Studio Publish command creates corrupt web.config when publishing to an Azure VM","State":"open","Body":"Repro steps:\r\n\r\n1.  Set up an Azure VM running Windows (not an Azure web app instance--this might work as well, but this is the way I know will work)\r\n2. Configure IIS on the VM, including installing the rewrite module, and follow all other steps necessary to prepare it to receive web updates via Visual Studio's Publish command.  Also install the .Net Core Preview version Blazor needs.\r\n3. Create a Blazor project in Visual Studio.\r\n4. Use Visual Studio's Publish command to publish the Blazor project to your Azure VM\r\n5. Use your browser to attempt to access the Blazor project from your dev PC.\r\n\r\nExpected:  The project loads in your browser\r\nObserved: IIS 500 error page\r\n\r\nPublish is screwing up here, by publishing a web.config (or is it config.web?  I'm not at the relevant computer at the moment) file that tries to treat the Blazor project as an ASP.Net server project, rather than as static content that's intended to run in the browser.  (After deleting the relevant lines from the config file, I was able to get it working.)","Url":"https://github.com/aspnet/Blazor/issues/612","RelatedDescription":"Open issue \"Visual Studio Publish command creates corrupt web.config when publishing to an Azure VM\" (#612)"},{"Id":"315650209","IsPullRequest":false,"CreatedAt":"2018-04-18T21:33:14","Actor":"CraigSelbert","Number":"611","RawContent":null,"Title":"Can't change folder structure of Blazor (ASP.NET Cloud hosted) template","State":"open","Body":"I was playing around with the project structure and was seeing how far I could go before I broke it and that took no time at all.\r\n\r\nSo the default template produces a folder structure like \r\n```\r\nWebApplication1\r\n├── WebApplication.sln\r\n├── WebApplication1\r\n|   ├── WebApplication1.Client\r\n|   ├── WebApplication1.Server\r\n|   └── WebApplication1.Shared\r\n```\r\nI am trying to make the folder structure look like this\r\n```\r\nWebApplication1\r\n├── WebApplication.sln\r\n├── Client\r\n├── Server\r\n└── Shared\r\n```\r\nWhat I have ended up with is...\r\n```\r\nWebApplication1\r\n├── WebApplication.sln\r\n├── WebApplication.Client\r\n├── Server\r\n└── Shared\r\n```\r\nFor some weird reason when I try to change `WebApplication.Client` to just `Client` the client stops compiling. \r\n\r\nI can commit my code to GitHub with the before and after if you would like. I am guessing this is breaking some convention that I am not aware of and would love to know what that is. \r\n","Url":"https://github.com/aspnet/Blazor/issues/611","RelatedDescription":"Open issue \"Can't change folder structure of Blazor (ASP.NET Cloud hosted) template\" (#611)"},{"Id":"315646344","IsPullRequest":false,"CreatedAt":"2018-04-18T21:19:26","Actor":"floreseken","Number":"610","RawContent":null,"Title":"How to get two-way databinding to work with custom component","State":"open","Body":"I must be doing something wrong.\r\n\r\nMade this component:\r\n\r\n```\r\n<div>\r\n    <input bind=\"@myValue\" />\r\n</div>\r\n\r\n@functions\r\n{\r\n    public string myValue { get; set; }\r\n    public Action<string> myValueChanged { get; set; }\r\n}\r\n```\r\nAnd use this in a page like this:\r\n\r\n```\r\n<input bind=\"@Test\" /><br />\r\n\r\n<myInput bind-myValue=\"@Test\"></myInput><br />\r\n\r\ntest: @Test\r\n\r\n@functions {\r\n\r\n    public string Test { get; set; }\r\n}\r\n````\r\n\r\nNow I expect that typing in either input on this page would result in the same values in both inputs. But this seems to work only one-way: from the input to the control and not the other way around.\r\n\r\nThis is supposed to work right? What am I doing wrong?\r\n \r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/610","RelatedDescription":"Open issue \"How to get two-way databinding to work with custom component\" (#610)"},{"Id":"315621704","IsPullRequest":false,"CreatedAt":"2018-04-18T20:00:34","Actor":"maraf","Number":"609","RawContent":null,"Title":"Two-way binding of multiple component properties.","State":"open","Body":"Hi there,\r\nI have a user component with multiple properties which I want to bind to.\r\n\r\n```html\r\n<User bind-Name=\"@UserName\" bind-IsActive=\"@UserIsActive\" />\r\n```\r\n\r\n1) In `User`, if I define *Changed delegate properties for both `Name` and `IsActive`:\r\n```\r\n<input type=\"text\" bind=\"@Name\" />\r\n<input type=\"checkbox\" bind=\"@IsActive\" />\r\n\r\n@functions\r\n{\r\n    public string Name { get; set; }\r\n    public Action<string> NameChanged { get; set; }\r\n    public bool IsActive { get; set; }\r\n    public Action<bool> IsActiveChanged { get; set; }\r\n}\r\n```\r\n\r\nBuild fails with:\r\n```\r\nD:\\Development\\.NuGet\\microsoft.aspnetcore.blazor.build\\0.2.0\\targets\\RazorCompilation.targets(281,5): error : rzc generate exited with code 1. [D:\\Development\\Maraf\\Money\\src\\Money.UI.Blazor\\Money.UI.Blazor.csproj]\r\n```\r\n\r\n2) When I originally defined only a single Changed property, generated code looked like:\r\n```C#\r\nbuilder.OpenComponent<Money.UI.Blazor.Components.User>(14);\r\nbuilder.AddAttribute(15, \"Name\", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(UserName));\r\nbuilder.AddAttribute(16, \"NameChanged\", new System.Action<System.String>(__value => UserName = __value));\r\nbuilder.AddAttribute(17, \"Name\", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(UserIsActive));\r\nbuilder.AddAttribute(18, \"NameChanged\", new System.Action<System.String>(__value => UserIsActive = __value));\r\nbuilder.CloseComponent();\r\n```\r\n\r\nWhich tried to bind both expressions to property `Name` and failed build with:\r\n```\r\nobj\\Debug\\netstandard2.0\\Pages\\Summary.g.cs(61,112): error CS0029: Cannot implicitly convert type 'string' to 'bool' [D:\\Development\\Maraf\\Money\\src\\Money.UI.Blazor\\Money.UI.Blazor.csproj]\r\n```","Url":"https://github.com/aspnet/Blazor/issues/609","RelatedDescription":"Open issue \"Two-way binding of multiple component properties.\" (#609)"},{"Id":"315585681","IsPullRequest":true,"CreatedAt":"2018-04-18T19:04:36","Actor":"rynowak","Number":"608","RawContent":null,"Title":"Fix line endings on OSX","State":"closed","Body":"This change makes our baseline system use CRLF for line endings end to\r\nend. This isn't needed for correctness, but it helps with quality of\r\nlife when developing on OSX.\r\n\r\nThis will avoid churn to the baseline files related to line endings when\r\nupdating.\r\n\r\nThis might only take effect if you nuke the TestFiles directory and\r\ncheck it out again.","Url":"https://github.com/aspnet/Blazor/pull/608","RelatedDescription":"Closed or merged PR \"Fix line endings on OSX\" (#608)"},{"Id":"315548153","IsPullRequest":false,"CreatedAt":"2018-04-18T17:18:15","Actor":"RichieCr7","Number":"607","RawContent":null,"Title":"Blazor Browser view page source","State":"closed","Body":"Will want to find out if view page source in browser will expose all client side code or below is the expected behavior.\r\n\r\n```\r\n  | <!DOCTYPE html>\r\n-- | --\r\n  | <html>\r\n  | <head>\r\n  | <meta charset=\"utf-8\" />\r\n  | <title>BlazorTest</title>\r\n  | <base href=\"/\" />\r\n  | <link href=\"css/bootstrap/bootstrap.min.css\" rel=\"stylesheet\" />\r\n  | <link href=\"css/site.css\" rel=\"stylesheet\" />\r\n  | </head>\r\n  | <body>\r\n  | <app>Loading...</app>\r\n  | <script src=\"css/bootstrap/bootstrap-native.min.js\"></script>\r\n  | <script src=\"_framework/blazor.js\" main=\"BlazorTest.Client.dll\" entrypoint=\"BlazorTest.Client.Program::Main\" references=\"BlazorTest.Shared.dll,Microsoft.AspNetCore.Blazor.Browser.dll,Microsoft.AspNetCore.Blazor.dll,Microsoft.Extensions.DependencyInjection.Abstractions.dll,Microsoft.Extensions.DependencyInjection.dll,mscorlib.dll,netstandard.dll,System.Core.dll,System.Diagnostics.StackTrace.dll,System.dll,System.Globalization.Extensions.dll,System.Net.Http.dll,System.Runtime.Serialization.Primitives.dll,System.Security.Cryptography.Algorithms.dll\" linker-enabled=\"true\">\r\n</script>\r\n</body>\r\n  | </html>\r\n```\r\n  |  \r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/607","RelatedDescription":"Closed issue \"Blazor Browser view page source\" (#607)"},{"Id":"315543276","IsPullRequest":true,"CreatedAt":"2018-04-18T16:06:25","Actor":"RichieCr7","Number":"606","RawContent":null,"Title":".","State":"closed","Body":".","Url":"https://github.com/aspnet/Blazor/pull/606","RelatedDescription":"Closed or merged PR \".\" (#606)"},{"Id":"315451862","IsPullRequest":false,"CreatedAt":"2018-04-18T15:36:22","Actor":"stephane3434","Number":"601","RawContent":null,"Title":"www.blazor.fr","State":"closed","Body":"Hello,\r\n\r\nThe website http://blazor.net is very good,\r\n\r\nWe just want to inform you that we started the website www.blazor.fr for developers in French language.\r\n\r\nThe first step was to reference important links to use Blazor, and only use Blazor to develop the website by hosting it under IIS / Windows. The next version will be responsive.\r\n\r\nThe next step is to put a lot of code samples and keeping the links to the original sites. \r\n\r\nWe would like to make a toolbox with \"code ready\" to use to save time.\r\n\r\nThen, from this experience of website we want to design a CMS with Blazor in OpenSource.\r\n\r\nWe hope you like it.\r\n\r\nGive us the links you want to publish.\r\n\r\nStephane\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/601","RelatedDescription":"Closed issue \"www.blazor.fr\" (#601)"},{"Id":"315475924","IsPullRequest":false,"CreatedAt":"2018-04-18T15:33:13","Actor":"dlr1","Number":"603","RawContent":null,"Title":"typing bind- in .cshtml crashes Visual studio","State":"closed","Body":"If I type bind- it is fine. typing any characters after - crashes Visual studio","Url":"https://github.com/aspnet/Blazor/issues/603","RelatedDescription":"Closed issue \"typing bind- in .cshtml crashes Visual studio\" (#603)"},{"Id":"315499955","IsPullRequest":false,"CreatedAt":"2018-04-18T15:31:06","Actor":"masonwheeler","Number":"605","RawContent":null,"Title":"New script tag rule breaks interop","State":"closed","Body":"Previously, I had a script tag in my `App.cshtml` that would set up interop for my project.  Since that is no longer allowed, I pulled the script out into a `.js` file and added it to `index.html` in a `<script>` tag.\r\n\r\nUnfortunately, this doesn't work, even if I put it after the `blazor-boot` tag.  When my code tries to call `Blazor.platform.findMethod`, it errors out:\r\n\r\n> TypeError: assembly_load is not a function\r\n> findAssembly   MonoPlatform.ts:134:21\r\n> findType MonoPlatform.ts:147:28\r\n> findMethod MonoPlatform.ts:160:31\r\n> <anonymous> http://localhost:53615/interop.js:10:24\r\n\r\nIf I wait for everything to load fully, I'm able to make `findMethod` work in the browser's JS console, so apparently there's some asynchronous hijinks going on here, order-of-operations problems that make it difficult to set this up properly from index.html.  (Is there a Blazor callback to hook into for when everything is loaded?)\r\n\r\nIf I put the `<script>` tag in `app.cshtml`, it will only ever be run once, and nothing will try to unload it, and it is guaranteed to run after Blazor is fully set up and working properly, avoiding the order-of-operations issue.  But right now, that's broken.\r\n\r\nPlease roll back this change, or at least turn it from a compile error into a warning.","Url":"https://github.com/aspnet/Blazor/issues/605","RelatedDescription":"Closed issue \"New script tag rule breaks interop\" (#605)"},{"Id":"315494944","IsPullRequest":false,"CreatedAt":"2018-04-18T14:05:29","Actor":"floreseken","Number":"604","RawContent":null,"Title":"If an error is not in an open file, the error list does not show the offending file ","State":"open","Body":"this:\r\n\r\n![image](https://user-images.githubusercontent.com/6927344/38936915-282ec922-4322-11e8-9be8-b72e4c38ce48.png)\r\n\r\nIf I open the file in the editor:\r\n\r\n![image](https://user-images.githubusercontent.com/6927344/38936951-47a3a192-4322-11e8-98fa-50ebceb4d8c9.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/604","RelatedDescription":"Open issue \"If an error is not in an open file, the error list does not show the offending file \" (#604)"},{"Id":"315455888","IsPullRequest":true,"CreatedAt":"2018-04-18T12:54:26","Actor":"SteveSandersonMS","Number":"602","RawContent":null,"Title":"Eliminate wrapper elements","State":"closed","Body":"Fixes #384. In fact it goes further and eliminates the wrapper elements in *all* scenarios, not just when components produce exactly one top-level node.\r\n\r\nThis PR changes how `BrowserRenderer` works so that it no longer inserts the extra `blazor-component` elements around child components. This simplifies the DOM structure, but more importantly, simplifies working with CSS because you no longer have to account for the wrappers in your selectors. The DOM structure is now completely under the control of the developer. For details on how this works (and how it preserves O(1) traversal), see the comments inside `LogicalElement.ts`.\r\n\r\nAll future DOM mutation logic in `BrowserRenderer` must use the `LogicalElement` APIs (unstead of directly calling native DOM insertion/removal APIs) to retain compatibility.","Url":"https://github.com/aspnet/Blazor/pull/602","RelatedDescription":"Closed or merged PR \"Eliminate wrapper elements\" (#602)"},{"Id":"315433815","IsPullRequest":false,"CreatedAt":"2018-04-18T12:35:21","Actor":"jirisykora83","Number":"599","RawContent":null,"Title":"Add GetBoundingClientRect","State":"closed","Body":"I am want to make simple slider in Blazor and currently i need support for onmousemove/ontouchmove event etc (i know it is already proposed).\r\n\r\nBut also i need to somehow get size to DOM element. In react is possible to mark DOM like:\r\n\r\n`<div ref=\"slider\"></div>`\r\n\r\nand then\r\n\r\n```\r\n_someMethod() {\r\n   const x =  this.refs.slider.getBoundingClientRect().left;\r\n}\r\n```\r\n\r\nIt is any \"simple\" way how i can achieve similarly behavior in Blazor?","Url":"https://github.com/aspnet/Blazor/issues/599","RelatedDescription":"Closed issue \"Add GetBoundingClientRect\" (#599)"},{"Id":"315447607","IsPullRequest":false,"CreatedAt":"2018-04-18T11:53:31","Actor":"floreseken","Number":"600","RawContent":null,"Title":"If I open www.blazor.net I get a weird site..","State":"open","Body":"Notice the www prefix.. brings you to a totally different site.. are you guys aware of this?","Url":"https://github.com/aspnet/Blazor/issues/600","RelatedDescription":"Open issue \"If I open www.blazor.net I get a weird site..\" (#600)"},{"Id":"315392278","IsPullRequest":false,"CreatedAt":"2018-04-18T09:04:57","Actor":"rvhelden","Number":"598","RawContent":null,"Title":"Adding a WCF connected service crashes compiler","State":"open","Body":"When adding a service reference to a WCF service and then compiling the blazor webapp crashes the compiler. Got the following stacktrace.\r\n\r\n> 1>Fatal error in IL Linker\r\n> 1>Mono.Cecil.AssemblyResolutionException: Failed to resolve assembly: 'System.Private.ServiceModel, Version=4.1.2.2, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n> 1>   at Mono.Linker.DirectoryAssemblyResolver.Resolve(AssemblyNameReference name, ReaderParameters parameters)\r\n> 1>   at Mono.Linker.AssemblyResolver.Resolve(AssemblyNameReference name, ReaderParameters parameters)\r\n> 1>   at Mono.Linker.DirectoryAssemblyResolver.Resolve(AssemblyNameReference name)\r\n> 1>   at Mono.Cecil.MetadataResolver.Resolve(TypeReference type)\r\n> 1>   at Mono.Linker.Steps.ResolveFromAssemblyStep.ProcessLibrary(LinkContext context, AssemblyDefinition assembly, RootVisibility rootVisibility)\r\n> 1>   at Mono.Linker.Steps.ResolveFromAssemblyStep.ProcessLibrary(AssemblyDefinition assembly)\r\n> 1>   at Mono.Linker.Steps.ResolveFromAssemblyStep.Process()\r\n> 1>   at Mono.Linker.Steps.BaseStep.Process(LinkContext context)\r\n> 1>   at Mono.Linker.Pipeline.Process(LinkContext context)\r\n> 1>   at Mono.Linker.Driver.Run(ILogger customLogger)\r\n> 1>   at Mono.Linker.Driver.Execute(String[] args, ILogger customLogger)\r\n> 1>C:\\Users\\\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.2.0\\targets\\Blazor.MonoRuntime.targets(435,5): error MSB3073: The command \"dotnet \"C:\\Users\\\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.2.0\\targets\\../tools/illink/illink.dll\" -c link -u link -t --verbose  -d \"C:\\Users\\\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.2.0\\targets\\../tools/mono/bcl/\" -d \"C:\\Users\\\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.2.0\\targets\\../tools/mono/bcl/Facades/\" -o \"D:\\Projects\\Webclient\\obj\\Debug\\netstandard2.0\\blazor/linker/\" -x \"C:\\Users\\\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.2.0\\targets\\BuiltInBclLinkerDescriptor.xml\" -x \"D:\\Projects\\Webclient\\obj\\Debug\\netstandard2.0\\blazor\\linker.descriptor.xml\" -a \"C:\\Users\\\\.nuget\\packages\\microsoft.aspnetcore.blazor\\0.2.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.dll\" -a \"C:\\Users\\\\.nuget\\packages\\microsoft.aspnetcore.blazor.browser\\0.2.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.Browser.dll\" -a \"C:\\Users\\\\.nuget\\packages\\microsoft.extensions.dependencyinjection\\2.0.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.dll\" -a \"C:\\Users\\\\.nuget\\packages\\microsoft.extensions.dependencyinjection.abstractions\\2.0.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" -a \"C:\\Users\\\\.nuget\\packages\\system.buffers\\4.4.0\\lib\\netstandard2.0\\System.Buffers.dll\" -a \"C:\\Users\\\\.nuget\\packages\\system.net.http.winhttphandler\\4.4.0\\lib\\netstandard2.0\\System.Net.Http.WinHttpHandler.dll\" -a \"C:\\Users\\\\.nuget\\packages\\system.reflection.dispatchproxy\\4.4.0\\lib\\netstandard2.0\\System.Reflection.DispatchProxy.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.4.0\\lib\\netstandard2.0\\System.Security.Principal.Windows.dll\" -a \"C:\\Users\\\\.nuget\\packages\\system.servicemodel.duplex\\4.4.2\\lib\\netstandard2.0\\System.ServiceModel.Duplex.dll\" -a \"C:\\Users\\\\.nuget\\packages\\system.servicemodel.http\\4.4.2\\lib\\netstandard2.0\\System.ServiceModel.Http.dll\" -a \"C:\\Users\\\\.nuget\\packages\\system.servicemodel.nettcp\\4.4.2\\lib\\netstandard2.0\\System.ServiceModel.NetTcp.dll\" -a \"C:\\Users\\\\.nuget\\packages\\system.servicemodel.primitives\\4.4.1\\lib\\netstandard2.0\\System.ServiceModel.Primitives.dll\" -a \"C:\\Users\\\\.nuget\\packages\\system.servicemodel.primitives\\4.4.1\\lib\\netstandard2.0\\System.ServiceModel.dll\" -a \"C:\\Users\\\\.nuget\\packages\\system.servicemodel.security\\4.4.2\\lib\\netstandard2.0\\System.ServiceModel.Security.dll\" -a \"D:\\Projects\\Webclient\\obj\\Debug\\netstandard2.0\\Webclient.dll\"\" exited with code 1.","Url":"https://github.com/aspnet/Blazor/issues/598","RelatedDescription":"Open issue \"Adding a WCF connected service crashes compiler\" (#598)"},{"Id":"315356522","IsPullRequest":false,"CreatedAt":"2018-04-18T07:09:22","Actor":"aguacongas","Number":"597","RawContent":null,"Title":"ASP.NET Core Blazor Language Services 15.7.10222 crash VS","State":"open","Body":"I had VS crashes after updating Blazor extension  \r\n\r\n> An unhandled exception of type 'System.InvalidOperationException' occurred in Microsoft.AspNetCore.Blazor.Razor.Extensions.dll\r\n> \r\n> Additional information: Attribute nodes should either be minimized or a single content node.  ","Url":"https://github.com/aspnet/Blazor/issues/597","RelatedDescription":"Open issue \"ASP.NET Core Blazor Language Services 15.7.10222 crash VS\" (#597)"},{"Id":"315294751","IsPullRequest":false,"CreatedAt":"2018-04-18T01:16:41","Actor":"Gorea235","Number":"596","RawContent":null,"Title":"Consider supporting the ability to mix Blazor components and MVC/static pages","State":"open","Body":"Currently, Blazor seems to be aiming to compete in a very similar way to Angular, where the entire app is purely written in Blazor and nothing else. While is this good (and would be very cool to use), it might also be good to allow 'mixing' of Blazor components/logic, with normal pages that are generated or static. Similar to how jQuery works, or how React allows you to render components to certain points in the page, rather than requiring the entire app to be built using React.\r\n\r\nThe primary benefit of allowing a 'drop-in' system would be to enable developers to add in Blazor post-development in order to all a dynamic component to the site, without having to rewrite the entire thing from the ground up, which makes it much more appealing to developers who are currently maintaining sites, and might also increase interest in the project.\r\n\r\nWould this be possible? Or is it being considered already? And, how would this kind of system work (as the current system seems to be very focused on the 'ground-up' approach)?","Url":"https://github.com/aspnet/Blazor/issues/596","RelatedDescription":"Open issue \"Consider supporting the ability to mix Blazor components and MVC/static pages\" (#596)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-04-20T05:30:02.4427878Z","RunDurationInMilliseconds":1045}