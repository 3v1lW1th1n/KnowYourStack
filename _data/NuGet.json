{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10769699069","Type":"IssuesEvent","CreatedAt":"2019-11-01T21:25:18","Actor":"rrelyea","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7669","RelatedDescription":"Opened issue \"\"The underlying connection was closed: An unexpected error occurred on a send\" when using nuget CLI\" (#7669) at NuGet/NuGetGallery","RelatedBody":"@Arun-ANIT commented on [Wed Oct 30 2019](https://github.com/NuGet/Home/issues/8773)\n\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): Nuget.exe CLI\r\n\r\nNuGet version (x.x.x.xxx): 2.2.0\r\n\r\nWorked before? If so, with which NuGet version: 2.2.0\r\n\r\nWe use nuget.exe with teamcity to download and add packages to our .NET builds. We are facing an issue with this since yesterday. We are getting the below error.\r\n\r\nC:\\TeamCity\\buildAgent\\tools\\NuGet.CommandLine.2.2.0.nupkg\\tools>nuget list -Sou\r\nrce https://nuget.org/api/v2 -verbosity detailed\r\nThe underlying connection was closed: An unexpected error occurred on a send.\r\n\r\nThe same works fine with nuget.exe 4.5.1 but unfortunately we cant update to that right away without testing and approvals.\r\n\r\nNo changes were made on our servers that will affect the connection.\r\n\r\nThis issue is halting all our deployments. Please let us know if you need anything else.\r\n\r\nAny help is appreciated.\r\n\r\nThanks,\r\nArun\n\n---\n\n@rrelyea commented on [Fri Nov 01 2019](https://github.com/NuGet/Home/issues/8773#issuecomment-548955498)\n\nhold on...\n\n"},{"Id":"10769381205","Type":"PullRequestEvent","CreatedAt":"2019-11-01T20:32:42","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7664","RelatedDescription":"Merged pull request \"[Gravatar] Proxy the en.gravatar.com subdomain\" (#7664) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/nuget/nugetgallery/issues/7646\r\n\r\nBuild: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3201746\r\nRelease: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=497282"},{"Id":"10764671761","Type":"IssuesEvent","CreatedAt":"2019-11-01T08:59:11","Actor":"bezysoftware","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7668","RelatedDescription":"Opened issue \"The uploaded symbols package contains one or more pdbs that are not portable. \" (#7668) at NuGet/NuGetGallery","RelatedBody":"I am not able to upload a generated snupkg to Nuget.org. During indexing it always reports this error \"The uploaded symbols package contains one or more pdbs that are not portable.\"\r\n\r\nTargetFramework: netstandard2.0\r\nVisual Studio: 16.3.4\r\nDebugType: portable\r\n\r\nThis is how I pack: `dotnet pack .\\Firebase.csproj --include-symbols -p:SymbolPackageFormat=snupkg -p:configuration=Release`\r\n\r\nHere's the full csproj (which specifies `DebugType` as `portable`: https://github.com/step-up-labs/firebase-database-dotnet/blob/master/src/Firebase/Firebase.csproj\r\nPackage on nuget: https://www.nuget.org/packages/FirebaseDatabase.net/"},{"Id":"10761951357","Type":"PullRequestEvent","CreatedAt":"2019-10-31T22:04:12","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7663","RelatedDescription":"Merged pull request \"Add GitHubVulnerabilities2Db Job\" (#7663) at NuGet/NuGetGallery","RelatedBody":"Part of https://github.com/nuget/nugetgallery/issues/7648\r\n\r\nThis PR adds the GitHubVulnerabilities2Db job itself, which primarily consists of querying GitHub's GraphQL API and then converting the response into our DB entities."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10770305829","Type":"IssuesEvent","CreatedAt":"2019-11-01T23:42:42","Actor":"hugener","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8789","RelatedDescription":"Opened issue \"NuGet.Configuration dependency (System.Security.Cryptography.ProtectedData) is not copied to output directory\" (#8789) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.Configuration\r\n\r\nNuGet version (x.x.x.xxx): 5.3.1\r\n\r\ndotnet.exe --version: 3.0.100\r\n\r\nVS version: 16.3.1\r\n\r\nOS version: Win 10 1903\r\n\r\nWorked before? If so, with which NuGet version: Not that I know\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new .netstandard2.0 lib\r\n\r\n2. Reference NuGet.Configuration\r\n\r\n3. Add the following MsBuild properties to the csproj:\r\n<GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n<IsTool>True</IsTool>\r\n<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n\r\nSystem.Security.Cryptography.ProtectedData is not included in output directory, even if it is listed as a dependency. \r\nAs a result I get a FileNotFoundException when trying to load ApiKeys from NuGet.config.\r\n"},{"Id":"10769744636","Type":"IssuesEvent","CreatedAt":"2019-11-01T21:33:35","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8772","RelatedDescription":"Closed issue \"Icon won't show in Visual Studio\" (#8772) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: NuGet.exe\r\n\r\nNuGet version: 5.3.1.6268\r\n\r\nVS version: 16.3.6\r\n\r\nOS version: win10 v1903 (18362.449)\r\n\r\nWorked before?: Don't know. First time making NuGet-package.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Run `nuget spec`\r\n\r\n2. Add `<icon>icon.png</icon>` to the metadata tag in the nuspec.\r\n\r\n3. Add icon.png to the working folder. (icon taken from [PackageIconNuspecExample](https://github.com/NuGet/Samples/tree/master/PackageIconNuspecExample))\r\n\r\n4. Run `nuget pack`\r\n\r\n5. Add generated package to local repository\r\n\r\n6. Open **Visual Studio** => **NuGet Package Manager**\r\n\r\n7. Change **Package Source** to local repository.\r\n\r\n8. Package has the default, fallback icon - Not the packed icon.\r\n\r\n### Sample Project\r\n[SampleNuget.zip](https://github.com/NuGet/Home/files/3789085/SampleNuget.zip)"},{"Id":"10769699141","Type":"IssuesEvent","CreatedAt":"2019-11-01T21:25:19","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8773","RelatedDescription":"Closed issue \"\"The underlying connection was closed: An unexpected error occurred on a send\" when using nuget CLI\" (#8773) at NuGet/Home","RelatedBody":"NuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): Nuget.exe CLI\r\n\r\nNuGet version (x.x.x.xxx): 2.2.0\r\n\r\nWorked before? If so, with which NuGet version: 2.2.0\r\n\r\nWe use nuget.exe with teamcity to download and add packages to our .NET builds. We are facing an issue with this since yesterday. We are getting the below error.\r\n\r\nC:\\TeamCity\\buildAgent\\tools\\NuGet.CommandLine.2.2.0.nupkg\\tools>nuget list -Sou\r\nrce https://nuget.org/api/v2 -verbosity detailed\r\nThe underlying connection was closed: An unexpected error occurred on a send.\r\n\r\nThe same works fine with nuget.exe 4.5.1 but unfortunately we cant update to that right away without testing and approvals.\r\n\r\nNo changes were made on our servers that will affect the connection.\r\n\r\nThis issue is halting all our deployments. Please let us know if you need anything else.\r\n\r\nAny help is appreciated.\r\n\r\nThanks,\r\nArun"},{"Id":"10769684016","Type":"IssuesEvent","CreatedAt":"2019-11-01T21:22:46","Actor":"reybard","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8788","RelatedDescription":"Opened issue \"GatewayTimeout on Large File Uploads to GitHub Package Registry\" (#8788) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: NuGet.exe & dotnet.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.1.0.6013\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): macOS 10.15.1\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a large package (~200MB) - I took a very basic sample csproj and added a 200M file with `dd`, then zipped it all together\r\n\r\n2. Nuget push the package to GPR\r\n\r\n3. After ~60 secs, the nuget client will begin restarting the request, the first is always a GatewayTimeout\r\n\r\n## Other suggested things\r\n\r\nPossibly related: https://github.com/NuGet/Home/issues/5798\r\n\r\n### Verbose Logs\r\n\r\nNuget.exe (Mono JIT compiler version 6.0.0.327):\r\n\r\n```\r\n$: nuget push -Verbosity detailed -Source \"GitHub local nuget registry\" -Timeout 3600 example-nuget-package-200.1.0.4.nupkg\r\nNuGet Version: 5.1.0.6013\r\nWARNING: No API Key was provided and no API Key could be found for 'http://nuget.pkg.github.localhost/monalisa'. To save an API Key for a source use the 'setApiKey' command.\r\nPushing example-nuget-package-200.1.0.4.nupkg to 'http://nuget.pkg.github.localhost/monalisa'...\r\n  PUT http://nuget.pkg.github.localhost/monalisa/\r\n  GatewayTimeout http://nuget.pkg.github.localhost/monalisa/ 61388ms\r\n  PUT http://nuget.pkg.github.localhost/monalisa/\r\nWARNING: Error: Version example-nuget-package of \"1.0.4\" has already been pushed.\r\n  Conflict http://nuget.pkg.github.localhost/monalisa/ 1761ms\r\nSee help for push option to automatically skip duplicates.\r\nResponse status code does not indicate success: 409 (Conflict).\r\nSystem.Net.Http.HttpRequestException: Response status code does not indicate success: 409 (Conflict).\r\n  at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode () [0x00040] in <bc09262900764a3e9e910b28993c4202>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.EnsureSuccessStatusCode (System.Net.Http.HttpResponseMessage response, System.Nullable`1[T] codeNotToThrow, NuGet.Common.ILogger logger) [0x00044] in <f495a477196947558735199950d701a7>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource+<>c__DisplayClass23_0.<PushPackageToServer>b__0 (System.Net.Http.HttpResponseMessage response) [0x00000] in <f495a477196947558735199950d701a7>:0\r\n  at NuGet.Protocol.HttpSource.ProcessResponseAsync[T] (NuGet.Protocol.HttpSourceRequest request, System.Func`2[T,TResult] processAsync, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger log, System.Threading.CancellationToken token) [0x000f5] in <f495a477196947558735199950d701a7>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.PushPackageToServer (System.String source, System.String apiKey, System.String pathToPackage, System.Int64 packageSize, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, System.TimeSpan requestTimeout, NuGet.Common.ILogger logger, System.Threading.CancellationToken token) [0x0045a] in <f495a477196947558735199950d701a7>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.PushPackageCore (System.String source, System.String apiKey, System.String packageToPush, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, System.TimeSpan requestTimeout, NuGet.Common.ILogger log, System.Threading.CancellationToken token) [0x00189] in <f495a477196947558735199950d701a7>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.PushPackage (System.String packagePath, System.String source, System.String apiKey, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, System.TimeSpan requestTimeout, NuGet.Common.ILogger log, System.Threading.CancellationToken token, System.Boolean isSnupkgPush) [0x0012a] in <f495a477196947558735199950d701a7>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.Push (System.String packagePath, System.String symbolSource, System.Int32 timeoutInSecond, System.Boolean disableBuffering, System.Func`2[T,TResult] getApiKey, System.Func`2[T,TResult] getSymbolApiKey, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, NuGet.Protocol.Core.Types.SymbolPackageUpdateResourceV3 symbolPackageUpdateResource, NuGet.Common.ILogger log) [0x0010d] in <f495a477196947558735199950d701a7>:0\r\n  at NuGet.Commands.PushRunner.Run (NuGet.Configuration.ISettings settings, NuGet.Configuration.IPackageSourceProvider sourceProvider, System.String packagePath, System.String source, System.String apiKey, System.String symbolSource, System.String symbolApiKey, System.Int32 timeoutSeconds, System.Boolean disableBuffering, System.Boolean noSymbols, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, NuGet.Common.ILogger logger) [0x002f9] in <f495a477196947558735199950d701a7>:0\r\n  at NuGet.CommandLine.PushCommand.ExecuteCommandAsync () [0x00173] in <f495a477196947558735199950d701a7>:0\r\n  at NuGet.CommandLine.Command.Execute () [0x000ea] in <f495a477196947558735199950d701a7>:0\r\n  at NuGet.CommandLine.Program.MainCore (System.String workingDirectory, System.String[] args) [0x001c0] in <f495a477196947558735199950d701a7>:0\r\n```\r\n\r\nDotnet:\r\n\r\n```\r\n$: dotnet -d nuget push -s \"GitHub local nuget registry\" example-nuget-package-200.1.0.4.nupkg\r\nTelemetry is: Enabled\r\nwarn : No API Key was provided and no API Key could be found for 'http://nuget.pkg.github.localhost/monalisa'. To save an API Key for a source use the 'setApiKey' command.\r\ninfo : Pushing example-nuget-package-200.1.0.4.nupkg to 'http://nuget.pkg.github.localhost/monalisa'...\r\ninfo :   PUT http://nuget.pkg.github.localhost/monalisa/\r\ninfo :   BadGateway http://nuget.pkg.github.localhost/monalisa/ 440ms\r\ninfo :   PUT http://nuget.pkg.github.localhost/monalisa/\r\ninfo :   GatewayTimeout http://nuget.pkg.github.localhost/monalisa/ 61072ms\r\ninfo :   PUT http://nuget.pkg.github.localhost/monalisa/\r\nwarn : Error: Version example-nuget-package of \"1.0.4\" has already been pushed.\r\ninfo :   Conflict http://nuget.pkg.github.localhost/monalisa/ 1364ms\r\nerror: Response status code does not indicate success: 409 (Conflict).\r\n```\r\n\r\nIn both cases, it does the initial PUT for around a minute, but at some point seems to abort the request and begin retrying. The 409 is because GPR isn't cleanly removing the aborted artifacts being created non-transactionally upstream during this process so when it retries it thinks it is trying to overwrite an existing package. However, the file that gets uploaded is malformed.\r\n\r\nWe have no real limits for file size on the GPR server, and the only time our service might throw a 502/504 would be if it cannot reach the GH API, which was not the case here.\r\n\r\nI also made an identical request from cURL, which works as expected (but takes a couple of minutes):\r\n\r\n```\r\n: time curl -vX PUT -u \"monalisa:$GH_LOCAL_PKG_TOKEN\" -F package=@example-nuget-package-200.1.0.4.nupkg http://nuget.pkg.github.localhost:3005/monalisa/\r\n*   Trying ::1...\r\n* TCP_NODELAY set\r\n* Connected to nuget.pkg.github.localhost (::1) port 3005 (#0)\r\n* Server auth using Basic with user 'monalisa'\r\n> PUT /monalisa/ HTTP/1.1\r\n> Host: nuget.pkg.github.localhost:3005\r\n> Authorization: Basic <TOKEN>\r\n> User-Agent: curl/7.64.1\r\n> Accept: */*\r\n> Content-Length: 210066757\r\n> Content-Type: multipart/form-data; boundary=------------------------a1140f51bee1653d\r\n> Expect: 100-continue\r\n>\r\n< HTTP/1.1 100 Continue\r\n* We are completely uploaded and fine\r\n< HTTP/1.1 200 OK\r\n< Content-Security-Policy: default-src 'none';\r\n< Server: GitHub Registry\r\n< Strict-Transport-Security: max-age=31536000;\r\n< X-Content-Type-Options: nosniff\r\n< X-Frame-Options: DENY\r\n< X-Xss-Protection: 1; mode=block\r\n< Date: Fri, 01 Nov 2019 20:58:13 GMT\r\n< Content-Length: 69\r\n< Content-Type: text/plain; charset=utf-8\r\n<\r\nSuccessfully registered nuget package: example-nuget-package (1.0.4)\r\n* Connection #0 to host nuget.pkg.github.localhost left intact\r\n* Closing connection 0\r\n\r\nreal\t2m39.476s\r\nuser\t0m0.019s\r\nsys\t0m0.305s\r\n```\r\n\r\n### Sample Project\r\n\r\nCan't go higher than 10MB on here ðŸ˜ž \r\n\r\n-----------------------------------------\r\n\r\n@rrelyea @anangaur This is that issue from our chat yesterday. I have tried changing server config in an attempt to at least get some different behavior but no luck so far. I know you had mentioned that [250MB was the advertised limit for Nuget.org](https://github.com/NuGet/Home/issues/6208#issuecomment-346171972) so I specifically went back and did the tests with a 200MB file and got the same result. I do not have an easily available way to test this on Windows but we have had reports of package uploads failing for mono/linux then succeeding from a Windows env.\r\n\r\nCurious if anyone could shed some light on what could be happening here.\r\n\r\n\r\n\r\n"},{"Id":"10768533722","Type":"IssuesEvent","CreatedAt":"2019-11-01T18:21:09","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8780","RelatedDescription":"Closed issue \"How to include additional files in lib\" (#8780) at NuGet/Home","RelatedBody":"I have a .Net Core project that contains additional project referenced dlls and these are not added to the nuget package.  \r\n``` xml\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\CodeGen.Generator\\CodeGen.Generator.csproj\" />\r\n    <ProjectReference Include=\"..\\CodeGen.Interfaces\\CodeGen.Interfaces.csproj\" />\r\n    <ProjectReference Include=\"..\\CodeGen.Loaders\\CodeGen.Loaders.csproj\" />\r\n  </ItemGroup>\r\n```\r\nThe question then is how can I add these dependent dlls into the the package? \r\n\r\n1. I tried the `ProjectGroup.IncludeBuiltProjectOutputGroup` but mustn't be using the correct value if that is the solution. \r\n1. I tried adding a nuspec file but that did not help, i assume since VS creates it's own.\r\n1. I notice the ItemGroup has a Content for adding \"other\" files into the content folder of the package, is there an equivalent Lib?  I couldn't see it, if it does.\r\n\r\nWhen I loaded the nuget package in the Nuget Package Explorer and output the metadata as a nuspec file I received the following:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>OurPresence.CodeGen</id>\r\n    <version>1.0.0</version>\r\n    <authors>Allan Nielsen</authors>\r\n    <owners>Allan Nielsen</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <projectUrl>https://github.com/allann/codegen</projectUrl>\r\n    <description>Code generator using model files and compiled template components</description>\r\n    <copyright>Copyright 2019</copyright>\r\n    <tags>code generator c#</tags>\r\n    <repository type=\"git\" url=\"https://github.com/allann/codegen\" />\r\n    <dependencies>\r\n      <group targetFramework=\".NETCoreApp2.1\">\r\n        <dependency id=\"CodeGen.Generator\" version=\"1.0.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"CodeGen.Interfaces\" version=\"1.0.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"CodeGen.Loaders\" version=\"1.0.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"McMaster.Extensions.CommandLineUtils\" version=\"2.4.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"McMaster.Extensions.Hosting.CommandLine\" version=\"2.4.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.Extensions.Configuration.EnvironmentVariables\" version=\"2.2.4\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.Extensions.Configuration.Json\" version=\"2.2.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.Extensions.DependencyInjection\" version=\"2.2.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.Extensions.Hosting\" version=\"2.2.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.Extensions.Hosting.Abstractions\" version=\"2.2.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.Extensions.Logging.Console\" version=\"2.2.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.Extensions.Logging.Debug\" version=\"2.2.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Serilog.AspNetCore\" version=\"3.0.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Serilog.Sinks.Console\" version=\"3.1.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Serilog.Sinks.File\" version=\"4.0.0\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n  <files>\r\n    <file src=\"lib\\netcoreapp2.1\\codegen.dll\" target=\"lib\\netcoreapp2.1\\codegen.dll\" />\r\n    <file src=\"lib\\netcoreapp2.1\\codegen.runtimeconfig.json\" target=\"lib\\netcoreapp2.1\\codegen.runtimeconfig.json\" />\r\n  </files>\r\n</package>\r\n```\r\nThe CodeGen.*.dll files need to be included as files and NOT dependencies because they dont exist as NuGet packages (and shouldn't be).\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\nâš  *Do not edit this section. It is required for docs.microsoft.com âžŸ GitHub issue linking.*\r\n\r\n* ID: 18071970-cf13-78af-ac1d-9adefefdb693\r\n* Version Independent ID: 3bf15a5c-8b3e-0e69-0bf6-03b44654970c\r\n* Content: [Create and publish a .NET Standard NuGet package - Visual Studio on Windows](https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-visual-studio?tabs=netcore-cli#feedback)\r\n* Content Source: [docs/quickstart/create-and-publish-a-package-using-visual-studio.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/quickstart/create-and-publish-a-package-using-visual-studio.md)\r\n* Product: **nuget**\r\n* GitHub Login: @karann-msft\r\n* Microsoft Alias: **karann**"},{"Id":"10767859621","Type":"IssuesEvent","CreatedAt":"2019-11-01T16:47:41","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8787","RelatedDescription":"Opened issue \"Test:  Apex test suite timed out due to long-running InstallNuGetVSIX.ps1\" (#8787) at NuGet/Home","RelatedBody":"In build 5.5.0.6288 the [`Apex_Tests_On_Windows`](https://github.com/NuGet/NuGet.Client/blob/7f66071ec495cbe135441df457563b28e69d1642/build/vsts_build.yaml#L821) phase timed out at 60 minutes.  The [`InstallNuGetVSIX.ps1`](https://github.com/NuGet/NuGet.Client/blob/7f66071ec495cbe135441df457563b28e69d1642/build/vsts_build.yaml#L877) task alone took 13 min, 47 sec.\r\n\r\nHere is the build log:\r\n```\r\n##[section]Starting: InstallNuGetVSIX.ps1\r\n==============================================================================\r\nTask         : PowerShell\r\nDescription  : Run a PowerShell script\r\nVersion      : 1.2.3\r\nAuthor       : Microsoft Corporation\r\nHelp         : [More Information](https://go.microsoft.com/fwlink/?LinkID=613736)\r\n==============================================================================\r\n##[command]. 'E:\\A\\_work\\2\\s\\artifacts\\EndToEnd\\scripts\\InstallNuGetVSIX.ps1' -NuGetDropPath E:\\A\\_work\\2\\s\\artifacts\\VS15 -FuncTestRoot E:\\A\\_work\\2\\s\\artifacts -NuGetVSIXID NuGet.72c5d240-f742-48d4-a0f1-7016671e405b  -ProcessExitTimeoutInSeconds 180 -VSVersion 16.0\r\nAttempt # 1 to downgrade VSIX...\r\nDowngrading VSIX...\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\resources\\app\\ServiceHub\\Services\\Microsoft.VisualStudio.Setup.Service\\VSIXInstaller.exe -Wait -PassThru -NoNewWindow -ArgumentList /q /a /d:NuGet.72c5d240-f742-48d4-a0f1-7016671e405b\r\nVSIX has been downgraded successfully.\r\nrm -r C:\\Users\\NugetLocal\\AppData\\Local\\Microsoft\\VisualStudio\\16.*\\ComponentModelCache...\r\nDone clearing MEF cache...\r\nAttempt # 1 to install VSIX...\r\nInstalling VSIX from E:\\A\\_work\\2\\s\\artifacts\\NuGet.Tools.vsix...\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\resources\\app\\ServiceHub\\Services\\Microsoft.VisualStudio.Setup.Service\\VSIXInstaller.exe -Wait -PassThru -NoNewWindow -ArgumentList /q /a E:\\A\\_work\\2\\s\\artifacts\\NuGet.Tools.vsix\r\nVSIX has been installed successfully.\r\nrm -r C:\\Users\\NugetLocal\\AppData\\Local\\Microsoft\\VisualStudio\\16.*\\ComponentModelCache...\r\nDone clearing MEF cache...\r\nUpdating configuration for C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\devenv.exe\r\n##[section]Finishing: InstallNuGetVSIX.ps1\r\n```\r\n\r\nThe [`InstallNuGetVSIX.ps1`](https://github.com/NuGet/NuGet.Client/blob/7f66071ec495cbe135441df457563b28e69d1642/scripts/e2etests/InstallNuGetVSIX.ps1) script should be improved in a few ways:\r\n* include timestamps\r\n* upload VSIX log files as artifacts"},{"Id":"10765561633","Type":"IssuesEvent","CreatedAt":"2019-11-01T11:23:20","Actor":"PvdWaltDevRoc","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8786","RelatedDescription":"Opened issue \"Exclude files in c# project from the content directory\" (#8786) at NuGet/Home","RelatedBody":"Nuget.exe Version: 4.9.4.5839\r\n\r\nI have no idea why I'm struggling with this, it should be so easy?\r\n\r\nMy c# project have an additional folder with external dependent dlls. This is done to keep the Dlls with the project.\r\n\r\nWhen I pack my Nuget package from the c# project file it includes these dlls in the content folder however I don't want them there and I have tried to exclude them in any way possible except removing them from the project that obviously works.\r\n\r\nThis is my pack output\r\n\r\nId: TPNApplicationBlock\r\nVersion: 2019.10.11\r\nAuthors: TPN Credit Bureau\r\nDescription: TPN Application Block\r\nLicense Url: https://www.tpn.co.za/\r\nTags: TPN, Application, Block\r\nDependencies:\r\n\r\nAdded file '[Content_Types].xml'.\r\nAdded file '_rels/.rels'.\r\nAdded file 'content/Assemblies/Microsoft.Practices.EnterpriseLibrary.Common.dll'.\r\nAdded file 'content/Assemblies/Microsoft.Practices.EnterpriseLibrary.Data.dll'.\r\nAdded file 'content/Assemblies/Microsoft.Practices.ServiceLocation.dll'.\r\nAdded file 'content/Assemblies/Microsoft.Practices.Unity.dll'.\r\nAdded file 'content/Assemblies/Microsoft.Practices.Unity.Interception.dll'.\r\nAdded file 'lib/net462/Microsoft.Practices.EnterpriseLibrary.Common.dll'.\r\nAdded file 'lib/net462/Microsoft.Practices.EnterpriseLibrary.Data.dll'.\r\nAdded file 'lib/net462/Microsoft.Practices.ServiceLocation.dll'.\r\nAdded file 'lib/net462/Microsoft.Practices.Unity.dll'.\r\nAdded file 'lib/net462/Microsoft.Practices.Unity.Interception.dll'.\r\nAdded file 'lib/net462/TPNApplicationBlock.dll'.\r\nAdded file 'lib/net462/TPNExtensions.dll'.\r\nAdded file 'package/services/metadata/core-properties/12e5b3cd4a34494da70350737183ea5c.psmdcp'.\r\nAdded file 'TPNApplicationBlock.nuspec'.\r\n\r\nSuccessfully created package 'D:\\Files\\Source\\Common\\TPN_ApplicationBlock\\Solution_Trunk\\TPNApplicationBlock\\TPNApplicationBlock.2019.10.11.nupkg'.\r\n\r\nI want to remove these:\r\nAdded file 'content/Assemblies/Microsoft.Practices.EnterpriseLibrary.Common.dll'.\r\nAdded file 'content/Assemblies/Microsoft.Practices.EnterpriseLibrary.Data.dll'.\r\nAdded file 'content/Assemblies/Microsoft.Practices.ServiceLocation.dll'.\r\nAdded file 'content/Assemblies/Microsoft.Practices.Unity.dll'.\r\nAdded file 'content/Assemblies/Microsoft.Practices.Unity.Interception.dll'.\r\n\r\nIn summary. All dlls in my Assemblies folder should go to the lib folder which succeed and I have no problem with it but they shouldn't go to contents because that creates a folder in the project if I reference the nuget package\r\n with the dependent dlls which is just ugly!\r\n\r\nTried to upload sample files but it never completes so I gave up..."},{"Id":"10762519360","Type":"IssuesEvent","CreatedAt":"2019-10-31T23:59:06","Actor":"ashishnegi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8785","RelatedDescription":"Opened issue \"Nupkg structure for multi framework (45 - 471) support + net standard ( Github Issue : https://github.com/NuGet/Home/issues/6739 )\" (#8785) at NuGet/Home","RelatedBody":"I have a c# library. It has some different apis in netstandard than net47.\n\nI want to generate a nupkg which should be usable from both .net specific framework and .net coreclr projects. So, if someone creates a fullframework net46/net47 project Or coreclr project targeting netcoreapp2.0 or net47, it should pick up dll based on its version. Also, for .net standard, since it targets multiple platform, I have `Linux` and `win` specific dll.\n\nHow should I structure my nupkg so that during compilation and packaging, it takes the right dll ?\n\nI have the following structure of nupkg :\n\n```\nmy_lib.NUPKG\n|   my_lib.nuspec\n|   [Content_Types].xml\n|\n+---lib\n|   \\---net45\n|           my_lib.dll\n|           my_lib.xml\n|\n+---package\n|   \\---services\n|       \\---metadata\n|           \\---core-properties\n|                   f173822ccbd74dfb9a5338af5508d1b6.psmdcp\n|\n+---ref\n|   \\---netstandard2.0\n|           my_lib.dll\n|\n+---runtimes\n|   +---linux\n|   |   \\---lib\n|   |       \\---netstandard2.0\n|   |               my_lib.dll\n|   |\n|   \\---win\n|       \\---lib\n|           +---net461\n|           |       my_lib.dll\n|           |\n|           +---net462\n|           |       my_lib.dll\n|           |\n|           +---net47\n|           |       my_lib.dll\n|           |\n|           +---net471\n|           |       my_lib.dll\n|           |\n|           \\---netstandard2.0\n|                   my_lib.dll  // this is different from above my_lib.dll\n|\n\\---_rels\n        .rels\n\n```\n\nThis is working for most cases.\n\nHowever, when user creates a .net sdk coreclr project targeting net471 using dotnet cli :\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n  <TargetFramework>net47</TargetFramework>\n</PropertyGroup>\n```\nduring compilation, it refers to netstandard2.0 dll and fails to compile. If I comment out the incompatible apis, in the generated build, it has right net47 `my_lib.dll`. This means that during compilation `only`, it is referring to netstandard2.0 dll.  \n\nI think that their might be something wrong with how I have structured my nupkg.\nWhat is the right way for this ? Can you point me to some documentation around this ?\n\n## Details about Problem\n\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\n\nNuGet version (x.x.x.xxx): \n```\nNuGet.exe help\nNuGet Version: 3.4.3.855\n```\n\ndotnet.exe --version (if appropriate):\n```\n.NET Command Line Tools (2.0.3)\n\nProduct Information:\n Version:            2.0.3\n Commit SHA-1 hash:  12f0c7efcc\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.16299\n OS Platform: Windows\n RID:         win10-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.3\\\n\nMicrosoft .NET Core Shared Framework Host\n\n  Version  : 2.0.3\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\n```\nVS version (if appropriate): `15.4.5`\n\nOS version : `win 10 enterprise v1709 16299.309`\n\n\n\n---\n#### Document Details\n\nâš  *Do not edit this section. It is required for docs.microsoft.com âžŸ GitHub issue linking.*\n\n* ID: f1482e18-5f1f-3a8a-3321-66af52879ec5\n* Version Independent ID: d70bd2f5-c04b-9207-62a0-4ecb6e8e5ca6\n* Content: [Multi-targeting for NuGet Packages](https://docs.microsoft.com/en-us/nuget/create-packages/supporting-multiple-target-frameworks)\n* Content Source: [docs/create-packages/Supporting-Multiple-Target-Frameworks.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/create-packages/Supporting-Multiple-Target-Frameworks.md)\n* Service: **unspecified**\n* Product: **nuget**\n* GitHub Login: @kraigb\n* Microsoft Alias: **kraigb**"},{"Id":"10762323574","Type":"IssuesEvent","CreatedAt":"2019-10-31T23:15:51","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6007","RelatedDescription":"Closed issue \"ngen nuget DLLs in the client vsix and build tools vsix\" (#6007) at NuGet/Home","RelatedBody":"Figure out the right set of DLLs to ngen, measure JIT time and see if it Ngen'ing has any advantages, run it by the VS Perf and Reliability team.\r\n\r\n"},{"Id":"10762285429","Type":"IssuesEvent","CreatedAt":"2019-10-31T23:07:49","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8762","RelatedDescription":"Closed issue \"Test:  improve signing certificate V1/V2 testing\" (#8762) at NuGet/Home","RelatedBody":""},{"Id":"10762215715","Type":"IssuesEvent","CreatedAt":"2019-10-31T22:53:56","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8137","RelatedDescription":"Closed issue \"Nuget 5.0.2 fails to find msbuild assemblies in debian stretch\" (#8137) at NuGet/Home","RelatedBody":"Hi,\r\n\r\nI'm trying to package a csharp project in Linux using nuget+mono. Specifically the OS is a debian stretch: Linux dc1e45079844 4.9.0-3-amd64 SMP Debian 4.9.30-2+deb9u5 (2017-09-19) x86_64 GNU/Linux\r\n\r\nIt's been working fine with NuGet 4.6.2, but since updating to 5.0.2 when running `nuget restore project.sln` I get the following error:\r\n\r\nMSBuild auto-detection: using msbuild version '' from '/usr/bin'.\r\nError parsing solution file at /project_folder/project.sln: Could not load file or assembly '/usr/bin/Microsoft.Build.dll' or one of its dependencies\r\nNuGet.CommandLine.CommandLineException: Error parsing solution file at /project_folder/project.sln: Could not load file or assembly '/usr/bin/Microsoft.Build.dll' or one of its dependencies\r\n\r\nIt seems that with the new version the Msbuild auto-detection is failing to find the correct paths, given that the Microsoft.Build.dll  is located in /usr/lib/mono/xbuild/14.0/bin/ but nuget seems to be looking for it in /usr/bin. \r\n\r\nThanks\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"},{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We areâ€¦ https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"âš  Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Folloâ€¦ https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?â€¦ https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-11-03T05:30:44.8271728Z","RunDurationInMilliseconds":2473}