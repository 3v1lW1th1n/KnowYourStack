{"Data":{"GitHubIssues":{"Issues":[{"Id":"381818120","IsPullRequest":false,"CreatedAt":"2018-11-17T02:15:20","Actor":"Entroper","Number":"1693","RawContent":null,"Title":"Router cannot find route in Blazor 0.7","State":"open","Body":"I have [this page](https://github.com/Entroper/FF1Randomizer/blob/25b5f89dc34bcf7aefdcf7997a343ec322ac9c98/FF1Blazorizer/Pages/Randomize.cshtml) that was working in 0.6, and stopped working when I upgraded to 0.7:\r\n```\r\nError: System.InvalidOperationException: 'Router' cannot find any component with a route for '/Randomize'.\r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.Refresh () <0x204cb00 + 0x000b2> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1fefc70 + 0x0003e> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.SetDirectParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1f79500 + 0x00084> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1f84e68 + 0x00086> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1f84c58 + 0x00086> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InsertNewFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 newFrameIndex) <0x1f84940 + 0x000c2> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 oldStartIndex, System.Int32 oldEndIndexExcl, System.Int32 newStartIndex, System.Int32 newEndIndexExcl) <0x1f84050 + 0x0024a> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.ComputeDiff (Microsoft.AspNetCore.Blazor.Rendering.Renderer renderer, Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] oldTree, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] newTree) <0x1f83a98 + 0x000a6> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1f7dc60 + 0x000b8> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x1f7d888 + 0x00040> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x1f7d0a8 + 0x00050> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1f7c630 + 0x0006c> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1f7c398 + 0x0003a> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x1f7c2a0 + 0x00048> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1f6b270 + 0x000d8> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.SetDirectParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1f79500 + 0x00084> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderRootComponent (System.Int32 componentId) <0x1f78930 + 0x00024> in <7ccdd79bd655431387991356cc8bce62>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent (System.Type componentType, System.String domElementSelector) <0x1f111b0 + 0x00084> in <6e8b4c57aeeb4593b71c0de6d0ce9454>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyBlazorApplicationBuilder.CreateRenderer () <0x1ef1820 + 0x00078> in <6e8b4c57aeeb4593b71c0de6d0ce9454>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHost.StartAsync (System.Threading.CancellationToken cancellationToken) <0x1ed0628 + 0x000f8> in <6e8b4c57aeeb4593b71c0de6d0ce9454>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostExtensions.Run (Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHost host) <0x1ecfdb0 + 0x00020> in <6e8b4c57aeeb4593b71c0de6d0ce9454>:0 \r\n  at FF1Blazorizer.Program.Main (System.String[] args) <0x1d7fd68 + 0x00014> in <396b29f170474361b9513c314eda4230>:0 \r\n```\r\n\r\nI tried lots of things to isolate the error.  Eventually, I added a new .cshtml file and started copying bits of Randomize.cshtml over to it until it stopped working.  It stopped working when I added what is now [line 278](https://github.com/Entroper/FF1Randomizer/blob/25b5f89dc34bcf7aefdcf7997a343ec322ac9c98/FF1Blazorizer/Pages/Randomize.cshtml#L278).\r\n\r\nLine 278 refers to a `ViewModelFlags` class in another project `FF1Lib`.  If you look [here](https://github.com/Entroper/FF1Randomizer/blob/25b5f89dc34bcf7aefdcf7997a343ec322ac9c98/FF1Blazorizer/Shared/ViewModelFlags.cs) you'll see that I've copied all of the code for `ViewModelFlags` into the `FF1Blazorizer` project.  When I did that and referenced the \"new\" class, the application started working again.\r\n\r\nSo I went back to line 278 and changed `FF1Blazorizer.Shared.ViewModelFlags` to `FF1Lib.ViewModelFlags` -- and it **still worked.**\r\n\r\nSo I deleted ViewModelFlags.cs from the Blazor project.  **It stopped working again.**  The mere presence of a copy of the `ViewModelFlags` class in the same project \"cures\" the bug, even though I'm not actually referencing it.  I tried this a couple of times to make sure I hadn't messed something up, but it was consistent.","Url":"https://github.com/aspnet/Blazor/issues/1693","RelatedDescription":"Open issue \"Router cannot find route in Blazor 0.7\" (#1693)"},{"Id":"381814697","IsPullRequest":false,"CreatedAt":"2018-11-17T01:37:09","Actor":"pgrho","Number":"1692","RawContent":null,"Title":"Json.NET throws TypeLoadException on Blazor 0.7.0","State":"open","Body":"I'm updating my standalone Blazor app to use 0.7.0. And found the `JsonConvert.DeserializeObject<T>(string)` method of Newtonsoft.Json 11.0.2 throws `TypeLoadException` in the first invocation.  \r\n\r\n## Repro steps\r\n\r\n1. Create a New ASP.NET Core/Blazor Project. \r\n2. Reference Newtonsoft.Json 11.0.2\r\n3. Add linker.xml\r\n\r\n```\r\n<linker>\r\n    <assembly fullname=\"mscorlib\">\r\n        <!-- Preserve all methods on WasmRuntime, because these are called by JS-side code\r\n    to implement timers. Fixes https://github.com/aspnet/Blazor/issues/239 -->\r\n        <type fullname=\"System.Threading.WasmRuntime\" />\r\n    </assembly>\r\n    <assembly fullname=\"System.Core\">\r\n        <!-- This is required by JSon.NET and any expression.Compile caller -->\r\n        <type fullname=\"System.Linq.Expressions*\" />\r\n    </assembly>\r\n    <!-- Name of the entry point assembly -->\r\n    <assembly fullname=\"BlazorTest\" />\r\n</linker>\r\n```\r\n\r\n4. Reference linker.xml in the .csproj\r\n\r\n```\r\n  <ItemGroup>\r\n    <BlazorLinkerDescriptor Include=\"Linker.xml\" />\r\n  </ItemGroup>\r\n```\r\n\r\n5. Invoke `JsonConvert.DeserializeObject<T>(string)` in some event.\r\n\r\n```csharp\r\nJsonConvert.DeserializeObject<EmptyClass>(\"{}\");\r\n```\r\n\r\nThe steps above will throw `TypeLoadException` for `INotifyPropertyChanged`, and this behavior won't change in the second call. But in my app Json.NET throws `TypeLoadException` for `INotifyPropertyChanging` and subsequent invocations works fine.","Url":"https://github.com/aspnet/Blazor/issues/1692","RelatedDescription":"Open issue \"Json.NET throws TypeLoadException on Blazor 0.7.0\" (#1692)"},{"Id":"381747521","IsPullRequest":false,"CreatedAt":"2018-11-16T20:24:24","Actor":"stsrki","Number":"1691","RawContent":null,"Title":"CascadingValue is always null","State":"open","Body":"I'm trying to use a new feature in Blazor 0.7.0 but with no success. \r\n\r\nThis is the code from my _parent_ `Fields` component.\r\n```\r\n<CascadingValue Value=this>\r\n    <div class=\"field-body\">\r\n        @ChildContent\r\n    </div>\r\n</CascadingValue>\r\n```\r\n\r\nAnd in a _child_ component I have:\r\n\r\n`[CascadingParameter] protected Fields ParentFields { get; set; }`\r\n\r\nBut whatever I do the `ParentFields` property is always null. I don't know what I'm missing. That's basically everything from the documentation. ","Url":"https://github.com/aspnet/Blazor/issues/1691","RelatedDescription":"Open issue \"CascadingValue is always null\" (#1691)"},{"Id":"381657289","IsPullRequest":false,"CreatedAt":"2018-11-16T16:17:58","Actor":"JulienM28","Number":"1690","RawContent":null,"Title":"Json variables names","State":"closed","Body":"Maybe I didn't find the correct method, but I faced an issue using Dtos.\r\n\r\nI'm doing some application with a backent and a frontend sharing the same dtos in a separate dll.\r\n\r\nI used to do like this\r\n\r\n`    [JsonProperty(\"operationState\")]\r\n    public string OperationState { get; set; }`\r\n\r\nbut it seems Blazor doesn't support NewtonSoft Data Annottions.\r\n\r\nWhat could be the good solution for that problem if there's one right now.\r\n\r\nThanks.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1690","RelatedDescription":"Closed issue \"Json variables names\" (#1690)"},{"Id":"381587564","IsPullRequest":false,"CreatedAt":"2018-11-16T12:53:30","Actor":"grahamehorner","Number":"1689","RawContent":null,"Title":"Q: client side digital signature","State":"open","Body":"Is there anyway #blazor can obtain the public key used to secure the https connection, so it can then be used to verify the hash of a data payload client side ? ","Url":"https://github.com/aspnet/Blazor/issues/1689","RelatedDescription":"Open issue \"Q: client side digital signature\" (#1689)"},{"Id":"381570628","IsPullRequest":false,"CreatedAt":"2018-11-16T12:00:08","Actor":"lorranpalmeira","Number":"1688","RawContent":null,"Title":"UseUrl Option","State":"open","Body":"Is it possible set a UseUrl like WebApi?\r\n`.UseUrls(\"http://localhost:7001/\")`\r\n\r\nBecause in Blazor doesn´t has this option:\r\n\r\n```\r\npublic static IWebAssemblyHostBuilder CreateHostBuilder(string[] args) =>\r\n            BlazorWebAssemblyHost.CreateDefaultBuilder()\r\n                .UseBlazorStartup<Startup>();\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1688","RelatedDescription":"Open issue \"UseUrl Option\" (#1688)"},{"Id":"381550141","IsPullRequest":false,"CreatedAt":"2018-11-16T10:57:01","Actor":"ctyar","Number":"1687","RawContent":null,"Title":"Upgrading Blazor language service from 0.6 to 0.7 installs windows SDK","State":"open","Body":"Upgrading Visual studio extension from 0.6 to 0.7 installs multiple versions of Windows SDK.\r\nIs this intended?\r\n\r\n![annotation 2018-11-16 142348](https://user-images.githubusercontent.com/1432648/48617406-a4e5c080-e9ab-11e8-9a7a-fdc55a948ad2.jpg)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1687","RelatedDescription":"Open issue \"Upgrading Blazor language service from 0.6 to 0.7 installs windows SDK\" (#1687)"},{"Id":"381472696","IsPullRequest":false,"CreatedAt":"2018-11-16T07:03:43","Actor":"nickbeau","Number":"1686","RawContent":null,"Title":"Issue with DevOps Build in Blazor 0.7.0","State":"open","Body":"### Functional impact\r\nThis stops us accessing our Blazor Application from an Azure App Site.\r\n\r\n### Minimal repro steps\r\n1. Create New Blazor Application 0.7.0 from the template\r\n2. Run the build process below\r\n3. Run the publish process below\r\n4. Navigate to the Application URL\r\n\r\n### Expected result\r\nThe application should run, as it did with Blazor 0.6.0\r\n\r\n### Actual result\r\nIf I access the application with https:, I get the following error in the Browser (Chrome) Console:\r\n\r\nWASM: The assembly mscorlib.dll was not found or could not be loaded.\r\n\r\nWASM: It should have been installed in the `/mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/sdks/out/wasm-runtime-release/lib/mono/4.5/mscorlib.dll' directory.\r\n\r\ngo-micro.azurewebsites.net/:1 Uncaught (in promise) ExitStatus {name: \"ExitStatus\", message: \"Program terminated with exit(1)\", status: 1}message: \"Program terminated with exit(1)\"name: \"ExitStatus\"status: 1__proto__: Error\r\n    at https://go-micro.azurewebsites.net/_framework/wasm/mono.js:1:204993\r\nPromise.then (async)\r\n(anonymous) @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\ncallRuntimeCallbacks @ mono.js:1\r\npreRun @ mono.js:1\r\nrun @ mono.js:1\r\nrunCaller @ mono.js:1\r\nremoveRunDependency @ mono.js:1\r\nreceiveInstance @ mono.js:1\r\nreceiveInstantiatedSource @ mono.js:1\r\nPromise.then (async)\r\ndoNativeWasm @ mono.js:1\r\n(anonymous) @ mono.js:1\r\n(anonymous) @ mono.js:1\r\n\r\nIf I access the application using http, I get:\r\nWASM: Runtime critical type Mono.RuntimeStructs/HandleStackMark not found\r\nblazor.webassembly.js:1 Uncaught (in promise) abort(). Build with -s ASSERTIONS=1 for more info.\r\n\r\nFinally if I publish directly from Visual Studio, using Azure Publish, it works to a new App Service, but does not to an existing one.\r\n\r\nI'm sure it's me, but am a bit stuck!\r\n\r\n### Further technical details\r\nI followed the instructions to upgrade my Blazor Client Application to 0.7.0 first. I then recreated a brand new application from the template.\r\n\r\nI am using Visual Studio Enterprise 2017 Preview (2) Version 15.9.0 Preview 6.0\r\n\r\n We're using Azure Devops to build and then releasing to Azure Web Applications.\r\n\r\nAfter much fiddling, I have an application which runs, but only runs using http.\r\n\r\nIf I access the aplication with https:, I get the following error in the Browser (Chrome) Console:\r\n\r\nWASM: The assembly mscorlib.dll was not found or could not be loaded.\r\n\r\nWASM: It should have been installed in the `/mnt/jenkins/workspace/test-mono-mainline-wasm/label/ubuntu-1804-amd64/sdks/out/wasm-runtime-release/lib/mono/4.5/mscorlib.dll' directory.\r\n\r\n Uncaught (in promise)\r\n\r\nThe Build pipeline does the following:\r\n\r\n- Use .NET Core SDK 2.1.500\r\n- Use NuGet 4.8.1\r\n- NuGet restore\r\n- Build solution **\\*.sln with the parameters: /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation=\"$(build.artifactstagingdirectory)\\\\\"\r\n\r\nWe then copy the produced Zip file and publish to Azure using the Deploy Azure App Service function\r\n\r\nAll was working perfectly in Blazor 0.6.0\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1686","RelatedDescription":"Open issue \"Issue with DevOps Build in Blazor 0.7.0\" (#1686)"},{"Id":"381401482","IsPullRequest":false,"CreatedAt":"2018-11-16T00:50:40","Actor":"DaRosenberg","Number":"1685","RawContent":null,"Title":"\"Fatal error in IL Linker\" when adding reference to System.Reactive","State":"open","Body":"I wanted to experiment with building a stand-alone Blazor app that utilizes some existing managed code we have which depends on `System.Reactive`. However, as soon as `System.Reactive` is added (either directly to the Blazor app project, or to any other project the Blazor app references) the following build error happens:\r\n\r\n```\r\n1>------ Rebuild All started: Project: RetrospectBlazorPoc, Configuration: Debug Any CPU ------\r\n1>RetrospectBlazorPoc -> C:\\Data\\Git\\IDeliverable\\RetrospectBlazorPoc\\RetrospectBlazorPoc\\bin\\Debug\\netstandard2.0\\RetrospectBlazorPoc.dll\r\n1>Fatal error in IL Linker\r\n1>Mono.Cecil.AssemblyResolutionException: Failed to resolve assembly: 'System.Reactive, Version=4.1.0.0, Culture=neutral, PublicKeyToken=94bc3704cddfc263'\r\n1>   at Mono.Linker.DirectoryAssemblyResolver.Resolve(AssemblyNameReference name, ReaderParameters parameters)\r\n1>   at Mono.Linker.AssemblyResolver.Resolve(AssemblyNameReference name, ReaderParameters parameters)\r\n1>   at Mono.Linker.DirectoryAssemblyResolver.Resolve(AssemblyNameReference name)\r\n1>   at Mono.Cecil.MetadataResolver.Resolve(TypeReference type)\r\n1>   at Mono.Linker.Steps.ResolveFromAssemblyStep.ProcessLibrary(LinkContext context, AssemblyDefinition assembly, RootVisibility rootVisibility)\r\n1>   at Mono.Linker.Steps.ResolveFromAssemblyStep.ProcessLibrary(AssemblyDefinition assembly)\r\n1>   at Mono.Linker.Steps.ResolveFromAssemblyStep.Process()\r\n1>   at Mono.Linker.Steps.BaseStep.Process(LinkContext context)\r\n1>   at Mono.Linker.Pipeline.ProcessStep(LinkContext context, IStep step)\r\n1>   at Mono.Linker.Pipeline.Process(LinkContext context)\r\n1>   at Mono.Linker.Driver.Run(ILogger customLogger)\r\n1>   at Mono.Linker.Driver.Execute(String[] args, ILogger customLogger)\r\n1>C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\Blazor.MonoRuntime.targets(439,5): error MSB3073: The command \"dotnet \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\../tools/illink/illink.dll\" -l none --verbose --strip-security true --exclude-feature com --exclude-feature sre -v false -c link -u link -b true -d \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\../tools/mono/bcl/\" -d \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\../tools/mono/bcl/Facades/\" -o \"C:\\Data\\Git\\IDeliverable\\RetrospectBlazorPoc\\RetrospectBlazorPoc\\obj\\Debug\\netstandard2.0\\blazor\\linker/\" -x \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\targets\\BuiltInBclLinkerDescriptor.xml\" -x \"C:\\Data\\Git\\IDeliverable\\RetrospectBlazorPoc\\RetrospectBlazorPoc\\obj\\Debug\\netstandard2.0\\blazor\\linker.descriptor.xml\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor\\0.7.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.browser\\0.7.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.Browser.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.7.0\\lib\\netstandard1.0\\Microsoft.AspNetCore.Blazor.TagHelperWorkaround.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\microsoft.jsinterop\\0.7.0\\lib\\netstandard2.0\\Microsoft.JSInterop.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\mono.webassembly.interop\\0.7.0\\lib\\netstandard2.0\\Mono.WebAssembly.Interop.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\system.reactive\\4.1.2\\lib\\netstandard2.0\\System.Reactive.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\system.reactive.core\\4.1.2\\lib\\netstandard2.0\\System.Reactive.Core.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\system.runtime.compilerservices.unsafe\\4.5.0\\lib\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" -a \"C:\\Users\\DanielRosenberg\\.nuget\\packages\\system.runtime.interopservices.windowsruntime\\4.3.0\\lib\\netstandard1.3\\System.Runtime.InteropServices.WindowsRuntime.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.threading.tasks.extensions\\4.5.1\\lib\\netstandard2.0\\System.Threading.Tasks.Extensions.dll\" -a \"C:\\Data\\Git\\IDeliverable\\RetrospectBlazorPoc\\RetrospectBlazorPoc\\obj\\Debug\\netstandard2.0\\RetrospectBlazorPoc.dll\"\" exited with code 1.\r\n1>Done building project \"RetrospectBlazorPoc.csproj\" -- FAILED.\r\n========== Rebuild All: 0 succeeded, 1 failed, 0 skipped ==========\r\n```\r\n\r\nAny idea why this happens, and how to fix or work around this?","Url":"https://github.com/aspnet/Blazor/issues/1685","RelatedDescription":"Open issue \"\"Fatal error in IL Linker\" when adding reference to System.Reactive\" (#1685)"},{"Id":"381286130","IsPullRequest":false,"CreatedAt":"2018-11-15T18:29:07","Actor":"SteveSandersonMS","Number":"1684","RawContent":null,"Title":"Change \"npm install\" to \"npm ci\"","State":"open","Body":"Hopefully this will lessen the flakiness in CI.","Url":"https://github.com/aspnet/Blazor/issues/1684","RelatedDescription":"Open issue \"Change \"npm install\" to \"npm ci\"\" (#1684)"},{"Id":"381257647","IsPullRequest":false,"CreatedAt":"2018-11-15T17:17:39","Actor":"stas-sultanov","Number":"1683","RawContent":null,"Title":" table.deleteRow without JS","State":"closed","Body":"Can't find in any example\r\nhow to delete table row or any dom element without JS inter-op :(","Url":"https://github.com/aspnet/Blazor/issues/1683","RelatedDescription":"Closed issue \" table.deleteRow without JS\" (#1683)"},{"Id":"381212901","IsPullRequest":false,"CreatedAt":"2018-11-15T15:29:32","Actor":"danroth27","Number":"1682","RawContent":null,"Title":"CSSLint warnings from site.css","State":"open","Body":"On a clean project if you open *site.css* you get the following warnings in VS 15.9:\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nWarning\toverqualified-elements\t(CssLint) Element (a.active) is overqualified, just use .active without element name.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t69\t\r\nWarning\timport\t(CssLint) @import prevents parallel downloads, use <link> instead.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t1\t\r\nWarning\tfallback-colors\t(CssLint) Fallback background-color (hex or RGB) should precede RGBA background-color.\tWebApplication30.Client\tC:\\Users\\daroth\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t33\t\r\nWarning\tfallback-colors\t(CssLint) Fallback background-color (hex or RGB) should precede RGBA background-color.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t70\t\r\nWarning\tfallback-colors\t(CssLint) Fallback background-color (hex or RGB) should precede RGBA background-color.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t75\t\r\nWarning\tfallback-colors\t(CssLint) Fallback background-color (hex or RGB) should precede RGBA background-color.\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t84\t\r\nWarning\timportant\t(CssLint) Use of !important\tWebApplication30.Client\tC:\\Users\\user\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t111\t\r\nWarning\tuser\t(CssLint) Use of !important\tWebApplication30.Client\tC:\\Users\\daroth\\Source\\Repos\\WebApplication30\\WebApplication30.Client\\wwwroot\\css\\site.css\t112\t\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1682","RelatedDescription":"Open issue \"CSSLint warnings from site.css\" (#1682)"},{"Id":"380568230","IsPullRequest":true,"CreatedAt":"2018-11-15T09:43:49","Actor":"danroth27","Number":"1677","RawContent":null,"Title":"Update survey link for 0.7.0","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1677","RelatedDescription":"Closed or merged PR \"Update survey link for 0.7.0\" (#1677)"},{"Id":"381011651","IsPullRequest":false,"CreatedAt":"2018-11-15T05:57:28","Actor":"danroth27","Number":"1681","RawContent":null,"Title":"FormatException: Input string was not in a correct format","State":"open","Body":"When working on replicating the `TabSet` component from the last Blazor community standup I got this exception with VS 2017 15.9 and the Blazor 0.7.0-preview1 build:\r\n\r\n```\r\nSystem.FormatException: Input string was not in a correct format.\r\n at System.Text.StringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n at System.String.Format(IFormatProvider provider, String format, Object[] args)\r\n at Microsoft.AspNetCore.Razor.Language.DefaultRazorDiagnostic.GetMessage(IFormatProvider formatProvider)\r\n at Microsoft.VisualStudio.Web.Editors.Razor.RazorCodeGenerator.NotifyOnCodeGenerationComplete()\r\n at Microsoft.VisualStudio.Web.Editors.Razor.RazorCodeGenerator.<>c__DisplayClass67_0.<OnDocumentStructureChanged>b__0()\r\n at Microsoft.Web.Editor.Utility.GuardedOperations.InvokeExtensionPoint(Object errorSource, Action action)\r\n --- End of stack trace from previous location where exception was thrown ---\r\n at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\nHere's the component file I was working on:\r\n\r\n```html\r\n<ul class=\"nav nav-tabs\">\r\n    @foreach (var tab in tabs)\r\n    {\r\n        <li class=\"nav-item\">\r\n            <a onclick=\"@(() => SelectTab(tab))\" class=\"nav-link @(tab==)\r\n        </li>\r\n    }\r\n\r\n</ul>\r\n\r\n\r\n@functions {\r\n\r\n}\r\n```\r\n","Url":"https://github.com/aspnet/Blazor/issues/1681","RelatedDescription":"Open issue \"FormatException: Input string was not in a correct format\" (#1681)"},{"Id":"380936410","IsPullRequest":false,"CreatedAt":"2018-11-14T23:42:56","Actor":"danroth27","Number":"1680","RawContent":null,"Title":"Blazor 0.7.0 release checklist","State":"open","Body":"- [x] Update survey links in templates\r\n- [x] Create final release build with correct version numbers\r\n- [x] Perform final manual verification of VSIX/packages, including that they are all signed\r\n- [x] Upload packages to nuget.org\r\n- [x] Upload VSIX to VS marketplace\r\n- [x] Wait for nuget.org to re-index and show new package versions\r\n- [ ] Publish updated docs (conceptual and API)\r\n- [x] Create release tag and release on the Blazor repo\r\n- [x] Publish announcement blog post\r\n- [x] Tweet announcement from aspnet account\r\n- [ ] Mark the release's milestone as done\r\n","Url":"https://github.com/aspnet/Blazor/issues/1680","RelatedDescription":"Open issue \"Blazor 0.7.0 release checklist\" (#1680)"},{"Id":"380841853","IsPullRequest":false,"CreatedAt":"2018-11-14T19:02:02","Actor":"SteveSandersonMS","Number":"1679","RawContent":null,"Title":"Reconsider how rendering calls are run in series via sync context","State":"open","Body":"In #1672, I made a change to `RemoteRenderer`'s `AddToRenderQueue` so that the rendering calls are always run in series within a given circuit. This worked by posting the rendering action to the circuit's sync context. [See code here](https://github.com/aspnet/Blazor/pull/1672/files#diff-4a18bde3a2af3f8ec6fe58b9f99c7ea2R109). This was a fix to the issue reported at #1573.\r\n\r\nHowever in retrospect I'm not certain this is the right fix. As per Ryan's comment:\r\n\r\n> I would expect the code after the await to resume on the sync context\r\n\r\nWe have a test to show this does work, plus I've manually checked that our sync context *does* cause the lifecycle methods' `await` continuations to be run in series within a given circuit. So why was it necessary to make a further change to queue the render calls sequentally on the sync context? Why weren't they *already* running sequentially on the sync context?\r\n\r\nAfter some investigation, I think the reason is that in various places, we use `task.ContinueWith`, and surprisingly that does *not* honour `SynchonizationContext.Current` in the same way that `await` does. If we want `ContinueWith` to queue continuations on the sync context, we need to change the value of `TaskScheduler.Current` to something like `TaskScheduler.FromCurrentSynchronizationContext()`. I'm not certain where the right place to plug that in would be. If we can make this work, then we can remove the old workaround that explicitly marshals onto the sync context in `RemoteRenderer.AddToRenderQueue` (because we'll already be on it), which will be a good thing for perf.\r\n\r\nAdditionally, I think we should consider being stricter about forcing all UI interactions (`Render` calls at least) to be running inside a queued work item on the renderer's corresponding sync context. In any case where that's not happening, we should consider throwing like other UI frameworks do. That would help earlier diagnosis of any weirdness we may have missed.\r\n\r\ncc @rynowak for any comments or opinions.\r\n\r\n**Repro steps**\r\n\r\nIf you want to repro the original issue, go to `RemoteRenderer.cs` and remove its override of the `AddToRenderQueue` method (or comment out the call to `_syncContext.Post`, and just invoke `base.AddToRenderQueue` directly instead). Then run the E2E tests in server-side execution mode (launch `TestServer`, browse to http://localhost:port/subdir#server), open the \"Concurrent renders\" example, and see that the rendering has got all messed up because you removed the marshalling back onto the sync context.\r\n\r\nYou can also set a breakpoint inside `RenderHandle`'s `Render` method and use the immediate window to observe that, after the `await`, the call is *not* on the circuit sync context any more.","Url":"https://github.com/aspnet/Blazor/issues/1679","RelatedDescription":"Open issue \"Reconsider how rendering calls are run in series via sync context\" (#1679)"},{"Id":"380563123","IsPullRequest":false,"CreatedAt":"2018-11-14T16:33:58","Actor":"danroth27","Number":"1676","RawContent":null,"Title":"Strange method intellisense in Blazor app","State":"closed","Body":"![image](https://user-images.githubusercontent.com/1874516/48465643-675d1980-e798-11e8-973c-cf10758d2913.png)\r\n![image](https://user-images.githubusercontent.com/1874516/48465671-7cd24380-e798-11e8-97b4-ba415f383657.png)\r\n\r\nThe type name for the Blazor component should just be `Index`.","Url":"https://github.com/aspnet/Blazor/issues/1676","RelatedDescription":"Closed issue \"Strange method intellisense in Blazor app\" (#1676)"},{"Id":"380633576","IsPullRequest":true,"CreatedAt":"2018-11-14T10:31:56","Actor":"StevenTCramer","Number":"1678","RawContent":null,"Title":"(TS) Object is possibly 'null' fix","State":"open","Body":"micro fix for #1670 \r\nadd the non-null assertion operator.","Url":"https://github.com/aspnet/Blazor/pull/1678","RelatedDescription":"Open PR \"(TS) Object is possibly 'null' fix\" (#1678)"},{"Id":"380281042","IsPullRequest":false,"CreatedAt":"2018-11-13T15:30:25","Actor":"BickelLukas","Number":"1675","RawContent":null,"Title":"Allow ComponentFactory to be extended","State":"open","Body":"When using a custom DI container that doesn't provide an IServiceProvider it's not possible to inject services into components.\r\n\r\nI'm using SimpleInjector as a DI container. Now I can't inject services into Views that were registered into that container.\r\n\r\nIt would be great If the renderer wouldn't depend on the IServiceProvider but instead take an IComponentFactory that I can then override to provide my own implementation using my DI container. \r\n\r\nHere's a great post on the creator of SimpleInjector on this topic: https://simpleinjector.org/blog/2016/06/whats-wrong-with-the-asp-net-core-di-abstraction/","Url":"https://github.com/aspnet/Blazor/issues/1675","RelatedDescription":"Open issue \"Allow ComponentFactory to be extended\" (#1675)"},{"Id":"380239889","IsPullRequest":true,"CreatedAt":"2018-11-13T14:41:56","Actor":"SteveSandersonMS","Number":"1674","RawContent":null,"Title":"Bump version to 0.8.0-preview1-*","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1674","RelatedDescription":"Closed or merged PR \"Bump version to 0.8.0-preview1-*\" (#1674)"},{"Id":"380196737","IsPullRequest":true,"CreatedAt":"2018-11-13T13:40:14","Actor":"SteveSandersonMS","Number":"1673","RawContent":null,"Title":"Marshal oninput events as UIChangeEventArgs","State":"closed","Body":"Same as #1475","Url":"https://github.com/aspnet/Blazor/pull/1673","RelatedDescription":"Closed or merged PR \"Marshal oninput events as UIChangeEventArgs\" (#1673)"},{"Id":"380176717","IsPullRequest":true,"CreatedAt":"2018-11-13T13:04:55","Actor":"SteveSandersonMS","Number":"1672","RawContent":null,"Title":"Serialize server-side renders. Fixes #1573","State":"closed","Body":"Another case where the asynchrony of server-side rendering needed some extra work to ensure the correct behaviors. This was a simple thread safety issue inside `Renderer`.\r\n\r\nTo a first approximation, I could have fixed it just by putting a `lock(_renderer) { ... }` around `RenderHandle`'s call to `_renderer.AddToRenderQueue`. However that could lead to deadlock because rendering can be re-entrant (a child can cause its own parent to re-render, e.g., by invoking some callback passed by the parent).\r\n\r\nThe solution here is to enqueue render calls on the circuit sync context. This causes some extra allocations per-render but provides an easy-to-reason-about solution. Plus it ensures that component lifecycle methods such as `Init` (which is invoked by the renderer) get executed serially within the sync context, which better matches up with the WebAssembly execution style.","Url":"https://github.com/aspnet/Blazor/pull/1672","RelatedDescription":"Closed or merged PR \"Serialize server-side renders. Fixes #1573\" (#1672)"},{"Id":"379829513","IsPullRequest":true,"CreatedAt":"2018-11-13T11:34:03","Actor":"SteveSandersonMS","Number":"1666","RawContent":null,"Title":"Fix intermittent render omissions. Fixes #1223.","State":"closed","Body":"As per #1223, there were some timing-based cases where server-side rendering would just fail to apply certain updates to the UI.\r\n\r\nThe underlying reason turned out to be a misunderstanding about how the SignalR APIs work: I thought that `SendAsync` would at least *send* the data synchronously, and that the returned `Task` represented the network transfer. In fact I was wrong, and `SendAsync` doesn't necessarily serialize the inputs synchronously - if the network channel is currently busy, it waits until it's free before serializing. This was problematic because we reuse `RenderBatch` instances and their buffers for subsequent renders, so if multiple renders occurred sufficiently close together in time, the 2nd or later render could have its data overwritten by the 3rd or later render before its data was dispatched to the client.\r\n\r\nThe fix here is the obvious one, i.e., to snapshot the `RenderBatch` data synchronously at the time when `UpdateDisplay` is called. This has the drawback that we are now allocating an extra `byte[]` on every render. Later on, we should consider putting in some kind of object pool for this.","Url":"https://github.com/aspnet/Blazor/pull/1666","RelatedDescription":"Closed or merged PR \"Fix intermittent render omissions. Fixes #1223.\" (#1666)"},{"Id":"380061287","IsPullRequest":false,"CreatedAt":"2018-11-13T11:30:44","Actor":"StevenTCramer","Number":"1670","RawContent":null,"Title":"'document.head.appendChild(element);' Object is possibly 'null'.","State":"closed","Body":"Currently when I am building the repo locally I get.\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tTS2531\t(TS) Object is possibly 'null'.\tC:\\git\\github\\forks\\Blazor\\src\\Microsoft.AspNetCore.Blazor.Browser.JS (tsconfig or jsconfig project)\tC:\\git\\github\\forks\\Blazor\\src\\Microsoft.AspNetCore.Blazor.Browser.JS\\src\\BootCommon.ts\t27\tActive\r\n```\r\nThe offending line is\r\n```\r\ndocument.head.appendChild(element);\r\n```\r\n\r\nI think a simple fix, if we can assume the head element exist in the loaded document (can we?), would be:\r\n\r\n```\r\ndocument.head!.appendChild(element);\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1670","RelatedDescription":"Closed issue \"'document.head.appendChild(element);' Object is possibly 'null'.\" (#1670)"},{"Id":"380119080","IsPullRequest":false,"CreatedAt":"2018-11-13T11:26:46","Actor":"StevenTCramer","Number":"1671","RawContent":null,"Title":"Question:  How to run \"BasicTestApp\" from Visual Studio","State":"closed","Body":"I have Blazor building locally now and all the test cases pass, I want to add another test case for SVGs to first correctly catch the error then fix it. \r\n\r\nI want to be able to run the \"BasicTestApp\" but when I attempt to I get:\r\n\r\n```\r\njsinteroptests.js:1 Uncaught SyntaxError: Unexpected token <\r\nblazor.webassembly.js:1 Uncaught SyntaxError: Unexpected token <\r\n```\r\nLooking at the \"Network\" tab, I see it is returning html. thus the error... but why?\r\n\r\nI turn off headless on selenium tests and see that this app actually loads for the tests... why doesn't it when I just set it as StartUp Project and run from Visaul Studio?\r\n\r\nThanks.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1671","RelatedDescription":"Closed issue \"Question:  How to run \"BasicTestApp\" from Visual Studio\" (#1671)"},{"Id":"379978335","IsPullRequest":false,"CreatedAt":"2018-11-12T22:30:26","Actor":"IvanJosipovic","Number":"1669","RawContent":null,"Title":"Namespace conflict external packages","State":"open","Body":"My Blazor project is called **Example.Blazor.Client**, today I tried to use Blazor.FlexGrid and Blazor.Extensions nugget packages and noticed that my project couldn't see those Namespaces.\r\n\r\nIt turns out its because of a namespace conflict as Example.Blazor overwrites Blazor.*\r\n\r\nRepro:\r\nCreate Blazor Project with name \"Test.Blazor.Client\"\r\nAdd nugget packages Blazor.FlexGrid or Blazor.Extensions.* and try using namespace in Page.\r\n\r\n![image](https://user-images.githubusercontent.com/9521987/48378490-a3ec2080-e685-11e8-8db4-fc1bace7c92e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/9521987/48378860-f8dc6680-e686-11e8-904e-f4b101d68ee8.png)\r\n\r\n\r\nIssue is reproduced on this repo: https://github.com/IvanJosipovic/BlazorNamespaceBug/\r\nBlazor.Client project will build\r\nTest.Blazor.Client will not build\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1669","RelatedDescription":"Open issue \"Namespace conflict external packages\" (#1669)"},{"Id":"379954707","IsPullRequest":false,"CreatedAt":"2018-11-12T21:14:15","Actor":"romanoza","Number":"1668","RawContent":null,"Title":"Problem of compiling a generic component","State":"open","Body":"I have the following problem.\r\n\r\nThe **MyClass** class is placed in the BlazorTest.Shared project and it's defined as:\r\n\r\n```\r\nnamespace BlazorTest.Shared\r\n{\r\n    public class MyClass\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nI have also created a simple component, called **MyComponent**:\r\n\r\n```\r\n@using BlazorTest.Shared\r\n@typeparam T\r\n\r\n<div></div>\r\n\r\n@functions {\r\n\r\n[Parameter] T PropertyToInferType { get; set; }\r\n[Parameter] MyClass MyProperty { get; set; }\r\n\r\n}\r\n\r\n```\r\nMy page looks like this:\r\n\r\n```\r\n@using BlazorTest.Shared\r\n@page \"/counter\"\r\n\r\n<MyComponent PropertyToInferType=\"3\" MyProperty=\"@MyObject\" />\r\n\r\n@functions {\r\n    MyClass MyObject = new MyClass();\r\n}\r\n```\r\n\r\nI'm getting the compile-time errors:\r\n\r\n> The type or namespace name 'Shared' does not exist in the namespace '__Blazor.BlazorTest' (are you missing an assembly reference?)\r\n> Argument 6: cannot convert from 'BlazorTest.Shared.MyClass' to '__Blazor.BlazorTest.Shared.MyClass'\r\n\r\nIf I remove the `@typeparam` directive and modify the component by removing the `PropertyToInferType`  property, then everything compiles without errors.\r\n\r\nAm I missing something?\r\n\r\nPS. Blazor is awesome.","Url":"https://github.com/aspnet/Blazor/issues/1668","RelatedDescription":"Open issue \"Problem of compiling a generic component\" (#1668)"},{"Id":"379891807","IsPullRequest":false,"CreatedAt":"2018-11-12T18:02:40","Actor":"cesarzapatawfm","Number":"1667","RawContent":null,"Title":" 'Router' cannot find any component with a route for '/todo'","State":"open","Body":"I'm following the tutorial https://blazor.net/docs/tutorials/build-your-first-blazor-app.html but when I add the todo component and try to navigate to it , i get an error on browser console. \r\n\"Uncaught (in promise) Error: System.InvalidOperationException: 'Router' cannot find any component with a route for '/todo'.\"\r\n\r\nHere is my Todo.cshtml page. \r\n```html\r\n@page \"/todo\"\r\n\r\n<h1>Todo</h1>\r\n```\r\nI tried rebuilding and restarting Visual Studio but still getting the error. The other pages that came in the templates index,counter and fetchdata are working fine. \r\n\r\nAny ideas? ","Url":"https://github.com/aspnet/Blazor/issues/1667","RelatedDescription":"Open issue \" 'Router' cannot find any component with a route for '/todo'\" (#1667)"},{"Id":"379589415","IsPullRequest":false,"CreatedAt":"2018-11-12T15:49:30","Actor":"IyyappanAmirthalingam","Number":"1664","RawContent":null,"Title":"Build failed - v 0.60 with Microsoft.EntityFrameworkCore.SqlServer","State":"closed","Body":"Hi,\r\nWhen I tried to build the Blazor (standalone) Version 0.6.0 after installing Microsoft.EntityFrameworkCore.SqlServer the build is failing. \r\n\r\n> Steps to reproduce\r\n> 1. Create a new Blazor (standalone) app\r\n> 2. Install Microsoft.EntityFrameworkCore.SqlServer\r\n> 3. Build the solution to see the error.\r\n\r\nVerified in Visual Studio 2017 and Visual Studio code . Please help.\r\nThanks.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1664","RelatedDescription":"Closed issue \"Build failed - v 0.60 with Microsoft.EntityFrameworkCore.SqlServer\" (#1664)"},{"Id":"379622479","IsPullRequest":false,"CreatedAt":"2018-11-12T15:47:29","Actor":"IvanJosipovic","Number":"1665","RawContent":null,"Title":"Update FAQ \"Q: What about older browsers that don't support WebAssembly? For example, does Blazor work in IE?\"","State":"closed","Body":"> Q: What about older browsers that don't support WebAssembly? For example, does Blazor work in IE?\r\nFor older browsers that don't support WebAssembly Blazor will fallback to using an asm.js based .NET runtime. Using asm.js is slower and has a larger download size, but is still quite functional.\r\n\r\n> \r\n\r\nWiki Faq needs to be updated to remove reference of asm.js","Url":"https://github.com/aspnet/Blazor/issues/1665","RelatedDescription":"Closed issue \"Update FAQ \"Q: What about older browsers that don't support WebAssembly? For example, does Blazor work in IE?\"\" (#1665)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-11-17T05:30:04.8389268Z","RunDurationInMilliseconds":2529}