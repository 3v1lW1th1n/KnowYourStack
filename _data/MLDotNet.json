{"Data":{"GitHub":{"Issues":[{"Id":"446394095","IsPullRequest":false,"CreatedAt":"2019-05-21T02:59:39","Actor":"seabluescn","Number":"3752","RawContent":null,"Title":"How to get training progress info?","State":"open","Body":"Hi，Suppose I have 10,000 training data. When I run Fit method, it takes a long time. During this period, how can I get real-time training progress information?\r\nThank You!","Url":"https://github.com/dotnet/machinelearning/issues/3752","RelatedDescription":"Open issue \"How to get training progress info?\" (#3752)"},{"Id":"446361548","IsPullRequest":false,"CreatedAt":"2019-05-21T00:11:15","Actor":"prathyusha12345","Number":"3751","RawContent":null,"Title":"Model is predicting null when a user used CustomModel in TensorFlow Image Classification","State":"open","Body":"User has reported issue in Machine Learning samples https://github.com/dotnet/machinelearning-samples/issues/468 \r\n\r\n I have used the custom model and labels.txt provided by user in [TensorFlow image classification sample](https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/DeepLearning_ImageClassification_TensorFlow) and changed the model pipeLine for Tensor input and output as shown below.\r\n\r\n```\r\nvar pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"Placeholder\", imageFolder: imagesFolder, inputColumnName: nameof(ImageNetData.ImagePath))\r\n                           .Append(mlContext.Transforms.ResizeImages(outputColumnName: \"Placeholder\", imageWidth: ImageNetSettings.imageWidth, imageHeight: ImageNetSettings.imageHeight, inputColumnName: \"Placeholder\"))\r\n                           .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"Placeholder\", interleavePixelColors: ImageNetSettings.channelsLast, offsetImage: ImageNetSettings.mean))\r\n                           .Append(mlContext.Model.LoadTensorFlowModel(modelLocation).\r\n                           ScoreTensorFlowModel(outputColumnNames: new[] { \"loss\" },\r\n                                               inputColumnNames: new[] { \"Placeholder\" }, addBatchDimensionInput: true));\r\n```\r\n\r\nWhile predicting an image using the prediction engine, the model is not predicting anything and its giving predictedLabels value as null.\r\n\r\n`var probs = model.Predict(sample).PredictedLabels;`\r\n\r\n![image](https://user-images.githubusercontent.com/22335043/58059536-38967600-7b22-11e9-91e2-ec6263e3ceba.png)\r\n\r\n\r\nCould any one let me know why the model is not predicting any label?","Url":"https://github.com/dotnet/machinelearning/issues/3751","RelatedDescription":"Open issue \"Model is predicting null when a user used CustomModel in TensorFlow Image Classification\" (#3751)"},{"Id":"446292589","IsPullRequest":false,"CreatedAt":"2019-05-20T20:20:42","Actor":"PeterPann23","Number":"3750","RawContent":null,"Title":"AutoML Code generation generates failing code if the CSV provided have a header named Label","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nwindows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\nAutoMl Wizard Rel 0.3.0\r\n### Issue\r\n\r\n- **What did you do?**\r\nCreated a CSV file for the wizard with a column that it needed to predict with the name Label\r\n- **What happened?**\r\nThe code generation created a KeyValue mapper with Label =>Label and PredictedLabel=>PredictedLabel \r\n\r\n\r\n```\r\npublic static IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext)\r\n{\r\n\t// Data process configuration with pipeline data transformations \r\n\tvar dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\", \"Label\")\r\n\t\t\t\t\t\t\t  .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"F1\", \"F2\", \"F3\"}));\r\n\r\n\t// Set the training algorithm \r\n\tvar trainer = mlContext.MulticlassClassification.Trainers.LightGbm(labelColumnName: \"Label\", featureColumnName: \"Features\")\r\n\t\t\t\t\t\t\t  .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\n\tvar trainingPipeline = dataProcessPipeline.Append(trainer);\r\n\r\n\treturn trainingPipeline;\r\n}\r\n```\r\nWhen executing the training the code fails here\r\n\r\n![sample fails](https://user-images.githubusercontent.com/44400822/58049408-15cd8700-7b4d-11e9-989c-5d7c430f581c.PNG)\r\n\r\n\r\n\r\n- **What did you expect?**\r\nWriting code that covers all possible issues is hard however as MapValueToKey goes to an internal field and MapKeyToValue cpmes from that internal field it might help not using the same name.\r\nWould be nice if the starter project would work, gives those that give the project a spin a positive vibe.\r\n\r\nPerhaps warn the user that he may needs to change the code, if this occurs, better would be if the issue doesn't happen.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3750","RelatedDescription":"Open issue \"AutoML Code generation generates failing code if the CSV provided have a header named Label\" (#3750)"},{"Id":"446271599","IsPullRequest":false,"CreatedAt":"2019-05-20T19:24:18","Actor":"markusmobius","Number":"3749","RawContent":null,"Title":"maxExperimentTimeInSeconds - possible to make it deterministic across machines","State":"open","Body":"We started using AutoML to classify about 15000 daily news articles into 50 topics (our early results with AutoML are excellent). We get a training set from a different pipeline that identifies with high precision topics (a community detection algorithm which works well in identifying natural daily topics but has poor recall). We use AutoML to train a multiclass classifier using the output from the first pipeline as the training set. We found that we get best recall by running AutoML a number of times (right now we use 9 times) and only use articles which are assigned to the same topic in a majority of cases with a threshold for the max score (our training set covers about 15% of articles in the daily corpus, a single run of Automl increases to about 25% and the multiple-run hack increases it to 35%).\r\n\r\nOne thing which we don't understand is the maxExperimentTimeInSeconds parameter when calling: \r\nCreateMulticlassClassificationExperiment\r\n\r\nWe are running AutoML across different machines on Windows and Linux with different cores etc. We found that the depth of the experiment pipeline varies a lot across machines - maybe because things take longer on less powerful servers.\r\n\r\nIt would be great if one could control the depth of the AutoML search by another way than maxExperimentTimeInSeconds. \r\n\r\nPossibly related issue: we found that when running AutoML as part of process that consumes about 60GB of memory the experiment take double as long as when we run it with the same data on its own. Moreover, when calling autoML successively (even when creating a new mlContext) the runtimes becomes longer and longer and the depth of the AutoML search becomes shorter (even with maxExperimentTimeInSeconds constant).\r\n\r\nWe therefore now run the AutoML pipeline in a separate child process (one run at a time, then destroy the child process and start fresh; memory consumption is about 2G per run) which produces similar runtimes and depth across runs. But it would be nice to avoid this.","Url":"https://github.com/dotnet/machinelearning/issues/3749","RelatedDescription":"Open issue \"maxExperimentTimeInSeconds - possible to make it deterministic across machines\" (#3749)"},{"Id":"445992438","IsPullRequest":false,"CreatedAt":"2019-05-20T08:43:21","Actor":"PeterPann23","Number":"3748","RawContent":null,"Title":"Add sample for use with Binary dataset","State":"open","Body":"\r\n[Enter feedback here]\r\n\r\nWould be nice to show how a binary file can be used (and re-used) to use strong typed data\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: d77f7787-449e-9eeb-9dc8-e7ca22091538\r\n* Version Independent ID: 2dca3efe-4be8-72c3-0e71-226c2183cc89\r\n* Content: [DataOperationsCatalog.CreateEnumerable(IDataView, Boolean, Boolean, SchemaDefinition) Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.dataoperationscatalog.createenumerable?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3DEN-US%26k%3Dk(Microsoft.ML.DataOperationsCatalog.CreateEnumerable%60%601);k(SolutionItemsProject);k(DevLang-csharp)%26rd%3Dtrue&view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/DataOperationsCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/DataOperationsCatalog.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @sfilipi\r\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/3748","RelatedDescription":"Open issue \"Add sample for use with Binary dataset\" (#3748)"},{"Id":"445962127","IsPullRequest":false,"CreatedAt":"2019-05-20T07:28:21","Actor":"PeterPann23","Number":"3747","RawContent":null,"Title":"Feels like an endless loop","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nWindows Server 2019, \r\nWindows Server 2012, \r\nWindows 10\r\n\r\n- **.NET Version (eg., dotnet --info)**: \r\nDot net Core 3.0\r\nML 1.0.0\r\n[Dump header.txt](https://github.com/dotnet/machinelearning/files/3196652/Dump.header.txt)\r\n\r\n\r\n\r\n### Issue\r\n- **What did you do?**\r\nApplied the following training against a binary dataset of 77.7 Gb\r\n\r\n```\r\nvar featureColumns = Mapper.GetFieldNames();\r\nvar pipeline = mlContext.Transforms.Concatenate(outputColumnName: RawFeatures, inputColumnNames: featureColumns)\r\n        .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: KeyColumn, inputColumnName: Label))\r\n        .Append(mlContext.Transforms.NormalizeMinMax(outputColumnName:Features,inputColumnName: RawFeatures))\r\n        .Append(mlContext.MulticlassClassification.Trainers.LightGbm(options))\r\n        .Append(mlContext.Transforms.CopyColumns(inputColumnName: KeyColumn, outputColumnName: nameof(PredictedResult.PredictedLabelIndex)));\r\nvar model = pipeline.Fit(horizonDataset.TrainSet);\r\n```\r\nCreated the data set from a Tab Separated file size 398 GB\r\n\r\n- **What happened?**\r\n After some time the trainer seems to loop in memory and CPU performance idles at bellow 20% \r\n![Attached Debugger](https://user-images.githubusercontent.com/44400822/58003126-6955bb80-7ae0-11e9-8f5b-d572f7f86bf2.PNG)\r\n\r\n\r\n![Attached Debugger2](https://user-images.githubusercontent.com/44400822/58003354-df5a2280-7ae0-11e9-9fc6-a36030517221.PNG)\r\n\r\n\r\n- **What did you expect?**\r\nExpect the model to train in a linear manner in the same way as a smaller dataset does, where each GB takes a approximate time, multiply the GB and you get a projected finish time.\r\n\r\nI have reported this several times already, it is hard to discover if the system is \"alive\" or looping this becomes problematic after a few days of no feedback. if you need to access my process perhaps we do a live share session\r\n\r\n### Source code / logs\r\n\r\n[MLContext Log](https://github.com/dotnet/machinelearning/files/3196620/2019.05.19.102043_log.rpt.zip)","Url":"https://github.com/dotnet/machinelearning/issues/3747","RelatedDescription":"Open issue \"Feels like an endless loop\" (#3747)"},{"Id":"445816778","IsPullRequest":true,"CreatedAt":"2019-05-19T12:56:26","Actor":"jwood803","Number":"3746","RawContent":null,"Title":"WIP: Update nullable value to GetValueOrDefault","State":"open","Body":"Update for #2612. Set as WIP to start getting feedback.\r\n\r\n@TomFinley Just let me know if I missed anything.","Url":"https://github.com/dotnet/machinelearning/pull/3746","RelatedDescription":"Open PR \"WIP: Update nullable value to GetValueOrDefault\" (#3746)"},{"Id":"445623406","IsPullRequest":true,"CreatedAt":"2019-05-17T21:24:30","Actor":"najeeb-kazmi","Number":"3745","RawContent":null,"Title":"Adding samples for data save and load from text and binary files","State":"open","Body":"Fixes #3661 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3745","RelatedDescription":"Open PR \"Adding samples for data save and load from text and binary files\" (#3745)"},{"Id":"445201612","IsPullRequest":true,"CreatedAt":"2019-05-17T19:55:15","Actor":"PranovD","Number":"3742","RawContent":null,"Title":"These changes allow for ML.NET to be built from source by VS2019 ","State":"closed","Body":"Fixes [#3739](https://github.com/dotnet/machinelearning/issues/3739)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3742","RelatedDescription":"Closed or merged PR \"These changes allow for ML.NET to be built from source by VS2019 \" (#3742)"},{"Id":"445181624","IsPullRequest":false,"CreatedAt":"2019-05-17T19:55:15","Actor":"PranovD","Number":"3739","RawContent":null,"Title":"Unable to build ML.NET from source with Visual Studio 2019","State":"closed","Body":"### Issue\r\n\r\n- **What did you do?**: I tried to build ML.NET from the developer's guide using Visual Studio 2019\r\n- **What happened?**: The build failed\r\n\r\n`Error: Visual Studio 2015 or 2017 required.`\r\n\r\nIn src/Native/build.cmd at line 64:\r\n`:VS2019`\r\n`:: Setup vars for VS2019`\r\n`set __PlatformToolset=v142`\r\n`set __VSVersion=15 2017`\r\n`if NOT \"%__BuildArch%\" == \"arm64\" (`\r\n`    :: Set the environment for the native build`\r\n`    call \"%VS160COMNTOOLS%..\\..\\VC\\Auxiliary\\Build\\vcvarsall.bat\" %__VCBuildArch%`\r\n`)`\r\n\r\nNeeds to be `set __VSVersion=16 2019`\r\n\r\nAlso cmake needs to be of version 3.14 or higher as it contains the generator for Visual Studion 2019\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3739","RelatedDescription":"Closed issue \"Unable to build ML.NET from source with Visual Studio 2019\" (#3739)"},{"Id":"445175647","IsPullRequest":true,"CreatedAt":"2019-05-17T16:59:39","Actor":"shmoradims","Number":"3738","RawContent":null,"Title":"Added sample for WithOnFitDelegate","State":"closed","Body":"Fixes #3732 ","Url":"https://github.com/dotnet/machinelearning/pull/3738","RelatedDescription":"Closed or merged PR \"Added sample for WithOnFitDelegate\" (#3738)"},{"Id":"444869499","IsPullRequest":false,"CreatedAt":"2019-05-17T16:59:39","Actor":"PeterPann23","Number":"3732","RawContent":null,"Title":"Mising code sample","State":"closed","Body":"\r\n[Enter feedback here]\r\nThere is no code sample for the use of this method. \r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 64513161-127f-5e7a-b518-9a769f318b62\r\n* Version Independent ID: ce31be65-31c5-df38-73f2-c1d5cca46396\r\n* Content: [LearningPipelineExtensions.WithOnFitDelegate(IEstimator&lt;TTransformer&gt;, Action&lt;TTransformer&gt;) Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.learningpipelineextensions.withonfitdelegate?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/LearningPipelineExtensions.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/LearningPipelineExtensions.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @sfilipi\r\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/3732","RelatedDescription":"Closed issue \"Mising code sample\" (#3732)"},{"Id":"445523066","IsPullRequest":false,"CreatedAt":"2019-05-17T16:29:16","Actor":"PeterPann23","Number":"3744","RawContent":null,"Title":"Why do I need to have the Lable field in the CreatePredictionEngine<TSrc,> class","State":"open","Body":"Hi,\r\n\r\nI am wondering why shoeld TSrc in MLContext.Model.CreatePredictionEngine<TSrc, TDst> contain the Label fields as it should not need it to make a prediction. I get it why the other fields needs to be there but the one fields if's supposed to predict is the one it should be able to do without. \r\nOmitting the fields in your class however would cause an exception when calling CreatePredictionEngine().\r\n\r\nIs this intentional? ","Url":"https://github.com/dotnet/machinelearning/issues/3744","RelatedDescription":"Open issue \"Why do I need to have the Lable field in the CreatePredictionEngine<TSrc,> class\" (#3744)"},{"Id":"445363969","IsPullRequest":false,"CreatedAt":"2019-05-17T10:01:39","Actor":"larsbeck","Number":"3743","RawContent":null,"Title":"Question: Deep Learning and Doc2Vec","State":"open","Body":"Hi, \r\n\r\nI was wondering if there are any plans to allow modeling deep neural networks. I know that it is possible to consume Tensorflow models. I am interested in creating and training models directly in ml.net\r\n\r\nUnrelated to the first question: Are there any plans to implement Doc2vec as an alternative to the current FeaturizeText feature.\r\n\r\nIn case this issue tracker is the wrong place to ask questions, please point me to the site you might be using for questions.\r\n\r\nThanks, \r\n\r\nLars","Url":"https://github.com/dotnet/machinelearning/issues/3743","RelatedDescription":"Open issue \"Question: Deep Learning and Doc2Vec\" (#3743)"},{"Id":"445175244","IsPullRequest":false,"CreatedAt":"2019-05-17T07:41:47","Actor":"hugoterelle","Number":"3737","RawContent":null,"Title":"Unable to train model if the Label of the training dataset are always the same","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: dotnet core 2.2, ML.NET 1.0\r\n\r\n### Issue\r\n\r\nI want to train a model using this class:\r\n\r\n```\r\n    public class TagData\r\n    {\r\n        [LoadColumn(0)]\r\n        public string Label;\r\n\r\n        [LoadColumn(1)]\r\n        public string Text;\r\n\r\n        [LoadColumn(2)]\r\n        public string CustomerId;\r\n    }\r\n```\r\nAnd my pipeline is written as follow:\r\n\r\n```\r\nvar dataView = mlContext.Data.LoadFromEnumerable(tagDatas);\r\n\r\n var pipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\", \"Label\")\r\n                            .Append(mlContext.Transforms.Text.FeaturizeText(\"TextFeaturized\", nameof(TagData.Text)))\r\n                            .Append(mlContext.Transforms.Text.FeaturizeText(\"CustomerIdFeaturized\", nameof(TagData.CustomerId)))\r\n                            .Append(mlContext.Transforms.Concatenate(\"Features\", \"TextFeaturized\", \"CustomerIdFeaturized\"))\r\n                            .Append(mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy())\r\n                            .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n\r\nvar model = pipeline.Fit(dataView);\r\n\r\n```\r\n\r\n**My first test**\r\n\r\nTagDatas is a collection of 3 objects where:\r\n- `CustomerId` is identical in all objects\r\n- `Text` is always different\r\n- `Label` (the value I want to predict in the future) is always **different**\r\n\r\nEverything woks fine.\r\n\r\n**My second test**\r\n\r\nTagDatas is a collection of 3 objects where:\r\n- `CustomerId` is identical in all objects\r\n- `Text` is always different\r\n- `Label` (the value I want to predict in the future) is always **identical**\r\n\r\nProblem: The instruction `pipeline.Fit(dataview);` never ends (and the process keeps consuming a lot of memory & CPU)\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3737","RelatedDescription":"Closed issue \"Unable to train model if the Label of the training dataset are always the same\" (#3737)"},{"Id":"445189971","IsPullRequest":true,"CreatedAt":"2019-05-16T22:43:34","Actor":"artidoro","Number":"3741","RawContent":null,"Title":"Added omp requirement to build on Linux on README","State":"open","Body":"Fixes #3740.\r\n\r\nAdds requirement and sample command to build on Linux.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3741","RelatedDescription":"Open PR \"Added omp requirement to build on Linux on README\" (#3741)"},{"Id":"445189592","IsPullRequest":false,"CreatedAt":"2019-05-16T22:42:03","Actor":"artidoro","Number":"3740","RawContent":null,"Title":"Missing requirement in building guidelines for Linux","State":"open","Body":"Using the given commands I am not able to build on Ubuntu 18.04 because of missing libomp-dev.","Url":"https://github.com/dotnet/machinelearning/issues/3740","RelatedDescription":"Open issue \"Missing requirement in building guidelines for Linux\" (#3740)"},{"Id":"445120031","IsPullRequest":false,"CreatedAt":"2019-05-16T19:23:09","Actor":"knbz","Number":"3736","RawContent":null,"Title":" Source code / logs","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3736","RelatedDescription":"Open issue \" Source code / logs\" (#3736)"},{"Id":"445003008","IsPullRequest":false,"CreatedAt":"2019-05-16T14:54:23","Actor":"Doggie52","Number":"3735","RawContent":null,"Title":"[Model Builder] Canceling training should not discard current results","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10.0.18362 x64\r\n- **.NET Version (eg., dotnet --info)**:  2.1.507\r\n- **ML.NET Model Builder version**: 16.0.1905.641\r\n- **Visual Studio 2017 version**: 15.9.12\r\n\r\n### Issue\r\n\r\n- **What did you do?** Ran Model Builder and started Training. After noticing that accuracy was not improving, I decided to cancel the training.\r\n- **What happened?** Progress was canceled and I was unable to proceed to the Evaluate stage.\r\n- **What did you expect?** I wanted to continue to the Evaluate stage to take the so far best performing model forward.\r\n\r\nPossibly related to #844 although that issue I believe is for training one particular model, whereas this is for training multiple models.\r\n\r\n### Source code / logs\r\n\r\n![image](https://user-images.githubusercontent.com/4928988/57863894-cb69a480-77f2-11e9-8644-b10ce7c2337a.png)\r\n\r\nAs you can see, no link to Evaluate was present beneath the results.","Url":"https://github.com/dotnet/machinelearning/issues/3735","RelatedDescription":"Open issue \"[Model Builder] Canceling training should not discard current results\" (#3735)"},{"Id":"444894978","IsPullRequest":false,"CreatedAt":"2019-05-16T11:10:28","Actor":"Doggie52","Number":"3734","RawContent":null,"Title":"[Model Builder] Best accuracy not found in Top 5 models","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10.0.18362 x64\r\n- **.NET Version (eg., dotnet --info)**:  2.1.507\r\n- **ML.NET Model Builder version**: 16.0.1905.641\r\n- **Visual Studio 2017 version**: 15.9.12\r\n\r\n### Issue\r\n\r\n- **What did you do?** Ran ML.NET Model Builder in Visual Studio and trained a binary classification model for 120 seconds\r\n- **What happened?** The _Best Model Accuracy_ was given as 80.65% but the best model in the Top 5 models was listed as having 75.00% accuracy. See picture below for an example\r\n- **What did you expect?** I would expect the _Best Model Accuracy_ to match the best model's  accuracy perfectly.\r\n\r\n### Source code / logs\r\n\r\n![image](https://user-images.githubusercontent.com/4928988/57849473-4a4ee500-77d3-11e9-988a-8bbcfe73b88c.png)\r\n\r\nDo let me know if you need any logs or otherwise.","Url":"https://github.com/dotnet/machinelearning/issues/3734","RelatedDescription":"Open issue \"[Model Builder] Best accuracy not found in Top 5 models\" (#3734)"},{"Id":"444873476","IsPullRequest":false,"CreatedAt":"2019-05-16T10:20:27","Actor":"PeterPann23","Number":"3733","RawContent":null,"Title":"WithOnFitDelegate test coverage and code samples","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: \r\nWindows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\nRelease 1.0.0.0. \r\n\r\n### Issue\r\n- **Related**\r\n#3732  \r\n\r\n- **What did you do?**\r\nLooked for implementations of any samples or tests in regards of how to use the WithOnFitDelegate. I have found none, no unit tests, no samples and not much documentation even though it looks like all networks cal on fit in one way or another. \r\n\r\n- **What did you expect?**\r\nI expect to find some documentation on the method as it allows on looking at the progress of the model being build\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3733","RelatedDescription":"Open issue \"WithOnFitDelegate test coverage and code samples\" (#3733)"},{"Id":"444760854","IsPullRequest":true,"CreatedAt":"2019-05-16T05:28:46","Actor":"srsaggam","Number":"3731","RawContent":null,"Title":"[AutoML] Fix for Column inference for R4 type column in different cultures ","State":"open","Body":"Looks like the column inference is getting wrong in some of the cultures like Deutsch and Finnish . \r\nSo making the parsing InvariantCulture","Url":"https://github.com/dotnet/machinelearning/pull/3731","RelatedDescription":"Open PR \"[AutoML] Fix for Column inference for R4 type column in different cultures \" (#3731)"},{"Id":"444179676","IsPullRequest":true,"CreatedAt":"2019-05-15T23:43:58","Actor":"shmoradims","Number":"3724","RawContent":null,"Title":"Added usage example for LogLossPerClass metric for multiclass trainers","State":"closed","Body":"Fixes #3672 ","Url":"https://github.com/dotnet/machinelearning/pull/3724","RelatedDescription":"Closed or merged PR \"Added usage example for LogLossPerClass metric for multiclass trainers\" (#3724)"},{"Id":"444671742","IsPullRequest":true,"CreatedAt":"2019-05-15T23:24:38","Actor":"srsaggam","Number":"3730","RawContent":null,"Title":"[AutoML] Reset the culture info back to its original value in the test case.","State":"closed","Body":"Reset the culture info back to its original value in the test case so that if the thread is reused else we do not have any side effects. Just to be safe.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3730","RelatedDescription":"Closed or merged PR \"[AutoML] Reset the culture info back to its original value in the test case.\" (#3730)"},{"Id":"444564610","IsPullRequest":false,"CreatedAt":"2019-05-15T17:44:44","Actor":"tbombach","Number":"3729","RawContent":null,"Title":"CLI does not support other cultures besides en-US","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 3.0.100-preview-5-011568\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRan CLI auto-train on a TSV file with culture set to Finnish.\r\n1. Set Windows Regional format to Finnish.\r\n    - Download the Finnish language pack from the Microsoft store (it's called suomi): https://www.microsoft.com/store/productId/9MW3PQ7SD3QK\r\n    - Change the format to \"Finnish (Finland)\" in `Windows settings -> Time & Language -> Region -> Regional format`\r\n2. Run CLI:\r\n    - `mlnet auto-train --task regression --dataset taxi-fare-train.csv --label-column-name fare_amount -- max-exploration-time 10`\r\n    - File: https://github.com/dotnet/machinelearning-samples/blob/master/samples/CLI/Regression_CLI/taxi-fare-train.csv\r\n\r\n- **What happened?**\r\nError:\r\n```\r\nException occured while exploring pipelines:\r\nProvided label column 'fare_amount' was of type String, but only type Single is allowed.\r\nPlease see the log file for more info.\r\nExiting ...\r\n```\r\n- **What did you expect?**\r\nSuccessful model training. Switching the regional format back to \"English (United States)\" allows training to complete successfully.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3729","RelatedDescription":"Open issue \"CLI does not support other cultures besides en-US\" (#3729)"},{"Id":"444294558","IsPullRequest":false,"CreatedAt":"2019-05-15T08:07:25","Actor":"PeterPann23","Number":"3728","RawContent":null,"Title":"documentation for the correct implmementation ExperimentResult progress handler for Multiclass","State":"open","Body":"Haling a look at the AutoML API I have noted that documentation for [Multiclass experiment](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.automl.multiclassclassificationexperiment?view=automl-dotnet) does not document a progress handler. \r\n\r\nWould be nice if there is a way to get this documented as I feel that this can be usefull","Url":"https://github.com/dotnet/machinelearning/issues/3728","RelatedDescription":"Open issue \"documentation for the correct implmementation ExperimentResult progress handler for Multiclass\" (#3728)"},{"Id":"444228808","IsPullRequest":false,"CreatedAt":"2019-05-15T04:18:27","Actor":"sergey-tihon","Number":"3727","RawContent":null,"Title":"[AutoML] Auto detection of extra header rows mixed into the dataset","State":"open","Body":"I have dataset in text file with 20 columns, 1st column is the class name (string), other columns are features (floats)\r\n\r\nHere are first lines of this file\r\n```\r\nClass\tA1\tA2\tA3\tA4\tA5\tA6\tA7\tA8\tA9\tA10\tA11\tA12\tA13\tA14\tA15\tA16\tA17\tA18\tA19\r\nCS\t61.00000\t0.16855\t0.00000\t1.77778\t3.00000\t0.25375\t0.07984\t0.00169\t0.02250\t0.01535\t0.07984\t0.01027\t0.27415\t6.00000\t4.00000\t0.37649\t3552.00000\t0\t26.00000\r\nCS\t316.00000\t0.14823\t15.00000\t1.77778\t10.00000\t0.02352\t0.00440\t0.20407\t0.00357\t0.00914\t0.03585\t0.14171\t0.01674\t21.00000\t4.00000\t0.14961\t4235.00000\t0\t17.00000\r\nCS\t176.00000\t0.00000\t20.00000\t1.77778\t3.00000\t0.01850\t0.19659\t0.00469\t0.03895\t0.00000\t0.19659\t0.59670\t0.19659\t10.00000\t5.00000\t0.23767\t3850.00000\t0\t24.00000\r\nCS\t133.00000\t0.00000\t4.00000\t1.33333\t3.00000\t0.00049\t0.01214\t0.22827\t0.18777\t0.18778\t0.12627\t0.00915\t0.18777\t11.00000\t7.00000\t0.32619\t1880.00000\t0\t16.00000\r\nCS\t140.00000\t0.00000\t14.00000\t1.33333\t1.00000\t0.01787\t0.02860\t0.48472\t0.02860\t0.59853\t0.02860\t1.06538\t0.02860\t9.00000\t7.00000\t0.02860\t1876.00000\t0\t142.00000\r\n```\r\nand the full file [data.txt](https://github.com/dotnet/machinelearning/files/3180842/data.txt)\r\n\r\nLet's execute AutoML\r\n\r\n> mlnet auto-train --task `multiclass-classification` --dataset \"data.txt\" --has-header --label-column-name `Class` --max-exploration-time 10\r\n\r\nas a  results AutoML will generate `ModelInput.cs` file that starts like this\r\n```csharp\r\n public class ModelInput\r\n    {\r\n        [ColumnName(\"Class\"), LoadColumn(0)]\r\n        public string Class { get; set; }\r\n        [ColumnName(\"A1\"), LoadColumn(1)]\r\n        public string A1 { get; set; }\r\n        [ColumnName(\"A2\"), LoadColumn(2)]\r\n        public string A2 { get; set; }\r\n        [ColumnName(\"A3\"), LoadColumn(3)]\r\n        public string A3 { get; set; }\r\n```\r\n\r\nall columns are recognized as `string` instead of `float` 😢\r\n\r\nas a result data pipeline also incorrect (`OneHotEncoding` was applied to numeric columns)\r\n```csharp\r\n            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Class\", \"Class\")\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(new[]\r\n                {\r\n                    new InputOutputColumnPair(\"A3\", \"A3\"), new InputOutputColumnPair(\"A4\", \"A4\"),\r\n                    new InputOutputColumnPair(\"A5\", \"A5\"), new InputOutputColumnPair(\"A14\", \"A14\"),\r\n                    new InputOutputColumnPair(\"A15\", \"A15\"), new InputOutputColumnPair(\"A18\", \"A18\")\r\n                }))\r\n                .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(new[]\r\n                {\r\n                    new InputOutputColumnPair(\"A1\", \"A1\"), new InputOutputColumnPair(\"A2\", \"A2\"),\r\n                    new InputOutputColumnPair(\"A6\", \"A6\"), new InputOutputColumnPair(\"A17\", \"A17\"),\r\n                    new InputOutputColumnPair(\"A19\", \"A19\")\r\n                }))\r\n                .Append(mlContext.Transforms.Concatenate(\"Features\",\r\n                    new[] {\"A3\", \"A4\", \"A5\", \"A14\", \"A15\", \"A18\", \"A1\", \"A2\", \"A6\", \"A17\", \"A19\"}))\r\n                .Append(mlContext.Transforms.NormalizeMinMax(\"Features\", \"Features\"))\r\n                .AppendCacheCheckpoint(mlContext);\r\n```\r\n\r\nWhy in this case all columns recognized as strings?\r\nWhy in some columns `OneHotHashEncoding` was used instead of `OneHotEncoding`?","Url":"https://github.com/dotnet/machinelearning/issues/3727","RelatedDescription":"Open issue \"[AutoML] Auto detection of extra header rows mixed into the dataset\" (#3727)"},{"Id":"444217445","IsPullRequest":false,"CreatedAt":"2019-05-15T03:20:59","Actor":"danmosemsft","Number":"3726","RawContent":null,"Title":"What is the CLR bug mentioned in Div64Core","State":"open","Body":"I notice this in the code. Does anyone know where the mentioned CLR issue is tracked? I am curious whether we are fixing it.\r\n```\r\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n        private static ulong Div64(ulong lo, ulong hi, ulong den, out ulong rem)\r\n        {\r\n            if (den == 0)\r\n                throw new DivideByZeroException();\r\n            if (hi >= den)\r\n                throw new OverflowException();\r\n            return Div64Core(lo, hi, den, out rem);\r\n        }\r\n\r\n        // REVIEW: on Linux, the hardware divide-by-zero exception is not translated into\r\n        // a managed exception properly by CoreCLR so the process will crash. This is a temporary fix\r\n        // until CoreCLR addresses this issue.\r\n        [DllImport(Thunk.NativePath, CharSet = CharSet.Unicode, EntryPoint = \"Div64\"), SuppressUnmanagedCodeSecurity]\r\n        private static extern ulong Div64Core(ulong lo, ulong hi, ulong den, out ulong rem);\r\n#endif\r\n```\r\n\r\n@TomFinley @eerhardt  @tannergooding ","Url":"https://github.com/dotnet/machinelearning/issues/3726","RelatedDescription":"Open issue \"What is the CLR bug mentioned in Div64Core\" (#3726)"},{"Id":"444180738","IsPullRequest":true,"CreatedAt":"2019-05-15T00:23:21","Actor":"srsaggam","Number":"3725","RawContent":null,"Title":"[AutoML] Fix Internationalization bug in generated project. ","State":"closed","Body":"Looks like in Deutsch culture the floats are causing compilation errors in generated project because of the strings that generated floats are culture specific. Need to make them culture invariant.\r\n\r\nExample : 1.1 -> 1,1 (deutsch)\r\ncloses #3677 ","Url":"https://github.com/dotnet/machinelearning/pull/3725","RelatedDescription":"Closed or merged PR \"[AutoML] Fix Internationalization bug in generated project. \" (#3725)"},{"Id":"444176056","IsPullRequest":false,"CreatedAt":"2019-05-14T23:55:41","Actor":"glebuk","Number":"3723","RawContent":null,"Title":"IDataView Type System needs to be extensible to support Image scenarios properly","State":"open","Body":"### The Problem\r\nCurrently it is impossible make prediction from images if they do not come from file.  PredictionEngine<IT,OT> and IEnumerable<T> to IDV is impossible if T contains images/\r\n\r\n### The Root Cause\r\nThe fundamental issue is that in several places in our system,  our types are hardcoded and limited to a small set. Actual IDataView type system IS open, so it should be possible to support any type. However, some of our machinery is not so extensible.   For example, if we need to add full support of images, we would need to update:\r\n- converters between IEnumerable<T> <-> IDataView, \r\n- PredictionEngine<> \r\n- API Utils, \r\n- Schema utils \r\n- etc.\r\n\r\nWhat we need is a dependency-injection mechanism to allow component developers to inject definitions of types supported by our IDV machinery.  Such mechanism should be flexible and extensible.  For an example of hard-coded implementation, check #3263.  It is illustrative but incorrect as it is not flexible.  Note @TomFinley's comment on different options on how to do this properly.  We need to define a mechanism that is extensible, so that a dev can add new transforms to work on new data types, such as sound and enjoy all benefits of ML.NET\r\n\r\n### Definition of Done:\r\n- Mechanism to register additional IDV types so that they are supported by PredictionEngine and IEnumerable converters.\r\n- Add such registration for images and date types\r\n- Ensure that the registration (at least for images)  occurs automatically whenever appropriate component is used (for example, if image resizing transform is used, the image type is registered automatically )\r\n- Ensure that prediction engine, conversion to and from IEnumerable work correctly with tests.\r\n\r\n### The following issues will also be solved by this issue:\r\n#3369, #3460, #3582, #2121, #2495, #3582, #3274\r\nIn addition, this work is needed to properly support ONNX and TF scenarios for structured data such as image, speech, video, or Audio.","Url":"https://github.com/dotnet/machinelearning/issues/3723","RelatedDescription":"Open issue \"IDataView Type System needs to be extensible to support Image scenarios properly\" (#3723)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-05-21T05:30:37.4245128Z","RunDurationInMilliseconds":743}