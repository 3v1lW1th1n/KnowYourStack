{"Data":{"GitHub":{"Issues":[{"Id":"415433234","IsPullRequest":false,"CreatedAt":"2019-02-28T03:43:07","Actor":"bartczernicki","Number":"2787","RawContent":null,"Title":"FastForest - Add Probability for predictions","State":"open","Body":"Add probability response for inference to the Fast Forest algorithm.","Url":"https://github.com/dotnet/machinelearning/issues/2787","RelatedDescription":"Open issue \"FastForest - Add Probability for predictions\" (#2787)"},{"Id":"415365770","IsPullRequest":false,"CreatedAt":"2019-02-28T02:16:16","Actor":"Dmitry-A","Number":"2776","RawContent":null,"Title":"broken links in documentation search results","State":"closed","Body":"Go to \r\nhttps://review.docs.microsoft.com/en-us/dotnet/api/microsoft.ml?view=ml-dotnet&branch=smoke-test-preview\r\nType IEstimator in the search box\r\nA few search results appear, first one being:\r\nMicrosoft.ML.Core.Data.IEstimator<TTransformer> Interface\r\nLinking to https://review.docs.microsoft.com/en-us/dotnet/api/microsoft.ml.core.data.iestimator-1?view=ml-dotnet\r\n\r\nThis link goes to 404\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2776","RelatedDescription":"Closed issue \"broken links in documentation search results\" (#2776)"},{"Id":"415378405","IsPullRequest":true,"CreatedAt":"2019-02-28T01:11:06","Actor":"wschin","Number":"2782","RawContent":null,"Title":"[Tiny Change] One-line renaming","State":"closed","Body":"As title.","Url":"https://github.com/dotnet/machinelearning/pull/2782","RelatedDescription":"Closed or merged PR \"[Tiny Change] One-line renaming\" (#2782)"},{"Id":"415249343","IsPullRequest":false,"CreatedAt":"2019-02-28T00:33:28","Actor":"Ivanidzo4ka","Number":"2760","RawContent":null,"Title":"Consistency in feature/label/weight/group names in LearnerInputBase classes","State":"closed","Body":"We have this class which is base class for all(almost except KMeans) Trainers.Options\r\nhttps://github.com/dotnet/machinelearning/blob/d4f2dcfbc11d7081748408d20c35d3e2ff2aa143/src/Microsoft.ML.Data/EntryPoints/InputBase.cs#L42\r\n\r\nIn trainer catalog we use following names:\r\n```\r\n/// <param name=\"labelColumnName\">The name of the label column.</param>\r\n/// <param name=\"featureColumnName\">The name of the feature column.</param>\r\n/// <param name=\"rowGroupColumnName\">The name of the group column.</param>\r\n/// <param name=\"exampleWeightColumnName\">The name of the example weight column (optional).</param>\r\n```\r\nIt doesn't feel right to have this names in catalog and have other names in options class.\r\nSo we should make them consistent and update LearnerInputBase class to ones we use in catalog.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2760","RelatedDescription":"Closed issue \"Consistency in feature/label/weight/group names in LearnerInputBase classes\" (#2760)"},{"Id":"415389466","IsPullRequest":false,"CreatedAt":"2019-02-28T00:25:41","Actor":"codemzs","Number":"2786","RawContent":null,"Title":"Rename Microsoft.ML.StandardLearners to Microsoft.ML.StandardTrainers.","State":"open","Body":"CC: @TomFinley , @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/2786","RelatedDescription":"Open issue \"Rename Microsoft.ML.StandardLearners to Microsoft.ML.StandardTrainers.\" (#2786)"},{"Id":"415280938","IsPullRequest":true,"CreatedAt":"2019-02-28T00:11:40","Actor":"codemzs","Number":"2764","RawContent":null,"Title":"Package FastTree.","State":"closed","Body":"fixes #2752\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2764","RelatedDescription":"Closed or merged PR \"Package FastTree.\" (#2764)"},{"Id":"415383318","IsPullRequest":false,"CreatedAt":"2019-02-28T00:00:39","Actor":"sfilipi","Number":"2785","RawContent":null,"Title":"GetExecutingAssemblyLocation in the DNNImageFeaturizers composes the wrong path","State":"open","Body":"Create a console project, add the MIcrosoft.ML, the Microsoft.Ml.OnnxTransformer and one of the Microsoft.ML.DnnImageFeaturizer packages. \r\n\r\nTry running the following snippet:\r\n\r\n             // Downloading a few images, and an images.tsv file, which contains a list of the files from the dotnet/machinelearning/test/data/images/.\r\n            // If you inspect the fileSystem, after running this line, an \"images\" folder will be created, containing 4 images, and a .tsv file\r\n            // enumerating the images. \r\n            var imagesDataFile = Microsoft.ML.SamplesUtils.DatasetUtils.DownloadImages();\r\n\r\n            // Preview of the content of the images.tsv file\r\n            //\r\n            // imagePath    imageType\r\n            // tomato.bmp   tomato\r\n            // banana.jpg   banana\r\n            // hotdog.jpg   hotdog\r\n            // tomato.jpg   tomato\r\n\r\n            var data = mlContext.Data.CreateTextLoader(new TextLoader.Options()\r\n            {\r\n                Columns = new[]\r\n                {\r\n                        new TextLoader.Column(\"ImagePath\", DataKind.String, 0),\r\n                        new TextLoader.Column(\"Name\", DataKind.String, 1),\r\n                }\r\n            }).Load(imagesDataFile);\r\n\r\n            string codeBaseUri = typeof(Program).Assembly.CodeBase;\r\n            string path = new Uri(codeBaseUri).AbsolutePath;\r\n            var f =  Directory.GetParent(path).FullName;\r\n\r\n            var imagesFolder = Path.GetDirectoryName(imagesDataFile);\r\n            // Image loading pipeline. \r\n            var pipeline = mlContext.Transforms.LoadImages(imagesFolder, (\"ImageObject\", \"ImagePath\"))\r\n                          .Append(mlContext.Transforms.ResizeImages(\"ImageObject\", imageWidth: 224, imageHeight: 224))\r\n                          .Append(mlContext.Transforms.ExtractPixels(\"Pixels\", \"ImageObject\"))\r\n                           //.Append(mlContext.Transforms.DnnFeaturizeImage(\"FeaturizedImage\", m => m.ModelSelector.ResNet18(mlContext, m.OutputColumn, m.InputColumn, @\"C:\\Code\\mlnet2\\machinelearning-1\\bin\\AnyCPU.Debug\\Microsoft.ML.Samples\\netcoreapp2.1\\DnnImageModels\"), \"Pixels\"));\r\n                           .Append(mlContext.Transforms.DnnFeaturizeImage(\"FeaturizedImage\", m => m.ModelSelector.ResNet18(mlContext, m.OutputColumn, m.InputColumn), \"Pixels\"));\r\n\r\n            var transformedData = pipeline.Fit(data).Transform(data);\r\n\r\n            var preview = transformedData.Preview();\r\n\r\nYou'll notice that the program will fail with message:\r\n\r\n`System.ArgumentOutOfRangeException: 'Specified argument was out of the range of valid values. Parameter name: ModelFile'`\r\n\r\nThat is because the Resnet18 extension is looking for the model in the path created by [AssemblyPathHelper](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.DnnImageFeaturizer.AlexNet/AssemblyPathHelpers.cs)\r\n\r\nThe path created points to the  **lib\\netstandard2.0\\DnnImageModels\\**\r\nthe packages actually get downloaded in the  **\\tools\\DnnImageModels**  folder. \r\n\r\nFull path of the folders, inside the downloaded nuget packages. \r\n- constructed:  **microsoft.ml.dnnimagefeaturizer.resnet18\\<version>\\lib\\netstandard2.0\\DnnImageModels\\**\r\n- actual location of the DnnImageModels folder:  **microsoft.ml.dnnimagefeaturizer.resnet18\\<version>\\tools\\DnnImageModels**\r\n\r\nNeed to construct the correct path. ","Url":"https://github.com/dotnet/machinelearning/issues/2785","RelatedDescription":"Open issue \"GetExecutingAssemblyLocation in the DNNImageFeaturizers composes the wrong path\" (#2785)"},{"Id":"415381137","IsPullRequest":false,"CreatedAt":"2019-02-27T23:52:04","Actor":"sfilipi","Number":"2784","RawContent":null,"Title":"Message related to missing models not sufficiently helpful in DNNImageFeaturizers packages","State":"open","Body":"Create a new console project, and try running the following sample:\r\n\r\n\r\n             // Downloading a few images, and an images.tsv file, which contains a list of the files from the dotnet/machinelearning/test/data/images/.\r\n            // If you inspect the fileSystem, after running this line, an \"images\" folder will be created, containing 4 images, and a .tsv file\r\n            // enumerating the images. \r\n            var imagesDataFile = Microsoft.ML.SamplesUtils.DatasetUtils.DownloadImages();\r\n            var data = mlContext.Data.CreateTextLoader(new TextLoader.Options()\r\n            {\r\n                Columns = new[]\r\n                {\r\n                        new TextLoader.Column(\"ImagePath\", DataKind.String, 0),\r\n                        new TextLoader.Column(\"Name\", DataKind.String, 1),\r\n                }\r\n            }).Load(imagesDataFile);\r\n\r\n            string codeBaseUri = typeof(Program).Assembly.CodeBase;\r\n            string path = new Uri(codeBaseUri).AbsolutePath;\r\n            var f =  Directory.GetParent(path).FullName;\r\n\r\n            var imagesFolder = Path.GetDirectoryName(imagesDataFile);\r\n            // Image loading pipeline. \r\n            var pipeline = mlContext.Transforms.LoadImages(imagesFolder, (\"ImageObject\", \"ImagePath\"))\r\n                          .Append(mlContext.Transforms.ResizeImages(\"ImageObject\", imageWidth: 224, imageHeight: 224))\r\n                          .Append(mlContext.Transforms.ExtractPixels(\"Pixels\", \"ImageObject\"))\r\n                           //.Append(mlContext.Transforms.DnnFeaturizeImage(\"FeaturizedImage\", m => m.ModelSelector.ResNet18(mlContext, m.OutputColumn, m.InputColumn, @\"C:\\Code\\mlnet2\\machinelearning-1\\bin\\AnyCPU.Debug\\Microsoft.ML.Samples\\netcoreapp2.1\\DnnImageModels\"), \"Pixels\"));\r\n                           .Append(mlContext.Transforms.DnnFeaturizeImage(\"FeaturizedImage\", m => m.ModelSelector.ResNet18(mlContext, m.OutputColumn, m.InputColumn), \"Pixels\"));\r\n\r\n            var transformedData = pipeline.Fit(data).Transform(data);\r\n\r\n            var preview = transformedData.Preview();\r\n\r\nYou'll notice that the program fails with the following exception:\r\n\r\n`System.ArgumentOutOfRangeException: 'Specified argument was out of the range of valid values.\r\nParameter name: ModelFile'`\r\n\r\nThe message is not sufficiently helpful. ","Url":"https://github.com/dotnet/machinelearning/issues/2784","RelatedDescription":"Open issue \"Message related to missing models not sufficiently helpful in DNNImageFeaturizers packages\" (#2784)"},{"Id":"415381054","IsPullRequest":true,"CreatedAt":"2019-02-27T23:51:44","Actor":"jwood803","Number":"2783","RawContent":null,"Title":"Add missing KeyType documentation","State":"open","Body":"Fix for #2333.\r\n\r\nHopefully, this is a good start. I'm sure some wording could be updated. :)","Url":"https://github.com/dotnet/machinelearning/pull/2783","RelatedDescription":"Open PR \"Add missing KeyType documentation\" (#2783)"},{"Id":"415239891","IsPullRequest":true,"CreatedAt":"2019-02-27T23:49:47","Actor":"maryamariyan","Number":"2759","RawContent":null,"Title":"Remove unused fileHandle","State":"closed","Body":"fileHandle variable is not used in the code block. The logic for which it was used is deleted and therefore no need for fileHandle variable.\r\n\r\nCode cleanup from PR: https://github.com/dotnet/machinelearning/pull/2568\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2759","RelatedDescription":"Closed or merged PR \"Remove unused fileHandle\" (#2759)"},{"Id":"415362631","IsPullRequest":true,"CreatedAt":"2019-02-27T23:37:27","Actor":"shauheen","Number":"2775","RawContent":null,"Title":"Merge master into release/preview for 0.11","State":"closed","Body":"This PR merges master into release branch for 0.11","Url":"https://github.com/dotnet/machinelearning/pull/2775","RelatedDescription":"Closed or merged PR \"Merge master into release/preview for 0.11\" (#2775)"},{"Id":"415374745","IsPullRequest":true,"CreatedAt":"2019-02-27T23:27:10","Actor":"abgoswam","Number":"2781","RawContent":null,"Title":"Sample for ConvertType transform estimator","State":"open","Body":"Towards #1209\r\n\r\n- fix bug in ConvertType   (exception when trying to convert from Bool => Int)\r\n- add sample for ConvertType ","Url":"https://github.com/dotnet/machinelearning/pull/2781","RelatedDescription":"Open PR \"Sample for ConvertType transform estimator\" (#2781)"},{"Id":"415373425","IsPullRequest":true,"CreatedAt":"2019-02-27T23:22:25","Actor":"wschin","Number":"2780","RawContent":null,"Title":"Add an example of random PCA using in-memory data structure","State":"open","Body":"As title. It also shows some benefits of using in-memory data described in #2726.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2780","RelatedDescription":"Open PR \"Add an example of random PCA using in-memory data structure\" (#2780)"},{"Id":"415370385","IsPullRequest":true,"CreatedAt":"2019-02-27T23:11:27","Actor":"ganik","Number":"2779","RawContent":null,"Title":"OneHotEncoding sample","State":"open","Body":"Sample code for OneHotEncoding","Url":"https://github.com/dotnet/machinelearning/pull/2779","RelatedDescription":"Open PR \"OneHotEncoding sample\" (#2779)"},{"Id":"415367170","IsPullRequest":false,"CreatedAt":"2019-02-27T23:00:27","Actor":"CESARDELATORRE","Number":"2778","RawContent":null,"Title":"Possible Bug Tensorflow in v0.11 - Invalid argument: input must be 4-dimensional[224,224,3]","State":"open","Body":"Starting from [a working ML.NET sample](https://github.com/dotnet/machinelearning-samples/tree/migration/v.11/samples/csharp/getting-started/DeepLearning_ImageClassification_TensorFlow/ImageClassification) scoring the standard TensorFlow Inception v3 model (it was working on 0.9 and 0.10) after migrating to 0.11 (I just needed to fix a couple of breaking changes in the API) the model is now throwing the following exception: \r\n\r\nException from TensorFlow:\r\n\r\n```\r\n2019-02-27 14:56:18.800272: W tensorflow/core/framework/op_kernel.cc:1273] OP_REQUIRES failed at conv_ops.cc:437 : Invalid argument: input must be 4-dimensional[224,224,3]\r\n\r\nEXCEPTION\r\n#########\r\ninput must be 4-dimensional[224,224,3]\r\n         [[{{node conv2d0_pre_relu/conv}} = Conv2D[T=DT_FLOAT, data_format=\"NHWC\", dilations=[1, 1, 1, 1], padding=\"SAME\", strides=[1, 2, 2, 1], use_cudnn_on_gpu=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](_arg_input_0_0, conv2d0_w)]]\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/2778","RelatedDescription":"Open issue \"Possible Bug Tensorflow in v0.11 - Invalid argument: input must be 4-dimensional[224,224,3]\" (#2778)"},{"Id":"415366392","IsPullRequest":true,"CreatedAt":"2019-02-27T22:58:01","Actor":"codemzs","Number":"2777","RawContent":null,"Title":"Correct documentation for MapKeyToVector.","State":"open","Body":"fixes #2772\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2777","RelatedDescription":"Open PR \"Correct documentation for MapKeyToVector.\" (#2777)"},{"Id":"415339261","IsPullRequest":false,"CreatedAt":"2019-02-27T22:53:44","Actor":"vinodshanbhag","Number":"2769","RawContent":null,"Title":"BinaryClassificationMetrics is not sealed - but equivalent classes for regression and multiclass are","State":"closed","Body":"Inconsistency in API extensibility -- see title","Url":"https://github.com/dotnet/machinelearning/issues/2769","RelatedDescription":"Closed issue \"BinaryClassificationMetrics is not sealed - but equivalent classes for regression and multiclass are\" (#2769)"},{"Id":"415360401","IsPullRequest":false,"CreatedAt":"2019-02-27T22:39:25","Actor":"ganik","Number":"2774","RawContent":null,"Title":"OneHotEncoding with Outputkind.Bin spits out wrong dimension data arrays","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:  0.11.0-preview-27427-9 \r\n\r\n### Issue\r\nOneHotEncoding with Outputkind.Bin spits out data elements of 3-dimensional arrays, while 2 dimensional arrays expected. Outputkind.Ind and Outputkind.Bag are correctly spitting out 2 dimensional arrays. See repro source code below\r\n\r\n### Source code / logs\r\nusing System;\r\nusing System.Linq;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Transforms.Categorical;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class TestData\r\n    {\r\n        public string data;\r\n    }\r\n\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var trainData = new[] { new TestData() { data = \"male\" }, new TestData() { data = \"female\"} };\r\n            var testData = new[] { new TestData() { data = \"male\" }, new TestData() { data = \"female\" }, new TestData() { data = \"fem\" }, new TestData() { data = \"fem1\" } };\r\n\r\n            var mlContext = new MLContext();\r\n            var trainDataView = mlContext.Data.LoadFromEnumerable(trainData);\r\n            var testDataView = mlContext.Data.LoadFromEnumerable(testData);\r\n\r\n            var pipe = mlContext.Transforms.Categorical.OneHotEncoding(\"Bag\", \"data\", OneHotEncodingTransformer.OutputKind.Bag)\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Key\", \"data\", OneHotEncodingTransformer.OutputKind.Key))\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Ind\", \"data\", OneHotEncodingTransformer.OutputKind.Ind))\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Bin\", \"data\", OneHotEncodingTransformer.OutputKind.Bin));\r\n\r\n            var transformer = pipe.Fit(trainDataView);\r\n\r\n            var result = transformer.Transform(testDataView);\r\n\r\n            var bags = result.GetColumn<float[]>(mlContext, \"Bag\").ToArray();\r\n            var inds = result.GetColumn<float[]>(mlContext, \"Ind\").ToArray();\r\n            var bins = result.GetColumn<float[]>(mlContext, \"Bin\").ToArray();\r\n\r\n            Console.WriteLine(\"Number of dimensions (should be 2) in each output kind: {0} {1} {2}\", bags[0].Length, inds[0].Length, bins[0].Length);\r\n            // Number of dimensions (should be 2) in each output kind: 2 2 3\r\n        }\r\n    }\r\n}","Url":"https://github.com/dotnet/machinelearning/issues/2774","RelatedDescription":"Open issue \"OneHotEncoding with Outputkind.Bin spits out wrong dimension data arrays\" (#2774)"},{"Id":"415360016","IsPullRequest":true,"CreatedAt":"2019-02-27T22:38:09","Actor":"codemzs","Number":"2773","RawContent":null,"Title":"Sample for ReplaceMissingValues.","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2773","RelatedDescription":"Open PR \"Sample for ReplaceMissingValues.\" (#2773)"},{"Id":"415354925","IsPullRequest":false,"CreatedAt":"2019-02-27T22:22:43","Actor":"TomFinley","Number":"2772","RawContent":null,"Title":"KeyToVectorMappingEstimator catalog extension method summary is wrong","State":"open","Body":"This documentation appears to be incorrect.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/a0edc5c5724ed2895fd0c2fa5c2525d03de13455/src/Microsoft.ML.Data/Transforms/ConversionsExtensionsCatalog.cs#L93-L97\r\n\r\nThis is for taking a key value (or key values) and mapping it into a floating point vector suitable for learning (variously, one-hot-encoding, or bag-of-words vector, depending on the type of input data and other applications). But to say it \"converts it back to its original vector\" is in no way accurate.\r\n\r\nPerhaps someone got a little excited copying and pasting from the `KeyToValue` methods above.","Url":"https://github.com/dotnet/machinelearning/issues/2772","RelatedDescription":"Open issue \"KeyToVectorMappingEstimator catalog extension method summary is wrong\" (#2772)"},{"Id":"415349271","IsPullRequest":true,"CreatedAt":"2019-02-27T22:06:39","Actor":"shmoradims","Number":"2771","RawContent":null,"Title":"Docs & samples for SDCA-based trainers","State":"open","Body":"Docs & samples for SDCA binary, multi-class, and regression.\r\nRelated to #2522 ","Url":"https://github.com/dotnet/machinelearning/pull/2771","RelatedDescription":"Open PR \"Docs & samples for SDCA-based trainers\" (#2771)"},{"Id":"415342873","IsPullRequest":true,"CreatedAt":"2019-02-27T21:49:19","Actor":"zeahmed","Number":"2770","RawContent":null,"Title":"Created samples for StochasticGradientDescentNonCalibrated learner.","State":"open","Body":"Created samples for StochasticGradientDescentNonCalibrated learner exposed via following methods.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/a0edc5c5724ed2895fd0c2fa5c2525d03de13455/src/Microsoft.ML.StandardLearners/StandardLearnersCatalog.cs#L82\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/a0edc5c5724ed2895fd0c2fa5c2525d03de13455/src/Microsoft.ML.StandardLearners/StandardLearnersCatalog.cs#L102","Url":"https://github.com/dotnet/machinelearning/pull/2770","RelatedDescription":"Open PR \"Created samples for StochasticGradientDescentNonCalibrated learner.\" (#2770)"},{"Id":"415336271","IsPullRequest":false,"CreatedAt":"2019-02-27T21:31:39","Actor":"sfilipi","Number":"2768","RawContent":null,"Title":"One of the FeaturizeText extensions has the inputColumnNames as required","State":"open","Body":"The are two extensions for Featurize text. \r\n\r\n        public static TextFeaturizingEstimator FeaturizeText(this TransformsCatalog.TextTransforms catalog, string outputColumnName, string inputColumnName = null);\r\n\r\n        public static TextFeaturizingEstimator FeaturizeText(this TransformsCatalog.TextTransforms catalog, string outputColumnName, IEnumerable<string> inputColumnNames, TextFeaturizingEstimator.Options options);\r\n\r\nIMO,\r\n- On the first one, TextFeaturizingEstimator.Options options should exist as optional. \r\n- On the second one, TextFeaturizingEstimator.Options options should exist as optional. \r\n\r\nATM, if i want to use the TextFeaturizingEstimator.Options, i have to create an IEnumerable<string> for inputColumnNames and give it the output column name. \r\n\r\n    mlContext.Transforms.Text.FeaturizeText(\"CarrierName\",\r\n        Enumerable.Repeat(\"CarrierName\", 1),\r\n        new TextFeaturizingEstimator.Options\r\n        {\r\n                  KeepDiacritics = false,\r\n                  KeepPunctuations = false,\r\n                  TextCase =TextNormalizingEstimator.CaseNormalizationMode.Lower,\r\n                  OutputTokens = true,\r\n                  VectorNormalizer = TextFeaturizingEstimator.TextNormKind.L2\r\n         }))","Url":"https://github.com/dotnet/machinelearning/issues/2768","RelatedDescription":"Open issue \"One of the FeaturizeText extensions has the inputColumnNames as required\" (#2768)"},{"Id":"415332979","IsPullRequest":false,"CreatedAt":"2019-02-27T21:22:55","Actor":"yaeldekel","Number":"2767","RawContent":null,"Title":"IndicateMissingValues documentation","State":"open","Body":"The documentation for \r\n```\r\npublic static MissingValueIndicatorEstimator IndicateMissingValues(this TransformsCatalog catalog,\r\n            string outputColumnName,\r\n            string inputColumnName = null)\r\n```\r\nsays:\r\nCreates a new output column, or replaces the source with a new column (depending on whether the `outputColumnName` is given a value, or left to null) \r\n\r\nit should be:\r\nCreates a new output column, or replaces the source with a new column (depending on whether the `inputColumnName` is given a value, or left to null) ","Url":"https://github.com/dotnet/machinelearning/issues/2767","RelatedDescription":"Open issue \"IndicateMissingValues documentation\" (#2767)"},{"Id":"415322621","IsPullRequest":true,"CreatedAt":"2019-02-27T20:55:26","Actor":"Ivanidzo4ka","Number":"2766","RawContent":null,"Title":"Calibrators catalog introduction","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/2766","RelatedDescription":"Open PR \"Calibrators catalog introduction\" (#2766)"},{"Id":"415307291","IsPullRequest":true,"CreatedAt":"2019-02-27T20:15:32","Actor":"zeahmed","Number":"2765","RawContent":null,"Title":"Cleaning and Fixing public API for set of learners.","State":"open","Body":"This PR partially addressed #2620\r\n\r\nThe following learners are addressed in this PR.\r\n* `MatrixFactorizationTrainer`\r\n* `PriorTrainer`\r\n* `RandomTrainer`\r\n* `SymSgdClassificationTrainer`\r\n\r\nthe following tasks were performed in classes related to above learners.\r\n\r\n* Checking to make sure that unnecessary public methods/properties be `internal`.\r\n* Renaming parameters according to standard.\r\n* Creating/Refactoring samples according to standards.","Url":"https://github.com/dotnet/machinelearning/pull/2765","RelatedDescription":"Open PR \"Cleaning and Fixing public API for set of learners.\" (#2765)"},{"Id":"415276845","IsPullRequest":false,"CreatedAt":"2019-02-27T18:58:53","Actor":"Ivanidzo4ka","Number":"2763","RawContent":null,"Title":"LinearModelParameters have two ways to get Weights, should be one","State":"open","Body":"we have this:\r\nhttps://github.com/dotnet/machinelearning/blob/a0edc5c5724ed2895fd0c2fa5c2525d03de13455/src/Microsoft.ML.StandardLearners/Standard/LinearModelParameters.cs#L93\r\nand we have this:\r\nhttps://github.com/dotnet/machinelearning/blob/a0edc5c5724ed2895fd0c2fa5c2525d03de13455/src/Microsoft.ML.StandardLearners/Standard/LinearModelParameters.cs#L387\r\n\r\nI would prefer to hide second one (and `IHaveFeatureWeights` interface) but it's up to discussion\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2763","RelatedDescription":"Open issue \"LinearModelParameters have two ways to get Weights, should be one\" (#2763)"},{"Id":"415270307","IsPullRequest":false,"CreatedAt":"2019-02-27T18:42:01","Actor":"Ivanidzo4ka","Number":"2762","RawContent":null,"Title":"TrainersName pattern (Discussion)","State":"open","Body":"https://github.com/dotnet/machinelearning/issues/2172 follow up on this one.\r\nSo right now we have mix of trainers names.\r\nI want to standardize them.\r\n\r\nWe have following zoo of naming patterns:\r\n`LogisticRegression`\r\n`SdcaMultiClassTrainer`\r\n`SgdNonCalibratedBinaryTrainer`\r\n`LinearSvmTrainer`\r\n`LightGbmMulticlassTrainer`\r\n`MulticlassLogisticRegression`\r\n\r\nMy proposal is following:\r\n\r\n`{AlgoName}(optional){Calibrated/NonCalibrated}{TypeOfTask}Trainer`\r\n\r\nWhere AlgoName is full name without abbreviations (SDCA->StochasticDualCoordinateAscent, Linearsvm ->LinearSupportVectorMachines) with exception of LightGBM.\r\n\r\nI would also prefer to explicitly specify TypeOfTask even if algorithm exist only for one type. (Which would create weird abominations like OneVersusAllMulticlassTrainer, but i'm fine with that)\r\n\r\nDoes that sound good for you?\r\n@sfilipi  @TomFinley  @eerhardt  @yaeldekel  \r\n","Url":"https://github.com/dotnet/machinelearning/issues/2762","RelatedDescription":"Open issue \"TrainersName pattern (Discussion)\" (#2762)"},{"Id":"415252280","IsPullRequest":true,"CreatedAt":"2019-02-27T17:55:31","Actor":"abgoswam","Number":"2761","RawContent":null,"Title":"WIP : Scrubbing LogisticRegression learners","State":"open","Body":"Fixes #2615.  Related #2613\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2761","RelatedDescription":"Open PR \"WIP : Scrubbing LogisticRegression learners\" (#2761)"},{"Id":"415239826","IsPullRequest":true,"CreatedAt":"2019-02-27T17:44:27","Actor":"shauheen","Number":"2758","RawContent":null,"Title":"Bump master to 0.12","State":"closed","Body":"Updating the version on Master to 0.12","Url":"https://github.com/dotnet/machinelearning/pull/2758","RelatedDescription":"Closed or merged PR \"Bump master to 0.12\" (#2758)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-02-28T05:30:58.3452326Z","RunDurationInMilliseconds":1142}