{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin and .NET Community Events in November","PublishedOn":"2018-11-01T16:01:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-community-events-in-november/","RawContent":null},{"Title":"Xamarin.Forms and Zeplin: Speed Up Your Design to Development Process","PublishedOn":"2018-10-23T18:53:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Arnstein Johansen, a Norwegian software engineer interested in mobile and web development. He works for Itema AS, a consultant agency in Trondheim, Norway and a...","Href":"https://blog.xamarin.com/xamarin-forms-and-zeplin-speed-up-your-design-to-development-process/","RawContent":null},{"Title":"Xamarin.Forms 3.3.0: Little Things, Huge Difference","PublishedOn":"2018-10-18T19:06:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin.Forms team has been working closely with our open-source community to help fill in the “little things”. Things you’ve told us are important to building your mobile apps and being supremely...","Href":"https://blog.xamarin.com/xamarin-forms-3-3-0-little-things-huge-difference/","RawContent":null},{"Title":"Complex Animations in Xamarin.Forms using Finite State Machine","PublishedOn":"2018-10-16T17:32:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Slava Chernikoff, a Principal Engineer at Binwell. Microsoft MVP and Xamarin Certified experienced mobile cross-platform and native developer. Also, a previously...","Href":"https://blog.xamarin.com/complex-animations-xamarin-forms-using-finite-state-machine/","RawContent":null},{"Title":"Protect your Xamarin.Android Apps at Runtime with Dotfuscator","PublishedOn":"2018-10-12T18:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest blog by Bill Leach. Bill is CTO and co-founder of PreEmptive Solutions, makers of Dotfuscator and DashO application protection tools. Protecting Your Xamarin.Android Apps In a previous...","Href":"https://blog.xamarin.com/protect-xamarin-android-apps-dotfuscator/","RawContent":null},{"Title":"Upgrade Your App with Sentiment Analysis","PublishedOn":"2018-10-04T05:00:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Understanding the sentiment of an email or text message can be difficult. Someone may send a message, intending for it to be encouraging, but it may be accidentally interpreted as mean or...","Href":"https://blog.xamarin.com/upgrade-your-app-with-sentiment-analysis/","RawContent":null},{"Title":"Mobile Developer Events in October","PublishedOn":"2018-10-01T19:00:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Conf Local Events Watch all the live sessions from .NET Conf right on Channel 9! With a wide selection of content by feature speakers from the community and .NET product teams, take this...","Href":"https://blog.xamarin.com/mobile-developer-events-in-october/","RawContent":null},{"Title":"Using the Android Designer Split View","PublishedOn":"2018-09-24T05:01:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The ability to see the design view and layout XML at the same time, side by side, was one of our most requested features for the Android Designer. With Split View, new in the Visual Studio 2017...","Href":"https://blog.xamarin.com/split-view-android-designer/","RawContent":null},{"Title":"Get Ready for iOS 12 and Xcode 10","PublishedOn":"2018-09-19T19:49:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Support for iOS 12 and Xcode 10 to accompany Apple’s Xcode Gold Master (GM) release has just been announced! We have also published updated documentation and samples to help you quickly get started...","Href":"https://blog.xamarin.com/ios-12-and-xcode-10/","RawContent":null},{"Title":"Handling input from Apple Pencil","PublishedOn":"2018-09-19T17:52:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"After months of contemplation before finally buying an Apple Pencil to go along with the iPad Pro, it turns out it is as magical as they say! This blog post describes how to use Xamarin.iOS and Visual...","Href":"https://blog.xamarin.com/apple-pencil-handling-input/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8539665994","Type":"PullRequestEvent","CreatedAt":"2018-11-06T01:31:19","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2387","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] fix for missing content provider\" (#2387) at xamarin/xamarin-android","RelatedBody":"Using a commercial master build of Xamarin.Android, I get the\r\nfollowing crash at runtime:\r\n\r\n    java.lang.RuntimeException: Unable to get provider mono.android.ResourcePatcher: java.lang.ClassNotFoundException: Didn't find class \"mono.android.ResourcePatcher\" on path: DexPathList[[zip file \"/system/framework/org.apache.http.legacy.boot.jar\", zip file \"/data/app/HelloForms.HelloForms-g8b7mdSG3CF6lxWgPVIURg==/base.apk\"],nativeLibraryDirectories=[/data/app/HelloForms.HelloForms-g8b7mdSG3CF6lxWgPVIURg==/lib/arm64, /data/app/HelloForms.HelloForms-g8b7mdSG3CF6lxWgPVIURg==/base.apk!/lib/arm64-v8a, /system/lib64]]\r\n           at android.app.ActivityThread.installProvider(ActivityThread.java:6396)\r\n           at android.app.ActivityThread.installContentProviders(ActivityThread.java:5938)\r\n           at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5853)\r\n           at android.app.ActivityThread.access$1100(ActivityThread.java:199)\r\n           at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)\r\n           at android.os.Handler.dispatchMessage(Handler.java:106)\r\n           at android.os.Looper.loop(Looper.java:193)\r\n           at android.app.ActivityThread.main(ActivityThread.java:6669)\r\n           at java.lang.reflect.Method.invoke(Native Method)\r\n           at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)\r\n           at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)\r\n\r\nLooking at `obj\\Debug\\android\\AndroidManifest.xml`, I had this line:\r\n\r\n    <provider android:name=\"mono.android.ResourcePatcher\" android:exported=\"false\" android:initOrder=\"1999999998\" android:authorities=\"HelloForms.HelloForms.mono.android.ResourcePatcher.__mono_init__\" />\r\n\r\nThis `ResourcePatcher` content provider should only be present when\r\nthe new \"Enhanced\" Fast Deployment is enabled.\r\n\r\nReviewing the code, it seemed that the `ManifestDocument` class was\r\nadding this to the manifest in a case where it shouldn't.\r\n\r\nChanges:\r\n\r\n- Added checks of the `$(_InstantRunEnabled)` MSBuild property, before\r\n  deciding if the content provider is present in the manifest file.\r\n- Added a test to verify this scenario. I had to make use of the\r\n  `$(_XASupportsFastDev)` property in the test.\r\n- Removed extra input logging of `GenerateJavaStubs`."},{"Id":"8538478896","Type":"PullRequestEvent","CreatedAt":"2018-11-05T20:59:25","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2380","RelatedDescription":"Merged pull request \"[docs] Add docs for warnings XA0118 and XA1005\" (#2380) at xamarin/xamarin-android","RelatedBody":"This documentation was meant to be part of:\r\nhttps://github.com/xamarin/xamarin-android/pull/2258\r\n\r\nI accidentally removed these pages from that pull request when I was\r\nupdating it to exclude the changes for XA4214 and XA4215.\r\n\r\n* * *\r\nThese are documentation only changes, and I'm curious to check for reference if this PR trigger is enabled in this repo, so I'll try skipping the PR build:\r\n\r\n@monojenkins skip"},{"Id":"8538469290","Type":"PullRequestEvent","CreatedAt":"2018-11-05T20:57:39","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2379","RelatedDescription":"Merged pull request \"[Documentation] Document recently added property\" (#2379) at xamarin/xamarin-android","RelatedBody":"Added AndroidGenerateJniMarshalMethodsAdditionalArguments description\r\nto the build process page."},{"Id":"8538455096","Type":"PullRequestEvent","CreatedAt":"2018-11-05T20:55:10","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2369","RelatedDescription":"Merged pull request \"[Xamarin.ProjectTools] change Now to UtcNow\" (#2369) at xamarin/xamarin-android","RelatedBody":"Downstream in `monodroid` we are getting a random test failure with a\r\ntest case such as:\r\n\r\n    proj.Touch (\"SomeFile\");\r\n    Assert.IsTrue (b.Build (proj, true, null, false));\r\n\r\nIt seems from the build log that `SomeFile` was not actually updated.\r\n\r\nSo looking at `Touch`, it uses `Now` instead of `UtcNow`:\r\n\r\n    foreach (var item in itemPaths)\r\n        GetItem (item).Timestamp = DateTimeOffset.Now;\r\n\r\nBut the code deciding to save a file or not uses `LastWriteTimeUtc`:\r\n\r\n    var needsUpdate = (!File.Exists (path) || p.Timestamp == null || p.Timestamp.Value > new DateTimeOffset (new FileInfo (path).LastWriteTimeUtc));\r\n\r\nWe should be using `Utc` everywhere. I've gone through\r\nXamarin.ProjectTools and the MSBuild tests to use `UtcNow` where\r\nneeded. Some places I also changed to use `DateTimeOffset` instead of\r\n`DateTime` for consistency.\r\n\r\nSome places were setting `Timestamp` on new files, which isn't really\r\nneeded. I just removed these.\r\n\r\nHopefully some of our random test failures will improve."},{"Id":"8538170391","Type":"PullRequestEvent","CreatedAt":"2018-11-05T20:03:39","Actor":"luhenry","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2389","RelatedDescription":"Opened pull request \"[build] Download correct mono archive URL\" (#2389) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/mono/mono/blob/8e0cbf1044fb86f40c41f4317ef9154f82a94bb4/scripts/ci/pipeline/sdks-archive.groovy#L84\r\nContext: https://jenkins.mono-project.com/view/Per-commit%20packages/job/archive-mono/\r\n\r\nThe mono archives have a different filename format than that used in\r\ncommit f970cd50.  As per [`sdks-archive.groovy`][0], the filename to\r\ndownload *should* be:\r\n\r\n\t${product}-${configuration}-${platform}-${commitHash}.zip\r\n\r\nUpdate `$(_MonoArchiveName)` accordingly, and fix the output paths so\r\nthat the mono archive can actually be used.  (As noted in f970cd50,\r\n*actual* support for building with the mono archive hadn't been\r\ntested, as one didn't exist for the mono xamarin-android uses.)\r\n\r\n[0]: https://github.com/mono/mono/blob/8e0cbf1044fb86f40c41f4317ef9154f82a94bb4/scripts/ci/pipeline/sdks-archive.groovy"},{"Id":"8538100861","Type":"PullRequestEvent","CreatedAt":"2018-11-05T19:51:30","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2384","RelatedDescription":"Merged pull request \"[ResolveSdksTask] cache JdkJvmPath value\" (#2384) at xamarin/xamarin-android","RelatedBody":"Implements https://github.com/xamarin/xamarin-android/issues/2374\r\n\r\nAs the `ResolveSdks` task is used in every build, try to make it faster.\r\n\r\nI tried to measure few builds and the time went from ~540ms to ~240ms\r\nper 3 calls. (there were also some longer builds with cached value as\r\nwell. I think it is just a fluctuation I see on my old notebook)"},{"Id":"8537928624","Type":"PullRequestEvent","CreatedAt":"2018-11-05T19:22:04","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2388","RelatedDescription":"Opened pull request \"Don't propagate the Authorization header on redirect\" (#2388) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1924\r\n\r\nThe `Authorization` HTTP header should not be passed on to the next location\r\nwhen redirecting. Make sure it is removed before following the redirect."},{"Id":"8537364751","Type":"PullRequestEvent","CreatedAt":"2018-11-05T17:43:48","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2387","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] fix for missing content provider\" (#2387) at xamarin/xamarin-android","RelatedBody":"Using a commercial master build of Xamarin.Android, I get the\r\nfollowing crash at runtime:\r\n\r\n    java.lang.RuntimeException: Unable to get provider mono.android.ResourcePatcher: java.lang.ClassNotFoundException: Didn't find class \"mono.android.ResourcePatcher\" on path: DexPathList[[zip file \"/system/framework/org.apache.http.legacy.boot.jar\", zip file \"/data/app/HelloForms.HelloForms-g8b7mdSG3CF6lxWgPVIURg==/base.apk\"],nativeLibraryDirectories=[/data/app/HelloForms.HelloForms-g8b7mdSG3CF6lxWgPVIURg==/lib/arm64, /data/app/HelloForms.HelloForms-g8b7mdSG3CF6lxWgPVIURg==/base.apk!/lib/arm64-v8a, /system/lib64]]\r\n           at android.app.ActivityThread.installProvider(ActivityThread.java:6396)\r\n           at android.app.ActivityThread.installContentProviders(ActivityThread.java:5938)\r\n           at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5853)\r\n           at android.app.ActivityThread.access$1100(ActivityThread.java:199)\r\n           at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)\r\n           at android.os.Handler.dispatchMessage(Handler.java:106)\r\n           at android.os.Looper.loop(Looper.java:193)\r\n           at android.app.ActivityThread.main(ActivityThread.java:6669)\r\n           at java.lang.reflect.Method.invoke(Native Method)\r\n           at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)\r\n           at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)\r\n\r\nLooking at `obj\\Debug\\android\\AndroidManifest.xml`, I had this line:\r\n\r\n    <provider android:name=\"mono.android.ResourcePatcher\" android:exported=\"false\" android:initOrder=\"1999999998\" android:authorities=\"HelloForms.HelloForms.mono.android.ResourcePatcher.__mono_init__\" />\r\n\r\nThis `ResourcePatcher` content provider should only be present when\r\nthe new \"Enhanced\" Fast Deployment is enabled.\r\n\r\nReviewing the code, it seemed that the `ManifestDocument` class was\r\nadding this to the manifest in a case where it shouldn't.\r\n\r\nChanges:\r\n\r\n- Added checks of the `$(_InstantRunEnabled)` MSBuild property, before\r\n  deciding if the content provider is present in the manifest file.\r\n- Added a test to verify this scenario. I had to make use of the\r\n  `$(_XASupportsFastDev)` property in the test.\r\n- Removed extra input logging of `GenerateJavaStubs`."},{"Id":"8537307402","Type":"IssuesEvent","CreatedAt":"2018-11-05T17:33:51","Actor":"Redth","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2354","RelatedDescription":"Closed issue \"`AndroidAarLibrary` is not resolving resources properly\" (#2354) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Download repro\r\n[App24.zip](https://github.com/xamarin/xamarin-android/files/2527627/App24.zip)\r\n2. Restore packages\r\n3. Try to build project\r\n4. You can try the `28.0.0-preview5` version of the packages to experience a build where the bindings use `LibraryProjectZip` instead of `AndroidAarLibrary` and the build works correctly.\r\n\r\n### Expected Behavior\r\n\r\nCompiles cleanly.\r\n\r\n### Actual Behavior\r\n\r\nErrors: ` No resource identifier found for attribute 'layout_behavior' in package...`  \r\n\r\n\r\nIt looks like something isn't working quite right with `AndroidAarLibrary` item types.  This works fine if I continue to embed the .aar as a `LibraryProjectZip` in the .dll.\r\n\r\n"},{"Id":"8537007614","Type":"IssuesEvent","CreatedAt":"2018-11-05T16:46:40","Actor":"mattleibow","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2386","RelatedDescription":"Opened issue \"[Application] FullBackupContent is the wrong type\" (#2386) at xamarin/xamarin-android","RelatedBody":"I see that the `[Application]` attribute `FullBackupContent` member is `bool` but should be `string`:\r\n\r\nhttps://developer.android.com/guide/topics/manifest/application-element#fullBackupContent\r\n"},{"Id":"8536101765","Type":"PullRequestEvent","CreatedAt":"2018-11-05T14:37:21","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2385","RelatedDescription":"Opened pull request \"Use a proxy server if specified\" (#2385) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2123\r\n\r\nImplement proxy support for the Java HTTP client by \"translating\" the proxy\r\ninformation specified in `HttpClientHandler.Proxy` to the format accepted and\r\nexpected by the Java client. Since the translation may involve a DNS lookup, it\r\nis performed in a separate task. No caching is attempted in our client code."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8540000346","Type":"IssuesEvent","CreatedAt":"2018-11-06T03:15:37","Actor":"scriptBoris","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4315","RelatedDescription":"Opened issue \"XLabs: Gestures.Interests not exists\" (#4315) at xamarin/Xamarin.Forms","RelatedBody":"I using XLabs forms, for using extended elements, such as ExtendedButton or GesturesContent. But Visual display me warning that \"In the type \"Gestures\" could not find the attached property \"Interests\". And i cant compile application with rebuild button.\r\n\r\nBUT! When I click on the F5 button, the application compiles and runs without errors.\r\n\r\n- Nuget Packages:\r\nXLabs.Core;\r\nXLabs.Forms;\r\nXlabs.Platform;\r\n\r\n![image](https://user-images.githubusercontent.com/29772096/48040766-43587180-e1b5-11e8-8ef5-5376f138fae0.png)\r\n\r\n"},{"Id":"8539790890","Type":"PullRequestEvent","CreatedAt":"2018-11-06T02:08:54","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4025","RelatedDescription":"Closed pull request \"Upgrading OnIdiom<T>\" (#4025) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThe `OnIdiom<T>` was not matching the format of `OnPlatform<T>`. This PR attempts to upgrade `OnIdiom` to include matching functionality and more friendly XAML interface.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #4006 \r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n- `T OnIdiom<T>.Default { get; set; }`\r\n- `IList<OnIdiomSetting> OnIdiom.Idioms { get; private set; }`\r\n\r\n### Platforms Affected ### \r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nThe legacy syntax for `OnIdiom` is still supported and there should be no change required for existing apps.\r\n\r\nPR adds support for `Default` value, which is on par with `{OnIdiom}` markup extension and supports even the legacy syntax.\r\n\r\nThe new syntax is very similar to the one provided by `OnPlatform<T>`:\r\n\r\n```\r\n<BoxView WidthRequest=\"100\" HeightRequest=\"100\">\r\n\t<BoxView.BackgroundColor>\r\n\t\t<OnIdiom x:TypeArguments=\"Color\" Default=\"Red\">\r\n\t\t\t<OnIdiomSetting Idiom=\"Phone\" Value=\"Blue\" />\r\n\t\t\t<OnIdiomSetting Idiom=\"TV, Tablet\" Value=\"Green\" />\r\n\t\t</OnIdiom>\r\n\t</BoxView.BackgroundColor>\r\n</BoxView>\r\n```\r\n\r\nThe only disadvantage is that it is not possible to reuse `<On>` as in `OnPlatform<T>`, because both reside in the same namespace. It would be possible to add `Idiom` property to `On` but that could be confusing to users.\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nI have created demonstration of the `Default` value on `Issue4006` page in controls gallery.\r\n\r\nFunctionality of `OnIdiom<T>` has been covered by tests in `Xamarin.Forms.Core.UnitTests.OnIdiomTests`.\r\n\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8539790871","Type":"IssuesEvent","CreatedAt":"2018-11-06T02:08:54","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4006","RelatedDescription":"Closed issue \"OnIdiom<T> and {OnIdiom} discrepancies.\" (#4006) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nThe markup extension `{OnIdiom}` had a `Default` property, where the `<OnIdiom x:TypeArgument=\"\" .../>` doesn't. This is, at best, confusing to our users.\r\n\r\n"},{"Id":"8539790857","Type":"IssuesEvent","CreatedAt":"2018-11-06T02:08:54","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1724","RelatedDescription":"Closed issue \"[Enhancement] ImageButton\" (#1724) at xamarin/Xamarin.Forms","RelatedBody":"# Rationale\r\n\r\nThe current Button.Image property is mainly for displaying a small icon next to the text. \r\n\r\nTo avoid breaking changes, we should create a new ImageButton control. Both Button and ImageButton should derive from a common ButtonBase.\r\n\r\n# Implementation\r\n\r\nsee Button API, but skip the Label\r\n\r\nImplementation on Android, iOS, UWP in renderers.\r\n\r\n# Backward Compatibility\r\n\r\n\r\n# Difficulty: Medium"},{"Id":"8539450724","Type":"IssuesEvent","CreatedAt":"2018-11-06T00:28:54","Actor":"zeniya-takeshi","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4314","RelatedDescription":"Opened issue \"When ListView items is removed and it is empty, Xamarin Forms crash\" (#4314) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nWhen ListView items is removed and it is empty, Xamarin Forms crash.\r\n\r\nException Message\r\nObject reference not set to an instance of an object\r\n\r\nException StackTrace\r\n  at Xamarin.Forms.Platform.iOS.ContextScrollViewDelegate.GetContextCell (UIKit.UIScrollView scrollView) [0x00026] in D:\\a\\1\\s\\Xamarin.Forms.Platform.iOS\\ContextScrollViewDelegate.cs:257 \r\n  at Xamarin.Forms.Platform.iOS.ContextScrollViewDelegate.RestoreHighlight (UIKit.UIScrollView scrollView) [0x00009] in D:\\a\\1\\s\\Xamarin.Forms.Platform.iOS\\ContextScrollViewDelegate.cs:296 \r\n  at Xamarin.Forms.Platform.iOS.ContextScrollViewDelegate.Scrolled (UIKit.UIScrollView scrollView) [0x00130] in D:\\a\\1\\s\\Xamarin.Forms.Platform.iOS\\ContextScrollViewDelegate.cs:125 \r\n  at (wrapper managed-to-native) UIKit.UIApplication.UIApplicationMain(int,string[],intptr,intptr)\r\n  at UIKit.UIApplication.Main (System.String[] args, System.IntPtr principal, System.IntPtr delegate) [0x00005] in /Library/Frameworks/Xamarin.iOS.framework/Versions/11.12.0.4/src/Xamarin.iOS/UIKit/UIApplication.cs:79 \r\n  at UIKit.UIApplication.Main (System.String[] args, System.String principalClassName, System.String delegateClassName) [0x0002c] in /Library/Frameworks/Xamarin.iOS.framework/Versions/11.12.0.4/src/Xamarin.iOS/UIKit/UIApplication.cs:63 \r\n  at XamarinPractice2.iOS.Application.Main (System.String[] args) [0x00001] in C:\\Users\\b2\\source\\repos\\XamarinPractice2\\XamarinPractice2\\XamarinPractice2.iOS\\Main.cs:17 \r\n\r\n### Steps to Reproduce\r\n\r\n1. Create ListView has at least two items. \r\n2.  Run its Project on iOS 12.\r\n3.  Remove its items all by ContextActions. \r\n\r\n### Expected Behavior\r\ndosen't crash\r\n\r\n### Actual Behavior\r\ncrashed\r\n\r\n### Basic Information\r\n\r\n- Version with issue: \r\n- Last known good version:\r\n- IDE: Visual Studio 2017 Community\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n12.0\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\nNONE\r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\nNONE\r\n- Android Support Library Version: <!-- if applicable -->\r\nNONE\r\n- Nuget Packages:\r\n- Affected Devices:\r\niPod Touch 6\r\n\r\n### Screenshots\r\n[XamarinPractice2.zip](https://github.com/xamarin/Xamarin.Forms/files/2551162/XamarinPractice2.zip)\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8539073256","Type":"PullRequestEvent","CreatedAt":"2018-11-05T22:52:17","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5084","RelatedDescription":"Merged pull request \"Bump mono 2018-06 before P2 branch\" (#5084) at xamarin/xamarin-macios","RelatedBody":"Commit list for mono/mono:\n\n* mono/mono@709b46e3338 [tests] reduce recursion depth (#11484)\n* mono/mono@b2915194221 [crash] Fix async setting for crash reporter\n* mono/mono@149206a5eed [crash] Fix merp invocation (#11436)\n* mono/mono@2f2615ffc88 [2018-06] [delegates] do not use CEE_CALLVIRT for non-virtual methods (#11450)\n* mono/mono@47eb7c55eb0 [2018-06] [interp] Overflow fixes (#11426)\n\nDiff: https://github.com/mono/mono/compare/3ae42fc38d5b24c4fa9a58cc84607dedd9c817dc...709b46e333860188afc80186a9280f68c8538619"},{"Id":"8537917968","Type":"IssuesEvent","CreatedAt":"2018-11-05T19:20:13","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5058","RelatedDescription":"Closed issue \"SCNAction.TimingFunction should be Func<float,float>\" (#5058) at xamarin/xamarin-macios","RelatedBody":"Currently the [SCNAction.TimingFunction](https://github.com/xamarin/xamarin-macios/blob/3119129ab76a7bc6d1ff2ab9d4cdd2afa37f687f/src/scenekit.cs#L3717) property is of type `Action<float>`, but should be `Func<float, float>` as per https://developer.apple.com/documentation/scenekit/scnaction/1524130-timingfunction."},{"Id":"8537917233","Type":"PullRequestEvent","CreatedAt":"2018-11-05T19:20:05","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5068","RelatedDescription":"Merged pull request \"[scenekit] Fix `SCNAction.TimingFunction` signature to `Func<float,float>`. Fixes #5058\" (#5068) at xamarin/xamarin-macios","RelatedBody":"This was incorrectly bound as `Action<float>`.\nAdded unit test for the API compatibility stubs.\n\nreference: https://github.com/xamarin/xamarin-macios/issues/5058"},{"Id":"8537582991","Type":"PullRequestEvent","CreatedAt":"2018-11-05T18:22:26","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5081","RelatedDescription":"Merged pull request \"Without this added the azure links in the side panel won't work. This…\" (#5081) at xamarin/xamarin-macios","RelatedBody":"… step can also be updated to the new pipeline syntax using the pipeline syntax generator."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":22,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":26,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":18,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":27,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":36,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":31,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":30,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":201,"FavoriteCount":109,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":54,"RawContent":null},{"Id":"1037778121582419970","CreatedAt":"2018-09-06T19:02:39+00:00","UserScreenname":"xamarinhq","Text":"Get started with AI without being a machine learning or data science expert... New on the Xamarin Blog: Using Objec… https://t.co/uwpu4pUWFj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":92,"FavoriteCount":45,"RawContent":null},{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":36,"RawContent":null},{"Id":"1032375788375498753","CreatedAt":"2018-08-22T21:15:43+00:00","UserScreenname":"xamarinhq","Text":"Getting Started with Android Pie. Now you can download the support for #AndroidPie inside https://t.co/7TMjXUsU4u 9… https://t.co/sNrOIuI741","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":42,"RawContent":null},{"Id":"1031653104394096640","CreatedAt":"2018-08-20T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"Hey, Xamarin developers. It's time to explore and learn about the latest and greatest iOS 12 ARKit Capabilities w/… https://t.co/6x3vq5IuEb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":123,"FavoriteCount":80,"RawContent":null}]}},"RunOn":"2018-11-06T05:30:57.9165815Z","RunDurationInMilliseconds":4253}