{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Core 3.1 Preview 3","PublishedOn":"2019-11-14T17:16:36+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.1 Preview 3. .NET Core 3.1 is a small and short release focused on key improvements in Blazor and Windows desktop, the two big additions in .NET Core 3.0.. It...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-3/","RawContent":null},{"Title":".NET Framework November 13, 2019, Update for .NET Framework 4.8","PublishedOn":"2019-11-14T06:16:28+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we released an update for .NET Framework 4.8 to Microsoft Update Catalog.\nQuality and Reliability\nThis release contains the following reliability improvement.\nCLR1\nAddresses an issue where some...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-november-13-2019-update-for-net-framework-4-8/","RawContent":null},{"Title":"ML.NET Model Builder Updates","PublishedOn":"2019-11-12T20:51:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is a cross-platform, machine learning framework for .NET developers, and Model Builder is the UI tooling in Visual Studio that uses Automated Machine Learning (AutoML) to easily allow you to...","Href":"https://devblogs.microsoft.com/dotnet/model-builder-updates-mlnet/","RawContent":null},{"Title":".NET Framework Repair Tool","PublishedOn":"2019-11-12T00:51:20+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are announcing an update to .NET Framework Repair tool.\nIn case you are not familiar with previous releases of this tool, here is a bit of background. Occasionally, some customers will run...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-repair-tool/","RawContent":null},{"Title":"Building Modern Cloud Applications using Pulumi and .NET Core","PublishedOn":"2019-11-11T15:00:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"This is a guest post from the Pulumi team. Pulumi is an open source infrastructure as code tool that helps developers and infrastructure teams work better together to create, deploy, and manage cloud...","Href":"https://devblogs.microsoft.com/dotnet/building-modern-cloud-applications-using-pulumi-and-net-core/","RawContent":null},{"Title":"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)","PublishedOn":"2019-11-06T17:01:16+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Coinciding with the Microsoft Ignite 2019 conference, we are thrilled to announce the GA release of ML.NET 1.4 and updates to Model Builder in Visual Studio, with exciting new machine learning...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-global-availability-machine-learning-for-net/","RawContent":null},{"Title":".NET Core with Jupyter Notebooks –  Available today | Preview 1","PublishedOn":"2019-11-06T17:00:21+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"When you think about Jupyter Notebooks, you probably think about writing your code in Python, R, Julia, or Scala and not .NET. Today we are excited to announce you can write .NET code in Jupyter...","Href":"https://devblogs.microsoft.com/dotnet/net-core-with-juypter-notebooks-is-here-preview-1/","RawContent":null},{"Title":".NET Core 3 for Windows Desktop","PublishedOn":"2019-11-05T14:00:11+00:00","CommentsCount":86,"FacebookCount":0,"Summary":"Intro\nIn September, we released .NET Core support for building Windows desktop applications, including WPF and Windows Forms. Since then, we have been delighted to see so many developers share their...","Href":"https://devblogs.microsoft.com/dotnet/net-core-3-for-windows-desktop/","RawContent":null},{"Title":"Announcing .NET Core 3.1 Preview 2","PublishedOn":"2019-11-04T13:54:22+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.1 Preview 2. .NET Core 3.1 will be a small and short release focused on key improvements in Blazor and Windows desktop, the two big additions in .NET Core...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-2/","RawContent":null},{"Title":"The history of the GC configs","PublishedOn":"2019-11-02T07:54:28+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Recently, Nick from Stack Overflow tweeted about his experience of using the .NET Core GC configs – he seemed quite happy with them (minus the fact they are not documented well which is something I’m...","Href":"https://devblogs.microsoft.com/dotnet/the-history-of-the-gc-configs/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10864162405","Type":"PullRequestEvent","CreatedAt":"2019-11-14T16:22:28","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/153","RelatedDescription":"Opened pull request \"Fix broken links\" (#153) at dotnet/foundation","RelatedBody":""},{"Id":"10863953091","Type":"PullRequestEvent","CreatedAt":"2019-11-14T16:00:24","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/152","RelatedDescription":"Opened pull request \"Fix broken links\" (#152) at dotnet/foundation","RelatedBody":""},{"Id":"10823146740","Type":"PullRequestEvent","CreatedAt":"2019-11-08T23:32:03","Actor":"onovotny","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Merged pull request \"Update RxUI license to reflect repo\" (#151) at dotnet/foundation","RelatedBody":"Fixes https://github.com/dotnet-foundation/dotnetfoundation-website/issues/68"},{"Id":"10822052136","Type":"PullRequestEvent","CreatedAt":"2019-11-08T20:13:07","Actor":"onovotny","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Opened pull request \"Update RxUI license to reflect repo\" (#151) at dotnet/foundation","RelatedBody":""},{"Id":"10806560653","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:43:05","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Merged pull request \"(GH-111) Update Source Link location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"10806557022","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:42:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Merged pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10806555226","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:41:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Merged pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""},{"Id":"10537155256","Type":"PullRequestEvent","CreatedAt":"2019-10-01T20:30:21","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Opened pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10530380699","Type":"PullRequestEvent","CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Opened pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10873564628","Type":"IssuesEvent","CreatedAt":"2019-11-15T16:51:28","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/141","RelatedDescription":"Opened issue \"Windows Server, version 1803 no longer supported by .NET Framework\" (#141) at dotnet/announcements","RelatedBody":"# Windows Server, version 1803 no longer supported by .NET Framework\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #451](https://github.com/microsoft/dotnet-framework-docker/issues/451)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.8`. These are tags that are supported on multiple operating systems and versions, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1803 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-1803` or `mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-1803`."},{"Id":"10873546016","Type":"IssuesEvent","CreatedAt":"2019-11-15T16:49:05","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/140","RelatedDescription":"Opened issue \"Windows Server, version 1803 no longer supported by .NET Core\" (#140) at dotnet/announcements","RelatedBody":"# Windows Server, version 1803 no longer supported by .NET Core\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Core container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1469](https://github.com/dotnet/dotnet-docker/issues/1469)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `3.0`, `3.0.0`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server, version 1803 images (even though it is no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:3.0-nanoserver-1803`."},{"Id":"10864634140","Type":"IssuesEvent","CreatedAt":"2019-11-14T17:15:09","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/139","RelatedDescription":"Opened issue \".NET Core 3.1.0 Preview 3\" (#139) at dotnet/announcements","RelatedBody":".NET Core 3.1.0 Preview 3 is available and https://github.com/dotnet/core/issues/3809 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview3.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-3/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-3/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 3, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n"},{"Id":"10862597044","Type":"IssuesEvent","CreatedAt":"2019-11-14T13:37:29","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/138","RelatedDescription":"Opened issue \"November 2019 .NET Updates\" (#138) at dotnet/announcements","RelatedBody":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework November 13, 2019, Update for .NET Framework 4.8](https://devblogs.microsoft.com/dotnet/net-framework-november-13-2019-update-for-net-framework-4-8/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"10856924757","Type":"IssuesEvent","CreatedAt":"2019-11-13T21:41:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/137","RelatedDescription":"Opened issue \".NET Framework Docker images support for Windows Server, version 1909\" (#137) at dotnet/announcements","RelatedBody":"# .NET Framework Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Framework Docker images have been published for Server Core, version 1909.  \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-framework-docker#448](https://github.com/microsoft/dotnet-framework-docker/issues/448)\r\n\r\n## Details \r\n\r\n* [dotnet-framework-docker#447](https://github.com/microsoft/dotnet-framework-docker/pull/447) \r\n\r\n.NET Framework tags containing the substring `windowsservercore-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-framework). \r\n\r\n.NET Framework multi-arch tags, such as `4.8`, have been updated to use `windowsservercore-1909` images if your host is Windows Server 1909 or higher. \r\n\r\n### Impacted Repos \r\n\r\n* [dotnet/framework/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk/): .NET Framework SDK \r\n* [dotnet/framework/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): ASP.NET Runtime  \r\n* [dotnet/framework/wcf](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): Windows Communication Foundation \r\n* [dotnet/framework/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime/): .NET Framework Runtime\r\n* [dotnet/framework/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples/): .NET Framework Samples\r\n\r\n"},{"Id":"10847180825","Type":"IssuesEvent","CreatedAt":"2019-11-12T22:05:52","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/136","RelatedDescription":"Opened issue \".NET Core Docker images support for Windows Server, version 1909\" (#136) at dotnet/announcements","RelatedBody":"# .NET Core Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Core Docker images have been published for Nano Server, version 1909. \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-docker#1460](https://github.com/dotnet/dotnet-docker/issues/1460)\r\n## Details\r\n\r\n* [dotnet-docker#1457](https://github.com/dotnet/dotnet-docker/pull/1457)\r\n\r\n.NET Core tags containing the substring `nanoserver-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-core).\r\n\r\n.NET Core multi-arch tags, such as `3.0`, have been updated to use `nanoserver-1909` images if your host is Windows Server 1909 or higher.\r\n\r\n### Impacted Repos\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk/): .NET Core SDK\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): ASP.NET Core Runtime\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime/): .NET Core Runtime\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples/): .NET Core Samples\r\n\r\n"},{"Id":"10822538366","Type":"IssuesEvent","CreatedAt":"2019-11-08T21:33:13","Actor":"CESARDELATORRE","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/135","RelatedDescription":"Opened issue \"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)\" (#135) at dotnet/announcements","RelatedBody":"This week (coinciding with Microsoft Ignite 2019) we announced the release of **ML.NET 1.4 GA**. \r\nThere are many new features such as:\r\n\r\n**- New Deep Learning Image Classifier (GA):** GPU support for training and inference Image Classifier ML models.\r\n\r\n**- Database Loader  (GA):** You can train your model with data directly from any relational database supported by System.Data.\r\n\r\n**- Enhanced for .NET Core 3.0  (GA):** Performance improvements thanks to hardware intrinsics feature in .NET Core 3.0.\r\n\r\n**- PredictionEnginePool for scalable deployments (GA):** Recommended approach for multi-threaded scalable apps such as ASP.NET Core apps/services and Azure Functions\r\n\r\n**- ML.NET and .NET support in Jupyter notebooks:**  You can now run any .NET code (C# / F#) in Jupyter notebooks and therefore run ML.NET code in it as well. Great for exploring and documenting model training experiments, data distribution exploration, data cleaning, plotting data charts, learning scenarios such as ML.NET courses, hands-on-labs and quizzes, etc.\r\n\r\nSee details in the following **Blog Posts**:\r\n\r\n- [Announcing ML.NET 1.4 general availability (Machine Learning for .NET)](https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-global-availability-machine-learning-for-net/)\r\n\r\n- [Using ML.NET in Jupyter notebooks](https://devblogs.microsoft.com/cesardelatorre/using-ml-net-in-jupyter-notebooks/)\r\n\r\n- [.NET Core with Jupyter Notebooks](https://devblogs.microsoft.com/dotnet/net-core-with-juypter-notebooks-is-here-preview-1/)\r\n"},{"Id":"10780907118","Type":"IssuesEvent","CreatedAt":"2019-11-04T13:57:09","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/134","RelatedDescription":"Opened issue \".NET Core 3.1.0 Preview 2\" (#134) at dotnet/announcements","RelatedBody":".NET Core 3.1.0 Preview 1 is available and https://github.com/dotnet/core/issues/XXXX has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview2.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-2/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-2/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 1, either responding to https://github.com/dotnet/core/issues/XXXX, creating a new issue or creating a new issue in one of the following repos:\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"},{"Id":"10748742804","Type":"IssuesEvent","CreatedAt":"2019-10-30T15:14:54","Actor":"jaredpar","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/133","RelatedDescription":"Opened issue \"Repository Consolidation Timeline\" (#133) at dotnet/announcements","RelatedBody":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27549.*\r\n\r\nAs we [announced](https://github.com/dotnet/announcements/issues/119) [earlier](https://github.com/dotnet/announcements/issues/127) we are planning on consolidating some of the repositories in the dotnet org. Our planning has reached a point where we have a schedule for the coreclr, corefx and core-setupmoves into dotnet/runtime that we want to share out with the community.\r\n\r\n### November 13th\r\nWe’ll move all changes from the original repositories into dotnet/runtime up to 5PM PST on November 13th. We’ll try to help as many pull requests as possible get merged by then. At that point, if there’s any pull requests still open we’ll have to close them. If you’d still like to continue those pull requests, we’d encourage you to bring them to dotnet/runtime in a new pull request.\r\n\r\nThe repositories themselves will be effectively archived at this point. The state of the “master” branch will be recorded with a tag, named “master-archive”, but the branch itself will be deleted. The default branch for the repositories will be named “archive” and it will be a single commit with a README.md and CONTRIBUTING.md file pointing to our dotnet/runtime repository.\r\n\r\nThe repositories will remain active for servicing changes to .NET Core 3.1 and earlier hence we will not be using the GitHub archive capability. \r\n\r\n### November 22nd\r\nThe dotnet/runtime repository will be made public and available for community contribution. Even though the repository will be created on November 13th it will take several days to get it back into a working order: fixing up our build scripts, recreating our Azure Dev Ops build definitions, etc … Until those tasks are completed it will not be possible to accept pull request and hence the repository will remain private. Once we are in a state that pull requests can be merged again the repository will be made public.\r\n\r\nOur expectation is that will occur on November 22nd. If it is ready sooner it will be made public sooner. If the work takes longer than we planned then we will add an update to this announcement with a new expected date.\r\n\r\n### December 1st-2nd\r\nAll issues, open and closed, will be migrated from corefx, coreclr and core-setup into dotnet/runtime. This will be using GitHub’s existing issue transfer feature in a bulk migration. This means all of the existing issue links will continue to function via redirects.\r\n\r\nThis does mean though that labels will not transfer with the issues. Labels will be re-applied as a post processing step by our engineering team once the issue migration completes.\r\n\r\nEven though our issues won’t be fully migrated until this time we’d like the community to begin filing issues on dotnet/runtime as soon as it’s public rather than continuing to file issues on the original repositories.\r\n\r\n### Migrating Commits\r\nThe dotnet/runtime repository will be a new commit history from the original repositories. We are using this consolidation as an opportunity to clean up our history with the goal of having a cleaner, smaller history as a starting point. This means commits will be rewritten in the following ways as they are migrated to dotnet/runtime:\r\n\r\n1. Author information, contributor information, changed file list and time stamps from the original commit will be preserved.\r\n1. Links to issues, pull requests or commits in the repository using GitHub short links will be rewritten so they continue to point the original repository. \r\n1. Every commit will be appended with a link to the original commit it was mapped from.\r\n\r\nThe actual contents of the commit though will be updated to match the new directory layout of the dotnet/runtime repository."},{"Id":"10738283611","Type":"IssuesEvent","CreatedAt":"2019-10-29T14:32:57","Actor":"mthalman","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/132","RelatedDescription":"Opened issue \"Release of Alpine 3.10 Docker images\" (#132) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Docker images updated to Alpine 3.10\r\n\r\nDocker images for .NET Core have been released that support Alpine 3.10.  Included with this release, the floating tags for Alpine-based images have been moved from Alpine 3.9 to 3.10.  \r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n[dotnet/dotnet-docker#1418](https://github.com/dotnet/dotnet-docker/issues/1418)\r\n\r\n## Details\r\n* [dotnet/dotnet-docker#1415](https://github.com/dotnet/dotnet-docker/pull/1415)\r\n\r\nIf you made use of a floating tag for Alpine, such as `3.0-alpine`, `2.2-alpine`, and `2.1-alpine`, these have been changed to now reference Alpine 3.10 instead of Alpine 3.9.  Be sure to pull this tag on your Docker machine to get the latest image.\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)"},{"Id":"10647641262","Type":"IssuesEvent","CreatedAt":"2019-10-16T22:28:29","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/131","RelatedDescription":"Opened issue \".NET Core 3.1.0 Preview 1\" (#131) at dotnet/announcements","RelatedBody":".NET Core 3.1.0 Preview 1 is available and https://github.com/dotnet/core/issues/3634 has been opened for discussion.\r\n\r\n**Blog round up**\r\n* [.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-1/)\r\n* [ASP.NET Core and Blazor](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-1/)\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview1.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 1, either responding to https://github.com/dotnet/core/issues/3634, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10876572911","Type":"PullRequestEvent","CreatedAt":"2019-11-16T02:26:18","Actor":"franksinankaya","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27889","RelatedDescription":"Opened pull request \"Fix friend class declaration\" (#27889) at dotnet/coreclr","RelatedBody":"[ 27%] Building CXX object src/pal/src/CMakeFiles/coreclrpal.dir/arch/amd64/signalhandlerhelper.cpp.o\r\ncoreclr/src/pal/src/thread/thread.cpp:1613:1: error: ‘CorUnix::PAL_ERROR CorUnix::InternalSetThreadDescription(CorUnix::CPalThread*, HANDLE, PCWSTR)’ has not been declared within CorUnix [-Werror]\r\n CorUnix::InternalSetThreadDescription(\r\n ^~~~~~~\r\nIn file included from coreclr/src/pal/src/include/pal/dbgmsg.h:160:0,\r\n                 from coreclr/src/pal/src/thread/thread.cpp:21:\r\ncoreclr/src/pal/src/include/pal/thread.hpp:204:13: note: only here as a friend\r\n             InternalSetThreadDescription("},{"Id":"10876306902","Type":"IssuesEvent","CreatedAt":"2019-11-16T00:43:10","Actor":"juniorriau","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27888","RelatedDescription":"Opened issue \"[Linux Share Hosting] Failed to create CoreCLR, HRESULT: 0x8007000E when run or publish webapp\" (#27888) at dotnet/coreclr","RelatedBody":"Hi\r\n\r\nI try to provide dotnet share hosting, but i'm facing an issue\r\n\r\ni have an error when trying to run  or publish dotnet webapp. the error message when i run dotnet run or dotnet publish --configuration Release below:\r\n\r\n`[dotnetapp@public myWebApp]$ dotnet publish --configuration Release\r\nTelemetry is: Enabled\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 15.95 ms for /home/dotnetapp/public_html/myWebApp/myWebApp.csproj.\r\n/usr/share/dotnet/sdk/3.0.100/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : Failed to create CoreCLR, HRESULT: 0x8007000E [/home/dotnetapp/public_html/myWebApp/myWebApp.csproj]\r\n[dotnetapp@public myWebApp]$ dotnet run\r\n/usr/share/dotnet/sdk/3.0.100/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : Failed to create CoreCLR, HRESULT: 0x8007000E [/home/dotnetapp/public_html/myWebApp/myWebApp.csproj]\r\n\r\nThe build failed. Fix the build errors and run again.\r\n[dotnetapp@public myWebApp]$`\r\n\r\nhere the server spec:\r\nCentOS 7\r\ncPanel Installed\r\nVM Ram 8GB\r\nUser ram limit 2GB \r\nulimit from root:\r\n`[root@public ~]# ulimit -v\r\nunlimited\r\n[root@public ~]#`\r\nulimit from user\r\n`[dotnetapp@public ~]$ ulimit -v\r\n4194304\r\n[dotnetapp@public ~]$`\r\n\r\ncause i'm new in dotnet, i confuse to find the error log file where. I've read an simillar issue in [Thread #25553](https://github.com/dotnet/coreclr/issues/25553) i think with my limit, it will not be happen"},{"Id":"10874841550","Type":"IssuesEvent","CreatedAt":"2019-11-15T20:01:21","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26333","RelatedDescription":"Closed issue \"TplEventSource TaskWaitSend event's field ContinueWithTaskID is always \"0\" since .NET Core 2.1\" (#26333) at dotnet/coreclr","RelatedBody":"We are using these events in profiler to recreate proper stacktrace for continuations and it's become impossible since .NET Core 2.1.\r\n\r\nLooks like there is no more ContinuationWrapper created for continuation action therefore AsyncMethodBuilderCore.TryGetContinuationTask(continuation) always returns null.\r\n\r\nSimple steps for reproducing:\r\n- Create .NET Core Console application targeting netcoreapp2.1\r\n- Paste this\r\n```csharp\r\ninternal class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            {   // Just to make sure AsyncCausalityTracer is On\r\n                var t = Type.GetType(\"System.Threading.Tasks.AsyncCausalityTracer\");\r\n                var loggingOnPropertyInfo = t.GetProperty(\"LoggingOn\", BindingFlags.Static | BindingFlags.NonPublic);\r\n                var value = loggingOnPropertyInfo.GetValue(t);\r\n                Console.WriteLine(\"AsyncCausalityTracer.LoggingOn: \" + value);\r\n            }\r\n\r\n            Console.WriteLine(\"Waiting for a key press\");\r\n//            Console.ReadKey();\r\n            Console.WriteLine(\"Running async method\");\r\n            Calculate().Wait();\r\n//            Console.ReadKey();\r\n        }\r\n\r\n        private static async Task Calculate()\r\n        {\r\n            Console.WriteLine(\"Start\");\r\n            await Task.Delay(5000);\r\n            Console.WriteLine(\"Finish\");\r\n        }\r\n    }\r\n```\r\n- Collect TPL events using PerfView\r\n- There are two TaskWait/Send events, both with ContinueWithTaskID=\"0\"\r\n\r\nIf you change target framework to netcoreapp2.0 then first TaskWait/Send event will have ContinueWithTaskID=\"2\""},{"Id":"10874565972","Type":"PullRequestEvent","CreatedAt":"2019-11-15T19:20:52","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27887","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#27887) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10876895930","Type":"PullRequestEvent","CreatedAt":"2019-11-16T05:15:13","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13078","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13078) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191115.4\r\n- **Date Produced**: 11/16/2019 4:23 AM\r\n- **Commit**: fc412c7e032c25a17da0e8ca4556b34897313d7c\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-rtm.19565.4\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n"},{"Id":"10876869344","Type":"PullRequestEvent","CreatedAt":"2019-11-16T05:00:13","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13077","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/templating\" (#13077) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191115.2\r\n- **Date Produced**: 11/16/2019 4:42 AM\r\n- **Commit**: 53a17fce7ce81aa68ddaa7b04f371dc6391d3497\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.0-rtm.19565.2\r\n\r\n[marker]: <> (End:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n\r\n"},{"Id":"10876751907","Type":"PullRequestEvent","CreatedAt":"2019-11-16T03:57:09","Actor":"wtgodbe","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13076","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#13076) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191115.2\r\n- **Date Produced**: 11/15/2019 5:59 PM\r\n- **Commit**: 65f04fb6db7a5e198d05dbebd5c4ad21eb018f89\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n"},{"Id":"10875157856","Type":"PullRequestEvent","CreatedAt":"2019-11-15T20:50:56","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13075","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#13075) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191115.5\r\n- **Date Produced**: 11/15/2019 6:01 PM\r\n- **Commit**: 1f9b6e2183cf20722fc52d17f35a40f30b218e5b\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-rtm.19565.5\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n"},{"Id":"10875064065","Type":"PullRequestEvent","CreatedAt":"2019-11-15T20:35:42","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13076","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#13076) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191115.2\r\n- **Date Produced**: 11/15/2019 5:59 PM\r\n- **Commit**: 65f04fb6db7a5e198d05dbebd5c4ad21eb018f89\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n"},{"Id":"10874802096","Type":"PullRequestEvent","CreatedAt":"2019-11-15T19:55:31","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13075","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#13075) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191115.5\r\n- **Date Produced**: 11/15/2019 6:01 PM\r\n- **Commit**: 1f9b6e2183cf20722fc52d17f35a40f30b218e5b\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-rtm.19565.5\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n"},{"Id":"10873809372","Type":"PullRequestEvent","CreatedAt":"2019-11-15T17:25:34","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13074","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13074) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191115.2\r\n- **Date Produced**: 11/15/2019 3:48 PM\r\n- **Commit**: 0a6b1524e0db362735f056a4048b4d67005cc686\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-rtm.19565.2\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n"},{"Id":"10873666747","Type":"PullRequestEvent","CreatedAt":"2019-11-15T17:05:00","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13071","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#13071) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191114.3\r\n- **Date Produced**: 11/15/2019 6:27 AM\r\n- **Commit**: 2139578cfdd746bb0035b8c77603102c4a56668e\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview3.19564.3\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10871704430","Type":"IssuesEvent","CreatedAt":"2019-11-15T12:59:28","Actor":"SetTrend","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1655","RelatedDescription":"Opened issue \"Change .NET Framework in version table from 4.6.1 to 4.7.1\" (#1655) at dotnet/standard","RelatedBody":"Currently, the [.NET Standard version table](/dotnet/standard/blob/master/docs/versions.md) shows `.NET Framework 4.6.1` to be compatible with `.NET Standard >= 1.5`.\r\n\r\nHowever, a footnote clarifies that `.NET Framework 4.6.1` is **_not_** fully compatible with `.NET Standard >= 1.5`.\r\n\r\nMoreover, many issues on [StackOverflow.com](https://stackoverflow.com/questions/49925484/you-must-add-a-reference-to-assembly-netstandard-version-2-0-0-0) and [GitHub](#542) give evidence that `.NET Framework 4.6.1` is **_not_** fully compatible with `.NET Standard >= 1.5`.\r\n\r\nWouldn't it be wise then to update the version table to provide **_true_** information than just spout some wannabe information?"},{"Id":"10867459774","Type":"IssuesEvent","CreatedAt":"2019-11-15T00:02:52","Actor":"replaysMike","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1654","RelatedDescription":"Opened issue \"HttpClient error 'Could not create SSL/TLS secure channel' when not Administrator\" (#1654) at dotnet/standard","RelatedBody":"I'm trying to use certificate based authentication using HttpClient in .Net Standard 2.0. However, I've noticed TLS negotiation doesn't succeed unless running the application in Administrator mode.\r\n\r\n```\r\nvar requestMessage = new HttpRequestMessage() {\r\n    RequestUri = new Uri(new Uri(_configuration.Endpoint), \"someendpoint\"),\r\n    Method = HttpMethod.Get\r\n};\r\nvar handler = new HttpClientHandler {\r\n    ClientCertificateOptions = ClientCertificateOption.Manual,\r\n    SslProtocols = SslProtocols.Tls12,\r\n};          \r\nhandler.ClientCertificates.Add(certificate);\r\nhandler.CheckCertificateRevocationList = false;\r\n// this is required to get around untrusted self-signed certs\r\nhandler.ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) => true;\r\nvar client = new HttpClient(handler);\r\nrequestMessage.Headers.Add(\"X-ARR-ClientCert\", certificate.GetRawCertDataString());\r\nvar response = await client.SendAsync(requestMessage);\r\n```\r\nThe client certificate is valid and installed in the local computer `My` store.\r\n\r\nWithout Administrator privileges a generic error is thrown: `The request was aborted: Could not create SSL/TLS secure channel` when not Administrator.\r\n\r\nAnyone have a clue as to why?"},{"Id":"10865977837","Type":"IssuesEvent","CreatedAt":"2019-11-14T20:11:00","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1502","RelatedDescription":"Closed issue \"Add System.Text.Json\" (#1502) at dotnet/standard","RelatedBody":"[`System.Text.Json`](https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=netcore-3.0) should be added to .Net Standard 2.1 or next release"},{"Id":"10862931156","Type":"IssuesEvent","CreatedAt":"2019-11-14T14:14:43","Actor":"tndata","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1653","RelatedDescription":"Opened issue \"Broken link\" (#1653) at dotnet/standard","RelatedBody":"\r\nI found a broken link in this sentence:\r\n\r\nThe plan for handling .NET Framework 4.6.1 and .NET Standard 2.0 is outlined in the **spec**.\r\n\r\nOn this page \r\nhttps://github.com/dotnet/standard/blob/master/docs/faq.md\r\n"},{"Id":"10862674814","Type":"PullRequestEvent","CreatedAt":"2019-11-14T13:46:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1652","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1652) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191113.6\r\n- **Date Produced**: 11/14/2019 7:13 AM\r\n- **Commit**: 5cee7c97d602f294e27c582d4dab81ec388f1d7b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19563.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10862457121","Type":"PullRequestEvent","CreatedAt":"2019-11-14T13:21:13","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1652","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1652) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191113.6\r\n- **Date Produced**: 11/14/2019 7:13 AM\r\n- **Commit**: 5cee7c97d602f294e27c582d4dab81ec388f1d7b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19563.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10876811562","Type":"IssuesEvent","CreatedAt":"2019-11-16T04:27:26","Actor":"hishamco","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/42620","RelatedDescription":"Opened issue \"DirectoryServices.AccountManagement & Open DJ\" (#42620) at dotnet/corefx","RelatedBody":"I'm struggling to run some of the `System.DirectoryServices.AccountManagement` APIs with Open DJ, all the time the `PrincipalContext` failed, nothing but `DirectoryEntry` works nicely with Open DJ\r\n\r\nAny idea?\r\n\r\n/cc @tarekgh"},{"Id":"10874933770","Type":"PullRequestEvent","CreatedAt":"2019-11-15T20:15:33","Actor":"cheenamalhotra","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/42619","RelatedDescription":"Opened pull request \"[release/2.1] Fixes driver behavior of sending Attention signal for successful Bulk Copy operation\" (#42619) at dotnet/corefx","RelatedBody":"Port of: https://github.com/dotnet/runtime/pull/61 and https://github.com/dotnet/SqlClient/pull/308\r\n\r\n### Summary\r\nCurrently when performing Bulk Copy operations with SqlClient driver, on successful completion, an Attention Signal is sent to SQL Server which is not correct behavior and should not happen.\r\n\r\n### Customer Impact\r\nCustomers wouldn't notice these attention signals being sent and the transactions would only get impacted if the Abort bit is checked during transaction prepare/commit time. This case would be easily hit with HK tables when the transaction inserts a large number of rows, hence causing all the LCs to be filled up and  LC flush IO to fall behind LCs being requested for log serialization at transaction prepare time.\r\n\r\n### Regression?\r\nNo. The behavior is the original design ported from .NET Framework.\r\n\r\n### Testing\r\nWhen performing tests, the transactions would always commit successfully, hence this attention signal was not noticed. A special test case will be investigated and designed using HK tables in dotnet/sqlclient test lab to cover this scenario. Since all new changes will be made in dotnet/sqlclient repository, we'll be adding new tests there in future.\r\n\r\n### Risk\r\n**Low**: The fix is to not send attention signal when performing cleanups post Bulk Copy in successful scenarios.\r\n\r\ncc: @danmosemsft @David-Engel "},{"Id":"10874924776","Type":"PullRequestEvent","CreatedAt":"2019-11-15T20:14:06","Actor":"cheenamalhotra","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/42618","RelatedDescription":"Opened pull request \"[release/3.0] Fix driver behavior of sending Attention signal for successful Bulk Copy operation\" (#42618) at dotnet/corefx","RelatedBody":"Port of: https://github.com/dotnet/runtime/pull/61 and https://github.com/dotnet/SqlClient/pull/308\r\n\r\n### Summary\r\nCurrently when performing Bulk Copy operations with SqlClient driver, on successful completion, an Attention Signal is sent to SQL Server which is not correct behavior and should not happen.\r\n\r\n### Customer Impact\r\nCustomers wouldn't notice these attention signals being sent and the transactions would only get impacted if the Abort bit is checked during transaction prepare/commit time. This case would be easily hit with HK tables when the transaction inserts a large number of rows, hence causing all the LCs to be filled up and  LC flush IO to fall behind LCs being requested for log serialization at transaction prepare time.\r\n\r\n### Regression?\r\nNo. The behavior is the original design ported from .NET Framework.\r\n\r\n### Testing\r\nWhen performing tests, the transactions would always commit successfully, hence this attention signal was not noticed. A special test case will be investigated and designed using HK tables in dotnet/sqlclient test lab to cover this scenario. Since all new changes will be made in dotnet/sqlclient repository, we'll be adding new tests there in future.\r\n\r\n### Risk\r\n**Low**: The fix is to not send attention signal when performing cleanups post Bulk Copy in successful scenarios.\r\n\r\ncc: @danmosemsft @David-Engel "},{"Id":"10874917237","Type":"PullRequestEvent","CreatedAt":"2019-11-15T20:12:54","Actor":"cheenamalhotra","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/42617","RelatedDescription":"Opened pull request \"[release/3.1] Fix driver behavior of sending Attention signal for successful Bulk Copy operation\" (#42617) at dotnet/corefx","RelatedBody":"Port of: https://github.com/dotnet/runtime/pull/61 and https://github.com/dotnet/SqlClient/pull/308\r\n\r\n### Summary\r\nCurrently when performing Bulk Copy operations with SqlClient driver, on successful completion, an Attention Signal is sent to SQL Server which is not correct behavior and should not happen.\r\n\r\n### Customer Impact\r\nCustomers wouldn't notice these attention signals being sent and the transactions would only get impacted if the Abort bit is checked during transaction prepare/commit time. This case would be easily hit with HK tables when the transaction inserts a large number of rows, hence causing all the LCs to be filled up and  LC flush IO to fall behind LCs being requested for log serialization at transaction prepare time.\r\n\r\n### Regression?\r\nNo. The behavior is the original design ported from .NET Framework.\r\n\r\n### Testing\r\nWhen performing tests, the transactions would always commit successfully, hence this attention signal was not noticed. A special test case will be investigated and designed using HK tables in dotnet/sqlclient test lab to cover this scenario. Since all new changes will be made in dotnet/sqlclient repository, we'll be adding new tests there in future.\r\n\r\n### Risk\r\n**Low**: The fix is to not send attention signal when performing cleanups post Bulk Copy in successful scenarios.\r\n\r\ncc: @danmosemsft @David-Engel "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10867621354","Type":"PullRequestEvent","CreatedAt":"2019-11-15T00:35:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7883","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7883) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @elinor-fung @john-h-k @manandre @tannergooding @carlossanlop"},{"Id":"10866878767","Type":"PullRequestEvent","CreatedAt":"2019-11-14T22:17:57","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7883","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7883) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10863363481","Type":"IssuesEvent","CreatedAt":"2019-11-14T15:00:12","Actor":"AArnott","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7882","RelatedDescription":"Opened issue \"UWP .NET Native compilation fails\" (#7882) at dotnet/corert","RelatedBody":"The build in Debug works fine, but in Release (where .NET Native compilation happens), we get this error:\r\n\r\n> error : ILT0005: '[...]nutc_driver.exe @\"[...]\\MessagePack-CSharp\\obj\\TestUAP_NETNative\\x86\\Release\\ilc\\intermediate\\MDIL\\TestUAP_NETNative.rsp\"' returned exit code -2147483645\r\n\r\nWhat does this error code mean?\r\nIt's a UWP test project. I can reproduce it with one super-simple test defined, and a project reference to another project in the solution that targets netstandard2.0;netcoreapp2.1.\r\n\r\nFrom https://github.com/neuecc/MessagePack-CSharp/pull/638"},{"Id":"10858512120","Type":"PullRequestEvent","CreatedAt":"2019-11-14T02:41:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7881","RelatedDescription":"Merged pull request \"Delete dead files\" (#7881) at dotnet/corert","RelatedBody":""},{"Id":"10857434025","Type":"PullRequestEvent","CreatedAt":"2019-11-13T22:57:09","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7881","RelatedDescription":"Opened pull request \"Delete dead files\" (#7881) at dotnet/corert","RelatedBody":""},{"Id":"10856190968","Type":"IssuesEvent","CreatedAt":"2019-11-13T20:02:05","Actor":"Shadow4walker","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7880","RelatedDescription":"Opened issue \"reflection support in rd.xml\" (#7880) at dotnet/corert","RelatedBody":"hello guys my code don't work on this void and i don't know how to support the Refection from this void\r\n`                var httpWebRequest = CraftRequest(url);\r\n                if (!keepalive) return await GetResponse(httpWebRequest);\r\n                var servicePoint = httpWebRequest.ServicePoint;\r\n                var property = servicePoint.GetType().GetProperty(\"HttpBehaviour\", BindingFlags.Instance | BindingFlags.NonPublic);\r\n                if (property != null) property.SetValue(servicePoint, (byte) 0, null);\r\n                return await GetResponse(httpWebRequest);\r\n`\r\nwhat should i put in the rd.xml to support executing this void!"},{"Id":"10847482917","Type":"PullRequestEvent","CreatedAt":"2019-11-12T22:51:56","Actor":"cshung","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7869","RelatedDescription":"Merged pull request \"Adding signature matching unit test\" (#7869) at dotnet/corert","RelatedBody":"This unit test is meant to validate https://github.com/dotnet/coreclr/pull/27676 \r\n\r\n@dotnet/crossgen-contrib "}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10876734377","Type":"PullRequestEvent","CreatedAt":"2019-11-16T03:47:19","Actor":"wtgodbe","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3919","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3919) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191115.2\r\n- **Date Produced**: 11/15/2019 5:59 PM\r\n- **Commit**: 65f04fb6db7a5e198d05dbebd5c4ad21eb018f89\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n"},{"Id":"10875960968","Type":"IssuesEvent","CreatedAt":"2019-11-15T23:12:26","Actor":"TheBuzzSaw","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3920","RelatedDescription":"Opened issue \"Does /p:OutputType=WinExe propagate to dependencies?\" (#3920) at dotnet/sdk","RelatedBody":"I am attempting to build a project with overridden properties.\r\n\r\n    dotnet publish MyProject.csproj -f netcoreapp3.0 -c Release -r win-x86 /p:CopyOutputSymbolsToPublishDirectory=false /p:OutputType=WinExe\r\n\r\nHowever, it results in a build error in a classlib dependency.\r\n\r\n    error CS5001: Program does not contain a static 'Main' method suitable for an entry point\r\n\r\nI can only assume that the `/p:OutputType=WinExe` is propagating down and overriding their properties too. Is there way to stop that? Can I have that override only apply to the target project?\r\n\r\nOddly enough, if I build without `/p:OutputType=WinExe` and then immediately build _with_ `/p:OutputType=WinExe`, it succeeds. (The dependencies are built and cached, I guess.)"},{"Id":"10875063728","Type":"PullRequestEvent","CreatedAt":"2019-11-15T20:35:39","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3919","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3919) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191115.2\r\n- **Date Produced**: 11/15/2019 5:59 PM\r\n- **Commit**: 65f04fb6db7a5e198d05dbebd5c4ad21eb018f89\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n"},{"Id":"10874779074","Type":"IssuesEvent","CreatedAt":"2019-11-15T19:52:07","Actor":"jhudsoncedaron","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3918","RelatedDescription":"Opened issue \"ProjectReference Update=\"\" doesn't actually work\" (#3918) at dotnet/sdk","RelatedBody":"We have a DLL that contains downgrade instructions, so despite being built in the project containing the latest version, it must inherently be loadable on the oldest version we ever shipped. In order to do so, we used PackageReference Update= to pin reference of dlls when building that version.\r\n\r\nUnfortunately this doesn't really work for some reason we don't know. The Update= version force is ignored and the higher version in the dependent dll is used instead. This actually causes the dynamic load to fail whenever we need to update the packages. For some reason, despite the same artifact being present in the dll refrenced by PackageVersion, the dynamic load succeeds there (or we would have noticed the very first time we tried this).\r\n\r\nDon't let netstandard2.0 fool you; we are building with the 3.0 toolchain and the executable (omitted from the sample) is linked against netcoreapp3.0. You can check the dependencies of DynamicLoaded.dll with ildasm. It should reference Demo.dll version 1.0.0 but it references Demo.dll version 2.0.0\r\n\r\nThe real If.dll is not an interface-only dll. It contains quite a bit of code for upgrade and downgrade, and the current version of If.dll used during upgrade can't function with the older version of Demo.dll.\r\n\r\nThis issue is newly discovered a few days ago, thankfully not by a customer.\r\n\r\n[downgradedemo.zip](https://github.com/dotnet/sdk/files/3852941/downgradedemo.zip)\r\n"},{"Id":"10872692866","Type":"PullRequestEvent","CreatedAt":"2019-11-15T15:07:06","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3916","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#3916) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191114.6\r\n- **Date Produced**: 11/15/2019 2:39 AM\r\n- **Commit**: c1cd0349f7d29cf21d93d61cdea382aecc422e36\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19564.6\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19564.6\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19564.6\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n"},{"Id":"10872231948","Type":"PullRequestEvent","CreatedAt":"2019-11-15T14:11:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3915","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3915) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191114.4\r\n- **Date Produced**: 11/15/2019 10:12 AM\r\n- **Commit**: bc2d90a1c6b23e4e64fc117baa531e14b9288b5a\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n"},{"Id":"10871925803","Type":"IssuesEvent","CreatedAt":"2019-11-15T13:31:05","Actor":"khellang","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3917","RelatedDescription":"Opened issue \"Respect `DO_NOT_TRACK` as standardized alternative to `DOTNET_CLI_TELEMETRY_OPTOUT`\" (#3917) at dotnet/sdk","RelatedBody":"`DO_NOT_TRACK` is a proposed unified standard for opting out of telemetry for TUI/console apps.\r\nIt would be nice if the dotnet CLI followed the same standard.\r\n\r\nSee https://consoledonottrack.com/"},{"Id":"10871716911","Type":"PullRequestEvent","CreatedAt":"2019-11-15T13:01:13","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3916","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#3916) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191114.6\r\n- **Date Produced**: 11/15/2019 2:39 AM\r\n- **Commit**: c1cd0349f7d29cf21d93d61cdea382aecc422e36\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19564.6\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19564.6\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19564.6\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n"},{"Id":"10871252538","Type":"PullRequestEvent","CreatedAt":"2019-11-15T11:50:14","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3915","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3915) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191114.4\r\n- **Date Produced**: 11/15/2019 10:12 AM\r\n- **Commit**: bc2d90a1c6b23e4e64fc117baa531e14b9288b5a\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"522965180","IsPullRequest":true,"CreatedAt":"2019-11-14T16:22:27","Actor":"NextTurn","Number":"153","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/153","RelatedDescription":"Open PR \"Fix broken links\" (#153)"},{"Id":"522951789","IsPullRequest":true,"CreatedAt":"2019-11-14T16:00:23","Actor":"NextTurn","Number":"152","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/152","RelatedDescription":"Open PR \"Fix broken links\" (#152)"},{"Id":"520212668","IsPullRequest":true,"CreatedAt":"2019-11-08T23:32:02","Actor":"onovotny","Number":"151","RawContent":null,"Title":"Update RxUI license to reflect repo","State":"closed","Body":"Fixes https://github.com/dotnet-foundation/dotnetfoundation-website/issues/68","Url":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Closed or merged PR \"Update RxUI license to reflect repo\" (#151)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-11-07T05:43:04","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Closed or merged PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"501128777","IsPullRequest":true,"CreatedAt":"2019-11-07T05:42:14","Actor":"gep13","Number":"150","RawContent":null,"Title":"Add new Cake Maintainer","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Closed or merged PR \"Add new Cake Maintainer\" (#150)"},{"Id":"500670461","IsPullRequest":true,"CreatedAt":"2019-11-07T05:41:48","Actor":"JimBobSquarePants","Number":"149","RawContent":null,"Title":"Add ImageSharp","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Closed or merged PR \"Add ImageSharp\" (#149)"},{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"523776291","IsPullRequest":true,"CreatedAt":"2019-11-16T02:26:17","Actor":"franksinankaya","Number":"27889","RawContent":null,"Title":"Fix friend class declaration","State":"open","Body":"[ 27%] Building CXX object src/pal/src/CMakeFiles/coreclrpal.dir/arch/amd64/signalhandlerhelper.cpp.o\r\ncoreclr/src/pal/src/thread/thread.cpp:1613:1: error: ‘CorUnix::PAL_ERROR CorUnix::InternalSetThreadDescription(CorUnix::CPalThread*, HANDLE, PCWSTR)’ has not been declared within CorUnix [-Werror]\r\n CorUnix::InternalSetThreadDescription(\r\n ^~~~~~~\r\nIn file included from coreclr/src/pal/src/include/pal/dbgmsg.h:160:0,\r\n                 from coreclr/src/pal/src/thread/thread.cpp:21:\r\ncoreclr/src/pal/src/include/pal/thread.hpp:204:13: note: only here as a friend\r\n             InternalSetThreadDescription(","Url":"https://github.com/dotnet/coreclr/pull/27889","RelatedDescription":"Open PR \"Fix friend class declaration\" (#27889)"},{"Id":"523761688","IsPullRequest":false,"CreatedAt":"2019-11-16T00:43:10","Actor":"juniorriau","Number":"27888","RawContent":null,"Title":"[Linux Share Hosting] Failed to create CoreCLR, HRESULT: 0x8007000E when run or publish webapp","State":"open","Body":"Hi\r\n\r\nI try to provide dotnet share hosting, but i'm facing an issue\r\n\r\ni have an error when trying to run  or publish dotnet webapp. the error message when i run dotnet run or dotnet publish --configuration Release below:\r\n\r\n`[dotnetapp@public myWebApp]$ dotnet publish --configuration Release\r\nTelemetry is: Enabled\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 15.95 ms for /home/dotnetapp/public_html/myWebApp/myWebApp.csproj.\r\n/usr/share/dotnet/sdk/3.0.100/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : Failed to create CoreCLR, HRESULT: 0x8007000E [/home/dotnetapp/public_html/myWebApp/myWebApp.csproj]\r\n[dotnetapp@public myWebApp]$ dotnet run\r\n/usr/share/dotnet/sdk/3.0.100/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : Failed to create CoreCLR, HRESULT: 0x8007000E [/home/dotnetapp/public_html/myWebApp/myWebApp.csproj]\r\n\r\nThe build failed. Fix the build errors and run again.\r\n[dotnetapp@public myWebApp]$`\r\n\r\nhere the server spec:\r\nCentOS 7\r\ncPanel Installed\r\nVM Ram 8GB\r\nUser ram limit 2GB \r\nulimit from root:\r\n`[root@public ~]# ulimit -v\r\nunlimited\r\n[root@public ~]#`\r\nulimit from user\r\n`[dotnetapp@public ~]$ ulimit -v\r\n4194304\r\n[dotnetapp@public ~]$`\r\n\r\ncause i'm new in dotnet, i confuse to find the error log file where. I've read an simillar issue in [Thread #25553](https://github.com/dotnet/coreclr/issues/25553) i think with my limit, it will not be happen","Url":"https://github.com/dotnet/coreclr/issues/27888","RelatedDescription":"Open issue \"[Linux Share Hosting] Failed to create CoreCLR, HRESULT: 0x8007000E when run or publish webapp\" (#27888)"},{"Id":"523643890","IsPullRequest":true,"CreatedAt":"2019-11-15T19:20:52","Actor":"Dotnet-GitSync-Bot","Number":"27887","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @carlossanlop","Url":"https://github.com/dotnet/coreclr/pull/27887","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx\" (#27887)"},{"Id":"523288080","IsPullRequest":false,"CreatedAt":"2019-11-15T06:48:07","Actor":"GrabYourPitchforks","Number":"27886","RawContent":null,"Title":"Vector<T> operations don't take advantage of memory operands","State":"open","Body":"With https://github.com/dotnet/coreclr/pull/22944, the raw hardware intrinsics are able to take advantage of folding the memory load operation into the SIMD instruction itself.\r\n\r\nHowever, this same optimization was not applied to `Vector` and `Vector<T>` more generally, even though they're using nearly identical codegen under the covers.\r\n\r\n```cs\r\npublic static Vector<byte> M(Vector<byte> a, ref Vector<byte> b)\r\n{\r\n    return Vector.Equals(a, b);\r\n}\r\n\r\npublic static Vector256<byte> N(Vector256<byte> a, ref Vector256<byte> b)\r\n{\r\n    return Avx2.CompareEqual(a, b);\r\n}\r\n```\r\n\r\n```asm\r\n; C.M(System.Numerics.Vector`1<Byte>, System.Numerics.Vector`1<Byte> ByRef)\r\n    L0000: vzeroupper\r\n    L0003: vmovupd ymm0, [rdx]\r\n    L0007: vmovupd ymm1, [r8]   ; note the allocation of register ymm1\r\n    L000c: vpcmpeqb xmm0, xmm0, xmm1\r\n    L0010: vmovupd [rcx], ymm0\r\n    L0014: mov rax, rcx\r\n    L0017: vzeroupper\r\n    L001a: ret\r\n\r\n; C.N(System.Runtime.Intrinsics.Vector256`1<Byte>, System.Runtime.Intrinsics.Vector256`1<Byte> ByRef)\r\n    L0000: vzeroupper\r\n    L0003: vmovupd ymm0, [rdx]\r\n    L0007: vpcmpeqb xmm0, xmm0, [r8]   ; operation doesn't touch register ymm1\r\n    L000c: vmovupd [rcx], ymm0\r\n    L0010: mov rax, rcx\r\n    L0013: vzeroupper\r\n    L0016: ret\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27886","RelatedDescription":"Open issue \"Vector<T> operations don't take advantage of memory operands\" (#27886)"},{"Id":"522848814","IsPullRequest":true,"CreatedAt":"2019-11-15T02:45:53","Actor":"dotnet-maestro[bot]","Number":"27881","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191114.1\r\n- **Date Produced**: 11/14/2019 10:49 AM\r\n- **Commit**: c77948d92a2f950140f09384f057cb893ec3955a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha.1.19564.1\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/27881","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#27881)"},{"Id":"522848602","IsPullRequest":true,"CreatedAt":"2019-11-15T02:45:47","Actor":"dotnet-maestro[bot]","Number":"27880","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191113.6\r\n- **Date Produced**: 11/14/2019 7:13 AM\r\n- **Commit**: 5cee7c97d602f294e27c582d4dab81ec388f1d7b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha.1.19563.6\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha.1.19563.6\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/27880","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#27880)"},{"Id":"522847167","IsPullRequest":true,"CreatedAt":"2019-11-15T02:45:39","Actor":"dotnet-maestro[bot]","Number":"27879","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191113.9\r\n- **Date Produced**: 11/14/2019 1:36 AM\r\n- **Commit**: 3e344e919cc58ead331b18b83021120c1e8620e3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19563.9\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/27879","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#27879)"},{"Id":"523163419","IsPullRequest":true,"CreatedAt":"2019-11-15T00:21:02","Actor":"wtgodbe","Number":"27885","RawContent":null,"Title":"Update PreReleaseVersionLabel to RTM","State":"closed","Body":"Non-shipping packages should be labeled RTM for GA. We need to take this fix for 3.1 GA","Url":"https://github.com/dotnet/coreclr/pull/27885","RelatedDescription":"Closed or merged PR \"Update PreReleaseVersionLabel to RTM\" (#27885)"},{"Id":"523158145","IsPullRequest":false,"CreatedAt":"2019-11-14T23:12:23","Actor":"am11","Number":"27884","RawContent":null,"Title":"Align missing libintl behavior of macOS and Alpine / musl-libc portable","State":"open","Body":"<ins>libintl: the last unavoidable runtime dependency</ins>\r\n\r\nFor the operating systems which do not have libc providing gettext or libintl functionality out of the box, there is a UNIXTODO:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/ed5dc831b09a0bfed76ddad684008bebc86ab2f0/src/pal/src/locale/unicode.cpp#L592-L595\r\n\r\nOn macOS, regardless we have ran `brew install gettext` on the CoreCLR build machine, it gets skipped due to this condition:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/ed5dc831b09a0bfed76ddad684008bebc86ab2f0/src/pal/src/configure.cmake#L49-L51\r\n\r\nHowever, it seems that the build machine dedicated for musl-libc portable, there is gettext installed, so consumers get this as a hard runtime dependency. On Alpine Linux, we need to install `libintl` package; on Void Linux (muscle edition), the smallest available (yet baggy) package `gettext` is required. A bit more unfortunate case is Single EXE / \"bundle\" apps, where this inobvious dependency is required as well.\r\n\r\nFor that matter, we have recently added a check in `dotnet-install` script: https://github.com/dotnet/cli/blob/ba194e4e6fe356af1e82abdca03e9cfbb2e3ca28/scripts/obtain/dotnet-install.sh#L258.\r\n\r\nProposal: Make `HAVE_LIBINTL_H`  always-false for Alpine Linux just like macOS (for now™️).\r\n\r\nPS - BTW, there is no issue tracking that UNIXTODO; was the original plan to implement the required functionality in CoreCLR?\r\n\r\n/cc @janvorli, @jkotas","Url":"https://github.com/dotnet/coreclr/issues/27884","RelatedDescription":"Open issue \"Align missing libintl behavior of macOS and Alpine / musl-libc portable\" (#27884)"},{"Id":"522549864","IsPullRequest":true,"CreatedAt":"2019-11-14T22:32:37","Actor":"jashook","Number":"27870","RawContent":null,"Title":"Change from `bin/Product` and `bin/tests/` to `artifacts/Product` and `artifacts/tests/`","State":"closed","Body":"This change does not make us more arcadified; however, it does get us closer to using their layout.\r\n\r\nI do not expect this to make the consolidation deadline. @ViktorHofer @jkoritzinsky @trylek ptal","Url":"https://github.com/dotnet/coreclr/pull/27870","RelatedDescription":"Closed or merged PR \"Change from `bin/Product` and `bin/tests/` to `artifacts/Product` and `artifacts/tests/`\" (#27870)"},{"Id":"522952870","IsPullRequest":false,"CreatedAt":"2019-11-14T20:08:40","Actor":"yaugenka","Number":"27882","RawContent":null,"Title":"GetCustomAttribute throws NullReferenceException on undefined or empty Attributes","State":"closed","Body":"`Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyDescriptionAttribute>().Description;`\r\nThis call will throw NullReferenceException when `Description` is not defined or defined with empty value like `<Description></Description>`\r\n\r\nIn Framework it returns an empty string.","Url":"https://github.com/dotnet/coreclr/issues/27882","RelatedDescription":"Closed issue \"GetCustomAttribute throws NullReferenceException on undefined or empty Attributes\" (#27882)"},{"Id":"522584376","IsPullRequest":true,"CreatedAt":"2019-11-14T18:56:24","Actor":"BruceForstall","Number":"27875","RawContent":null,"Title":"Fix Windows format job","State":"closed","Body":"It downloads the bootstrap.cmd script with Unix line endings.\r\nWe need to convert this to Windows line endings before running it.\r\nIt turns out that Windows batch files can work with Unix line\r\nendings sometimes, but there are apparently issues with GOTO and CALL,\r\nwhich we started to hit with a newly updated bootstrap.cmd.","Url":"https://github.com/dotnet/coreclr/pull/27875","RelatedDescription":"Closed or merged PR \"Fix Windows format job\" (#27875)"},{"Id":"522428656","IsPullRequest":true,"CreatedAt":"2019-11-14T18:22:35","Actor":"carlossanlop","Number":"27866","RawContent":null,"Title":"Testing darc update-dependencies (no merge)","State":"closed","Body":"Testing:\r\n`darc update-dependencies --source-repo corefx --channel '.Net Core 3.1 Dev'`","Url":"https://github.com/dotnet/coreclr/pull/27866","RelatedDescription":"Closed or merged PR \"Testing darc update-dependencies (no merge)\" (#27866)"},{"Id":"522837656","IsPullRequest":false,"CreatedAt":"2019-11-14T12:52:03","Actor":"damageboy","Number":"27878","RawContent":null,"Title":"Consider mitigating the JCC erratum in the JIT (Nov. 2019)","State":"open","Body":"## What\r\nIn continuation of #27877, It might be worthwhile to consider applying the same fixes suggested by intel in their erratum:\r\nhttps://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf\r\n\r\nTo the code generated by the JIT.\r\n\r\nIt is hard for me, personally to evaluate the impact on the performance of generated code produced by the JIT, but my very small anecdotal experience shows anywhere from 1%-2% degradation for my own code, to potential 20% degradation in very specific instances.\r\n\r\nThis is in accordance with Intel's own guidance (Section 2.2):\r\n> Intel has observed performance effects associated with the workaround ranging from\r\n0-4% on many industry-standard benchmarks. 1 In subcomponents of these\r\nbenchmarks, Intel has observed outliers higher than the 0-4% range.\r\n\r\n## Affected opcodes\r\nThe update affects all forms of jumps, direct and indirect when the instruction itself is either ending or crossing on a 32-byte boundary (Section 2.1):\r\n> The MCU prevents jump instructions from being cached in the Decoded ICache when the jump\r\ninstructions cross a 32-byte boundary or when they end on a 32-byte boundary. In\r\nthis context, Jump Instructions include all jump types: conditional jump (Jcc), macro-\r\nfused op-Jcc (where op is one of cmp, test, add, sub, and, inc, or dec), direct\r\nunconditional jump, indirect jump, direct/indirect call, and return.\r\n\r\n![image](https://user-images.githubusercontent.com/125730/68857980-b8c22080-06ec-11ea-9a87-4d37859d8767.png)\r\n\r\n## Proposed mitigation for code-generation\r\nThe proposed fix by intel is to stuff the affected opcodes:\r\n* jcc\r\n* fused\r\n*  jmp\r\n* call\r\n* ret\r\n\r\nwith 0x2e prefix (End of section 2.4.0):\r\n> The advice to software developers is to align the jae instruction so that it does not\r\ncross a 32-byte boundary. In the example, this is done by adding the benign prefix\r\n0x2e four times before the first push %rbp instruction so that the cmp instruction,\r\nwhich started at offset 1c, will instead start at offset 20. Hence the macro-fused cmp+jae instruction will not cross a 32-byte boundary.\r\n\r\n\r\n## Affected processors\r\nSection 4.0 specifically lists no less than 40 Intel CPUs, covering the breadth of their product line, that are affected by this update:\r\n\r\n| Family  | Stepping | Series                                                                                                         |\r\n|---------|----------|----------------------------------------------------------------------------------------------------------------|\r\n| 06\\_8EH | 9        | 8th Generation Intel® CoreTM Processor Family based on microarchitecture code name Amber Lake Y                |\r\n| 06\\_8EH | C        | 8th Generation Intel® CoreTM Processor Family based on microarchitecture code name Amber Lake Y                |\r\n| 06\\_55  | 7        | 2nd Generation Intel® Xeon® Scalable Processors based on microarchitecture code name Cascade Lake \\(server\\)   |\r\n| 06\\_9EH | A        | 8th Generation Intel® CoreTM Processor Family based on microarchitecture code name Coffee Lake H               |\r\n| 06\\_9EH | A        | 8th Generation Intel® CoreTM Processor Family based on microarchitecture code name Coffee Lake S               |\r\n| 06\\_8EH | A        | 8th Generation Intel® CoreTM Processor Family based on microarchitecture code name Coffee Lake U43e            |\r\n| 06\\_9EH | B        | 8th Generation Intel® CoreTM Processor Family based on microarchitecture code name Coffee Lake S \\(47\\)        |\r\n| 06\\_9EH | B        | Intel® Celeron® Processor G Series based on microarchitecture code name Coffee Lake S \\(48\\)                   |\r\n| 06\\_9EH | A        | 8th Generation Intel® CoreTM Processor Family based on microarchitecture code name Coffee Lake S \\(69\\) x/KBP  |\r\n| 06\\_9EH | A        | Intel® Xeon® Processor E Family based on microarchitecture code name Coffee Lake S \\(610\\)                     |\r\n| 06\\_9EH | A        | Intel® Xeon® Processor E Family based on microarchitecture code name Coffee Lake S \\(611\\)                     |\r\n| 06\\_9EH | A        | Intel® Xeon® Processor E Family based on microarchitecture code name Coffee Lake S \\(612\\)                     |\r\n| 06\\_9EH | A        | Intel® Xeon® Processor E Family based on microarchitecture code name Coffee Lake S \\(413\\)                     |\r\n| 06\\_9EH | A        | Intel® Xeon® Processor E Family based on microarchitecture code name Coffee Lake S \\(414\\)                     |\r\n| 06\\_9EH | A        | Intel® Xeon® Processor E Family based on microarchitecture code name Coffee Lake S \\(415\\)                     |\r\n| 06\\_9EH | D        | 9th Generation Intel® CoreTM Processor Family based on microarchitecture code name Coffee Lake H \\(816\\)       |\r\n| 06\\_9EH | D        | 9th Generation Intel® CoreTM Processor Family based on microarchitecture code name Coffee Lake S \\(817\\)       |\r\n| 06\\_8EH | C        | 10th Generation Intel® CoreTM Processor Family based on microarchitecture code name Comet Lake U42             |\r\n| 06\\_A6H | 0        | 10th Generation Intel® CoreTM Processor Family based on microarchitecture code name Comet Lake U62             |\r\n| 06\\_9EH | 9        | 8th Generation Intel® CoreTM Processor Family based on microarchitecture code name Kaby Lake G                 |\r\n| 06\\_9EH | 9        | 7th Generation Intel® CoreTM Processor Family based on microarchitecture code name Kaby Lake H                 |\r\n| 06\\_AEH | A        | 8th Generation Intel® CoreTM Processor Family based on microarchitecture code name Kaby Lake Refresh U \\(422\\) |\r\n| 06\\_9EH | 9        | 7th Generation Intel® CoreTM Processor Family based on microarchitecture code name Kaby Lake S                 |\r\n| 06\\_8EH | 9        | 7th Generation Intel® CoreTM Processor Family based on microarchitecture code name Kaby Lake U                 |\r\n| 06\\_8EH | 9        | 7th Generation Intel® CoreTM Processor Family based on microarchitecture code name Kaby Lake U23e              |\r\n| 06\\_9EH | 9        | Intel® CoreTM X\\-series Processors based on microarchitecture code name Kaby Lake X                            |\r\n| 06\\_9EH | 9        | Intel® Xeon® Processor E3 v6 Family Kaby Lake Xeon E3                                                          |\r\n| 06\\_8EH | 9        | 7th Generation Intel® CoreTM Processor Family based on microarchitecture code name Kaby Lake Y                 |\r\n| 06\\_55H | 4        | Intel® Xeon® Processor D Family based on microarchitecture code name Skylake D Bakerville                      |\r\n| 06\\_5E  | 3        | 6th Generation Intel® CoreTM Processor Family based on microarchitecture code name Skylake H                   |\r\n| 06\\_5E  | 3        | 6th Generation Intel® CoreTM Processor Family based on microarchitecture code name Skylake S                   |\r\n| 06\\_55H | 4        | Intel® Xeon® Scalable Processors based on microarchitecture code name Skylake Server                           |\r\n| 06\\_4E  | 3        | 6th Generation Intel® CoreTM Processors based on microarchitecture code name Skylake U                         |\r\n| 06\\_4E  | 3        | 6th Generation Intel® CoreTM Processor Family based on microarchitecture code name Skylake U23e                |\r\n| 06\\_55H | 4        | Intel® Xeon® Processor W Family based on microarchitecture code name Skylake W                                 |\r\n| 06\\_55H | 4        | Intel® CoreTM X\\-series Processors based on microarchitecture code name Skylake X                              |\r\n| 06\\_55H | 4        | Intel® Xeon® Processor E3 v5 Family based on microarchitecture code name Skylake Xeon E3                       |\r\n| 06\\_4E  | 3        | 6th Generation Intel® CoreTM Processors based on microarchitecture code name Skylake Y                         |\r\n| 06\\_8EH | B        | 8th Generation Intel® CoreTM Processors based on microarchitecture code name Whiskey Lake U                    |\r\n| 06\\_8EH | C        | 8th Generation Intel® CoreTM Processors based on microarchitecture code name Whiskey Lake U                    |\r\n\r\n## Proposed fix to the JIT\r\n\r\nI personally hold the position that this isn't a small issue (even if we take intel's claim of 0%-4% as-is) and that it is not going away: neither in terms of performance impact nor when considering the breadth of the product line affected by this issue.\r\nI think that it would be the desired behavior, from the standpoint of the JIT, to detect if this microcode update is applied or if the CPU model is from the affected family and generate code that would not trigger the degradation.\r\n\r\nOn the face of it, while AMD processors are completely unaffected by this erratum, they also seem to not suffer adverse effects when running code that was generated by patched up assemblers:\r\n\r\nhttps://www.phoronix.com/scan.php?page=news_item&px=AMD-With-Intel-JCC-Assembler\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27878","RelatedDescription":"Open issue \"Consider mitigating the JCC erratum in the JIT (Nov. 2019)\" (#27878)"},{"Id":"522824239","IsPullRequest":false,"CreatedAt":"2019-11-14T12:24:12","Actor":"damageboy","Number":"27877","RawContent":null,"Title":"Consider re-compling CoreCLR's unmanaged code to mitigate JCC erratum (Nov. 2019)","State":"open","Body":"Intel has recently released a microcode update that adversely affects the performance of... all jumps (!):\r\n\r\nhttps://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf\r\n\r\nI've personally had the \"pleasure\" of encountering this whilst benchmarking CoreCLR 3.0 `Array.Sort()` on clearlinux which seems to have pushed this microcode update earlier than others:\r\n\r\nhttps://twitter.com/damageboy/status/1194751035136450560?s=20\r\n\r\nFor context, Here's the before/after perf hit on `Array.Sort()`:\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/125730/68856066-46e7d800-06e8-11ea-9092-1627bfb910aa.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/125730/68856091-55ce8a80-06e8-11ea-977a-f28f169d31c8.png)\r\n\r\nVery specifically, I was hit with a 20% drop in `Array.Sort()`, and a smaller (by sheer luck I presume?) hit with my own code. Intel claims that the average drop in performance should be in the %0-%4 range.\r\n\r\nThe erratum claims that the microcode update adversely effects:\r\n> In this context, Jump Instructions include all jump types: conditional jump (Jcc), macro-\r\nfused op-Jcc (where op is one of cmp, test, add, sub, and, inc, or dec), direct\r\nunconditional jump, indirect jump, direct/indirect call, and return.\r\n\r\nThe recommended fix, per the erratum, is to recompile the code with (Section 3.1.1):\r\n`-mbranches-within-32B-boundaries`\r\n\r\nIn theory, this could end with a relatively minor(?) CoreCLR runtime release. Or incorporated into the 3.1 release cycle?\r\n\r\nIn addition, I think we should have a discussion about possibly applying similar (conditional) fixes to the JIT itself w.r.t the generated code on Intel processors, as it doesn't seem this issue is about to simply go away on its own.\r\n\r\nI will open a separate issue for the JIT related discussion.","Url":"https://github.com/dotnet/coreclr/issues/27877","RelatedDescription":"Open issue \"Consider re-compling CoreCLR's unmanaged code to mitigate JCC erratum (Nov. 2019)\" (#27877)"},{"Id":"522513549","IsPullRequest":true,"CreatedAt":"2019-11-14T07:03:44","Actor":"ViktorHofer","Number":"27869","RawContent":null,"Title":"Remove obsolete benchmark projs","State":"closed","Body":"@trylek and I discovered that restoring those benchmark projects rely on packages from the myget feed. Removing those projects as those have been disabled for quite a while. I hope I'm not overlooking something here.","Url":"https://github.com/dotnet/coreclr/pull/27869","RelatedDescription":"Closed or merged PR \"Remove obsolete benchmark projs\" (#27869)"},{"Id":"522591736","IsPullRequest":true,"CreatedAt":"2019-11-14T02:54:20","Actor":"AntonLapounov","Number":"27876","RawContent":null,"Title":"Move helixpublishwitharcade.proj one directory higher","State":"open","Body":"Fixes #27508. After moving 'helixpublishwitharcade.proj' from 'tests' to 'tests\\src' directory we inadvertently started generating the unused 'helixpublishwitharcade.cmd' file as the result of importing 'tests\\src\\Directory.Build.props'. Nothing in 'tests\\src\\Directory.Build.props' file is actually needed for 'helixpublishwitharcade.proj' besides setting the `BinDir` property.  This change moves 'helixpublishwitharcade.proj' back to the 'tests' directory and does a minor properties cleanup.","Url":"https://github.com/dotnet/coreclr/pull/27876","RelatedDescription":"Open PR \"Move helixpublishwitharcade.proj one directory higher\" (#27876)"},{"Id":"522552036","IsPullRequest":true,"CreatedAt":"2019-11-14T02:39:00","Actor":"BruceForstall","Number":"27871","RawContent":null,"Title":"Fix format job; build with the same dotnet CLI that jitutils uses","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27871","RelatedDescription":"Closed or merged PR \"Fix format job; build with the same dotnet CLI that jitutils uses\" (#27871)"},{"Id":"522578103","IsPullRequest":true,"CreatedAt":"2019-11-14T02:04:49","Actor":"VSadov","Number":"27874","RawContent":null,"Title":"fix volatile float/double on win-arm64   (make sure compiler does not do numeric casts)","State":"open","Body":"fix volatile float/double on win-arm64   (make sure compiler does not do numeric casts)\r\n\r\nfixes:https://github.com/dotnet/coreclr/issues/27830","Url":"https://github.com/dotnet/coreclr/pull/27874","RelatedDescription":"Open PR \"fix volatile float/double on win-arm64   (make sure compiler does not do numeric casts)\" (#27874)"},{"Id":"522559315","IsPullRequest":true,"CreatedAt":"2019-11-14T01:15:19","Actor":"sandreenko","Number":"27873","RawContent":null,"Title":"Return compGetTieringName printing.","State":"closed","Body":"I believe that was deleted by mistake in https://github.com/dotnet/coreclr/pull/27147.\r\nReturn it back.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/27873","RelatedDescription":"Closed or merged PR \"Return compGetTieringName printing.\" (#27873)"},{"Id":"522552744","IsPullRequest":true,"CreatedAt":"2019-11-14T00:32:15","Actor":"safern","Number":"27872","RawContent":null,"Title":"Test skip corefx tests with new attribute","State":"open","Body":"This is using a private build of https://github.com/dotnet/corefx/compare/master...safern:DisableCoreClrTests?expand=1","Url":"https://github.com/dotnet/coreclr/pull/27872","RelatedDescription":"Open PR \"Test skip corefx tests with new attribute\" (#27872)"},{"Id":"522400918","IsPullRequest":true,"CreatedAt":"2019-11-14T00:16:45","Actor":"jashook","Number":"27861","RawContent":null,"Title":"Add generatelayoutonly build-test.cmd","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27861","RelatedDescription":"Closed or merged PR \"Add generatelayoutonly build-test.cmd\" (#27861)"},{"Id":"522395578","IsPullRequest":true,"CreatedAt":"2019-11-13T23:32:22","Actor":"elinor-fung","Number":"27859","RawContent":null,"Title":"Fix naming in AssemblyLoadFromResolveHandlerInvoked user data template","State":"closed","Body":"Follow-up to #27833","Url":"https://github.com/dotnet/coreclr/pull/27859","RelatedDescription":"Closed or merged PR \"Fix naming in AssemblyLoadFromResolveHandlerInvoked user data template\" (#27859)"},{"Id":"522405508","IsPullRequest":true,"CreatedAt":"2019-11-13T22:14:58","Actor":"jkoritzinsky","Number":"27863","RawContent":null,"Title":"Fix RHEL6 build","State":"closed","Body":"Make stripping symbols overridable at `install_clr` invocation to avoid double-stripping symbols.\r\n\r\nI've validated that the build passes locally with this change.","Url":"https://github.com/dotnet/coreclr/pull/27863","RelatedDescription":"Closed or merged PR \"Fix RHEL6 build\" (#27863)"},{"Id":"522495978","IsPullRequest":true,"CreatedAt":"2019-11-13T21:57:01","Actor":"davidwrighton","Number":"27868","RawContent":null,"Title":"Non virtual calls to interface instance methods","State":"open","Body":"* Fix handling of callvirt to instance methods on interface types that are not virtual\r\n- Use call type to indicate if its non-virtual or not, instead of opcode\r\n* Test uses ilproj to protect against future C# compiler changes\r\n- This test needs to test the use of specific opcodes, and so an IL proj is required","Url":"https://github.com/dotnet/coreclr/pull/27868","RelatedDescription":"Open PR \"Non virtual calls to interface instance methods\" (#27868)"},{"Id":"522470640","IsPullRequest":true,"CreatedAt":"2019-11-13T21:01:57","Actor":"echesakovMSFT","Number":"27867","RawContent":null,"Title":"Use git bundles","State":"open","Body":"The goal here is to get rid of two separate Windows and non-Windows checkout jobs (and have one instead) and use the git bundle to move the repo clone between CI jobs. ","Url":"https://github.com/dotnet/coreclr/pull/27867","RelatedDescription":"Open PR \"Use git bundles\" (#27867)"},{"Id":"522416648","IsPullRequest":false,"CreatedAt":"2019-11-13T19:59:33","Actor":"havotto","Number":"27864","RawContent":null,"Title":"Wrong ApplicationBase with SingleFile deployment","State":"closed","Body":"I publish my app this way:\r\n\r\ndotnet publish --configuration Release --framework netcoreapp3.0 --runtime linux-x64 -v n /p:PublishSingleFile=true /p:PublishTrimmed=true\r\n\r\nIn this case Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) and AppDomain.CurrentDomain.SetupInformation.ApplicationBase is /var/tmp/.net/... instead of the directory I copied the app into.\r\n\r\nHow can I get this original directory programatically?","Url":"https://github.com/dotnet/coreclr/issues/27864","RelatedDescription":"Closed issue \"Wrong ApplicationBase with SingleFile deployment\" (#27864)"},{"Id":"522418005","IsPullRequest":true,"CreatedAt":"2019-11-13T19:15:45","Actor":"echesakovMSFT","Number":"27865","RawContent":null,"Title":"Implement Crc32 Isa","State":"open","Body":"https://github.com/dotnet/corefx/issues/26220","Url":"https://github.com/dotnet/coreclr/pull/27865","RelatedDescription":"Open PR \"Implement Crc32 Isa\" (#27865)"},{"Id":"522401385","IsPullRequest":true,"CreatedAt":"2019-11-13T18:39:22","Actor":"lpereira","Number":"27862","RawContent":null,"Title":"Add assembly resolution attempt events","State":"open","Body":"These events are fired every time there's an attempt at resolving an\r\nassembly before it is loaded.  Events are fired when trying to find the\r\nassembly in the current load context, using a custom\r\nAssemblyLoadContext, looking in the TPA, and so on.  Results are either\r\nsuccess, or a more descriptive value (e.g. assembly not found, or\r\nincompatible version).","Url":"https://github.com/dotnet/coreclr/pull/27862","RelatedDescription":"Open PR \"Add assembly resolution attempt events\" (#27862)"},{"Id":"522397740","IsPullRequest":false,"CreatedAt":"2019-11-13T18:31:33","Actor":"ranjeshj","Number":"27860","RawContent":null,"Title":"winrt cpp make_weak failing in .net core - IWeakReferenceSource, no such interface supported","State":"open","Body":"We now have a repro for an issue which was closed before.\r\n\r\nhttps://github.com/dotnet/coreclr/issues/22324\r\n\r\nThe repro steps and standalone app can be found in this bug\r\nhttps://github.com/microsoft/microsoft-ui-xaml/issues/1600 \r\n","Url":"https://github.com/dotnet/coreclr/issues/27860","RelatedDescription":"Open issue \"winrt cpp make_weak failing in .net core - IWeakReferenceSource, no such interface supported\" (#27860)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"523794287","IsPullRequest":true,"CreatedAt":"2019-11-16T05:15:12","Actor":"dotnet-maestro[bot]","Number":"13078","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191115.4\r\n- **Date Produced**: 11/16/2019 4:23 AM\r\n- **Commit**: fc412c7e032c25a17da0e8ca4556b34897313d7c\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-rtm.19565.4\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13078","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13078)"},{"Id":"523792809","IsPullRequest":true,"CreatedAt":"2019-11-16T05:00:12","Actor":"dotnet-maestro[bot]","Number":"13077","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191115.2\r\n- **Date Produced**: 11/16/2019 4:42 AM\r\n- **Commit**: 53a17fce7ce81aa68ddaa7b04f371dc6391d3497\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.0-rtm.19565.2\r\n\r\n[marker]: <> (End:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13077","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/templating\" (#13077)"},{"Id":"523676050","IsPullRequest":true,"CreatedAt":"2019-11-16T03:57:08","Actor":"dotnet-maestro[bot]","Number":"13076","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191115.2\r\n- **Date Produced**: 11/15/2019 5:59 PM\r\n- **Commit**: 65f04fb6db7a5e198d05dbebd5c4ad21eb018f89\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13076","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#13076)"},{"Id":"523658822","IsPullRequest":true,"CreatedAt":"2019-11-15T20:50:56","Actor":"dotnet-maestro[bot]","Number":"13075","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191115.5\r\n- **Date Produced**: 11/15/2019 6:01 PM\r\n- **Commit**: 1f9b6e2183cf20722fc52d17f35a40f30b218e5b\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-rtm.19565.5\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13075","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#13075)"},{"Id":"523578783","IsPullRequest":true,"CreatedAt":"2019-11-15T17:25:33","Actor":"dotnet-maestro[bot]","Number":"13074","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191115.2\r\n- **Date Produced**: 11/15/2019 3:48 PM\r\n- **Commit**: 0a6b1524e0db362735f056a4048b4d67005cc686\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-rtm.19565.2\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13074","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13074)"},{"Id":"523344429","IsPullRequest":true,"CreatedAt":"2019-11-15T17:04:59","Actor":"dotnet-maestro[bot]","Number":"13071","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191114.3\r\n- **Date Produced**: 11/15/2019 6:27 AM\r\n- **Commit**: 2139578cfdd746bb0035b8c77603102c4a56668e\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview3.19564.3\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13071","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#13071)"},{"Id":"523426357","IsPullRequest":true,"CreatedAt":"2019-11-15T12:45:41","Actor":"dotnet-maestro[bot]","Number":"13073","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191114.4\r\n- **Date Produced**: 11/15/2019 10:12 AM\r\n- **Commit**: bc2d90a1c6b23e4e64fc117baa531e14b9288b5a\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13073","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#13073)"},{"Id":"523393231","IsPullRequest":true,"CreatedAt":"2019-11-15T11:45:45","Actor":"dotnet-maestro[bot]","Number":"13072","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191115.1\r\n- **Date Produced**: 11/15/2019 9:26 AM\r\n- **Commit**: 8144e208d87e504e2a00cff7fee65c94459631bd\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-rtm.19565.1\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13072","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13072)"},{"Id":"523282351","IsPullRequest":true,"CreatedAt":"2019-11-15T08:37:02","Actor":"dotnet-maestro[bot]","Number":"13070","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191114.5\r\n- **Date Produced**: 11/15/2019 4:41 AM\r\n- **Commit**: 03fffbe484fed2bea52f00fb96cc8f714f272d4a\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-rtm.19564.5\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13070","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13070)"},{"Id":"523282090","IsPullRequest":true,"CreatedAt":"2019-11-15T07:50:52","Actor":"dotnet-maestro[bot]","Number":"13069","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191114.3\r\n- **Date Produced**: 11/15/2019 2:30 AM\r\n- **Commit**: 62b52b1f4b75a1edaf65825f3caad8e493d2a29c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13069","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#13069)"},{"Id":"523221222","IsPullRequest":true,"CreatedAt":"2019-11-15T04:10:49","Actor":"dotnet-maestro[bot]","Number":"13068","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191114.2\r\n- **Date Produced**: 11/15/2019 1:36 AM\r\n- **Commit**: 53a17fce7ce81aa68ddaa7b04f371dc6391d3497\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.0-rtm.19564.2\r\n\r\n[marker]: <> (End:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13068","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/templating\" (#13068)"},{"Id":"523181797","IsPullRequest":true,"CreatedAt":"2019-11-15T01:05:58","Actor":"dotnet-maestro[bot]","Number":"13066","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191114.2\r\n- **Date Produced**: 11/14/2019 10:59 PM\r\n- **Commit**: 6042ba82a6a63804a30f048045bb80697c2a4706\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview3.19564.2\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13066","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13066)"},{"Id":"523181887","IsPullRequest":true,"CreatedAt":"2019-11-15T01:04:55","Actor":"wtgodbe","Number":"13067","RawContent":null,"Title":"Update PreReleaseVersionLabel to RTM","State":"closed","Body":"Non-shipping packages should be labeled RTM for GA. We need to take this fix for 3.1 GA","Url":"https://github.com/dotnet/cli/pull/13067","RelatedDescription":"Closed or merged PR \"Update PreReleaseVersionLabel to RTM\" (#13067)"},{"Id":"522004537","IsPullRequest":true,"CreatedAt":"2019-11-13T16:44:41","Actor":"dotnet-maestro[bot]","Number":"13065","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191112.9\r\n- **Date Produced**: 11/13/2019 6:47 AM\r\n- **Commit**: d3ce83e1d8ffb5ea8f3cc05e2027973c95457e64\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview3.19562.9\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13065","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#13065)"},{"Id":"521940779","IsPullRequest":true,"CreatedAt":"2019-11-13T05:25:57","Actor":"dotnet-maestro[bot]","Number":"13064","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191112.8\r\n- **Date Produced**: 11/13/2019 2:47 AM\r\n- **Commit**: 14721ab65e7903c55c8ea1bdf9b9a2d9c686856b\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview3.19562.8\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13064","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13064)"},{"Id":"521921304","IsPullRequest":true,"CreatedAt":"2019-11-13T03:15:30","Actor":"dotnet-maestro[bot]","Number":"13063","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191112.6\r\n- **Date Produced**: 11/13/2019 1:34 AM\r\n- **Commit**: 47ba4b07fb7425d7902437c6efba8be3a41475a9\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview3.19562.6\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13063","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#13063)"},{"Id":"521889386","IsPullRequest":true,"CreatedAt":"2019-11-13T01:30:30","Actor":"dotnet-maestro[bot]","Number":"13062","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191112.7\r\n- **Date Produced**: 11/13/2019 12:12 AM\r\n- **Commit**: 33442c014e5406bf0546a898b47f3c136fc5b4a5\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview3.19562.7\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13062","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13062)"},{"Id":"521818967","IsPullRequest":true,"CreatedAt":"2019-11-12T22:11:07","Actor":"dotnet-maestro[bot]","Number":"13061","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191112.5\r\n- **Date Produced**: 11/12/2019 8:34 PM\r\n- **Commit**: ecf58238288fc2b2a5a1900193401c9d76894d40\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview3.19562.5\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13061","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13061)"},{"Id":"521785101","IsPullRequest":true,"CreatedAt":"2019-11-12T21:42:14","Actor":"dotnet-maestro[bot]","Number":"13060","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191112.4\r\n- **Date Produced**: 11/12/2019 6:45 PM\r\n- **Commit**: b7dc9ed2f7ec52c7c3df94a89c7c3b22431c9d33\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13060","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#13060)"},{"Id":"521664631","IsPullRequest":true,"CreatedAt":"2019-11-12T18:00:50","Actor":"dotnet-maestro[bot]","Number":"13059","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191112.2\r\n- **Date Produced**: 11/12/2019 3:41 PM\r\n- **Commit**: bdf9005be5815d883f2168836be826b86512bf72\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview3.19562.2\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13059","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#13059)"},{"Id":"521522109","IsPullRequest":true,"CreatedAt":"2019-11-12T14:00:57","Actor":"dotnet-maestro[bot]","Number":"13058","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191112.1\r\n- **Date Produced**: 11/12/2019 10:01 AM\r\n- **Commit**: 8fc395319d7c5ed51ae8ab9bbeec2585d4a6c50e\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview3.19562.1\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13058","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13058)"},{"Id":"521396312","IsPullRequest":true,"CreatedAt":"2019-11-12T08:49:51","Actor":"dotnet-maestro[bot]","Number":"13057","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191111.15\r\n- **Date Produced**: 11/12/2019 7:29 AM\r\n- **Commit**: f75439c628c88373409c9d8c9e5832fc66a4e895\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview3.19561.15\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13057","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#13057)"},{"Id":"521384456","IsPullRequest":true,"CreatedAt":"2019-11-12T08:25:33","Actor":"dotnet-maestro[bot]","Number":"13056","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191111.7\r\n- **Date Produced**: 11/12/2019 6:36 AM\r\n- **Commit**: cfa9637c2a0066eb601cff1ebb52f479c7afb9a2\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0-preview3.19561.7\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview3.19561.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview3.19561.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview3.19561.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview3.19561.7\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview3.19561.7\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview3.19561.8 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13056","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#13056)"},{"Id":"521364271","IsPullRequest":true,"CreatedAt":"2019-11-12T08:00:47","Actor":"dotnet-maestro[bot]","Number":"13055","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191111.5\r\n- **Date Produced**: 11/12/2019 5:47 AM\r\n- **Commit**: f36a88342755978d934e02e6aa95b900d8b10961\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview3.19561.5\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13055","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13055)"},{"Id":"521330712","IsPullRequest":true,"CreatedAt":"2019-11-12T06:37:42","Actor":"dotnet-maestro[bot]","Number":"13053","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191111.4\r\n- **Date Produced**: 11/12/2019 3:39 AM\r\n- **Commit**: 3b26982a3da07bb863e6cd9827e59c057c6cbbb0\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview3.19561.4\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13053","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13053)"},{"Id":"521347563","IsPullRequest":true,"CreatedAt":"2019-11-12T06:37:35","Actor":"dotnet-maestro[bot]","Number":"13054","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191111.14\r\n- **Date Produced**: 11/12/2019 5:01 AM\r\n- **Commit**: 2548e40f65ae5941fec3c99294604eba92f7ff80\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview3.19561.14\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13054","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#13054)"},{"Id":"521319106","IsPullRequest":true,"CreatedAt":"2019-11-12T05:00:31","Actor":"dotnet-maestro[bot]","Number":"13052","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191111.3\r\n- **Date Produced**: 11/12/2019 2:49 AM\r\n- **Commit**: 9dfccc24dd0b76db7a50bbe14f02b8b173d49aca\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview3.19561.3\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13052","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13052)"},{"Id":"521314435","IsPullRequest":true,"CreatedAt":"2019-11-12T04:35:31","Actor":"dotnet-maestro[bot]","Number":"13051","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191111.5\r\n- **Date Produced**: 11/12/2019 2:31 AM\r\n- **Commit**: 829c0bf9b02e3296ddf8b1e623900b27c127dc13\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0-preview3.19561.5\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview3.19561.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview3.19561.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview3.19561.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview3.19561.5\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview3.19561.5\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview3.19561.4 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13051","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#13051)"},{"Id":"521286154","IsPullRequest":true,"CreatedAt":"2019-11-12T02:59:30","Actor":"dotnet-maestro[bot]","Number":"13050","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191111.2\r\n- **Date Produced**: 11/12/2019 1:03 AM\r\n- **Commit**: 03f15d127b0c326bf35704dffaeb0f94b3ae9628\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview3.19561.2\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13050","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#13050)"},{"Id":"521273391","IsPullRequest":true,"CreatedAt":"2019-11-12T02:24:30","Actor":"dotnet-maestro[bot]","Number":"13049","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191111.4\r\n- **Date Produced**: 11/11/2019 10:40 PM\r\n- **Commit**: cc1f6a2b722e333e2022fc0cee3d71e5445a5698\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.0-preview3.19561.4\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview3.19561.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview3.19561.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview3.19561.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview3.19561.4\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview3.19561.4\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview3.19561.3 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13049","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#13049)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"523456559","IsPullRequest":false,"CreatedAt":"2019-11-15T12:59:28","Actor":"SetTrend","Number":"1655","RawContent":null,"Title":"Change .NET Framework in version table from 4.6.1 to 4.7.1","State":"open","Body":"Currently, the [.NET Standard version table](/dotnet/standard/blob/master/docs/versions.md) shows `.NET Framework 4.6.1` to be compatible with `.NET Standard >= 1.5`.\r\n\r\nHowever, a footnote clarifies that `.NET Framework 4.6.1` is **_not_** fully compatible with `.NET Standard >= 1.5`.\r\n\r\nMoreover, many issues on [StackOverflow.com](https://stackoverflow.com/questions/49925484/you-must-add-a-reference-to-assembly-netstandard-version-2-0-0-0) and [GitHub](#542) give evidence that `.NET Framework 4.6.1` is **_not_** fully compatible with `.NET Standard >= 1.5`.\r\n\r\nWouldn't it be wise then to update above version table to provide **_true_** information than just spout some wannabe information?","Url":"https://github.com/dotnet/standard/issues/1655","RelatedDescription":"Open issue \"Change .NET Framework in version table from 4.6.1 to 4.7.1\" (#1655)"},{"Id":"523175041","IsPullRequest":false,"CreatedAt":"2019-11-15T00:02:51","Actor":"replaysMike","Number":"1654","RawContent":null,"Title":"HttpClient error 'Could not create SSL/TLS secure channel' when not Administrator","State":"open","Body":"I'm trying to use certificate based authentication using HttpClient in .Net Standard 2.0. However, I've noticed TLS negotiation doesn't succeed unless running the application in Administrator mode.\r\n\r\n```\r\nvar requestMessage = new HttpRequestMessage() {\r\n    RequestUri = new Uri(new Uri(_configuration.Endpoint), \"someendpoint\"),\r\n    Method = HttpMethod.Get\r\n};\r\nvar handler = new HttpClientHandler {\r\n    ClientCertificateOptions = ClientCertificateOption.Manual,\r\n    SslProtocols = SslProtocols.Tls12,\r\n};          \r\nhandler.ClientCertificates.Add(certificate);\r\nhandler.CheckCertificateRevocationList = false;\r\n// this is required to get around untrusted self-signed certs\r\nhandler.ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) => true;\r\nvar client = new HttpClient(handler);\r\nrequestMessage.Headers.Add(\"X-ARR-ClientCert\", certificate.GetRawCertDataString());\r\nvar response = await client.SendAsync(requestMessage);\r\n```\r\nThe client certificate is valid and installed in the local computer `My` store.\r\n\r\nWithout Administrator privileges a generic error is thrown: `The request was aborted: Could not create SSL/TLS secure channel` when not Administrator.\r\n\r\nAnyone have a clue as to why?","Url":"https://github.com/dotnet/standard/issues/1654","RelatedDescription":"Open issue \"HttpClient error 'Could not create SSL/TLS secure channel' when not Administrator\" (#1654)"},{"Id":"522886300","IsPullRequest":false,"CreatedAt":"2019-11-14T14:14:42","Actor":"tndata","Number":"1653","RawContent":null,"Title":"Broken link","State":"open","Body":"\r\nI found a broken link in this sentence:\r\n\r\nThe plan for handling .NET Framework 4.6.1 and .NET Standard 2.0 is outlined in the **spec**.\r\n\r\nOn this page \r\nhttps://github.com/dotnet/standard/blob/master/docs/faq.md\r\n","Url":"https://github.com/dotnet/standard/issues/1653","RelatedDescription":"Open issue \"Broken link\" (#1653)"},{"Id":"522854157","IsPullRequest":true,"CreatedAt":"2019-11-14T13:46:23","Actor":"dotnet-maestro[bot]","Number":"1652","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191113.6\r\n- **Date Produced**: 11/14/2019 7:13 AM\r\n- **Commit**: 5cee7c97d602f294e27c582d4dab81ec388f1d7b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19563.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1652","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1652)"},{"Id":"522220691","IsPullRequest":true,"CreatedAt":"2019-11-13T13:59:11","Actor":"dotnet-maestro[bot]","Number":"1651","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191112.8\r\n- **Date Produced**: 11/13/2019 9:07 AM\r\n- **Commit**: a528006b4536e5b73227285b57d2a56116532506\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19562.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19562.8\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19562.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1651","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1651)"},{"Id":"522208590","IsPullRequest":true,"CreatedAt":"2019-11-13T13:01:39","Actor":"dotnet-maestro[bot]","Number":"1650","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191114.6\r\n- **Date Produced**: 11/15/2019 2:39 AM\r\n- **Commit**: c1cd0349f7d29cf21d93d61cdea382aecc422e36\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19564.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19564.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19564.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19564.6\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19564.6\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19564.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1650","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1650)"},{"Id":"521547575","IsPullRequest":true,"CreatedAt":"2019-11-12T14:07:43","Actor":"dotnet-maestro[bot]","Number":"1649","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191112.1\r\n- **Date Produced**: 11/12/2019 10:06 AM\r\n- **Commit**: 21278249c6b417469737b20445a0dd045cd1b16e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19562.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19562.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19562.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1649","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1649)"},{"Id":"520598776","IsPullRequest":true,"CreatedAt":"2019-11-10T13:31:00","Actor":"dotnet-maestro[bot]","Number":"1648","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191109.6\r\n- **Date Produced**: 11/10/2019 6:07 AM\r\n- **Commit**: bc115700c3ece60acd6b8dbe4b0bdb8f6f80c756\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19559.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19559.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19559.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1648","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1648)"},{"Id":"520424908","IsPullRequest":true,"CreatedAt":"2019-11-09T14:01:26","Actor":"dotnet-maestro[bot]","Number":"1647","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191109.1\r\n- **Date Produced**: 11/9/2019 9:20 AM\r\n- **Commit**: f546aa9e76c776f2c27e30dfb91c50d8f62da2f8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19559.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19559.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19559.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1647","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1647)"},{"Id":"520010128","IsPullRequest":true,"CreatedAt":"2019-11-08T13:28:42","Actor":"dotnet-maestro[bot]","Number":"1646","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191107.22\r\n- **Date Produced**: 11/8/2019 8:30 AM\r\n- **Commit**: 7a318879f787e9feee9266fe9e876ee2411b548f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19557.22\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19557.22\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19557.22\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1646","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1646)"},{"Id":"519262813","IsPullRequest":true,"CreatedAt":"2019-11-07T13:26:42","Actor":"dotnet-maestro[bot]","Number":"1645","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191106.12\r\n- **Date Produced**: 11/7/2019 8:14 AM\r\n- **Commit**: a4f04476ea74c61a52168cf0b31c0281822ecad3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19556.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19556.12\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19556.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1645","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1645)"},{"Id":"518467413","IsPullRequest":true,"CreatedAt":"2019-11-06T13:31:10","Actor":"dotnet-maestro[bot]","Number":"1644","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191105.8\r\n- **Date Produced**: 11/6/2019 9:54 AM\r\n- **Commit**: 9e94e2552ad869005f30f6a59eb638c544d3efdd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19555.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19555.8\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19555.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1644","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1644)"},{"Id":"518175351","IsPullRequest":false,"CreatedAt":"2019-11-06T01:11:51","Actor":"tchitnis","Number":"1643","RawContent":null,"Title":"Debug.Assert causing entire test run to be aborted","State":"open","Body":"Similar to the issues reported here:\r\n\r\nhttps://github.com/Microsoft/vstest/issues/1022\r\nhttps://github.com/dotnet/coreclr/issues/22569\r\n\r\nI still see the same error/issue on .net standard 2.0 with MSTest. Sounds like it was fixed with .Net Core 3.0, can someone comment on whether a similar fix was applied to .Net Standard as well?","Url":"https://github.com/dotnet/standard/issues/1643","RelatedDescription":"Open issue \"Debug.Assert causing entire test run to be aborted\" (#1643)"},{"Id":"517769508","IsPullRequest":true,"CreatedAt":"2019-11-05T13:42:32","Actor":"dotnet-maestro[bot]","Number":"1642","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191104.10\r\n- **Date Produced**: 11/5/2019 7:44 AM\r\n- **Commit**: ee038925bde85c1c45c52f235ab09ea03b9c126c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19554.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19554.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19554.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1642","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1642)"},{"Id":"517192004","IsPullRequest":false,"CreatedAt":"2019-11-04T14:33:56","Actor":"peni4142","Number":"1641","RawContent":null,"Title":"Regex Bug","State":"open","Body":"Hi guys,\r\nI have a test for you\r\n\r\n[x] Bug Report\r\n\r\nThe following regex test will return an empty string in the group[0], which in my opinion can't be true.\r\n\r\n\r\n```C#\r\n        [TestMethod()]\r\n        public void BugTest()\r\n        {\r\n            Match matchEnsureObject = new Regex(\"^\\\\[MERGE-CMD: ENSURE OBJECT\\\\(([^)]+)\\\\)\\\\]$\").Match(\"[MERGE-CMD: ENSURE OBJECT(aLong) AT 1]\");\r\n            if(matchEnsureObject.Groups[0].Value == \"\")\r\n            {\r\n                throw new Exception(\"Match can't be an empty value\");\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/standard/issues/1641","RelatedDescription":"Open issue \"Regex Bug\" (#1641)"},{"Id":"517142571","IsPullRequest":true,"CreatedAt":"2019-11-04T13:21:47","Actor":"dotnet-maestro[bot]","Number":"1640","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191103.8\r\n- **Date Produced**: 11/4/2019 8:18 AM\r\n- **Commit**: 15e7e1569a8c3a5502c476c31b60e06d633b3efa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19553.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19553.8\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19553.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1640","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1640)"},{"Id":"516826733","IsPullRequest":true,"CreatedAt":"2019-11-03T13:44:18","Actor":"dotnet-maestro[bot]","Number":"1639","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191102.6\r\n- **Date Produced**: 11/3/2019 4:48 AM\r\n- **Commit**: bfaed4d48a921a339f9691c74425bec9d2f760a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19552.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19552.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19552.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1639","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1639)"},{"Id":"516615712","IsPullRequest":false,"CreatedAt":"2019-11-02T14:52:31","Actor":"bernd5","Number":"1638","RawContent":null,"Title":"_dummy and _dummyPrimitive in System.Span","State":"closed","Body":"Why is it required that all net standard compliant implementations need a private field _dummy and _dummyPrimitive to provide a standard Span<T>?\r\n\r\nShould it be really part of the standard? Isn't it just an implementation detail?","Url":"https://github.com/dotnet/standard/issues/1638","RelatedDescription":"Closed issue \"_dummy and _dummyPrimitive in System.Span\" (#1638)"},{"Id":"516573954","IsPullRequest":true,"CreatedAt":"2019-11-02T12:25:00","Actor":"dotnet-maestro[bot]","Number":"1637","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191101.24\r\n- **Date Produced**: 11/2/2019 4:59 AM\r\n- **Commit**: eb41b7841f1d8edc499a8c0fbaec5e4d53187fa0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19551.24\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19551.24\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19551.24\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1637","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1637)"},{"Id":"516079198","IsPullRequest":true,"CreatedAt":"2019-11-01T12:30:54","Actor":"dotnet-maestro[bot]","Number":"1636","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191031.13\r\n- **Date Produced**: 11/1/2019 5:06 AM\r\n- **Commit**: a24db0ba5666f46f50649810fe698ad267b60331\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19531.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19531.13\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19531.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1636","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1636)"},{"Id":"515387745","IsPullRequest":true,"CreatedAt":"2019-10-31T12:31:11","Actor":"dotnet-maestro[bot]","Number":"1635","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191031.1\r\n- **Date Produced**: 10/31/2019 9:35 AM\r\n- **Commit**: 18e82cabc1d2cddad8ff07ae96edb7296d9fad9d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19531.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19531.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19531.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1635","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1635)"},{"Id":"514625134","IsPullRequest":true,"CreatedAt":"2019-10-30T12:31:21","Actor":"dotnet-maestro[bot]","Number":"1634","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191029.15\r\n- **Date Produced**: 10/30/2019 3:37 AM\r\n- **Commit**: 8ee61dd103ff55445f8baf3137bb768ed86370d9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19529.15\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19529.15\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19529.15\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1634","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1634)"},{"Id":"513879230","IsPullRequest":true,"CreatedAt":"2019-10-29T12:32:35","Actor":"dotnet-maestro[bot]","Number":"1633","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191028.12\r\n- **Date Produced**: 10/29/2019 2:19 AM\r\n- **Commit**: 15e1ea023d2818b6083a61c7447a720ff3779482\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19528.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19528.12\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19528.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1633","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1633)"},{"Id":"513668220","IsPullRequest":false,"CreatedAt":"2019-10-29T03:17:07","Actor":"2300070","Number":"1632","RawContent":null,"Title":"A bug while the 'TypeBuilder' class processing the value type generic argument for generic definition.","State":"open","Body":"I define a class to inherit existen generic type definition, however, the base type has one generic argument, the type I processing has two generic argument, and I want the second generic as the generic argument of base type, so I write the code below, but the strange thing is: if the first generic argument is class type(though it is not used by any place), it works fine, but if I change it to a value type, an exception will thrown('Unable to read memory'), is there any problem while the 'TypeBuilder' class processing the generic arguments?\r\n\r\n\t[TestClass]\r\n\tpublic class GeneralTest\r\n\t{\r\n\t\t[TestMethod]\r\n\t\tpublic void TestDefineGenericType()\r\n\t\t{\r\n\t\t\tAssemblyBuilder assembly = AssemblyBuilder.DefineDynamicAssembly(new AssemblyName(\"GeneralTest\"), AssemblyBuilderAccess.RunAndCollect);\r\n\t\t\tModuleBuilder module = assembly.DefineDynamicModule(\"GeneralTest.dll\");\r\n\r\n\t\t\t//define type\r\n\t\t\tTypeBuilder builder = module.DefineType(\"TestGenericClass\");\r\n\t\t\tGenericTypeParameterBuilder[] arguments = builder.DefineGenericParameters(\"TValue1\", \"TValue2\");\r\n\t\t\t\r\n\t\t\tbuilder.SetParent(typeof(TestClass<>).MakeGenericType(arguments[1]));\r\n\r\n\t\t\t//define constructor that invoke base constructor\r\n\t\t\tConstructorBuilder constructor = builder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, new Type[] {arguments[1] });\r\n\t\t\tILGenerator generator = constructor.GetILGenerator();\r\n\t\t\tgenerator.Emit(OpCodes.Ldarg_0);\r\n\t\t\tgenerator.Emit(OpCodes.Ldarg_1);\r\n\t\t\tgenerator.Emit(OpCodes.Call, typeof(TestClass<>).GetConstructors(BindingFlags.Public | BindingFlags.Instance)[0]);\r\n\t\t\tgenerator.Emit(OpCodes.Ret);\r\n\t\t\t\r\n\t\t\tType builtType = builder.CreateType();\r\n\t\t\tType testType;\r\n\t\t\tTestClass<string> test;\r\n\r\n\t\t\t//this test is okay.\r\n\t\t\ttestType = builtType.MakeGenericType(typeof(object), typeof(string));\r\n\t\t\ttest = Activator.CreateInstance(testType, string.Empty) as TestClass<string>;\r\n\t\t\tAssert.AreEqual(typeof(string), test.ValueType);\r\n\t\t\tAssert.AreEqual(string.Empty, test.Value);//OK\r\n\r\n\t\t\t//change the first generic argument to value type, exception will be thrown.\r\n\t\t\ttestType = builtType.MakeGenericType(typeof(int), typeof(string));\r\n\t\t\ttest = Activator.CreateInstance(testType, string.Empty) as TestClass<string>;\r\n\t\t\tAssert.AreEqual(typeof(string), test.ValueType);\r\n\t\t\t//Assert.AreEqual(string.Empty, test.Value);//ERROR WHILE READ THE FIELD OF 'test'\r\n\r\n\t\t\t\r\n\t\t\t//change the first generic argument to class type back, exception disapear.\r\n\t\t\ttestType = builtType.MakeGenericType(typeof(string), typeof(string));\r\n\t\t\ttest = Activator.CreateInstance(testType, string.Empty) as TestClass<string>;\r\n\t\t\tAssert.AreEqual(typeof(string), test.ValueType);\r\n\t\t\tAssert.AreEqual(string.Empty, test.Value);//OK\r\n\t\t}\r\n\r\n\t\tpublic class TestClass<TValue>\r\n\t\t{\r\n\t\t\tpublic readonly TValue Value;\r\n\r\n\t\t\tpublic Type ValueType => typeof(TValue);\r\n\r\n\t\t\tpublic TestClass(TValue value)\r\n\t\t\t{\r\n\t\t\t\tthis.Value = value;\r\n\t\t\t}\r\n\t\t}\r\n\t}","Url":"https://github.com/dotnet/standard/issues/1632","RelatedDescription":"Open issue \"A bug while the 'TypeBuilder' class processing the value type generic argument for generic definition.\" (#1632)"},{"Id":"513270667","IsPullRequest":true,"CreatedAt":"2019-10-28T12:31:05","Actor":"dotnet-maestro[bot]","Number":"1631","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191027.5\r\n- **Date Produced**: 10/28/2019 8:28 AM\r\n- **Commit**: 17c14aa2b50cfb5920d03ea8835c9a4932b5359c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19527.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19527.5\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19527.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1631","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1631)"},{"Id":"512958771","IsPullRequest":true,"CreatedAt":"2019-10-27T12:45:49","Actor":"dotnet-maestro[bot]","Number":"1630","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191026.6\r\n- **Date Produced**: 10/27/2019 2:42 AM\r\n- **Commit**: 0d0336cc9c3a04d7e23af38698b215a2955e965f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19526.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19526.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19526.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1630","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1630)"},{"Id":"512829066","IsPullRequest":true,"CreatedAt":"2019-10-26T12:30:59","Actor":"dotnet-maestro[bot]","Number":"1629","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191025.6\r\n- **Date Produced**: 10/26/2019 7:24 AM\r\n- **Commit**: 8245ee1e8f6063ccc7a3a60cafe821d29e85b02f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19525.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19525.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19525.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1629","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1629)"},{"Id":"512485574","IsPullRequest":true,"CreatedAt":"2019-10-25T12:31:13","Actor":"dotnet-maestro[bot]","Number":"1628","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191024.14\r\n- **Date Produced**: 10/25/2019 4:12 AM\r\n- **Commit**: 0954a975f972546314bd3ac4eb6e0a6380a85701\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19524.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19524.14\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19524.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1628","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1628)"},{"Id":"512430892","IsPullRequest":false,"CreatedAt":"2019-10-25T10:18:18","Actor":"lockeduan","Number":"1627","RawContent":null,"Title":"standard 2.1 DbParameter.DbType can never set to DbType.Time","State":"open","Body":"i'm trying to set parameter DbType to Time, but the result is that it wrongly set to DateTime instead\r\n\r\n```\r\ndbParameter.DbType = DbType.Time;\r\n```","Url":"https://github.com/dotnet/standard/issues/1627","RelatedDescription":"Open issue \"standard 2.1 DbParameter.DbType can never set to DbType.Time\" (#1627)"},{"Id":"511908253","IsPullRequest":true,"CreatedAt":"2019-10-24T12:36:46","Actor":"dotnet-maestro[bot]","Number":"1626","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191023.8\r\n- **Date Produced**: 10/23/2019 8:34 PM\r\n- **Commit**: be22fd85b2ceb377de87e6bda006f819569fec3a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19523.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19523.8\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19523.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1626","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1626)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"523789662","IsPullRequest":false,"CreatedAt":"2019-11-16T04:27:26","Actor":"hishamco","Number":"42620","RawContent":null,"Title":"DirectoryServices.AccountManagement & Open DJ","State":"open","Body":"I'm struggling to run some of the `System.DirectoryServices.AccountManagement` APIs with Open DJ, all the time the `PrincipalContext` failed, nothing but `DirectoryEntry` works nicely with Open DJ\r\n\r\nAny idea?\r\n\r\n/cc @tarekgh","Url":"https://github.com/dotnet/corefx/issues/42620","RelatedDescription":"Open issue \"DirectoryServices.AccountManagement & Open DJ\" (#42620)"},{"Id":"523667305","IsPullRequest":true,"CreatedAt":"2019-11-15T20:15:32","Actor":"cheenamalhotra","Number":"42619","RawContent":null,"Title":"[release/2.1] Fixes driver behavior of sending Attention signal for successful Bulk Copy operation","State":"open","Body":"Port of: https://github.com/dotnet/runtime/pull/61 and https://github.com/dotnet/SqlClient/pull/308\r\n\r\n### Summary\r\nCurrently when performing Bulk Copy operations with SqlClient driver, on successful completion, an Attention Signal is sent to SQL Server which is not correct behavior and should not happen.\r\n\r\n### Customer Impact\r\nCustomers wouldn't notice these attention signals being sent and the transactions would only get impacted if the Abort bit is checked during transaction prepare/commit time. This case would be easily hit with HK tables when the transaction inserts a large number of rows, hence causing all the LCs to be filled up and  LC flush IO to fall behind LCs being requested for log serialization at transaction prepare time.\r\n\r\n### Regression?\r\nNo. The behavior is the original design ported from .NET Framework.\r\n\r\n### Testing\r\nWhen performing tests, the transactions would always commit successfully, hence this attention signal was not noticed. A special test case will be investigated and designed using HK tables in dotnet/sqlclient test lab to cover this scenario. Since all new changes will be made in dotnet/sqlclient repository, we'll be adding new tests there in future.\r\n\r\n### Risk\r\n**Low**: The fix is to not send attention signal when performing cleanups post Bulk Copy in successful scenarios.\r\n\r\ncc: @danmosemsft @David-Engel @saurabh500 ","Url":"https://github.com/dotnet/corefx/pull/42619","RelatedDescription":"Open PR \"[release/2.1] Fixes driver behavior of sending Attention signal for successful Bulk Copy operation\" (#42619)"},{"Id":"523666701","IsPullRequest":true,"CreatedAt":"2019-11-15T20:14:05","Actor":"cheenamalhotra","Number":"42618","RawContent":null,"Title":"[release/3.0] Fix driver behavior of sending Attention signal for successful Bulk Copy operation","State":"open","Body":"Port of: https://github.com/dotnet/runtime/pull/61 and https://github.com/dotnet/SqlClient/pull/308\r\n\r\n### Summary\r\nCurrently when performing Bulk Copy operations with SqlClient driver, on successful completion, an Attention Signal is sent to SQL Server which is not correct behavior and should not happen.\r\n\r\n### Customer Impact\r\nCustomers wouldn't notice these attention signals being sent and the transactions would only get impacted if the Abort bit is checked during transaction prepare/commit time. This case would be easily hit with HK tables when the transaction inserts a large number of rows, hence causing all the LCs to be filled up and  LC flush IO to fall behind LCs being requested for log serialization at transaction prepare time.\r\n\r\n### Regression?\r\nNo. The behavior is the original design ported from .NET Framework.\r\n\r\n### Testing\r\nWhen performing tests, the transactions would always commit successfully, hence this attention signal was not noticed. A special test case will be investigated and designed using HK tables in dotnet/sqlclient test lab to cover this scenario. Since all new changes will be made in dotnet/sqlclient repository, we'll be adding new tests there in future.\r\n\r\n### Risk\r\n**Low**: The fix is to not send attention signal when performing cleanups post Bulk Copy in successful scenarios.\r\n\r\ncc: @danmosemsft @David-Engel @saurabh500 ","Url":"https://github.com/dotnet/corefx/pull/42618","RelatedDescription":"Open PR \"[release/3.0] Fix driver behavior of sending Attention signal for successful Bulk Copy operation\" (#42618)"},{"Id":"523666162","IsPullRequest":true,"CreatedAt":"2019-11-15T20:12:53","Actor":"cheenamalhotra","Number":"42617","RawContent":null,"Title":"[release/3.1] Fix driver behavior of sending Attention signal for successful Bulk Copy operation","State":"open","Body":"Port of: https://github.com/dotnet/runtime/pull/61 and https://github.com/dotnet/SqlClient/pull/308\r\n\r\n### Summary\r\nCurrently when performing Bulk Copy operations with SqlClient driver, on successful completion, an Attention Signal is sent to SQL Server which is not correct behavior and should not happen.\r\n\r\n### Customer Impact\r\nCustomers wouldn't notice these attention signals being sent and the transactions would only get impacted if the Abort bit is checked during transaction prepare/commit time. This case would be easily hit with HK tables when the transaction inserts a large number of rows, hence causing all the LCs to be filled up and  LC flush IO to fall behind LCs being requested for log serialization at transaction prepare time.\r\n\r\n### Regression?\r\nNo. The behavior is the original design ported from .NET Framework.\r\n\r\n### Testing\r\nWhen performing tests, the transactions would always commit successfully, hence this attention signal was not noticed. A special test case will be investigated and designed using HK tables in dotnet/sqlclient test lab to cover this scenario. Since all new changes will be made in dotnet/sqlclient repository, we'll be adding new tests there in future.\r\n\r\n### Risk\r\n**Low**: The fix is to not send attention signal when performing cleanups post Bulk Copy in successful scenarios.\r\n\r\ncc: @danmosemsft @David-Engel @saurabh500 ","Url":"https://github.com/dotnet/corefx/pull/42617","RelatedDescription":"Open PR \"[release/3.1] Fix driver behavior of sending Attention signal for successful Bulk Copy operation\" (#42617)"},{"Id":"523646307","IsPullRequest":false,"CreatedAt":"2019-11-15T19:26:45","Actor":"Symbai","Number":"42616","RawContent":null,"Title":"API Proposal: String.IsLike","State":"open","Body":"Similar to https://github.com/dotnet/corefx/blob/0e65e923689962f9634b5948d15f995140cc7c93/src/Common/src/System/Text/SimpleRegex.cs#L21 but public and high performance as the linked method is up to 10x slower against own implementations when I tested.\r\n\r\n#### API:\r\n`IsLike(this string input, string pattern, StringComparison mode = StringCoomparison.OrdinalIgnoreCase)`\r\n\r\n#### Usage:\r\n```\r\nstatic string FullName = \"Pablo Alexander Jeff\";\r\nstatic string Version = \"1.0.5.0\";\r\nstatic string LongString = \"And where would you see yourself in five years’ time Mr. Jeffries?\";\r\nstatic string Path = \"C:\\\\Windows\\\\System32\\\\drivers\\\\\";\r\nstatic string IP = \"127.0.0.1\";\r\n\r\nvoid Matches() {\r\n\tif (FullName.IsLike(\"Pablo * Jeff\"))\r\n\t\t//do stuff\r\n\tif (Version.IsLike(\"1.0.*.0\"))\r\n\t\t//do stuff\r\n\tif (LongString.IsLike(\"*you*Jeffries\"))\r\n\t\t//do stuff\r\n\tif (Path.IsLike(TextBox1.Text))\r\n\t\t//do stuff\r\n\tif (IP.IsLike(\"127.*.*.1\"))\r\n\t\t//do stuff\r\n}\r\n```\r\n\r\nThere is a wide range for common scenarios given that Corefx also uses something like this itself. There might be a few things to discuss however:\r\n\r\n- Should it also support `?` for single match too? This is supported on a lot other wild card searches and therefore maybe expected. Or should it only support `*` for match any like in the linked method above?\r\n- Naming of the method","Url":"https://github.com/dotnet/corefx/issues/42616","RelatedDescription":"Open issue \"API Proposal: String.IsLike\" (#42616)"},{"Id":"523634415","IsPullRequest":true,"CreatedAt":"2019-11-15T18:58:08","Actor":"cheenamalhotra","Number":"42615","RawContent":null,"Title":"[release/3.0] Fix Connection Resiliency in SqlClient","State":"open","Body":"Port of: https://github.com/dotnet/runtime/pull/62 and https://github.com/dotnet/SqlClient/pull/310\r\n\r\n### Summary\r\nConnection Resiliency is an important feature in System.Data.SqlClient which stopped working post PR \r\nhttps://github.com/dotnet/corefx/pull/34047 as a breaking change got introduced.\r\n\r\n### Customer Impact\r\nConnections once idle cannot be restored and users start getting exceptions \"The connection is closed\".\r\n\r\n### Regression?\r\nYes. Regression was introduced in System.Data.SqlClient **v4.7.0-preview.19073.11**.\r\n\r\n### Testing\r\n\r\nThis feature was not being tested in CI hence the bug flowed over. We are working on adding tests in dotnet/sqlclient to test this feature and ensure it doesn't escape in future. Since all new changes will be made in dotnet/sqlclient repository, we'll be adding tests there in future.\r\n\r\n### Risk\r\n**Low**: The fix is to unwrap `Task.Factory.StartNew` call which was modified from `Task.Run`, has been tested and verified.\r\n\r\ncc: @danmosemsft @David-Engel ","Url":"https://github.com/dotnet/corefx/pull/42615","RelatedDescription":"Open PR \"[release/3.0] Fix Connection Resiliency in SqlClient\" (#42615)"},{"Id":"523633730","IsPullRequest":true,"CreatedAt":"2019-11-15T18:56:33","Actor":"cheenamalhotra","Number":"42614","RawContent":null,"Title":"[release/3.1] Fix Connection Resiliency in SqlClient","State":"open","Body":"Port of: https://github.com/dotnet/runtime/pull/62 and https://github.com/dotnet/SqlClient/pull/310\r\n\r\n### Summary\r\nConnection Resiliency is an important feature in System.Data.SqlClient which stopped working post PR \r\nhttps://github.com/dotnet/corefx/pull/34047 as a breaking change got introduced.\r\n\r\n### Customer Impact\r\nConnections once idle cannot be restored and users start getting exceptions \"The connection is closed\".\r\n\r\n### Regression?\r\nYes. Regression was introduced in System.Data.SqlClient **v4.7.0-preview.19073.11**.\r\n\r\n### Testing\r\n\r\nThis feature was not being tested in CI hence the bug flowed over. We are working on adding tests in dotnet/sqlclient to test this feature and ensure it doesn't escape in future. Since all new changes will be made in dotnet/sqlclient repository, we'll be adding tests there in future.\r\n\r\n### Risk\r\n**Low**: The fix is to unwrap `Task.Factory.StartNew` call which was modified from `Task.Run`, has been tested and verified.\r\n\r\ncc: @danmosemsft @David-Engel ","Url":"https://github.com/dotnet/corefx/pull/42614","RelatedDescription":"Open PR \"[release/3.1] Fix Connection Resiliency in SqlClient\" (#42614)"},{"Id":"523633680","IsPullRequest":true,"CreatedAt":"2019-11-15T18:56:26","Actor":"Dotnet-GitSync-Bot","Number":"42613","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh @jkotas @sywhang @stephentoub @GrabYourPitchforks @noahfalk","Url":"https://github.com/dotnet/corefx/pull/42613","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#42613)"},{"Id":"523621879","IsPullRequest":false,"CreatedAt":"2019-11-15T18:27:40","Actor":"Anipik","Number":"42612","RawContent":null,"Title":"Infrastructure work required to service 5.0","State":"open","Body":"We are making a lot of infra changes which will require changes in the servicing protocals. This issue is to track that work.\r\n\r\n- [ ] We have a centralized place for package verison, we will have to find a place  of individuals packages to update that version in servicing\r\n- [ ] We have a centeralized place for assembly Verision, we will have to find a way to increment the assembly version for specific assemblies in servicing.\r\n\r\n\r\ncc @ericstj @ViktorHofer @wtgodbe @safern @danmosemsft ","Url":"https://github.com/dotnet/corefx/issues/42612","RelatedDescription":"Open issue \"Infrastructure work required to service 5.0\" (#42612)"},{"Id":"523598530","IsPullRequest":true,"CreatedAt":"2019-11-15T18:02:06","Actor":"cheenamalhotra","Number":"42610","RawContent":null,"Title":"Fix Connection Resiliency in SqlClient","State":"closed","Body":"Backports PR https://github.com/dotnet/SqlClient/pull/310 to System.Data.SqlClient","Url":"https://github.com/dotnet/corefx/pull/42610","RelatedDescription":"Closed or merged PR \"Fix Connection Resiliency in SqlClient\" (#42610)"},{"Id":"523599316","IsPullRequest":true,"CreatedAt":"2019-11-15T18:01:35","Actor":"cheenamalhotra","Number":"42611","RawContent":null,"Title":"Fixes SqlClient behavior of sending Attention signal for successful Bulk Copy operation","State":"closed","Body":"Backports PR https://github.com/dotnet/SqlClient/pull/308 to System.Data.SqlClient","Url":"https://github.com/dotnet/corefx/pull/42611","RelatedDescription":"Closed or merged PR \"Fixes SqlClient behavior of sending Attention signal for successful Bulk Copy operation\" (#42611)"},{"Id":"523577754","IsPullRequest":false,"CreatedAt":"2019-11-15T16:48:08","Actor":"jhudsoncedaron","Number":"42609","RawContent":null,"Title":"NetworkStream can only be created with a blocking socket, even if it will be used for ReadAsync/WriteAsync","State":"open","Body":"For some inexplicable reason, `NetworkStream`'s constructor has this check:\r\n\r\n                if (!socket.Blocking)\r\n                {\r\n                    throw new IOException(SR.net_sockets_blocking);\r\n                }\r\n\r\nThus, creating a `NetworkStream` from a non-blocking socket requires:\r\n\r\n        socket.Blocking = true;\r\n        var ns = new NetworkStream(socket, true);\r\n        socket.Blocking = false;\r\n\r\nwhen it should be:\r\n\r\n        var ns = new NetworkStream(socket, true);\r\n\r\nThe code *does* handle non-blocking sockets just fine if ReadAsync and WriteAsync are used. So I've got to make two completely silly system calls because of a bad check in NetworkStream.","Url":"https://github.com/dotnet/corefx/issues/42609","RelatedDescription":"Open issue \"NetworkStream can only be created with a blocking socket, even if it will be used for ReadAsync/WriteAsync\" (#42609)"},{"Id":"523541435","IsPullRequest":false,"CreatedAt":"2019-11-15T15:40:44","Actor":"khellang","Number":"42608","RawContent":null,"Title":"Provide conversion from `ValueTask<T>` to `ValueTask`","State":"open","Body":"When working with `ValueTask` and `ValueTask<T>`, I've often encountered scenarios where I don't care about the result of a `ValueTask<T>`-returning method and just want to return back the task to be awaited further up the stack.\r\n\r\nUnfortunately, this isn't possible:\r\n\r\n```csharp\r\npublic ValueTask DoSomething()\r\n{\r\n    // Do a bunch of synchronous stuff here...\r\n\r\n    return DoSomethingElse(); // CS0029 - Cannot implicitly convert type 'System.Threading.Tasks.ValueTask<int>' to 'System.Threading.Tasks.ValueTask'\r\n}\r\n\r\npublic ValueTask<int> DoSomethingElse()\r\n{\r\n    // Do a bunch of synchronous stuff here...\r\n\r\n    return new ValueTask<int>(42);\r\n}\r\n```\r\n\r\nThe workarounds I've found is to either make the calling method `async`, which introduces a bunch of state machinery:\r\n\r\n```diff\r\n-public ValueTask DoSomething()\r\n+public async ValueTask DoSomething()\r\n{\r\n    // Do a bunch of synchronous stuff here...\r\n\r\n-    return DoSomethingElse();\r\n+    await DoSomethingElse();\r\n}\r\n```\r\n\r\nOr convert the `ValueTask<T>` to a `Task<T>` and wrap it in a `ValueTask`, which allocates a `Task<T>`:\r\n\r\n```diff\r\npublic ValueTask DoSomething()\r\n{\r\n    // Do a bunch of synchronous stuff here...\r\n\r\n-    return DoSomethingElse();\r\n+    return new ValueTask(DoSomethingElse().AsTask());\r\n}\r\n```\r\n\r\nAre there any other workarounds I've missed?\r\n\r\nAnyway, I think it would be nice if there was a quick way to convert a `ValueTask<T>` to `ValueTask`, without introducing async state machinery or allocate.\r\nEither as an explicit method, or just an implicit conversion that throws away the `ValueTask<T>`'s `_result` field:\r\n\r\n```diff\r\n@@ -118,7 +118,7 @@ namespace System.Threading.Tasks\r\n         }\r\n\r\n         [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n-        private ValueTask(object obj, short token, bool continueOnCapturedContext)\r\n+        internal ValueTask(object obj, short token, bool continueOnCapturedContext)\r\n         {\r\n             _obj = obj;\r\n             _token = token;\r\n@@ -555,6 +555,11 @@ namespace System.Threading.Tasks\r\n         public static bool operator !=(ValueTask<TResult> left, ValueTask<TResult> right) =>\r\n             !left.Equals(right);\r\n\r\n+        public static implicit operator ValueTask(ValueTask<TResult> task)\r\n+        {\r\n+            return new ValueTask(task._obj, task._token, task._continueOnCapturedContext);\r\n+        }\r\n+\r\n         /// <summary>\r\n         /// Gets a <see cref=\"Task{TResult}\"/> object to represent this ValueTask.\r\n         /// </summary>\r\n```\r\n\r\nThere might be a really good reason why this conversion doesn't exist already, but I don't know the details so I though I would ask; would this be doable?\r\n\r\n// @stephentoub","Url":"https://github.com/dotnet/corefx/issues/42608","RelatedDescription":"Open issue \"Provide conversion from `ValueTask<T>` to `ValueTask`\" (#42608)"},{"Id":"523501358","IsPullRequest":false,"CreatedAt":"2019-11-15T14:29:19","Actor":"johnnyasantoss","Number":"42607","RawContent":null,"Title":"Problems with SemaphoreSlim on OSX","State":"open","Body":"Hello,\r\nI noticed that `SemaphoreSlim.WaitAsync(int)` is sometimes extremely slow on OSX.\r\n\r\nI was trying to set up a test and build a R2R version of a console app on Azure Pipelines, and noticed that the MacOS tests were failing on a simple wait & release [test][test1] ([logs][logs1]).\r\n\r\nSo, I created a simplified version of that test and tried to run again using the same matrix.\r\nHere's the [repro][r1], and here is the [pipeline][p1] with the failed jobs on OSX.\r\n\r\nBTW I'm using Linux and I don't have a machine with OSX available to test this.\r\n\r\nThis issue might be related to #28884\r\n\r\n [test1]: https://github.com/johnnyasantoss/ExchangeSharp/blob/e9d3589b5fa08afffd70b0fc98756f7988cee0ea/tests/ExchangeSharpTests/CryptoUtilityTests.cs#L229-L255\r\n [logs1]: https://dev.azure.com/johnnyasantoss/ExchangeSharp/_build/results?buildId=13&view=logs&j=2da5cbf6-3d4c-554d-b450-f46789d0dcc6&t=d93bf2ca-2f6d-5bb9-d851-d18567965641&l=23\r\n [r1]: https://github.com/johnnyasantoss/semaphore-slim-osx-repro\r\n [p1]: https://dev.azure.com/johnnyasantoss/semaphore-slim-osx-repro/_build?definitionId=2&_a=summary","Url":"https://github.com/dotnet/corefx/issues/42607","RelatedDescription":"Open issue \"Problems with SemaphoreSlim on OSX\" (#42607)"},{"Id":"522999428","IsPullRequest":true,"CreatedAt":"2019-11-15T14:26:03","Actor":"dotnet-maestro-bot","Number":"42597","RawContent":null,"Title":"Update ProjectNTfs, ProjectNTfsTestILC to rel-28306-03, rel-28306-03, respectively (release/uwp6.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/42597","RelatedDescription":"Closed or merged PR \"Update ProjectNTfs, ProjectNTfsTestILC to rel-28306-03, rel-28306-03, respectively (release/uwp6.2)\" (#42597)"},{"Id":"523263721","IsPullRequest":true,"CreatedAt":"2019-11-15T06:51:02","Actor":"dotnet-maestro[bot]","Number":"42606","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191114.2\r\n- **Date Produced**: 11/15/2019 1:34 AM\r\n- **Commit**: 1ed7226e39b7214807318d2cc8ff37492527ffa1\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-rtm.19564.2\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-rtm.19564.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-rtm.19564.2\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42606","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#42606)"},{"Id":"523161814","IsPullRequest":true,"CreatedAt":"2019-11-15T01:18:43","Actor":"wtgodbe","Number":"42604","RawContent":null,"Title":"Fixup packageIndex & branding","State":"closed","Body":"Fixup the PackageIndex to include stable versions of `runtime.xyz-x64.runtime.native.System.IO.Ports`, and set the branding for 3.1 GA to `rtm`\r\n\r\nCC @ericstj @safern @mmitche ","Url":"https://github.com/dotnet/corefx/pull/42604","RelatedDescription":"Closed or merged PR \"Fixup packageIndex & branding\" (#42604)"},{"Id":"523180720","IsPullRequest":true,"CreatedAt":"2019-11-15T00:20:27","Actor":"wfurt","Number":"42605","RawContent":null,"Title":"disable ferebsd setial port changes","State":"closed","Body":"Port of https://github.com/dotnet/runtime/pull/53/ to stabilize master for remaining time. ","Url":"https://github.com/dotnet/corefx/pull/42605","RelatedDescription":"Closed or merged PR \"disable ferebsd setial port changes\" (#42605)"},{"Id":"523136245","IsPullRequest":true,"CreatedAt":"2019-11-14T22:17:41","Actor":"Dotnet-GitSync-Bot","Number":"42603","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @elinor-fung @john-h-k @manandre @tannergooding @jkotas","Url":"https://github.com/dotnet/corefx/pull/42603","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr,corert\" (#42603)"},{"Id":"523126281","IsPullRequest":false,"CreatedAt":"2019-11-14T20:58:48","Actor":"NinoFloris","Number":"42602","RawContent":null,"Title":"Conditionally flow execution context into Task for custom TaskSchedulers","State":"open","Body":"After some evening perusal of the inner workings of `Task.Run/StartNew` it seems some uses unconditionally capture execution contexts iff there's a custom `TaskScheduler` and don't if `TaskScheduler.Current == TaskScheduler.Default`. \r\n\r\nBesides it being an inconsistency in the implementation it seems problematic for cases where you really don't want any `AsyncLocals` to be rooted by some background task.\r\n\r\nMy first thought was that the logic to capture or not was deferred to the scheduler (like the threadpool does during normal QUWI) but upon inspection the `Task(Action/Func)` constructors do the capturing unconditionally. I expect that's really just to support the separation of creation and starting yet it seems unfortunate. In any case it would be a decent option to give the scheduler the flexibility to ignore the context by checking a property during Task creation.\r\n\r\nWas it a deliberate choice not to have any way to `StartNew/Run` a `Task` without capturing the current context, are we expected to `EC.SuppressFlow()` in this case?\r\n\r\n### Example\r\nWhen there's no scheduler we don't capture when `executionContext == null`\r\nhttps://github.com/dotnet/coreclr/blob/15daca125fbb15bc3a9b65977957edd936fff752/src/System.Private.CoreLib/shared/System/Threading/Tasks/Sources/ManualResetValueTaskSourceCore.cs#L165-L173\r\n\r\nBut when there is a `TaskScheduler` it's always:\r\nhttps://github.com/dotnet/coreclr/blob/15daca125fbb15bc3a9b65977957edd936fff752/src/System.Private.CoreLib/shared/System/Threading/Tasks/Sources/ManualResetValueTaskSourceCore.cs#L184-L186\r\n\r\n### Other cases\r\nPotentially problematic cases (just in coreclr) are, searching for StartNew:\r\n\r\n- https://github.com/dotnet/coreclr/blob/073ad7ef1b6a7112eefc965aed362c7b5923682a/src/System.Private.CoreLib/shared/System/IO/TextWriter.cs\r\n- https://github.com/dotnet/coreclr/blob/5b1c001bc0fb5bb1ce035c02ec275763f66defc8/src/System.Private.CoreLib/shared/System/IO/TextReader.cs\r\n- https://github.com/dotnet/coreclr/blob/6abc099d4a798dc9a267d04bc025efbcbf148473/src/System.Private.CoreLib/shared/System/IO/Stream.cs\r\n\r\nCases like in `YieldAwaitable` just seem unfortunate as they're doing extra work during `UnsafeOnCompleted`. Async await machinery already maintains the correct context via IAsyncStateMachineBox.","Url":"https://github.com/dotnet/corefx/issues/42602","RelatedDescription":"Open issue \"Conditionally flow execution context into Task for custom TaskSchedulers\" (#42602)"},{"Id":"523089431","IsPullRequest":true,"CreatedAt":"2019-11-14T20:33:28","Actor":"MichalBrylka","Number":"42601","RawContent":null,"Title":"Improve documentation for intrinsics","State":"open","Body":"This is for issue #42207 \r\nI was following [Intel Guide](https://software.intel.com/sites/landingpage/IntrinsicsGuide/)\r\n\r\n@tannergooding \r\nDoes that look good ? If so I'd like to proceed with Vector64 and Vector128. I have no idea however to what instruction are translated Create methods for unsigned numbers/sbyte as well as methods like that : \r\n```csharp\r\npublic static unsafe Vector256<byte> Create(byte value)\r\n```\r\nthey kind of look like standard methods / not intrinsic ones","Url":"https://github.com/dotnet/corefx/pull/42601","RelatedDescription":"Open PR \"Improve documentation for intrinsics\" (#42601)"},{"Id":"523066794","IsPullRequest":false,"CreatedAt":"2019-11-14T19:46:16","Actor":"pakrym","Number":"42600","RawContent":null,"Title":"EventCounters event is written to an EventListener that never subscribed to it","State":"open","Body":"We have an EventListener listener where the subscription is guarded by a trait that System.Runtime event source doesn't have (`TraitName = \"AzureEventSource\"`)\r\n```\r\n  protected sealed override void OnEventSourceCreated(EventSource eventSource)\r\n        {\r\n            base.OnEventSourceCreated(eventSource);\r\n\r\n            if (eventSource.GetTrait(TraitName) == TraitValue)\r\n            {\r\n                EnableEvents(eventSource, _level);\r\n            }\r\n        }\r\n```\r\n\r\nSomehow without subscribing to System.Runtime event source we get EventCounters events with the following stack:\r\n\r\n```\r\n>\tAzure.Core.dll!Azure.Core.Diagnostics.AzureEventSourceListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs eventData) Line 70\tC#\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.Tracing.EventSource.DispatchToAllListeners(int eventId, System.Guid* childActivityID, System.Diagnostics.Tracing.EventWrittenEventArgs eventCallbackArgs) Line 2166\tC#\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.Tracing.EventSource.WriteToAllListeners(string eventName, ref System.Diagnostics.Tracing.EventDescriptor eventDescriptor, System.Diagnostics.Tracing.EventTags tags, System.Guid* pActivityId, System.Guid* pChildActivityId, System.Diagnostics.Tracing.EventPayload payload) Line 747\tC#\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.Tracing.EventSource.WriteImpl(string eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, object data, System.Guid* pActivityId, System.Guid* pRelatedActivityId, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes) Line 695\tC#\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.Tracing.PollingCounter.WritePayload(float intervalSec, int pollingIntervalMillisec) Line 76\tC#\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.Tracing.CounterGroup.OnTimer() Line 224\tC#\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.Tracing.CounterGroup.PollForValues() Line 251\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.ThreadHelper.ThreadStart() Line 100\tC#\r\n\r\n```\r\n\r\nEventData:\r\n```\r\n\r\n  | Name | Value | Type\r\n-- | -- | -- | --\r\n◢ | eventData | {System.Diagnostics.Tracing.EventWrittenEventArgs} | System.Diagnostics.Tracing.EventWrittenEventArgs\r\n  | ▶ ActivityId | {00000000-0000-0000-0000-000000000000} | System.Guid\r\n  | Channel | None | System.Diagnostics.Tracing.EventChannel\r\n  | EventId | -1 | int\r\n  | EventName | \"EventCounters\" | string\r\n  | ▶ EventSource | {EventSource(System.Runtime, 49592c0f-5a05-516d-aa4b-a64e02026c89)} | System.Diagnostics.Tracing.EventSource {System.Diagnostics.Tracing.RuntimeEventSource}\r\n  | Keywords | None | System.Diagnostics.Tracing.EventKeywords\r\n  | Level | LogAlways | System.Diagnostics.Tracing.EventLevel\r\n  | Message | null | string\r\n  | OSThreadId | 36244 | long\r\n  | Opcode | Info | System.Diagnostics.Tracing.EventOpcode\r\n  | ▶ Payload | Count = 1 | System.Collections.ObjectModel.ReadOnlyCollection<object>\r\n  | ▶ PayloadNames | Count = 1 | System.Collections.ObjectModel.ReadOnlyCollection<string>\r\n  | ▶ RelatedActivityId | {00000000-0000-0000-0000-000000000000} | System.Guid\r\n  | Tags | None | System.Diagnostics.Tracing.EventTags\r\n  | Task | None | System.Diagnostics.Tracing.EventTask\r\n  | ▶ TimeStamp | {11/14/2019 7:38:14 PM} | System.DateTime\r\n  | Version | 0 | byte\r\n\r\n\r\n```\r\n\r\nRuntime version: 3.0.0\r\n\r\ncc @noahfalk ","Url":"https://github.com/dotnet/corefx/issues/42600","RelatedDescription":"Open issue \"EventCounters event is written to an EventListener that never subscribed to it\" (#42600)"},{"Id":"523063105","IsPullRequest":false,"CreatedAt":"2019-11-14T19:38:53","Actor":"kadirguloglu","Number":"42599","RawContent":null,"Title":"FromBody not working","State":"open","Body":"Hello,\r\nI get the error in the attached images in my project.\r\n\r\nVisual studio recommends that I use FromBody ... as an error message. The application gives error even though I use it.\r\n\r\n![Ekran Alıntısı](https://user-images.githubusercontent.com/28136387/68890222-7cfc7a80-072f-11ea-980e-e707cd289f82.PNG)\r\n![Ekran Alıntısı1](https://user-images.githubusercontent.com/28136387/68890223-7d951100-072f-11ea-974d-c1a242b0b350.PNG)\r\n","Url":"https://github.com/dotnet/corefx/issues/42599","RelatedDescription":"Open issue \"FromBody not working\" (#42599)"},{"Id":"523042956","IsPullRequest":false,"CreatedAt":"2019-11-14T18:56:11","Actor":"Tratcher","Number":"42598","RawContent":null,"Title":"HashSet.Remove regression, not honoring comparer","State":"open","Body":"Recent optimizations in HashSet have caused a regression in HashSet.Remove when a non-default comparer is used. \r\n```\r\n            var hashSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\r\n            hashSet.Add(\"Foo\");\r\n            hashSet.Add(\"Bar\");\r\n            Assert.True(hashSet.Remove(\"Bar\")); // Works\r\n            Assert.True(hashSet.Remove(\"FOO\")); // Fails\r\n```\r\nI think the issue is that this line uses the default comparer rather than the specified one:\r\nhttps://github.com/dotnet/corefx/pull/40106/files#diff-a80c75678ed2d070e638bcb93ba26bccR419\r\nCompare to the same code in Add that uses the specified comparer:\r\nhttps://github.com/dotnet/corefx/pull/40106/files#diff-a80c75678ed2d070e638bcb93ba26bccR1388\r\n\r\nThis broke a few MVC tests in AspNetCore.","Url":"https://github.com/dotnet/corefx/issues/42598","RelatedDescription":"Open issue \"HashSet.Remove regression, not honoring comparer\" (#42598)"},{"Id":"522842186","IsPullRequest":true,"CreatedAt":"2019-11-14T16:28:50","Actor":"dotnet-maestro[bot]","Number":"42593","RawContent":null,"Title":"[master] Update dependencies from 4 repositories","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191113.9\r\n- **Date Produced**: 11/14/2019 1:36 AM\r\n- **Commit**: 3e344e919cc58ead331b18b83021120c1e8620e3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19563.9\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.19563.9\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19563.9\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191114.1\r\n- **Date Produced**: 11/14/2019 10:49 AM\r\n- **Commit**: c77948d92a2f950140f09384f057cb893ec3955a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha.1.19564.1\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha.1.19564.1\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha.1.19564.1\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191113.6\r\n- **Date Produced**: 11/14/2019 7:13 AM\r\n- **Commit**: 5cee7c97d602f294e27c582d4dab81ec388f1d7b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha.1.19563.6\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha.1.19563.6\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20191113.1\r\n- **Date Produced**: 11/13/2019 2:25 PM\r\n- **Commit**: 90b5f3b33752884a93e0f01b1a5d901aace2bc18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19563.1\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42593","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from 4 repositories\" (#42593)"},{"Id":"522851011","IsPullRequest":true,"CreatedAt":"2019-11-14T16:04:25","Actor":"dotnet-maestro[bot]","Number":"42594","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191113.3\r\n- **Date Produced**: 11/14/2019 12:21 AM\r\n- **Commit**: 2c4fb3250989f014550882f5d165cdc36ebdbd08\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19563.3\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19563.3\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19563.3\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42594","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#42594)"},{"Id":"522951747","IsPullRequest":false,"CreatedAt":"2019-11-14T15:10:51","Actor":"DevExpress-Visualization","Number":"42596","RawContent":null,"Title":"An OleDbCommand.Prepare() method throws the System.Data.OleDb.OleDbException: 'The parameter is incorrect.' exception","State":"open","Body":"The following code under the .NET Core 3 causes the **System.Data.OleDb.OleDbException: 'The parameter is incorrect.'** exception, but under .NET Framework, it works fine:\r\n\r\n**Code**\r\n\r\n            using (OleDbCommand command = new OleDbCommand()) {\r\n                command.Connection = connection;\r\n                command.CommandText = \"insert into sales (id, units, cost_per_unit, discount, total_cost, sale_date, productId, RegionId, ChannelId, SectorId) values (@id, @units, @cost_per_unit, @discount, @total_cost, @sale_date, @productId, @RegionId, @ChannelId, @SectorId)\";\r\n                command.Parameters.AddRange(\r\n                    new OleDbParameter[] {\r\n                        new OleDbParameter(\"@id\", OleDbType.Integer),\r\n                        new OleDbParameter(\"@units\", OleDbType.Integer),\r\n                        new OleDbParameter(\"@cost_per_unit\", OleDbType.Integer),\r\n                        new OleDbParameter(\"@discount\", OleDbType.Integer),\r\n                        new OleDbParameter(\"@total_cost\", OleDbType.Integer),\r\n                        new OleDbParameter(\"@sale_date\", OleDbType.Date),\r\n                        new OleDbParameter(\"@productId\", OleDbType.Integer),\r\n                        new OleDbParameter(\"@RegionId\", OleDbType.Integer),\r\n                        new OleDbParameter(\"@ChannelId\", OleDbType.Integer),\r\n                        new OleDbParameter(\"@SectorId\", OleDbType.Integer)\r\n                    }\r\n                );\r\n                command.Prepare();\r\n\r\n\r\n**Call Stack**\r\n\r\n \tSystem.Data.OleDb.dll!System.Data.OleDb.OleDbCommand.ProcessResults(System.Data.OleDb.OleDbHResult hr)\tUnknown\r\n \tSystem.Data.OleDb.dll!System.Data.OleDb.OleDbCommand.ApplyParameterBindings(System.Data.Common.UnsafeNativeMethods.ICommandWithParameters commandWithParameters, System.Data.OleDb.tagDBPARAMBINDINFO[] bindInfo)\tUnknown\r\n \tSystem.Data.OleDb.dll!System.Data.OleDb.OleDbCommand.CreateAccessor()\tUnknown\r\n \tSystem.Data.OleDb.dll!System.Data.OleDb.OleDbCommand.InitializeCommand(System.Data.CommandBehavior behavior, bool throwifnotsupported)\tUnknown\r\n \tSystem.Data.OleDb.dll!System.Data.OleDb.OleDbCommand.Prepare()\tUnknown\r\n\tOleDbIssue.dll!OleDbIssue.SalesGenerator.Generate(System.Data.OleDb.OleDbConnection connection, System.DateTime startDate, int daysCount) Line 77\tC#\r\n \tOleDbIssue.dll!OleDbIssue.SalesGenerator.Run(string connectionString) Line 147\tC#\r\n \tOleDbIssue.dll!OleDbIssue.Program.Main(string[] args) Line 8\tC#\r\n\r\n[Sample project](https://github.com/dotnet/core/files/3847090/OleDbIssue.zip)\r\n","Url":"https://github.com/dotnet/corefx/issues/42596","RelatedDescription":"Open issue \"An OleDbCommand.Prepare() method throws the System.Data.OleDb.OleDbException: 'The parameter is incorrect.' exception\" (#42596)"},{"Id":"522856672","IsPullRequest":false,"CreatedAt":"2019-11-14T13:24:51","Actor":"huoyaoyuan","Number":"42595","RawContent":null,"Title":"Incosistency between doc and nullable annotation on ReflectionTypeLoadException.Types","State":"open","Body":"The document says that _This array can contain some null values_, but the public type is `Type[]?`. The consumer always provide a non-nullable value for it.","Url":"https://github.com/dotnet/corefx/issues/42595","RelatedDescription":"Open issue \"Incosistency between doc and nullable annotation on ReflectionTypeLoadException.Types\" (#42595)"},{"Id":"522820944","IsPullRequest":false,"CreatedAt":"2019-11-14T12:17:08","Actor":"dehghani-mehdi","Number":"42592","RawContent":null,"Title":"Why `System.Runtime.Caching` has dependency to `System.Security.Principal.Windows`?","State":"open","Body":"I think this 2 are completely different things.\r\nI like to know why and also what happens in other OS, e.g Linux? would you explain.\r\n\r\nThank you","Url":"https://github.com/dotnet/corefx/issues/42592","RelatedDescription":"Open issue \"Why `System.Runtime.Caching` has dependency to `System.Security.Principal.Windows`?\" (#42592)"},{"Id":"522820364","IsPullRequest":false,"CreatedAt":"2019-11-14T12:15:57","Actor":"gravity00","Number":"42591","RawContent":null,"Title":"Task.WhenAll - Inner exceptions are lost","State":"open","Body":"Hi,\r\n\r\n**Summary:** when `await Task.WhenAll(tasks)` if more than one task fails, only one exception is thrown and I believe an `AggregateException` should be thrown instead.\r\n\r\n**Explanation:**\r\n\r\nI know that `await` only throws the first exception present in `task.Exception` and [found the racional behind it](https://social.msdn.microsoft.com/Forums/en-US/e439770e-6c27-40d9-91af-c15d26743a5f/whenall-and-exception?forum=async) (it makes sense considering the options). My problem is not with that, but the fact that a method that waits for multiple tasks doesn't throw himself an `AggregateException`.\r\n\r\nBy using the `TaskCompletionSource<T>.SetException(IEnumerable<Exception>)` they'll all be appended to the task's exception and when an await happens, only the first one is thrown. If instead it used something like `tcs.SetException(new AggregateException(exceptions))`, no exceptions would be lost.\r\n\r\nI believe this problem arises much sooner in the TPL API, because I always found it odd that a Task as an `AggregateException` instead of just an `Exception` with the exact exception thrown by the underline code, for the same reason it only has a single result e not an `AggregateResult`. I'm certain there's some rational behind it but I found nothing.\r\n\r\nHere's a simple code snippet, simulating the `Task.WhenAll` behavior that should give the idea:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Concurrent;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace SemaphoreSlimTests\r\n{\r\n    public static class Program\r\n    {\r\n        public static async Task Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Application started...\");\r\n            Console.WriteLine();\r\n\r\n            const int maxTasks = 10;\r\n\r\n            var tasks = Enumerable\r\n                .Range(0, maxTasks)\r\n                .Select(async i =>\r\n                {\r\n                    await Task.Yield();\r\n                    if (i % 3 == 0)\r\n                        throw new Exception($\"Simulated exception [{i}]\");\r\n                    await Task.Delay(i % 3 * 500);\r\n                })\r\n                .ToArray();\r\n\r\n            Console.WriteLine(\"--- WhenAll_SetExceptionCollection ---\");\r\n            try\r\n            {\r\n                await TaskEx.WhenAll_SetExceptionCollection(tasks);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Console.ForegroundColor = ConsoleColor.Red;\r\n                Console.WriteLine(e);\r\n                Console.ResetColor();\r\n            }\r\n            Console.WriteLine();\r\n\r\n            Console.WriteLine(\"--- WhenAll_InnerAggregateException ---\");\r\n            try\r\n            {\r\n                await TaskEx.WhenAll_InnerAggregateException(tasks);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Console.ForegroundColor = ConsoleColor.Red;\r\n                Console.WriteLine(e);\r\n                Console.ResetColor();\r\n            }\r\n            Console.WriteLine();\r\n\r\n            Console.WriteLine(\"Application terminated. Press <enter> to exit...\");\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n\r\n    public static class TaskEx\r\n    {\r\n        public static Task WhenAll_SetExceptionCollection(Task[] tasks)\r\n        {\r\n            var tcs = new TaskCompletionSource<bool>();\r\n\r\n            var totalTasks = tasks.Length;\r\n            var exceptions = new ConcurrentBag<Exception>();\r\n            foreach (var task in tasks)\r\n            {\r\n                task.ContinueWith(t =>\r\n                {\r\n                    if (t.IsFaulted)\r\n                        exceptions.Add(t.Exception.InnerException);\r\n\r\n                    if (Interlocked.Decrement(ref totalTasks) == 0)\r\n                    {\r\n                        if (exceptions.Count == 0)\r\n                            tcs.SetResult(true);\r\n                        else\r\n                        {\r\n                            // this is the current Task.WhenAll behavior\r\n                            // the underline Task will have it's Exception property\r\n                            // filled with all these as inner exceptions\r\n                            // but when we await only the first one will be thrown\r\n                            tcs.SetException(exceptions);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            return tcs.Task;\r\n        }\r\n\r\n        public static Task WhenAll_InnerAggregateException(Task[] tasks)\r\n        {\r\n            var tcs = new TaskCompletionSource<bool>();\r\n\r\n            var totalTasks = tasks.Length;\r\n            var exceptions = new ConcurrentBag<Exception>();\r\n            foreach (var task in tasks)\r\n            {\r\n                task.ContinueWith(t =>\r\n                {\r\n                    if (t.IsFaulted)\r\n                        exceptions.Add(t.Exception.InnerException);\r\n\r\n                    if (Interlocked.Decrement(ref totalTasks) == 0)\r\n                    {\r\n                        if (exceptions.Count == 0)\r\n                            tcs.SetResult(true);\r\n                        else\r\n                        {\r\n                            // this is the proposed behaviour with the following racional:\r\n                            // a bunch of exception have been thrown, so here's an \r\n                            // AggregateException with all of them and when you\r\n                            // await this task, you'll receive all of them\r\n                            tcs.SetException(new AggregateException(exceptions));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            return tcs.Task;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```\r\nApplication started...\r\n\r\n--- WhenAll_SetExceptionCollection ---\r\nSystem.Exception: Simulated exception [9]\r\n   at SemaphoreSlimTests.Program.<>c.<<Main>b__0_0>d.MoveNext() in C:\\Dev-Playground\\SemaphoreSlimTests\\SemaphoreSlimTests\\Program.cs:line 25\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at SemaphoreSlimTests.Program.Main(String[] args) in C:\\Dev-Playground\\SemaphoreSlimTests\\SemaphoreSlimTests\\Program.cs:line 32\r\n\r\n--- WhenAll_InnerAggregateException ---\r\nSystem.AggregateException: One or more errors occurred. (Simulated exception [6]) (Simulated exception [9]) (Simulated exception [0]) (Simulated exception [3])\r\n ---> System.Exception: Simulated exception [6]\r\n   at SemaphoreSlimTests.Program.<>c.<<Main>b__0_0>d.MoveNext() in C:\\Dev-Playground\\SemaphoreSlimTests\\SemaphoreSlimTests\\Program.cs:line 25\r\n   --- End of inner exception stack trace ---\r\n   at SemaphoreSlimTests.Program.Main(String[] args) in C:\\Dev-Playground\\SemaphoreSlimTests\\SemaphoreSlimTests\\Program.cs:line 45\r\n ---> (Inner Exception #1) System.Exception: Simulated exception [9]\r\n   at SemaphoreSlimTests.Program.<>c.<<Main>b__0_0>d.MoveNext() in C:\\Dev-Playground\\SemaphoreSlimTests\\SemaphoreSlimTests\\Program.cs:line 25\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at SemaphoreSlimTests.Program.Main(String[] args) in C:\\Dev-Playground\\SemaphoreSlimTests\\SemaphoreSlimTests\\Program.cs:line 32<---\r\n\r\n ---> (Inner Exception #2) System.Exception: Simulated exception [0]\r\n   at SemaphoreSlimTests.Program.<>c.<<Main>b__0_0>d.MoveNext() in C:\\Dev-Playground\\SemaphoreSlimTests\\SemaphoreSlimTests\\Program.cs:line 25<---\r\n\r\n ---> (Inner Exception #3) System.Exception: Simulated exception [3]\r\n   at SemaphoreSlimTests.Program.<>c.<<Main>b__0_0>d.MoveNext() in C:\\Dev-Playground\\SemaphoreSlimTests\\SemaphoreSlimTests\\Program.cs:line 25<---\r\n\r\n\r\nApplication terminated. Press <enter> to exit...\r\n```","Url":"https://github.com/dotnet/corefx/issues/42591","RelatedDescription":"Open issue \"Task.WhenAll - Inner exceptions are lost\" (#42591)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"523754504","IsPullRequest":false,"CreatedAt":"2019-11-16T00:07:17","Actor":"vsfeedback","Number":"39849","RawContent":null,"Title":"I can't stop inserting spaces to the inside of braces","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/814496/i-cant-stop-inserting-spaces-to-the-inside-of-brac.html)._\n\n---\nCurrently, C# formatter puts spaces to the front and back of array element braces.\n`int[] arr = new int[] { 1, 2, 3 };`\nBut I want to remove these spaces.\n`int[] arr = new int[]{1, 2, 3};`\n\nHow can I do this? I can't find related options in `Tools | Options...` menu.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/11/2019, 00:57 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 11/15/2019, 03:20 PM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39849","RelatedDescription":"Open issue \"I can't stop inserting spaces to the inside of braces\" (#39849)"},{"Id":"523747655","IsPullRequest":false,"CreatedAt":"2019-11-15T23:37:44","Actor":"vsfeedback","Number":"39848","RawContent":null,"Title":"Find all references to a class shows all references to Finalize method of all classes instead of references to the class I searched on","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/717321/find-all-references-to-a-class-shows-all-reference.html)._\n\n---\nWhat steps will reproduce the problem?\n1.  Open a solution with several classes and VB.NET projects\n2.  Navigate to the definition of a class, e.g., Public Class Foo\n3.  Right click on the class name Foo and Find All References\n\nWhat is the expected output? What do you see instead?\nI expect to see references to class Foo - variable declarations for sure.  Maybe method calls on instance variables, etc.\n\nI see every reference to &quot;Overridable Overloads Sub Object.Finalize()&quot; and every class that is derived from Object in the scope (project or solution) even though they are not of class Foo (or derived from Foo).  That swamps the actual data that I am looking for and gives me is signal to noise ratio of 1:100 or 1:1000.\n\nPlease provide any additional information below.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/30/2019, 02:06 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 10/8/2019, 02:25 AM: \n\nI have detected that for the last 35 days, this issue didn't have any product team activity and a very small amount of new votes or comments.&nbsp;Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.\n#### R Pond on 11/11/2019, 06:22 AM: \n\nWe have the same problem.  It happens both when rightclicking the class name and doing &#39;find all references&#39; from there, and also when clicking the &#39;27 references&#39; link above the class name.\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39848","RelatedDescription":"Open issue \"Find all references to a class shows all references to Finalize method of all classes instead of references to the class I searched on\" (#39848)"},{"Id":"523746282","IsPullRequest":false,"CreatedAt":"2019-11-15T23:32:04","Actor":"vsfeedback","Number":"39847","RawContent":null,"Title":"Find References does not display all references for getter if those references are conditional","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/729179/find-references-does-not-display-all-references-fo.html)._\n\n---\nWhen a class contains **indexer** which contains both **getter** and **setter** and getter is accessed via **conditional** **access** , such a reference is not displayed .\nBut thanks very much for finaly distinguishing setters and getters in your references search !\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 9/11/2019, 03:58 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 10/17/2019, 10:03 PM: \n\nI have detected that for the last 35 days, this issue didn't have any product team activity and a very small amount of new votes or comments.&nbsp;Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39847","RelatedDescription":"Open issue \"Find References does not display all references for getter if those references are conditional\" (#39847)"},{"Id":"523742693","IsPullRequest":false,"CreatedAt":"2019-11-15T23:20:58","Actor":"vsfeedback","Number":"39846","RawContent":null,"Title":"Intellisense bug: when contents of string interpolation contains newline, the final double quote is incorrectly moved","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/814365/intellisense-bug-when-contents-of-string-interpola.html)._\n\n---\nExample:\n\n_logger?. LogError($&quot;{guid} failure: {await httpResponseMessage\n\t\t. Content\n\t\t. ReadAsStringAsync()\n\t\t. ConfigureAwait(false)}&quot;);\n\n... becomes...\n\n_logger?. LogError($&quot;{guid} failure: {await httpResponseMessage\n\t\t. Content\n\t\t. ReadAsStringAsync()\n\t\t. ConfigureAwait(false)}\n\t&quot;);\n\n... on save.  This doesn't compile.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/10/2019, 10:15 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39846","RelatedDescription":"Open issue \"Intellisense bug: when contents of string interpolation contains newline, the final double quote is incorrectly moved\" (#39846)"},{"Id":"523734026","IsPullRequest":false,"CreatedAt":"2019-11-15T22:59:16","Actor":"vsfeedback","Number":"39845","RawContent":null,"Title":"Saving Visual Basic naming conventions that contain module specifications to an editorconfig file crashes Visual Studio","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/818472/saving-visual-basic-naming-conventions-that-contai.html)._\n\n---\nWhen you define a naming convention that includes `Module` in a specification, saving those naming conventions to an editorconfig file crashes Visual Studio.\n\n### Steps to reproduce\n\n1. Go to _Tools -&gt; Options_ and navigate to _Text Editor / Basic / Code Style / Naming_\n2. Click _Manage Specifications_.\n3. Add a new specification.\n4. Deselect all symbol kinds and tick on only _Module_.\n5. Use the default accessibilities (they don't affect the result).\n6. Give the specification a name and click _OK_.\n7. Click _OK_ to close the _Manage Specifications_ dialog.\n8. Add a new rule.\n9. Select the new specification you created for Modules.\n10. Pick a style and severity (it doesn't matter what you pick).\n11. Click OK to close the Options dialog (you have to do this otherwise the new rule is not included in the editorconfig file).\n12. Go back into _Tools -&gt; Options_ and navigate to _Text Editor / Basic / Code Style / General_.\n13. Click _Generate .editorconfig file from settings_.\n14. Visual Studio will crash.\n\n### Cause\n\nI believe it's caused by this function not handling `TypeKind.Module`:\n\nhttps://github.com/dotnet/roslyn/blob/d570d6cc2e0d12a1c587bd2cd83d6fe3215d51e2/src/Workspaces/Core/Portable/NamingStyles/EditorConfig/EditorConfigNamingStyleParser_SymbolSpec.cs#L317-L339\n\nAs an aside, it doesn't look [the code](https://github.com/dotnet/roslyn/blob/d570d6cc2e0d12a1c587bd2cd83d6fe3215d51e2/src/Workspaces/Core/Portable/NamingStyles/EditorConfig/EditorConfigNamingStyleParser_SymbolSpec.cs#L95) handles _loading_ a &quot;module&quot; specification from the editorconfig file either.\n\n### Stack trace \n\nTaken from the error logged in Event Viewer:\n\n```\nApplication: devenv.exe\nFramework Version: v4.0.30319\nDescription: The process was terminated due to an unhandled exception.\nException Info: System.InvalidOperationException\n   at Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.EditorConfigNamingStyleParser.ToEditorConfigString(SymbolKindOrTypeKind)\n   at Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.EditorConfigNamingStyleParser+&lt;&gt;c.&lt;ToEditorConfigString&gt;b__52_0(SymbolKindOrTypeKind)\n   at System.Linq.Enumerable+WhereSelectArrayIterator`2[[Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.SymbolSpecification+SymbolKindOrTypeKind, Microsoft.CodeAnalysis.Workspaces, Version=3.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\n   at System.String.Join(System.String, System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)\n   at Microsoft.CodeAnalysis.Diagnostics.Analyzers.NamingStyles.EditorConfigNamingStyleParser.ToEditorConfigString(System.Collections.Immutable.ImmutableArray`1&lt;SymbolKindOrTypeKind&gt;)\n   at Microsoft.CodeAnalysis.Options.EditorConfigFileGenerator.AppendNamingStylePreferencesToEditorConfig(Microsoft.CodeAnalysis.Options.OptionSet, System.String, System.Text.StringBuilder)\n   at Microsoft.CodeAnalysis.Options.EditorConfigFileGenerator.Generate(System.Collections.Immutable.ImmutableArray`1&lt;System.ValueTuple`2&lt;System.String,System.Collections.Immutable.ImmutableArray`1&lt;Microsoft.CodeAnalysis.Options.IOption&gt;&gt;&gt;, Microsoft.CodeAnalysis.Options.OptionSet, System.String)\n   at Microsoft.VisualStudio.LanguageServices.Implementation.Options.GridOptionPreviewControl.Generate_Save_EditorConfig(System.Object, System.Windows.RoutedEventArgs)\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(System.Object, System.Windows.RoutedEventArgs)\n   at System.Windows.EventRoute.InvokeHandlersImpl(System.Object, System.Windows.RoutedEventArgs, Boolean)\n   at System.Windows.UIElement.RaiseEventImpl(System.Windows.DependencyObject, System.Windows.RoutedEventArgs)\n   at System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)\n   at System.Windows.Controls.Primitives.ButtonBase.OnClick()\n   at System.Windows.Controls.Button.OnClick()\n   at System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n   at System.Windows.UIElement.OnMouseLeftButtonUpThunk(System.Object, System.Windows.Input.MouseButtonEventArgs)\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(System.Delegate, System.Object)\n   at System.Windows.RoutedEventArgs.InvokeHandler(System.Delegate, System.Object)\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(System.Object, System.Windows.RoutedEventArgs)\n   at System.Windows.EventRoute.InvokeHandlersImpl(System.Object, System.Windows.RoutedEventArgs, Boolean)\n   at System.Windows.UIElement.ReRaiseEventAs(System.Windows.DependencyObject, System.Windows.RoutedEventArgs, System.Windows.RoutedEvent)\n   at System.Windows.UIElement.OnMouseUpThunk(System.Object, System.Windows.Input.MouseButtonEventArgs)\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(System.Delegate, System.Object)\n   at System.Windows.RoutedEventArgs.InvokeHandler(System.Delegate, System.Object)\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(System.Object, System.Windows.RoutedEventArgs)\n   at System.Windows.EventRoute.InvokeHandlersImpl(System.Object, System.Windows.RoutedEventArgs, Boolean)\n   at System.Windows.UIElement.RaiseEventImpl(System.Windows.DependencyObject, System.Windows.RoutedEventArgs)\n   at System.Windows.UIElement.RaiseTrustedEvent(System.Windows.RoutedEventArgs)\n   at System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs, Boolean)\n   at System.Windows.Input.InputManager.ProcessStagingArea()\n   at System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs)\n   at System.Windows.Input.InputProviderSite.ReportInput(System.Windows.Input.InputReport)\n   at System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr, System.Windows.Input.InputMode, Int32, System.Windows.Input.RawMouseActions, Int32, Int32, Int32)\n   at System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr, MS.Internal.Interop.WindowMessage, IntPtr, IntPtr, Boolean ByRef)\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)\n   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)\n   at Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource.Invoke(System.String, System.Object, System.Object ByRef)\n   at Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Invoke(System.String, System.Object, System.Object ByRef)\n   at Microsoft.VisualStudio.PlatformUI.VsCommand.Execute(System.Object)\n   at MS.Internal.Commands.CommandHelpers.CriticalExecuteCommandSource(System.Windows.Input.ICommandSource, Boolean)\n   at System.Windows.Controls.MenuItem.InvokeClickAfterRender(System.Object)\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(System.Object)\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n   at MS.Internal.CulturePreservingExecutionContext.Run(MS.Internal.CulturePreservingExecutionContext, System.Threading.ContextCallback, System.Object)\n   at System.Windows.Threading.DispatcherOperation.Invoke()\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)\n   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)\n```\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/14/2019, 01:00 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39845","RelatedDescription":"Open issue \"Saving Visual Basic naming conventions that contain module specifications to an editorconfig file crashes Visual Studio\" (#39845)"},{"Id":"523733559","IsPullRequest":false,"CreatedAt":"2019-11-15T22:58:05","Actor":"vsfeedback","Number":"39844","RawContent":null,"Title":"Warning\tAD0001\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.UseIndexOrRangeOperator.CSharpUseRangeOperatorDiagnosticAnalyzer' threw an exception","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/818784/warning-ad0001-analyzer-microsoftcodeanalysiscshar-1.html)._\n\n---\nOpen the solution I attached. You will get the following error:\n\n```\nWarning\tAD0001\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.UseIndexOrRangeOperator.CSharpUseRangeOperatorDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.\ttest\t\t1\tActive\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.UseIndexOrRangeOperator.CSharpUseRangeOperatorDiagnosticAnalyzer' threw the following exception:\n'Exception occurred with following context:\nCompilation: Cookies\n\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at Microsoft.CodeAnalysis.CSharp.UseIndexOrRangeOperator.CSharpUseRangeOperatorDiagnosticAnalyzer.InfoCache.ComputeMemberInfo(IMethodSymbol sliceLikeMethod, Boolean requireRangeMember)\n   at Microsoft.CodeAnalysis.CSharp.UseIndexOrRangeOperator.CSharpUseRangeOperatorDiagnosticAnalyzer.InfoCache..ctor(Compilation compilation)\n   at Microsoft.CodeAnalysis.CSharp.UseIndexOrRangeOperator.CSharpUseRangeOperatorDiagnosticAnalyzer. &lt;InitializeWorker&gt;b__4_0(CompilationStartAnalysisContext compilationContext)\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&lt;&gt;c.&lt;ExecuteCompilationStartActions&gt;b__37_0(ValueTuple`2 data)\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)\n-----\n```\n\nAs you can see, that file is an empty class.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/14/2019, 01:03 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39844","RelatedDescription":"Open issue \"Warning\tAD0001\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.UseIndexOrRangeOperator.CSharpUseRangeOperatorDiagnosticAnalyzer' threw an exception\" (#39844)"},{"Id":"523726458","IsPullRequest":false,"CreatedAt":"2019-11-15T22:41:13","Actor":"vsfeedback","Number":"39843","RawContent":null,"Title":"Line of code becomes too indented when deleting a preceeding blank line","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/820878/line-of-code-becomes-too-indented-when-deleting-a.html)._\n\n---\n[regression] [worked-in:VS 2017]\r\nWhen deleting a blank line which preceeds a line of code, the line of code becomes _twice as indented_ as it should be: the indentation whitespace characters are combined together, rather than smartly keeping the line of code at the same indentation level.\n\nFor example, given the following function:\n\n```\nstatic void Main(string[] args)\n{\n\tConsole.WriteLine(&quot;Hello World!&quot;);\n\tvar i = 12;\n}\n```\n\nIf the cursor is placed at the end of the `Console.WriteLine` line, and Enter is pressed we then (correctly) have:\n\n```\nstatic void Main(string[] args)\n{\n\tConsole.WriteLine(&quot;Hello World!&quot;);\n\t\nvar i = 12;\n}\n```\nIf we then press the Delete key, we end up with:\n```\nstatic void Main(string[] args)\n{\n\tConsole.WriteLine(&quot;Hello World!&quot;);\n\t\tvar i = 12;\n}\n```\n\nNotice that the `var i = 12` line indentation has the whitespace from the empty line added to it.\n\nIn Visual Studio 2017 at least, this did not happen - the editor smartly maintains the indentation level. It may have also worked in an earlier version of VS 2019.\n\nThis becomes very annoying, and even more annoying when working with a more nested block - the number of extra tab/space deletions to align the line can become large (of course, reformatting the line works, but that is an annoying distraction too).\n\nThis may possibly be related to [another indentation issue](https://developercommunity.visualstudio.com/content/problem/745432/c-smart-indenting-is-broken-in-1630.html?childToView=820860) which surfaced recently in VS 2019\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/14/2019, 08:33 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39843","RelatedDescription":"Open issue \"Line of code becomes too indented when deleting a preceeding blank line\" (#39843)"},{"Id":"523722499","IsPullRequest":false,"CreatedAt":"2019-11-15T22:31:38","Actor":"igoryan-k","Number":"39842","RawContent":null,"Title":"Visual Studio crashes on code analysis of a large file","State":"open","Body":"VS Pro 2019 v16.3.9 crashes when I try to open a large win form C# file (4800+ lines of code).   \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open large C# file (4800+ lines of code)\r\n2. .cs File opens in a new tab. Vertical scroll bar starts to fill up with code.\r\n3. Vertical scroll bar fills up to 2/3 and then VS crashes\r\n\r\nEvent log:\r\n\r\nApplication: devenv.exe\r\nFramework Version: v4.0.30319\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage:\r\n```ini \r\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.RootSlot(Int32 slot)\r\n   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.IsCapturedInLocalFunction(Int32 slot)\r\n   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.GetCapturedBitmask(BitVector& state)\r\n   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.RecordCapturedChanges(BitVector& oldState, BitVector& newState)\r\n   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.RecordChangedVars(LocalState& oldWrites, LocalState& newWrites, BitVector& oldReads, BitVector& newReads)\r\n   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitLocalFunctionStatement(BoundLocalFunctionStatement localFunc)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundLocalFunctionStatement.Accept(BoundTreeVisitor visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(BoundBlock block)\r\n   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(BoundBlock node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitStatement(BoundStatement statement)\r\n   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitStatementsWithLocalFunctions(BoundBlock block)\r\n   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.VisitBlock(BoundBlock node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Scan(Boolean& badRegion)\r\n   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Scan(Boolean& badRegion)\r\n   at Microsoft.CodeAnalysis.CSharp.UnassignedFieldsWalker.Scan(Boolean& badRegion)\r\n   at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Analyze(Boolean& badRegion, Optional`1 initialState)\r\n   at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Analyze(Boolean& badRegion, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.UnassignedFieldsWalker.Analyze(CSharpCompilation compilation, MethodSymbol method, BoundNode node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers& processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.VisitNamedType(NamedTypeSymbol symbol, TypeCompilationState arg)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol.Accept[TArgument,TResult](CSharpSymbolVisitor`2 visitor, TArgument argument)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamespace(NamespaceSymbol symbol)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.VisitNamespace(NamespaceSymbol symbol, TypeCompilationState arg)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.NamespaceSymbol.Accept[TArgument,TResult](CSharpSymbolVisitor`2 visitor, TArgument argument)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamespace(NamespaceSymbol symbol)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForMethodBodiesInTree(SyntaxTree tree, Nullable`1 span, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForSyntaxTree(CompilationStage stage, SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Boolean includeEarlierStages, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDiagnostics(Nullable`1 span, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GenerateCompilationEvents(AnalysisScope analysisScope, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.<GenerateCompilationEventsAndPopulateEventsCacheAsync>d__58.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.<ComputeAnalyzerDiagnosticsAsync>d__57.MoveNext()\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   at Microsoft.CodeAnalysis.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)\r\n   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+<ComputeAnalyzerDiagnosticsAsync>d__57.MoveNext()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)\r\n   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+<ComputeAnalyzerDiagnosticsAsync>d__57.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)\r\n   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+<GetAnalyzerDriverAsync>d__62.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetFromTask(System.Threading.Tasks.Task, Boolean)\r\n   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InvokeCore(System.Threading.Tasks.Task)\r\n   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Threading.Tasks.Task)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.Threading.Tasks.VoidTaskResult)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<>c__DisplayClass56_0+<<Initialize>b__0>d.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[System.ValueTuple`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.ValueTuple`2<System.__Canon,System.__Canon>)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.ValueTuple`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.ValueTuple`2<System.__Canon,System.__Canon>)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<GetAnalyzerActionsAsync>d__110.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager+<GetAnalyzerActionsAsync>d__12.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager+<GetCompilationAnalysisScopeAsync>d__6.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.__Canon)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].SetResult(System.__Canon)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager+<GetCompilationAnalysisScopeCoreAsync>d__7.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task.FinishStageTwo()\r\n   at System.Threading.Tasks.Task.Finish(Boolean)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\r\n   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/39842","RelatedDescription":"Open issue \"Visual Studio crashes on code analysis of a large file\" (#39842)"},{"Id":"523175389","IsPullRequest":true,"CreatedAt":"2019-11-15T22:20:06","Actor":"dotnet-bot","Number":"39834","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39834","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#39834)"},{"Id":"523710389","IsPullRequest":false,"CreatedAt":"2019-11-15T22:01:37","Actor":"abock","Number":"39841","RawContent":null,"Title":"csc doesn't detect generic struct cycles","State":"open","Body":"Roslyn/csc is unable to detect cycles between two structs when one struct extends another by way of generics. Mono's `mcs` C# compiler does not exhibit this issue. `csc` will compile the cycled structs, resulting in a runtime crash.\r\n\r\n### Roslyns In Use\r\n\r\n| Runtime | Roslyn |\r\n| ---- | ---- |\r\n| Mono 6.6.0.140 |  3.4.0-beta2-19477-01 (38c90f84) |\r\n| .NET Core 3.0.100 | 3.3.1-beta4-19462-11 (66a912c9) |\r\n\r\n### Program Driver\r\n\r\n```csharp\r\nclass Program\r\n{\r\n    static void Main() => new A().GetType();\r\n}\r\n```\r\n\r\n### Generic cycle through another type 💔\r\n\r\n```csharp\r\npublic struct A { public B<A> B; }\r\npublic struct B<T> { }\r\n```\r\n\r\n* `csc` fails to detect the cycle here, `mcs` detects it:\r\n\r\n   ```\r\n   Program.cs(6,31): error CS0523: Struct member `A.B' of type `B<A>' causes a cycle in the struct layout\r\n   ```\r\n\r\n* Running the assembly produced by `csc` results in the following at runtime:\r\n\r\n   ```\r\n   Unhandled exception. System.TypeLoadException: Could not load type 'A' from assembly 'DncTypeLoadFailure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n   ```\r\n\r\n### Non-generic cycle through members ✅\r\n\r\n```csharp\r\npublic struct A { public B B; }\r\npublic struct B { public A A; }\r\n```\r\n\r\nRoslyn detects the cycle.\r\n\r\n### Generic cycle through self ✅\r\n\r\n```csharp\r\npublic struct A<T> { public A<A<string>> F; }\r\n```\r\n\r\nRoslyn detects the cycle.\r\n","Url":"https://github.com/dotnet/roslyn/issues/39841","RelatedDescription":"Open issue \"csc doesn't detect generic struct cycles\" (#39841)"},{"Id":"523688278","IsPullRequest":false,"CreatedAt":"2019-11-15T21:06:28","Actor":"333fred","Number":"39840","RawContent":null,"Title":"Cache SemanticModel Instances","State":"open","Body":"We currently don't cache SemanticModel instances today. This is, in part, because calls to methods on the model would only cause binding on an individual statement. However, with C# 8 and nullable, we now have to bind the entire body of a member in order to provide semantic information when nullable is enabled. Some existing analyzers have taken an implicit dependency on the previously-true fact that SemanticModels are cheap to create and ask a single question of, but are now seeing performance regressions because this is no longer true. We should consider lazily caching SyntaxTreeSemanticModels on the Compilation, when asked for, which will improve the performance of these analyzers, especially since the guidance around `GetSemanticModel` for a single question has now changed.\r\n\r\n/cc @agocke ","Url":"https://github.com/dotnet/roslyn/issues/39840","RelatedDescription":"Open issue \"Cache SemanticModel Instances\" (#39840)"},{"Id":"523680472","IsPullRequest":true,"CreatedAt":"2019-11-15T20:46:09","Actor":"AlekseyTs","Number":"39839","RawContent":null,"Title":"Address a number of variance safety issues with code in interfaces.","State":"open","Body":"Fixes #39731.\r\n\r\n- Declaration of classes, structures and enums within variant interfaces is disallowed.\r\n- Nested classes synthesized by the compiler don't have variant emitted type parameters.\r\n- Local functions and lambdas used within a variant interface always have display class.\r\n","Url":"https://github.com/dotnet/roslyn/pull/39839","RelatedDescription":"Open PR \"Address a number of variance safety issues with code in interfaces.\" (#39839)"},{"Id":"523590175","IsPullRequest":true,"CreatedAt":"2019-11-15T17:14:15","Actor":"NextTurn","Number":"39838","RawContent":null,"Title":"Don't remove pointer cast in return statements","State":"open","Body":"Fixes #38599","Url":"https://github.com/dotnet/roslyn/pull/39838","RelatedDescription":"Open PR \"Don't remove pointer cast in return statements\" (#39838)"},{"Id":"523225990","IsPullRequest":false,"CreatedAt":"2019-11-15T03:08:12","Actor":"InRedikaWB","Number":"39837","RawContent":null,"Title":"Microsoft.CodeAnalysis.Formatting.Formatter don't use NewLineForMembersInObjectInit option","State":"open","Body":"**Version Used**: \r\nMicrosoft.CodeAnalysis.CSharp - 3.3.1\r\nMicrosoft.CodeAnalysis.CSharp.Scripting - 3.3.1\r\nMicrosoft.CodeAnalysis.CSharp.Workspaces - 3.3.1\r\nMicrosoft.CodeAnalysis.Workspaces.Common - 3.3.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Generate CompilationUnitSyntax with method with Object Initializer Syntax like\r\n```C#\r\npublic BusinessEntityAddressEntity Parse(SerializedTransferObject transferObject)\r\n{\r\n            return new BusinessEntityAddressEntity { BusinessEntityId = SPerson.BusinessEntityAddress.BusinessEntityId.GetFrom(transferObject), AddressId = SPerson.BusinessEntityAddress.AddressId.GetFrom(transferObject), AddressTypeId = SPerson.BusinessEntityAddress.AddressTypeId.GetFrom(transferObject), Rowguid = SPerson.BusinessEntityAddress.Rowguid.GetFrom(transferObject), ModifiedDate = SPerson.BusinessEntityAddress.ModifiedDate.GetFrom(transferObject), };\r\n}\r\n```\r\n2. Use Microsoft.CodeAnalysis.AdhocWorkspace, set `CSharpFormattingOptions.NewLineForMembersInObjectInit` as true:\r\n\r\n```C#\r\nusing (var workspace = new AdhocWorkspace())\r\n {\r\n     OptionSet options = workspace.Options;\r\n     options = options.WithChangedOption(CSharpFormattingOptions.NewLineForMembersInObjectInit, true);\r\n...\r\n}\r\n```\r\n3. Use Microsoft.CodeAnalysis.Formatting.Formatter with AdhocWorkspace workspace and OptionSet options for p.2:\r\n```C#\r\nSyntaxNode formatted = Formatter.Format(content, workspace, options);\r\n```\r\n\r\n**Expected Behavior**:\r\nFormatter will wrap line because of CSharpFormattingOptions.NewLineForMembersInObjectInit:\r\n```C#\r\npublic BusinessEntityAddressEntity Parse(SerializedTransferObject transferObject)\r\n{\r\n    return new BusinessEntityAddressEntity\r\n    {\r\n        BusinessEntityId = SPerson.BusinessEntityAddress.BusinessEntityId.GetFrom(transferObject),\r\n        AddressId = SPerson.BusinessEntityAddress.AddressId.GetFrom(transferObject),\r\n        AddressTypeId = SPerson.BusinessEntityAddress.AddressTypeId.GetFrom(transferObject),\r\n        Rowguid = SPerson.BusinessEntityAddress.Rowguid.GetFrom(transferObject),\r\n        ModifiedDate = SPerson.BusinessEntityAddress.ModifiedDate.GetFrom(transferObject),\r\n    };\r\n}\r\n```\r\n\r\n\r\n**Actual Behavior**:\r\nObject initialize in one line\r\n```C#\r\npublic BusinessEntityAddressEntity Parse(SerializedTransferObject transferObject)\r\n{\r\n            return new BusinessEntityAddressEntity { BusinessEntityId = SPerson.BusinessEntityAddress.BusinessEntityId.GetFrom(transferObject), AddressId = SPerson.BusinessEntityAddress.AddressId.GetFrom(transferObject), AddressTypeId = SPerson.BusinessEntityAddress.AddressTypeId.GetFrom(transferObject), Rowguid = SPerson.BusinessEntityAddress.Rowguid.GetFrom(transferObject), ModifiedDate = SPerson.BusinessEntityAddress.ModifiedDate.GetFrom(transferObject), };\r\n}\r\n```\r\n\r\nP.S. Full code for step 2 and 3 you can find here:\r\nhttps://github.com/InRedikaWB/Fluda/blob/master/Fluda.CodeGeneration/CodeGeneration/FilesGenerator.cs#L69-L83","Url":"https://github.com/dotnet/roslyn/issues/39837","RelatedDescription":"Open issue \"Microsoft.CodeAnalysis.Formatting.Formatter don't use NewLineForMembersInObjectInit option\" (#39837)"},{"Id":"523224121","IsPullRequest":true,"CreatedAt":"2019-11-15T03:01:48","Actor":"tmat","Number":"39836","RawContent":null,"Title":"EnC: Fix document out-of-sync checks when module is not loaded when d…","State":"open","Body":"…ebugging session starts\r\n\r\nPrevious change https://github.com/dotnet/roslyn/pull/39295 allowed us to rely on PDB source file checksums when distinguishing between design-time-only documents that should be ignored when applying changes and documents whose changes must be applied to the debuggee. The change did not handle the case when the PDB isn't loaded yet when this check is being performed. This bug resulted in changes not being applied correctly and documents getting out-of-sync in scenarios where the modules were not loaded to the debuggee fast enough.\r\n\r\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1013242","Url":"https://github.com/dotnet/roslyn/pull/39836","RelatedDescription":"Open PR \"EnC: Fix document out-of-sync checks when module is not loaded when d…\" (#39836)"},{"Id":"523175442","IsPullRequest":true,"CreatedAt":"2019-11-15T01:31:45","Actor":"dotnet-bot","Number":"39835","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39835","RelatedDescription":"Closed or merged PR \"Merge master to features/local-function-attributes\" (#39835)"},{"Id":"523134660","IsPullRequest":false,"CreatedAt":"2019-11-14T22:14:02","Actor":"vsfeedback","Number":"39833","RawContent":null,"Title":"Refactor: Rename does not rename entries in GlobalSuppresssion file","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/671046/refactor-rename-does-not-rename-entries-in-globals.html)._\n\n---\nWhen using Analyzers and you have opted to suppress errors via the GlobalSuppressions.cs file and you then perform a rename on a file that has been referenced in that file it is not updated. This results in all the suppressed errors returning. You then have to either reapply the suppression (which will cause duplicates) or manually edit the file with the correct names.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/1/2019, 04:01 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 8/1/2019, 00:15 PM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39833","RelatedDescription":"Open issue \"Refactor: Rename does not rename entries in GlobalSuppresssion file\" (#39833)"},{"Id":"523120820","IsPullRequest":false,"CreatedAt":"2019-11-14T21:42:19","Actor":"vsfeedback","Number":"39832","RawContent":null,"Title":"'variable assigned is never used' indication is incorrect","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/656306/variable-assigned-is-never-used-indication-is-inco.html)._\n\n---\nSee below example code. The code is arguable silly, but it does compile and run, and was foudn in the 'wild'. Visual studio highlights the line:\n\nint timeoutMins = 20;\n\n... as having a redundant assignment, but the value of 20 **is** passed in, and is also returned by the output parameter of Foo().\n\nI expect VS has spotted that the assignment to timeoutMins  is followed by it being passed as an output argument, but it's also being passed an an input argument!\n\n```\n        static void Main(string[] args)\n        {\n            Console.WriteLine(&quot;Hello World!&quot;);\n\nint timeoutMins = 20;\n            Foo(out timeoutMins, timeoutMins);\n\nConsole.WriteLine($&quot;Foo() result: timeoutMins = {timeoutMins}&quot;);\n        }\n\nstatic void Foo(out int timeoutMins, int timeoutMinsDefault)\n        {\n            timeoutMins  = timeoutMinsDefault;\n            Console.WriteLine($&quot;Foo() internal state: timeoutMins = {timeoutMins}&quot;);\n        }\n```\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 7/23/2019, 02:25 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 7/23/2019, 11:15 AM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n#### Gustav Frisholm on 8/29/2019, 07:20 AM: \n\nI have the same issue. VS reports string is not used when it is in fact set in the constructor:<br>\n#### Gustav Frisholm on 8/29/2019, 07:20 AM: \n\n        private string _identityUrl;<br><br>        public OutOfNetworkMargincallController(RelayContext context, IOptions optionsAccessor)<br>        {<br>            this.context = context;<br>            _options = optionsAccessor.Value;<br>            ampApi = new AmpApi(_options.EnvironmentUrl);<br>            _identityUrl = _options.EnvironmentUrl + \"/identity/oauth2/token\";<br>        }\n#### Dean Jackson on 10/17/2019, 09:03 AM: \n\n<p>Confirmed using VS 16.3.3.  I pasted the code provided in the original post at the top, into my program.cs file of a new console project, and yes, the light-bulb tells you that this line: </p><p>int timeoutMins = 20;</p><p>is an \"Unnecessary assignment\", which is not correct.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39832","RelatedDescription":"Open issue \"'variable assigned is never used' indication is incorrect\" (#39832)"},{"Id":"523042611","IsPullRequest":true,"CreatedAt":"2019-11-14T21:01:17","Actor":"333fred","Number":"39829","RawContent":null,"Title":"Remove capturing lambdas from the language parser.","State":"closed","Body":"While working on function pointers parsing, I noticed a few lambdas in the LanguageParser that cannot be cached because they're not making use the parser passed as a parameter. This is a small update to make them use the parameter and cacheable instead. @dotnet/roslyn-compiler for a very quick review.","Url":"https://github.com/dotnet/roslyn/pull/39829","RelatedDescription":"Closed or merged PR \"Remove capturing lambdas from the language parser.\" (#39829)"},{"Id":"523083603","IsPullRequest":false,"CreatedAt":"2019-11-14T20:20:45","Actor":"alrz","Number":"39831","RawContent":null,"Title":"Tuple element nullability state doesn't flow after null check","State":"open","Body":"**Version Used**: master (https://github.com/dotnet/roslyn/commit/89b4f60648fadeebdd53088fe8391bf9197bba7b)\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\n#nullable enable\r\npublic static class Program {\r\n    public static void M(IEnumerable<(object?, object? Nullable)> items) {\r\n        var list = new List<(object?, object NonNullable)>();\r\n        foreach(var item in items) {\r\n            if (item.Nullable is null)\r\n                return;\r\n            list.Add(item); // warns (none expected)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**: no warning at `list.Add(item)`\r\n\r\n**Actual Behavior**: warns about mismatched nullability \r\n","Url":"https://github.com/dotnet/roslyn/issues/39831","RelatedDescription":"Open issue \"Tuple element nullability state doesn't flow after null check\" (#39831)"},{"Id":"523070916","IsPullRequest":true,"CreatedAt":"2019-11-14T19:54:24","Actor":"RikkiGibson","Number":"39830","RawContent":null,"Title":"Follow-up to \"Local function attributes emit\"","State":"open","Body":"Follow up to #39226\r\n\r\nI merged before all of @AlekseyTs's comments were addressed. This PR is meant to address those comments.\r\n\r\nI think emitting local function type parameters is actually working at least in some scenarios:\r\nhttps://github.com/dotnet/roslyn/blob/6af59607ed36afae9a2969b2063d3f20d68d9fb0/src/Compilers/CSharp/Test/Emit/CodeGen/CodeGenLocalFunctionTests.cs#L5212\r\n\r\nI'll take another look over the tests and try to remember where I thought the gap was.","Url":"https://github.com/dotnet/roslyn/pull/39830","RelatedDescription":"Open PR \"Follow-up to \"Local function attributes emit\"\" (#39830)"},{"Id":"523037143","IsPullRequest":false,"CreatedAt":"2019-11-14T18:43:48","Actor":"vsfeedback","Number":"39828","RawContent":null,"Title":"Trailling commas in object/list initializers and enums in C #","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/819413/trailling-commas-in-objectlist-initializers-and-en.html)._\n\n---\nIt would be nice if IDE could be set up to remind to add trailing commas to object and list initializers and enums (and wherever else possible), so that subsequent changes that would add items to the existing lists wouldn't have to touch the existing lines making diffs cleaner.\n\nI.e. for a code like:\n```C#\nenum Something\n{\n    One,\n    Two\n}\n```\nit would be nice to have an optional suggestion to add a comma after `Two`. So that when a `Three` is added to a list, the diff would highlight only one line (since the line with `Two` would not be touched).\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/13/2019, 11:22 PM: \n\nThank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.","Url":"https://github.com/dotnet/roslyn/issues/39828","RelatedDescription":"Open issue \"Trailling commas in object/list initializers and enums in C #\" (#39828)"},{"Id":"523036749","IsPullRequest":false,"CreatedAt":"2019-11-14T18:42:58","Actor":"vsfeedback","Number":"39827","RawContent":null,"Title":"Add option to default all analyzer rules to a specific severity","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/819126/add-option-to-default-all-analyzer-rules-to-a-spec.html)._\n\n---\nIt would be nice for the purpose of organization and control if all analyzers could be defaulted to a severity.\n\nOne could then default all rules to 'None' and then opt-in on all rules they care about.\n\nThe current pattern can be hard to track since rules have a variety of defaults, some of which a user might agree with or not.\n\nThis provides a clear way to do both opt-in and opt-out patterns for analyzers.\n\nPossibly it would be good if this was on a per analyzer namespace basis.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/13/2019, 11:22 PM: \n\nThank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.","Url":"https://github.com/dotnet/roslyn/issues/39827","RelatedDescription":"Open issue \"Add option to default all analyzer rules to a specific severity\" (#39827)"},{"Id":"523036319","IsPullRequest":false,"CreatedAt":"2019-11-14T18:42:05","Actor":"vsfeedback","Number":"39826","RawContent":null,"Title":"Visual Studio not correctly highlight selected ITEMS in subWindows rows","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/818570/visual-studio-not-properly-highlight-selected-item.html)._\n\n---\n<p>Visual Studio 16.3.9, C# 7.3, net 4.8.03761</p><p>For example, need to debug my &quot;Sort&quot; method:</p><pre>static void Main(String[] args)\n{\n   void Sort(Int32[] array, Comparison&lt;Int32&gt; sortComparison)\n   {\n      if (sortComparison == null || array.Length &lt; 2)\n         return;\n      for (Int32 litIndex = 0; litIndex &lt; array.Length - 1; litIndex++)\n      {\n         for (Int32 curIndex = litIndex + 1; curIndex &lt; array.Length; curIndex++)\n/*brakePoint:*/ if (sortComparison(array[curIndex], array[litIndex]) &lt; 0)\n                {\n                   Array.Copy(array, litIndex\n                            , array, litIndex + 1\n                            , curIndex - litIndex);\n                }\n      }\n   }\n//Source Data:\n   Int32[] sourceArray = { 1, 5, 7, 3, 4, 9 };\n   Comparison&lt;Int32&gt; numSortComparison = (num1, num2) =&gt; num1.CompareTo(num2);\n   Sort(sourceArray, numSortComparison);\n}\n\n</pre><p>1. I set brakepoint (see above) and press F5.</p><p>2. Then, in subWindow &quot;local Variables&quot;, I select &quot;array[0]&quot; and &quot;array[1]&quot; (and that subWindow &quot;local variables&quot; highlight right rows).</p><p>3. Then I press &quot;F10&quot;...</p><p>BUT!!! subWindow &quot;local variables&quot; highlight other two rows: &quot;array&quot; and &quot;array[0]&quot;!!!!!</p><p>But I Want to see highlighted that rows in subWindow, that I selected!!! == problem!!!!</p><p>Summary: subWindows highlight rows by top-order, but need highlight user selected rows!!!</p><p><a href=\"https://developercommunity.visualstudio.com/storage/attachments/104544-1st-step-before-sortcomparison-line.png\"> Image:104544-1st-step-before-sortcomparison-line.png</a></p><p><a href=\"https://developercommunity.visualstudio.com/storage/attachments/104545-2nd-step-after-sortcomparison-line.png\"> Image:104545-2nd-step-after-sortcomparison-line.png</a></p>\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/13/2019, 11:22 PM: \n\nThank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.","Url":"https://github.com/dotnet/roslyn/issues/39826","RelatedDescription":"Open issue \"Visual Studio not correctly highlight selected ITEMS in subWindows rows\" (#39826)"},{"Id":"523035753","IsPullRequest":false,"CreatedAt":"2019-11-14T18:40:49","Actor":"vsfeedback","Number":"39825","RawContent":null,"Title":"interpolated strings for ILogger","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/818361/interpolated-strings-for-ilogger.html)._\n\n---\n<p>The ILogger methods allow to use format strings and parameters. The current methods are error prone because the format strings do not behave like string. Format(). The order of the parameters is important. This is causing confusion and errors in our code.</p> <p>logger. LogWarning(&quot;Hello {1},{0}&quot;, 0, 1) produces &quot;Hello 0,1&quot; while &quot;Hello 1,0&quot; is expected.</p> <p>The best way to solve the confusion is to create overloads for interpolated strings as use in . FromSqlInterpolated. The implementation could do late string building as with the current format strings.</p> <p>So allow logger. LogWarning($&quot;Hello {one}, {zero}&quot;) where one and zero are variables.</p>\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/13/2019, 11:21 PM: \n\nThank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.","Url":"https://github.com/dotnet/roslyn/issues/39825","RelatedDescription":"Open issue \"interpolated strings for ILogger\" (#39825)"},{"Id":"523035519","IsPullRequest":false,"CreatedAt":"2019-11-14T18:40:15","Actor":"vsfeedback","Number":"39824","RawContent":null,"Title":"Custom sorting for \"usings\" (C#) and \"Imports\" (VB.NET)","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/815148/custom-sorting-for-usings-c-and-imports-vbnet.html)._\n\n---\nI know it sounds totally finicking, but I would love if the &quot;sort usings (resp. Imports) and remove unused namespace&quot; command could be complemented with a custom sort logic as I have a more sophisticated algorithm than &quot;alphabetical with System first&quot;:\n\nIn our project we sort &quot;`System.*`&quot; first, &quot;`Microsoft.*`&quot; second, all NuGet-imports third, our own namespace last, within each section alphabetical. In another one we do it similair but within each section according to the length of the imports.\n\nSo my request is for a custom sorting option in C# and VB.NET (maybe other languages as well) where one can browse the file system for an assembly that contains a class that implements IComparer&lt;String&gt; with the sort logic. Either one has to specify the fully qualified class name of the comparer after selecting the assembly, or the UI fills a list with all the IComparer&lt;String&gt; - implementations it found in the assembly and lets us select it. From then on usings/Imports are sorted according to the custom sort logic.\n\nAs an additional request I would like to be able to specify the (absolute or relative) path to the assembly and the fully qualified class name of the comparer also in the &quot;.editorconfig&quot; file to enforce all people working on the project to use the same sort algorithm.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/11/2019, 11:24 PM: \n\nThank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.","Url":"https://github.com/dotnet/roslyn/issues/39824","RelatedDescription":"Open issue \"Custom sorting for \"usings\" (C#) and \"Imports\" (VB.NET)\" (#39824)"},{"Id":"523033130","IsPullRequest":false,"CreatedAt":"2019-11-14T18:35:12","Actor":"vsfeedback","Number":"39823","RawContent":null,"Title":"Declare variables in input parameters","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/811508/declare-variables-in-input-parameters.html)._\n\n---\nI like the way the tryparse function is declared and used.\n\nI wish I could do something similar in other method calls.\n\nInstead of something like this:\n\n            var form = new Form();\n            _surveyToFormAdapter.Adapt( survey, form );\n\nI wish I could call a method while also declaring the variable, something like:\n\n            _surveyToFormAdapter.Adapt( survey, var form = new Form() );\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/8/2019, 02:06 AM: \n\n4. Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.","Url":"https://github.com/dotnet/roslyn/issues/39823","RelatedDescription":"Open issue \"Declare variables in input parameters\" (#39823)"},{"Id":"523032277","IsPullRequest":false,"CreatedAt":"2019-11-14T18:33:32","Actor":"vsfeedback","Number":"39822","RawContent":null,"Title":"Filters in CodeLens results for references","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/802616/filters-in-codelens-results-for-references.html)._\n\n---\n<p>Ability to filter list of references. The existing collapse all, refresh, and dock options are great, but in a large code base, the ability to also filter is necessary. <br><br>For example, I am currently working in a project that has multiple interfaces, and these interfaces are implemented by many classes, CodeLens is great to see all references, but it is still really hard and time consuming to find what I'm looking for. <br><br>Below is an example of CodeLens telling me that there are 99+ references for this interface method, imagine being able to filter and group these results. It could be a feature that only works when you dock the CodeLens results, and that would be fine. <br></p><p><a href=\"https://developercommunityapi.westus.cloudapp.azure.com/storage/attachments/101874-codelens.png\"> Image:101874-codelens.png</a></p>\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/1/2019, 00:21 AM: \n\nThank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.","Url":"https://github.com/dotnet/roslyn/issues/39822","RelatedDescription":"Open issue \"Filters in CodeLens results for references\" (#39822)"},{"Id":"523025625","IsPullRequest":false,"CreatedAt":"2019-11-14T18:19:13","Actor":"vsfeedback","Number":"39821","RawContent":null,"Title":"Add build warning if component does not have Parameter defined","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/714309/add-build-warning-if-component-does-not-have-param.html)._\n\n---\nI am refactoring a few of my components, changing Parameter names, etc.  When the Parameter name on a component does not exist, it would be nice to get a compile warning or error\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/28/2019, 01:04 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39821","RelatedDescription":"Open issue \"Add build warning if component does not have Parameter defined\" (#39821)"},{"Id":"523022703","IsPullRequest":false,"CreatedAt":"2019-11-14T18:12:38","Actor":"vsfeedback","Number":"39820","RawContent":null,"Title":"Incorrect suggestion from code helper (Inline temporary variable)","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/792359/incorrect-suggestion-from-code-helper.html)._\r\n\r\n---\r\nSee screenshot.\r\n\r\nThe suggested code ignores the `out` keyword in the method signature, incorrectly suggesting null in place of the variable in future calls.\r\n\r\n![100575-screenshot-3](https://user-images.githubusercontent.com/10605811/68884153-6c181e80-06c7-11ea-8884-24f54a64f568.png)\r\n\r\n---\r\n### Original Comments\r\n\r\n#### david.c.day on 10/24/2019, 03:14 AM: \r\n\r\n(private comment, text removed)\r\n#### Visual Studio Feedback System on 10/25/2019, 00:11 AM: \r\n\r\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\n#### Visual Studio Feedback System on 10/31/2019, 03:47 PM: \r\n\r\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\r\n\r\n\r\n---\r\n### Original Solutions\r\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39820","RelatedDescription":"Open issue \"Incorrect suggestion from code helper (Inline temporary variable)\" (#39820)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"523136354","IsPullRequest":true,"CreatedAt":"2019-11-15T00:35:44","Actor":"Dotnet-GitSync-Bot","Number":"7883","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @elinor-fung @john-h-k @manandre @tannergooding @carlossanlop","Url":"https://github.com/dotnet/corert/pull/7883","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7883)"},{"Id":"522914006","IsPullRequest":false,"CreatedAt":"2019-11-14T15:00:12","Actor":"AArnott","Number":"7882","RawContent":null,"Title":"UWP .NET Native compilation fails when nutc_driver.exe returns exit code -2147483645","State":"open","Body":"**Repro steps**\r\n\r\n1. Create a new UWP Test project in VS 2019\r\n1. Switch to the Release|x86 solution configuration\r\n1. Build (which succeeds, but with many warnings about a missing assembly)\r\n1. Install the `System.Xml.XPath.XmlDocument` package. Build again. No warnings this time. ❓ Why is this package necessary in the default proejct yet somehow not included in the default project?\r\n1. Set the `AllowUnsafeBlocks=true` msbuild property.\r\n1. Add this method to the UWP test project (or any dependency project/package):\r\n\r\n    ```cs\r\n        private static IntPtr GetAddress(object value)\r\n        {\r\n            unsafe\r\n            {\r\n                TypedReference tr = __makeref(value);\r\n                return **(IntPtr**)(&tr);\r\n            }\r\n        }\r\n    ```\r\n\r\n1. Build again.\r\n\r\n**Expected**\r\n\r\nBuild succeeds.\r\n\r\n**Actual**\r\n\r\nBuild fails with:\r\n\r\n> C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.2.7-rel-27913-00\\tools\\Microsoft.NetNative.targets(801,5): error : ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.7-rel-27913-00\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"D:\\Users\\andarno\\source\\repos\\UWPUnitTestProject2\\UWPUnitTestProject2\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\UWPUnitTestProject2.rsp\"' returned exit code -2147483645\r\n\r\n\r\nFull log follows\r\n\r\n```\r\n1>------ Build started: Project: UWPUnitTestProject2, Configuration: Release x86 ------\r\n1>  UWPUnitTestProject2 -> D:\\Users\\andarno\\source\\repos\\UWPUnitTestProject2\\UWPUnitTestProject2\\bin\\x86\\Release\\UWPUnitTestProject2.exe\r\n1>  Processing application code\r\n1>  Computing application closure and generating interop code\r\n1>    Loading 139 modules...\r\n1>    Generating code...\r\n1>    Interop code generated.\r\n1>  Generating serialization code\r\n1>  Compiling interop code\r\n1>  Generating System.Reflection.DispatchProxy proxy code.\r\n1>  Cleaning up unreferenced code\r\n1>  Generating native code\r\n1>C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.2.7-rel-27913-00\\tools\\Microsoft.NetNative.targets(801,5): error : ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.7-rel-27913-00\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"D:\\Users\\andarno\\source\\repos\\UWPUnitTestProject2\\UWPUnitTestProject2\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\UWPUnitTestProject2.rsp\"' returned exit code -2147483645\r\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```","Url":"https://github.com/dotnet/corert/issues/7882","RelatedDescription":"Open issue \"UWP .NET Native compilation fails when nutc_driver.exe returns exit code -2147483645\" (#7882)"},{"Id":"522521151","IsPullRequest":true,"CreatedAt":"2019-11-14T02:41:52","Actor":"jkotas","Number":"7881","RawContent":null,"Title":"Delete dead files","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7881","RelatedDescription":"Closed or merged PR \"Delete dead files\" (#7881)"},{"Id":"522441624","IsPullRequest":false,"CreatedAt":"2019-11-13T20:02:05","Actor":"Shadow4walker","Number":"7880","RawContent":null,"Title":"HttpWebRequest/HttpWebResponse Not Working!","State":"open","Body":"HttpWebRequest request= with Headers ....etc\r\nvar httpWebResponse = (HttpWebResponse) await request.GetResponseAsync()\r\nnever passed this code >fail fast!! idk what to put in the rd.xml or if event i should put anything there!","Url":"https://github.com/dotnet/corert/issues/7880","RelatedDescription":"Open issue \"HttpWebRequest/HttpWebResponse Not Working!\" (#7880)"},{"Id":"518910070","IsPullRequest":true,"CreatedAt":"2019-11-12T22:51:55","Actor":"cshung","Number":"7869","RawContent":null,"Title":"Adding signature matching unit test","State":"closed","Body":"This unit test is meant to validate https://github.com/dotnet/coreclr/pull/27676 \r\n\r\n@dotnet/crossgen-contrib ","Url":"https://github.com/dotnet/corert/pull/7869","RelatedDescription":"Closed or merged PR \"Adding signature matching unit test\" (#7869)"},{"Id":"521355526","IsPullRequest":true,"CreatedAt":"2019-11-12T08:01:33","Actor":"Dotnet-GitSync-Bot","Number":"7879","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @ts2do @elinor-fung","Url":"https://github.com/dotnet/corert/pull/7879","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7879)"},{"Id":"521113889","IsPullRequest":true,"CreatedAt":"2019-11-12T06:24:24","Actor":"Dotnet-GitSync-Bot","Number":"7878","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7878","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7878)"},{"Id":"520572011","IsPullRequest":true,"CreatedAt":"2019-11-10T14:20:44","Actor":"jkotas","Number":"7877","RawContent":null,"Title":"Update dependencies","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7877","RelatedDescription":"Closed or merged PR \"Update dependencies\" (#7877)"},{"Id":"520423064","IsPullRequest":true,"CreatedAt":"2019-11-09T19:45:59","Actor":"Dotnet-GitSync-Bot","Number":"7876","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jnm2 @rob313663 @CoffeeFlux","Url":"https://github.com/dotnet/corert/pull/7876","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7876)"},{"Id":"520311915","IsPullRequest":true,"CreatedAt":"2019-11-09T13:00:37","Actor":"Dotnet-GitSync-Bot","Number":"7875","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7875","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7875)"},{"Id":"520020083","IsPullRequest":true,"CreatedAt":"2019-11-08T19:44:36","Actor":"jkotas","Number":"7874","RawContent":null,"Title":"Port CoreCLR change","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7874","RelatedDescription":"Closed or merged PR \"Port CoreCLR change\" (#7874)"},{"Id":"519847099","IsPullRequest":true,"CreatedAt":"2019-11-08T13:36:23","Actor":"Dotnet-GitSync-Bot","Number":"7873","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @TamarChristinaArm @tannergooding @CoffeeFlux @carlossanlop","Url":"https://github.com/dotnet/corert/pull/7873","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7873)"},{"Id":"519029005","IsPullRequest":true,"CreatedAt":"2019-11-08T06:54:52","Actor":"Dotnet-GitSync-Bot","Number":"7870","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @carlossanlop","Url":"https://github.com/dotnet/corert/pull/7870","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7870)"},{"Id":"519547667","IsPullRequest":true,"CreatedAt":"2019-11-08T06:54:33","Actor":"yowl","Number":"7872","RawContent":null,"Title":"Wasm: Fix compilation error for `build wasm`","State":"closed","Body":"`build wasm` was failing as mentioned at https://github.com/dotnet/corert/pull/7609#issuecomment-527250119.  Extend the `#if` to include `_WASM_` which allows compilation to succeed.","Url":"https://github.com/dotnet/corert/pull/7872","RelatedDescription":"Closed or merged PR \"Wasm: Fix compilation error for `build wasm`\" (#7872)"},{"Id":"519466012","IsPullRequest":false,"CreatedAt":"2019-11-07T19:28:54","Actor":"erherhh4herh","Number":"7871","RawContent":null,"Title":"build.cmd Setting build variables failed.","State":"open","Body":"Whenever I execute build.cmd from \"x64 Native Tools Command Prompt for VS 2017\" I get this message:\r\n\r\nChecking pre-requisites...\r\n\r\nThe system cannot find the batch label specified - CheckMSBuild\r\nSetting build variables failed.\r\n\r\nIf it makes any difference, I clone the repo using `git clone --recursive https://github.com/dotnet/corert.git`.\r\n\r\nI have cmake-3.16.0-rc3 installed, I am on windows 10 pro x64 1903, using visual studio 2017.\r\n\r\nAny help is greatly appreciated,\r\nerherhh4herh.","Url":"https://github.com/dotnet/corert/issues/7871","RelatedDescription":"Open issue \"build.cmd Setting build variables failed.\" (#7871)"},{"Id":"518713147","IsPullRequest":true,"CreatedAt":"2019-11-07T04:02:17","Actor":"Dotnet-GitSync-Bot","Number":"7868","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @elinor-fung","Url":"https://github.com/dotnet/corert/pull/7868","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7868)"},{"Id":"518273496","IsPullRequest":true,"CreatedAt":"2019-11-06T14:36:00","Actor":"Dotnet-GitSync-Bot","Number":"7867","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7867","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7867)"},{"Id":"517973637","IsPullRequest":true,"CreatedAt":"2019-11-05T21:39:36","Actor":"Dotnet-GitSync-Bot","Number":"7866","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @JesperTreetop","Url":"https://github.com/dotnet/corert/pull/7866","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7866)"},{"Id":"517276028","IsPullRequest":true,"CreatedAt":"2019-11-05T19:15:32","Actor":"Dotnet-GitSync-Bot","Number":"7865","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @TamarChristinaArm","Url":"https://github.com/dotnet/corert/pull/7865","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7865)"},{"Id":"516882257","IsPullRequest":true,"CreatedAt":"2019-11-03T22:07:03","Actor":"Dotnet-GitSync-Bot","Number":"7864","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corert/pull/7864","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7864)"},{"Id":"516869037","IsPullRequest":true,"CreatedAt":"2019-11-03T20:14:49","Actor":"Dotnet-GitSync-Bot","Number":"7863","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7863","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7863)"},{"Id":"516829077","IsPullRequest":true,"CreatedAt":"2019-11-03T18:21:29","Actor":"Dotnet-GitSync-Bot","Number":"7862","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7862","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7862)"},{"Id":"516781561","IsPullRequest":false,"CreatedAt":"2019-11-03T14:35:21","Actor":"josephmoresena","Number":"7860","RawContent":null,"Title":"Error compilling console app with System.Data.SqlClient on Linux","State":"closed","Body":"I'm getting the following error when I'm trying to compile a simple console app which connects to a Sql Server database in Ubuntu 19.10.\r\n\r\n`  /usr/bin/ld: obj/Debug/netcoreapp3.0/linux-x64/native/Proj.o: in function `System_Data_SqlClient_Interop_NetSecurityNative__ImportPrincipalName':\r\n  /__w/1/s/src/System.Data.Common/src/System/Data/Common/BooleanStorage.cs:180: undefined reference to `NetSecurityNative_ImportPrincipalName'\r\n  /usr/bin/ld: obj/Debug/netcoreapp3.0/linux-x64/native/Proj.o: in function `System_Data_SqlClient_Interop_NetSecurityNative__InitSecContext_0':\r\n  /__w/1/s/src/System.Data.Common/src/System/Data/Common/ByteStorage.cs:162: undefined reference to `NetSecurityNative_InitSecContextEx'`","Url":"https://github.com/dotnet/corert/issues/7860","RelatedDescription":"Closed issue \"Error compilling console app with System.Data.SqlClient on Linux\" (#7860)"},{"Id":"516817732","IsPullRequest":true,"CreatedAt":"2019-11-03T13:34:02","Actor":"Dotnet-GitSync-Bot","Number":"7861","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7861","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7861)"},{"Id":"516763323","IsPullRequest":true,"CreatedAt":"2019-11-03T00:42:36","Actor":"Dotnet-GitSync-Bot","Number":"7859","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7859","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7859)"},{"Id":"516597160","IsPullRequest":true,"CreatedAt":"2019-11-02T14:00:46","Actor":"Dotnet-GitSync-Bot","Number":"7858","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7858","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7858)"},{"Id":"515535621","IsPullRequest":true,"CreatedAt":"2019-11-01T00:19:13","Actor":"MichalStrehovsky","Number":"7855","RawContent":null,"Title":"Disable multithreaded compilation","State":"closed","Body":"I won't have time to look into the race condition anytime soon. Fingers crossed that crossgen2 hits it in CoreCLR repo and there will be paid time available to investigate.","Url":"https://github.com/dotnet/corert/pull/7855","RelatedDescription":"Closed or merged PR \"Disable multithreaded compilation\" (#7855)"},{"Id":"515738596","IsPullRequest":true,"CreatedAt":"2019-11-01T00:19:00","Actor":"Dotnet-GitSync-Bot","Number":"7857","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7857","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7857)"},{"Id":"515578359","IsPullRequest":true,"CreatedAt":"2019-10-31T20:49:12","Actor":"Dotnet-GitSync-Bot","Number":"7856","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @benaadams","Url":"https://github.com/dotnet/corert/pull/7856","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7856)"},{"Id":"515147260","IsPullRequest":true,"CreatedAt":"2019-10-31T16:26:56","Actor":"Dotnet-GitSync-Bot","Number":"7854","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @echesakovMSFT @stephentoub","Url":"https://github.com/dotnet/corert/pull/7854","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7854)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"523676022","IsPullRequest":true,"CreatedAt":"2019-11-16T03:47:18","Actor":"dotnet-maestro[bot]","Number":"3919","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191115.2\r\n- **Date Produced**: 11/15/2019 5:59 PM\r\n- **Commit**: 65f04fb6db7a5e198d05dbebd5c4ad21eb018f89\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3919","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3919)"},{"Id":"523739199","IsPullRequest":false,"CreatedAt":"2019-11-15T23:12:25","Actor":"TheBuzzSaw","Number":"3920","RawContent":null,"Title":"Does /p:OutputType=WinExe propagate to dependencies?","State":"open","Body":"I am attempting to build a project with overridden properties.\r\n\r\n    dotnet publish MyProject.csproj -f netcoreapp3.0 -c Release -r win-x86 /p:CopyOutputSymbolsToPublishDirectory=false /p:OutputType=WinExe\r\n\r\nHowever, it results in a build error in a classlib dependency.\r\n\r\n    error CS5001: Program does not contain a static 'Main' method suitable for an entry point\r\n\r\nI can only assume that the `/p:OutputType=WinExe` is propagating down and overriding their properties too. Is there way to stop that? Can I have that override only apply to the target project?\r\n\r\nOddly enough, if I build without `/p:OutputType=WinExe` and then immediately build _with_ `/p:OutputType=WinExe`, it succeeds. (The dependencies are built and cached, I guess.)","Url":"https://github.com/dotnet/sdk/issues/3920","RelatedDescription":"Open issue \"Does /p:OutputType=WinExe propagate to dependencies?\" (#3920)"},{"Id":"523657342","IsPullRequest":false,"CreatedAt":"2019-11-15T19:52:06","Actor":"jhudsoncedaron","Number":"3918","RawContent":null,"Title":"ProjectReference Update=\"\" doesn't actually work","State":"open","Body":"We have a DLL that contains downgrade instructions, so despite being built in the project containing the latest version, it must inherently be loadable on the oldest version we ever shipped. In order to do so, we used PackageReference Update= to pin reference of dlls when building that version.\r\n\r\nUnfortunately this doesn't really work for some reason we don't know. The Update= version force is ignored and the higher version in the dependent dll is used instead. This actually causes the dynamic load to fail whenever we need to update the packages. For some reason, despite the same artifact being present in the dll refrenced by PackageVersion, the dynamic load succeeds there (or we would have noticed the very first time we tried this).\r\n\r\nDon't let netstandard2.0 fool you; we are building with the 3.0 toolchain and the executable (omitted from the sample) is linked against netcoreapp3.0. You can check the dependencies of DynamicLoaded.dll with ildasm. It should reference Demo.dll version 1.0.0 but it references Demo.dll version 2.0.0\r\n\r\nThe real If.dll is not an interface-only dll. It contains quite a bit of code for upgrade and downgrade, and the current version of If.dll used during upgrade can't function with the older version of Demo.dll.\r\n\r\nThis issue is newly discovered a few days ago, thankfully not by a customer.\r\n\r\n[downgradedemo.zip](https://github.com/dotnet/sdk/files/3852941/downgradedemo.zip)\r\n","Url":"https://github.com/dotnet/sdk/issues/3918","RelatedDescription":"Open issue \"ProjectReference Update=\"\" doesn't actually work\" (#3918)"},{"Id":"523457322","IsPullRequest":true,"CreatedAt":"2019-11-15T15:07:05","Actor":"dotnet-maestro[bot]","Number":"3916","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191114.6\r\n- **Date Produced**: 11/15/2019 2:39 AM\r\n- **Commit**: c1cd0349f7d29cf21d93d61cdea382aecc422e36\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19564.6\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19564.6\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19564.6\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3916","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3916)"},{"Id":"523426348","IsPullRequest":true,"CreatedAt":"2019-11-15T14:11:22","Actor":"dotnet-maestro[bot]","Number":"3915","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191114.4\r\n- **Date Produced**: 11/15/2019 10:12 AM\r\n- **Commit**: bc2d90a1c6b23e4e64fc117baa531e14b9288b5a\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3915","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3915)"},{"Id":"523471105","IsPullRequest":false,"CreatedAt":"2019-11-15T13:31:04","Actor":"khellang","Number":"3917","RawContent":null,"Title":"Respect `DO_NOT_TRACK` as standardized alternative to `DOTNET_CLI_TELEMETRY_OPTOUT`","State":"open","Body":"`DO_NOT_TRACK` is a proposed unified standard for opting out of telemetry for TUI/console apps.\r\nIt would be nice if the dotnet CLI followed the same standard. See https://consoledonottrack.com/","Url":"https://github.com/dotnet/sdk/issues/3917","RelatedDescription":"Open issue \"Respect `DO_NOT_TRACK` as standardized alternative to `DOTNET_CLI_TELEMETRY_OPTOUT`\" (#3917)"},{"Id":"523282072","IsPullRequest":true,"CreatedAt":"2019-11-15T08:46:13","Actor":"dotnet-maestro[bot]","Number":"3913","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191114.3\r\n- **Date Produced**: 11/15/2019 2:30 AM\r\n- **Commit**: 62b52b1f4b75a1edaf65825f3caad8e493d2a29c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3913","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3913)"},{"Id":"523285860","IsPullRequest":false,"CreatedAt":"2019-11-15T06:41:41","Actor":"normj","Number":"3914","RawContent":null,"Title":".NET Core 3.1 SDK change in behavior of GenerateRuntimeConfigurationFiles flag breaks AWS .NET Lambda tooling","State":"open","Body":"## Background\r\n\r\nThe AWS .NET Lambda tooling explicitly sets the **GenerateRuntimeConfigurationFiles** to true flag when doing a `dotnet publish`. This was necessary because in Lambda the entry point is a netcoreapp2.1 Library but we need to make sure the runtime.config is generated with the deployment bundle even though it is library so on Lambda's side we have the correct start up parameters. In older versions of the .NET SDK it would not generate the runtime.config file if the project doing `dotnet publish` on was a library which is why we explicitly set the GenerateRuntimeConfigurationFiles to true.\r\n\r\nI have setup the [normj/ShowIssueWithGenerateRuntimeConfigurationFiles](https://github.com/normj/ShowIssueWithGenerateRuntimeConfigurationFiles) repository to show the breaking behavior without using any of the AWS tooling.\r\n\r\n## The breaking issue\r\n\r\nI have found with .NET Core 3.1 SDK installed if I have a netcoreapp2.1 project that references a netstandard2.0 project then the `dotnet publish /p:GenerateRuntimeConfigurationFiles=true` command fails with the following error.\r\n\r\n```\r\n> dotnet publish /p:GenerateRuntimeConfigurationFiles=true\r\nMicrosoft (R) Build Engine version 16.4.0-preview-19529-02+0c507a29b for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 46.82 ms for C:\\temp\\testruntimeconfig\\net31sdk\\NetCoreClassLib\\NetCoreClassLib.csproj.\r\n  Restore completed in 46.82 ms for C:\\temp\\testruntimeconfig\\net31sdk\\NetStandardLib\\NetStandardLib.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100-preview3-014645\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(255,5): error MSB4018: The \"GenerateRuntimeConfigurationFiles\" task failed unexpectedly. [C:\\temp\\testruntimeconfig\\net31sdk\\NetStandardLib\\NetStandardLib.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100-preview3-014645\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(255,5): error MSB4018: System.NullReferenceException: Object reference not set to an instance of an object. [C:\\temp\\testruntimeconfig\\net31sdk\\NetStandardLib\\NetStandardLib.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100-preview3-014645\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(255,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateRuntimeConfigurationFiles.AddFrameworks(RuntimeOptions runtimeOptions, ProjectContext projectContext) [C:\\temp\\testruntimeconfig\\net31sdk\\NetStandardLib\\NetStandardLib.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100-preview3-014645\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(255,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateRuntimeConfigurationFiles.WriteRuntimeConfig(ProjectContext projectContext) [C:\\temp\\testruntimeconfig\\net31sdk\\NetStandardLib\\NetStandardLib.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100-preview3-014645\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(255,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateRuntimeConfigurationFiles.ExecuteCore() [C:\\temp\\testruntimeconfig\\net31sdk\\NetStandardLib\\NetStandardLib.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100-preview3-014645\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(255,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [C:\\temp\\testruntimeconfig\\net31sdk\\NetStandardLib\\NetStandardLib.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100-preview3-014645\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(255,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\\temp\\testruntimeconfig\\net31sdk\\NetStandardLib\\NetStandardLib.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100-preview3-014645\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(255,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\\temp\\testruntimeconfig\\net31sdk\\NetStandardLib\\NetStandardLib.csproj]\r\n```\r\n\r\nIf I add a global.json file and force the .NET Core 3.0 SDK the command works fine.\r\n\r\n## How to reproduce\r\n\r\nOn a machine that has both .NET Core 3.0 and .NET Core 3.1 SDK's installed. \r\n\r\n* Clone the [normj/ShowIssueWithGenerateRuntimeConfigurationFiles](https://github.com/normj/ShowIssueWithGenerateRuntimeConfigurationFiles) repository\r\n* cd to ./net30sdk/NetCoreClassLib\r\n** Notice now NetCoreClassLib has a project dependency to a .NET Standard 2.0 project\r\n* Execute the command `dotnet publish /p:GenerateRuntimeConfigurationFiles=true`\r\n* The command works correctly because there is a global.json forcing .NET Core 3.0 SDK\r\n* cd ../../net30sdk/NetCoreClassLib\r\n* Execute the command `dotnet publish /p:GenerateRuntimeConfigurationFiles=true`\r\n* This time the dotnet publish fails with the error message \"error MSB4018: The \"GenerateRuntimeConfigurationFiles\" task failed unexpectedly.\"\r\n\r\n## Solutions\r\n\r\nTo ensure .NET developers who install .NET Core 3.1 either on purpose or due to updating their Visual Studio when .NET Core 3.1 goes GA we need the `dotnet publish` to not have a change in behavior with GenerateRuntimeConfigurationFiles. We could potentially change the AWS .NET Lambda tooling to no longer set the GenerateRuntimeConfigurationFiles flag when publishing as it seems current versions of the .NET Core SDK always right the runtime.config file but that won't help users that don't know to update.","Url":"https://github.com/dotnet/sdk/issues/3914","RelatedDescription":"Open issue \".NET Core 3.1 SDK change in behavior of GenerateRuntimeConfigurationFiles flag breaks AWS .NET Lambda tooling\" (#3914)"},{"Id":"523181520","IsPullRequest":true,"CreatedAt":"2019-11-15T02:31:54","Actor":"wtgodbe","Number":"3911","RawContent":null,"Title":"Update PreReleaseVersionLabel to RTM","State":"closed","Body":"Non-shipping packages should be labeled RTM for GA. We need to take this fix for 3.1 GA","Url":"https://github.com/dotnet/sdk/pull/3911","RelatedDescription":"Closed or merged PR \"Update PreReleaseVersionLabel to RTM\" (#3911)"},{"Id":"523211486","IsPullRequest":true,"CreatedAt":"2019-11-15T02:13:33","Actor":"dsplaisted","Number":"3912","RawContent":null,"Title":"Don't run _HandlePackageFileConflicts target if there are no references","State":"open","Body":"Fixes #3585","Url":"https://github.com/dotnet/sdk/pull/3912","RelatedDescription":"Open PR \"Don't run _HandlePackageFileConflicts target if there are no references\" (#3912)"},{"Id":"522842688","IsPullRequest":true,"CreatedAt":"2019-11-14T23:37:01","Actor":"dotnet-maestro[bot]","Number":"3908","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191114.2\r\n- **Date Produced**: 11/14/2019 6:17 PM\r\n- **Commit**: 44214d4d7d9091e31f57c5e6bc51180cbb0f79bf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19564.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19564.2\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19564.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3908","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3908)"},{"Id":"522515316","IsPullRequest":true,"CreatedAt":"2019-11-14T22:29:45","Actor":"nguerrera","Number":"3906","RawContent":null,"Title":"Don't double pack icon in our transport package","State":"closed","Body":"This is currently holding up sdk -> toolset code flow for 5.0/master\r\n\r\nArcade is adding an icon entry to package, then our custom targets are laying this out and then globbing and packing the layout.\r\n\r\nThe fix is to ignore the icon file from the custom layout process in our build.","Url":"https://github.com/dotnet/sdk/pull/3906","RelatedDescription":"Closed or merged PR \"Don't double pack icon in our transport package\" (#3906)"},{"Id":"521316615","IsPullRequest":true,"CreatedAt":"2019-11-14T21:49:43","Actor":"swaroop-sridhar","Number":"3892","RawContent":null,"Title":"Fix a bug in computation of files to bundle into a single file app.","State":"closed","Body":"## Issue\r\nhttps://github.com/dotnet/core-setup/issues/7794\r\n\r\n## Scenario \r\nWhen customer annotates files to be excluded from the single-file bundle,\r\nthe annotation may not be honored correctly. Moreover, certain files may\r\nbe included in duplicate leading to downstream failure.\r\n\r\n## Fix\r\nFix a copy-paste typo to fix the bug.\r\n\r\n## Risk\r\nVery low.\r\n\r\nThis fix  targets a very specific scenario, triggered by explicit annotations in the project file.\r\nOnly affects projects where the property <PublishSingleFile>true</PublishSingleFile> is set,\r\nand some content is annotated with `<ExcludeFromSingleFile>true</ExcludeFromSingleFile>`\r\n\r\n## Customer Impact\r\n\r\nExclusion from single-files is handled correctly.","Url":"https://github.com/dotnet/sdk/pull/3892","RelatedDescription":"Closed or merged PR \"Fix a bug in computation of files to bundle into a single file app.\" (#3892)"},{"Id":"522504099","IsPullRequest":true,"CreatedAt":"2019-11-14T16:12:58","Actor":"nguerrera","Number":"3905","RawContent":null,"Title":"Delete debug.log","State":"closed","Body":"Looks like an accidental commit","Url":"https://github.com/dotnet/sdk/pull/3905","RelatedDescription":"Closed or merged PR \"Delete debug.log\" (#3905)"},{"Id":"522956625","IsPullRequest":false,"CreatedAt":"2019-11-14T16:08:15","Actor":"enricoreich","Number":"3910","RawContent":null,"Title":"Installing 3.1.100-preview3-014709 via dotnet-install.ps1 fails with unknown error","State":"open","Body":"Hello,\r\n\r\nI tried to download an install the latest 3.1.100 preview (3.1.100-preview3-014709) via dotnet-install.ps1 script and the install process fails with an unknown error:\r\n\r\n```\r\n\".NET Core SDK\" with version = 3.1.100-preview3-014709 failed to install with an unknown error.\r\nAt D:\\Proggen\\DotNET\\dotnet-install.ps1:669 char:5\r\n+     throw \"`\"$assetName`\" with version = $SpecificVersion failed to i ...\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : OperationStopped: (\".NET Core SDK\" wit\\u2026h an unknown error.:String) [], RuntimeException\r\n+ FullyQualifiedErrorId : \".NET Core SDK\" with version = 3.1.100-preview3-014709 failed to install with an unknown error.\r\n```\r\n\r\nDownloading via `https://dotnetcli.azureedge.net/dotnet/Sdk/3.1.100-preview3-014709/dotnet-sdk-3.1.100-preview3-014709-win-x64.zip` and manually unpacking works but there are 3.1.0 (no preview suffix!) folders all over the place.\r\n\r\nI'm confused. Why is this package tagged as preview but has no preview folder/components in it?\r\n\r\n<details>\r\n<summary>dotnet --info</summary>\r\n\r\n```\r\nA JSON parsing exception occurred in [D:\\Proggen\\DotNET\\global.json], offset 3 (line 2, column 2): Missing a name for object member.\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha1-015730\r\n Commit:    b01c4f4d23\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-015730\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-alpha.1.19563.6\r\n  Commit:  8743c312a9\r\n\r\n.NET Core SDKs installed:\r\n  2.1.802 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.100-preview2-014569 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.100-preview3-014706 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-alpha1-015730 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0-preview2.19528.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0-preview3.19555.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-alpha1.19559.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0-preview2.19525.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0-preview3.19553.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-alpha.1.19563.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0-preview2.19525.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0-preview3.19553.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-alpha.1.19563.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n</details>","Url":"https://github.com/dotnet/sdk/issues/3910","RelatedDescription":"Open issue \"Installing 3.1.100-preview3-014709 via dotnet-install.ps1 fails with unknown error\" (#3910)"},{"Id":"522855547","IsPullRequest":true,"CreatedAt":"2019-11-14T13:23:14","Actor":"dotnet-maestro[bot]","Number":"3909","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191114.1\r\n- **Date Produced**: 11/14/2019 10:49 AM\r\n- **Commit**: c77948d92a2f950140f09384f057cb893ec3955a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.19564.1\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3909","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#3909)"},{"Id":"522729239","IsPullRequest":false,"CreatedAt":"2019-11-14T09:28:08","Actor":"daniel-harrison-cko","Number":"3907","RawContent":null,"Title":"Metapackage implicit references?","State":"open","Body":"Hey. I am really struggling to locate information about implicit references of metapackages, so I have decided to create this issue.\r\n\r\nI have a .NET Core API project with the following project file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nAnd a .NET Core Console project containing my unit tests with the following project file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NSpec\" Version=\"3.1.0\" />\r\n    <PackageReference Include=\"NSubstitute\" Version=\"4.0.0\" />\r\n    <PackageReference Include=\"Shouldly\" Version=\"3.0.2\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\..\\src\\Api\\Api.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nWhat I would like to understand is.. Why is it that the Console project does not receive the metapackage `Microsoft.AspNetCore.App` implicitly by virtue of the fact it is referencing the API project, which does?\r\n\r\nIn my Console project, I can new up an instance of a `HomeController`, but I cannot use `IActionResult`. I can only use `IActionResult` when I add the following additional references to the Console project file:\r\n```\r\n<PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.2.0\" />\r\n<PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.2.5\" />\r\n```\r\nI believe this shouldn't be necessary as these packages are already contained within the metapackage.\r\n\r\nCan anyone point me to some documentation that really explains this behaviour? Is there any such documentation? This issue here https://github.com/dotnet/sdk/issues/764 suggests not!","Url":"https://github.com/dotnet/sdk/issues/3907","RelatedDescription":"Open issue \"Metapackage implicit references?\" (#3907)"},{"Id":"522465602","IsPullRequest":false,"CreatedAt":"2019-11-13T20:51:02","Actor":"dsplaisted","Number":"3904","RawContent":null,"Title":"Conflict in publish between file from Microsoft.NET.Build.Extensions and NuGet package","State":"open","Body":"With the following project:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.1.4\" />\r\n    <PackageReference Include=\"System.Runtime.InteropServices.RuntimeInformation\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n- Make sure to delete the output folder\r\n- Publish the project and generate a .binlog (`dotnet publish -bl`)\r\n- Open .binlog in MSBuild structured log viewer\r\n\r\n**Expected:** No DoubleWrites reported\r\n\r\n**Actual:** DoubleWrites reported for System.Runtime.InteropServices.RuntimeInformation.dll\r\n\r\nThe file is being copied to the publish folder from the following two locations:\r\n\r\n- C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.interopservices.runtimeinformation\\4.3.0\\lib\\net45\\System.Runtime.InteropServices.RuntimeInformation.dll\r\n- C:\\Program Files\\dotnet\\sdk\\3.1.100-preview3-014645\\Microsoft\\Microsoft.NET.Build.Extensions\\net461\\lib\\System.Runtime.InteropServices.RuntimeInformation.dll\r\n\r\nOn publishing the second time, the DoubleWrite will likely not be reported, as the output will be considered up to date in the `_CopyResolvedFilesToPublishPreserveNewest` target.\r\n\r\nI am not sure exactly what determines which of the files wins.  However, if the wrong file is copied (and we have a [customer report where this happened](https://developercommunity.visualstudio.com/content/problem/780665/visual-studio-1635-publish-is-now-publishing-diffe.html)), then the app will fail at runtime.","Url":"https://github.com/dotnet/sdk/issues/3904","RelatedDescription":"Open issue \"Conflict in publish between file from Microsoft.NET.Build.Extensions and NuGet package\" (#3904)"},{"Id":"522221909","IsPullRequest":true,"CreatedAt":"2019-11-13T15:31:51","Actor":"dotnet-maestro[bot]","Number":"3902","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191112.8\r\n- **Date Produced**: 11/13/2019 1:22 AM\r\n- **Commit**: 6fab00563d09dca0d2b777a4f0dbda59d19c8546\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.19562.8\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3902","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3902)"},{"Id":"521537541","IsPullRequest":true,"CreatedAt":"2019-11-13T15:13:05","Actor":"dotnet-maestro[bot]","Number":"3895","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191112.5\r\n- **Date Produced**: 11/12/2019 7:29 PM\r\n- **Commit**: 993af9410c505680b9a260f3bfd79515c936de12\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19562.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19562.5\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19562.5\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3895","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3895)"},{"Id":"522163500","IsPullRequest":false,"CreatedAt":"2019-11-13T11:54:28","Actor":"johnnyasantoss","Number":"3901","RawContent":null,"Title":"dotnet publish R2R single file fails only on Windows","State":"open","Body":"Hello!\r\nI have been trying to set up an Azure pipelines and noticed that my `dotnet publish` command is only failing on Windows (works perfectly on Linux and Mac).\r\n\r\nIt seems to fail when parsing the arguments but the error message does not clarify or help in any way. _(Also, I'm not sure if this issue should be filled here or on msbuild repo)_\r\nI have only one `.csproj` file in the folder and I'm receiving this error message\r\n```log\r\nMSBUILD : error MSB1008: Only one project can be specified.\r\nSwitch: p:PublishTrimmed=True\r\n```\r\n\r\nHere's the pipeline logs: https://dev.azure.com/johnnyasantoss/ExchangeSharp/_build/results?buildId=18&view=logs&j=022b0a5d-2698-5f72-7610-a845972a8b4c&t=91b18868-140c-5865-f893-165dc330423f\r\nHere's the fork in the exact commit: https://github.com/johnnyasantoss/ExchangeSharp/blob/test13/azure-pipelines.yml ","Url":"https://github.com/dotnet/sdk/issues/3901","RelatedDescription":"Open issue \"dotnet publish R2R single file fails only on Windows\" (#3901)"},{"Id":"522434579","IsPullRequest":false,"CreatedAt":"2019-11-13T10:36:54","Actor":"yb199478","Number":"3903","RawContent":null,"Title":"Cannot find dependencies when executing an assembly published by dotnet publish","State":"open","Body":"This is more like a question, If this is not the right place to ask questions, I apologize in advance.\r\n\r\nI wrote a `.NET Core 2.0` console application (The main code is written by `.netstandard2.0`). Publish using `dotnet publish`, But there was an error during execution:\r\n\r\n**Compile project**\r\n\r\n```shell\r\ndotnet publish src\\Bucket.CLI\\Bucket.CLI.csproj -c Release --self-contained false\r\n```\r\n\r\n**Execute program**\r\n\r\n- `bin\\Release\\netcoreapp2.0\\publish`\r\n\r\n```shell\r\ndotnet Bucket.CLI.dll\r\n```\r\n\r\n**Prompt error:**\r\n\r\n```shell\r\nError:\r\n  An assembly specified in the application dependencies manifest (Bucket.CLI.dep\r\ns.json) was not found:\r\n    package: 'System.Text.Encoding.CodePages', version: '4.5.1'\r\n    path: 'runtimes/win/lib/netcoreapp2.0/System.Text.Encoding.CodePages.dll'\r\n```\r\n\r\nBut, if I specify a `--runtime`, then no error will occur：\r\n\r\n**Compile project**\r\n\r\n```shell\r\ndotnet publish src\\Bucket.CLI\\Bucket.CLI.csproj -c Release --self-contained false -r win-x64\r\n```\r\n\r\n**Execute program**\r\n\r\n- `bin\\Release\\netcoreapp2.0\\win-x64\\publish`\r\n\r\n```shell\r\ndotnet Bucket.CLI.dll\r\n```\r\n\r\nThe program works fine.\r\n\r\nWhat did i do wrong?\r\n\r\nMore info : https://stackoverflow.com/questions/58744592/cannot-find-dependencies-when-executing-an-assembly-published-by-dotnet-publish","Url":"https://github.com/dotnet/sdk/issues/3903","RelatedDescription":"Open issue \"Cannot find dependencies when executing an assembly published by dotnet publish\" (#3903)"},{"Id":"522055346","IsPullRequest":false,"CreatedAt":"2019-11-13T09:03:52","Actor":"turowicz","Number":"3900","RawContent":null,"Title":"NETSDK1085 on Docker with dotnet publish --nobuild","State":"open","Body":"I have two docker files. First I `docker build` the `Build.dockerfile` and then I'm using `Deploy.dockerfile` to create a deployable image. Unfortunately I've started getting an issue which is blocking my release pipeline after 3.0 SDK update. At the moment I have removed the `--no-build` flag but I would very much like to bring it back ASAP.\r\n\r\n**Build.dockerfile**\r\n```\r\nFROM mcr.microsoft.com/dotnet/core/sdk:3.0-bionic\r\n\r\nWORKDIR /app\r\n\r\nCOPY src/*.sln ./src/\r\nCOPY src/*/*.csproj ./src/\r\nCOPY src/nuget.config ./src/\r\nRUN for file in $(ls ./src/*.csproj); do mkdir -p ./${file%.*}/ && mv $file ./${file%.*}/; done\r\nRUN dotnet msbuild /t:restore /p:Configuration=Release src\r\n\r\nADD src ./src\r\nADD input ./input\r\n\r\nRUN dotnet build src -c Release --no-restore\r\nRUN dotnet test src/Solution.Tests/Solution.Tests.csproj --configuration Release --no-build --no-restore\r\nRUN dotnet test src/Solution.Tests.Grain/Solution.Tests.Grain.csproj --configuration Release --no-build --no-restore\r\n```\r\n\r\n**Deploy.dockerfile**\r\n```\r\nFROM my-build AS build-env\r\nARG project\r\nENV PROJECT=${project}\r\n\r\nWORKDIR /app\r\nRUN dotnet publish src/${project}/${project}.csproj -c Release -o /app/out/ --no-restore --no-build\r\n\r\n# Build runtime image\r\nFROM surveily.azurecr.io/varunit.developer.dotnet:3.0-runtime-web-20191107.6\r\nARG project\r\nENV PROJECT=${project}\r\n\r\nWORKDIR /app\r\n\r\nCOPY --from=build-env /app/out .\r\n\r\nRUN cp /app/${project}.Views.dll /app/${project}.PrecompiledViews.dll 2>/dev/null || :\r\n\r\nENTRYPOINT dotnet $PROJECT.dll\r\n```\r\n\r\n**dotnet --info**\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n**Names of solutions, images and other items have been changed to anonymise the source.**","Url":"https://github.com/dotnet/sdk/issues/3900","RelatedDescription":"Open issue \"NETSDK1085 on Docker with dotnet publish --nobuild\" (#3900)"},{"Id":"521921521","IsPullRequest":false,"CreatedAt":"2019-11-13T02:40:58","Actor":"coolspeed","Number":"3899","RawContent":null,"Title":"Korean translation issue","State":"open","Body":"The  `dotnet run` command output translation is misleading:\r\n\r\n```\r\nC:\\pro\\MyProject>dotnet restore\r\n  64.42 ms에서 C:\\pro\\MyProject\\MyProject.csproj에 대한 복원을 완료했습니다.\r\n```\r\n\r\nThe translation \"64.42 ms에서\", which is guessed to be the translation of \"in 64.42 ms\", is translated inappropriately.","Url":"https://github.com/dotnet/sdk/issues/3899","RelatedDescription":"Open issue \"Korean translation issue\" (#3899)"},{"Id":"521785093","IsPullRequest":true,"CreatedAt":"2019-11-12T22:05:55","Actor":"dotnet-maestro[bot]","Number":"3898","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191112.4\r\n- **Date Produced**: 11/12/2019 6:45 PM\r\n- **Commit**: b7dc9ed2f7ec52c7c3df94a89c7c3b22431c9d33\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3898","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3898)"},{"Id":"521697528","IsPullRequest":true,"CreatedAt":"2019-11-12T19:34:05","Actor":"dsplaisted","Number":"3897","RawContent":null,"Title":"Enable SDL validation","State":"closed","Body":"Sample build: https://dev.azure.com/dnceng/internal/_build/results?buildId=415545&view=results\r\n\r\n@sunandabalu for review","Url":"https://github.com/dotnet/sdk/pull/3897","RelatedDescription":"Closed or merged PR \"Enable SDL validation\" (#3897)"},{"Id":"521548650","IsPullRequest":true,"CreatedAt":"2019-11-12T15:55:33","Actor":"dotnet-maestro[bot]","Number":"3896","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191111.10\r\n- **Date Produced**: 11/12/2019 8:50 AM\r\n- **Commit**: fff13e16315653cf68db1edf17dc60b6bccdcdb1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.19561.10\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3896","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3896)"},{"Id":"521463457","IsPullRequest":false,"CreatedAt":"2019-11-12T10:30:50","Actor":"frankkilcommins","Number":"3894","RawContent":null,"Title":"dotnet pack --ouput directory no longer relative to current directory","State":"open","Body":"As of yesterday, I get issues with dotnet pack where the output directory was created at the root working directory rather than relative to the current directory. This caused subsequent pack command to fail as the expected pattern was no longer matching.\r\n\r\nsdk version: 2.1.500\r\n\r\nOutput:\r\n`[command]C:\\hostedtoolcache\\windows\\dncs\\2.1.500\\x64\\dotnet.exe pack d:\\a\\1\\s\\DUPSCore\\DigitalUserProvisioningService.Data.Core\\DigitalUserProvisioningService.Data.Core.csproj --configuration release --version-suffix 96713 --output nupkgs\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.`\r\n\r\nPackage was created in the following directory:\r\n`Successfully created package 'd:\\a\\1\\s\\nupkgs\\DigitalUserProvisioningService.Data.Core.1.3.0-ci-96713.nupkg'.`\r\n\r\nExpected directory:\r\n`d:\\a\\1\\s\\DUPSCore\\DigitalUserProvisioningService.Data.Core\\nupkgs\\DigitalUserProvisioningService.Data.Core.1.3.0-ci-96713.nupkg`\r\n\r\nI've worked around the issue by prefixing the _current_ directory to the `output` command:\r\n`--configuration $(BuildConfiguration) --version-suffix $(Build.BuildId) --output DUPSCore/DigitalUserProvisioningService.Data.Core/nupkgs`\r\n\r\nJust wondering why/when this changed and can I expect my builds to break again if/when it's reverted or resolved.\r\n","Url":"https://github.com/dotnet/sdk/issues/3894","RelatedDescription":"Open issue \"dotnet pack --ouput directory no longer relative to current directory\" (#3894)"},{"Id":"521384441","IsPullRequest":true,"CreatedAt":"2019-11-12T09:31:04","Actor":"dotnet-maestro[bot]","Number":"3893","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191111.7\r\n- **Date Produced**: 11/12/2019 6:36 AM\r\n- **Commit**: cfa9637c2a0066eb601cff1ebb52f479c7afb9a2\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview3.19561.7\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3893","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3893)"},{"Id":"521314429","IsPullRequest":true,"CreatedAt":"2019-11-12T05:20:48","Actor":"dotnet-maestro[bot]","Number":"3891","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191111.5\r\n- **Date Produced**: 11/12/2019 2:31 AM\r\n- **Commit**: 829c0bf9b02e3296ddf8b1e623900b27c127dc13\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview3.19561.5\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3891","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3891)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"523579400","IsPullRequest":false,"CreatedAt":"2019-11-15T16:51:27","Actor":"MichaelSimons","Number":"141","RawContent":null,"Title":"Windows Server, version 1803 no longer supported by .NET Framework","State":"open","Body":"# Windows Server, version 1803 no longer supported by .NET Framework\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #451](https://github.com/microsoft/dotnet-framework-docker/issues/451)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.8`. These are tags that are supported on multiple operating systems and versions, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1803 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-1803` or `mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-1803`.","Url":"https://github.com/dotnet/announcements/issues/141","RelatedDescription":"Open issue \"Windows Server, version 1803 no longer supported by .NET Framework\" (#141)"},{"Id":"523578215","IsPullRequest":false,"CreatedAt":"2019-11-15T16:49:04","Actor":"MichaelSimons","Number":"140","RawContent":null,"Title":"Windows Server, version 1803 no longer supported by .NET Core","State":"open","Body":"# Windows Server, version 1803 no longer supported by .NET Core\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Core container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1469](https://github.com/dotnet/dotnet-docker/issues/1469)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `3.0`, `3.0.0`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server, version 1803 images (even though it is no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:3.0-nanoserver-1803`.","Url":"https://github.com/dotnet/announcements/issues/140","RelatedDescription":"Open issue \"Windows Server, version 1803 no longer supported by .NET Core\" (#140)"},{"Id":"522994983","IsPullRequest":false,"CreatedAt":"2019-11-14T17:15:08","Actor":"leecow","Number":"139","RawContent":null,"Title":".NET Core 3.1.0 Preview 3","State":"open","Body":".NET Core 3.1.0 Preview 3 is available and https://github.com/dotnet/core/issues/3809 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview3.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-3/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-3/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 3, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n","Url":"https://github.com/dotnet/announcements/issues/139","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 3\" (#139)"},{"Id":"522864668","IsPullRequest":false,"CreatedAt":"2019-11-14T13:37:28","Actor":"TaraOverfield","Number":"138","RawContent":null,"Title":"November 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework November 13, 2019, Update for .NET Framework 4.8](https://devblogs.microsoft.com/dotnet/net-framework-november-13-2019-update-for-net-framework-4-8/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/138","RelatedDescription":"Open issue \"November 2019 .NET Updates\" (#138)"},{"Id":"522488807","IsPullRequest":false,"CreatedAt":"2019-11-13T21:41:06","Actor":"MichaelSimons","Number":"137","RawContent":null,"Title":".NET Framework Docker images support for Windows Server, version 1909","State":"open","Body":"# .NET Framework Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Framework Docker images have been published for Server Core, version 1909.  \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-framework-docker#448](https://github.com/microsoft/dotnet-framework-docker/issues/448)\r\n\r\n## Details \r\n\r\n* [dotnet-framework-docker#447](https://github.com/microsoft/dotnet-framework-docker/pull/447) \r\n\r\n.NET Framework tags containing the substring `windowsservercore-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-framework). \r\n\r\n.NET Framework multi-arch tags, such as `4.8`, have been updated to use `windowsservercore-1909` images if your host is Windows Server 1909 or higher. \r\n\r\n### Impacted Repos \r\n\r\n* [dotnet/framework/sdk](https://hub.docker.com/_/microsoft-dotnet-framework-sdk/): .NET Framework SDK \r\n* [dotnet/framework/aspnet](https://hub.docker.com/_/microsoft-dotnet-framework-aspnet/): ASP.NET Runtime  \r\n* [dotnet/framework/wcf](https://hub.docker.com/_/microsoft-dotnet-framework-aspnet/): Windows Communication Foundation \r\n* [dotnet/framework/runtime](https://hub.docker.com/_/microsoft-dotnet-framework-runtime/): .NET Framework Runtime\r\n* [dotnet/framework/samples](https://hub.docker.com/_/microsoft-dotnet-framework-samples/): .NET Framework Samples\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/137","RelatedDescription":"Open issue \".NET Framework Docker images support for Windows Server, version 1909\" (#137)"},{"Id":"521830642","IsPullRequest":false,"CreatedAt":"2019-11-12T22:05:51","Actor":"MichaelSimons","Number":"136","RawContent":null,"Title":".NET Core Docker images support for Windows Server, version 1909","State":"open","Body":"# .NET Core Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Core Docker images have been published for Nano Server, version 1909. \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-docker#1460](https://github.com/dotnet/dotnet-docker/issues/1460)\r\n## Details\r\n\r\n* [dotnet-docker#1457](https://github.com/dotnet/dotnet-docker/pull/1457)\r\n\r\n.NET Core tags containing the substring `nanoserver-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-core).\r\n\r\n.NET Core multi-arch tags, such as `3.0`, have been updated to use `nanoserver-1909` images if your host is Windows Server 1909 or higher.\r\n\r\n### Impacted Repos\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk/): .NET Core SDK\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): ASP.NET Core Runtime\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime/): .NET Core Runtime\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples/): .NET Core Samples\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/136","RelatedDescription":"Open issue \".NET Core Docker images support for Windows Server, version 1909\" (#136)"},{"Id":"520243813","IsPullRequest":false,"CreatedAt":"2019-11-08T21:33:12","Actor":"CESARDELATORRE","Number":"135","RawContent":null,"Title":"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)","State":"open","Body":"This week (coinciding with Microsoft Ignite 2019) we announced the release of **ML.NET 1.4 GA**. \r\nThere are many new features such as:\r\n\r\n- **New Deep Learning Image Classifier (GA):** GPU support for training and inference Image Classifier ML models.\r\n\r\n- **Database Loader  (GA):** You can train your model with data directly from any relational database supported by System.Data.\r\n\r\n- **Enhanced for .NET Core 3.0  (GA):** Performance improvements thanks to hardware intrinsics feature in .NET Core 3.0.\r\n\r\n- **PredictionEnginePool for scalable deployments (GA):** Recommended approach for multi-threaded scalable apps such as ASP.NET Core apps/services and Azure Functions\r\n\r\n- **ML.NET and .NET support in Jupyter notebooks:**  You can now run any .NET code (C# / F#) in Jupyter notebooks and therefore run ML.NET code in it as well. Great for exploring and documenting model training experiments, data distribution exploration, data cleaning, plotting data charts, learning scenarios such as ML.NET courses, hands-on-labs and quizzes, etc.\r\n\r\nSee details in the following **Blog Posts**:\r\n\r\n- [Announcing ML.NET 1.4 general availability (Machine Learning for .NET)](https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-global-availability-machine-learning-for-net/)\r\n\r\n- [Using ML.NET in Jupyter notebooks](https://devblogs.microsoft.com/cesardelatorre/using-ml-net-in-jupyter-notebooks/)\r\n\r\n- [.NET Core with Jupyter Notebooks](https://devblogs.microsoft.com/dotnet/net-core-with-juypter-notebooks-is-here-preview-1/)\r\n","Url":"https://github.com/dotnet/announcements/issues/135","RelatedDescription":"Open issue \"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)\" (#135)"},{"Id":"517169249","IsPullRequest":false,"CreatedAt":"2019-11-04T13:57:09","Actor":"leecow","Number":"134","RawContent":null,"Title":".NET Core 3.1.0 Preview 2","State":"open","Body":".NET Core 3.1.0 Preview 2 is available and https://github.com/dotnet/core/issues/3744 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview2.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-2/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-2/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 2, either responding to https://github.com/dotnet/core/issues/3744, creating a new issue or creating a new issue in one of the following repos:\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/134","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 2\" (#134)"},{"Id":"514753283","IsPullRequest":false,"CreatedAt":"2019-10-30T15:14:43","Actor":"jaredpar","Number":"133","RawContent":null,"Title":"Repository Consolidation Timeline","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27549.*\r\n\r\nAs we [announced](https://github.com/dotnet/announcements/issues/119) [earlier](https://github.com/dotnet/announcements/issues/127) we are planning on consolidating some of the repositories in the dotnet org. Our planning has reached a point where we have a schedule for the coreclr, corefx and core-setupmoves into dotnet/runtime that we want to share out with the community.\r\n\r\n### November 13th\r\nWe’ll move all changes from the original repositories into dotnet/runtime up to 5PM PST on November 13th. We’ll try to help as many pull requests as possible get merged by then. At that point, if there’s any pull requests still open we’ll have to close them. If you’d still like to continue those pull requests, we’d encourage you to bring them to dotnet/runtime in a new pull request.\r\n\r\nThe repositories themselves will be effectively archived at this point. The state of the “master” branch will be recorded with a tag, named “master-archive”, but the branch itself will be deleted. The default branch for the repositories will be named “archive” and it will be a single commit with a README.md and CONTRIBUTING.md file pointing to our dotnet/runtime repository.\r\n\r\nThe repositories will remain active for servicing changes to .NET Core 3.1 and earlier hence we will not be using the GitHub archive capability. \r\n\r\n### November 22nd\r\nThe dotnet/runtime repository will be made public and available for community contribution. Even though the repository will be created on November 13th it will take several days to get it back into a working order: fixing up our build scripts, recreating our Azure Dev Ops build definitions, etc … Until those tasks are completed it will not be possible to accept pull request and hence the repository will remain private. Once we are in a state that pull requests can be merged again the repository will be made public.\r\n\r\nOur expectation is that will occur on November 22nd. If it is ready sooner it will be made public sooner. If the work takes longer than we planned then we will add an update to this announcement with a new expected date.\r\n\r\n### December 1st-2nd\r\nAll issues, open and closed, will be migrated from corefx, coreclr and core-setup into dotnet/runtime. This will be using GitHub’s existing issue transfer feature in a bulk migration. This means all of the existing issue links will continue to function via redirects.\r\n\r\nThis does mean though that labels will not transfer with the issues. Labels will be re-applied as a post processing step by our engineering team once the issue migration completes.\r\n\r\nEven though our issues won’t be fully migrated until this time we’d like the community to begin filing issues on dotnet/runtime as soon as it’s public rather than continuing to file issues on the original repositories.\r\n\r\n### Migrating Commits\r\nThe dotnet/runtime repository will be a new commit history from the original repositories. We are using this consolidation as an opportunity to clean up our history with the goal of having a cleaner, smaller history as a starting point. This means commits will be rewritten in the following ways as they are migrated to dotnet/runtime:\r\n\r\n1. Author information, contributor information, changed file list and time stamps from the original commit will be preserved.\r\n1. Links to issues, pull requests or commits in the repository using GitHub short links will be rewritten so they continue to point the original repository. \r\n1. Every commit will be appended with a link to the original commit it was mapped from.\r\n\r\nThe actual contents of the commit though will be updated to match the new directory layout of the dotnet/runtime repository.","Url":"https://github.com/dotnet/announcements/issues/133","RelatedDescription":"Open issue \"Repository Consolidation Timeline\" (#133)"},{"Id":"513963125","IsPullRequest":false,"CreatedAt":"2019-10-29T14:32:55","Actor":"mthalman","Number":"132","RawContent":null,"Title":"Release of Alpine 3.10 Docker images","State":"open","Body":"# .NET Core Alpine Docker images updated to Alpine 3.10\r\n\r\nDocker images for .NET Core have been released that support Alpine 3.10.  Included with this release, the floating tags for Alpine-based images have been moved from Alpine 3.9 to 3.10.  \r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n[dotnet/dotnet-docker#1418](https://github.com/dotnet/dotnet-docker/issues/1418)\r\n\r\n## Details\r\n* [dotnet/dotnet-docker#1415](https://github.com/dotnet/dotnet-docker/pull/1415)\r\n\r\nIf you made use of a floating tag for Alpine, such as `3.0-alpine`, `2.2-alpine`, and `2.1-alpine`, these have been changed to now reference Alpine 3.10 instead of Alpine 3.9.  Be sure to pull this tag on your Docker machine to get the latest image.\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)","Url":"https://github.com/dotnet/announcements/issues/132","RelatedDescription":"Open issue \"Release of Alpine 3.10 Docker images\" (#132)"},{"Id":"508132491","IsPullRequest":false,"CreatedAt":"2019-10-16T22:28:29","Actor":"leecow","Number":"131","RawContent":null,"Title":".NET Core 3.1.0 Preview 1","State":"open","Body":".NET Core 3.1.0 Preview 1 is available and https://github.com/dotnet/core/issues/3634 has been opened for discussion.\r\n\r\n**Blog round up**\r\n* [.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-1/)\r\n* [ASP.NET Core and Blazor](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-1/)\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview1.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 1, either responding to https://github.com/dotnet/core/issues/3634, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n","Url":"https://github.com/dotnet/announcements/issues/131","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 1\" (#131)"},{"Id":"506832844","IsPullRequest":false,"CreatedAt":"2019-10-14T19:26:10","Actor":"terrajobst","Number":"130","RawContent":null,"Title":".NET Core 3.0 concludes the .NET Framework API porting project","State":"open","Body":"We started in .NET Core 1.0 with a very minimal API set that only included \\~18K of the .NET Framework APIs. With [.NET Standard 2.0](https://devblogs.microsoft.com/dotnet/announcing-net-standard-2-0/), we tried to make it much more viable to share code between .NET Framework, .NET Core, and Xamarin which resulted in approximately 38K .NET Frameworks APIs being available in .NET Core 2.0. We also built the [Windows Compatibility Pack](https://devblogs.microsoft.com/dotnet/announcing-the-windows-compatibility-pack-for-net-core/) which made another 21K .NET Framework APIs available to .NET Core, resulting in almost 60K additional APIs. And in .NET Core 3.0 we added WPF and WinForms, which increased the number of .NET Framework APIs ported to .NET Core to over 120k, which is more than half of all .NET Framework APIs.\r\n\r\nIt’s also worth pointing out that we added about 62K APIs to .NET Core that don’t exist in .NET Framework. If we compare their total number of APIs, .NET Core has about 80% of the API surface of .NET Framework.\r\n\r\n<p align=\"center\">\r\n<img src=\"https://user-images.githubusercontent.com/5169960/66777114-f8db7c80-ee7c-11e9-9161-acfe1c491586.png\" width=\"600\" align=\"center\">\r\n</p>\r\n\r\nWe announced that the [future of .NET](https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/) will be based on .NET Core. And at Build 2019, [Scott Hunter stated](https://www.youtube.com/watch?v=ZlO1utbB2GQ&t=54m20s) that AppDomains, remoting, Web Forms, WCF server, and Windows Workflow won’t be ported to .NET Core.\r\n\r\nWith .NET Core 3.0, we’re at the point where we’ve ported all technologies that are required for modern workloads, be that desktop apps, mobile apps, console apps, web sites, or cloud services. That’s not to say that we don’t have any gaps or opportunities for new technologies, but we generally believe we won’t be finding them in the .NET Framework code base anymore. Moving forward, we’re focusing our resources on incorporating new technologies.\r\n\r\nSimultaneously, we’re looking into releasing more of the [.NET Framework code base under the MIT license](https://github.com/microsoft/referencesource) on GitHub to allow the community to create OSS projects for technologies we’re not intending to bring to .NET Core. For example, there already are community projects for [CoreWF](https://github.com/UiPath/corewf) and [CoreWCF](https://github.com/CoreWCF/CoreWCF).\r\n\r\nWe’d like to thank everyone who filed issues with requests for APIs being ported. Those issues allowed us to prioritize and close the gaps that prevented people from porting to .NET Core.\r\n\r\nBut since we generally no longer plan to bring existing technologies from .NET Framework to .NET Core we’ll be closing all issues that are [labeled with port-to-core](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Aport-to-core).\r\n\r\n### Discussion\r\n\r\nTo discuss this issue, please comment on the corresponding issue at https://github.com/dotnet/corefx/issues/41769.","Url":"https://github.com/dotnet/announcements/issues/130","RelatedDescription":"Open issue \".NET Core 3.0 concludes the .NET Framework API porting project\" (#130)"},{"Id":"505445666","IsPullRequest":false,"CreatedAt":"2019-10-10T18:45:56","Actor":"TaraOverfield","Number":"129","RawContent":null,"Title":"October 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework October 2019 Cumulative Update for Windows 10 version 1903 and version 1909](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-cumulative-updates-windows-10-version-1903-and-windows-10-version-1909/)\r\n* [.NET Framework October 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-preview-of-quality-rollup/)\r\n* [.NET Framework October 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/129","RelatedDescription":"Open issue \"October 2019 .NET Updates\" (#129)"},{"Id":"505328689","IsPullRequest":false,"CreatedAt":"2019-10-10T15:19:53","Actor":"carloreggiani","Number":"128","RawContent":null,"Title":"Docker Stop return status Exited \"(3221225786)\"","State":"closed","Body":"Hi\r\nI'm investigating a issue regarding official MCR images on a Win2019 server with Docker EE engine 19.03.2.\r\n\r\nThe images that I'm unsing are:\r\nmcr.microsoft.com/windows/servercore:1809\r\nmcr.microsoft.com/dotnet/framework/aspnet:4.8\r\n\r\nStopping containers based on these images (\"docker stop\" command) I'm getting: \r\n\"Exited (3221225786)\"\r\n\r\nOn linux a stop command normally return: \"Exited (137)\"\r\n\r\nIs it a normal behaviour? What's means 3221225786?\r\n\r\nThanks for any support\r\n\r\nCarlo","Url":"https://github.com/dotnet/announcements/issues/128","RelatedDescription":"Closed issue \"Docker Stop return status Exited \"(3221225786)\"\" (#128)"},{"Id":"504325600","IsPullRequest":false,"CreatedAt":"2019-10-08T23:14:11","Actor":"terrajobst","Number":"127","RawContent":null,"Title":"Consolidated repo names","State":"open","Body":"[ann]: https://github.com/dotnet/announcements/issues/119\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions), and some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarity \r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarity\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!\r\n\r\n### Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27096.","Url":"https://github.com/dotnet/announcements/issues/127","RelatedDescription":"Open issue \"Consolidated repo names\" (#127)"},{"Id":"504304108","IsPullRequest":false,"CreatedAt":"2019-10-08T22:06:07","Actor":"MichaelSimons","Number":"126","RawContent":null,"Title":"4.7.x .NET Framework SDK Docker images no longer published","State":"open","Body":"# 4.7.x .NET Framework SDK Docker images no longer published\r\n\r\nThe [4.7.x .NET Framework SDK Docker images](https://hub.docker.com/_/microsoft-dotnet-framework-sdk) will no longer be published after Oct. 8, 2019.  The 4.8 image tags should be used as a replacement.\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [microsoft/dotnet-framework-docker#428](https://github.com/microsoft/dotnet-framework-docker/issues/428)\r\n\r\n## Details\r\n\r\nAny references to the following SDK tags should be updated to reference `4.8` instead:\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2019`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2019`\r\n\r\nIf you haven't migrated to using images from [MCR](https://github.com/dotnet/announcements/issues/101) and are still using the .NET Framework repos on Docker Hub, you will need to update your tag references to MCR.  This is because the 4.8 images only exist on MCR.  These are the following Docker Hub tags that are affected and should be updated to reference the [4.8 tags at the MCR location](https://hub.docker.com/_/microsoft-dotnet-framework-sdk):\r\n* `microsoft/dotnet-framework:4.7.1-sdk`\r\n* `microsoft/dotnet-framework:4.7.1-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-1803`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019`","Url":"https://github.com/dotnet/announcements/issues/126","RelatedDescription":"Open issue \"4.7.x .NET Framework SDK Docker images no longer published\" (#126)"},{"Id":"502102886","IsPullRequest":false,"CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Number":"125","RawContent":null,"Title":"Alpine Docker images no longer include the tzdata package in 3.0","State":"open","Body":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Open issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125)"},{"Id":"497868605","IsPullRequest":false,"CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Number":"124","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.0","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n","Url":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.0\" (#124)"},{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework September 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-security-and-quality-rollup/)\r\n* [.NET Framework September 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1195407626525462528","CreatedAt":"2019-11-15T18:26:02+00:00","UserScreenname":"dotnet","Text":"Blazor is challenging the status quo with a new web framework that’s powerful and productive. \n\n@CODEmagazine lays… https://t.co/YaxiSfHaum","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":88,"FavoriteCount":36,"RawContent":null},{"Id":"1195049383756255233","CreatedAt":"2019-11-14T18:42:30+00:00","UserScreenname":"dotnet","Text":"In this episode, @julielerman shares some insight and great tips for working with Entity Framework in Docker.… https://t.co/6vEWKT6q98","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":14,"RawContent":null},{"Id":"1195034460477108224","CreatedAt":"2019-11-14T17:43:12+00:00","UserScreenname":"dotnet","Text":".@CODEmagazine tackles the evolution and rework of Entity Framework Core 3.0 as they tout the impressive and solid… https://t.co/ppuCmvPP6M","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null},{"Id":"1195029111753920517","CreatedAt":"2019-11-14T17:21:57+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.1 Preview 3 https://t.co/z1YLDZ5dpS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":291,"FavoriteCount":148,"RawContent":null},{"Id":"1195028900037963780","CreatedAt":"2019-11-14T17:21:06+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9r53NV Core updates in .NET Core 3.1 Preview 3 https://t.co/NCbHJ43nUA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":38,"FavoriteCount":23,"RawContent":null},{"Id":"1194672025182322688","CreatedAt":"2019-11-13T17:43:01+00:00","UserScreenname":"dotnet","Text":"#MLdotNET is more than just a library. @CODEmagazine covers the basics as it digs into the API &amp; framework features… https://t.co/Za1eY5HSuS","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":40,"FavoriteCount":19,"RawContent":null},{"Id":"1194390243597639680","CreatedAt":"2019-11-12T23:03:19+00:00","UserScreenname":"dotnet","Text":"👋 Hi everyone...do you want to help shape some of the .NET tools for @Azure development and deployment in… https://t.co/H9JuCsmmZy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":20,"RawContent":null},{"Id":"1194369282941104130","CreatedAt":"2019-11-12T21:40:02+00:00","UserScreenname":"dotnet","Text":"Why should desktop developers care about .NET Core? @CODEmagazine answers that question (and more) with an interest… https://t.co/Wv8DO6kgso","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":49,"FavoriteCount":28,"RawContent":null},{"Id":"1194313410881605633","CreatedAt":"2019-11-12T17:58:01+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1194289656516534272","CreatedAt":"2019-11-12T16:23:37+00:00","UserScreenname":"dotnet","Text":"Do you use a Mac to build apps for @ASPNET Core? Are you thinking of doing it? Now's the time! \n\nTake the… https://t.co/jWQ1gwrVlI","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":35,"FavoriteCount":17,"RawContent":null},{"Id":"1193961597108142080","CreatedAt":"2019-11-11T18:40:02+00:00","UserScreenname":"dotnet","Text":"👍 awesome 👍 👍 Awesome @CodeMagazine article on productivity w/ #VS2019's nav, debugging, refactorings, &amp; more!\n\n➕,… https://t.co/pet2XGdUDg","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":39,"FavoriteCount":18,"RawContent":null},{"Id":"1193921827724300300","CreatedAt":"2019-11-11T16:02:00+00:00","UserScreenname":"dotnet","Text":"Check out this post from our friend @funcOfJoe at @PulumiCorp. With Pulumi, it's possible to declare all of your Az… https://t.co/tLPB7GseoS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":174,"FavoriteCount":98,"RawContent":null},{"Id":"1192869066639314946","CreatedAt":"2019-11-08T18:18:42+00:00","UserScreenname":"dotnet","Text":"The learning from #MSIgnite keeps on rollin' - Check out the @CoolCSH / @SHanselman App Dev session on the present… https://t.co/kWuV7XMmMY","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":188,"FavoriteCount":75,"RawContent":null},{"Id":"1192572507573891072","CreatedAt":"2019-11-07T22:40:17+00:00","UserScreenname":"dotnet","Text":"..soooo, this is cool news... Now you can write #dotNET code in #Jupyter Notebooks.\n\nYeap, that's right. We're brin… https://t.co/Gf1WAvOhKH","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":273,"FavoriteCount":122,"RawContent":null}]}},"RunOn":"2019-11-16T05:30:36.0030921Z","RunDurationInMilliseconds":15607}