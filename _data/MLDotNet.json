{"Data":{"GitHub":{"Issues":[{"Id":"416419753","IsPullRequest":false,"CreatedAt":"2019-03-02T17:27:31","Actor":"leecow","Number":"2823","RawContent":null,"Title":"can not register","State":"open","Body":"@Emmagrabergs commented on [Sat Mar 02 2019](https://github.com/dotnet/core/issues/2361)\n\nProblem encountered on https://dotnet.microsoft.com/learn/machinelearning-ai/ml-dotnet-get-started-tutorial/install\r\nOperating System: windows\r\n\r\nProvide details about the problem you are experiencing. Include your operating system version, exact error message, code sample, and anything else that is relevant..\n\n---\n\n@leecow commented on [Sat Mar 02 2019](https://github.com/dotnet/core/issues/2361#issuecomment-468941055)\n\nMoving to the ML repo. @Emmagrabergs - chances are they will need additional details on what you were doing and the errors you see. \n\n","Url":"https://github.com/dotnet/machinelearning/issues/2823","RelatedDescription":"Open issue \"can not register\" (#2823)"},{"Id":"415945768","IsPullRequest":true,"CreatedAt":"2019-03-02T16:35:42","Actor":"Anipik","Number":"2812","RawContent":null,"Title":"Message related to missing models improved in DNNImageFeaturizers.","State":"closed","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2784\r\n\r\n\r\nNew error msg \r\n```\r\n[28-02-2019 21:12:14 Error] [xUnit.net 00:00:01.96]     Microsoft.ML.Tests.DnnImageFeaturizerTests.OnnxStatic [FAIL]\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]       System.IO.IOException : Model file path C:\\git\\machinelearning\\bin\\AnyCPU.Debug\\Microsoft.ML.OnnxTransformerTest\\netcoreapp2.1\\DnnImageModels1\\ResNetPrepOnnx\\ResNetPreprocess.onnx doesnot exists.\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]       Stack Trace:\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]         C:\\git\\machinelearning\\src\\Microsoft.ML.Core\\Utilities\\Contracts.cs(744,0): at Microsoft.ML.Contracts.CheckIO(IExceptionContext ctx, Boolean f, String msg, Object[] args)\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]         C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransformer\\OnnxTransform.cs(168,0): at Microsoft.ML.Transforms.OnnxTransformer..ctor(IHostEnvironment env, Options options, Byte[] modelBytes)\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]         C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransformer\\OnnxTransform.cs(252,0): at Microsoft.ML.Transforms.OnnxTransformer..ctor(IHostEnvironment env, String[] outputColumnNames, String[] inputColumnNames, String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu)\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]         C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransformer\\OnnxTransform.cs(544,0): at Microsoft.ML.Transforms.OnnxScoringEstimator..ctor(IHostEnvironment env, String[] outputColumnNames, String[] inputColumnNames, String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu)\r\n[28-02-2019 21:12:14 Informational] [xUnit.net 00:00:01.96]         C:\\git\\machinelearning\\src\\Microsoft.ML.DnnImageFeaturizer.ResNet1\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2812","RelatedDescription":"Closed or merged PR \"Message related to missing models improved in DNNImageFeaturizers.\" (#2812)"},{"Id":"416344237","IsPullRequest":true,"CreatedAt":"2019-03-02T02:08:10","Actor":"Anipik","Number":"2822","RawContent":null,"Title":"Updating the buildtools version to the latest","State":"open","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2822","RelatedDescription":"Open PR \"Updating the buildtools version to the latest\" (#2822)"},{"Id":"416338475","IsPullRequest":false,"CreatedAt":"2019-03-02T01:21:07","Actor":"prathyusha12345","Number":"2821","RawContent":null,"Title":"Exception in CreditCard Fraud Detection sample while migrating to v0.11","State":"open","Body":"### Issue\r\n\r\n- While migrating CreditCard Fraud Detection sample I am getting the below exception while trying to save train/test data\r\n\r\n\r\n\r\n```\r\n                //(trainData, testData) = classification.TrainTestSplit(data, testFraction: 0.2, stratificationColumn: \"Label\");\r\n                TrainTestData trainTestData = classification.TrainTestSplit(data, testFraction: 0.2);\r\n                trainData = trainTestData.TrainSet;\r\n                testData = trainTestData.TestSet;\r\n\r\n                // save test split\r\n                using (var fileStream = File.Create(Path.Combine(_outputPath, \"testData.csv\")))\r\n                {\r\n                    mlContext.Data.SaveAsText(testData, fileStream, separatorChar:',', headerRow:true, schema: true);\r\n                }\r\n```\r\n\r\n\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/22335043/53674701-96fb3900-3c44-11e9-9509-399e4ec226c9.png)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2821","RelatedDescription":"Open issue \"Exception in CreditCard Fraud Detection sample while migrating to v0.11\" (#2821)"},{"Id":"415739041","IsPullRequest":false,"CreatedAt":"2019-03-01T22:57:13","Actor":"wschin","Number":"2794","RawContent":null,"Title":"SamplesUtils is not searchable on doc site and makes ML.NET learning curve sharp","State":"closed","Body":"We use `SamplesUtils` project in many examples. However, its functions and classes cannot be found in ML.NET's official doc site. This is not ideal because once a user has a question regarding `SamplesUtils` when learning our API examples, they will be blocked until they clones ML.NET or finds the right nuget package. This makes the learning curve of ML.NET very sharp. Also, please do not expect users have Visual Studio installed, so finding the right solution can be even more painful.","Url":"https://github.com/dotnet/machinelearning/issues/2794","RelatedDescription":"Closed issue \"SamplesUtils is not searchable on doc site and makes ML.NET learning curve sharp\" (#2794)"},{"Id":"416311750","IsPullRequest":false,"CreatedAt":"2019-03-01T22:54:18","Actor":"rogancarr","Number":"2820","RawContent":null,"Title":"Chains of Chains","State":"open","Body":"It is possible to nest `EstimatorChain`s inside one another, fit them, and use them to transform data. The result is an object that is a nested `TransformerChain`.\r\n\r\nQuestion: Is this intended behavior? Do we want to allow this sort of nesting in the V1 API?\r\n\r\nI think that the proper way to handle nesting is to **first flatten the structure before the fit and return a single `EstimatorChain`**. I believe that since there is no forking and joining, that nested and non-nested pipelines are identical, except for the returned object. Data transformed by these objects should be the same whether the pipeline is nested or not (and is in my limited testing).\r\n\r\nTake a look at the following example where we featurize the UCI Adult dataset.\r\n\r\n```cs\r\nvar mlContext = new MLContext(seed: 1, conc: 1);\r\n\r\n// Load the Adult (tiny) dataset\r\nvar data = mlContext.Data.LoadFromTextFile<Adult>(GetDataPath(TestDatasets.adult.trainFilename),\r\n    hasHeader: TestDatasets.adult.fileHasHeader,\r\n    separatorChar: TestDatasets.adult.fileSeparator);\r\n\r\n// Create the learning pipeline\r\nvar pipeline = mlContext.Transforms.Concatenate(\"NumericalFeatures\", Adult.NumericalFeatures)\r\n    .Append(mlContext.Transforms.Concatenate(\"CategoricalFeatures\", Adult.CategoricalFeatures))\r\n    .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(\"CategoricalFeatures\",\r\n        invertHash: 2, outputKind: OneHotEncodingTransformer.OutputKind.Bag))\r\n    .Append(mlContext.Transforms.Concatenate(\"Features\", \"NumericalFeatures\", \"CategoricalFeatures\"))\r\n    .Append(mlContext.BinaryClassification.Trainers.LogisticRegression());\r\n\r\n// Train the model.\r\nvar model = pipeline.Fit(data);\r\n```\r\n\r\nHere, `pipeline` is an `EstimatorChain<BinaryPredictionTransformer<...>>` and `model` is a `TransformerChain<BinaryPredictionTransformer<...>>`.\r\n\r\nIt's also possible to nest the pipeline. Perhaps you accidentally put an errant `)` here and there, and then you have this:\r\n```cs\r\n// Create the learning pipeline\r\nvar pipeline = mlContext.Transforms.Concatenate(\"NumericalFeatures\", Adult.NumericalFeatures)\r\n    .Append(mlContext.Transforms.Concatenate(\"CategoricalFeatures\", Adult.CategoricalFeatures))\r\n    .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(\"CategoricalFeatures\",\r\n        invertHash: 2, outputKind: OneHotEncodingTransformer.OutputKind.Bag) // <-- missing a )\r\n    .Append(mlContext.Transforms.Concatenate(\"Features\", \"NumericalFeatures\", \"CategoricalFeatures\"))\r\n    .Append(mlContext.BinaryClassification.Trainers.LogisticRegression())); // <-- extra )\r\n```\r\n\r\nNow, `pipeline` is an `EstimatorChain<EstimatorChain<BinaryPredictionTransformer<...>>>` and `model` is a `TransformerChain<TransformerChain<BinaryPredictionTransformer<...>>>`.\r\n\r\nNow, if I compare the two (where `var predictor = model.LastTransformer` and `var nestedPredictor = nestedModel.LastTransformer.LastTransformer`), it's clear that the models and the transformed data are identical:\r\n```cs\r\n//True!\r\nAssert.Equal(predictor.Model.SubModel.Bias, nestedPredictor.Model.SubModel.Bias);\r\nint nFeatures = predictor.Model.SubModel.Weights.Count;\r\nfor (int i = 0; i < nFeatures; i++ )\r\n    //True!\r\n    Assert.Equal(predictor.Model.SubModel.Weights[i], nestedPredictor.Model.SubModel.Weights[i]); \r\n\r\nvar transformedRows = mlContext.Data.CreateEnumerable<BinaryPrediction>(transformedData, false).ToArray();\r\nvar nestedTransformedRows = mlContext.Data.CreateEnumerable<BinaryPrediction>(nestedTransformedData, false).ToArray();\r\nfor (int i = 0; i < transformedRows.Length; i++)\r\n    //True!\r\n    Assert.Equal(transformedRows[i].Score, nestedTransformedRows[i].Score); \r\n```","Url":"https://github.com/dotnet/machinelearning/issues/2820","RelatedDescription":"Open issue \"Chains of Chains\" (#2820)"},{"Id":"416309715","IsPullRequest":true,"CreatedAt":"2019-03-01T22:46:44","Actor":"zeahmed","Number":"2819","RawContent":null,"Title":"Cleaned and fixed public API surface for KMeans, NaiveBayes, OLS.","State":"open","Body":"This is the final PR related to #2620. This PR finally fixes #2620\r\n\r\nThe following learners are addressed in this PR.\r\n\r\n* KMeansPlusPlusTrainer\r\n* MultiClassNaiveBayesTrainer (No sample for NaiveBayes opened issue #2818)\r\n* OlsLinearRegressionTrainer\r\n\r\nthe following tasks were performed in classes related to above learners.\r\n\r\nChecking to make sure that unnecessary public methods/properties be internal.\r\nRenaming parameters according to standard.\r\nCreating/Refactoring samples according to standards.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2819","RelatedDescription":"Open PR \"Cleaned and fixed public API surface for KMeans, NaiveBayes, OLS.\" (#2819)"},{"Id":"416308990","IsPullRequest":false,"CreatedAt":"2019-03-01T22:44:13","Actor":"zeahmed","Number":"2818","RawContent":null,"Title":"Create samples for NaiveBayes trainer.","State":"open","Body":"The samples are missing for NaiveBayes trainer.","Url":"https://github.com/dotnet/machinelearning/issues/2818","RelatedDescription":"Open issue \"Create samples for NaiveBayes trainer.\" (#2818)"},{"Id":"415898219","IsPullRequest":true,"CreatedAt":"2019-03-01T22:38:22","Actor":"wschin","Number":"2807","RawContent":null,"Title":"Make accessor of linear coefficients unique to the public","State":"closed","Body":"To fix #2763, we plan to hide one accessor in `LinearModelParameters` which is\r\n```csharp\r\nvolid GetFeatureWeights(ref VBuffer<float> weights)\r\n```\r\nand make the its containing interface a best friend.\r\n```csharp\r\ninternal interface IHaveFeatureWeights\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2807","RelatedDescription":"Closed or merged PR \"Make accessor of linear coefficients unique to the public\" (#2807)"},{"Id":"415904137","IsPullRequest":true,"CreatedAt":"2019-03-01T22:18:09","Actor":"Anipik","Number":"2809","RawContent":null,"Title":"correcting path construction when Resnet projets are consumed as a nuget package","State":"closed","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2785\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2809","RelatedDescription":"Closed or merged PR \"correcting path construction when Resnet projets are consumed as a nuget package\" (#2809)"},{"Id":"416247510","IsPullRequest":false,"CreatedAt":"2019-03-01T19:31:18","Actor":"rogancarr","Number":"2817","RawContent":null,"Title":"Create functional tests for all V1 Introspective Training scenarios","State":"open","Body":"As laid out in #2498 , we need scenarios to cover the Introspective Training functionality we want fully supported in V1.\r\n\r\n* I can take an existing model file and inspect what transformers were included in the pipeline\t \t \t\r\n* I can inspect the coefficients (weights and bias) of a linear model without much work. Easy to find via auto-complete.\t \t\t \r\n* I can inspect the normalization coefficients of a normalizer in my pipeline without much work. Easy to find via auto-complete.\t \t \t \r\n* I can inspect the trees of a boosted decision tree model without much work. Easy to find via auto-complete.\t \t \t \r\n* I can inspect the topics after training an LDA transform. Easy to find via auto-complete.\t \t \t \r\n* I can inspect a categorical transform and see which feature values map to which key values. Easy to find via auto-complete.\t \t \t \r\n* P1: I can access the GAM feature histograms through APIs","Url":"https://github.com/dotnet/machinelearning/issues/2817","RelatedDescription":"Open issue \"Create functional tests for all V1 Introspective Training scenarios\" (#2817)"},{"Id":"416241807","IsPullRequest":false,"CreatedAt":"2019-03-01T19:14:40","Actor":"sfilipi","Number":"2816","RawContent":null,"Title":"Follow up on removing the predicates from the IDataView methods signatures","State":"open","Body":"Following on [@Ivanidzo4ka comment](https://github.com/dotnet/machinelearning/pull/2796#discussion_r261487085) on PR #2796 we should not track column indices anymore through the codebase of the transforms, but the entire column for things like new columns, and active columns. \r\n\r\nTracking just indices is error prone. ","Url":"https://github.com/dotnet/machinelearning/issues/2816","RelatedDescription":"Open issue \"Follow up on removing the predicates from the IDataView methods signatures\" (#2816)"},{"Id":"416194794","IsPullRequest":true,"CreatedAt":"2019-03-01T17:03:05","Actor":"wschin","Number":"2815","RawContent":null,"Title":"[Tiny] Use string[] instead of IEnumerable<string> in column names","State":"open","Body":"There are three possible ways to denote input column names, `string[]`, `IEnumerable<string>`, and `params`. I personally like `string[]` because\r\n\r\n- `IEnumerable<string>` is not used elsewhere for the same purpose.\r\n- `params` makes signature less typed and it forces input column names to be the last argument group.\r\n\r\nFix #2801, Fix #2460.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2815","RelatedDescription":"Open PR \"[Tiny] Use string[] instead of IEnumerable<string> in column names\" (#2815)"},{"Id":"416189856","IsPullRequest":true,"CreatedAt":"2019-03-01T16:51:19","Actor":"yaeldekel","Number":"2814","RawContent":null,"Title":"Add sample for IndicateMissingValues","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/2814","RelatedDescription":"Open PR \"Add sample for IndicateMissingValues\" (#2814)"},{"Id":"416036873","IsPullRequest":false,"CreatedAt":"2019-03-01T10:26:16","Actor":"gouravbhatt","Number":"2813","RawContent":null,"Title":"StochasticDualCoordinateAscent not work For Multi-class after migrate to 0.10.0 Gives different Evaluation result Compare to 0.6.0","State":"open","Body":"**### System information**\r\n* **OS version/distro**: W7\r\n* **.NET Version (eg., dotnet --info)**:  4.7.2\r\n\r\n### Issue\r\n* **What did you do?** Migrated my code from 0.6.0 to 0.10.0\r\n* **What happened?** StochasticDualCoordinateAscentClassifire Algorithm is giving different Evaluation result with same train and test data.\r\n\r\n* **What did you expect?**\r\n  it should work fine\r\n\r\n### Source code / logs\r\n**version 0.6.0 Code**\r\n            string trainingDataLocation = \"Data/VendortrainData.csv\";\r\n            string testDataLocation = \"Data/VendortestData.csv\";\r\n\r\nvar pipeline = new LearningPipeline();\r\n            pipeline.Add(new TextLoader(_trainingDataLocation).CreateFrom<VendorData>(useHeader: true, separator: ','));\r\n            pipeline.Add(new ColumnConcatenator(\r\n                            \"Features\",\r\n                            \"VendorID\",\r\n                            \"Item\",\r\n                            \"TooEarly\",\r\n                            \"OnTime\",\r\n                            \"TooLate\",\r\n                            \"TooLittle\",\r\n                            \"Right\",\r\n                            \"TooMuch\"\r\n                          ));\r\n            pipeline.Add(new StochasticDualCoordinateAscentClassifier());\r\n            var model= pipeline.Train<VendorData, VendorPrediction>();\r\n            var SDCAMetrics = modelEvaluator.EvaluateClass(perceptronSDCA, testDataLocation);\r\n           **RESULT**\r\n           **AccuracyMacro** : 1\r\n           **AccuracyMacro** : 1\r\n\r\n\r\n**version 0.10.0 Code**\r\n      var dataProcessPipeline = mlContext.Transforms.Concatenate(outputColumnName: DefaultColumnNames.Features, \"VendorID\",\r\n                            \"Item\",\r\n                            \"TooEarly\",\r\n                            \"OnTime\",\r\n                            \"TooLate\",\r\n                            \"TooLittle\",\r\n                            \"Right\",\r\n                            \"TooMuch\")\r\n                .Append(mlContext.MulticlassClassification.Trainers.StochasticDualCoordinateAscent(DefaultColumnNames.Label, DefaultColumnNames.Features));\r\n\r\nITransformer trainedModel = dataProcessPipeline.Fit(trainingDataView);\r\n\r\n var predictions = trainedModel.Transform(testDataView);\r\n var metrics = mlContext.MulticlassClassification.Evaluate(data: predictions, label: DefaultColumnNames.Label, score: DefaultColumnNames.Score);\r\n\r\nConsoleHelper.PrintMultiClassClassificationMetrics(\"StochasticDualCoordinateAscent\", metrics);\r\n **RESULT**\r\n           **AccuracyMacro** : 0.11\r\n           **AccuracyMacro** : 0.25\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2813","RelatedDescription":"Open issue \"StochasticDualCoordinateAscent not work For Multi-class after migrate to 0.10.0 Gives different Evaluation result Compare to 0.6.0\" (#2813)"},{"Id":"415928781","IsPullRequest":true,"CreatedAt":"2019-03-01T03:46:32","Actor":"jwood803","Number":"2811","RawContent":null,"Title":"Read and write binary file documentation","State":"open","Body":"Fix for #1767.\r\n\r\n@GalOshri, I took a stab at this. I figured a sample and included snippets in the cookbook would be a good start.","Url":"https://github.com/dotnet/machinelearning/pull/2811","RelatedDescription":"Open PR \"Read and write binary file documentation\" (#2811)"},{"Id":"415911044","IsPullRequest":false,"CreatedAt":"2019-03-01T02:23:06","Actor":"prathyusha12345","Number":"2810","RawContent":null,"Title":"IRISClassification sample -MultiLabel calssification : Getting exception while referring slotnames","State":"open","Body":"@Ivanidzo4ka \r\nI am trying to do multilabel classification on IRISClassification. I am referring to this link https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Tests/Scenarios/Api/Estimators/PredictAndMetadata.cs#L41\r\n\r\nWhile I am running the code I am getting below exception 'Invalid call to 'GetGetter'' while accessing slotnames.\r\n\r\n![image](https://user-images.githubusercontent.com/22335043/53612079-bbdca700-3b85-11e9-968a-e0fc5e4b19c7.png)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2810","RelatedDescription":"Open issue \"IRISClassification sample -MultiLabel calssification : Getting exception while referring slotnames\" (#2810)"},{"Id":"415903032","IsPullRequest":true,"CreatedAt":"2019-03-01T01:45:28","Actor":"singlis","Number":"2808","RawContent":null,"Title":"Scrub changes for LightGBM","State":"open","Body":"Api clean up for LightGBM. The cleanup includes:\r\n- Changing all abbreviated parameters to full names (i.e. numThreads->NumberOfThreads)\r\n- Updating column parameters to have Name if thats what they represent\r\n(LabelColumn->LabelColumnName).\r\n- Updated baseline files to reflect these changes which are semantical\r\nand should not have any computational difference.\r\n\r\nThis fixes #2618 (related to FastTree and GAM in #2617)","Url":"https://github.com/dotnet/machinelearning/pull/2808","RelatedDescription":"Open PR \"Scrub changes for LightGBM\" (#2808)"},{"Id":"415885683","IsPullRequest":false,"CreatedAt":"2019-03-01T00:27:28","Actor":"daholste","Number":"2806","RawContent":null,"Title":"My data view has a label column named 'Score'","State":"open","Body":"My data view has a label column named 'Score'\r\n\r\nIs there any way to have trainers output scores to a column other than the default 'Score'?\r\n\r\nThis may also apply to 'PredictedLabel'. Not sure if there are others","Url":"https://github.com/dotnet/machinelearning/issues/2806","RelatedDescription":"Open issue \"My data view has a label column named 'Score'\" (#2806)"},{"Id":"415873095","IsPullRequest":false,"CreatedAt":"2019-02-28T23:36:53","Actor":"singlis","Number":"2805","RawContent":null,"Title":"OneVersusAll calibrator for naturally calibrated models","State":"open","Body":"This question came up during a code review of some changes to the One Versus All (OVA) Trainer. The OVA Trainer takes in a calibrator. If one is not specified, the PlattCalibrator is then used. After looking at the code, it looks like the calibrator is attached to each model instance that the OVA Trainer evaluates. \r\n\r\nThe question is what happens when you are using a naturally calibrated mode like logistic regression? Can this produce unexpected results?","Url":"https://github.com/dotnet/machinelearning/issues/2805","RelatedDescription":"Open issue \"OneVersusAll calibrator for naturally calibrated models\" (#2805)"},{"Id":"415868052","IsPullRequest":true,"CreatedAt":"2019-02-28T23:17:51","Actor":"Ivanidzo4ka","Number":"2804","RawContent":null,"Title":"[WIP] One type label policy in trainers","State":"open","Body":"Waiting for build system to get information regarding tests. This PR fixes #2628 and fixes #2750.\r\n\r\nWe probably need discuss ranking case.","Url":"https://github.com/dotnet/machinelearning/pull/2804","RelatedDescription":"Open PR \"[WIP] One type label policy in trainers\" (#2804)"},{"Id":"415865454","IsPullRequest":true,"CreatedAt":"2019-02-28T23:08:19","Actor":"rogancarr","Number":"2803","RawContent":null,"Title":"Add V1 Scenario tests for data transformation","State":"open","Body":"Fixes #2711 \r\nTowards #2498 \r\n\r\n* Extensible transformation: It should be possible to write simple row-mapping transforms.\r\n  Examples: \"I can add custom steps to my pipeline such as creating a new column that is the addition of two other columns, or easily add cosine similarity, without having to create my own build of ML.NET.\r\n* I can modify settings in the TextFeaturizer to update the number of word-grams and char-grams used along with things like the normalization.\r\n* I can apply normalization to the columns of my data","Url":"https://github.com/dotnet/machinelearning/pull/2803","RelatedDescription":"Open PR \"Add V1 Scenario tests for data transformation\" (#2803)"},{"Id":"415855951","IsPullRequest":false,"CreatedAt":"2019-02-28T22:37:34","Actor":"rogancarr","Number":"2802","RawContent":null,"Title":"TextFeaturizer cannot specify n-grams for words or characters","State":"open","Body":"One of the stated goals of the V1 API was:\r\n* I can modify settings in the `TextFeaturizer` to update the number of word-grams and char-grams used along with things like the normalization.\r\n\r\nIn the current API for `TextFeaturizer`, it is possible to create n-grams from words and/or characters (`UseCharExtrator`, `UseWordExtractor`) but it is not possible to specify what sorts of n-grams to make.\r\n\r\nRelated to #2711 ","Url":"https://github.com/dotnet/machinelearning/issues/2802","RelatedDescription":"Open issue \"TextFeaturizer cannot specify n-grams for words or characters\" (#2802)"},{"Id":"415850935","IsPullRequest":false,"CreatedAt":"2019-02-28T22:22:19","Actor":"rogancarr","Number":"2801","RawContent":null,"Title":"TextFeaturizer API is non-standard","State":"open","Body":"When specifying the input columns, `TextFeaturizer` specifies an `IEnumerable<string>`. The standard in the API is to specify a `string[]`.\r\n\r\nThis API should be updated to be consistent with the others. If we prefer `IEnumerable`, then we should switch all the other APIs.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2801","RelatedDescription":"Open issue \"TextFeaturizer API is non-standard\" (#2801)"},{"Id":"415795587","IsPullRequest":true,"CreatedAt":"2019-02-28T19:52:52","Actor":"codemzs","Number":"2800","RawContent":null,"Title":"Rename HalLearners assembly and nuget to Microsoft.ML.Mkl.Components.","State":"open","Body":"fixes #2756\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2800","RelatedDescription":"Open PR \"Rename HalLearners assembly and nuget to Microsoft.ML.Mkl.Components.\" (#2800)"},{"Id":"415785190","IsPullRequest":true,"CreatedAt":"2019-02-28T19:26:20","Actor":"sfilipi","Number":"2799","RawContent":null,"Title":"Adding a sample for the OnnxCatalog.DnnFeaturizeImage extension","State":"open","Body":"Adding to #1209 an example for OnnxCatalog.DnnFeaturizeImage\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2799","RelatedDescription":"Open PR \"Adding a sample for the OnnxCatalog.DnnFeaturizeImage extension\" (#2799)"},{"Id":"415760739","IsPullRequest":false,"CreatedAt":"2019-02-28T18:24:16","Actor":"lisahua","Number":"2798","RawContent":null,"Title":"Normalize double min and max value returns NaN","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: .Net 4.6.2, Win 10\r\n- **.NET Version (eg., dotnet --info)**: ML.Net nuget 0.10.1\r\n\r\n### Issue\r\n\r\n- **What did you do?** Input data has a double columns with (double.min, double.max, <100 random numbers from 0 to 10000>), I call \r\n```\r\n            var normalizeColumns = numericalFeatures.Select(\r\n                f => new NormalizingEstimator.MeanVarColumn(f.Name, fixZero: false, useCdf: false)).ToArray();\r\n            var normalizingEstimator = this.context.Transforms.Normalize(normalizeColumns);\r\n```\r\nI see a feature in transformedData.Preview, which is all NaN, for each row. I use SDCA trainer\r\n\r\n- **What happened?** \r\n\r\nThe `pipeline.Fit(transformedData)` fails and throw an exception say \"train with 0 instances\"\r\n\r\n- **What did you expect?**\r\n\r\n1. ML.Net should handle double.min, double.max for NormalizingEstimator?\r\n2. ML.Net should throw a more meaningful exception - \"train with 0 instances\" for a feature with NaN is a bit misleading - I do have 100+ rows for this feature. \r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2798","RelatedDescription":"Open issue \"Normalize double min and max value returns NaN\" (#2798)"},{"Id":"415750225","IsPullRequest":true,"CreatedAt":"2019-02-28T17:56:48","Actor":"codemzs","Number":"2797","RawContent":null,"Title":"Clean up of cancellation mechanism.","State":"open","Body":"fixes #2795","Url":"https://github.com/dotnet/machinelearning/pull/2797","RelatedDescription":"Open PR \"Clean up of cancellation mechanism.\" (#2797)"},{"Id":"415748146","IsPullRequest":true,"CreatedAt":"2019-02-28T17:52:03","Actor":"sfilipi","Number":"2796","RawContent":null,"Title":"Replace predicate with an IEnumerable<DataViewSchema.Column> for IRowToRowMapper.GetRow and  ISchemaBoundRowMapper.GetRow","State":"open","Body":"Closes #1529 \r\n\r\nNote to reviewers: The first commit does all the replacement work. \r\nThe second commit, has more files on it, because it deals with renaming the col to columnIndex in the other two methods of IDataView (@eerhardt comment on #1529)\r\nThe third commit is me reviewing the first commit, and making sure that GetRow is an explicit implementation everywhere. \r\n\r\nI have had most of the work on this PR done before breaking ISchemaBoundRowMapper deriving from IRowToRowMapper; so I kept the signature change of ISchemaBoundRowMapper.GetRow although that interface is internal. LMK if that is not desirable. ","Url":"https://github.com/dotnet/machinelearning/pull/2796","RelatedDescription":"Open PR \"Replace predicate with an IEnumerable<DataViewSchema.Column> for IRowToRowMapper.GetRow and  ISchemaBoundRowMapper.GetRow\" (#2796)"},{"Id":"415745269","IsPullRequest":false,"CreatedAt":"2019-02-28T17:45:04","Actor":"Ivanidzo4ka","Number":"2795","RawContent":null,"Title":"HostEnvironment StopExecution method removal","State":"open","Body":"Some time ago I added `StopExecution` method and `IsCancelled` flag to IHost.\r\nhttps://github.com/dotnet/machinelearning/blob/fbf282d982223a51cf6e4a9ad9f3f036e0f150ca/src/Microsoft.ML.Core/Data/IHostEnvironment.cs#L98\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/fbf282d982223a51cf6e4a9ad9f3f036e0f150ca/src/Microsoft.ML.Core/Data/IHostEnvironment.cs#L74\r\n\r\nIt was quick solution to make certain algorithms react to stop signal from user. I doubt in long run it's proper way to do it. And it probably required lengthy discussion how to expose stopping functionality (method, or `CancellationToken`, or something else).\r\n\r\nBut for now I think it's a good idea to remove method and flag from our public API. Especially considering what no code actually checking `IsCancelled` flag.","Url":"https://github.com/dotnet/machinelearning/issues/2795","RelatedDescription":"Open issue \"HostEnvironment StopExecution method removal\" (#2795)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-03T05:30:31.4142469Z","RunDurationInMilliseconds":479}