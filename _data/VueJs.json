{"Data":{"Vue":{"Events":[{"Id":"7301173442","Type":"IssuesEvent","CreatedAt":"2018-02-27T03:31:29","Actor":"yyx990803","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/7716","RelatedDescription":"Closed issue \"Reactive property warnings lead to different behavior between `vue.js` and `vue.min.js`\" (#7716) at vuejs/vue","RelatedBody":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codepen.io/RyanNHG/pen/jZQWaz](https://codepen.io/RyanNHG/pen/jZQWaz)\r\n\r\n### Steps to reproduce\r\nCheck out the working example (using minified Vue 2.5.13):\r\nhttps://codepen.io/RyanNHG/pen/gvQPGg\r\n\r\nAnd compare it to this failing example (using dev Vue 2.5.13):\r\nhttps://codepen.io/RyanNHG/pen/jZQWaz\r\n\r\n### What is expected?\r\nI expect the minified and dev versions of Vue to result in the same outcome.\r\n\r\nThe `fromParent` property is defined on the parent, and I'd expect it to render in the child, even though it isn't explicitly defined on the `data` prop.\r\n\r\nPreferably, VueJS warnings wouldn't lead to any components failing to compile.\r\n\r\n### What is actually happening?\r\nIn the minified, production build, this code works as expected. But in the developer build, I am getting a warning that prevents the component from compiling.\r\n\r\n---\r\nI assume this is to prevent me from making a typo, or forgetting to add a data property to my child component.\r\n\r\nThese warning are super useful in general (thanks for taking the time to make them!)\r\n\r\nLet me know if you need any more examples to help you with this issue. Thanks again!\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"7299489930","Type":"IssuesEvent","CreatedAt":"2018-02-26T20:17:42","Actor":"vue-issue-bot","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2075","RelatedDescription":"Closed issue \"Make route change wait for store update?\" (#2075) at vuejs/vue-router","RelatedBody":"My question is, when clicking a link, is there any way to make the route change wait for the vuex store to be updated? I'm setting some store variables on link click, but sometimes the route change is a tiny bit to fast."},{"Id":"7299489859","Type":"IssuesEvent","CreatedAt":"2018-02-26T20:17:41","Actor":"jesperlandberg","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2075","RelatedDescription":"Opened issue \"Make route change wait for store update?\" (#2075) at vuejs/vue-router","RelatedBody":"My question is, when clicking a link, is there any way to make the route change wait for the vuex store to be updated? I'm setting some store variables on link click, but sometimes the route change is a tiny bit to fast."},{"Id":"7296515012","Type":"IssuesEvent","CreatedAt":"2018-02-26T11:01:21","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2074","RelatedDescription":"Closed issue \"Full support for anchor tags\" (#2074) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nAnchor tags cannot be implemented correctly in the current state of things. There are a few techniques to hack a way around, but none of them seem to cover all the following cases:\r\n\r\n- Paths with anchors should always lead to the anchor if reached multiple times (currently, only the first time works, even by refreshing the page)\r\n- Anchor tags urls should be shareable (users should be capable of bookmarking/sharing URLs, in a way that the URL will lead them back directly to the anchor)\r\n\r\nAFAIK, there two solutions currently that partially support those requirements: [vue-router Scroll behavior](https://router.vuejs.org/en/advanced/scroll-behavior.html) that does not support first requirement in a robust manner, and [vue-scrollto](https://github.com/rigor789/vue-scrollto) that does not support second requirement since it's just scrolling without any sense of routing/url.\r\n\r\n### What does the proposed API look like?\r\nThe API is already there, using the hash field\r\n\r\n```\r\n<router-link :to=\"{name: 'SomeVue', hash:'#anchor'}\">Link to anchor</router-link>\r\n\r\n// or\r\n\r\n<a href=\"/somevue#anchor>Link to anchor</a>\r\n```\r\n\r\n```\r\n<div id=\"anchor\">Anchor</div>\r\n```\r\n\r\nWe only need to implement the proper behavior for supporting use cases presented above.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7295658460","Type":"IssuesEvent","CreatedAt":"2018-02-26T07:57:06","Actor":"Overdrivr","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2074","RelatedDescription":"Opened issue \"Full support for anchor tags\" (#2074) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nAnchor tags cannot be implemented correctly in the current state of things. There are a few techniques to hack a way around, but none of them seem to cover all the following cases:\r\n\r\n- Paths with anchors should always lead to the anchor if reached multiple times (currently, only the first time works, even by refreshing the page)\r\n- Anchor tags urls should be shareable (users should be capable of bookmarking/sharing URLs, in a way that the URL will lead them back directly to the anchor)\r\n\r\nAFAIK, there two solutions currently that partially support those requirements: [vue-router Scroll behavior](https://router.vuejs.org/en/advanced/scroll-behavior.html) that does not support first requirement in a robust manner, and [vue-scrollto](https://github.com/rigor789/vue-scrollto) that does not support second requirement since it's just scrolling without any sense of routing/url.\r\n\r\n### What does the proposed API look like?\r\nThe API is already there, using the hash field\r\n\r\n```\r\n<router-link :to=\"{name: 'SomeVue', hash:'#anchor'}\">Link to anchor</router-link>\r\n\r\n// or\r\n\r\n<a href=\"/somevue#anchor>Link to anchor</a>\r\n```\r\n\r\n```\r\n<div id=\"anchor\">Anchor</div>\r\n```\r\n\r\nWe only need to implement the proper behavior for supporting use cases presented above.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7294945072","Type":"IssuesEvent","CreatedAt":"2018-02-26T03:33:44","Actor":"chebysheph","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2073","RelatedDescription":"Closed issue \"\"localhost:8080/#/\" changed to \"localhost:8080/?#/\" ?\" (#2073) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nFor example, in page \"localhost:8080/#/temp1\" has a input tag, when I modified the input value, and press \"enter\" button, because I did not add \"@keydown.enter\" event on the input tag, so the page url become to \"localhost:8080/?#/login\", but the right result should be \"localhost:8080/#/login\", so  I would like to know how the \"?\" add into the url?And what exactly happened when I press \"enter\" button?\r\n\r\n### What does the proposed API look like?\r\nFor example, in page \"localhost:8080/#/temp1\" has a input tag, when I modified the input value, and press \"enter\" button, because I did not add \"@keydown.enter\" event on the input tag, so the page url become to \"localhost:8080/?#/login\", but the right result should be \"localhost:8080/#/login\", so  I would like to know how the \"?\" add into the url?And what exactly happened when I press \"enter\" button?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7294816907","Type":"IssuesEvent","CreatedAt":"2018-02-26T02:43:19","Actor":"chebysheph","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2073","RelatedDescription":"Opened issue \"\"localhost:8080/#/\" changed to \"localhost:8080/?#/\" ?\" (#2073) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nFor example, in page \"localhost:8080/#/temp1\" has a input tag, when I modified the input value, and press \"enter\" button, because I did not add \"@keydown.enter\" event on the input tag, so the page url become to \"localhost:8080/?#/login\", but the right result should be \"localhost:8080/#/login\", so  I would like to know how the \"?\" add into the url?And what exactly happened when I press \"enter\" button?\r\n\r\n### What does the proposed API look like?\r\nFor example, in page \"localhost:8080/#/temp1\" has a input tag, when I modified the input value, and press \"enter\" button, because I did not add \"@keydown.enter\" event on the input tag, so the page url become to \"localhost:8080/?#/login\", but the right result should be \"localhost:8080/#/login\", so  I would like to know how the \"?\" add into the url?And what exactly happened when I press \"enter\" button?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"7297696337","Type":"IssuesEvent","CreatedAt":"2018-02-26T14:58:31","Actor":"ktsn","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/issues/1165","RelatedDescription":"Closed issue \"Vuex triggers the 'updated' hook when a completely unrelated dynamic module is being registered\" (#1165) at vuejs/vuex","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/132227/](https://jsfiddle.net/50wL7mdz/132227/)\r\n\r\n### Steps to reproduce\r\nNo steps to reproduce.\r\nJust open the jsfiddle, you will see an alert that is called by the updated() hook. \r\n\r\n### What is expected?\r\nThe alert should not be displayed  because the registration of a new unrelated dynamic module should not trigger anything anywhere that is has no connection to.\r\n\r\n### What is actually happening?\r\nThe component triggers updated() hook when dynamically registering an unrelated module\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7297240861","Type":"IssuesEvent","CreatedAt":"2018-02-26T13:39:13","Actor":"chetzof","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/issues/1165","RelatedDescription":"Opened issue \"Vuex triggers the 'updated' hook when a completely unrelated dynamic module is being registered\" (#1165) at vuejs/vuex","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/132227/](https://jsfiddle.net/50wL7mdz/132227/)\r\n\r\n### Steps to reproduce\r\nNo steps to reproduce.\r\nJust open the jsfiddle, you will see an alert that is called by the updated() hook. \r\n\r\n### What is expected?\r\nThe alert should not be displayed  because the registration of a new unrelated dynamic module should not trigger anything anywhere that is has no connection to.\r\n\r\n### What is actually happening?\r\nThe component triggers updated() hook when dynamically registering an unrelated module\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"}},"RunOn":"2018-02-27T05:30:31.6946727Z","RunDurationInMilliseconds":1909}