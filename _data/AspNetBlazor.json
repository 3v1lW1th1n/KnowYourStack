{"Data":{"GitHubIssues":{"Issues":[{"Id":"363415631","IsPullRequest":false,"CreatedAt":"2018-09-25T05:29:17","Actor":"danroth27","Number":"1478","RawContent":null,"Title":"Blazor server-side project has incorrect version for Microsoft.AspNetCore.Razor.Design","State":"open","Body":"I created a new Blazor server-side project with the latest dev build from myget, and it looks like the Server project isn't populating the version of the Microsoft.AspNetCore.Razor.Design package correctly:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <RestoreAdditionalProjectSources>\r\n      https://dotnet.myget.org/f/blazor-dev/api/v3/index.json;\r\n    </RestoreAdditionalProjectSources>\r\n    <LangVersion>7.3</LangVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Server\" Version=\"0.6.0-preview1-20180924.3\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"$(TemplateRazorDesignPackageVersion)\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\WebApplication8.App\\WebApplication8.App.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1478","RelatedDescription":"Open issue \"Blazor server-side project has incorrect version for Microsoft.AspNetCore.Razor.Design\" (#1478)"},{"Id":"362963567","IsPullRequest":true,"CreatedAt":"2018-09-24T19:22:17","Actor":"rynowak","Number":"1470","RawContent":null,"Title":"Adds support for 'Context' parameters on components","State":"closed","Body":"Adds support for 'Context' parameters on components\r\n\r\nThis change allows you to set the parameter name of a parameterized child content by using the `Context` attribute on the component. The `Context` attribute will be defined (and shown by completion) when the component has one or more declared parameterized (`RenderFragment<>`) child content parameters.\r\n\r\nThis is nice for cases where you are using implicit child content:\r\n\r\n```\r\n<ol>\r\n  <Repeater Items=\"People\" Context=\"person\">\r\n    <li>@person.FirstName</li>\r\n  </Repeater>\r\n</ol>\r\n```\r\n\r\n or, when you have multiple child content elements and want them all to have the same parameter name:\r\n\r\n ```\r\n<MyComponent Items=\"People\" Context=\"person\">\r\n    <ChildContent1><div>@person.FirstName</div></ChildContent1>\r\n    <ChildContent2><div>@person.LastName</div></ChildContent2>\r\n</Repeater>\r\n```\r\n\r\nThe parameter name can be overridden by using the `Context` parameter on the child content element:\r\n\r\n ```\r\n<MyComponent Items=\"People\" Context=\"person\">\r\n    <ChildContent1 Context=\"item\"><div>@item.FirstName</div></ChildContent1>\r\n    <ChildContent2><div>@person.LastName</div></ChildContent2>\r\n</Repeater>\r\n```\r\n\r\nIf the component defines a `Context` parameter already then we won't synthesize one - your component's parameter will work exactly as it did before this feature. ","Url":"https://github.com/aspnet/Blazor/pull/1470","RelatedDescription":"Closed or merged PR \"Adds support for 'Context' parameters on components\" (#1470)"},{"Id":"363244367","IsPullRequest":true,"CreatedAt":"2018-09-24T17:43:01","Actor":"rynowak","Number":"1477","RawContent":null,"Title":"Correct template package reference","State":"closed","Body":"FYI only","Url":"https://github.com/aspnet/Blazor/pull/1477","RelatedDescription":"Closed or merged PR \"Correct template package reference\" (#1477)"},{"Id":"363184248","IsPullRequest":true,"CreatedAt":"2018-09-24T16:55:22","Actor":"SteveSandersonMS","Number":"1474","RawContent":null,"Title":"Fix negative route params. Fixes #1437","State":"closed","Body":"Tweaked version of #1471. Thanks, @KristianJakubik!","Url":"https://github.com/aspnet/Blazor/pull/1474","RelatedDescription":"Closed or merged PR \"Fix negative route params. Fixes #1437\" (#1474)"},{"Id":"363198229","IsPullRequest":true,"CreatedAt":"2018-09-24T16:54:47","Actor":"SteveSandersonMS","Number":"1476","RawContent":null,"Title":"Switch Hosted template to UseBlazor<Startup> for consistency with server-side template. Fixes #1473","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1476","RelatedDescription":"Closed or merged PR \"Switch Hosted template to UseBlazor<Startup> for consistency with server-side template. Fixes #1473\" (#1476)"},{"Id":"363178189","IsPullRequest":false,"CreatedAt":"2018-09-24T16:14:32","Actor":"danroth27","Number":"1473","RawContent":null,"Title":"Switch the ASP.NET Core hosted template to use app.UseBlazor<Client.Startup>()","State":"closed","Body":"Currently the ASP.NET Core hosted template points to the `Program` class in the Client project. For consistency with server-side Blazor we should switch it to point to the `Startup` class: `app.UseBlazor<Client.Startup>()`.","Url":"https://github.com/aspnet/Blazor/issues/1473","RelatedDescription":"Closed issue \"Switch the ASP.NET Core hosted template to use app.UseBlazor<Client.Startup>()\" (#1473)"},{"Id":"362979172","IsPullRequest":true,"CreatedAt":"2018-09-24T16:13:55","Actor":"KristianJakubik","Number":"1471","RawContent":null,"Title":"Fix negative route params","State":"closed","Body":"Fix #1437.\r\n\r\nNow you should be able to use negative int and long as url parameters.","Url":"https://github.com/aspnet/Blazor/pull/1471","RelatedDescription":"Closed or merged PR \"Fix negative route params\" (#1471)"},{"Id":"363194642","IsPullRequest":true,"CreatedAt":"2018-09-24T15:20:09","Actor":"SteveSandersonMS","Number":"1475","RawContent":null,"Title":"Marshal oninput events as UIChangeEventArgs","State":"open","Body":"- Blazor does handle the oninput event, but it is marshalled as a regular UIEventArgs\r\n- This means that we cannot access the new value of the input element from inside our oninput handler\r\n\r\nAddresses #821 \r\n\r\nThis is @sebbert's contribution. I just tweaked it by adding a further E2E test. Thanks @sebbert!","Url":"https://github.com/aspnet/Blazor/pull/1475","RelatedDescription":"Open PR \"Marshal oninput events as UIChangeEventArgs\" (#1475)"},{"Id":"363014257","IsPullRequest":false,"CreatedAt":"2018-09-24T04:58:19","Actor":"giangcoi48k","Number":"1472","RawContent":null,"Title":"blazor code behind","State":"closed","Body":"Why blazor does not have code behind file, like old style webform or new style razor web pages?","Url":"https://github.com/aspnet/Blazor/issues/1472","RelatedDescription":"Closed issue \"blazor code behind\" (#1472)"},{"Id":"362904797","IsPullRequest":false,"CreatedAt":"2018-09-23T19:32:30","Actor":"maxild","Number":"1467","RawContent":null,"Title":"Building the repo with v0.5.1 tooling (Microsoft.VisualStudio.BlazorExtension.vsix) installed","State":"closed","Body":"Following the getting started guide, I installed the (latest) v0.5.1 Blazor Language Services extension from the Visual Studio Marketplace. \r\n\r\nAfter creating a few projects with vs2017, I cloned the repo (with submodules) \r\n\r\n```\r\ngit clone https://github.com/aspnet/Blazor.git\r\ngit submodule update --init --recursive\r\n```\r\n\r\nBut it seems that having installed the v0.5.1 Blazor Language Services extension interferes with the build both using cli (running ```build.cmd```) and building inside vs2017. Some Razor tooling exited with non-zero status code, and I got the message:\r\n\r\n* \"rzc discover exited with code 1\"\r\n\r\nThis [comment](https://github.com/aspnet/Blazor/issues/662#issuecomment-384081422) and the fact that the build VSIX couldn't get deployed (because a higher version was installed), made me uninstall the v0.5.1 Blazor Language Services extension. \r\n\r\nAfter uninstalling the v0.5.1 VSIX the build succeeded on the commandline and in vs2017.\r\n\r\nQuestions:\r\n\r\n1. Does installing the v0.5.1 VSIX make it impossible to build the repo (master branch)?\r\n2. Are there any Build Properties I can use for building the repo and having the v0.5.1 tooling installed at the same time? ","Url":"https://github.com/aspnet/Blazor/issues/1467","RelatedDescription":"Closed issue \"Building the repo with v0.5.1 tooling (Microsoft.VisualStudio.BlazorExtension.vsix) installed\" (#1467)"},{"Id":"362940293","IsPullRequest":false,"CreatedAt":"2018-09-23T12:53:30","Actor":"bariscanyilmaz","Number":"1469","RawContent":null,"Title":"I take an error blazor.boot.json not found","State":"open","Body":"I create new blazor prÄ±ject in serverside asp.net core and i start project it's not working \r\nand \r\n![blazor](https://user-images.githubusercontent.com/30300440/45928195-48849880-bf48-11e8-8f0f-25b3329c86ab.PNG)\r\ni try this solution it is not working. i download blazor project from codeproject. its blazor server version is 0.4 and i run this it is working\r\ncan any dody solve this\r\n","Url":"https://github.com/aspnet/Blazor/issues/1469","RelatedDescription":"Open issue \"I take an error blazor.boot.json not found\" (#1469)"},{"Id":"362753628","IsPullRequest":false,"CreatedAt":"2018-09-23T07:37:26","Actor":"uwefms","Number":"1461","RawContent":null,"Title":"displaying / downloading pdf in server-side blazor","State":"closed","Body":"Is there a way to display a pdf file in server-side blazor like I can do in client-side blazor in a controller like:\r\n\r\n       [HttpGet]\r\n        public IActionResult CreatePDF()\r\n        {\r\n            var globalSettings = new GlobalSettings\r\n            {\r\n                ColorMode = ColorMode.Color,\r\n                Orientation = Orientation.Portrait,\r\n                PaperSize = PaperKind.A4,\r\n                Margins = new MarginSettings { Top = 10 },\r\n                DocumentTitle = \"PDF Report\",\r\n            };\r\n \r\n            var objectSettings = new ObjectSettings\r\n            {\r\n                PagesCount = true,\r\n                HtmlContent = TemplateGenerator.GetHTMLString(),\r\n                WebSettings = { DefaultEncoding = \"utf-8\", UserStyleSheet =  Path.Combine(Directory.GetCurrentDirectory(), \"assets\", \"styles.css\") },\r\n                HeaderSettings = { FontName = \"Arial\", FontSize = 9, Right = \"Page [page] of [toPage]\", Line = true },\r\n                FooterSettings = { FontName = \"Arial\", FontSize = 9, Line = true, Center = \"Report Footer\" }\r\n            };\r\n \r\n            var pdf = new HtmlToPdfDocument()\r\n            {\r\n                GlobalSettings = globalSettings,\r\n                Objects = { objectSettings }\r\n            };\r\n\t\t\tCustomAssemblyLoadContext context = new CustomAssemblyLoadContext();\t\t\t\r\n\t\t\tcontext.LoadUnmanagedLibrary(\"C:\\\\Dinktopdf\\\\libwkhtmltox.dll\");\t\t\t\r\n\r\n\t\t\tvar file = _converter.Convert(pdf);\r\n\t\t\treturn File(file, \"application/pdf\");\r\n        }\r\n\r\n\r\nAt server-side I fail using\r\n\r\nreturn File(file, \"application/pdf\");\r\n\r\nwhich only seems to work in controllers which I did not get to work either.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1461","RelatedDescription":"Closed issue \"displaying / downloading pdf in server-side blazor\" (#1461)"},{"Id":"362921295","IsPullRequest":false,"CreatedAt":"2018-09-23T07:34:57","Actor":"MBotman","Number":"1468","RawContent":null,"Title":"Asp.Net hosted template solution only contains shared project","State":"open","Body":"When generating a new Blazor project using the \"Blazor (ASP.NET Core hosted)\" template, a solution is generated with only the shared project in it. The other projects are created but not included in the solution.\r\n\r\nWin10, VS2017 15.8.5, dotnet 2.1..402","Url":"https://github.com/aspnet/Blazor/issues/1468","RelatedDescription":"Open issue \"Asp.Net hosted template solution only contains shared project\" (#1468)"},{"Id":"362849527","IsPullRequest":false,"CreatedAt":"2018-09-23T04:43:09","Actor":"BenjaminLinus1964","Number":"1463","RawContent":null,"Title":"Code obfuscation in Blazor","State":"closed","Body":"The code obfuscation helps us convert source code into completely unreadable form, preventing it from analyzing and theft etc. What tool or approach offers Blazor? Thanks in advance.","Url":"https://github.com/aspnet/Blazor/issues/1463","RelatedDescription":"Closed issue \"Code obfuscation in Blazor\" (#1463)"},{"Id":"362898465","IsPullRequest":true,"CreatedAt":"2018-09-22T23:39:28","Actor":"rynowak","Number":"1466","RawContent":null,"Title":"Undo hardcoded Razor.Design in templates","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1466","RelatedDescription":"Closed or merged PR \"Undo hardcoded Razor.Design in templates\" (#1466)"},{"Id":"362888572","IsPullRequest":false,"CreatedAt":"2018-09-22T20:33:18","Actor":"Liander","Number":"1465","RawContent":null,"Title":"Support for an element extension mechanism","State":"open","Body":"One use-case for having an extension mechanism on existing elements is already given here: https://github.com/aspnet/Blazor/issues/404#issuecomment-413037767, which can be used for form validation and the like. I didn't get any response on that so I will provide a little more extensive description this time to see if there is some interest. This time will be about providing a typed manner for Bootstrap concepts. \r\nLet say we want to write:\r\n```html\r\n <ul Type=\"ListGroup\">\r\n    <li Active>First item</li>\r\n    <li>Second item</li>\r\n    <li>Third item</li>\r\n </ul>\r\n```\r\ninstead of:\r\n```html\r\n <ul class=\"list-group\">\r\n    <li class=\"list-group-item active\">First item</li>\r\n    <li class=\"list-group-item\">Second item</li>\r\n    <li class=\"list-group-item\">Third item</li>\r\n </ul>\r\n```\r\nand this:\r\n```html\r\n<nav Type=\"Navbar\" Expand=\"S\" Color.Background=\"Dark\" NavbarDark>\r\n   <a Brand href=\"#\">Logo</a>\r\n   <ul>\r\n      <li><a href=\"#\">Link 1</a></li>\r\n      <li><a href=\"#\">Link 2</a></li>\r\n      <li><a href=\"#\">Link 3</a></li>\r\n   </ul>\r\n</nav>\r\n```\r\ninstead of:\r\n```html\r\n<nav class=\"navbar navbar-expand-sm bg-dark navbar-dark\">\r\n  <a class=\"navbar-brand\" href=\"#\">Logo</a>\r\n  <ul class=\"navbar-nav\">\r\n    <li class=\"nav-item\">\r\n      <a class=\"nav-link\" href=\"#\">Link 1</a>\r\n    </li>\r\n    <li class=\"nav-item\">\r\n      <a class=\"nav-link\" href=\"#\">Link 2</a>\r\n    </li>\r\n    <li class=\"nav-item\">\r\n      <a class=\"nav-link\" href=\"#\">Link 3</a>\r\n    </li>\r\n  </ul>\r\n</nav>\r\n```\r\nand get those extended attributes, Type, Expand, Color, etc. in a typed manner!\r\n\r\nTo describe how that can be accomplished I am getting into muddy watersâ¦ so take it with a grain of saltâ¦ but I am imagining a way to specify those extensions similar to this\r\n\r\n```cs\r\n[ElementExtension(AttributeName = \"Type\", TargetElements = \"ul, div\")]\r\npublic class ListType : ISingleValueProperty\r\n{\r\n   [Parameter]\r\n   [StringLiteralConversion] \r\n   ListGroupValue Value { get; set; }\r\n\r\n   void OnContentBegin(builder, renderSettings);  // Extends class attribute during render\r\n}\r\n\r\n[ElementExtension(AttributeName = \"Colors\", ExcludeType = ElementType.VoidElement)]\r\npublic class Colors : IMultipleValueProperty\r\n{\r\n   [Parameter]\r\n   [StringLiteralConversion] \r\n   ContextualTextColor Text { get; set; }\r\n\r\n   [Parameter]\r\n   [StringLiteralConversion] \r\n   ContextualBackgroundColor Background { get; set; }\r\n\r\n   void OnContentBegin(builder, renderSettings);  // Extends class attribute during render\r\n}  \r\n\r\n//...\r\n```\r\n1) Render extension hooks:\r\nNow we get into even muddier waters to talk about hooks into the render-builderâ¦ but see it as something to spur your thinking. I think it will be easiest to have a combination of run-time-calls and design-time-services, like having the calls\r\n```cs\r\nAction<Builder, ExtensionRenderSettings> OnAddArgument;\r\nAction<Builder, ExtensionRenderSettings> OnContentBegin;\r\nAction<Builder, ExtensionRenderSettings> OnContentEnd;\r\n```\r\nwhich are present in the cases when a design-time service returns them\r\n```cs\r\nbool TryGetOnAddArgument(parsed-argument-nodes??, \r\n    out Action<Builder, ExtensionRenderSettings> onAddArgument, \r\n    out ExtensionRenderSettings renderSettings)\r\n```\r\nBut I am open to any suggestions. In addition, I expect there will be a need to resolve parameters at design-time also, thus the conversion attributes and in this case from string literals to replace their typed counterpart in the generated c# file.\r\n\r\n2) Parameter tags:\r\nSomewhat semi-related is that I think it would make sense to allow these extended attributes to be set as tags also. Especially when it comes to multi-value settings of columns in a grid, etc., but I havenât explored that. It relates somewhat also to this comment https://github.com/aspnet/Blazor/pull/1404#issuecomment-420968030.\r\n\r\n3) Parameter tag constructs:\r\nHaving same construct of tags referring to a mix of types and parameters can get it even more convoluted then. Do you think it will make sense do introduce an attribute at module level to configure it, so that one can try different styles before it is settled?\r\n```\r\n[PropertyPrefix(PrefixType: ParentComponentName)]   // As in <MyPage.Header />\r\n[PropertyPrefix(\"@Parent.\", PrefixType: Fixed)]     // As in <@Parent.Header />\r\n[PropertyPrefix(\"_.\", PrefixType: Fixed)]           // As in <_.Header />, fixed placeholder for parent.\r\n```\r\n\r\n@SteveSandersonMS I mentioned point 2 and 3 here just so you can reflect on it with respect to this idea also. \r\n\r\nI think this mechanism would be very powerful, although I must admit I am new to both Blazor and Bootstrap. I have a third use-case that could use this extension mechanism for another time.\r\n\r\nIs this of any interest? Any thoughts?\r\n","Url":"https://github.com/aspnet/Blazor/issues/1465","RelatedDescription":"Open issue \"Support for an element extension mechanism\" (#1465)"},{"Id":"362870281","IsPullRequest":false,"CreatedAt":"2018-09-22T16:23:42","Actor":"alekseyLymarev","Number":"1464","RawContent":null,"Title":"On create project with template Blazor ASP.Net core hosted on run show this error","State":"open","Body":"Ð¡ÐµÑÑÐµÐ·Ð½Ð¾ÑÑÑ\tÐÐ¾Ð´\tÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ\tÐÑÐ¾ÐµÐºÑ\tÐ¤Ð°Ð¹Ð»\tÐ¡ÑÑÐ¾ÐºÐ°\tÐ¡Ð¾ÑÑÐ¾ÑÐ½Ð¸Ðµ Ð¿Ð¾Ð´Ð°Ð²Ð»ÐµÐ½Ð¸Ñ\r\nÐÑÐ¸Ð±ÐºÐ°\tMSB3073\tÐ²ÑÑÐ¾Ð´ Ð¸Ð· ÐºÐ¾Ð¼Ð°Ð½Ð´Ñ \"dotnet \"C:\\Users\\Zver\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/illink/illink.dll\" -l none -c link -u link -b true -t --verbose  -d \"C:\\Users\\Zver\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/mono/bcl/\" -d \"C:\\Users\\Zver\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/mono/bcl/Facades/\" -o \"C:\\Users\\Zver\\Projects\\wasm\\CRUD\\CRUD.Client\\obj\\Debug\\netstandard2.0\\blazor/linker/\" -x \"C:\\Users\\Zver\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\BuiltInBclLinkerDescriptor.xml\" -x \"C:\\Users\\Zver\\Projects\\wasm\\CRUD\\CRUD.Client\\obj\\Debug\\netstandard2.0\\blazor\\linker.descriptor.xml\" -a \"C:\\Users\\Zver\\.nuget\\packages\\microsoft.aspnetcore.blazor\\0.5.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.dll\" -a \"C:\\Users\\Zver\\.nuget\\packages\\microsoft.aspnetcore.blazor.browser\\0.5.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.Browser.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.csharp\\4.5.0\\lib\\netstandard2.0\\Microsoft.CSharp.dll\" -a \"C:\\Users\\Zver\\.nuget\\packages\\microsoft.entityframeworkcore\\2.1.2\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" -a \"C:\\Users\\Zver\\.nuget\\packages\\microsoft.entityframeworkcore.abstractions\\2.1.2\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Abstractions.dll\" -a \"C:\\Users\\Zver\\.nuget\\packages\\microsoft.entityframeworkcore.relational\\2.1.2\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.1.1\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.1.1\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.1.1\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.1.1\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.1.1\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.1.1\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.1.1\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.1.1\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.1.1\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.1.1\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.1.1\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" -a \"C:\\Users\\Zver\\.nuget\\packages\\microsoft.jsinterop\\0.5.1\\lib\\netstandard2.0\\Microsoft.JSInterop.dll\" -a \"C:\\Users\\Zver\\.nuget\\packages\\mono.webassembly.interop\\0.5.1\\lib\\netstandard2.0\\Mono.WebAssembly.Interop.dll\" -a \"C:\\Users\\Zver\\.nuget\\packages\\mysqlconnector\\0.44.1\\lib\\netstandard2.0\\MySqlConnector.dll\" -a \"C:\\Users\\Zver\\.nuget\\packages\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" -a \"C:\\Users\\Zver\\.nuget\\packages\\pomelo.entityframeworkcore.mysql\\2.1.2\\lib\\netstandard2.0\\Pomelo.EntityFrameworkCore.MySql.dll\" -a \"C:\\Users\\Zver\\.nuget\\packages\\pomelo.jsonobject\\2.0.0\\lib\\netstandard2.0\\Pomelo.JsonObject.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.2.0\\lib\\netstandard1.0\\Remotion.Linq.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.buffers\\4.4.0\\lib\\netstandard2.0\\System.Buffers.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.collections.immutable\\1.5.0\\lib\\netstandard2.0\\System.Collections.Immutable.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.componentmodel.annotations\\4.5.0\\lib\\netstandard2.0\\System.ComponentModel.Annotations.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.diagnostics.diagnosticsource\\4.5.0\\lib\\netstandard1.3\\System.Diagnostics.DiagnosticSource.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.linq\\4.1.0\\lib\\netstandard1.6\\System.Linq.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.linq.expressions\\4.1.0\\lib\\netstandard1.6\\System.Linq.Expressions.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.linq.queryable\\4.0.1\\lib\\netstandard1.3\\System.Linq.Queryable.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.memory\\4.5.1\\lib\\netstandard2.0\\System.Memory.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.numerics.vectors\\4.4.0\\lib\\netstandard2.0\\System.Numerics.Vectors.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.objectmodel\\4.0.12\\lib\\netstandard1.3\\System.ObjectModel.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.reflection.emit\\4.0.1\\lib\\netstandard1.3\\System.Reflection.Emit.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.reflection.emit.ilgeneration\\4.0.1\\lib\\netstandard1.3\\System.Reflection.Emit.ILGeneration.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.reflection.emit.lightweight\\4.0.1\\lib\\netstandard1.3\\System.Reflection.Emit.Lightweight.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.reflection.typeextensions\\4.1.0\\lib\\netstandard1.5\\System.Reflection.TypeExtensions.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.1\\lib\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.threading\\4.0.11\\lib\\netstandard1.3\\System.Threading.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.threading.tasks.extensions\\4.3.0\\lib\\netstandard1.0\\System.Threading.Tasks.Extensions.dll\" -a \"C:\\Users\\Zver\\Projects\\wasm\\CRUD\\CRUD.Shared\\bin\\Debug\\netstandard2.0\\CRUD.Shared.dll\" -a \"C:\\Users\\Zver\\Projects\\wasm\\CRUD\\CRUD.Client\\obj\\Debug\\netstandard2.0\\CRUD.Client.dll\"\" Ñ ÐºÐ¾Ð´Ð¾Ð¼ 1.\tCRUD.Client\tC:\\Users\\Zver\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\Blazor.MonoRuntime.targets\t441\t\r\n","Url":"https://github.com/aspnet/Blazor/issues/1464","RelatedDescription":"Open issue \"On create project with template Blazor ASP.Net core hosted on run show this error\" (#1464)"},{"Id":"362822113","IsPullRequest":false,"CreatedAt":"2018-09-22T03:22:25","Actor":"carlosalcantara2668","Number":"1462","RawContent":null,"Title":"onkeypress does not work in the following browsers: Chrome and Edge","State":"open","Body":"what is working in mozilla,\r\n\r\nBackspace\r\nBackspace\r\nBackspace\r\nArrowLeft\r\nArrowUp\r\nArrowDown\r\nArrowRight\r\nArrowLeft\r\n\r\n![keyboar](https://user-images.githubusercontent.com/16179281/45912802-229aaf00-bdf5-11e8-8810-ca0050d14489.JPG)\r\n\r\n@using Microsoft.JSInterop\r\n\r\nType here: <input onkeypress=@OnKeyPressed />\r\n\r\n\r\n\r\n<ul>\r\n    @foreach (var key in keysPressed)\r\n    {\r\n        <li>@key</li>\r\n    }\r\n</ul>\r\n\r\n@functions {\r\nList<string> keysPressed = new List<string>();\r\n\r\nvoid OnKeyPressed(UIKeyboardEventArgs eventArgs)\r\n{\r\n    Console.WriteLine(Json.Serialize(eventArgs));\r\n    keysPressed.Add(eventArgs.Key);\r\n}\r\n}\r\n","Url":"https://github.com/aspnet/Blazor/issues/1462","RelatedDescription":"Open issue \"onkeypress does not work in the following browsers: Chrome and Edge\" (#1462)"},{"Id":"362365805","IsPullRequest":true,"CreatedAt":"2018-09-21T19:54:45","Actor":"rynowak","Number":"1457","RawContent":null,"Title":"Fix #1399 - crash on start-end syntax for void element","State":"closed","Body":"We weren't correctly recovering when a void element is written as a\r\nstart-end pair. This change cleans up some of the plumbing around\r\nend-tag handling and adds recognition for this case.\r\n\r\nAdded a new bespoke diagnostic for the void element case.","Url":"https://github.com/aspnet/Blazor/pull/1457","RelatedDescription":"Closed or merged PR \"Fix #1399 - crash on start-end syntax for void element\" (#1457)"},{"Id":"362579462","IsPullRequest":false,"CreatedAt":"2018-09-21T17:09:09","Actor":"emelhu","Number":"1459","RawContent":null,"Title":"base class, public/private parameter ","State":"closed","Body":"![1](https://user-images.githubusercontent.com/7081135/45879252-0fabbe80-bda4-11e8-8cd5-7049b2383079.jpg)\r\n![2](https://user-images.githubusercontent.com/7081135/45879256-13d7dc00-bda4-11e8-8c0b-c22c0b30c9ef.jpg)\r\n\r\n\r\n### **Only a warning, but.._**.","Url":"https://github.com/aspnet/Blazor/issues/1459","RelatedDescription":"Closed issue \"base class, public/private parameter \" (#1459)"},{"Id":"362638946","IsPullRequest":false,"CreatedAt":"2018-09-21T17:08:28","Actor":"tezine","Number":"1460","RawContent":null,"Title":"[Question]: Is it possible to use Angular Elements inside Blazor? ","State":"closed","Body":"Hi, Blazor is a wonderful project but since it's on early stages it lacks many components already available for Angular (or others). \r\nSince Angular allows to pack components as Custom elements ( [info](https://angular.io/guide/elements) ), I wonder if it's possible to reuse them inside a Blazor standalone web app. This would be great since we wouldn't have to create components from scratch all the time. We just wrap them into some C# classes/methods to use it. ","Url":"https://github.com/aspnet/Blazor/issues/1460","RelatedDescription":"Closed issue \"[Question]: Is it possible to use Angular Elements inside Blazor? \" (#1460)"},{"Id":"362446382","IsPullRequest":false,"CreatedAt":"2018-09-21T11:39:30","Actor":"jvelezc","Number":"1458","RawContent":null,"Title":"As I am configuring things I am wondering where I should store variables in server side blazor project","State":"closed","Body":"Could you provide guidance on how to store variables. \r\n\r\nFor example: I ended up putting a appsettings.json on the client side project and using IConfiguration and then just doing \r\n```\r\n\r\n   public class Startup\r\n    {\r\n\r\n        public IConfiguration Configuration { get; }\r\n        public Startup(IConfiguration configuration)\r\n        {\r\n            Configuration = configuration;\r\n        }\r\n```\r\n\r\nAt startup.cs. But should I have put this on Server project. Should there be a \"blazor way\" to store configs?","Url":"https://github.com/aspnet/Blazor/issues/1458","RelatedDescription":"Closed issue \"As I am configuring things I am wondering where I should store variables in server side blazor project\" (#1458)"},{"Id":"361812403","IsPullRequest":false,"CreatedAt":"2018-09-20T21:27:11","Actor":"panesofglass","Number":"1450","RawContent":null,"Title":"Unable to create Blazor app with fsproj","State":"closed","Body":"I've attempted to create an all-F# Blazor app with each release, but it seems that the current solution requires a `csproj` and expects all files to be C#. I suspect this is because the Blazor tooling is inspecting the solution to find `.cshtml` files and generate the `.g.cs` files the compiler will use. I've built a F# renderer, [Trail](https://github.com/panesofglass/trail), that doesn't require this step, and I would love to build Blazor apps with just the `fsproj`. The only thing in the `csproj` in my Trail sample apps is the [call to build and run the host builder](https://github.com/panesofglass/trail/blob/master/sample/standalone/BlazorApp1/Program.cs).\r\n\r\nI think this should be possible as the mono wasm tooling appears able to run F# projects. I would be very glad to help out with investigating whether this is possible and desirable from a Blazor project perspective.","Url":"https://github.com/aspnet/Blazor/issues/1450","RelatedDescription":"Closed issue \"Unable to create Blazor app with fsproj\" (#1450)"},{"Id":"362352146","IsPullRequest":true,"CreatedAt":"2018-09-20T21:27:09","Actor":"rynowak","Number":"1456","RawContent":null,"Title":"Fix #1450 Skip compilation on non-C# projects","State":"closed","Body":"This change skips our 'temp' compilation that we do to implement 2-phase\r\nbuild for defining components in .cshtml when the project is not C# OR\r\nwhen the project has no .cshtml files.\r\n\r\nThis should make the rest of the build-time Blazor functionality work\r\nfor non-C# projects.\r\n\r\nThis should also make the build faster when you have the Blazor targets\r\nimported in a C# project with no .cshtml files.","Url":"https://github.com/aspnet/Blazor/pull/1456","RelatedDescription":"Closed or merged PR \"Fix #1450 Skip compilation on non-C# projects\" (#1456)"},{"Id":"361983899","IsPullRequest":true,"CreatedAt":"2018-09-20T19:19:27","Actor":"rynowak","Number":"1453","RawContent":null,"Title":"Add Type Inference for Generic-Typed Components","State":"closed","Body":"This change allows you to use generic-typed components without\r\nexplicitly specify type arguments.\r\n\r\n**Before:**\r\n```\r\n<Grid Items=\"@MyItems\" TItem=\"Person\">\r\n...\r\n</Grid>\r\n```\r\n\r\n**After:**\r\n```\r\n<Grid Items=\"@MyItems\">\r\n...\r\n</Grid>\r\n```\r\n\r\nWhere possible, the type of the component will be inferred based on the\r\nvalues passed to component parameters. This won't work like magic, you\r\nhave to specify parameters that provide type arguments for all of the\r\ncomponent's type parameters.\r\n\r\nThis is a best effort system, and it's largely based on the limitations\r\nand behaviours of generic type inference in C#. We think it will work\r\nwell with most Blazor features and for most reasonable components. You\r\nshould not forget it's easy to specify type arguments, because you may\r\nstill have to in some cases.\r\n\r\nIn particular you may notice issues if you are trying to use a generic\r\ntyped component where all of the parameters are delegates or templates.\r\nType inference for delegates/lambdas in C# is based on the context. Any\r\ntime you combine generics and delegates it's easy to get into a scenario\r\nwhere the compiler won't infer the correct type, or will give up.\r\n\r\n----\r\nThe type inference feature works by generating a 'thunk' method in\r\n*caller* that can act as a site for type inference (C# does not support\r\ninference on constructors).\r\n\r\nFor our grid example above, the non-inferenced code will look something\r\nlike:\r\n```\r\nbuilder.OpenComponent<Grid<Person>>(0);\r\nbuilder.AddAttribute(1, \"Items\", MyItems);\r\nbuilder.CloseComponent();\r\n```\r\n\r\nNote that we can only write the type `Grid<Person>` because you wrote\r\n`Person` in your code. What you type in the `TItem` attribute value gets\r\ninserted into the generated code such that it fills in the generic type\r\nparameter.\r\n\r\nOn the other hand, if you want is to infer the type, we have to do some\r\ncompiler magic. That looks like:\r\n```\r\n__Blazor.(long generated name).TypeInference.CreateGrid_0(builder, 0, 1, MyItems);\r\n...\r\n\r\n// elsewhere in the file\r\ninternal static class TypeInference\r\n{\r\n    public static void CreateGrid_0<TItem>(RenderTreeBuilder builder, int seq, int __seq0, global::System.Collections.Generic.List<TItem> __arg0)\r\n    {\r\n\tbuilder.OpenComponent<Grid<TItem>>(seq);\r\n\tbuilder.AddAttribute(__seq0, \"Items\", __arg0);\r\n        builder.CloseComponent();\r\n    }\r\n}\r\n```\r\n\r\nThis allows us to rely on the C# compiler for itype inference.","Url":"https://github.com/aspnet/Blazor/pull/1453","RelatedDescription":"Closed or merged PR \"Add Type Inference for Generic-Typed Components\" (#1453)"},{"Id":"362297964","IsPullRequest":false,"CreatedAt":"2018-09-20T17:56:58","Actor":"rynowak","Number":"1455","RawContent":null,"Title":"Consider splitting up AddAttribute functionality for elements/components","State":"open","Body":"Based on: https://github.com/aspnet/Blazor/pull/1453#discussion_r219171895\r\n\r\nWe have a bunch of overloads of `AddAttribute` but we could potentially reduce runtime complexity by making more decisions at compile time based on whether we're operating on a component or an element.","Url":"https://github.com/aspnet/Blazor/issues/1455","RelatedDescription":"Open issue \"Consider splitting up AddAttribute functionality for elements/components\" (#1455)"},{"Id":"362271875","IsPullRequest":false,"CreatedAt":"2018-09-20T16:57:06","Actor":"alfkonee","Number":"1454","RawContent":null,"Title":"Cannot Inject HttpClient in ServerSide Mode","State":"closed","Body":"Is it possible to inject the IUrlHelper and HttpClient in the ServerSide Rendering Mode of Blazor cuz everytime I try to do so I get this Error\r\n\r\n```\r\nError: System.InvalidOperationException: Unable to resolve service for type 'System.Net.Http.HttpClient' while attempting to activate 'Test.App.Services.WeatherForecastService'.\r\n   at Microsoft.JSInterop.DotNetDispatcher.InvokeSynchronously(String assemblyName, String methodIdentifier, Object targetInstance, String argsJson)\r\n   at Microsoft.JSInterop.DotNetDispatcher.BeginInvoke(String callId, String assemblyName, String methodIdentifier, Int64 dotNetObjectId, String argsJson)\r\n\r\n   at Microsoft.JSInterop.DotNetDispatcher.InvokeSynchronously(String assemblyName, String methodIdentifier, Object targetInstance, String argsJson)\r\n   at Microsoft.JSInterop.DotNetDispatcher.BeginInvoke(String callId, String assemblyName, String methodIdentifier, Int64 dotNetObjectId, String argsJson)\r\n    at endInvokeDotNetFromJS (http://localhost:5000/_framework/blazor.server.js:23:48556)\r\n    at http://localhost:5000/_framework/blazor.server.js:23:48125\r\n    at new Promise (<anonymous>)\r\n    at e.beginInvokeJSFromDotNet (http://localhost:5000/_framework/blazor.server.js:23:48094)\r\n    at http://localhost:5000/_framework/blazor.server.js:16:11652\r\n    at Array.forEach (<anonymous>)\r\n    at e.invokeClientMethod (http://localhost:5000/_framework/blazor.server.js:16:11623)\r\n    at e.processIncomingData (http://localhost:5000/_framework/blazor.server.js:16:10229)\r\n    at e.connection.onreceive (http://localhost:5000/_framework/blazor.server.js:16:7298)\r\n    at WebSocket.i.onmessage (http://localhost:5000/_framework/blazor.server.js:16:20346)\r\n```\r\nif it's not possible could you provide a method as to how we cn make http calls and get an Insatance of the UrlHelper when using server side rendering ","Url":"https://github.com/aspnet/Blazor/issues/1454","RelatedDescription":"Closed issue \"Cannot Inject HttpClient in ServerSide Mode\" (#1454)"},{"Id":"361867630","IsPullRequest":false,"CreatedAt":"2018-09-20T15:16:37","Actor":"mercersoft","Number":"1451","RawContent":null,"Title":"JsonConvert.SerializeObject fails","State":"closed","Body":"I am trying to serialize a simple class to JSON (using Newtonsoft.JSON) using the code below, but the request fails with the following error: \r\n\r\n**WASM: [Newtonsoft.Json.JsonSerializationException] Error setting value to 'Name' on 'Blazor1.Client.Pages.Index+Foo'.**\r\n\r\nI have added the following block to the default Blazor (0.5.0) Project:\r\n\r\n```\r\n@functions\r\n{\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        string content = \"{ \\\"name\\\" : \\\"PHS\\\" }\";\r\n        Foo foo = JsonConvert.DeserializeObject<Foo>(content);\r\n        var bar = JsonConvert.SerializeObject(foo);\r\n    }\r\n\r\n    public class Foo\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n}\r\n\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1451","RelatedDescription":"Closed issue \"JsonConvert.SerializeObject fails\" (#1451)"},{"Id":"361957345","IsPullRequest":false,"CreatedAt":"2018-09-20T14:30:04","Actor":"OmarTawfik","Number":"1452","RawContent":null,"Title":"Microsoft.JSInterop.d.ts not available","State":"closed","Body":"I looked through the codebase, npm, and nuget, but couldn't figure out where it is published to.\r\nI want to write my client side interop in TypeScript, and I want to refer to `DotNet.invokeMethod` and other functions in that file, but I cannot figure out where to reference the `.d.ts` from. Is that a WIP?\r\n\r\nhttps://github.com/aspnet/Blazor/blob/0.5.1/src/Microsoft.JSInterop/JavaScriptRuntime/src/Microsoft.JSInterop.ts","Url":"https://github.com/aspnet/Blazor/issues/1452","RelatedDescription":"Closed issue \"Microsoft.JSInterop.d.ts not available\" (#1452)"},{"Id":"361742196","IsPullRequest":false,"CreatedAt":"2018-09-19T13:17:36","Actor":"awesomeaaron","Number":"1449","RawContent":null,"Title":"Authentication / Authorization for server side Blazor","State":"closed","Body":"Hi,\r\nI would like to implement authentication/authorization for a server side Blazor app. For MVC app, we use session/cookie and for api we can use oauth / openid. What is the preffered way of doing authentication / authorization for a server side Blazor app.","Url":"https://github.com/aspnet/Blazor/issues/1449","RelatedDescription":"Closed issue \"Authentication / Authorization for server side Blazor\" (#1449)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-09-25T05:30:03.1421696Z","RunDurationInMilliseconds":1250}