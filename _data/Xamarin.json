{"Data":{"Blog":{"FeedItems":[{"Title":"November 2018 Xamarin and Azure Office Hours Recap","PublishedOn":"2018-12-14T21:08:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I ❤️ every single developer. And I want to hear your stories. I want to hear about your successes, your &#8220;not-so-much&#8221; successes, and any questions or concerns you may have about our...","Href":"https://blog.xamarin.com/office-hours-november-2018-xamarin-azure/","RawContent":null},{"Title":"Xamarin.Forms 4.0 Feature Preview: An Entirely New Point of (Collection)View","PublishedOn":"2018-12-07T19:00:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the upcoming Xamarin.Forms 4.0 release, we are implementing the all new CollectionView control. The CollectionView is intended to be a successor to the ListView, improving upon its design...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-feature-preview-an-entirely-new-point-of-collectionview/","RawContent":null},{"Title":"The Future of Mobile Development: Xamarin.Forms 4.0 Preview","PublishedOn":"2018-12-05T19:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Yesterday at Microsoft Connect(); 2018 we announced our plans for Xamarin.Forms 4.0 and shared a public preview. Let&#8217;s now take a deeper look at the big changes, starting with Xamarin.Forms...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-preview/","RawContent":null},{"Title":"Connect(); 2018 Xamarin Announcements","PublishedOn":"2018-12-04T16:21:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2018, we have several exciting announcements about brand new capabilities and foundational improvements in the Xamarin platform driven by your generous feedback....","Href":"https://blog.xamarin.com/connect-2018-xamarin-announcements/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in December","PublishedOn":"2018-12-02T20:46:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-december/","RawContent":null},{"Title":"Multi-targeting with Android Support Library v28","PublishedOn":"2018-11-28T18:09:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting with Xamarin’s Android Support Library version 28, we are introducing multi-targeting. This includes assemblies for older support library versions when your application&#8217;s...","Href":"https://blog.xamarin.com/multi-targeting-with-android-support-library-v28/","RawContent":null},{"Title":"Android Build Performance and Reliability","PublishedOn":"2018-11-21T16:45:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As a Xamarin developer working on Android apps, you may be well-aware of two issues that slow down your everyday development; build times and the correctness of the build. If you aren&#8217;t sure...","Href":"https://blog.xamarin.com/android-build-performance-reliability/","RawContent":null},{"Title":"Xamarin.Forms 3.4.0: Say Hello to ImageButton","PublishedOn":"2018-11-15T19:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of our long-term goal to have more frequent releases, we’re pleased to announce the release of Xamarin.Forms 3.4.0. As always, this release contains even more bug fixes and most notably,...","Href":"https://blog.xamarin.com/xamarin-forms-3-4-0-say-hello-to-imagebutton/","RawContent":null},{"Title":"Twitch Workshop: Build Your First Mobile App with C#, Xamarin, and the Cloud","PublishedOn":"2018-11-14T18:45:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you been clamoring to get started with mobile development using C# and Xamarin? What if you could attend a full day workshop from the comfort of your house or in a conference room with some...","Href":"https://blog.xamarin.com/twitch-workshop-build-your-first-mobile-app/","RawContent":null},{"Title":"Gorilla Player: A Tool to Craft Beautiful XAML UIs for Xamarin.Forms","PublishedOn":"2018-11-08T21:00:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post contributed by Leonardo Rodríguez Viacava. Leo is co-founder and CTO of UXDivers, creators of Grial UIKit and Gorilla Player. UXDivers specializes in designing and coding engaging...","Href":"https://blog.xamarin.com/gorilla-player-a-tool-to-craft-beautiful-xaml-uis-for-xamarin-forms/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8776314873","Type":"PullRequestEvent","CreatedAt":"2018-12-19T03:35:17","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2535","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] no temp files in GenerateJavaStubs\" (#2535) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/2505\r\n\r\nThis is based on #2505, but I incorporated the java.interop changes so\r\n`GenerateJavaStubs` uses no temp files at all.\r\n\r\nIn many places throughout the Xamarin.Android build, we have a pattern\r\nof:\r\n\r\n- Generate a temp file.\r\n- Use `MonoAndroidHelper.CopyIfChanged` to put the file in the\r\n  destination. This reads both files, doing a hash comparison before\r\n  deciding to write or not.\r\n- Delete the temp file.\r\n\r\nSometimes the temp file is actually in `%TEMP%`, but other times we\r\nappend `.new` to the destination file. The case of `.new` can collide\r\nif two builds are running at once (example caused by a known VS for\r\nMac issue).\r\n\r\nThinking about this, in cases with small files, we can make a simple\r\noptimization:\r\n\r\n- Generate the file in-memory.\r\n- Use a new `MonoAndroidHelper.CopyStreamIfChanged` method`.\r\n\r\nThis has several benefits:\r\n\r\n- We never write a file to disk when there are no changes.\r\n- We don't have to *remember* to delete the file.\r\n- The code, in general, is slightly simpler.\r\n\r\nThe only place we likely shouldn't use this new pattern, would be if\r\nthe file was huge.\r\n\r\n## Changes ##\r\n\r\nI added new APIs for:\r\n\r\n- `Files.HasStreamChanged` - to compare a `Stream` in memory\r\n- `Files.HasBytesChanged` - to compare a `byte[]` in memory\r\n- `Files.CopyIfStreamChanged`\r\n- `Files.CopyIfStringChanged` - some cases we have a `string`\r\n- `Files.CopyIfBytesChanged` - this supports `string`\r\n- `MonoAndroidHelper.CopyIfStreamChanged`\r\n- `MonoAndroidHelper.CopyIfStringChanged`\r\n- `MonoAndroidHelper.CopyIfBytesChanged`\r\n\r\nI changed the following MSBuild tasks, mostly to test out the new\r\nbehavior:\r\n\r\n- `GenerateResourceDesigner` was using a `.new` file.\r\n- `GenerateJavaStubs` was using temp files in many places. I was able\r\n  to fix up all of these.\r\n- `ManifestDocument` now has an overload for `Save` that takes a\r\n  `Stream`\r\n- `Generator` now uses `CopyIfStreamChanged` a new\r\n  `GetDestinationPath` method from java.interop. It reuses a single\r\n  `MemoryStream`, and I moved the `GenerateJavaSource` method into\r\n  `CreateJavaSources` for simplicity.\r\n\r\nI made other general refactoring in `GenerateJavaStubs`:\r\n\r\n- Since we don't have to worry about deleting a `temp_map_file`, we\r\n  can return earlier if `Generator.CreateJavaSources` fails.\r\n- A `GetResource<T>` method, cleans up the places reading from\r\n  `EmbeddedResource` files. I also changed it up to properly `Dispose`\r\n  things.\r\n- A `save` anonymous method/delegate should just be a `SaveResource`\r\n  *regular* method.\r\n- A few places were calling `Path.GetFullPath` unecessarily. Since\r\n  this method accesses the file system, we should skip it unless the\r\n  full path is actually needed.\r\n- Avoid using `StringWriter` and `string.Format`.\r\n- Use capacity and `StringComparer.Ordinal` when creating\r\n  dictionaries: https://www.dotnetperls.com/dictionary-stringcomparer\r\n- Preallocate `MemoryStream` with `java_types.Length * 32`\r\n\r\nI also added some tests for the new APIs in `MonoAndroidHelper`.\r\n\r\n## Results ##\r\n\r\nI did three test runs, because I was getting varying times for\r\n`GenerateJavaStubs`. This is the Xamarin.Forms integration project in\r\nthis repo:\r\n\r\n    Before (Clean Build):\r\n    1. 1433 ms  GenerateJavaStubs                          1 calls\r\n    2. 1594 ms  GenerateJavaStubs                          1 calls\r\n    3. 1353 ms  GenerateJavaStubs                          1 calls\r\n\r\n    After (Clean Build):\r\n    1. 1201 ms  GenerateJavaStubs                          1 calls\r\n    2. 1137 ms  GenerateJavaStubs                          1 calls\r\n    3. 1136 ms  GenerateJavaStubs                          1 calls\r\n\r\n    Before (Incremental):\r\n    1. 1184 ms  GenerateJavaStubs                          1 calls\r\n    2. 1181 ms  GenerateJavaStubs                          1 calls\r\n    3. 1172 ms  GenerateJavaStubs                          1 calls\r\n\r\n    After (Incremental):\r\n    1. 1035 ms  GenerateJavaStubs                          1 calls\r\n    2. 1049 ms  GenerateJavaStubs                          1 calls\r\n    3. 1036 ms  GenerateJavaStubs                          1 calls\r\n\r\n`GenerateJavaStubs` is now about 250ms faster on initial build and\r\n150ms faster on incremental builds.\r\n\r\nI could not see a difference in `GenerateResourceDesigner`, likely\r\nsince it wrote only a single temp file.\r\n\r\nNext steps would be to make changes in other MSBuild tasks as well."},{"Id":"8774739840","Type":"PullRequestEvent","CreatedAt":"2018-12-18T20:46:42","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2547","RelatedDescription":"Merged pull request \"[d16-0] [msbuild] Enable nuget package resolution\" (#2547) at xamarin/xamarin-android","RelatedBody":"Fixes https://github.com/mono/mono/issues/10602 .\r\n\r\nFrom the issue:\r\n```\r\nWe need to enable this to support the system assemblies conflict\r\nresolution which we now rely on for any new packages to enhance\r\ndevelopers experience and get us out of dependency on specific package\r\nversions.\r\n```\n\nBackport of #2481.\n\n/cc @marek-safar @radical"},{"Id":"8774736471","Type":"PullRequestEvent","CreatedAt":"2018-12-18T20:46:03","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2481","RelatedDescription":"Merged pull request \"[msbuild] Enable nuget package resolution\" (#2481) at xamarin/xamarin-android","RelatedBody":"Fixes https://github.com/mono/mono/issues/10602 .\r\n\r\nFrom the issue:\r\n```\r\nWe need to enable this to support the system assemblies conflict\r\nresolution which we now rely on for any new packages to enhance\r\ndevelopers experience and get us out of dependency on specific package\r\nversions.\r\n```"},{"Id":"8774647026","Type":"PullRequestEvent","CreatedAt":"2018-12-18T20:28:00","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2550","RelatedDescription":"Opened pull request \"[Xamarin.Android.Tools.BootstrapTasks] Include Logcat in errors\" (#2550) at xamarin/xamarin-android","RelatedBody":"Context: https://jenkins.mono-project.com/job/xamarin-android-pr-builder-release/189/\r\n\r\nCommit c38c58e9 updated the `<RenameTestCases/>` task so that if the\r\nNUnit XML output file couldn't be found, we would instead *generate* a\r\n\"reasonable\" NUnit XML file containing an error, so that Jenkins would\r\nnicely show that *something* went wrong.\r\n\r\nThe result is that it works, but isn't \"nice\": the Test Result failure\r\nis a *filesystem path*, e.g.\r\n\r\n\t/Users/builder/jenkins/workspace/xamarin-android-pr-builder-release/xamarin-android/build-tools/scripts/../../TestResult-Xamarin.Android.EmbeddedDSO_Test.nunit-Release-Aot.xml.TestResult-Xamarin.Android.EmbeddedDSO_Test.nunit-Release-Aot.xml\r\n\r\n(That's *literally* the name of a \"failing test.\")\r\n\r\nAdditionally, the [*contents* of the generated file][0] aren't entirely\r\nhelpful: it's just a `FileNotFoundException`, because the expected\r\nNUnit XML input doesn't exist.\r\n\r\nFix both of these issues: instead of a bizarro filesystem path for the\r\nname of the failing test, construct a reasonable alternative: use the\r\n`SourceFile` basename -- without the `TestResult-` prefix and without\r\nany extension -- as the `//test-suite/@name` value, and use\r\n`Possible Crash / {Configuration}` as the `//test-case/@name` value.\r\nFor the above failure, this would result in this test failing:\r\n\r\n\tXamarin.Android.EmbeddedDSO_Test.nunit.Possible Crash / Release-Aot\r\n\r\nAdditionally, check for `adb logcat` output within the\r\n`{DestinationFolder}/tests` directory, with a filename matching\r\n`logcat-{Configuration}-{testSuiteName}.txt`.  If this file exists,\r\nthe contents of the file are included into the NUnit XML file.\r\n\r\n[0]: https://jenkins.mono-project.com/job/xamarin-android-pr-builder-release/189/testReport/junit/_Users_builder_jenkins_workspace_xamarin-android-pr-builder-release_xamarin-android_build-tools_scripts_.._.._TestResult-Xamarin.Android.EmbeddedDSO_Test.nunit-Release-Aot/xml/TestResult_Xamarin_Android_EmbeddedDSO_Test_nunit_Release_Aot_xml/"},{"Id":"8774622752","Type":"PullRequestEvent","CreatedAt":"2018-12-18T20:23:25","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2549","RelatedDescription":"Opened pull request \"[tests] mark flaky tests NonParallelizable\" (#2549) at xamarin/xamarin-android","RelatedBody":"Context: http://build.devdiv.io/2279876&view=ms.vss-test-web.test-result-details\r\n\r\nThere are about 5 tests that seem to fail a lot on new build machines.\r\n\r\nThe errors are generally related to file sharing:\r\n\r\n    The last access/last write time on file \"C:\\Users\\dlab14\\.nuget\\packages\\xamarin.forms\\3.1.0.697729\\lib\\MonoAndroid10\\FormsViewGroup.dll.mdb\" cannot be set.\r\n    Access to the path 'C:\\Users\\dlab14\\.nuget\\packages\\xamarin.forms\\3.1.0.697729\\lib\\MonoAndroid10\\FormsViewGroup.dll.mdb' is denied.\r\n\r\nOr another example:\r\n\r\n    C:\\Users\\dlab14\\.nuget\\packages\\xamarin.build.download\\0.4.9\\build\\Xamarin.Build.Download.targets(114,3): The process cannot access the file 'C:\\Users\\dlab14\\.nuget\\packages\\xamarin.googleplayservices.gcm\\60.1142.1\\lib\\MonoAndroid80\\Xamarin.GooglePlayServices.Gcm.dll' because it is being used by another process.\r\n        at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n        at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n        at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n        at Mono.Cecil.ModuleDefinition.GetFileStream(String fileName, FileMode mode, FileAccess access, FileShare share)\r\n        at Mono.Cecil.ModuleDefinition.Write(String fileName, WriterParameters parameters)\r\n        at Xamarin.Build.Download.BaseXamarinBuildResourceRestore.MergeResources(IAssemblyResolver resolver, String originalAsmPath, String mergedAsmPath, String assemblyName, List`1 resourceItems) [E:\\A\\_work\\165\\s\\bin\\TestDebug\\temp\\Issue2205False\\UnnamedProject.csproj]\r\n\r\nTo solve this problem, I've went through various failing builds and\r\nmarked flaky tests `[NonParallelizable]`. I am hoping this will\r\nimprove the reliability of these tests."},{"Id":"8773619880","Type":"IssuesEvent","CreatedAt":"2018-12-18T17:21:13","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2548","RelatedDescription":"Opened issue \"[spec] MSBuild target changes to support Android Designer\" (#2548) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create a Forms solution with an Android head + netstandard lib: [example here](https://github.com/jonathanpeppers/HelloWorld/tree/master/HelloForms)\r\n2. Run `git clean -dxf` to just ensure a clean work tree\r\n3. Run `msbuild .\\HelloForms\\HelloForms.Android\\HelloForms.Android.csproj /t:SetupDependenciesForDesigner /p:DesignTimeBuild=true /p:AndroidUseManagedDesignTimeResourceGenerator=false /restore /bl`\r\n\r\nDoing this, you hit an error in `<ResolveAssemblies/>`:\r\n\r\n```\r\n\"HelloForms.Android.csproj\" (SetupDependenciesForDesigner target) (1:7) ->\r\n(_ResolveAssemblies target) ->\r\nXamarin.Android.Common.targets(1898,2): error : Exception while loading assemblies: System.InvalidOperationException: Failed to load assembly HelloForms\\bin\\Debug\\netstandard2.0\\HelloForms.dll\r\nXamarin.Android.Common.targets(1898,2): error :    at Xamarin.Android.Tasks.ResolveAssemblies.Execute(DirectoryAssemblyResolver resolver)\r\n```\r\n\r\n### Expected Behavior\r\n\r\nThe designer could load more quickly if the `SetupDependenciesForDesigner` could complete successfully even if not all `<ProjectReference/>` projects are built.\r\n\r\n### Actual Behavior\r\n\r\nIf any assemblies are missing, the `<ResolveAssemblies/>` MSBuild task will fail.\r\n\r\n### Thoughts on Implementation\r\n\r\nIf I make this change to `Xamarin.Android.Common.targets`, then `ResolveAssemblies` works in this scenario:\r\n```diff\r\n--- a/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets\r\n+++ b/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets\r\n@@ -1917,9 +1917,9 @@ because xbuild doesn't support framework reference assemblies.\r\n                <FilteredAssemblies Include=\"$(OutDir)$(TargetFileName)\"\r\n                                Condition=\"Exists ('$(OutDir)$(TargetFileName)')\" />\r\n                <FilteredAssemblies Include=\"@(ReferenceCopyLocalPaths)\"\r\n-                               Condition=\"'%(ReferenceCopyLocalPaths.ResolvedFrom)' != 'ImplicitlyExpandDesignTimeFacades' And '%(ReferenceCopyLocalPaths.Extension)' == '.dll' And '%(ReferenceCopyLocalPaths.RelativeDir)' == '' \"/>\r\n+                               Condition=\"'%(ReferenceCopyLocalPaths.ResolvedFrom)' != 'ImplicitlyExpandDesignTimeFacades' And '%(ReferenceCopyLocalPaths.Extension)' == '.dll' And '%(ReferenceCopyLocalPaths.RelativeDir)' == '' And ('$(DesignTimeBuild)' != 'True' Or Exists('%(ReferenceCopyLocalPaths.Identity)')) \"/>\r\n                <FilteredAssemblies Include=\"@(ReferencePath)\"\r\n-                               Condition=\"'%(ReferencePath.ResolvedFrom)' != 'ImplicitlyExpandDesignTimeFacades' \"/>\r\n+                               Condition=\"'%(ReferencePath.ResolvedFrom)' != 'ImplicitlyExpandDesignTimeFacades' And ('$(DesignTimeBuild)' != 'True' Or Exists('%(ReferencePath.Identity)'))\"/>\r\n        </ItemGroup>\r\n```\r\nIt seems safer to me to only enable this behavior when `$(DesignTimeBuild)` is `True`.\r\n\r\n### Concerns\r\n\r\nIt might be possible this change could break future builds after `SetupDependenciesForDesigner` completes:\r\n1. Some `<ProjectReference/>` that contains `Java.Lang.Object` subclasses is not built yet.\r\n2. `SetupDependenciesForDesigner` runs.\r\n3. The `<ProjectReference/>` gets built.\r\n4. `_GenerateJavaStubs` could get skipped and we have a missing Java stub?\r\n\r\nWhen we implement this, we should include a test with this scenario that makes sure everything works.\r\n\r\nThe types of tests we should add:\r\n- Xamarin.Forms app with a netstandard library\r\n- Incremental build scenarios\r\n- Since the change will mostly be in this repo, we should test calling `UpdateAndroidResources` directly. The designer targets are in a private repo, but I think this will simulate the behavior nicely.\r\n- Further tests needed in the monodroid private repo.\r\n\r\n### Log File\r\n\r\nHere are logs before/after the proposed change: [logs.zip](https://github.com/xamarin/xamarin-android/files/2691544/logs.zip)"},{"Id":"8772754862","Type":"PullRequestEvent","CreatedAt":"2018-12-18T15:14:55","Actor":"monojenkins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2547","RelatedDescription":"Opened pull request \"[d16-0] [msbuild] Enable nuget package resolution\" (#2547) at xamarin/xamarin-android","RelatedBody":"Fixes https://github.com/mono/mono/issues/10602 .\r\n\r\nFrom the issue:\r\n```\r\nWe need to enable this to support the system assemblies conflict\r\nresolution which we now rely on for any new packages to enhance\r\ndevelopers experience and get us out of dependency on specific package\r\nversions.\r\n```\n\nBackport of #2481.\n\n/cc @marek-safar @radical"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8776034940","Type":"PullRequestEvent","CreatedAt":"2018-12-19T02:04:22","Actor":"TimBarham","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4820","RelatedDescription":"Opened pull request \"Adds some tests around different ways instantiating a type can throw\" (#4820) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n@StephaneDelcroix ... For the Forms Previewer, we'll need someway to handle this scenario. Perhaps another callback that lets us provide a replacement type when instantiating a type fails?\r\n\r\nHowever, simply providing a replacement type won't be enough to sort this. For example:\r\n\r\n1. The scenario covered by the `FormsFallbackWithUnsupportedNonDefaultConstructor` test: If we have provided a fallback type in response to the `FallbackTypeResolver` callback, it is very likely that instantiation of that fallback type will fail in non-default constructor scenarios (for example, using `x:FactoryMethod` or `x:Arguments`). In such a case, if we have a callback to handle instantiation throwing an exception, what should it return? Ultimately we probably just instantiate the fallback type using its default constructor.\r\n\r\n2. Similarly if we allow a custom type to be created, and it throws an exception while being instantiated, and `x:FactoryMethod` or `x:Arguments` was used to instantiate it, simply returning providing a replacement type in response to that failure will very likely fail again. I can't add a test for this scenario until we have a callback that handles instantiation failures.\r\n\r\nThe possibility also exists, of course, that instantiating the replacement type will work in the above scenario (for example, the user type might derive from a Forms type and have a constructor parameter that it bases to the base type constructor). So perhaps the best approach would be that the Previewer provides Forms with a replacement type (when instantiation fails) and Forms tries to instantiate that replacement type using the standard mechanism... then if *that* still fails, simply try to instantiate using the default constructor (if that wasn't already what we were doing). And if *that* fails, I think we'd simply throw 😄 \r\n\r\nFYI @alanmcgovern, @drewgillies "},{"Id":"8775900154","Type":"PullRequestEvent","CreatedAt":"2018-12-19T01:22:14","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4783","RelatedDescription":"Merged pull request \"[Android] Check if Drawable is null in Draw override on ImageButton\" (#4783) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nForms just sets the default Drawable to \"Transparent\" so the Drawable is never null. 3rd party libraries that implement their own handlers won't do this though so need to check if Drawable is null. \r\n\r\n### Issues Resolved ### \r\n- fixes #4782\r\n\r\n### Platforms Affected ### \r\n- Android\r\n\r\n### Testing Procedure ###\r\nThere aren't any.  I added a custom renderer UI test to replicate setting Drawable to null but there's no way to manually test outside of just making sure changes don't appear to cause more breaks.\r\nYou can check the ImageButtonGallery just to makes sure all seems correct\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8775703513","Type":"PullRequestEvent","CreatedAt":"2018-12-19T00:21:09","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4819","RelatedDescription":"Opened pull request \"[Android] Update ClipBounds to use ViewCompat.SetClipBounds\" (#4819) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n- Due to a regression modify *ImageElementManager* to use *ViewCompat.SetClipBounds* so as to not cause crashing\r\n\r\nI realize that there is a ClipBounds here in CollectionView code\r\nhttps://github.com/xamarin/Xamarin.Forms/blob/154c2d088a385513e2819e524040b8afff8f6f7a/Xamarin.Forms.Platform.Android/CollectionView/ItemsViewRenderer.cs#L48\r\n\r\nBut CollectionView is new code that only supports >= 19 so it wouldn't set a good precedence to fix CV to be compatible pre api 19\r\n\r\n### Issues Resolved ### \r\n- fixes #4789\r\n\r\n\r\n### Platforms Affected ### \r\n- Android\r\n\r\n\r\n### Testing Procedure ###\r\nRun ImageButton Gallery on pre api 18 device\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [X] Rebased on top of the target branch at time of PR\r\n- [X] Changes adhere to coding standard\r\n"},{"Id":"8775613386","Type":"PullRequestEvent","CreatedAt":"2018-12-18T23:54:46","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4786","RelatedDescription":"Merged pull request \"[X] throw XPE on missing element .ctor\" (#4786) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nIn case of runtime parse, wrap the MissingMethodException in a\r\nXamlParseException, to get lineInfo. In case of XamlC, detect missing\r\nconstructor and fail early.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #4751\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8775158765","Type":"IssuesEvent","CreatedAt":"2018-12-18T22:06:06","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3704","RelatedDescription":"Closed issue \"[Android] IsClippedToBounds does not work correctly on API < 18\" (#3704) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nsetClipBounds is currently only supported on API >= 18\r\n\r\nIn order to make it work on API < 18 in the same way that it works for >= 18 we would need to modify the ViewGroup and implement our own custom override to setClipBounds\r\n\r\nFor example\r\nhttps://stackoverflow.com/questions/18724976/can-setclipbounds-be-called-on-a-view-before-it-has-been-drawn\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Run MultipleClipToBounds in Control Gallery on a device with API < 18\r\n2. Notice how the described tests fail\r\n\r\n### Expected Behavior\r\nTests shouldn't fail\r\n\r\n### Actual Behavior\r\nTests do fail\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.2\r\n\r\n"},{"Id":"8775129767","Type":"IssuesEvent","CreatedAt":"2018-12-18T22:00:25","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4789","RelatedDescription":"Reopened issue \"[Android] No method with name='setClipBounds' crash in ImageElementManager\" (#4789) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nCrash `Java.Lang.LinkageError: no method with name='setClipBounds'` on Android 4.1/4.2.\r\n`ClipBounds` property on the `ImageView` is set _without_ an API check for >= API 18.\r\nhttps://github.com/xamarin/Xamarin.Forms/blob/27f83582e9493c02058875deb7ca3d47e3b65e42/Xamarin.Forms.Platform.Android/FastRenderers/ImageElementManager.cs#L23\r\n\r\n**ClipBounds** property was added in API Level 18.\r\nhttps://developer.xamarin.com/api/property/Android.Views.View.ClipBounds/\r\n\r\nThis change was introduced with #4218 in the fast `ImageRenderer` and recently moved to `ImageElementManager`.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Enable fast renderers on the application.\r\n2. Use a `Xamarin.Forms.Image` control.\r\n\r\n### Expected Behavior\r\nApp should not crash.\r\n\r\n### Actual Behavior\r\nApp crash on an Android 4.1/4.2 device.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: XF 3.4.0\r\n- Last known good version: XF 3.3.0 (introduced in XF 3.3.0 SR1)\r\n- Affected Devices: Android 4.1/4.2\r\n\r\n### Suggestion\r\n- Can we use the `ViewCompat` method available [here](https://android.googlesource.com/platform/frameworks/support/+/e5f75a851fbee9fbf1de31c738577fd86861a101/compat/java/android/support/v4/view/ViewCompat.java#1547) in Android.Support.V4.View?\r\n```"},{"Id":"8774824800","Type":"PullRequestEvent","CreatedAt":"2018-12-18T21:03:08","Actor":"mattleibow","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4705","RelatedDescription":"Closed pull request \"[WIP] Updating the Material Visual to v72.2.0 + Alerts\" (#4705) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nThe main point of this PR is to start a discussion on how to style non-element things. A button is fine with a `Visual` property. Different ones on a page will look weird, but still just an appearance.\r\n\r\nPopups, alerts, etc will look bad if each button pops up a different style depending on which page or which control launched it.\r\n\r\n**Options**\r\n - ~~new alert overload for material~~ (pre-crossed as this is evil, pure evil)\r\n - page-based visual: material pages show material popups\r\n    - page passes current visual to alert arguments\r\n    - alert implementation looks up page visual\r\n - app-based/global visual: the app decides on the style\r\n    - alert implementation looks up visual\r\n - more...\r\n\r\nReopened: https://github.com/xamarin/Xamarin.Forms/pull/4704"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8775223317","Type":"IssuesEvent","CreatedAt":"2018-12-18T22:19:08","Actor":"GouriKumari","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5291","RelatedDescription":"Opened issue \"[xharness] Executing a make inside xamain-macios/tests is throwing an exception with latest master build\" (#5291) at xamarin/xamarin-macios","RelatedBody":"\r\n### Steps to Reproduce\r\n\r\n1. Update System to xamarin-ios master, xamarin.ios-12.7.0.5.pkg\r\n2. Execute make inside xamarin-macios/tests\r\n\r\n### Expected Behavior\r\nIt will run successfully and generate all test projects\r\n\r\n### Actual Behavior\r\nFails to generate  test projects with file not found exception,\r\nhttps://gist.github.com/GouriKumari/a11b9c63c82db75f7b1cda77a03a2847#file-gistfile1-txt-L28\r\n\r\n### Environment\r\n\r\nTest Env: \r\nXI: xamarin.ios-12.7.0.5.pkg , master \r\n\r\nThis issue is not occuring with xamarin.ios 12.7.0.3, master build. \r\n\r\n### Example Project (If Possible)\r\n\r\nxamarin-macios/tests/make"},{"Id":"8773604401","Type":"IssuesEvent","CreatedAt":"2018-12-18T17:18:33","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5277","RelatedDescription":"Closed issue \"error MSB4018: The \"DetectSigningIdentity\" task failed unexpectedly.\" (#5277) at xamarin/xamarin-macios","RelatedBody":"There have been multiple reports about a failure in the DetectSigningIdentity task:\r\n\r\n    \"tomswiftydevicetests.csproj\" (default target) (1) ->\r\n    (_DetectSigningIdentity target) -> \r\n      /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018: The \"DetectSigningIdentity\" task failed unexpectedly. [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018: System.ArgumentException: An item with the same key has already been added. Key: com.apple.developer.pass-type-identifiers [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000ad] in <71f4e3d7d65e42b0a699d02e59766d3c>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <71f4e3d7d65e42b0a699d02e59766d3c>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Xamarin.MacDev.PDictionary.Add (System.String key, Xamarin.MacDev.PObject value) [0x00001] in <1619c6ec775046a2b5639a9558f65f7a>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Xamarin.MacDev.PropertyListFormat+XmlFormat+Context.ReadDict (Xamarin.MacDev.PDictionary dict) [0x000dc] in <1619c6ec775046a2b5639a9558f65f7a>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Xamarin.MacDev.PropertyListFormat+ReadWriteContext.ReadObject () [0x000ed] in <1619c6ec775046a2b5639a9558f65f7a>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Xamarin.MacDev.PropertyListFormat+XmlFormat+Context.ReadDict (Xamarin.MacDev.PDictionary dict) [0x000c9] in <1619c6ec775046a2b5639a9558f65f7a>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Xamarin.MacDev.PropertyListFormat+ReadWriteContext.ReadObject () [0x000ed] in <1619c6ec775046a2b5639a9558f65f7a>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Xamarin.MacDev.PObject.FromByteArray (System.Byte[] array, System.Int32 startIndex, System.Int32 length, System.Boolean& isBinary) [0x00035] in <1619c6ec775046a2b5639a9558f65f7a>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Xamarin.MacDev.PDictionary.FromByteArray (System.Byte[] array, System.Int32 startIndex, System.Int32 length, System.Boolean& isBinary) [0x00001] in <1619c6ec775046a2b5639a9558f65f7a>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Xamarin.MacDev.PDictionary.FromBinaryXml (System.Byte[] array) [0x00041] in <1619c6ec775046a2b5639a9558f65f7a>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Xamarin.MacDev.MobileProvision.LoadFromFile (System.String fileName) [0x0000e] in <1619c6ec775046a2b5639a9558f65f7a>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Xamarin.MacDev.MobileProvisionIndex.GetMobileProvisions (Xamarin.MacDev.MobileProvisionPlatform platform, System.String bundleIdentifier, Xamarin.MacDev.MobileProvisionDistributionType type, System.Collections.Generic.IList`1[T] developerCertificates, System.Boolean includeExpired, System.Boolean unique, System.Collections.Generic.List`1[T] failures) [0x0041d] in <1619c6ec775046a2b5639a9558f65f7a>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Xamarin.MacDev.Tasks.DetectSigningIdentityTaskBase.GetProvisioningProfiles (Xamarin.MacDev.MobileProvisionPlatform platform, Xamarin.MacDev.MobileProvisionDistributionType type, Xamarin.MacDev.Tasks.DetectSigningIdentityTaskBase+CodeSignIdentity identity, System.Collections.Generic.IList`1[T] certs) [0x0002a] in <1619c6ec775046a2b5639a9558f65f7a>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Xamarin.MacDev.Tasks.DetectSigningIdentityTaskBase.Execute () [0x00945] in <1619c6ec775046a2b5639a9558f65f7a>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00023] in <2338fdb301034c1d9c6b95e564d514b0>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n    /Library/Frameworks/Mono.framework/External/xbuild/Xamarin/iOS/Xamarin.iOS.Common.targets(646,3): error MSB4018:   at Microsoft.Build.BackEnd.TaskBuilder+<ExecuteInstantiatedTask>d__26.MoveNext () [0x00212] in <2338fdb301034c1d9c6b95e564d514b0>:0  [/Users/builder/jenkins/workspace/swift-o-matic/maccore/tools/tom-swifty/tests/tom-swifty-test/tomswiftydevicetests/iphone/tomswiftydevicetests.csproj]\r\n\r\nSources:\r\n\r\nhttps://stackoverflow.com/questions/53794998/duplicate-key-in-provisioning-profile-causes-build-failure-error-msb4018\r\nhttps://forums.xamarin.com/discussion/146770\r\nhttps://twitter.com/craigajohnson/status/1074031845275099136?s=21\r\n\r\nIt seems to be an Apple change in how they generate provisioning profiles:\r\n\r\nhttps://forums.developer.apple.com/message/343811#343811\n\n> VS bug [#752874](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/752874), VS bug [#752875](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/752875)"},{"Id":"8773477633","Type":"PullRequestEvent","CreatedAt":"2018-12-18T16:57:54","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5290","RelatedDescription":"Opened pull request \"[foundation] Respect HttpClient.Timeout for NSUrlSessionHandler. Fix #5190\" (#5290) at xamarin/xamarin-macios","RelatedBody":"When `HttpClient` is used it might not be possible to set custom\nproperties on the handler.\n\nThis PR avoids a fight between the `HttpClient.Timeout` and the ones that\n`NSURLSession` provides - making its use, as default, working as expected\n\nIt is still possible to set those custom properties when creating the\n`NSUrlSessionHandler` manually, so there's no loss of functionalities.\n\nAdding a unit test would be tricky since it depends on external sites and\nrequires \"enough\" delays to trigger (both leading to false positives over\ntime).\n\nNotes\n* HttpClientHandler timeout is broken -> https://github.com/mono/mono/issues/12100\n* CFNetworkHandler is broken when no data is received -> https://github.com/xamarin/xamarin-macios/issues/5289\n\nFixes https://github.com/xamarin/xamarin-macios/issues/5190"},{"Id":"8773421994","Type":"IssuesEvent","CreatedAt":"2018-12-18T16:49:26","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5289","RelatedDescription":"Opened issue \"CFNetworkHandler hangs of no data is received\" (#5289) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1.  Use test case from \r\nhttps://github.com/xamarin/xamarin-macios/issues/5190#issuecomment-448285868\r\n2. Supply an instance of `CFNetworkHandler` to the test code\r\n3. Run\r\n\r\n### Expected Behavior\r\n\r\n`PASS` after 120 seconds\r\n\r\n### Actual Behavior\r\n\r\nHangs\r\n\r\n### Environment\r\n\r\nStable and master\r\n\r\n### Notes\r\n\r\nThis does not seems related to the timeout itself. The URL used simply returns `200` after the specified time (120 seconds). The handler receive an *Open* and the a *Close* event - but never a *DataAvailable* - and that seems to be avoiding some _required_ code to avoid the hang."},{"Id":"8772408742","Type":"PullRequestEvent","CreatedAt":"2018-12-18T14:25:08","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5286","RelatedDescription":"Closed pull request \"[d15-9] Bump Xamarin.MacDev to get fix for #5277.\" (#5286) at xamarin/xamarin-macios","RelatedBody":"Bump Xamarin.MacDev to get fix for #5277, and use a custom Xamarin.MacDev\nbranch to only get this commit from Xamarin.MacDev.\n\nCommit list for xamarin/Xamarin.MacDev:\n\n* xamarin/Xamarin.MacDev@9b55404 Keys in property list dictionaries aren't necessarily unique. Fixes xamarin-macios#5277.\n\nDiff: https://github.com/xamarin/Xamarin.MacDev/compare/39ea45bad4eb85358467b9f316fa6b30aa223e9c...9b554042be42c0d49fbbfb714993faabdadfc864\n\nFixes https://github.com/xamarin/xamarin-macios/issues/5277."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1072256672498966533","CreatedAt":"2018-12-10T22:28:06+00:00","UserScreenname":"xamarinhq","Text":"CarouselView is Here! Xamarin.Forms 4.0 now includes an entirely new point of view. ...as part of the upcoming rele… https://t.co/Vh8UMRM4ez","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":152,"FavoriteCount":68,"RawContent":null},{"Id":"1070425707770195968","CreatedAt":"2018-12-05T21:12:30+00:00","UserScreenname":"xamarinhq","Text":"Yesterday at Microsoft Connect(); 2018 we announced our plans &amp; preview for Xamarin.Forms 4.0. This post will give… https://t.co/oNXLJGsrQ8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":141,"FavoriteCount":74,"RawContent":null},{"Id":"1070075277101944833","CreatedAt":"2018-12-04T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"Today, at #MSFTConnect 2018, we have several exciting announcements about brand new capabilities and foundational i… https://t.co/olEK9QjR1j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":38,"RawContent":null},{"Id":"1069721699225088008","CreatedAt":"2018-12-03T22:35:02+00:00","UserScreenname":"xamarinhq","Text":"Here's what we have coming up this month for #Xamarin and #dotNET Developer Events in December:… https://t.co/oAMbLqXh9f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":18,"RawContent":null},{"Id":"1068601941339582469","CreatedAt":"2018-11-30T20:25:31+00:00","UserScreenname":"xamarinhq","Text":"Now announcing multi-targeting with Android Support Library v28. \n\n...but what is multi-targeting you ask? Well, no… https://t.co/oBJ1j9vP6P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":53,"RawContent":null},{"Id":"1067915081495846913","CreatedAt":"2018-11-28T22:56:10+00:00","UserScreenname":"xamarinhq","Text":"The Xamarin #Android team has been working hard on improving Build Performance &amp; Reliability in both #VS2017 v15.9… https://t.co/c4iSbZJDy9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":45,"RawContent":null},{"Id":"1063457672048058371","CreatedAt":"2018-11-16T15:44:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing the release of Xamarin.Forms 3.4.0 w/ even more bug fixes and another new highly requested feature, an I… https://t.co/EJadLHYi73","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":180,"FavoriteCount":105,"RawContent":null},{"Id":"1063145593562902528","CreatedAt":"2018-11-15T19:03:56+00:00","UserScreenname":"xamarinhq","Text":"Build and deploy #ethereum smart contracts using the new @trufflesuite extension for #VSCode from @MSFTBlockchain… https://t.co/nEbiFUYaM2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":18,"RawContent":null},{"Id":"1062819180100100099","CreatedAt":"2018-11-14T21:26:53+00:00","UserScreenname":"xamarinhq","Text":"Want to get started w/ mobile dev using C# &amp; #Xamarin? We've got a Twitch Workshop for that.\n\nComing Friday, Nov 16… https://t.co/ce2vH9dC4t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":115,"FavoriteCount":61,"RawContent":null},{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":22,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":30,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":39,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":34,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":33,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":200,"FavoriteCount":112,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":56,"RawContent":null}]}},"RunOn":"2018-12-19T05:31:15.1280127Z","RunDurationInMilliseconds":4406}