{"Data":{"Sdk":{"Events":[{"Id":"7835891453","Type":"IssuesEvent","CreatedAt":"2018-06-17T12:52:18","Actor":"MaceWindu","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/510","RelatedDescription":"Closed issue \"2.9 not published on nuget?\" (#510) at OfficeDev/Open-XML-SDK","RelatedBody":"Is it github-only release or something went wrong with publishing?"},{"Id":"7835889610","Type":"IssuesEvent","CreatedAt":"2018-06-17T12:50:42","Actor":"MaceWindu","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/510","RelatedDescription":"Opened issue \"2.9 not published on nuget?\" (#510) at OfficeDev/Open-XML-SDK","RelatedBody":"Is it github-only release or something went wrong with publishing?"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[{"Id":"7835872576","Type":"PullRequestEvent","CreatedAt":"2018-06-17T12:36:58","Actor":"Krm1t","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/228","RelatedDescription":"Opened pull request \"Added support for extra document types.\" (#228) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"Added support for extra document types.\r\nAlso reordered case statements to make it more easy to spot the different types.\r\n\r\nUnfortunately i don't have any example documents to use for unit tests."},{"Id":"7806667523","Type":"IssuesEvent","CreatedAt":"2018-06-11T14:40:47","Actor":"VladDragnea","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/227","RelatedDescription":"Opened issue \"Accepting Revisions on a document that contains AlternativeFormatImportPart will remove the part\" (#227) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"Hi. I have this issue with any kind of document that contains altChunk element. Calling: OpenXmlPowerTools.RevisionAccepter.AcceptRevisions(wordDocument) on that document will remove all altChunk elements within the body of the document. I assume this is not supposed to happen, or am I wrong?\r\nThis is a simple version of a file on which this issue is happening:\r\n[Test.docx](https://github.com/OfficeDev/Open-Xml-PowerTools/files/2090414/Test.docx)\r\nand a scheenshot with the dom before:\r\n![test](https://user-images.githubusercontent.com/15382360/41238189-9d92a646-6d95-11e8-8f3b-7f93cc501897.png)\r\nAnd this is the document after calling AcceptRevisions:\r\n[Test-accepted.docx](https://github.com/OfficeDev/Open-Xml-PowerTools/files/2090427/Test-accepted.docx)\r\nwith a screenshot of the dom:\r\n![test-accepted](https://user-images.githubusercontent.com/15382360/41238247-c9bd16d4-6d95-11e8-97e3-c9c3c6e77eca.png)\r\n"},{"Id":"7788135122","Type":"IssuesEvent","CreatedAt":"2018-06-07T02:41:59","Actor":"v-fanfan","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/226","RelatedDescription":"Opened issue \"This is no Open-Xml-PowerTools.psm1 file, that I can import module to PS\" (#226) at OfficeDev/Open-Xml-PowerTools","RelatedBody":""},{"Id":"7767513467","Type":"IssuesEvent","CreatedAt":"2018-06-03T07:16:04","Actor":"YoungroKim","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/225","RelatedDescription":"Closed issue \"The bookmark ID may also be a string.\" (#225) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"The bookmark ID can also be a string. However, the code below assumes that the bookmark ID always contains only digits.\r\n\r\nDocumentBuilder.cs\r\n\r\n`\r\nprivate static void AdjustUniqueIds(WordprocessingDocument sourceDocument,\r\n            WordprocessingDocument newDocument, IEnumerable<XElement> newContent)\r\n        {\r\n            ......\r\n                int id = (int)item.Attribute(W.id);\r\n                if (!bookmarkIdMap.ContainsKey(id))\r\n                    bookmarkIdMap.Add(id, ++maxId);\r\n......\r\n        }\r\n`"},{"Id":"7767499472","Type":"IssuesEvent","CreatedAt":"2018-06-03T07:04:02","Actor":"YoungroKim","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/225","RelatedDescription":"Opened issue \"The bookmark ID may also be a string.\" (#225) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"The bookmark ID can also be a string. However, the code below assumes that the bookmark ID always contains only digits.\r\n\r\nDocumentBuilder.cs\r\n`private static void AdjustUniqueIds(WordprocessingDocument sourceDocument,\r\n            WordprocessingDocument newDocument, IEnumerable<XElement> newContent)\r\n        {\r\n            // adjust bookmark unique ids\r\n            int maxId = 0;\r\n            if (newDocument.MainDocumentPart.GetXDocument().Descendants(W.bookmarkStart).Any())\r\n                maxId = newDocument.MainDocumentPart.GetXDocument().Descendants(W.bookmarkStart)\r\n                    .Select(d => (int)d.Attribute(W.id)).Max();\r\n            Dictionary<int, int> bookmarkIdMap = new Dictionary<int, int>();\r\n            foreach (var item in newContent.DescendantsAndSelf().Where(bm => bm.Name == W.bookmarkStart ||\r\n                bm.Name == W.bookmarkEnd))\r\n            {\r\n                **int id = (int)item.Attribute(W.id);**\r\n                if (!bookmarkIdMap.ContainsKey(id))\r\n                    bookmarkIdMap.Add(id, ++maxId);\r\n            }\r\n            foreach (var bookmarkElement in newContent.DescendantsAndSelf().Where(e => e.Name == W.bookmarkStart ||\r\n                e.Name == W.bookmarkEnd))\r\n                bookmarkElement.Attribute(W.id).Value = bookmarkIdMap[(int)bookmarkElement.Attribute(W.id)].ToString();\r\n\r\n            // adjust shape unique ids\r\n            // This doesn't work because OLEObjects refer to shapes by ID.\r\n            // Punting on this, because sooner or later, this will be a non-issue.\r\n            //foreach (var item in newContent.DescendantsAndSelf(VML.shape))\r\n            //{\r\n            //    Guid g = Guid.NewGuid();\r\n            //    string s = \"R\" + g.ToString().Replace(\"-\", \"\");\r\n            //    item.Attribute(NoNamespace.id).Value = s;\r\n            //}\r\n        }`"}],"ResultType":"GitHubEvent"}},"RunOn":"2018-06-19T05:30:46.1034489Z","RunDurationInMilliseconds":1804}