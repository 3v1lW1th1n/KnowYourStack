{"Data":{"GitHub":{"Issues":[{"Id":"428533121","IsPullRequest":false,"CreatedAt":"2019-04-03T02:27:14","Actor":"agarwal-peeush","Number":"3186","RawContent":null,"Title":"How to transform Date column into C# DateTime Column?","State":"open","Body":"I'm working on a specific regression problem which provides Date of journey in string in dd/MM/yyyy format. How can I GetColumn as C# DateTime datatype column?\r\n\r\n```\r\npublic class IssueSample\r\n{\r\n        [LoadColumn(0)]\r\n        public string Col1;\r\n        [LoadColumn(1)]\r\n        public string DateOfJourneyStr;\r\n        \r\n        private const string DATETIME_FORMAT = \"dd/MM/yyyy\";\r\n        public DateTime? DateOfJourney\r\n            => ParseDateTime(DateOfJourneyStr);\r\n        public static DateTime? ParseDateTime(string dateOfJourneyStr)\r\n        {\r\n            if (DateTime.TryParseExact(dateOfJourneyStr, DATETIME_FORMAT, CultureInfo.InvariantCulture, DateTimeStyles.None, out var result))\r\n                return result;\r\n            return null;\r\n        }\r\n}\r\n```\r\n\r\nI'm trying to get Min and Max DateOfJourney values as following:\r\n```\r\nprivate static void BuildTrainEvaluateAndSaveModel(MLContext mlContext)\r\n        {\r\n            // STEP 1: Common data loading configuration\r\n            IDataView baseTrainingDataView = mlContext.Data.LoadFromTextFile<IssueSample>(TrainDataPath, hasHeader: true, separatorChar: ',');\r\n            IDataView testDataView = mlContext.Data.LoadFromTextFile<IssueSample>(TestDataPath, hasHeader: true, separatorChar: ',');\r\n\r\n            var dateOfJourneyMin = baseTrainingDataView.GetColumn<DateTime?>(mlContext, nameof(IssueSample.DateOfJourney)).Min();\r\n            System.Console.WriteLine($\"Min DateOfJourney = {dateOfJourneyMin}\");\r\n            var dateOfJourneyMax = baseTrainingDataView.GetColumn<DateTime?>(mlContext, nameof(IssueSample.DateOfJourney)).Max();\r\n            System.Console.WriteLine($\"Max DateOfJourney = {dateOfJourneyMax}\");\r\n        }\r\n```\r\n\r\nBut I get an error as follows: \r\n\r\n> System.ArgumentOutOfRangeException: 'Could not find input column 'DateOfJourney'\r\n> Parameter name: columnName'\r\n\r\nCould somebody suggest how to achieve this in ML.NET?","Url":"https://github.com/dotnet/machinelearning/issues/3186","RelatedDescription":"Open issue \"How to transform Date column into C# DateTime Column?\" (#3186)"},{"Id":"428507463","IsPullRequest":true,"CreatedAt":"2019-04-03T00:39:43","Actor":"yaeldekel","Number":"3185","RawContent":null,"Title":"Improve saving and loading of TextFeaturizingEstimator","State":"open","Body":"Fixes #3128.","Url":"https://github.com/dotnet/machinelearning/pull/3185","RelatedDescription":"Open PR \"Improve saving and loading of TextFeaturizingEstimator\" (#3185)"},{"Id":"428370621","IsPullRequest":false,"CreatedAt":"2019-04-03T00:19:43","Actor":"prathyusha12345","Number":"3175","RawContent":null,"Title":"Auc is NaN when loading data from IEnumerable","State":"closed","Body":"I am getting below error when I am evaluating the model.\r\n\r\nSystem.ArgumentOutOfRangeException: 'AUC is not definied when there is no negative class in the data\r\nParameter name: NegSample'\r\n### Source code / logs\r\n\r\nThe values of  label column are **true**/**false**. I applied transformation on label using MapValuetoKey to convert true to 1 and false to 0. But I still get the error while evaluating.\r\n\r\nSee the below code.\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.Data.DataView;\r\nusing System.Collections.Generic;\r\n\r\nnamespace MLNETConsoleApp3\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            // 1. Implement the pipeline for creating and training the model    \r\n            var mlContext = new MLContext();\r\n            var trainingData = GetTrainingData();\r\n            var TestData = GetTestData();\r\n\r\n            // 2. Specify how training data is going to be loaded into the DataView\r\n            IDataView trainingDataView = mlContext.Data.LoadFromEnumerable(trainingData);\r\n\r\n            // 2. Create a pipeline to prepare your data, pick your features and apply a machine learning algorithm.\r\n            // 2a. Featurize the text into a numeric vector that can be used by the machine learning algorithm.\r\n            var pipeline = mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: \"keyName\", inputColumnName: DefaultColumnNames.Label).\r\n                Append(mlContext.Transforms.Text.FeaturizeText(outputColumnName: DefaultColumnNames.Features, inputColumnName: nameof(SentimentData.Text)))\r\n                    .Append(mlContext.BinaryClassification.Trainers.StochasticDualCoordinateAscent(labelColumnName: \"keyName\",\r\n                                                                                                   featureColumnName: DefaultColumnNames.Features))\r\n                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName: DefaultColumnNames.Label, inputColumnName: \"keyName\"));\r\n\r\n             var transformedData_default = pipeline.Fit(trainingDataView).Transform(trainingDataView);\r\n            var preViewTransformedData = transformedData_default.Preview(maxRows: 4);\r\n\r\n            foreach (var row in preViewTransformedData.RowView)\r\n            {\r\n                var ColumnCollection = row.Values;\r\n                string lineToPrint = \"Row--> \";\r\n                foreach (KeyValuePair<string, object> column in ColumnCollection)\r\n                {\r\n                    lineToPrint += $\"| {column.Key}:{column.Value}\";\r\n                }\r\n                Console.WriteLine(lineToPrint + \"\\n\");\r\n            }\r\n\r\n            // 3. Get a model by training the pipeline that was built.\r\n            Console.WriteLine(\"Creating and Training a model for Sentiment Analysis using ML.NET\");\r\n            ITransformer model = pipeline.Fit(trainingDataView);\r\n\r\n            // 4. Evaluate the model to see how well it performs on different dataset (test data).\r\n            Console.WriteLine(\"Training of model is complete \\nEvaluating the model with test data\");\r\n\r\n            IDataView testDataView = mlContext.Data.LoadFromEnumerable(TestData);\r\n            var predictions = model.Transform(testDataView);\r\n            var results = mlContext.BinaryClassification.Evaluate(predictions);\r\n            Console.WriteLine($\"Accuracy: {results.Accuracy:P2}\");\r\n\r\n            // 5. Use the model for making a single prediction.\r\n            var predictionEngine = model.CreatePredictionEngine<SentimentData, SentimentPrediction>(mlContext);\r\n            var testInput = new SentimentData { Text = \"ML.NET is fun, more samples at https://github.com/dotnet/machinelearning-samples\" };\r\n            SentimentPrediction resultprediction = predictionEngine.Predict(testInput);\r\n\r\n            /* This template uses a minimal dataset to build a sentiment analysis model which leads to relatively low accuracy. \r\n             * Building good Machine Learning models require large volumes of data. This template comes with a minimal dataset (Data/wikipedia-detox) for sentiment analysis. \r\n             * In order to build a sentiment analysis model with higher accuracy please follow the walkthrough at https://aka.ms/mlnetsentimentanalysis/. */\r\n            Console.WriteLine($\"Predicted sentiment for \\\"{testInput.Text}\\\" is: { (Convert.ToBoolean(resultprediction.Prediction) ? \"Positive\" : \"Negative\")}\");\r\n\r\n            // 6. Save the model to file so it can be used in another app.\r\n            Console.WriteLine(\"Saving the model\");\r\n\r\n            using (var fs = new FileStream(\"sentiment_model.zip\", FileMode.Create, FileAccess.Write, FileShare.Write))\r\n            {\r\n                model.SaveTo(mlContext, fs);\r\n                fs.Close();\r\n            }\r\n\r\n            Console.ReadLine();\r\n        }\r\n\r\n\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3175","RelatedDescription":"Closed issue \"Auc is NaN when loading data from IEnumerable\" (#3175)"},{"Id":"428502357","IsPullRequest":true,"CreatedAt":"2019-04-03T00:16:07","Actor":"abgoswam","Number":"3184","RawContent":null,"Title":"Samples for FeatureSelection transform estimators","State":"open","Body":"Towards #1209 \r\n\r\nThe PR makes the following changes\r\n\r\n- Adds sample for the `SelectFeaturesBasedOnCount` transform estimator.\r\n- Adds sample for the `SelectFeaturesBasedOnMutualInformation` transform estimator.\r\n- Delete old sample.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3184","RelatedDescription":"Open PR \"Samples for FeatureSelection transform estimators\" (#3184)"},{"Id":"428479112","IsPullRequest":true,"CreatedAt":"2019-04-02T22:45:40","Actor":"zeahmed","Number":"3183","RawContent":null,"Title":"Created samples for 'ProduceWordBags' and 'ProduceHashedWordBags' API.","State":"open","Body":"Related to #1209.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3183","RelatedDescription":"Open PR \"Created samples for 'ProduceWordBags' and 'ProduceHashedWordBags' API.\" (#3183)"},{"Id":"428473929","IsPullRequest":true,"CreatedAt":"2019-04-02T22:39:01","Actor":"eerhardt","Number":"3181","RawContent":null,"Title":"Fix IncludeBuildNumberInPackageVersion for official builds","State":"closed","Body":"When doing an official build and setting a AzDO build variable, the variable turns into an environment variable. When MSBuild props/targets files declare a property, if they don't check if the property is already set, the MSBuild props file will override the environment variable. This causes the AzDO build variable to be ignored.\r\n\r\nAdding a check if the IncludeBuildNumberInPackageVersion property is already set before setting it in Directory.Build.props.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3181","RelatedDescription":"Closed or merged PR \"Fix IncludeBuildNumberInPackageVersion for official builds\" (#3181)"},{"Id":"428474581","IsPullRequest":true,"CreatedAt":"2019-04-02T22:30:45","Actor":"eerhardt","Number":"3182","RawContent":null,"Title":"Fix IncludeBuildNumberInPackageVersion for official builds","State":"open","Body":"When doing an official build and setting a AzDO build variable, the variable turns into an environment variable. When MSBuild props/targets files declare a property, if they don't check if the property is already set, the MSBuild props file will override the environment variable. This causes the AzDO build variable to be ignored.\r\n\r\nAdding a check if the IncludeBuildNumberInPackageVersion property is already set before setting it in Directory.Build.props.\r\n\r\nThis is a cherry-pick of #3181 for the `master` branch.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3182","RelatedDescription":"Open PR \"Fix IncludeBuildNumberInPackageVersion for official builds\" (#3182)"},{"Id":"427881915","IsPullRequest":true,"CreatedAt":"2019-04-02T22:06:18","Actor":"zeahmed","Number":"3156","RawContent":null,"Title":" Created samples for TokenizeIntoWords and RemoveStopWords APIs.","State":"closed","Body":"Related to #1209.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3156","RelatedDescription":"Closed or merged PR \" Created samples for TokenizeIntoWords and RemoveStopWords APIs.\" (#3156)"},{"Id":"428458616","IsPullRequest":true,"CreatedAt":"2019-04-02T21:43:07","Actor":"wschin","Number":"3180","RawContent":null,"Title":"Fix a value-mapping bug","State":"open","Body":"This PR fixes #3166.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3180","RelatedDescription":"Open PR \"Fix a value-mapping bug\" (#3180)"},{"Id":"428442476","IsPullRequest":true,"CreatedAt":"2019-04-02T21:01:45","Actor":"abgoswam","Number":"3179","RawContent":null,"Title":"Samples for categorical transform estimators","State":"open","Body":"Towards #1209 \r\n\r\nThe PR makes the following changes\r\n\r\n- Adds sample for the `OneHotHashEncoding` transform estimator.\r\n- Updated  sample for the `OneHotEncoding` transform estimator.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3179","RelatedDescription":"Open PR \"Samples for categorical transform estimators\" (#3179)"},{"Id":"428425374","IsPullRequest":true,"CreatedAt":"2019-04-02T20:39:10","Actor":"shauheen","Number":"3178","RawContent":null,"Title":"Cherry pick release notes into release for RC1","State":"closed","Body":"Adding release notes for RC1 (#3176)\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3178","RelatedDescription":"Closed or merged PR \"Cherry pick release notes into release for RC1\" (#3178)"},{"Id":"428400256","IsPullRequest":true,"CreatedAt":"2019-04-02T20:19:04","Actor":"shauheen","Number":"3176","RawContent":null,"Title":"Adding release notes for RC1","State":"closed","Body":"Adding release notes for v1.0.0-preview","Url":"https://github.com/dotnet/machinelearning/pull/3176","RelatedDescription":"Closed or merged PR \"Adding release notes for RC1\" (#3176)"},{"Id":"428417671","IsPullRequest":true,"CreatedAt":"2019-04-02T20:05:31","Actor":"zeahmed","Number":"3177","RawContent":null,"Title":"Created samples for 'ProduceNgrams' and 'ProduceHashedNgrams' APIs.","State":"open","Body":"Related to #1209.","Url":"https://github.com/dotnet/machinelearning/pull/3177","RelatedDescription":"Open PR \"Created samples for 'ProduceNgrams' and 'ProduceHashedNgrams' APIs.\" (#3177)"},{"Id":"428362681","IsPullRequest":true,"CreatedAt":"2019-04-02T18:47:59","Actor":"shauheen","Number":"3174","RawContent":null,"Title":"Cherry-pick for RC1","State":"closed","Body":"Cherry picking changes into release for RC1\r\n\r\n*No Squash*","Url":"https://github.com/dotnet/machinelearning/pull/3174","RelatedDescription":"Closed or merged PR \"Cherry-pick for RC1\" (#3174)"},{"Id":"428360252","IsPullRequest":true,"CreatedAt":"2019-04-02T17:48:16","Actor":"Ivanidzo4ka","Number":"3173","RawContent":null,"Title":"Put product version with git commit into model.zip/version.txt","State":"open","Body":"Fixes #3132 ","Url":"https://github.com/dotnet/machinelearning/pull/3173","RelatedDescription":"Open PR \"Put product version with git commit into model.zip/version.txt\" (#3173)"},{"Id":"427897987","IsPullRequest":true,"CreatedAt":"2019-04-02T16:58:36","Actor":"shauheen","Number":"3157","RawContent":null,"Title":"Temporarily disable myget","State":"closed","Body":"fixes #2244 yet AGAIN!","Url":"https://github.com/dotnet/machinelearning/pull/3157","RelatedDescription":"Closed or merged PR \"Temporarily disable myget\" (#3157)"},{"Id":"428339561","IsPullRequest":true,"CreatedAt":"2019-04-02T16:58:25","Actor":"codemzs","Number":"3172","RawContent":null,"Title":"Multi-column mapping API for normalizer estimators.","State":"open","Body":"fixes #3171","Url":"https://github.com/dotnet/machinelearning/pull/3172","RelatedDescription":"Open PR \"Multi-column mapping API for normalizer estimators.\" (#3172)"},{"Id":"428339300","IsPullRequest":false,"CreatedAt":"2019-04-02T16:57:50","Actor":"codemzs","Number":"3171","RawContent":null,"Title":"Multi-column mapping API for normalizer estimators.","State":"open","Body":"We need an API that lets the user normalize multiple columns at once for ease and more importantly performance benefits. ","Url":"https://github.com/dotnet/machinelearning/issues/3171","RelatedDescription":"Open issue \"Multi-column mapping API for normalizer estimators.\" (#3171)"},{"Id":"428325402","IsPullRequest":true,"CreatedAt":"2019-04-02T16:25:55","Actor":"wschin","Number":"3170","RawContent":null,"Title":"Fix matrix factorization trainer's doc based on user feedback","State":"open","Body":"This PR fixes #3169 by\r\n- updating key-typed variable's description in matrix factorization trainer's doc, and\r\n- adding one more reference for alg used.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3170","RelatedDescription":"Open PR \"Fix matrix factorization trainer's doc based on user feedback\" (#3170)"},{"Id":"428207932","IsPullRequest":false,"CreatedAt":"2019-04-02T12:49:26","Actor":"RileyAtWork","Number":"3169","RawContent":null,"Title":"KeyType in example is invalid","State":"open","Body":"\r\n[Enter feedback here]\r\nIn 0.11 KeyType only takes 1 parameter -  'ulong count' \r\nclass MatrixElement\r\n       {\r\n           // Matrix column index starts from firstColumnIndex and is at most firstColumnIndex+n-1.\r\n           // Contieuous=true means that all values from firstColumnIndex to firstColumnIndex+n-1 are allowed keys.\r\n           // [KeyType(Contiguous = true, Count = n, Min = firstColumnIndex)]\r\n           // public uint MatrixColumnIndex;\r\n           // Matrix row index starts from firstRowIndex and is at most firstRowIndex+m-1.\r\n           // Contieuous=true means that all values from firstRowIndex to firstRowIndex+m-1 are allowed keys.\r\n           [KeyType(Contiguous = true, Count = m, Min = firstRowIndex)]\r\n           public uint MatrixRowIndex;\r\n           // The rating at the MatrixColumnIndex-th column and the MatrixRowIndex-th row.\r\n           public float Value;\r\n       }\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 335e2f1c-de96-9963-8edc-c45bc5d31105\r\n* Version Independent ID: 571d5df2-bce7-9fdf-c123-5c932d7935ce\r\n* Content: [MatrixFactorizationTrainer Class (Microsoft.ML.Trainers)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.matrixfactorizationtrainer?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers/MatrixFactorizationTrainer.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers/MatrixFactorizationTrainer.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @sfilipi\r\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/3169","RelatedDescription":"Open issue \"KeyType in example is invalid\" (#3169)"},{"Id":"428045564","IsPullRequest":true,"CreatedAt":"2019-04-02T06:26:55","Actor":"sfilipi","Number":"3167","RawContent":null,"Title":"Conversion catalog samples","State":"open","Body":"Towards #1209 \r\nAdding and adjusting samples for the Conversions catalog. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3167","RelatedDescription":"Open PR \"Conversion catalog samples\" (#3167)"},{"Id":"428038943","IsPullRequest":false,"CreatedAt":"2019-04-02T06:03:15","Actor":"sfilipi","Number":"3166","RawContent":null,"Title":"The ValueMap Train method assumes that keys are on the first column, and values on the second, rather than storing the columns and using those","State":"open","Body":"If the [lookupMap IDataView  in the MapValue API](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/Transforms/ConversionsExtensionsCatalog.cs#L412) is constructed so that the first column contains the keys, and the second one contains the values, this API will work as expected; if the lookup idv is constructed in any other order, the API won't work, because the Train method of the transformer has hardcoded the index = 0 to be the keys of the idv, and index = 1 to be the values .\r\n\r\nThe [ValueMapping Train](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/Transforms/ValueMapping.cs#L836)  should not assume that the first column is the keys, and the second is the values; it should instead save the columns passed to it [from the API](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/Transforms/ConversionsExtensionsCatalog.cs#L412) (and not just the column names, like it is doing now) and get the cursor based on the columns, rather than indices. \r\n\r\n\r\nEasy repro: : swap the order of the members in the LookupMap class below, and see how it fails. \r\n\r\n```csharp\r\n // Type for the IDataView that will be serving as the map\r\nprivate class LookupMap\r\n {\r\n     public float Value { get; set; }\r\n     public string Category { get; set; }\r\n }\r\n```\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace Microsoft.ML.Samples.Dynamic\r\n{\r\n    public static class MapValueIdvLookup\r\n    {\r\n        /// This example demonstrates the use of MapValue by mapping floats to strings, looking up the mapping in an IDataView. \r\n        /// This is useful to map types to a grouping. \r\n        public static void Example()\r\n        {\r\n            // Create a new ML context, for ML.NET operations. It can be used for exception tracking and logging, \r\n            // as well as the source of randomness.\r\n            var mlContext = new MLContext();\r\n\r\n            // Get a small dataset as an IEnumerable.\r\n            var rawData = new[] {\r\n                new DataPoint() { Price = 3.14f },\r\n                new DataPoint() { Price = 2000f },\r\n                new DataPoint() { Price = 1.19f },\r\n                new DataPoint() { Price = 2.17f },\r\n                new DataPoint() { Price = 33.784f },\r\n\r\n            };\r\n\r\n            // Convert to IDataView\r\n            var data = mlContext.Data.LoadFromEnumerable(rawData);\r\n\r\n            // Create the lookup map data IEnumerable.   \r\n            var lookupData = new[] {\r\n                new LookupMap { Value = 3.14f, Category = \"Low\" },\r\n                new LookupMap { Value = 1.19f , Category = \"Low\" },\r\n                new LookupMap { Value = 2.17f , Category = \"Low\" },\r\n                new LookupMap { Value = 33.784f, Category = \"Medium\" },\r\n                new LookupMap { Value = 2000f, Category = \"High\"}\r\n\r\n            };\r\n\r\n            // Convert to IDataView\r\n            var lookupIdvMap = mlContext.Data.LoadFromEnumerable(lookupData);\r\n\r\n            // Constructs the ValueMappingEstimator making the ML.NET pipeline\r\n            var pipeline = mlContext.Transforms.Conversion.MapValue(\"PriceCategory\", lookupIdvMap, lookupIdvMap.Schema[\"Value\"], lookupIdvMap.Schema[\"Category\"], \"Price\");\r\n\r\n            // Fits the ValueMappingEstimator and transforms the data converting the Price to PriceCategory.\r\n            IDataView transformedData = pipeline.Fit(data).Transform(data);\r\n\r\n            // Getting the resulting data as an IEnumerable.\r\n            IEnumerable<TransformedData> features = mlContext.Data.CreateEnumerable<TransformedData>(transformedData, reuseRowObject: false);\r\n\r\n            Console.WriteLine($\" Price   PriceCategory\");\r\n            foreach (var featureRow in features)\r\n                Console.WriteLine($\"{featureRow.Price}\\t\\t{featureRow.PriceCategory}\");\r\n\r\n            // TransformedData obtained post-transformation.\r\n            //\r\n            // Price        PriceCategory\r\n            // 3.14            Low\r\n            // 2000            High\r\n            // 1.19            Low\r\n            // 2.17            Low\r\n            // 33.784          Medium\r\n        }\r\n\r\n        // Type for the IDataView that will be serving as the map\r\n        private class LookupMap\r\n        {\r\n            public float Value { get; set; }\r\n            public string Category { get; set; }\r\n        }\r\n\r\n        private class DataPoint\r\n        {\r\n            public float Price { get; set; }\r\n        }\r\n\r\n        private class TransformedData : DataPoint\r\n        {\r\n            public string PriceCategory { get; set; }\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3166","RelatedDescription":"Open issue \"The ValueMap Train method assumes that keys are on the first column, and values on the second, rather than storing the columns and using those\" (#3166)"},{"Id":"427954237","IsPullRequest":false,"CreatedAt":"2019-04-02T02:38:01","Actor":"codemzs","Number":"3161","RawContent":null,"Title":"Remove generic normalizer estimator catalog methods.","State":"closed","Body":"We now have a method for each of the normalizer type so we should get rid of methods that accept enum for normalizer type.","Url":"https://github.com/dotnet/machinelearning/issues/3161","RelatedDescription":"Closed issue \"Remove generic normalizer estimator catalog methods.\" (#3161)"},{"Id":"427981700","IsPullRequest":true,"CreatedAt":"2019-04-02T01:30:46","Actor":"abgoswam","Number":"3165","RawContent":null,"Title":"Samples and unit test for image-related  transform estimators","State":"open","Body":"Towards #1209\r\n\r\nThe PR makes the following changes\r\n\r\n- Adds unit test and  sample  for the `ConvertToImage` transform estimator.   \r\n\r\n- Fixes the info presented to the user for the 4 existing image samples   {ConvertToGrayscale, LoadImages, ExtractPixels, ResizeImages}\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3165","RelatedDescription":"Open PR \"Samples and unit test for image-related  transform estimators\" (#3165)"},{"Id":"427971389","IsPullRequest":false,"CreatedAt":"2019-04-02T00:40:54","Actor":"Anipik","Number":"3164","RawContent":null,"Title":"Use new Microsoft.DotNet.RemoteExecutor package","State":"open","Body":"Dotnet team just added a new package in the arcade repo called Microsoft.DotNet.RemoteExecutor package. https://github.com/dotnet/arcade/pull/2176\r\n\r\nWe use a lot of code from this project to run our tests. This code was added in https://github.com/dotnet/machinelearning/pull/2200\r\n\r\nAlthough slight modifications were made to the code to handle Microsoft.ML based scenarios.\r\nBut i think we should be able to use this package to run other tests.\r\n\r\ncc @ViktorHofer ","Url":"https://github.com/dotnet/machinelearning/issues/3164","RelatedDescription":"Open issue \"Use new Microsoft.DotNet.RemoteExecutor package\" (#3164)"},{"Id":"427970071","IsPullRequest":true,"CreatedAt":"2019-04-02T00:34:25","Actor":"singlis","Number":"3163","RawContent":null,"Title":"Adding initial F# example for docs/samples","State":"open","Body":"- Adds initial FSharp example for the docs samples. This is the ApplyCustomWordEmbedding. It is an in-memory example that follows the C# example. \r\n- Adds the Microsoft.ML.Samples.FSharp project to hold the FSharp examples\r\n- Adds the FSharp examples directory structure\r\n- Updates the ApplyWordBedding with an code-fsharp tag so that it will link to the correct sample\r\n\r\nReferences #3100\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3163","RelatedDescription":"Open PR \"Adding initial F# example for docs/samples\" (#3163)"},{"Id":"427957016","IsPullRequest":false,"CreatedAt":"2019-04-01T23:32:26","Actor":"abgoswam","Number":"3162","RawContent":null,"Title":"Schema comprehension fails for type System.Drawing.Bitmap","State":"open","Body":"Several of the image transforms in ML.NET produce intermediate columns of type System.Drawing.Bitmap\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e5cbca78683e3c1036966e07b7fd7d1b180c1562/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/ImageAnalytics/ConvertToGrayScale.cs#L39-L42\r\n\r\nIf we try to use  schema comprehension to  map some intermediate data (e.g. `transformedData`) to an IEnumerable,  we  hit an exception  when  dealing with  a column of type ` System.Drawing.Bitmap`\r\n\r\n**Error**: Unhandled Exception: System.ArgumentOutOfRangeException: Could not determine an IDataView type for member ImageObject\r\n\r\n@Ivanidzo4ka ","Url":"https://github.com/dotnet/machinelearning/issues/3162","RelatedDescription":"Open issue \"Schema comprehension fails for type System.Drawing.Bitmap\" (#3162)"},{"Id":"427905494","IsPullRequest":true,"CreatedAt":"2019-04-01T22:33:56","Actor":"shauheen","Number":"3158","RawContent":null,"Title":"Update release version to 1.0 for release branch","State":"closed","Body":"This PR updates the version on the release v1.0 branch","Url":"https://github.com/dotnet/machinelearning/pull/3158","RelatedDescription":"Closed or merged PR \"Update release version to 1.0 for release branch\" (#3158)"},{"Id":"427931647","IsPullRequest":false,"CreatedAt":"2019-04-01T22:02:04","Actor":"shmoradims","Number":"3160","RawContent":null,"Title":"API reference - Finalize the template for trainer samples","State":"open","Body":"Our current template for trainer API reference samples is as follows:\r\n\r\n1) Create in-memory random training data (as discussed in #2726 we're avoiding complex datasets and text-loader).\r\n2) Create a pipeline with just the trainer (i.e. focusing only on the API that this sample is about without getting into complex featurization pipeline).\r\n3) Fit the trainer.\r\n4) Generate 5 predictions and output results.\r\n5) Evaluate with in-memory test data and output metrics.\r\n\r\nBelow are some examples:\r\n* Binary classification: [FastTree](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/FastTree.cs), [FastTreeWithOptions](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/FastTreeWithOptions.cs)\r\n* Regression: [PoissonRegression](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/PoissonRegression.cs), [PoissonRegressionWithOptions](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/PoissonRegressionWithOptions.cs).\r\n\r\nOther samples will be added using this template. If you want to make any changes please mention them here so that we can finalize the sample.\r\n\r\n/cc @shauheen @glebuk\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3160","RelatedDescription":"Open issue \"API reference - Finalize the template for trainer samples\" (#3160)"},{"Id":"427925136","IsPullRequest":true,"CreatedAt":"2019-04-01T21:42:14","Actor":"ganik","Number":"3159","RawContent":null,"Title":"Added OneVersusAll and PairwiseCoupling samples.","State":"open","Body":"Part of #2522.\r\nAdds a sample for OneVersusAll classification.\r\nAdds a sample for PairwiseCoupling classification.","Url":"https://github.com/dotnet/machinelearning/pull/3159","RelatedDescription":"Open PR \"Added OneVersusAll and PairwiseCoupling samples.\" (#3159)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-04-03T05:30:32.9627882Z","RunDurationInMilliseconds":556}