{"Data":{"Blog":{"FeedItems":[{"Title":"How the .NET Team uses Azure Pipelines to produce Docker Images","PublishedOn":"2019-08-28T16:30:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Producing Docker images for .NET might not seem like that big of a deal.  Once you’ve got a Dockerfile defined, just run &#8220;docker build&#8220; and &#8220;docker push&#8220; and you’re done,...","Href":"https://devblogs.microsoft.com/dotnet/how-the-net-team-uses-azure-pipelines-to-produce-docker-images/","RawContent":null},{"Title":"Visual Studio Tips and Tricks: Increasing your Productivity for .NET","PublishedOn":"2019-08-22T17:20:27+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"The .NET team is constantly thinking of new ways to make developers more productive. We&#8217;ve been working hard over the past year to take the feedback you&#8217;ve sent us and turn it into tools...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-tips-and-tricks-increasing-your-productivity-for-net/","RawContent":null},{"Title":"Messaging Practices","PublishedOn":"2019-08-22T16:00:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post is a collection of content from David Boike from the Particular.net blog calling out some common problems and solutions for building message based distributed systems. They are relevant to...","Href":"https://devblogs.microsoft.com/dotnet/messaging-practices/","RawContent":null},{"Title":"Hey .NET! Have you tried ML.NET?","PublishedOn":"2019-08-21T15:00:51+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers.\nUsing ML.NET you can easily build custom machine learning models for scenarios like sentiment analysis,...","Href":"https://devblogs.microsoft.com/dotnet/hey-net-have-you-tried-ml-net/","RawContent":null},{"Title":".NET Framework August 2019 Preview of Quality Rollup","PublishedOn":"2019-08-20T17:42:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the August 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nBCL1\nAddresses a crash that occurs...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-august-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core and systemd","PublishedOn":"2019-08-19T16:01:04+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"In preview7 a new package was added to the Microsoft.Extensions set of packages that enables integration with systemd. For the Windows focused, systemd allows similar functionality to Windows...","Href":"https://devblogs.microsoft.com/dotnet/net-core-and-systemd/","RawContent":null},{"Title":".NET Framework 4.8 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2019-08-13T19:47:54+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"We are happy to announce that Microsoft .NET Framework 4.8 is now available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes quality...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-4-8-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 8","PublishedOn":"2019-08-13T18:31:00+00:00","CommentsCount":20,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 8. Just like with Preview 7, we&#8217;ve focused on polishing .NET Core 3.0 for a final release and are not adding new features. If these final previews...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-8/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 8 and Entity Framework 6.3 Preview 8","PublishedOn":"2019-08-13T18:29:25+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"The Preview 8 versions of the EF Core 3.0 package and the EF 6.3 package are now available for download from nuget.org.\nNew previews of .NET Core 3.0 and ASP.NET Core 3.0 are also available...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-8-and-entity-framework-6-3-preview-8/","RawContent":null},{"Title":"Update on .NET Standard adoption","PublishedOn":"2019-08-07T18:01:39+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"It&#8217;s about two years ago that I announced .NET Standard 2.0. Since then we&#8217;ve been working hard to increase the set of .NET Standard-based libraries for .NET. This includes many of the BCL...","Href":"https://devblogs.microsoft.com/dotnet/update-on-net-standard-adoption/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"},{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10212614045","Type":"IssuesEvent","CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Opened issue \"Consolidating .NET GitHub repos\" (#119) at dotnet/announcements","RelatedBody":"Over the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n## To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10306188266","Type":"PullRequestEvent","CreatedAt":"2019-08-29T05:04:19","Actor":"mikedn","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26428","RelatedDescription":"Opened pull request \"PHI_ARG actually has level 0, not 1\" (#26428) at dotnet/coreclr","RelatedBody":"Fixes #26424\r\n\r\nSomehow I missed the fact that `PHI_ARG` gets \"level\" 0 and not 1 like typical `LCL_VAR` nodes do. Doesn't really matter, the level is ignored anyway.\r\n\r\nThe only reason this only happens during stress is that PHIs normally do not get morphed."},{"Id":"10305671188","Type":"IssuesEvent","CreatedAt":"2019-08-29T02:46:13","Actor":"pirunxi","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26427","RelatedDescription":"Opened issue \"interpreter has bug about CEE_LDLOC_0?\" (#26427) at dotnet/coreclr","RelatedBody":"issue code is at line 2008 in interpreter.cpp, lastest master branch . show above:\r\n       case CEE_LDLOC_0:\r\n            LdLoc(0);\r\n            m_ILCodePtr++;\r\n            continue;\r\n        case CEE_LDLOC_1:\r\n            LdLoc(1);\r\n            break;\r\n        case CEE_LDLOC_2:\r\n            LdLoc(2);\r\n            break;\r\nwhy it processes CEE_LDLOC_0 need a extra \"m_ILCodePtr++;\"？ is it a bug ?"},{"Id":"10305505323","Type":"IssuesEvent","CreatedAt":"2019-08-29T02:04:59","Actor":"AriNuer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26426","RelatedDescription":"Opened issue \"Test failure: baseservices/compilerservices/FixedAddressValueType/FixedAddressValueType/FixedAddressValueType.sh\" (#26426) at dotnet/coreclr","RelatedBody":"Test `baseservices/compilerservices/FixedAddressValueType/FixedAddressValueType/FixedAddressValueType.sh` has failed.\r\n```\r\nError message\r\nReturn code: 1\r\nRaw output file: /root/helix/work/workitem/baseservices/compilerservices/Reports/baseservices.compilerservices/FixedAddressValueType/FixedAddressValueType/FixedAddressValueType.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\nin takeLock\r\n/root/helix/work/correlation/crossgen /Platform_Assemblies_Paths /root/helix/work/correlation:/root/helix/work/workitem/baseservices/compilerservices/FixedAddressValueType/FixedAddressValueType/IL:/root/helix/work/workitem/baseservices/compilerservices/FixedAddressValueType/FixedAddressValueType /in FixedAddressValueType.org /out FixedAddressValueType.dll\\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nNative image FixedAddressValueType.dll generated successfully.\r\nin ReleaseLock\r\nin takeLock\r\n/root/helix/work/correlation/corerun FixedAddressValueType.dll ''\r\nin ReleaseLock\r\nExpected: 100\r\nActual: 255\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/root/helix/work/correlation\r\n>/root/helix/work/workitem/baseservices/compilerservices/FixedAddressValueType/FixedAddressValueType/FixedAddressValueType.sh\r\nExpected: True\r\nActual: False\r\n\r\nStack trace\r\nat baseservices_compilerservices._FixedAddressValueType_FixedAddressValueType_FixedAddressValueType_._FixedAddressValueType_FixedAddressValueType_FixedAddressValueType_sh() in /__w/1/s/bin/tests/Linux.arm.Release/TestWrappers/baseservices.compilerservices/baseservices.compilerservices.XUnitWrapper.cs:line 622\r\n```\r\nDetails:\r\nhttps://dnceng.visualstudio.com/internal/_build/results?buildId=328392&view=ms.vss-test-web.build-test-results-tab&runId=9607846&resultId=107652&paneView=debug"},{"Id":"10305332406","Type":"IssuesEvent","CreatedAt":"2019-08-29T01:18:27","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26425","RelatedDescription":"Opened issue \"Test failed: Microsoft.Win32.SystemEventsTests.CreateTimerTests.TimerElapsedSignaled\" (#26425) at dotnet/coreclr","RelatedBody":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/689ca34b-887f-49d6-953e-44d0f0a6674a/workitems/Microsoft.Win32.SystemEvents.Tests/console\r\n\r\n**Mode:**\r\nCOMPlus_JitStressRegs=8\r\nCOMPlus_TieredCompilation=0\r\n\r\n**Failed tests:**\r\nMicrosoft.Win32.SystemEventsTests.CreateTimerTests.TimerElapsedSignaled\r\n\r\n**Log:**\r\n```\r\nMicrosoft.Win32.SystemEventsTests.CreateTimerTests.TimerElapsedSignaled [FAIL]\r\n      Assert.False() Failure\r\n      Expected: False\r\n      Actual:   True\r\n      Stack Trace:\r\n        /_/src/Microsoft.Win32.SystemEvents/tests/SystemEvents.CreateTimer.cs(66,0): at Microsoft.Win32.SystemEventsTests.CreateTimerTests.TimerElapsedSignaled()\r\n  Finished:    Microsoft.Win32.SystemEvents.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   Microsoft.Win32.SystemEvents.Tests  Total: 208, Errors: 0, Failed: 1, Skipped: 0, Time: 7.049s\r\nexit code 1 \r\n```"},{"Id":"10305307753","Type":"IssuesEvent","CreatedAt":"2019-08-29T01:11:47","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26424","RelatedDescription":"Opened issue \"Assertion failed 'lvl2 == 1'\" (#26424) at dotnet/coreclr","RelatedBody":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/2280d5a8-c3ce-4512-a3cd-7fe2931d89eb/workitems/Common.Tests/console\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_JitStress=1\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 29537 [0x00007361], Thread: 29537 [0x7361]): Assertion failed 'lvl2 == 1' in 'System.SpanHelpers:IndexOf(byref,ushort,int):int' (IL size 902)\r\n\r\n    File: /__w/3/s/src/jit/gentree.cpp Line: 4279\r\n    Image: /home/helixbot/work/2280d5a8-c3ce-4512-a3cd-7fe2931d89eb/Payload/dotnet\r\n\r\n./RunTests.sh: line 161: 29537 Aborted                 (core dumped) \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig Common.Tests.runtimeconfig.json xunit.console.dll Common.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n~/work/2280d5a8-c3ce-4512-a3cd-7fe2931d89eb/Work/b8ec82d5-695b-446a-ac63-e32474021cc4/Exec\r\nexit code 134\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10306139500","Type":"PullRequestEvent","CreatedAt":"2019-08-29T04:51:16","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12420","RelatedDescription":"Opened pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#12420) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190828.12\r\n- **Date Produced**: 8/29/2019 4:51 AM\r\n- **Commit**: 806fef3a278c01f55ffd98a539ea6bd8ceeabf48\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19428.12\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"},{"Id":"10305667882","Type":"PullRequestEvent","CreatedAt":"2019-08-29T02:45:21","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12419","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12419) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190828.11\r\n- **Date Produced**: 8/29/2019 1:49 AM\r\n- **Commit**: 0b41f3dbfdabc15ada7d795ff7f822cc25c36433\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19428.11\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19428.11\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19428.11\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19428.11\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19428.11\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10305303987","Type":"PullRequestEvent","CreatedAt":"2019-08-29T01:10:45","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12418","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12418) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190828.9\r\n- **Date Produced**: 8/28/2019 11:40 PM\r\n- **Commit**: 29aaa4b5751ed073b775c00b45ae237f9229eca9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19428.9\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19428.9\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19428.9\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19428.9\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19428.9\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10305179038","Type":"PullRequestEvent","CreatedAt":"2019-08-29T00:35:22","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12418","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12418) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190828.9\r\n- **Date Produced**: 8/28/2019 11:40 PM\r\n- **Commit**: 29aaa4b5751ed073b775c00b45ae237f9229eca9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19428.9\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19428.9\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19428.9\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19428.9\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19428.9\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10304722974","Type":"PullRequestEvent","CreatedAt":"2019-08-28T22:41:22","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12417","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12417) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190828.08\r\n- **Date Produced**: 8/28/2019 9:14 PM\r\n- **Commit**: 5bc760ed917c526ce503de6addbf204ce51934cb\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19428-08\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19428-08\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19428-08\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19428-08\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19428-08\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10304750163","Type":"IssuesEvent","CreatedAt":"2019-08-28T22:47:21","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1475","RelatedDescription":"Closed issue \".Net framework 4.6.1 Bug feedback\" (#1475) at dotnet/standard","RelatedBody":"Recently, Our winform process crashed some times.\r\nWe used .Net framework 4.5.1 , runtime CLR info:\r\n0:068> lmvm clr\r\nstart             end                 module name\r\n00007fff`c0b90000 00007fff`c1576000   clr        (private pdb symbols)  c:\\temp\\mylocalsymbols\\clr.pdb\\E18D6461EB4F49A6B418E9AF91007A212\\clr.pdb\r\n    Loaded symbol image file: clr.dll\r\n    Image path: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\clr.dll\r\n    Image name: clr.dll\r\n    Timestamp:        Fri Jun 10 09:16:55 2016 (575A1507)\r\n    CheckSum:         009E00C2\r\n    ImageSize:        009E6000\r\n    File version:     4.6.1586.0\r\n    Product version:  4.0.30319.0\r\n    File flags:       8 (Mask 3F) Private\r\n    File OS:          4 Unknown Win32\r\n    File type:        2.0 Dll\r\n    File date:        00000000.00000000\r\n    Translations:     0409.04b0\r\n    CompanyName:      Microsoft Corporation\r\n    ProductName:      Microsoft® .NET Framework\r\n    InternalName:     clr.dll\r\n    OriginalFilename: clr.dll\r\n    ProductVersion:   4.6.1586.0\r\n    FileVersion:      4.6.1586.0 built by: NETFXREL2\r\n    PrivateBuild:     DDBLD201B\r\n    FileDescription:  Microsoft .NET Runtime Common Language Runtime - WorkStation\r\n    LegalCopyright:   © Microsoft Corporation.  All rights reserved.\r\n    Comments:         Flavor=Retail\r\n\r\n We used windbg anaylze crash dump file:\r\nFAULTING_IP: \r\nclr!SVR::gc_heap::background_mark_simple1+871\r\n00007fff`c0c717d4 41f70200000080  test    dword ptr [r10],80000000h\r\n\r\nEXCEPTION_RECORD:  ffffffffffffffff -- (.exr 0xffffffffffffffff)\r\nExceptionAddress: 00007fffc0c717d4 (clr!SVR::gc_heap::background_mark_simple1+0x0000000000000871)\r\n   ExceptionCode: c0000005 (Access violation)\r\n  ExceptionFlags: 00000001\r\nNumberParameters: 2\r\n   Parameter[0]: 0000000000000000\r\n   Parameter[1]: 0000000000000000\r\nAttempt to read from address 0000000000000000\r\n\r\nDEFAULT_BUCKET_ID:  NULL_POINTER_READ\r\n\r\nPROCESS_NAME:  TeldHost.exe\r\n\r\nERROR_CODE: (NTSTATUS) 0xc0000005 - 0x%p\r\n\r\nEXCEPTION_CODE: (NTSTATUS) 0xc0000005 - 0x%p\r\n\r\nEXCEPTION_PARAMETER1:  0000000000000000\r\n\r\nEXCEPTION_PARAMETER2:  0000000000000000\r\n\r\nREAD_ADDRESS:  0000000000000000 \r\n\r\nFOLLOWUP_IP: \r\nclr!SVR::gc_heap::background_mark_simple1+871\r\n00007fff`c0c717d4 41f70200000080  test    dword ptr [r10],80000000h\r\n\r\nNTGLOBALFLAG:  0\r\n\r\nAPPLICATION_VERIFIER_FLAGS:  0\r\n\r\nFAULTING_THREAD:  0000000000002730\r\n\r\nPRIMARY_PROBLEM_CLASS:  NULL_POINTER_READ\r\n\r\nBUGCHECK_STR:  APPLICATION_FAULT_NULL_POINTER_READ\r\n\r\nLAST_CONTROL_TRANSFER:  from 00007fffc0c709da to 00007fffc0c717d4\r\n\r\nSTACK_TEXT:  \r\n000000e9`7527f3f0 00007fff`c0c709da : 00000000`00000040 000002e5`19ab92d0 00000000`00000002 000002e8`1ec8fea8 : clr!SVR::gc_heap::background_mark_simple1+0x871\r\n000000e9`7527f460 00007fff`c0c713fb : 000002e9`1b511960 00000000`00000000 00000000`00000000 00007fff`c0c713fb : clr!SVR::gc_heap::background_mark_simple+0x91\r\n000000e9`7527f490 00007fff`c0d1b058 : 000002e5`19b019f8 000000e9`7527fa40 00007fff`c0d1b020 00007fff`c0c71310 : clr!SVR::gc_heap::background_promote+0x102\r\n000000e9`7527f4e0 00007fff`c0d1afa7 : 000000e9`7527fa40 000002e5`19b019f8 000000e9`7527fa40 00007fff`c0d1b020 : clr!PinObject+0x38\r\n000000e9`7527f520 00007fff`c0d29584 : 000000e9`7527f908 000002e5`19b00000 00000000`00000004 00000000`00000001 : clr!ScanConsecutiveHandlesWithoutUserData+0x6b\r\n000000e9`7527f550 00007fff`c0d2997c : 000000e9`7527f78c 00007fff`c0d29540 000000e9`7527f7d4 000000e9`7527f948 : clr!BlockScanBlocksWithoutUserData+0x44\r\n000000e9`7527f580 00007fff`c0d29bbd : 00000000`00000000 00007fff`c0d29930 000000e9`7527f750 000000e9`7527f780 : clr!ProcessScanQNode+0x46\r\n000000e9`7527f5b0 00007fff`c0d29b2d : 000000e9`7527f8f8 000002e5`19b00000 000000e9`7527f908 000000e9`7527f750 : clr!ProcessScanQueue+0x4e\r\n000000e9`7527f5e0 00007fff`c0d29abe : 000000e9`7527f750 000000e9`7527f8f8 00000000`00000026 00000000`00000028 : clr!xxxTableScanQueuedBlocksAsync+0x5d\r\n000000e9`7527f610 00007fff`c0d167e7 : 00007fff`c0d29a60 00000000`00000002 000002e5`19b00000 000000e9`7527f938 : clr!xxxAsyncSegmentIterator+0x2d\r\n000000e9`7527f640 00007fff`c0d29a36 : 000002e5`19a149d0 00007fff`c0d299a0 000002e5`19a149d0 00000000`00000006 : clr!TableScanHandles+0x97\r\n000000e9`7527f710 00007fff`c0d1699c : 00007fff`00000000 00007fff`c0b95073 000002e9`69d12d60 00007fff`c0d29540 : clr!xxxTableScanHandlesAsync+0x9b\r\n000000e9`7527f8b0 00007fff`c0d19136 : 00007fff`c14d0d30 00000000`00000000 00000000`0000000a 00007fff`c0c71310 : clr!HndScanHandlesForGC+0x118\r\n000000e9`7527f950 00007fff`c0d16d05 : 000000e9`7527fa40 000000e9`7527fa70 00000007`00000003 000002e9`69d12d60 : clr!Ref_TracePinningRoots+0xfe\r\n000000e9`7527f9d0 00007fff`c0c7120e : 00000000`00000000 00007fff`c14db270 00007fff`c14db270 00000000`00000001 : clr!GCScan::GcScanHandles+0x45\r\n000000e9`7527fa10 00007fff`c0c70511 : 00000000`00000002 00000000`00000002 000002e5`19a8bcb0 00007fff`c0d157e1 : clr!SVR::gc_heap::background_mark_phase+0x3aa\r\n000000e9`7527faa0 00007fff`c0c70384 : 000002e9`69d12d60 000002e9`69d12d60 00000000`00000000 00000000`00000004 : clr!SVR::gc_heap::gc1+0xffffffff`fff381e1\r\n000000e9`7527faf0 00007fff`c0ba02cf : 000002e9`69d12d60 000002e5`19a8bcb0 000000e9`7527fee0 00000000`00000000 : clr!SVR::gc_heap::bgc_thread_function+0x132\r\n000000e9`7527fb40 00007fff`ce088364 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : clr!Thread::intermediateThreadProc+0x86\r\n000000e9`7527ff00 00007fff`cff770d1 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : kernel32!BaseThreadInitThunk+0x14\r\n000000e9`7527ff30 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x21\r\n\r\n\r\nSYMBOL_STACK_INDEX:  0\r\n\r\nSYMBOL_NAME:  clr!SVR::gc_heap::background_mark_simple1+871\r\n\r\nFOLLOWUP_NAME:  MachineOwner\r\n\r\nMODULE_NAME: clr\r\n\r\nIMAGE_NAME:  clr.dll\r\n\r\nDEBUG_FLR_IMAGE_TIMESTAMP:  575a1507\r\n\r\nSTACK_COMMAND:  ~68s; .ecxr ; kb\r\n\r\nFAILURE_BUCKET_ID:  NULL_POINTER_READ_c0000005_clr.dll!SVR::gc_heap::background_mark_simple1\r\n\r\nBUCKET_ID:  X64_APPLICATION_FAULT_NULL_POINTER_READ_clr!SVR::gc_heap::background_mark_simple1+871\r\n\r\nWATSON_STAGEONE_URL:  http://watson.microsoft.com/StageOne/TeldHost_exe/1_0_0_0/5ccea4e6/clr_dll/4_6_1586_0/575a1507/c0000005/000e17d4.htm?Retriage=1\r\n\r\nFollowup: MachineOwner\r\n---------\r\n \r\nPlease help.\r\n\r\n"},{"Id":"10300327191","Type":"PullRequestEvent","CreatedAt":"2019-08-28T12:40:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1480","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1480) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190827.13\r\n- **Date Produced**: 8/28/2019 5:24 AM\r\n- **Commit**: 5d1a8a834df0a7b48a24f27e1ce49c4ad763f648\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19427.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19427.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19427.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10300251630","Type":"PullRequestEvent","CreatedAt":"2019-08-28T12:29:58","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1480","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1480) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190827.13\r\n- **Date Produced**: 8/28/2019 5:24 AM\r\n- **Commit**: 5d1a8a834df0a7b48a24f27e1ce49c4ad763f648\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19427.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19427.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19427.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10300240208","Type":"PullRequestEvent","CreatedAt":"2019-08-28T12:28:25","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1479","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/arcade\" (#1479) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n"},{"Id":"10300116986","Type":"PullRequestEvent","CreatedAt":"2019-08-28T12:11:51","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1478","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1478) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10302115493","Type":"PullRequestEvent","CreatedAt":"2019-08-28T09:04:44","Actor":"Anipik","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1479","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dotnet/arcade\" (#1479) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10306240316","Type":"PullRequestEvent","CreatedAt":"2019-08-29T05:18:37","Actor":"CodeBlanch","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40668","RelatedDescription":"Opened pull request \"Add support for more concrete types & derived types during deserialization.\" (#40668) at dotnet/corefx","RelatedBody":"Adds support for ReadOnlyDictionary<,> concrete type and derived types. Examples that will now work fine:\r\n```csharp\r\n        public class ConcreteDictionaryClass\r\n        {\r\n            public Dictionary<string, string> Dictionary1 { get; set; }\r\n            public DerivedDictionary Dictionary2 { get; set; }\r\n            public DerivedReadOnlyDictionary Dictionary3 { get; set; }\r\n        }\r\n\r\n        public class DerivedDictionary : Dictionary<string, string> { }\r\n\r\n        public class DerivedReadOnlyDictionary : ReadOnlyDictionary<string, string>\r\n        {\r\n            public DerivedReadOnlyDictionary(IDictionary<string, string> dictionary) : base(dictionary) { }\r\n        }\r\n\r\n        public class ReadOnlyDictionaryClass\r\n        {\r\n            public IReadOnlyDictionary<string, string> Dictionary1 { get; set; }\r\n            public ReadOnlyDictionary<string, string> Dictionary2 { get; set; }\r\n            public DerivedReadOnlyDictionaryClass Dictionary3 { get; set; }\r\n        }\r\n\r\n        public class DerivedReadOnlyDictionaryClass : ReadOnlyDictionary<string, string>\r\n        {\r\n            public DerivedReadOnlyDictionaryClass(IDictionary<string, string> dictionary) : base(dictionary) { }\r\n        }\r\n```\r\nRight now you will get this nasty NullRef Exception:\r\n```\r\nSystem.NullReferenceException\r\n  HResult=0x80004003\r\n  Message=Object reference not set to an instance of an object.\r\n  Source=System.Text.Json\r\n  StackTrace:\r\n   at System.Text.Json.JsonPropertyInfoCommon`4.CreateDerivedDictionaryInstance(JsonPropertyInfo collectionPropertyInfo, IDictionary sourceDictionary, String jsonPath, JsonSerializerOptions options) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\JsonPropertyInfoCommon.cs:line 177\r\n   at System.Text.Json.Serialization.Converters.DefaultDerivedDictionaryConverter.CreateFromDictionary(ReadStack& state, IDictionary sourceDictionary, JsonSerializerOptions options) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\Converters\\DefaultDerivedDictionaryConverter.cs:line 15\r\n   at System.Text.Json.JsonSerializer.HandleEndDictionary(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\JsonSerializer.Read.HandleDictionary.cs:line 114\r\n   at System.Text.Json.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& readStack) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\JsonSerializer.Read.cs:line 92\r\n   at System.Text.Json.JsonSerializer.ReadCore(Type returnType, JsonSerializerOptions options, Utf8JsonReader& reader) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\JsonSerializer.Read.Helpers.cs:line 22\r\n   at System.Text.Json.JsonSerializer.ParseCore(String json, Type returnType, JsonSerializerOptions options) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\JsonSerializer.Read.String.cs:line 74\r\n   at System.Text.Json.JsonSerializer.Deserialize[TValue](String json, JsonSerializerOptions options) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\JsonSerializer.Read.String.cs:line 31\r\n   at System.Text.Json.Serialization.Tests.DictionaryTests.ConcreteDictionaryDeserializes() in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\tests\\Serialization\\DictionaryTests.cs:line 1407\r\n```\r\nAdds supports for Collection<>, ObservableCollection<>, & ReadOnlyCollection<> concrete types and derived types. Examples that will now work fine:\r\n```csharp\r\n        public class ConcreteCollectionClass\r\n        {\r\n            public Collection<int> Collection1 { get; set; }\r\n            public DerivedCollection Collection2 { get; set; }\r\n            public ObservableCollection<int> Collection3 { get; set; }\r\n        }\r\n\r\n        public class DerivedCollection : Collection<int> { }\r\n\r\n        public class ReadOnlyCollectionClass\r\n        {\r\n            public IReadOnlyCollection<int> Collection1 { get; set; }\r\n            public ReadOnlyCollection<int> Collection2 { get; set; }\r\n            public DerivedReadOnlyCollection Collection3 { get; set; }\r\n            public IReadOnlyList<int> List1 { get; set; }\r\n        }\r\n\r\n        public class DerivedReadOnlyCollection : ReadOnlyCollection<int>\r\n        {\r\n            public DerivedReadOnlyCollection(IList<int> items) : base(items) { }\r\n        }\r\n```\r\nAlso enables a bunch of TODO scenarios that were sprinkled around the code. Queue, Stack, HashTable, etc. Some tests that failed with a note to get working in the future now work.\r\n\r\n# Implementation\r\nIt was simple to get this working for Dictionaries. Array code was a totally different story! Way more code paths and mixed up logic. What I did was refactor the Array code to work like the (much cleaner) Dictionary code. IMO it is a bit more maintainable now, has more features, and might even be a smidge faster.\r\n\r\n# Issues\r\nResolves https://github.com/dotnet/corefx/issues/40597"},{"Id":"10306005320","Type":"PullRequestEvent","CreatedAt":"2019-08-29T04:13:52","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40667","RelatedDescription":"Opened pull request \"[automated] Merge branch 'release/3.0' => 'release/3.1'\" (#40667) at dotnet/corefx","RelatedBody":"I detected changes in the release/3.0 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0 by the following committers:\n\n* @dotnet-maestro[bot]\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit checkout release/3.1\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"10305996080","Type":"PullRequestEvent","CreatedAt":"2019-08-29T04:11:11","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40665","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40665) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190828.6\r\n- **Date Produced**: 8/29/2019 12:44 AM\r\n- **Commit**: 410268b19f7b0b1b1215061f8891a82323ce5955\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc1.19428.6\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc1.19428.6\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc1.19428.6\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n"},{"Id":"10305805877","Type":"IssuesEvent","CreatedAt":"2019-08-29T03:20:43","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40666","RelatedDescription":"Opened issue \"API Proposal: Type.IsAssignableTo(Type)\" (#40666) at dotnet/corefx","RelatedBody":"The api `Type.IsAssignableFrom(Type)` is [quite common to use backwards](https://twitter.com/Nick_Craver/status/1166820786818179072) because it flows unexpectedly with surrounding code (swapping the subject and object; the type you are interested in becoming a parameter rather than staying as the callee).\r\n\r\nTo alleviate this introducing a reversal of the parameters either as extension or method would be helpful to differentiate and provide clarity:\r\n\r\n```csharp\r\npartial class Type\r\n{\r\n    public bool Type.IsAssignableTo(Type type) \r\n        => type.IsAssignableFrom(this);\r\n}\r\n```\r\nor\r\n```csharp\r\npartial static class TypeExtensions\r\n{\r\n    public static bool Type.IsAssignableTo(this Type type, Type assignableType)\r\n        => assignableType.IsAssignableFrom(type);\r\n}\r\n```\r\n\r\n/cc @NickCraver @davkean "},{"Id":"10305766332","Type":"PullRequestEvent","CreatedAt":"2019-08-29T03:10:34","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40665","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40665) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190828.6\r\n- **Date Produced**: 8/29/2019 12:44 AM\r\n- **Commit**: 410268b19f7b0b1b1215061f8891a82323ce5955\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc1.19428.6\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc1.19428.6\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc1.19428.6\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n"},{"Id":"10305465375","Type":"IssuesEvent","CreatedAt":"2019-08-29T01:54:33","Actor":"zarenner","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40664","RelatedDescription":"Opened issue \"Feature request: Make it possible to determine where a CancellationToken was canceled\" (#40664) at dotnet/corefx","RelatedBody":"A difficulty with using cancellation tokens today is that when an `OperationCanceledException` is thrown, it's often hard or impossible to determine where the cancellation occurred, or even which cancellation token is responsible as it may not be in scope to check against. Linked tokens add additional complexity, since it isn't possible to compare them against original tokens in a meaningful way (https://github.com/dotnet/corefx/issues/20787's \"IsDerivativeOf\").\r\n\r\nSince there are obviously performance and memory concerns around storing stack traces that might make this infeasible to go into the framework itself, an alternative would be to add some extensibility that would allow a separate library to implement this. For example, a very naive solution might be a static hook any time `Register` is called on any token, so that it can be tracked. I'm sure there are better solutions as well.\r\n\r\nThis isn't something that necessarily needs to be enabled all the time - being able to enable it just when debugging would be sufficient. Today it's just frustrating that hunting down the source of an `OperationCanceledException` (especially one that somewhat infrequently repros) is often difficult without making code changes.\r\n "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10306186643","Type":"IssuesEvent","CreatedAt":"2019-08-29T05:03:53","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38365","RelatedDescription":"Closed issue \"[Regression] Code fix previews are not visible by default\" (#38365) at dotnet/roslyn","RelatedBody":"**Visual Studio Version**:\r\nVersion 16.4.0 Preview 1.0 [29228.128.master]\r\n\r\n**Summary**:\r\n\r\nNot sure if this also occurs in 16.3 as don't currently have build installed.\r\n\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Navigate to a code fix/refactoring that has a preview\r\n\r\n**Expected Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/63910494-3ec5b800-ca6a-11e9-8c96-167f84a4dc07.png)\r\n\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/63910496-44bb9900-ca6a-11e9-8274-e48ffd1031e1.png)\r\n\r\n**User Impact**:\r\n"},{"Id":"10306130424","Type":"PullRequestEvent","CreatedAt":"2019-08-29T04:48:47","Actor":"vatsalyaagrawal","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38220","RelatedDescription":"Merged pull request \"Do not report an NFW for analyzer exception diagnostic in IDE\" (#38220) at dotnet/roslyn","RelatedBody":"This seems to cause a noticable UI delay while the NFW gets reported. We already report the AD0001 diagnostic with exception callstack and the analysis context on which exception occurred, so user has enough information to file an actionable bug.\r\nFixes #38180"},{"Id":"10306085399","Type":"IssuesEvent","CreatedAt":"2019-08-29T04:36:00","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38365","RelatedDescription":"Opened issue \"[Regression] Code fix previews are not visible by default\" (#38365) at dotnet/roslyn","RelatedBody":"**Visual Studio Version**:\r\nVersion 16.4.0 Preview 1.0 [29228.128.master]\r\n\r\n**Summary**:\r\n\r\nNot sure if this also occurs in 16.3 as don't currently have build installed.\r\n\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Navigate to a code fix/refactoring that has a preview\r\n\r\n**Expected Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/63910494-3ec5b800-ca6a-11e9-8c96-167f84a4dc07.png)\r\n\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/63910496-44bb9900-ca6a-11e9-8274-e48ffd1031e1.png)\r\n\r\n**User Impact**:\r\n"},{"Id":"10305832998","Type":"PullRequestEvent","CreatedAt":"2019-08-29T03:27:40","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38364","RelatedDescription":"Opened pull request \"port typescript's remote syntactic classification tagger for A/B testing\" (#38364) at dotnet/roslyn","RelatedBody":"this code is only for A/B testing to see whether we can do syntactic classification remotely.\r\n\r\nthis code reuses existing code exactly the same as much as possible."},{"Id":"10305634608","Type":"IssuesEvent","CreatedAt":"2019-08-29T02:37:00","Actor":"Naine","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38363","RelatedDescription":"Opened issue \"Covariance does not consider type parameter constraints\" (#38363) at dotnet/roslyn","RelatedBody":"Minimal reproduction:\r\n\r\n```csharp\r\ninterface IFoo<out T> { }\r\nclass Foo<T> : IFoo<T>\r\n{\r\n    static void Bar<U>() where U : T\r\n    {\r\n        U x1 = default;\r\n        T y1 = x1; // works, thanks to constraint\r\n\r\n        IFoo<string> x2 = new Foo<string>();\r\n        IFoo<object> y2 = x2; // works, thanks to covariance\r\n\r\n        IFoo<U> x3 = new Foo<U>();\r\n        IFoo<T> y3 = x3; // error CS0266\r\n    }\r\n}\r\n```\r\n\r\nI would expect `IFoo<U>` to be implicitly convertible to `IFoo<T>` due to the covariance rule, since U is a subclass of T according to the constraint.\r\n\r\nInstead I get:\r\n```\r\nError CS0266 Cannot implicitly convert type 'IFoo<U>' to 'IFoo<T>'. An explicit conversion exists (are you missing a cast?)\r\n```"},{"Id":"10305386884","Type":"PullRequestEvent","CreatedAt":"2019-08-29T01:33:23","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38225","RelatedDescription":"Merged pull request \"Wire-up to text buffers even if there is no RDT DocDataReloaded\" (#38225) at dotnet/roslyn","RelatedBody":"In 735a653208407801d96ac75a1398fa81542bb03e we stopped listening to RDTA_DocumentInitialized as a trigger to know when the document might now be available. We believed it wasn't necessary since DocDataReloaded would cover it, but files being opened or manipulated via some DTE interfaces or with the invisible editor seem to still require it.\r\n\r\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/937712"},{"Id":"10305249831","Type":"PullRequestEvent","CreatedAt":"2019-08-29T00:55:33","Actor":"RikkiGibson","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38362","RelatedDescription":"Opened pull request \"Update operand flow state after an unboxing conversion\" (#38362) at dotnet/roslyn","RelatedBody":"Closes #38170\r\n\r\nI incidentally found and fixed a bug where explicit nullable conversions to non-nullable value types would fail to update all affected slots."},{"Id":"10305245807","Type":"PullRequestEvent","CreatedAt":"2019-08-29T00:54:25","Actor":"dotnet-maestro[bot]","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38337","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#38337) at dotnet/roslyn","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10305140294","Type":"PullRequestEvent","CreatedAt":"2019-08-29T00:24:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7746","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7746) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo"},{"Id":"10304763507","Type":"PullRequestEvent","CreatedAt":"2019-08-28T22:50:25","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7750","RelatedDescription":"Opened pull request \"Remove SectionStartNode mechanism\" (#7750) at dotnet/corert","RelatedBody":"Symbols for the beginning of each PE section were added as part of https://github.com/dotnet/corert/commit/b34583dc66abb2a74e0d6dd4ec937294cadc0e76#diff-2559cd80eabcbd275c059bd09c5cc961. This is no longer needed as RVA field references now just use standard relocations to `CopiedFieldRvaNode` objects and don't need any special case logic."},{"Id":"10304662464","Type":"IssuesEvent","CreatedAt":"2019-08-28T22:28:18","Actor":"cshung","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7749","RelatedDescription":"Opened issue \"[CPAOT] Make sure any methods marked as MethodImpl.AggressiveInlining is not compiled even if it is a dependency of some other methods.\" (#7749) at dotnet/corert","RelatedBody":"@trylek pointed out offline that #7748 might be incomplete. In particular, a method marked as MethodImpl.AggressiveInlining might not initially be rooted, but it could be added to the graph as the dependency of another method (e.g. it is being called), so we still end up compiling them."},{"Id":"10304445027","Type":"PullRequestEvent","CreatedAt":"2019-08-28T21:46:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7748","RelatedDescription":"Merged pull request \"[CPAOT] SkipAggressiveMethod - Avoid compiling code marked with MethodImplOptions.AggressiveOptimization\" (#7748) at dotnet/corert","RelatedBody":"Crossgen is currently skipping these methods [here](https://github.com/dotnet/coreclr/blob/f07c13cadc378649f10d024bb8a40a3878fa661f/src/zap/zapinfo.cpp#L448), perhaps we should do the same.\r\n"},{"Id":"10303642140","Type":"PullRequestEvent","CreatedAt":"2019-08-28T21:41:57","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7745","RelatedDescription":"Merged pull request \"Minor reliability improvements in SuperILC\" (#7745) at dotnet/corert","RelatedBody":"In the Pri1 test file, some of the hung tests ignore KillProcess.\r\nSome time ago I proposed leveraging Mark Russinovich's pskill tool\r\nwhich is known to have better success rate in killing weirdly hung\r\nprocesses thanks to leveraging intimage kernel knowledge by\r\nexplicitly closing various handles and such; Michal and JanK were\r\nhowever not too enthusiastic about making test build depend on\r\nsuch a technically 'external' tool. For now I have at least hotfixed\r\nthe code to drop the Process in question and move on.\r\n\r\nOn top of that, it turns out that my implementation of process\r\nexit signaling using an AutoResetEvent was subject to a race\r\ncondition - as the MSDN page for AutoResetEvent explicitly states,\r\nwhen two threads set such an event close to each other, the master\r\nthread only gets signaled once. I fixed this by calling WaitOne\r\nwith an explicit timeout so that we don't hang the parallel runner\r\nloop due to a lost signal.\r\n\r\nI have also improved ParallelRunner to show the number of failures\r\nas part of the progress message during each build step. The aim is\r\nto improve turnaround when running large test suites - one of\r\nSuperIlc downsides is that the various analytic and statistic\r\nsummaries only get produced at the very end of its execution. The\r\nnumber of failures in the progress message can be used for early\r\nmonitoring as to whether everything proceeds as expected and we're\r\nnot wasting two hours waiting on a completely broken test run.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"10303518379","Type":"PullRequestEvent","CreatedAt":"2019-08-28T21:23:09","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7747","RelatedDescription":"Opened pull request \"Update RyuJIT\" (#7747) at dotnet/corert","RelatedBody":"We'll have to take another update once dotnet/coreclr#26395 merges, but I suspect some more people are going to hit this JitInterface change."},{"Id":"10303365056","Type":"PullRequestEvent","CreatedAt":"2019-08-28T21:00:08","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7739","RelatedDescription":"Merged pull request \"Separate ReadyToRun targeting compiler\" (#7739) at dotnet/corert","RelatedBody":"Creates `crossgen2` that has the ready to run specific bits.\r\n\r\nSending it out to get some eyes on this.\r\n\r\nCI will not work because we need to redirect the ready to run legs to crossgen2. Hence the WIP tag.\r\n\r\nThe TODO-REFACTOR comments are for a subsequent pull request because they would touch a bunch of other places and I don't enjoy resolving merge conflicts in big commits."},{"Id":"10303020069","Type":"PullRequestEvent","CreatedAt":"2019-08-28T20:10:23","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7745","RelatedDescription":"Opened pull request \"Minor reliability improvements in SuperILC\" (#7745) at dotnet/corert","RelatedBody":"In the Pri1 test file, some of the hung tests ignore KillProcess.\r\nSome time ago I proposed leveraging Mark Russinovich's pskill tool\r\nwhich is known to have better success rate in killing weirdly hung\r\nprocesses thanks to leveraging intimage kernel knowledge by\r\nexplicitly closing various handles and such; Michal and JanK were\r\nhowever not too enthusiastic about making test build depend on\r\nsuch a technically 'external' tool. For now I have at least hotfixed\r\nthe code to drop the Process in question and move on.\r\n\r\nOn top of that, it turns out that my implementation of process\r\nexit signaling using an AutoResetEvent was subject to a race\r\ncondition - as the MSDN page for AutoResetEvent explicitly states,\r\nwhen two threads set such an event close to each other, the master\r\nthread only gets signaled once. I fixed this by calling WaitOne\r\nwith an explicit timeout so that we don't hang the parallel runner\r\nloop due to a lost signal.\r\n\r\nI have also improved ParallelRunner to show the number of failures\r\nas part of the progress message during each build step. The aim is\r\nto improve turnaround when running large test suites - one of\r\nSuperIlc downsides is that the various analytic and statistic\r\nsummaries only get produced at the very end of its execution. The\r\nnumber of failures in the progress message can be used for early\r\nmonitoring as to whether everything proceeds as expected and we're\r\nnot wasting two hours waiting on a completely broken test run.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"10304158834","Type":"PullRequestEvent","CreatedAt":"2019-08-28T13:59:21","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7723","RelatedDescription":"Merged pull request \"Cherry pick MSIL sections into output images\" (#7723) at dotnet/corert","RelatedBody":"Emit CorHeader, metadata, IL method bodies using DependencyNodes so that RVAs can be adjusted more naturally through our reloc fixup mechanism. This has two main benefits:\r\n\r\n* Removes existing R2R tables and compiled code in cases where already\r\ncrossgen'd assemblies are re-compiled with Crossgen2.\r\n\r\n* Required for composite R2R images which will contain many component\r\nassembly Cor headers, metadata, MSIL sections.\r\n\r\nI am still addressing test failures with the CoreCLR test suite but the main changes are ready to review.\r\n\r\n@trylek It looks like RVA fields are the only thing which use the `SectionStartNode` mechanism added in https://github.com/dotnet/corert/commit/b34583dc66abb2a74e0d6dd4ec937294cadc0e76. We shouldn't need this now but I wanted to check with you before I pull it out in case you had plans for it.\r\n"},{"Id":"10304139055","Type":"PullRequestEvent","CreatedAt":"2019-08-28T13:56:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7747","RelatedDescription":"Merged pull request \"Update RyuJIT\" (#7747) at dotnet/corert","RelatedBody":"We'll have to take another update once dotnet/coreclr#26395 merges, but I suspect some more people are going to hit this JitInterface change."},{"Id":"10303910038","Type":"PullRequestEvent","CreatedAt":"2019-08-28T13:22:27","Actor":"cshung","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7748","RelatedDescription":"Opened pull request \"[CPAOT] SkipAggressiveMethod - Avoid compiling code marked with MethodImplOptions.AggressiveOptimization\" (#7748) at dotnet/corert","RelatedBody":"Crossgen is currently skipping these methods [here](https://github.com/dotnet/coreclr/blob/f07c13cadc378649f10d024bb8a40a3878fa661f/src/zap/zapinfo.cpp#L448), perhaps we should do the same.\r\n"},{"Id":"10303340254","Type":"PullRequestEvent","CreatedAt":"2019-08-28T11:56:26","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7746","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7746) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10303078921","Type":"PullRequestEvent","CreatedAt":"2019-08-28T11:18:47","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7723","RelatedDescription":null,"RelatedBody":"Emit CorHeader, metadata, IL method bodies using DependencyNodes so that RVAs can be adjusted more naturally through our reloc fixup mechanism. This has two main benefits:\r\n\r\n* Removes existing R2R tables and compiled code in cases where already\r\ncrossgen'd assemblies are re-compiled with Crossgen2.\r\n\r\n* Required for composite R2R images which will contain many component\r\nassembly Cor headers, metadata, MSIL sections.\r\n\r\nI am still addressing test failures with the CoreCLR test suite but the main changes are ready to review.\r\n\r\n@trylek It looks like RVA fields are the only thing which use the `SectionStartNode` mechanism added in https://github.com/dotnet/corert/commit/b34583dc66abb2a74e0d6dd4ec937294cadc0e76. We shouldn't need this now but I wanted to check with you before I pull it out in case you had plans for it.\r\n"},{"Id":"10303077859","Type":"PullRequestEvent","CreatedAt":"2019-08-28T11:18:38","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7723","RelatedDescription":"Closed pull request \"Cherry pick MSIL sections into output images\" (#7723) at dotnet/corert","RelatedBody":"Emit CorHeader, metadata, IL method bodies using DependencyNodes so that RVAs can be adjusted more naturally through our reloc fixup mechanism. This has two main benefits:\r\n\r\n* Removes existing R2R tables and compiled code in cases where already\r\ncrossgen'd assemblies are re-compiled with Crossgen2.\r\n\r\n* Required for composite R2R images which will contain many component\r\nassembly Cor headers, metadata, MSIL sections.\r\n\r\nI am still addressing test failures with the CoreCLR test suite but the main changes are ready to review.\r\n\r\n@trylek It looks like RVA fields are the only thing which use the `SectionStartNode` mechanism added in https://github.com/dotnet/corert/commit/b34583dc66abb2a74e0d6dd4ec937294cadc0e76. We shouldn't need this now but I wanted to check with you before I pull it out in case you had plans for it.\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10304847245","Type":"IssuesEvent","CreatedAt":"2019-08-28T23:09:46","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3011","RelatedDescription":"Closed issue \"The SDK should error if a FrameworkReference is not supported for a certain TFM\" (#3011) at dotnet/sdk","RelatedBody":"Came up during the design discussion for FrameworkReference + NuGet. \r\nhttps://github.com/NuGet/Home/issues/7342\r\n\r\nThe SDK should error if a FrameworkReference is not supported for a certain TFM. \r\n\r\n* In the project author case, clearly call out that this is an authoring mistake. \r\n* In the transitive (project/package) case, clearly blame the package/project. \r\n\r\nIt's worth considering how we handle bad framework assemblies. \r\n\r\n//cc @nguerrera"},{"Id":"10304842633","Type":"IssuesEvent","CreatedAt":"2019-08-28T23:08:37","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3265","RelatedDescription":"Closed issue \"WPF Theme Assemblies are not usable under the current FrameworkReference design\" (#3265) at dotnet/sdk","RelatedBody":"See discussion in https://github.com/dotnet/sdk/pull/3259 for context. \r\n\r\nBackground: \r\n\r\nWPF's theme assemblies (`PresentationFramework.Aero`, `PresentationFramework.Aero2`, `PresentationFramework.AeroLite`, `PresentationFramework.Classic`, `PresentationFramework.Luna` and `PresentationFramework.Royale`) expose the same types. \r\n\r\nFor e.g., [DataGridHeaderBorder](https://docs.microsoft.com/en-us/dotnet/api/microsoft.windows.themes.datagridheaderborder?view=netframework-4.8). \r\n\r\nThese assemblies can be used in two ways. \r\n\r\nTypically, they are used as resource assemblies. i.e., they are not referenced from the project, and instead, XAML resources within them are consumed  as resources using `<ResourceDictionary ..>`. When used this way, all of these assemblies can (and often are) used in to supply themes contextually (i.e., depending on the system theme, for e.g., or some other user preference). \r\n\r\nLess commonly, they are directly referenced and their types are either consumed in XAML or directly in code. When used this way, only one assembly can be referenced directly. If more than one assembly needs to be referenced, namespace aliasing has to be used. \r\n\r\nProblem: \r\n\r\nThe current SDK/FrameworkReference design in .NET Core _always_ enables references to each of these assemblies. This makes them virtually unusable. We need a better scheme/solution. \r\n\r\n/cc @nguerrera, @rladuca, @dsplaisted \r\ncc @dotnet/wpf-developers \r\n\r\n"},{"Id":"10304669338","Type":"IssuesEvent","CreatedAt":"2019-08-28T22:29:49","Actor":"olgaark","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3585","RelatedDescription":"Opened issue \"Microsoft.NET.Build.Extensions.Tasks.dll\tshould not be loaded in devenv projecc during reference resolution for native vc projects\" (#3585) at dotnet/sdk","RelatedBody":"The problem is found while investigating \r\nVS Bug 973252: Perf: CPlusPlus_DDRIT.0900.Close Solution regressed VM_AdjustedImagesInMemory_Total_devenv by 2.000 Count (0.5%). Baseline 29226.70\r\n\r\nMicrosoft.NET.Build.Extensions.Tasks.dll is loaded by _HandlePackageFileConflicts target during\r\n\r\nTarget Name=ResolveAssemblyReferences Project=ConsoleApplication1.vcxproj  note that there is no assembly references in the native vc project\r\n            …\r\n            Target Name=_HandlePackageFileConflicts Project=ConsoleApplication1.vcxproj\r\n\r\nThe target is implemented here:\r\n\r\nf:\\Visual Studio 16 Master\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.ConflictResolution.targets\r\n============================================================================================================================================\r\n-->\r\n  <UsingTask TaskName=\"ResolvePackageFileConflicts\" AssemblyFile=\"$(MicrosoftNETBuildExtensionsTasksAssembly)\" />\r\n  <Target Name=\"_HandlePackageFileConflicts\" BeforeTargets=\"$(_HandlePackageFileConflictsBefore)\" AfterTargets=\"$(_HandlePackageFileConflictsAfter)\"  \r\nDependsOnTargets=\"GetReferenceAssemblyPaths\">\r\n    <ResolvePackageFileConflicts References=\"@(Reference)\" ReferenceCopyLocalPaths=\"@(ReferenceCopyLocalPaths)\" PlatformManifests=\"@(PackageConflictPlatformManifests)\" TargetFrameworkDirectories=\"$(TargetFrameworkDirectory)\" PackageOverrides=\"@(PackageConflictOverrides)\" PreferredPackages=\"$(PackageConflictPreferredPackages)\">\r\n      <Output TaskParameter=\"ReferencesWithoutConflicts\" ItemName=\"_ReferencesWithoutConflicts\" />\r\n      <Output TaskParameter=\"ReferenceCopyLocalPathsWithoutConflicts\" ItemName=\"_ReferenceCopyLocalPathsWithoutConflicts\" />\r\n      <Output TaskParameter=\"Conflicts\" ItemName=\"_ConflictPackageFiles\" />\r\n    </ResolvePackageFileConflicts>\r\n\r\nIs this target doing something applicable to vc projects? If not, please either disable it for vcxproj or add a condition so cpp targets can disable it.\r\nAt least, please add a condition there for empty @(Reference) so the task dll is not loaded in this case.\r\n\r\n"},{"Id":"10303814106","Type":"PullRequestEvent","CreatedAt":"2019-08-28T13:07:53","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3584","RelatedDescription":"Opened pull request \"Fix symbols for tasks\" (#3584) at dotnet/sdk","RelatedBody":"Create PDBs for tasks and put them in the directory where Arcade will upload them\r\n\r\nFixes #3581"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"486739350","IsPullRequest":true,"CreatedAt":"2019-08-29T05:04:18","Actor":"mikedn","Number":"26428","RawContent":null,"Title":"PHI_ARG actually has level 0, not 1","State":"open","Body":"Fixes #26424\r\n\r\nSomehow I missed the fact that `PHI_ARG` gets \"level\" 0 and not 1 like typical `LCL_VAR` nodes do. Doesn't really matter, the level is ignored anyway.\r\n\r\nThe only reason this only happens during stress is that PHIs normally do not get morphed.","Url":"https://github.com/dotnet/coreclr/pull/26428","RelatedDescription":"Open PR \"PHI_ARG actually has level 0, not 1\" (#26428)"},{"Id":"486705084","IsPullRequest":false,"CreatedAt":"2019-08-29T02:46:12","Actor":"pirunxi","Number":"26427","RawContent":null,"Title":"interpreter has bug about CEE_LDLOC_0?","State":"open","Body":"issue code is at line 2008 in interpreter.cpp, lastest master branch . show above:\r\n       case CEE_LDLOC_0:\r\n            LdLoc(0);\r\n            m_ILCodePtr++;\r\n            continue;\r\n        case CEE_LDLOC_1:\r\n            LdLoc(1);\r\n            break;\r\n        case CEE_LDLOC_2:\r\n            LdLoc(2);\r\n            break;\r\nwhy it processes CEE_LDLOC_0 need a extra \"m_ILCodePtr++;\"？ is it a bug ?","Url":"https://github.com/dotnet/coreclr/issues/26427","RelatedDescription":"Open issue \"interpreter has bug about CEE_LDLOC_0?\" (#26427)"},{"Id":"486694706","IsPullRequest":false,"CreatedAt":"2019-08-29T02:04:58","Actor":"AriNuer","Number":"26426","RawContent":null,"Title":"Test failure: baseservices/compilerservices/FixedAddressValueType/FixedAddressValueType/FixedAddressValueType.sh","State":"open","Body":"Test `baseservices/compilerservices/FixedAddressValueType/FixedAddressValueType/FixedAddressValueType.sh` has failed.\r\n```\r\nError message\r\nReturn code: 1\r\nRaw output file: /root/helix/work/workitem/baseservices/compilerservices/Reports/baseservices.compilerservices/FixedAddressValueType/FixedAddressValueType/FixedAddressValueType.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\nin takeLock\r\n/root/helix/work/correlation/crossgen /Platform_Assemblies_Paths /root/helix/work/correlation:/root/helix/work/workitem/baseservices/compilerservices/FixedAddressValueType/FixedAddressValueType/IL:/root/helix/work/workitem/baseservices/compilerservices/FixedAddressValueType/FixedAddressValueType /in FixedAddressValueType.org /out FixedAddressValueType.dll\\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nNative image FixedAddressValueType.dll generated successfully.\r\nin ReleaseLock\r\nin takeLock\r\n/root/helix/work/correlation/corerun FixedAddressValueType.dll ''\r\nin ReleaseLock\r\nExpected: 100\r\nActual: 255\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/root/helix/work/correlation\r\n>/root/helix/work/workitem/baseservices/compilerservices/FixedAddressValueType/FixedAddressValueType/FixedAddressValueType.sh\r\nExpected: True\r\nActual: False\r\n\r\nStack trace\r\nat baseservices_compilerservices._FixedAddressValueType_FixedAddressValueType_FixedAddressValueType_._FixedAddressValueType_FixedAddressValueType_FixedAddressValueType_sh() in /__w/1/s/bin/tests/Linux.arm.Release/TestWrappers/baseservices.compilerservices/baseservices.compilerservices.XUnitWrapper.cs:line 622\r\n```\r\nDetails:\r\nhttps://dnceng.visualstudio.com/internal/_build/results?buildId=328392&view=ms.vss-test-web.build-test-results-tab&runId=9607846&resultId=107652&paneView=debug","Url":"https://github.com/dotnet/coreclr/issues/26426","RelatedDescription":"Open issue \"Test failure: baseservices/compilerservices/FixedAddressValueType/FixedAddressValueType/FixedAddressValueType.sh\" (#26426)"},{"Id":"486684107","IsPullRequest":false,"CreatedAt":"2019-08-29T01:18:27","Actor":"VincentBu","Number":"26425","RawContent":null,"Title":"Test failed: Microsoft.Win32.SystemEventsTests.CreateTimerTests.TimerElapsedSignaled","State":"open","Body":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/689ca34b-887f-49d6-953e-44d0f0a6674a/workitems/Microsoft.Win32.SystemEvents.Tests/console\r\n\r\n**Mode:**\r\nCOMPlus_JitStressRegs=8\r\nCOMPlus_TieredCompilation=0\r\n\r\n**Failed tests:**\r\nMicrosoft.Win32.SystemEventsTests.CreateTimerTests.TimerElapsedSignaled\r\n\r\n**Log:**\r\n```\r\nMicrosoft.Win32.SystemEventsTests.CreateTimerTests.TimerElapsedSignaled [FAIL]\r\n      Assert.False() Failure\r\n      Expected: False\r\n      Actual:   True\r\n      Stack Trace:\r\n        /_/src/Microsoft.Win32.SystemEvents/tests/SystemEvents.CreateTimer.cs(66,0): at Microsoft.Win32.SystemEventsTests.CreateTimerTests.TimerElapsedSignaled()\r\n  Finished:    Microsoft.Win32.SystemEvents.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   Microsoft.Win32.SystemEvents.Tests  Total: 208, Errors: 0, Failed: 1, Skipped: 0, Time: 7.049s\r\nexit code 1 \r\n```","Url":"https://github.com/dotnet/coreclr/issues/26425","RelatedDescription":"Open issue \"Test failed: Microsoft.Win32.SystemEventsTests.CreateTimerTests.TimerElapsedSignaled\" (#26425)"},{"Id":"486682521","IsPullRequest":false,"CreatedAt":"2019-08-29T01:11:44","Actor":"VincentBu","Number":"26424","RawContent":null,"Title":"Assertion failed 'lvl2 == 1'","State":"open","Body":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/2280d5a8-c3ce-4512-a3cd-7fe2931d89eb/workitems/Common.Tests/console\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_JitStress=1\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 29537 [0x00007361], Thread: 29537 [0x7361]): Assertion failed 'lvl2 == 1' in 'System.SpanHelpers:IndexOf(byref,ushort,int):int' (IL size 902)\r\n\r\n    File: /__w/3/s/src/jit/gentree.cpp Line: 4279\r\n    Image: /home/helixbot/work/2280d5a8-c3ce-4512-a3cd-7fe2931d89eb/Payload/dotnet\r\n\r\n./RunTests.sh: line 161: 29537 Aborted                 (core dumped) \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig Common.Tests.runtimeconfig.json xunit.console.dll Common.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n~/work/2280d5a8-c3ce-4512-a3cd-7fe2931d89eb/Work/b8ec82d5-695b-446a-ac63-e32474021cc4/Exec\r\nexit code 134\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26424","RelatedDescription":"Open issue \"Assertion failed 'lvl2 == 1'\" (#26424)"},{"Id":"486349190","IsPullRequest":true,"CreatedAt":"2019-08-28T23:41:50","Actor":"dotnet-maestro[bot]","Number":"26413","RawContent":null,"Title":"[release/3.0] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2b95475b-d147-4b39-6306-08d6bc51899c)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190828.1\r\n- **Date Produced**: 8/28/2019 11:18 AM\r\n- **Commit**: 48fd58c24cddbc6c0b0de1c00204aae1170f4864\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190828.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190828.1\r\n\r\n[marker]: <> (End:2b95475b-d147-4b39-6306-08d6bc51899c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26413","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dnceng/internal/dotnet-optimization\" (#26413)"},{"Id":"486660534","IsPullRequest":true,"CreatedAt":"2019-08-28T23:41:37","Actor":"brianrob","Number":"26423","RawContent":null,"Title":"Emit RVA Instead of File Offset by Default in Native Image PerfMap Files","State":"open","Body":"Port #26403 to release/3.0.","Url":"https://github.com/dotnet/coreclr/pull/26423","RelatedDescription":"Open PR \"Emit RVA Instead of File Offset by Default in Native Image PerfMap Files\" (#26423)"},{"Id":"486051404","IsPullRequest":true,"CreatedAt":"2019-08-28T23:38:06","Actor":"brianrob","Number":"26403","RawContent":null,"Title":"Emit RVA Instead of File Offset by Default in Native Image PerfMap Files","State":"closed","Body":"Newer versions of the Linux `perf` tool emit virtual addresses for all stack frames where prior to this change, they emitted file offsets for mapped code files, including DLLs.  Due to this change, native image perf maps need to include RVAs instead of file offsets.\r\n\r\nThis change also adds the image base address to the perfinfo-<pid>.map file so that we can convert from virtual address to RVA before performing the symbol lookup.\r\n\r\nSubsequent to this change, perfcollect will be updated to determine whether to ask for RVAs or file offsets based on the version of perf installed on the machine.","Url":"https://github.com/dotnet/coreclr/pull/26403","RelatedDescription":"Closed or merged PR \"Emit RVA Instead of File Offset by Default in Native Image PerfMap Files\" (#26403)"},{"Id":"486654578","IsPullRequest":true,"CreatedAt":"2019-08-28T23:19:19","Actor":"Anipik","Number":"26422","RawContent":null,"Title":"update the package version to 3.1.0 ","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26422","RelatedDescription":"Open PR \"update the package version to 3.1.0 \" (#26422)"},{"Id":"486645544","IsPullRequest":true,"CreatedAt":"2019-08-28T22:47:52","Actor":"CarolEidt","Number":"26421","RawContent":null,"Title":"Correctly handle variable argument SIMDScalar","State":"open","Body":"Fix #26286","Url":"https://github.com/dotnet/coreclr/pull/26421","RelatedDescription":"Open PR \"Correctly handle variable argument SIMDScalar\" (#26421)"},{"Id":"486604257","IsPullRequest":false,"CreatedAt":"2019-08-28T20:54:57","Actor":"lostmsu","Number":"26420","RawContent":null,"Title":"Proposal: Custom attributes similar to `DllImport`","State":"open","Body":"Right now the only way to resolve an external function declared like\r\n`static extern ReturnType FunctionName(Args...)` is to mark it with `DllImport` attribute, so that CLR would load this function from an external assembly.\r\n\r\nI propose adding a new attribute, that could be used in place of `DllImport` which CLR should recognize, and whose behavior can be customized in managed code.\r\n\r\n```csharp\r\npublic abstract class AbstractExternResolverAttribute: Attribute {\r\n  public abstract MethodInfo /* or IntPtr */ Resolve(MethodInfo externMethod);\r\n}\r\n```\r\n\r\nWhich could later be used like this:\r\n```csharp\r\npublic sealed class MyDllImportAttribute: AbstractExternResolverAttribute {\r\n  readonly string libraryName;\r\n\r\n  public MyDllImportAttribute(string libraryName) { this.libraryName = libraryName; }\r\n\r\n  public override MethodInfo Resolve(MethodInfo externMethod) {\r\n    // here we could do any custom probing for the library\r\n    var library = NativeLibrary.Load(libraryName); \r\n    var export = library.GetFunction(externMethod.Name);\r\n    var delegateType = ...;\r\n    var @delegate = Marshal.GetDelegateForFunctionPointer(export, delegateType);\r\n    return @delegate.Method;\r\n  }\r\n}\r\n```\r\n\r\nThis would enable several things:\r\n1. Fully customizable DLL search, which is a relatively common problem. #19112\r\n2. Interfacing with exported functions from languages besides C. I could make a `CppExternResolverAttribute`, that would not only find the appropriate overload of the function given its signature, but could also generate a wrapper method, that would do parameter and result marshaling.\r\n3. Enable some meta programming via reflection. Like deciding to use a native function vs a managed implementation without having to repeat the decision code. Or generating efficient method bodies based on value-typed generic argument.\r\n4. (if possible) Having generic external functions and/or external functions in generic classes, that actually represent different functions for different type parameters. AFAIK it is possible for value types.\r\n\r\nI have to be honest I am clueless about the possibility to describe it in metadata in a backwards-compatible way.","Url":"https://github.com/dotnet/coreclr/issues/26420","RelatedDescription":"Open issue \"Proposal: Custom attributes similar to `DllImport`\" (#26420)"},{"Id":"486588948","IsPullRequest":false,"CreatedAt":"2019-08-28T20:20:20","Actor":"kouvel","Number":"26419","RawContent":null,"Title":"Under the tier 1 flag, consider not falling back to min-opts based on high IL size","State":"open","Body":"@BruceForstall pointed out that while R2R code for a large method may be optimized, when it is rejitted there is a heuristic that falls back to min-opts due to the large size of the method. Since tier 1 jitting is typically done in the background, it probably would be ok to spend extra time/resources to JIT the method. Probably would be good to do the same for methods flagged with AggressiveOptimization.","Url":"https://github.com/dotnet/coreclr/issues/26419","RelatedDescription":"Open issue \"Under the tier 1 flag, consider not falling back to min-opts based on high IL size\" (#26419)"},{"Id":"486573973","IsPullRequest":true,"CreatedAt":"2019-08-28T19:45:03","Actor":"jakobbotsch","Number":"26418","RawContent":null,"Title":"[WIP] Implement portable tailcall helpers","State":"open","Body":"Implement the portable tailcall helpers described in https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/tailcalls-with-helpers.md with a few variations.\r\n\r\n- [x] `ReturnAddress` intrinsics for detecting previous frames\r\n- [x] Stubs\r\n  - [ ] EH clause\r\n- [x] Initial JIT work\r\n- [ ] Better test coverage of tailcall via helpers\r\n- [x] Instance methods\r\n- [ ] Retbuf\r\n- [ ] GC support\r\n- [ ] Virtual methods\r\n  - [ ] VSD\r\n- [ ] Generics\r\n- [ ] Generic virtual methods\r\n- [ ] Varargs\r\n- [ ] Localloc\r\n- [ ] Debugging\r\n- [ ] Revise documentation\r\n- [ ] Feature #ifdefs\r\n- [ ] Tailcall IL stub sharing\r\n- [ ] R2R\r\n- [ ] Unloadability","Url":"https://github.com/dotnet/coreclr/pull/26418","RelatedDescription":"Open PR \"[WIP] Implement portable tailcall helpers\" (#26418)"},{"Id":"486540190","IsPullRequest":true,"CreatedAt":"2019-08-28T18:27:01","Actor":"CarolEidt","Number":"26416","RawContent":null,"Title":"[skip ci] Update first-class-structs doc","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26416","RelatedDescription":"Open PR \"[skip ci] Update first-class-structs doc\" (#26416)"},{"Id":"486527889","IsPullRequest":false,"CreatedAt":"2019-08-28T18:00:35","Actor":"jarleeuw","Number":"26415","RawContent":null,"Title":"ThreadNative StartInner needs to handle return values from StartThread","State":"open","Body":"ThreadNative StartInner calls StartThread, but doesn't check the value of the return code, which can be 0xffffffff. When it is, StartInner spins indefinitely. To the caller of Task.Run (if the Task decides to start a thread instead of submitting to the ThreadPool) it looks like call hangs.","Url":"https://github.com/dotnet/coreclr/issues/26415","RelatedDescription":"Open issue \"ThreadNative StartInner needs to handle return values from StartThread\" (#26415)"},{"Id":"486540690","IsPullRequest":false,"CreatedAt":"2019-08-28T15:01:19","Actor":"Grimfane","Number":"26417","RawContent":null,"Title":"JIT compiler bug: Incorrect caching of loop variable","State":"open","Body":"**Environment:**\r\n\r\n•Visual Studio 2019 version 16.2.3\r\n•.Net 4.8\r\n•Console application\r\n•x64 build\r\n•Release build\r\n\r\n**Code to reproduce:**\r\n\r\n```\r\nusing System;\r\n\r\nnamespace Demo\r\n    {\r\n        class Program\r\n        {\r\n            static int _a;\r\n\r\n            static void Main()\r\n            {\r\n                _a = 1;\r\n\r\n                while (_a == 1)\r\n                {\r\n                    Console.WriteLine(_a);\r\n                    _a = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n```\r\n\r\n**Expected Behavior**:\r\n\"1\" is printed once and the program terminates.\r\n\r\n**Actual Behavior**:\r\n\"0\" is repeatedly printed; the program does not terminate.\r\n\r\n**Notes**\r\nIf you declare _a as volatile, it works OK.\r\nIf you initialise _a as static int _a = 0; it works.\r\n\r\nThis was reported on StackOverflow here: https://stackoverflow.com/questions/57693386/vs-2019-optimize-code-in-release-mode-broken\r\n","Url":"https://github.com/dotnet/coreclr/issues/26417","RelatedDescription":"Open issue \"JIT compiler bug: Incorrect caching of loop variable\" (#26417)"},{"Id":"486351639","IsPullRequest":true,"CreatedAt":"2019-08-28T12:28:53","Actor":"dotnet-maestro[bot]","Number":"26414","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9a4bff4b-85c2-4174-9247-08d6c732a216)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190827.13\r\n- **Date Produced**: 8/28/2019 7:11 AM\r\n- **Commit**: 1c0f7e38cc371a298353a459c53138f23ba40a2a\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19427-13\r\n\r\n[marker]: <> (End:9a4bff4b-85c2-4174-9247-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26414","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/core-setup\" (#26414)"},{"Id":"486344603","IsPullRequest":true,"CreatedAt":"2019-08-28T12:14:35","Actor":"dotnet-maestro[bot]","Number":"26412","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190828.1\r\n- **Date Produced**: 8/28/2019 8:40 AM\r\n- **Commit**: 336610e763b17b328617b13abbab8a30a54f664c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19428.1\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26412","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#26412)"},{"Id":"486344056","IsPullRequest":true,"CreatedAt":"2019-08-28T12:13:43","Actor":"dotnet-maestro[bot]","Number":"26411","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190827.13\r\n- **Date Produced**: 8/28/2019 5:24 AM\r\n- **Commit**: 5d1a8a834df0a7b48a24f27e1ce49c4ad763f648\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19427.13\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19427.13\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26411","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#26411)"},{"Id":"486342562","IsPullRequest":true,"CreatedAt":"2019-08-28T12:10:49","Actor":"dotnet-maestro[bot]","Number":"26410","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26410","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#26410)"},{"Id":"486069707","IsPullRequest":true,"CreatedAt":"2019-08-28T03:21:43","Actor":"eerhardt","Number":"26405","RawContent":null,"Title":"Don't validate empty TransitionTimes on deserialization.","State":"closed","Body":"On Unix, TransitionTimes are not used, so they are left empty. When deserializing an empty TransitionTime, it is throwing an exception because those are not normally valid. Fix deserialization to not validate empty TransitionTimes.\r\n\r\nFix https://github.com/dotnet/corefx/issues/40578\r\n\r\nNote: tests are added in https://github.com/dotnet/corefx/pull/40637","Url":"https://github.com/dotnet/coreclr/pull/26405","RelatedDescription":"Closed or merged PR \"Don't validate empty TransitionTimes on deserialization.\" (#26405)"},{"Id":"486077108","IsPullRequest":true,"CreatedAt":"2019-08-28T03:21:11","Actor":"ivdiazsa","Number":"26407","RawContent":null,"Title":"Moved misplaced assert in StompWriteBarrier for safety.","State":"closed","Body":"The args parameter was being accessed prior to asserting it was indeed not a nullptr. The assert was moved to the beginning to avoid a potential problem should args be null under any circumstances.","Url":"https://github.com/dotnet/coreclr/pull/26407","RelatedDescription":"Closed or merged PR \"Moved misplaced assert in StompWriteBarrier for safety.\" (#26407)"},{"Id":"486102558","IsPullRequest":true,"CreatedAt":"2019-08-28T03:20:58","Actor":"AaronRobinsonMSFT","Number":"26409","RawContent":null,"Title":"Remove ComputeSuppressUnmanagedCodeAccessAttr() and usage","State":"closed","Body":"/cc @jkotas @jkoritzinsky ","Url":"https://github.com/dotnet/coreclr/pull/26409","RelatedDescription":"Closed or merged PR \"Remove ComputeSuppressUnmanagedCodeAccessAttr() and usage\" (#26409)"},{"Id":"486102553","IsPullRequest":false,"CreatedAt":"2019-08-28T00:42:40","Actor":"BruceForstall","Number":"26408","RawContent":null,"Title":"Use hardware intrinsics to speed up JIT","State":"open","Body":"Consider using vector and other hardware intrinsics to speed up the JIT, especially the bitset implementation, and operations that count bits (use \"popcnt\" instruction on xarch).\r\n","Url":"https://github.com/dotnet/coreclr/issues/26408","RelatedDescription":"Open issue \"Use hardware intrinsics to speed up JIT\" (#26408)"},{"Id":"486045845","IsPullRequest":true,"CreatedAt":"2019-08-28T00:39:43","Actor":"jkoritzinsky","Number":"26402","RawContent":null,"Title":"Change test stage to only depend on the build stage","State":"closed","Body":"Change the test stage to only depend on the build stage instead of on the internal servicing publishing (the last stage in the post-build.yml template). This enables our builds to run in parallel of deployment instead of either test or deployment being blocked on the other.\r\n\r\nOfficial build from this branch with test signing: https://dev.azure.com/dnceng/internal/_build/results?buildId=327583&view=results\r\n\r\nFixes #26401","Url":"https://github.com/dotnet/coreclr/pull/26402","RelatedDescription":"Closed or merged PR \"Change test stage to only depend on the build stage\" (#26402)"},{"Id":"486042915","IsPullRequest":false,"CreatedAt":"2019-08-28T00:39:43","Actor":"jkoritzinsky","Number":"26401","RawContent":null,"Title":"Internal build does not run tests when signing with test signing","State":"closed","Body":"With the change to make tests run in a separate stage in #26334, tests now require package validation to succeed since they depend on the deployment to the internal servicing feed. Since signing validation fails for test signing, doing a test-signed build causes tests to not be run.\r\n\r\nSee https://dev.azure.com/dnceng/internal/_build/results?buildId=327455&view=results for an example.\r\n\r\ncc: @dotnet/coreclr-infra ","Url":"https://github.com/dotnet/coreclr/issues/26401","RelatedDescription":"Closed issue \"Internal build does not run tests when signing with test signing\" (#26401)"},{"Id":"486036105","IsPullRequest":false,"CreatedAt":"2019-08-27T23:17:38","Actor":"mikernet","Number":"26400","RawContent":null,"Title":"Culture aware string sorting consistency across systems","State":"closed","Body":"We are looking to add culture aware string indexes on a .NET Standard based database engine. This has to work consistently across all operating systems and .NET versions for obvious reasons - if a database file is copied to another computer running a different OS (Windows, Linux, iOS, etc), or the OS gets updated, or the app gets updated to a newer .NET runtime and the sort order changes then all the indexes will essentially be corrupted. Some sorting operations may be done on the remote server while locally cached entries might be sorted locally on the client and this needs to be consistent as well.\r\n\r\nCan the culture aware string sort order (identified by its locale, i.e. \"en-US\", \"fr-FR\", etc) ever change or can I rely on it being consistent everywhere? If it can change, is there a way for me to detect this other than saving the sort order of every single unicode character in the database and comparing it to the system sort order? Can the sort order of the Invariant culture ever change from system to system?\r\n\r\nThe database engine is .NET Standard 2.1+ so it won't be running on \"legacy\" .NET Framework, only newer .NET Core, Xamarin, Mono, etc...if that makes a difference.","Url":"https://github.com/dotnet/coreclr/issues/26400","RelatedDescription":"Closed issue \"Culture aware string sorting consistency across systems\" (#26400)"},{"Id":"486073816","IsPullRequest":true,"CreatedAt":"2019-08-27T22:56:52","Actor":"CarolEidt","Number":"26406","RawContent":null,"Title":"Cleanup unreachable struct code","State":"open","Body":"A `GT_INDEX_ADDR` never has struct type,\r\nand `GT_MKREFANY` doesn't survive beyond morph.","Url":"https://github.com/dotnet/coreclr/pull/26406","RelatedDescription":"Open PR \"Cleanup unreachable struct code\" (#26406)"},{"Id":"486008994","IsPullRequest":true,"CreatedAt":"2019-08-27T22:26:53","Actor":"fadimounir","Number":"26399","RawContent":null,"Title":"Replace Ubuntu 1404 platforms with 1604 (#26302)","State":"closed","Body":"Porting #26302 to the 3.0 branch\r\n\r\n#### Description\r\nChanging the Ubuntu version for arm32 testing to 16.04 instead of 14.04, so the 14.04 can be retired\r\n\r\n/cc @jashook  @dotnet/coreclr-infra @mmitche \r\n\r\n#### Customer Impact\r\nUpgraded Ubuntu OS version. The lab will be able to retire the 14.04 machines.\r\n\r\n#### Regression?\r\nN/A\r\n\r\n#### Risk\r\nMinimal.","Url":"https://github.com/dotnet/coreclr/pull/26399","RelatedDescription":"Closed or merged PR \"Replace Ubuntu 1404 platforms with 1604 (#26302)\" (#26399)"},{"Id":"486059409","IsPullRequest":true,"CreatedAt":"2019-08-27T22:11:21","Actor":"trylek","Number":"26404","RawContent":null,"Title":"WIP: reuse OSX-built test artifacts for all *nix OS'es","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26404","RelatedDescription":"Open PR \"WIP: reuse OSX-built test artifacts for all *nix OS'es\" (#26404)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"486735883","IsPullRequest":true,"CreatedAt":"2019-08-29T04:51:16","Actor":"dotnet-maestro[bot]","Number":"12420","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190828.12\r\n- **Date Produced**: 8/29/2019 4:51 AM\r\n- **Commit**: 806fef3a278c01f55ffd98a539ea6bd8ceeabf48\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19428.12\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12420","RelatedDescription":"Open PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12420)"},{"Id":"486704853","IsPullRequest":true,"CreatedAt":"2019-08-29T02:45:21","Actor":"dotnet-maestro[bot]","Number":"12419","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190828.13\r\n- **Date Produced**: 8/29/2019 4:35 AM\r\n- **Commit**: dc499b1cf07268a9926bd51b16e3ef749bf39340\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19428.13\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19428.13\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19428.13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19428.13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19428.13\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12419","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#12419)"},{"Id":"486674333","IsPullRequest":true,"CreatedAt":"2019-08-29T01:10:44","Actor":"dotnet-maestro[bot]","Number":"12418","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190828.9\r\n- **Date Produced**: 8/28/2019 11:40 PM\r\n- **Commit**: 29aaa4b5751ed073b775c00b45ae237f9229eca9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19428.9\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19428.9\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19428.9\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19428.9\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19428.9\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12418","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12418)"},{"Id":"486632033","IsPullRequest":true,"CreatedAt":"2019-08-28T22:41:21","Actor":"dotnet-maestro[bot]","Number":"12417","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190828.08\r\n- **Date Produced**: 8/28/2019 9:14 PM\r\n- **Commit**: 5bc760ed917c526ce503de6addbf204ce51934cb\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19428-08\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19428-08\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19428-08\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19428-08\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19428-08\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12417","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12417)"},{"Id":"486624567","IsPullRequest":true,"CreatedAt":"2019-08-28T21:44:40","Actor":"dotnet-maestro[bot]","Number":"12416","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190828.5\r\n- **Date Produced**: 8/28/2019 9:44 PM\r\n- **Commit**: 0d24bc27eb98d1a7e8431bf3c48f90c1c2cf1550\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc1.19428.5\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12416","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12416)"},{"Id":"486604693","IsPullRequest":false,"CreatedAt":"2019-08-28T20:55:58","Actor":"wli3","Number":"12415","RawContent":null,"Title":"Replace Debian Jessie build image","State":"open","Body":"Debian Jessie is out of support","Url":"https://github.com/dotnet/cli/issues/12415","RelatedDescription":"Open issue \"Replace Debian Jessie build image\" (#12415)"},{"Id":"486534680","IsPullRequest":true,"CreatedAt":"2019-08-28T20:52:03","Actor":"dotnet-maestro[bot]","Number":"12412","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190828.07\r\n- **Date Produced**: 8/28/2019 7:25 PM\r\n- **Commit**: 843b627147f0948b730eabe6def9ea1e606991da\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19428-07\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19428-07\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19428-07\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19428-07\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19428-07\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12412","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12412)"},{"Id":"486586765","IsPullRequest":true,"CreatedAt":"2019-08-28T20:50:44","Actor":"dotnet-maestro[bot]","Number":"12414","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190828.6\r\n- **Date Produced**: 8/28/2019 6:53 PM\r\n- **Commit**: c81f2f3c6afc6e73b9937ca6225330422b0dedd9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19428.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19428.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19428.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19428.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19428.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12414","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12414)"},{"Id":"486575043","IsPullRequest":true,"CreatedAt":"2019-08-28T20:23:13","Actor":"dotnet-maestro[bot]","Number":"12413","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190828.1\r\n- **Date Produced**: 8/28/2019 7:47 PM\r\n- **Commit**: e5800019f083df2a698f9645dce374993d06b2f4\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc1.19428.1\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12413","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12413)"},{"Id":"486266055","IsPullRequest":true,"CreatedAt":"2019-08-28T15:45:03","Actor":"dotnet-maestro[bot]","Number":"12408","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190828.2\r\n- **Date Produced**: 8/28/2019 2:17 PM\r\n- **Commit**: da5aba1e47b3cf68ceede54a5c597de5ba6a5715\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19428.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19428.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19428.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19428.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19428.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12408","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12408)"},{"Id":"486341730","IsPullRequest":true,"CreatedAt":"2019-08-28T12:49:39","Actor":"dotnet-maestro[bot]","Number":"12410","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190827.1\r\n- **Date Produced**: 8/27/2019 12:45 PM\r\n- **Commit**: 54b63f035a67ea183d9ff40c3cb8738f9dc7f29a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19427.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12410","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12410)"},{"Id":"486352478","IsPullRequest":true,"CreatedAt":"2019-08-28T12:30:34","Actor":"v-zbsail","Number":"12411","RawContent":null,"Title":"LOC CHECKIN | dotnet/cli release/3.0.1xx | 20190828","State":"open","Body":"- If this PR should not run tests add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Add description for changes you are making.\r\n- If there is an issue related to this PR, add the reference.\r\n\r\nLoc update","Url":"https://github.com/dotnet/cli/pull/12411","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/cli release/3.0.1xx | 20190828\" (#12411)"},{"Id":"486338522","IsPullRequest":true,"CreatedAt":"2019-08-28T12:02:52","Actor":"dotnet-maestro[bot]","Number":"12409","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12409","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#12409)"},{"Id":"486221397","IsPullRequest":true,"CreatedAt":"2019-08-28T08:40:44","Actor":"dotnet-maestro[bot]","Number":"12407","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190827.13\r\n- **Date Produced**: 8/28/2019 7:11 AM\r\n- **Commit**: 1c0f7e38cc371a298353a459c53138f23ba40a2a\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19427-13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19427-13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19427-13\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19427-13\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19427-13\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12407","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12407)"},{"Id":"486165898","IsPullRequest":true,"CreatedAt":"2019-08-28T05:50:40","Actor":"dotnet-maestro[bot]","Number":"12406","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190827.12\r\n- **Date Produced**: 8/28/2019 4:15 AM\r\n- **Commit**: 69d9499a05b402451f9588ecd002bd6feb4d2440\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19427.12\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19427.12\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19427.12\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19427.12\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19427.12\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12406","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12406)"},{"Id":"486138290","IsPullRequest":true,"CreatedAt":"2019-08-28T03:54:56","Actor":"dotnet-maestro[bot]","Number":"12405","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190827.14\r\n- **Date Produced**: 8/28/2019 3:19 AM\r\n- **Commit**: 649bcc8f616a856d8db3627d74f2d1edfb4526d5\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc1.19427.14\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12405","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12405)"},{"Id":"486104283","IsPullRequest":true,"CreatedAt":"2019-08-28T01:25:51","Actor":"dotnet-maestro[bot]","Number":"12404","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190827.10\r\n- **Date Produced**: 8/27/2019 11:57 PM\r\n- **Commit**: 69d9499a05b402451f9588ecd002bd6feb4d2440\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19427.10\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19427.10\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19427.10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19427.10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19427.10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12404","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12404)"},{"Id":"486086454","IsPullRequest":true,"CreatedAt":"2019-08-28T00:15:46","Actor":"dotnet-maestro[bot]","Number":"12403","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190827.09\r\n- **Date Produced**: 8/27/2019 10:41 PM\r\n- **Commit**: d90543c070331ee577067ee7aedf709d80588a66\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19427-09\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19427-09\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19427-09\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19427-09\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19427-09\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12403","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12403)"},{"Id":"486024562","IsPullRequest":false,"CreatedAt":"2019-08-27T22:38:17","Actor":"ForestEckhardt","Number":"12400","RawContent":null,"Title":"Dotnet driver does not respect DOTNET_ROOT ","State":"closed","Body":"## Steps to reproduce\r\n```\r\ndocker run -it mcr.microsoft.com/dotnet/core/sdk bash\r\nmv /usr/share/dotnet/dotnet /tmp/\r\nexport DOTNET_ROOT=/usr/share/dotnet/\r\n/tmp/dotnet --info\r\n```\r\n\r\n## Expected  behavior\r\nI expect the dotnet driver to respect the `DOTNET_ROOT` when trying to resolve the hostfxr and runtime libraries like an FDE does.\r\n\r\n## Actual behavior\r\nThe dotnet driver still looks for files that are local to itself instead of trying to reference the `DOTNET_ROOT` to resolve the hostfxr and runtime libraries location.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nA fatal error occurred, the folder [/tmp/host/fxr] does not exist\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12400","RelatedDescription":"Closed issue \"Dotnet driver does not respect DOTNET_ROOT \" (#12400)"},{"Id":"486046135","IsPullRequest":true,"CreatedAt":"2019-08-27T22:10:44","Actor":"dotnet-maestro[bot]","Number":"12402","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190827.07\r\n- **Date Produced**: 8/27/2019 8:36 PM\r\n- **Commit**: 02f28cebec1e6d7e92991cee52f8cda668497123\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19427-07\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19427-07\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19427-07\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19427-07\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19427-07\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12402","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12402)"},{"Id":"486038268","IsPullRequest":true,"CreatedAt":"2019-08-27T21:50:55","Actor":"dotnet-maestro[bot]","Number":"12401","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190827.5\r\n- **Date Produced**: 8/27/2019 9:15 PM\r\n- **Commit**: af0a2048a207b49bee29de9629208afd8ba27da4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19427.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12401","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12401)"},{"Id":"486020912","IsPullRequest":true,"CreatedAt":"2019-08-27T21:10:47","Actor":"dotnet-maestro[bot]","Number":"12399","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190827.6\r\n- **Date Produced**: 8/27/2019 7:40 PM\r\n- **Commit**: bac3b0dc8ec9e0d4d2441524ed2bca24f8bab748\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19427.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19427.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19427.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19427.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19427.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12399","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12399)"},{"Id":"485984511","IsPullRequest":true,"CreatedAt":"2019-08-27T19:47:37","Actor":"dotnet-maestro[bot]","Number":"12398","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190827.3\r\n- **Date Produced**: 8/27/2019 7:11 PM\r\n- **Commit**: b242d5426ec1939e4dfd0dd571048516cba3b770\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19427.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12398","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12398)"},{"Id":"485949731","IsPullRequest":true,"CreatedAt":"2019-08-27T18:31:13","Actor":"dotnet-maestro[bot]","Number":"12397","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190827.3\r\n- **Date Produced**: 8/27/2019 4:17 PM\r\n- **Commit**: ab5aa4be7a8c59af99d152c8e56867ed55e87407\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19427.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19427.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19427.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19427.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19427.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12397","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12397)"},{"Id":"485934450","IsPullRequest":true,"CreatedAt":"2019-08-27T17:55:31","Actor":"dotnet-maestro[bot]","Number":"12396","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190827.4\r\n- **Date Produced**: 8/27/2019 4:17 PM\r\n- **Commit**: ab5aa4be7a8c59af99d152c8e56867ed55e87407\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19427.4\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19427.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19427.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19427.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19427.4\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12396","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12396)"},{"Id":"485662647","IsPullRequest":true,"CreatedAt":"2019-08-27T16:02:55","Actor":"dotnet-maestro[bot]","Number":"12393","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190827.1\r\n- **Date Produced**: 8/27/2019 3:28 PM\r\n- **Commit**: 8d817f80700863f1f4139dd91c50bb006c2c22c7\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc1.19427.1\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12393","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12393)"},{"Id":"485770516","IsPullRequest":true,"CreatedAt":"2019-08-27T12:45:22","Actor":"dotnet-maestro[bot]","Number":"12395","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190826.1\r\n- **Date Produced**: 8/26/2019 12:35 PM\r\n- **Commit**: c84b71686a5c2482f028a945f1d8a3ac8fe78c7b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19426.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12395","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12395)"},{"Id":"485767487","IsPullRequest":true,"CreatedAt":"2019-08-27T12:38:33","Actor":"dotnet-maestro[bot]","Number":"12394","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190826.12\r\n- **Date Produced**: 8/26/2019 10:46 PM\r\n- **Commit**: 36ce21e795e2e90081300f4cb645dfd8cf6eb2b3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19426.12\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12394","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12394)"},{"Id":"485647178","IsPullRequest":true,"CreatedAt":"2019-08-27T08:30:47","Actor":"dotnet-maestro[bot]","Number":"12392","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190826.15\r\n- **Date Produced**: 8/27/2019 7:01 AM\r\n- **Commit**: 33b5bc3460986bbddcc4e674ca58eb3704570c39\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19426.15\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19426.15\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19426.15\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19426.15\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19426.15\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12392","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12392)"},{"Id":"485597559","IsPullRequest":true,"CreatedAt":"2019-08-27T06:26:07","Actor":"dotnet-maestro[bot]","Number":"12391","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190826.13\r\n- **Date Produced**: 8/27/2019 4:18 AM\r\n- **Commit**: 22cfa2bf11830a21ede91110a8df1a5252c7e583\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19426.13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19426.13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19426.13\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19426.13\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19426.13\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12391","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12391)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"485567962","IsPullRequest":false,"CreatedAt":"2019-08-28T22:47:20","Actor":"zhouguoqing","Number":"1475","RawContent":null,"Title":".Net framework 4.6.1 Bug feedback","State":"closed","Body":"Recently, Our winform process crashed some times.\r\nWe used .Net framework 4.5.1 , runtime CLR info:\r\n0:068> lmvm clr\r\nstart             end                 module name\r\n00007fff`c0b90000 00007fff`c1576000   clr        (private pdb symbols)  c:\\temp\\mylocalsymbols\\clr.pdb\\E18D6461EB4F49A6B418E9AF91007A212\\clr.pdb\r\n    Loaded symbol image file: clr.dll\r\n    Image path: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\clr.dll\r\n    Image name: clr.dll\r\n    Timestamp:        Fri Jun 10 09:16:55 2016 (575A1507)\r\n    CheckSum:         009E00C2\r\n    ImageSize:        009E6000\r\n    File version:     4.6.1586.0\r\n    Product version:  4.0.30319.0\r\n    File flags:       8 (Mask 3F) Private\r\n    File OS:          4 Unknown Win32\r\n    File type:        2.0 Dll\r\n    File date:        00000000.00000000\r\n    Translations:     0409.04b0\r\n    CompanyName:      Microsoft Corporation\r\n    ProductName:      Microsoft® .NET Framework\r\n    InternalName:     clr.dll\r\n    OriginalFilename: clr.dll\r\n    ProductVersion:   4.6.1586.0\r\n    FileVersion:      4.6.1586.0 built by: NETFXREL2\r\n    PrivateBuild:     DDBLD201B\r\n    FileDescription:  Microsoft .NET Runtime Common Language Runtime - WorkStation\r\n    LegalCopyright:   © Microsoft Corporation.  All rights reserved.\r\n    Comments:         Flavor=Retail\r\n\r\n We used windbg anaylze crash dump file:\r\nFAULTING_IP: \r\nclr!SVR::gc_heap::background_mark_simple1+871\r\n00007fff`c0c717d4 41f70200000080  test    dword ptr [r10],80000000h\r\n\r\nEXCEPTION_RECORD:  ffffffffffffffff -- (.exr 0xffffffffffffffff)\r\nExceptionAddress: 00007fffc0c717d4 (clr!SVR::gc_heap::background_mark_simple1+0x0000000000000871)\r\n   ExceptionCode: c0000005 (Access violation)\r\n  ExceptionFlags: 00000001\r\nNumberParameters: 2\r\n   Parameter[0]: 0000000000000000\r\n   Parameter[1]: 0000000000000000\r\nAttempt to read from address 0000000000000000\r\n\r\nDEFAULT_BUCKET_ID:  NULL_POINTER_READ\r\n\r\nPROCESS_NAME:  TeldHost.exe\r\n\r\nERROR_CODE: (NTSTATUS) 0xc0000005 - 0x%p\r\n\r\nEXCEPTION_CODE: (NTSTATUS) 0xc0000005 - 0x%p\r\n\r\nEXCEPTION_PARAMETER1:  0000000000000000\r\n\r\nEXCEPTION_PARAMETER2:  0000000000000000\r\n\r\nREAD_ADDRESS:  0000000000000000 \r\n\r\nFOLLOWUP_IP: \r\nclr!SVR::gc_heap::background_mark_simple1+871\r\n00007fff`c0c717d4 41f70200000080  test    dword ptr [r10],80000000h\r\n\r\nNTGLOBALFLAG:  0\r\n\r\nAPPLICATION_VERIFIER_FLAGS:  0\r\n\r\nFAULTING_THREAD:  0000000000002730\r\n\r\nPRIMARY_PROBLEM_CLASS:  NULL_POINTER_READ\r\n\r\nBUGCHECK_STR:  APPLICATION_FAULT_NULL_POINTER_READ\r\n\r\nLAST_CONTROL_TRANSFER:  from 00007fffc0c709da to 00007fffc0c717d4\r\n\r\nSTACK_TEXT:  \r\n000000e9`7527f3f0 00007fff`c0c709da : 00000000`00000040 000002e5`19ab92d0 00000000`00000002 000002e8`1ec8fea8 : clr!SVR::gc_heap::background_mark_simple1+0x871\r\n000000e9`7527f460 00007fff`c0c713fb : 000002e9`1b511960 00000000`00000000 00000000`00000000 00007fff`c0c713fb : clr!SVR::gc_heap::background_mark_simple+0x91\r\n000000e9`7527f490 00007fff`c0d1b058 : 000002e5`19b019f8 000000e9`7527fa40 00007fff`c0d1b020 00007fff`c0c71310 : clr!SVR::gc_heap::background_promote+0x102\r\n000000e9`7527f4e0 00007fff`c0d1afa7 : 000000e9`7527fa40 000002e5`19b019f8 000000e9`7527fa40 00007fff`c0d1b020 : clr!PinObject+0x38\r\n000000e9`7527f520 00007fff`c0d29584 : 000000e9`7527f908 000002e5`19b00000 00000000`00000004 00000000`00000001 : clr!ScanConsecutiveHandlesWithoutUserData+0x6b\r\n000000e9`7527f550 00007fff`c0d2997c : 000000e9`7527f78c 00007fff`c0d29540 000000e9`7527f7d4 000000e9`7527f948 : clr!BlockScanBlocksWithoutUserData+0x44\r\n000000e9`7527f580 00007fff`c0d29bbd : 00000000`00000000 00007fff`c0d29930 000000e9`7527f750 000000e9`7527f780 : clr!ProcessScanQNode+0x46\r\n000000e9`7527f5b0 00007fff`c0d29b2d : 000000e9`7527f8f8 000002e5`19b00000 000000e9`7527f908 000000e9`7527f750 : clr!ProcessScanQueue+0x4e\r\n000000e9`7527f5e0 00007fff`c0d29abe : 000000e9`7527f750 000000e9`7527f8f8 00000000`00000026 00000000`00000028 : clr!xxxTableScanQueuedBlocksAsync+0x5d\r\n000000e9`7527f610 00007fff`c0d167e7 : 00007fff`c0d29a60 00000000`00000002 000002e5`19b00000 000000e9`7527f938 : clr!xxxAsyncSegmentIterator+0x2d\r\n000000e9`7527f640 00007fff`c0d29a36 : 000002e5`19a149d0 00007fff`c0d299a0 000002e5`19a149d0 00000000`00000006 : clr!TableScanHandles+0x97\r\n000000e9`7527f710 00007fff`c0d1699c : 00007fff`00000000 00007fff`c0b95073 000002e9`69d12d60 00007fff`c0d29540 : clr!xxxTableScanHandlesAsync+0x9b\r\n000000e9`7527f8b0 00007fff`c0d19136 : 00007fff`c14d0d30 00000000`00000000 00000000`0000000a 00007fff`c0c71310 : clr!HndScanHandlesForGC+0x118\r\n000000e9`7527f950 00007fff`c0d16d05 : 000000e9`7527fa40 000000e9`7527fa70 00000007`00000003 000002e9`69d12d60 : clr!Ref_TracePinningRoots+0xfe\r\n000000e9`7527f9d0 00007fff`c0c7120e : 00000000`00000000 00007fff`c14db270 00007fff`c14db270 00000000`00000001 : clr!GCScan::GcScanHandles+0x45\r\n000000e9`7527fa10 00007fff`c0c70511 : 00000000`00000002 00000000`00000002 000002e5`19a8bcb0 00007fff`c0d157e1 : clr!SVR::gc_heap::background_mark_phase+0x3aa\r\n000000e9`7527faa0 00007fff`c0c70384 : 000002e9`69d12d60 000002e9`69d12d60 00000000`00000000 00000000`00000004 : clr!SVR::gc_heap::gc1+0xffffffff`fff381e1\r\n000000e9`7527faf0 00007fff`c0ba02cf : 000002e9`69d12d60 000002e5`19a8bcb0 000000e9`7527fee0 00000000`00000000 : clr!SVR::gc_heap::bgc_thread_function+0x132\r\n000000e9`7527fb40 00007fff`ce088364 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : clr!Thread::intermediateThreadProc+0x86\r\n000000e9`7527ff00 00007fff`cff770d1 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : kernel32!BaseThreadInitThunk+0x14\r\n000000e9`7527ff30 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x21\r\n\r\n\r\nSYMBOL_STACK_INDEX:  0\r\n\r\nSYMBOL_NAME:  clr!SVR::gc_heap::background_mark_simple1+871\r\n\r\nFOLLOWUP_NAME:  MachineOwner\r\n\r\nMODULE_NAME: clr\r\n\r\nIMAGE_NAME:  clr.dll\r\n\r\nDEBUG_FLR_IMAGE_TIMESTAMP:  575a1507\r\n\r\nSTACK_COMMAND:  ~68s; .ecxr ; kb\r\n\r\nFAILURE_BUCKET_ID:  NULL_POINTER_READ_c0000005_clr.dll!SVR::gc_heap::background_mark_simple1\r\n\r\nBUCKET_ID:  X64_APPLICATION_FAULT_NULL_POINTER_READ_clr!SVR::gc_heap::background_mark_simple1+871\r\n\r\nWATSON_STAGEONE_URL:  http://watson.microsoft.com/StageOne/TeldHost_exe/1_0_0_0/5ccea4e6/clr_dll/4_6_1586_0/575a1507/c0000005/000e17d4.htm?Retriage=1\r\n\r\nFollowup: MachineOwner\r\n---------\r\n \r\nPlease help.\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1475","RelatedDescription":"Closed issue \".Net framework 4.6.1 Bug feedback\" (#1475)"},{"Id":"486351442","IsPullRequest":true,"CreatedAt":"2019-08-28T16:04:44","Actor":"dotnet-maestro[bot]","Number":"1479","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1479","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1479)"},{"Id":"486352176","IsPullRequest":true,"CreatedAt":"2019-08-28T12:40:05","Actor":"dotnet-maestro[bot]","Number":"1480","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190827.13\r\n- **Date Produced**: 8/28/2019 5:24 AM\r\n- **Commit**: 5d1a8a834df0a7b48a24f27e1ce49c4ad763f648\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19427.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19427.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19427.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1480","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1480)"},{"Id":"486337976","IsPullRequest":true,"CreatedAt":"2019-08-28T12:11:51","Actor":"dotnet-maestro[bot]","Number":"1478","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1478","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1478)"},{"Id":"485209871","IsPullRequest":true,"CreatedAt":"2019-08-27T17:30:06","Actor":"dotnet-maestro[bot]","Number":"1472","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190826.12\r\n- **Date Produced**: 8/26/2019 10:46 PM\r\n- **Commit**: 36ce21e795e2e90081300f4cb645dfd8cf6eb2b3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19426.12\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1472","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1472)"},{"Id":"485780512","IsPullRequest":true,"CreatedAt":"2019-08-27T12:40:28","Actor":"dotnet-maestro[bot]","Number":"1477","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190826.13\r\n- **Date Produced**: 8/27/2019 7:30 AM\r\n- **Commit**: 7055b496a30dfe0f66a2f555cad31502473d144b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19426.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19426.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19426.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1477","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1477)"},{"Id":"485766905","IsPullRequest":true,"CreatedAt":"2019-08-27T12:12:03","Actor":"dotnet-maestro[bot]","Number":"1476","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190826.12\r\n- **Date Produced**: 8/26/2019 10:46 PM\r\n- **Commit**: 36ce21e795e2e90081300f4cb645dfd8cf6eb2b3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19426.12\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1476","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1476)"},{"Id":"485338895","IsPullRequest":false,"CreatedAt":"2019-08-26T17:04:14","Actor":"roji","Number":"1474","RawContent":null,"Title":"Add new socket TCP keepalive options","State":"open","Body":"https://github.com/dotnet/corefx/issues/25040 added the three portable TCP keepalive options to .NET Core 3.0, but they are missing from .NET Standard.","Url":"https://github.com/dotnet/standard/issues/1474","RelatedDescription":"Open issue \"Add new socket TCP keepalive options\" (#1474)"},{"Id":"485210438","IsPullRequest":true,"CreatedAt":"2019-08-26T12:37:57","Actor":"dotnet-maestro[bot]","Number":"1473","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190825.4\r\n- **Date Produced**: 8/26/2019 4:41 AM\r\n- **Commit**: ba50ba15d0747d5be1e8bd38ea03a5ba892314bd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19425.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19425.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19425.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1473","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1473)"},{"Id":"485199879","IsPullRequest":true,"CreatedAt":"2019-08-26T12:11:53","Actor":"dotnet-maestro[bot]","Number":"1471","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190825.1\r\n- **Date Produced**: 8/25/2019 12:48 PM\r\n- **Commit**: 2de3acc671fc624191672a45564f9ef130af5cd4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19425.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1471","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1471)"},{"Id":"484812113","IsPullRequest":true,"CreatedAt":"2019-08-25T14:28:38","Actor":"dotnet-maestro[bot]","Number":"1467","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190824.1\r\n- **Date Produced**: 8/24/2019 12:51 PM\r\n- **Commit**: a7b5eb8de300b6a30bd797c4ecc8769f7028aeec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19424.1\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1467","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1467)"},{"Id":"484925474","IsPullRequest":true,"CreatedAt":"2019-08-25T12:37:53","Actor":"dotnet-maestro[bot]","Number":"1470","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190824.4\r\n- **Date Produced**: 8/24/2019 5:51 PM\r\n- **Commit**: e92b6d57af9b7299f2a6fca2a599f09dce4f672a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19424.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19424.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19424.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1470","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1470)"},{"Id":"484923190","IsPullRequest":true,"CreatedAt":"2019-08-25T12:11:47","Actor":"dotnet-maestro[bot]","Number":"1469","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190824.1\r\n- **Date Produced**: 8/24/2019 12:51 PM\r\n- **Commit**: a7b5eb8de300b6a30bd797c4ecc8769f7028aeec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19424.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1469","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1469)"},{"Id":"484812226","IsPullRequest":true,"CreatedAt":"2019-08-24T12:37:35","Actor":"dotnet-maestro[bot]","Number":"1468","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190823.8\r\n- **Date Produced**: 8/24/2019 1:53 AM\r\n- **Commit**: 9f3111e1e2292b45dfd6fd28891f7ba031c3f6ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19423.8\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19423.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19423.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1468","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1468)"},{"Id":"484810097","IsPullRequest":true,"CreatedAt":"2019-08-24T12:11:49","Actor":"dotnet-maestro[bot]","Number":"1466","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/23/2019 5:47 PM\r\n- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19423.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1466","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1466)"},{"Id":"484504600","IsPullRequest":true,"CreatedAt":"2019-08-23T21:28:51","Actor":"dotnet-maestro[bot]","Number":"1463","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190822.24\r\n- **Date Produced**: 8/22/2019 11:13 PM\r\n- **Commit**: c7f03b2cf06bdfc64dad4140fd0d486127095cd8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19422.24\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1463","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1463)"},{"Id":"484505252","IsPullRequest":true,"CreatedAt":"2019-08-23T12:40:42","Actor":"dotnet-maestro[bot]","Number":"1464","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190822.9\r\n- **Date Produced**: 8/23/2019 3:30 AM\r\n- **Commit**: c05355b90b55a9ff436a1ba9c6c1f5a508c2f3ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19422.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19422.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19422.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1464","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1464)"},{"Id":"484505352","IsPullRequest":true,"CreatedAt":"2019-08-23T12:30:51","Actor":"dotnet-maestro[bot]","Number":"1465","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190828.2\r\n- **Date Produced**: 8/28/2019 3:38 PM\r\n- **Commit**: 85f7dd59648123a94745550a0f428dd3a041d8a9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19428.2\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19428.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19428.2\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1465","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1465)"},{"Id":"484493871","IsPullRequest":true,"CreatedAt":"2019-08-23T12:11:54","Actor":"dotnet-maestro[bot]","Number":"1462","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190822.24\r\n- **Date Produced**: 8/22/2019 11:13 PM\r\n- **Commit**: c7f03b2cf06bdfc64dad4140fd0d486127095cd8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19422.24\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1462","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1462)"},{"Id":"483964395","IsPullRequest":true,"CreatedAt":"2019-08-22T13:22:06","Actor":"dotnet-maestro[bot]","Number":"1460","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190821.4\r\n- **Date Produced**: 8/21/2019 6:40 PM\r\n- **Commit**: 27a6926f6b1d4b36d86a236d2b05cdee3669589e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19421.4\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1460","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1460)"},{"Id":"483965136","IsPullRequest":true,"CreatedAt":"2019-08-22T12:40:12","Actor":"dotnet-maestro[bot]","Number":"1461","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190821.5\r\n- **Date Produced**: 8/21/2019 11:26 PM\r\n- **Commit**: 41cd99d051102be4ed83f4f9105ae9e73aa48b7c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19421.5\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19421.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19421.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1461","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1461)"},{"Id":"483952076","IsPullRequest":true,"CreatedAt":"2019-08-22T12:12:02","Actor":"dotnet-maestro[bot]","Number":"1459","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190821.4\r\n- **Date Produced**: 8/21/2019 6:40 PM\r\n- **Commit**: 27a6926f6b1d4b36d86a236d2b05cdee3669589e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19421.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1459","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1459)"},{"Id":"483602102","IsPullRequest":true,"CreatedAt":"2019-08-21T22:06:06","Actor":"terrajobst","Number":"1458","RawContent":null,"Title":"Ask Mode: Add support for typed-datasets","State":"closed","Body":"## Description\r\n\r\n.NET Core 3.0 has full support for `System.Data.DataTableExtensions` which also enables the visual `DataSet` designer in Visual Studio. However, .NET Standard 2.1 only supported a subset which makes the code that is generated by the designer not compile in .NET Standard 2.1. The fix is include the missing APIs in .NET Standard 2.1.\r\n\r\nThis requires no changes in .NET Core 3.0 but will require minimal work in platforms implementing .NET Standard 2.1, most notably Mono/Xamarin. However, they already signed off on it.\r\n\r\n## Customer Impact\r\n\r\nCustomer will be able to use the DataSet designer in .NET Standard libraries, which will become handy as people port their existing .NET Framework desktop applications to .NET Core 3.0.\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Risk\r\n\r\nLow. All APIs are already implemented in .NET Core 3.0.","Url":"https://github.com/dotnet/standard/pull/1458","RelatedDescription":"Closed or merged PR \"Ask Mode: Add support for typed-datasets\" (#1458)"},{"Id":"483567659","IsPullRequest":true,"CreatedAt":"2019-08-21T18:33:20","Actor":"Anipik","Number":"1457","RawContent":null,"Title":"Enabling yaml stages for preview 9","State":"closed","Body":"We require this change in order to propagate the dependecies updates for preview 9 branch.\r\nrelated 3.0 change https://github.com/dotnet/standard/pull/1453\r\n\r\ncc @mmitche ","Url":"https://github.com/dotnet/standard/pull/1457","RelatedDescription":"Closed or merged PR \"Enabling yaml stages for preview 9\" (#1457)"},{"Id":"483116364","IsPullRequest":true,"CreatedAt":"2019-08-21T17:37:37","Actor":"Anipik","Number":"1453","RawContent":null,"Title":"Adding YAML stages","State":"closed","Body":"Closes: https://github.com/dotnet/arcade/issues/3726\r\n\r\ncherrypicking #1373 #1379 ","Url":"https://github.com/dotnet/standard/pull/1453","RelatedDescription":"Closed or merged PR \"Adding YAML stages\" (#1453)"},{"Id":"483391706","IsPullRequest":true,"CreatedAt":"2019-08-21T16:03:08","Actor":"dotnet-maestro[bot]","Number":"1455","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1455","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1455)"},{"Id":"483392622","IsPullRequest":true,"CreatedAt":"2019-08-21T12:42:44","Actor":"dotnet-maestro[bot]","Number":"1456","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190820.10\r\n- **Date Produced**: 8/21/2019 12:53 AM\r\n- **Commit**: d341fd37dcb2c22e382adccdc06770cf8f160577\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19420.10\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19420.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19420.10\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1456","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1456)"},{"Id":"483378318","IsPullRequest":true,"CreatedAt":"2019-08-21T12:12:10","Actor":"dotnet-maestro[bot]","Number":"1454","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1454","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1454)"},{"Id":"483046271","IsPullRequest":false,"CreatedAt":"2019-08-20T22:30:52","Actor":"Anipik","Number":"1452","RawContent":null,"Title":"NetStandard not publishing the packages to the blob-feed","State":"closed","Body":"The dotnet standard stopped publishing packages to the dotnet core blob feed after ```2.1.0-prerelease.19414.3```\r\nAs a result the builds for repos higher in the stack is failing.\r\nThis issue is only is release\\3.0 branches.\r\neg https://github.com/dotnet/corefx/pull/40331 \r\n\r\nThis is high priority issue as these will be blocking the build process for preview 9\r\n\r\ncc @JohnTortugo @wtgodbe @mmitche @riarenas ","Url":"https://github.com/dotnet/standard/issues/1452","RelatedDescription":"Closed issue \"NetStandard not publishing the packages to the blob-feed\" (#1452)"},{"Id":"482830211","IsPullRequest":true,"CreatedAt":"2019-08-20T12:32:48","Actor":"dotnet-maestro[bot]","Number":"1451","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190819.5\r\n- **Date Produced**: 8/19/2019 9:33 PM\r\n- **Commit**: 961b953eb77922d3906506ee15a58068abfa3284\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19419.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19419.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19419.5\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1451","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1451)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"486742860","IsPullRequest":true,"CreatedAt":"2019-08-29T05:18:36","Actor":"CodeBlanch","Number":"40668","RawContent":null,"Title":"Add support for more concrete types & derived types during deserialization.","State":"open","Body":"Adds support for ReadOnlyDictionary<,> concrete type and derived types. Examples that will now work fine:\r\n```csharp\r\n        public class ConcreteDictionaryClass\r\n        {\r\n            public Dictionary<string, string> Dictionary1 { get; set; }\r\n            public DerivedDictionary Dictionary2 { get; set; }\r\n            public DerivedReadOnlyDictionary Dictionary3 { get; set; }\r\n        }\r\n\r\n        public class DerivedDictionary : Dictionary<string, string> { }\r\n\r\n        public class DerivedReadOnlyDictionary : ReadOnlyDictionary<string, string>\r\n        {\r\n            public DerivedReadOnlyDictionary(IDictionary<string, string> dictionary) : base(dictionary) { }\r\n        }\r\n\r\n        public class ReadOnlyDictionaryClass\r\n        {\r\n            public IReadOnlyDictionary<string, string> Dictionary1 { get; set; }\r\n            public ReadOnlyDictionary<string, string> Dictionary2 { get; set; }\r\n            public DerivedReadOnlyDictionaryClass Dictionary3 { get; set; }\r\n        }\r\n\r\n        public class DerivedReadOnlyDictionaryClass : ReadOnlyDictionary<string, string>\r\n        {\r\n            public DerivedReadOnlyDictionaryClass(IDictionary<string, string> dictionary) : base(dictionary) { }\r\n        }\r\n```\r\nRight now you will get this nasty NullRef Exception:\r\n```\r\nSystem.NullReferenceException\r\n  HResult=0x80004003\r\n  Message=Object reference not set to an instance of an object.\r\n  Source=System.Text.Json\r\n  StackTrace:\r\n   at System.Text.Json.JsonPropertyInfoCommon`4.CreateDerivedDictionaryInstance(JsonPropertyInfo collectionPropertyInfo, IDictionary sourceDictionary, String jsonPath, JsonSerializerOptions options) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\JsonPropertyInfoCommon.cs:line 177\r\n   at System.Text.Json.Serialization.Converters.DefaultDerivedDictionaryConverter.CreateFromDictionary(ReadStack& state, IDictionary sourceDictionary, JsonSerializerOptions options) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\Converters\\DefaultDerivedDictionaryConverter.cs:line 15\r\n   at System.Text.Json.JsonSerializer.HandleEndDictionary(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\JsonSerializer.Read.HandleDictionary.cs:line 114\r\n   at System.Text.Json.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& readStack) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\JsonSerializer.Read.cs:line 92\r\n   at System.Text.Json.JsonSerializer.ReadCore(Type returnType, JsonSerializerOptions options, Utf8JsonReader& reader) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\JsonSerializer.Read.Helpers.cs:line 22\r\n   at System.Text.Json.JsonSerializer.ParseCore(String json, Type returnType, JsonSerializerOptions options) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\JsonSerializer.Read.String.cs:line 74\r\n   at System.Text.Json.JsonSerializer.Deserialize[TValue](String json, JsonSerializerOptions options) in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\src\\System\\Text\\Json\\Serialization\\JsonSerializer.Read.String.cs:line 31\r\n   at System.Text.Json.Serialization.Tests.DictionaryTests.ConcreteDictionaryDeserializes() in C:\\Source\\Repos\\corefx_CodeBlanch\\src\\System.Text.Json\\tests\\Serialization\\DictionaryTests.cs:line 1407\r\n```\r\nAdds supports for Collection<>, ObservableCollection<>, & ReadOnlyCollection<> concrete types and derived types. Examples that will now work fine:\r\n```csharp\r\n        public class ConcreteCollectionClass\r\n        {\r\n            public Collection<int> Collection1 { get; set; }\r\n            public DerivedCollection Collection2 { get; set; }\r\n            public ObservableCollection<int> Collection3 { get; set; }\r\n        }\r\n\r\n        public class DerivedCollection : Collection<int> { }\r\n\r\n        public class ReadOnlyCollectionClass\r\n        {\r\n            public IReadOnlyCollection<int> Collection1 { get; set; }\r\n            public ReadOnlyCollection<int> Collection2 { get; set; }\r\n            public DerivedReadOnlyCollection Collection3 { get; set; }\r\n            public IReadOnlyList<int> List1 { get; set; }\r\n        }\r\n\r\n        public class DerivedReadOnlyCollection : ReadOnlyCollection<int>\r\n        {\r\n            public DerivedReadOnlyCollection(IList<int> items) : base(items) { }\r\n        }\r\n```\r\nAlso enables a bunch of TODO scenarios that were sprinkled around the code. Queue, Stack, HashTable, etc. Some tests that failed with a note to get working in the future now work.\r\n\r\n# Implementation\r\nIt was simple to get this working for Dictionaries. Array code was a totally different story! Way more code paths and mixed up logic. What I did was refactor the Array code to work like the (much cleaner) Dictionary code. IMO it is a bit more maintainable now, has more features, and might even be a smidge faster.\r\n\r\n# Issues\r\nResolves https://github.com/dotnet/corefx/issues/40597","Url":"https://github.com/dotnet/corefx/pull/40668","RelatedDescription":"Open PR \"Add support for more concrete types & derived types during deserialization.\" (#40668)"},{"Id":"486726850","IsPullRequest":true,"CreatedAt":"2019-08-29T04:13:51","Actor":"dotnet-maestro-bot","Number":"40667","RawContent":null,"Title":"[automated] Merge branch 'release/3.0' => 'release/3.1'","State":"open","Body":"I detected changes in the release/3.0 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0 by the following committers:\n\n* @dotnet-maestro[bot]\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit checkout release/3.1\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/40667","RelatedDescription":"Open PR \"[automated] Merge branch 'release/3.0' => 'release/3.1'\" (#40667)"},{"Id":"486710882","IsPullRequest":true,"CreatedAt":"2019-08-29T04:11:11","Actor":"dotnet-maestro[bot]","Number":"40665","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190828.6\r\n- **Date Produced**: 8/29/2019 12:44 AM\r\n- **Commit**: 410268b19f7b0b1b1215061f8891a82323ce5955\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc1.19428.6\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc1.19428.6\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc1.19428.6\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40665","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40665)"},{"Id":"486713504","IsPullRequest":false,"CreatedAt":"2019-08-29T03:20:42","Actor":"benaadams","Number":"40666","RawContent":null,"Title":"API Proposal: Type.IsAssignableTo(Type)","State":"open","Body":"Background\r\n----\r\nThe api `Type.IsAssignableFrom(Type)` is [quite common to mistakenly use backwards](https://twitter.com/Nick_Craver/status/1166820786818179072) because it flows unexpectedly with surrounding code (swapping the subject and object; the type you are interested in becoming a parameter rather than staying as the caller).\r\n\r\nProposal\r\n----\r\nTo alleviate this introducing a reversal of the parameters either as extension or method would be helpful to differentiate and provide clarity:\r\n\r\n```csharp\r\npartial class Type\r\n{\r\n    public bool Type.IsAssignableTo(Type type) \r\n        => type.IsAssignableFrom(this);\r\n\r\n    public static bool IsAssignableTo<T>()\r\n        => typeof(T).IsAssignableFrom(this);\r\n}\r\n```\r\nor\r\n```csharp\r\npartial static class TypeExtensions\r\n{\r\n    public static bool Type.IsAssignableTo(this Type type, Type assignableType)\r\n        => assignableType.IsAssignableFrom(type);\r\n\r\n    public static bool IsAssignableTo<T>(this Type type)\r\n        => typeof(T).IsAssignableFrom(type);\r\n}\r\n```\r\n\r\nPrecedence\r\n----\r\n`Type.IsSubclassOf(Type)` works in this direction so currently the syntax is\r\n```csharp\r\ntypeof(derived).IsSubclassOf(typeof(base));\r\n\r\ntypeof(base).IsAssignableFrom(typeof(derived)); // swapped subject object\r\n\r\ntypeof(IInterface).IsAssignableFrom(typeof(Implementation)); // swapped subject object\r\n``` \r\n\r\nWhile reversing \r\n```csharp\r\ntypeof(derived).IsSubclassOf(typeof(base)); \r\n\r\ntypeof(derived).IsAssignableTo(typeof(base)); \r\n\r\ntypeof(Implementation).IsAssignableTo(typeof(IInterface)); \r\n``` \r\n\r\nExample usage\r\n----\r\nGiven\r\n```csharp\r\npublic class ConstrainedGeneric<T> where T : Stream\r\n{}\r\n```\r\nRather than writing\r\n```csharp\r\npublic static void Main()\r\n{\r\n    Type genericT = typeof(ConstrainedGeneric<>);\r\n    Type genericParam = genericT.GetGenericArguments()[0];\r\n    \r\n    if (typeof(Stream).IsAssignableFrom(genericParam))\r\n    {\r\n        Console.WriteLine(true);\r\n    } \r\n\r\n    // Displays True.\r\n}\r\n```\r\n\r\nYou can write\r\n```csharp\r\npublic static void Main()\r\n{\r\n    Type genericT = typeof(ConstrainedGeneric<>);\r\n    Type genericParam = genericT.GetGenericArguments()[0];\r\n    \r\n    if (genericParam.IsAssignableTo(typeof(Stream)))\r\n    {\r\n        Console.WriteLine(true);\r\n    } \r\n\r\n    // Displays True.\r\n}\r\n```\r\n\r\n/cc @NickCraver @davkean @davidfowl ","Url":"https://github.com/dotnet/corefx/issues/40666","RelatedDescription":"Open issue \"API Proposal: Type.IsAssignableTo(Type)\" (#40666)"},{"Id":"486692266","IsPullRequest":false,"CreatedAt":"2019-08-29T01:54:32","Actor":"zarenner","Number":"40664","RawContent":null,"Title":"Feature request: Make it possible to determine where a CancellationToken was canceled","State":"open","Body":"A difficulty with using cancellation tokens today is that when an `OperationCanceledException` is thrown, it's often hard or impossible to determine where the cancellation occurred, or even which cancellation token is responsible as it may not be in scope to check against. Linked tokens add additional complexity, since it isn't possible to compare them against original tokens in a meaningful way (https://github.com/dotnet/corefx/issues/20787's \"IsDerivativeOf\").\r\n\r\nSince there are obviously performance and memory concerns around storing stack traces that might make this infeasible to go into the framework itself, an alternative would be to add some extensibility that would allow a separate library to implement this. For example, a very naive solution might be a static hook any time `Register` is called on any token, so that it can be tracked. I'm sure there are better solutions as well.\r\n\r\nThis isn't something that necessarily needs to be enabled all the time - being able to enable it just when debugging would be sufficient. Today it's just frustrating that hunting down the source of an `OperationCanceledException` (especially one that somewhat infrequently repros) is often difficult without making code changes.\r\n ","Url":"https://github.com/dotnet/corefx/issues/40664","RelatedDescription":"Open issue \"Feature request: Make it possible to determine where a CancellationToken was canceled\" (#40664)"},{"Id":"486647832","IsPullRequest":false,"CreatedAt":"2019-08-28T22:55:31","Actor":"Tratcher","Number":"40663","RawContent":null,"Title":"HTTP2: Client and server disagree on active stream count","State":"open","Body":"_From @JamesNK on Saturday, August 24, 2019 2:24:08 AM_\r\n\r\nIssue found during HTTP2 stress testing. One HttpClient is sending multiple requests in parallel, then canceling them via RST_STREAM sent to the server. For an unknown reason the server and client disagree on the active stream count, and the sever eventually sends RST_STREAM (REFUSED_STREAM) and GOAWAY (STREAM_CLOSED). This issue eventually leads to https://github.com/aspnet/AspNetCore/issues/13405.\r\n\r\nClient and server should agree on the active stream count and the client should wait to send new requests, without error.\r\n\r\nWireshark log: https://www.dropbox.com/s/5ndspth4t0qjyj6/clientreset-error.zip?dl=0\r\n\r\nException on the client:\r\n\r\n```\r\nUnhandled exception. System.Net.Http.HttpRequestException: An error occurred while sending the request.\r\n---> System.IO.IOException: The request was aborted.\r\n---> System.IO.IOException: The response ended prematurely, with at least 9 additional bytes expected.\r\n   at System.Net.Http.Http2Connection.ReadAtLeastAsync(Stream stream, Memory`1 buffer, Int32 minReadBytes)\r\n   at System.Net.Http.Http2Connection.EnsureIncomingBytesAsync(Int32 minReadBytes)\r\n   at System.Net.Http.Http2Connection.ReadFrameAsync(Boolean initialFrame)\r\n   at System.Net.Http.Http2Connection.ProcessIncomingFramesAsync()\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.Http2Connection.Http2Stream.CheckResponseBodyState()\r\n   at System.Net.Http.Http2Connection.Http2Stream.TryEnsureHeaders()\r\n   at System.Net.Http.Http2Connection.Http2Stream.ReadResponseHeadersAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at Grpc.Net.Client.Internal.GrpcCall`2.SendAsync(HttpClient client, HttpRequestMessage message)\r\n   at Grpc.Net.Client.Internal.GrpcCall`2.GetResponseHeadersAsync()\r\n```\r\n\r\nRepo is currently not public. Contact @JamesNK or @Tratcher for the repo source code and instruction.\r\n\r\n_Copied from original issue: aspnet/AspNetCore#13406_","Url":"https://github.com/dotnet/corefx/issues/40663","RelatedDescription":"Open issue \"HTTP2: Client and server disagree on active stream count\" (#40663)"},{"Id":"486644984","IsPullRequest":true,"CreatedAt":"2019-08-28T22:46:10","Actor":"steveharter","Number":"40662","RawContent":null,"Title":"Deserialize extension data properly","State":"open","Body":"Addresses https://github.com/dotnet/corefx/issues/40618 for master.\r\n\r\nUnder certain cases (depending on JSON was ordered), the extension data was not deserialized properly resulting in exceptions.\r\n\r\nThis should be ported to 3.0.\r\n","Url":"https://github.com/dotnet/corefx/pull/40662","RelatedDescription":"Open PR \"Deserialize extension data properly\" (#40662)"},{"Id":"486625151","IsPullRequest":true,"CreatedAt":"2019-08-28T21:46:18","Actor":"stephentoub","Number":"40661","RawContent":null,"Title":"[release/3.0] Reconfigure terminal for Console usage (#40563)","State":"open","Body":"Port relevant portion of #40563 to release/3.0\r\nFixes https://github.com/dotnet/corefx/issues/40557\r\ncc: @tmds, @wtgodbe, @ericstj\r\n\r\n## Description\r\n\r\nIn order to handle behaviors for some Console APIs like Console.ReadKey correctly, we need to configure the Unix terminal to e.g. not echo characters as they're typed.  But since multiple processes share a terminal, this can lead to problems if the .NET app for which we've configured the terminal then does a Process.Start and the started child (which may or may not be a .NET process) also wants to interact with the terminal. We don't know whether that process will want to interact with the terminal or not; in case it does, we need to reset terminal settings, but if we reset them too aggressively (when the child process doesn't actually need to interact with the terminal but the parent process is going to continue to while the child is alive), we could end with problems e.g. echo'ing characters unexpectedly/incorrectly.\r\n\r\nSo, we make a best-guess based on the settings with which the child process is created: our heuristic currently says \"if the process is not redirecting standard input _and_ it's not redirecting standard output, then it's interactive\".  But that fails for cases where the process is only redirecting one of them, e.g. a command like \"less\", where you might redirect its standard input to read from a piped input but where it then just writes to stdout to print the output to the terminal.  The fix is to relax the heuristic to be an OR instead of an AND, e.g. \"if the process is not redirecting standard input _or_ it's not redirecting standard output, then it's interactive\".  We also factor in standard error.\r\n\r\n## Customer Impact\r\n\r\nGobbledegook on and misinterpreted input at the terminal when interacting with System.Console and System.Diagnostics.Process.Start in certain ways.\r\n\r\n## Regression?\r\n\r\nYes, from .NET Core 2.2.  This was reported as a blocking issue for PowerShell upgrading to .NET Core 3.0.\r\n\r\n## Testing\r\n\r\nAll automated tests, plus manual validation of this case, plus PowerShell sign-off on the fix.\r\n\r\n## Risk\r\n\r\nThe biggest risk here is this area doesn't have a lot of automatic validation.  We have tests for basic things, but more complicated interactions between starting processes and interacting with the console currently require manual/exploratory testing.  Also, as there's a heuristic involved here, any changes to it could result in other cases that were \"working\" getting broken.\r\n\r\nHowever, we believe the new heuristic is the \"right\" one, as it uses all of the information we have available to us to make a more informed choice: if parent starting the child process isn't redirecting everything, then it's effectively saying it may want to interact with the terminal.  The risk there is that even if it doesn't redirect, the child process may not interact with the terminal, in which case if the parent process proceeds to interact with the terminal while the child is active, strangeness could result until the child terminates.","Url":"https://github.com/dotnet/corefx/pull/40661","RelatedDescription":"Open PR \"[release/3.0] Reconfigure terminal for Console usage (#40563)\" (#40661)"},{"Id":"486607020","IsPullRequest":false,"CreatedAt":"2019-08-28T21:01:39","Actor":"ppekrol","Number":"40660","RawContent":null,"Title":"Utf8Parser discrepancy in double parsing between .NET 2.2 and 3.0","State":"open","Body":"Hi,\r\n\r\nI have following code:\r\n\r\n```csharp\r\n            string bigNumString = string.Join(string.Empty, \"17976931348623158\" + string.Join(\"\", Enumerable.Repeat(0,293)));\r\n            var bytes = Encoding.UTF8.GetBytes(bigNumString);\r\n\r\n            if (Utf8Parser.TryParse(bytes.AsSpan(), out double value, out var consumed) && bytes.Length == consumed)\r\n            {\r\n                Console.WriteLine(value); // .NET Core 3.0\r\n                return;\r\n            }\r\n\r\n            throw new InvalidOperationException(\"Not parsed!\"); // .NET Core 2.2\r\n```\r\n\r\nIn .NET Core 2.2 it throws an exception, but in .NET Core 3.0 (preview8) it returns `Infinity`. Is this by design?","Url":"https://github.com/dotnet/corefx/issues/40660","RelatedDescription":"Open issue \"Utf8Parser discrepancy in double parsing between .NET 2.2 and 3.0\" (#40660)"},{"Id":"486490770","IsPullRequest":true,"CreatedAt":"2019-08-28T20:42:11","Actor":"dotnet-maestro[bot]","Number":"40650","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190828.3\r\n- **Date Produced**: 8/28/2019 4:20 PM\r\n- **Commit**: 40f44d980eb9ac791f94a275dec19c3f1a444839\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19428.3\r\n\r\n[marker]: <> (End:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40650","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/standard\" (#40650)"},{"Id":"486552968","IsPullRequest":true,"CreatedAt":"2019-08-28T20:41:46","Actor":"Dotnet-GitSync-Bot","Number":"40655","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corefx/pull/40655","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#40655)"},{"Id":"486595404","IsPullRequest":false,"CreatedAt":"2019-08-28T20:35:29","Actor":"TylerBrinkley","Number":"40659","RawContent":null,"Title":"Single and Double ToString(\"N\") returning 3 digits on Mac OS","State":"closed","Body":"`(-3987.9).ToString(\"N\")` on Mac used to return \"-3,987.90\" but in .NET Core 3.0 preview 8 it is returning \"-3,987.900\". From the documentation it says \r\n\r\n> If the precision specifier is omitted, the number of decimal places is defined by the current `NumberFormatInfo.NumberDecimalDigits` property.\r\n\r\n~That property has not changed as `(-3987.9M).ToString(\"N\") still returns \"-3,987.90`.~","Url":"https://github.com/dotnet/corefx/issues/40659","RelatedDescription":"Closed issue \"Single and Double ToString(\"N\") returning 3 digits on Mac OS\" (#40659)"},{"Id":"486563442","IsPullRequest":true,"CreatedAt":"2019-08-28T20:21:11","Actor":"dotnet-maestro[bot]","Number":"40658","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190828.2\r\n- **Date Produced**: 8/28/2019 4:47 PM\r\n- **Commit**: ebbcd615e12bf2d3174d8f481b4ee73b527c35e0\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc1.19428.2\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc1.19428.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc1.19428.2\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40658","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40658)"},{"Id":"486347652","IsPullRequest":false,"CreatedAt":"2019-08-28T19:21:06","Actor":"ricky-cck","Number":"40645","RawContent":null,"Title":"JsonSerializer StackOverflow when Serializing Nested collection of class","State":"closed","Body":"Following code will delivers StackOverflowException\r\n\r\n```csharp\r\nnamespace ConsoleApp1\r\n{\r\n    class Foo\r\n    {\r\n        public System.Collections.Generic.ICollection<Foo> Bar { get; set; }\r\n    }\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var foo = new Foo();\r\n            var json = System.Text.Json.JsonSerializer.Serialize(foo); // <== System.StackOverflowException\r\n            System.Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nMy spec:\r\nWin10 1903\r\n.NET Core App 3.0 preview8-28405-07","Url":"https://github.com/dotnet/corefx/issues/40645","RelatedDescription":"Closed issue \"JsonSerializer StackOverflow when Serializing Nested collection of class\" (#40645)"},{"Id":"486557450","IsPullRequest":false,"CreatedAt":"2019-08-28T19:06:38","Actor":"layomia","Number":"40657","RawContent":null,"Title":"Audit JSON (de)serialization behavior for System.Collections.Concurrent","State":"open","Body":"Ensure that serializer either provides (de)serialization support, or throws a meaningful`NotSupportedException` where applicable.","Url":"https://github.com/dotnet/corefx/issues/40657","RelatedDescription":"Open issue \"Audit JSON (de)serialization behavior for System.Collections.Concurrent\" (#40657)"},{"Id":"486555766","IsPullRequest":false,"CreatedAt":"2019-08-28T19:02:51","Actor":"ericstj","Number":"40656","RawContent":null,"Title":"Remove Microsoft.BCL compat packages from 5.0","State":"open","Body":"Per https://github.com/dotnet/corefx/pull/40363#discussion_r318743671 we won't be shipping new versions of the compat packages from 5.0, so we can remove these from the repo.","Url":"https://github.com/dotnet/corefx/issues/40656","RelatedDescription":"Open issue \"Remove Microsoft.BCL compat packages from 5.0\" (#40656)"},{"Id":"486551813","IsPullRequest":true,"CreatedAt":"2019-08-28T18:53:43","Actor":"layomia","Number":"40654","RawContent":null,"Title":"Improve JsonSerializer support for derived types","State":"open","Body":"Specifically,\r\n\r\n- When determining whether to handle a derived type as `IList` (i.e populating directly, without using a converter), check whether the runtime type is assignable to `IList`, not the declared type.\r\nThis fixes https://github.com/dotnet/corefx/issues/40597.\r\n- Preemptively throw `NotSupportedException` on deserialization of implementing types that don't have default constructors. This prevents a `NullReferenceException` when we try to create the instance.\r\n- Detect and use the implemented type of abstract implementing types for (de)serialization. This allows us to correctly throw `NotSupportedException` on deserialization (because abstract types have no default constructor).\r\n- Document expectations of (de)serializing collections in `System.Collections.ObjectModel` in tests.\r\n\r\nTodo: audit behavior of collections in `System.Collections.Specialized` (https://github.com/dotnet/corefx/issues/40370), and `System.Collections.Concurrent` (https://github.com/dotnet/corefx/issues/40657).","Url":"https://github.com/dotnet/corefx/pull/40654","RelatedDescription":"Open PR \"Improve JsonSerializer support for derived types\" (#40654)"},{"Id":"486546129","IsPullRequest":true,"CreatedAt":"2019-08-28T18:40:36","Actor":"stephentoub","Number":"40653","RawContent":null,"Title":"Annotate System.Threading.Channels for nullable reference types","State":"open","Body":"Contributes to https://github.com/dotnet/corefx/issues/40623\r\ncc: @dotnet/nullablefc \r\nSubmitting a few of these for various libraries to help flesh out our processes around annotating the rest of corefx.","Url":"https://github.com/dotnet/corefx/pull/40653","RelatedDescription":"Open PR \"Annotate System.Threading.Channels for nullable reference types\" (#40653)"},{"Id":"486546120","IsPullRequest":true,"CreatedAt":"2019-08-28T18:40:34","Actor":"stephentoub","Number":"40652","RawContent":null,"Title":"Annotate Microsoft.Win32.Primitives for nullable reference types","State":"open","Body":"Contributes to https://github.com/dotnet/corefx/issues/40623\r\ncc: @dotnet/nullablefc \r\nSubmitting a few of these for various libraries to help flesh out our processes around annotating the rest of corefx.","Url":"https://github.com/dotnet/corefx/pull/40652","RelatedDescription":"Open PR \"Annotate Microsoft.Win32.Primitives for nullable reference types\" (#40652)"},{"Id":"486546109","IsPullRequest":true,"CreatedAt":"2019-08-28T18:40:33","Actor":"stephentoub","Number":"40651","RawContent":null,"Title":"Annotate System.Linq for nullable reference types","State":"open","Body":"Contributes to https://github.com/dotnet/corefx/issues/40623\r\ncc: @dotnet/nullablefc \r\nSubmitting a few of these for various libraries to help flesh out our processes around annotating the rest of corefx.","Url":"https://github.com/dotnet/corefx/pull/40651","RelatedDescription":"Open PR \"Annotate System.Linq for nullable reference types\" (#40651)"},{"Id":"486398090","IsPullRequest":true,"CreatedAt":"2019-08-28T15:04:35","Actor":"dotnet-maestro[bot]","Number":"40647","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190828.1\r\n- **Date Produced**: 8/28/2019 8:40 AM\r\n- **Commit**: 336610e763b17b328617b13abbab8a30a54f664c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19428.1\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19428.1\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19428.1\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190827.13\r\n- **Date Produced**: 8/28/2019 5:24 AM\r\n- **Commit**: 5d1a8a834df0a7b48a24f27e1ce49c4ad763f648\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19427.13\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19427.13\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190827.2\r\n- **Date Produced**: 8/27/2019 12:55 PM\r\n- **Commit**: 330ef4bfbdd3344167238959024f867c0a9662e0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19427.2\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40647","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard\" (#40647)"},{"Id":"486438615","IsPullRequest":false,"CreatedAt":"2019-08-28T15:01:37","Actor":"justinushermawan","Number":"40649","RawContent":null,"Title":"DirectoryInfo.Attributes thrown System.IO.FileNotFoundException for hidden directory on macOS ","State":"open","Body":"Dear corefx team,\r\n\r\nI just tested my below code on macOS.\r\n```\r\nDirectoryInfo di = new DirectoryInfo(Path.Combine(env.ContentRootPath, \".myfolder\"));    \r\nif (!di.Exists)    \r\n{     \r\n    di.Create();     \r\n    di.Attributes = FileAttributes.Directory | FileAttributes.Hidden;  // got FileNotFoundException :(\r\n}    \r\n```\r\nBut, it always thrown `System.IO.FileNotFoundException` while setting the directory attributes after creating it. I use the dot (.) prefix on my folder name and want to make it hidden. It works fine on Windows.\r\n\r\nIt it a bug?","Url":"https://github.com/dotnet/corefx/issues/40649","RelatedDescription":"Open issue \"DirectoryInfo.Attributes thrown System.IO.FileNotFoundException for hidden directory on macOS \" (#40649)"},{"Id":"486419194","IsPullRequest":false,"CreatedAt":"2019-08-28T14:29:23","Actor":"kontacthimanshu","Number":"40648","RawContent":null,"Title":"Exact column names to be passed in IDataReader","State":"open","Body":"Starting with .Net Core 2.2 I am having to pass column names exactly matching with database table. Before .Net Core 2.2 it was not the case I could pass either exactly matching or in block or small letters and it would work just fine. Though the document on MSDN still suggest that .NET Core 2.2 is behaving like previous versions but that is not the case. Please take a look at urgent basis.","Url":"https://github.com/dotnet/corefx/issues/40648","RelatedDescription":"Open issue \"Exact column names to be passed in IDataReader\" (#40648)"},{"Id":"486344349","IsPullRequest":true,"CreatedAt":"2019-08-28T13:58:00","Actor":"dotnet-maestro[bot]","Number":"40644","RawContent":null,"Title":"[release/3.0] Update dependencies from 3 repositories","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:79f1e123-800e-410f-94d7-08d690bc143a)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190827.13\r\n- **Date Produced**: 8/28/2019 7:11 AM\r\n- **Commit**: 1c0f7e38cc371a298353a459c53138f23ba40a2a\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19427-13\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-rc1-19427-13\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-rc1-19427-13\r\n\r\n[marker]: <> (End:79f1e123-800e-410f-94d7-08d690bc143a)\r\n\r\n[marker]: <> (Begin:a5bda823-89f1-4ce6-0d43-08d6910cd73b)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19427.8\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19427.8\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:a5bda823-89f1-4ce6-0d43-08d6910cd73b)\r\n\r\n[marker]: <> (Begin:fc000152-53a0-4a98-0b3e-08d6bc6f2d11)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190828.1\r\n- **Date Produced**: 8/28/2019 11:18 AM\r\n- **Commit**: 48fd58c24cddbc6c0b0de1c00204aae1170f4864\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190828.1\r\n\r\n[marker]: <> (End:fc000152-53a0-4a98-0b3e-08d6bc6f2d11)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40644","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from 3 repositories\" (#40644)"},{"Id":"486337716","IsPullRequest":true,"CreatedAt":"2019-08-28T13:52:26","Actor":"dotnet-maestro[bot]","Number":"40643","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19427.8\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19427.8\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40643","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#40643)"},{"Id":"486392211","IsPullRequest":false,"CreatedAt":"2019-08-28T13:43:32","Actor":"GSPP","Number":"40646","RawContent":null,"Title":"Discrepancies in Utf8JsonReader between single- and multi-segment modes for invalid JSON","State":"open","Body":"I have continued my [investigation](https://github.com/dotnet/corefx/issues/39974) into discrepancies between single segment mode and multi segment mode in Utf8JsonSerializer. I found a few cases where the values for BytesConsumed, BytePositionInLine or the error message deviate between modes. Depending on the segmentation chunking, the error message and position numbers can be different for the same JSON. This could be an issue for debuggability and diagnosing production errors. It seems desirable that the segment mode should not affect parsing outcome.\r\n\r\nIt seems there are two issues:\r\n\r\n1. Processing of literals such as \"true\".\r\n2. Comment handling.\r\n\r\nHere are the test cases:\r\n\r\n    static class ReproProgramCompare\r\n    {\r\n        public static void Run()\r\n        {\r\n            RunTestCase(\"fals\");\r\n            RunTestCase(\"tb:\");\r\n            RunTestCase(\"{\\\"\\\":tr\");\r\n            RunTestCase(\"[[n{\\\"a\\\":\");\r\n            RunTestCase(\"f-2.2e-2,-\");\r\n\r\n            RunTestCase(\"/+\");\r\n            RunTestCase(\"{/\");\r\n            RunTestCase(\"{/s\");\r\n            RunTestCase(\"{ /\");\r\n            RunTestCase(\"{} /\");\r\n        }\r\n\r\n        static void RunTestCase(string jsonString)\r\n        {\r\n            var result = GetResultCompare(new JsonInput(Encoding.UTF8.GetBytes(jsonString), true, false, JsonCommentHandling.Skip));\r\n\r\n            Console.WriteLine($\"Test case: \" + jsonString);\r\n\r\n            var messageOutput = $\"BytesConsumed: {result.Result1.BytesConsumed}, CurrentDepth: {result.Result1.CurrentDepth}, TokenStartIndex: {result.Result1.TokenStartIndex}, TokenType: {result.Result1.TokenType}, Exception: {result.Result1.Exception?.Message}\";\r\n            messageOutput += Environment.NewLine + $\"BytesConsumed: {result.Result2.BytesConsumed}, CurrentDepth: {result.Result2.CurrentDepth}, TokenStartIndex: {result.Result2.TokenStartIndex}, TokenType: {result.Result2.TokenType}, Exception: {result.Result2.Exception?.Message}\";\r\n\r\n            Console.WriteLine(messageOutput);\r\n            Console.WriteLine();\r\n        }\r\n\r\n        static CompareResult GetResultCompare(JsonInput jsonInput)\r\n        {\r\n            var result1 = GetResultJsonReaderSingleSegment(jsonInput);\r\n            var result2 = GetResultJsonReaderMultiSegment(jsonInput);\r\n\r\n            string differenceString = null;\r\n\r\n            var hasExceptionDifference =\r\n                (result1.Exception != null) != (result2.Exception != null) ||\r\n                (result1.Exception != null && result2.Exception != null && (result1.Exception.GetType() != result2.Exception.GetType() || result1.Exception.Message != result2.Exception.Message));\r\n\r\n            if (\r\n                hasExceptionDifference ||\r\n                result1.BytesConsumed != result2.BytesConsumed ||\r\n                result1.CurrentDepth != result2.CurrentDepth ||\r\n                result1.TokenStartIndex != result2.TokenStartIndex ||\r\n                result1.TokenType != result2.TokenType ||\r\n                false)\r\n            {\r\n                differenceString = $\"Exception: {hasExceptionDifference}, BytesConsumed: {result1.BytesConsumed != result2.BytesConsumed}, CurrentDepth: {result1.CurrentDepth != result2.CurrentDepth}, TokenStartIndex: {result1.TokenStartIndex != result2.TokenStartIndex}, TokenType: {result1.TokenType != result2.TokenType}\";\r\n            }\r\n\r\n            return new CompareResult(result1, result2, differenceString);\r\n        }\r\n\r\n        class CompareResult\r\n        {\r\n            public JsonResult Result1 { get; }\r\n            public JsonResult Result2 { get; }\r\n            public string DifferenceString { get; }\r\n\r\n            public CompareResult(JsonResult result1, JsonResult result2, string differenceString)\r\n            {\r\n                Result1 = result1;\r\n                Result2 = result2;\r\n                DifferenceString = differenceString;\r\n            }\r\n\r\n            public override string ToString()\r\n            {\r\n                return $\"{nameof(Result1)}: {Result1}, {nameof(Result2)}: {Result2}, {nameof(DifferenceString)}: {DifferenceString}\";\r\n            }\r\n        }\r\n\r\n        static JsonResult GetResultJsonReaderMultiSegment(JsonInput jsonInput)\r\n        {\r\n            static IEnumerable<Memory<byte>> SplitMemory(Memory<byte> memory, int chunkSize)\r\n            {\r\n                for (int startIndex = 0; startIndex < memory.Length; startIndex += chunkSize)\r\n                    yield return memory.Slice(startIndex, Math.Min(chunkSize, memory.Length - startIndex));\r\n            }\r\n\r\n            var memories = SplitMemory(jsonInput.JsonBytes, 1);\r\n\r\n            var jsonReader = new Utf8JsonReader(CreateReadOnlySequence(memories), jsonInput.IsFinalBlock, new JsonReaderState(jsonInput.GetJsonReaderOptions()));\r\n\r\n            var jsonResult = ConsumeJsonReader(jsonReader, jsonInput.JsonBytes.Length);\r\n\r\n            return jsonResult;\r\n        }\r\n\r\n        static JsonResult GetResultJsonReaderSingleSegment(JsonInput jsonInput)\r\n        {\r\n            var utf8JsonGuardPage = jsonInput.JsonBytes;\r\n\r\n            var jsonReader = new Utf8JsonReader(utf8JsonGuardPage, jsonInput.IsFinalBlock, new JsonReaderState(jsonInput.GetJsonReaderOptions()));\r\n\r\n            return ConsumeJsonReader(jsonReader, utf8JsonGuardPage.Length);\r\n        }\r\n\r\n        static JsonResult ConsumeJsonReader(Utf8JsonReader jsonReader, int inputLength)\r\n        {\r\n            Exception exception = null;\r\n            try\r\n            {\r\n                long lastBytesConsumed = 0;\r\n                long lastTokenStartIndex = -1;\r\n                JsonTokenType lastTokenType = JsonTokenType.None;\r\n\r\n                while (jsonReader.Read())\r\n                {\r\n                    if (jsonReader.BytesConsumed <= lastBytesConsumed)\r\n                        throw new Exception(\"State: BytesConsumed.\");\r\n\r\n                    if (jsonReader.TokenStartIndex <= lastTokenStartIndex)\r\n                        throw new Exception(\"State: TokenStartIndex.\");\r\n\r\n                    if (jsonReader.TokenType == lastTokenType &&\r\n                        (lastTokenType == JsonTokenType.False ||\r\n                         lastTokenType == JsonTokenType.True ||\r\n                         lastTokenType == JsonTokenType.Null ||\r\n                         lastTokenType == JsonTokenType.False ||\r\n                         lastTokenType == JsonTokenType.String ||\r\n                         lastTokenType == JsonTokenType.Number ||\r\n                         lastTokenType == JsonTokenType.PropertyName ||\r\n                         false))\r\n                        throw new Exception(\"State: TokenType.\");\r\n\r\n                    lastBytesConsumed = jsonReader.BytesConsumed;\r\n                    lastTokenStartIndex = jsonReader.TokenStartIndex;\r\n                    lastTokenType = jsonReader.TokenType;\r\n                }\r\n\r\n                if (jsonReader.IsFinalBlock && jsonReader.BytesConsumed != inputLength)\r\n                    throw new Exception(\"State: Incomplete.\");\r\n\r\n                if (jsonReader.IsFinalBlock &&\r\n                    (jsonReader.TokenType == JsonTokenType.StartArray ||\r\n                     jsonReader.TokenType == JsonTokenType.StartObject ||\r\n                     jsonReader.TokenType == JsonTokenType.None ||\r\n                     false))\r\n                    throw new Exception(\"State: Final TokenType.\");\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                exception = ex;\r\n            }\r\n\r\n            return new JsonResult(exception, jsonReader.BytesConsumed, jsonReader.CurrentDepth, jsonReader.TokenStartIndex, jsonReader.TokenType);\r\n        }\r\n\r\n        readonly struct JsonInput\r\n        {\r\n            public byte[] JsonBytes { get; }\r\n            public bool IsFinalBlock { get; }\r\n            public bool AllowTrailingCommas { get; }\r\n            public JsonCommentHandling CommentHandling { get; }\r\n\r\n            public JsonReaderOptions GetJsonReaderOptions() => new JsonReaderOptions() { AllowTrailingCommas = AllowTrailingCommas, CommentHandling = CommentHandling };\r\n\r\n            public JsonInput(byte[] jsonBytes, bool isFinalBlock, bool allowTrailingCommas, JsonCommentHandling commentHandling)\r\n            {\r\n                JsonBytes = jsonBytes;\r\n                IsFinalBlock = isFinalBlock;\r\n                AllowTrailingCommas = allowTrailingCommas;\r\n                CommentHandling = commentHandling;\r\n            }\r\n        }\r\n\r\n        class JsonResult\r\n        {\r\n            public Exception Exception { get; }\r\n            public long BytesConsumed { get; }\r\n            public int CurrentDepth { get; }\r\n            public long TokenStartIndex { get; }\r\n            public JsonTokenType TokenType { get; }\r\n\r\n            public JsonResult(Exception exception, long bytesConsumed, int currentDepth, long tokenStartIndex, JsonTokenType tokenType)\r\n            {\r\n                Exception = exception;\r\n                BytesConsumed = bytesConsumed;\r\n                CurrentDepth = currentDepth;\r\n                TokenStartIndex = tokenStartIndex;\r\n                TokenType = tokenType;\r\n            }\r\n\r\n            public override string ToString()\r\n            {\r\n                return $\"{nameof(Exception)}: {Exception}, {nameof(BytesConsumed)}: {BytesConsumed}, {nameof(CurrentDepth)}: {CurrentDepth}, {nameof(TokenStartIndex)}: {TokenStartIndex}, {nameof(TokenType)}: {TokenType}\";\r\n            }\r\n        }\r\n\r\n        public static ReadOnlySequence<T> CreateReadOnlySequence<T>(IEnumerable<Memory<T>> buffers) => SimpleReadOnlySequenceSegment<T>.Create(buffers);\r\n\r\n        class SimpleReadOnlySequenceSegment<T> : ReadOnlySequenceSegment<T>\r\n        {\r\n            internal static ReadOnlySequence<T> Create(IEnumerable<Memory<T>> buffers)\r\n            {\r\n                SimpleReadOnlySequenceSegment<T> segment = null;\r\n                SimpleReadOnlySequenceSegment<T> first = null;\r\n                foreach (Memory<T> buffer in buffers)\r\n                {\r\n                    var newSegment = new SimpleReadOnlySequenceSegment<T>()\r\n                    {\r\n                        Memory = buffer,\r\n                    };\r\n\r\n                    if (segment != null)\r\n                    {\r\n                        segment.Next = newSegment;\r\n                        newSegment.RunningIndex = segment.RunningIndex + segment.Memory.Length;\r\n                    }\r\n                    else\r\n                    {\r\n                        first = newSegment;\r\n                    }\r\n\r\n                    segment = newSegment;\r\n                }\r\n\r\n                if (first == null)\r\n                {\r\n                    first = segment = new SimpleReadOnlySequenceSegment<T>();\r\n                }\r\n\r\n                return new ReadOnlySequence<T>(first, 0, segment, segment.Memory.Length);\r\n            }\r\n        }\r\n    }\r\n\r\nOutput:\r\n\r\nTest case: fals\r\nBytesConsumed: 0, CurrentDepth: 0, TokenStartIndex: 0, TokenType: None, Exception: 'fals' is an invalid JSON literal. Expected the literal 'false'. LineNumber: 0 | BytePositionInLine: 4.\r\nBytesConsumed: 0, CurrentDepth: 0, TokenStartIndex: 0, TokenType: None, Exception: 'fal' is an invalid JSON literal. Expected the literal 'false'. LineNumber: 0 | BytePositionInLine: 4.\r\n\r\nTest case: tb:\r\nBytesConsumed: 0, CurrentDepth: 0, TokenStartIndex: 0, TokenType: None, Exception: 'tb:' is an invalid JSON literal. Expected the literal 'true'. LineNumber: 0 | BytePositionInLine: 1.\r\nBytesConsumed: 0, CurrentDepth: 0, TokenStartIndex: 0, TokenType: None, Exception: 'tb' is an invalid JSON literal. Expected the literal 'true'. LineNumber: 0 | BytePositionInLine: 1.\r\n\r\nTest case: {\"\":tr\r\nBytesConsumed: 4, CurrentDepth: 1, TokenStartIndex: 4, TokenType: PropertyName, Exception: 'tr' is an invalid JSON literal. Expected the literal 'true'. LineNumber: 0 | BytePositionInLine: 6.\r\nBytesConsumed: 4, CurrentDepth: 1, TokenStartIndex: 4, TokenType: PropertyName, Exception: 't' is an invalid JSON literal. Expected the literal 'true'. LineNumber: 0 | BytePositionInLine: 6.\r\n\r\nTest case: [[n{\"a\":\r\nBytesConsumed: 2, CurrentDepth: 1, TokenStartIndex: 2, TokenType: StartArray, Exception: 'n{\"a\":' is an invalid JSON literal. Expected the literal 'null'. LineNumber: 0 | BytePositionInLine: 3.\r\nBytesConsumed: 2, CurrentDepth: 1, TokenStartIndex: 2, TokenType: StartArray, Exception: 'n{' is an invalid JSON literal. Expected the literal 'null'. LineNumber: 0 | BytePositionInLine: 3.\r\n\r\nTest case: f-2.2e-2,-\r\nBytesConsumed: 0, CurrentDepth: 0, TokenStartIndex: 0, TokenType: None, Exception: 'f-2.2e-2,-' is an invalid JSON literal. Expected the literal 'false'. LineNumber: 0 | BytePositionInLine: 1.\r\nBytesConsumed: 0, CurrentDepth: 0, TokenStartIndex: 0, TokenType: None, Exception: 'f-' is an invalid JSON literal. Expected the literal 'false'. LineNumber: 0 | BytePositionInLine: 1.\r\n\r\nTest case: /+\r\nBytesConsumed: 0, CurrentDepth: 0, TokenStartIndex: 0, TokenType: None, Exception: '/' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 0.\r\nBytesConsumed: 1, CurrentDepth: 0, TokenStartIndex: 0, TokenType: None, Exception: '+' is invalid after '/' at the beginning of the comment. Expected either '/' or '*'. LineNumber: 0 | BytePositionInLine: 1.\r\n\r\nTest case: {/\r\nBytesConsumed: 1, CurrentDepth: 0, TokenStartIndex: 1, TokenType: StartObject, Exception: '/' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 1.\r\nBytesConsumed: 2, CurrentDepth: 0, TokenStartIndex: 1, TokenType: StartObject, Exception: Unexpected end of data while reading a comment. LineNumber: 0 | BytePositionInLine: 2.\r\n\r\nTest case: {/s\r\nBytesConsumed: 1, CurrentDepth: 0, TokenStartIndex: 1, TokenType: StartObject, Exception: '/' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 1.\r\nBytesConsumed: 2, CurrentDepth: 0, TokenStartIndex: 1, TokenType: StartObject, Exception: 's' is invalid after '/' at the beginning of the comment. Expected either '/' or '*'. LineNumber: 0 | BytePositionInLine: 2.\r\n\r\nTest case: { /\r\nBytesConsumed: 2, CurrentDepth: 0, TokenStartIndex: 2, TokenType: StartObject, Exception: '/' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 2.\r\nBytesConsumed: 3, CurrentDepth: 0, TokenStartIndex: 2, TokenType: StartObject, Exception: Unexpected end of data while reading a comment. LineNumber: 0 | BytePositionInLine: 3.\r\n\r\nTest case: {} /\r\nBytesConsumed: 3, CurrentDepth: 0, TokenStartIndex: 3, TokenType: EndObject, Exception: '/' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 3.\r\nBytesConsumed: 4, CurrentDepth: 0, TokenStartIndex: 3, TokenType: EndObject, Exception: Unexpected end of data while reading a comment. LineNumber: 0 | BytePositionInLine: 4.\r\n\r\n@ahsonkhan ","Url":"https://github.com/dotnet/corefx/issues/40646","RelatedDescription":"Open issue \"Discrepancies in Utf8JsonReader between single- and multi-segment modes for invalid JSON\" (#40646)"},{"Id":"486321699","IsPullRequest":false,"CreatedAt":"2019-08-28T11:28:08","Actor":"devilnest","Number":"40642","RawContent":null,"Title":"Throwing Error for Gdip when creating a SolidBrush variable","State":"open","Body":"I found this is a common problem which can be resolved with installing libgdiplus but this 'trick' doesnt help in my case.\r\n\r\nMy spec:\r\nLinux: centos-release-7-5.1804.el7.centos.2.x86_84\r\n.NET Core version: 2.1\r\nSystem.Drawing.Common (4.5.1)\r\nlibgdiplus: libgdiplus-2.10-10.el7.x86_64\r\nalso installed libgdipls-devel\r\n\r\nCode which delivers a error:\r\n```csharp\r\nclass CardBuilder\r\n{\r\n   private readonly Brush _secondInformationColor = new SolidBrush(Color.FromArgb(179, 179, 179));\r\n\r\n   public CardBuilder(){}\r\n}\r\n```\r\nAnd the error is:\r\nThe type initializer for 'Gdip' threw an exception.\r\nat System.Drawing.SafeNativeMethods.Gdip.GdipCreateSolidFill(Int32 color, IntPtr& brush)\r\nat System.Drawing.SolidBrush..ctor(Color color)\r\n\r\nIf I find a solution, I will put the answer in the current issue\r\n\r\n[EDIT:]\r\nChanging to NET CORE 2.2 : doesn't help","Url":"https://github.com/dotnet/corefx/issues/40642","RelatedDescription":"Open issue \"Throwing Error for Gdip when creating a SolidBrush variable\" (#40642)"},{"Id":"486241000","IsPullRequest":false,"CreatedAt":"2019-08-28T08:46:58","Actor":"Thaina","Number":"40641","RawContent":null,"Title":"Dictionary iterate reference of value","State":"open","Body":"Since we cannot modified dictionary collection while iterating it. But I think the value should be allowed to modified and it would not be affect the version number or hashCode field of `Entry` struct. I think dictionary should support this function\r\n\r\n```C#\r\nDictionary<string,int> dict;\r\nstring needIncrement;\r\ndict.IterateRef((string key,ref int value) => {\r\n    if(key == needIncrement)\r\n    {\r\n        value++;\r\n        return false; // break iteration\r\n    }\r\n\r\n    return true; // continue iteration\r\n});\r\n\r\nstring[] needIncrements;\r\ndict.IterateRefByKeys(needIncrements,(string key,ref int value) => { // iterate only same key\r\n    value++;\r\n});\r\n```\r\n\r\nIs it possible?","Url":"https://github.com/dotnet/corefx/issues/40641","RelatedDescription":"Open issue \"Dictionary iterate reference of value\" (#40641)"},{"Id":"486164885","IsPullRequest":true,"CreatedAt":"2019-08-28T06:31:16","Actor":"dotnet-maestro[bot]","Number":"40640","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190827.10\r\n- **Date Produced**: 8/28/2019 2:33 AM\r\n- **Commit**: f161f03b4703bf90240e62f9a8ed8293b50fc376\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc1.19427.10\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc1.19427.10\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc1.19427.10\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40640","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40640)"},{"Id":"486141429","IsPullRequest":true,"CreatedAt":"2019-08-28T04:02:33","Actor":"Dotnet-GitSync-Bot","Number":"40639","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @eerhardt","Url":"https://github.com/dotnet/corefx/pull/40639","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#40639)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"486732285","IsPullRequest":false,"CreatedAt":"2019-08-29T05:03:53","Actor":"davkean","Number":"38365","RawContent":null,"Title":"[Regression] Code fix previews are not visible by default","State":"closed","Body":"**Visual Studio Version**:\r\nVersion 16.4.0 Preview 1.0 [29228.128.master]\r\n\r\n**Summary**:\r\n\r\nNot sure if this also occurs in 16.3 as don't currently have build installed.\r\n\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Navigate to a code fix/refactoring that has a preview\r\n\r\n**Expected Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/63910494-3ec5b800-ca6a-11e9-8c96-167f84a4dc07.png)\r\n\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/1103906/63910496-44bb9900-ca6a-11e9-8274-e48ffd1031e1.png)\r\n\r\n**User Impact**:\r\n","Url":"https://github.com/dotnet/roslyn/issues/38365","RelatedDescription":"Closed issue \"[Regression] Code fix previews are not visible by default\" (#38365)"},{"Id":"486715274","IsPullRequest":true,"CreatedAt":"2019-08-29T03:27:39","Actor":"heejaechang","Number":"38364","RawContent":null,"Title":"port typescript's remote syntactic classification tagger for A/B testing","State":"open","Body":"this code is only for A/B testing to see whether we can do syntactic classification remotely.\r\n\r\nthis code reuses existing code exactly the same as much as possible.","Url":"https://github.com/dotnet/roslyn/pull/38364","RelatedDescription":"Open PR \"port typescript's remote syntactic classification tagger for A/B testing\" (#38364)"},{"Id":"486702750","IsPullRequest":false,"CreatedAt":"2019-08-29T02:37:00","Actor":"Naine","Number":"38363","RawContent":null,"Title":"Covariance does not consider type parameter constraints","State":"open","Body":"Minimal reproduction:\r\n\r\n```csharp\r\ninterface IFoo<out T> { }\r\nclass Foo<T> : IFoo<T>\r\n{\r\n    static void Bar<U>() where U : T\r\n    {\r\n        U x1 = default;\r\n        T y1 = x1; // works, thanks to constraint\r\n\r\n        IFoo<string> x2 = new Foo<string>();\r\n        IFoo<object> y2 = x2; // works, thanks to covariance\r\n\r\n        IFoo<U> x3 = new Foo<U>();\r\n        IFoo<T> y3 = x3; // error CS0266\r\n    }\r\n}\r\n```\r\n\r\nI would expect `IFoo<U>` to be implicitly convertible to `IFoo<T>` due to the covariance rule, since U is a subclass of T according to the constraint.\r\n\r\nInstead I get:\r\n```\r\nError CS0266 Cannot implicitly convert type 'IFoo<U>' to 'IFoo<T>'. An explicit conversion exists (are you missing a cast?)\r\n```\r\n\r\n`Foo<U>` is also not implicitly convertible to `IFoo<T>`, but casts do succeed at runtime for any U and T that satisfy the type parameter constraint.","Url":"https://github.com/dotnet/roslyn/issues/38363","RelatedDescription":"Open issue \"Covariance does not consider type parameter constraints\" (#38363)"},{"Id":"486678900","IsPullRequest":true,"CreatedAt":"2019-08-29T00:55:33","Actor":"RikkiGibson","Number":"38362","RawContent":null,"Title":"Update operand flow state after an unboxing conversion","State":"open","Body":"Closes #38170\r\n\r\nI incidentally found and fixed a bug where explicit nullable conversions to non-nullable value types would fail to update all affected slots.","Url":"https://github.com/dotnet/roslyn/pull/38362","RelatedDescription":"Open PR \"Update operand flow state after an unboxing conversion\" (#38362)"},{"Id":"486342138","IsPullRequest":true,"CreatedAt":"2019-08-29T00:54:25","Actor":"dotnet-maestro[bot]","Number":"38337","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38337","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#38337)"},{"Id":"486675334","IsPullRequest":true,"CreatedAt":"2019-08-29T00:39:46","Actor":"ivanbasov","Number":"38361","RawContent":null,"Title":"Revert VSSDK and keep GoToBase UI","State":"open","Body":"Attempt to fix #38349, #38350 and #38351","Url":"https://github.com/dotnet/roslyn/pull/38361","RelatedDescription":"Open PR \"Revert VSSDK and keep GoToBase UI\" (#38361)"},{"Id":"486338084","IsPullRequest":true,"CreatedAt":"2019-08-29T00:30:19","Actor":"dotnet-bot","Number":"38335","RawContent":null,"Title":"Merge release/dev16.3 to release/dev16.3-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-to-release/dev16.3-vs-deps\ngit reset --hard upstream/release/dev16.3-vs-deps\ngit merge upstream/release/dev16.3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38335","RelatedDescription":"Closed or merged PR \"Merge release/dev16.3 to release/dev16.3-vs-deps\" (#38335)"},{"Id":"486666499","IsPullRequest":false,"CreatedAt":"2019-08-29T00:03:33","Actor":"SebastianMirocha","Number":"38360","RawContent":null,"Title":"CS8617 warning. Maybe fixed but....","State":"open","Body":"**Version Used**: \r\n\r\n- VS2019 16.2.3\r\n- .Net Core 3.0 Preview 8\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a solution with two .Net Core libraries (Lib2 references Lib1).\r\n\r\n```\r\n\t<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t\t<PropertyGroup>\r\n\t\t\t<TargetFramework>netcoreapp3.0</TargetFramework>\r\n\t\t\t<LangVersion>8.0</LangVersion>\r\n\t\t\t<Nullable>enable</Nullable>\r\n\t\t</PropertyGroup>\r\n\t</Project>\r\n```\r\n\r\n2. Add following interface to Lib1 project:\r\n\r\n```\r\n    namespace Lib1\r\n    {\r\n        public interface IFace\r\n        {\r\n            string? FilePath { get; }\r\n            bool? LoadSolverConfiguration(bool isDefault) => true;\r\n        }\r\n    }\r\n```\r\n\r\n3. Add following class to Lib2 project\r\n\r\n```\r\n    using Lib1;\r\n\r\n    namespace Lib2\r\n    {\r\n        public class Implementation : IFace\r\n        {\r\n            public string? FilePath => null;\r\n            bool? IFace.LoadSolverConfiguration(bool isDefault) => true;\r\n        }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nNo warning.\r\n\r\n**Actual Behavior**:\r\n\r\nWarning CS8617 Nullability of reference types in type of parameter 'isDefault' doesn't match implemented member 'bool? IFace.LoadSolverConfiguration(bool isDefault)'.\r\n\r\nMaybe the same case as in [#37927](https://github.com/dotnet/roslyn/issues/37927) (CS8614) but please verify it's not.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38360","RelatedDescription":"Open issue \"CS8617 warning. Maybe fixed but....\" (#38360)"},{"Id":"486666049","IsPullRequest":true,"CreatedAt":"2019-08-29T00:01:59","Actor":"dotnet-bot","Number":"38359","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38359","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#38359)"},{"Id":"486338160","IsPullRequest":true,"CreatedAt":"2019-08-28T23:00:12","Actor":"dotnet-bot","Number":"38336","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38336","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#38336)"},{"Id":"486640392","IsPullRequest":false,"CreatedAt":"2019-08-28T22:31:31","Actor":"RikkiGibson","Number":"38358","RawContent":null,"Title":"Quick Info representation for flow analysis annotations","State":"open","Body":"When a method has flow analysis attributes it may be worthwhile to somehow display them in Quick Info.\r\n\r\nThe most obvious approach would be something like:\r\n```cs\r\nbool string.IsNullOrEmpty([NotNullWhen(false)] string? value)\r\n```\r\n\r\nObviously Quick Info \"real estate\" is very valuable and we want to make sure this is providing more value than noise.\r\n\r\n/cc @jasonmalinowski @sharwell ","Url":"https://github.com/dotnet/roslyn/issues/38358","RelatedDescription":"Open issue \"Quick Info representation for flow analysis annotations\" (#38358)"},{"Id":"486639979","IsPullRequest":false,"CreatedAt":"2019-08-28T22:30:15","Actor":"jaredpar","Number":"38357","RawContent":null,"Title":"Update our cached reference count in server","State":"open","Body":"Presently the compiler server will cache the last 100 references read off of disk. This number was chosen arbitrarily as dictated by the comment in [the file](https://github.com/dotnet/roslyn/blob/master/src/Compilers/Server/VBCSCompiler/MetadataCache.cs#L17):\r\n\r\n``` csharp\r\n        // Store 100 entries -- arbitrary number\r\n        private const int CacheSize = 100;\r\n```\r\n\r\nAt the time this number was chosen though desktop was the primary scenario. It's possible this number was based off of the average reference count for desktop projects which is typically less than 100. Hence the cache would comfortably persist across compilations for desktop projects (or maybe the number was completely arbitrary). \r\n\r\nThis number though doesn't help us with .NET Core style projects where reference counts are significantly higher:\r\n\r\n|Target Framework|Average Reference Count|\r\n|--|--|\r\n|.NET Standard|165|\r\n|.NET Core|201|\r\n|ASP.NET Core|323|\r\n\r\nThis means for newer projects the compiler server reference cache effectively does not exist. At least half of the references are getting evicted on every compilation. Based on this I think we need to update our reference cached count to 350 to ensure we're providing the most value for the\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38357","RelatedDescription":"Open issue \"Update our cached reference count in server\" (#38357)"},{"Id":"486630638","IsPullRequest":true,"CreatedAt":"2019-08-28T22:01:50","Actor":"heejaechang","Number":"38356","RawContent":null,"Title":"Fix deadlock due to VS Experiement service jumping to UI thread in certain cases.","State":"open","Body":"make sure to acquire IExperiementationService outside of a lock so that we don't get into deadlock in certain cases.","Url":"https://github.com/dotnet/roslyn/pull/38356","RelatedDescription":"Open PR \"Fix deadlock due to VS Experiement service jumping to UI thread in certain cases.\" (#38356)"},{"Id":"486629813","IsPullRequest":true,"CreatedAt":"2019-08-28T21:59:23","Actor":"agocke","Number":"38355","RawContent":null,"Title":"Remove RestoreSources from Versions.props","State":"open","Body":"Responds to the change https://github.com/dotnet/arcade/pull/3041 in Arcade","Url":"https://github.com/dotnet/roslyn/pull/38355","RelatedDescription":"Open PR \"Remove RestoreSources from Versions.props\" (#38355)"},{"Id":"486626242","IsPullRequest":true,"CreatedAt":"2019-08-28T21:49:16","Actor":"333fred","Number":"38354","RawContent":null,"Title":"Record updated symbols for properties, fields, event access, and event assignments","State":"open","Body":"This expands the range of symbols for which `GetSymbolInfo` will return correct information. @dotnet/roslyn-compiler for a review please. /cc @jasonmalinowski @ryzngard.","Url":"https://github.com/dotnet/roslyn/pull/38354","RelatedDescription":"Open PR \"Record updated symbols for properties, fields, event access, and event assignments\" (#38354)"},{"Id":"486619841","IsPullRequest":true,"CreatedAt":"2019-08-28T21:32:29","Actor":"agocke","Number":"38353","RawContent":null,"Title":"Bring features/localsinit branch up to date with master","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38353","RelatedDescription":"Open PR \"Bring features/localsinit branch up to date with master\" (#38353)"},{"Id":"486608726","IsPullRequest":false,"CreatedAt":"2019-08-28T21:05:27","Actor":"333fred","Number":"38352","RawContent":null,"Title":"Bad error message for generic field","State":"open","Body":"```cs\r\n#nullable enable\r\npublic class C<T> {\r\n\tT t;\r\n}\r\n```\r\n```\r\nwarning CS8618: Non-nullable field 't' is uninitialized. Consider declaring the field as nullable.\r\n```\r\nThe recommendation here is something that cannot be done, we shouldn't recommend making the field nullable when it's of type T.","Url":"https://github.com/dotnet/roslyn/issues/38352","RelatedDescription":"Open issue \"Bad error message for generic field\" (#38352)"},{"Id":"486608321","IsPullRequest":false,"CreatedAt":"2019-08-28T21:04:36","Actor":"JoeRobich","Number":"38351","RawContent":null,"Title":"VisualBasicCompletionCommandHandlerTests.TestBangFiltersInDocComment","State":"open","Body":"Failures in PR validation [Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=328771&view=ms.vss-test-web.build-test-results-tab&runId=9620558&resultId=100452&paneView=debug)\r\n```\r\nError message\r\nAssertCompletionSession\\r\\nExpected: True\\r\\nActual: False\r\n\r\nStack trace\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.ModernCompletionTestState.VB$StateMachine_22_AssertCompletionSession.MoveNext() in /_/src/EditorFeatures/TestUtilities2/Intellisense/ModernCompletionTestState.vb:line 191\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicCompletionCommandHandlerTests.VB$StateMachine_59_TestBangFiltersInDocComment.MoveNext() in /_/src/EditorFeatures/Test2/IntelliSense/VisualBasicCompletionCommandHandlerTests.vb:line 1369\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38351","RelatedDescription":"Open issue \"VisualBasicCompletionCommandHandlerTests.TestBangFiltersInDocComment\" (#38351)"},{"Id":"486607538","IsPullRequest":false,"CreatedAt":"2019-08-28T21:02:52","Actor":"JoeRobich","Number":"38350","RawContent":null,"Title":"VisualBasicCompletionCommandHandlerTests.DotIsInserted UnitTest fails","State":"open","Body":"Multiple failures in PR validation [Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=328771&view=ms.vss-test-web.build-test-results-tab&runId=9620558&resultId=100452&paneView=debug)\r\n\r\n```\r\nError message\r\nCurrent completion is not soft-selected. Expected: soft-selected\\r\\nExpected: True\\r\\nActual: False\r\n\r\nStack trace\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.ModernCompletionTestState.VB$StateMachine_28_AssertSelectedCompletionItem.MoveNext() in /_/src/EditorFeatures/TestUtilities2/Intellisense/ModernCompletionTestState.vb:line 247\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicCompletionCommandHandlerTests.VB$StateMachine_15_DotIsInserted.MoveNext() in /_/src/EditorFeatures/Test2/IntelliSense/VisualBasicCompletionCommandHandlerTests.vb:line 271\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38350","RelatedDescription":"Open issue \"VisualBasicCompletionCommandHandlerTests.DotIsInserted UnitTest fails\" (#38350)"},{"Id":"486606915","IsPullRequest":false,"CreatedAt":"2019-08-28T21:01:23","Actor":"JoeRobich","Number":"38349","RawContent":null,"Title":"VisualBasicCompletionCommandHandlerTests.TestMRUKeepsTwoRecentlyUsedItems UnitTest fails","State":"open","Body":"Multiple failures in PR validation [Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=328771&view=ms.vss-test-web.build-test-results-tab&runId=9620558&resultId=100452&paneView=debug)\r\n\r\n```\r\nError message\r\nAssert.Equal() Failure\\r\\n ↓ (pos 9)\\r\\nExpected: Ma(m:=(Ma(m:=(\\r\\nActual: M(Ma(m:=(Ma(\\r\\n ↑ (pos 9)\r\n\r\nStack trace\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.IntelliSense.VisualBasicCompletionCommandHandlerTests.VB$StateMachine_147_TestMRUKeepsTwoRecentlyUsedItems.MoveNext() in /_/src/EditorFeatures/Test2/IntelliSense/VisualBasicCompletionCommandHandlerTests.vb:line 3110\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38349","RelatedDescription":"Open issue \"VisualBasicCompletionCommandHandlerTests.TestMRUKeepsTwoRecentlyUsedItems UnitTest fails\" (#38349)"},{"Id":"486594971","IsPullRequest":true,"CreatedAt":"2019-08-28T20:33:38","Actor":"gafter","Number":"38348","RawContent":null,"Title":"Bind some syntax nodes even in error recovery scenarios.","State":"open","Body":"Fixes #27060","Url":"https://github.com/dotnet/roslyn/pull/38348","RelatedDescription":"Open PR \"Bind some syntax nodes even in error recovery scenarios.\" (#38348)"},{"Id":"486594720","IsPullRequest":false,"CreatedAt":"2019-08-28T20:33:03","Actor":"stephentoub","Number":"38347","RawContent":null,"Title":"IDE0004 doesn't trigger for method arguments to local function in same scope","State":"open","Body":"**Version Used**: \r\n3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    public static void M()\r\n    {\r\n        for (int i = 0; i < 1; i++)\r\n        {\r\n            long a = 0, b = 0;\r\n\r\n            decimal result = (decimal)a + (decimal)b; // IDE004\r\n            SameScope(result);\r\n\r\n            OuterScope((decimal)a + (decimal)b); // IDE004\r\n\r\n            SameScope((decimal)a + (decimal)b); // ## Not offered ##\r\n\r\n            static void SameScope(decimal sum) { }\r\n        }\r\n\r\n        static void OuterScope(decimal sum) { }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nIDE004 offered on all casts to decimal.\r\n\r\n**Actual Behavior**:\r\nIDE004 isn't offered on the casts in `SameScope((decimal)a + (decimal)b)`.\r\n![image](https://user-images.githubusercontent.com/2642209/63890672-7886b800-c9b1-11e9-9e2a-5fb6601498d6.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/38347","RelatedDescription":"Open issue \"IDE0004 doesn't trigger for method arguments to local function in same scope\" (#38347)"},{"Id":"486594053","IsPullRequest":false,"CreatedAt":"2019-08-28T20:31:37","Actor":"mazhou-msft","Number":"38346","RawContent":null,"Title":"Nullability infotip is not shown with <Nullable>enable</Nullable> in csproj","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 16.3 Preview 3 d16.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a C# project\r\n2. Enable nullable reference types in csproj by adding this to the csproj file.\r\n```xml\r\n<Nullable>enable</Nullable>\r\n```\r\n3. Write the following code\r\n```c#\r\nnamespace Demo\r\n{\r\n    using System;\r\n    using System.Text.Json;\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string s3 = JsonSerializer.Serialize((a: 1, b: 2, c: null as string));\r\n            Console.WriteLine(s3);\r\n                        \r\n        }\r\n    }\r\n}\r\n```\r\n4. Mouse over to the `s3` in the last line\r\n\r\n**Expected Behavior**:\r\nA tooltip window shows up, and the nullability analysis result is included.\r\n\r\n![image](https://user-images.githubusercontent.com/12908526/63890436-d1495700-c997-11e9-9264-b0858139f3cd.png)\r\n\r\n**Actual Behavior**:\r\nThe nullability analysis is not available in the tooltip; it is not available until you add `#nullable enable` to the open file.\r\n\r\n![image](https://user-images.githubusercontent.com/12908526/63890495-f938ba80-c997-11e9-8401-1a4fcf54a23a.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/38346","RelatedDescription":"Open issue \"Nullability infotip is not shown with <Nullable>enable</Nullable> in csproj\" (#38346)"},{"Id":"486590005","IsPullRequest":false,"CreatedAt":"2019-08-28T20:22:45","Actor":"mazhou-msft","Number":"38345","RawContent":null,"Title":"Code Action preview window showing the end of the content","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 16.3 preview 3 d16.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a C# project\r\n2. Move the cursor to `Program` and hit `Ctrl` + `.`\r\n3. Move the cursor to select \"Add accessibility modifier\"\r\n\r\n**Expected Behavior**:\r\nCode Action preview window shows up, also the about-to-change content is visible from the first line without the need to scroll mouse up or down\r\n\r\n![image](https://user-images.githubusercontent.com/12908526/63889907-ca6e1480-c996-11e9-8f16-3b1652160254.png)\r\n\r\n**Actual Behavior**:\r\nCode Action preview window shows up, the about-to-change content isn't visible, the content is showing the end of the changes and I need to scroll up to see the diff. \r\n\r\n![image](https://user-images.githubusercontent.com/12908526/63889858-b4f8ea80-c996-11e9-941b-163aa5c3e9c4.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/38345","RelatedDescription":"Open issue \"Code Action preview window showing the end of the content\" (#38345)"},{"Id":"486573030","IsPullRequest":false,"CreatedAt":"2019-08-28T19:42:50","Actor":"LeroyK","Number":"38344","RawContent":null,"Title":"typeof(GenericType<>) can produce invalid IL and cause BadImageFormatException at runtime","State":"open","Body":"Sometimes using ``typeof(GenericType<>)`` produces invalid IL. This will result in a BadImageFormatException at run time as soon as the method is called. The exception is probably thrown by RyuJit, because it can't process invalid IL.\r\n\r\nI'm not sure what the conditions are, but you can find the repro below. When you remove ``Console.WriteLine(\"Hello World!\");`` it produces correct IL.\r\n\r\n**Exception**\r\n```\r\nMessage: An attempt was made to load a program with an incorrect format. (0x8007000B)\r\nStack Trace:\r\n   at RoslynBug.Program.Test(Type type) in RoslynBug\\RoslynBug\\Program.cs:line 19\r\n   at RoslynBug.Program.Main(String[] args) in RoslynBug\\RoslynBug\\Program.cs:line 11\r\n```\r\n\r\n**Version Used**: \r\ndotnet-sdk-3.0.100-preview9-19414-10\r\n\r\n**Steps to Reproduce**:\r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <LangVersion>preview</LangVersion>\r\n    <Nullable>enable</Nullable>\r\n    <Deterministic>true</Deterministic>\r\n    <PathMap>$(SolutionDir)=$(SolutionName)</PathMap>\r\n    <Features>pdb-path-determinism</Features>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\r\n    <TieredCompilation>true</TieredCompilation>\r\n    <TieredCompilationQuickJit>true</TieredCompilationQuickJit>\r\n    <LinkDuringPublish>false</LinkDuringPublish>\r\n    <CrossGenDuringPublish>true</CrossGenDuringPublish>\r\n    <PublishReadyToRun>false</PublishReadyToRun>\r\n  </PropertyGroup>\r\n</Project>\r\n\r\n```\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace RoslynBug\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            Test(typeof(IDictionary<string, long>));\r\n        }\r\n\r\n        static Type[] Test(Type type)\r\n        {\r\n            var genericArguments = type.GetGenericArguments();\r\n            genericArguments[0] = typeof(Example<>).MakeGenericType(genericArguments[0]);\r\n            return genericArguments;\r\n        }\r\n\r\n        static Type[] Test2(Type type)\r\n        {\r\n            var genericArguments = type.GetGenericArguments();\r\n            genericArguments[0] = typeof(Example<>).MakeGenericType(genericArguments[0]);\r\n            return genericArguments;\r\n        }\r\n    }\r\n\r\n    public readonly struct Example<T> : IComparable<Example<T>>, IEquatable<Example<T>>\r\n        where T : notnull, IComparable<T>, IEquatable<T>\r\n    {\r\n        public readonly ulong Id;\r\n        public readonly T Value;\r\n\r\n        public Example(ulong id, T value)\r\n        {\r\n            Id = id;\r\n            Value = value;\r\n        }\r\n\r\n        public readonly int CompareTo(Example<T> other)\r\n        {\r\n            if (Id != other.Id)\r\n                return Id < other.Id ? -1 : 1;\r\n\r\n            return Comparer<T>.Default.Compare(Value, other.Value);\r\n        }\r\n\r\n        public readonly bool Equals(Example<T> other)\r\n        {\r\n            if (Id != other.Id)\r\n                return false;\r\n            if (!EqualityComparer<T>.Default.Equals(Value, other.Value))\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        public override readonly int GetHashCode() => Id.GetHashCode();\r\n        public override readonly bool Equals(object? obj) => obj is Example<T> other && Equals(other);\r\n        public override readonly string ToString() => Value.ToString() + \"/\" + Id.ToString();\r\n\r\n        public static bool operator ==(Example<T> a, Example<T> b) => a.Equals(b);\r\n        public static bool operator !=(Example<T> a, Example<T> b) => !a.Equals(b);\r\n    }\r\n}\r\n```\r\n\r\n**Expected IL**:\r\n```msil\r\n    IL_000a:  ldtoken    RoslynBug.Example`1\r\n    IL_000f:  call       class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)\r\n```\r\n\r\n**Actual IL**:\r\n```msil\r\n    IL_000a:  ldtoken    valuetype RoslynBug.Example`1<!0>\r\n    IL_000f:  call       class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/38344","RelatedDescription":"Open issue \"typeof(GenericType<>) can produce invalid IL and cause BadImageFormatException at runtime\" (#38344)"},{"Id":"486560702","IsPullRequest":false,"CreatedAt":"2019-08-28T19:14:00","Actor":"gafter","Number":"38343","RawContent":null,"Title":"Null suppression operator not skipped when searching for bindable parent","State":"open","Body":"This code in `MemberSemanticModel.GetBindableParentNode` does not handle the postfix `!` operator, which has no bound node:\r\n\r\n``` c#\r\n            // skip up past parens and ref expressions, as we have no bound nodes for them.\r\n            while (true)\r\n            {\r\n                switch (parent.Kind())\r\n                {\r\n                    case SyntaxKind.ParenthesizedExpression:\r\n                    case SyntaxKind.RefExpression:\r\n                    case SyntaxKind.RefType:\r\n                        var pp = parent.Parent;\r\n                        if (pp == null) break;\r\n                        parent = pp;\r\n                        break;\r\n                    default:\r\n                        goto foundParent;\r\n                }\r\n            }\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/38343","RelatedDescription":"Open issue \"Null suppression operator not skipped when searching for bindable parent\" (#38343)"},{"Id":"486541152","IsPullRequest":false,"CreatedAt":"2019-08-28T18:29:17","Actor":"jaredpar","Number":"38342","RawContent":null,"Title":"vbc is launching during build","State":"open","Body":"On a clean enlistment of roslyn running build will cause vbc.exe to be launched for compilation. This is unexpected as all compilations should be going through VBCSCompiler. \r\n\r\nIt is possible, even with a \"bug free\" implementation of VBCSCompiler, for this to happen. The underlying named pipe implementation can fail in certain cases which would cause the build task to fall back to vbc / csc for compilation. That should be a fairly rare event though and not generally repeatable. In this situation though I'm seeing vbc get launched in a repeatable fashion. \r\n\r\nEasiest way to view this is set \"Image File Executable Options\" to launch windbg whenever vbc.exe is started. Run build after doing that and you will see it launched for at least VBSyntaxGenerator.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38342","RelatedDescription":"Open issue \"vbc is launching during build\" (#38342)"},{"Id":"486490533","IsPullRequest":true,"CreatedAt":"2019-08-28T16:40:02","Actor":"Therzok","Number":"38341","RawContent":null,"Title":"Remove System.Runtime.Loader hack","State":"open","Body":"Microsoft.CodeAnalysis.Scripting now targets NS2.0, so the custom package is no longer needed.\r\nShould fix a composition error in VSMac, due to the fact that we don't ship the dll from this nuget","Url":"https://github.com/dotnet/roslyn/pull/38341","RelatedDescription":"Open PR \"Remove System.Runtime.Loader hack\" (#38341)"},{"Id":"486430638","IsPullRequest":false,"CreatedAt":"2019-08-28T14:48:41","Actor":"stephentoub","Number":"38339","RawContent":null,"Title":"Nullable warnings for default(T) but not default","State":"open","Body":"**Version Used**: \r\n3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\n#nullable enable\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n}\r\n\r\nclass C<T>\r\n{\r\n    [AllowNull]\r\n    internal T _f1 = default(T);\r\n    [AllowNull]\r\n    internal T _f2 = default;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warnings.\r\n\r\n**Actual Behavior**:\r\nWarning on the `default(T)`.\r\n```\r\nwarning CS8653: A default expression introduces a null value when 'T' is a non-nullable reference type.\r\n```\r\n\r\ncc: @jcouv, @cston","Url":"https://github.com/dotnet/roslyn/issues/38339","RelatedDescription":"Open issue \"Nullable warnings for default(T) but not default\" (#38339)"},{"Id":"486393425","IsPullRequest":true,"CreatedAt":"2019-08-28T13:45:40","Actor":"NextTurn","Number":"38338","RawContent":null,"Title":"Fix skipped test","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38338","RelatedDescription":"Open PR \"Fix skipped test\" (#38338)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"486553038","IsPullRequest":true,"CreatedAt":"2019-08-29T00:24:49","Actor":"Dotnet-GitSync-Bot","Number":"7746","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7746","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7746)"},{"Id":"486646291","IsPullRequest":true,"CreatedAt":"2019-08-28T22:50:24","Actor":"nattress","Number":"7750","RawContent":null,"Title":"Remove SectionStartNode mechanism","State":"open","Body":"Symbols for the beginning of each PE section were added as part of https://github.com/dotnet/corert/commit/b34583dc66abb2a74e0d6dd4ec937294cadc0e76#diff-2559cd80eabcbd275c059bd09c5cc961. This is no longer needed as RVA field references now just use standard relocations to `CopiedFieldRvaNode` objects and don't need any special case logic.","Url":"https://github.com/dotnet/corert/pull/7750","RelatedDescription":"Open PR \"Remove SectionStartNode mechanism\" (#7750)"},{"Id":"486639383","IsPullRequest":false,"CreatedAt":"2019-08-28T22:28:17","Actor":"cshung","Number":"7749","RawContent":null,"Title":"[CPAOT] Make sure any methods marked as MethodImpl.AggressiveOptimization is not compiled even if it is a dependency of some other methods.","State":"open","Body":"@trylek pointed out offline that #7748 might be incomplete. In particular, a method marked as MethodImpl.AggressiveInlining might not initially be rooted, but it could be added to the graph as the dependency of another method (e.g. it is being called), so we still end up compiling them.","Url":"https://github.com/dotnet/corert/issues/7749","RelatedDescription":"Open issue \"[CPAOT] Make sure any methods marked as MethodImpl.AggressiveOptimization is not compiled even if it is a dependency of some other methods.\" (#7749)"},{"Id":"486589868","IsPullRequest":true,"CreatedAt":"2019-08-28T21:46:24","Actor":"cshung","Number":"7748","RawContent":null,"Title":"[CPAOT] SkipAggressiveMethod - Avoid compiling code marked with MethodImplOptions.AggressiveOptimization","State":"closed","Body":"Crossgen is currently skipping these methods [here](https://github.com/dotnet/coreclr/blob/f07c13cadc378649f10d024bb8a40a3878fa661f/src/zap/zapinfo.cpp#L448), perhaps we should do the same.\r\n","Url":"https://github.com/dotnet/corert/pull/7748","RelatedDescription":"Closed or merged PR \"[CPAOT] SkipAggressiveMethod - Avoid compiling code marked with MethodImplOptions.AggressiveOptimization\" (#7748)"},{"Id":"484241646","IsPullRequest":true,"CreatedAt":"2019-08-28T20:59:21","Actor":"nattress","Number":"7723","RawContent":null,"Title":"Cherry pick MSIL sections into output images","State":"closed","Body":"Emit CorHeader, metadata, IL method bodies using DependencyNodes so that RVAs can be adjusted more naturally through our reloc fixup mechanism. This has two main benefits:\r\n\r\n* Removes existing R2R tables and compiled code in cases where already\r\ncrossgen'd assemblies are re-compiled with Crossgen2.\r\n\r\n* Required for composite R2R images which will contain many component\r\nassembly Cor headers, metadata, MSIL sections.\r\n\r\nI am still addressing test failures with the CoreCLR test suite but the main changes are ready to review.\r\n\r\n@trylek It looks like RVA fields are the only thing which use the `SectionStartNode` mechanism added in https://github.com/dotnet/corert/commit/b34583dc66abb2a74e0d6dd4ec937294cadc0e76. We shouldn't need this now but I wanted to check with you before I pull it out in case you had plans for it.\r\n","Url":"https://github.com/dotnet/corert/pull/7723","RelatedDescription":"Closed or merged PR \"Cherry pick MSIL sections into output images\" (#7723)"},{"Id":"486564549","IsPullRequest":true,"CreatedAt":"2019-08-28T20:56:23","Actor":"MichalStrehovsky","Number":"7747","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"We'll have to take another update once dotnet/coreclr#26395 merges, but I suspect some more people are going to hit this JitInterface change.","Url":"https://github.com/dotnet/corert/pull/7747","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#7747)"},{"Id":"486532435","IsPullRequest":true,"CreatedAt":"2019-08-28T19:41:56","Actor":"trylek","Number":"7745","RawContent":null,"Title":"Minor reliability improvements in SuperILC","State":"closed","Body":"In the Pri1 test file, some of the hung tests ignore KillProcess.\r\nSome time ago I proposed leveraging Mark Russinovich's pskill tool\r\nwhich is known to have better success rate in killing weirdly hung\r\nprocesses thanks to leveraging intimage kernel knowledge by\r\nexplicitly closing various handles and such; Michal and JanK were\r\nhowever not too enthusiastic about making test build depend on\r\nsuch a technically 'external' tool. For now I have at least hotfixed\r\nthe code to drop the Process in question and move on.\r\n\r\nOn top of that, it turns out that my implementation of process\r\nexit signaling using an AutoResetEvent was subject to a race\r\ncondition - as the MSDN page for AutoResetEvent explicitly states,\r\nwhen two threads set such an event close to each other, the master\r\nthread only gets signaled once. I fixed this by calling WaitOne\r\nwith an explicit timeout so that we don't hang the parallel runner\r\nloop due to a lost signal.\r\n\r\nI have also improved ParallelRunner to show the number of failures\r\nas part of the progress message during each build step. The aim is\r\nto improve turnaround when running large test suites - one of\r\nSuperIlc downsides is that the various analytic and statistic\r\nsummaries only get produced at the very end of its execution. The\r\nnumber of failures in the progress message can be used for early\r\nmonitoring as to whether everything proceeds as expected and we're\r\nnot wasting two hours waiting on a completely broken test run.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7745","RelatedDescription":"Closed or merged PR \"Minor reliability improvements in SuperILC\" (#7745)"},{"Id":"485926047","IsPullRequest":true,"CreatedAt":"2019-08-28T19:00:08","Actor":"MichalStrehovsky","Number":"7739","RawContent":null,"Title":"Separate ReadyToRun targeting compiler","State":"closed","Body":"Creates `crossgen2` that has the ready to run specific bits.\r\n\r\nSending it out to get some eyes on this.\r\n\r\nCI will not work because we need to redirect the ready to run legs to crossgen2. Hence the WIP tag.\r\n\r\nThe TODO-REFACTOR comments are for a subsequent pull request because they would touch a bunch of other places and I don't enjoy resolving merge conflicts in big commits.","Url":"https://github.com/dotnet/corert/pull/7739","RelatedDescription":"Closed or merged PR \"Separate ReadyToRun targeting compiler\" (#7739)"},{"Id":"486066464","IsPullRequest":true,"CreatedAt":"2019-08-28T14:18:10","Actor":"trylek","Number":"7742","RawContent":null,"Title":"Fix method token resolution for unboxing thunks","State":"closed","Body":"This change fixes the largest compilation failure bucket caused by\r\nJIT passing 0 as the \"pResolvedToken.token\" to the JIT interface.\r\nThe problem was caused by the fact that, when in release mode we\r\ndevirtualized a method on a value type, we emitted an unboxing thunk\r\nas part of the process. When JIT later called\r\ngetMethodDefFromMethod to get the token for the method, we returned\r\n0 because the method was not properly handling unboxing thunks.\r\n\r\nWhile I was there, I also fixed an imprecision in\r\nDevirtualizationManager I noticed while reviewing Michal's\r\npreparatory change for porting CPAOT code to the CoreCLR repo: in\r\nlarge version bubble mode, we should generally query \"VersionsWith\"\r\nrather than \"Contains\", otherwise we lose perf benefits of\r\ncross-module devirtualization within the large version bubble.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7742","RelatedDescription":"Closed or merged PR \"Fix method token resolution for unboxing thunks\" (#7742)"},{"Id":"486141459","IsPullRequest":true,"CreatedAt":"2019-08-28T12:22:34","Actor":"Dotnet-GitSync-Bot","Number":"7743","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @eerhardt","Url":"https://github.com/dotnet/corert/pull/7743","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7743)"},{"Id":"486317542","IsPullRequest":true,"CreatedAt":"2019-08-28T12:21:42","Actor":"janvorli","Number":"7744","RawContent":null,"Title":"Fix RhpCallFilterFunclet stack alignment on ARM","State":"closed","Body":"The number of registers pushed to the stack in the RhpCallFilterFunclet prolog on ARM made the stack misaligned (it needs to be aligned on 8 bytes), so the filter funclet and its transitive callees all had misaligned stack. While in many cases this doesn't cause issues, there are cases where it can cause runtime failures or crashes. For example, when the exception filter call chain invokes a varargs function with certain combination of parameter sizes when some of the arguments are supposed to be 8 byte aligned.\r\n\r\nThis change fixes the problem by pushing one more register as a padding in the RhpCallFilterFunclet (and popping it in the epilog).","Url":"https://github.com/dotnet/corert/pull/7744","RelatedDescription":"Closed or merged PR \"Fix RhpCallFilterFunclet stack alignment on ARM\" (#7744)"},{"Id":"486040729","IsPullRequest":true,"CreatedAt":"2019-08-27T21:29:07","Actor":"Dotnet-GitSync-Bot","Number":"7741","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7741","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7741)"},{"Id":"486027692","IsPullRequest":false,"CreatedAt":"2019-08-27T20:50:59","Actor":"cshung","Number":"7740","RawContent":null,"Title":"[CPAOT] Make sure constructing a delegate from a function pointer to an external method works.","State":"open","Body":"In #7724, I have made a change to ensure we have a `PrecodeMethodImport` for local methods, we should probably do the same for external methods to make sure the same scenario works there.","Url":"https://github.com/dotnet/corert/issues/7740","RelatedDescription":"Open issue \"[CPAOT] Make sure constructing a delegate from a function pointer to an external method works.\" (#7740)"},{"Id":"484253378","IsPullRequest":true,"CreatedAt":"2019-08-27T20:41:57","Actor":"cshung","Number":"7724","RawContent":null,"Title":"Emit Fixup for local method import","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7724","RelatedDescription":"Closed or merged PR \"Emit Fixup for local method import\" (#7724)"},{"Id":"485528440","IsPullRequest":true,"CreatedAt":"2019-08-27T05:31:50","Actor":"Dotnet-GitSync-Bot","Number":"7738","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corert/pull/7738","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7738)"},{"Id":"485400634","IsPullRequest":true,"CreatedAt":"2019-08-26T20:36:35","Actor":"nattress","Number":"7737","RawContent":null,"Title":"Fix R2R test issues file to work on Unix","State":"closed","Body":"The CI was silently not running CoreCLR tests in R2R mode due to all tests getting filtered out.\r\n\r\n* Use .* instead of .cmd so test .sh files will be discovered on Unix\r\n* Fix messed up casing in R2R test filter file","Url":"https://github.com/dotnet/corert/pull/7737","RelatedDescription":"Closed or merged PR \"Fix R2R test issues file to work on Unix\" (#7737)"},{"Id":"485370126","IsPullRequest":true,"CreatedAt":"2019-08-26T19:29:13","Actor":"Dotnet-GitSync-Bot","Number":"7736","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7736","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7736)"},{"Id":"485320051","IsPullRequest":true,"CreatedAt":"2019-08-26T19:05:07","Actor":"jkotas","Number":"7734","RawContent":null,"Title":"Delete unnecessary using Internal.Runtime.Augments","State":"closed","Body":"Helps with potential sharing with CoreCLR - Internal.Runtime.Augments namespace does not exist in CoreCLR.","Url":"https://github.com/dotnet/corert/pull/7734","RelatedDescription":"Closed or merged PR \"Delete unnecessary using Internal.Runtime.Augments\" (#7734)"},{"Id":"485327257","IsPullRequest":true,"CreatedAt":"2019-08-26T18:03:38","Actor":"Dotnet-GitSync-Bot","Number":"7735","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @VSadov","Url":"https://github.com/dotnet/corert/pull/7735","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7735)"},{"Id":"484948906","IsPullRequest":true,"CreatedAt":"2019-08-26T09:43:27","Actor":"MichalStrehovsky","Number":"7728","RawContent":null,"Title":"Use DebugType to decide whether to generate debug info","State":"closed","Body":"Seems like both `DebugSymbols` and `DebugType` play a role. `DebugSymbols` is not defined in release builds for some SDKs.","Url":"https://github.com/dotnet/corert/pull/7728","RelatedDescription":"Closed or merged PR \"Use DebugType to decide whether to generate debug info\" (#7728)"},{"Id":"484963667","IsPullRequest":true,"CreatedAt":"2019-08-26T00:13:10","Actor":"Dotnet-GitSync-Bot","Number":"7733","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @NextTurn @jkotas","Url":"https://github.com/dotnet/corert/pull/7733","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7733)"},{"Id":"484948950","IsPullRequest":true,"CreatedAt":"2019-08-25T18:27:00","Actor":"MichalStrehovsky","Number":"7730","RawContent":null,"Title":"Fix copypaste bug in MethodNameFormatter","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7730","RelatedDescription":"Closed or merged PR \"Fix copypaste bug in MethodNameFormatter\" (#7730)"},{"Id":"484948977","IsPullRequest":true,"CreatedAt":"2019-08-25T18:25:04","Actor":"MichalStrehovsky","Number":"7731","RawContent":null,"Title":"Update TraceEvent NuGet package reference","State":"closed","Body":"It never actually worked for me with 1.0.41...","Url":"https://github.com/dotnet/corert/pull/7731","RelatedDescription":"Closed or merged PR \"Update TraceEvent NuGet package reference\" (#7731)"},{"Id":"484948935","IsPullRequest":true,"CreatedAt":"2019-08-25T18:24:06","Actor":"MichalStrehovsky","Number":"7729","RawContent":null,"Title":"Use BIT64 instead of WIN64","State":"closed","Body":"We don't define WIN64.\r\n\r\nThe EETypeCreator occurence was fun to debug. Kind of wish I hit it for the Assignability occurence instead...","Url":"https://github.com/dotnet/corert/pull/7729","RelatedDescription":"Closed or merged PR \"Use BIT64 instead of WIN64\" (#7729)"},{"Id":"484949276","IsPullRequest":true,"CreatedAt":"2019-08-25T16:24:06","Actor":"MichalStrehovsky","Number":"7732","RawContent":null,"Title":"Add DynamicGenerics test","State":"open","Body":"The commits mostly make sense. The test already found some bugs (see the other pull requests I submitted today). We won't be able to touch the type loader codebase or the dependency analysis within the compiler without this test.","Url":"https://github.com/dotnet/corert/pull/7732","RelatedDescription":"Open PR \"Add DynamicGenerics test\" (#7732)"},{"Id":"484617981","IsPullRequest":false,"CreatedAt":"2019-08-23T16:40:13","Actor":"jkotas","Number":"7727","RawContent":null,"Title":"CPAOT code fails under GCStress","State":"open","Body":"Repro:\r\n\r\n```\r\nusing System;\r\nusing System.Numerics;\r\n\r\nstruct MyValueType\r\n{\r\n    object o;\r\n}\r\n\r\nabstract class Test\r\n{\r\n    public abstract void M(MyValueType v);\r\n\r\n    static void Main()\r\n    {\r\n        new Concrete().M(default);\r\n    }\r\n}\r\n\r\nclass Concrete : Test\r\n{\r\n    public override void M(MyValueType v)\r\n    {\r\n        new Vector<double>().ToString();\r\n    }\r\n}\r\n```\r\n\r\n1. Compile `csc test.cs`\r\n2. Generate native code for test.exe using cpaot\r\n3. Set `set COMPlus_GCStress=1` and run it on checked CoreCLR runtime.\r\n\r\nResult:\r\n\r\nWithout `-O`:\r\n\r\n```\r\nAssert failure(PID 27868 [0x00006cdc], Thread: 34200 [0x8598]): SanityCheck()\r\n\r\nCORECLR! MethodTable::Validate + 0x3F (0x00007ff8`426f3813)\r\nCORECLR! Object::ValidateInner + 0x127 (0x00007ff8`42607c97)\r\nCORECLR! Object::Validate + 0x13A (0x00007ff8`42607a4a)\r\nCORECLR! GcInfoDecoder::ReportStackSlotToGC + 0x128 (0x00007ff8`42a233e0)\r\nCORECLR! GcInfoDecoder::ReportSlotToGC + 0x168 (0x00007ff8`42a2329c)\r\nCORECLR! GcInfoDecoder::ReportUntrackedSlots + 0x69 (0x00007ff8`42a235a5)\r\nCORECLR! GcInfoDecoder::EnumerateLiveSlots + 0xD23 (0x00007ff8`42a224a3)\r\nCORECLR! EECodeManager::EnumGcRefs + 0x39B (0x00007ff8`4268656b)\r\nCORECLR! GcStackCrawlCallBack + 0x2CD (0x00007ff8`42940a1d)\r\nCORECLR! Thread::MakeStackwalkerCallback + 0x52 (0x00007ff8`423b0932)\r\n    File: D:\\coreclr\\src\\vm\\methodtable.cpp Line: 9902\r\n    Image: D:\\coreclr\\bin\\Product\\Windows_NT.x64.Checked\\CoreRun.exe\r\n```\r\n\r\nWith `-O`:\r\n\r\n```\r\nAssert failure(PID 20768 [0x00005120], Thread: 32368 [0x7e70]): !th.IsNull()\r\n\r\nCORECLR! SigPointer::GetTypeHandleThrowing + 0xB8A (0x00007ff8`3e98c9f2)\r\nCORECLR! SigPointer::PeekElemTypeNormalized + 0x1FF (0x00007ff8`3e9930f3)\r\nCORECLR! ArgIteratorTemplate<ArgIteratorBase>::GetNextOffset + 0xFB (0x00007ff8`3e63ba33)\r\nCORECLR! TransitionFrame::PromoteCallerStackHelper + 0x188 (0x00007ff8`3e8e06ec)\r\nCORECLR! TransitionFrame::PromoteCallerStack + 0x17F (0x00007ff8`3e8e054b)\r\nCORECLR! GcStackCrawlCallBack + 0x37A (0x00007ff8`3eca0aca)\r\nCORECLR! Thread::MakeStackwalkerCallback + 0x52 (0x00007ff8`3e710932)\r\nCORECLR! Thread::StackWalkFramesEx + 0x17A (0x00007ff8`3e71297e)\r\nCORECLR! Thread::StackWalkFrames + 0x184 (0x00007ff8`3e712764)\r\nCORECLR! ScanStackRoots + 0x284 (0x00007ff8`3ee30158)\r\n    File: D:\\coreclr\\src\\vm\\siginfo.cpp Line: 1111\r\n    Image: D:\\coreclr\\bin\\Product\\Windows_NT.x64.Checked\\CoreRun.exe\r\n```","Url":"https://github.com/dotnet/corert/issues/7727","RelatedDescription":"Open issue \"CPAOT code fails under GCStress\" (#7727)"},{"Id":"484571391","IsPullRequest":true,"CreatedAt":"2019-08-23T16:05:44","Actor":"trylek","Number":"7726","RawContent":null,"Title":"CPAOT: implement CORINFO_HELP_GETREFANY by throwing RequiresRuntimeJIT","State":"closed","Body":"This change fixes about 180 ILC failures in Pri#1 tests.","Url":"https://github.com/dotnet/corert/pull/7726","RelatedDescription":"Closed or merged PR \"CPAOT: implement CORINFO_HELP_GETREFANY by throwing RequiresRuntimeJIT\" (#7726)"},{"Id":"484394876","IsPullRequest":true,"CreatedAt":"2019-08-23T09:46:56","Actor":"Dotnet-GitSync-Bot","Number":"7725","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corert/pull/7725","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7725)"},{"Id":"484111703","IsPullRequest":true,"CreatedAt":"2019-08-23T08:16:22","Actor":"Dotnet-GitSync-Bot","Number":"7721","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/corert/pull/7721","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7721)"},{"Id":"484223047","IsPullRequest":true,"CreatedAt":"2019-08-23T08:15:52","Actor":"nattress","Number":"7722","RawContent":null,"Title":"Remove CoreCLR test time estimation","State":"closed","Body":"During XUnit wrapper generation, which can take a while on a slow machine, the CoreCLR test harness shows a countdown timer which starts at 5 minutes, polling for the sub-process to quit. `proc.poll()` is unreliable and we end up always waiting 5 minutes on Windows despite the wrappers building in about 30 seconds.\r\n\r\nThis should save us about 4 minutes in our CI (the CI detection also broke after Jenkins was retired).","Url":"https://github.com/dotnet/corert/pull/7722","RelatedDescription":"Closed or merged PR \"Remove CoreCLR test time estimation\" (#7722)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"486639844","IsPullRequest":false,"CreatedAt":"2019-08-28T22:29:49","Actor":"olgaark","Number":"3585","RawContent":null,"Title":"Microsoft.NET.Build.Extensions.Tasks.dll\tshould not be loaded in devenv projecc during reference resolution for native vc projects","State":"open","Body":"The problem is found while investigating \r\nVS Bug 973252: Perf: CPlusPlus_DDRIT.0900.Close Solution regressed VM_AdjustedImagesInMemory_Total_devenv by 2.000 Count (0.5%). Baseline 29226.70\r\n\r\nMicrosoft.NET.Build.Extensions.Tasks.dll is loaded by _HandlePackageFileConflicts target during\r\n\r\nTarget Name=ResolveAssemblyReferences Project=ConsoleApplication1.vcxproj  note that there is no assembly references in the native vc project\r\n            …\r\n            Target Name=_HandlePackageFileConflicts Project=ConsoleApplication1.vcxproj\r\n\r\nThe target is implemented here:\r\n\r\nf:\\Visual Studio 16 Master\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.ConflictResolution.targets\r\n============================================================================================================================================\r\n-->\r\n  <UsingTask TaskName=\"ResolvePackageFileConflicts\" AssemblyFile=\"$(MicrosoftNETBuildExtensionsTasksAssembly)\" />\r\n  <Target Name=\"_HandlePackageFileConflicts\" BeforeTargets=\"$(_HandlePackageFileConflictsBefore)\" AfterTargets=\"$(_HandlePackageFileConflictsAfter)\"  \r\nDependsOnTargets=\"GetReferenceAssemblyPaths\">\r\n    <ResolvePackageFileConflicts References=\"@(Reference)\" ReferenceCopyLocalPaths=\"@(ReferenceCopyLocalPaths)\" PlatformManifests=\"@(PackageConflictPlatformManifests)\" TargetFrameworkDirectories=\"$(TargetFrameworkDirectory)\" PackageOverrides=\"@(PackageConflictOverrides)\" PreferredPackages=\"$(PackageConflictPreferredPackages)\">\r\n      <Output TaskParameter=\"ReferencesWithoutConflicts\" ItemName=\"_ReferencesWithoutConflicts\" />\r\n      <Output TaskParameter=\"ReferenceCopyLocalPathsWithoutConflicts\" ItemName=\"_ReferenceCopyLocalPathsWithoutConflicts\" />\r\n      <Output TaskParameter=\"Conflicts\" ItemName=\"_ConflictPackageFiles\" />\r\n    </ResolvePackageFileConflicts>\r\n\r\nIs this target doing something applicable to vc projects? If not, please either disable it for vcxproj or add a condition so cpp targets can disable it.\r\nAt least, please add a condition there for empty @(Reference) so the task dll is not loaded in this case.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3585","RelatedDescription":"Open issue \"Microsoft.NET.Build.Extensions.Tasks.dll\tshould not be loaded in devenv projecc during reference resolution for native vc projects\" (#3585)"},{"Id":"486583658","IsPullRequest":true,"CreatedAt":"2019-08-28T20:07:53","Actor":"dsplaisted","Number":"3584","RawContent":null,"Title":"Fix symbols for tasks","State":"open","Body":"Create PDBs for tasks and put them in the directory where Arcade will upload them\r\n\r\nFixes #3581","Url":"https://github.com/dotnet/sdk/pull/3584","RelatedDescription":"Open PR \"Fix symbols for tasks\" (#3584)"},{"Id":"486353347","IsPullRequest":true,"CreatedAt":"2019-08-28T12:32:29","Actor":"v-zbsail","Number":"3583","RawContent":null,"Title":"LOC CHECKIN | dotnet/sdk release/3.0.1xx | 20190828","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3583","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/sdk release/3.0.1xx | 20190828\" (#3583)"},{"Id":"486095529","IsPullRequest":false,"CreatedAt":"2019-08-28T00:12:21","Actor":"dsplaisted","Number":"3582","RawContent":null,"Title":"RID-specific self-contained .NET Core 3 app with dependency on Microsoft.NETCore.App 2.0.0 fails to run","State":"open","Body":"# Repro\r\n\r\nBuild and run the following project:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n    <SelfContained>false</SelfContained>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETCore.App\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n# Expected\r\n\r\nProject runs successfully\r\n\r\n# Actual\r\n\r\nProject fails to run with error messages such as the following:\r\n\r\n- > A fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0-preview9.19416.11'.\r\n- > The specified framework 'Microsoft.NETCore.App', version '3.0.0-preview9-19409-16' was not found.\r\n\r\nThe output folder also includes the following files, which come from the Microsoft.NETCore.App 2.0.0 package closure:\r\n\r\n- apphost.exe\r\n- hostfxr.dll\r\n- hostpolicy.dll\r\n- System.Private.CoreLib.dll\r\n\r\n# Details\r\n\r\nNuGet/Home#7344 would fix this.  Alternatively, we could try to use conflict resolution to exclude these extra assets.  That would probably require updating the platform manifest in the targeting pack.","Url":"https://github.com/dotnet/sdk/issues/3582","RelatedDescription":"Open issue \"RID-specific self-contained .NET Core 3 app with dependency on Microsoft.NETCore.App 2.0.0 fails to run\" (#3582)"},{"Id":"485985392","IsPullRequest":false,"CreatedAt":"2019-08-27T19:14:13","Actor":"livarcocc","Number":"3581","RawContent":null,"Title":"symbols packages being generated empty","State":"open","Body":"We have turned off symbols package generation for now on this repo.\r\n\r\nThey were generating empty nupkgs and conflicting with the actual nupkgs when the sign tool was repackaging signing assemblies.\r\n\r\nThe fact that symbols are empty here are causing symbol checks to fail on VS insertions.","Url":"https://github.com/dotnet/sdk/issues/3581","RelatedDescription":"Open issue \"symbols packages being generated empty\" (#3581)"},{"Id":"485513070","IsPullRequest":true,"CreatedAt":"2019-08-27T00:17:39","Actor":"JohnTortugo","Number":"3580","RawContent":null,"Title":"Disable symbol creation for now","State":"closed","Body":"The symbol packages getting created were causing conflicts in SignToolTask. Disabling the symbol creation until the proper adjustments are made to prevent inadvertently signing symbol packages.\r\n\r\n/cc @riarenas ","Url":"https://github.com/dotnet/sdk/pull/3580","RelatedDescription":"Closed or merged PR \"Disable symbol creation for now\" (#3580)"},{"Id":"485478158","IsPullRequest":true,"CreatedAt":"2019-08-26T23:35:07","Actor":"JohnTortugo","Number":"3579","RawContent":null,"Title":"Use SignTool with more logging","State":"closed","Body":"This new SignTool will show more information about what's repacking\r\n\r\nRelates to: https://github.com/dotnet/core-eng/issues/7569","Url":"https://github.com/dotnet/sdk/pull/3579","RelatedDescription":"Closed or merged PR \"Use SignTool with more logging\" (#3579)"},{"Id":"485304558","IsPullRequest":true,"CreatedAt":"2019-08-26T15:47:11","Actor":"mmitche","Number":"3578","RawContent":null,"Title":"[release/3.0.100-preview9] add PublishUsingPipelines parameter to publish-build-assets template …","State":"closed","Body":"…(#3569)","Url":"https://github.com/dotnet/sdk/pull/3578","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] add PublishUsingPipelines parameter to publish-build-assets template …\" (#3578)"},{"Id":"484653224","IsPullRequest":true,"CreatedAt":"2019-08-26T15:42:10","Actor":"riarenas","Number":"3569","RawContent":null,"Title":"Pass PublishUsingPipelines parameter to publish-build-assets template","State":"closed","Body":"**Description**\r\n\r\nhttps://github.com/dotnet/core-eng/issues/7561\r\nWithout the property, the build gets its channel assigned as soon as it publishes to BAR, and may trigger dependency updates before the packages are available in the feeds.\r\n\r\nInternal test build of the change: https://dev.azure.com/dnceng/internal/_build/results?buildId=322295&view=results\r\n\r\n\r\n**Customer Impact**\r\nInfra-structure change.\r\n\r\n**Regression?**\r\nNo.\r\n\r\n**Risk**\r\nLow","Url":"https://github.com/dotnet/sdk/pull/3569","RelatedDescription":"Closed or merged PR \"Pass PublishUsingPipelines parameter to publish-build-assets template\" (#3569)"},{"Id":"485211681","IsPullRequest":true,"CreatedAt":"2019-08-26T12:30:48","Actor":"dotnet-maestro[bot]","Number":"3577","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190827.13\r\n- **Date Produced**: 8/28/2019 7:11 AM\r\n- **Commit**: 1c0f7e38cc371a298353a459c53138f23ba40a2a\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19427-13\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3577","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3577)"},{"Id":"483394306","IsPullRequest":true,"CreatedAt":"2019-08-25T15:44:39","Actor":"dotnet-maestro[bot]","Number":"3556","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.11\r\n- **Date Produced**: 8/23/2019 10:56 PM\r\n- **Commit**: abecfcd748e6b8850e1111184bf34c93e9277f90\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19423-11\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3556","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3556)"},{"Id":"484749883","IsPullRequest":true,"CreatedAt":"2019-08-24T01:01:14","Actor":"dotnet-maestro[bot]","Number":"3576","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.09\r\n- **Date Produced**: 8/23/2019 8:02 PM\r\n- **Commit**: 2be172345a420387413bab7ce9053a52624c4461\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19423-09\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3576","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3576)"},{"Id":"484701489","IsPullRequest":true,"CreatedAt":"2019-08-23T23:20:56","Actor":"wli3","Number":"3572","RawContent":null,"Title":"Correct branding","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3572","RelatedDescription":"Closed or merged PR \"Correct branding\" (#3572)"},{"Id":"484742881","IsPullRequest":true,"CreatedAt":"2019-08-23T23:03:41","Actor":"livarcocc","Number":"3575","RawContent":null,"Title":"Skip tests in official builds. We have no reason to run them again si…","State":"open","Body":"…nce they already ran on CI. This should speed up builds out of the sdk repo.","Url":"https://github.com/dotnet/sdk/pull/3575","RelatedDescription":"Open PR \"Skip tests in official builds. We have no reason to run them again si…\" (#3575)"},{"Id":"484739215","IsPullRequest":true,"CreatedAt":"2019-08-23T22:45:47","Actor":"dsplaisted","Number":"3574","RawContent":null,"Title":"Update a test to skip running for target frameworks not supported by current OS","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3574","RelatedDescription":"Open PR \"Update a test to skip running for target frameworks not supported by current OS\" (#3574)"},{"Id":"484673467","IsPullRequest":true,"CreatedAt":"2019-08-23T22:14:39","Actor":"JohnTortugo","Number":"3570","RawContent":null,"Title":"Don't validate signature for resources files","State":"closed","Body":"Relates to: https://github.com/dotnet/core-eng/issues/7569\r\n\r\nIndependent of the outcome of the current signing issues I believe these files aren't required to be signed.\r\n\r\n/cc @riarenas ","Url":"https://github.com/dotnet/sdk/pull/3570","RelatedDescription":"Closed or merged PR \"Don't validate signature for resources files\" (#3570)"},{"Id":"484721294","IsPullRequest":true,"CreatedAt":"2019-08-23T22:01:01","Actor":"dsplaisted","Number":"3573","RawContent":null,"Title":"Always gather logs","State":"closed","Body":"Even if build succeeded, so we can debug things like signing failures.","Url":"https://github.com/dotnet/sdk/pull/3573","RelatedDescription":"Closed or merged PR \"Always gather logs\" (#3573)"},{"Id":"484693602","IsPullRequest":true,"CreatedAt":"2019-08-23T21:54:37","Actor":"dotnet-maestro[bot]","Number":"3571","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from nuget/nuget.client","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:67c23412-2e21-4d69-a886-08d7219800a1)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Build**: 5.3.0.6192\r\n- **Date Produced**: 8/23/2019 7:15 PM\r\n- **Commit**: bb60d6720d24890b8f3e071e70d27ea0f2bef57e\r\n- **Branch**: refs/heads/dev\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.3.0-rtm.6192\r\n\r\n[marker]: <> (End:67c23412-2e21-4d69-a886-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3571","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from nuget/nuget.client\" (#3571)"},{"Id":"484345588","IsPullRequest":false,"CreatedAt":"2019-08-23T17:03:32","Actor":"Sodoshi","Number":"3568","RawContent":null,"Title":"Using aspnetcore3.0 in WindowsDesktop SDK","State":"closed","Body":"Because of the changes to the HostBuilder in aspnetcore3 I want to update my embedded Kestrel, but if I switch to the WindowsDesktop SDK its not available, only aspnetcore 2.2. Is there any way to reference aspnetcore 3? (I'm using Kestrel as a TCP server in my Windows forms app)","Url":"https://github.com/dotnet/sdk/issues/3568","RelatedDescription":"Closed issue \"Using aspnetcore3.0 in WindowsDesktop SDK\" (#3568)"},{"Id":"483670137","IsPullRequest":true,"CreatedAt":"2019-08-23T03:41:57","Actor":"livarcocc","Number":"3559","RawContent":null,"Title":"Updating nuget version and adding it to Version.Details.xml for DARC updates.","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3559","RelatedDescription":"Closed or merged PR \"Updating nuget version and adding it to Version.Details.xml for DARC updates.\" (#3559)"},{"Id":"484269593","IsPullRequest":true,"CreatedAt":"2019-08-23T00:06:18","Actor":"dotnet-bot","Number":"3567","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3567","RelatedDescription":"Open PR \"Merge release/3.1.1xx to master\" (#3567)"},{"Id":"484269575","IsPullRequest":true,"CreatedAt":"2019-08-23T00:06:11","Actor":"dotnet-bot","Number":"3566","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3566","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3566)"},{"Id":"484269561","IsPullRequest":true,"CreatedAt":"2019-08-23T00:06:04","Actor":"dotnet-bot","Number":"3565","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3565","RelatedDescription":"Open PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3565)"},{"Id":"484269532","IsPullRequest":true,"CreatedAt":"2019-08-23T00:05:56","Actor":"dotnet-bot","Number":"3564","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.100-preview9","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.100-preview9.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.100-preview9\ngit reset --hard upstream/release/3.0.100-preview9\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.100-preview9 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3564","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.100-preview9\" (#3564)"},{"Id":"484159126","IsPullRequest":false,"CreatedAt":"2019-08-22T19:00:07","Actor":"kapilepatel","Number":"3563","RawContent":null,"Title":".NET Core SDK 2.2.108 does not work with Visual Studio 2017 version 15.9.13","State":"open","Body":".NET Core SDK 2.2.108 does not work with Visual Studio 2017 version 15.9.13\r\n\r\nSolved the issue by uninstalling all .NET Core versions and fresh install of .NET Core SDK Version 2.2.107\r\nFind all versions here\r\nhttps://dotnet.microsoft.com/download/dotnet-core/2.2","Url":"https://github.com/dotnet/sdk/issues/3563","RelatedDescription":"Open issue \".NET Core SDK 2.2.108 does not work with Visual Studio 2017 version 15.9.13\" (#3563)"},{"Id":"483996121","IsPullRequest":true,"CreatedAt":"2019-08-22T13:32:39","Actor":"mmitche","Number":"3562","RawContent":null,"Title":"[release/3.0] Rebrand to rc1","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3562","RelatedDescription":"Closed or merged PR \"[release/3.0] Rebrand to rc1\" (#3562)"},{"Id":"483952292","IsPullRequest":true,"CreatedAt":"2019-08-22T12:02:24","Actor":"dotnet-maestro[bot]","Number":"3561","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190824.1\r\n- **Date Produced**: 8/24/2019 12:51 PM\r\n- **Commit**: a7b5eb8de300b6a30bd797c4ecc8769f7028aeec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19424.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3561","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3561)"},{"Id":"483687538","IsPullRequest":true,"CreatedAt":"2019-08-22T02:02:13","Actor":"dsplaisted","Number":"3560","RawContent":null,"Title":"Support more test config options","State":"closed","Body":"#### Description\r\nAdd more support for specifying tests to run via test config file\r\n\r\n#### Customer Impact\r\nNo direct customer impact, this is a test infrastructure change\r\n\r\n#### Regression?\r\nNo\r\n\r\n#### Risk\r\nLow\r\n\r\nAdds more options for controlling which tests are run.\r\n\r\n- Multiple test config files can be specified (via `-testConfig` or `-testConfigFile`)\r\n- Test config files can have named test lists\r\n- One or more test lists to run can be specified via `-testList` on the command line\r\n- Tests can be specified in test config by method, class, or namespace\r\n- Tests to skip can be put in a `SkippedTests` element in the test config file\r\n\r\nThis should help apply the SDK test assets to other repos, as it will be easier to start by specifying a small set of tests to run instead of trying to skip or fix all the failing tests.  It also may help if we want to have inner / outer loop tests.\r\n\r\nA sample test config file showing the different options:\r\n\r\n```xml\r\n<Tests>\r\n\r\n  <TestList Name=\"BasicBuildTests\">\r\n    <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetCoreApp.It_runs_the_app_from_the_output_folder\" />\r\n    <Class Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library\" />\r\n  </TestList>\r\n\r\n  <TestList Name=\"MoreBuildTests\">\r\n    <Class Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToSetPropertiesInDirectoryBuildProps\" />\r\n  </TestList>\r\n  \r\n  <SkippedTests>\r\n    <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library.It_resolves_assembly_conflicts\"\r\n            Issue=\"none\"\r\n            Reason=\"Testing\"/>\r\n  </SkippedTests>\r\n\r\n  <TestList Name=\"TestList1\">\r\n    <Method Name=\"MyNamespace.MyClass.MyTestName\" />\r\n    <Class Name=\"MyNamespace.MyClass\" />\r\n  </TestList>\r\n\r\n  <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library.It_builds_a_netstandard2_library_successfully\"\r\n            Skip=\"true\"\r\n            Issue=\"none\"\r\n            Reason=\"Testing\"/>\r\n\r\n</Tests>\r\n```","Url":"https://github.com/dotnet/sdk/pull/3560","RelatedDescription":"Closed or merged PR \"Support more test config options\" (#3560)"},{"Id":"483627407","IsPullRequest":true,"CreatedAt":"2019-08-21T23:40:15","Actor":"nguerrera","Number":"3558","RawContent":null,"Title":"Merge 3.0.1xx to 3.1.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3558","RelatedDescription":"Closed or merged PR \"Merge 3.0.1xx to 3.1.1xx\" (#3558)"},{"Id":"483477457","IsPullRequest":true,"CreatedAt":"2019-08-21T16:59:23","Actor":"dotnet-maestro[bot]","Number":"3557","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2b934a83-c671-49a8-a874-08d7219800a1)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190821.1\r\n- **Date Produced**: 8/21/2019 12:53 PM\r\n- **Commit**: 7aa107d818fe87e627154c0331d6de5d47f39a45\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19421.1\r\n\r\n[marker]: <> (End:2b934a83-c671-49a8-a874-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3557","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/arcade\" (#3557)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1166751382612787201","CreatedAt":"2019-08-28T16:36:21+00:00","UserScreenname":"dotnet","Text":"How the .NET Team uses @AzureDevOps Pipelines to produce @docker Images https://t.co/SXvj2qewdE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":102,"FavoriteCount":45,"RawContent":null},{"Id":"1166709015444959233","CreatedAt":"2019-08-28T13:48:00+00:00","UserScreenname":"dotnet","Text":"With the release of .NET Core 3 on the way, we've been putting together tons of great content to get you ready.\n\nCh… https://t.co/SkVCaSDA1b","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":181,"FavoriteCount":81,"RawContent":null},{"Id":"1166481079546478592","CreatedAt":"2019-08-27T22:42:16+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":15,"FavoriteCount":0,"RawContent":null},{"Id":"1164890935089668099","CreatedAt":"2019-08-23T13:23:36+00:00","UserScreenname":"dotnet","Text":"#OnDotnet @briacht joins @runfaster2000 to talk about training models with ML .NET, AutoML, the ML .NET CLI, and mo… https://t.co/DMmb5OFxUx","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":53,"FavoriteCount":24,"RawContent":null},{"Id":"1164583310900658176","CreatedAt":"2019-08-22T17:01:12+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":10,"FavoriteCount":5,"RawContent":null},{"Id":"1164249816983068673","CreatedAt":"2019-08-21T18:56:01+00:00","UserScreenname":"dotnet","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft wil… https://t.co/sf9vOIaakw","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":338,"FavoriteCount":130,"RawContent":null},{"Id":"1163857322763935745","CreatedAt":"2019-08-20T16:56:23+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2019-08-29T05:30:36.2135492Z","RunDurationInMilliseconds":15072}