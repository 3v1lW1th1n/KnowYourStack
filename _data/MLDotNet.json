{"Data":{"GitHub":{"Issues":[{"Id":"335638112","IsPullRequest":true,"CreatedAt":"2018-06-26T02:47:20","Actor":"TomFinley","Number":"413","RawContent":null,"Title":"Revert to using native code for FastTree ranking gradient","State":"open","Body":"Corrects an unintentional \"typo\" in `FastTreeRanking.cs` where I had previously mistakenly put in `USE_FASTTREENATIVE2` instead of `USE_FASTTREENATIVE`. Fixes #412 .","Url":"https://github.com/dotnet/machinelearning/pull/413","RelatedDescription":"Open PR \"Revert to using native code for FastTree ranking gradient\" (#413)"},{"Id":"335637640","IsPullRequest":false,"CreatedAt":"2018-06-26T02:44:33","Actor":"TomFinley","Number":"412","RawContent":null,"Title":"FastTree Ranking revert gradient calculation to native code","State":"open","Body":"Currently the FastTree ranking code has an `#if` to control whether it uses native or .NET code, as declared here.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/ecc6857410f56cdc67c666de4e08844df3a1e288/src/Microsoft.ML.FastTree/Microsoft.ML.FastTree.csproj#L6\r\n\r\nNormally this takes the form of `#if USE_FASTTREENATIVE`, except for here.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/ecc6857410f56cdc67c666de4e08844df3a1e288/src/Microsoft.ML.FastTree/FastTreeRanking.cs#L770\r\n\r\nThat `2`, I'm somewhat embarrassed to report, is an unintentional mistake I made some time ago. It was part of a change involving some hundreds of files, and I think I just made a small error.\r\n\r\nNow, somehow, this didn't get noticed. It however differs in its support of a few arguments. These arguments are hidden and not recommended to be used for general users, but nonetheless they may be important, and having it not be supported was unintentional.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/ecc6857410f56cdc67c666de4e08844df3a1e288/src/Microsoft.ML.FastTree/FastTreeRanking.cs#L854-L857\r\n\r\nThis is not to say we shouldn't shift to *not* use the native library, but I'd rather it be done in a controlled fashion to ensure compatibility (which this thing does not do), rather than unintentionally as I did here.\r\n\r\nThis issue is directly relevant to @najeeb-kazmi and @rogancarr .","Url":"https://github.com/dotnet/machinelearning/issues/412","RelatedDescription":"Open issue \"FastTree Ranking revert gradient calculation to native code\" (#412)"},{"Id":"335619610","IsPullRequest":true,"CreatedAt":"2018-06-26T01:13:36","Actor":"Ivanidzo4ka","Number":"411","RawContent":null,"Title":"unify tests into one folder, modify framework to support different configurations and OS","State":"closed","Body":"Fixes #410 also can help address #404 in case if it's impossible to resolve difference on platform level.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/411","RelatedDescription":"Closed or merged PR \"unify tests into one folder, modify framework to support different configurations and OS\" (#411)"},{"Id":"335611942","IsPullRequest":false,"CreatedAt":"2018-06-26T00:12:05","Actor":"Ivanidzo4ka","Number":"410","RawContent":null,"Title":"Suggestion for test framework improvements.","State":"open","Body":"No reason to have same baselines for Debug and Release if they are same.\r\n\r\nCurrently we have /test/BaselineOutput folder which contains folders Common, SingleDebug and SingleRelease and they filled with pretty much same files. We need to modify our test framework so it will look first in Common folder and if file is not found then it should look in respectful folders.\r\nAlso word Single is legacy artifact and can be omitted. \r\n\r\nThis would reduce size of repo, and simplify peoples life. Also it give more room to have platform specific tests since many of our tests disabled because we verify everything with windows output, which sometimes differ because of native code implementation.","Url":"https://github.com/dotnet/machinelearning/issues/410","RelatedDescription":"Open issue \"Suggestion for test framework improvements.\" (#410)"},{"Id":"335602397","IsPullRequest":false,"CreatedAt":"2018-06-25T23:22:35","Actor":"ganik","Number":"409","RawContent":null,"Title":"Pass standard output / error message  from native code up the stack to .NET instead of printing it","State":"open","Body":"In LdaNative code, for example, we have  a lot of printf(...) & std::cout statements that output to console / standard output. Better design is to pass the output up the stack to calling code in .NET and allow it to decide how and where to output it.\r\nBesides LdaNative we need to scan all native code for this issue. ","Url":"https://github.com/dotnet/machinelearning/issues/409","RelatedDescription":"Open issue \"Pass standard output / error message  from native code up the stack to .NET instead of printing it\" (#409)"},{"Id":"335591911","IsPullRequest":true,"CreatedAt":"2018-06-25T22:34:06","Actor":"OliaG","Number":"408","RawContent":null,"Title":"Fixed column name\\order in iris dataset","State":"open","Body":"per issue #400 \r\nFixed the iris dataset","Url":"https://github.com/dotnet/machinelearning/pull/408","RelatedDescription":"Open PR \"Fixed column name\\order in iris dataset\" (#408)"},{"Id":"335584859","IsPullRequest":false,"CreatedAt":"2018-06-25T22:05:45","Actor":"TomFinley","Number":"407","RawContent":null,"Title":"Slot Reconciliation Transform","State":"open","Body":"In ML.NET, a predictor that is trained on N features, can be applied to any column with N features. This is fine, and normally works well. However, imagine that you have a model trained over \"old\" data. Then you have a new pipeline, or new data-file, perhaps with new features, or some other such thing. In order to apply the \"old\" model to the \"new\" data, a user would need to figure out how exactly to map that data to the new model. Sometimes this can be easy, but it at least involves some in-depth dissection of the old and new schemas, and the user would need to do this themselves by specifying indices. Even when this information is readily available it can be annoying to do.\r\n\r\nWe can imagine a more convenient way: if both the old and new feature vectors had slot names metadata (which is of course entirely possible), it would be a simple enough matter to figure out how to map the new feature vectors so that they looked like the old schema, and so that application of the old model would be then straight-forward.\r\n\r\n# Definition\r\n\r\nWe can describe this in the form of a slot-mapping. Let `m` be the function mapping input slot indices to the set of output slot indices and null. (Null, because some input slots could be dropped.) Let `I` and `O` be the arrays of input metadata (usually `SlotNames`) that we are using to construct this mapping.\r\n\r\n1. `m(i) == j` if and only if `I[i] == O[j]`.\r\n2. `m(i) == null` if `I[i]` occurs nowhere in `O`.\r\n3. Any uncovered output slot index will be handled either by allowing that value to have the default value for the output type (i.e., 0.0 for floating point values), or by throwing an error.\r\n\r\nFor any value `X` in *both* `I` and `O`, that value must occur exactly once. Otherwise, obviously, the mapping would be ambiguous.\r\n\r\nWe could imagine the following examples of reconciliations, where I provide slot names as an array like [A,B,C] to indicate slots named \"A\", \"B\", and \"C\", for example:\r\n\r\n1. If we reconcile [A,B,C] to [A,C], we'd map slots 0,2 to slots 0,1, respectively, and drop slot 1.\r\n2. If we reconcile [A,B,C] to [A,C,D], we'd map slots 0,2 to slots 0,1, respectively, drop slot 1, and either throw with the error that we could not find a slot named D, or else, have the output map to the default value for that column. (This might be a configurable `bool` option.)\r\n3. If we reconcile [A,A,B,C] to [A,B,C,C], we'd have to throw with the error that the mapping is ambiguous, both on the grounds that we have no idea which of the two A to take, or which of the C to map to.\r\n4. If we reconcile [A,A,B,C] to [B,C,D,D], we'd map slots 2,3 to slots 0,1, and assign the default value for that column to output slots 2,3. (Whether we'd want to output a warning that there's something fishy going on with the names, is another matter to consider.)\r\n\r\n# Implementation\r\n\r\nThe interface to this transform would take:\r\n\r\n* The normal one-to-one column transform inputs (`IDataView` to transform, name of output column, name of source column),\r\n* The source schema and name of the column to reconcile that input to... if that name is left unspecified it can default to the source column name,\r\n* The name of the metadata kind along which reconciliation will happen, by default `SlotNames`. (For the sake of the discussion we will treat this as the standard scenario.)\r\n\r\nThe resulting output's new column will contain a mapping of slots from the input column. (Normally reconciled along `SlotNames` metadata, though this should be configurable.)\r\n\r\nAn open question is whether the deserialize model merely holds the learnt reconciliation (that is, the index mapping), or whether the reconciliation should happen each time it is deserialized. The latter is the more principled design, but is considerably less efficient since it implies the serialization of the resulting metadata\r\n\r\n## Related Work\r\n\r\nNote that this task bears some resemblance to what is done in the code here:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/ecc6857410f56cdc67c666de4e08844df3a1e288/src/Microsoft.ML.Data/Evaluators/EvaluatorUtils.cs#L452\r\n\r\nThere are some substantial differences though.\r\n\r\n* That involves a reconciliation among multiple data-views, whereas this issue describes a reconciliation between two data-views.\r\n* Also in the existing case the output is to get the union of all slots, whereas here we just want the input data view's column to resemble the input schema's column.\r\n* We want this to be a transform, that is, it can be saved as part of a data model. That code above is primarily for reconciling different cross-validation folds for per-instance output, and so did not need to be saved as part of a data model.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/407","RelatedDescription":"Open issue \"Slot Reconciliation Transform\" (#407)"},{"Id":"335536239","IsPullRequest":false,"CreatedAt":"2018-06-25T19:25:29","Actor":"sfilipi","Number":"406","RawContent":null,"Title":"Add documentation for Field-Aware Factorization Machine","State":"open","Body":"Following porting the code for fafm, we should add documentation and examples. ","Url":"https://github.com/dotnet/machinelearning/issues/406","RelatedDescription":"Open issue \"Add documentation for Field-Aware Factorization Machine\" (#406)"},{"Id":"335525797","IsPullRequest":true,"CreatedAt":"2018-06-25T18:52:32","Actor":"zeahmed","Number":"405","RawContent":null,"Title":"Added convenience constructor for set of transforms (#380).","State":"open","Body":"This PR fixes #380.\r\n\r\nAdded convenience constructor (or create method) for following set of transforms\r\n- BootstrapSampleTransform\r\n- CategoricalHashTransform\r\n- CategoricalTransform\r\n- ConcatTransform\r\n- CopyColumnsTransform\r\n- CountFeatureSelection\r\n- DropColumnsTransform\r\n- LpNormNormalizerTransform\r\n- NAFilter\r\n- NormalizeTransform\r\n","Url":"https://github.com/dotnet/machinelearning/pull/405","RelatedDescription":"Open PR \"Added convenience constructor for set of transforms (#380).\" (#405)"},{"Id":"335507007","IsPullRequest":false,"CreatedAt":"2018-06-25T17:53:57","Actor":"sfilipi","Number":"404","RawContent":null,"Title":"Fluctuation in calculations precision ","State":"open","Body":"Trying to enable the `BinaryClassifierFieldAwareFactorizationMachineTest` test, I am seeing the build fail in Linux because of the mismatch of the results with the numbers in the baseline file. \r\n\r\nWhen the test runs as part of the linux builds, a good number of the values emitted in the Score, Probability and Log-loss columns of the  \"FieldAwareFactorizationMachine-CV-breast-cancer.txt \" file start diverging from the baselines after the 6th decimal digit. \r\nThe values generated across several runs in linux are consistent; and they are consistent across rhl and ubuntu distros. \r\n\r\nThe values generated from the OSx runs are consistent with the values generated on Windows. There is only three numbers that diverge on the 17th decimal digit.  \r\n\r\nThis is not due to random number generation issues, as when you specify the seed, the random sequence being generated in windows and linux (ubuntu) is the same across several runs. ","Url":"https://github.com/dotnet/machinelearning/issues/404","RelatedDescription":"Open issue \"Fluctuation in calculations precision \" (#404)"},{"Id":"335462280","IsPullRequest":false,"CreatedAt":"2018-06-25T15:40:53","Actor":"korzh","Number":"403","RawContent":null,"Title":"Setting Threshold for Predict","State":"open","Body":"Suppose we have some binary classification task and train the model using any of binary classifier available (LogisticRegressionBinaryClassifier or FastTreeBinaryClassifier or anything else).\r\n\r\nThen we evaluate our model on a testing set  using BinaryClassificationEvaluator. During this evaluation we can set a threshold using `Threshold` property of the evaluator. \r\n\r\nThe question is: how can we set the threshold for prediction? ","Url":"https://github.com/dotnet/machinelearning/issues/403","RelatedDescription":"Open issue \"Setting Threshold for Predict\" (#403)"},{"Id":"335435490","IsPullRequest":true,"CreatedAt":"2018-06-25T14:37:03","Actor":"jwood803","Number":"402","RawContent":null,"Title":"[WIP] Add Debugger display attribute","State":"open","Body":"Proposed fix for #194.\r\n\r\nUpdated the `CSharpAPIGenerator` file to include the `DebuggerDisplay` attribute.\r\n\r\nMarked as WIP since I'm sure this would need to be improved.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/402","RelatedDescription":"Open PR \"[WIP] Add Debugger display attribute\" (#402)"},{"Id":"335282189","IsPullRequest":false,"CreatedAt":"2018-06-25T07:01:07","Actor":"rauhs","Number":"401","RawContent":null,"Title":"Entry point 'Transforms.TextFeaturizer' not found when using F# Interactive","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win10\r\n- **.NET Version (eg., dotnet --info)**:  Version:            2.1.201\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nSimilar to https://github.com/dotnet/machinelearning/issues/92 I'm trying to run the example in F#. It works fine when I run it with \r\n\r\n    fsi --exec imdb_sentiment.fsx\r\n\r\n(similar to the code here: https://github.com/isaacabraham/ml-test-experiment/blob/master/mlnet.fsx ). However when I send the source code interactively to the REPL I get an exception when I call the `Train<..>` method:\r\n\r\n```\r\nSystem.InvalidOperationException: Entry point 'Transforms.TextFeaturizer' not found\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointNode..ctor(IHostEnvironment env, ModuleCatalog moduleCatalog, RunContext context, String id, String entryPointName, JObject inputs, JObject outputs, Boolean checkpoint, String stageId, Single cost)\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointNode.ValidateNodes(IHostEnvironment env, RunContext context, JArray nodes, ModuleCatalog moduleCatalog)\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointGraph..ctor(IHostEnvironment env, ModuleCatalog moduleCatalog, JArray nodes)\r\n   at Microsoft.ML.Runtime.Experiment.Compile()\r\n   at Microsoft.ML.LearningPipeline.Train[TInput,TOutput]()\r\n```\r\n\r\nWhen I run\r\n\r\n```\r\nlet env = new TlcEnvironment(new Nullable<int>(), false, MessageSensitivity.Unknown, 0, null, null)\r\nModuleCatalog.CreateInstance(env).AllEntryPoints()\r\n```\r\n\r\nin the REPL I get:\r\n\r\n```\r\nval it : Collections.Generic.IEnumerable<ModuleCatalog.EntryPointInfo> =\r\n  [|Models.BinaryCrossValidator: Cross validation for binary classification\r\n      {Description = \"Cross validation for binary classification\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.CrossValidationBinaryMacro+Arguments;\r\n       Method = MacroOutput`1 CrossValidateBinary(Microsoft.ML.Runtime.IHostEnvironment, Arguments, Microsoft.ML.Runtime.EntryPoints.EntryPointNode);\r\n       Name = \"Models.BinaryCrossValidator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+MacroOutput`1[Microsoft.ML.Runtime.EntryPoints.CrossValidationBinaryMacro+Output];\r\n       ShortName = null;};\r\n    Data.PredictorModelArrayConverter: Create an array variable of IPredictorModel\r\n      {Description = \"Create an array variable of IPredictorModel\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.CrossValidationBinaryMacro+ArrayIPredictorModelInput;\r\n       Method = ArrayIPredictorModelOutput MakeArray(Microsoft.ML.Runtime.IHostEnvironment, ArrayIPredictorModelInput);\r\n       Name = \"Data.PredictorModelArrayConverter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CrossValidationBinaryMacro+ArrayIPredictorModelOutput;\r\n       ShortName = null;};\r\n    Data.TransformModelArrayConverter: Create an array variable of ITransformModel\r\n      {Description = \"Create an array variable of ITransformModel\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.CrossValidationBinaryMacro+ArrayITransformModelInput;\r\n       Method = ArrayITransformModelOutput MakeArray(Microsoft.ML.Runtime.IHostEnvironment, ArrayITransformModelInput);\r\n       Name = \"Data.TransformModelArrayConverter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CrossValidationBinaryMacro+ArrayITransformModelOutput;\r\n       ShortName = null;};\r\n    Data.IDataViewArrayConverter: Create an array variable of IDataView\r\n      {Description = \"Create an array variable of IDataView\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.CrossValidationBinaryMacro+ArrayIDataViewInput;\r\n       Method = ArrayIDataViewOutput MakeArray(Microsoft.ML.Runtime.IHostEnvironment, ArrayIDataViewInput);\r\n       Name = \"Data.IDataViewArrayConverter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CrossValidationBinaryMacro+ArrayIDataViewOutput;\r\n       ShortName = null;};\r\n    Models.CrossValidator: Cross validation for general learning\r\n      {Description = \"Cross validation for general learning\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.CrossValidationMacro+Arguments;\r\n       Method = MacroOutput`1 CrossValidate(Microsoft.ML.Runtime.IHostEnvironment, Arguments, Microsoft.ML.Runtime.EntryPoints.EntryPointNode);\r\n       Name = \"Models.CrossValidator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+MacroOutput`1[Microsoft.ML.Runtime.EntryPoints.CrossValidationMacro+Output];\r\n       ShortName = null;};\r\n    Models.CrossValidationResultsCombiner: Combine the metric data views returned from cross validation.\r\n      {Description = \"Combine the metric data views returned from cross validation.\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.CrossValidationMacro+CombineMetricsInput;\r\n       Method = CombinedOutput CombineMetrics(Microsoft.ML.Runtime.IHostEnvironment, CombineMetricsInput);\r\n       Name = \"Models.CrossValidationResultsCombiner\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CrossValidationMacro+CombinedOutput;\r\n       ShortName = null;};\r\n    Models.CrossValidatorDatasetSplitter: Split the dataset into the specified number of cross-validation folds (train and test sets)\r\n      {Description = \"Split the dataset into the specified number of cross-validation folds (train and test sets)\";\r\n       FriendlyName = \"Dataset CV Split\";\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.CVSplit+Input;\r\n       Method = Output Split(Microsoft.ML.Runtime.IHostEnvironment, Input);\r\n       Name = \"Models.CrossValidatorDatasetSplitter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CVSplit+Output;\r\n       ShortName = null;};\r\n    Data.DataViewReference: Pass dataview from memory to experiment\r\n      {Description = \"Pass dataview from memory to experiment\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.DataViewReference+Input;\r\n       Method = Output ImportData(Microsoft.ML.Runtime.IHostEnvironment, Input);\r\n       Name = \"Data.DataViewReference\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.DataViewReference+Output;\r\n       ShortName = null;};\r\n    Transforms.FeatureCombiner: Combines all the features into one feature column.\r\n      {Description = \"Combines all the features into one feature column.\";\r\n       FriendlyName = \"Feature Combiner\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.FeatureCombiner+FeatureCombinerInput;\r\n       Method = TransformOutput PrepareFeatures(Microsoft.ML.Runtime.IHostEnvironment, FeatureCombinerInput);\r\n       Name = \"Transforms.FeatureCombiner\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = \"fc\";};\r\n    Transforms.LabelColumnKeyBooleanConverter: Transforms the label to either key or bool (if needed) to make it suitable for classification.\r\n      {Description = \"Transforms the label to either key or bool (if needed) to make it suitable for classification.\";\r\n       FriendlyName = \"Prepare Classification Label\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.FeatureCombiner+ClassificationLabelInput;\r\n       Method = TransformOutput PrepareClassificationLabel(Microsoft.ML.Runtime.IHostEnvironment, ClassificationLabelInput);\r\n       Name = \"Transforms.LabelColumnKeyBooleanConverter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = null;};\r\n    Transforms.PredictedLabelColumnOriginalValueConverter: Transforms a predicted label column to its original values, unless it is of type bool.\r\n      {Description = \"Transforms a predicted label column to its original values, unless it is of type bool.\";\r\n       FriendlyName = \"Convert Predicted Label\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.FeatureCombiner+PredictedLabelInput;\r\n       Method = TransformOutput ConvertPredictedLabel(Microsoft.ML.Runtime.IHostEnvironment, PredictedLabelInput);\r\n       Name = \"Transforms.PredictedLabelColumnOriginalValueConverter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = null;};\r\n    Transforms.LabelToFloatConverter: Transforms the label to float to make it suitable for regression.\r\n      {Description = \"Transforms the label to float to make it suitable for regression.\";\r\n       FriendlyName = \"Prepare Regression Label\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.FeatureCombiner+RegressionLabelInput;\r\n       Method = TransformOutput PrepareRegressionLabel(Microsoft.ML.Runtime.IHostEnvironment, RegressionLabelInput);\r\n       Name = \"Transforms.LabelToFloatConverter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = null;};\r\n    Data.CustomTextLoader: Import a dataset from a text file\r\n      {Description = \"Import a dataset from a text file\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.ImportTextData+Input;\r\n       Method = Output ImportText(Microsoft.ML.Runtime.IHostEnvironment, Input);\r\n       Name = \"Data.CustomTextLoader\";\r\n       ObsoleteAttribute = System.ObsoleteAttribute;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.ImportTextData+Output;\r\n       ShortName = null;};\r\n    Data.TextLoader: Import a dataset from a text file\r\n      {Description = \"Import a dataset from a text file\";\r\n       FriendlyName = null;\r\n       InputKinds = [|Microsoft.ML.ILearningPipelineLoader|];\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.ImportTextData+LoaderInput;\r\n       Method = Output TextLoader(Microsoft.ML.Runtime.IHostEnvironment, LoaderInput);\r\n       Name = \"Data.TextLoader\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.ImportTextData+Output;\r\n       ShortName = null;};\r\n    Transforms.ModelCombiner: Combines a sequence of TransformModels into a single model\r\n      {Description = \"Combines a sequence of TransformModels into a single model\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.ModelOperations+CombineTransformModelsInput;\r\n       Method = CombineTransformModelsOutput CombineTransformModels(Microsoft.ML.Runtime.IHostEnvironment, CombineTransformModelsInput);\r\n       Name = \"Transforms.ModelCombiner\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.ModelOperations+CombineTransformModelsOutput;\r\n       ShortName = null;};\r\n    Transforms.ManyHeterogeneousModelCombiner: Combines a sequence of TransformModels and a PredictorModel into a single PredictorModel.\r\n      {Description = \"Combines a sequence of TransformModels and a PredictorModel into a single PredictorModel.\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.ModelOperations+PredictorModelInput;\r\n       Method = PredictorModelOutput CombineModels(Microsoft.ML.Runtime.IHostEnvironment, PredictorModelInput);\r\n       Name = \"Transforms.ManyHeterogeneousModelCombiner\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.ModelOperations+PredictorModelOutput;\r\n       ShortName = null;};\r\n    Transforms.TwoHeterogeneousModelCombiner: Combines a TransformModel and a PredictorModel into a single PredictorModel.\r\n      {Description = \"Combines a TransformModel and a PredictorModel into a single PredictorModel.\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.ModelOperations+SimplePredictorModelInput;\r\n       Method = PredictorModelOutput CombineTwoModels(Microsoft.ML.Runtime.IHostEnvironment, SimplePredictorModelInput);\r\n       Name = \"Transforms.TwoHeterogeneousModelCombiner\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.ModelOperations+PredictorModelOutput;\r\n       ShortName = null;};\r\n    Models.DatasetTransformer: Applies a TransformModel to a dataset.\r\n      {Description = \"Applies a TransformModel to a dataset.\";\r\n       FriendlyName = \"Apply Transform Model Output\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.ModelOperations+ApplyTransformModelInput;\r\n       Method = ApplyTransformModelOutput Apply(Microsoft.ML.Runtime.IHostEnvironment, ApplyTransformModelInput);\r\n       Name = \"Models.DatasetTransformer\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.ModelOperations+ApplyTransformModelOutput;\r\n       ShortName = null;};\r\n    Models.OneVersusAll: One-vs-All macro (OVA)\r\n      {Description = \"One-vs-All macro (OVA)\";\r\n       FriendlyName = null;\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITrainerInputWithWeight;\r\n                      Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITrainerInputWithLabel;\r\n                      Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITrainerInput|];\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.OneVersusAllMacro+Arguments;\r\n       Method = MacroOutput`1 OVA(Microsoft.ML.Runtime.IHostEnvironment, Arguments, Microsoft.ML.Runtime.EntryPoints.EntryPointNode);\r\n       Name = \"Models.OneVersusAll\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+MacroOutput`1[Microsoft.ML.Runtime.EntryPoints.OneVersusAllMacro+Output];\r\n       ShortName = null;};\r\n    Models.TrainTestBinaryEvaluator: Train test for binary classification\r\n      {Description = \"Train test for binary classification\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.TrainTestBinaryMacro+Arguments;\r\n       Method = MacroOutput`1 TrainTestBinary(Microsoft.ML.Runtime.IHostEnvironment, Arguments, Microsoft.ML.Runtime.EntryPoints.EntryPointNode);\r\n       Name = \"Models.TrainTestBinaryEvaluator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+MacroOutput`1[Microsoft.ML.Runtime.EntryPoints.TrainTestBinaryMacro+Output];\r\n       ShortName = null;};\r\n    Models.TrainTestEvaluator: General train test for any supported evaluator\r\n      {Description = \"General train test for any supported evaluator\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.TrainTestMacro+Arguments;\r\n       Method = MacroOutput`1 TrainTest(Microsoft.ML.Runtime.IHostEnvironment, Arguments, Microsoft.ML.Runtime.EntryPoints.EntryPointNode);\r\n       Name = \"Models.TrainTestEvaluator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+MacroOutput`1[Microsoft.ML.Runtime.EntryPoints.TrainTestMacro+Output];\r\n       ShortName = null;};\r\n    Transforms.TrainTestDatasetSplitter: Split the dataset into train and test sets\r\n      {Description = \"Split the dataset into train and test sets\";\r\n       FriendlyName = \"Dataset Train-Test Split\";\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.TrainTestSplit+Input;\r\n       Method = Output Split(Microsoft.ML.Runtime.IHostEnvironment, Input);\r\n       Name = \"Transforms.TrainTestDatasetSplitter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.TrainTestSplit+Output;\r\n       ShortName = null;};\r\n    Transforms.DataCache: Caches using the specified cache option.\r\n      {Description = \"Caches using the specified cache option.\";\r\n       FriendlyName = \"Cache Data\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.Cache+CacheInput;\r\n       Method = CacheOutput CacheData(Microsoft.ML.Runtime.IHostEnvironment, CacheInput);\r\n       Name = \"Transforms.DataCache\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.Cache+CacheOutput;\r\n       ShortName = null;};\r\n    Transforms.ColumnConcatenator: Concatenates two columns of the same item type.\r\n      {Description = \"Concatenates two columns of the same item type.\";\r\n       FriendlyName = \"Concat Transform\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.ConcatTransform+Arguments;\r\n       Method = TransformOutput ConcatColumns(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Transforms.ColumnConcatenator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = \"Concat\";};\r\n    Transforms.ColumnSelector: Selects a set of columns, dropping all others\r\n      {Description = \"Selects a set of columns, dropping all others\";\r\n       FriendlyName = \"Select Columns\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.DropColumnsTransform+KeepArguments;\r\n       Method = TransformOutput SelectColumns(Microsoft.ML.Runtime.IHostEnvironment, KeepArguments);\r\n       Name = \"Transforms.ColumnSelector\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = null;};\r\n    Transforms.ColumnCopier: Duplicates columns from the dataset\r\n      {Description = \"Duplicates columns from the dataset\";\r\n       FriendlyName = \"Copy Columns Transform\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.CopyColumnsTransform+Arguments;\r\n       Method = TransformOutput CopyColumns(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Transforms.ColumnCopier\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = \"Copy\";};\r\n    Transforms.ColumnDropper: Drops columns from the dataset\r\n      {Description = \"Drops columns from the dataset\";\r\n       FriendlyName = \"Drop Columns Transform\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.DropColumnsTransform+Arguments;\r\n       Method = TransformOutput DropColumns(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Transforms.ColumnDropper\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = \"Drop\";};\r\n    Transforms.ScoreColumnSelector: Selects only the last score columns and the extra columns specified in the arguments.\r\n      {Description = \"Selects only the last score columns and the extra columns specified in the arguments.\";\r\n       FriendlyName = \"Choose Columns By Index\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.ScoreModel+ScoreColumnSelectorInput;\r\n       Method = TransformOutput SelectColumns(Microsoft.ML.Runtime.IHostEnvironment, ScoreColumnSelectorInput);\r\n       Name = \"Transforms.ScoreColumnSelector\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = null;};\r\n    Transforms.BinaryPredictionScoreColumnsRenamer: For binary prediction, it renames the PredictedLabel and Score columns to include the name of the positive class.\r\n      {Description = \"For binary prediction, it renames the PredictedLabel and Score columns to include the name of the positive class.\";\r\n       FriendlyName = \"Rename Binary Prediction Score Columns\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.ScoreModel+RenameBinaryPredictionScoreColumnsInput;\r\n       Method = TransformOutput RenameBinaryPredictionScoreColumns(Microsoft.ML.Runtime.IHostEnvironment, RenameBinaryPredictionScoreColumnsInput);\r\n       Name = \"Transforms.BinaryPredictionScoreColumnsRenamer\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = null;};\r\n    Transforms.DatasetScorer: Score a dataset with a predictor model\r\n      {Description = \"Score a dataset with a predictor model\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.ScoreModel+Input;\r\n       Method = Output Score(Microsoft.ML.Runtime.IHostEnvironment, Input);\r\n       Name = \"Transforms.DatasetScorer\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.ScoreModel+Output;\r\n       ShortName = null;};\r\n    Transforms.DatasetTransformScorer: Score a dataset with a transform model\r\n      {Description = \"Score a dataset with a transform model\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.ScoreModel+InputTransformScorer;\r\n       Method = Output ScoreUsingTransform(Microsoft.ML.Runtime.IHostEnvironment, InputTransformScorer);\r\n       Name = \"Transforms.DatasetTransformScorer\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.ScoreModel+Output;\r\n       ShortName = null;};\r\n    Transforms.Scorer: Turn the predictor model into a transform model\r\n      {Description = \"Turn the predictor model into a transform model\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.ScoreModel+ModelInput;\r\n       Method = Output MakeScoringTransform(Microsoft.ML.Runtime.IHostEnvironment, ModelInput);\r\n       Name = \"Transforms.Scorer\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.ScoreModel+Output;\r\n       ShortName = null;};\r\n    Transforms.RowRangeFilter: Filters a dataview on a column of type Single, Double or Key (contiguous). Keeps the values that are in the specified min/max range. NaNs are always filtered out. If the input is a Key type, the min/max are considered percentages of the number of values.\r\n      {Description = \"Filters a dataview on a column of type Single, Double or Key (contiguous). Keeps the values that are in the specified min/max range. NaNs are always filtered out. If the input is a Key type, the min/max are considered percentages of the number of values.\";\r\n       FriendlyName = \"Range Filter\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.RangeFilter+Arguments;\r\n       Method = TransformOutput FilterByRange(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Transforms.RowRangeFilter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = \"RangeFilter\";};\r\n    Transforms.RowSkipFilter: Allows limiting input to a subset of rows by skipping a number of rows.\r\n      {Description = \"Allows limiting input to a subset of rows by skipping a number of rows.\";\r\n       FriendlyName = \"Skip Filter\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.SkipTakeFilter+SkipArguments;\r\n       Method = TransformOutput SkipFilter(Microsoft.ML.Runtime.IHostEnvironment, SkipArguments);\r\n       Name = \"Transforms.RowSkipFilter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = \"Skip\";};\r\n    Transforms.RowTakeFilter: Allows limiting input to a subset of rows by taking N first rows.\r\n      {Description = \"Allows limiting input to a subset of rows by taking N first rows.\";\r\n       FriendlyName = \"Take Filter\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.SkipTakeFilter+TakeArguments;\r\n       Method = TransformOutput TakeFilter(Microsoft.ML.Runtime.IHostEnvironment, TakeArguments);\r\n       Name = \"Transforms.RowTakeFilter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = \"Take\";};\r\n    Transforms.RowSkipAndTakeFilter: Allows limiting input to a subset of rows at an optional offset.  Can be used to implement data paging.\r\n      {Description = \"Allows limiting input to a subset of rows at an optional offset.  Can be used to implement data paging.\";\r\n       FriendlyName = \"Skip and Take Filter\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.SkipTakeFilter+Arguments;\r\n       Method = TransformOutput SkipAndTakeFilter(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Transforms.RowSkipAndTakeFilter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = \"SkipTake\";};\r\n    Models.Summarizer: Summarize a linear regression predictor.\r\n      {Description = \"Summarize a linear regression predictor.\";\r\n       FriendlyName = null;\r\n       InputKinds = null;\r\n       InputType = Microsoft.ML.Runtime.EntryPoints.SummarizePredictor+Input;\r\n       Method = SummaryOutput Summarize(Microsoft.ML.Runtime.IHostEnvironment, Input);\r\n       Name = \"Models.Summarizer\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = null;\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+SummaryOutput;\r\n       ShortName = null;};\r\n    Models.AnomalyDetectionEvaluator: Evaluates an anomaly detection scored dataset.\r\n      {Description = \"Evaluates an anomaly detection scored dataset.\";\r\n       FriendlyName = null;\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+IEvaluatorInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.AnomalyDetectionMamlEvaluator+Arguments;\r\n       Method = CommonEvaluateOutput AnomalyDetection(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Models.AnomalyDetectionEvaluator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+IEvaluatorOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+CommonEvaluateOutput;\r\n       ShortName = null;};\r\n    Models.BinaryClassificationEvaluator: Evaluates a binary classification scored dataset.\r\n      {Description = \"Evaluates a binary classification scored dataset.\";\r\n       FriendlyName = null;\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+IEvaluatorInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.BinaryClassifierMamlEvaluator+Arguments;\r\n       Method = ClassificationEvaluateOutput Binary(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Models.BinaryClassificationEvaluator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+IClassificationEvaluatorOutput;\r\n                       Microsoft.ML.Runtime.EntryPoints.CommonOutputs+IEvaluatorOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ClassificationEvaluateOutput;\r\n       ShortName = null;};\r\n    Models.ClusterEvaluator: Evaluates a clustering scored dataset.\r\n      {Description = \"Evaluates a clustering scored dataset.\";\r\n       FriendlyName = null;\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+IEvaluatorInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.ClusteringMamlEvaluator+Arguments;\r\n       Method = CommonEvaluateOutput Clustering(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Models.ClusterEvaluator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+IEvaluatorOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+CommonEvaluateOutput;\r\n       ShortName = null;};\r\n    Models.ClassificationEvaluator: Evaluates a multi class classification scored dataset.\r\n      {Description = \"Evaluates a multi class classification scored dataset.\";\r\n       FriendlyName = null;\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+IEvaluatorInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.MultiClassMamlEvaluator+Arguments;\r\n       Method = ClassificationEvaluateOutput MultiClass(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Models.ClassificationEvaluator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+IClassificationEvaluatorOutput;\r\n                       Microsoft.ML.Runtime.EntryPoints.CommonOutputs+IEvaluatorOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ClassificationEvaluateOutput;\r\n       ShortName = null;};\r\n    Models.MultiOutputRegressionEvaluator: Evaluates a multi output regression scored dataset.\r\n      {Description = \"Evaluates a multi output regression scored dataset.\";\r\n       FriendlyName = null;\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+IEvaluatorInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.MultiOutputRegressionMamlEvaluator+Arguments;\r\n       Method = CommonEvaluateOutput MultiOutputRegression(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Models.MultiOutputRegressionEvaluator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+IEvaluatorOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+CommonEvaluateOutput;\r\n       ShortName = null;};\r\n    Models.QuantileRegressionEvaluator: Evaluates a quantile regression scored dataset.\r\n      {Description = \"Evaluates a quantile regression scored dataset.\";\r\n       FriendlyName = null;\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+IEvaluatorInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.QuantileRegressionMamlEvaluator+Arguments;\r\n       Method = CommonEvaluateOutput QuantileRegression(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Models.QuantileRegressionEvaluator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+IEvaluatorOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+CommonEvaluateOutput;\r\n       ShortName = null;};\r\n    Models.RankerEvaluator: Evaluates a ranking scored dataset.\r\n      {Description = \"Evaluates a ranking scored dataset.\";\r\n       FriendlyName = null;\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+IEvaluatorInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.RankerMamlEvaluator+Arguments;\r\n       Method = CommonEvaluateOutput Ranking(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Models.RankerEvaluator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+IEvaluatorOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+CommonEvaluateOutput;\r\n       ShortName = null;};\r\n    Models.RegressionEvaluator: Evaluates a regression scored dataset.\r\n      {Description = \"Evaluates a regression scored dataset.\";\r\n       FriendlyName = null;\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+IEvaluatorInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.RegressionMamlEvaluator+Arguments;\r\n       Method = CommonEvaluateOutput Regression(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Models.RegressionEvaluator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+IEvaluatorOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+CommonEvaluateOutput;\r\n       ShortName = null;};\r\n    Models.PlattCalibrator: Apply a Platt calibrator to an input model\r\n      {Description = \"Apply a Platt calibrator to an input model\";\r\n       FriendlyName = \"Sigmoid Calibration\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ICalibratorInput;\r\n                      Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Internal.Calibration.Calibrate+NoArgumentsInput;\r\n       Method = CalibratorOutput Platt(Microsoft.ML.Runtime.IHostEnvironment, NoArgumentsInput);\r\n       Name = \"Models.PlattCalibrator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ICalibratorOutput;\r\n                       Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITrainerOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+CalibratorOutput;\r\n       ShortName = null;};\r\n    Models.NaiveCalibrator: Apply a Naive calibrator to an input model\r\n      {Description = \"Apply a Naive calibrator to an input model\";\r\n       FriendlyName = \"Naive Calibrator\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ICalibratorInput;\r\n                      Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Internal.Calibration.Calibrate+NoArgumentsInput;\r\n       Method = CalibratorOutput Naive(Microsoft.ML.Runtime.IHostEnvironment, NoArgumentsInput);\r\n       Name = \"Models.NaiveCalibrator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ICalibratorOutput;\r\n                       Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITrainerOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+CalibratorOutput;\r\n       ShortName = null;};\r\n    Models.PAVCalibrator: Apply a PAV calibrator to an input model\r\n      {Description = \"Apply a PAV calibrator to an input model\";\r\n       FriendlyName = \"PAV Calibration\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ICalibratorInput;\r\n                      Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Internal.Calibration.Calibrate+NoArgumentsInput;\r\n       Method = CalibratorOutput Pav(Microsoft.ML.Runtime.IHostEnvironment, NoArgumentsInput);\r\n       Name = \"Models.PAVCalibrator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ICalibratorOutput;\r\n                       Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITrainerOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+CalibratorOutput;\r\n       ShortName = null;};\r\n    Models.FixedPlattCalibrator: Apply a Platt calibrator with a fixed slope and offset to an input model\r\n      {Description = \"Apply a Platt calibrator with a fixed slope and offset to an input model\";\r\n       FriendlyName = \"Fixed Sigmoid Calibration\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ICalibratorInput;\r\n                      Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Internal.Calibration.Calibrate+FixedPlattInput;\r\n       Method = CalibratorOutput FixedPlatt(Microsoft.ML.Runtime.IHostEnvironment, FixedPlattInput);\r\n       Name = \"Models.FixedPlattCalibrator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ICalibratorOutput;\r\n                       Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITrainerOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+CalibratorOutput;\r\n       ShortName = null;};\r\n    Transforms.ColumnTypeConverter: Converts a column to a different type, using standard conversions.\r\n      {Description = \"Converts a column to a different type, using standard conversions.\";\r\n       FriendlyName = \"Convert Transform\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.ConvertTransform+Arguments;\r\n       Method = TransformOutput Convert(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Transforms.ColumnTypeConverter\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = \"Convert\";};\r\n    Transforms.RandomNumberGenerator: Adds a column with a generated number sequence.\r\n      {Description = \"Adds a column with a generated number sequence.\";\r\n       FriendlyName = \"Generate Number Transform\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.GenerateNumberTransform+Arguments;\r\n       Method = TransformOutput Generate(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Transforms.RandomNumberGenerator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = \"Generate\";};\r\n    Transforms.LabelIndicator: Label remapper used by OVA\r\n      {Description = \"Label remapper used by OVA\";\r\n       FriendlyName = \"LabelIndicator\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.LabelIndicatorTransform+Arguments;\r\n       Method = TransformOutput LabelIndicator(Microsoft.ML.Runtime.IHostEnvironment, Arguments);\r\n       Name = \"Transforms.LabelIndicator\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = \"LabelIndictator\";};\r\n    Transforms.NoOperation: Does nothing.\r\n      {Description = \"Does nothing.\";\r\n       FriendlyName = \"No Op\";\r\n       InputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonInputs+ITransformInput|];\r\n       InputType = Microsoft.ML.Runtime.Data.NopTransform+NopInput;\r\n       Method = TransformOutput Nop(Microsoft.ML.Runtime.IHostEnvironment, NopInput);\r\n       Name = \"Transforms.NoOperation\";\r\n       ObsoleteAttribute = null;\r\n       OutputKinds = [|Microsoft.ML.Runtime.EntryPoints.CommonOutputs+ITransformOutput|];\r\n       OutputType = Microsoft.ML.Runtime.EntryPoints.CommonOutputs+TransformOutput;\r\n       ShortName = \"Nop\";}|]\r\n```\r\n\r\nAre there any workaround I can use to get this module into the module list? Ping @isaacabraham\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/401","RelatedDescription":"Open issue \"Entry point 'Transforms.TextFeaturizer' not found when using F# Interactive\" (#401)"},{"Id":"335177426","IsPullRequest":false,"CreatedAt":"2018-06-24T12:58:37","Actor":"pkulikov","Number":"400","RawContent":null,"Title":"Iris data set (iris.txt) is not correct","State":"open","Body":"[/test/data folder](https://github.com/dotnet/machinelearning/tree/master/test/data) contains two files related to the iris data set:\r\n- [*iris.data*](https://github.com/dotnet/machinelearning/blob/master/test/data/iris.data) which source looks to be [UC Irvine Machine Learning Repository](http://archive.ics.uci.edu/ml/machine-learning-databases/iris/)\r\n- [*iris.txt*](https://github.com/dotnet/machinelearning/blob/master/test/data/iris.txt) that is tab-separated and contains the header with the column titles\r\n\r\nProblem: *iris.txt* does not match *iris.data*. \r\n\r\nLet's forget about the **Label** column and consider only the feature columns. While those columns in *iris.txt* are named in the same order as they are in the *iris.data*, the data values were somehow mixed.\r\n\r\nFirst lines of the *iris.data*:\r\n```\r\n5.1,3.5,1.4,0.2,Iris-setosa\r\n4.9,3.0,1.4,0.2,Iris-setosa\r\n4.7,3.2,1.3,0.2,Iris-setosa\r\n```\r\n\r\nFirst lines of the *iris.txt*:\r\n```\r\n#Label\tSepal length\tSepal width\tPetal length\tPetal width\r\n0\t3.5\t1.4\t0.2\t5.1\r\n0\t3.0\t1.4\t0.2\t4.9\r\n0\t3.2\t1.3\t0.2\t4.7\r\n```\r\n\r\nThe last column in the *iris.txt* must be second shifting other feature columns by one to the right. Petals of length 0.2 cm and width 5.1 cm are not natural :).\r\n\r\n//cc @OliaG as the iris data sets in the [dotnet/machinelearning-samples](https://github.com/dotnet/machinelearning-samples/tree/master/datasets) look to be produced from the *iris.txt* file.","Url":"https://github.com/dotnet/machinelearning/issues/400","RelatedDescription":"Open issue \"Iris data set (iris.txt) is not correct\" (#400)"},{"Id":"335070811","IsPullRequest":false,"CreatedAt":"2018-06-23T05:31:51","Actor":"sarthakmalik","Number":"399","RawContent":null,"Title":"Passing CollectionDataSource w/ SQL dependency throws \"System.ArgumentOutOfRangeException: Source column not found\"","State":"open","Body":"### Issue\r\nPassing a `CollectionDataSource.Create<T>(data: var)` to `pipeline.Add(var)` returns null values when referencing SQL Db via EF Core as the data source. Note that the latest version of ML.Net (0.20) is currently indicated as a dependency in the .csproj.\r\n\r\nInspecting the object indicates a valid state of data returned from the table but loaded as null into the pipeline however, I am not clear if the bug is attributable to the dataloader or its use. Any guidelines or help on the corrected implementation of parsing data from SQL Server is much appreciated.\r\n\r\n\r\n### Implementation\r\n\r\n**genericClass.cs**\r\n```\r\npublic partial class GenericClass {\r\n    public int CustomerId { get; set; }\r\n    public float PurchaseAmt { get; set; }\r\n    public string OrderType { get; set; }\r\n}\r\n\r\npublic partial class GenericPredictionClass {\r\n    [ColumnName(\"Score\")]\r\n    public float PredictedAmt;\r\n}\r\n```\r\n\r\n**sampleController.cs**\r\n```\r\npublic async Task<IActionResult> ShowOutput() {\r\n    PredictionModel<GenericClass, GenericPredictionClass> model = await TrainAsync();\r\n    \r\n    return View();\r\n}\r\n\r\nprivate Task<List<GenericClass> LoadDataFromSql() {\r\n    var sqlTblOutput = _context.Table1\r\n        .Take(1000);\r\n\r\n    return Task.Run(function: () => sqlTblOutput.ToList());\r\n}\r\n\r\nprivate async Task<PredictionModel<GenericClass, GenericPredictionClass>> TrainAsync() {\r\n    var pipeline = new LearningPipeline();\r\n    List<GenericClass> parseData = await LoadDataFromSql();\r\n    var dataReference = CollectionDataSource.Create<GenericClass>(data: parseData);\r\n\r\n    pipeline.Add(dataReference);\r\n    pipeline.Add(new CategoricalOneHotVectorizer(\"OrderType\"));\r\n   \r\n    ...\r\n\r\n    return model;\r\n}\r\n```\r\n\r\n\r\n\r\n### Locals\r\n\r\n```\r\npipeline: {Microsoft.ML.LearningPipeline}\r\n    Rows [PipelineItemDebugRow[]]: {Microsoft.ML.PipelineItemDebugRow[10]}\r\n        [0] [PipelineItemDebugRow]: \"\"\r\n            Values [string]: \"\"\r\n\r\n\r\nparseData [List]: Count = 1000\r\n    [0]: {Namespace.Models.GenericClass}\r\n        CustomerId: 1234\r\n        PurchaseAmt: 40.99\r\n        OrderType [string]: \"Test Order\"\r\n\r\n\r\ndataReference [ILearningPipelineLoader]: {Microsoft.ML.Data.CollectionDataSource.ListDataSource<Namespace.Models.GenericClass>}\r\n    Non-Public members\r\n        _dataView [IDataView]: null\r\n        _dataViewEntryPoint [DataViewReference]: null\r\n        _listCollection [IList]: Count = 1000\r\n            [0]: {Namespace.Models.GenericClass}\r\n                CustomerId: 1234\r\n                PurchaseAmt: 40.99\r\n                OrderType [string]: \"Test Order\"\r\n```\r\n\r\n\r\n### Log\r\n\r\n`\r\n\"System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentOutOfRangeException: Source column OrderType not found\\nParameter name: Source\\n   at Microsoft.ML.Runtime.Data.OneToOneTransformBase.Bindings.Create(OneToOneTransformBase parent, OneToOneColumn[] column, ISchema input, ITransposeSchema transInput, Func2 testType)\\n   at Microsoft.ML.Runtime.Data.OneToOneTransformBase..ctor(IHostEnvironment env, String name, OneToOneColumn[] column, IDataView input, Func2 testType)\\n   at Microsoft.ML.Runtime.Data.TermTransform..ctor(ArgumentsBase args, ColumnBase[] column, IHostEnvironment env, IDataView input)\\n   at Microsoft.ML.Runtime.Data.CategoricalTransform.Create(IHostEnvironment env, Arguments args, IDataView input)\\n   at Microsoft.ML.Runtime.Data.Categorical.CatTransformDict(IHostEnvironment env, Arguments input)\\n   --- End of inner exception stack trace ---\\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointNode.Run()\\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointGraph.RunNode(EntryPointNode node)\\n   at Microsoft.ML.Runtime.EntryPoints.JsonUtils.GraphRunner.RunAllNonMacros()\\n   at Microsoft.ML.Runtime.EntryPoints.JsonUtils.GraphRunner.RunAll()\\n   at Microsoft.ML.LearningPipeline.Execute(IHostEnvironment environment)\\n   at Microsoft.ML.LearningPipelineDebugProxy.ExecutePipeline()\"\r\n`\r\n\r\n### System information\r\n\r\n- **Distro**: Fedora 28 (latest)\r\n- **.NET Version**:  2.1.301\r\n- **ML.NET Package version**: 0.2.0","Url":"https://github.com/dotnet/machinelearning/issues/399","RelatedDescription":"Open issue \"Passing CollectionDataSource w/ SQL dependency throws \"System.ArgumentOutOfRangeException: Source column not found\"\" (#399)"},{"Id":"334571015","IsPullRequest":false,"CreatedAt":"2018-06-22T23:23:12","Actor":"sfilipi","Number":"390","RawContent":null,"Title":"Add documentation about Entry Points","State":"closed","Body":"Add initial documentation about what entry points, entry points manifests are, and what classes related to them. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/390","RelatedDescription":"Closed issue \"Add documentation about Entry Points\" (#390)"},{"Id":"335020532","IsPullRequest":false,"CreatedAt":"2018-06-22T21:11:54","Actor":"glebuk","Number":"398","RawContent":null,"Title":"Expose Microsoft.ML.Core NuGet for component authors.","State":"open","Body":"Currently there is a single NuGet package \"Microsoft.ML\"  that contains both algorithms and the common framework.\r\n\r\nThere are two major usages for the ML.NET: \r\n1. Author end-user applications that use ML.NET for training and inference\r\n2. Author new ML.NET Components, such as trainers, loaders or transforms.\r\n\r\nThe needs of two use cases are different.  For the former, we need everything that is currently included in Microsoft.ML.  For the latter, only the base, common interfaces and utilities are needed, such as IDataView.\r\n\r\nProposal:\r\n- Define additional NuGet package Microsoft.ML.Core that only contains  core, math and related common utils.\r\n- Modify Microsoft.ML to depend on  Microsoft.ML.Core.","Url":"https://github.com/dotnet/machinelearning/issues/398","RelatedDescription":"Open issue \"Expose Microsoft.ML.Core NuGet for component authors.\" (#398)"},{"Id":"335017929","IsPullRequest":true,"CreatedAt":"2018-06-22T21:01:35","Actor":"yaeldekel","Number":"397","RawContent":null,"Title":"Create a shorter temp file name for model loading.","State":"open","Body":"Fixes #396\r\n","Url":"https://github.com/dotnet/machinelearning/pull/397","RelatedDescription":"Open PR \"Create a shorter temp file name for model loading.\" (#397)"},{"Id":"335017738","IsPullRequest":false,"CreatedAt":"2018-06-22T21:00:57","Actor":"yaeldekel","Number":"396","RawContent":null,"Title":"Temp path created for model loading is too long","State":"open","Body":"In some environments access to the file system is restricted, so when we deserialize a model file first extract the entries in the zip repository to temporary files. The path for the temporary file contains the system's temporary folder name, followed by \"TLC_\" and a guid. Sometimes this creates a path that is too long because Windows doesn't allow paths that are over 260 characters. ","Url":"https://github.com/dotnet/machinelearning/issues/396","RelatedDescription":"Open issue \"Temp path created for model loading is too long\" (#396)"},{"Id":"335012603","IsPullRequest":false,"CreatedAt":"2018-06-22T20:41:23","Actor":"yaeldekel","Number":"395","RawContent":null,"Title":"EvaluatorUtils should handle key label columns with non-text key values","State":"open","Body":"When CV needs to concatenate the per-instance data views, it needs to reconcile the key values from the different folds, even if the key values are not text.","Url":"https://github.com/dotnet/machinelearning/issues/395","RelatedDescription":"Open issue \"EvaluatorUtils should handle key label columns with non-text key values\" (#395)"},{"Id":"335011922","IsPullRequest":true,"CreatedAt":"2018-06-22T20:38:42","Actor":"yaeldekel","Number":"394","RawContent":null,"Title":"EvaluatorUtils to handle label column of type key without text key values","State":"open","Body":"If the label column is a key converted from something other than text, \r\nFixes #395 ","Url":"https://github.com/dotnet/machinelearning/pull/394","RelatedDescription":"Open PR \"EvaluatorUtils to handle label column of type key without text key values\" (#394)"},{"Id":"334959553","IsPullRequest":true,"CreatedAt":"2018-06-22T17:29:20","Actor":"sfilipi","Number":"393","RawContent":null,"Title":"Adding xml style documentation for trainers","State":"open","Body":"Adding xml style documentation for trainers, to improve what's currently on docs.microsoft.com. \r\n\r\nAdresses #388 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/393","RelatedDescription":"Open PR \"Adding xml style documentation for trainers\" (#393)"},{"Id":"334771594","IsPullRequest":true,"CreatedAt":"2018-06-22T07:17:40","Actor":"codemzs","Number":"392","RawContent":null,"Title":"LightGBM ","State":"open","Body":"LightGBM integration. This change adds API for LightGBM binary and multiclass classifier.\r\n\r\nfixes #391 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/392","RelatedDescription":"Open PR \"LightGBM \" (#392)"},{"Id":"334770266","IsPullRequest":false,"CreatedAt":"2018-06-22T07:12:05","Actor":"codemzs","Number":"391","RawContent":null,"Title":"Port LightGBM ","State":"open","Body":"Integration for LightGBM for binary and multiclass classification problems.","Url":"https://github.com/dotnet/machinelearning/issues/391","RelatedDescription":"Open issue \"Port LightGBM \" (#391)"},{"Id":"334529439","IsPullRequest":false,"CreatedAt":"2018-06-21T14:49:19","Actor":"sfilipi","Number":"389","RawContent":null,"Title":"Improve the documentation on the transform classes","State":"open","Body":"Documentation on the transform classes at [docs.microsoft.com](https://docs.microsoft.com) needs to be expanded. ","Url":"https://github.com/dotnet/machinelearning/issues/389","RelatedDescription":"Open issue \"Improve the documentation on the transform classes\" (#389)"},{"Id":"334528569","IsPullRequest":false,"CreatedAt":"2018-06-21T14:47:20","Actor":"sfilipi","Number":"388","RawContent":null,"Title":"Improve the documentation on the trainer classes. ","State":"open","Body":"The documentation describing the trainers on [docs.microsoft.com ](https://docs.microsoft.com) needs to be expanded. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/388","RelatedDescription":"Open issue \"Improve the documentation on the trainer classes. \" (#388)"},{"Id":"334256239","IsPullRequest":false,"CreatedAt":"2018-06-21T08:27:39","Actor":"codemzs","Number":"387","RawContent":null,"Title":"Example on converting ML.NET model to ONNX.","State":"closed","Body":"Add a link to an example for Convert to ONNX API.","Url":"https://github.com/dotnet/machinelearning/issues/387","RelatedDescription":"Closed issue \"Example on converting ML.NET model to ONNX.\" (#387)"},{"Id":"334255079","IsPullRequest":true,"CreatedAt":"2018-06-21T08:27:39","Actor":"codemzs","Number":"386","RawContent":null,"Title":"Link to an example on using converting ML.NET model to ONNX.","State":"closed","Body":"fixes #387 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/386","RelatedDescription":"Closed or merged PR \"Link to an example on using converting ML.NET model to ONNX.\" (#386)"},{"Id":"334221807","IsPullRequest":true,"CreatedAt":"2018-06-20T20:59:31","Actor":"yaeldekel","Number":"385","RawContent":null,"Title":"Fix CV macro to output the warnings data view properly.","State":"closed","Body":"Fixes #384 .","Url":"https://github.com/dotnet/machinelearning/pull/385","RelatedDescription":"Closed or merged PR \"Fix CV macro to output the warnings data view properly.\" (#385)"},{"Id":"334221002","IsPullRequest":false,"CreatedAt":"2018-06-20T20:59:31","Actor":"yaeldekel","Number":"384","RawContent":null,"Title":"The warnings data view in CV macro is always null","State":"closed","Body":"The inputs and outputs are not being wired correctly in the macro, resulting in a null for the warnings data view.","Url":"https://github.com/dotnet/machinelearning/issues/384","RelatedDescription":"Closed issue \"The warnings data view in CV macro is always null\" (#384)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-06-26T05:30:36.4800679Z","RunDurationInMilliseconds":1167}