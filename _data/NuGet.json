{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11242756741","Type":"PullRequestEvent","CreatedAt":"2020-01-10T00:24:52","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7803","RelatedDescription":"Merged pull request \"Minor app service related changes\" (#7803) at NuGet/NuGetGallery","RelatedBody":"Renamed a variable and a method to emphasize their relation to cloud service infrastructure (not the cloud hosting in general).\r\nRemoved duplicate code that figured out machine name.\r\nAdded `<applicationInitialization>` section to the web.config."},{"Id":"11242603265","Type":"PullRequestEvent","CreatedAt":"2020-01-09T23:50:47","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7803","RelatedDescription":"Opened pull request \"Minor app service related changes\" (#7803) at NuGet/NuGetGallery","RelatedBody":"Renamed a variable and a method to emphasize their relation to cloud service infrastructure (not the cloud hosting in general).\r\nRemoved duplicate code that figured out machine name.\r\nAdded `<applicationInitialization>` section to the web.config."},{"Id":"11242468363","Type":"IssuesEvent","CreatedAt":"2020-01-09T23:22:54","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7766","RelatedDescription":"Closed issue \"[PackageType]Update Gallery to reject invalid package types\" (#7766) at NuGet/NuGetGallery","RelatedBody":"Currently, gallery appears to do very little validation of packageTypes node on package upload.\r\nThis allows packageTypes that are invalid (according to spec) to be pushed to gallery.\r\n\r\nThese package types are effectively meaningless, and should be rejected at push time/nuspec validation time."},{"Id":"11242462744","Type":"IssuesEvent","CreatedAt":"2020-01-09T23:21:49","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7780","RelatedDescription":"Closed issue \"[PackageType]Reflowing packages with package types cause the records to be duplicated\" (#7780) at NuGet/NuGetGallery","RelatedBody":"![image](https://user-images.githubusercontent.com/94054/71047031-1af8b180-20ef-11ea-9a5a-150ddaffb3f1.png)\r\n\r\nThere should only be one."},{"Id":"11242358102","Type":"PullRequestEvent","CreatedAt":"2020-01-09T23:02:17","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7799","RelatedDescription":"Merged pull request \"Functional test script update to wait for the service to start up after the deployment\" (#7799) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/2863\r\n\r\nApp service deployment reports success way before the service initialization completes successfully and is able to serve requests. This breaks our tests that encounter 502 responses and fail.\r\nThis change adds a delay and a response test to the test run script to make sure we run tests against the working service."},{"Id":"11242182811","Type":"IssuesEvent","CreatedAt":"2020-01-09T22:32:28","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7796","RelatedDescription":"Closed issue \"[2020-01-06] Deployment\" (#7796) at NuGet/NuGetGallery","RelatedBody":"NuGetGallery\r\n- [x] Merge dev to master\r\n- [x] DEV\r\n    - [x] NuGetGallery\r\n- [x] INT\r\n    - [x] NuGetGallery\r\n- [x] PROD\r\n    - [x] NuGetGallery"},{"Id":"11242111112","Type":"IssuesEvent","CreatedAt":"2020-01-09T22:20:59","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7802","RelatedDescription":"Opened issue \"Support the \"plus\" operator in search\" (#7802) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nLegacy NuGet search supported adding `+` to a term to mark it as required. For example, the query `+foo +bar` would only return results that match both `foo` and `bar`. This feature was lost in the Azure Search migration.\r\n\r\nSee this discussion: https://github.com/NuGet/docs.microsoft.com-nuget/issues/1702\r\n"},{"Id":"11241538654","Type":"PullRequestEvent","CreatedAt":"2020-01-09T20:58:49","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7798","RelatedDescription":"Merged pull request \"HTTP to HTTPS redirect differences between App and Cloud services\" (#7798) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/2863\r\n\r\nCloud and app services handle the HTTP to HTTPS redirect differently (we can enable \"Always HTTPS\" for an app service, while we can't do that for the cloud service), so the test update is required to accommodate for that difference.\r\nThis change also requires the test configuration to be updated."},{"Id":"11241515850","Type":"PullRequestEvent","CreatedAt":"2020-01-09T20:55:45","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7801","RelatedDescription":"Merged pull request \"Use Json.Encode to avoid js injection\" (#7801) at NuGet/NuGetGallery","RelatedBody":"All required documentation is on the following issue:\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/2911"},{"Id":"11240987637","Type":"IssuesEvent","CreatedAt":"2020-01-09T19:43:44","Actor":"lissyx","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7800","RelatedDescription":"Closed issue \"No documentation on publishing \"Documentation\" content/URL from the API\" (#7800) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nAbility to upload README content from the API is missing from the documentation ?\r\n\r\n### To Reproduce\r\nI can manually upload a version-specific documentation :\r\n1. Go to the \"Manage\" page of a package\r\n2. Unfold the \"Documentation\" part\r\n3. Put raw content or a Github link, or upload from a local file\r\n\r\n### Expected behavior\r\nWe should be able to upload at the same time we publish a package. I suspect (hope?) it's possible, but searching  the following documentations yielded nothing:\r\n - https://docs.microsoft.com/nuget/api/package-publish-resource\r\n - https://docs.microsoft.com/nuget/api/registration-base-url-resource\r\n - https://docs.microsoft.com/nuget/api/nuget-protocols\r\n\r\nI also tried by spying quickly to what is being done when manually uploading  with Devtools, but I could not yield anything really actionable API-wise.\r\n\r\n### Additional context\r\nWe are building and publishing from CI, so manually uploading is really not an option. I have seen there is expected work to make the NuGet self-contained including the README/documentation part, but so far this work has not yet started.\r\n\r\nSo, is it possible or not to perform this documentation upload step from the API ?\r\n\r\nI'm quite a newbie in regards of the NuGet world, so it's possible I am missing something obvious here. Please direct me to the proper resources if they exists !"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11243883150","Type":"IssuesEvent","CreatedAt":"2020-01-10T05:02:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9044","RelatedDescription":"Opened issue \"Disable NU5105\" (#9044) at NuGet/Home","RelatedBody":"When creating semver2 packages...you get something like...\r\n\r\n> The package version '1.2.3+semver2.metadata' uses SemVer 2.0.0 or components of SemVer 1.0.0 that are not supported on legacy clients. Change the package version to a SemVer 1.0.0 string. If the version contains a release label it must start with a letter. This message can be ignored if the package is not intended for older clients.\r\n\r\nI believe at this point this warning should be removed. \r\n"},{"Id":"11243839947","Type":"IssuesEvent","CreatedAt":"2020-01-10T04:51:21","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8991","RelatedDescription":"Closed issue \"Basic developer docs\" (#8991) at NuGet/Home","RelatedBody":"All of the how to work with NuGet docs should be public and on GitHub!\r\n\r\nWe should avoid the wiki for workflow related things and use the repo itself. \r\nIt improves discoverability for contributors. It's in line with what the rest of the .NET repos do. \r\n"},{"Id":"11242870315","Type":"IssuesEvent","CreatedAt":"2020-01-10T00:51:38","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8925","RelatedDescription":"Closed issue \"vs/nuget/nugetaction telemetry doesn't log info about currently installed packages\" (#8925) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\r\n\r\nNuGet version (x.x.x.xxx): 5.5.0.0\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate): Dev16\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Win10 1909\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Use VS UI to add/remove/update packages from either a dotnet core or bigdotnet project\r\n\r\n2. Use telemetry monitor to watch for vs/nuget/nugetaction event\r\n\r\nExpected: a property of some kind on the event showing richer information about the packages already installed when the user chose to modify the installed packageset somehow.  Specificallly, hashes of the package names and package versions. \r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nAny project will show the issue\r\n\r\n"},{"Id":"11242789904","Type":"IssuesEvent","CreatedAt":"2020-01-10T00:32:26","Actor":"loic-sharma","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9043","RelatedDescription":"Opened issue \"Search query isn't properly URL encoded\" (#9043) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nThe search query is not properly URL encoded:\r\n\r\n1. This breaks NuGet.org's [\"plus\" operator](https://docs.microsoft.com/en-us/nuget/consume-packages/finding-and-choosing-packages#search-syntax) for queries like `foo+bar`\r\n1. This allows a user to craft a search query that appends arbitrary query strings.\r\n\r\nNuGet product used: VS UI\r\nVS version: 16.5.0 Preview 2.0 \r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Open Fiddler\r\n1. Open the package manager UI\r\n1. Select the \"Browse\" tab\r\n1. Search for `foo&FOO=BAR`\r\n1. Check the request on Fiddler. You should see: `GET https://azuresearch-usnc.nuget.org/query?q=foo&FOO=BAR&skip=0&take=26&prerelease=true&semVerLevel=2.0.0 HTTP/1.1`\r\n\r\n![image](https://user-images.githubusercontent.com/737941/72115851-40976600-32fd-11ea-8266-eff0639a0909.png)\r\n"},{"Id":"11242742409","Type":"IssuesEvent","CreatedAt":"2020-01-10T00:21:28","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8993","RelatedDescription":"Closed issue \"Crash:  analyze memory dump\" (#8993) at NuGet/Home","RelatedBody":""},{"Id":"11242669461","Type":"IssuesEvent","CreatedAt":"2020-01-10T00:05:23","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9042","RelatedDescription":"Opened issue \"Restore:  project closure computed for each project twice\" (#9042) at NuGet/Home","RelatedBody":"[`DependencyGraphSpec.GetClosure(...)`](https://github.com/NuGet/NuGet.Client/blob/74d1935e4e25a90df536ae7cac6cf7c73c6ea678/src/NuGet.Core/NuGet.ProjectModel/DependencyGraphSpec.cs#L142-L181) is called twice for each project.  Once in [`DependencyGraphSpecRequestProvider.GetRequestsFromItems(â€¦)`](https://github.com/NuGet/NuGet.Client/blob/74d1935e4e25a90df536ae7cac6cf7c73c6ea678/src/NuGet.Core/NuGet.Commands/RestoreCommand/RequestFactory/DependencyGraphSpecRequestProvider.cs#L75-L77) and again in [`DependencyGraphSpec.WithProjectClosure(...)`](https://github.com/NuGet/NuGet.Client/blob/74d1935e4e25a90df536ae7cac6cf7c73c6ea678/src/NuGet.Core/NuGet.ProjectModel/DependencyGraphSpec.cs#L129).  The result of the first call could be reused in `DependencyGraphSpec.WithProjectClosure(...)`."},{"Id":"11242668864","Type":"IssuesEvent","CreatedAt":"2020-01-10T00:05:16","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9041","RelatedDescription":"Opened issue \"Restore:  excessive deep cloning of `ProjectSpec`\" (#9041) at NuGet/Home","RelatedBody":"When restoring ([`NuGet.Commands.RestoreRunner.RunAsync(...)`](https://github.com/NuGet/NuGet.Client/blob/74d1935e4e25a90df536ae7cac6cf7c73c6ea678/src/NuGet.Core/NuGet.Commands/RestoreCommand/RestoreRunner.cs#L25)) NuGet makes wasteful use of memory with respect to `PackageSpec` objects.  This is especially noticable on large solutions.\r\n\r\n[`DependencyGraphSpec.WithProjectClosure(...)`](https://github.com/NuGet/NuGet.Client/blob/74d1935e4e25a90df536ae7cac6cf7c73c6ea678/src/NuGet.Core/NuGet.ProjectModel/DependencyGraphSpec.cs#L125-L136) creates `PackageSpec` clones by default.  [`PackageSpec.Clone()`](https://github.com/NuGet/NuGet.Client/blob/74d1935e4e25a90df536ae7cac6cf7c73c6ea678/src/NuGet.Core/NuGet.ProjectModel/PackageSpec.cs#L192-L224) performs a fairly deep and expensive clone.  It's not clear that cloning by default is necessary.  Note that https://github.com/NuGet/NuGet.Client/pull/3094 was a targeted hack in that `DependencyGraphSpec` readonly-ness is not actually enforced and the optimization only applied to a specific command-line scenario."},{"Id":"11242359629","Type":"IssuesEvent","CreatedAt":"2020-01-09T23:02:32","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8692","RelatedDescription":"Closed issue \"restore fails when nuget.dgspec.json is \"used by another process\"\" (#8692) at NuGet/Home","RelatedBody":"I'm trying to renovate my PInvoke repo to use the latest .NET tooling, and in the process I've seen a high failure rate during package restore. For example in [this build](https://dev.azure.com/andrewarnott/OSS/_build/results?buildId=1855&view=logs&j=2d2b3007-3c5c-5840-9bb0-2b1ea49925f3&t=abae1f68-3c73-5bff-491f-f2b908580ce6&l=82):\r\n\r\n> D:\\a\\1\\s\\src\\BCrypt\\BCrypt.csproj : error : One or more errors occurred. (The process cannot access the file 'C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\d7b7ea43-5b9f-4c98-9945-129825a55c6f.nuget.dgspec.json' because it is being used by another process.)\r\n\r\nI've seen this error 2-3 times out of just half a dozen builds in Azure Pipelines.\r\n\r\nrestore command: `dotnet restore`\r\ndotnet SDK: v2.2.401\r\nnuget cred provider: v0.1.19 (from https://api.github.com/repos/Microsoft/artifacts-credprovider/releases/latest)\r\n\r\nThis particular repo (https://github.com/aarnott/pinvoke) has several dozen projects in a very flat P2P hierarchy, so a great many projects may be restoring in parallel, perhaps leading to this file access conflict."},{"Id":"11242322684","Type":"IssuesEvent","CreatedAt":"2020-01-09T22:56:11","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8791","RelatedDescription":"Closed issue \"Make noop restore faster - speed up evaluations by calling MSBuild Static Graph apis\" (#8791) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nIn MSBuild 16.0, a new [Static Graph API](https://github.com/Microsoft/msbuild/blob/master/documentation/specs/static-graph.md) was added for parsing project trees in a more efficient way.  This new API also can express dependencies so that callers can build a graph that represents the tree.  NuGet should adopt this new API to replace the way projects are being evaluated via target execution which would reduce command-line restores dramatically.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): Any\r\n\r\nNuGet version (x.x.x.xxx): Any\r\n\r\ndotnet.exe --version (if appropriate): Any\r\n\r\nVS version (if appropriate): Any\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Any\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. From the command-line, restore a large tree of projects.\r\n\r\nThe restore takes around 30 seconds for 700 projects.  With Static Graph and other perf improvements, it takes less than 6 seconds.\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"11242295247","Type":"IssuesEvent","CreatedAt":"2020-01-09T22:51:25","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8995","RelatedDescription":"Closed issue \"hashed package names in telemetry should be lower cased\" (#8995) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\r\n\r\nNuGet version (x.x.x.xxx): \r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate): 16.5 preview 2 - 29617.129\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win 10 64 bit build 1909\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. As an internal Microsoft engineer, start a telemetry monitor tool\r\n\r\n2. Generate successful nuget actions [install/update/remove] with VS UI\r\n\r\n3. Observe vs/nuget/nugetaction event\r\n\r\n4. Look at the .NotHashed package properties like SelectedPackage, AddedPackages, etc\r\n\r\nExpected: package names are lower case\r\nActual: package names preserve casing.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\n"},{"Id":"11241583861","Type":"IssuesEvent","CreatedAt":"2020-01-09T21:04:46","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9040","RelatedDescription":"Opened issue \"Restore:  DependencyGraphSpec.Load(...) does not need JObject\" (#9040) at NuGet/Home","RelatedBody":"[`DependencyGraphSpec.Json`](https://github.com/NuGet/NuGet.Client/blob/90f0a2cc44df67ca01d6411fd68e5aac57e2a247/src/NuGet.Core/NuGet.ProjectModel/DependencyGraphSpec.cs#L79) is unused except by tests.  Holding both the `Newtonsoft.Json.Linq.JObject` and the NuGet representations of a dependency graph spec in memory is completely unnecessary.\r\n\r\nRecommendations:\r\n1. Remove the `DependencyGraphSpec.Json` property.\r\n2. Update [`DependencyGraphSpec.Load(string)`](https://github.com/NuGet/NuGet.Client/blob/90f0a2cc44df67ca01d6411fd68e5aac57e2a247/src/NuGet.Core/NuGet.ProjectModel/DependencyGraphSpec.cs#L227) to deserialize a `DependencyGraphSpec` object incrementally using a `Newtonsoft.Json.JsonTextReader` and avoid deserializing completely into a `JObject` first.\r\n"},{"Id":"11240325563","Type":"IssuesEvent","CreatedAt":"2020-01-09T18:12:55","Actor":"diogorolo","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9039","RelatedDescription":"Opened issue \"SkipDuplicate option is ignored in symbol packages\" (#9039) at NuGet/Home","RelatedBody":"# Details about Problem\r\n\r\nNuGet product used: dotnet.exe\r\n\r\nNuGet version: 4.7.0.5148\r\n\r\ndotnet.exe --version (if appropriate): 3.1.100\r\n\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10 v1903 18362.535\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\nExample command: dotnet nuget push dummy.nupkg --skip-duplicate -k my_key -s https://mysource.c/api/v2/package -ss https://mysymbolsource.c/symbols/api/v2/package -sk my_symbol_key\r\n\r\n1. Push a package with symbols to a server that does not allow package overwritting\r\n\r\n2. Push again the same packages with symbols\r\n\r\n## Other Info\r\nhttps://github.com/NuGet/NuGet.Client/blob/1f7820743cc143b675e3f195e77357feea2e8910/src/NuGet.Core/NuGet.Protocol/Resources/PackageUpdateResource.cs#L184\r\n\r\nHere we can see that the variable SkipDuplicate is being force set to false.\r\n\r\n### Verbose Logs\r\n\r\nC:\\dir>dotnet nuget push dummy.nupkg --skip-duplicate -k my_key -s https://mysource.c/api/v2/package -ss https://mysymbolsource.c/symbols/api/v2/package -sk my_symbol_key\r\ninfo : Pushing dummy.nupkg to 'https://mysource.c/api/v2/package'...\r\ninfo :   PUT  https://mysource.c/api/v2/package \r\ninfo :   Created  https://mysource.c/api/v2/package  1084ms\r\ninfo : Your package was pushed.\r\ninfo : Pushing dummy.symbols.nupkg to 'https://mysymbolsource.c/symbols/api/v2/package'...\r\ninfo :   PUT https://mysymbolsource.c/symbols/api/v2/package/\r\ninfo :   Created https://mysymbolsource.c/symbols/api/v2/package/ 785ms\r\ninfo : Your package was pushed.\r\n\r\nC:\\dir>dotnet nuget push dummy.nupkg --skip-duplicate -k my_key -s https://mysource.c/api/v2/package -ss https://mysymbolsource.c/symbols/api/v2/package -sk my_symbol_key\r\ninfo : Pushing dummy.nupkg to 'https://mysource.c/api/v2/package'...\r\ninfo :   PUT  https://mysource.c/api/v2/package \r\ninfo :   Conflict  https://mysource.c/api/v2/package  443ms\r\nlog  : Package 'dummy.nupkg' already exists at feed 'https://mysource.c/api/v2/package'.\r\ninfo : Pushing dummy.symbols.nupkg to 'https://mysymbolsource.c/symbols/api/v2/package'...\r\ninfo :   PUT https://mysymbolsource.c/symbols/api/v2/package/\r\ninfo :   Conflict https://mysymbolsource.c/symbols/api/v2/package/ 97ms\r\ninfo : To skip already published packages, use the option --skip-duplicate\r\nerror: Response status code does not indicate success: 409 (The package could not be uploaded. The package \"FrotcomServerFalcom 2.2.0\" already exists. Overwriting existing packages is forbidden according to the package retention settings for this feed.).\r\n\r\nAs you can see, it fails the second time, even with the  --skip-duplicate option. In the error it suggests using the same option that's already in use.\r\n\r\n"},{"Id":"11240065632","Type":"IssuesEvent","CreatedAt":"2020-01-09T17:37:06","Actor":"Ynot1234","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9038","RelatedDescription":"Opened issue \"Building solution with both Core and Standard\" (#9038) at NuGet/Home","RelatedBody":"I have a solution on MS 2017 with a Core startup project and a 'Standard' class library.   I migrated the package.config references to package references format.  When I try to build it on TFS with .Net Core Build tasks,  the Standard project is not able to locate some of the Top Level NuGet libraries...\r\n\r\n_error CS0246: The type or namespace name 'Newtonsoft' could not be found (are you missing a using directive or an assembly reference?) \r\nerror CS0246: The type or namespace name 'Dapper' could not be found (are you missing a using directive or an assembly reference?) \r\nerror CS0234: The type or namespace name 'Extensions' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?) \r\nerror CS0246: The type or namespace name 'JObject' could not be found (are you missing a using directive or an assembly reference?) \r\nerror CS0246: The type or namespace name 'JToken' could not be found (are you missing a using directive or an assembly reference?)_\r\n\r\n\r\n\r\nThe application works locally (using these libraries) so is it an issue with the Core Build Task on TFS?  Can they not process a .Net Standard project?  I should point out that the version of these packages matches in both projects.      "},{"Id":"11239796361","Type":"IssuesEvent","CreatedAt":"2020-01-09T17:02:56","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9032","RelatedDescription":"Closed issue \"Make install VSIX script resilient to incomplete VS installs\" (#9032) at NuGet/Home","RelatedBody":"A number of CI builds fail when VS is in a broken installation state, requiring someone to log in to the CI machine and repair the VS install. This can be reproduced at will by killing vsixinstaller.exe in the middle of an installation (for example, canceling the CI build while it's installing the VSIX).\r\n\r\nVS install team informed us we can use the \"resume\" command on vs_installer.exe to have it repair/resume the install."},{"Id":"11235637842","Type":"IssuesEvent","CreatedAt":"2020-01-09T08:48:53","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7999","RelatedDescription":"Closed issue \"Specifying `dotnet add package --source` fails on another unreachable source\" (#7999) at NuGet/Home","RelatedBody":"`dotnet.exe` fails to add a package when specifying source one when source two is unavailable.\r\n\r\n## Reproduction\r\n\r\n1. Check sources `nuget source list`, (one is not available)\r\n\r\n2. Use dotnet cli to add package from a source\r\n\r\n`dotnet add package --source https://www.nuget.org/api/v2/ Figgle`\r\n\r\nFails, because of another source. Expected it to be ignored, only the supplied source should be used.\r\n\r\n## Workaround\r\n\r\nDisable the problematic source\r\n```\r\nnuget source disable -name 'MyCompany NuGet Server'\r\ndotnet add package --source https://www.nuget.org/api/v2/ Figgle\r\n```\r\n\r\n### Verbose Logs\r\n\r\n```\r\nC:\\Data\\gitlab\\kcd\\dotnet-cli-test> dotnet add package --source https://www.nuget.org/api/v2/ Figgle\r\n  Writing C:\\Users\\kdyer\\AppData\\Local\\Temp\\tmpA6D3.tmp\r\ninfo : Adding PackageReference for package 'Figgle' into project 'C:\\Data\\gitlab\\kcd\\dotnet-cli-test\\dotnet-cli-test.csproj'.\r\nlog  : Persisting no-op dg to C:\\Data\\gitlab\\kcd\\dotnet-cli-test\\obj\\dotnet-cli-test.csproj.nuget.dgspec.json\r\ninfo : Restoring packages for C:\\Data\\gitlab\\kcd\\dotnet-cli-test\\dotnet-cli-test.csproj...\r\ninfo :   GET https://nuget.mycompany.local/FindPackagesById()?id='Figgle'&semVerLevel=2.0.0\r\ninfo :   GET https://www.nuget.org/api/v2/FindPackagesById()?id='Figgle'&semVerLevel=2.0.0\r\nlog  : Retrying 'FindPackagesByIdAsyncCore' for source 'https://nuget.mycompany.local/FindPackagesById()?id='Figgle'&semVerLevel=2.0.0'.\r\nlog  : No such host is known.\r\ninfo :   GET https://nuget.mycompany.local/FindPackagesById()?id='Figgle'&semVerLevel=2.0.0\r\nlog  : Retrying 'FindPackagesByIdAsyncCore' for source 'https://nuget.mycompany.local/FindPackagesById()?id='Figgle'&semVerLevel=2.0.0'.\r\nlog  : No such host is known.\r\ninfo :   GET https://nuget.mycompany.local/FindPackagesById()?id='Figgle'&semVerLevel=2.0.0\r\nerror: Failed to retrieve information about 'Figgle' from remote source 'https://nuget.mycompany.local/FindPackagesById()?id='Figgle'&semVerLevel=2.0.0'.\r\nerror:   No such host is known.\r\n```\r\n\r\n### Versions\r\n\r\n```\r\n\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n  \r\n  \r\nnuget\r\nNuGet Version: 4.9.3.5777\r\n```\r\n\r\nI understand `dotnet add package` is maintained by this team?\r\n\r\n"},{"Id":"11235628316","Type":"IssuesEvent","CreatedAt":"2020-01-09T08:47:34","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9033","RelatedDescription":"Closed issue \"dotnet add package --source not imperative\" (#9033) at NuGet/Home","RelatedBody":"_From @iamalexmang on Tuesday, January 7, 2020 10:52:50 AM_\r\n\r\nI strongly believe that if I explicitly mention a --source parameter for the package, especially in the format of a file system path, the CLI should not try validate the package's existence on any other sources. \r\nAs of right now, when I specify the source parameter as a FS path, if either of the sources specified at the solution level, user global level (in %AppData%/NuGet) or computer level (Program Files (x86)), are unauthenticated, the package installation will fail. Regretfully, the error is completely unspecific as it complains which source returns a 401 Unauthorized error, though the package exists on the file system at the specified location.\r\n\r\n_Copied from original issue: dotnet/sdk#4137_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We areâ€¦ https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-01-10T05:30:47.6593968Z","RunDurationInMilliseconds":1896}