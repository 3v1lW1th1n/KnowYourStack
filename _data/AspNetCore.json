{"Data":{"Blog":{"FeedItems":[{"Title":"Troubleshooting ASP.NET Core Performance Problems","PublishedOn":"2018-05-23T14:26:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post by Mike Rousos I recently had an opportunity to help a developer with an ASP.NET Core app that was functionally correct but slow when under a heavy user load. We found a few...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/23/asp-net-core-performance-improvements/","RawContent":null},{"Title":"Announcing ASP.NET Providers Connected Service Visual Studio Extension","PublishedOn":"2018-05-22T17:43:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Provider pattern was introduced in ASP.NET 2.0 and it gives the developers the flexibility of where to store the state of ASP.NET features (e.g. Session State, Membership, Output Cache etc.). In...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/22/announcing-asp-net-providers-connected-service-visual-studio-extension/","RawContent":null},{"Title":"A Penny Saved is a Ton of Serverless Compute Earned","PublishedOn":"2018-05-21T20:08:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Scott Guthrie recently shared one of my favorite anecdotes on his Azure Red Shirt Tour. A Microsoft customer regularly invokes 1 billion (yes, that’s with a “B”) Azure Functions per day. The customer...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/21/a-penny-saved-is-a-ton-of-serverless-compute-earned/","RawContent":null},{"Title":"Exploring Azure App Service – Web Apps and SQL Azure","PublishedOn":"2018-05-18T19:40:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There is a good chance that your web app uses a database. In my previous post introducing Azure App Service, I showed some of the benefits of hosting apps in Azure App Service, and how easy it is to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/18/exploring-azure-app-service-web-apps-and-sql-azure/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-rc1 now available","PublishedOn":"2018-05-07T18:00:55+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"Today we’re happy to announce the first release candidate of ASP.NET Core 2.1! This release should be very close to the final stable release of ASP.NET Core 2.1 and includes primarily bug fixes and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/07/asp-net-core-2-1-0-rc1-now-available/","RawContent":null},{"Title":"Exploring Azure App Service – Introduction","PublishedOn":"2018-05-02T23:01:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you ever needed to quickly stand up a web site, or web API app that was publicly available? Is your team or organization thinking about moving to the cloud but aren’t sure the best place to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/exploring-azure-app-service-introduction/","RawContent":null},{"Title":"Blazor 0.3.0 experimental release now available","PublishedOn":"2018-05-02T19:50:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Blazor 0.3.0 is now available! This release includes important bug fixes and many new feature enhancements. New features in this release (details below): Project templates updated to use Bootstrap 4...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/blazor-0-3-0-experimental-release-now-available/","RawContent":null},{"Title":"Announcing ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-05-02T19:35:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this release in the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/announcing-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"Cosmos DB Solves Common Data Challenges in App Development","PublishedOn":"2018-04-27T17:35:54+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"When considering how to implement your application with a relational database, it can change how you build it dramatically. Some of these challenges include adding an abstract implementation of the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/27/cosmos-db-solves-common-data-challenges/","RawContent":null},{"Title":"Publish Improvements in Visual Studio 2017 version 15.7","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today we released Visual Studio 2017 version 15.7. Our 15.7 update brings some exciting updates for publishing applications from Visual Studio that we’re excited to tell you about, including: Ability...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/visual-studio-2017-15-7-p4-publish/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7724928793","Type":"IssuesEvent","CreatedAt":"2018-05-24T16:22:00","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3166","RelatedDescription":"Closed issue \"HTTP POST Request loosing cookies when sent from Linux\" (#3166) at aspnet/Home","RelatedBody":"We have two ASP NET Core websites running in a Linux environment which communicate using HTTP requests.\r\n\r\nOn one server we are manually creating the new HTTP request and adding a provided cookie collection to the request like so:\r\n\r\n`CookieCollection cookies` is passed to the method\r\n\r\n```\r\n// Create the request\r\nvar request = WebRequest.CreateHttp(OtherServerUrl);\r\nrequest.Method = \"POST\";\r\nrequest.ContentType = \"application/json;charset=UTF-8\";\r\n\r\n// Add cookies if we have specified.\r\nif (cookies != null)\r\n{\r\n    // Create new cookie container if one does not exist.\r\n    if (request.CookieContainer == null)\r\n    request.CookieContainer = new CookieContainer();\r\n\r\n    // Add our cookies to the container.\r\n    request.CookieContainer.Add(cookies);\r\n}\r\n\r\nif (content != null)\r\n{\r\n    // Serialize the model\r\n    var JSONBody = JsonConvert.SerializeObject(content);\r\n\r\n    // Write the json into the request stream\r\n    using (var requestStream = await request.GetRequestStreamAsync())\r\n    using (var sw = new StreamWriter(requestStream))\r\n        await sw.WriteAsync(JSONBody);\r\n}\r\n\r\n// Get the request response as a HttpWebResponse\r\nvar response = (await request.GetResponseAsync()) as HttpWebResponse;\r\n.....\r\n```\r\n\r\nIn our use case, currently only a single cookie is being added, but we can see this if we output the request's cookie container; the cookie is in the request before it is sent. But when the request reaches the endpoint on the other server, the cookie container in the request contains 0 cookies.\r\n\r\nThe exact same code runs fine on Windows with the cookies being passed correctly, it only appears to occur on Linux.\r\n"},{"Id":"7724689383","Type":"IssuesEvent","CreatedAt":"2018-05-24T15:42:52","Actor":"AdamRiddick","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3167","RelatedDescription":"Opened issue \".Net core 2.0 runs using dotnet command, but not through IIS\" (#3167) at aspnet/Home","RelatedBody":"Hi,\r\n\r\nI'm looking for more details debugging steps for the following issue, as I'm unable to find them;\r\n\r\n**An error occurred while starting the application.\r\n.NET Core 4.6.26328.01 X64 v4.0.0.0    |   Microsoft.AspNetCore.Hosting version 2.0.1-rtm-125    |    Microsoft Windows 10.0.14393    |   Need help?**\r\n\r\nI'm able to run the application in question using `dotnet my.project.dll` and I don't get any errors;\r\n\r\nHosting environment: Production\r\nContent root path: C:\\MyProject\\\r\nNow listening on: http://localhost:5000\r\nApplication started. Press Ctrl+C to shut down.\r\n\r\nand I can then access it fine on http://localhost:5000, but as soon as I attempt through IIS it fails.\r\n\r\nI've enabled stdout logging (and created the relevant folder), but nothing is created in the logs. We do use serilog from the application, and can see the request starting but get no further information;\r\n\r\nRequest starting HTTP/1.1 GET http://mywebsite.com 0\r\nFrom the source:  SourceContext Microsoft.AspNetCore.Hosting.Internal.WebHost\r\n\r\nThere is nothing in any IIS logs, event viewer and nothing appears in failed request tracing ... The application pool is configured correctly (Integrated, No managed code) and uses an application pool identity, which has the correct permissions to the folder in question.\r\n\r\nIs there any documentation I've missed on debugging the error where the application runs fine through the `dotnet` command but not through IIS, when no information is logged ?\r\n\r\nThanks,"},{"Id":"7722955466","Type":"IssuesEvent","CreatedAt":"2018-05-24T10:51:45","Actor":"FasettoAndrew","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3166","RelatedDescription":"Opened issue \"HTTP POST Request loosing cookies when sent from Linux\" (#3166) at aspnet/Home","RelatedBody":"We have two ASP NET Core websites running in a Linux environment which communicate using HTTP requests.\r\n\r\nOn one server we are manually creating the new HTTP request and adding a provided cookie collection to the request like so:\r\n\r\n`CookieCollection cookies` is passed to the method\r\n\r\n```\r\n// Create the request\r\nvar request = WebRequest.CreateHttp(OtherServerUrl);\r\nrequest.Method = \"POST\";\r\nrequest.ContentType = \"application/json;charset=UTF-8\";\r\n\r\n// Add cookies if we have specified.\r\nif (cookies != null)\r\n{\r\n    // Create new cookie container if one does not exist.\r\n    if (request.CookieContainer == null)\r\n    request.CookieContainer = new CookieContainer();\r\n\r\n    // Add our cookies to the container.\r\n    request.CookieContainer.Add(cookies);\r\n}\r\n\r\nif (content != null)\r\n{\r\n    // Serialize the model\r\n    var JSONBody = JsonConvert.SerializeObject(content);\r\n\r\n    // Write the json into the request stream\r\n    using (var requestStream = await request.GetRequestStreamAsync())\r\n    using (var sw = new StreamWriter(requestStream))\r\n        await sw.WriteAsync(JSONBody);\r\n}\r\n\r\n// Get the request response as a HttpWebResponse\r\nvar response = (await request.GetResponseAsync()) as HttpWebResponse;\r\n.....\r\n```\r\n\r\nIn our use case, currently only a single cookie is being added, but we can see this if we output the request's cookie container; the cookie is in the request before it is sent. But when the request reaches the endpoint on the other server, the cookie container in the request contains 0 cookies.\r\n\r\nThe exact same code runs fine on Windows with the cookies being passed correctly, it only appears to occur on Linux.\r\n"},{"Id":"7720986309","Type":"IssuesEvent","CreatedAt":"2018-05-24T02:28:53","Actor":"yhvicey","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3160","RelatedDescription":"Closed issue \"[Dependency Injection] Constraints about constructor injection?\" (#3160) at aspnet/Home","RelatedBody":"From [the doc](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.0#constructor-injection-behavior) it says:\r\n\r\n> Constructor injection requires that only one applicable constructor exist. Constructor overloads are supported, but only one overload can exist whose arguments can all be fulfilled by dependency injection. If more than one exists, your app will throw an `InvalidOperationException`\r\n\r\nI wrote a class like this:\r\n\r\n```csharp\r\nclass Entity : IEntity\r\n{\r\n    ...\r\n    public Entity() { }\r\n    public Entity(IService service) { this.service = service; }\r\n    private readonly IService service;\r\n    ...\r\n}\r\n```\r\n\r\nAnd register it like this:\r\n\r\n```csharp\r\n...\r\nvar factory = new DefaultServiceProviderFactory();\r\nvar builder1 = factory.CreateBuilder(new ServiceCollection());\r\nvar builder2 = factory.CreateBuilder(new ServiceCollection());\r\n\r\nbuilder1.AddTransient<IEntity, Entity>();\r\nvar provider1 = builder1.BuildServiceProvider();\r\n\r\nbuilder2.AddTransient<IEntity, Entity>();\r\nbuilder2.AddTransient<IService, Service>();\r\nvar provider2 = builder2.BuildServiceProvider();\r\n\r\nvar entity1 = provider1.GetService<IEntity>();\r\nvar entity2 = provider2.GetService<IEntity>();\r\n...\r\n```\r\n\r\nBut there is no exception. So is the constraint still exist?"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7727700922","Type":"IssuesEvent","CreatedAt":"2018-05-25T04:24:08","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2376","RelatedDescription":"Opened issue \"Disable AppVeyor\" (#2376) at aspnet/SignalR","RelatedBody":"We has a Jenkins now and it is faster (usually).\r\n\r\n* [ ] Disable AppVeyor (Pranav, Ryan and/or Nate can help here)\r\n* [ ] Delete `appveyor.yml` files"},{"Id":"7727673784","Type":"PullRequestEvent","CreatedAt":"2018-05-25T04:12:24","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2356","RelatedDescription":"Closed pull request \"[2.1.1] Use correct TaskCompletionSource ctor (#2261)\" (#2356) at aspnet/SignalR","RelatedBody":"Port #2261 to `release/2.1`\r\n\r\n⚠️⚠️⚠️ **DO NOT MERGE** ⚠️⚠️⚠️\r\n`release/2.1` has not yet been opened for servicing fixes.\r\n⚠️⚠️⚠️ **DO NOT MERGE** ⚠️⚠️⚠️"},{"Id":"7726961592","Type":"PullRequestEvent","CreatedAt":"2018-05-24T23:35:42","Actor":"DylanDmitri","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2375","RelatedDescription":"Opened pull request \"ping timeout changes\" (#2375) at aspnet/SignalR","RelatedBody":"GitHub should really have markdown support in the \"view diff\" window."}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7726531360","Type":"IssuesEvent","CreatedAt":"2018-05-24T21:33:19","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7609","RelatedDescription":"Closed issue \"ApiBehaviorApplicationModelProvider overwrites existing BindingInfo in entirety when inferring binding sources\" (#7609) at aspnet/Mvc","RelatedBody":"Problematic code: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/Internal/ApiBehaviorApplicationModelProvider.cs#L180-L186\r\n\r\nMore details:\r\n\r\n`ApiBehaviorApplicationModelProvider` attempts to infer `BindingSource` for parameters that do not already have a `BindingSource` specified. Typically a `BindingSource` is calculated for a parameter, when it has attribute such as `FromQuery` or it's a special type that `ModelMetadata` knows about (such as `CancellationToken`, `IFormFile`) or has a `ModelBinderType` specified (e.g. `[ModelBinder(typeof(SomeBinderType))]`.  When a `BindingSource` is inferred, the provider overwrites the `BindingInfo` for the parameter, discarding other pieces of `BindingInfo` such as `BinderModelName`, `IPropertyFilterProvider`, and `IRequestPredicateProvider`. \r\n\r\nHere's a scenario that's broken:\r\n\r\n```C#\r\n[ApiController]\r\npublic class TestController\r\n{\r\n    [HttpGet(\"api\")]\r\n    public IActionResult ModelBinderAttribute([ModelBinder(Name = \"top\")] int value);\r\n}\r\n```\r\n\r\nThe resulting `BindingInfo` for `value` would have a `null` `BinderModelName`\r\n\r\n"},{"Id":"7726531294","Type":"PullRequestEvent","CreatedAt":"2018-05-24T21:33:18","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7814","RelatedDescription":"Merged pull request \"[Fixes #7609] ApiBehaviorApplicationModelProvider overwrites existing…\" (#7814) at aspnet/Mvc","RelatedBody":"… BindingInfo in entirety when inferring binding sources"},{"Id":"7726495159","Type":"IssuesEvent","CreatedAt":"2018-05-24T21:25:18","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7803","RelatedDescription":"Closed issue \"Header binding with a nullable bool does not bind\" (#7803) at aspnet/Mvc","RelatedBody":"#### Is this a Bug or Feature request?:\r\n\r\nBug\r\n\r\n#### Steps to reproduce (preferrably a link to a GitHub repo with a repro project):\r\n\r\nCreate a controller that takes in a parameter using [FromHeader] binding whose data type is bool? and invoke it with a non-null value.\r\n\r\n#### Description of the problem:\r\n\r\nBinding a nullable bool from the header results in null for the passed in value, despite successful binding when the parameter is changed to a normal bool.\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\n\r\n\r\n<!--\r\n                                    --- NOTE ---\r\n1.  Try enabling logging (in the most verbose level) and see if the details help you in fixing\r\n    the issue you are seeing. Share the logs too if it helps in diagnosing the issue faster.\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging\r\n\r\n2.  If you are seeing an exception, include the full exceptions details (message and stack trace).\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling\r\n\r\n3.  If you believe you have an issue that affects the security of the platform please do\r\n    not create an issue, instead email your issue to 'secure@microsoft.com'. Your report may\r\n    be eligible for our bug bounty. More info: https://technet.microsoft.com/en-us/mt764065.aspx\r\n-->\r\n"},{"Id":"7725178771","Type":"IssuesEvent","CreatedAt":"2018-05-24T17:08:05","Actor":"bgribaudo","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7826","RelatedDescription":"Opened issue \"Extend Anchor Tag Helper to support multiple values for a given route data parameter\" (#7826) at aspnet/Mvc","RelatedBody":"Feature Request: Extend [Anchor Tag Helper](https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/built-in/anchor-tag-helper?view=aspnetcore-2.0)'s `asp-route-{value}` and `asp-all-route-data` properties to (properly) render parameters with multiple values.\r\n\r\nCurrently, ASP.Net Core MVC translates multiple values for a single query string parameter into an array. However, reversing the process—translating an array into a query string containing multiple values for  single argument—doesn't seem to be supported by Anchor Tag Helper.\r\n\r\n# Example:\r\nIf http://localhost:5000/SomeController/SomeAction?id=A&id=B is executed against the following action method:\r\n````\r\npublic IActionResult SomeAction(string[] id) { /* ... */ }\r\n````\r\nFunction argument `id` will be set to the equivalent of `new[] { \"A\", \"B\" }`.\r\n\r\nHowever, try using Anchor Tag Helper to create the above link by using an id parameter set to `new[] { \"A\", \"B\" }`: \r\n````\r\n<a asp-route-id=@Model.id>\r\n````\r\n\r\nIn the link that's output, the query string's id parameter is the equivalent of doing `.ToString()` on the array then escaping it:\r\n````\r\n?id=System.String%5B%5D\r\n````\r\n\r\nThe request is to change this behavior so that the query string is output as:\r\n````\r\n?id=A&amp;id=B\r\n````\r\nand to make the equivalent change to `asp-all-route-data` so that it supports similar functionality.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7720424047","Type":"IssuesEvent","CreatedAt":"2018-05-23T23:06:50","Actor":"MetalBreaker","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1804","RelatedDescription":"Opened issue \"Role being cached for too long\" (#1804) at aspnet/Identity","RelatedBody":"### Roles are cached for too long\r\nSo, I wanted to create an admin-only panel. That's all fine and dandy, and the mechanism ended up working. However, ASP.NET Core caches the role for too long (at first I thought it was my code), and if I add or remove the role, I have to either log out and then log back in or wait around ~10 minutes (don't quote me on that) for the admin-only panel to appear/disappear. It's very annoying.\r\n\r\n### Functional impact\r\nIf an admin gets demoted for abusing their powers, they will still have admin powers on the website until the cached role resets.\r\n\r\n### Minimal repro steps\r\n1. I'm using the current code:\r\n```\r\n@page\r\n@model App.Pages.Account.Manage.AdminPanelModel\r\n@{\r\n    ViewData[\"Title\"] = \"AdminPanel\";\r\n    var isAdmin = User.IsInRole(\"Admin\");\r\n}\r\n\r\n@if (isAdmin)\r\n{\r\n    <h2>Hello, fellow administrator.</h2>\r\n     //WIP\r\n}\r\nelse\r\n{\r\n    Response.StatusCode = (int)Microsoft.AspNetCore.Http.StatusCodes.Status401Unauthorized;\r\n    <h2>You are not authorized.</h2>\r\n}\r\n``` \r\nand creating the Admin role in Startup using RoleManager.\r\n2. Try adding/removing the role to/from the user.\r\nIf it's added to the user, the admin panel should pop up immediately.\r\nIf it's removed from the user, the admin panel should disappear.\r\n\r\n### Expected result\r\nChanges should be effective almost immediately.\r\n\r\n### Actual result\r\nChanges take a lot of time to go into effect."},{"Id":"7710231314","Type":"IssuesEvent","CreatedAt":"2018-05-22T11:44:33","Actor":"TETYYS","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1802","RelatedDescription":"Opened issue \"Cannot create a DbSet for 'IdentityUserClaim<string>' because this type is not included in the model for the context\" (#1802) at aspnet/Identity","RelatedBody":"2.1.0-rc1-final version throws `Cannot create a DbSet for 'IdentityUserClaim<string>' because this type is not included in the model for the context` exeption on `SignInManager<TUser>.PasswordSignInAsync`:\r\n\r\n```\r\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet<TEntity>.get_EntityType()\r\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet<TEntity>.get_EntityQueryable()\r\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet<TEntity>.System.Linq.IQueryable.get_Provider()\r\nSystem.Linq.Queryable.Where<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\r\nMicrosoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim>.GetClaimsAsync(TUser user, CancellationToken cancellationToken)\r\nMicrosoft.AspNetCore.Identity.UserManager<TUser>.GetClaimsAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser>.GenerateClaimsAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>.GenerateClaimsAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser>.CreateAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.CreateUserPrincipalAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.SignInAsync(TUser user, AuthenticationProperties authenticationProperties, string authenticationMethod)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.SignInOrTwoFactorAsync(TUser user, bool isPersistent, string loginProvider, bool bypassTwoFactor)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.PasswordSignInAsync(TUser user, string password, bool isPersistent, bool lockoutOnFailure)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.PasswordSignInAsync(string userName, string password, bool isPersistent, bool lockoutOnFailure)\r\nProject.Controllers.AccountController.Login(LoginViewModel model, string returnUrl) in AccountController.cs\r\n+ var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, lockoutOnFailure: false);\r\nMicrosoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+TaskOfIActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, object controller, object[] arguments)\r\nSystem.Threading.Tasks.ValueTask<TResult>.get_Result()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Localization.RequestLocalizationMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n```\r\n\r\nIssue does not occur on Windows, but occurs on Linux (both using Kestrel), downgrading to current stable version solves the issue.\r\n\r\nFailing:\r\n```\r\n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.1.0-rc1-final\" />\r\n<PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.1.0-rc1-final\" />\r\n```\r\nPassing:\r\n```\r\n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n<PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.3\" />\r\n```"},{"Id":"7707347705","Type":"IssuesEvent","CreatedAt":"2018-05-21T22:17:43","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1799","RelatedDescription":"Closed issue \"Unusual behavior when implementing IUserSecurityStampStore\" (#1799) at aspnet/Identity","RelatedBody":"I am implementing Custom Stores without Entity Framework. But there seems to be a problem because `UserManager` always changes `SecurityStamp` prior to calling `IUserStore.Update`. Which results in failing of `IUserStore.Update` because persisted `SecurityStamp` and Current Security Stamp do not match. This behavior forces implementation of Custom Stores to use Entity Framework or some other equivalent ORM. Setting new `SecurityStamp` should be responsibility of `IUserStore.Update` and `IUserStore.Create`. Is this behavior by design?\r\n"},{"Id":"7707346531","Type":"PullRequestEvent","CreatedAt":"2018-05-21T22:17:22","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1801","RelatedDescription":"Opened pull request \"Add additional test assertions\" (#1801) at aspnet/Identity","RelatedBody":""}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7726819825","Type":"PullRequestEvent","CreatedAt":"2018-05-24T22:49:00","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2614","RelatedDescription":"Opened pull request \"Lower severity of AuthenticationException logs from SslStream handshake\" (#2614) at aspnet/KestrelHttpServer","RelatedBody":"#2605 \r\n\r\n@bartonjs @stephentoub "},{"Id":"7725459899","Type":"IssuesEvent","CreatedAt":"2018-05-24T18:02:18","Actor":"las3r","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2613","RelatedDescription":"Opened issue \"Guidance on shared hosting platform needed\" (#2613) at aspnet/KestrelHttpServer","RelatedBody":"I've scourned the documentation as well as the (mostly excellent) guides out there and I'm still left with a few questions regarding my situation that I can't seem to find answered anywhere.\r\n\r\nWe all know the shared-hosting LAMP stacks that hosting companies offer for 'cheaper' hosting. I'm trying to plug in to one of these hosting panels by integrating Kestrel so that end-customers can not only run PHP and HTML apps, but also choose to run .net core on their shared linux hosting provider.\r\n\r\nWith shared hosting come many responsibilities, such as making sure that some settings are enforced from the host, rather than the application and this is exactly where my problem lies. I am wondering if there is a way to override kestrel default settings outside of the running ip and port. Basically I'd like a way to e.g. limit memory usage, limit response / processing times, limit request sizes on a per-app basis overwriting (or limiting) the developer of the app in basically claiming all the \"shared\" space on a shared hosting server.\r\n\r\nI think .net core is fantastic, but not everyone is hosting IIS servers or Azure Web Apps and this might enable a wider audience to not only use but also host their .net core apps.\r\n\r\nHave you thought about this use case? Are there any plans on supporting this business case and thus plans for supporting usage on shared hosts?"},{"Id":"7720786975","Type":"PullRequestEvent","CreatedAt":"2018-05-24T01:15:21","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2612","RelatedDescription":"Opened pull request \"Handle client and server aborts differently\" (#2612) at aspnet/KestrelHttpServer","RelatedBody":"#2608"},{"Id":"7720537143","Type":"IssuesEvent","CreatedAt":"2018-05-23T23:42:42","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2609","RelatedDescription":"Closed issue \"Flaky Test: HeartbeatTests on Travis\" (#2609) at aspnet/KestrelHttpServer","RelatedBody":"E.g.:\r\n\r\n```\r\nStarting test group: UnitTests/netcoreapp2.2\r\n  Microsoft (R) Test Execution Command Line Tool Version 15.7.0\r\n  Copyright (c) Microsoft Corporation.  All rights reserved.\r\n  \r\n  Starting test execution, please wait...\r\n  [xUnit.net 00:00:14.6094487]     BlockedHeartbeatDoesntCauseOverlapsAndIsLoggedAsError [FAIL]\r\n  Failed   BlockedHeartbeatDoesntCauseOverlapsAndIsLoggedAsError\r\nRUNDOTNET : error Message:  [/home/travis/.dotnet/buildtools/korebuild/2.2.0-preview1-17060/KoreBuild.proj]\r\n   Assert.True() Failure\r\n  Expected: True\r\n  Actual:   False\r\n  Stack Trace:\r\n     at Microsoft.AspNetCore.Server.Kestrel.Core.Tests.HeartbeatTests.BlockedHeartbeatDoesntCauseOverlapsAndIsLoggedAsError() in /_/test/Kestrel.Core.Tests/HeartbeatTests.cs:line 43\r\n  [xUnit.net 00:00:16.6720891]     BlockedHeartbeatIsNotLoggedAsErrorIfDebuggerAttached [FAIL]\r\n  Failed   BlockedHeartbeatIsNotLoggedAsErrorIfDebuggerAttached\r\nRUNDOTNET : error Message:  [/home/travis/.dotnet/buildtools/korebuild/2.2.0-preview1-17060/KoreBuild.proj]\r\n   Moq.MockException : \r\n  Expected invocation on the mock once, but was 2 times: h => h.OnHeartbeat(5/23/18 5:14:58 PM +00:00)\r\n  \r\n  Configured setups:\r\n  h => h.OnHeartbeat(5/23/18 5:14:58 PM +00:00), Times.Exactly(2)\r\n  \r\n  Performed invocations:\r\n  IHeartbeatHandler.OnHeartbeat(5/23/18 5:14:58 PM +00:00)\r\n  IHeartbeatHandler.OnHeartbeat(5/23/18 5:14:58 PM +00:00)\r\n  Stack Trace:\r\n     at Moq.Mock.ThrowVerifyException(MethodCall expected, IEnumerable`1 setups, IEnumerable`1 actualCalls, Expression expression, Times times, Int32 callCount)\r\n     at Moq.Mock.VerifyCalls(Interceptor targetInterceptor, MethodCall expected, Expression expression, Times times)\r\n     at Moq.Mock.Verify[T](Mock`1 mock, Expression`1 expression, Times times, String failMessage)\r\n     at Microsoft.AspNetCore.Server.Kestrel.Core.Tests.HeartbeatTests.BlockedHeartbeatIsNotLoggedAsErrorIfDebuggerAttached() in /_/test/Kestrel.Core.Tests/HeartbeatTests.cs:line 76\r\n```\r\n\r\nhttps://travis-ci.org/aspnet/KestrelHttpServer/jobs/382784143#L884"},{"Id":"7720396787","Type":"PullRequestEvent","CreatedAt":"2018-05-23T22:58:35","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2610","RelatedDescription":"Merged pull request \"Don't block so many threads in HeartbeatTests\" (#2610) at aspnet/KestrelHttpServer","RelatedBody":"#2609"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7725869525","Type":"PullRequestEvent","CreatedAt":"2018-05-24T19:20:59","Actor":"ryanbrandenburg","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2370","RelatedDescription":"Merged pull request \"Don't police netcoreapp version\" (#2370) at aspnet/Razor","RelatedBody":"Some of the tests in this repo fail when we move to the new netcoreapp due to a new check, let's disable the check."},{"Id":"7725792534","Type":"PullRequestEvent","CreatedAt":"2018-05-24T19:05:15","Actor":"ryanbrandenburg","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2370","RelatedDescription":"Opened pull request \"Don't police netcoreapp version\" (#2370) at aspnet/Razor","RelatedBody":"Some of the tests in this repo fail when we move to the new netcoreapp due to a new check, let's disable the check."},{"Id":"7725755335","Type":"IssuesEvent","CreatedAt":"2018-05-24T18:58:01","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2220","RelatedDescription":"Closed issue \"RazorSdk_UsesUseSharedCompilationToSetDefaultValueOfUseRazorBuildServer fails on OSX High Sierra containing VS for Mac.\" (#2220) at aspnet/Razor","RelatedBody":"```\r\nFailed   RazorSdk_UsesUseSharedCompilationToSetDefaultValueOfUseRazorBuildServer\r\nError Message:\r\n System.TimeoutException : command '$dotnet msbuild /restore /p:_RazorBuildServerPipeName=4ec0f162-6a02-42b0-ae53-2e14f9230925 /t:Build /p:Configuration=Debug /t:_IntrospectUseRazorBuildServer /p:UseSharedCompilation=false' timed out after 00:01:00.\r\nStack Trace:\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.MSBuildProcessManager.<>c__DisplayClass0_0.<RunProcessAsync>b__0(Task t) in /Users/ntaylormullen/Documents/GitHub/Razor/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/MSBuildProcessManager.cs:line 80\r\n   at System.Threading.Tasks.ContinuationResultTaskFromTask`1.InnerInvoke()\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.BuildIntrospectionTest.<RazorSdk_UsesUseSharedCompilationToSetDefaultValueOfUseRazorBuildServer>d__3.MoveNext() in /Users/ntaylormullen/Documents/GitHub/Razor/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/BuildIntrospectionTest.cs:line 43\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```"},{"Id":"7720522357","Type":"IssuesEvent","CreatedAt":"2018-05-23T23:37:47","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2369","RelatedDescription":"Opened issue \"Port https://github.com/aspnet/Razor/issues/2363 to 2.1.1\" (#2369) at aspnet/Razor","RelatedBody":"Issue: https://github.com/aspnet/Razor/issues/2363\r\n\r\nPR: https://github.com/aspnet/Razor/pull/2368"},{"Id":"7720500303","Type":"PullRequestEvent","CreatedAt":"2018-05-23T23:30:50","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2368","RelatedDescription":"Opened pull request \"Allow publish to work when BuildProjectReferences=false\" (#2368) at aspnet/Razor","RelatedBody":"Fixes #2363"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7707144427","Type":"IssuesEvent","CreatedAt":"2018-05-21T21:26:33","Actor":"Fosol","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/146","RelatedDescription":"Closed issue \"How to nest files in a DNX project?\" (#146) at aspnet/Tooling","RelatedBody":"My search for answers has led me here.\n\nBy default a DNX project nest files like config.json -> config.debug.json\n\nI want to be able to nest files like config.json -> config.development.debug.json\n\nHow do I do this? I can no longer edit my project file to do this because someone has decided to extract all that functionality and hide it away in some black box. \n\nFeel free to point me to the right place to ask this question.\n\nThanks,\n Jeremy\n"},{"Id":"7687608828","Type":"IssuesEvent","CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072) at aspnet/Tooling","RelatedBody":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n"},{"Id":"7686968343","Type":"IssuesEvent","CreatedAt":"2018-05-17T02:31:07","Actor":"Pichasepong","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Opened issue \"can not upload file FTPS. \" (#1072) at aspnet/Tooling","RelatedBody":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40153549-85278454-59b4-11e8-9b07-621a5de873f8.png)\r\n"},{"Id":"7686951810","Type":"IssuesEvent","CreatedAt":"2018-05-17T02:25:02","Actor":"Pichasepong","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1060","RelatedDescription":"Closed issue \"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. \" (#1060) at aspnet/Tooling","RelatedBody":"Problems installing on Server 2012 R2 ,Dot net core 1.0.1 vs 2015 tooling preview 2 error logs file.\r\n\r\n![product_dotnetcoreerror](https://user-images.githubusercontent.com/12063904/31985990-040a5f72-b991-11e7-9356-ddd06160a87c.jpg)\r\n"},{"Id":"7582805417","Type":"IssuesEvent","CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Opened issue \" Unable to start debugging\" (#1071) at aspnet/Tooling","RelatedBody":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n"},{"Id":"7576035394","Type":"IssuesEvent","CreatedAt":"2018-04-24T05:17:55","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070) at aspnet/Tooling","RelatedBody":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger."},{"Id":"7567897452","Type":"IssuesEvent","CreatedAt":"2018-04-22T14:52:17","Actor":"rberger247","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Opened issue \"Visual studio freezes when I run add-migration \" (#1070) at aspnet/Tooling","RelatedBody":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7671761413","Type":"IssuesEvent","CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Opened issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301) at aspnet/Announcements","RelatedBody":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*"},{"Id":"7644982634","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:07:05","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Opened issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Kestrel/issues/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_"},{"Id":"7630948535","Type":"IssuesEvent","CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Opened issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299) at aspnet/Announcements","RelatedBody":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"996435611354447872","CreatedAt":"2018-05-15T17:02:17+00:00","UserScreenname":"aspnet","Text":"And we're live! Join us as https://t.co/3dFxSj11IQ https://t.co/PAZDWtuk1r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"996432221497057285","CreatedAt":"2018-05-15T16:48:49+00:00","UserScreenname":"aspnet","Text":"Starting soon - join us for an MVC Functional Testing overview with Javier Calvarro Nelson at… https://t.co/FavBvWbz0w","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":3,"RawContent":null},{"Id":"996146847939883009","CreatedAt":"2018-05-14T21:54:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nMVC Functional Testing with Javier Calvarro Nelson… https://t.co/twYeUUd1RO","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":30,"FavoriteCount":15,"RawContent":null},{"Id":"993841130545426433","CreatedAt":"2018-05-08T13:12:44+00:00","UserScreenname":"aspnet","Text":"Jeff will be pair-programming using @VisualStudio Live Share on an @aspnet Core project with YOU at the Live Share… https://t.co/i0sm9cCOGz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":2,"RawContent":null},{"Id":"991768334419902464","CreatedAt":"2018-05-02T19:56:11+00:00","UserScreenname":"aspnet","Text":"Blazor 0.3.0 experimental release now available\n\nhttps://t.co/2ixEeVbBbN https://t.co/3VB4sDxvwR","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":484,"FavoriteCount":273,"RawContent":null},{"Id":"991361559426314241","CreatedAt":"2018-05-01T16:59:49+00:00","UserScreenname":"aspnet","Text":"We're live! Join us at https://t.co/4Ioo9jNSN2 https://t.co/uGAnWHOWD5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":4,"RawContent":null},{"Id":"991092623849865217","CreatedAt":"2018-04-30T23:11:09+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nSignalR and Project Bedrock updates with @davidfowl… https://t.co/B8XmP5YkCW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":35,"RawContent":null},{"Id":"989160632908791808","CreatedAt":"2018-04-25T15:14:07+00:00","UserScreenname":"aspnet","Text":"Do you have questions about how to work with ASPNet Core Identity?  Check out the video from yesterday's session wi… https://t.co/hjaoJRCR7l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":14,"RawContent":null},{"Id":"988913487190544384","CreatedAt":"2018-04-24T22:52:03+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988873497614024704","CreatedAt":"2018-04-24T20:13:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/dCyzj19KZU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988762250331676673","CreatedAt":"2018-04-24T12:51:05+00:00","UserScreenname":"aspnet","Text":"Our @csharpfritz and @coolcsh will be broadcasting LIVE from @ch9 studios and answering your questions today about… https://t.co/d37Sob12rv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"986683993180590080","CreatedAt":"2018-04-18T19:12:50+00:00","UserScreenname":"aspnet","Text":"Tune in to the @PhillyDotNet user group today at 6pm ET / 3pm PT to learn more about Blazor from our MVP Chris Gome… https://t.co/D6svQPb95X","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"986310111256858624","CreatedAt":"2018-04-17T18:27:09+00:00","UserScreenname":"aspnet","Text":"Blazor 0.2.0 release now available https://t.co/rFE8xvlvM3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":249,"FavoriteCount":148,"RawContent":null}]}},"RunOn":"2018-05-25T05:30:14.2022225Z","RunDurationInMilliseconds":8341}