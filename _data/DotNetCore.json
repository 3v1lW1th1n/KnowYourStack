{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)","PublishedOn":"2018-05-24T01:49:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)","PublishedOn":"2018-05-21T22:44:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10","PublishedOn":"2018-05-17T17:20:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1703 (Creators Update) and Windows 10 1607 (Anniversary Update). Quality and Reliability This release contains the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup","PublishedOn":"2018-05-15T18:10:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Resolves an issue in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core May 2018 Update","PublishedOn":"2018-05-08T22:31:30+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2018 Update. This update includes .NET Core 2.1.200 SDK and ASP.NET Core 2.0.8. Security Microsoft is releasing this security advisory to provide information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/","RawContent":null},{"Title":".NET Framework May 2018 Security and Quality Rollup","PublishedOn":"2018-05-08T21:18:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Security and Quality Rollup. Security CVE-2018-1039 – Windows Security Feature Bypass Vulnerability A security feature bypass vulnerability exists in Windows which...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.7","PublishedOn":"2018-05-08T18:22:06+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We’re excited to share updates about changes to F# and F# tools which shipped with the Visual Studio 2017 version 15.7 release. Let’s dive in! Type Providers now support .NET Standard For those who...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/f-language-and-tools-update-for-visual-studio-2017-version-15-7/","RawContent":null},{"Title":"Introducing ML.NET: Cross-platform, Proven and Open Source Machine Learning Framework","PublishedOn":"2018-05-08T00:41:28+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"Today at //Build 2018, we are excited to announce the preview of ML.NET, a cross-platform, open source machine learning framework. ML.NET will allow .NET developers to develop their own models and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 RC 1","PublishedOn":"2018-05-07T18:00:05+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Today, we are excited to announce that the first release candidate of EF Core 2.1 is available, alongside .NET Core 2.1 RC 1 and ASP.NET Core 2.1 RC 1, for broad testing, and now also for production...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-entity-framework-core-2-1-rc-1/","RawContent":null},{"Title":".NET Core 3 and Support for Windows Desktop Applications","PublishedOn":"2018-05-07T15:40:04+00:00","CommentsCount":289,"FacebookCount":0,"Summary":"At Microsoft Build Live today, we are sharing a first look at our plans for .NET Core 3. The highlight of .NET Core 3 is support for Windows desktop applications, specifically Windows Forms, Windows...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7697523628","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:02","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Merged pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7697521624","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:34","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Merged pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415"},{"Id":"7697519505","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Merged pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""},{"Id":"7697516495","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:04:23","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/101","RelatedDescription":"Merged pull request \"Create mlnet.md\" (#101) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7719029569","Type":"IssuesEvent","CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil\" (#70) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n"},{"Id":"7660843516","Type":"IssuesEvent","CreatedAt":"2018-05-11T12:12:46","Actor":"Longvimol","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/69","RelatedDescription":"Opened issue \"Dotnet / announcement \" (#69) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\n"},{"Id":"7644965785","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:03:40","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to ASP.NET Core 2.0.8.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to 2.0.8 to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_"},{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7740329428","Type":"IssuesEvent","CreatedAt":"2018-05-28T20:57:36","Actor":"A-And","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18156","RelatedDescription":"Opened issue \"Run CoreFX tests as default PR-triggered CI jobs \" (#18156) at dotnet/coreclr","RelatedBody":"# CoreFX CI Testing Scenario for CoreCLR #\r\n\r\n## Current State of CoreFX testing in CoreCLR\r\nCurrently, the CoreCLR repos runs CoreFX tests by checking out the CoreFX repository at a specified commit (or HEAD by default), building the repo on top of the runtime to test, building all tests and subsequently running them.  These jobs run post-check-in in multiple different stress configurations.\r\nWhile this approach is flexible, a few details make it less suited to be used in CI. Firstly, breaking changes can creep in due to CoreFX version mismatches. Secondly, this process is time-consuming and storage-heavy which is not ideal for quick PR runs. Thirdly, in the current state, the way to skip running tests is by annotating the test code itself with XUnit annotations, requiring changes to be made in both repos and slowing down development, \r\n\r\n## Current State of CoreFX testing in CoreRT (Proof of Concept)\r\nWhen Helix runs CoreFX tests, the produced project and test binaries are saved and kept for a limited time. A Test List is produced on every build with the URLs of the binaries. These built test assemblies can be reused for CI jobs allowing a quicker and less resource-intensive way to test changes made to the runtime.\r\nIn CoreRT a small subset of framework tests run for every PR. These tests are not built locally, but instead an already built set of tests is saved in blob storage and downloaded on request. Each test project includes a XUnit test runner, eliminating the need to build it independently.\r\nA minimal test “harness” (in the form of a dummy `.csproj` file) is used to allow NuGet package dependencies to be resolved for the project. \r\nOur XUnit console wrapper, produced and published from the build tools repo, allows unstable and failing tests to be disabled via command line switches and/or `.rsp` files. Test runs are defined via JSON files in the repository, which define both which tests to run (e.g. `System.Collections.Tests.dll`), as well as which tests should be excluded – defined either by fully-qualified name, their class or namespace, with a required reason for exclusion (validated on every test run). The feature will allow CI checks to pass even if a breaking change is propagating - the failing test(s) can be added to the exclusion list with a link to the associated issue or other reason for skipping during test runs, avoiding the need to make any modifications to CoreFX-side test code. \r\n\r\nThis gives a large degree of flexibility in defining test runs – each definition can be created as an easily extensible JSON file. Utilizing the enforced JSON schema, additional tooling can be built around the framework – for example, validity of exclusions can be tracked by an associated link to a GitHub issue. The validity of issues can be checked on each test run – using a library/tool similar to [Octokit.NET]( https://github.com/octokit/octokit.net ) .\r\n\r\n## Proposal\r\nThe approach taken in CoreRT will be extended to cover CoreCLR. Running the locally-built instance will be done following the instructions to using built-binaries with the dotnet CLI, defined in [the UsingDotNetCli file in the CoreCLR repo](https://github.com/dotnet/coreclr/blob/master/Documentation/workflow/UsingDotNetCli.md).\r\n\r\nThe established infrastructure pattern can be mostly reused – a test harness will be used to define references to both dependencies and the NuGet packages built from the CoreCLR instance to be tested. It will also include the XUnit test executable and a nuget.config file, defining the path to the local NuGet packages. A test list will sit in the root of the blob storage instance, with URL values of each test for supported configurations (e.g. Windows_NT x64). Once tests are run with a specified configuration, the test list will be read and the test suites at the relevant URLs downloaded.\r\n\r\nEach test flight’s included test assemblies and method/class/namespace exclusions will be defined via a JSON file. The test assemblies can be automatically updated and replaced in blob storage by running a full CoreFX build for each respective configuration. For the current work, built CoreFX test assemblies will be copied into separate blob storage to be used by the CI setup. \r\n\r\nOutside of the scope of this proposal, binary management can be automated by adding features to dotnet-maestro-bot, updating the test assemblies on every update to the current CoreFX version.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7741269132","Type":"IssuesEvent","CreatedAt":"2018-05-29T04:34:46","Actor":"amshekar","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/759","RelatedDescription":"Opened issue \"Method not found: 'System.String Microsoft.VisualBasic.Strings.Left(System.String)'.'\" (#759) at dotnet/standard","RelatedBody":"Hello .NET Standard Team,\r\nI'm not sure the right way/place to ask this question but I'm hoping you can help me out or point me in the right direction.\r\n\r\nWe have a .Net core 2.0 webapi project and want to call a old vb.net method(no option or approval to rewrite). The method have some string functions like Left,right,space and trim . We added the DLL as a reference . But in runtime we are getting method not found exception.\r\n\r\n```\r\nMethod not found: 'System.String Microsoft.VisualBasic.Strings.Left(System.String)'.'\r\nMethod not found: 'System.String Microsoft.VisualBasic.Strings.Space(System.String)'.'\r\nMethod not found: 'System.String Microsoft.VisualBasic.Strings.Right(System.String)'.'\r\n```\r\n\r\n Even tried writting wrapper built on standard on top of VB.net DLL . Core2.0 webapi to wrapper built on standard from there to vb.net dll built on framework 4.6.2 no luck.\r\n\r\nPlease suggest need to goback from core to .netframework or is there any possibility to consume the vb.net dll without or minimal modification.\r\n\r\n\r\nhttps://github.com/csreehari/FxReferenceConsoleAppCore"},{"Id":"7738175004","Type":"IssuesEvent","CreatedAt":"2018-05-28T10:58:04","Actor":"AmeetShinde","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/758","RelatedDescription":"Opened issue \"Not able to trim packages on RHEL 6 platform\" (#758) at dotnet/standard","RelatedBody":"We are using following version of Microsoft.Packaging.Tools.Trimming package with the 2.1.3_RC1 build of dotnet SDK on RHEL 6.7 platform\r\n\r\n<PackageReference Include=\"Microsoft.Packaging.Tools.Trimming\" Version=\"1.1.0-preview1-25818-01\" />\r\n\r\nWe get the following error on dotnet build command\r\n\r\n/home/SymantecDLP/.nuget/packages/microsoft.packaging.tools.trimming/1.1.0-preview1-25818-01/build/Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: The \"TrimFiles\" task failed unexpectedly. [/home/SymantecDLP/Perforce/amit_shinde_RHEL67RHDT61DEV_8991/depot/main/dev/managed/src/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor.csproj]\r\n/home/SymantecDLP/.nuget/packages/microsoft.packaging.tools.trimming/1.1.0-preview1-25818-01/build/Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: System.Exception: Root package Microsoft.NETCore.App was specified but was not found in PackageDependencies [/home/SymantecDLP/Perforce/amit_shinde_RHEL67RHDT61DEV_8991/depot/main/dev/managed/src/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor.csproj]\r\n/home/SymantecDLP/.nuget/packages/microsoft.packaging.tools.trimming/1.1.0-preview1-25818-01/build/Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.TrimFiles.GetPackageRoots(IDictionary`2 packages, Trimmable trimmable) [/home/SymantecDLP/Perforce/amit_shinde_RHEL67RHDT61DEV_8991/depot/main/dev/managed/src/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor.csproj]\r\n/home/SymantecDLP/.nuget/packages/microsoft.packaging.tools.trimming/1.1.0-preview1-25818-01/build/Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.TrimFiles.Execute() [/home/SymantecDLP/Perforce/amit_shinde_RHEL67RHDT61DEV_8991/depot/main/dev/managed/src/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor.csproj]\r\n/home/SymantecDLP/.nuget/packages/microsoft.packaging.tools.trimming/1.1.0-preview1-25818-01/build/Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/home/SymantecDLP/Perforce/amit_shinde_RHEL67RHDT61DEV_8991/depot/main/dev/managed/src/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor.csproj]\r\n/home/SymantecDLP/.nuget/packages/microsoft.packaging.tools.trimming/1.1.0-preview1-25818-01/build/Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/home/SymantecDLP/Perforce/amit_shinde_RHEL67RHDT61DEV_8991/depot/main/dev/managed/src/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor/OfficeOpenXMLContentExtractor.csproj]\r\n"},{"Id":"7736415324","Type":"IssuesEvent","CreatedAt":"2018-05-28T02:03:11","Actor":"briangmay85","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/757","RelatedDescription":"Closed issue \"s\" (#757) at dotnet/standard","RelatedBody":""},{"Id":"7736414563","Type":"IssuesEvent","CreatedAt":"2018-05-28T02:02:53","Actor":"briangmay85","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/757","RelatedDescription":"Opened issue \"s\" (#757) at dotnet/standard","RelatedBody":""},{"Id":"7734621172","Type":"IssuesEvent","CreatedAt":"2018-05-27T04:16:47","Actor":"weitzhandler","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/756","RelatedDescription":"Opened issue \".NET UI Standard\" (#756) at dotnet/standard","RelatedBody":"Hi,\r\n\r\nThe .NET Standard was a great solution to overcome the various shapes of .NET and all its flavors.\r\n\r\nMaybe it's time to implement a .NET UI standard?\r\nIt will be a library of contracts for controls, layouts, user-input event hooks, navigation, styling, responsive adaptations, animations, shapes, and basically all tools a decent UI library is supposed to offer.\r\nMaybe even an opinionated default theme.\r\n\r\nThis will allow .NET UI Standard providers (be it WPF, UWP, Xamarin.Forms, Avalonia, and even web technologies, like ASP.NET Core), to implement renderers for the same UI in any platform while giving the developer the option to reuse the same UI structure.\r\nWe may consider using XAML as the language to describe those UIs but the core shouldn't be XAML but rather a CLR-based set of interfaces.\r\n\r\nRelated:\r\n- [Xamarin.Forms Drawing Spec](https://github.com/xamarin/Xamarin.Forms/issues/2452)\r\n- [Is XAML Standard dead?](https://github.com/Microsoft/xaml-standard/issues/230)\r\n- [YouTube: The Future of .NET on the Desktop](https://www.youtube.com/watch?v=tkiPcCHGngY)"},{"Id":"7731385459","Type":"PullRequestEvent","CreatedAt":"2018-05-25T18:04:43","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/754","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02824-02 (master)\" (#754) at dotnet/standard","RelatedBody":""},{"Id":"7729089441","Type":"IssuesEvent","CreatedAt":"2018-05-25T10:17:49","Actor":"VitalickS","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/755","RelatedDescription":"Opened issue \"Assembly incapsulation mechanizm not implemented\" (#755) at dotnet/standard","RelatedBody":"Hi. It was surprise for me, that I cannot use standard incapsulation in new dotnet core. I want separate 3 standard architecture layers for DAL, BLL, WebClient, but when I referenced it, I can see and call DAL methods in WebClient. Google has no answer, but it seems like you don't care about it. Can you help me with my problem?\r\n\r\nIn short words I attach simple image \r\n![3 layers](https://user-images.githubusercontent.com/10177561/40539622-f6b851d8-601d-11e8-9660-84dadd7aff3c.png)\r\n"},{"Id":"7725722906","Type":"PullRequestEvent","CreatedAt":"2018-05-24T18:51:44","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/754","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02824-02 (master)\" (#754) at dotnet/standard","RelatedBody":""},{"Id":"7725600325","Type":"PullRequestEvent","CreatedAt":"2018-05-24T18:29:40","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/753","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02824-01 (master)\" (#753) at dotnet/standard","RelatedBody":""},{"Id":"7724780186","Type":"PullRequestEvent","CreatedAt":"2018-05-24T15:57:25","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/753","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02824-01 (master)\" (#753) at dotnet/standard","RelatedBody":""},{"Id":"7720571229","Type":"PullRequestEvent","CreatedAt":"2018-05-23T23:54:41","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/748","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02823-01 (master)\" (#748) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7741362256","Type":"PullRequestEvent","CreatedAt":"2018-05-29T05:16:25","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29950","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-26529-00, beta-26529-00, respectively (master)\" (#29950) at dotnet/corefx","RelatedBody":""},{"Id":"7741298137","Type":"IssuesEvent","CreatedAt":"2018-05-29T04:48:29","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/23139","RelatedDescription":"Closed issue \"Test failure: HttpClientEKUTest tests are disabled\" (#23139) at dotnet/corefx","RelatedBody":"These tests are disabled due to failures.  The failures need to be investigated to determine whether there's missing functionality, bugs, etc., or whether the tests should be fixed, aren't applicable, etc."},{"Id":"7741252266","Type":"PullRequestEvent","CreatedAt":"2018-05-29T04:26:45","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29949","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup to preview1-26529-01, preview1-26529-01, preview1-26528-03, respectively (master)\" (#29949) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7740948764","Type":"PullRequestEvent","CreatedAt":"2018-05-29T02:13:11","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5861","RelatedDescription":"Opened pull request \"Switch back to SC_NPROCESSORS_ONLN for WebAssembly\" (#5861) at dotnet/corert","RelatedBody":"Switch back to SC_NPROCESSORS_ONLN for WebAssembly because SC_NPROCESSORS_CONF isn't implemented in Emscripten. Fixes an assert on startup."},{"Id":"7737524190","Type":"IssuesEvent","CreatedAt":"2018-05-28T08:34:57","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5720","RelatedDescription":"Closed issue \"samples/WebApi doesn't work with .NET Core 2.1\" (#5720) at dotnet/corert","RelatedBody":"I encountered this on my own project, so I tried with the WebApi sample and got the same issue.\r\n\r\nI tested before changing anything and everything worked.\r\n\r\nI updated the `csproj` file to use 2.1 instead of 2.0, so it now looks like this:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <RdXmlFile Include=\"rd.xml\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.1.0-preview2-final\" /> \r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.1.0-preview2-final\" /> \r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Formatters.Json\" Version=\"2.1.0-preview2-final\" />     \r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nI had to remove the `Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv` entry from `rd.xml` because 2.1-preview2 no longer uses `libuv`.\r\n\r\nWith those changes, when I ran `dotnet publish -c Release -r win-x64` I got the following output:\r\n\r\n```\r\nλ  dotnet publish -c Release -r win-x64\r\nMicrosoft (R) Build Engine version 15.6.22.57775 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 52.32 ms for C:\\Labs\\dotnet\\corert\\samples\\WebApi\\SampleWebApi.csproj.\r\n  SampleWebApi -> C:\\Labs\\dotnet\\corert\\samples\\WebApi\\bin\\Release\\netcoreapp2.1\\win-x64\\SampleWebApi.dll\r\n  Generating native code\r\nEXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [C:\\Labs\\dotnet\\corert\\samples\\WebApi\\SampleWebApi.csproj]\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: System.Reflection.Emit.ILGenerator, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a [C:\\Labs\\dotnet\\corert\\samples\\WebApi\\SampleWebApi.csproj]\r\n  Internal.TypeSystem.TypeSystemException+TypeLoadException: [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: System.Reflection.Emit.ILGenerator, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n     at Internal.TypeSystem.ThrowHelper.ThrowTypeLoadException(ExceptionStringID id, String typeName, String assemblyName)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(String nameSpace, String name, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(String nameSpace, String name, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(SignatureTypeCode typeCode)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseFieldSignature()\r\n     at Internal.TypeSystem.Ecma.EcmaField.InitializeFieldType()\r\n     at Internal.TypeSystem.MetadataFieldLayoutAlgorithm.ComputeInstanceLayout(DefType defType, InstanceLayoutKind layoutKind)\r\n     at Internal.TypeSystem.DefType.ComputeInstanceLayout(InstanceLayoutKind layoutKind)\r\n     at ILCompiler.DependencyAnalysis.EETypeNode.CheckCanGenerateEEType(NodeFactory factory, TypeDesc type)\r\n     at ILCompiler.DependencyAnalysis.NodeFactory.<CreateNodeCaches>b__36_1(TypeDesc type)\r\n     at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n     at ILCompiler.Compilation.RootingServiceProvider.AddCompilationRoot(TypeDesc type, String reason)\r\n     at ILCompiler.RdXmlRootProvider.RootType(IRootingServiceProvider rootProvider, TypeDesc type)\r\n     at ILCompiler.RdXmlRootProvider.ProcessAssemblyDirective(IRootingServiceProvider rootProvider, XElement assemblyElement)\r\n     at ILCompiler.RdXmlRootProvider.AddCompilationRoots(IRootingServiceProvider rootProvider)\r\n     at ILCompiler.Compilation..ctor(DependencyAnalyzerBase`1 dependencyGraph, NodeFactory nodeFactory, IEnumerable`1 compilationRoots, DebugInformationProvider debugInformationProvider, DevirtualizationManager devirtualizationManager, Logger logger)\r\n     at ILCompiler.ILScannerBuilder.ToILScanner()\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\mark\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-26417-01\\build\\Microsoft.NETCore.Native.targets(172,5): error MSB3073: The command \"\"C:\\Users\\mark\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-26417-01\\tools\\ilc\" @\"obj\\Release\\netcoreapp2.1\\win-x64\\native\\SampleWebApi.ilc.rsp\"\" exited with code 1. [C:\\Labs\\dotnet\\corert\\samples\\WebApi\\SampleWebApi.csproj]\r\n```\r\n\r\n### Environment info\r\n\r\nWindows 10 Pro 1709 Build 16299.371\r\n\r\n```\r\n$ dotnet --version\r\n2.1.300-preview2-008530\r\n```"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"999498830528696320","CreatedAt":"2018-05-24T03:54:25+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803) https://t.co/U6TCTrPkfb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":9,"RawContent":null},{"Id":"998698514065510400","CreatedAt":"2018-05-21T22:54:15+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update) https://t.co/a0E1oZkvk2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-05-29T05:30:23.8559249Z","RunDurationInMilliseconds":8908}