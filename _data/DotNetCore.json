{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7220700664","Type":"IssuesEvent","CreatedAt":"2018-02-09T03:32:15","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16290","RelatedDescription":"Closed issue \"[x86][RyuJit][JitStress=1]JIT_HardwareIntrinsics._X86 fails\" (#16290) at dotnet/coreclr","RelatedBody":"4 Hardware intrinsics tests started to fail after https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_jitstress1/406/ with:\r\n`Assertion failed 'genActualType(lclTyp) == genActualType(op1->gtType) || genActualType(lclTyp) == TYP_I_IMPL && op1->IsVarAddr() || (genActualType(lclTyp) == TYP_I_IMPL && (op1->gtType == TYP_BYREF || op1->gtType == TYP_REF)) || (genActualType(op1->gtType) == TYP_I_IMPL && lclTyp == TYP_BYREF) || (varTypeIsFloating(lclTyp) && varTypeIsFloating(op1->TypeGet())) || ((genActualType(lclTyp) == TYP_BYREF) && genActualType(op1->TypeGet()) == TYP_REF)`"},{"Id":"7220664972","Type":"PullRequestEvent","CreatedAt":"2018-02-09T03:18:43","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16265","RelatedDescription":"Closed pull request \"Stacktrace reduce newline\" (#16265) at dotnet/coreclr","RelatedBody":"WIth #16245, there were duplicate newlines being printed for calls to ```Debug.Assert()``` failures:\r\n```\r\nE:\\test\\issue14867\\testConsole\\bin\\Debug\\netcoreapp2.0\\win7-x64\\publish>corerun testConsole.dll\r\nAssertion Failed\r\n\r\n\r\n   at debug3.Program.Main(String[] args) in E:\\test\\issue14867\\debug3\\Program.cs:line 11\r\n\r\n\r\nE:\\test\\issue14867\\testConsole\\bin\\Debug\\netcoreapp2.0\\win7-x64\\publish>\r\n```\r\n\r\nRemoving the additional newline printing in the FailFast logging on native side, but I added another newline when we print logs from Environment.FailFast() to prevent that one from regressing."},{"Id":"7220638475","Type":"IssuesEvent","CreatedAt":"2018-02-09T03:08:31","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16290","RelatedDescription":"Opened issue \"[x86][RyuJit][JitStress=1]JIT_HardwareIntrinsics._X86 fails\" (#16290) at dotnet/coreclr","RelatedBody":"4 Hardware intrinsics tests started to fail after https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_jitstress1/406/ with:\r\n`Assertion failed 'genActualType(lclTyp) == genActualType(op1->gtType) || genActualType(lclTyp) == TYP_I_IMPL && op1->IsVarAddr() || (genActualType(lclTyp) == TYP_I_IMPL && (op1->gtType == TYP_BYREF || op1->gtType == TYP_REF)) || (genActualType(op1->gtType) == TYP_I_IMPL && lclTyp == TYP_BYREF) || (varTypeIsFloating(lclTyp) && varTypeIsFloating(op1->TypeGet())) || ((genActualType(lclTyp) == TYP_BYREF) && genActualType(op1->TypeGet()) == TYP_REF)`"},{"Id":"7220523763","Type":"IssuesEvent","CreatedAt":"2018-02-09T02:27:19","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16289","RelatedDescription":"Opened issue \"debug/di/breakpoint.cpp generates warning C4800.\" (#16289) at dotnet/coreclr","RelatedBody":"The warning is 'BOOL': forcing value to bool 'true' or 'false' (performance warning).\r\nBecause all warnings are threated as errors it fails build.\r\n[Example](https://ci.dot.net/job/dotnet_coreclr/job/master/job/arm64_cross_checked_windows_nt_innerloop_flow_prtest/143/console).\r\nStarted to hit after #15819.\r\n\r\nThe full error report:\r\n```\r\nd:\\j\\workspace\\arm64_cross_c---f1ec3c8e\\src\\debug\\di\\breakpoint.cpp(210): error C2220: warning treated as error - no 'object' file generated [D:\\j\\workspace\\arm64_cross_c---f1ec3c8e\\bin\\obj\\Windows_NT.arm64.Checked\\src\\debug\\di\\cordbdi.vcxproj]\r\nd:\\j\\workspace\\arm64_cross_c---f1ec3c8e\\src\\debug\\di\\breakpoint.cpp(210): warning C4800: 'BOOL': forcing value to bool 'true' or 'false' (performance warning) [D:\\j\\workspace\\arm64_cross_c---f1ec3c8e\\bin\\obj\\Windows_NT.arm64.Checked\\src\\debug\\di\\cordbdi.vcxproj]\r\n```"},{"Id":"7220467075","Type":"PullRequestEvent","CreatedAt":"2018-02-09T02:07:26","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16288","RelatedDescription":"Opened pull request \"Fixing up fgValueNumberIntrinsic to use IsMathIntrinsic rather than checking individual cases.\" (#16288) at dotnet/coreclr","RelatedBody":"Resolves https://github.com/dotnet/coreclr/issues/16272 as per the suggested fix here: https://github.com/dotnet/coreclr/issues/16272#issuecomment-364287758"},{"Id":"7220437271","Type":"PullRequestEvent","CreatedAt":"2018-02-09T01:57:05","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15595","RelatedDescription":"Merged pull request \"Remove useless RangeCheck::Limit::keArray\" (#15595) at dotnet/coreclr","RelatedBody":"A `keArray` limit is basically an alternative representation for a `keBinOpArray` limit with a 0 constant. Such limits are only created in `MergeEdgeAssertions` and in many cases they're are immediatly transformed into `keBinOpArray` limits because the range limits are inclusive and the common `i < a.len` assertion needs to be represented as `Limit(keBinOpArray, vn(a.len), - 1)`. Once transformed into `keBinOpArray` a limit never becomes `keArray` again.\r\n\r\nNo jit diffs."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7220245721","Type":"PullRequestEvent","CreatedAt":"2018-02-09T00:52:23","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8526","RelatedDescription":"Merged pull request \"LOC CHECKIN | cli master | 20180202\" (#8526) at dotnet/cli","RelatedBody":null},{"Id":"7219959849","Type":"IssuesEvent","CreatedAt":"2018-02-08T23:24:35","Actor":"mattscheffer","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8573","RelatedDescription":"Opened issue \"Occasional install tool failure with multi-targeted projects\" (#8573) at dotnet/cli","RelatedBody":"This doesn't occur always. It happened to be in the initial attempt for this project type, but subsequent attempts work correctly. This also occurred on a shim scenario.\r\n\r\n## Steps to reproduce\r\nInstall latest .NET Core2.1 preview and latest D15.6\r\nOpen cmd prompt\r\ndotnet new console -n multi\r\nOpen the .csproj and change the file to:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>netcoreapp1.1;netcoreapp2.1</TargetFrameworks>\r\n    <PackAsTool>true</PackAsTool>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\nNavigate to the project folder and run: dotnet pack\r\nCopy the .nupkg file in the bin folder to a local NuGet drop.\r\ndotnet install tool -g multi\r\n\r\n## Expected  behavior\r\nThe package installs.\r\n\r\n## Actual behavior\r\nPackage fails to install. Output is the following:\r\n\r\n```\r\nc:\\Users\\v-masche\\Documents\\multi>dotnet install tool -g multi\r\nC:\\Users\\v-masche\\AppData\\Local\\Temp\\lc012hsr.xw2\\trudtbrw.dsa.csproj : warning NU1701: Package 'Multi 1.0.7' was restored using '.NETFramework,Version=v4.6.1' instead of the project target framework '.NETCoreApp,Version=v2.1'. This package may not be fully compatible with your project.\r\nC:\\Users\\v-masche\\AppData\\Local\\Temp\\lc012hsr.xw2\\trudtbrw.dsa.csproj : warning NU1701: Package 'YunkuEntSDK 3.0.0' was restored using '.NETFramework,Version=v4.6.1' instead of the project target framework '.NETCoreApp,Version=v2.1'. This package may not be fully compatible with your project.\r\nC:\\Users\\v-masche\\AppData\\Local\\Temp\\lc012hsr.xw2\\trudtbrw.dsa.csproj : error NU1212: Invalid project-package combination for Multi 1.0.7. DotnetToolReference project style can only contain references of the DotnetTool type\r\nThe tool package could not be restored.\r\nTool 'multi' failed to install.\r\n```\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.1.300-preview2-008162)\r\n\r\nProduct Information:\r\n Version:            2.1.300-preview2-008162\r\n Commit SHA-1 hash:  5a5a245658\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008162\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-26131-06\r\n  Build    : b13a0d5c331f374afd35ded57b9a4b4ab128864c\r\n\r\n"},{"Id":"7219892790","Type":"PullRequestEvent","CreatedAt":"2018-02-08T23:06:08","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8572","RelatedDescription":"Opened pull request \"Update Roslyn to beta1-62608-10 (master)\" (#8572) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7219408054","Type":"PullRequestEvent","CreatedAt":"2018-02-08T21:17:12","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8571","RelatedDescription":"Merged pull request \"Update SDK to 2.1.300-preview1-62608-06\" (#8571) at dotnet/cli","RelatedBody":""},{"Id":"7219391072","Type":"PullRequestEvent","CreatedAt":"2018-02-08T21:13:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8570","RelatedDescription":"Merged pull request \"Adding a baseline with files to be excluded from sign check.\" (#8570) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"7219241719","Type":"PullRequestEvent","CreatedAt":"2018-02-08T20:42:25","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8568","RelatedDescription":"Merged pull request \"Merge release/2.1.3xx into master\" (#8568) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7216779334","Type":"IssuesEvent","CreatedAt":"2018-02-08T13:03:09","Actor":"ddobrev","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/642","RelatedDescription":"Opened issue \"ServicePoint.ConnectionLeaseTimeout throws NotImplementedException\" (#642) at dotnet/standard","RelatedBody":"It's currently added but not implemented - I use it in a Xamarin.Forms project. This property is crucial for optimal work with HttpClient: http://www.nimaara.com/2016/11/01/beware-of-the-net-httpclient/, https://byterot.blogspot.bg/2016/07/singleton-httpclient-dns.html. There also exists a related issue for .NET Core at https://github.com/dotnet/corefx/issues/11224."},{"Id":"7213878144","Type":"PullRequestEvent","CreatedAt":"2018-02-07T23:19:15","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/636","RelatedDescription":"Merged pull request \"Update BuildTools to preview2-02507-02 (master)\" (#636) at dotnet/standard","RelatedBody":""},{"Id":"7213870359","Type":"IssuesEvent","CreatedAt":"2018-02-07T23:17:10","Actor":"davidfowl","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/68","RelatedDescription":"Closed issue \"Change link in the faq.md about the \"developer analogy\" from David Fowler\" (#68) at dotnet/standard","RelatedBody":"> I still don't get it. Can you provide an analogy that makes sense for a dev?\n> David Fowler provided a developer analogy that explains .NET Standard in terms of interfaces and classes.\n\nRefer to this page: https://github.com/davidfowl/NetStandard, instead of that gist ?\n"},{"Id":"7199153839","Type":"IssuesEvent","CreatedAt":"2018-02-05T15:09:33","Actor":"Sergio0694","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/641","RelatedDescription":"Opened issue \"API to check memory usage on UWP (the Process class is not supported)\" (#641) at dotnet/standard","RelatedBody":"Hello, this is related to #327 and you can see my original question on StackOverflow [here](https://stackoverflow.com/questions/48622947/how-to-get-process-memory-from-both-net-standard-2-0-and-uwp/48623215?noredirect=1#comment84245854_48623215).\r\n\r\nBasically, the issue is that using:\r\n\r\n   ```var memory = System.Diagnostics.Process.GetCurrentProcess().PrivateMemorySize64;```\r\n\r\nCrashes on UWP. In DEBUG mode, I get a `PlatformNotSupportedException`, while in RELEASE mode (possibly due to the .NET Native compiler) I get a `TypeLoadException` followed by a series of low-level exceptions, and apparently I can't catch any of these exceptions.\r\n\r\nEven placing the above line into a general `try/catch` block doesn't work, the app just crashes anyways.\r\n\r\nI understand the `Process` class is locked on UWP for security reasons, but there should be an API to at least be able to check the current memory usage (and CPU usage). Some \"read only\" APIs from the `Process` class that should be allowed on UWP too I mean.\r\n\r\nFor example, the .NET Standard `System.Diagnostics.Process.GetCurrentProcess().PrivateMemorySize64` call should have an equivalent API that gets mapped to `Windows.System.MemoryManager` APIs on UWP.\r\n\r\nIs there a workaround, and/or is this something planned in the future?\r\nThanks!\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7220981507","Type":"IssuesEvent","CreatedAt":"2018-02-09T05:30:03","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26983","RelatedDescription":"Opened issue \"CurlHandler: container cookies are not sent if you add a Cookie header to the header collection\" (#26983) at dotnet/corefx","RelatedBody":"If you add a Cookie header via\r\n\r\n```csharp\r\n                    requestMessage.Headers.Add(\"Cookie\", \"A=1\");\r\n```\r\n\r\nThis causes cookies from the cookie container to not be sent.\r\n\r\nWinHttpHandler appends the cookies from the cookie container to the specified Cookie: header."},{"Id":"7220897853","Type":"PullRequestEvent","CreatedAt":"2018-02-09T04:54:35","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26982","RelatedDescription":"Merged pull request \"Disable Http status line parsing test cases on CurlHandler\" (#26982) at dotnet/corefx","RelatedBody":"Closes: #26980"},{"Id":"7220897838","Type":"IssuesEvent","CreatedAt":"2018-02-09T04:54:35","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26980","RelatedDescription":"Closed issue \"[New test] Test failure: System.Net.Http.Functional.Tests.HttpProtocolTests / GetAsync_InvalidStatusLine_ThrowsException\" (#26980) at dotnet/corefx","RelatedBody":"[8 test cases](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.01/workItem/System.Net.Http.Functional.Tests) fail on Fedora27 and Ubuntu17.10 (probably due to different libcurl version which changed the behavior) - introduced in #26798\r\n* \"HTTP/1.1 \"\r\n* \"HTTP/1.1 !11\"\r\n* \"HTTP/1.1 \" (looks same as the first one - unclear why)\r\n* \"HTTP/1.1 a11\"\r\n* \"HTTP/1.1 abc\"\r\n* \"HTTP/1.1\\\\t\"\r\n* \"HTTP/1.1\\\\t\\\\t\"\r\n* \"HTTP/1.A 200 OK\"\r\n\r\nI would recommend to skip the test cases on CurlHandler in general."},{"Id":"7220834094","Type":"PullRequestEvent","CreatedAt":"2018-02-09T04:26:24","Actor":"VSadov","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26391","RelatedDescription":"Merged pull request \"Refactor and tests for MS.CSharp's GetBestAccessibleType()\" (#26391) at dotnet/corefx","RelatedBody":"* Rearrange `GetBestAccessibleType` to avoid repeated tests & recursion.\r\n\r\nKeep all code for `AggregateType` in the first branch for `AggregateType`, etc.\r\n\r\n* Use `ContextForMemberLookup` instead of `BindingContext` for best accessible\r\n\r\nThe `BindingContext` is only used for this property, which it hits repeatedly, so just pass it in instead.\r\n\r\n* Don't use intermediate variables for `out` parameters.\r\n\r\nIf just going to assign it to something anyway.\r\n\r\n* Return type directly from `GetBestAccessibleType()`\r\n\r\nThe type passed in can never be `ParameterModifierType` or `PointerType` so the case where false is returned can never be hit. Change to returning the accessible type directly, and remove branches for false returns.\r\n\r\n* Add tests for getting best accessible type."},{"Id":"7220822355","Type":"PullRequestEvent","CreatedAt":"2018-02-09T04:21:18","Actor":"VSadov","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26370","RelatedDescription":"Merged pull request \"Remove some dead branches from Microsoft.CSharp\" (#26370) at dotnet/corefx","RelatedBody":"* Don't report constrained in `AdjustMemberObject`.\r\n\r\nNever gets set, and constrained isn't meaningful when not producing IL directly.\r\n\r\n* Remove `FieldSymbol.isAssigned`\r\n\r\nSet but never used. CS0169 is meaningless in dynamic code.\r\n\r\n* Remove `objectIsLvalue(pOptionalObject)` from check field is lvalue.\r\n\r\nThis test will always pass, so the second part is all that is required.\r\n\r\n* Move lvalue-detection into `ExprField` ctor\r\n\r\n* Remove `objectIsLvalue(pOptionalObject)` from check property is lvalue.\r\n\r\nThis test will always pass, so the second part is all that is required.\r\n\r\n* Move lvalue-detection into `ExprProperty` ctor\r\n\r\n* Make `objectIsLvalue` a debug-only assertion.\r\n\r\nNow only used in assertions, so make it an assertion method.\r\n\r\n* Remove dead branches from `TryReportLvalueFailure`\r\n\r\nSince we can now see that we can't enter the branch for properties, nor escape the branch for fields, we can see that `pObject` will never be set and `isNested` never true. Remove branches for those conditions.\r\n\r\nIncludes removal of `ERR_ReturnNotLValue`, contributes to #22470\r\n\r\n* Remove path for `isNested` from `ReportReadOnlyError`\r\n\r\nNever true.\r\n\r\nIncludes removal of `ERR_AssgReadonlyStatic2` and `ERR_AssgReadonly2`, contributes to #22470\r\n\r\n* Inline `ReportReadOnlyError` and `TryReportLvalueFailure`\r\n\r\nThese are now very small, and `CheckLvalue`'s logic is clearer with all errors happening within the same switch"},{"Id":"7220782513","Type":"PullRequestEvent","CreatedAt":"2018-02-09T04:04:20","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26964","RelatedDescription":"Merged pull request \"Expose SocketsHttpHandler\" (#26964) at dotnet/corefx","RelatedBody":"- Renames ManagedHandler to SocketsHttpHandler\r\n- Moves a bunch of files around accordingly\r\n- Updates System.Net.WebSockets.Client to use SocketsHttpHandler directly\r\n- Updates System.Net.Http's tests with a reflection-based rather than TLS-based method for instantiating an HttpClientHandler backed by a SocketsHttpHandler.\r\n- Adds some more tests\r\n\r\ncc: @geoffkizer, @davidsh, @Priya91, @wfurt, @karelz \r\nCloses https://github.com/dotnet/corefx/issues/23166\r\nCloses https://github.com/dotnet/corefx/issues/26895\r\nCloses https://github.com/dotnet/corefx/issues/26960"},{"Id":"7220782498","Type":"IssuesEvent","CreatedAt":"2018-02-09T04:04:20","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26895","RelatedDescription":"Closed issue \"ManagedHandler public API surface\" (#26895) at dotnet/corefx","RelatedBody":"For 2.1, we want to expose the new \"ManagedHandler\" we've been working on.  It's not \"just the default\" as it's missing some features (e.g. HTTP/2, various forms of auth like NTLM and Negotiate), so it needs to be opt-in.  We've allowed it to be opt-in on a process-wide level underneath HttpClientHandler, via an environment variable and via an AppContext setting, but we also want to expose the API so that a) developers can opt-in for specific uses rather than process-wide (e.g. we do this via a hack in ClientWebSocket, which runs on the managed handler now), and b) so that developers can control settings on it not available via HttpClientHandler.\r\n\r\nProposed surface area:\r\n```C#\r\nnamespace System.Net.Http\r\n{\r\n    public sealed class NetSocketsHandler : HttpMessageHandler // new name for ManagedHandler\r\n    {\r\n        public NetSocketsHandler();\r\n\r\n        // These are identical to those on HttpClientHandler:\r\n        public bool AllowAutoRedirect { get; set; }\r\n        public DecompressionMethods AutomaticDecompression { get; set; } // TODO: Also and Brotli to DecompressionMethods?\r\n        public CookieContainer CookieContainer { get; set; }\r\n        public ICredentials Credentials { get; set; }\r\n        public ICredentials DefaultProxyCredentials { get; set; }\r\n        protected override void Dispose(bool disposing);\r\n        public int MaxAutomaticRedirections { get; set; }\r\n        public int MaxConnectionsPerServer { get; set; }\r\n        public int MaxResponseHeadersLength { get; set; }\r\n        public bool PreAuthenticate { get; set; }\r\n        public IDictionary<string, object> Properties { get; }\r\n        public IWebProxy Proxy { get; set; }\r\n        protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);\r\n        public bool UseCookies { get; set; }\r\n        public bool UseProxy { get; set; }\r\n\r\n        // This replaces the following from HttpClientHandler, while enabling additional functionality:\r\n        // - public bool CheckCertificateRevocationList { get; set; }\r\n        // - public X509CertificateCollection ClientCertificates { get; set; }\r\n        // - public ClientCertificateOption ClientCertificateOptions { get; set; }\r\n        // - public Func<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> ServerCertificateCustomValidationCallback { get; set; }\r\n        // - public SslProtocols SslProtocols { get; set; }\r\n        public SslClientAuthenticationOptions SslOptions { get; set; }\r\n\r\n        // Others not on HttpClientHandler but on NetSocketsHandler\r\n        public TimeSpan ConnectionTimeout { get; set; } // How long a connection can be alive to still be poolable; primarily used to help with DNS changes\r\n        public TimeSpan ConnectionIdleTimeout { get; set; } // How long a pooled connection can be idle before it's disposed; primarily used for resource management\r\n\r\n        // Others not currently in the plan but which we've discussed as potential knobs:\r\n        public TimeSpan DnsRefreshTimeout { get; set; } // If we do our own DNS caching, how often to flush\r\n        public bool EnableDnsRoundRobin { get; set; } // Whether to go in order of the DNS results or round-robin through them\r\n        public bool UseNagleAlgorithm { get; set; } // We currently always disable it, but maybe someone would want to override that?\r\n        public int MaxResponseDrainSize { get; set; } // We're implementing draining, and may want to allow control over how much is drained\r\n        public TimeSpan MaxResponseDrainTimeout { get; set; } // We're implementing draining, and may want to allow control over how long we spend draining\r\n    }\r\n}\r\n```\r\n\r\nCurrent open issues:\r\n- **Naming**, in particular for the class itself.  Most handlers describe what it is they're built on top of, hence the \"sockets\".  We could do \"SocketsHandler\", but there was some concern aired that everything is on sockets at some level (the counterargument is that this is the direct level targeted by this handler); the \"Net\" prefix was added as a way to suggest it's the System.Net.Sockets.\r\n- **Assembly**.  The current plan is this ships in System.Net.Http.dll.  That will make it more difficult to make it available in the future downlevel.  But the API currently relies on .NET Core-specific types (e.g. SslClientAuthenticationOptions) and the implementation relies on internals of HttpClient for perf.  We also hope/expect it'll become the default in the future.\r\n- **MaxResponseHeadersLength** unit.  HttpClientHandler defines it in kilobytes, which is inconsistent with most other sizes.  Should we break from that and expose it in bytes?"},{"Id":"7220782494","Type":"IssuesEvent","CreatedAt":"2018-02-09T04:04:20","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/23166","RelatedDescription":"Closed issue \"[ManagedHandler] Determine how to ship it, and implement that\" (#23166) at dotnet/corefx","RelatedBody":"Opt-in/Opt-out? Enabled via an environment variable? Shipped as public API? Etc.  We need a supported way to allow for granular use of ManagedHandler on per-instance basis and not just process-wide."},{"Id":"7220707377","Type":"IssuesEvent","CreatedAt":"2018-02-09T03:34:46","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26817","RelatedDescription":"Closed issue \"Always use MemoryFileStreamCompletionSource in FileStream \" (#26817) at dotnet/corefx","RelatedBody":"Today it looks like the code in FileStream is unwrapping the underlying `Memory<byte>` to a `byte[]` when it does an async Read or Write operation on windows. If you pass a pre-pinned buffer that happens to be backed by an array then you'll lose the benefits as the PreAllocatedOverlapped will pin the buffer again.\r\n\r\nhttps://github.com/dotnet/corefx/blob/103639b6ff5aa6ab6097f70732530e411817f09b/src/Common/src/CoreLib/System/IO/FileStream.Windows.cs#L851-L853\r\n\r\nhttps://github.com/dotnet/corefx/blob/103639b6ff5aa6ab6097f70732530e411817f09b/src/Common/src/CoreLib/System/IO/FileStream.Windows.cs#L1072-L1074\r\n\r\nI might be missing something, What was the reasoning behind this implementation?\r\n\r\n/cc @stephentoub "},{"Id":"7220695086","Type":"PullRequestEvent","CreatedAt":"2018-02-09T03:30:12","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26982","RelatedDescription":"Opened pull request \"Disable Http status line parsing test cases on CurlHandler\" (#26982) at dotnet/corefx","RelatedBody":"Closes: #26980"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7220780001","Type":"PullRequestEvent","CreatedAt":"2018-02-09T04:03:18","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24724","RelatedDescription":"Opened pull request \"added [Obsolete] to legacy waiter/listener API.\" (#24724) at dotnet/roslyn","RelatedBody":"we should remove these once partner moved to new API.\r\n\r\n### Customer scenario\r\n\r\nThis is not user facing change. this is for our legacy testing API that partner team still depends on.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/24574\r\n\r\n### Workarounds, if any\r\n\r\nN/A\r\n\r\n### Risk\r\n\r\n[Obsolete] is added. so it will generate warning if partner team still depends on legacy API.\r\n\r\n### Performance impact\r\n\r\nN/A\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo\r\n\r\n### Root cause analysis\r\n\r\nWe are moving some legacy test API to new API. new API and shim is already in dev15.7stg, this is follow up change which add [Obsolete] to shim so that we can get rid of those.\r\n\r\n### How was the bug found?\r\n\r\nN/A\r\n"},{"Id":"7220567328","Type":"PullRequestEvent","CreatedAt":"2018-02-09T02:42:31","Actor":"t-camaia","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24723","RelatedDescription":"Opened pull request \"Localsinit\" (#24723) at dotnet/roslyn","RelatedBody":"SkipLocalsInitAttribute can be used on methods to avoid locals initialization.\r\n\r\nWhile decoding Well Known Attributes, SourceMemberMethodSymbol will clear the localsAreZeroed flag if SkipLocalsInitAttribute is found. This flag will be passed later to the corresponding ILBuilder and MethodBody.\r\n\r\nThe current ILVisualizer completely ignores the localsAreZeroed flag and always initializes locals (see dotnet/metadata-tools#11 and dotnet/metadata-tools#12). The tests will certainly fail until the changes are effected.\r\n\r\nSome test scenarios were added in order to assure the expected behavior."},{"Id":"7220469357","Type":"PullRequestEvent","CreatedAt":"2018-02-09T02:08:13","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24708","RelatedDescription":"Merged pull request \"fixed a bug on solution crawler progress report.\" (#24708) at dotnet/roslyn","RelatedBody":"found case where retry can mess up Start/Stop call pair. instead of trying being smart to reduce Start/Stop call, made it simpler and rely on ref counting on reporter. and the fact that all enqeued work must run at some point.\r\n\r\n### Customer scenario\r\n\r\nUser is working on code and \"...\" on error list never go away.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/24707\r\n\r\n### Workarounds, if any\r\n\r\nNo workaround\r\n\r\n### Risk\r\n\r\nfix is a visible cue on error list that indicates error list has pending update. so this fix won't cause any new crash or perf issue.\r\n\r\n### Performance impact\r\n\r\n\"...\" is static indicator, so no perf impact.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo\r\n\r\n### Root cause analysis\r\n\r\nexisting code tries to be smart on when to call Start/Stop even though reporter itself has ref count. and that smart had an issue on cancellation/retry of a work. new change just let that ref count do the work and removed complex conditions.\r\n\r\n### How was the bug found?\r\n\r\nDogfooding\r\n"},{"Id":"7220397605","Type":"PullRequestEvent","CreatedAt":"2018-02-09T01:43:35","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24679","RelatedDescription":"Merged pull request \"Produce an error when a bridge method must be variadic\" (#24679) at dotnet/roslyn","RelatedBody":"Fixes:#24348\r\n\r\n### Customer scenario\r\n\r\nCustomer writes code that requires injection of a bridge method. If the method also turns out to be variadic, there is no reliable way to express that in CLR/IL. \r\nCurrent behavior in such situations is a compiler crash.\r\n\r\n### Bugs this fixes\r\n\r\n#24348\r\n\r\n### Workarounds, if any\r\n\r\nNot writing code that requires variadic bridge methods.\r\n\r\n### Risk\r\n\r\nLow. We are making a situation that is a crash to become a compiler error.\r\n\r\n### Performance impact\r\n\r\n\"Low perf impact because no extra allocations/no complexity changes.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo.\r\n\r\n### Root cause analysis\r\n\r\nThe bug could be fairly old. Only now reported.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported.\r\n\r\n### Test documentation updated?\r\n\r\nN/A"},{"Id":"7220295979","Type":"PullRequestEvent","CreatedAt":"2018-02-09T01:08:40","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24722","RelatedDescription":"Opened pull request \"Add cast to prevent the dynamic binder from doing the cast\" (#24722) at dotnet/roslyn","RelatedBody":"IVsRunningDocumentTable4.GetDocumentData() returns dynamic, and we were casting it to a COM interface. This was going through the C# runtime binder to do so. We don't need that, and an unrelated change in VS meant that Microsoft.CSharp.dll isn't ngened, so this was far more expensive than it should be.\r\n\r\n@olegtk gets credit for suggesting this fix.\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nOpening a C# file has an extra delay around ~100ms or so, depending upon machine performance.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://devdiv.visualstudio.com/web/wi.aspx?pcguid=011b8bdf-6d56-4f87-be0d-0092136884d9&id=557919\r\n\r\n### Workarounds, if any\r\n\r\nManually ngen Microsoft.CSharp.dll. (You shouldn't do this.)\r\n\r\n### Risk\r\n\r\nVery low: just adding an extra cast to disable the C# runtime binder.\r\n\r\n### Performance impact\r\n\r\nBetter; we're removing the unintended use of the C# binder.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nYes, previous 15.6 builds.\r\n\r\n### Root cause analysis\r\n\r\nAnother team checked in setup authoring changes that caused Microsoft.CSharp.dll (the C# runtime binder) that is a part of the system-installed framework to no longer be ngened. This meant that anything using it (which this code implicitly was) would have extra JIT time. This is working around that by avoiding the use.\r\n\r\n### How was the bug found?\r\n\r\nRPS.\r\n\r\n</details>\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7220398095","Type":"PullRequestEvent","CreatedAt":"2018-02-09T01:43:45","Actor":"luqunl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5367","RelatedDescription":"Opened pull request \"Move WideCharToMultiByte and GetCPInfo into Common\" (#5367) at dotnet/corert","RelatedBody":"Move two Pinvoke definition to Common folder to allow other project to use"},{"Id":"7219353882","Type":"PullRequestEvent","CreatedAt":"2018-02-08T21:06:00","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5364","RelatedDescription":"Merged pull request \"Fail with descriptive error message when RID is not specified for native compilation\" (#5364) at dotnet/corert","RelatedBody":"Contributes to #5289"},{"Id":"7218780612","Type":"PullRequestEvent","CreatedAt":"2018-02-08T19:06:21","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5365","RelatedDescription":"Merged pull request \"[ObjWriter/ARM32] Fix CFI emitting\" (#5365) at dotnet/corert","RelatedBody":"@dotnet/arm32-corert-contrib please review"},{"Id":"7218779593","Type":"PullRequestEvent","CreatedAt":"2018-02-08T19:06:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5366","RelatedDescription":"Merged pull request \"[ObjWriter] Fix visibility for public API\" (#5366) at dotnet/corert","RelatedBody":"Default visibility for Linux for native part is hidden for example. I think this way is better than making \"default\" visibility for the whole ObjWriter.\r\n\r\n@dotnet/arm32-corert-contrib "},{"Id":"7218483554","Type":"PullRequestEvent","CreatedAt":"2018-02-08T18:05:47","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5366","RelatedDescription":"Opened pull request \"[ObjWriter] Fix visibility for public API\" (#5366) at dotnet/corert","RelatedBody":"Default visibility for Linux for native part is hidden for example. I think this way is better than making \"default\" visibility for the whole ObjWriter.\r\n\r\n@dotnet/arm32-corert-contrib "},{"Id":"7218422944","Type":"PullRequestEvent","CreatedAt":"2018-02-08T17:53:53","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5365","RelatedDescription":"Opened pull request \"[ObjWriter/ARM32] Fix CFI emitting\" (#5365) at dotnet/corert","RelatedBody":"@dotnet/arm32-corert-contrib please review"},{"Id":"7218310021","Type":"PullRequestEvent","CreatedAt":"2018-02-08T17:31:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5364","RelatedDescription":"Opened pull request \"Fail with descriptive error message when RID is not specified for native compilation\" (#5364) at dotnet/corert","RelatedBody":"Contributes to #5289"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7220861266","Type":"PullRequestEvent","CreatedAt":"2018-02-09T04:38:13","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1944","RelatedDescription":"Opened pull request \"Create scripts to set up build and test environments\" (#1944) at dotnet/sdk","RelatedBody":"This adds scripts that are created when you run the main build script that will set up a \"build\" or \"test\" environment.\r\n\r\nThe \"build\" environment basically just sets you up so that the version of `dotnet` on the path is the \"Stage 0\" one that would be used by the build script.\r\n\r\nThe \"test\" environment is set up to use the \"Stage 1\" versions of the SDK assets when you build.  So if you want to manually repro a test scenario, or to experiment with local changes, then you can do that in the test environment.\r\n\r\nWe had scripts like this before we moved to repo toolset.  It looks like the `-dogfood` argument to the build script was supposed to do something similar, but that didn't work in my workflow because it doesn't set the environment variables in the calling process.\r\n\r\nWith this PR, the \"build\" environment script is generated as `artifacts\\sdk-build-env.bat` and the test environment script (for the Debug configuration) is generated as `artifacts\\Debug\\sdk-test-env.bat`.  That way there's less duplication of path logic, etc (though it is still duplicated between `build.ps1` and the `TestContext` code).\r\n\r\n@tannergooding @nguerrera @livarcocc @wli3 @peterhuene @johnbeisner "},{"Id":"7220654427","Type":"PullRequestEvent","CreatedAt":"2018-02-09T03:14:35","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1943","RelatedDescription":"Opened pull request \"Run restore and create build log by default from build.cmd\" (#1943) at dotnet/sdk","RelatedBody":"Revisiting #1758.\r\n\r\nThis time the defaults are in the `build.cmd` instead of `build\\build.ps1`, so it shouldn't affect the \"Repo API\".\r\n\r\nI looked at the defaults in `build.cmd` for the different [repos using RepoToolset](https://github.com/dotnet/roslyn-tools/blob/master/docs/RepoToolset.md), and there wasn't much consistency.  Some of the restore by default, and some don't.  At least one logs by default.  I don't think any of them run tests by default, so I'm not enabling that in this PR.\r\n\r\n@nguerrera @tannergooding @tmat @jaredpar"},{"Id":"7219786680","Type":"IssuesEvent","CreatedAt":"2018-02-08T22:40:17","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1942","RelatedDescription":"Opened issue \"deps file is not regenerated when non-nuget references change\" (#1942) at dotnet/sdk","RelatedBody":"Currently the target that generates the deps file only runs when project.assets.json is older than deps.json, but if non-package references are changed, then the deps file would also need to change.\r\n\r\nWe do want to keep incrementality because it is an expensive operation, but we should account for the other task parameters that can change the deps file."},{"Id":"7219683505","Type":"PullRequestEvent","CreatedAt":"2018-02-08T22:16:20","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1925","RelatedDescription":"Merged pull request \"LOC CHECKIN | sdk master | 20180202\" (#1925) at dotnet/sdk","RelatedBody":null},{"Id":"7218312830","Type":"PullRequestEvent","CreatedAt":"2018-02-08T17:32:01","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1939","RelatedDescription":"Merged pull request \"Add .NET Core 2.1 to list of supported target frameworks\" (#1939) at dotnet/sdk","RelatedBody":"This value is used to configure Visual Studio's Application Properties pages.\r\n\r\n**Customer scenario**\r\n\r\nCustomers using Application properties pages with .NET Core 2.1 are not able to select the runtime from the provided dropdown\r\n\r\n**Bugs this fixes:** \r\n\r\nFixes https://github.com/dotnet/project-system/issues/3183\r\n\r\n**Workarounds, if any**\r\n\r\nChange by editing csproj file\r\n\r\n**Risk**\r\n\r\nLow\r\n\r\n**Performance impact**\r\n\r\nLow\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo\r\n\r\n**Root cause analysis:**\r\n\r\nNeed to update this list when moving to a new version of .NET Core\r\n\r\n**How was the bug found?**\r\n\r\nPartner testing\r\n\r\n/cc @livarcocc \r\nConfirmed that this change fixes the problem in VS."},{"Id":"7215404768","Type":"PullRequestEvent","CreatedAt":"2018-02-08T08:00:53","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1941","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1941) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180208-080052\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180208-080052 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7215404692","Type":"PullRequestEvent","CreatedAt":"2018-02-08T08:00:52","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1940","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#1940) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180208-080050\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180208-080050 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7213295375","Type":"PullRequestEvent","CreatedAt":"2018-02-07T21:10:14","Actor":"natidea","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1939","RelatedDescription":"Opened pull request \"Add .NET Core 2.1 to list of supported target frameworks\" (#1939) at dotnet/sdk","RelatedBody":"This value is used to configure Visual Studio's Application Properties pages.\r\n\r\n**Customer scenario**\r\n\r\nCustomers using Application properties pages with .NET Core 2.1 are not able to select the runtime from the provided dropdown\r\n\r\n**Bugs this fixes:** \r\n\r\nFixes https://github.com/dotnet/project-system/issues/3183\r\n\r\n**Workarounds, if any**\r\n\r\nChange by editing csproj file\r\n\r\n**Risk**\r\n\r\nLow\r\n\r\n**Performance impact**\r\n\r\nLow\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo\r\n\r\n**Root cause analysis:**\r\n\r\nNeed to update this list when moving to a new version of .NET Core\r\n\r\n**How was the bug found?**\r\n\r\nPartner testing\r\n\r\n/cc @livarcocc \r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"961657885137698816","CreatedAt":"2018-02-08T17:48:01+00:00","UserScreenname":"dotnet","Text":"Tomorrow is NOW! @DEVintersection Take a deep dive with the Microsoft’s AI team into machine learning, predictive a… https://t.co/5AcI4VRNyG","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":14,"FavoriteCount":11,"RawContent":null},{"Id":"961596291942961154","CreatedAt":"2018-02-08T13:43:16+00:00","UserScreenname":"dotnet","Text":"Our @csharpfritz and ASPInsider @brendoneus will be showing unit testing patterns and structure practices LIVE onli… https://t.co/kWer0gYtOp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":7,"RawContent":null},{"Id":"961382608914518016","CreatedAt":"2018-02-07T23:34:10+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz and ASPInsider Brendan Enrick for a LIVE CODING stream talking about how to write better unit t… https://t.co/dMJ5QcKEcp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null},{"Id":"960930092372381696","CreatedAt":"2018-02-06T17:36:01+00:00","UserScreenname":"dotnet","Text":"Register now for @DEVintersection for a workshop package and go home with an awesome piece of hardware Xbox One X,… https://t.co/PqoYqNI5Ga","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":22,"FavoriteCount":13,"RawContent":null},{"Id":"960633633370292224","CreatedAt":"2018-02-05T21:58:00+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Framework 4.7.2 Early Access build 3052! https://t.co/8lGEqT6FqM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":99,"FavoriteCount":80,"RawContent":null},{"Id":"959498964503425026","CreatedAt":"2018-02-02T18:49:14+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1 roadmap https://t.co/1QFI97S11f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":243,"FavoriteCount":188,"RawContent":null},{"Id":"959498759733301248","CreatedAt":"2018-02-02T18:48:25+00:00","UserScreenname":"dotnet","Text":"Entity Framework Core 2.1 Roadmap https://t.co/jyrJwFiQzJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":110,"FavoriteCount":76,"RawContent":null},{"Id":"959492955391143939","CreatedAt":"2018-02-02T18:25:21+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 Roadmap https://t.co/v7JFqyVWWb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":215,"FavoriteCount":168,"RawContent":null},{"Id":"959125554988371969","CreatedAt":"2018-02-01T18:05:26+00:00","UserScreenname":"dotnet","Text":"#TBT: You've probably used LINQ for years, but have you ever wondered about the underlying pieces and how they fit… https://t.co/tuqqdA5nUG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":81,"FavoriteCount":27,"RawContent":null},{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2018-02-09T05:30:20.718636Z","RunDurationInMilliseconds":8422}