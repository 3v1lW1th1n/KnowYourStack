{"Data":{"Blog":{"FeedItems":[{"Title":".NET and TypeScript at FOSDEM 2019","PublishedOn":"2019-01-24T20:50:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The schedule for the .NET and Typescript Developer Room at FOSDEM has now been published! FOSDEM is one of the longest running Free and Open Source conferences, and we’re excited to have a .NET and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/net-and-typescript-at-fosdem-2019/","RawContent":null},{"Title":"Do more with patterns in C# 8.0","PublishedOn":"2019-01-24T18:00:30+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Do more with patterns in C# 8.0 Visual Studio 2019 Preview 2 is out! And with it, a couple more C# 8.0 features are ready for you to try. It&#8217;s mostly about pattern matching, though I&#8217;ll...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/do-more-with-patterns-in-c-8-0/","RawContent":null},{"Title":"Announcing F# 4.6 Preview","PublishedOn":"2019-01-24T15:45:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re excited to announce that Visual Studio 2019 will ship a new version of F# when it releases: F# 4.6! F# 4.6 is a smaller update to the F# language, making it a &#8220;true&#8221;...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/announcing-f-4-6-preview/","RawContent":null},{"Title":".NET Core tooling update for Visual Studio 2019 Preview 2","PublishedOn":"2019-01-24T15:30:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Another preview of Visual Studio 2019, another update on the cool stuff going into it! We&#8217;re pleased to announce some updates to the .NET Core tools for Visual Studio 2019. You can try these...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/net-core-tooling-update-for-visual-studio-2019-preview-2/","RawContent":null},{"Title":".NET Framework January 22, 2018 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-01-22T22:22:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are releasing the January 22, 2018 .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Help us help you! What desktop apps are you bringing to .NET Core 3.0?","PublishedOn":"2019-01-17T16:00:26+00:00","CommentsCount":42,"FacebookCount":0,"Summary":"Windows Desktop applications are coming to .NET Core. The recently released .NET Core 3.0 Preview 1 version includes WinForms and WPF support. To make .NET Core 3.0 viable for as many of you as...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/17/help-us-help-you-what-desktop-apps-are-you-bringing-to-net-core-3-0/","RawContent":null},{"Title":".NET Framework January 2019 Preview of Quality Rollup","PublishedOn":"2019-01-16T04:08:30+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Updated: January 24, 2019 The Windows 10 1607 (Anniversary Update) and Windows Server 2016 updates have also been released.   The Microsoft Update Catalog table below has been updated with this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"Announcing ML.NET 0.9 – Machine Learning for .NET","PublishedOn":"2019-01-10T20:34:16+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Announcing ML.NET 0.9 &#8211; Machine Learning for .NET ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/10/announcing-ml-net-0-9-machine-learning-for-net/","RawContent":null},{"Title":"Tell us your thoughts on ML.NET, an open source and cross-platform machine learning framework","PublishedOn":"2019-01-09T17:31:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers. .NET developers can use their C# or F# skills to easily integrate custom machine learning into their...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/09/tell-us-your-thoughts-on-ml-net/","RawContent":null},{"Title":".NET Core January 2019 Updates – 2.1.7 and 2.2.1","PublishedOn":"2019-01-09T02:07:05+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2019 Update. These updates contain security and reliability fixes. .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( Download &#124; Release Notes ) .NET Core...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-core-january-2019-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8887340703","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Opened pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8860916656","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:28:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Merged pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8837337598","Type":"PullRequestEvent","CreatedAt":"2019-01-05T03:23:40","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Merged pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833785661","Type":"PullRequestEvent","CreatedAt":"2019-01-04T11:57:11","Actor":"MarcBruins","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Opened pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833210040","Type":"PullRequestEvent","CreatedAt":"2019-01-04T09:40:51","Actor":"ErikEJ","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Opened pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8831721539","Type":"PullRequestEvent","CreatedAt":"2019-01-04T00:22:43","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Merged pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""},{"Id":"8830688181","Type":"PullRequestEvent","CreatedAt":"2019-01-03T20:00:04","Actor":"carloscds","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Opened pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8852414845","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:17:46","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Opened issue \"January 2019 .NET Updates\" (#96) at dotnet/announcements","RelatedBody":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852318390","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Opened issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n"},{"Id":"8852317992","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:24","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n"},{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8948981850","Type":"PullRequestEvent","CreatedAt":"2019-01-25T05:23:10","Actor":"morganbr","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22204","RelatedDescription":"Opened pull request \"Implement Serialization Guard\" (#22204) at dotnet/coreclr","RelatedBody":"Implements the CoreLib Serialization Guard API and consumes it in CoreLib targets. See https://github.com/dotnet/corefx/issues/34555 for details on Serialization Guard."},{"Id":"8948903527","Type":"PullRequestEvent","CreatedAt":"2019-01-25T04:55:20","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22203","RelatedDescription":"Opened pull request \"Superpmi parallel dasm output\" (#22203) at dotnet/coreclr","RelatedBody":"This speeds up the dasm output significantly. In addition it will also correctly output `dasm` in place of `asm` files. This will enable jit-analyze to correctly find and diff the files.\r\n\r\nIn addition, this addresses existing requests of not deleting the existing asm/jit_dump folders on each subsequent asmdiff run."},{"Id":"8948532500","Type":"PullRequestEvent","CreatedAt":"2019-01-25T02:51:32","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22202","RelatedDescription":"Opened pull request \"Fix finding entry point unwind record for a method with fragmented un…\" (#22202) at dotnet/coreclr","RelatedBody":"…wind\r\n\r\nOn Arm and Arm64 unwind records can only cover a limited range of code\r\n(512K and 1MB respectively). So for methods larger than this the jit\r\nwill emit multiple \"fragment\" unwind records to cover the full method code\r\nrange. Only the first of these describes the behavior of the method prolog.\r\n\r\nWhen mapping an offset back to a method's entry point unwind, make sure to\r\nfind this \"root\" unwind record instead of one of the internal fragments.\r\n\r\nFixes #19209."},{"Id":"8948522758","Type":"PullRequestEvent","CreatedAt":"2019-01-25T02:48:45","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22127","RelatedDescription":"Merged pull request \"Speedup .SequenceCompareTo(byte, ...)\" (#22127) at dotnet/coreclr","RelatedBody":"Using benchmarks from https://github.com/dotnet/coreclr/issues/22078#issuecomment-455843668\r\n\r\nDifferent\r\n\r\n```\r\n|  Method |   N |      Mean |\r\n|-------- |---- |----------:|\r\n|  Native |  16 | 10.751 ns |\r\n| Managed |  16 |  5.141 ns |\r\n|  Native |  17 | 10.705 ns |\r\n| Managed |  17 |  4.582 ns |\r\n|  Native |  25 | 10.564 ns |\r\n| Managed |  25 |  4.435 ns |\r\n|  Native |  32 | 10.551 ns |\r\n| Managed |  32 |  5.227 ns |\r\n|  Native |  79 | 10.360 ns |\r\n| Managed |  79 |  4.584 ns |\r\n|  Native | 256 | 10.813 ns |\r\n| Managed | 256 |  5.013 ns |\r\n```\r\n\r\nAlmostSameButDifferent\r\n\r\n```\r\n|  Method |   N |      Mean |\r\n|-------- |---- |----------:|\r\n|  Native |  16 | 11.298 ns |\r\n| Managed |  16 |  4.717 ns |\r\n|  Native |  17 | 13.002 ns |\r\n| Managed |  17 |  5.557 ns |\r\n|  Native |  25 | 12.173 ns |\r\n| Managed |  25 |  5.548 ns |\r\n|  Native |  32 | 12.470 ns |\r\n| Managed |  32 |  4.613 ns |\r\n|  Native |  79 | 16.639 ns |\r\n| Managed |  79 |  7.081 ns |\r\n|  Native | 256 | 21.392 ns |\r\n| Managed | 256 | 11.007 ns |\r\n```\r\n\r\nSame  \r\n\r\n```\r\n|  Method |   N |      Mean |\r\n|-------- |---- |----------:|\r\n|  Native |  16 | 11.471 ns |\r\n| Managed |  16 |  4.686 ns |\r\n|  Native |  17 | 11.454 ns |\r\n| Managed |  17 |  4.527 ns |\r\n|  Native |  25 | 11.966 ns |\r\n| Managed |  25 |  4.552 ns |\r\n|  Native |  32 | 11.751 ns |\r\n| Managed |  32 |  3.999 ns |\r\n|  Native |  79 | 16.089 ns |\r\n| Managed |  79 |  5.850 ns |\r\n|  Native | 256 | 21.342 ns |\r\n| Managed | 256 | 10.994 ns |\r\n```\r\n\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/22078\r\n\r\n/cc @CarolEidt @fiigii @tannergooding @ahsonkhan\r\n\r\n/cc @redknightlois @ayende "},{"Id":"8948522753","Type":"IssuesEvent","CreatedAt":"2019-01-25T02:48:44","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22078","RelatedDescription":"Closed issue \"Adding memcmp intrisinc?\" (#22078) at dotnet/coreclr","RelatedBody":"We are using `memcmp` a _lot_, to do comparisons of pieces of data inside mmap file.\r\nBecause of the cost of p/invoke, we wrote our own memory comparison function and only shell to `memcmp` if the size is large enough to be worth it. \r\n\r\nI would rather be able to directly call `memcmp` without paying the pinvoke costs. \r\nCalls to `memset` and `memcpy` are already exposed via `Unsafe.InitBlock` and `Unsafe.CopyBlock`, respectively.\r\nSee: \r\nhttps://github.com/dotnet/corefx/blob/64c6d9fe5409be14bdc3609d73ffb3fea1f35797/src/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.il#L162\r\n\r\nWhat would be the process of adding a similar functionality for exposing `memcmp` ?"},{"Id":"8948511393","Type":"IssuesEvent","CreatedAt":"2019-01-25T02:45:19","Actor":"adityamandaleeka","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13592","RelatedDescription":"Closed issue \"[Arm64/Windows] Optimize JIT_WriteBarriers\" (#13592) at dotnet/coreclr","RelatedBody":"Test and enable JIT_WriteBarriers optimizations from #12334\r\n\r\nThese were causing contract violations so Windows support was removed.\r\n\r\ncategory:cq\r\ntheme:runtime\r\nskill-level:expert\r\ncost:small"},{"Id":"8948473584","Type":"IssuesEvent","CreatedAt":"2019-01-25T02:34:08","Actor":"AriNuer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22201","RelatedDescription":"Opened issue \"[arm64/windows] Test \" Interop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd\" failed with Assert failure\" (#22201) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_gcstress0xc_tst/55/testReport/\r\n**Failed test:**\r\nInterop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd\r\n\r\n**Failed log:**\r\n```\r\nInterop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd [FAIL]\r\n        \r\n        Assert failure(PID 16256 [0x00003f80], Thread: 16260 [0x3f84]): SanityCheck()\r\n        \r\n        CORECLR! GetCLRRuntimeHost + 0x4AEB54 (0x00007ffa`e678fbd4)\r\n        CORECLR! GetCLRRuntimeHost + 0x3D802C (0x00007ffa`e66b90ac)\r\n        CORECLR! GetCLRRuntimeHost + 0x3D7D6C (0x00007ffa`e66b8dec)\r\n        CORECLR! GetCLRRuntimeHost + 0x54CDA8 (0x00007ffa`e682de28)\r\n        CORECLR! GetCLRRuntimeHost + 0x54CFE4 (0x00007ffa`e682e064)\r\n        CORECLR! GetCLRRuntimeHost + 0x54BE20 (0x00007ffa`e682cea0)\r\n        CORECLR! GetCLRRuntimeHost + 0x44B97C (0x00007ffa`e672c9fc)\r\n        CORECLR! GC_VersionInfo + 0xB2158 (0x00007ffa`e6a03f98)\r\n        CORECLR! GetCLRRuntimeHost + 0x184D80 (0x00007ffa`e6465e00)\r\n        CORECLR! GetCLRRuntimeHost + 0x186740 (0x00007ffa`e64677c0)\r\n            File: d:\\j\\workspace\\arm64_cross_c---0aaef436\\src\\vm\\methodtable.cpp Line: 10039\r\n            Image: C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n        \r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Reports\\Interop.PInvoke\\SafeHandles\\ReleaseHandle\\ReleaseHandleTest\\ReleaseHandleTest.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Interop\\PInvoke\\SafeHandles\\ReleaseHandle\\ReleaseHandleTest>set COMPLUS_NOGUIONASSERT=1 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Interop\\PInvoke\\SafeHandles\\ReleaseHandle\\ReleaseHandleTest>set COMPLUS_CONTINUEONASSERT=0 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Interop\\PInvoke\\SafeHandles\\ReleaseHandle\\ReleaseHandleTest>set COMPLUS_GCSTRESS=0xC \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Interop\\PInvoke\\SafeHandles\\ReleaseHandle\\ReleaseHandleTest>set COMPLUS_TIEREDCOMPILATION=0 \r\n         \"C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\corerun.exe\" ReleaseHandleTest.exe \r\n        SHReleasing_OutParams\r\n        \tForcing finalizer for the SFH param to run...\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\r\n  > C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Interop\\PInvoke\\SafeHandles\\ReleaseHandle\\ReleaseHandleTest\\ReleaseHandleTest.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\arm64_cross_c---0aaef436\\bin\\tests\\Windows_NT.arm64.Checked\\TestWrappers\\Interop.PInvoke\\Interop.PInvoke.XUnitWrapper.cs(6199,0): at Interop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd()\r\n```"},{"Id":"8948325672","Type":"IssuesEvent","CreatedAt":"2019-01-25T01:51:20","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22200","RelatedDescription":"Opened issue \"[arm64] Test failed: JIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh\" (#22200) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/97/\r\n\r\n**Failed tests:**\r\nJIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh\r\n\r\n**Log:**\r\n```\r\nJIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh [FAIL]\r\n        /n/nReturn code:      1/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/JIT/Regression/Reports/JIT.Regression/JitBlue/GitHub_20657/GitHub_20657/GitHub_20657.output.txt/nRaw output:/nBEGIN EXECUTION\r\n        /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/corerun GitHub_20657.exe\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/JIT/Regression/JitBlue/GitHub_20657/GitHub_20657/GitHub_20657.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.Regression/JIT.Regression.XUnitWrapper.cs(82989,0): at JIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh()\r\n```"},{"Id":"8948266456","Type":"PullRequestEvent","CreatedAt":"2019-01-25T01:34:40","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22193","RelatedDescription":"Merged pull request \"Fix collectible AssemblyLoadContext weak handle\" (#22193) at dotnet/coreclr","RelatedBody":"Native runtime keeps short weak handle for collectible AssemblyLoadContext\r\nuntil the unload time when it gets converted to a strong one. A test\r\nrunning with gc stress has recently hit a problem caused by the fact\r\nthat the weak handle is \"short weak\" and thus doesn't track\r\nresurrection. Here is what happened:\r\n* The test code has lost reference to the AssemblyLoadContext\r\n* Finalizer of that AssemblyLoadContext was just invoked due to that and\r\n  so the weak short handle was destroyed.\r\n* Native runtime called AssemblyLoadContext.Resolve with the now dead\r\n  handle, the function tried to get the managed object and failed.\r\n\r\nThe fix is to change the handle type to long weak so that it doesn't get\r\ndestroyed before the finalization.\r\n\r\nCloses #22174"},{"Id":"8948266441","Type":"IssuesEvent","CreatedAt":"2019-01-25T01:34:40","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22174","RelatedDescription":"Closed issue \"Collectible AssemblyLoadContext sometimes released when not directly referenced in managed code but still in use.\" (#22174) at dotnet/coreclr","RelatedBody":"Sometimes, it is possible for a collectible ALC to be GC'd and not finalized while it is still in use. On x86, with the following environment flags, the Interop/ICustomMarshaler/ConflictingNames/MultipleALCs test will fail when trying to get a `Type` from an `Assembly` that was loaded from an unloadable ALC. It seems that the managed ALC object is collected but not finalized after the call to `AssemblyLoadContext.LoadAssemblyFromPath` and before the call to `Assembly.GetType`.\r\n\r\nEnvironment:\r\n```\r\nset COMPlus_GCStress=2\r\nset COMPlus_TieredCompilation=0\r\nset COMPlus_ZapDisable=1\r\nset COMPlus_ReadyToRun=0\r\n```\r\n\r\nSee #22133 , #22109.\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8947720455","Type":"IssuesEvent","CreatedAt":"2019-01-24T23:09:11","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10145","RelatedDescription":"Closed issue \"Core-Sdk uses engineering dependency flow\" (#10145) at dotnet/cli","RelatedBody":"Documentation for dependency flow is currently being created / updated, here is some starter info\r\n\r\n[Dependency flow](https://github.com/dotnet/arcade/blob/master/Documentation/DependenciesFlowPlan.md)\r\n\r\nAdd Version.Details.xml\r\n- [ ] Create [Version.Details.xml](https://github.com/dotnet/arcade/blob/master/Documentation/Darc.md#engversiondetailsxml) file manually in repo\r\n\r\nChannel mapping\r\n- [ ] Create a [channel mapping](https://github.com/dotnet/arcade/blob/master/Documentation/Maestro/BuildAssetRegistry.md) between branch and channel name\r\n  - manually (using REST API), documentation forthcoming\r\n\r\nCreate subscriptions\r\n- [ ] Create [subscriptions](https://github.com/dotnet/arcade/blob/e20e8459bdae871bcafb731cf139210319d939d4/Documentation/Maestro/BuildAssetRegistry.md#subscription) \r\n  - manually (using REST API), documentation forthcoming"},{"Id":"8947720103","Type":"IssuesEvent","CreatedAt":"2019-01-24T23:09:05","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10135","RelatedDescription":"Closed issue \"Core-Sdk uses engineering dependency flow\" (#10135) at dotnet/cli","RelatedBody":"@chcosta commented on [Tue Sep 11 2018](https://github.com/dotnet/arcade/issues/693)\n\nDocumentation for dependency flow is currently being created / updated, here is some starter info\r\n\r\n[Dependency flow](https://github.com/dotnet/arcade/blob/master/Documentation/DependenciesFlowPlan.md)\r\n\r\nAdd Version.Details.xml\r\n- [ ] Create [Version.Details.xml](https://github.com/dotnet/arcade/blob/master/Documentation/Darc.md#engversiondetailsxml) file manually in repo\r\n\r\nChannel mapping\r\n- [ ] Create a [channel mapping](https://github.com/dotnet/arcade/blob/master/Documentation/Maestro/BuildAssetRegistry.md) between branch and channel name\r\n  - manually (using REST API), documentation forthcoming\r\n\r\nCreate subscriptions\r\n- [ ] Create [subscriptions](https://github.com/dotnet/arcade/blob/e20e8459bdae871bcafb731cf139210319d939d4/Documentation/Maestro/BuildAssetRegistry.md#subscription) \r\n  - manually (using REST API), documentation forthcoming\n\n"},{"Id":"8947718309","Type":"IssuesEvent","CreatedAt":"2019-01-24T23:08:40","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10140","RelatedDescription":"Closed issue \"CLICommandLineParserParser uses engineering dependency flow\" (#10140) at dotnet/cli","RelatedBody":"@chcosta commented on [Tue Sep 11 2018](https://github.com/dotnet/arcade/issues/738)\n\nDocumentation for dependency flow is currently being created / updated, here is some starter info\r\n\r\n[Dependency flow](https://github.com/dotnet/arcade/blob/master/Documentation/DependenciesFlowPlan.md)\r\n\r\nAdd Version.Details.xml\r\n- [ ] Create [Version.Details.xml](https://github.com/dotnet/arcade/blob/master/Documentation/Darc.md#engversiondetailsxml) file manually in repo\r\n\r\nChannel mapping\r\n- [ ] Create a [channel mapping](https://github.com/dotnet/arcade/blob/master/Documentation/Maestro/BuildAssetRegistry.md) between branch and channel name\r\n  - manually (using REST API), documentation forthcoming\r\n\r\nCreate subscriptions\r\n- [ ] Create [subscriptions](https://github.com/dotnet/arcade/blob/e20e8459bdae871bcafb731cf139210319d939d4/Documentation/Maestro/BuildAssetRegistry.md#subscription) \r\n  - manually (using REST API), documentation forthcoming\n\n"},{"Id":"8947717445","Type":"IssuesEvent","CreatedAt":"2019-01-24T23:08:27","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10139","RelatedDescription":"Closed issue \"CLI-Migrate uses engineering dependency flow\" (#10139) at dotnet/cli","RelatedBody":"@chcosta commented on [Tue Sep 11 2018](https://github.com/dotnet/arcade/issues/733)\n\nDocumentation for dependency flow is currently being created / updated, here is some starter info\r\n\r\n[Dependency flow](https://github.com/dotnet/arcade/blob/master/Documentation/DependenciesFlowPlan.md)\r\n\r\nAdd Version.Details.xml\r\n- [ ] Create [Version.Details.xml](https://github.com/dotnet/arcade/blob/master/Documentation/Darc.md#engversiondetailsxml) file manually in repo\r\n\r\nChannel mapping\r\n- [ ] Create a [channel mapping](https://github.com/dotnet/arcade/blob/master/Documentation/Maestro/BuildAssetRegistry.md) between branch and channel name\r\n  - manually (using REST API), documentation forthcoming\r\n\r\nCreate subscriptions\r\n- [ ] Create [subscriptions](https://github.com/dotnet/arcade/blob/e20e8459bdae871bcafb731cf139210319d939d4/Documentation/Maestro/BuildAssetRegistry.md#subscription) \r\n  - manually (using REST API), documentation forthcoming\n\n"},{"Id":"8947170178","Type":"IssuesEvent","CreatedAt":"2019-01-24T21:21:44","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10513","RelatedDescription":"Closed issue \"Unbound variable `DOTNET_INSTALL_DIR` in `eng/restore-toolset.sh`\" (#10513) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. `git clone https://github.com/dotnet/cli`\r\n2. `cd cli`\r\n2. `./build.sh`\r\n3. `./build.sh`\r\n\r\n## Expected  behavior\r\n\r\nThe second build should succeed.\r\n\r\n## Actual behavior\r\n\r\n`eng/restore-toolset.sh: line 46: DOTNET_INSTALL_DIR: unbound variable`\r\n\r\n## Workaround\r\n\r\n`DOTNET_INSTALL_DIR=$(pwd)/.dotnet ./build.sh`\r\n\r\n## Environment data\r\n\r\nRepros on macOS 10.14 and Ubuntu 16.04.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8948208983","Type":"PullRequestEvent","CreatedAt":"2019-01-25T01:18:31","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/880","RelatedDescription":"Closed pull request \"Update BuildTools to preview1-03322-02 (master)\" (#880) at dotnet/standard","RelatedBody":""},{"Id":"8947831854","Type":"IssuesEvent","CreatedAt":"2019-01-24T23:36:10","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1052","RelatedDescription":"Closed issue \"Incorrect dll being copied\" (#1052) at dotnet/standard","RelatedBody":"I have\r\n\r\n- ProjectA targeting .Net Standard 2.0 making use of nuget library where the dlls for the different frameworks are named differently\r\n- ProjectB targeting .Net Standard 2.0 references ProjectA\r\n- ProjectC targeting .Net Framework 4.7.2 references ProjectB\r\n- ProjectD targeting .Net Framework 4.7.2 and is a Console app referencing ProjectC\r\n\r\nIf I run ProjectD I get the infamous \"Could not load file or assembly\" for Aspose.Email.Core.dll.\r\n\r\nI played around <RestoreProjectStyle>PackageReference</RestoreProjectStyle> in ProjectC and ProjectD but this results in .net framework dll (i.e Aspose.Email.dll) being copied over from the nuget package and not the .net standard dll (Aspose.Email.Core.dll).  I did not play with binding redirects because I do not think this is related.\r\n\r\nI've migrated manually ProjectC and ProjectD to the new csproj style but this had no effect.\r\n\r\nI do not want to end up with ProjectD referencing the required dlls directly because there must \"the proper way of doing it\".\r\n\r\nI have therefore uploaded a clean barebones project to https://bitbucket.org/netspiri/projectreferencestest.git , so as to see how the experts would do it, in the hope that this might help others. \r\n\r\nI've attached also the output of msbuild ProjectD.csproj /t:rebuild /bl\r\n\r\nIt would be nice if the experts would guide trough thier troubleshooting process.\r\n\r\n[log.txt](https://github.com/dotnet/standard/files/2752202/log.txt)\r\n[msbuild.zip](https://github.com/dotnet/standard/files/2752203/msbuild.zip)\r\n\r\n\r\n"},{"Id":"8947773313","Type":"PullRequestEvent","CreatedAt":"2019-01-24T23:21:34","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Merged pull request \"Set StrongNameKeyID after import sdk.props\" (#1060) at dotnet/standard","RelatedBody":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj "},{"Id":"8947666178","Type":"PullRequestEvent","CreatedAt":"2019-01-24T22:57:01","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Opened pull request \"Set StrongNameKeyID after import sdk.props\" (#1060) at dotnet/standard","RelatedBody":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj "},{"Id":"8947289033","Type":"PullRequestEvent","CreatedAt":"2019-01-24T21:43:12","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Merged pull request \"Add missing dummy fields\" (#1059) at dotnet/standard","RelatedBody":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff."},{"Id":"8946642015","Type":"IssuesEvent","CreatedAt":"2019-01-24T19:47:05","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Closed issue \"Add support for HttpClient.PatchAsync()\" (#1056) at dotnet/standard","RelatedBody":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync()."},{"Id":"8946533711","Type":"PullRequestEvent","CreatedAt":"2019-01-24T19:28:33","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Opened pull request \"Add missing dummy fields\" (#1059) at dotnet/standard","RelatedBody":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff."},{"Id":"8946493936","Type":"IssuesEvent","CreatedAt":"2019-01-24T19:21:56","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Reopened issue \"Add support for HttpClient.PatchAsync()\" (#1056) at dotnet/standard","RelatedBody":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync()."},{"Id":"8946488689","Type":"IssuesEvent","CreatedAt":"2019-01-24T19:21:03","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1055","RelatedDescription":"Closed issue \"Android implementation of HTTPClient throwing up java.io.IOException \" (#1055) at dotnet/standard","RelatedBody":"I believe this relates to the bug detailed in Xamarin's old Bugzilla:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41100\r\n\r\nand is also similar to the issue discussed here:\r\nhttps://github.com/square/okhttp/issues/1517\r\n\r\nHere is the main stacktrace of my issue:\r\n\r\nLoginProvider+<LoginAsync>d__1.MoveNext () C:\\source\\repos\\{MyApp}\\{MyApp}\\{MyApp}\\Services\\LoginProvider.cs:35\r\njava.io.IOException: unexpected end of stream on Connection{testclarity.i-menzies.com:443, proxy=DIRECT@ hostAddress=62.244.173.166 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1} (recycle count=0)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\r\ncom.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\r\ncom.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:905)\r\ncom.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:789)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:443)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:388)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:501)\r\ncom.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\r\ncom.android.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\r\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\r\ncom.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\r\n\r\nI have tried setting the connection closed header and setting chunked transfer encoding but neither of these fixes work. I would try to set the OkHTTP.setRetryOnConnectionFailure(true) but I don't think there is a way to do this in the referenced Java source."},{"Id":"8946483807","Type":"IssuesEvent","CreatedAt":"2019-01-24T19:20:15","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Closed issue \"Add support for HttpClient.PatchAsync()\" (#1056) at dotnet/standard","RelatedBody":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync()."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8948989651","Type":"PullRequestEvent","CreatedAt":"2019-01-25T05:25:47","Actor":"morganbr","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34834","RelatedDescription":"Opened pull request \"Implement Serialization Guard CoreFX portion \" (#34834) at dotnet/corefx","RelatedBody":"Consumes Serialization Guard API in BinaryFormatter and Process. Also includes Serialization Guard's tests. See #34555 for details on Serialization Guard. Depends on https://github.com/dotnet/coreclr/pull/22204"},{"Id":"8948934331","Type":"IssuesEvent","CreatedAt":"2019-01-25T05:06:35","Actor":"Grauenwolf","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/34833","RelatedDescription":"Closed issue \"MemoryPool<T>.RentSlim for allocation-free leases\" (#34833) at dotnet/corefx","RelatedBody":"The current design of `MemoryPool<T>.Rent` returns an interface, which means an object has to be allocated. \r\n\r\n`MemoryPool<T>.RentSlim` would instead return a struct. While this would still be usable in a `using` statement, it wouldn't require heap-allocating memory.\r\n\r\n`RentSlim` would be less user-friendly. As a struct, we cannot prevent copying which in turn means we can't prevent the object from being doubly-disposed. But as it is intended to only be used in conjunction with a `using` block there shouldn't be much of a problem.\r\n\r\nP.S. I'm not enamored by the name RentSlim, but I can't think of a better one at the moment. "},{"Id":"8948867397","Type":"IssuesEvent","CreatedAt":"2019-01-25T04:42:12","Actor":"Grauenwolf","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34833","RelatedDescription":"Opened issue \"MemoryPool<T>.RentSlim for allocation-free leases\" (#34833) at dotnet/corefx","RelatedBody":"The current design of `MemoryPool<T>.Rent` returns an interface, which means an object has to be allocated. \r\n\r\n`MemoryPool<T>.RentSlim` would instead return a struct. While this would still be usable in a `using` statement, it wouldn't require heap-allocating memory.\r\n\r\n`RentSlim` would be less user-friendly. As a struct, we cannot prevent copying which in turn means we can't prevent the object from being doubly-disposed. But as it is intended to only be used in conjunction with a `using` block there shouldn't be much of a problem.\r\n\r\nP.S. I'm not enamored by the name RentSlim, but I can't think of a better one at the moment. "},{"Id":"8948711022","Type":"PullRequestEvent","CreatedAt":"2019-01-25T03:47:47","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34827","RelatedDescription":"Merged pull request \"Fix BigInteger tests in UAP\" (#34827) at dotnet/corefx","RelatedBody":"Fix https://github.com/dotnet/corefx/issues/34825\r\n\r\nhttps://github.com/dotnet/corefx/pull/34827/files?w=1"},{"Id":"8948711020","Type":"IssuesEvent","CreatedAt":"2019-01-25T03:47:47","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/34825","RelatedDescription":"Closed issue \"Test failure: System.Numerics.Tests.ToStringTest/RunRegionSpecificStandardFormatToStringTests\" (#34825) at dotnet/corefx","RelatedBody":"Opened on behalf of @danmosemsft\n\nThe test `System.Numerics.Tests.ToStringTest/RunRegionSpecificStandardFormatToStringTests` has failed.\n\nFailure Message:\n```\nAssert.True() Failure\\r\nExpected: True\\r\nActual:   False\n```\n\nStack Trace:\n```\n   at System.Numerics.Tests.ToStringTest.VerifyExpectedStringResult(String expectedResult, String result) in F:\\vsagent\\20\\s\\src\\System.Runtime.Numerics\\tests\\BigInteger\\BigIntegerToStringTests.cs:line 1455\n   at System.Numerics.Tests.ToStringTest.VerifyToString(String test, String format, IFormatProvider provider, Boolean expectError, String expectedResult) in F:\\vsagent\\20\\s\\src\\System.Runtime.Numerics\\tests\\BigInteger\\BigIntegerToStringTests.cs:line 1425\n   at System.Numerics.Tests.ToStringTest.VerifyToString(String test, String format, String expectedResult) in F:\\vsagent\\20\\s\\src\\System.Runtime.Numerics\\tests\\BigInteger\\BigIntegerToStringTests.cs:line 1401\n   at System.Numerics.Tests.ToStringTest.RunStandardFormatToStringTests(Random random, String format, String negativeSign, Int32 precision, StringFormatter formatter) in F:\\vsagent\\20\\s\\src\\System.Runtime.Numerics\\tests\\BigInteger\\BigIntegerToStringTests.cs:line 465\n   at System.Numerics.Tests.ToStringTest.RunRegionSpecificStandardFormatToStringTests() in F:\\vsagent\\20\\s\\src\\System.Runtime.Numerics\\tests\\BigInteger\\BigIntegerToStringTests.cs:line 256\n```\n\nBuild : 3.0 - 20190124.2 (UWP F5 Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS4-x86\n  - Release\n"},{"Id":"8948697794","Type":"PullRequestEvent","CreatedAt":"2019-01-25T03:43:23","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34811","RelatedDescription":"Merged pull request \"Fix culture handling in legacy System.Json library\" (#34811) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/34807\r\ncc: @danmosemsft"},{"Id":"8948697786","Type":"IssuesEvent","CreatedAt":"2019-01-25T03:43:23","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/34807","RelatedDescription":"Closed issue \"Test failure: System.Json.Tests.JsonPrimitiveTests/ToString_TimeSpan\" (#34807) at dotnet/corefx","RelatedBody":"Opened on behalf of @danmosemsft\n\nThe test `System.Json.Tests.JsonPrimitiveTests/ToString_TimeSpan` has failed.\n\nFailure Message:\n```\nAssert.Equal() Failure\\r\n                    ↓ (pos 10)\\r\nExpected: 0:00:00:00.0000000\\r\nActual:   0:00:00:00,0000000\\r\n                    ↑ (pos 10)\n```\n\nStack Trace:\n```\n   at System.Json.Tests.JsonPrimitiveTests.ToString(JsonValue primitive, String expected) in F:\\vsagent\\3\\s\\src\\System.Json\\tests\\JsonPrimitiveTests.cs:line 90\n   at System.Json.Tests.JsonPrimitiveTests.ToString_TimeSpan() in F:\\vsagent\\3\\s\\src\\System.Json\\tests\\JsonPrimitiveTests.cs:line 85\n```\n\nBuild : 3.0 - 20190124.1 (UWP F5 Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS4-x86\n  - Release\n"},{"Id":"8948634704","Type":"PullRequestEvent","CreatedAt":"2019-01-25T03:22:43","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34832","RelatedDescription":"Opened pull request \"Add test for new CancellationTokenSource(0)\" (#34832) at dotnet/corefx","RelatedBody":"Validate correct behavior when a CTS is constructed to be immediately canceled via a 0 timeout.\r\ncc: @tarekgh \r\nValidation for https://github.com/dotnet/coreclr/pull/18098"},{"Id":"8948612936","Type":"IssuesEvent","CreatedAt":"2019-01-25T03:15:44","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34831","RelatedDescription":"Opened issue \"API Proposal: Console.CancellationToken\" (#34831) at dotnet/corefx","RelatedBody":"To compose better with `async` and particularly `Task Main(...)` it would be good to have a `CancellationToken` for Console\r\n```csharp\r\npublic partial sealed class Console\r\n{\r\n    public static CancellationToken CancellationToken { get; }\r\n    public static void ResetCancellation(); // reissues the CancellationToken so a new cancellation can be listened to\r\n}\r\n```\r\n\r\nOther signals would be desirable like `sighup`, but that might be unix only?\r\n\r\n/cc @terrajobst @vcsjones "},{"Id":"8948465348","Type":"IssuesEvent","CreatedAt":"2019-01-25T02:31:41","Actor":"GrabYourPitchforks","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34830","RelatedDescription":"Opened issue \"API proposal: UTF-8 web encoders\" (#34830) at dotnet/corefx","RelatedBody":"(This is the follow-up to https://github.com/dotnet/corefx/issues/33509, where the review was marked as \"needs work\".)\r\n\r\nSome customers (notably, the JSON libraries) need to perform UTF-8 escaping of strings. The existing UTF-16 encoding APIs are insufficient for their needs. This proposal is for a sister set of APIs that operate on UTF-8 data.\r\n\r\n## Proposed API\r\n\r\n```cs\r\n// Proposed NEW types in existing namespace\r\n\r\nnamespace System.Text.Encodings.Web\r\n{\r\n   public abstract class Utf8TextEncoder\r\n   {    \r\n      /*\r\n       * ABSTRACT METHODS\r\n       * Any subclassed type must override at minimum these two methods. All other methods\r\n       * are built on top of these two.\r\n       */\r\n\r\n      // Returns the number of elements written to the destination buffer,\r\n      // or -1 if the destination buffer is too small to contain the encoding of this value.\r\n      public abstract int EncodeSingleRune(Rune value, Span<Utf8Char> destination);\r\n\r\n      // Return true if this scalar value must be encoded before being written to the destination\r\n      // buffer; false if it can be copied to the destination buffer as-is.\r\n      public abstract bool RuneMustBeEncoded(Rune value);\r\n\r\n      /*\r\n       * VIRTUAL METHODS\r\n       * The default implementations of these methods will work but may not be very optimized.\r\n       * Subclassed types may with to override them to provide more optimized behavior.\r\n       */\r\n\r\n      // Typical OperationStatus-based API.\r\n      public virtual OperationStatus Encode(ReadOnlySpan<Utf8Char> source, Span<Utf8Char> destination, out int countConsumed, out int countWritten, bool isFinalChunk = true);\r\n\r\n      // Takes an IBufferWriter instead of a Span as a sink. Can never return DestinationTooSmall\r\n      // since buffer writers should always grow. Note that the \"count written\" parameter is outed\r\n      // as an int64 instead of an int32 so that we can avoid integer overflow. Also note that we're\r\n      // using IBufferWriter<byte> instead of IBufferWriter<Utf8Char>, as the typical use case is\r\n      // for buffer writers to wrap i/o pipes.\r\n      public virtual OperationStatus Encode(ReadOnlySpan<Utf8Char> source, IBufferWriter<byte> utf8Destination, out int countConsumed, out long countWritten, bool isFinalChunk = true);\r\n\r\n      // Convenience API for working with UTF-16 source data.\r\n      // Transcoding and escaping are performed as a single step when writing to the destination.\r\n      public virtual OperationStatus Encode(ReadOnlySpan<char> source, Span<Utf8Char> destination, out int countConsumed, out int countWritten, bool isFinalChunk = true);\r\n      public virtual OperationStatus Encode(ReadOnlySpan<char> source, IBufferWriter<byte> utf8Destination, out int countConsumed, out long countWritten, bool isFinalChunk = true);\r\n\r\n      // When Utf8String comes online, this virtual method will be added.\r\n      public virtual Utf8String Encode(Utf8String value);\r\n\r\n      // Returns the index in the span of the first element that must be escaped, or -1 if no\r\n      // elements require escaping. This is generally used as an optimization by callers who\r\n      // may wish to perform their own bulk memcpy of data that doesn't require escaping.\r\n      // (Or, if it returns -1, they may opt to skip the memcpy entirely.)\r\n      public virtual int GetIndexOfFirstElementToEncode(ReadOnlySpan<Utf8Char> span);\r\n   }\r\n}\r\n```\r\n\r\nAnd the subclassed types and the factories to create them:\r\n\r\n```cs\r\n// Proposed NEW types in existing namespace\r\n\r\nnamespace System.Text.Encodings.Web\r\n{\r\n   public abstract class Utf8HtmlEncoder : Utf8TextEncoder\r\n   {\r\n      // These methods mimic the static factories on the existing UTF-16 \"HtmlEncoder\" type.\r\n\r\n      public static Utf8HtmlEncoder Default { get; }\r\n      public static Utf8HtmlEncoder Create(TextEncoderSettings settings);\r\n      public static Utf8HtmlEncoder Create(params UnicodeRange[] allowedRanges);\r\n   }\r\n\r\n   public abstract class Utf8JavaScriptEncoder : Utf8TextEncoder\r\n   {\r\n      // These methods mimic the static factories on the existing UTF-16 \"JavaScriptEncoder\" type.\r\n\r\n      public static Utf8JavaScriptEncoder Default { get; }\r\n      public static Utf8JavaScriptEncoder Create(TextEncoderSettings settings);\r\n      public static Utf8JavaScriptEncoder Create(params UnicodeRange[] allowedRanges);\r\n   }\r\n\r\n   public abstract class Utf8UrlEncoder : Utf8TextEncoder\r\n   {\r\n      // These methods mimic the static factories on the existing UTF-16 \"UrlEncoder\" type.\r\n\r\n      public static Utf8UrlEncoder Default { get; }\r\n      public static Utf8UrlEncoder Create(TextEncoderSettings settings);\r\n      public static Utf8UrlEncoder Create(params UnicodeRange[] allowedRanges);\r\n   }\r\n}\r\n```\r\n\r\n## Alternative API proposal\r\n\r\nIf we instead want to enlighten the existing encoding APIs to understand UTF-8 data in addition to UTF-16 data, the modifications to the existing types might look like the following.\r\n\r\n```cs\r\nnamespace System.Text.Encodings.Web\r\n{\r\n   // MODIFICATIONS to existing class\r\n\r\n   public abstract class TextEncoder\r\n   {\r\n      // MODIFICATION: existing abstract method becomes virtual\r\n      [EditorBrowsable(EditorBrowsableState.Never)] // EXISTING attribute\r\n      [Obsolete(\"This value is a lie. Don't depend on it.\")] // NEW attribute\r\n      public virtual int MaxOutputCharactersPerInputCharacter\r\n      {\r\n         get\r\n         {\r\n            // default implementation\r\n            return 0;\r\n         }\r\n      }\r\n\r\n      // MODIFICATION: existing abstract method becomes virtual\r\n      [EditorBrowsable(EditorBrowsableState.Never)] // EXISTING attribute\r\n      public abstract bool WillEncode(int unicodeScalar)\r\n      {\r\n         // default implementation\r\n         return (!Rune.TryCreate(unicodeScalar, out Rune value) || RuneMustBeEncoded(value));\r\n      }\r\n\r\n      // MODIFICATION: existing abstract method becomes virtual\r\n      [CLSCompliant(false)] // EXISTING attribute\r\n      [EditorBrowsable(EditorBrowsableState.Never)] // EXISTING attribute\r\n      public unsafe abstract int FindFirstCharacterToEncode(char* text, int textLength)\r\n      {\r\n         // default implementation\r\n         return GetIndexOfFirstElementToEncode(new ReadOnlySpan<char>(text, textLength));\r\n      }\r\n\r\n      // MODIFICATION: existing abstract method becomes virtual\r\n      [CLSCompliant(false)] // EXISTING attribute\r\n      [EditorBrowsable(EditorBrowsableState.Never)] // EXISTING attribute\r\n      public unsafe abstract bool TryEncodeUnicodeScalar(int unicodeScalar, char* buffer, int bufferLength, out int numberOfCharactersWritten)\r\n      {\r\n         // default implementation\r\n         if (Rune.TryCreate(unicodeScalar, out Rune rune))\r\n         {\r\n            int charsWritten = EncodeSingleRune(rune, new Span<char>(buffer, bufferLength));\r\n            if (charsWritten > 0)\r\n            {\r\n               numberOfCharsWritten = charsWritten;\r\n               return true;\r\n            }\r\n         }\r\n         numberOfCharsWritten = 0;\r\n         return false;\r\n      }\r\n\r\n      /*\r\n       * NEW virtual methods that serve as the two \"abstract\" methods.\r\n       */\r\n\r\n      // Default implementation attempts to call WillEncode(int) if it has been overridden.\r\n      // If neither this nor WillEncode(int) has been overridden, the default implementation\r\n      // throws an exception saying \"you must override me.\"\r\n      public virtual bool RuneMustBeEncoded(Rune value);\r\n\r\n      // Default implementation attempts to call TryEncodeUnicodeScalar(...) if it has been\r\n      // overridden. If neither this nor EncodeSingleRune has been overridden, the default\r\n      // implementation throws an exception saying \"you must override me.\"\r\n      //\r\n      // Returns the number of chars written to the buffer, or -1 if the buffer is too small\r\n      // to contain the escaped scalar value.\r\n      public virtual int EncodeSingleRune(Rune value, Span<char> buffer);\r\n\r\n      /*\r\n       * NEW virtual method that serves as a UTF-16 workhorse method. The derived type\r\n       * is _not required_ to override it since we can provide an approriate base implementation,\r\n       * but best performance will be achieved when this method is overridden.\r\n       */\r\n\r\n      public virtual int GetIndexOfFirstElementToEncode(ReadOnlySpan<char> span);\r\n\r\n      /*\r\n       * EXISTING APIs dealing with UTF-16 output - no modifications to signatures.\r\n       */\r\n\r\n      public virtual string Encode(string value);\r\n      public virtual void Encode(TextWriter output, char[] value, int startIndex, int characterCount);\r\n      public void Encode(TextWriter output, string value);\r\n      public virtual void Encode(TextWriter output, string value, int startIndex, int characterCount);\r\n\r\n      /*\r\n       * NEW APIs dealing with UTF-8 output - all are virtual but do not require overriding.\r\n       * The default implementations of all UTF-8 APIs delegate to the UTF-16 implementations.\r\n       * This means that the behavior will still be correct if these virtuals are not overridden, but\r\n       * performance will tank.\r\n       */\r\n       \r\n      // UTF-8 equivalent of EncodeSingleRune(Rune, Span<char>).\r\n      public virtual int EncodeSingleRune(Rune value, Span<Utf8Char> buffer);\r\n\r\n      // UTF-8 equivalent of GetIndexOfFirstElementToEncode(ReadOnlySpan<char>).\r\n      public virtual int GetIndexOfFirstElementToEncode(ReadOnlySpan<Utf8Char> span);\r\n\r\n      // Typical OperationStatus-based API.\r\n      public virtual OperationStatus Encode(ReadOnlySpan<Utf8Char> source, Span<Utf8Char> destination, out int countConsumed, out int countWritten, bool isFinalChunk = true);\r\n\r\n      // Takes an IBufferWriter instead of a Span as a sink. Can never return DestinationTooSmall\r\n      // since buffer writers should always grow. Note that the \"count written\" parameter is outed\r\n      // as an int64 instead of an int32 so that we can avoid integer overflow. Also note that we're\r\n      // using IBufferWriter<byte> instead of IBufferWriter<Utf8Char>, as the typical use case is\r\n      // for buffer writers to wrap i/o pipes.\r\n      public virtual OperationStatus Encode(ReadOnlySpan<Utf8Char> source, IBufferWriter<byte> utf8Destination, out int countConsumed, out long countWritten, bool isFinalChunk = true);\r\n\r\n      // Convenience API for working with UTF-16 source data.\r\n      // Transcoding and escaping are performed as a single step when writing to the destination.\r\n      public virtual OperationStatus Encode(ReadOnlySpan<char> source, Span<Utf8Char> destination, out int countConsumed, out int countWritten, bool isFinalChunk = true);\r\n      public virtual OperationStatus Encode(ReadOnlySpan<char> source, IBufferWriter<byte> utf8Destination, out int countConsumed, out long countWritten, bool isFinalChunk = true);\r\n\r\n      // When Utf8String comes online, this virtual method will be added.\r\n      public virtual Utf8String Encode(Utf8String value);\r\n   }\r\n}\r\n```\r\n\r\n## Discussion\r\n\r\nThe first proposal uses newer data structures and concepts that weren't available when we designed the original types, so we can eliminate the warts from the original types. It's also fully able to be subclassed without requiring the developer to enable advanced Intellisense features or to drop down to unsafe code blocks.\r\n\r\nThe biggest problem with the first proposal is that it leads to type explosion throughout the namespace. Since there are two copies of each encoder, consumers would need to be trained on when it's appropriate to use each type. Dependency injection systems (like used in aspnet) would need to take both as inputs since they don't know what the application will need at runtime.\r\n\r\nThe second proposal attempts to avoid type explosion by modifying the existing types. On one hand this is an improvement on https://github.com/dotnet/corefx/issues/33509 in that this is not a source or binary breaking change. However, it leads to significant complexity both for developers who subclass this (how does the dev know which methods are mandatory to override if everything is virtual instead of abstract?) and for the implementation (how do we quickly and reliably tell if the current instance has overridden a specific method?)."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8948963384","Type":"PullRequestEvent","CreatedAt":"2019-01-25T05:16:49","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32649","RelatedDescription":"Merged pull request \"Fix metadata references not always having file watchers\" (#32649) at dotnet/roslyn","RelatedBody":"When we created metadata references inside of VisualStudioProject, we ensured we created them with a file watcher so we would know about changes. When we created a metadata reference after we converted a project reference back to a metadata reference that was originally a metadata reference, we didn't do so since that conversion happens in VisualStudioWorkspaceImpl itself and it couldn't access the file watcher.\r\n\r\nThis fixes this. The majority of the work here is just moving code around. Basically the watchers were per-project, which meant that it'd be forbidden to call into them the Workspace code because that would violate the lock hierarchy. To fix this, I move the file watching logic into it's own little type with a lock, and since no calls are made back into the workspace under that lock, it removes the deadlock concerns.\r\n\r\nFixes #32554.\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nCustomer has a project with lots of P2P references and loads/unloads projects in various orders. In some cases, this will cause VS to crash or at least the project system to get in a missynced state.\r\n\r\n### Bugs this fixes\r\n\r\ndotnet/roslyn#32554 and https://devdiv.visualstudio.com/DevDiv/_workitems/edit/750094\r\n\r\n### Workarounds, if any\r\n\r\nNone, really. If you don't unload projects you won't hit it, but creating some types of projects implicitly do the problematic operations in their template wizard.\r\n\r\n### Risk\r\n\r\nModerate: it's a fair amount of code churn, but the churn is fairly straightforward.\r\n\r\n### Performance impact\r\n\r\nNone.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nYes, this was broken by a late Preview 1 fix that missed an edge case.\r\n\r\n### Root cause analysis\r\n\r\nThis edge case noticed in testing of a fix we made for Preview 1, but the full impact wasn't realized, and at the time a bug was filed to follow up on it. This is fixing the issue. Tests have been added to cover this scenario too.\r\n\r\n### How was the bug found?\r\n\r\nNoticed during testing of another fix, and also internal testing with certain templates that also trigger the bug.\r\n\r\n</details>"},{"Id":"8948963377","Type":"IssuesEvent","CreatedAt":"2019-01-25T05:16:49","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32554","RelatedDescription":"Closed issue \"IntelliSense errors for dependency references in newly created Service Fabric project\" (#32554) at dotnet/roslyn","RelatedBody":"Regression in 16.0.\r\n\r\n1. Launch the new project dialog\r\n2. Create a Service Fabric Application project\r\n3. Select the .NET Core Actor Service template from the New Service Fabric Service dialog\r\n4. Wait for the solution to load and dependencies to restore\r\n5. Check the Error List window and ensure the filter is set to show IntelliSense errors\r\n\r\nExpected:\r\nNo IntelliSense errors should be reported (dependencies are restored and all references are resolvable).\r\n\r\nActual:\r\nAll references to dependencies (NuGet, SDK, or Project references) in the primary service project (Actor1 by default) are flagged as IntelliSense errors.\r\n\r\nThe errors are only reported for the newly created project and don't reappear after closing and re-opening the solution or unloading and reloading the specific project the errors are associated with. A full build succeeds without any errors or warnings, but doesn't clear the IntelliSense errors."},{"Id":"8948853236","Type":"PullRequestEvent","CreatedAt":"2019-01-25T04:36:50","Actor":"chborl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32772","RelatedDescription":"Opened pull request \"Preserve Extern modifier when running code cleanup\" (#32772) at dotnet/roslyn","RelatedBody":"Fixes #29561 \r\n\r\noutstanding issues:\r\n\r\n- [ ] Fix the formatting of the line after the field declaration\r\n\r\n- [ ] Add tests for other modifiers\r\n\r\n"},{"Id":"8948834354","Type":"PullRequestEvent","CreatedAt":"2019-01-25T04:30:05","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32762","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#32762) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8948610998","Type":"PullRequestEvent","CreatedAt":"2019-01-25T03:15:09","Actor":"JoeRobich","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32765","RelatedDescription":"Merged pull request \"Merge master to features/NullableDogfood\" (#32765) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8948607181","Type":"PullRequestEvent","CreatedAt":"2019-01-25T03:13:52","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32760","RelatedDescription":"Merged pull request \"Merge master to dev16.1-preview1 \" (#32760) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8948606871","Type":"PullRequestEvent","CreatedAt":"2019-01-25T03:13:48","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32764","RelatedDescription":"Merged pull request \"Merge master to features/editorconfig-in-compiler\" (#32764) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8948561683","Type":"PullRequestEvent","CreatedAt":"2019-01-25T03:00:14","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32761","RelatedDescription":"Merged pull request \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32761) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8948757161","Type":"PullRequestEvent","CreatedAt":"2019-01-25T04:03:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6890","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6890) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams"},{"Id":"8948577053","Type":"IssuesEvent","CreatedAt":"2019-01-25T03:04:40","Actor":"xiaotie","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6891","RelatedDescription":"Opened issue \"Some unexpected behavior using timer with comdlg\" (#6891) at dotnet/corert","RelatedBody":"There are some unexpected behavior when use system timer in corert, but it is ok in dotnet core:\r\n\r\n```\r\n        private static System.Timers.Timer timer;\r\n\r\n        public static void Test()\r\n        {\r\n            timer = new System.Timers.Timer();\r\n            timer.Interval = 1000;\r\n            timer.Start();  // It is ok in dotnet core native when comment this line \r\n\r\n            for (int i = 0; i < 100; i++)\r\n                new FileDialog().RunDialog();\r\n        }\r\n```\r\n\r\nHere is the full code:  [https://github.com/xiaotie/DotNetNativeTimerBug](https://github.com/xiaotie/DotNetNativeTimerBug)"},{"Id":"8948539789","Type":"PullRequestEvent","CreatedAt":"2019-01-25T02:53:43","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6890","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6890) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8948406661","Type":"PullRequestEvent","CreatedAt":"2019-01-25T02:14:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6889","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6889) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @jkotas"},{"Id":"8948158806","Type":"PullRequestEvent","CreatedAt":"2019-01-25T01:05:23","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6889","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6889) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @jkotas"},{"Id":"8948152848","Type":"PullRequestEvent","CreatedAt":"2019-01-25T01:03:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6888","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6888) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @tannergooding"},{"Id":"8947813635","Type":"PullRequestEvent","CreatedAt":"2019-01-24T23:31:29","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6888","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6888) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"8947798928","Type":"PullRequestEvent","CreatedAt":"2019-01-24T23:27:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6879","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6879) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams"},{"Id":"8947636826","Type":"PullRequestEvent","CreatedAt":"2019-01-24T22:50:38","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6874","RelatedDescription":"Merged pull request \"Basic infra support for running local CPAOT GC stress tests\" (#6874) at dotnet/corert","RelatedBody":"This change basically introduces a new option /gcstresslevel\r\nin tests\\runtest.cmd akin to a similar option in the CoreCLR-specific\r\nscript. I have also bumped up the timeouts to 1 hour as CPAOT\r\nTop200 test suite is currently timing out in ILC compilation of\r\n1~2 tests (typically the bigvtbl tests).\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8947620477","Type":"PullRequestEvent","CreatedAt":"2019-01-24T22:47:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6887","RelatedDescription":"Merged pull request \"Fix argument checks in ThreadPool.RegisterWaitForSingleObject.\" (#6887) at dotnet/corert","RelatedBody":"Extracted from #6880. /cc @jkotas \r\n\r\nI will submit the unit tests to CoreFX soon."},{"Id":"8947139190","Type":"PullRequestEvent","CreatedAt":"2019-01-24T21:16:06","Actor":"filipnavara","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6887","RelatedDescription":"Opened pull request \"Fix argument checks in ThreadPool.RegisterWaitForSingleObject.\" (#6887) at dotnet/corert","RelatedBody":"Extracted from #6880. /cc @jkotas \r\n\r\nI will submit the unit tests to CoreFX soon."},{"Id":"8946718854","Type":"PullRequestEvent","CreatedAt":"2019-01-24T20:00:12","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6886","RelatedDescription":"Closed pull request \"Revert \"Merge master to nmirror\"\" (#6886) at dotnet/corert","RelatedBody":""},{"Id":"8946699716","Type":"PullRequestEvent","CreatedAt":"2019-01-24T19:56:53","Actor":"AvaGlobalgithub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6886","RelatedDescription":"Opened pull request \"Revert \"Merge master to nmirror\"\" (#6886) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8948180213","Type":"PullRequestEvent","CreatedAt":"2019-01-25T01:10:32","Actor":"cdmihai","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2868","RelatedDescription":"Opened pull request \"Fix transitive references\" (#2868) at dotnet/sdk","RelatedBody":"Fixes #2855\r\n"},{"Id":"8948060215","Type":"IssuesEvent","CreatedAt":"2019-01-25T00:37:00","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2867","RelatedDescription":"Opened issue \"Using PackAsToolShimRuntimeIdentifiers and netcoreapp3.0 fails with error NETSDK1065\" (#2867) at dotnet/sdk","RelatedBody":"**Repro**\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <PackAsTool>true</PackAsTool>\r\n    <PackAsToolShimRuntimeIdentifiers>win-x64;win-x86</PackAsToolShimRuntimeIdentifiers>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n`dotnet pack`\r\n\r\n**Result**\r\n```\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\3.0.100-preview-010166\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(228,5): error NETSDK1065: Cannot find app host for win-x64. win-x64 could be an invalid runtime identifier (RID). For more information about RID, see https://aka.ms/rid-catalog. [C:\\src\\aspnet\\BuildTools\\repro\\CliTool\\CliTool.csproj]\r\n```\r\n\r\n**Details**\r\n\r\nUsing 3.0.100-preview-010166\r\n\r\ncc @nguerrera @wli3 "},{"Id":"8947956791","Type":"PullRequestEvent","CreatedAt":"2019-01-25T00:08:22","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2861","RelatedDescription":"Merged pull request \"Update PerfGroovy - master\" (#2861) at dotnet/sdk","RelatedBody":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK."},{"Id":"8947941704","Type":"PullRequestEvent","CreatedAt":"2019-01-25T00:04:29","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2862","RelatedDescription":"Closed pull request \"Update PerfGroovy - release/2.2.2xx\" (#2862) at dotnet/sdk","RelatedBody":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK."},{"Id":"8947941468","Type":"PullRequestEvent","CreatedAt":"2019-01-25T00:04:25","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2863","RelatedDescription":"Closed pull request \"Update PerfGroovy - release/2.2.1xx\" (#2863) at dotnet/sdk","RelatedBody":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK."},{"Id":"8947941261","Type":"PullRequestEvent","CreatedAt":"2019-01-25T00:04:22","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2864","RelatedDescription":"Closed pull request \"Update PerfGroovy - release/2.1.6xx\" (#2864) at dotnet/sdk","RelatedBody":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK."},{"Id":"8947940957","Type":"PullRequestEvent","CreatedAt":"2019-01-25T00:04:17","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2865","RelatedDescription":"Closed pull request \"Update PerfGroovy - release/2.1.5xx\" (#2865) at dotnet/sdk","RelatedBody":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"open","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Open PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"403010502","IsPullRequest":true,"CreatedAt":"2019-01-25T05:23:09","Actor":"morganbr","Number":"22204","RawContent":null,"Title":"Implement Serialization Guard","State":"open","Body":"Implements the CoreLib Serialization Guard API and consumes it in CoreLib targets. See https://github.com/dotnet/corefx/issues/34555 for details on Serialization Guard.","Url":"https://github.com/dotnet/coreclr/pull/22204","RelatedDescription":"Open PR \"Implement Serialization Guard\" (#22204)"},{"Id":"403005926","IsPullRequest":true,"CreatedAt":"2019-01-25T04:55:20","Actor":"jashook","Number":"22203","RawContent":null,"Title":"Superpmi parallel dasm output","State":"open","Body":"This speeds up the dasm output significantly. In addition it will also correctly output `dasm` in place of `asm` files. This will enable jit-analyze to correctly find and diff the files.\r\n\r\nIn addition, this addresses existing requests of not deleting the existing asm/jit_dump folders on each subsequent asmdiff run.","Url":"https://github.com/dotnet/coreclr/pull/22203","RelatedDescription":"Open PR \"Superpmi parallel dasm output\" (#22203)"},{"Id":"402983628","IsPullRequest":true,"CreatedAt":"2019-01-25T02:51:31","Actor":"AndyAyersMS","Number":"22202","RawContent":null,"Title":"Fix finding entry point unwind record for a method with fragmented un…","State":"open","Body":"…wind\r\n\r\nOn Arm and Arm64 unwind records can only cover a limited range of code\r\n(512K and 1MB respectively). So for methods larger than this the jit\r\nwill emit multiple \"fragment\" unwind records to cover the full method code\r\nrange. Only the first of these describes the behavior of the method prolog.\r\n\r\nWhen mapping an offset back to a method's entry point unwind, make sure to\r\nfind this \"root\" unwind record instead of one of the internal fragments.\r\n\r\nFixes #19209.","Url":"https://github.com/dotnet/coreclr/pull/22202","RelatedDescription":"Open PR \"Fix finding entry point unwind record for a method with fragmented un…\" (#22202)"},{"Id":"402980106","IsPullRequest":false,"CreatedAt":"2019-01-25T02:34:07","Actor":"AriNuer","Number":"22201","RawContent":null,"Title":"[arm64/windows] Test \" Interop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd\" failed with Assert failure","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_gcstress0xc_tst/55/testReport/\r\n**Failed test:**\r\nInterop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd\r\n\r\n**Failed log:**\r\n```\r\nInterop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd [FAIL]\r\n        \r\n        Assert failure(PID 16256 [0x00003f80], Thread: 16260 [0x3f84]): SanityCheck()\r\n        \r\n        CORECLR! GetCLRRuntimeHost + 0x4AEB54 (0x00007ffa`e678fbd4)\r\n        CORECLR! GetCLRRuntimeHost + 0x3D802C (0x00007ffa`e66b90ac)\r\n        CORECLR! GetCLRRuntimeHost + 0x3D7D6C (0x00007ffa`e66b8dec)\r\n        CORECLR! GetCLRRuntimeHost + 0x54CDA8 (0x00007ffa`e682de28)\r\n        CORECLR! GetCLRRuntimeHost + 0x54CFE4 (0x00007ffa`e682e064)\r\n        CORECLR! GetCLRRuntimeHost + 0x54BE20 (0x00007ffa`e682cea0)\r\n        CORECLR! GetCLRRuntimeHost + 0x44B97C (0x00007ffa`e672c9fc)\r\n        CORECLR! GC_VersionInfo + 0xB2158 (0x00007ffa`e6a03f98)\r\n        CORECLR! GetCLRRuntimeHost + 0x184D80 (0x00007ffa`e6465e00)\r\n        CORECLR! GetCLRRuntimeHost + 0x186740 (0x00007ffa`e64677c0)\r\n            File: d:\\j\\workspace\\arm64_cross_c---0aaef436\\src\\vm\\methodtable.cpp Line: 10039\r\n            Image: C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n        \r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Reports\\Interop.PInvoke\\SafeHandles\\ReleaseHandle\\ReleaseHandleTest\\ReleaseHandleTest.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Interop\\PInvoke\\SafeHandles\\ReleaseHandle\\ReleaseHandleTest>set COMPLUS_NOGUIONASSERT=1 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Interop\\PInvoke\\SafeHandles\\ReleaseHandle\\ReleaseHandleTest>set COMPLUS_CONTINUEONASSERT=0 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Interop\\PInvoke\\SafeHandles\\ReleaseHandle\\ReleaseHandleTest>set COMPLUS_GCSTRESS=0xC \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Interop\\PInvoke\\SafeHandles\\ReleaseHandle\\ReleaseHandleTest>set COMPLUS_TIEREDCOMPILATION=0 \r\n         \"C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\corerun.exe\" ReleaseHandleTest.exe \r\n        SHReleasing_OutParams\r\n        \tForcing finalizer for the SFH param to run...\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\r\n  > C:\\j\\workspace\\arm64_cross_c---86d54ed4\\bin\\tests\\Windows_NT.arm64.Checked\\Interop\\PInvoke\\SafeHandles\\ReleaseHandle\\ReleaseHandleTest\\ReleaseHandleTest.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\arm64_cross_c---0aaef436\\bin\\tests\\Windows_NT.arm64.Checked\\TestWrappers\\Interop.PInvoke\\Interop.PInvoke.XUnitWrapper.cs(6199,0): at Interop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22201","RelatedDescription":"Open issue \"[arm64/windows] Test \" Interop_PInvoke._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_._SafeHandles_ReleaseHandle_ReleaseHandleTest_ReleaseHandleTest_cmd\" failed with Assert failure\" (#22201)"},{"Id":"402971627","IsPullRequest":false,"CreatedAt":"2019-01-25T01:51:20","Actor":"VincentBu","Number":"22200","RawContent":null,"Title":"[arm64] Test failed: JIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/97/\r\n\r\n**Failed tests:**\r\nJIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh\r\n\r\n**Log:**\r\n```\r\nJIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh [FAIL]\r\n        /n/nReturn code:      1/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/JIT/Regression/Reports/JIT.Regression/JitBlue/GitHub_20657/GitHub_20657/GitHub_20657.output.txt/nRaw output:/nBEGIN EXECUTION\r\n        /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/corerun GitHub_20657.exe\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_jitstress2_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/JIT/Regression/JitBlue/GitHub_20657/GitHub_20657/GitHub_20657.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.Regression/JIT.Regression.XUnitWrapper.cs(82989,0): at JIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22200","RelatedDescription":"Open issue \"[arm64] Test failed: JIT_Regression._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_._JitBlue_GitHub_20657_GitHub_20657_GitHub_20657_sh\" (#22200)"},{"Id":"402903575","IsPullRequest":true,"CreatedAt":"2019-01-25T01:34:40","Actor":"janvorli","Number":"22193","RawContent":null,"Title":"Fix collectible AssemblyLoadContext weak handle","State":"closed","Body":"Native runtime keeps short weak handle for collectible AssemblyLoadContext\r\nuntil the unload time when it gets converted to a strong one. A test\r\nrunning with gc stress has recently hit a problem caused by the fact\r\nthat the weak handle is \"short weak\" and thus doesn't track\r\nresurrection. Here is what happened:\r\n* The test code has lost reference to the AssemblyLoadContext\r\n* Finalizer of that AssemblyLoadContext was just invoked due to that and\r\n  so the weak short handle was destroyed.\r\n* Native runtime called AssemblyLoadContext.Resolve with the now dead\r\n  handle, the function tried to get the managed object and failed.\r\n\r\nThe fix is to change the handle type to long weak so that it doesn't get\r\ndestroyed before the finalization.\r\n\r\nCloses #22174","Url":"https://github.com/dotnet/coreclr/pull/22193","RelatedDescription":"Closed or merged PR \"Fix collectible AssemblyLoadContext weak handle\" (#22193)"},{"Id":"402496653","IsPullRequest":false,"CreatedAt":"2019-01-25T01:34:40","Actor":"jkoritzinsky","Number":"22174","RawContent":null,"Title":"Collectible AssemblyLoadContext sometimes released when not directly referenced in managed code but still in use.","State":"closed","Body":"Sometimes, it is possible for a collectible ALC to be GC'd and not finalized while it is still in use. On x86, with the following environment flags, the Interop/ICustomMarshaler/ConflictingNames/MultipleALCs test will fail when trying to get a `Type` from an `Assembly` that was loaded from an unloadable ALC. It seems that the managed ALC object is collected but not finalized after the call to `AssemblyLoadContext.LoadAssemblyFromPath` and before the call to `Assembly.GetType`.\r\n\r\nEnvironment:\r\n```\r\nset COMPlus_GCStress=2\r\nset COMPlus_TieredCompilation=0\r\nset COMPlus_ZapDisable=1\r\nset COMPlus_ReadyToRun=0\r\n```\r\n\r\nSee #22133 , #22109.\r\n","Url":"https://github.com/dotnet/coreclr/issues/22174","RelatedDescription":"Closed issue \"Collectible AssemblyLoadContext sometimes released when not directly referenced in managed code but still in use.\" (#22174)"},{"Id":"402964844","IsPullRequest":false,"CreatedAt":"2019-01-25T01:16:53","Actor":"VincentBu","Number":"22199","RawContent":null,"Title":"[x86] CoreMangLib/components/stopwatch/Co9600Ctor/Co9600Ctor.sh failed in x86_checked_ubuntu_tst","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/x86_checked_ubuntu_tst/190/\r\n\r\n**Failed tests:**\r\nCoreMangLib/components/stopwatch/Co9600Ctor/Co9600Ctor.sh\r\n\r\n**Log:**\r\n```\r\nFAILED   - CoreMangLib/components/stopwatch/Co9600Ctor/Co9600Ctor.sh\r\n               BEGIN EXECUTION\r\n               /mnt/j/workspace/dotnet_coreclr/master/x86_checked_ubuntu_tst/bin/tests/Linux.x86.Checked/Tests/Core_Root/corerun Co9600Ctor.exe\r\n               \r\n               Unhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040 (FUSION_E_REF_DEF_MISMATCH))\r\n               ./Co9600Ctor.sh: line 244: 59718 Aborted                 (core dumped) $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22199","RelatedDescription":"Open issue \"[x86] CoreMangLib/components/stopwatch/Co9600Ctor/Co9600Ctor.sh failed in x86_checked_ubuntu_tst\" (#22199)"},{"Id":"402930453","IsPullRequest":true,"CreatedAt":"2019-01-25T01:02:36","Actor":"Dotnet-GitSync-Bot","Number":"22196","RawContent":null,"Title":"Mirror changes from dotnet/corert,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/coreclr/pull/22196","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,corefx\" (#22196)"},{"Id":"402909195","IsPullRequest":true,"CreatedAt":"2019-01-25T01:01:09","Actor":"jkotas","Number":"22194","RawContent":null,"Title":"Rename TplEtwProvider to TplEventSource","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22194","RelatedDescription":"Closed or merged PR \"Rename TplEtwProvider to TplEventSource\" (#22194)"},{"Id":"402956115","IsPullRequest":true,"CreatedAt":"2019-01-25T00:35:05","Actor":"dotnet-maestro-bot","Number":"22198","RawContent":null,"Title":"Update PgoData to master-20190124.9 (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/22198","RelatedDescription":"Open PR \"Update PgoData to master-20190124.9 (master)\" (#22198)"},{"Id":"402846884","IsPullRequest":true,"CreatedAt":"2019-01-25T00:18:24","Actor":"AndyAyersMS","Number":"22188","RawContent":null,"Title":"Fix SOS GCInfo for Arm/Arm64","State":"closed","Body":"Add missing DECODE_HAS_TAILCALLS flag.\r\n\r\nCloses #22163","Url":"https://github.com/dotnet/coreclr/pull/22188","RelatedDescription":"Closed or merged PR \"Fix SOS GCInfo for Arm/Arm64\" (#22188)"},{"Id":"402951236","IsPullRequest":true,"CreatedAt":"2019-01-25T00:12:26","Actor":"briansull","Number":"22197","RawContent":null,"Title":"Fixes the desktop build","State":"open","Body":"A 64-bit build on the desktop CLR build would fail due to this warning:\r\nThis code is unreachable but still causes the warning to be issued.\r\n\r\nwarning C4311: 'reinterpret_cast': pointer truncation from 'BYTE *' to 'uint32_t'  f:\\j6\\codegenmirror\\src\\ndp\\clr\\src\\jit\\emit.cpp(5636): warning C4302: 'reinterpret_cast': truncation from 'BYTE *' to 'uint32_t'","Url":"https://github.com/dotnet/coreclr/pull/22197","RelatedDescription":"Open PR \"Fixes the desktop build\" (#22197)"},{"Id":"402912481","IsPullRequest":true,"CreatedAt":"2019-01-24T21:55:13","Actor":"jkoritzinsky","Number":"22195","RawContent":null,"Title":"Remove reflection-based wraper for AssemblyDependencyResolver.","State":"open","Body":"Now that AssemblyDependencyResolver is exposed in CoreFX and has propogated back to CoreCLR, we can remove the reflection-based wrapper for the unit tests for it.\r\n\r\nFixes #21975 \r\n","Url":"https://github.com/dotnet/coreclr/pull/22195","RelatedDescription":"Open PR \"Remove reflection-based wraper for AssemblyDependencyResolver.\" (#22195)"},{"Id":"402903380","IsPullRequest":true,"CreatedAt":"2019-01-24T21:29:17","Actor":"jashook","Number":"22192","RawContent":null,"Title":"Create simple download/upload for helix agents","State":"open","Body":"This, with the work done by @echesakovMSFT should enable better test uploading, and allow us to eventually collect core_dumps/superpmi mc binaries off the helix agents.","Url":"https://github.com/dotnet/coreclr/pull/22192","RelatedDescription":"Open PR \"Create simple download/upload for helix agents\" (#22192)"},{"Id":"402884336","IsPullRequest":true,"CreatedAt":"2019-01-24T20:34:21","Actor":"benaadams","Number":"22191","RawContent":null,"Title":"Use AggressiveOptimization for intrinsics-based SpanHelpers","State":"open","Body":"They are very commonly used as the heavy lifting functions of many other methods and their performance is heavily dependant on their inlines working; and code size heavily dependant on branch elimination based on supported architecture.\r\n\r\nFrom: https://github.com/dotnet/coreclr/pull/22127#issuecomment-457339121\r\n\r\n/cc @AndyAyersMS @jkotas @fiigii @kouvel @tannergooding ","Url":"https://github.com/dotnet/coreclr/pull/22191","RelatedDescription":"Open PR \"Use AggressiveOptimization for intrinsics-based SpanHelpers\" (#22191)"},{"Id":"402863794","IsPullRequest":false,"CreatedAt":"2019-01-24T19:36:25","Actor":"sandreenko","Number":"22190","RawContent":null,"Title":"[x86][windows] Asserts in `!argx->IsVarAddr() || (argx->gtType == TYP_I_IMPL)`","State":"open","Body":"`JIT_Performance._CodeQuality_Roslyn_CscBench` and  `managed_Compilation` started to fail with `!argx->IsVarAddr() || (argx->gtType == TYP_I_IMPL)`, for example: [jitStress2_jitstressRegs2](https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_jitstress2_jitstressregs2/724/testReport/).\r\n\r\nThere are [29 changes](https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_jitstress2_jitstressregs2/724/) in this commit, but I am pretty sure the issue was revealed by #22148.\r\n\r\n\r\ncc @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/issues/22190","RelatedDescription":"Open issue \"[x86][windows] Asserts in `!argx->IsVarAddr() || (argx->gtType == TYP_I_IMPL)`\" (#22190)"},{"Id":"402850657","IsPullRequest":true,"CreatedAt":"2019-01-24T19:00:38","Actor":"echesakovMSFT","Number":"22189","RawContent":null,"Title":"[WIP] Tail call stress needs to check more conditions","State":"open","Body":"This is an attempt to fix https://github.com/dotnet/coreclr/issues/11408 (and as a result of the aggressive tail call stressing https://github.com/dotnet/coreclr/issues/17584 also)\r\n\r\nThe idea is to move stress tail calls out of explicit tail call category and do hazard checks for the former (similar to what it's done for implicit tail calls).\r\n\r\n@dotnet/jit-contrib Does anyone have any suggestions how to validate that we are not loosing TailCallStress power due to adding those checks? ","Url":"https://github.com/dotnet/coreclr/pull/22189","RelatedDescription":"Open PR \"[WIP] Tail call stress needs to check more conditions\" (#22189)"},{"Id":"402830872","IsPullRequest":true,"CreatedAt":"2019-01-24T18:06:20","Actor":"benaadams","Number":"22187","RawContent":null,"Title":"[WIP] Prepare SpanHelpers.Char for intrinsics","State":"open","Body":"Mirroring SpanHelpers.Byte and removing pinning","Url":"https://github.com/dotnet/coreclr/pull/22187","RelatedDescription":"Open PR \"[WIP] Prepare SpanHelpers.Char for intrinsics\" (#22187)"},{"Id":"402609037","IsPullRequest":true,"CreatedAt":"2019-01-24T17:26:00","Actor":"dotnet-maestro-bot","Number":"22181","RawContent":null,"Title":"Update PgoData to master-20190124.1 (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/22181","RelatedDescription":"Closed or merged PR \"Update PgoData to master-20190124.1 (master)\" (#22181)"},{"Id":"402760247","IsPullRequest":true,"CreatedAt":"2019-01-24T17:25:47","Actor":"Dotnet-GitSync-Bot","Number":"22186","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/coreclr/pull/22186","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#22186)"},{"Id":"402722877","IsPullRequest":true,"CreatedAt":"2019-01-24T17:25:33","Actor":"filipnavara","Number":"22185","RawContent":null,"Title":"Remove obsolete thread abortion flags.","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22185","RelatedDescription":"Closed or merged PR \"Remove obsolete thread abortion flags.\" (#22185)"},{"Id":"402697682","IsPullRequest":true,"CreatedAt":"2019-01-24T16:09:35","Actor":"kvochko","Number":"22184","RawContent":null,"Title":"[Linux/ARM] Disable PSPSym in filter prolog for CoreRT","State":"closed","Body":"This patch disables generation of the code that sets up PSPSym in filter prolog for CoreRT ABI, similar to what's already done for x64. Related issue: https://github.com/dotnet/corert/issues/6831\r\nCC @jkotas @alpencolt @iarischenko","Url":"https://github.com/dotnet/coreclr/pull/22184","RelatedDescription":"Closed or merged PR \"[Linux/ARM] Disable PSPSym in filter prolog for CoreRT\" (#22184)"},{"Id":"402560079","IsPullRequest":true,"CreatedAt":"2019-01-24T12:57:39","Actor":"Dotnet-GitSync-Bot","Number":"22178","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/coreclr/pull/22178","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#22178)"},{"Id":"402628488","IsPullRequest":true,"CreatedAt":"2019-01-24T12:34:09","Actor":"filipnavara","Number":"22182","RawContent":null,"Title":"Remove no-op holder stack validation.","State":"closed","Body":"Follow up to #22149 /cc @jkotas @janvorli ","Url":"https://github.com/dotnet/coreclr/pull/22182","RelatedDescription":"Closed or merged PR \"Remove no-op holder stack validation.\" (#22182)"},{"Id":"402647239","IsPullRequest":true,"CreatedAt":"2019-01-24T10:46:41","Actor":"KevinRansom","Number":"22183","RawContent":null,"Title":"Add Test Cases for FSharp","State":"open","Body":"The Jit Guys break F# on a fairly regular basis, because only FSharp uses the .tail command, and tail call optimizations are our bread and butter.\r\n\r\nThis PR contains a wide range of FSHarp Test Cases, containing a large set od scenarios.\r\n\r\non my mac book the test cases take between 3-5 to run.\r\n\r\nTo build use the dotnet cli, I usually use the following command, this builds and runs for net46, and netcoreapp2.0.\r\n\r\n````\r\ndotnet test FSharp.Core.UnitTests.fsproj /v:verbose\r\n````\r\n\r\nThis builds and runs the tests, and dumps a spew of tests while they are executing.\r\n\r\nOn the MAC use:\r\n````\r\ndotnet test FSharp.Core.UnitTests.fsproj /v:normal -c release -f netcoreapp2.0\r\n````\r\n\r\nThe project loads in Visual Studio, and the tests use xunit and can be used with test explorer.\r\n\r\nNote:  I have a Tests.Builds.props and targets checked in to unhook my project from your build.\r\n\r\nI expect that you can fairly easily wire this into your build and test infrastructure.  Note that buildtools drops a fairly recent dotnet cli which contains an F# compiler.\r\n\r\n/CC  @briansull , @brettfo, @ericstj \r\n\r\nLet me know if you have any questions\r\n\r\nKevin\r\n\r\nI'm guessing someone from your team\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/22183","RelatedDescription":"Open PR \"Add Test Cases for FSharp\" (#22183)"},{"Id":"402593512","IsPullRequest":true,"CreatedAt":"2019-01-24T08:30:38","Actor":"Maoni0","Number":"22180","RawContent":null,"Title":"[WIP] implementing hard limit for GC heap","State":"open","Body":"this is NOT ready for code review as I am still in the process of cleaning code up - this is just to get the tests to run. ","Url":"https://github.com/dotnet/coreclr/pull/22180","RelatedDescription":"Open PR \"[WIP] implementing hard limit for GC heap\" (#22180)"},{"Id":"402581864","IsPullRequest":false,"CreatedAt":"2019-01-24T07:51:00","Actor":"v-haren","Number":"22179","RawContent":null,"Title":"Cannot delete workspace: remote file operation failed","State":"open","Body":"failed in job: https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/master/job/perf_perflab_Windows_NT_x86_min_opt_ryujit/1156/\r\n\r\nfailed log: \r\n[WS-CLEANUP] Deleting project workspace...Cannot delete workspace :remote file operation failed: C:\\j\\w\\perf_perflab_---ce30617b at hudson.remoting.Channel@4268bdb7:JNLP4-connect connection from 131.107.147.125/131.107.147.125:46715: java.io.IOException: Unable to delete 'C:\\j\\w\\perf_perflab_---ce30617b\\Tools\\net46\\roslyn\\tools\\Microsoft.DiaSymReader.Native.amd64.dll'. Tried 3 times (of a maximum of 3) waiting 0.1 sec between attempts.\r\nERROR: Step �Delete workspace when build is done� failed: Cannot delete workspace: remote file operation failed: C:\\j\\w\\perf_perflab_---ce30617b at hudson.remoting.Channel@4268bdb7:JNLP4-connect connection from 131.107.147.125/131.107.147.125:46715: java.io.IOException: Unable to delete 'C:\\j\\w\\perf_perflab_---ce30617b\\Tools\\net46\\roslyn\\tools\\Microsoft.DiaSymReader.Native.amd64.dll'. Tried 3 times (of a maximum of 3) waiting 0.1 sec between attempts.\r\nFinished: FAILURE","Url":"https://github.com/dotnet/coreclr/issues/22179","RelatedDescription":"Open issue \"Cannot delete workspace: remote file operation failed\" (#22179)"},{"Id":"402546284","IsPullRequest":false,"CreatedAt":"2019-01-24T05:16:14","Actor":"iskiselev","Number":"22176","RawContent":null,"Title":"Profiler use after release on process exit","State":"open","Body":"CoreCLR version: 2.1, 2.2 (probably  all of them)\r\nOS: Ubuntu/CentOs/MacOs (probably any non-Windows)\r\n\r\nOn application exit CLR sometimes crashes with SEGFAULT if profiler has subscribed to COR_PRF_MONITOR_JIT_COMPILATION.\r\nBased on coredump analysis crash happened in `EEToProfInterfaceImpl::JITCompilationStarted(unsigned long, int) ()`.\r\nLooks like it is possible to crash on other profiler callback too - but was not able to stable reproduce with other, but colleague reported that it was observed once on `ModuleUnloadFinished`.\r\nWe've started investigation on it, as have seen exit code 1 sometimes from `dotnet test` run with XUnit test, after test reported that all test passed successfully on Linux CI environment. We've never seen it on Windows CI environment.\r\n\r\nAfter further investigation, looks like it is enough that profiler will do nothing except:\r\n- `SetEventMask(COR_PRF_MONITOR_JIT_COMPILATION |  COR_PRF_DISABLE_ALL_NGEN_IMAGES | COR_PRF_DISABLE_OPTIMIZATIONS | COR_PRF_DISABLE_INLINING)` inside `Initialize`\r\n- return S_OK for all callbacks\r\n- proper implement `AddRef` / `Release`  with deleting itself if ref count = 0.\r\n\r\nThe issue can be stable reproduced with XUnit tests (one test that will do nothing is enough).\r\nAfter first execution of dotnet test, I've repeated execution of  `dotnet exec /usr/share/dotnet/sdk/<version>/vstest.console.dll --framework:.NETCoreApp,Version=v2.0 --logger:trx --Diag:TestResults/testDiagnostics.txt <path_to_test>/Release/netcoreapp2.0/<testname>.dll`\r\nIt fails after ~20 executions with segfault and exit code 139.\r\n\r\nI can provide sample application/profiler, but it will require some additional work on my side.\r\n\r\nWhen I've looked on coreclr sources, I've found very suspicious place here: https://github.com/dotnet/coreclr/blob/a28b25aacdcd2adb0fdfa70bd869f53ba6565976/src/vm/profilinghelper.cpp#L1304\r\n`IsProfilerEvacuated` check is done only when `FEATURE_PROFAPI_ATTACH_DETACH` enabled, which may be a hint why have we seen problem only on non-Windows OS.\r\n\r\nCC: @noahfalk ","Url":"https://github.com/dotnet/coreclr/issues/22176","RelatedDescription":"Open issue \"Profiler use after release on process exit\" (#22176)"},{"Id":"402521927","IsPullRequest":true,"CreatedAt":"2019-01-24T03:06:36","Actor":"Maoni0","Number":"22175","RawContent":null,"Title":"disabling the Collect0 test for gcstress","State":"closed","Body":"this test can rightfully fail during GC stress 0xc where a GC could be triggered between these 2 lines:\r\n```csharp\r\n\t\tint agen2 = GC.GetGeneration(array);\r\n\t\tint ogen2 = GC.GetGeneration(obj);\r\n```\r\nin which case both objects could be promoted to gen2. agen2 could still say 1 because at that point both objects were in gen1. disabling for gcstress","Url":"https://github.com/dotnet/coreclr/pull/22175","RelatedDescription":"Closed or merged PR \"disabling the Collect0 test for gcstress\" (#22175)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"402847937","IsPullRequest":true,"CreatedAt":"2019-01-24T21:21:10","Actor":"livarcocc","Number":"10653","RawContent":null,"Title":"Disable telemetry for a test explicitly to make sure cache files are not generated","State":"closed","Body":"Disable telemetry for a test explicitly to make sure cache files are not generated when we are validating the cache folder is not created.\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10653","RelatedDescription":"Closed or merged PR \"Disable telemetry for a test explicitly to make sure cache files are not generated\" (#10653)"},{"Id":"402697708","IsPullRequest":true,"CreatedAt":"2019-01-24T17:57:19","Actor":"dotnet-maestro[bot]","Number":"10652","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10652","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10652)"},{"Id":"402464408","IsPullRequest":true,"CreatedAt":"2019-01-23T22:47:46","Actor":"wli3","Number":"10651","RawContent":null,"Title":"Add --interactive to dotnet add reference","State":"open","Body":"need https://github.com/dotnet/cli/pull/10650 in first\r\n\r\npart of #10529 ","Url":"https://github.com/dotnet/cli/pull/10651","RelatedDescription":"Open PR \"Add --interactive to dotnet add reference\" (#10651)"},{"Id":"402405638","IsPullRequest":true,"CreatedAt":"2019-01-23T19:57:56","Actor":"wli3","Number":"10650","RawContent":null,"Title":"Add --interactive to dotnet run and test","State":"open","Body":"These 2 verb have verbosity set to quiet. And we need to change it to minimal during --interface\r\nto show the nuget plugin guide\r\n\r\npart of #10529 ","Url":"https://github.com/dotnet/cli/pull/10650","RelatedDescription":"Open PR \"Add --interactive to dotnet run and test\" (#10650)"},{"Id":"402318345","IsPullRequest":false,"CreatedAt":"2019-01-23T16:48:11","Actor":"spozniak","Number":"10649","RawContent":null,"Title":"MacOS runtime pkg installer does not include AspNetCore runtime","State":"closed","Body":"## Steps to reproduce\r\nDownload and install \r\nhttps://dotnet.microsoft.com/download/thank-you/dotnet-runtime-2.2.1-macos-x64-installer\r\nor\r\nhttps://dotnet.microsoft.com/download/thank-you/dotnet-runtime-2.2.1-macos-x64-installer\r\n\r\n## Expected  behavior\r\nShould contain two AspNetCore runtimes\r\n`Microsoft.AspNetCore.All 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]`\r\n`Microsoft.AspNetCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]`\r\n\r\n## Actual behavior\r\nNo AspNetCore shared runtimes installed. Because of that DotNetCore application fails with an error:\r\n\r\n> It was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.AspNetCore.All', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n      /usr/local/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n      https://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n      https://aka.ms/dotnet-download\r\n\r\nAs workaround it is possible to get them from binaries https://dotnet.microsoft.com/download/thank-you/dotnet-runtime-2.2.1-macos-x64-asp.net-core-runtime-binaries\r\nThis issue is similar to: https://github.com/dotnet/cli/issues/8529 but is related to runtime installer.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.NETCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10649","RelatedDescription":"Closed issue \"MacOS runtime pkg installer does not include AspNetCore runtime\" (#10649)"},{"Id":"402080389","IsPullRequest":true,"CreatedAt":"2019-01-23T06:08:02","Actor":"dotnet-maestro[bot]","Number":"10648","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19072.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10648","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10648)"},{"Id":"402021447","IsPullRequest":false,"CreatedAt":"2019-01-23T00:56:16","Actor":"vijayrkn","Number":"10647","RawContent":null,"Title":"Different build behaviour for .net core web apps between local VS IDE and msbuild","State":"open","Body":"_From @fromorbonia on January 10, 2019 9:26_\n\n## Steps to reproduce\r\nPublishing a .NET Core web application with a FileSystem profile under VS2017 IDE creates a directory with an EXE (e.g. MyProject.exe)\r\nThere is a Jenkins build server running msbuild, which correctly picks up the publish profile that was used and configured locally.\r\nPlace the resulting files on a server (with IIS) and a previosuly configured Web Site, and the site should start correctly.\r\n\r\n## Expected  behavior\r\nI would expect the build server to create exactly the same set of files, as produced by the local VS2017 publish process. \r\nSpecifically, in this case, it should include MyProject.exe with a matching web.config file - so that once the files being copied to the IIS server the web site starts correctly.\r\n\r\n## Actual behavior\r\nThe publish folder contains an apphost.exe and MyProject.dll, but not an EXE. The web.config points to the EXE that does not exist:\r\n`<aspNetCore processPath=\".\\MyProject.exe\"...`\r\nThe web site doesn't not run on IIS.\r\n\r\n\r\n## Environment data\r\nAfter some rounds of changes, I've ended up with the following key values (when looking at similar other posts people have asked about so have mentioned here) in the pubxml file:\r\n```\r\n    <UseAppHost>true</UseAppHost>\r\n    <SelfContained>false</SelfContained>\r\n    <_IsPortable>true</_IsPortable>\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n```\r\nI've only set UseAppHost to true, because it on the local VS IDE it creates the correct combination of web.config and files so that the web site starts correctly on deployment. I don't have a requirement to use or not use an apphost.exe file.\r\n\r\n\r\nFor the **local VS2017 IDE** this is:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nFor the **Jenkins build** server:\r\n12:53:26 .NET Core SDK (reflecting any global.json):\r\n12:53:26  Version:   2.1.502\r\n12:53:26  Commit:    c74ce8f29f\r\n12:53:26 \r\n12:53:26 Runtime Environment:\r\n12:53:26  OS Name:     Windows\r\n12:53:26  OS Version:  10.0.14393\r\n12:53:26  OS Platform: Windows\r\n12:53:26  RID:         win10-x64\r\n12:53:26  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.502\\\r\n12:53:26 \r\n12:53:26 Host (useful for support):\r\n12:53:26   Version: 2.1.6\r\n12:53:26   Commit:  3f4f8eebd8\r\n12:53:26 \r\n12:53:26 .NET Core SDKs installed:\r\n12:53:26   2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26   2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26   2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26 \r\n12:53:26 .NET Core runtimes installed:\r\n12:53:26   Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n12:53:26   Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n12:53:26   Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n12:53:26   Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n12:53:26   Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n12:53:26   Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\n\n_Copied from original issue: aspnet/websdk#470_","Url":"https://github.com/dotnet/cli/issues/10647","RelatedDescription":"Open issue \"Different build behaviour for .net core web apps between local VS IDE and msbuild\" (#10647)"},{"Id":"401994081","IsPullRequest":true,"CreatedAt":"2019-01-22T23:06:04","Actor":"mklement0","Number":"10646","RawContent":null,"Title":"WIP: Makes dotnet-install.ps1 x-platform","State":"open","Body":"Adds cross-edition and cross-platform support to the script, addresses #8278.","Url":"https://github.com/dotnet/cli/pull/10646","RelatedDescription":"Open PR \"WIP: Makes dotnet-install.ps1 x-platform\" (#10646)"},{"Id":"401981445","IsPullRequest":false,"CreatedAt":"2019-01-22T22:24:52","Actor":"danmosemsft","Number":"10645","RawContent":null,"Title":"Update dotnet-install.sh (and https://dot.net/v1/dotnet-install.sh) to allow other distros","State":"open","Body":"_From @danmosemsft on January 21, 2019 6:3_\n\nRepos using Arcade bootstrap with `eng/common/tools.sh` which bootstraps dotnet using a script from `https://dot.net/v1/dotnet-install.sh`. The script will fail on ubuntu 18.10.\r\n\r\ncorefxlab has its own (out of date) copy of this file, which I already updated here\r\nhttps://github.com/dotnet/corefxlab/pull/2636\r\n\r\nA similar change needs to go into `https://dot.net/v1/dotnet-install.sh` but I do not know where that file comes from. It is referenced here:\r\n\r\n```\r\neng/common/tools.sh:  local install_script_url=\"https://dot.net/v1/dotnet-install.sh\"\r\n```\r\nbuildtools has its own\r\n```\r\nbuildtools/bootstrap/bootstrap.sh:    download \"https://raw.githubusercontent.com/dotnet/cli/$dotNetInstallBranch/scripts/obtain/dotnet-install.sh\" \"$dotnetInstallPath\"\r\n```\r\n\n\n_Copied from original issue: dotnet/arcade#1848_","Url":"https://github.com/dotnet/cli/issues/10645","RelatedDescription":"Open issue \"Update dotnet-install.sh (and https://dot.net/v1/dotnet-install.sh) to allow other distros\" (#10645)"},{"Id":"401910031","IsPullRequest":false,"CreatedAt":"2019-01-22T19:07:49","Actor":"firelizzard18","Number":"10644","RawContent":null,"Title":".NET Core 3.0 SDK preview breaks dependencies","State":"open","Body":"I have a project that has `System.Runtime.InteropServices` in its dependency graph. I can't share the \r\nproject itself. Below is part of the `csproj`.\r\n\r\nIf I build this project (on Windows) with .NET Core 2.2 SDK, everything works. If I build it with .NET Core 3.0 SDK (preview), the build artifacts are missing `System.Runtime.InteropServices.dll`, which breaks my application.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net462</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net462' \">\r\n    <Reference Include=\"System.ServiceProcess\" />\r\n    <Reference Include=\"System.Transactions\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Cors\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.Elm\" Version=\"0.2.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Routing\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.HttpSys\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.IISIntegration\" Version=\"2.1.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel\" Version=\"2.1.3\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Portable.BouncyCastle\" Version=\"1.8.4\" />\r\n    <PackageReference Include=\"System.Data.SqlClient\" Version=\"4.6.0\" />\r\n    <PackageReference Include=\"System.Reflection.TypeExtensions\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- lots of <ProjectReference>s -->\r\n  </ItemGroup>\r\n\r\n<Project>\r\n```\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10644","RelatedDescription":"Open issue \".NET Core 3.0 SDK preview breaks dependencies\" (#10644)"},{"Id":"401902646","IsPullRequest":false,"CreatedAt":"2019-01-22T19:00:51","Actor":"CreativeHouseDotOrg","Number":"10642","RawContent":null,"Title":"dotnet command line argument to terminate remaining build processes that are finished but dont exit","State":"closed","Body":"### Is your feature request related to a problem? Please describe.\r\nI'm am trying to `build` and `publish`... but unfortunately there are hanging processes in Task Manager .NET Core Host that lead to a publish error if i try to `dotnet publish`\r\n\r\n### Describe the solution you'd like\r\nI want the Remaining Tasks to close after the build OR publish process has ended.\r\n\r\n### Describe alternatives you've considered\r\nSince now i've been terminating them by hand, it would be good to have a `dotnet <command>` to terminate all open .Net Core Hosts that remain.\r\n\r\n### Additional context\r\n\r\nHere is a Screenshot of the remaining Tasks:\r\n\r\n![1](https://user-images.githubusercontent.com/4038603/51504064-f1e87780-1dde-11e9-8ebd-1424a7654113.PNG)\r\n\r\n![unbenannt](https://user-images.githubusercontent.com/4038603/51504000-9f0ec000-1dde-11e9-8419-0216e6945290.PNG)\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10642","RelatedDescription":"Closed issue \"dotnet command line argument to terminate remaining build processes that are finished but dont exit\" (#10642)"},{"Id":"401907244","IsPullRequest":false,"CreatedAt":"2019-01-22T19:00:13","Actor":"firelizzard18","Number":"10643","RawContent":null,"Title":"Cannot build a supported target when an unsupported target exists in `<TargetFrameworks>`","State":"open","Body":"## Steps to reproduce\r\n\r\n1. On Windows, install .NET Core 2.0 SDK and .NET Framework 4.7 SDK\r\n2. `dotnet new console -o test`\r\n3. `cd test`\r\n4. In `test.csproj`, replace `<TargetFramework>...` with `<TargetFrameworks>net47;netcoreapp3.0</TargetFrameworks>`\r\n5. `dotnet build -f net47`\r\n\r\n## Expected  behavior\r\n\r\nThe CLI builds and runs the project using the specified target framework. The fact that there are other valid target frameworks is ignored.\r\n\r\n## Actual behavior\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.6.84.34536 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.104\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(135,5): error : The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\\Source\\temp\\build-test\\build-test.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.104)\r\n\r\nProduct Information:\r\n Version:            2.1.104\r\n Commit SHA-1 hash:  48ec687460\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.104\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10643","RelatedDescription":"Open issue \"Cannot build a supported target when an unsupported target exists in `<TargetFrameworks>`\" (#10643)"},{"Id":"400190623","IsPullRequest":false,"CreatedAt":"2019-01-22T17:55:49","Actor":"farlop","Number":"10624","RawContent":null,"Title":"Execute custom action on template, localization bug","State":"closed","Body":"## Steps to reproduce\r\nIn non english environment (for example, spanish), try to create a new project using a template which has custom actions:\r\n\r\n```\r\ndotnet new is4aspid -n TestIS4.IdentityServerAspNetIdentity\r\nLa plantilla \"IdentityServer4 with ASP.NET Core Identity\" se creó correctamente.\r\n\r\nProcesando acciones posteriores...\r\nLa plantilla está configurada para ejecutar la siguiente acción:\r\nDescripción:\r\nInstrucciones manuales: Seeds the initial user database\r\nComando actual: dotnet run /seed\r\n¿Quiere ejecutar esta acción (S|N)?\r\n\r\n```\r\n\r\n## Expected  behavior\r\nAnswering 'S' to question should continue with action execution\r\n\r\n## Actual behavior\r\n'Y' has to be pressed instead of 'S'\r\n```\r\nS\r\nEntrada no válida: \"S\". Debe especificar S o N.\r\nY\r\nEjecutando el comando \"dotnet run /seed\"...\r\nEl comando se ejecutó correctamente.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nSDK de .NET Core (reflejando cualquier global.json):\r\n Version:   2.2.102\r\n Commit:    96ff75a873\r\n\r\nEntorno de tiempo de ejecución:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.102\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10624","RelatedDescription":"Closed issue \"Execute custom action on template, localization bug\" (#10624)"},{"Id":"401755135","IsPullRequest":true,"CreatedAt":"2019-01-22T13:34:42","Actor":"dotnet-maestro[bot]","Number":"10641","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19070.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10641","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10641)"},{"Id":"401047357","IsPullRequest":true,"CreatedAt":"2019-01-20T23:37:18","Actor":"dotnet-bot","Number":"10638","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10638","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#10638)"},{"Id":"401095922","IsPullRequest":true,"CreatedAt":"2019-01-20T13:35:00","Actor":"dotnet-maestro[bot]","Number":"10639","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19069.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10639","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10639)"},{"Id":"401095953","IsPullRequest":true,"CreatedAt":"2019-01-20T13:05:14","Actor":"dotnet-maestro[bot]","Number":"10640","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19067.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19067.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19067.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19067.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19073.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19073.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10640","RelatedDescription":"Open PR \"Update dependencies from dotnet/sdk\" (#10640)"},{"Id":"400703698","IsPullRequest":true,"CreatedAt":"2019-01-19T23:40:40","Actor":"v-zbsail","Number":"10632","RawContent":null,"Title":"LOC CHECKIN | dotnet/cli master | 20190118","State":"closed","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/10632","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/cli master | 20190118\" (#10632)"},{"Id":"400275049","IsPullRequest":true,"CreatedAt":"2019-01-19T23:23:11","Actor":"dotnet-maestro[bot]","Number":"10626","RawContent":null,"Title":"Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/templating\r\n\r\n- Microsoft.TemplateEngine.Cli - 1.0.2-beta5.19066.2\r\n\r\nUpdates from https://github.com/dotnet/templating\r\n\r\n- Microsoft.TemplateEngine.Cli - 1.0.2-beta5.19066.2\r\n\r\nUpdates from https://github.com/dotnet/templating\r\n\r\n- Microsoft.TemplateEngine.Cli - 1.0.2-beta5.19066.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10626","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/templating\" (#10626)"},{"Id":"400513797","IsPullRequest":true,"CreatedAt":"2019-01-19T22:56:54","Actor":"dotnet-bot","Number":"10629","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10629","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10629)"},{"Id":"400933582","IsPullRequest":true,"CreatedAt":"2019-01-19T22:45:35","Actor":"nguerrera","Number":"10636","RawContent":null,"Title":"Stop capturing test output because it is somehow causing failures in CI","State":"closed","Body":"There may be a corefx or msbuild bug here, but I need to get CI unblocked. :(\r\n","Url":"https://github.com/dotnet/cli/pull/10636","RelatedDescription":"Closed or merged PR \"Stop capturing test output because it is somehow causing failures in CI\" (#10636)"},{"Id":"400268504","IsPullRequest":true,"CreatedAt":"2019-01-19T13:35:04","Actor":"dotnet-maestro[bot]","Number":"10625","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19066.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19067.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19068.4\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10625","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10625)"},{"Id":"400934274","IsPullRequest":false,"CreatedAt":"2019-01-19T00:07:44","Actor":"nguerrera","Number":"10637","RawContent":null,"Title":"Investigate why CI fails often with TestCaptureOutput on","State":"open","Body":"We started getting failures like this all of the sudden very often in CI (no repro locally):\r\n\r\n```\r\nF:\\vsagent\\10\\s\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19065.6\\tools\\XUnit\\XUnit.targets(93,5): error MSB3491: Could not write lines to file \"F:\\vsagent\\10\\s\\artifacts\\log\\Release\\Microsoft.DotNet.Configurer.UnitTests_netcoreapp3.0_x64.log\". The process cannot access the file 'F:\\vsagent\\10\\s\\artifacts\\log\\Release\\Microsoft.DotNet.Configurer.UnitTests_netcoreapp3.0_x64.log' because it is being used by another process. [F:\\vsagent\\10\\s\\test\\Microsoft.DotNet.Configurer.UnitTests\\Microsoft.DotNet.Configurer.UnitTests.csproj]\r\n```\r\n\r\nThis is in a step in arcade where it appends to the log file that would have been written by a prior Exec with `> ` redirected output to it. Somehow the file is still in use. Maybe exec returned before the handle was released? But how?\r\n","Url":"https://github.com/dotnet/cli/issues/10637","RelatedDescription":"Open issue \"Investigate why CI fails often with TestCaptureOutput on\" (#10637)"},{"Id":"400910098","IsPullRequest":true,"CreatedAt":"2019-01-18T22:16:22","Actor":"nugetlurker","Number":"10635","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5783 into cli","State":"open","Body":"Insert NuGet Build 5.0.0-preview3.5783 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/10635","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview3.5783 into cli\" (#10635)"},{"Id":"400910087","IsPullRequest":true,"CreatedAt":"2019-01-18T22:16:19","Actor":"nugetlurker","Number":"10634","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5783 into cli","State":"open","Body":"Insert NuGet Build 5.0.0-preview3.5783 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/10634","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview3.5783 into cli\" (#10634)"},{"Id":"400513804","IsPullRequest":true,"CreatedAt":"2019-01-18T20:41:20","Actor":"dotnet-bot","Number":"10630","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10630","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10630)"},{"Id":"400761340","IsPullRequest":false,"CreatedAt":"2019-01-18T15:41:34","Actor":"djbreen7","Number":"10633","RawContent":null,"Title":"dotnet new angular boilerplate doesn't connect API with client","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. `dotnet new angular --name=MyApp`\r\n2. `cd MyApp`\r\n3. `dotnet build`\r\n4. `dotnet run`\r\n5. Open the url that the terminal displays in the browser, e.g., http://localhost:53000\r\n6. Click the Fetch Data button in the top nav\r\n\r\n## Expected  behavior\r\n- Data should be displayed  \r\n- The network tab should show a 200 OK for the endpoint /api/SampleData/WeatherForecasts\r\n\r\n## Actual behavior\r\n- Loading... is displayed indefinitely\r\n- The network tab returns a 404 NOT FOUND for the endpoint /api/SampleData/WeatherForecasts\r\n\r\n![image](https://user-images.githubusercontent.com/13296622/51394398-80b37680-1af7-11e9-9f40-61f00455b299.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.103\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10633","RelatedDescription":"Closed issue \"dotnet new angular boilerplate doesn't connect API with client\" (#10633)"},{"Id":"400631831","IsPullRequest":false,"CreatedAt":"2019-01-18T09:04:18","Actor":"pavelovcharov","Number":"10631","RawContent":null,"Title":"dotnet build ignores -f option in some cases","State":"open","Body":"Please see the attached project\r\n[build-framework-test.zip](https://github.com/dotnet/cli/files/2772232/build-framework-test.zip)\r\n\r\n\r\n## Steps to reproduce\r\n1) Create a new class library\r\n2) Create another class library, make it dependent on the first one\r\n3) Replace TargetFramework with TargetFrameworks (e.g. `<TargetFrameworks>netcoreapp3.0;net452</TargetFrameworks>`)\r\n4) Try to build solution against only one framework:\r\n`dotnet build -f netcoreapp3.0  .\\build-framework-test.sln`\r\n\r\n## Expected  behavior\r\nFirst library is built against specified framework\r\n\r\n## Actual behavior\r\nFirst library is built against all frameworks\r\n`  ClassLibrary1 -> C:\\work\\projects\\tests\\build-framework-test\\ClassLibrary1\\bin\\Debug\\netcoreapp3.0\\ClassLibrary1.dll`\r\n  `ClassLibrary1 -> C:\\work\\projects\\tests\\build-framework-test\\ClassLibrary1\\bin\\Debug\\net452\\ClassLibrary1.dll`\r\n  `ClassLibrary2 -> C:\\work\\projects\\tests\\build-framework-test\\build-framework-test\\bin\\Debug\\netcoreapp3.0\\ClassLibrary2.dll`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010124\r\n Commit:    41a73b60f2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010124\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview1-26919-02\r\n  Commit:  9ea8c26816\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-alpha1-009616 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010124 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 3.0.0-alpha1-10062 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-alpha1-10062 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19067-0383 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.DesktopUI.App 3.0.0-alpha-26829-8 [C:\\Program Files\\dotnet\\shared\\Microsoft.DesktopUI.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27316-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview1-26919-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27316-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10631","RelatedDescription":"Open issue \"dotnet build ignores -f option in some cases\" (#10631)"},{"Id":"400423818","IsPullRequest":true,"CreatedAt":"2019-01-17T23:43:45","Actor":"mmitche","Number":"10627","RawContent":null,"Title":"Update branding","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/10627","RelatedDescription":"Closed or merged PR \"Update branding\" (#10627)"},{"Id":"400473652","IsPullRequest":false,"CreatedAt":"2019-01-17T21:37:07","Actor":"wli3","Number":"10628","RawContent":null,"Title":"Insert new nuget with NuGet.Packaging.Core breaking change","State":"open","Body":"- [ ] dotnet-migrate branding update\r\n- [x] Finish update of dotnet-migrate\r\n- [ ] Queue SDK 2.2.2xxx without test\r\n- [ ] Insert SDK 2.2.2xxx to CLI SDK 2.2.2xxx with new nuget and new dotnet-migrate\r\n- [ ] Update stage 0 in SDK 2.2.2xxx in new nuget insertion\r\n\r\n--------------\r\n- [ ] Queue SDK 2.1.6xxx without test\r\n- [ ] Insert SDK 2.1.6xxx to CLI SDK 2.1.6xxx with new nuget and new dotnet-migrate\r\n- [ ] Update stage 0 in SDK 2.1.6xxx in new nuget insertion\r\n\r\n--------------\r\n- [ ] Queue SDK 3.0.1xx without test\r\n- [ ] Insert SDK 3.0.1xx to CLI SDK 3.0.1xx with new nuget and new dotnet-migrate\r\n- [ ] Insert CLI to ToolSet\r\n- [ ] Insert ToolSet to core-sdk\r\n- [ ] Update stage 0 in SDK 3.0.1xx in new nuget insertion","Url":"https://github.com/dotnet/cli/issues/10628","RelatedDescription":"Open issue \"Insert new nuget with NuGet.Packaging.Core breaking change\" (#10628)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"398564136","IsPullRequest":false,"CreatedAt":"2019-01-24T23:36:09","Actor":"netspiri","Number":"1052","RawContent":null,"Title":"Incorrect dll being copied","State":"closed","Body":"I have\r\n\r\n- ProjectA targeting .Net Standard 2.0 making use of nuget library where the dlls for the different frameworks are named differently\r\n- ProjectB targeting .Net Standard 2.0 references ProjectA\r\n- ProjectC targeting .Net Framework 4.7.2 references ProjectB\r\n- ProjectD targeting .Net Framework 4.7.2 and is a Console app referencing ProjectC\r\n\r\nIf I run ProjectD I get the infamous \"Could not load file or assembly\" for Aspose.Email.Core.dll.\r\n\r\nI played around <RestoreProjectStyle>PackageReference</RestoreProjectStyle> in ProjectC and ProjectD but this results in .net framework dll (i.e Aspose.Email.dll) being copied over from the nuget package and not the .net standard dll (Aspose.Email.Core.dll).  I did not play with binding redirects because I do not think this is related.\r\n\r\nI've migrated manually ProjectC and ProjectD to the new csproj style but this had no effect.\r\n\r\nI do not want to end up with ProjectD referencing the required dlls directly because there must \"the proper way of doing it\".\r\n\r\nI have therefore uploaded a clean barebones project to https://bitbucket.org/netspiri/projectreferencestest.git , so as to see how the experts would do it, in the hope that this might help others. \r\n\r\nI've attached also the output of msbuild ProjectD.csproj /t:rebuild /bl\r\n\r\nIt would be nice if the experts would guide trough thier troubleshooting process.\r\n\r\n[log.txt](https://github.com/dotnet/standard/files/2752202/log.txt)\r\n[msbuild.zip](https://github.com/dotnet/standard/files/2752203/msbuild.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1052","RelatedDescription":"Closed issue \"Incorrect dll being copied\" (#1052)"},{"Id":"402932649","IsPullRequest":true,"CreatedAt":"2019-01-24T23:21:33","Actor":"wtgodbe","Number":"1060","RawContent":null,"Title":"Set StrongNameKeyID after import sdk.props","State":"closed","Body":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj ","Url":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Closed or merged PR \"Set StrongNameKeyID after import sdk.props\" (#1060)"},{"Id":"402860962","IsPullRequest":true,"CreatedAt":"2019-01-24T21:43:12","Actor":"terrajobst","Number":"1059","RawContent":null,"Title":"Add missing dummy fields","State":"closed","Body":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff.","Url":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Closed or merged PR \"Add missing dummy fields\" (#1059)"},{"Id":"402275150","IsPullRequest":false,"CreatedAt":"2019-01-24T19:47:05","Actor":"jacobmohl","Number":"1056","RawContent":null,"Title":"Add support for HttpClient.PatchAsync()","State":"closed","Body":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync().","Url":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Closed issue \"Add support for HttpClient.PatchAsync()\" (#1056)"},{"Id":"402847550","IsPullRequest":true,"CreatedAt":"2019-01-24T19:39:46","Actor":"wtgodbe","Number":"1058","RawContent":null,"Title":"Re-enable APICompat for netstandard1.x/2.0","State":"closed","Body":"This causes netstandard1.x/2.0 assets to be binplaced at `artifacts\\obj\\CompatShims\\ref` again, which will re-enable the APICompat runs for those TFMs. @ViktorHofer I noticed you removed this line here: https://github.com/dotnet/standard/pull/1040/files#diff-1fea8681058f11db0ecbfc2fc8a5be52L7 - was that intentional?","Url":"https://github.com/dotnet/standard/pull/1058","RelatedDescription":"Closed or merged PR \"Re-enable APICompat for netstandard1.x/2.0\" (#1058)"},{"Id":"400369663","IsPullRequest":false,"CreatedAt":"2019-01-24T19:21:03","Actor":"UnreachableCode","Number":"1055","RawContent":null,"Title":"Android implementation of HTTPClient throwing up java.io.IOException ","State":"closed","Body":"I believe this relates to the bug detailed in Xamarin's old Bugzilla:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41100\r\n\r\nand is also similar to the issue discussed here:\r\nhttps://github.com/square/okhttp/issues/1517\r\n\r\nHere is the main stacktrace of my issue:\r\n\r\nLoginProvider+<LoginAsync>d__1.MoveNext () C:\\source\\repos\\{MyApp}\\{MyApp}\\{MyApp}\\Services\\LoginProvider.cs:35\r\njava.io.IOException: unexpected end of stream on Connection{testclarity.i-menzies.com:443, proxy=DIRECT@ hostAddress=62.244.173.166 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1} (recycle count=0)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\r\ncom.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\r\ncom.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:905)\r\ncom.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:789)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:443)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:388)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:501)\r\ncom.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\r\ncom.android.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\r\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\r\ncom.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\r\n\r\nI have tried setting the connection closed header and setting chunked transfer encoding but neither of these fixes work. I would try to set the OkHTTP.setRetryOnConnectionFailure(true) but I don't think there is a way to do this in the referenced Java source.","Url":"https://github.com/dotnet/standard/issues/1055","RelatedDescription":"Closed issue \"Android implementation of HTTPClient throwing up java.io.IOException \" (#1055)"},{"Id":"402566640","IsPullRequest":true,"CreatedAt":"2019-01-24T06:55:33","Actor":"wtgodbe","Number":"1057","RawContent":null,"Title":"Dummy commit to trigger CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1057","RelatedDescription":"Closed or merged PR \"Dummy commit to trigger CI\" (#1057)"},{"Id":"400334291","IsPullRequest":false,"CreatedAt":"2019-01-18T13:36:41","Actor":"aday12345","Number":"1054","RawContent":null,"Title":".net standard 2.1 targeting question","State":"closed","Body":"i have the .net core 2.2 sdk installed and can target it with no issue, but should i be able to target the netStandard 2.1 library when creating a class library? i only see 2.0 as an option.","Url":"https://github.com/dotnet/standard/issues/1054","RelatedDescription":"Closed issue \".net standard 2.1 targeting question\" (#1054)"},{"Id":"396287501","IsPullRequest":false,"CreatedAt":"2019-01-17T10:59:36","Actor":"gpcaretti","Number":"1044","RawContent":null,"Title":"FAQ: how to understand a package is compatible with NETStandard","State":"closed","Body":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?","Url":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Closed issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044)"},{"Id":"396610837","IsPullRequest":true,"CreatedAt":"2019-01-16T21:17:03","Actor":"wtgodbe","Number":"1047","RawContent":null,"Title":"Bump AssemblyVersion for nestandard.dll to 2.1.0.0","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Closed or merged PR \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047)"},{"Id":"399549465","IsPullRequest":false,"CreatedAt":"2019-01-15T21:45:54","Actor":"kaby76","Number":"1053","RawContent":null,"Title":"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.","State":"open","Body":"I've started porting (rewriting) the Net Core framework to the GPU. Part of this very large task is to go through the framework and verify that it indeed satisfies the Net Standard specification because I really don't trust anything/anyone. So, I have several questions regarding Net Standard.\r\n\r\n1) According to Microsoft documentation (https://docs.microsoft.com/en-us/dotnet/standard/net-standard), “[t]he .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations. The motivation behind the .NET Standard is establishing greater uniformity in the .NET ecosystem. ECMA 335 continues to establish uniformity for .NET implementation behavior, but there's no similar spec for the .NET Base Class Libraries (BCL) for .NET library implementations.”\r\n\r\nQ: Exactly where is the “formal specification” of the API? Is it the MD file for a particular version (e.g., https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md)? Is it the collection of C# files with stub implementations (e.g., the files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref)? Or, is it something else?\r\n\r\n2) Assuming that the C# files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref is the formal definition. I wrote a CSPROJ to build an assembly for the current state of the decls. Then, I wrote a program to go through a framework, following reference assemblies to implementation assemblies, and output a sorted list of all types, all methods, all attributes, for public decls. I compared the reference and implementation assemblies for Net Core with the Standard set forth in the C# code. And yes, there are some non-trivial differences, mostly because the standard is evolving.\r\n\r\nThe following are general questions of type equivalence.\r\n\r\nQ: If there's an attribute (\"[...]\") on a type is in Standard, but missing on the type in Core, does Core still satisfy the Standard?\r\n\r\nQ: If a method and/or type exists in Core, but not in Standard, does the implementation still satisfy the Standard? In other words, can an implementation provide \"extra\" and still satisfy Standard?\r\n\r\nThe full list of the type dump for Standard and Core assemblies is here (https://1drv.ms/f/s!Atb3HX_AxX9ZgaxT-m221N6ut285Vw).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1053","RelatedDescription":"Open issue \"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.\" (#1053)"},{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Closed or merged PR \"Remove the manual config system\" (#1040)"},{"Id":"392986163","IsPullRequest":false,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1032","RawContent":null,"Title":"Remove slim configuration system and stop overloading Configuration","State":"closed","Body":"We should stop overloading the `Configuration` property in favor of the right msbuild properties and remove the `ConfigurationGroup` property to enable native VS support and remove a lot of obsolete stuff.\r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)'==''\">\r\n    <ConfigurationGroup Condition=\"'$(ConfigurationGroup)'==''\">Debug</ConfigurationGroup>\r\n    <Configuration>$(ConfigurationGroup)</Configuration>\r\n    <Configuration Condition=\"'$(TargetGroup)'!=''\">$(TargetGroup)_$(Configuration)</Configuration>\r\n    <Configuration Condition=\"'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'\">$(OSGroup)_$(Configuration)</Configuration>\r\n  </PropertyGroup>\r\n```\r\n\r\ncc @ericstj @wtgodbe ","Url":"https://github.com/dotnet/standard/issues/1032","RelatedDescription":"Closed issue \"Remove slim configuration system and stop overloading Configuration\" (#1032)"},{"Id":"396798571","IsPullRequest":false,"CreatedAt":"2019-01-11T01:19:54","Actor":"duncand","Number":"1050","RawContent":null,"Title":"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset","State":"closed","Body":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before.","Url":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Closed issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050)"},{"Id":"394796330","IsPullRequest":false,"CreatedAt":"2019-01-11T00:23:25","Actor":"MV10","Number":"1041","RawContent":null,"Title":"System.MathF missing in .NET Standard 2.1 README","State":"closed","Body":"Minor, but `System.MathF` is missing from the [README](https://github.com/dotnet/standard/blob/master/docs/planning/netstandard-2.1/README.md). I figured it would be in the Miscellaneous list at a minimum. (As I understand it, this is still on schedule for .NET Standard 2.1 per  https://github.com/dotnet/corefx/issues/15830, correct?)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1041","RelatedDescription":"Closed issue \"System.MathF missing in .NET Standard 2.1 README\" (#1041)"},{"Id":"396675175","IsPullRequest":false,"CreatedAt":"2019-01-11T00:22:05","Actor":"Entomy","Number":"1049","RawContent":null,"Title":"String Enhancements","State":"closed","Body":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?","Url":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Closed issue \"String Enhancements\" (#1049)"},{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"},{"Id":"396646204","IsPullRequest":true,"CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Number":"1048","RawContent":null,"Title":" Move source items into src folder","State":"closed","Body":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037","Url":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Closed or merged PR \" Move source items into src folder\" (#1048)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2019-01-07T22:02:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"closed","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Closed issue \"Group source items in a src folder\" (#1037)"},{"Id":"396598897","IsPullRequest":true,"CreatedAt":"2019-01-07T18:47:02","Actor":"wtgodbe","Number":"1046","RawContent":null,"Title":"Update APICompat baseline","State":"closed","Body":"I see these updates to the APICompat baselines after building from clean - I've confirmed that they weren't present before https://github.com/dotnet/standard/commit/dbb3e847a6dd09a8c9ec0206463ed1b848a5c90b. I figured I'd open a PR to use first as an easy way to view the diff & discuss, then to take into master if we decide it's the right thing. @ViktorHofer did you notice these locally when fixing up APICompat/GenAPI?","Url":"https://github.com/dotnet/standard/pull/1046","RelatedDescription":"Closed or merged PR \"Update APICompat baseline\" (#1046)"},{"Id":"396591596","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:51","Actor":"wtgodbe","Number":"1045","RawContent":null,"Title":"Convert seed.sh/.cmd files to proj files & update GenAPI invocations","State":"open","Body":"We should convert files like https://github.com/dotnet/standard/blob/8ca3d4c0c9599186d50196781484312176a9b2ad/platforms/xamarin.android/seed.sh to `.proj` files that can be built on-demand (either by direct invocation of `dotnet msbuild`, or a wrapper .ps1/.sh script that builds the project). This way we'll have access to the up-to-date version of `GenAPI`. We should also update the invocation of GenAPI to match the new standard introduced by https://github.com/dotnet/arcade/pull/1676\r\n\r\nCC @ViktorHofer ","Url":"https://github.com/dotnet/standard/issues/1045","RelatedDescription":"Open issue \"Convert seed.sh/.cmd files to proj files & update GenAPI invocations\" (#1045)"},{"Id":"396025237","IsPullRequest":true,"CreatedAt":"2019-01-04T19:25:54","Actor":"ViktorHofer","Number":"1043","RawContent":null,"Title":"Fix GenAPI invocation with new args","State":"closed","Body":"Also need to use DARC to get a GenApi fix in.","Url":"https://github.com/dotnet/standard/pull/1043","RelatedDescription":"Closed or merged PR \"Fix GenAPI invocation with new args\" (#1043)"},{"Id":"395644781","IsPullRequest":true,"CreatedAt":"2019-01-04T16:29:48","Actor":"ViktorHofer","Number":"1042","RawContent":null,"Title":"Respect ApiCompat cmd changes","State":"closed","Body":"Depends on https://github.com/dotnet/arcade/pull/1676","Url":"https://github.com/dotnet/standard/pull/1042","RelatedDescription":"Closed or merged PR \"Respect ApiCompat cmd changes\" (#1042)"},{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-26T21:14:18","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"closed","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Closed or merged PR \"Fix representation of enum values\" (#1039)"},{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"},{"Id":"393005614","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Number":"1035","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1035)"},{"Id":"393001679","IsPullRequest":true,"CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Number":"1034","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1034)"},{"Id":"392982975","IsPullRequest":false,"CreatedAt":"2018-12-20T10:31:53","Actor":"ViktorHofer","Number":"1031","RawContent":null,"Title":"Remove depproj approach and enable project restore","State":"open","Body":"As discussed in another PR I think it makes sense to remove the depproj approach here in the standard repo and follow the usual way of referencing packages directly in the respective project, in this case netstandard.csproj. Also the netstandard.builds file which restores for different frameworks can be incorporated in the csproj by adding a `TargetFrameworks` property and right PackageReference conditions. \r\n\r\ncc @wtgodbe @ericstj ","Url":"https://github.com/dotnet/standard/issues/1031","RelatedDescription":"Open issue \"Remove depproj approach and enable project restore\" (#1031)"},{"Id":"392822069","IsPullRequest":true,"CreatedAt":"2018-12-20T10:07:40","Actor":"wtgodbe","Number":"1030","RawContent":null,"Title":"Delete CI & redundant publish file","State":"closed","Body":"This deletes the old `netci.groovy` file, since we're using Azure DevOps for CI now. It also deletes `publish.msbuild`, which isn't used anywhere.\r\n\r\n@ViktorHofer PTAL","Url":"https://github.com/dotnet/standard/pull/1030","RelatedDescription":"Closed or merged PR \"Delete CI & redundant publish file\" (#1030)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"403010990","IsPullRequest":true,"CreatedAt":"2019-01-25T05:25:47","Actor":"morganbr","Number":"34834","RawContent":null,"Title":"Implement Serialization Guard CoreFX portion ","State":"open","Body":"Consumes Serialization Guard API in BinaryFormatter and Process. Also includes Serialization Guard's tests. See #34555 for details on Serialization Guard. Depends on https://github.com/dotnet/coreclr/pull/22204","Url":"https://github.com/dotnet/corefx/pull/34834","RelatedDescription":"Open PR \"Implement Serialization Guard CoreFX portion \" (#34834)"},{"Id":"403003644","IsPullRequest":false,"CreatedAt":"2019-01-25T05:06:35","Actor":"Grauenwolf","Number":"34833","RawContent":null,"Title":"MemoryPool<T>.RentSlim for allocation-free leases","State":"closed","Body":"The current design of `MemoryPool<T>.Rent` returns an interface, which means an object has to be allocated. \r\n\r\n`MemoryPool<T>.RentSlim` would instead return a struct. While this would still be usable in a `using` statement, it wouldn't require heap-allocating memory.\r\n\r\n`RentSlim` would be less user-friendly. As a struct, we cannot prevent copying which in turn means we can't prevent the object from being doubly-disposed. But as it is intended to only be used in conjunction with a `using` block there shouldn't be much of a problem.\r\n\r\nP.S. I'm not enamored by the name RentSlim, but I can't think of a better one at the moment. ","Url":"https://github.com/dotnet/corefx/issues/34833","RelatedDescription":"Closed issue \"MemoryPool<T>.RentSlim for allocation-free leases\" (#34833)"},{"Id":"402955111","IsPullRequest":true,"CreatedAt":"2019-01-25T03:47:47","Actor":"danmosemsft","Number":"34827","RawContent":null,"Title":"Fix BigInteger tests in UAP","State":"closed","Body":"Fix https://github.com/dotnet/corefx/issues/34825\r\n\r\nhttps://github.com/dotnet/corefx/pull/34827/files?w=1","Url":"https://github.com/dotnet/corefx/pull/34827","RelatedDescription":"Closed or merged PR \"Fix BigInteger tests in UAP\" (#34827)"},{"Id":"402951933","IsPullRequest":false,"CreatedAt":"2019-01-25T03:47:47","Actor":"dotnet-mc-bot","Number":"34825","RawContent":null,"Title":"Test failure: System.Numerics.Tests.ToStringTest/RunRegionSpecificStandardFormatToStringTests","State":"closed","Body":"Opened on behalf of @danmosemsft\n\nThe test `System.Numerics.Tests.ToStringTest/RunRegionSpecificStandardFormatToStringTests` has failed.\n\nFailure Message:\n```\nAssert.True() Failure\\r\nExpected: True\\r\nActual:   False\n```\n\nStack Trace:\n```\n   at System.Numerics.Tests.ToStringTest.VerifyExpectedStringResult(String expectedResult, String result) in F:\\vsagent\\20\\s\\src\\System.Runtime.Numerics\\tests\\BigInteger\\BigIntegerToStringTests.cs:line 1455\n   at System.Numerics.Tests.ToStringTest.VerifyToString(String test, String format, IFormatProvider provider, Boolean expectError, String expectedResult) in F:\\vsagent\\20\\s\\src\\System.Runtime.Numerics\\tests\\BigInteger\\BigIntegerToStringTests.cs:line 1425\n   at System.Numerics.Tests.ToStringTest.VerifyToString(String test, String format, String expectedResult) in F:\\vsagent\\20\\s\\src\\System.Runtime.Numerics\\tests\\BigInteger\\BigIntegerToStringTests.cs:line 1401\n   at System.Numerics.Tests.ToStringTest.RunStandardFormatToStringTests(Random random, String format, String negativeSign, Int32 precision, StringFormatter formatter) in F:\\vsagent\\20\\s\\src\\System.Runtime.Numerics\\tests\\BigInteger\\BigIntegerToStringTests.cs:line 465\n   at System.Numerics.Tests.ToStringTest.RunRegionSpecificStandardFormatToStringTests() in F:\\vsagent\\20\\s\\src\\System.Runtime.Numerics\\tests\\BigInteger\\BigIntegerToStringTests.cs:line 256\n```\n\nBuild : 3.0 - 20190124.2 (UWP F5 Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS4-x86\n  - Release\n","Url":"https://github.com/dotnet/corefx/issues/34825","RelatedDescription":"Closed issue \"Test failure: System.Numerics.Tests.ToStringTest/RunRegionSpecificStandardFormatToStringTests\" (#34825)"},{"Id":"402832173","IsPullRequest":true,"CreatedAt":"2019-01-25T03:43:23","Actor":"stephentoub","Number":"34811","RawContent":null,"Title":"Fix culture handling in legacy System.Json library","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/34807\r\ncc: @danmosemsft","Url":"https://github.com/dotnet/corefx/pull/34811","RelatedDescription":"Closed or merged PR \"Fix culture handling in legacy System.Json library\" (#34811)"},{"Id":"402803870","IsPullRequest":false,"CreatedAt":"2019-01-25T03:43:23","Actor":"dotnet-mc-bot","Number":"34807","RawContent":null,"Title":"Test failure: System.Json.Tests.JsonPrimitiveTests/ToString_TimeSpan","State":"closed","Body":"Opened on behalf of @danmosemsft\n\nThe test `System.Json.Tests.JsonPrimitiveTests/ToString_TimeSpan` has failed.\n\nFailure Message:\n```\nAssert.Equal() Failure\\r\n                    ↓ (pos 10)\\r\nExpected: 0:00:00:00.0000000\\r\nActual:   0:00:00:00,0000000\\r\n                    ↑ (pos 10)\n```\n\nStack Trace:\n```\n   at System.Json.Tests.JsonPrimitiveTests.ToString(JsonValue primitive, String expected) in F:\\vsagent\\3\\s\\src\\System.Json\\tests\\JsonPrimitiveTests.cs:line 90\n   at System.Json.Tests.JsonPrimitiveTests.ToString_TimeSpan() in F:\\vsagent\\3\\s\\src\\System.Json\\tests\\JsonPrimitiveTests.cs:line 85\n```\n\nBuild : 3.0 - 20190124.1 (UWP F5 Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS4-x86\n  - Release\n","Url":"https://github.com/dotnet/corefx/issues/34807","RelatedDescription":"Closed issue \"Test failure: System.Json.Tests.JsonPrimitiveTests/ToString_TimeSpan\" (#34807)"},{"Id":"402989725","IsPullRequest":true,"CreatedAt":"2019-01-25T03:22:39","Actor":"stephentoub","Number":"34832","RawContent":null,"Title":"Add test for new CancellationTokenSource(0)","State":"open","Body":"Validate correct behavior when a CTS is constructed to be immediately canceled via a 0 timeout.\r\ncc: @tarekgh \r\nValidation for https://github.com/dotnet/coreclr/pull/18098","Url":"https://github.com/dotnet/corefx/pull/34832","RelatedDescription":"Open PR \"Add test for new CancellationTokenSource(0)\" (#34832)"},{"Id":"402988410","IsPullRequest":false,"CreatedAt":"2019-01-25T03:15:43","Actor":"benaadams","Number":"34831","RawContent":null,"Title":"API Proposal: Console.CancellationToken","State":"open","Body":"To compose better with `async` and particularly `Task Main(...)` it would be good to have a `CancellationToken` for Console\r\n```csharp\r\npublic partial sealed class Console\r\n{\r\n    public static CancellationToken CancellationToken { get; }\r\n    public static void ResetCancellation(); // reissues the CancellationToken so a new cancellation can be listened to\r\n}\r\n```\r\n\r\nOther signals would be desirable like `sighup`, but that might be unix only?\r\n\r\n/cc @terrajobst @vcsjones ","Url":"https://github.com/dotnet/corefx/issues/34831","RelatedDescription":"Open issue \"API Proposal: Console.CancellationToken\" (#34831)"},{"Id":"402979644","IsPullRequest":false,"CreatedAt":"2019-01-25T02:31:40","Actor":"GrabYourPitchforks","Number":"34830","RawContent":null,"Title":"API proposal: UTF-8 web encoders","State":"open","Body":"(This is the follow-up to https://github.com/dotnet/corefx/issues/33509, where the review was marked as \"needs work\".)\r\n\r\nSome customers (notably, the JSON libraries) need to perform UTF-8 escaping of strings. The existing UTF-16 encoding APIs are insufficient for their needs. This proposal is for a sister set of APIs that operate on UTF-8 data.\r\n\r\n## Proposed API\r\n\r\n```cs\r\n// Proposed NEW types in existing namespace\r\n\r\nnamespace System.Text.Encodings.Web\r\n{\r\n   public abstract class Utf8TextEncoder\r\n   {    \r\n      /*\r\n       * ABSTRACT METHODS\r\n       * Any subclassed type must override at minimum these two methods. All other methods\r\n       * are built on top of these two.\r\n       */\r\n\r\n      // Returns the number of elements written to the destination buffer,\r\n      // or -1 if the destination buffer is too small to contain the encoding of this value.\r\n      public abstract int EncodeSingleRune(Rune value, Span<Utf8Char> destination);\r\n\r\n      // Return true if this scalar value must be encoded before being written to the destination\r\n      // buffer; false if it can be copied to the destination buffer as-is.\r\n      public abstract bool RuneMustBeEncoded(Rune value);\r\n\r\n      /*\r\n       * VIRTUAL METHODS\r\n       * The default implementations of these methods will work but may not be very optimized.\r\n       * Subclassed types may with to override them to provide more optimized behavior.\r\n       */\r\n\r\n      // Typical OperationStatus-based API.\r\n      public virtual OperationStatus Encode(ReadOnlySpan<Utf8Char> source, Span<Utf8Char> destination, out int countConsumed, out int countWritten, bool isFinalChunk = true);\r\n\r\n      // Takes an IBufferWriter instead of a Span as a sink. Can never return DestinationTooSmall\r\n      // since buffer writers should always grow. Note that the \"count written\" parameter is outed\r\n      // as an int64 instead of an int32 so that we can avoid integer overflow. Also note that we're\r\n      // using IBufferWriter<byte> instead of IBufferWriter<Utf8Char>, as the typical use case is\r\n      // for buffer writers to wrap i/o pipes.\r\n      public virtual OperationStatus Encode(ReadOnlySpan<Utf8Char> source, IBufferWriter<byte> utf8Destination, out int countConsumed, out long countWritten, bool isFinalChunk = true);\r\n\r\n      // Convenience API for working with UTF-16 source data.\r\n      // Transcoding and escaping are performed as a single step when writing to the destination.\r\n      public virtual OperationStatus Encode(ReadOnlySpan<char> source, Span<Utf8Char> destination, out int countConsumed, out int countWritten, bool isFinalChunk = true);\r\n      public virtual OperationStatus Encode(ReadOnlySpan<char> source, IBufferWriter<byte> utf8Destination, out int countConsumed, out long countWritten, bool isFinalChunk = true);\r\n\r\n      // When Utf8String comes online, this virtual method will be added.\r\n      public virtual Utf8String Encode(Utf8String value);\r\n\r\n      // Returns the index in the span of the first element that must be escaped, or -1 if no\r\n      // elements require escaping. This is generally used as an optimization by callers who\r\n      // may wish to perform their own bulk memcpy of data that doesn't require escaping.\r\n      // (Or, if it returns -1, they may opt to skip the memcpy entirely.)\r\n      public virtual int GetIndexOfFirstElementToEncode(ReadOnlySpan<Utf8Char> span);\r\n   }\r\n}\r\n```\r\n\r\nAnd the subclassed types and the factories to create them:\r\n\r\n```cs\r\n// Proposed NEW types in existing namespace\r\n\r\nnamespace System.Text.Encodings.Web\r\n{\r\n   public abstract class Utf8HtmlEncoder : Utf8TextEncoder\r\n   {\r\n      // These methods mimic the static factories on the existing UTF-16 \"HtmlEncoder\" type.\r\n\r\n      public static Utf8HtmlEncoder Default { get; }\r\n      public static Utf8HtmlEncoder Create(TextEncoderSettings settings);\r\n      public static Utf8HtmlEncoder Create(params UnicodeRange[] allowedRanges);\r\n   }\r\n\r\n   public abstract class Utf8JavaScriptEncoder : Utf8TextEncoder\r\n   {\r\n      // These methods mimic the static factories on the existing UTF-16 \"JavaScriptEncoder\" type.\r\n\r\n      public static Utf8JavaScriptEncoder Default { get; }\r\n      public static Utf8JavaScriptEncoder Create(TextEncoderSettings settings);\r\n      public static Utf8JavaScriptEncoder Create(params UnicodeRange[] allowedRanges);\r\n   }\r\n\r\n   public abstract class Utf8UrlEncoder : Utf8TextEncoder\r\n   {\r\n      // These methods mimic the static factories on the existing UTF-16 \"UrlEncoder\" type.\r\n\r\n      public static Utf8UrlEncoder Default { get; }\r\n      public static Utf8UrlEncoder Create(TextEncoderSettings settings);\r\n      public static Utf8UrlEncoder Create(params UnicodeRange[] allowedRanges);\r\n   }\r\n}\r\n```\r\n\r\n## Alternative API proposal\r\n\r\nIf we instead want to enlighten the existing encoding APIs to understand UTF-8 data in addition to UTF-16 data, the modifications to the existing types might look like the following.\r\n\r\n```cs\r\nnamespace System.Text.Encodings.Web\r\n{\r\n   // MODIFICATIONS to existing class\r\n\r\n   public abstract class TextEncoder\r\n   {\r\n      // MODIFICATION: existing abstract method becomes virtual\r\n      [EditorBrowsable(EditorBrowsableState.Never)] // EXISTING attribute\r\n      [Obsolete(\"This value is a lie. Don't depend on it.\")] // NEW attribute\r\n      public virtual int MaxOutputCharactersPerInputCharacter\r\n      {\r\n         get\r\n         {\r\n            // default implementation\r\n            return 0;\r\n         }\r\n      }\r\n\r\n      // MODIFICATION: existing abstract method becomes virtual\r\n      [EditorBrowsable(EditorBrowsableState.Never)] // EXISTING attribute\r\n      public abstract bool WillEncode(int unicodeScalar)\r\n      {\r\n         // default implementation\r\n         return (!Rune.TryCreate(unicodeScalar, out Rune value) || RuneMustBeEncoded(value));\r\n      }\r\n\r\n      // MODIFICATION: existing abstract method becomes virtual\r\n      [CLSCompliant(false)] // EXISTING attribute\r\n      [EditorBrowsable(EditorBrowsableState.Never)] // EXISTING attribute\r\n      public unsafe abstract int FindFirstCharacterToEncode(char* text, int textLength)\r\n      {\r\n         // default implementation\r\n         return GetIndexOfFirstElementToEncode(new ReadOnlySpan<char>(text, textLength));\r\n      }\r\n\r\n      // MODIFICATION: existing abstract method becomes virtual\r\n      [CLSCompliant(false)] // EXISTING attribute\r\n      [EditorBrowsable(EditorBrowsableState.Never)] // EXISTING attribute\r\n      public unsafe abstract bool TryEncodeUnicodeScalar(int unicodeScalar, char* buffer, int bufferLength, out int numberOfCharactersWritten)\r\n      {\r\n         // default implementation\r\n         if (Rune.TryCreate(unicodeScalar, out Rune rune))\r\n         {\r\n            int charsWritten = EncodeSingleRune(rune, new Span<char>(buffer, bufferLength));\r\n            if (charsWritten > 0)\r\n            {\r\n               numberOfCharsWritten = charsWritten;\r\n               return true;\r\n            }\r\n         }\r\n         numberOfCharsWritten = 0;\r\n         return false;\r\n      }\r\n\r\n      /*\r\n       * NEW virtual methods that serve as the two \"abstract\" methods.\r\n       */\r\n\r\n      // Default implementation attempts to call WillEncode(int) if it has been overridden.\r\n      // If neither this nor WillEncode(int) has been overridden, the default implementation\r\n      // throws an exception saying \"you must override me.\"\r\n      public virtual bool RuneMustBeEncoded(Rune value);\r\n\r\n      // Default implementation attempts to call TryEncodeUnicodeScalar(...) if it has been\r\n      // overridden. If neither this nor EncodeSingleRune has been overridden, the default\r\n      // implementation throws an exception saying \"you must override me.\"\r\n      //\r\n      // Returns the number of chars written to the buffer, or -1 if the buffer is too small\r\n      // to contain the escaped scalar value.\r\n      public virtual int EncodeSingleRune(Rune value, Span<char> buffer);\r\n\r\n      /*\r\n       * NEW virtual method that serves as a UTF-16 workhorse method. The derived type\r\n       * is _not required_ to override it since we can provide an approriate base implementation,\r\n       * but best performance will be achieved when this method is overridden.\r\n       */\r\n\r\n      public virtual int GetIndexOfFirstElementToEncode(ReadOnlySpan<char> span);\r\n\r\n      /*\r\n       * EXISTING APIs dealing with UTF-16 output - no modifications to signatures.\r\n       */\r\n\r\n      public virtual string Encode(string value);\r\n      public virtual void Encode(TextWriter output, char[] value, int startIndex, int characterCount);\r\n      public void Encode(TextWriter output, string value);\r\n      public virtual void Encode(TextWriter output, string value, int startIndex, int characterCount);\r\n\r\n      /*\r\n       * NEW APIs dealing with UTF-8 output - all are virtual but do not require overriding.\r\n       * The default implementations of all UTF-8 APIs delegate to the UTF-16 implementations.\r\n       * This means that the behavior will still be correct if these virtuals are not overridden, but\r\n       * performance will tank.\r\n       */\r\n       \r\n      // UTF-8 equivalent of EncodeSingleRune(Rune, Span<char>).\r\n      public virtual int EncodeSingleRune(Rune value, Span<Utf8Char> buffer);\r\n\r\n      // UTF-8 equivalent of GetIndexOfFirstElementToEncode(ReadOnlySpan<char>).\r\n      public virtual int GetIndexOfFirstElementToEncode(ReadOnlySpan<Utf8Char> span);\r\n\r\n      // Typical OperationStatus-based API.\r\n      public virtual OperationStatus Encode(ReadOnlySpan<Utf8Char> source, Span<Utf8Char> destination, out int countConsumed, out int countWritten, bool isFinalChunk = true);\r\n\r\n      // Takes an IBufferWriter instead of a Span as a sink. Can never return DestinationTooSmall\r\n      // since buffer writers should always grow. Note that the \"count written\" parameter is outed\r\n      // as an int64 instead of an int32 so that we can avoid integer overflow. Also note that we're\r\n      // using IBufferWriter<byte> instead of IBufferWriter<Utf8Char>, as the typical use case is\r\n      // for buffer writers to wrap i/o pipes.\r\n      public virtual OperationStatus Encode(ReadOnlySpan<Utf8Char> source, IBufferWriter<byte> utf8Destination, out int countConsumed, out long countWritten, bool isFinalChunk = true);\r\n\r\n      // Convenience API for working with UTF-16 source data.\r\n      // Transcoding and escaping are performed as a single step when writing to the destination.\r\n      public virtual OperationStatus Encode(ReadOnlySpan<char> source, Span<Utf8Char> destination, out int countConsumed, out int countWritten, bool isFinalChunk = true);\r\n      public virtual OperationStatus Encode(ReadOnlySpan<char> source, IBufferWriter<byte> utf8Destination, out int countConsumed, out long countWritten, bool isFinalChunk = true);\r\n\r\n      // When Utf8String comes online, this virtual method will be added.\r\n      public virtual Utf8String Encode(Utf8String value);\r\n   }\r\n}\r\n```\r\n\r\n## Discussion\r\n\r\nThe first proposal uses newer data structures and concepts that weren't available when we designed the original types, so we can eliminate the warts from the original types. It's also fully able to be subclassed without requiring the developer to enable advanced Intellisense features or to drop down to unsafe code blocks.\r\n\r\nThe biggest problem with the first proposal is that it leads to type explosion throughout the namespace. Since there are two copies of each encoder, consumers would need to be trained on when it's appropriate to use each type. Dependency injection systems (like used in aspnet) would need to take both as inputs since they don't know what the application will need at runtime.\r\n\r\nThe second proposal attempts to avoid type explosion by modifying the existing types. On one hand this is an improvement on https://github.com/dotnet/corefx/issues/33509 in that this is not a source or binary breaking change. However, it leads to significant complexity both for developers who subclass this (how does the dev know which methods are mandatory to override if everything is virtual instead of abstract?) and for the implementation (how do we quickly and reliably tell if the current instance has overridden a specific method?).","Url":"https://github.com/dotnet/corefx/issues/34830","RelatedDescription":"Open issue \"API proposal: UTF-8 web encoders\" (#34830)"},{"Id":"402967655","IsPullRequest":true,"CreatedAt":"2019-01-25T01:30:53","Actor":"Dotnet-GitSync-Bot","Number":"34829","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @jkotas","Url":"https://github.com/dotnet/corefx/pull/34829","RelatedDescription":"Open PR \"Mirror changes from dotnet/corert,coreclr\" (#34829)"},{"Id":"402930504","IsPullRequest":true,"CreatedAt":"2019-01-25T01:27:52","Actor":"Dotnet-GitSync-Bot","Number":"34821","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @filipnavara","Url":"https://github.com/dotnet/corefx/pull/34821","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corert\" (#34821)"},{"Id":"402964538","IsPullRequest":false,"CreatedAt":"2019-01-25T01:15:32","Actor":"vancem","Number":"34828","RawContent":null,"Title":"API Changes to System.Activity To support W3C Style IDs and Propagation","State":"open","Body":"\r\nThere is a World Wide Web Consortium (W3C) draft standard for the format and propagation of IDs used to correlate logging from various machines in a distributed application (for details see [TraceContext](https://w3c.github.io/trace-context/).     Microsoft (in particular the Applications Insights team), wishes to support this standard in a first-class way.   \r\n\r\nThere is a corresponding Pull Request #33207 with an actual implementation.  This issue just covers the public surface area additions.   \r\n\r\n## Summary\r\n\r\nThe changes include the following additions to the existing 'System.Activity' class \r\n```\r\n    public partial class Activity\r\n    {\r\n        public static System.Diagnostics.ActivityIdFormat DefaultIdFormat { get { throw null; } set { } }\r\n        public static bool ForceDefaultIdFormat { get { throw null; } set { } }\r\n        public System.Diagnostics.ActivityIdFormat IdFormat { get { throw null; } }\r\n        public ref readonly System.Diagnostics.SpanId SpanId { get { throw null; } }\r\n        public ref readonly System.Diagnostics.TraceId TraceId { get { throw null; } }\r\n        public string TraceStateString { get { throw null; } set { } }\r\n        public System.Diagnostics.Activity SetParentId(in System.Diagnostics.TraceId traceId, in System.Diagnostics.SpanId spanId) { throw null; }\r\n    }\r\n```\r\nAs well as the following new classes that support these new methods \r\n```\r\n    public enum ActivityIdFormat : byte\r\n    {\r\n        Hierarchical = (byte)1,\r\n        Unknown = (byte)0,\r\n        W3C = (byte)2,\r\n    }\r\n\r\n    public partial struct SpanId\r\n    {\r\n        public SpanId(System.ReadOnlySpan<byte> idData, bool isUtf8Chars = false) { throw null; }\r\n        public SpanId(System.ReadOnlySpan<char> idData) { throw null; }\r\n        public System.ReadOnlySpan<byte> AsBytes { get { throw null; } }\r\n        public string AsHexString { get { throw null; } }\r\n        public static System.Diagnostics.SpanId NewSpanId() { throw null; }\r\n        public override string ToString() { throw null; }\r\n    }\r\n\r\n    public partial struct TraceId\r\n    {\r\n        public TraceId(System.ReadOnlySpan<byte> idData, bool isUtf8Chars = false) { throw null; }\r\n        public TraceId(System.ReadOnlySpan<char> idData) { throw null; }\r\n        public System.ReadOnlySpan<byte> AsBytes { get { throw null; } }\r\n        public string AsHexString { get { throw null; } }\r\n        public static System.Diagnostics.TraceId NewTraceId() { throw null; }\r\n        public override string ToString() { throw null; }\r\n    }\r\n```\r\n\r\n## Detailed description \r\n\r\nThese APIs represent two logically distinct sets of functionality \r\n1. Add the ability for Activity to have more then one ID format.   \r\n     Activity's have always supported the concept of an ID, and while it was flexible the format ID was willing to accept,  when it was generating IDs it created them in a 'hierarchical' format that looked like a file path (a list of named separated with a particular syntax).   The WC3 ID is a much flatter, 'two level' ID (consisting of TraceId (a 16 byte binary number) representing 'independent' activities, and a 'SpanId' (a 8 byte number) that is used to distinguish among all the activities related to a top level (independent) activity.    To support W3C seemlessly, Activity would need to generate its IDs in this format.  \r\n    The first feature is APIs that define the new W3C format and allow logging systems to control it (Note that this is not a breaking change because by default activity does what it did before), you have to ask for the new format.  \r\n2. Support efficient ID manipulation. \r\n     In theory just supporting the new Activity ID format however the fact that ID is represented as a string is a source of inefficiency (part of the reason W3C chose this ID format was to make it efficient to manipulate the IDs).   \r\n     To this end we define a TraceId and SpanId (these are the preferred in the W3C standard), struct types.   These types hold the two components of the ID, and allow non-allocating manipulation of them.  In addition we add some APIs to allow you to use these types instead of strings in the most important APIs.   Conceputally these classes do very little (the simply hold a 16 byte or 8 byte binary value), but they do allow caching, and support obvious functionality (converting to wand from their string representation). \r\n\r\n### APIs for supporting multiple ID formats\r\n\r\nThe APIs to support multiple ID formats include\r\n```\r\n    public partial class Activity\r\n    {\r\n        public static System.Diagnostics.ActivityIdFormat DefaultIdFormat { get { throw null; } set { } }\r\n        public static bool ForceDefaultIdFormat { get { throw null; } set { } }\r\n        public System.Diagnostics.ActivityIdFormat IdFormat { get { throw null; } }\r\n    }\r\n\r\n    public enum ActivityIdFormat : byte\r\n    {\r\n        Hierarchical = (byte)1,\r\n        Unknown = (byte)0,\r\n        W3C = (byte)2,\r\n    }\r\n```\r\nBasically we define a new enum 'ActivityIdFormat' which defines the formats Activity knows about, and have a IdFormat property that indicates which one is in use.   That is used when generated new IDs to figure out which format to ue.   If a Activity has a parent, then then by default the child activity uses the same format.   If the activity is at the top level, it uses the Stack 'DefaultIdFormat' to decide.\r\n\r\nThe only slightly subtle thing is that App-Insights wanted the ability to FORCE the format REGARDLESS of what the parent's format was.   This is what the 'ForceDefaultIdFormat' does.  When true you use the default format and ignore the parent format.   \r\n\r\n###  TraceState\r\n\r\nThe W3C standard also defines something called 'Tracestate' in addition to the ID format.   The details of its use are not important, only that it needs to propagate along with the Activity (it is like the existing 'Baggage' fields.    We add direct support for this.  \r\n```\r\n        public string TraceStateString { get { throw null; } set { } }\r\n```\r\nIn general we don't mind adding 'well know' state like this (as long as we believe 'most' users will want it)   Its implementation is trivial (we get and set it, and propagate it to children).   We anticipate more of these over time and it they are a good things (this direct support makes it more efficient and more discoverable).  \r\n\r\nThe property was given the name 'TraceStateString' not just 'TraceState' because there is the possibility that we may want to create a struct for this (like we did for TraceId), and wanted to allow the best name to be used for that if we do that. \r\n\r\n### TraceId and SpanId types.\r\n\r\nThe new API surface to support efficient manipulation of IDs is as follows.  \r\n```    public partial struct SpanId\r\n    {\r\n        public SpanId(System.ReadOnlySpan<byte> idData, bool isUtf8Chars = false) { throw null; }\r\n        public SpanId(System.ReadOnlySpan<char> idData) { throw null; }\r\n        public System.ReadOnlySpan<byte> AsBytes { get { throw null; } }\r\n        public string AsHexString { get { throw null; } }\r\n        public static System.Diagnostics.SpanId NewSpanId() { throw null; }\r\n        public override string ToString() { throw null; }\r\n    }\r\n\r\n    public partial struct TraceId\r\n    {\r\n        public TraceId(System.ReadOnlySpan<byte> idData, bool isUtf8Chars = false) { throw null; }\r\n        public TraceId(System.ReadOnlySpan<char> idData) { throw null; }\r\n        public System.ReadOnlySpan<byte> AsBytes { get { throw null; } }\r\n        public string AsHexString { get { throw null; } }\r\n        public static System.Diagnostics.TraceId NewTraceId() { throw null; }\r\n        public override string ToString() { throw null; }\r\n    }\r\n    public partial class Activity\r\n    {\r\n        public ref readonly System.Diagnostics.SpanId SpanId { get { throw null; } }\r\n        public ref readonly System.Diagnostics.TraceId TraceId { get { throw null; } }\r\n        public System.Diagnostics.Activity SetParentId(in System.Diagnostics.TraceId traceId, in System.Diagnostics.SpanId spanId) { throw null; }\r\n    }\r\n```\r\nBasically SpanId and TraceId are simply 8 byte and 16 byte IDs.   You can create them either  by\r\n1. Given them binary data\r\n2. Giving them a hexadecimal UTF8 encoded string (as a ReadOnlySpan<byte>)\r\n3. Giving them  a hexadecimal unicode char (2 byte) encoded string (as a ReadOnlySpan<char>)\r\n\r\nThe operations on these types  are basically to fetch the bytes and to print as a string.   We may add more over time, but this is enough to start with.   \r\n\r\nWe then add propertied that fetch these IDs from the activity (they return the 'null' ID if the Activity does not have a W3C formatted ID).   The main way that Activities get IDs is either by setting the ID of the parent (thus we needed a SetParentID API that takes these ids), and when they are generated randomly (for top level Activities without parents), which is wha thte 'NewTraceId() method are for.   \r\n\r\nWe do anticipate that more additions to Activity will be needed (even before V3.0 is finalized), but this group is logically coherent, and covers much of the ground we need for V3.0 (and support of W3C IDs).\r\n","Url":"https://github.com/dotnet/corefx/issues/34828","RelatedDescription":"Open issue \"API Changes to System.Activity To support W3C Style IDs and Propagation\" (#34828)"},{"Id":"402927134","IsPullRequest":true,"CreatedAt":"2019-01-25T01:06:45","Actor":"maryamariyan","Number":"34820","RawContent":null,"Title":"Test Fix: Add IsSoundPlaySupported condition to skip on Nano","State":"closed","Body":"Fixes: #34808 \r\n\r\ncc: @safern @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/34820","RelatedDescription":"Closed or merged PR \"Test Fix: Add IsSoundPlaySupported condition to skip on Nano\" (#34820)"},{"Id":"402807915","IsPullRequest":false,"CreatedAt":"2019-01-25T01:06:45","Actor":"dotnet-mc-bot","Number":"34808","RawContent":null,"Title":"Test failure: System.Media.Test.SoundPlayerTests/Load_SourceLocation_Success(sourceLocation: \\\"adpcm.wav\\\")","State":"closed","Body":"Opened on behalf of @danmosemsft\n\nThe test `System.Media.Test.SoundPlayerTests/Load_SourceLocation_Success(sourceLocation: \\\"adpcm.wav\\\")` has failed.\n\nFailure Message:\n```\nSystem.EntryPointNotFoundException : Unable to find an entry point named 'mmioOpen' in DLL 'winmm.dll'.\n```\n\nStack Trace:\n```\n   at Interop.WinMM.mmioOpen(String fileName, IntPtr not_used, Int32 flags)\n   at System.Media.SoundPlayer.ValidateSoundFile(String fileName) in F:\\vsagent\\3\\s\\src\\System.Windows.Extensions\\src\\System\\Media\\SoundPlayer.cs:line 518\n   at System.Media.SoundPlayer.LoadAndPlay(Int32 flags) in F:\\vsagent\\3\\s\\src\\System.Windows.Extensions\\src\\System\\Media\\SoundPlayer.cs:line 223\n   at System.Media.SoundPlayer.Play() in F:\\vsagent\\3\\s\\src\\System.Windows.Extensions\\src\\System\\Media\\SoundPlayer.cs:line 319\n   at System.Media.Test.SoundPlayerTests.Load_SourceLocation_Success(String sourceLocation) in F:\\vsagent\\3\\s\\src\\System.Windows.Extensions\\tests\\System\\Media\\SoundPlayerTests.cs:line 96\n```\n\nBuild : 3.0 - 20190124.1 (Core Tests)\nFailing configurations:\n- Windows.10.Nano.Amd64-x64\n  - Release\n","Url":"https://github.com/dotnet/corefx/issues/34808","RelatedDescription":"Closed issue \"Test failure: System.Media.Test.SoundPlayerTests/Load_SourceLocation_Success(sourceLocation: \\\"adpcm.wav\\\")\" (#34808)"},{"Id":"402832324","IsPullRequest":true,"CreatedAt":"2019-01-25T00:34:26","Actor":"joperezr","Number":"34812","RawContent":null,"Title":"Nesting source package files for a better experience when consuming it.","State":"closed","Body":"cc: @ericstj @ahsonkhan @KrzysztofCwalina \r\n\r\nAfter this change, when consuming the source package for system.text.json all the sources will be nested under System/Text/Json subfolders in the solution, like:\r\n\r\n![image](https://user-images.githubusercontent.com/13854455/51698738-dc7e7380-1fbf-11e9-860c-21666b209f71.png)\r\n","Url":"https://github.com/dotnet/corefx/pull/34812","RelatedDescription":"Closed or merged PR \"Nesting source package files for a better experience when consuming it.\" (#34812)"},{"Id":"402888854","IsPullRequest":true,"CreatedAt":"2019-01-25T00:21:40","Actor":"stephentoub","Number":"34815","RawContent":null,"Title":"Replace thread aborts in SoundPlayer","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/34810. This only addresses the issue of SoundPlayer using Thread.Abort, replacing it with cancellation; there are a bunch of other long-standing functional issues with this code, and I had to stop myself from spending time fixing more.\r\n\r\ncc: @danmosemsft, @maryamariyan ","Url":"https://github.com/dotnet/corefx/pull/34815","RelatedDescription":"Closed or merged PR \"Replace thread aborts in SoundPlayer\" (#34815)"},{"Id":"402824405","IsPullRequest":false,"CreatedAt":"2019-01-25T00:21:39","Actor":"maryamariyan","Number":"34810","RawContent":null,"Title":"System.Media.SoundPlayer using Thread.Abort which throws PNSE","State":"closed","Body":"System.Media.SoundPlayer is using Thread.Abort which throws PNSE in .NET Core.\r\n\r\nMore synchronization related issues in SoundPlayer class commented in the following PR which need to be addressed: https://github.com/dotnet/corefx/pull/32505#issuecomment-437122365\r\n\r\nRelated to #31426\r\ncc: @danmosemsft @stephentoub \r\n","Url":"https://github.com/dotnet/corefx/issues/34810","RelatedDescription":"Closed issue \"System.Media.SoundPlayer using Thread.Abort which throws PNSE\" (#34810)"},{"Id":"402952735","IsPullRequest":false,"CreatedAt":"2019-01-25T00:19:03","Actor":"GrabYourPitchforks","Number":"34826","RawContent":null,"Title":"API proposal: Complex Rune enumeration over spans of UTF-16 and UTF-8 text","State":"open","Body":"(This is the follow-up to https://github.com/dotnet/apireviews/pull/76.)\r\n\r\nThese `Rune` enumeration APIs are similar to existing APIs like `String.EnumerateRunes()`, but instead of returning a simple enumerator of `Rune` they return an enumerator of a data structure which allows deeper inspection of the underlying data.\r\n\r\n## API proposal\r\n\r\n```cs\r\nnamespace System.Text\r\n{\r\n   // Proposed NEW type\r\n   public readonly struct RunePosition : IEquatable<RunePosition>\r\n   {\r\n      private readonly int _dummy;\r\n\r\n      // NOTE: No public ctor other than the default paramerless ctor.\r\n      // Should we wait to add this later when we see demand?\r\n\r\n      public static bool operator==(RunePosition left, RunePosition right);\r\n      public static bool operator!=(RunePosition left, RunePosition right);\r\n\r\n      public Rune Rune { get; }\r\n      public int StartIndex { get; }\r\n      public int Length { get; }\r\n      public bool WasReplaced { get; }\r\n\r\n      [EditorBrowsable(EditorBrowsableState.Never)]\r\n      public void Deconstruct(out Rune rune, out int startIndex);\r\n\r\n      [EditorBrowsable(EditorBrowsableState.Never)]\r\n      public void Deconstruct(out Rune rune, out int startIndex, out int length);\r\n\r\n      public bool Equals(RunePosition other);\r\n      public override bool Equals(object other);\r\n      public override int GetHashCode();\r\n   }\r\n}\r\n```\r\n\r\nAnd the factories that give you enumerators over these things:\r\n\r\n```cs\r\nnamespace System.Text\r\n{\r\n   // EXISTING type\r\n   public readonly struct Rune\r\n   {\r\n      // Proposed NEW methods\r\n\r\n      public static Utf8RunePositionEnumerator EnumerateRunePositions(ReadOnlySpan<char> span);\r\n      public static Utf16RunePositionEnumerator EnumerateRunePositions(ReadOnlySpan<Utf8Char> span);\r\n\r\n      // Proposed NEW nested types under Rune\r\n\r\n      public ref struct Utf8RunePositionEnumerator\r\n      {\r\n         private readonly object _dummy;\r\n         private readonly int _dummyPrimitive;\r\n\r\n         public RunePosition Current { get; }\r\n         public Utf8RunePositionEnumerator GetEnumerator();\r\n         public bool MoveNext();\r\n      }\r\n\r\n      public ref struct Utf16RunePositionEnumerator\r\n      {\r\n         private readonly object _dummy;\r\n         private readonly int _dummyPrimitive;\r\n\r\n         public RunePosition Current { get; }\r\n         public Utf16RunePositionEnumerator GetEnumerator();\r\n         public bool MoveNext();\r\n      }\r\n   }\r\n}\r\n```\r\n\r\n## Behaviors\r\n\r\nIf an invalid or incomplete sequence is encountered, the enumerator silently replaces the bad subsequence with `U+FFFD` and sets _WasReplaced = true_ for this particular element. This also means that the `RunePosition.Length` property value can differ from the `Rune.Utf{8|16}SequenceLength` property value if an invalid subsequence is encountered. `RunePosition.Length` will always return the number of code units consumed as part of discovering that this was an invalid subsequence, and `Rune.Utf{8|16}SequenceLength` will always return the code unit count of `U+FFFD`.\r\n\r\n## Discussion\r\n\r\nI don't believe we have any code in corefx which would benefit directly from being able to call into this. Instead, it's meant for developers migrating from Go who are looking for similar capabilities in our own systems.\r\n\r\nhttps://blog.golang.org/strings gives the following sample in its tutorial.\r\n\r\n```go\r\nconst nihongo = \"日本語\"\r\nfor index, runeValue := range nihongo {\r\n    fmt.Printf(\"%#U starts at byte position %d\\n\", runeValue, index)\r\n}\r\n```\r\n\r\nWith this API proposal, the C# equivalent (using `System.String`) would look like the below.\r\n\r\n```cs\r\nconst string nihongo = \"日本語\";\r\nforeach (var (runeValue, startIndex) in Rune.EnumerateRunePositions(nihongo))\r\n{\r\n   Console.WriteLine($\"U+{runeValue.Value:X4} '{runeValue}' starts at char position {startIndex}\");\r\n}\r\n```\r\n\r\n### Open issues and questions\r\n\r\n* Is it ok to put the enumeration APIs on and nested types under the existing `Rune` class?\r\n\r\nThis isn't the standard way of doing things. Normally we nest enumerators under the collection type, but in this case our collection type is `ReadOnlySpan<T>`, so that won't help much. We can put them as top-level types under the `System.Text` namespace, but I don't want to pollute default Intellisense.\r\n\r\nI had shied away from creating an instance method `String.EnumerateRunePositions` or an extension method `ROS<char>.EnumerateRunePositions` because I didn't want this to conflict with the existing methods named simply `EnumerateRunes()`. I'd prefer to drive most developers to that simple API over this one.","Url":"https://github.com/dotnet/corefx/issues/34826","RelatedDescription":"Open issue \"API proposal: Complex Rune enumeration over spans of UTF-16 and UTF-8 text\" (#34826)"},{"Id":"402951316","IsPullRequest":false,"CreatedAt":"2019-01-25T00:12:52","Actor":"dotnet-mc-bot","Number":"34824","RawContent":null,"Title":"Test failure: MonoTests.System.Runtime.Caching.MemoryCacheTestExpires11/TimedExpirationAsync","State":"open","Body":"Opened on behalf of @danmosemsft\n\nThe test `MonoTests.System.Runtime.Caching.MemoryCacheTestExpires11/TimedExpirationAsync` has failed.\n\nFailure Message:\n```\nAssert.Equal() Failure\\r\nExpected: 3\\r\nActual:   2\n```\n\nStack Trace:\n```\n   at MonoTests.System.Runtime.Caching.MemoryCacheTestExpires11.<TimedExpirationAsync>d__0.MoveNext() in F:\\vsagent\\3\\s\\src\\System.Runtime.Caching\\tests\\System.Runtime.Caching\\MemoryCacheTest.cs:line 1204\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n```\n\nBuild : 3.0 - 20190124.2 (Full Framework Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS4-x64\n  - Release\n","Url":"https://github.com/dotnet/corefx/issues/34824","RelatedDescription":"Open issue \"Test failure: MonoTests.System.Runtime.Caching.MemoryCacheTestExpires11/TimedExpirationAsync\" (#34824)"},{"Id":"402950821","IsPullRequest":false,"CreatedAt":"2019-01-25T00:10:38","Actor":"dotnet-mc-bot","Number":"34823","RawContent":null,"Title":"Test failure: System.IO.Tests.FileInfo_GetSetTimes/CopyToNanosecondsPresent","State":"open","Body":"Opened on behalf of @danmosemsft\n\nThe test `System.IO.Tests.FileInfo_GetSetTimes/CopyToNanosecondsPresent` has failed.\n\nFailure Message:\n```\nAssert.True() Failure\nExpected: True\nActual:   False\n```\n\nStack Trace:\n```\n   at System.IO.Tests.FileInfo_GetSetTimes.GetNonZeroNanoseconds() in /Users/vsts/agent/2.144.2/work/1/s/src/System.IO.FileSystem/tests/FileInfo/GetSetTimes.cs:line 52\n   at System.IO.Tests.FileInfo_GetSetTimes.CopyToNanosecondsPresent() in /Users/vsts/agent/2.144.2/work/1/s/src/System.IO.FileSystem/tests/FileInfo/GetSetTimes.cs:line 121\n```\n\nBuild : 3.0 - 20190124.2 (Core Tests)\nFailing configurations:\n- OSX.1014.Amd64-x64\n  - Release\n","Url":"https://github.com/dotnet/corefx/issues/34823","RelatedDescription":"Open issue \"Test failure: System.IO.Tests.FileInfo_GetSetTimes/CopyToNanosecondsPresent\" (#34823)"},{"Id":"402930590","IsPullRequest":false,"CreatedAt":"2019-01-24T22:49:50","Actor":"GrabYourPitchforks","Number":"34822","RawContent":null,"Title":"API proposal: Rune.DecodeFirstRune and friends","State":"open","Body":"These APIs are useful for reading the first and last `Rune` from a sequence. Unlike the existing `Rune.TryGetRuneAt` API which returns a Boolean \"success\" / \"failure\", and unlike the existing `String.EnumerateRunes` API which silently replaces invalid sequences with `U+FFFD`, this API instead returns to the caller information about the UTF-\\* subsequence itself.\r\n\r\nThese APIs can be used by higher-level functions like transcoders, escapers, and other text manipulation routines.\r\n\r\n## API proposal\r\n\r\n```cs\r\nnamespace System.Text\r\n{\r\n   public readonly struct Rune\r\n   {\r\n      // Proposed NEW methods on existing Rune type\r\n\r\n      public static OperationStatus DecodeFirstRune(ReadOnlySpan<char> span, out Rune result, out int sequenceLength);\r\n      public static OperationStatus DecodeFirstRune(ReadOnlySpan<Utf8Char> span, out Rune result, out int sequenceLength);\r\n\r\n      public static OperationStatus DecodeLastRune(ReadOnlySpan<char> span, out Rune result, out int sequenceLength);\r\n      public static OperationStatus DecodeLastRune(ReadOnlySpan<Utf8Char> span, out Rune result, out int sequenceLength);\r\n   }\r\n}\r\n```\r\n\r\nBelow are some sample input buffers and what the `DecodeFirstRune` function would return.\r\n\r\nUTF-16: `[ 0078 0079 007A ]`.\r\n\r\nThe first scalar value in this buffer is encoded by the char `[ 0078 ]`. This unambiguously corresponds to the scalar value `U+0078`. The method returns `OperationStatus.Done`, outs `U+0078` via the _result_ parameter, and outs 1 via the _sequenceLength_ parameter. (The sequence was 1 code unit in length.)\r\n\r\nUTF-8: `[ 78 79 7A ]`\r\n\r\nSame as above. Returns `OperationStatus.Done`, outs `U+0078` via _result_, and outs 1 via _sequenceLength_.\r\n\r\nUTF-16: `[ D800 ]`.\r\n\r\nThe char `[ D800 ]` is a standalone high surrogate. It's not by itself well-formed, but it's still possible to make this buffer valid by following it up with a low surrogate char. This returns `OperationStatus.NeedMoreData`, outs `default(Rune)` via _result_, and outs 1 via _sequenceLength_ (because we inspected 1 char).\r\n\r\nUTF-8: `[ F0 BF ]`\r\n\r\nSame as above. This sequence is not by itself well-formed, but it's still possible to make this buffer valid by following it up with a continuation byte. This returns `OperationStatus.NeedMoreData`, outs `default(Rune)` via _result_, and outs 2 via _sequenceLength_ (because we inspected 2 bytes).\r\n\r\nUTF-16: `[ D800 0020 ]`\r\n\r\nThe first char `[ D800 ]` is a standalone high surrogate, and we know that the next char isn't a low surrogate. This allows us to determine unambiguously that the buffer contains ill-formed data. This returns `OperationStatus.InvalidData`, outs `default(Rune)` via _result_, and outs 1 via _sequenceLength_ (because we inspected 1 char).\r\n\r\nUTF-8: `[ F4 80 80 F5 78 79 7A ]`\r\n\r\nThe `0xF5` byte improperly terminates what we expected to be the start of a 4-byte UTF-8 subsequence. No amount of additional data will ever make this sequence valid. This returns `OperationStatus.InvalidData`, outs `default(Rune)` via _result_, and outs 3 via _sequenceLength_ (per Unicode recommendation re: calculating maximal invalid subsequence length).\r\n\r\n## Further discussion\r\n\r\nTranscoding / escaping / etc. routines often need to know the difference between incomplete and invalid data. If these routines are themselves implemented using the `OperationStatus` pattern, they need to know whether to return `OperationStatus.NeedMoreData` or `OperationStatus.InvalidData` to their own callers.\r\n\r\nEven though there are public `Rune.Utf8SequenceLength` and `Rune.Utf16SequenceLength` instance properties, we still need an out parameter that answers \"how long was the subsequence that we inspected to come up with our determination?\" Think of this parameter as akin to \"regardless of whether the return value was good / incomplete / invalid, slice the original input buffer by this many elements before you call me next.\"\r\n\r\nTo see an example of this in action (in the UTF-8 JSON escaper), see https://github.com/GrabYourPitchforks/jsonescape/blob/1218cf6fa8988352474281c23da7bd9de087ec2f/JsonEscape/Escaper/Utf8JavaScriptEncoder.cs#L66.","Url":"https://github.com/dotnet/corefx/issues/34822","RelatedDescription":"Open issue \"API proposal: Rune.DecodeFirstRune and friends\" (#34822)"},{"Id":"402893361","IsPullRequest":true,"CreatedAt":"2019-01-24T22:47:15","Actor":"Dotnet-GitSync-Bot","Number":"34817","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corefx/pull/34817","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34817)"},{"Id":"402917811","IsPullRequest":true,"CreatedAt":"2019-01-24T22:10:29","Actor":"ViktorHofer","Number":"34819","RawContent":null,"Title":"Bump UAPTools version","State":"open","Body":"The UapAot runner still had a minor issue. I updated the package and uploaded it to dotnetfeed.","Url":"https://github.com/dotnet/corefx/pull/34819","RelatedDescription":"Open PR \"Bump UAPTools version\" (#34819)"},{"Id":"402870596","IsPullRequest":true,"CreatedAt":"2019-01-24T21:45:39","Actor":"davidsh","Number":"34814","RawContent":null,"Title":"Fix SslStream channel binding token","State":"closed","Body":"While working on Enterprise Scenario testing I discovered a bug in how the Unix layer generates\r\nthe channel binding token.  It was using the wrong prefix for 'Endpoint' tokens.\r\n\r\nFixed 'Endpoint' token generation and added more detailed tests.","Url":"https://github.com/dotnet/corefx/pull/34814","RelatedDescription":"Closed or merged PR \"Fix SslStream channel binding token\" (#34814)"},{"Id":"402902168","IsPullRequest":true,"CreatedAt":"2019-01-24T21:25:46","Actor":"filipnavara","Number":"34818","RawContent":null,"Title":"Test more invalid values for ThreadPool.[Unsafe]RegisterWaitForSingleObject","State":"open","Body":"Unit tests for https://github.com/dotnet/corert/pull/6887.","Url":"https://github.com/dotnet/corefx/pull/34818","RelatedDescription":"Open PR \"Test more invalid values for ThreadPool.[Unsafe]RegisterWaitForSingleObject\" (#34818)"},{"Id":"402891935","IsPullRequest":false,"CreatedAt":"2019-01-24T20:56:11","Actor":"ericstj","Number":"34816","RawContent":null,"Title":"Add package testing for dekstop that does strict closure validation (exact match) on desktop","State":"open","Body":"Some of our libraries need the characteristic that they not require binding redirects when run on desktop (for example, they need to be used in msbuild tasks, or in some other plugin model that doesn't permit definition of bindingRedirects).\r\n\r\nThis is most often broken by cases where some dependency in the middle of the stack needs to freeze its netstandard version when it moves inbox.  If other parts of the stack underneath this dependency are still moving then they need to version.\r\n\r\nTo accommodate that requirement we may need to add netfx specific builds of libraries when their netstandard version  is frozen.  This is not unlike the [package validation we do for packages which apply to desktop](https://github.com/dotnet/arcade/blob/d25280532a0ee20778460395a73f5b72ba64c5c9/src/Microsoft.DotNet.Build.Tasks.Packaging/src/ValidatePackage.cs#L322-L327) except we can do that down the whole stack.\r\n\r\nThis still doesn't fix the issue where some customer netstandard component is involved in a dependency graph introducing a lower version, but at least it can alleviate the case where you have only desktop projects consuming corefx packages.","Url":"https://github.com/dotnet/corefx/issues/34816","RelatedDescription":"Open issue \"Add package testing for dekstop that does strict closure validation (exact match) on desktop\" (#34816)"},{"Id":"402760317","IsPullRequest":true,"CreatedAt":"2019-01-24T19:29:19","Actor":"Dotnet-GitSync-Bot","Number":"34805","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/corefx/pull/34805","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#34805)"},{"Id":"402851036","IsPullRequest":true,"CreatedAt":"2019-01-24T19:01:36","Actor":"steveharter","Number":"34813","RawContent":null,"Title":"Remove S.Memory and S.R.CS.Unsafe dependencies from MetadataLoadContext","State":"open","Body":"The netstandard build of MetadataLoadContext on netfx is causing issues due to a System.Runtime.CompilerServices.Unsafe dependency, so the dependency is removed here.\r\n\r\n(the original commit also removed System.Memory but was likely unnecessary, so now its just .Unsafe).","Url":"https://github.com/dotnet/corefx/pull/34813","RelatedDescription":"Open PR \"Remove S.Memory and S.R.CS.Unsafe dependencies from MetadataLoadContext\" (#34813)"},{"Id":"402811243","IsPullRequest":false,"CreatedAt":"2019-01-24T17:15:27","Actor":"dotnet-mc-bot","Number":"34809","RawContent":null,"Title":"Test failure: System.Net.Sockets.Tests.SocketOptionNameTest/MulticastInterface_Set_AnyInterface_Succeeds","State":"open","Body":"Opened on behalf of @danmosemsft\n\nThe test `System.Net.Sockets.Tests.SocketOptionNameTest/MulticastInterface_Set_AnyInterface_Succeeds` has failed.\n\nFailure Message:\n```\nWaiting for received data timed out\nExpected: True\nActual:   False\n```\n\nStack Trace:\n```\n   at System.Net.Sockets.Tests.SocketOptionNameTest.MulticastInterface_Set_Helper(Int32 interfaceIndex) in /__w/1/s/src/System.Net.Sockets/tests/FunctionalTests/SocketOptionNameTest.cs:line 132\n   at System.Net.Sockets.Tests.SocketOptionNameTest.MulticastInterface_Set_AnyInterface_Succeeds() in /__w/1/s/src/System.Net.Sockets/tests/FunctionalTests/SocketOptionNameTest.cs:line 91\n--- End of stack trace from previous location where exception was thrown ---\n```\n\nBuild : 3.0 - 20190124.1 (Core Tests)\nFailing configurations:\n- RedHat.6.Amd64-x64\n  - Release\n","Url":"https://github.com/dotnet/corefx/issues/34809","RelatedDescription":"Open issue \"Test failure: System.Net.Sockets.Tests.SocketOptionNameTest/MulticastInterface_Set_AnyInterface_Succeeds\" (#34809)"},{"Id":"402772559","IsPullRequest":true,"CreatedAt":"2019-01-24T15:53:21","Actor":"filipnavara","Number":"34806","RawContent":null,"Title":"[System.Native] Add SystemNative_GetCpuUtilization","State":"open","Body":"Moving implementation from CoreRT to allow sharing of thread pool code (https://github.com/dotnet/corert/pull/6880).\r\n\r\nOriginal code: https://github.com/dotnet/corert/blob/3f926ac91133dd618dcf6821b63782d1de19a72c/src/Native/System.Private.CoreLib.Native/pal_time.cpp#L146-L228","Url":"https://github.com/dotnet/corefx/pull/34806","RelatedDescription":"Open PR \"[System.Native] Add SystemNative_GetCpuUtilization\" (#34806)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"403002781","IsPullRequest":true,"CreatedAt":"2019-01-25T04:36:50","Actor":"chborl","Number":"32772","RawContent":null,"Title":"Preserve Extern modifier when running code cleanup","State":"open","Body":"Fixes #29561 \r\n\r\noutstanding issues:\r\n\r\n- [ ] Fix the formatting of the line after the field declaration\r\n\r\n- [ ] Add tests for other modifiers\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/32772","RelatedDescription":"Open PR \"Preserve Extern modifier when running code cleanup\" (#32772)"},{"Id":"402948515","IsPullRequest":true,"CreatedAt":"2019-01-25T04:30:05","Actor":"dotnet-bot","Number":"32762","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32762","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32762)"},{"Id":"402948573","IsPullRequest":true,"CreatedAt":"2019-01-25T03:15:08","Actor":"dotnet-bot","Number":"32765","RawContent":null,"Title":"Merge master to features/NullableDogfood","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32765","RelatedDescription":"Closed or merged PR \"Merge master to features/NullableDogfood\" (#32765)"},{"Id":"402948426","IsPullRequest":true,"CreatedAt":"2019-01-25T03:13:52","Actor":"dotnet-bot","Number":"32760","RawContent":null,"Title":"Merge master to dev16.1-preview1 ","State":"closed","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32760","RelatedDescription":"Closed or merged PR \"Merge master to dev16.1-preview1 \" (#32760)"},{"Id":"402948553","IsPullRequest":true,"CreatedAt":"2019-01-25T03:13:48","Actor":"dotnet-bot","Number":"32764","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32764","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#32764)"},{"Id":"402948462","IsPullRequest":true,"CreatedAt":"2019-01-25T03:00:13","Actor":"dotnet-bot","Number":"32761","RawContent":null,"Title":"Merge master-vs-deps to dev16.1-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32761","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32761)"},{"Id":"402918867","IsPullRequest":true,"CreatedAt":"2019-01-25T02:04:19","Actor":"mavasani","Number":"32758","RawContent":null,"Title":"Gracefully handle documented exceptions from AssemblyMetadata.GetModules","State":"closed","Body":"We have done so in past for other callsites to this API, such as #17687. This change does the same for the remaining two callsites in the IDE layer.\r\n\r\nFixes VSO Watson [234447](https://devdiv.visualstudio.com/DevDiv/_queries/edit/234447): _CLR_EXCEPTION_System.BadImageFormatException_8007000b_Microsoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.PEModule.get_ReferencedAssemblies_","Url":"https://github.com/dotnet/roslyn/pull/32758","RelatedDescription":"Closed or merged PR \"Gracefully handle documented exceptions from AssemblyMetadata.GetModules\" (#32758)"},{"Id":"402972875","IsPullRequest":true,"CreatedAt":"2019-01-25T01:57:36","Actor":"gafter","Number":"32771","RawContent":null,"Title":"Merge master into features/nested-stackalloc","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32771","RelatedDescription":"Open PR \"Merge master into features/nested-stackalloc\" (#32771)"},{"Id":"402972851","IsPullRequest":false,"CreatedAt":"2019-01-25T01:57:28","Actor":"JoeRobich","Number":"32770","RawContent":null,"Title":"Support additive classifications in ClassifiedSpans and TaggedText ","State":"open","Body":"Currently ClassifiedSpans and TaggedText can be tagged with a single classification. Now that we added the additive classification Static Symbol the same span or text could have two classifications. We should handle this gracefully.","Url":"https://github.com/dotnet/roslyn/issues/32770","RelatedDescription":"Open issue \"Support additive classifications in ClassifiedSpans and TaggedText \" (#32770)"},{"Id":"402863807","IsPullRequest":true,"CreatedAt":"2019-01-25T01:43:30","Actor":"mavasani","Number":"32748","RawContent":null,"Title":"Tweak bail out approach from unused member analyzer for struct layout types","State":"closed","Body":"Current implementation bailed out in symbol start action, which caused both analysis and reporting to be skipped in a type with StructLayout attribute. New implementation bails out in symbol end action, so we only skip reporting not analysis.\r\n\r\nFixes #32727","Url":"https://github.com/dotnet/roslyn/pull/32748","RelatedDescription":"Closed or merged PR \"Tweak bail out approach from unused member analyzer for struct layout types\" (#32748)"},{"Id":"402969800","IsPullRequest":true,"CreatedAt":"2019-01-25T01:41:26","Actor":"tmat","Number":"32769","RawContent":null,"Title":"Display compiler generated members in raw view.","State":"open","Body":"The debugger has an option \r\n![image](https://user-images.githubusercontent.com/41759/51713097-c2f02280-1fe5-11e9-8e84-0de910ef5906.png)\r\n\r\nwhich is also available via `raw` modifier (`<expr>, raw`). \r\n\r\nThe meaning for managed objects right now is to disable using debugger visualizer attributes on the object instance. For example, an instance of `Dictionary<string,string>` is displayed like so:\r\n\r\n![image](https://user-images.githubusercontent.com/41759/51713561-35adcd80-1fe7-11e9-90f5-ceed912570e7.png)\r\n\r\nThis change shows all compiler-generated members in this view.\r\n\r\nAn iterator looks like so:\r\n![image](https://user-images.githubusercontent.com/41759/51713697-b7056000-1fe7-11e9-807a-4bb690e37177.png)\r\n\r\nAn async state machine like so:\r\n![image](https://user-images.githubusercontent.com/41759/51717880-904f2580-1ff7-11e9-929f-fbfabdb84c0a.png)\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/22428.\r\n","Url":"https://github.com/dotnet/roslyn/pull/32769","RelatedDescription":"Open PR \"Display compiler generated members in raw view.\" (#32769)"},{"Id":"402948532","IsPullRequest":true,"CreatedAt":"2019-01-25T01:30:11","Actor":"dotnet-bot","Number":"32763","RawContent":null,"Title":"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/dev16.1-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32763","RelatedDescription":"Closed or merged PR \"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps\" (#32763)"},{"Id":"402964399","IsPullRequest":false,"CreatedAt":"2019-01-25T01:14:52","Actor":"ericharding","Number":"32768","RawContent":null,"Title":"Crash Visual Studio 2017 15.9.5 - NotImplementedException","State":"open","Body":"Visual Studio 15.9.5\r\n\r\n**Steps to Reproduce**:\r\n\r\nCreate a new dotnet core project (dotnet new console)\r\n\r\n0. Create a new file \"foo.cs\"\r\n\r\n```\r\nnamespace repro {\r\n   public class Foo {\r\n      public string name;\r\n   }\r\n}\r\n```\r\n\r\n1. Add this to \"Program.cs\"\r\n\r\n```\r\nusing System;\r\nusing Bar = System.ValueTuple<string, uint>;\r\n\r\nnamespace repro {\r\n   class Program {\r\n      static void Main(string[] args) {\r\n         Bar b = (\"hello world\", 4);\r\n         Console.WriteLine(b.Item1);\r\n      }\r\n   }\r\n}\r\n```\r\n\r\n2. Rename the Bar in Program.cs to Foo. Open the \"quick actions\" menu and choose \"Raname 'Bar' to 'Foo'\"\r\n3. Visual studio exits and restarts\r\n\r\n**Expected Behavior**:\r\n\r\nProbably a dialog telling me this is a bad idea.\r\n\r\n**Actual Behavior**:\r\n\r\n\r\nCLR: Managed code called FailFast, saying \"System.NotImplementedException: The method or operation is not implemented.\r\nat Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.VisitSimpleName(SimpleNameSyntax rewrittenSimpleName, SimpleNameSyntax originalSimpleName)\r\nat Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.VisitIdentifierName(IdentifierNameSyntax node)\r\nat Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitVariableDeclaration(VariableDeclarationSyntax node) at Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor)\r\nat Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\nat Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)\r\nat Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)\r\nat Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expand(SyntaxNode node, SemanticModel semanticModel, SyntaxAnnotation annotationForReplacedAliasIdentifier, Func2 expandInsideNode, Boolean expandParameter, CancellationToken cancellationToken)\r\nat Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Complexify(SyntaxNode originalNode, SyntaxNode newNode)\r\nat Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(SyntaxNode node)\r\nat Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\nat Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList1 list) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(BlockSyntax node) at Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor)\r\nat Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\nat Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(SyntaxNode node)\r\nat Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMethodDeclaration(MethodDeclarationSyntax node)\r\nat Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList1 list)\r\nat Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitClassDeclaration(ClassDeclarationSyntax node)\r\nat Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList1 list)\r\nat Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)\r\nat Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor1 visitor) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(SyntaxNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node) at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList1 list)\r\nat Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCompilationUnit(CompilationUnitSyntax node)\r\nat Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\nat Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\nat Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.RenameRewriter.Visit(SyntaxNode node)\r\nat Microsoft.CodeAnalysis.CSharp.Rename.CSharpRenameConflictLanguageService.AnnotateAndRename(RenameRewriterParameters parameters)\r\nat Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.Session.<AnnotateAndRename_WorkerAsync>d__26.MoveNext()\"","Url":"https://github.com/dotnet/roslyn/issues/32768","RelatedDescription":"Open issue \"Crash Visual Studio 2017 15.9.5 - NotImplementedException\" (#32768)"},{"Id":"402959764","IsPullRequest":false,"CreatedAt":"2019-01-25T00:51:43","Actor":"jcouv","Number":"32767","RawContent":null,"Title":"`Dispose` extension methods should not even be considered in pattern-based disposal","State":"open","Body":"Currently, we bind `x.Dispose()` and reject the result if it is an extension. But we should not even consider extensions, to avoid diagnostics about ambiguities.\r\n\r\n```C#\r\n        [Fact]\r\n        public void UsingPatternScopedExtensionMethodTest()\r\n        {\r\n            var source = @\"\r\nref struct S1\r\n{\r\n}\r\n\r\nnamespace N1\r\n{\r\n    static class C2 \r\n    {\r\n        public static void Dispose(this S1 s1) { }\r\n    }\r\n}\r\n\r\nnamespace N2\r\n{\r\n    static class C3 \r\n    {\r\n        public static void Dispose(this S1 s1) { }\r\n    }\r\n}\r\n\r\nnamespace N3\r\n{\r\n    static class C4 \r\n    {\r\n        public static int Dispose(this S1 s1) { return 0; }\r\n    }\r\n}\r\n\r\n\r\nnamespace N4\r\n{\r\n    partial class C5\r\n    {\r\n        static void M()\r\n        {\r\n            using (S1 s = new S1()) // error 1\r\n            {\r\n            }\r\n        }\r\n    }\r\n}\r\nnamespace N4\r\n{\r\n    using N1;\r\n    partial class C5\r\n    {\r\n        static void M2()\r\n        {\r\n            using (S1 s = new S1()) // error 2\r\n            {\r\n            }\r\n        }\r\n    }\r\n}\r\nnamespace N4\r\n{\r\n    using N3;\r\n    partial class C5\r\n    {\r\n        static void M3()\r\n        {\r\n            using (S1 s = new S1()) // error 3\r\n            {\r\n            }\r\n        }\r\n    }\r\n}\r\nnamespace N4\r\n{\r\n    using N1;\r\n    using N3;\r\n    partial class C5\r\n    {\r\n        static void M4()\r\n        {\r\n            using (S1 s = new S1())  // error 4\r\n            {\r\n            }\r\n        }\r\n    }\r\n}\r\nnamespace N4\r\n{\r\n    using N3;\r\n    namespace N5\r\n    {\r\n        partial class C5\r\n        {\r\n            static void M5()\r\n            {\r\n                using (S1 s = new S1())  // error 5 \r\n                {\r\n                }\r\n            }\r\n        }\r\n\r\n        namespace N6\r\n        {\r\n            using N1;\r\n            partial class C5\r\n            {\r\n                static void M6()\r\n                {\r\n                    using (S1 s = new S1())  // error 6 \r\n                    { \r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\";\r\n            // Extension methods should just be ignored, rather than rejected after-the-fact. So there should be no error about ambiguities\r\n\r\n            CreateCompilation(source).VerifyDiagnostics(\r\n                // (37,20): error CS1674: 'S1': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.\r\n                //             using (S1 s = new S1()) // error 1\r\n                Diagnostic(ErrorCode.ERR_NoConvToIDisp, \"S1 s = new S1()\").WithArguments(\"S1\").WithLocation(37, 20),\r\n                // (50,20): error CS1674: 'S1': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.\r\n                //             using (S1 s = new S1()) // error 2\r\n                Diagnostic(ErrorCode.ERR_NoConvToIDisp, \"S1 s = new S1()\").WithArguments(\"S1\").WithLocation(50, 20),\r\n                // (63,20): error CS1674: 'S1': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.\r\n                //             using (S1 s = new S1()) // error 3\r\n                Diagnostic(ErrorCode.ERR_NoConvToIDisp, \"S1 s = new S1()\").WithArguments(\"S1\").WithLocation(63, 20),\r\n                // (77,20): error CS0121: The call is ambiguous between the following methods or properties: 'N1.C2.Dispose(S1)' and 'N3.C4.Dispose(S1)'\r\n                //             using (S1 s = new S1())  // error 4\r\n                Diagnostic(ErrorCode.ERR_AmbigCall, \"S1 s = new S1()\").WithArguments(\"N1.C2.Dispose(S1)\", \"N3.C4.Dispose(S1)\").WithLocation(77, 20),\r\n                // (77,20): error CS1674: 'S1': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.\r\n                //             using (S1 s = new S1())  // error 4\r\n                Diagnostic(ErrorCode.ERR_NoConvToIDisp, \"S1 s = new S1()\").WithArguments(\"S1\").WithLocation(77, 20),\r\n                // (92,24): error CS1674: 'S1': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.\r\n                //                 using (S1 s = new S1())  // error 5 \r\n                Diagnostic(ErrorCode.ERR_NoConvToIDisp, \"S1 s = new S1()\").WithArguments(\"S1\").WithLocation(92, 24),\r\n                // (105,28): error CS1674: 'S1': type used in a using statement must be implicitly convertible to 'System.IDisposable' or implement a suitable 'Dispose' method.\r\n                //                     using (S1 s = new S1())  // error 6 \r\n                Diagnostic(ErrorCode.ERR_NoConvToIDisp, \"S1 s = new S1()\").WithArguments(\"S1\").WithLocation(105, 28)\r\n                );\r\n        }\r\n```","Url":"https://github.com/dotnet/roslyn/issues/32767","RelatedDescription":"Open issue \"`Dispose` extension methods should not even be considered in pattern-based disposal\" (#32767)"},{"Id":"402886178","IsPullRequest":true,"CreatedAt":"2019-01-25T00:48:45","Actor":"jasonmalinowski","Number":"32750","RawContent":null,"Title":"Fix cast exception in AbstractProject.RemoveDocument","State":"closed","Body":"AbstractProject.RemoveDocument was trying to support removing ContainedDocuments, but had a misplaced cast which negated the whole attempt.\r\n\r\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/776782\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/776782\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nZero: just moving a cast later. In the broken case, maybe there's a different bug lurking but it won't be worse than what we have. In the existing functioning cases, nothing changes.\r\n\r\n### Performance impact\r\n\r\nNone.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nUnsure. The buggy code was put into Preview 1; why we're seeing it now is unclear.\r\n\r\n### Root cause analysis\r\n\r\nIt seems TypeScript has some timing-dependent code where _sometimes_ they try to remove a contained document with AbstractProject.RemoveDocument(). Clearly we tried handling that, but didn't do it correctly. As best I can remember, I might have hit this once in testing but couldn't figure out a repro myself; I \"fixed\" the code regardless but clearly didn't hit the repro scenario again to observe it was still broken.\r\n\r\n### How was the bug found?\r\n\r\nDDRITs.\r\n\r\n</details>","Url":"https://github.com/dotnet/roslyn/pull/32750","RelatedDescription":"Closed or merged PR \"Fix cast exception in AbstractProject.RemoveDocument\" (#32750)"},{"Id":"402948762","IsPullRequest":true,"CreatedAt":"2019-01-25T00:01:39","Actor":"sharwell","Number":"32766","RawContent":null,"Title":"Localize regex tests","State":"open","Body":"/cc @CyrusNajmabadi @mavasani @tmeschter ","Url":"https://github.com/dotnet/roslyn/pull/32766","RelatedDescription":"Open PR \"Localize regex tests\" (#32766)"},{"Id":"402945583","IsPullRequest":true,"CreatedAt":"2019-01-24T23:47:52","Actor":"ryzngard","Number":"32759","RawContent":null,"Title":"UseLocalFunction should not report diagnostics on invalid decleration code","State":"open","Body":"If the declaration contains invalid code the analyzer should not report any fixes, they are not guaranteed to be correct. \r\n\r\n\r\nFixes #29793 ","Url":"https://github.com/dotnet/roslyn/pull/32759","RelatedDescription":"Open PR \"UseLocalFunction should not report diagnostics on invalid decleration code\" (#32759)"},{"Id":"402916530","IsPullRequest":false,"CreatedAt":"2019-01-24T22:41:20","Actor":"meziantou","Number":"32757","RawContent":null,"Title":"Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException'","State":"closed","Body":"**Version Used**: Visual Studio 2019 preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\nOpen the solution of the repo https://github.com/meziantou/Meziantou.Framework\r\n\r\n````\r\nAnalyzer Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\tDetail Description\r\nWarning\tAD0001\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.\tMeziantou.Framework.CodeDom (net461)\t\t1\tActive\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:\r\n'Exception occurred with following context:\r\nCompilation: Meziantou.Framework.CodeDom\r\nISymbol: Write (Method)\r\n\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.OnWriteReferenceFound(ISymbol symbol, IOperation operation, Boolean maybeWritten)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.OnReferenceFound(ISymbol symbol, IOperation operation)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.VisitDeclarationPattern(IDeclarationPatternOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.DeclarationPatternOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitPatternCaseClause(IPatternCaseClauseOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.BasePatternCaseClauseOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitchCase(ISwitchCaseOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.BaseSwitchCaseOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitSwitch(ISwitchOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.BaseSwitchOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitBlock(IBlockOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.BaseBlockOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.Visit(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.AnalyzeOperationsAndUpdateData(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Run(IOperation rootOperation, ISymbol owningSymbol, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeUnusedValueAssignments(OperationBlockAnalysisContext context, Boolean isComputingUnusedParams, PooledHashSet`1 symbolUsageResultsBuilder, Boolean& hasBlockWithAllUsedSymbolWrites)\r\n   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.<>c__55`2.<ExecuteBlockActions>b__55_1(ValueTuple`2 data)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)\r\n````","Url":"https://github.com/dotnet/roslyn/issues/32757","RelatedDescription":"Closed issue \"Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException'\" (#32757)"},{"Id":"402908501","IsPullRequest":false,"CreatedAt":"2019-01-24T21:43:58","Actor":"gafter","Number":"32756","RawContent":null,"Title":"Tuples in public API of IRecursivePatternOperation","State":"open","Body":"`IRecursivePatternOperation` contains\r\n\r\n``` c#\r\n        ImmutableArray<(ISymbol, IPatternOperation)> PropertySubpatterns { get; }\r\n```\r\n\r\nShould we have tuples in our public APIs, or should we use a struct defined for just this purpose?\r\n","Url":"https://github.com/dotnet/roslyn/issues/32756","RelatedDescription":"Open issue \"Tuples in public API of IRecursivePatternOperation\" (#32756)"},{"Id":"402906673","IsPullRequest":true,"CreatedAt":"2019-01-24T21:38:49","Actor":"gafter","Number":"32755","RawContent":null,"Title":"Remove spurious hidden sequence points for switch expression","State":"open","Body":"Fixes #32370\r\n\r\nFix parsing error recovery for incomplete switch expression\r\nFixes #32749 \r\n\r\n@dotnet/roslyn-compiler May I please have a couple of reviews?","Url":"https://github.com/dotnet/roslyn/pull/32755","RelatedDescription":"Open PR \"Remove spurious hidden sequence points for switch expression\" (#32755)"},{"Id":"402906634","IsPullRequest":true,"CreatedAt":"2019-01-24T21:38:44","Actor":"cston","Number":"32754","RawContent":null,"Title":"Allow locals, parameters, range variables inside a lambda to shadow names outside the lambda","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32754","RelatedDescription":"Open PR \"Allow locals, parameters, range variables inside a lambda to shadow names outside the lambda\" (#32754)"},{"Id":"402898617","IsPullRequest":false,"CreatedAt":"2019-01-24T21:15:32","Actor":"ryzngard","Number":"32753","RawContent":null,"Title":"GetLocation and FindNode are not always reliable","State":"open","Body":"Context: \r\n\r\n[PR Discussion](https://github.com/dotnet/roslyn/pull/32685#discussion_r250021980)\r\n#29793 from the original bug\r\n\r\nOur messaging for roundtrip nodes for analyzers has been\r\n\r\n>if you want to find a node between analysis and fixing, then use AdditionalLocaitons, and just add someNode.GetLocation() to it. You can then find that later with someLocation.FindNode().\r\n\r\nThis doesn't always hold true if there is ignored trivia contained in a span. Currently [GetLocation](http://source.roslyn.io/#Microsoft.CodeAnalysis/Syntax/SyntaxNode.cs,111ac3d15ffccc76) uses the `Span` property, while  [FindNode](http://source.roslyn.io/#Microsoft.CodeAnalysis/Syntax/SyntaxNode.cs,1973a2affa06beb8) uses `FullWidth` and `FullSpan` properties to evaluate spans and break ties. \r\n\r\nA proposed change is to add a `SourceFullSpan` property to [Location](http://source.roslyn.io/#Microsoft.CodeAnalysis/Diagnostic/Location.cs,ad289cd0d5b2b950) \r\n\r\n```C#\r\npublic virtual TextSpan SourceFullSpan => SourceSpan;\r\n``` \r\n\r\nThe above would be the change to the abstract base, where implementations can use whatever they see fit. For `SourceLocation` that would mean storing the `FullSpan` property. \r\n\r\nThen the implementation for `Location.FindNode` can use the `SourceFullSpan` property","Url":"https://github.com/dotnet/roslyn/issues/32753","RelatedDescription":"Open issue \"GetLocation and FindNode are not always reliable\" (#32753)"},{"Id":"402894818","IsPullRequest":true,"CreatedAt":"2019-01-24T21:04:30","Actor":"mavasani","Number":"32752","RawContent":null,"Title":"Account for both parts of partial methods while computing dependent s…","State":"open","Body":"…ymbols for symbol end action\r\n\r\nWe invoke symbol end actions for named type symbols after symbol callbacks have been made for all its member symbols. However, we did not account for both parts of partial methods, which means we would end up with a symbol end callback for a named type prior to the partial implementation part being analyzed. This caused the remove unused member analyzer in IDE to incorrectly flag private members referenced in partial methods.\r\n\r\nFixes #32702","Url":"https://github.com/dotnet/roslyn/pull/32752","RelatedDescription":"Open PR \"Account for both parts of partial methods while computing dependent s…\" (#32752)"},{"Id":"402893007","IsPullRequest":true,"CreatedAt":"2019-01-24T20:59:16","Actor":"ryzngard","Number":"32751","RawContent":null,"Title":"Push package querying to another thread","State":"open","Body":"Once the DteProject is retrieved, the work to get installed packages can be done off the UI thread. \r\n\r\nThis will help reduce hanging from long running NuGet  commands. \r\n\r\nFixes #20101 ","Url":"https://github.com/dotnet/roslyn/pull/32751","RelatedDescription":"Open PR \"Push package querying to another thread\" (#32751)"},{"Id":"402875283","IsPullRequest":false,"CreatedAt":"2019-01-24T20:08:10","Actor":"gafter","Number":"32749","RawContent":null,"Title":"Compiler crash on incomplete switch expression","State":"open","Body":"Parsing the following expression causes the parser (or compiler) to crash with an out-of-memory exception\r\n\r\n``` c#\r\n(e switch {)\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/32749","RelatedDescription":"Open issue \"Compiler crash on incomplete switch expression\" (#32749)"},{"Id":"402860571","IsPullRequest":true,"CreatedAt":"2019-01-24T19:27:31","Actor":"chsienki","Number":"32747","RawContent":null,"Title":"Assert when emitting a box IL opcode for ref like type","State":"open","Body":"Ensure we don't accidentally emit invalid code due to bad lowering.","Url":"https://github.com/dotnet/roslyn/pull/32747","RelatedDescription":"Open PR \"Assert when emitting a box IL opcode for ref like type\" (#32747)"},{"Id":"402848874","IsPullRequest":false,"CreatedAt":"2019-01-24T18:55:53","Actor":"AlekseyTs","Number":"32746","RawContent":null,"Title":"It looks like TypeSymbolExtensions.IsSameType(t1 As TypeSymbol, t2 As TypeSymbol, compareKind As TypeCompareKind) lacks proper handling for PointerTypeSymbol","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/32746","RelatedDescription":"Open issue \"It looks like TypeSymbolExtensions.IsSameType(t1 As TypeSymbol, t2 As TypeSymbol, compareKind As TypeCompareKind) lacks proper handling for PointerTypeSymbol\" (#32746)"},{"Id":"402843573","IsPullRequest":false,"CreatedAt":"2019-01-24T18:41:30","Actor":"cston","Number":"32745","RawContent":null,"Title":"Disable nullable analysis for generated code","State":"open","Body":"Disable nullable analysis for generated code unless the file contains explicit `#nullable enable`.","Url":"https://github.com/dotnet/roslyn/issues/32745","RelatedDescription":"Open issue \"Disable nullable analysis for generated code\" (#32745)"},{"Id":"402837968","IsPullRequest":true,"CreatedAt":"2019-01-24T18:26:13","Actor":"dibarbet","Number":"32744","RawContent":null,"Title":"Issue 32480 - Don't suggest adding braces with interceding compiler directive","State":"open","Body":"For https://github.com/dotnet/roslyn/issues/32480\r\n\r\nAdded call to helper to determine if there are interceding compiler directives in add braces analyzer.","Url":"https://github.com/dotnet/roslyn/pull/32744","RelatedDescription":"Open PR \"Issue 32480 - Don't suggest adding braces with interceding compiler directive\" (#32744)"},{"Id":"402836872","IsPullRequest":false,"CreatedAt":"2019-01-24T18:23:13","Actor":"AlekseyTs","Number":"32743","RawContent":null,"Title":"Finalize the shape of the PragmaWarningDirectiveTriviaSyntax node around NullableKeyword","State":"open","Body":"Right now the shape of the node is following:\r\n```\r\n  <Node Name=\"PragmaWarningDirectiveTriviaSyntax\" Base=\"DirectiveTriviaSyntax\">\r\n    <Kind Name=\"PragmaWarningDirectiveTrivia\"/>\r\n    <Field Name=\"HashToken\" Type=\"SyntaxToken\" Override=\"true\">\r\n      <Kind Name=\"HashToken\"/>\r\n    </Field>\r\n    <Field Name=\"PragmaKeyword\" Type=\"SyntaxToken\">\r\n      <Kind Name=\"PragmaKeyword\"/>\r\n    </Field>\r\n    <Field Name=\"WarningKeyword\" Type=\"SyntaxToken\">\r\n      <Kind Name=\"WarningKeyword\"/>\r\n    </Field>\r\n    <Field Name=\"DisableOrRestoreKeyword\" Type=\"SyntaxToken\">\r\n      <Kind Name=\"DisableKeyword\"/>\r\n      <Kind Name=\"RestoreKeyword\"/>\r\n      <Kind Name=\"EnableKeyword\"/>\r\n      <Kind Name=\"SafeOnlyKeyword\"/>\r\n    </Field>\r\n    <Field Name=\"NullableKeyword\" Type=\"SyntaxToken\" Optional=\"true\">\r\n      <Kind Name=\"NullableKeyword\"/>\r\n    </Field>\r\n    <Field Name=\"ErrorCodes\" Type=\"SeparatedSyntaxList&lt;ExpressionSyntax&gt;\"/>\r\n    <Field Name=\"EndOfDirectiveToken\" Type=\"SyntaxToken\" Override=\"true\">\r\n      <Kind Name=\"EndOfDirectiveToken\"/>\r\n    </Field>\r\n    <Field Name=\"IsActive\" Type=\"bool\" Override=\"true\"/>\r\n  </Node>\r\n```\r\n\r\nDuring code review a suggestion was made to generalize the name of the NullableKeyword property to be something like GroupKeyword - a keyword designating a group of warnings. Right now the only token that can be used in that place is NullableKeyword, but we will be able to expand the set if/when new groups will be added.","Url":"https://github.com/dotnet/roslyn/issues/32743","RelatedDescription":"Open issue \"Finalize the shape of the PragmaWarningDirectiveTriviaSyntax node around NullableKeyword\" (#32743)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"402984073","IsPullRequest":true,"CreatedAt":"2019-01-25T04:03:09","Actor":"Dotnet-GitSync-Bot","Number":"6890","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6890","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6890)"},{"Id":"402986311","IsPullRequest":false,"CreatedAt":"2019-01-25T03:04:40","Actor":"xiaotie","Number":"6891","RawContent":null,"Title":"Some unexpected behavior using timer with comdlg","State":"open","Body":"There are some unexpected behavior when use system timer in corert, but it is ok in dotnet core:\r\n\r\n```\r\n        private static System.Timers.Timer timer;\r\n\r\n        public static void Test()\r\n        {\r\n            timer = new System.Timers.Timer();\r\n            timer.Interval = 1000;\r\n            timer.Start();  // It is ok in dotnet core native when comment this line \r\n\r\n            for (int i = 0; i < 100; i++)\r\n                new FileDialog().RunDialog();\r\n        }\r\n```\r\n\r\nHere is the full code:  [https://github.com/xiaotie/DotNetNativeTimerBug](https://github.com/xiaotie/DotNetNativeTimerBug)","Url":"https://github.com/dotnet/corert/issues/6891","RelatedDescription":"Open issue \"Some unexpected behavior using timer with comdlg\" (#6891)"},{"Id":"402962363","IsPullRequest":true,"CreatedAt":"2019-01-25T02:14:29","Actor":"Dotnet-GitSync-Bot","Number":"6889","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @jkotas","Url":"https://github.com/dotnet/corert/pull/6889","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6889)"},{"Id":"402941757","IsPullRequest":true,"CreatedAt":"2019-01-25T01:03:07","Actor":"Dotnet-GitSync-Bot","Number":"6888","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @tannergooding","Url":"https://github.com/dotnet/corert/pull/6888","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6888)"},{"Id":"402704885","IsPullRequest":true,"CreatedAt":"2019-01-24T23:27:48","Actor":"Dotnet-GitSync-Bot","Number":"6879","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6879","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6879)"},{"Id":"402462972","IsPullRequest":true,"CreatedAt":"2019-01-24T22:50:38","Actor":"trylek","Number":"6874","RawContent":null,"Title":"Basic infra support for running local CPAOT GC stress tests","State":"closed","Body":"This change basically introduces a new option /gcstresslevel\r\nin tests\\runtest.cmd akin to a similar option in the CoreCLR-specific\r\nscript. I have also bumped up the timeouts to 1 hour as CPAOT\r\nTop200 test suite is currently timing out in ILC compilation of\r\n1~2 tests (typically the bigvtbl tests).\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6874","RelatedDescription":"Closed or merged PR \"Basic infra support for running local CPAOT GC stress tests\" (#6874)"},{"Id":"402898840","IsPullRequest":true,"CreatedAt":"2019-01-24T22:47:05","Actor":"filipnavara","Number":"6887","RawContent":null,"Title":"Fix argument checks in ThreadPool.RegisterWaitForSingleObject.","State":"closed","Body":"Extracted from #6880. /cc @jkotas \r\n\r\nI will submit the unit tests to CoreFX soon.","Url":"https://github.com/dotnet/corert/pull/6887","RelatedDescription":"Closed or merged PR \"Fix argument checks in ThreadPool.RegisterWaitForSingleObject.\" (#6887)"},{"Id":"402779587","IsPullRequest":false,"CreatedAt":"2019-01-24T16:33:48","Actor":"letmaik","Number":"6885","RawContent":null,"Title":"Cannot open input file 'kernel32.lib'","State":"closed","Body":"I'm using the x64 Native Tools Command Prompt for VS 2017 on Windows 10.\r\nWhen trying to build the NativeLibrary example as shared library I get the following error:\r\n```\r\n> dotnet publish /p:NativeLib=Shared -r win-x64 -c Release\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 69.69 ms for C:\\Users\\...\\git\\corert\\samples\\NativeLibrary\\NativeLibrary.csproj.\r\n  NativeLibrary -> C:\\Users\\marieche\\git\\corert\\samples\\NativeLibrary\\bin\\x64\\Release\\netstandard2.0\\win-x64\\NativeLibrary.dll\r\n  Generating native code\r\nLINK : fatal error LNK1181: cannot open input file 'kernel32.lib' [C:\\Users\\...\\git\\corert\\samples\\NativeLibrary\\NativeLibrary.csproj]\r\nC:\\Users\\...\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27323-02\\build\\Microsoft.NETCore.Native.targets(305,5): error MSB3073: The command \"link  @\"obj\\x64\\Release\\netstandard2.0\\win-x64\\native\\link.rsp\"\" exited with code 1181. [C:\\Users\\...\\git\\corert\\samples\\NativeLibrary\\NativeLibrary.csproj]\r\n```\r\n\r\nIf it helps, here are my environment variables:\r\n```\r\nALLUSERSPROFILE=C:\\ProgramData\r\nAPPDATA=C:\\Users\\...\\AppData\\Roaming\r\nCommandPromptType=Native\r\nCommonProgramFiles=C:\\Program Files\\Common Files\r\nCommonProgramFiles(x86)=C:\\Program Files (x86)\\Common Files\r\nCommonProgramW6432=C:\\Program Files\\Common Files\r\nComSpec=C:\\WINDOWS\\system32\\cmd.exe\r\nDevEnvDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\\r\nDriverData=C:\\Windows\\System32\\Drivers\\DriverData\r\nFramework40Version=v4.0\r\nFrameworkDir=C:\\Windows\\Microsoft.NET\\Framework64\\\r\nFrameworkDir64=C:\\Windows\\Microsoft.NET\\Framework64\\\r\nFrameworkVersion=v4.0.30319\r\nFrameworkVersion64=v4.0.30319\r\nFSHARPINSTALLDIR=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\FSharp\\\r\nHOMEDRIVE=C:\r\nHOMEPATH=\\Users\\...\r\nINCLUDE=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\include;C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.6.1\\include\\um;\r\nLIB=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x64;C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.6.1\\lib\\um\\x64;\r\nLIBPATH=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x86\\store\\references;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319;\r\nLOCALAPPDATA=C:\\Users\\...\\AppData\\Local\r\nNETFXSDKDir=C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.6.1\\\r\nNUMBER_OF_PROCESSORS=4\r\nOS=Windows_NT\r\nPath=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\bin\\HostX64\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\VC\\VCPackages;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\3.1;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\bin\\Roslyn;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Performance Tools\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Performance Tools;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Common\\VSPerfCollectionTools\\\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Common\\VSPerfCollectionTools\\;C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6.1 Tools\\x64\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\FSharp\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\\\MSBuild\\15.0\\bin;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\;C:\\ProgramData\\DockerDesktop\\version-bin;C:\\Program Files\\Docker\\Docker\\Resources\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\CMake\\bin;C:\\Program Files\\dotnet\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\nodejs\\;C:\\Users\\...\\AppData\\Roaming\\local\\bin;C:\\Users\\...\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\...\\.dotnet\\tools;C:\\Program Files\\nuget;C:\\Users\\...\\AppData\\Roaming\\npm;C:\\Users\\...\\AppData\\Local\\Microsoft\\WindowsApps\r\nPATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\r\nPlatform=x64\r\nPROCESSOR_ARCHITECTURE=AMD64\r\nPROCESSOR_IDENTIFIER=Intel64 Family 6 Model 69 Stepping 1, GenuineIntel\r\nPROCESSOR_LEVEL=6\r\nPROCESSOR_REVISION=4501\r\nProgramData=C:\\ProgramData\r\nProgramFiles=C:\\Program Files\r\nProgramFiles(x86)=C:\\Program Files (x86)\r\nProgramW6432=C:\\Program Files\r\nPROMPT=$P$G\r\nPSModulePath=C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\r\nPUBLIC=C:\\Users\\Public\r\nSESSIONNAME=Console\r\nSystemDrive=C:\r\nSystemRoot=C:\\WINDOWS\r\nSYSTEMTYPE=slate\r\nTEMP=C:\\Users\\...\\AppData\\Local\\Temp\r\nTMP=C:\\Users\\...\\AppData\\Local\\Temp\r\nUniversalCRTSdkDir=C:\\Program Files (x86)\\Windows Kits\\10\\\r\nUSERNAME=...\r\nUSERPROFILE=C:\\Users\\...\r\nVCIDEInstallDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\VC\\\r\nVCINSTALLDIR=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\\r\nVCToolsInstallDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\\r\nVCToolsRedistDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Redist\\MSVC\\14.16.27012\\\r\nVCToolsVersion=14.16.27023\r\nVisualStudioVersion=15.0\r\nVS150COMNTOOLS=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\\r\nVSCMD_ARG_app_plat=Desktop\r\nVSCMD_ARG_HOST_ARCH=x64\r\nVSCMD_ARG_TGT_ARCH=x64\r\nVSCMD_VER=15.9.3\r\nVSINSTALLDIR=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\\r\nwindir=C:\\WINDOWS\r\nWindowsLibPath=References\\CommonConfiguration\\Neutral\r\nWindowsSDKLibVersion=winv6.3\\\r\nWindowsSDKVersion=\\\r\nWindowsSDK_ExecutablePath_x64=C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6.1 Tools\\x64\\\r\nWindowsSDK_ExecutablePath_x86=C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6.1 Tools\\\r\n__DOTNET_ADD_64BIT=1\r\n__DOTNET_PREFERRED_BITNESS=64\r\n__VSCMD_PREINIT_PATH=C:\\ProgramData\\DockerDesktop\\version-bin;C:\\Program Files\\Docker\\Docker\\Resources\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\CMake\\bin;C:\\Program Files\\dotnet\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\nodejs\\;C:\\Users\\...\\AppData\\Roaming\\local\\bin;C:\\Users\\...\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\...\\.dotnet\\tools;C:\\Program Files\\nuget;C:\\Users\\...\\AppData\\Roaming\\npm;C:\\Users\\...\\AppData\\Local\\Microsoft\\WindowsApps\r\n```\r\n(Note that I masked out my username)","Url":"https://github.com/dotnet/corert/issues/6885","RelatedDescription":"Closed issue \"Cannot open input file 'kernel32.lib'\" (#6885)"},{"Id":"402774927","IsPullRequest":false,"CreatedAt":"2019-01-24T16:00:35","Actor":"letmaik","Number":"6884","RawContent":null,"Title":"Update console build instructions","State":"closed","Body":"https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md#compiling-source-to-native-code-using-the-ilcompiler-you-built\r\n\r\nThe extra lines in the project template are described with \"Important: A few lines at the top and at the bottom are different from the default template - don't miss updating them!\". However, this seems to be outdates as none of the samples have them. E.g. https://github.com/dotnet/corert/blob/master/samples/HelloWorld/HelloWorld.csproj","Url":"https://github.com/dotnet/corert/issues/6884","RelatedDescription":"Closed issue \"Update console build instructions\" (#6884)"},{"Id":"402759347","IsPullRequest":true,"CreatedAt":"2019-01-24T15:26:00","Actor":"MichalStrehovsky","Number":"6883","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6883","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6883)"},{"Id":"402745564","IsPullRequest":true,"CreatedAt":"2019-01-24T15:25:01","Actor":"MichalStrehovsky","Number":"6882","RawContent":null,"Title":"Fix UWP VirtualAlloc import","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6882","RelatedDescription":"Closed or merged PR \"Fix UWP VirtualAlloc import\" (#6882)"},{"Id":"402723474","IsPullRequest":true,"CreatedAt":"2019-01-24T14:47:55","Actor":"MichalStrehovsky","Number":"6881","RawContent":null,"Title":"Make _reader not readonly","State":"closed","Body":"I was too eager on adding `readonly` in #6863. This breaks the desired semantics.","Url":"https://github.com/dotnet/corert/pull/6881","RelatedDescription":"Closed or merged PR \"Make _reader not readonly\" (#6881)"},{"Id":"402709942","IsPullRequest":true,"CreatedAt":"2019-01-24T13:36:05","Actor":"filipnavara","Number":"6880","RawContent":null,"Title":"WIP: Move portable thread pool implementation to shared partition","State":"open","Body":"@marek-safar This introduces ThreadPool implementation with the FeaturePortableThreadPool flag into the shared partition. It should be possible to use it as-is in Mono, but I didn't try to build it yet.","Url":"https://github.com/dotnet/corert/pull/6880","RelatedDescription":"Open PR \"WIP: Move portable thread pool implementation to shared partition\" (#6880)"},{"Id":"402524591","IsPullRequest":true,"CreatedAt":"2019-01-24T13:20:35","Actor":"Dotnet-GitSync-Bot","Number":"6876","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara @stephentoub","Url":"https://github.com/dotnet/corert/pull/6876","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6876)"},{"Id":"402689072","IsPullRequest":true,"CreatedAt":"2019-01-24T13:19:53","Actor":"MichalStrehovsky","Number":"6878","RawContent":null,"Title":"Fix ProjectN build break","State":"closed","Body":"Pull request #6862 added references to `EnableToETW` that doesn't exist. I guess this is a NOP?","Url":"https://github.com/dotnet/corert/pull/6878","RelatedDescription":"Closed or merged PR \"Fix ProjectN build break\" (#6878)"},{"Id":"402542711","IsPullRequest":true,"CreatedAt":"2019-01-24T13:19:31","Actor":"filipnavara","Number":"6877","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":" #6876 + build fix","Url":"https://github.com/dotnet/corert/pull/6877","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6877)"},{"Id":"402467443","IsPullRequest":true,"CreatedAt":"2019-01-24T06:18:48","Actor":"marek-safar","Number":"6875","RawContent":null,"Title":"Move IOCompletionCallback to shared partition","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6875","RelatedDescription":"Closed or merged PR \"Move IOCompletionCallback to shared partition\" (#6875)"},{"Id":"402427356","IsPullRequest":true,"CreatedAt":"2019-01-24T03:16:52","Actor":"Dotnet-GitSync-Bot","Number":"6873","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/6873","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6873)"},{"Id":"402387671","IsPullRequest":true,"CreatedAt":"2019-01-23T20:54:29","Actor":"Dotnet-GitSync-Bot","Number":"6872","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @alexk000","Url":"https://github.com/dotnet/corert/pull/6872","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6872)"},{"Id":"402283629","IsPullRequest":true,"CreatedAt":"2019-01-23T20:12:18","Actor":"MichalStrehovsky","Number":"6870","RawContent":null,"Title":"Finish ILCompiler.RyuJit cleanups","State":"closed","Body":"While looking at data structures generated by ILCompiler.ReadyToRun I noticed these leftovers. All of them are trivial fixes now. Fixes #6115.","Url":"https://github.com/dotnet/corert/pull/6870","RelatedDescription":"Closed or merged PR \"Finish ILCompiler.RyuJit cleanups\" (#6870)"},{"Id":"402352798","IsPullRequest":true,"CreatedAt":"2019-01-23T19:08:38","Actor":"Dotnet-GitSync-Bot","Number":"6871","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams @marek-safar","Url":"https://github.com/dotnet/corert/pull/6871","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6871)"},{"Id":"401972164","IsPullRequest":true,"CreatedAt":"2019-01-23T17:42:49","Actor":"maryamariyan","Number":"6868","RawContent":null,"Title":"Adding dummy PNSE implementation of DynamicILInfo to corert","State":"closed","Body":"Related to https://github.com/dotnet/corefx/pull/34532#issuecomment-456502055\r\n\r\ncc: @jkotas ","Url":"https://github.com/dotnet/corert/pull/6868","RelatedDescription":"Closed or merged PR \"Adding dummy PNSE implementation of DynamicILInfo to corert\" (#6868)"},{"Id":"402100034","IsPullRequest":false,"CreatedAt":"2019-01-23T13:10:50","Actor":"frankzye","Number":"6869","RawContent":null,"Title":"Process is terminating due to StackOverflowException.","State":"closed","Body":"I think we should handle issue like this:\r\n![image](https://user-images.githubusercontent.com/7674970/51589019-a938d780-1f20-11e9-9f20-4bac5f6e3c4f.png)\r\n![image](https://user-images.githubusercontent.com/7674970/51589054-ca012d00-1f20-11e9-9766-34f11d905652.png)\r\n","Url":"https://github.com/dotnet/corert/issues/6869","RelatedDescription":"Closed issue \"Process is terminating due to StackOverflowException.\" (#6869)"},{"Id":"401738696","IsPullRequest":true,"CreatedAt":"2019-01-23T03:04:11","Actor":"Dotnet-GitSync-Bot","Number":"6865","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/6865","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6865)"},{"Id":"401706301","IsPullRequest":true,"CreatedAt":"2019-01-23T03:02:29","Actor":"tonerdo","Number":"6864","RawContent":null,"Title":"[Interpreter] Branching","State":"closed","Body":"This PR adds support for the following opcodes:\r\n\r\n* br*\r\n* switch\r\n\r\nA positive side effect of this is that interpreted assemblies can now be built in Debug mode.\r\n\r\nSupersedes #6725 ","Url":"https://github.com/dotnet/corert/pull/6864","RelatedDescription":"Closed or merged PR \"[Interpreter] Branching\" (#6864)"},{"Id":"401763657","IsPullRequest":true,"CreatedAt":"2019-01-22T21:05:51","Actor":"filipnavara","Number":"6866","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"#6865 + build fixes.","Url":"https://github.com/dotnet/corert/pull/6866","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6866)"},{"Id":"401908040","IsPullRequest":true,"CreatedAt":"2019-01-22T19:02:28","Actor":"nattress","Number":"6867","RawContent":null,"Title":"Ldvirtftn support for CPAOT","State":"open","Body":"Support for loading virtual delegates, plus splitting `getCallInfo` into a ReadyToRun specific implementation.\r\n\r\nIt will be easier to look at the commit diff for the ldvirtftn fix so the JIT interface changes aren't lost in the refactor.","Url":"https://github.com/dotnet/corert/pull/6867","RelatedDescription":"Open PR \"Ldvirtftn support for CPAOT\" (#6867)"},{"Id":"401675437","IsPullRequest":true,"CreatedAt":"2019-01-22T13:08:04","Actor":"MichalStrehovsky","Number":"6863","RawContent":null,"Title":"Unify IL readers","State":"closed","Body":"`ILReader` added in #6849 can be used in `ILStreamReader`, saving us 100 lines of code.","Url":"https://github.com/dotnet/corert/pull/6863","RelatedDescription":"Closed or merged PR \"Unify IL readers\" (#6863)"},{"Id":"401585560","IsPullRequest":true,"CreatedAt":"2019-01-22T06:08:29","Actor":"Dotnet-GitSync-Bot","Number":"6862","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6862","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6862)"},{"Id":"401514112","IsPullRequest":true,"CreatedAt":"2019-01-21T22:30:38","Actor":"Dotnet-GitSync-Bot","Number":"6861","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6861","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6861)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"402963538","IsPullRequest":true,"CreatedAt":"2019-01-25T01:10:32","Actor":"cdmihai","Number":"2868","RawContent":null,"Title":"[WIP] Fix transitive references","State":"open","Body":"Fixes #2855\r\n","Url":"https://github.com/dotnet/sdk/pull/2868","RelatedDescription":"Open PR \"[WIP] Fix transitive references\" (#2868)"},{"Id":"402956582","IsPullRequest":false,"CreatedAt":"2019-01-25T00:37:00","Actor":"natemcmaster","Number":"2867","RawContent":null,"Title":"Using PackAsToolShimRuntimeIdentifiers and netcoreapp3.0 fails with error NETSDK1065","State":"open","Body":"**Repro**\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <PackAsTool>true</PackAsTool>\r\n    <PackAsToolShimRuntimeIdentifiers>win-x64;win-x86</PackAsToolShimRuntimeIdentifiers>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n`dotnet pack`\r\n\r\n**Result**\r\n```\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\3.0.100-preview-010166\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(228,5): error NETSDK1065: Cannot find app host for win-x64. win-x64 could be an invalid runtime identifier (RID). For more information about RID, see https://aka.ms/rid-catalog. [C:\\src\\aspnet\\BuildTools\\repro\\CliTool\\CliTool.csproj]\r\n```\r\n\r\n**Details**\r\n\r\nUsing 3.0.100-preview-010166\r\n\r\ncc @nguerrera @wli3 ","Url":"https://github.com/dotnet/sdk/issues/2867","RelatedDescription":"Open issue \"Using PackAsToolShimRuntimeIdentifiers and netcoreapp3.0 fails with error NETSDK1065\" (#2867)"},{"Id":"402909592","IsPullRequest":true,"CreatedAt":"2019-01-25T00:08:22","Actor":"johnbeisner","Number":"2861","RawContent":null,"Title":"Update PerfGroovy - master","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2861","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - master\" (#2861)"},{"Id":"402909604","IsPullRequest":true,"CreatedAt":"2019-01-25T00:04:29","Actor":"johnbeisner","Number":"2862","RawContent":null,"Title":"Update PerfGroovy - release/2.2.2xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2862","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.2.2xx\" (#2862)"},{"Id":"402909622","IsPullRequest":true,"CreatedAt":"2019-01-25T00:04:25","Actor":"johnbeisner","Number":"2863","RawContent":null,"Title":"Update PerfGroovy - release/2.2.1xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2863","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.2.1xx\" (#2863)"},{"Id":"402909629","IsPullRequest":true,"CreatedAt":"2019-01-25T00:04:21","Actor":"johnbeisner","Number":"2864","RawContent":null,"Title":"Update PerfGroovy - release/2.1.6xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2864","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.1.6xx\" (#2864)"},{"Id":"402909644","IsPullRequest":true,"CreatedAt":"2019-01-25T00:04:16","Actor":"johnbeisner","Number":"2865","RawContent":null,"Title":"Update PerfGroovy - release/2.1.5xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2865","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.1.5xx\" (#2865)"},{"Id":"401967744","IsPullRequest":true,"CreatedAt":"2019-01-24T23:21:51","Actor":"NikolaMilosavljevic","Number":"2857","RawContent":null,"Title":"Update .NET Framework Reference Assemblies version to 1.0.0-alpha-5","State":"closed","Body":"Update version of .NET Framework reference assemblies package, to latest.","Url":"https://github.com/dotnet/sdk/pull/2857","RelatedDescription":"Closed or merged PR \"Update .NET Framework Reference Assemblies version to 1.0.0-alpha-5\" (#2857)"},{"Id":"402909653","IsPullRequest":true,"CreatedAt":"2019-01-24T21:47:18","Actor":"johnbeisner","Number":"2866","RawContent":null,"Title":"Update PerfGroovy - release/2.1.4xx","State":"open","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2866","RelatedDescription":"Open PR \"Update PerfGroovy - release/2.1.4xx\" (#2866)"},{"Id":"402899283","IsPullRequest":true,"CreatedAt":"2019-01-24T21:17:21","Actor":"peterhuene","Number":"2860","RawContent":null,"Title":"[WIP] Fix _RestoreCrossgen target dependency.","State":"open","Body":"The `_RestoreCrossgen` target depends on a package reference to\r\n`Microsoft.NETCore.App` to be present.  However, for `netcoreapp3`\r\ntargeted applications, this requires the `ResolveFrameworkReferences`\r\ntarget to execute.\r\n\r\nThis commit adds a target dependency from `_RestoreCrossgen` to\r\n`ResolveFrameworkReferences` so that the package references are\r\npopulated when coming from a framework reference.\r\n\r\nFixes the CLI tests around `dotnet store` that invoke the crossgen\r\ntargets.","Url":"https://github.com/dotnet/sdk/pull/2860","RelatedDescription":"Open PR \"[WIP] Fix _RestoreCrossgen target dependency.\" (#2860)"},{"Id":"402697342","IsPullRequest":true,"CreatedAt":"2019-01-24T14:29:28","Actor":"dotnet-maestro[bot]","Number":"2859","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19073.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2859","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2859)"},{"Id":"402080266","IsPullRequest":true,"CreatedAt":"2019-01-23T17:24:55","Actor":"dotnet-maestro[bot]","Number":"2858","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19072.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19072.5\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19072.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19072.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2858","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2858)"},{"Id":"401538714","IsPullRequest":true,"CreatedAt":"2019-01-22T23:39:28","Actor":"drewnoakes","Number":"2853","RawContent":null,"Title":"Don't set MSBuildAllProjects for MSBuild 16.0+","State":"closed","Body":"Microsoft/msbuild#1299 discusses a change whereby MSBuild prepends the newest project file path to `MSBuildAllProjects` automatically. Therefore, so long as consumers of this property only use this property for up-to-date checks, it's possible to reduce both the size of this property and corresponding allocations.\r\n\r\nThis reduction applies equally to consumers, such as for the case discussed in dotnet/project-system#3744.\r\n\r\nFor backwards compatibility the property is still set for MSBuild versions prior to 16.0.\r\n\r\nSee also Microsoft/msbuild#3605.\r\n\r\n//cc: @jeffkl @rainersigwald @davkean ","Url":"https://github.com/dotnet/sdk/pull/2853","RelatedDescription":"Closed or merged PR \"Don't set MSBuildAllProjects for MSBuild 16.0+\" (#2853)"},{"Id":"401951079","IsPullRequest":true,"CreatedAt":"2019-01-22T22:41:28","Actor":"peterhuene","Number":"2856","RawContent":null,"Title":"Fix ArgumentNullException in ResolveFrameworkReferences.","State":"closed","Body":"When a `netcoreapp3.0` executable project references a `netcoreapp3.0`\r\nlibrary project, and `SelfContained` is globally true, then an\r\n`ArgumentNullException` occurs in the `ResolveFrameworkReferences` task.\r\n\r\nThis can happen when publishing with the following command:\r\n\r\n```\r\ndotnet publish -f netcoreapp3.0 -r win-x86 --self-contained\r\n```\r\n\r\nWhen `SelfContained` is `true` for the class library project reference,\r\nthe task does not take into account that `RuntimeIdentifier` might be\r\nnull since it gets filtered out from the reference.\r\n\r\nAdditionally, some cleanup was needed relating to\r\n`GetBestRuntimeIdentifier`.\r\n\r\nFixes #2851.","Url":"https://github.com/dotnet/sdk/pull/2856","RelatedDescription":"Closed or merged PR \"Fix ArgumentNullException in ResolveFrameworkReferences.\" (#2856)"},{"Id":"401311605","IsPullRequest":false,"CreatedAt":"2019-01-22T22:41:28","Actor":"0xd4d","Number":"2851","RawContent":null,"Title":"Publish self contained app with RIDs that refs a classlib without RIDs results in ArgumentNullException in ResolveFrameworkReferences","State":"closed","Body":"Version: Latest build of .NET Core SDK (3.0.100-preview-010137)\r\n\r\nIf you have an app with RIDs in the csproj file that references a class library with no RIDs in its csproj file, and you publish a self contained .NET Core 3.0 app, the build fails with an ArgumentNullException in ResolveFrameworkReferences.\r\n\r\nhttps://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L132 calls `GetBestRuntimeIdentifier()` but this method assumes `AppHostRuntimeIdentifier` isn't `null`.\r\n\r\nStack trace:\r\n\r\n```\r\nThe \"ResolveFrameworkReferences\" task failed unexpectedly.\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: key\r\n   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n   at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)\r\n   at System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(TKey key)\r\n   at Microsoft.NET.Build.Tasks.NuGetUtils.GetBestMatchingRid(RuntimeGraph runtimeGraph, String runtimeIdentifier, IEnumerable`1 availableRuntimeIdentifiers, Boolean& wasInGraph) in /_/src/Tasks/Microsoft.NET.Build.Tasks/NuGetUtils.NuGet.cs:line 86\r\n   at Microsoft.NET.Build.Tasks.ResolveFrameworkReferences.GetBestRuntimeIdentifier(String targetRuntimeIdentifier, String availableRuntimeIdentifiers, Boolean& wasInGraph) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs:line 267\r\n   at Microsoft.NET.Build.Tasks.ResolveFrameworkReferences.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs:line 134\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\r\n```\r\n\r\nRepro:\r\n\r\n- Clone https://github.com/0xd4d/ResolveFrameworkReferences_issue\r\n- Use latest daily build of .NET Core SDK\r\n- dotnet publish -c Release -f netcoreapp3.0 -r win-x86 --self-contained\r\n","Url":"https://github.com/dotnet/sdk/issues/2851","RelatedDescription":"Closed issue \"Publish self contained app with RIDs that refs a classlib without RIDs results in ArgumentNullException in ResolveFrameworkReferences\" (#2851)"},{"Id":"401895527","IsPullRequest":false,"CreatedAt":"2019-01-22T18:28:29","Actor":"cdmihai","Number":"2855","RawContent":null,"Title":"Cannot build with DisableTransitiveProjectReferences=true","State":"open","Body":"Given a graph with projects that do not have compile time dependencies on the transitive projects, it should be able to build the graph without injecting transitive project references into each project.\r\n\r\nRepro:\r\n[new-xtarget-3.zip](https://github.com/dotnet/sdk/files/2784102/new-xtarget-3.zip)\r\nThe zip has a graph like 1->2->3. Running with `DisableTransitiveProjectReferences=true` gives the following results:\r\n\r\n```\r\n\"E:\\projects\\MSBuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\1\\1.csproj\" (default target) (1) ->\r\n\"E:\\projects\\MSBuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\1\\1.csproj\" (Build target) (1:2) ->\r\n(GenerateBuildDependencyFile target) ->\r\n  C:\\Program Files\\dotnet\\sdk\\2.2.200-preview-009748\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(129,5): error NETSDK1007: Cannot find project info for 'E:\\projects\\MSB \r\nuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\3\\3.csproj'. This can indicate a missing project reference. [E:\\projects\\MSBuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\1 \r\n\\1.csproj]\r\n```\r\n\r\nFailing binlog: \r\n[failing.zip](https://github.com/dotnet/sdk/files/2784113/failing.zip)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2855","RelatedDescription":"Open issue \"Cannot build with DisableTransitiveProjectReferences=true\" (#2855)"},{"Id":"401145954","IsPullRequest":true,"CreatedAt":"2019-01-22T17:37:23","Actor":"nguerrera","Number":"2850","RawContent":null,"Title":"Fix failure when using evaluation API to evaluate multi-targeted projects","State":"closed","Body":"Follow nearby pattern to guard against undefined _TargetFrameworkVersionWithoutV","Url":"https://github.com/dotnet/sdk/pull/2850","RelatedDescription":"Closed or merged PR \"Fix failure when using evaluation API to evaluate multi-targeted projects\" (#2850)"},{"Id":"401764141","IsPullRequest":false,"CreatedAt":"2019-01-22T13:27:34","Actor":"m0sa","Number":"2854","RawContent":null,"Title":"Make multi-targeting constants local properties","State":"open","Body":"The `DefineConstants` properties for multi targeting builds are a bit confusing, since they are global and not local. This means that if there is a custom `-p:DefineConstants=WHATEVER` on the command line, the multi targeting constants won't get added.\r\n\r\nWhat I'm asking here is to add a `TreatAsLocalProperty=\"DefineConstants\"` to Microsoft.NET.Sdk.CSharp.targets, (and possibly other .target / .props files where `DefineConstants` gets updated), so that it works consistently when the consuming build modifies it via a PropertyGroup as well as via command line args.\r\n\r\n---\r\n\r\nLet me elaborate. We have an old non-SDK style solution that we are gradually refactoring into AspNetCore and SDK-style. We were confronted with the build on the CI server failing miserably, because the target framework constants weren't defined during the build (e.g. `#if NET462` and `#if NETCOREAPP2_2` were not working as expected). Turned out that we had some build configurations passing in a custom `DefineConstants` property. As this property [is global](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-properties?view=vs-2017#global-properties), [this line Microsoft.NET.Sdk.CSharp.targets](https://github.com/dotnet/sdk/blob/006bb6ddaf2a3997ddd25f000fae968e9233fe93/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.CSharp.targets#L35) does not work like a *non-msbuild expert would* would expect from reading it. It took us multiple days of digging through MSBuildBinLog, and collective WTFing, to finally figure out what's going on. Ironically, we did skim over the SDK.CSharp.targets, as it was seemingly not doing what it was supposed to do, but it looked OK at first glance.\r\n\r\nAdding to the confusion was the fact that if you add a custom `<PropertyGroup><DefineConstants>WHATEVER</DefineConstants></PropertyGroup>`, it gets concatenated, and not overridden.\r\n\r\nIdeally, it would behave the same way (concatenate the existing  value) when it gets passed in via the command line arg.\r\n","Url":"https://github.com/dotnet/sdk/issues/2854","RelatedDescription":"Open issue \"Make multi-targeting constants local properties\" (#2854)"},{"Id":"401344480","IsPullRequest":true,"CreatedAt":"2019-01-21T14:14:36","Actor":"dotnet-maestro[bot]","Number":"2852","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19070.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2852","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2852)"},{"Id":"401095847","IsPullRequest":true,"CreatedAt":"2019-01-20T14:14:19","Actor":"dotnet-maestro[bot]","Number":"2849","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19069.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19069.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2849","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2849)"},{"Id":"401047377","IsPullRequest":true,"CreatedAt":"2019-01-20T02:00:07","Actor":"dotnet-bot","Number":"2848","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2848","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2848)"},{"Id":"400513894","IsPullRequest":true,"CreatedAt":"2019-01-19T23:36:30","Actor":"dotnet-bot","Number":"2840","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2840","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#2840)"},{"Id":"400993880","IsPullRequest":true,"CreatedAt":"2019-01-19T14:29:23","Actor":"dotnet-maestro[bot]","Number":"2847","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19068.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19068.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2847","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2847)"},{"Id":"400910097","IsPullRequest":true,"CreatedAt":"2019-01-18T22:16:22","Actor":"nugetlurker","Number":"2846","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5783 into sdk 2.1.6xx","State":"open","Body":"Insert NuGet Build 5.0.0-preview3.5783 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2846","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview3.5783 into sdk 2.1.6xx\" (#2846)"},{"Id":"400910086","IsPullRequest":true,"CreatedAt":"2019-01-18T22:16:19","Actor":"nugetlurker","Number":"2845","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5783 into sdk 2.2.2xx","State":"open","Body":"Insert NuGet Build 5.0.0-preview3.5783 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2845","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview3.5783 into sdk 2.2.2xx\" (#2845)"},{"Id":"400704723","IsPullRequest":true,"CreatedAt":"2019-01-18T21:01:02","Actor":"v-zbsail","Number":"2842","RawContent":null,"Title":"LOC CHECKIN | dotnet/cli master | 20190118","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2842","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/cli master | 20190118\" (#2842)"},{"Id":"400853709","IsPullRequest":false,"CreatedAt":"2019-01-18T19:14:24","Actor":"benjaminjnr","Number":"2844","RawContent":null,"Title":"dotnet build unable to download microsoft.netcore.dotnetapphost.3.0.0-preview-27316-4.nupkg","State":"open","Body":"While building a WPF on .NET Core 3 app with <TargetFramework>netcoreapp3.0</TargetFramework>, the dotnet build command tries to download the file above but errors out after a number of retries.\r\n\r\nAt first, I thought there was a problem with the internet connection or the host couldn't be reached.  So, I copied the url displayed (I don't have it now) and pasted it in the browser, it did return the file required but it had a .zip extension.  I think it was throwing the build tools off.\r\n\r\nThe file was saved to my %USERPROFILE%\\Downloads folder.  So, I changed the extension of the file from .zip to .nupkg.  To get the compiler to use it, I had to create a nuget.config file in the solution folder and specify the %USERPROFILE%\\Downloads folder as so:\r\n\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    <add key=\"aspnet-contrib\" value=\"https://www.myget.org/F/aspnet-contrib/api/v3/index.json\" />\r\n\t<add key=\"powershell-core\" value=\"http://powershell.myget.org/F/powershell-core/api/v3/index.json\" />\r\n    <add key=\"downloads folder\" value=\"%USERPROFILE%\\downloads\" />\r\n  </packageSources>\r\n</configuration>\r\n\r\nThis way, it could locate the file that it couldn't get from nuget.org and use it do the compilation and that worked.","Url":"https://github.com/dotnet/sdk/issues/2844","RelatedDescription":"Open issue \"dotnet build unable to download microsoft.netcore.dotnetapphost.3.0.0-preview-27316-4.nupkg\" (#2844)"},{"Id":"400716292","IsPullRequest":true,"CreatedAt":"2019-01-18T14:29:49","Actor":"dotnet-maestro[bot]","Number":"2843","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19067.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19067.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2843","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2843)"},{"Id":"400513901","IsPullRequest":true,"CreatedAt":"2019-01-18T01:30:24","Actor":"dotnet-bot","Number":"2841","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2841","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2841)"},{"Id":"400510769","IsPullRequest":false,"CreatedAt":"2019-01-17T23:40:10","Actor":"nguerrera","Number":"2839","RawContent":null,"Title":"Download runtime pack for each runtime identifier","State":"open","Body":"If we have\r\n\r\n``` xml\r\n<RuntimeIdentifiers>A;B;C</RuntimeIdentifiers>\r\n```\r\n\r\nAnd you do:\r\n\r\n`dotnet restore`\r\n`dotnet publish -r A --no-restore`\r\n\r\nThen the earlier restore should have pulled down runtime packs for A, B, and C. We are getting this for free for now because we still get the dependencies of the targeting pack (even rid specific) with excludeassets=all. When we switch to real runtime packs, we need to make ResolveFrameworkReferences take all the RuntimeIdentifiers and add a PackageDownload for all of them.","Url":"https://github.com/dotnet/sdk/issues/2839","RelatedDescription":"Open issue \"Download runtime pack for each runtime identifier\" (#2839)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1088327156449476608","CreatedAt":"2019-01-24T06:46:28+00:00","UserScreenname":"dotnet","Text":"Come work for @amandaksilver. She’s a great boss and has an amazing team with lots of influence on the dev experien… https://t.co/LW30IafmZa","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":29,"FavoriteCount":8,"RawContent":null},{"Id":"1088226836696317952","CreatedAt":"2019-01-24T00:07:50+00:00","UserScreenname":"dotnet","Text":"Join Jeff and Allison tomorrow and learn about the AWESOME new tools in @VisualStudio https://t.co/GgR00dulgQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":2,"RawContent":null},{"Id":"1086041216355954688","CreatedAt":"2019-01-17T23:22:58+00:00","UserScreenname":"dotnet","Text":"We’re happy to read this sentiment about the broader #dotnet #CommunityStandup that @JamesMontemagno has created fo… https://t.co/VtBt7BRcPl","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":11,"RawContent":null},{"Id":"1085930999182020608","CreatedAt":"2019-01-17T16:05:00+00:00","UserScreenname":"dotnet","Text":"Excited about .NET Core and desktop apps? Please tell what kind of apps you plan on porting! https://t.co/x77TJp8odU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":67,"FavoriteCount":37,"RawContent":null},{"Id":"1085929481137782785","CreatedAt":"2019-01-17T15:58:58+00:00","UserScreenname":"dotnet","Text":"In the latest episode of #OnDotNet, Michael Hawker(@XAMLLlama) sits down with Jeremy(@jeremylikness) to introduce u… https://t.co/sntrhjBVQq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":13,"RawContent":null},{"Id":"1085408808988524544","CreatedAt":"2019-01-16T05:30:00+00:00","UserScreenname":"dotnet","Text":".NET Framework January 2019 Preview of Quality Rollup https://t.co/PHzmBv3Qwl","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2019-01-25T05:30:44.8730396Z","RunDurationInMilliseconds":17896}