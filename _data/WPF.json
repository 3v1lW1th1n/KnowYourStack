{"Data":{"GitHub":{"Issues":[{"Id":"456005214","IsPullRequest":true,"CreatedAt":"2019-06-14T00:13:18","Actor":"vatsan-madhavan","Number":"953","RawContent":null,"Title":"Fix for #952 dotnet/wpf builds failing intermittently due to timeouts ","State":"open","Body":"Fixes #952 \r\n\r\nWPF builds fail intermittently due to timeouts when Run Developer Regression Tests on Helix Machine stage fails to start within its timeout period (60 mins).\r\n\r\nExample of a failed build: https://dev.azure.com/dnceng/internal/_build/results?buildId=224164\r\n\r\n=\r\n\r\n_TestHelixAgentPool in eng\\pipeline.yml is currently set to Windows.10.Amd64.Open%3bWindows.7.Amd64.Open%3bWindows.10.Amd64.ServerRS5.Open\r\n\r\nIt should be changed to Windows.10.Amd64.Open%3bWindows.7.Amd64.Open%3bWindows.10.Amd64.Client19H1.Open.\r\n\r\nIn short, stop running tests on ServerRS5. It's a \"server core\" machine machine, and seems to have problems running tests right now. Change it to Client19H1.","Url":"https://github.com/dotnet/wpf/pull/953","RelatedDescription":"Open PR \"Fix for #952 dotnet/wpf builds failing intermittently due to timeouts \" (#953)"},{"Id":"456003379","IsPullRequest":false,"CreatedAt":"2019-06-14T00:04:32","Actor":"vatsan-madhavan","Number":"952","RawContent":null,"Title":"WPF Builds fail intermittently due to timeouts","State":"open","Body":"WPF builds fail intermittently due to timeouts when _Run Developer Regression Tests on Helix Machine_ stage fails to start within its timeout period (60 mins). \r\n\r\nExample of a failed build: https://dev.azure.com/dnceng/internal/_build/results?buildId=224164 \r\n\r\n= \r\n\r\n`_TestHelixAgentPool` in `eng\\pipeline.yml` is currently set to `Windows.10.Amd64.Open%3bWindows.7.Amd64.Open%3bWindows.10.Amd64.ServerRS5.Open` \r\n\r\nIt should be changed to `Windows.10.Amd64.Open%3bWindows.7.Amd64.Open%3bWindows.10.Amd64.Client19H1.Open`. \r\n\r\nIn short, stop running tests on _ServerRS5_. It's a \"server core\" machine machine, and seems to have problems running tests right now. Change it to _Client19H1_. ","Url":"https://github.com/dotnet/wpf/issues/952","RelatedDescription":"Open issue \"WPF Builds fail intermittently due to timeouts\" (#952)"},{"Id":"455893501","IsPullRequest":true,"CreatedAt":"2019-06-13T22:27:58","Actor":"jmarolf","Number":"946","RawContent":null,"Title":"Ensure the identity name is the same for C# and VB templates","State":"closed","Body":"Having mismatched identities means that shim templates cannot be re-used across languages in VS","Url":"https://github.com/dotnet/wpf/pull/946","RelatedDescription":"Closed or merged PR \"Ensure the identity name is the same for C# and VB templates\" (#946)"},{"Id":"455975842","IsPullRequest":true,"CreatedAt":"2019-06-13T22:14:55","Actor":"miguep","Number":"951","RawContent":null,"Title":"Fixing the list of uncommon assemblies used by AssemblyHelper","State":"open","Body":"AssemblyHelper keeps track of uncommon assemblies and loads the appropriate extension assembly (e.g. PresentationFramework-SystemData), only when it determines that the assembly has already been loaded by the application (to prevent said assembly from being loaded by WPF all the time). The types used by the extension assemblies have moved to different assemblies, so we need to update the list of uncommon assemblies.\r\n\r\nfixes #756 ","Url":"https://github.com/dotnet/wpf/pull/951","RelatedDescription":"Open PR \"Fixing the list of uncommon assemblies used by AssemblyHelper\" (#951)"},{"Id":"455973133","IsPullRequest":false,"CreatedAt":"2019-06-13T22:05:47","Actor":"bergmeister","Number":"950","RawContent":null,"Title":"New feature: Add property to JumpTask to allow for elevated jump list entry","State":"open","Body":"Background: PowerShell Core has a lot of custom code [here](https://github.com/PowerShell/PowerShell/tree/master/src/Microsoft.PowerShell.ConsoleHost/WindowsTaskbarJumpList) that makes COM calls to the Windows API for creating a jumplist entry to run PowerShell as an Administrator. However, in both .Net Core 2.1 and .Net Core 3.0-preview5, it has been observed that the CLR fails sporadically with a fatal error: https://github.com/PowerShell/PowerShell/issues/9295\r\n\r\nWPF has APIs for creating a taskbar jump list but not for launching the application as elevated. PowerShell would therefore like to rather use WPF to minimize the amount of (possibly buggy code).\r\n\r\nProposal:\r\n\r\nWe add a boolean property to `JumpTask` (I don't mind about its name, what about `RequestElevation`?) so that when when `JumpList.Apply()` gets called the application will be elevated. The default will be to start unelevated.\r\nThe implementation will be quite simple, all we need to do is to use `SLDF_RUNAS_USER` enum on [SHELL_LINK_DATA_FLAGS](https://docs.microsoft.com/en-us/windows/desktop/api/shlobj_core/ne-shlobj_core-shell_link_data_flags). We will be calling [IShellLinkDataList::GetFlag](https://docs.microsoft.com/en-us/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ishelllinkdatalist-getflags)`, adding the enum value using XOR and then call [IShellLinkDataList::SetFlags](https://docs.microsoft.com/en-us/windows/desktop/api/shobjidl_core/nf-shobjidl_core-ishelllinkdatalist-setflags) on the `shellLink`  object of type `IShellLinkW` in JumpList.\r\n\r\nAre you OK with this proposal that includes no breaking change?\r\nI would first code this from a theoretical perspective, open a draft PR and from then on I would be grateful for some assistance for being able to test it and will have to do some homework to get familiar with this repo (I have never committed to .Net Core before although I use it a lot)\r\n\r\nIn terms of the usage, do you expect the process that is calling those APIs to be in STA mode or does it not matter? WPF is STA by default AFAIK but PowerShell Core is a console app and currently still in MTA mode due to .Net Core not offering STA yet in 2.1","Url":"https://github.com/dotnet/wpf/issues/950","RelatedDescription":"Open issue \"New feature: Add property to JumpTask to allow for elevated jump list entry\" (#950)"},{"Id":"455915166","IsPullRequest":true,"CreatedAt":"2019-06-13T19:30:08","Actor":"ryalanms","Number":"949","RawContent":null,"Title":"Include GAC in changed ref assembly check during WPF build on .NET Framework","State":"open","Body":"**PresentationBuildTasks** is the only multi-targeted WPF component.  Both .NET Core and .NET Framework PBT assemblies are produced by the WPF build.\r\n\r\nPresentationBuildTasks contains Global Assembly Cache code that was #ifdef'd out that should be included when compiling PresentationBuildTasks for .NET Framework.  **The Global Assembly Cache does not exist in .NET Core.**","Url":"https://github.com/dotnet/wpf/pull/949","RelatedDescription":"Open PR \"Include GAC in changed ref assembly check during WPF build on .NET Framework\" (#949)"},{"Id":"455909360","IsPullRequest":false,"CreatedAt":"2019-06-13T19:15:08","Actor":"grubioe","Number":"948","RawContent":null,"Title":"Suggestion to change default method behavior for .Children (and add it to all elements)","State":"open","Body":"Copying from WPF Samples Repo: https://github.com/microsoft/WPF-Samples/issues/77\r\n\r\nDear Devs,\r\nit is kind of a pain to iterate through the whole page xaml for finding certain items.\r\nThe default methods .Content and .Children differ on the tree which is annoying (for beginners).\r\nCould you improve the default method like using default examples for VisualTreeHelper?\r\n\r\nFurther it is annoying being forced to cast the method\r\n(having not the same container providing .Children method) for the IntelliCode support.\r\n\r\nUsing multiple or deep Pages could be written recursively or iteratively much faster when the type is fixed providing and the same method could be used.\r\n\r\nThis\r\nhttps://stackoverflow.com/questions/636383/how-can-i-find-wpf-controls-by-name-or-type/1759923#1759923\r\nand this\r\nhttps://codereview.stackexchange.com/questions/44760/is-there-a-better-way-to-get-a-child\r\nrelates to that.","Url":"https://github.com/dotnet/wpf/issues/948","RelatedDescription":"Open issue \"Suggestion to change default method behavior for .Children (and add it to all elements)\" (#948)"},{"Id":"455905960","IsPullRequest":false,"CreatedAt":"2019-06-13T19:06:28","Actor":"grubioe","Number":"947","RawContent":null,"Title":"DPI aware splash screen","State":"open","Body":"Transferring from WPF Samples Repo: https://github.com/microsoft/WPF-Samples/issues/69 \r\n\r\nWPF splash screen images are not scaled according to the DPI.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/947","RelatedDescription":"Open issue \"DPI aware splash screen\" (#947)"},{"Id":"455732554","IsPullRequest":true,"CreatedAt":"2019-06-13T18:49:00","Actor":"dotnet-maestro[bot]","Number":"944","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190612.6\r\n- **Date Produced**: 6/12/2019 7:15 PM\r\n- **Commit**: 3204af57b16e48251dd355fef00d3d8289659ee9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview7.19312.6\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/944","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#944)"},{"Id":"455720122","IsPullRequest":true,"CreatedAt":"2019-06-13T18:42:58","Actor":"dotnet-maestro[bot]","Number":"942","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190612.11\r\n- **Date Produced**: 6/13/2019 4:08 AM\r\n- **Commit**: c1eb853e11bb0adccc1f2bd284da000232704133\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview7-27812-11\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview7.19312.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILDAsm** -> 3.0.0-preview7.19312.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19312.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 3.0.0-preview7.19312.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19312.2 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/942","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#942)"},{"Id":"455470431","IsPullRequest":true,"CreatedAt":"2019-06-13T18:41:48","Actor":"ryalanms","Number":"934","RawContent":null,"Title":"Bindings to System.Dynamic types fail to resolve","State":"closed","Body":"`MS.Internal.SystemCoreHelper.IsIDynamicMetaObjectProvider` was returning false for `System.Dynamic.ExpandoObject` causing the PropertyPath resolution to fail. \r\n\r\nOn .NET Core, System.Core is now a facade assembly that will never be loaded by the CLR.  **All System.Core types are now forwarded to other assemblies.**  This change updates the required assemblies to those containing the forwarded types (System.Runtime, loaded by default, and System.Linq.Expressions).  AssemblyHelper.cs will now check for System.Linq.Expressions instead of System.Core before loading the extension assembly. \r\n\r\n Fixes #695.  A larger architectural fix for the extension assemblies may happen after RTM.  ","Url":"https://github.com/dotnet/wpf/pull/934","RelatedDescription":"Closed or merged PR \"Bindings to System.Dynamic types fail to resolve\" (#934)"},{"Id":"455610802","IsPullRequest":false,"CreatedAt":"2019-06-13T15:09:45","Actor":"turboyang-cn","Number":"940","RawContent":null,"Title":"Dynamically Create TextBox Issue","State":"closed","Body":"- .NET Core Version: 3.0.100-preview6-012264\r\n- OS: Windows 10\r\n- OS Version: 17134.471\r\n- Visual Studio Version: Visual Studio 2019 16.1.3\r\n\r\nErrors occurred when I created text boxes dynamically in my code\r\n\r\n> System.ArgumentException:\"Requested value 'Delete' was not found.\"\r\n\r\n`TextBox TextBox = new TextBox();`\r\n","Url":"https://github.com/dotnet/wpf/issues/940","RelatedDescription":"Closed issue \"Dynamically Create TextBox Issue\" (#940)"},{"Id":"455795319","IsPullRequest":true,"CreatedAt":"2019-06-13T15:04:35","Actor":"lindexi","Number":"945","RawContent":null,"Title":"Catch and rethrow the exception in StylusPlugIn","State":"open","Body":"This code running in Stylus Input thread and this thread is a backgroud thread that will be break when anyone throw an exception in this code\r\n\r\nThis MR may fix the problem that some friend throws an exception in StylusPlugIn.\r\n\r\nJust like this code. The code will break the Stylus Input thread.\r\n\r\n    public partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            StylusPlugIns.Add(new Foo());\r\n        }\r\n    }\r\n\r\n    public class Foo : StylusPlugIn\r\n    {\r\n        /// <inheritdoc />\r\n        protected override void OnStylusDown(RawStylusInput rawStylusInput)\r\n        {\r\n            throw new Exception();\r\n        }\r\n    }\r\n\r\nThe OnStylusDown running in Stylus Input thread and if some friend throws any exceptions that will break the thread. And the application will stop responding touch. Of course, the actual situation may be more complicated. Maybe some of my friends just didn't realize that the code he wrote was unstable. But add `try catch` to all the method is an evil code.\r\n\r\nBut I do not think we can throw any unintended exceptions in StylusPlugIn.\r\n\r\nSee [StylusPlugIn Class (System.Windows.Input.StylusPlugIns)](https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.stylusplugins.stylusplugin?view=netframework-4.8 )\r\n\r\n> If you use a StylusPlugIn inside a control, you should test the plug-in and control extensively to make sure they do not throw any unintended exceptions.\r\n\r\nSee [Intercepting Input from the Stylus](https://msdn.microsoft.com/en-us/data/ms749105(v=vs.80) )\r\n\r\n> If a StylusPlugIn throws or causes an exception, the application will close. You should thoroughly test controls that consume a StylusPlugIn and only use a control if you are certain the StylusPlugIn will not throw an exception.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/945","RelatedDescription":"Open PR \"Catch and rethrow the exception in StylusPlugIn\" (#945)"},{"Id":"455720602","IsPullRequest":true,"CreatedAt":"2019-06-13T12:45:43","Actor":"dotnet-maestro[bot]","Number":"943","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190612.1\r\n- **Date Produced**: 6/12/2019 1:15 PM\r\n- **Commit**: e14ae1b4d92fb20e9b7dddd4c23e2b2245b142fd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview7.19312.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/943","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/winforms\" (#943)"},{"Id":"455702939","IsPullRequest":true,"CreatedAt":"2019-06-13T12:07:29","Actor":"dotnet-maestro[bot]","Number":"941","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190612.21\r\n- **Date Produced**: 6/13/2019 7:23 AM\r\n- **Commit**: e5cd71926eaa13aba3138c14cd80def0ccfebb30\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19312.21\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/941","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#941)"},{"Id":"455555747","IsPullRequest":true,"CreatedAt":"2019-06-13T06:23:38","Actor":"lindexi","Number":"939","RawContent":null,"Title":"Set the lock object as readonly","State":"open","Body":"Not any code need to change this object\r\n\r\nAnd it only use in this code\r\n\r\nhttps://github.com/dotnet/wpf/blob/fa87ed8943c0ea0b39fb30a093e8aba0e7efdf0c/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/Input/Stylus/Wisp/WispLogic.cs#L216","Url":"https://github.com/dotnet/wpf/pull/939","RelatedDescription":"Open PR \"Set the lock object as readonly\" (#939)"},{"Id":"455545445","IsPullRequest":false,"CreatedAt":"2019-06-13T05:46:26","Actor":"hillin","Number":"938","RawContent":null,"Title":"Designer: XDG0062 error on ControlTemplate","State":"open","Body":"* .NET Core Version: 3.0 Preview 5\r\n* Windows version: Windows 10 Version 1803\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nThis issue is highly likely to be the same as https://github.com/dotnet/wpf/issues/937.\r\n\r\nWhen using an object referenced in a `clr-namespace` in a `ControlTemplate`, the designer throws an ArgumentException and reports an `XDG0062` error in the error list. A wavy line will also shown under the corresponding XAML.\r\n\r\nIt seems this only happens if another object, referenced in a `clr-namespace`, is created in the same UserControl/Window.\r\n\r\n **Expected behavior:**\r\n Does not report an error.\r\n\r\n **Minimal repro:**\r\n https://github.com/hillin/NetCoreWpfDesignerIssues, in the `ControlTemplate_XDG0062` project.\r\n","Url":"https://github.com/dotnet/wpf/issues/938","RelatedDescription":"Open issue \"Designer: XDG0062 error on ControlTemplate\" (#938)"},{"Id":"455539882","IsPullRequest":false,"CreatedAt":"2019-06-13T05:20:58","Actor":"hillin","Number":"937","RawContent":null,"Title":"Designer: XDG0062 error on d:DesignInstance","State":"open","Body":"* .NET Core Version: 3.0 Preview 5\r\n* Windows version: Windows 10 Version 1803\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nWhen using `d:DesignInstance` for `d:DataContext` in a UserControl or Window, the designer throws an ArgumentException and reports an `XDG0062` error in the error list. A wavy line will also shown under the corresponding XAML.\r\n\r\nIt seems this only happens if another object, referenced in a `clr-namespace`, is created in the same UserControl/Window.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n Attaching a debugger to WpfSurface.exe reveals the following exceptions:\r\n\r\n> System.ArgumentNullException\r\n  HResult=0x80004003\r\n  Message=Value cannot be null.\r\nParameter name: key\r\n  Source=System.Private.CoreLib\r\n  StackTrace:\r\n   at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\r\n\r\n **Expected behavior:**\r\n Does not report an error.\r\n\r\n **Minimal repro:**\r\n https://github.com/hillin/NetCoreWpfDesignerIssues, in the `DesignInstance_XDG0062` project.\r\n","Url":"https://github.com/dotnet/wpf/issues/937","RelatedDescription":"Open issue \"Designer: XDG0062 error on d:DesignInstance\" (#937)"},{"Id":"455518107","IsPullRequest":true,"CreatedAt":"2019-06-13T03:28:46","Actor":"lindexi","Number":"936","RawContent":null,"Title":"Catch all the exception in touch process This MR do not expect to merge","State":"open","Body":"Because we can not use any way to repair it when the code throw the exception and the Stylus Input thread will exit\r\n\r\nMaybe it can fix https://github.com/dotnet/wpf/issues/935\r\n\r\nIt is an evil code","Url":"https://github.com/dotnet/wpf/pull/936","RelatedDescription":"Open PR \"Catch all the exception in touch process This MR do not expect to merge\" (#936)"},{"Id":"455506795","IsPullRequest":false,"CreatedAt":"2019-06-13T02:34:12","Actor":"lindexi","Number":"935","RawContent":null,"Title":"Throw IndexOutOfRangeException in WispLogic.CoalesceAndQueueStylusEvent","State":"open","Body":"* .NET Core Version: 3.0.100-preview5-011568\r\n* Windows version: 1903 18362.145\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Find in 4.7\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nThe application crash.\r\n\r\nWe find many customs will break the application when he touch the application. I catch the `AppDomain.CurrentDomain.UnhandledException` and find the WispLogic.CoalesceAndQueueStylusEvent may be break the application. \r\n\r\nSee: https://stackoverflow.com/questions/46049673/wpf-touch-application-partially-freezes-on-net-framework-4-7\r\n\r\nAnd [Bruno V](https://stackoverflow.com/users/3357566/bruno-v) tell me that it fix in .NET 4.7.1, but it seems not fix in dotnet core.\r\n\r\nI can not debug it, because 200 users found the crash among 300,000 users.\r\n\r\n- .NET 4.7: 200 users found the crash among 300,000 users.\r\n- .NET Core 3.0: 2 users found the crash among 600 users.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nexceptions  \r\n\r\nExceptionType: System.IndexOutOfRangeException\r\n\r\ncallstack for crashes\r\n\r\n```\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at System.Windows.Input.StylusWisp.WispLogic.CoalesceAndQueueStylusEvent(RawStylusInputReport inputReport)\r\n   at System.Windows.Input.StylusWisp.WispLogic.ProcessInputReport(RawStylusInputReport inputReport)\r\n   at System.Windows.Input.PenContext.FirePackets(Int32 stylusPointerId, Int32[] data, Int32 timestamp)\r\n   at System.Windows.Input.PenThreadWorker.FlushCache(Boolean goingOutOfRange)\r\n   at System.Windows.Input.PenThreadWorker.FireEvent(PenContext penContext, Int32 evt, Int32 stylusPointerId, Int32 cPackets, Int32 cbPacket, IntPtr pPackets)\r\n   at System.Windows.Input.PenThreadWorker.ThreadProc()\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```\r\n \r\n **Expected behavior:**\r\n\r\nThe application can run. \r\n\r\n **Minimal repro:**\r\n \r\nAn empty WPF application and run in touch device.","Url":"https://github.com/dotnet/wpf/issues/935","RelatedDescription":"Open issue \"Throw IndexOutOfRangeException in WispLogic.CoalesceAndQueueStylusEvent\" (#935)"},{"Id":"455432585","IsPullRequest":true,"CreatedAt":"2019-06-12T21:28:00","Actor":"stevenbrix","Number":"933","RawContent":null,"Title":"making copy-wpf more useful","State":"open","Body":"I'm trying to make our developer-guide and scripts more helpful for people new to the project. In doing so, I realized the `-local` to copy-wpf.ps1 isn't really helpful since the version of the `Microsoft.WindowsDesktop.App` runtime there is fairly old, and coincides with the version of the sdk defined in our global.json. In general, I feel like it's a better practice to use the dotnet-install script to create a dotnet install at a known location, then modify that install as you see fit. The local `.dotnet` folder should really only be used for automated testing and building our product, not modified for manual testing purposes. Since we don't build our tests against the `Microsoft.WindowsDesktop.App` runtime, copying our assemblies anywhere in that location doesn't even make sense anyways.\r\n\r\nI ran into this issue trying to validate some changes against the large suite of our DRTs that aren't built out in the open yet.\r\n","Url":"https://github.com/dotnet/wpf/pull/933","RelatedDescription":"Open PR \"making copy-wpf more useful\" (#933)"},{"Id":"455371899","IsPullRequest":false,"CreatedAt":"2019-06-12T18:54:52","Actor":"rladuca","Number":"932","RawContent":null,"Title":"Convert C# Reference Assembly Generation to Use GenAPI","State":"open","Body":"Currently, C# assemblies are building reference assemblies via [ProduceReferenceAssembly](https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties?view=vs-2019) (corresponding to the CSC flag [-refout](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/refout-compiler-option)).\r\n\r\nThis causes several issues:\r\n\r\n- Reference assemblies contain internal types due to WPF's use of `InternalsVisibleTo` in many of its assemblies.\r\n- Due to this, several reference assemblies may have dangling type references as we move toward the same reference assembly surface as .NET Framework.  This was also the case in .NET Framework for some reference assemblies, but this wasn't as strictly enforced.\r\n\r\nCurrently, the known dangling references are in the `PresentationCore` and `PresentationFramework` reference assemblies, the later only when `PresentationUI`'s reference assembly is removed.\r\n\r\nTo fix these, we want to switch to using the [GenAPI tool](https://github.com/dotnet/arcade/tree/a1805103791e43031355e11c0d037bca803a9593/src/Microsoft.DotNet.GenAPI) so that we can tailor the content of the reference assemblies to only contain necessary API surface area.  \r\n\r\nOur builds directly use `ProjectReference` for needed assemblies that are in the same repository and will alter these for those that are not available in the same repository (via [WpfProjectReference.targets](https://github.com/dotnet/wpf/blob/master/eng/WpfArcadeSdk/tools/WpfProjectReference.targets)).  We likely will have to update this mechanic if internal building assemblies require internals from the reference assemblies.\r\n\r\n- [ ] Call GenAPI to generate `PresentationCore`'s reference assembly\r\n- [ ] Trim output to only needed types\r\n- [ ] Do the same for the rest of the publicly building C# assemblies\r\n- [ ] Test package ingestion against dotnet-wpf-int to validate [WpfProjectReference.targets](https://github.com/dotnet/wpf/blob/master/eng/WpfArcadeSdk/tools/WpfProjectReference.targets)\r\n- [ ] Fix issues as needed\r\n- [ ] Apply GenAPI changes to dotnet-wpf-int C# assemblies","Url":"https://github.com/dotnet/wpf/issues/932","RelatedDescription":"Open issue \"Convert C# Reference Assembly Generation to Use GenAPI\" (#932)"},{"Id":"455340609","IsPullRequest":false,"CreatedAt":"2019-06-12T17:38:49","Actor":"ChrisSires","Number":"931","RawContent":null,"Title":"Tooltips associated with the Ribbon control are not hoverable","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.507\r\n Commit:    e8520940d7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.507\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.11\r\n  Commit:  d6a5616240\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n* Windows version: (`winver`)  Version 1809 (OS Build 17763.503)\r\n\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\nTooltips associated with the Ribbon control are not hoverable; it is not possible to move the mouse over the tooltip to keep the tooltip.\r\n\r\nExpected Result:\r\n\r\nHoverable: Should be able to hover on the additional content(tooltip)​\r\n\r\nActual Result:\r\n\r\nThe tooltip is not Hoverable. Tooltip is dismissed on hovering to it.\r\n \r\n **Minimal repro:**\r\n ```\r\n<Window x:Class=\"TestWPF.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\"\r\n        Name=\"NameOfWindow\">\r\n\r\n    <Grid>\r\n        <Ribbon>\r\n            <RibbonMenuButton ToolTip=\"tooltip not hoverable\" Label=\"Ribbon Menu Button\" />\r\n            <CheckBox Content=\"CheckBox\" ToolTip=\"also not hoverable\"/>\r\n        </Ribbon>\r\n    </Grid>\r\n</Window>   \r\n```\r\n\r\nNote: I expect this is the behavior for many other controls as well; this appears to be a new MAS accessibility requirement.","Url":"https://github.com/dotnet/wpf/issues/931","RelatedDescription":"Open issue \"Tooltips associated with the Ribbon control are not hoverable\" (#931)"},{"Id":"455191956","IsPullRequest":true,"CreatedAt":"2019-06-12T13:14:27","Actor":"dotnet-maestro[bot]","Number":"930","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190612.01\r\n- **Date Produced**: 6/12/2019 10:12 AM\r\n- **Commit**: b114db9944f92786a2f5e321827742ca5b4628bf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview7-27812-01\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILDAsm** -> 3.0.0-preview7.19311.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19311.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 3.0.0-preview7.19311.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19311.2 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/930","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#930)"},{"Id":"455006247","IsPullRequest":false,"CreatedAt":"2019-06-12T04:27:49","Actor":"glent1","Number":"929","RawContent":null,"Title":"Duplicated frameworks in runtimeconfig.json","State":"open","Body":"**.NET Core Version:**  \r\n3.0.100-preview7-012361\r\n\r\n**Windows version:**\r\n1803 \r\n\r\n**Does the bug reproduce also in WPF for .NET Framework 4.8?:**\r\nUnlikely\r\n\r\n **Problem description:** \r\nBuild creates a runtimeconfig.json as follows ...\r\n\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.WindowsDesktop.App\",\r\n        \"version\": \"3.0.0-preview7-27811-08\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.WindowsDesktop.App\",\r\n        \"version\": \"3.0.0-preview7-27811-08\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nApplication then fails with Invalid runtimeconfig.json\r\n\r\nEditing and removing the duplication allow the application to run\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/929","RelatedDescription":"Open issue \"Duplicated frameworks in runtimeconfig.json\" (#929)"},{"Id":"454966062","IsPullRequest":false,"CreatedAt":"2019-06-12T01:03:29","Actor":"lindexi","Number":"928","RawContent":null,"Title":"WPF shows that some windows in multithreading will be locked in the PenThreadWorker constructor ","State":"open","Body":"* .NET Core Version: 3.0.100-preview5-011568\r\n* Windows version: 1903 18362.145\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Maybe\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nWPF will initialize pen thread when the window initializing. But I find the window may be locked in PenThreadWorker constructor.\r\n\r\nThe `UnsafeNativeMethods.CreateResetEvent` will lock the thread.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nI use multithreading to create some windows by this code and maybe the thread be locked in PenThreadWorker constructor.\r\n\r\nThe Demo code\r\n\r\n```csharp\r\n    public partial class App : Application\r\n    {\r\n        /// <inheritdoc />\r\n        protected override void OnStartup(StartupEventArgs e)\r\n        {\r\n            var thread = new Thread(() =>\r\n            {\r\n                var mainWindow = new MainWindow();\r\n                mainWindow.Show();\r\n                Dispatcher.Run();\r\n            });\r\n            thread.SetApartmentState(ApartmentState.STA);\r\n            thread.Start();\r\n\r\n            base.OnStartup(e);\r\n        }\r\n    }\r\n```\r\n\r\nThe step\r\n\r\n1. Run the code \r\n\r\n1. Use the VisualStudio to suspend the application\r\n\r\nMaybe you can find the application only create a `Stylus Input` thread and show only a main window and the other main window and the thread be locked in PenThreadWorker constructor and the window can not show\r\n\r\nWhy I need multithreading to show the windows? I need the splash window to show the welcome page and then I should show the main window in other thread to do the bussiness code and I should close the splash window when the main window showed.\r\n\r\nBut I found some users could not show the main window and the main window be lock in PenThreadWorker constructor.\r\n\r\nI use dnspy to suspend the application and find the code run in PenThreadWorker constructor and the `UnsafeNativeMethods.CreateResetEvent` will lock the thread.\r\n\r\n```csharp\r\n PenThreadWorker..ctor()  \r\n PenThread..ctor()  \r\n PenThreadPool.GetPenThreadForPenContextHelper(PenContext penContext)  \r\n PenThreadPool.GetPenThreadForPenContext(PenContext penContext)  \r\n WispTabletDeviceCollection.UpdateTabletsImpl()  \r\n WispTabletDeviceCollection.UpdateTablets()  \r\n WispTabletDeviceCollection..ctor()  \r\n WispLogic.get_WispTabletDevices()  \r\n WispLogic.RegisterHwndForInput(InputManager inputManager, PresentationSource inputSource)  \r\n HwndStylusInputProvider..ctor(HwndSource source)  \r\n HwndSource.Initialize(HwndSourceParameters parameters)  \r\n HwndSource..ctor(HwndSourceParameters parameters)  \r\n\r\n PresentationFramework.dll!System.Windows.Window.CreateSourceWindow(bool duringShow)  \r\n PresentationFramework.dll!System.Windows.Window.CreateSourceWindowDuringShow()  \r\n PresentationFramework.dll!System.Windows.Window.ShowHelper(object booleanBox)  \r\n```\r\n\r\n\r\n\r\n **Expected behavior:**\r\n\r\nThe `UnsafeNativeMethods.CreateResetEvent` do not lock the thread\r\n \r\n **Minimal repro:**\r\n \r\nCreate a empty WPF application and then change the app.xaml.cs code\r\n\r\n```csharp\r\n    public partial class App : Application\r\n    {\r\n        /// <inheritdoc />\r\n        protected override void OnStartup(StartupEventArgs e)\r\n        {\r\n            var thread = new Thread(() =>\r\n            {\r\n                var mainWindow = new MainWindow();\r\n                mainWindow.Show();\r\n                Dispatcher.Run();\r\n            });\r\n            thread.SetApartmentState(ApartmentState.STA);\r\n            thread.Start();\r\n\r\n            base.OnStartup(e);\r\n        }\r\n    }\r\n```\r\n\r\nRun the code and maybe you can find one of the main window can not show and it stop in `UnsafeNativeMethods.CreateResetEvent` and I wait for a hour but it can not run.","Url":"https://github.com/dotnet/wpf/issues/928","RelatedDescription":"Open issue \"WPF shows that some windows in multithreading will be locked in the PenThreadWorker constructor \" (#928)"},{"Id":"454959470","IsPullRequest":false,"CreatedAt":"2019-06-12T00:28:29","Actor":"ojhad","Number":"927","RawContent":null,"Title":"Fix and Re-enable failing Animation Feature Tests","State":"open","Body":"There are a total of 35 test failures in Animation Feature tests. These tests have been disabled as part of the Animation Feature Test port. They need to be fixed and re-enabled.\r\n\r\nHere is the internal PR disabling the tests: [Disabling Failing Animation Tests](https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-test/pullrequest/1626?path=%2Fsrc%2FTest%2FAnimation%2FFeatureTests%2FAnimation%2FAnimationOnElement%2FCode%2FAnimationOnElement.cs&_a=overview)\r\n\r\n**List of disabled tests:**\r\nSubArea: \"Animation.Boundary\" Name: \"BoundaryTest\"\r\nVariation:\r\n\t- ByteAnimation\r\n\t- ColorAnimation\r\n\t- DecimalAnimation\r\n        - DoubleAnimation\r\n\t- Int16Animation\r\n\t- Int32Animation\r\n\t- Int64Animation\r\n\t- Point3DAnimation\r\n\t- QuaternionAnimation\r\n\t- RectAnimation\r\n\t- SingleAnimation\r\n\t- SizeAnimation\r\n\t- ClockController\r\n\t- Vector3DAnimation\r\n\t- VectorAnimation\r\n\t- ThicknessAnimation\r\n\r\nSubArea: \"Animation.PropertyMethodEvent\" Name: \"AnimationOnElementTest\"\r\nVariation:\r\n\t- LINE\r\n\t- BORDER\r\n\t- CANVAS\r\n\t- CHECKBOX\r\n\t- IMAGE\r\n\t- LISTBOX\r\n\t- PATH\r\n\t- RECTANGLE\r\n\t- TABLE\r\n\t- VIEWPORT3D\r\n\t- MEDIAELEMENT\r\n\r\nSubArea: \"Animation.PropertyMethodEvent.Events\" Name: \"CurrentTimeInvalidatedTest\"\r\nVariation:\r\n\t- Color\r\n\t- Double\r\n\t- Double2\r\n\t- Point\r\n\t- Thickness\r\n\r\nSubArea: \"Animation.PropertyMethodEvent.Regressions\" Name: \"BigSpeedRatioTest\"\r\nVariation:\r\n\t- true\r\n\r\nSubArea: \"Animation.PropertyMethodEvent.Regressions\" Name: \"RowSpanZeroTest\"\r\nVariation:\r\n\t- true\r\n\r\nSubArea: \"Storyboards.Triggers.EventTriggers\" Name: \"EventTriggersTest\"\r\nVariation:\r\n\t- ETElement3D-KeyDown.xaml\r\n","Url":"https://github.com/dotnet/wpf/issues/927","RelatedDescription":"Open issue \"Fix and Re-enable failing Animation Feature Tests\" (#927)"},{"Id":"454937343","IsPullRequest":false,"CreatedAt":"2019-06-11T23:24:46","Actor":"SamBent","Number":"925","RawContent":null,"Title":"Fix D3DImage tests","State":"closed","Body":"(Port from .NET 4.8)  Fix broken D3DImage tests:\n\n1. Tests added in Dev11 timeframe aren't run at all, due to a dll name collision.  Rename the newer dll to \"D3DImageTestDev11.dll\".\n2. If the graphics environment isn't rich enough, the tests fail - i.e. return TestResult.Fail.   Change this to  TestResult.Ignore.   The test knows it won't be able to work, through no fault of the test or of the product code.\n3. Include HW acceleration in the environment check.  This avoids meaningless \"failures\" when running the tests over RDP (or other environments that default to software rendering).","Url":"https://github.com/dotnet/wpf/issues/925","RelatedDescription":"Closed issue \"Fix D3DImage tests\" (#925)"},{"Id":"454945427","IsPullRequest":false,"CreatedAt":"2019-06-11T23:23:41","Actor":"SamBent","Number":"926","RawContent":null,"Title":"Fix D3DImage tests","State":"open","Body":"(Port from .NET 4.8)   Fix broken D3DImage tests:\n\n1. Tests added in Dev11 timeframe aren't run at all, due to a dll name collision.  Rename the newer dll to \"D3DImageTestDev11.dll\".\n2. If the graphics environment isn't rich enough, the tests fail - i.e. return TestResult.Fail.   Change this to  TestResult.Ignore.   The test knows it won't be able to work, through no fault of the test or of the product code.\n3. Include HW acceleration in the environment check.  This avoids meaningless \"failures\" when running the tests over RDP (or other environments that default to software rendering).","Url":"https://github.com/dotnet/wpf/issues/926","RelatedDescription":"Open issue \"Fix D3DImage tests\" (#926)"},{"Id":"454936908","IsPullRequest":false,"CreatedAt":"2019-06-11T22:48:54","Actor":"SamBent","Number":"924","RawContent":null,"Title":"Fix Ribbon tests","State":"open","Body":"(Port from .NET 4.8)   Fix broken Ribbon tests:\n\n1. The ImageUtility.GetScreenBoundingRectangle method returns the wrong result when its argument is the root visual - it's off by the size of the non-client area (as it calls ClientToScreen when it shouldn't).   This confuses tests that try to click in the non-client area, e.g. title bar or resize-border.    Fixed this, as well as some futile attempts to work around it.\n2. Several tests do input in ways that rely on pre-existing state (before the test starts), and mistakenly fail if that state is unlucky.  E.g.\n   a. Previous test leaves a dropdown open.   New motion doesn't work (dropdown has capture).\n   b. Window is created near mouse position that causes an unexpected MouseEnter event (or similar)\n3. Math for choosing a new width, to test collapsing by resize, is wrong\n4. Some actions don't do anything when the Ribbon is collapsed.  Tests need to check this.\n5. Ignore failures due to \"known\" product bug - infinite layout loop involving TabHeaders panel and ContextualTabGroups panel.\n6. Scrolling a RibbonTabHeader into view doesn't always work.\n","Url":"https://github.com/dotnet/wpf/issues/924","RelatedDescription":"Open issue \"Fix Ribbon tests\" (#924)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-06-14T05:30:57.5863921Z","RunDurationInMilliseconds":1290}