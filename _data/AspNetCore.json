{"Data":{"Blog":{"FeedItems":[{"Title":"Testing ASP.NET Core MVC web apps in-memory","PublishedOn":"2017-12-07T17:00:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written and submitted by Javier Calvarro Nelson, a developer on the ASP.NET Core MVC team Testing is an important part of the development process of any app. In this blog post...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/12/07/testing-asp-net-core-mvc-web-apps-in-memory/","RawContent":null},{"Title":"Configuring HTTPS in ASP.NET Core across different platforms","PublishedOn":"2017-11-29T17:00:12+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As the web moves to be more secure by default, it&#8217;s more important than ever to make sure your websites have HTTPS enabled. And if you&#8217;re going to use HTTPS in production its a good idea...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/29/configuring-https-in-asp-net-core-across-different-platforms/","RawContent":null},{"Title":"Improve website performance by optimizing images","PublishedOn":"2017-11-28T18:02:29+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We all want our web applications to load as fast as possible to give the best possible experience to the users. One of the steps to achieve that is to make sure the images we use are as optimized as...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/28/improve-website-performance-by-optimizing-images/","RawContent":null},{"Title":"Orchard Core Beta 1 released","PublishedOn":"2017-11-21T19:32:10+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"This is a guest post by Sebastien Ros on behalf of the Orchard community Two years ago, the Orchard community started developing Orchard on .NET Core. After 1,500 commits, 297,000 lines of code, 127...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/21/orchard-core-beta-annoucement/","RawContent":null},{"Title":"Announcing .NET 4.7.1 Tools for the Cloud","PublishedOn":"2017-11-17T17:41:35+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today we are releasing a set of providers for ASP.NET 4.7.1 that make it easier than ever to deploy your applications to cloud services and take advantage of cloud-scale features.  This release...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/17/announcing-net-4-7-1-tools-for-the-cloud/","RawContent":null},{"Title":"Improvements to Azure Functions in Visual Studio","PublishedOn":"2017-11-15T19:00:43+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"We&#8217;re excited to announce several improvements to the Azure Functions experience in Visual Studio as part of the latest update to the Azure Functions tools on top of Visual Studio 2017 v15.5....","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/15/improvements-to-azure-functions-in-visual-studio/","RawContent":null},{"Title":"Creating a Minimal ASP.NET Core Windows Container","PublishedOn":"2017-11-09T16:18:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post by Mike Rousos One of the benefits of containers is their small size, which allows them to be more quickly deployed and more efficiently packed onto a host than virtual machines...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/09/creating-a-minimal-asp-net-core-windows-container/","RawContent":null},{"Title":"Publishing a Web App to an Azure VM from Visual Studio","PublishedOn":"2017-11-01T22:35:42+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We know virtual machines (VMs) are one of the most popular places to run apps in Azure, but publishing to a VM from Visual Studio has been a tricky experience for some. So, we’re pleased to announce...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/01/publishing-a-web-app-to-an-azure-vm-from-visual-studio/","RawContent":null},{"Title":"Recent updates for publishing","PublishedOn":"2017-10-31T18:18:45+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We have recently added a few interesting features for ASP.NET publishing. The updates include: Container Registry Publish Updates Create publish profile without publishing In this post, we will...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/31/recent-updates-for-publishing/","RawContent":null},{"Title":"Sharing Configuration in ASP.NET Core SPA Scenarios","PublishedOn":"2017-10-27T15:17:34+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This is a guest post from Mike Rousos ASP.NET Core 2.0 recently released and, with it, came some new templates, including new project templates for single-page applications (SPA) served from an...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/27/sharing-configuration-in-asp-net-core-spa-scenarios/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6990167915","Type":"IssuesEvent","CreatedAt":"2017-12-14T18:38:57","Actor":"danroth27","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2308","RelatedDescription":"Opened issue \"Improvements to HTTPS\" (#2308) at aspnet/Home","RelatedBody":"## Introduction \r\n\r\n- HTTPS enforcement is becoming increasingly [strict](https://blog.chromium.org/2017/04/next-steps-toward-more-connection.html) on the web\r\n- GDPR requires use of HTTPS\r\n- Developing with HTTPS can help prevent related issues in production\r\n- Setting up HTTPS with Kestrel today requires substantial code and custom configuration\r\n\r\n### Scenarios\r\n* Kestrel with HTTPS during development\r\n* Kestrel with HTTPS as production edge server\r\n* IIS Express with HTTPS during development\r\n* IIS with HTTPS in production\r\n* IIS with HTTPS in development\r\n* Development with HTTPS inside of Docker\r\n* In production with HTTPS inside of Docker\r\n\r\n### Goals\r\n* Minimal/no configuration for development and production\r\n* Single point for configuring HTTPS related features\r\n* Redirect incomming HTTP requests to HTTPS\r\n* Configure [HTTP Strict Transport Security Protocol (HSTS)](https://tools.ietf.org/html/rfc6797)\r\n\r\n### Technical challenges\r\n* Port and certificate discovery. (development/production) (edge server / behind proxy).\r\n* Port and certificate configuration. (development/production) (edge server / behind proxy).\r\n* Certificate management (mostly development).\r\n* Certificate trust (different across platforms).\r\n\r\n## User experience\r\n\r\n### Kestrel with HTTPS during development\r\n* New project created from command-line or VS setup by default for HTTPS\r\n* Listens on both an HTTP and HTTPS address (as specified in `launchSettings.json`)\r\n* Uses ASP.NET Core HTTPS development certificate by default\r\n  - Certificate setup by .NET Core SDK first run experience or by VS when running the project\r\n  - Command-line tool for manually creating and trusting the ASP.NET Core HTTPS development certificate \r\n* Project setup to redirect to HTTPS (port specified using env var)\r\n* Setup with HSTS support (not used in Development environment)\r\n\r\n### Kestrel wtih HTTPS as a production edge server\r\n* Production environment specific config required to specify listening addresses and production HTTPS certificate\r\n  - Configure Kestrel endpoints and certificates using default config schema (setup by default web host builder, takes precedence over server URLs):\r\n    ```json\r\n    {\r\n      \"Kestrel\": {\r\n        \"Endpoints\": {\r\n          \"HTTP\": { \"Url\": \"http://*:6000\" },\r\n          \"HTTPS\": {\r\n            \"Url\": \"https://*:6443\",\r\n            \"Certificate\": {\r\n              \"Path\": \"testCert.pfx\",\r\n              \"Password\": \"testPassword\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    ```\r\n* Absent any configuration, by default Kestrel listens on http://localhost:5000 *and* https://localhost:5001 *if* the default HTTPS certificate is available (i.e. on a dev machine with the .NET Core SDK and the ASP.NET Core HTTPS development certificate installed)\r\n  - The default HTTPS certificate is used for any HTTPS addresses configured as server URLs\r\n  - TODO: Consider providing a way to change the default certificate\r\n* HTTPS redirect to first HTTPS server address (typically 443)\r\n* HSTS enabled in production\r\n\r\n### HTTPS redirection\r\n* New HTTPS redirection extension method (`app.UseHttpsRedirection()`) simplifies redirecting to HTTPS by simplifying the configuration of the HTTPS port\r\n  - Specify the port and redirect status code via options\r\n  - Specify the port via ASPNETCORE_HTTPS_PORT environment variable if not specified via options\r\n* By default redirects to HTTPS server address if the server is listening on only one (throw otherwise), otherwise port 443\r\n\r\n### Enabling HSTS\r\n* New HSTS middleware (`app.UseHsts()`)\r\n* Only active on HTTPS requests\r\n* HSTS options for max age, subdomains, and Chrome's [HSTS preload list](https://hstspreload.org/)\r\n* Typically used only in non-dev scenarios\r\n\r\n### Development from the command-line first run experience\r\n* Run \"dotnet new razor\" or \"dotnet new mvc\"\r\n* The .NET Core SDK installs the ASP.NET Core HTTPS development certificate as part of the first run experience\r\n  - Installation of the HTTPS development certificate can be disabled by setting the DOTNET_SKIP_HTTPS_DEVELOPMENT_CERTIFICATE environment variable to true\r\n* As part of the first run experience, a message is displayed with instructions for trusting the development certificate:\r\n\r\n  ```\r\n  Installed the ASP.NET Core HTTPS development certificate. To trust the ASP.NET Core HTTPS development certificate run \"dotnet dev-certs https --trust\"\r\n  ```\r\n\r\n* Run \"dotnet dev-certs https --trust\" to trust the ASP.NET Core HTTPS development certificate\r\n  - Windows: The certificate is added to the user's trusted root store. Windows displays a UI prompt to confirm the action.\r\n  - Mac: The certificate is added to the user's keychain.\r\n  - Linux: The tool displays an error message: \"The --trust option is not supported on this platform. For details on establishing certificate trust manually see https://go.microsoft.com/fwlink/?linkid=848054.\"\r\n* Run \"dotnet run\"\r\n\r\n### Project template updates\r\n* `launchSettings.json` is generated by default, including from the command-line:\r\n\r\n  ```json\r\n  {\r\n    \"iisSettings\": {\r\n      \"windowsAuthentication\": false,\r\n      \"anonymousAuthentication\": true,\r\n      \"iisExpress\": {\r\n        \"applicationUrl\": \"http://localhost:11199/\",\r\n        \"sslPort\": 44333\r\n      }\r\n    },\r\n    \"profiles\": {\r\n      \"IIS Express\": {\r\n        \"commandName\": \"IISExpress\",\r\n        \"launchBrowser\": true,\r\n        \"environmentVariables\": {\r\n          \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n        }\r\n      },\r\n      \"WebApplication38\": {\r\n        \"commandName\": \"Project\",\r\n        \"launchBrowser\": true,\r\n        \"environmentVariables\": {\r\n          \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        },\r\n        \"applicationUrl\": \"https://localhost:44333;http://localhost:11199\"\r\n      }\r\n    }\r\n  }\r\n  ```\r\n\r\n  - The applicationUrl and sslPort properties result in the ASPNETCORE_URLS and ASPNETCORE_HTTPS_PORT environment variables being set\r\n  - The HTTP and HTTPS ports for all launch profiles should match\r\n  - IIS Express HTTPS port must be in the range 44300-44399\r\n\r\n* `Startup.cs` updated to enable HSTS and HTTPS redirect:\r\n\r\n  ```csharp\r\n  public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n  {\r\n      if (env.IsDevelopment())\r\n      {\r\n          app.UseDeveloperExceptionPage();\r\n      }\r\n      else\r\n      {\r\n          app.UseExceptionHandler(\"/Home/Error\");\r\n          app.UseHsts();\r\n      }\r\n\r\n      app.UseHttpsRedirection();\r\n      app.UseStaticFiles();\r\n\r\n      app.UseMvc(routes =>\r\n      {\r\n          routes.MapRoute(\r\n              name: \"default\",\r\n              template: \"{controller=Home}/{action=Index}/{id?}\");\r\n      });\r\n  }\r\n  ```\r\n\r\n### Certificate missing error\r\n* If an HTTPS server URL is configured, but a certificate is not available an exception with the following error message is thrown:\r\n\r\n  ```\r\n  An HTTPS server URL is configured, but no HTTPS certificate is available. To install the ASP.NET Core HTTPS development certificate run \"dotnet dev-certs https\". For details on configuring HTTPS in production see https://go.microsoft.com/fwlink/?linkid=848054.\r\n  ```\r\n\r\n### IIS Express with HTTPS during development\r\n* No change to IIS Express HTTPS setup - same as exists today\r\n* Uses IIS Express Development Certificate\r\n* VS sets up env var to specify HTTPS port for HTTPS redirection middleware\r\n\r\n### IIS with HTTPS in production\r\n* No change to IIS HTTPS setup - same as exists today\r\n\r\n### Development with HTTPS in Docker\r\n- Docker tools export the ASP.NET Core HTTPS development certificate as a PFX file and mounts the path to the exported certificate\r\n- Docker tools stores the certificate password using the user secrets manager and mounts the path to the user secrets file\r\n- Project Docker Compose overrides file includes environment variables for configuring HTTPS using the exported certificate and for the specifying the HTTPS port. Also port mappings for both HTTP and HTTPS that match `launchSettings.json`.\r\n\r\n### In production with HTTPS in Docker\r\n- Production Docker compose file includes environment variables for configuring the production certificate and ports.\r\n\r\n### HTTPS in Docker details\r\n\r\n#### Runtime\r\n* ASP.NET Core on the docker container will be configured through the new Kestrel configuration system.\r\n* The configuration will be passed as environment variables on the docker-compose.override.yml files and as user secrets mapped from the hosting container.\r\n* We will use an HTTPS certificate that will be provided in a PFX file along with its password (via user secrets).\r\n\r\n#### Tooling\r\n* The docker tools will use the 'dev-certs' tool to generate/trust/export the certificate to use\r\nfor HTTPS into a well-known location and with a password of their choosing.\r\n* The docker tools will use the 'user-secrets' tool to place the password for the certificate in the user secrets\r\nfile for the project under the right key.\r\n* On first run, the docker tooling will perform the above actions to ensure that the certificate is provisioned/trusted/exported to\r\n  the right folder location and that the password used to export the certificate is on the user secrets for the application.\r\n\r\n#### Dockerfile changes\r\n* In addition to exposing port 80 we will also export port 443 for HTTPS connections.\r\n\r\n#### Docker compose changes\r\n* We will add environment variables to configure the endpoints kestrel will listen on and to indicated the path where the certificate will\r\n  be made available inside the container.\r\n* We will define the external ports where we want the container to be listening on and those will match the ones in launchSettings.json\r\n* We will map two paths from the host machine into the container.\r\n    * We will map the user secrets folder on the host machine to the user secrets folder on the container.\r\n    * We will map the folder where we've exported the HTTPS certificate into the folder where we expect the certificate to be found in the container.\r\n\r\n#### Sample docker-compose.overrride.yml\r\n```yml\r\nversion: '3.0'\r\n\r\nservices:\r\n  dockerhttps:\r\n    environment:\r\n      - ASPNETCORE_ENVIRONMENT=Development\r\n      # The name of the variable below does not reflect the actual name\r\n      - ASPNETCORE_URLS=https://*:443;http://*:80\r\n      - ASPNETCORE_HTTPS_PORT=44349\r\n    ports:\r\n      # Both of these ports have been taken from launchSettings.json in the application.\r\n      - \"51217:80\"\r\n      - \"44349:443\"\r\n    volumes:\r\n      - ${APPDATA}/Microsoft/UserSecrets/:/root/.microsoft/usersecrets\r\n      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https/\r\n    \r\nnetworks:\r\n  default:\r\n    external:\r\n      name: nat\r\n```\r\n\r\n[HTTPS project](https://github.com/orgs/aspnet/projects/11)"},{"Id":"6987045778","Type":"IssuesEvent","CreatedAt":"2017-12-14T07:28:33","Actor":"netnr","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2307","RelatedDescription":"Opened issue \"URL\"#\"后面的参数不能取，为什么\" (#2307) at aspnet/Home","RelatedBody":"`http://localhost:60259/joke?#access_token=9609835A25F2010C593706D300BB2C79&expires_in=7776000`\r\n\r\n上面这个请求，在后台（非页面，页面`location.hash`能取）`Request`取`#`后面的值，没有，为什么要忽略`#`后面的参数"},{"Id":"6984839257","Type":"IssuesEvent","CreatedAt":"2017-12-13T19:49:32","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2279","RelatedDescription":"Closed issue \"与System.Net.Http.dll 这个版本4.6.25220.1及 以上版本不兼容\" (#2279) at aspnet/Home","RelatedBody":"与System.Net.Http.dll 这个版本4.6.25220.1及 以上版本不兼容，如果不引用会自动增加 System.Net.Http.dll 4.6.25514.4这个版本，但是在NuGet就没有4.6.25514.4这个版本号；引用了System.Net.Http.dll 这个版本4.6.25220.1及 以上版本会把项目的引用Dll变为感叹号"},{"Id":"6984834825","Type":"IssuesEvent","CreatedAt":"2017-12-13T19:48:36","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2305","RelatedDescription":"Closed issue \"ASP.NET Core Web Application Visual Basic (VB)\" (#2305) at aspnet/Home","RelatedBody":"Any idea on when we will be able to create new projects for ASP.NET Core Web Application using Visual Basic?"},{"Id":"6984830206","Type":"IssuesEvent","CreatedAt":"2017-12-13T19:47:36","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2306","RelatedDescription":"Closed issue \"ASP.NET Core Web Application Visual Basic (VB)\" (#2306) at aspnet/Home","RelatedBody":"_From @tb-mtg on December 12, 2017 3:5_\n\nAny idea on when we will be able to create new projects for ASP.NET Core Web Application using Visual Basic?\n\n_Copied from original issue: dotnet/corefx#25852_"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"6991675876","Type":"IssuesEvent","CreatedAt":"2017-12-15T01:25:02","Actor":"siberianguy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1220","RelatedDescription":"Closed issue \"No transports returned in negotiation response\" (#1220) at aspnet/SignalR","RelatedBody":"I'm trying to connect to SignalR server that is hidden behind CloudFlare. To do that I first make a request using CloudFlareUtilities (it solves js problem) to retrieve a cookie. After that, I specify that cookie and the same Http-Agent to SignalR. The problem is I get a FormatException with a message specified in the title. I'm confused with this error message. So it seems like there's a SignalR server by a specified url but somehow negotiation doesn't go successfully. Can it be relate to the fact that the server is using a full .NET version of SignalR?\r\n\r\n```\r\n            const string userAgent = \"SignalR.Client.NET45/2.2.2.0 (Microsoft Windows NT 6.2.9200.0)\";\r\n\r\n            var requestMessage = new HttpRequestMessage(HttpMethod.Get, \"https://bittrex.com\");\r\n            requestMessage.Headers.TryAddWithoutValidation(\"User-Agent\", userAgent);\r\n\r\n            var cookieContainer = new CookieContainer();\r\n            var client = new HttpClient(new ClearanceHandler(new HttpClientHandler\r\n            {\r\n                CookieContainer = cookieContainer\r\n            }));\r\n\r\n            var response = await client.SendAsync(requestMessage);\r\n\r\n            var hubConnection = new HubConnectionBuilder()\r\n                .WithUrl(\"https://socket.bittrex.com/signalr/Core\")\r\n                .WithConsoleLogger(LogLevel.Trace)\r\n                .WithWebSocketOptions(options =>\r\n                {\r\n                    options.Cookies = cookieContainer;\r\n                    options.SetRequestHeader(\"User-Agent\", userAgent);\r\n                })\r\n                .Build();\r\n\r\n            await hubConnection.StartAsync();\r\n```"},{"Id":"6991262236","Type":"IssuesEvent","CreatedAt":"2017-12-14T22:59:47","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1171","RelatedDescription":"Closed issue \"Make HttpConnection restartable on TypeScript client\" (#1171) at aspnet/SignalR","RelatedBody":""},{"Id":"6991262139","Type":"PullRequestEvent","CreatedAt":"2017-12-14T22:59:46","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1211","RelatedDescription":"Merged pull request \"fix #1171 by teaching HttpConnection to be restartable in TypeScript\" (#1211) at aspnet/SignalR","RelatedBody":"I'm not super happy with the tests, but I don't see a better way to do them without major refactoring. I'll file a new bug to do that refactoring. We're missing a lot of abstractions in the TS client (WebSocket/EventSource aren't abstracted, Long Polling uses XHR directly rather than IHttpClient, etc.)"},{"Id":"6990808241","Type":"IssuesEvent","CreatedAt":"2017-12-14T21:06:06","Actor":"siberianguy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1220","RelatedDescription":"Opened issue \"No transports returned in negotiation response\" (#1220) at aspnet/SignalR","RelatedBody":"I'm trying to connect to SignalR server that is hidden behind CloudFlare. To do that I first make a request using CloudFlareUtilities (it solves js problem) to retrieve a cookie. After that, I specify that cookie and the same Http-Agent to SignalR. The problem is I get a FormatException with a message specified in the title. I'm confused with this error message. So it seems like there's a SignalR server by a specified url but somehow negotiation doesn't go successfully. Can it be relate to the fact that the server is using a full .NET version of SignalR?\r\n\r\n```\r\n            const string userAgent = \"SignalR.Client.NET45/2.2.2.0 (Microsoft Windows NT 6.2.9200.0)\";\r\n\r\n            var requestMessage = new HttpRequestMessage(HttpMethod.Get, \"https://bittrex.com\");\r\n            requestMessage.Headers.TryAddWithoutValidation(\"User-Agent\", userAgent);\r\n\r\n            var cookieContainer = new CookieContainer();\r\n            var client = new HttpClient(new ClearanceHandler(new HttpClientHandler\r\n            {\r\n                CookieContainer = cookieContainer\r\n            }));\r\n\r\n            var response = await client.SendAsync(requestMessage);\r\n\r\n            var hubConnection = new HubConnectionBuilder()\r\n                .WithUrl(\"https://socket.bittrex.com/signalr/Core\")\r\n                .WithConsoleLogger(LogLevel.Trace)\r\n                .WithWebSocketOptions(options =>\r\n                {\r\n                    options.Cookies = cookieContainer;\r\n                    options.SetRequestHeader(\"User-Agent\", userAgent);\r\n                })\r\n                .Build();\r\n\r\n            await hubConnection.StartAsync();\r\n```"},{"Id":"6990759868","Type":"PullRequestEvent","CreatedAt":"2017-12-14T20:55:37","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1219","RelatedDescription":"Opened pull request \"[WIP] Fix flaky WebSocket Transport test\" (#1219) at aspnet/SignalR","RelatedBody":"It's only flaky in travis so I'm opening a PR to play around with some things."},{"Id":"6990315246","Type":"IssuesEvent","CreatedAt":"2017-12-14T19:12:41","Actor":"siberianguy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1215","RelatedDescription":"Closed issue \"Can't find .WithWebSocketOptions()\" (#1215) at aspnet/SignalR","RelatedBody":"I'm trying to initialise connection but .WithWebSocketOptions could not be found:\r\n\r\n```\r\n                var hubConnection = new HubConnectionBuilder()\r\n                        .WithUrl(feedUrl)\r\n                        .WithTransport(TransportType.WebSockets)\r\n                        .WithConsoleLogger(LogLevel.Trace)\r\n                        .WithWebSocketOptions() //this line doesn't compile\r\n                    .Build();\r\n```\r\nIn the source code WithWebSocketOptions lies next to WithUrl, so I'm confused what could be a problem here."},{"Id":"6990161539","Type":"PullRequestEvent","CreatedAt":"2017-12-14T18:37:26","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1218","RelatedDescription":"Opened pull request \"Fix #1170 by removing invocationId from non-blocking calls\" (#1218) at aspnet/SignalR","RelatedBody":"When talking about #1170 we were talking about how it's going to be a performance problem that we serialize Invocations once for each connection involved in a broadcast. However, if we serialize once, we have to update Invocation IDs as they are supposed to be local to the connection. That means that to serialize once we have to use globally-unique IDs (GUIDs).\r\n\r\nHowever, the messages sent from Server to Client are always non-blocking. In a non-blocking message, the sender **never** expects to receive a response. This means that there's no reason for an invocation ID at all. So this PR changes how non-blocking messages are rendered. Instead of using a boolean flag, the presence of `invocationId` will indicate if a message is \"blocking\" and expects a response. This is similar to how [JSON-RPC notifications](http://www.jsonrpc.org/specification#notification) work.\r\n\r\nIn JSON this is represented by simply omitting the `invocationId` parameter. In MsgPack, the `invocationId` value is written as a MsgPack `nil` value. Only the Invocation message is affected as StreamInvocations are always blocking by design.\r\n\r\nSpec update is coming shortly in a commit to this PR."}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"6991342439","Type":"IssuesEvent","CreatedAt":"2017-12-14T23:23:53","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7126","RelatedDescription":"Closed issue \"RenderViewToString does not work when a RazorPage file is rendered as a view\" (#7126) at aspnet/Mvc","RelatedBody":"Here is my PageModel:\r\n![image](https://user-images.githubusercontent.com/5818762/33959656-5874a094-e02f-11e7-8e36-178c44774a17.png)\r\n\r\n```C#    \r\n   public class AccountCreatedSuccessfullyModel : PageModel\r\n    {\r\n        public string Name { get; private set; } = \"Teste\";\r\n        public string Email { get; private set; } = \"Oi\";\r\n\r\n        public AccountCreatedSuccessfullyModel(string name, string email) : base()\r\n        {\r\n\r\n        }\r\n\r\n        public void OnGet()\r\n        {\r\n        }\r\n    }\r\n```\r\n\r\nSo, i try to instantiate it, using 'new' keyword, and it shows that ModelState and RouteData threw exceptions, as image below says:\r\n![image](https://user-images.githubusercontent.com/5818762/33959559-0dd3efcc-e02f-11e7-8b9a-cbf44a6bba29.png)\r\n\r\nThen I get in exception page:\r\n![image](https://user-images.githubusercontent.com/5818762/33959602-312fd7c4-e02f-11e7-9262-aa64f6a28c61.png)\r\n\r\nThe source code can be found at:\r\nhttps://github.com/lucassklp/DefaultArchitecture\r\n\r\nThe steps to reproduce is only trying to get the route /api/account.\r\n\r\nSomeone knows the cause of exception?"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"6990696765","Type":"IssuesEvent","CreatedAt":"2017-12-14T20:40:31","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1529","RelatedDescription":"Closed issue \"Preserve/Copy/Transfer Claims received during external authentication to the \"Identity.Application\" Identity\" (#1529) at aspnet/Identity","RelatedBody":"Hi,\r\n\r\nI need a way to preserve the claims received from the external identity provider when using the WsFederation authentication scheme. \r\n\r\nThe claims received after a successful authentication with the external Identity Provider can not be found in the new \"Identity.Application\" identity created by the SignInManager.ExternalLoginSignInAsync method.\r\n\r\nI'm using the basic ASP.NET Core Web Application project template with the Individual User Accounts authentication option. The WsFederation middleware is configured as follows:\r\n\r\nservices.AddAuthentication()\r\n            .AddWsFederation(options =>\r\n                {\r\n                    options.Wtrealm = \"xxxx\";\r\n                    options.MetadataAddress = \"xxxx\";                    \r\n                })\r\n            .AddCookie();\r\n\r\nThank you"},{"Id":"6990623359","Type":"IssuesEvent","CreatedAt":"2017-12-14T20:22:31","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1503","RelatedDescription":"Closed issue \"IdentityServiceCollectionExtensions ambiguous reference\" (#1503) at aspnet/Identity","RelatedBody":"The type 'IdentityServiceCollectionExtensions' exists in both 'Microsoft.AspNetCore.Identity, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' and 'Microsoft.Extensions.Identity.Core, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'\r\n\r\nJust trying to access IdentityServiceCollectionExtensions class in my project and it throws error. How can I get this class?\r\n"},{"Id":"6990622171","Type":"IssuesEvent","CreatedAt":"2017-12-14T20:22:14","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1508","RelatedDescription":"Closed issue \"Lock user for using invalid credentials in ChangePasswordAsync\" (#1508) at aspnet/Identity","RelatedBody":"Is it possible to add the lockout feature during password change if the currentPassword is not valid? Similar to the lockout during signin (if enabled).\r\n\r\nThx"},{"Id":"6990613316","Type":"IssuesEvent","CreatedAt":"2017-12-14T20:20:05","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1513","RelatedDescription":"Closed issue \"Identity cookie expired for no reason even during active usage\" (#1513) at aspnet/Identity","RelatedBody":"My web app hosted in free azure web app has a strange issue where the user need to re-login again even during active usage\r\n\r\nThe code to login is\r\n```\r\n signInManager.PasswordSignInAsync(username, password, rememberMe, true);\r\n```\r\neven with rememberMe being set to true, user still need to relogin\r\n\r\nSome google said that it could be machine key issue but I don't think azure moved my free instance to anothe machine so often.\r\n\r\nI restarted the instance for to test and the cookie still working.\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/12871379/33262058-463e5d9c-d365-11e7-9850-65ca485a6999.png)\r\n\r\nIf I look to chrome, cookie should expires when browsing session end but that is not the case.\r\n\r\nAt this stage Im not sure where to look other than it could be a bug in identity cookie implementation or its due azure free web instance\r\n"},{"Id":"6990605570","Type":"IssuesEvent","CreatedAt":"2017-12-14T20:18:15","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1515","RelatedDescription":"Closed issue \"saas application as used Identity？\" (#1515) at aspnet/Identity","RelatedBody":"我做的工作是一个saas应用,有一个Site表，通过SiteId区分，我如何使用Identity，达到每一个站点管理对应的用户列表\r\nThe job I'm doing is a saas application with a Site table that distinguishes it by SiteId and how I use Identity to reach the list of users for each site management"},{"Id":"6990601405","Type":"IssuesEvent","CreatedAt":"2017-12-14T20:17:16","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1516","RelatedDescription":"Closed issue \"Change the UserManager context connection string\" (#1516) at aspnet/Identity","RelatedBody":"I am looking for a way to change the DbContext object that is used by the UserManager/SignInManager that is injected into the AccountController.  As far as I can tell, the underlying context is inaccessible from the AccountController.  I am setting up a multitenant website, and as such, I need to switch the identity context per the request.\r\n\r\nAny thoughts?\r\n\r\nI have also asked this question on StackOverflow.  https://stackoverflow.com/questions/47516358/changing-asp-net-core-2-0-identity-connection-string-in-controller/47521556"},{"Id":"6990577740","Type":"IssuesEvent","CreatedAt":"2017-12-14T20:11:37","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1528","RelatedDescription":"Closed issue \"UserManager does not follow DI rules / Can't decorate IUserStore\" (#1528) at aspnet/Identity","RelatedBody":"The [UserManager](https://github.com/aspnet/Identity/blob/87bbff65867710b5a49265fdf09de4a6d539ac8d/src/Microsoft.Extensions.Identity.Core/UserManager.cs#L66) requires an `IUserStore<TUser>` as constructor paramter. But somewhere in [code](https://github.com/aspnet/Identity/blob/87bbff65867710b5a49265fdf09de4a6d539ac8d/src/Microsoft.Extensions.Identity.Core/UserManager.cs#L2277) the store will be casted as `IUserEmailStore<TUser>`. \r\n\r\nThe problem is I can't simply replace/decorate the IUserStore<TUser> interface because my implemenation should also implement\r\n\r\n* IUserPasswordStore<TUser>\r\n* IUserLoginStore<TUser>\r\n* IUserClaimStore<TUser>\r\n* IUserSecurityStampStore<TUser>\r\n* IUserEmailStore<TUser>\r\n* IUserLockoutStore<TUser>\r\n* IUserPhoneNumberStore<TUser>\r\n* and some more..\r\n\r\nSo this is not a good DI pattern.\r\n\r\nI want to decorate the IUserStore in order to implement a little caching mechanism for the user access."},{"Id":"6990564690","Type":"IssuesEvent","CreatedAt":"2017-12-14T20:08:28","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1530","RelatedDescription":"Closed issue \"Detect if an external authentication provider was used at sign in or not\" (#1530) at aspnet/Identity","RelatedBody":"Hi,\r\n\r\nIs there any way to tell after login if the current user was signing in by using the regular authentication flow or an external authentication provider?\r\n\r\nThank you"},{"Id":"6990532149","Type":"IssuesEvent","CreatedAt":"2017-12-14T20:00:59","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1510","RelatedDescription":"Closed issue \"谁能解释一下为什么用户管理可以批量添加Claim而角色管理却不能呢？\" (#1510) at aspnet/Identity","RelatedBody":"谁能解释一下为什么用户管理可以批量添加Claim而角色管理不能呢？\r\n这个是bug还是有什么特别的考虑？\r\n\r\n![1111](https://user-images.githubusercontent.com/12002799/33108460-2f962ae4-cf77-11e7-939b-72bb9a9e69cf.png)\r\n![2222](https://user-images.githubusercontent.com/12002799/33108461-2fc9c070-cf77-11e7-8018-65fdf457fe19.png)\r\n"},{"Id":"6990520997","Type":"IssuesEvent","CreatedAt":"2017-12-14T19:58:27","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1523","RelatedDescription":"Closed issue \"WinHttpException: A security error occurred\" (#1523) at aspnet/Identity","RelatedBody":"asp.net core 2 external authentication is throwing the following exception on production server only: `WinHttpException: A security error occurred\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Threading.Tasks.RendezvousAwaitable.GetResult()\r\nSystem.Net.Http.WinHttpHandler+<StartRequest>d__105.MoveNext()\r\n\r\nHttpRequestException: An error occurred while sending the request.\r\nMicrosoft.AspNetCore.Authentication.RemoteAuthenticationHandler+<HandleRequestAsync>d__12.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Authentication.AuthenticationMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n\r\nthis is occurring after a successful authentication on the external site (ALL of them google,facebook,linkedin). \r\n \r\ndid anyone encounter this? or know how to fix this?\r\n\r\nthank you"},{"Id":"6990436591","Type":"IssuesEvent","CreatedAt":"2017-12-14T19:39:32","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1527","RelatedDescription":"Closed issue \"IdentityServer3 based SSO server does not connect with ASP.net Core 2.0 based client\" (#1527) at aspnet/Identity","RelatedBody":"IdentityServer3 based SSO server does not work with ASP.net CORE based client, we have been migrating our product from MVC 5 to ASP.net core 2.0 and have noticed that SSO server failed to provide login page.\r\n\r\nThis is request i have got from MVC 5 based application, which uses OWIN middle ware\r\n\r\n```\r\n\r\n app.UseCookieAuthentication(new CookieAuthenticationOptions\r\n            {\r\n                AuthenticationType = \"Cookies\"\r\n            });\r\n\r\n            app.UseOpenIdConnectAuthentication(new OpenIdConnectAuthenticationOptions\r\n            {\r\n                Authority = configurationSettings.AuthorityUri,\r\n                ClientId = configurationSettings.ClientId,\r\n                RedirectUri = configurationSettings.BaseUri,\r\n                ResponseType = \"id_token token\",\r\n                Scope = \"openid api\",\r\n                SignInAsAuthenticationType = \"Cookies\",\r\n                UseTokenLifetime = false\r\n}\r\nidentity/connect/authorize?client_id=XXXX\r\n&redirect_uri=XXXXXXXXXXXXXXXXXXX\r\n&response_mode=form_post&response_type=id_token+token&scope=openid+api&state=OpenIdConnect.AuthenticationProperties%3dwFuNqQIdG7E9axIWsGRaxqn8Aikv4B839r1HfWPm57n9RZ5Ig8BK-r2WuNclpcGZr0Ch2GThSpZ53ShE1zBESfxrSHts_I2iLYfTCvBa0Kd-uRueov-NpXDJOh39yh_f-h8TMcCXRe9S3cvE2eWp64dqJLJZM8EqBsW77b-keS3SvTB2KU0X7NqW-VGdI2StBn0y4kiWg9mZseGS4chgsA&nonce=636483566187911271.OTVmNDY1NGQtZDgxZS00ZjllLThjYzQtYjVkNGYxMGM5ZGZhZGI4MzMyYjctMTBiNi00OGQ3LThmOWItNGExNTc5OGFiYTA4\r\n\r\n```\r\n\r\nThis is request from ASP.net CORE 2.0\r\n\r\n```\r\n\r\n services.AddAuthentication(sharedOptions =>\r\n            {\r\n                sharedOptions.DefaultAuthenticateScheme = OpenIdConnectDefaults.AuthenticationScheme;\r\n                sharedOptions.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n                sharedOptions.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;\r\n                \r\n            }).AddCookie()\r\n              .AddOpenIdConnect( options =>\r\n            {\r\n                //   options.AutomaticChallenge = true;\r\n                options.Authority = configurationSettings.AuthorityUri;\r\n                options.ClientId =configurationSettings.ClientId;\r\n                options.ResponseType = OpenIdConnectResponseType.IdTokenToken;\r\n                options.Scope.Add(\"openid api\");\r\n                options.SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n                options.UseTokenLifetime = false;\r\n                options.CallbackPath = new PathString(\"/\");\r\n                options.GetClaimsFromUserInfoEndpoint = true;\r\n      }\r\n\r\nidentity/connect/authorize?\r\nclient_id=XXXXX\r\n&redirect_uri=XXXXXXXXXXXXX &response_type=code\r\n&scope=openid%20api\r\n&response_mode=form_post\r\n&nonce=636483740666280555.NDA3ZGRjZDQtNTdjNS00NjFiLTllOTYtMDc0MjE2NzhkMzQ5NmFiMzU0ZTQtMDIxOS00ODI5LWI4NWEtYTRiMDYzMTFmYjJi&state=CfDJ8AqnlI2Cn3FJtTEVow2y5i5Kt7x-JhPHvqlWGUu6jOxJQQiBB53rtgKV7_nXM4zY0MbzFPQUuONdoyEmX61bexqlAmbTmpEnVC5CHkr41q4b6e3_JtWTBaCOa3vT1_vCNNnIS6lQW3RH4nV-SQ5PUyVr2IzMO3feVRrkS-NLnLAuUXyKSR3gk0LtuzESq_xQ0dtdrjnWr5-dbCyOvG0p3vFhlaQeKyT55q2jZyM4sO0T7B524l6ICz2cKEVLdR6VU2RpjqV_UAlwM7i9Mm7yo_kbCBbtaOOZDWjDVj6XDop0YUmYJhMLGnlXWVBjD87vmg\r\n&x-client-SKU=ID_NET&x-client-ver=2.1.4.0\r\n```\r\n\r\n\r\nSo I wrote the test version of IdentityServer4 based SSO, which works fine with ASP.net CORE.\r\n\r\nIs there any defect with ASP.net CORE OpenIDConnect handler?\r\n\r\nwas there any underlying implementation has been changed to support backward compatibles? \r\n"},{"Id":"6986668142","Type":"IssuesEvent","CreatedAt":"2017-12-14T05:06:26","Actor":"papyr","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1532","RelatedDescription":"Opened issue \"Under Membership, please support Groups/tenants for SAAS apps memberships\" (#1532) at aspnet/Identity","RelatedBody":"This feature is _incorrectly_ named, its supposed to be `Membership `- \r\nWith so many SaaS apps. \r\n\r\nASP is so far behind, **leaving out membership components for groups/tenants** (with the turn of a switch/configurable).\r\n\r\n![image](https://user-images.githubusercontent.com/12733414/33976237-76f7e198-e061-11e7-9f3b-dc21bcb3ee8c.png)\r\n\r\nMany will argue its not membership, however - a group/company similar to users, i.e. it also has access/features/roles/components enabled at the group level for e.g. free/pro/premium. \r\n\r\nIMHO it is a subset of membership. This has not been properly addressed and been punted for a very long time. Further - this is an aspect/AOA of the systems authorization and security, that's commons to many SaaS apps/developers, impeding the rolls out of SaaS apps. Many are reinventing the wheel."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"6991495790","Type":"PullRequestEvent","CreatedAt":"2017-12-15T00:16:18","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2221","RelatedDescription":"Opened pull request \"Call Listen after Bind in tests\" (#2221) at aspnet/KestrelHttpServer","RelatedBody":"#2210"},{"Id":"6988833281","Type":"IssuesEvent","CreatedAt":"2017-12-14T14:21:23","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2218","RelatedDescription":"Closed issue \"No UWP support on IoT Core\" (#2218) at aspnet/KestrelHttpServer","RelatedBody":"Trying to build a Windows IoT Core Background Application that has an AspNetCore web server using MVC. None of the  publicly available servers work for this, but I kind of expected kestrel to, since it is the \"cross-platform\" option.\r\n\r\nOne option is to run AspNetCore apps as a standalone Exe on IoT Core. But this removes the ability to communicate to any low level devices like serial ports.\r\n\r\nAnother option is to create a custom server that implements HttpListener. But that's a lot of work and I'm not sure which downstream Asp.Net features may suffer."},{"Id":"6986481918","Type":"IssuesEvent","CreatedAt":"2017-12-14T03:44:08","Actor":"KyleGobel","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2219","RelatedDescription":"Closed issue \"Very slow in kubernetes environment\" (#2219) at aspnet/KestrelHttpServer","RelatedBody":"I have a problem I've been struggling with for a couple weeks now.\r\n\r\nI run a couple pretty thin API dotnet core projects in kubernetes.  Some of these (it almost seems hit or miss), are unbelievably slow to start up.  It takes normally more than 5 minutes before my first health check passes.\r\n\r\nAfter that most requests will timeout for another couple minutes and finally maybe after 10 - 15 min it will finally start to run fine. \r\n\r\nThis is most noticeable with database connections.  All database connection open calls will timeout for the first 10 minutes or so, after they've been warmed up or called a few times they will finally start to work.\r\n\r\nAt startup I will frequently get a bunch of these these messages:\r\n```\r\n[15:00:18 WRN] Heartbeat took longer than \"00:00:01\" at \"12/13/2017 15:00:15 +00:00\".\r\n```\r\n\r\nI could use some debugging help, are there any hunches of what the problem **could** be?  Is there anything I can and should be checking?  Any logs or metrics I can provide that might narrow down my problem?\r\n\r\n\r\n**Environment**\r\n---------\r\n - Kubernetes cluster running on AWS provisioned with kops.\r\n- 1x c4.large master \r\n- 3x c4.xlarge instance sizes \r\n- base docker image of aspnetcore:2.0.3.  Problem exists in both jessie and stretch variants.  Also tried custom ubuntu image (though basically copied from the dotnet-runtime docker images)\r\n\r\nNot memory/cpu/network constrained as far as I can tell.  I've tried on new nodes and also new clusters\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"6991707648","Type":"PullRequestEvent","CreatedAt":"2017-12-15T01:37:04","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1832","RelatedDescription":"Opened pull request \"Make error sink depend on RazorDiagnostic instead of RazorError\" (#1832) at aspnet/Razor","RelatedBody":"#1827 \r\n\r\nProgress...\r\n\r\n@mkArtakMSFT "},{"Id":"6991554930","Type":"PullRequestEvent","CreatedAt":"2017-12-15T00:38:48","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1831","RelatedDescription":"Opened pull request \"Use DefaultRazorDiagnostic in DefaultDirectiveSyntaxTreePass\" (#1831) at aspnet/Razor","RelatedBody":"#1827 \r\n\r\nThis is just one of many usages that must be moved. Just sent this one first to make sure every one is on the same page as to what needs to be done. More PRs will follow this one.\r\n\r\nFYI @mkArtakMSFT "},{"Id":"6990389299","Type":"IssuesEvent","CreatedAt":"2017-12-14T19:29:03","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1789","RelatedDescription":"Closed issue \"Implement Mac version of Microsoft.VisualStudio.LanguageServices.Razor.\" (#1789) at aspnet/Razor","RelatedBody":"- [x] Add `MonoDevelop.Core` and `MonoDevelop.Ide` dependencies.\r\n- [x] Expose Razor binaries to MEF composition in Mac world.\r\n- [x] Implement `ErrorReporter`\r\n- [x] Implement `ForegroundDispatcher`\r\n- [x] Implement `VisualStudioWorkspaceAccessor`\r\n- [x] Implement `DefaultBraceSmartIndenterFactory`\r\n- [x] Remove `Microsoft.VisualStudio.Language.IntelliSense` dependency from `Microsoft.VisualStudio.Editor.Razor`\r\n- [x] Implement `DefaultVisualStudioRazorParserFactory`\r\n- [x] Implement `DefaultVisualStudioDocumentTrackerFactory`\r\n- [x] Implement `DefaultFileChangeTrackerFactory`\r\n- [x] Implement `DefaultTextBufferProjectService`\r\n- [x] Implement `RazorEditorFactoryService`\r\n- [x] Implement `TagHelperResolver`"},{"Id":"6990386985","Type":"PullRequestEvent","CreatedAt":"2017-12-14T19:28:31","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1823","RelatedDescription":"Merged pull request \"Add VS agnostic non-OOP DefaultTagHelperResolver.\" (#1823) at aspnet/Razor","RelatedBody":"- Added tests for the VisualStudio.Editor tag helper resolver.\r\n\r\n#1789 \r\n\r\nFYI @mkArtakMSFT "}],"ResultType":"GitHubEvent"},"Templates":{"Events":[{"Id":"6760798601","Type":"IssuesEvent","CreatedAt":"2017-10-24T22:00:58","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/67","RelatedDescription":"Closed issue \"External Logins does not set the Email\" (#67) at aspnet/Templates","RelatedBody":"- Enable Facebook Login\n- Login using Facebook for the first time\n- Email field is blank. It should be set from what we got from Facebook\n"},{"Id":"6760789807","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:58:48","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/86","RelatedDescription":"Closed issue \"Identity: Consider less generic name for ManageController\" (#86) at aspnet/Templates","RelatedBody":"Manage is a very generic name and you would probably expect http://abcdefg/Manage to be about managing something from your applications business domain rather than user accounts.\n\nManageAccount would probably be a better name.\n"},{"Id":"6760785159","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:57:37","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/115","RelatedDescription":"Closed issue \"Need more templates\" (#115) at aspnet/Templates","RelatedBody":"MVC 6 project templates should include a test project template. And the main ASP.NET 5 Preview Templates / Web Application or ... / Empty templates should have a few more sub-options, enabling for example addition and removal of XML support, creation of a minimal MVC project, or adding in EF (without choosing Individual User Accounts authentication).\n\nHopefully this will allow the new project dialogue to enable the options shown below -- plus a few options specific to MVC 6.\n![disabled project features](https://cloud.githubusercontent.com/assets/6431421/8257821/2a76a606-1665-11e5-8e75-cdb21473f6a1.png)\n"},{"Id":"6760779940","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:56:18","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/104","RelatedDescription":"Closed issue \"OrgAuth: Account Controller should return void\" (#104) at aspnet/Templates","RelatedBody":"Since https://github.com/aspnet/Mvc/issues/2409 is fixed. We should change the AccountController for SSO/ MultiOrg to return void\n"},{"Id":"6760777806","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:46","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/120","RelatedDescription":"Closed issue \"Template feedback\" (#120) at aspnet/Templates","RelatedBody":"Porting from MVC repo https://github.com/aspnet/Mvc/issues/2637\n"},{"Id":"6760775251","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:10","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/137","RelatedDescription":"Closed issue \"Need a SPA template\" (#137) at aspnet/Templates","RelatedBody":""},{"Id":"6760770959","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:54:08","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/365","RelatedDescription":"Closed issue \"Poor user and dev experience in Identity email confirmation\" (#365) at aspnet/Templates","RelatedBody":"There are two issues using the default template for identity when using email confirmation.\n\nFollowing the guide here: http://docs.asp.net/en/latest/security/authentication/accconfirm.html\n\nPoor user experience: When you click \"Register\" it sends the email off, but just redirects the user to the Home controller. Redirecting to something else to indicate they have to confirm their account would be a better example. Perhaps the default template should have such a view OOTB.\n\nPoor dev experience: When logging in with an external account (lets say Facebook) if the account doesn't exist you get thrown into AccountController.ExternalLoginConfirmation, great. This screen requires an email, so you complete the registration then you're logged in but never shoots off the email confirmation link here. Perhaps a commented out section in this action to deal with this would improve the dev experience here.\n"},{"Id":"6760770378","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:59","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/382","RelatedDescription":"Closed issue \"MVC Template Should Apply ResponseCache Attribute to Error Action\" (#382) at aspnet/Templates","RelatedBody":"HomeController.Error() should be updated:\n\n```\n    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]\n    public IActionResult Error()\n    {\n        return View();\n    }\n```\n\nThere is no good scenario where you would want errors to be cached, either on the client or via a proxy, or to have error information stored in such caches (especially if it might contain sensitive information in stack traces, etc.).\n"},{"Id":"6760769801","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:51","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/406","RelatedDescription":"Closed issue \"Add a flow for changing email in the Manage page\" (#406) at aspnet/Templates","RelatedBody":"Porting from ASP.NET Identity repo https://github.com/aspnet/Identity/issues/727\n"},{"Id":"6760769204","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:42","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/423","RelatedDescription":"Closed issue \"Don't create Project_Readme.html for ASP.NET 5 Empty\" (#423) at aspnet/Templates","RelatedBody":"I created an empty project for both ASP.NET 4 and ASP.NET 5. The ASP.NET 5 project had a Project_Readme.html and the ASP.NET 4 one did not. I'm not aware if that was on purpose or not, but we should be consistent with the empty projects. I think we should not add the Project_Readme.html for all Empty projects.\n"},{"Id":"6760768174","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:28","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/444","RelatedDescription":"Closed issue \"Support On-Premises option for Work & School Accounts\" (#444) at aspnet/Templates","RelatedBody":"Support this for Web APIs and Web Apps.\n"},{"Id":"6760767634","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:19","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/451","RelatedDescription":"Closed issue \"ValidationSummary.All should be replaced with ModelOnly\" (#451) at aspnet/Templates","RelatedBody":"All the views in the Accounts folder use\n`<div asp-validation-summary=\"ValidationSummary.All\" class=\"text-danger\"></div>`\n\nThey should just use \n`<div asp-validation-summary=\"ValidationSummary.ModelOnly\" class=\"text-danger\"></div>`\n\nSo you get each error twice. \n\n![image](https://cloud.githubusercontent.com/assets/3605364/13896326/ae916ee2-ed2b-11e5-8bf5-f9ad5246e82c.png)\n"}],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"6856182602","Type":"PullRequestEvent","CreatedAt":"2017-11-15T02:15:11","Actor":"Andrew-MSFT","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Merged pull request \"Re adding\" (#1064) at aspnet/Tooling","RelatedBody":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end..."},{"Id":"6856061013","Type":"PullRequestEvent","CreatedAt":"2017-11-15T01:32:45","Actor":"cristy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Opened pull request \"Re adding\" (#1064) at aspnet/Tooling","RelatedBody":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end..."},{"Id":"6855974819","Type":"PullRequestEvent","CreatedAt":"2017-11-15T01:03:13","Actor":"Andrew-MSFT","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Merged pull request \"Webapp landing page\" (#1063) at aspnet/Tooling","RelatedBody":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make."},{"Id":"6855941091","Type":"PullRequestEvent","CreatedAt":"2017-11-15T00:52:40","Actor":"cristy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Opened pull request \"Webapp landing page\" (#1063) at aspnet/Tooling","RelatedBody":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6909206856","Type":"IssuesEvent","CreatedAt":"2017-11-27T20:34:10","Actor":"pranavkm","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/282","RelatedDescription":"Opened issue \"aspnetcore-ci-*, aspnetcore-volatile-* feeds being deprecated\" (#282) at aspnet/Announcements","RelatedBody":"As part of some of our infrastructural changes, we're discontinuing the use of the following feeds and may remove them entirely in the future:\r\n* https://dotnet.myget.org/f/aspnetcore-ci-dev \r\n* https://dotnet.myget.org/f/aspnetcore-ci-release\r\n* https://dotnet.myget.org/f/aspnetcore-volatile-dev\r\n* https://dotnet.myget.org/f/aspnetcore-volatile-release\r\n\r\nIf you're currently using one of these feeds in your projects to pick up our daily builds, we recommend migrating to https://dotnet.myget.org/f/aspnetcore-dev.\r\n\r\nPlease use this discussion topic - https://github.com/aspnet/Home/issues/2292 - for feedback and questions. "},{"Id":"6854180246","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:26","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/279","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-8700: CORS bypass can enable Information Disclosure\" (#279) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8700 CORS Bypass can enable Information Disclosure\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in some public versions of ASP.NET Core where Cross-Origin Resource Sharing (CORS) can be bypassed, leading to information disclosure.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 2.0.0 or higher are not vulnerable.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Mvc.Core | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.5\r\nMicrosoft.AspNetCore.Mvc.Cors | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.5\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\nNote: As part of patching ASP.NET Core MVC we update every Microsoft.AspNetCore.Mvc.* package. If, for example, you have a dependency on `Microsoft.AspNetCore.Mvc` you should update to the appropriate version first (1.0.x should be updated to 1.0.4, 1.1.x should be updated to 1.1.3), and it will also update any other vulnerable ` Microsoft.AspNetCore.Mvc` dependency.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\n**Note**: If you are using ASP.NET Core MVC in your projects you should first update the `Microsoft.AspNetCore.Mvc` version to the fixed version in the table above. If you are currently using version 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4 or 1.0.5  you should update your package version to 1.0.6. If you are using version 1.1.0, 1.1.1, 1.1.2, 1.1.3 or 1.1.4 you should update your package version to 1.1.5. This will update every MVC package to the fixed versions.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.1\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.Kestrel` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Core` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a single direct dependency, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single package `Microsoft.AspNetCore.Mvc.Core` version 1.1.5.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.1.3.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Cors` to 1.1.5.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Cors\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors`, version 1.1.4 you would add a reference to the appropriate fixed version, 1.1.5.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Cors\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-8700](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8700)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6854178775","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:10","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/278","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability\" (#278) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability \r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where the application is hosted through Windows Http,Sys where a malformed request can lead to a Denial Of Service.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications hosted using Kestrel as their web server are not affected. By default ASP.NET Core Web applications are hosted with Kestrel. Developers must make specific decisions to switch to using HTTP.SYS.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.WebListener | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3 | 1.0.6<br />1.1.5\r\nMicrosoft.AspNetCore.Server.HttpSys | 2.0.0 |  2.0.2\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.6\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.WebListener` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Server.WebListener` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Server.WebListener` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a two direct dependencies, as seen by the two `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. The example shows a direct reference to the vulnerable package `Microsoft.AspNetCore.Server.WebListener` version 1.1.1.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Cors` to 1.1.5.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Server.WebListener` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Server.WebListener` version 1.1.0 you would add a reference to the appropriate fixed version 1.1.3.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11883](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11883)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6854177980","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:01","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/277","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege\" (#277) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege \r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability some public versions of ASP.NET Core where an Open Redirect exists, leading to Elevation Of Privilege.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 1.0.x or 1.1.x are not affected.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.0.0 |  2.0.1\r\nMicrosoft.AspNetCore.Mvc.Core | 2.0.0 |  2.0.1\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\nIf you are targeting .NET Core a \"meta-package\" is used, `Microsoft.AspNetCore.All`. You should begin by updating its version number to 2.0.1, this will pull in the fixed `Microsoft.AspNetCore.Mvc.Core` package.\r\n\r\nIf you are targeting .NET Framework you should first update the `Microsoft.AspNetCore` version to the version number to 2.0.1, then adjust the version number for any other packages beginning with `Microsoft.AspNetCore.` to 2.0.1.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – Projects targeting .NET Core\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has has a reference to the vulnerable metapackage, as seen by the single `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update to the fixed package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.All` to 2.0.1.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### Fixing Direct Dependencies – Projects targeting .NET Framework\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has has a reference a single packages, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.Core` version 2.0.0.\r\n\r\nTo update to the fixed package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.Core` to 2.0.1.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers a direct reference to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 2.0.0 when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.assets.json` file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Core` version 2.0.0 you would add a reference to the fixed version, 2.0.1.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11879:](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11879)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853300618","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:26:01","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/281","RelatedDescription":"Closed issue \"Reserved\" (#281) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"941295101271212032","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/aG5z9e5Rgr","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"941015999809249280","CreatedAt":"2017-12-13T18:44:32+00:00","UserScreenname":"aspnet","Text":"Join @csharpfritz in about 15 minutes on Mixer or Twitch for a two-hour LIVE .NET CODING session where he will answ… https://t.co/OC1nGXILjO","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"938192857902354432","CreatedAt":"2017-12-05T23:46:22+00:00","UserScreenname":"aspnet","Text":"We're live for the #ASPNET Community Standup now at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"938163679614214144","CreatedAt":"2017-12-05T21:50:26+00:00","UserScreenname":"aspnet","Text":"Join us for the #aspnet Community Standup today at 3:45 PM Pacific time - https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":6,"RawContent":null},{"Id":"931580871378964481","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"aspnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/itxdVWOnG5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":37,"FavoriteCount":7,"RawContent":null},{"Id":"917884946324250624","CreatedAt":"2017-10-10T22:49:59+00:00","UserScreenname":"aspnet","Text":"The #aspnet Community Standup starts now - https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":9,"RawContent":null},{"Id":"917877107904036865","CreatedAt":"2017-10-10T22:18:50+00:00","UserScreenname":"aspnet","Text":"Join us in a half hour (3:45 PM Pacific) for this week's #aspnet Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"915262407743647744","CreatedAt":"2017-10-03T17:08:57+00:00","UserScreenname":"aspnet","Text":"We're live at https://t.co/4Ioo9jNSN2 for the exciting #SignalR deep dive. Join us now!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":22,"RawContent":null},{"Id":"915242491774869504","CreatedAt":"2017-10-03T15:49:49+00:00","UserScreenname":"aspnet","Text":"Join us for some #SignalR Core demos at 10 AM PDT (UTC-7) on #ASPNET Community Standup w/ SignalR dev @moozzyk.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":56,"FavoriteCount":26,"RawContent":null},{"Id":"912821323675529216","CreatedAt":"2017-09-26T23:28:57+00:00","UserScreenname":"aspnet","Text":"This week's community links from the #ASPNET Community Standup https://t.co/M37VVhlzcZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":8,"RawContent":null},{"Id":"912799120355581952","CreatedAt":"2017-09-26T22:00:43+00:00","UserScreenname":"aspnet","Text":"Join us at 3:45 PM Pacific (UTC+8) for the #ASPNET Community Standup. #dotNetConf recap, @SignalR and more.\nhttps://t.co/sgzsUBZksP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null}]}},"RunOn":"2017-12-15T05:30:14.2401358Z","RunDurationInMilliseconds":12278}