{"Data":{"Blog":{"FeedItems":[{"Title":"Lose the Cables: Make Deploying to an iOS or tvOS Device Easier","PublishedOn":"2018-02-02T19:59:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One thing most developers consistently do during app development is deploy to a testing device. One main drawback during this process is the struggle to find a cable, connect it to a computer, plug it...","Href":"https://blog.xamarin.com/lose-cables-make-deploying-ios-tvos-device-easier/","RawContent":null},{"Title":"Just Push Play: Using Google Play on an Android Emulator","PublishedOn":"2018-02-01T20:22:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The needs of an Android developer using the Android emulator continuously expand. The latest emulator development from Google provides a system image for the Google Play Store, which includes a fully...","Href":"https://blog.xamarin.com/just-push-play-using-google-play-android-emulator/","RawContent":null},{"Title":"Xamarin Developer Events in February","PublishedOn":"2018-01-31T19:26:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you haven&#8217;t started working on your new year&#8217;s resolutions yet, we have the perfect solution: get out there and start building on your mobile app development education by networking...","Href":"https://blog.xamarin.com/xamarin-developer-events-february/","RawContent":null},{"Title":"Webinar Recording | Xamarin University Presents: Ship Better Apps with Visual Studio App Center","PublishedOn":"2018-01-30T19:53:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this pre-recorded webinar, Mark Smith, Director of Xamarin University, shows you how to automate your app development pipeline with Visual Studio App Center, walking through how to connect your app...","Href":"https://blog.xamarin.com/webinar-recording-xamarin-university-presents-ship-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Android Emulator Quick Boot","PublishedOn":"2018-01-29T19:41:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android Emulator version 27.0.2 now includes a feature called Quick Boot, which launches the emulator in just a few seconds. For Quick Boot to work, your AVD must perform a cold boot on its first time...","Href":"https://blog.xamarin.com/android-emulator-quick-boot/","RawContent":null},{"Title":"First Look: Xamarin Android Device Manager Preview","PublishedOn":"2018-01-25T19:45:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the release of SDK Tools 26, Google replaced the standalone UI for the SDK and Device Manager with a command line interface. In an effort to make Android component management accessible and easy...","Href":"https://blog.xamarin.com/first-look-xamarin-android-device-manager-preview/","RawContent":null},{"Title":"Better Resource Organization in Xamarin.Forms","PublishedOn":"2018-01-23T19:28:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Resource Dictionary is a foundational building block to all Xamarin.Forms mobile development. It&#8217;s the primary vehicle for declaring XAML resources youâ€™ll use throughout your mobile application,...","Href":"https://blog.xamarin.com/better-resource-organization-xamarin-forms/","RawContent":null},{"Title":"The What, Why, and How of Mobile DevOps with Visual Studio App Center","PublishedOn":"2018-01-22T18:52:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With constant operating system releases, ever-shifting user expectations, and new form factors launching every year, making sure your apps are high-quality, take advantage of the latest technology,...","Href":"https://blog.xamarin.com/mobile-devops-visual-studio-app-center/","RawContent":null},{"Title":"Running Xamarin.iOS Unit Tests in Visual Studio Team Services","PublishedOn":"2018-01-19T18:32:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In previous posts, we&#8217;ve discussed how to set up continuous integration for your Xamarin.iOS applications inside Visual Studio Team Services(VSTS) using the new Hosted macOS Agent. Building the...","Href":"https://blog.xamarin.com/running-xamarin-ios-unit-tests-visual-studio-team-services/","RawContent":null},{"Title":"The Xamarin Show: Getting Started with iOS Development in C#","PublishedOn":"2018-01-18T18:54:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you&#8217;re looking to get started with iOS development, there&#8217;s no better place to look than our amazing Xamarin.iOS documentation guides. They cover each and every topic that you can...","Href":"https://blog.xamarin.com/the-xamarin-show-getting-started-with-ios-development-in-c-sharp/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7192307442","Type":"PullRequestEvent","CreatedAt":"2018-02-03T02:02:57","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1271","RelatedDescription":"Opened pull request \"[build] Use .csproj files, not .mdproj files\" (#1271) at xamarin/xamarin-android","RelatedBody":"(The extension is a lie!)\r\n\r\nCommit 6fd330df lists the ideal build scenario:\r\n\r\n> Load Xamarin.Android.sln into your IDE and Build the project.\r\n\r\nWe're not there yet.\r\n\r\nWhat *prevents* that? In part, the *existence* of `.mdproj` files.\r\nWhile `msbuild`-at-the-command-line doesn't care about project\r\nextensions, *Visual Studio* **does***. Thus, the presence of `.mdproj`\r\nfiles results in Visual Studio showing an \"(incompatible)\" message\r\nnext to the project, and it refuses to load the project.\r\n\r\nImprove things by renaming all `.mdproj` files to `.csproj` files, and\r\nthen adding a `$(TargetFrameworkVersion)` value to each of them (as\r\nVisual Studio requires `$(TargetFrameworkVersion)` in order to load\r\nthe project file).\r\n\r\nWith these two changes -- change extension, set\r\n`$(TargetFrameworkVersion)` -- Visual Studo 2017 will load all of the\r\nprojects in the solution without showing the \"(incompatible)\" message.\r\n\r\nNote: Visual Studio caches project state within the `.vs` directory\r\n(stored in the toplevel checkout directory). If `Xamarin.Android.sln`\r\nhas been previously loaded into Visual Studio, you will need to do one\r\nof the following to allow Visual Studio to load the projects:\r\n\r\n 1. Right-click the project within the Solution Explorer, then click\r\n    Reload. Repeat for all such projects. Or,\r\n 2. Exit Visual Studio, and delete the `.vs` folder. When Visual\r\n    Studio next loads the project, the projects will load."},{"Id":"7192083520","Type":"PullRequestEvent","CreatedAt":"2018-02-03T00:10:09","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1270","RelatedDescription":"Opened pull request \"Fix build with msbuild on Linux\" (#1270) at xamarin/xamarin-android","RelatedBody":"XA's Makefile exports the OS environment variable set to output of the `uname -s` \r\ncommand which returns the operating system's name. On macOS it will return\r\n`Darwin`, on Linux `Linux` etc. MSBuild (the build system, not the command)\r\ndefines a standard property `$(OS)` which names the operating system kind -\r\n`Windows_NT` on Windows and `Unix` on *nix systems.\r\n\r\nOur project and target files (also a large set of them from e.g. Mono) use the\r\nproperty to check whether they are running on Unix or Windows and they rely on\r\nthe property's value to be set correctly to make the right decisions.\r\nMSBuild (the system) supports setting of properties from the command line but it\r\nalso takes their values from the process environment. However, it appears\r\nthere's a major difference between Mono's xbuild (which is used by default by\r\nXA) and msbuild in that xbuild \"protects\" the `OS` property by NOT using the\r\nOS environment property to set its value, while msbuild sets the property from\r\nthe environment variable. This results in the property to have the value of\r\n`Darwin` on macOS and `Linux` on Linux and it happens to work (more or less)\r\ncorrectly on macOS because we do check for `'$(OS)' == 'Darwin' or '$(OS)' == 'Unix')` \r\nin a few places while we do NOT check for `'$(OS)' == 'Linux')`\r\nanywhere. All this together breaks XA build on Linux in a few places.\r\n\r\nThis patch makes the msbuild build (`make MSBUILD=msbuild`) to work on Linux by\r\nrenaming the Make `$(OS)` variable to `$(CURRENT_OS)` and thus \"protecting\" the\r\nstandard value of the `$(OS)` property during the build."},{"Id":"7191607002","Type":"IssuesEvent","CreatedAt":"2018-02-02T21:43:37","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1269","RelatedDescription":"Opened issue \"Add GetAndroidDependencies Target\" (#1269) at xamarin/xamarin-android","RelatedBody":"We need to add a `GetAndroidDependencies` target which will output an `@(AndroidDependency)` with `%(AndroidDependency.Version)` metadata.\r\n\r\nValid component names are:\r\n\r\n* platform\r\n* build-tool\r\n* platform-tool\r\n* tool\r\n\r\n"},{"Id":"7190182297","Type":"PullRequestEvent","CreatedAt":"2018-02-02T16:24:49","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1239","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] missing EmbeddedResource.LogicalName for __AndroidLibraryProjects__\" (#1239) at xamarin/xamarin-android","RelatedBody":"Fixes #1235\r\n\r\nThere seems to be a bug in msbuild [1] where if you create\r\nan item inside a task and the task is skipped, the metadata\r\nis not created for the item.\r\n\r\nSo we get into a situation where our `__AndroidLibraryProjects__.zip`\r\ndoes not contain the correct LogicalName. As a result our\r\nextraction process cannot find the resource, and builds fail.\r\n\r\nThis commit spits out the code that created the zip file into\r\nits own target `_CreateManagedLibraryResourceArchive`. This means\r\nwe can skip this new target it needed. However the target\r\nwhich creates the item `_AddLibraryProjectsEmbeddedResourceToProject`\r\ncan now run for every build. This will ensure that the metadata is\r\nalways created.\r\n\r\nAlso added a unit test.\r\n\r\n[1] https://social.msdn.microsoft.com/Forums/netframework/en-US/259271d8-a3fc-4a9b-9e3a-fecad8f6f63f/potential-bug-with-createitem-task-and-additionalmetadata?forum=msbuild"},{"Id":"7190182281","Type":"IssuesEvent","CreatedAt":"2018-02-02T16:24:48","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1235","RelatedDescription":"Closed issue \"Issues with incremental build of resources (missing EmbeddedResource.LogicalName for __AndroidLibraryProjects__)\" (#1235) at xamarin/xamarin-android","RelatedBody":"Sorry, no clear steps to reproduce. Problem happens after various incremental builds.\r\n\r\n`_AddLibraryProjectsEmbeddedResourceToProject` creates an `EmbeddedResource`:\r\n\r\n```\r\nTask \"CreateItem\" (TaskId:5014)\r\n  Task Parameter:Include=obj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip (TaskId:5014)\r\n  Task Parameter:AdditionalMetadata=LogicalName=__AndroidLibraryProjects__.zip (TaskId:5014)\r\n  Output Item(s): \r\n      EmbeddedResource=\r\n          obj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip\r\n                  LogicalName=__AndroidLibraryProjects__.zip (TaskId:5014)\r\n```\r\n\r\nHowever, if `_AddLibraryProjectsEmbeddedResourceToProject` inputs/outputs are already up to date, it will add it without the `LogicalName`:\r\n```\r\n5>Skipping target \"_AddLibraryProjectsEmbeddedResourceToProject\" because all output files are up-to-date with respect to the input files.\r\n5>Input files: C:\\DEV\\xenko2\\sources\\engine\\SiliconStudio.Xenko.Engine\\obj\\Android-OpenGLES\\res\\layout\\game.xml\r\n5>Output files: obj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip\r\n```\r\nresult:\r\n```\r\nEmbeddedResource=\r\n    obj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip\r\n            OriginalItemSpec=obj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip\r\n            TargetPath=obj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip\r\n```\r\n\r\nThen, `CreateCSharpManifestResourceName` ends up creating a `LogicalName` which contains the root namespace:\r\n```\r\nobj\\Android-OpenGLES\\__AndroidLibraryProjects__.zip\r\n    LogicalName=SiliconStudio.Xenko.obj.Android_OpenGLES.__AndroidLibraryProjects__.zip\r\n```\r\n\r\nAs a result, `ResolveLibraryProjectImports` from Xamarin can't find the expected `__AndroidLibraryProjects__.zip` file since it has another name.\r\nResources collides and it results in a runtime crash when loading resource.\r\n"},{"Id":"7190142259","Type":"PullRequestEvent","CreatedAt":"2018-02-02T16:17:17","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1245","RelatedDescription":"Closed pull request \"set MONO_ANDROID_PATH environment variable with msbuild path of the Vâ€¦\" (#1245) at xamarin/xamarin-android","RelatedBody":"â€¦S instance `$(VsInstallRoot)\\MSBuild\\Xamarin\\Android`"},{"Id":"7190120830","Type":"PullRequestEvent","CreatedAt":"2018-02-02T16:13:12","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1253","RelatedDescription":"Merged pull request \"[Tasks] Add aot to the list of valid profilers\" (#1253) at xamarin/xamarin-android","RelatedBody":"With this change it is possible to build an apk containing `aot`\r\nprofiler module (libmono-profiler-aot.so shared library) and profile\r\nthe app with it. It can enabled by setting `mono.debug.profile`\r\nproperty to `aot` on the device or emulator.\r\n\r\nNote that the `aot` profiler saves the data during the mono\r\nruntime shutdown. So one way (only way?) to get the data is to call\r\n`System.Environment.Exit` to end the XA app. Currently  there is\r\nan issue with Java.Interop, where during the shutdown we get\r\nan unhandled exception and thus the shutdown process doesn't\r\nfinish, which means the profile output is not written to the file.\r\nHopefully I can fix that soon."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7194275192","Type":"PullRequestEvent","CreatedAt":"2018-02-04T02:18:26","Actor":"adrianknight89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1791","RelatedDescription":"Opened pull request \"Small refactoring on LogicalChildrenInternal\" (#1791) at xamarin/Xamarin.Forms","RelatedBody":"### Bugs Fixed ###\r\n\r\n- #1591 \r\n"},{"Id":"7194125357","Type":"IssuesEvent","CreatedAt":"2018-02-04T00:11:01","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1740","RelatedDescription":"Closed issue \"[UWP] ViewModel Destructor never call when custom view and ListView are having same ItemSoure.\" (#1740) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\n\r\nIn that while using only Listview in the view its working perfectly. While using custom view only in the view working perfectly. \r\nThe issue occur only custom view and ListView are in the same view and having same ItemSource.\r\n\r\nusing customView and test it with the  PerformanceProfiler only one instance of ViewModel is in memory. Compiling to release mode also looks better. It could be that the issue happends only in debug mode. Memory consumption are very important for us.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the sample.\r\n2. Click the button continuously.\r\n3. See the output the destructor never call.  \r\n\r\n### Expected Behavior\r\nNeed to call the viewModel destructor properly .\r\n\r\n### Actual Behavior\r\nDestructor is never called.\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"7193855292","Type":"IssuesEvent","CreatedAt":"2018-02-03T20:58:28","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1790","RelatedDescription":"Opened issue \"[UWP] Calling Display Alert from Windows Assigned Access causes app to crash\" (#1790) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nIf an app is opened via a share target then Xamarin Forms crashes when checking IsInvokedRequired\r\n\r\n```\r\n\t\tpublic bool IsInvokeRequired => LockApplicationHost.GetForCurrentView() != null\r\n\t\t\t? !CoreApplication.GetCurrentView().Dispatcher.HasThreadAccess\r\n\t\t\t: !CoreApplication.MainView.CoreWindow.Dispatcher.HasThreadAccess;\r\n```\r\n\r\nSee screen shot for exception\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Run the attached reproduction\r\n2. Close the app\r\n3.  share something of content type \"TEXT\" to the app .  I was just using the MAP app and sharing from there\r\n\r\nThe code calls DisplayAlert from the *OnShareTargetActivated* override on uwp.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin Forms: 2.5.0.122203 \r\n- IDE: VS 2017\r\n- Platform Target Frameworks:\r\n  - UWP:  16299 \r\n\r\n\r\n\r\n### Expected Behavior\r\nThe app should Display the Alert and not crash\r\n\r\n### Actual Behavior\r\n\r\nThe app crashes\r\n\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n![image](https://user-images.githubusercontent.com/5375137/35771375-068c30f2-08e9-11e8-933c-317f1e948dd0.png)\r\n\r\n\r\n### Reproduction Link\r\n\r\n[App4.zip](https://github.com/xamarin/Xamarin.Forms/files/1692178/App4.zip)"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7192176548","Type":"IssuesEvent","CreatedAt":"2018-02-03T00:51:57","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3383","RelatedDescription":"Closed issue \"`SceneKit.SCNPhysicsWorld.ConvexSweepTest` method doesn't work properly\" (#3383) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Download a project\r\n2. Open a `Fox2.Shared/Character.cs` file and look at the line 787. Put a breakpoint to the line 789.\r\n3. Run the project\r\n4. Run forward using control on the bottom left corner. \r\n\r\n### Expected Behavior\r\nThe `ConvexSweepTest` method return collision contacts.\r\n\r\n### Actual Behavior\r\nThe `ConvexSweepTest` method doesn't return anything. Output is empty.\r\n\r\n### Environment\r\n\r\n- https://gist.github.com/mykyta-bondarenko-gl/eb7a5511ea20a0de790cb582da3b0768\r\n\r\n### Build Logs\r\n\r\n- Device log (when method should returns collisions)\r\n https://gist.github.com/mykyta-bondarenko-gl/3d8d97263787d6503ea008bb6272f286\r\n\r\n### Frequency of Reproduction\r\n\r\nHappens every time\r\n\r\n### Example Project \r\n\r\n[Link to the project](https://github.com/mykyta-bondarenko-gl/private-samples/tree/fox-2-scenekit/ios11/Fox2)\r\n"},{"Id":"7191996383","Type":"PullRequestEvent","CreatedAt":"2018-02-02T23:36:09","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3388","RelatedDescription":"Opened pull request \"[generator] Teach generator about WrapAttribute on Getters and Setters\" (#3388) at xamarin/xamarin-macios","RelatedBody":"https://bugzilla.xamarin.com/show_bug.cgi?id=57870\r\n\r\n`WrapAttribute` can now be used in property getters and setters,\r\nthis allows to Wrap virtually anything the way you need, for example\r\nsmart enums, consider the following API definition:\r\n\r\n```csharp\r\n// Smart enum.\r\nenum PersonRelationship {\r\n\t[Field (null)]\r\n\tNone,\r\n\r\n\t[Field (\"FMFather\", \"__Internal\")]\r\n\tFather,\r\n\r\n\t[Field (\"FMMother\", \"__Internal\")]\r\n\tMother\r\n}\r\n```\r\n\r\n```csharp\r\n// Property definition.\r\n\r\n[Export (\"presenceType\")]\r\nNSString _PresenceType { get; set; }\r\n\r\nPersonRelationship PresenceType {\r\n\t[Wrap (\"PersonRelationshipExtensions.GetValue (_PresenceType)\")]\r\n\tget;\r\n\t[Wrap (\"_PresenceType = value.GetConstant ()\")]\r\n\tset;\r\n}\r\n```"},{"Id":"7191228780","Type":"IssuesEvent","CreatedAt":"2018-02-02T20:10:56","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3371","RelatedDescription":"Closed issue \"[XI] ImageInverterExtn app displays a blank app on simulator \" (#3371) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n 1. Download and open https://developer.xamarin.com/samples/monotouch/ios8/ImageInverter/ImageInverter.zip\r\n2. Set iOS Deployment target to 11.0 or higher in both main and extension app\r\n3. Set Extension App as startup project and rebuild the project\r\n4. Deploy it in iOS simulator \r\n5. Open ImageInverter app in iOS simulator \r\n6. Enable ImageInverterExtn App in it\r\n\r\n\r\n### Expected Behavior\r\nImageInverterExtn App should launch in iOS Simulator and Image should\r\nbe Inverted\r\n \r\n### Actual Behavior\r\nBlank screen is displayed when ImageInverterExtn loaded \r\nScreencast: https://www.screencast.com/t/BweketBj\r\n\r\n### Environment\r\n\r\nVSFM:  https://gist.github.com/parasAmbhore/a5207b50c330667ed6acd6393e3c5def\r\nVS for windows: https://gist.github.com/parasAmbhore/e51d16f2541d49850a0a5277806cce00\r\n\r\n### Build Logs\r\n\r\n[VSFM_logs.zip](https://github.com/xamarin/xamarin-macios/files/1683392/VSFM_logs.zip)\r\n\r\n\r\n### Regression: from d15-4\r\nThis issue was reported in VSTS  against VS for windows for d15-5, BUGID https://devdiv.visualstudio.com/DevDiv/_workitems/edit/510257. Since it is reproducible in both VSFMac and VS for Windows filing it against XI. \r\n"},{"Id":"7191142098","Type":"PullRequestEvent","CreatedAt":"2018-02-02T19:50:52","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3384","RelatedDescription":"Merged pull request \"Bump mono to 2010-10 head\" (#3384) at xamarin/xamarin-macios","RelatedBody":"This fix https://github.com/xamarin/xamarin-macios/issues/3241 on master (already bumped on 15.6)\n\nCommit list for mono/mono:\n\n* mono/mono@38502063cac Revert \"[mini] Align stack when resuming to catch handler\" (#6744)\n* mono/mono@3c3e692887a Bump linker\n\nDiff: https://github.com/mono/mono/compare/ab882c0c3decfaa2e2d71b85404ce35328a2a99d...38502063cac0b9c258af2c59dce9cd2d0a12b4d1"},{"Id":"7191142093","Type":"IssuesEvent","CreatedAt":"2018-02-02T19:50:52","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3241","RelatedDescription":"Closed issue \"link sdk test crashes on release/device in RuntimeWrappedException\" (#3241) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n```shell\r\nmake run-ios-dev32-linksdk -C tests CONFIG=Release\r\n```\r\n\r\n### Expected Behavior\r\n\r\nNo crash\r\n\r\n### Actual Behavior\r\n\r\nCrash report: https://gist.github.com/rolfbjarne/02653b55d353fa27a43b9aa5a5dc83e8\r\n\r\nTerminal doesn't show anything interesting: https://gist.github.com/rolfbjarne/0850220eca6bc18632882eca27c23eee\r\n### Environment\r\n\r\nThis happens both with master and d15-6, but only in release mode on device."},{"Id":"7191101733","Type":"PullRequestEvent","CreatedAt":"2018-02-02T19:41:47","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3387","RelatedDescription":"Opened pull request \"[mmp] Add stripping of 32-bit dylibs to work with new App Store restrictions\" (#3387) at xamarin/xamarin-macios","RelatedBody":"- https://github.com/xamarin/xamarin-macios/issues/3367\r\n- Required some test work that might be more obvious by themselves. We can squash when landing."},{"Id":"7190727587","Type":"PullRequestEvent","CreatedAt":"2018-02-02T18:18:54","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3386","RelatedDescription":"Opened pull request \"[registrar] Register models in the static registrar.\" (#3386) at xamarin/xamarin-macios","RelatedBody":"This means we need to quiet a few types of warnings:.\n\n* Models declares virtual methods of required protocol members. We don't\n  export virtual methods (only when they're overridden are they exported),\n  which results in numerous warnings about protocol members not being\n  implemented:\n\n        Xamarin.Mac.registrar.mobile.x86_64.m:37827:17: warning: method 'deviceBrowserView:selectionDidChange:' in protocol 'IKDeviceBrowserViewDelegate' not implemented [-Wprotocol]\n        @implementation ImageKit_IKDeviceBrowserView__IKDeviceBrowserViewDelegate {\n                        ^\n        /Applications/Xcode92.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Quartz.framework/Frameworks/ImageKit.framework/Headers/IKDeviceBrowserView.h:29:1: note: method 'deviceBrowserView:selectionDidChange:' declared here\n        - (void)deviceBrowserView: (IKDeviceBrowserView *)deviceBrowserView selectionDidChange: (ICDevice *)device;\n\n* These two are the same as above, just for properties instead of methods.\n\n        Xamarin.Mac.registrar.mobile.x86_64.m:31988:17: warning: auto property synthesis will not synthesize property 'boundingMapRect' declared in protocol 'MKOverlay' [-Wobjc-protocol-property-synthesis]\n        @implementation MKOverlay {\n                        ^\n        /Applications/Xcode92.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/MapKit.framework/Headers/MKOverlay.h:24:43: note: property declared here\n        @property (nonatomic, readonly) MKMapRect boundingMapRect;\n                                                  ^\n        Xamarin.Mac.registrar.mobile.x86_64.m:32002:1: note: add a '@synthesize' directive\n        @end\n        ^\n\n        Xamarin.Mac.registrar.mobile.i386.m:28957:17: warning: property 'repeatCount' requires method 'repeatCount' to be defined - use @synthesize, @dynamic or provide a method implementation in this class implementation [-Wobjc-property-implementation]\n        @implementation CAMediaTiming {\n                        ^\n        /Applications/Xcode92.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/QuartzCore.framework/Headers/CAMediaTiming.h:58:17: note: property declared here\n        @property float repeatCount;\n                ^\n\nIt also means we have to special-case (to skip)\nAVCaptureDataOutputSynchronizer[Delegate] in the registrar for macOS.\n\nThis class and protocol were incorrectly added to our macOS bindings, but\nsince we can't remove them because it would break backwards compatibility, we\nmust skip them manually in the registrar, since the registrar would otherwise\nproduce uncompilable code:"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"959520671754850304","CreatedAt":"2018-02-02T20:15:29+00:00","UserScreenname":"xamarinhq","Text":"Make deploying to an iOS or tvOS device easier with Wireless Deployment and our new Unlock Device Alert: https://t.co/DKgtjGzPfo","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":37,"FavoriteCount":14,"RawContent":null},{"Id":"959469971301691392","CreatedAt":"2018-02-02T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Add beautiful charts to ANY app with #MicroCharts from guest blogger @aloisdeniel: https://t.co/VeqfS1vfIL https://t.co/qc6cGwoxhK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":83,"FavoriteCount":23,"RawContent":null},{"Id":"959164072196526085","CreatedAt":"2018-02-01T20:38:29+00:00","UserScreenname":"xamarinhq","Text":"Just push playâ€”using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/kmW8uIDW80","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":16,"RawContent":null},{"Id":"959109618067738624","CreatedAt":"2018-02-01T17:02:06+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDgfF2Z https://t.co/xYx6fUVhML","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":8,"RawContent":null},{"Id":"958788443647152136","CreatedAt":"2018-01-31T19:45:53+00:00","UserScreenname":"xamarinhq","Text":"Help ensure a productive 2018 with #Xamarin developer events near you this February: https://t.co/9aPslPGW2O https://t.co/zRGM0lEoZe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":7,"RawContent":null},{"Id":"958747709963415552","CreatedAt":"2018-01-31T17:04:01+00:00","UserScreenname":"xamarinhq","Text":"Supercharge your Xamarin.Mac app startup time: https://t.co/JzwELyF3Tm https://t.co/xLDqS3Z9sI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":19,"RawContent":null},{"Id":"958386328797884416","CreatedAt":"2018-01-30T17:08:01+00:00","UserScreenname":"xamarinhq","Text":"Explore Augmented Reality for #XamarinAndroid with #ARCore, featuring motion tracking, plane detection, and more:â€¦ https://t.co/JOLj1szAol","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":14,"RawContent":null},{"Id":"958065243565051904","CreatedAt":"2018-01-29T19:52:08+00:00","UserScreenname":"xamarinhq","Text":"Check out Android Emulator version 27.0.2, now featuring \"Quick Boot\" to launch the emulator in just a few seconds:â€¦ https://t.co/75XbYDGg8m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":222,"FavoriteCount":119,"RawContent":null},{"Id":"958020024941334528","CreatedAt":"2018-01-29T16:52:27+00:00","UserScreenname":"xamarinhq","Text":"Build a meeting scheduling mobile app using #XamarinForms and the Microsoft Graph API: https://t.co/LsMgiFD20d https://t.co/QvuhUZfhAd","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":80,"FavoriteCount":27,"RawContent":null},{"Id":"957782606992543745","CreatedAt":"2018-01-29T01:09:02+00:00","UserScreenname":"xamarinhq","Text":"Making iOS 11 even easier with #XamarinForms: https://t.co/nIDGNXGuF1 https://t.co/6qXhuCMSDp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":47,"FavoriteCount":17,"RawContent":null},{"Id":"957415179091873792","CreatedAt":"2018-01-28T00:49:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to publish to #Azure from #VS4Mac: https://t.co/wnNmElsQrM https://t.co/DdxYLvB9ap","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":16,"RawContent":null},{"Id":"956935518746546177","CreatedAt":"2018-01-26T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Add large titles to your iOS 11 apps in this post from @conceptdev: https://t.co/RDyk6GDVUU https://t.co/WlylY4fcZS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":19,"FavoriteCount":5,"RawContent":null},{"Id":"956616920408772610","CreatedAt":"2018-01-25T19:57:01+00:00","UserScreenname":"xamarinhq","Text":"Get your first look at the #Xamarin Android Device Manager Preview: https://t.co/4cTyPaFfMb https://t.co/uKkOHzbp3U","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":35,"RawContent":null},{"Id":"956570118569496576","CreatedAt":"2018-01-25T16:51:03+00:00","UserScreenname":"xamarinhq","Text":"Our @XamarinU webinar on automating the lifecycle of your iOS, Android, Windows, and macOS apps with #VSAppCenter iâ€¦ https://t.co/XuCIwVEtIh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":12,"RawContent":null},{"Id":"956210745984856064","CreatedAt":"2018-01-24T17:03:02+00:00","UserScreenname":"xamarinhq","Text":"Don't miss our @XamarinU webinar tomorrow (1/25) on automating the lifecycle of your iOS, Android, Windows, and macâ€¦ https://t.co/eKFBikD0kM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":12,"RawContent":null},{"Id":"955887729816035328","CreatedAt":"2018-01-23T19:39:28+00:00","UserScreenname":"xamarinhq","Text":"Learn how to merge multiple resource dictionaries in the most recent stable release of #XamarinForms for even greatâ€¦ https://t.co/lYtHCJ9q5V","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":80,"FavoriteCount":33,"RawContent":null},{"Id":"955846589817479170","CreatedAt":"2018-01-23T16:56:00+00:00","UserScreenname":"xamarinhq","Text":"Native Android Facebook Authentication with Azure App Service https://t.co/DAcKpYLHe5","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":11,"RawContent":null},{"Id":"955516166373560322","CreatedAt":"2018-01-22T19:03:01+00:00","UserScreenname":"xamarinhq","Text":"Check out the what, why, and how of Mobile #DevOps with #VSAppCenter in this special guest series from @gshackles:â€¦ https://t.co/fClbh5B47i","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":27,"RawContent":null}]}},"RunOn":"2018-02-04T05:30:36.5034546Z","RunDurationInMilliseconds":3921}