{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core May 2018 Update","PublishedOn":"2018-05-08T22:31:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2018 Update. This update includes .NET Core 2.1.200 SDK and ASP.NET Core 2.0.8. Security Microsoft is releasing this security advisory to provide information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/","RawContent":null},{"Title":".NET Framework May 2018 Security and Quality Rollup","PublishedOn":"2018-05-08T21:18:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Security and Quality Rollup. Security CVE-2018-1039 – Windows Security Feature Bypass Vulnerability A security feature bypass vulnerability exists in Windows which...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.7","PublishedOn":"2018-05-08T18:22:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We’re excited to share updates about changes to F# and F# tools which shipped with the Visual Studio 2017 version 15.7 release. Let’s dive in! Type Providers now support .NET Standard For those who...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/f-language-and-tools-update-for-visual-studio-2017-version-15-7/","RawContent":null},{"Title":"Introducing ML.NET: Cross-platform, Proven and Open Source Machine Learning Framework","PublishedOn":"2018-05-08T00:41:28+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today at //Build 2018, we are excited to announce the preview of ML.NET, a cross-platform, open source machine learning framework. ML.NET will allow .NET developers to develop their own models and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 RC 1","PublishedOn":"2018-05-07T18:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are excited to announce that the first release candidate of EF Core 2.1 is available, alongside .NET Core 2.1 RC 1 and ASP.NET Core 2.1 RC 1, for broad testing, and now also for production...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-entity-framework-core-2-1-rc-1/","RawContent":null},{"Title":".NET Core 3 and Support for Windows Desktop Applications","PublishedOn":"2018-05-07T15:40:04+00:00","CommentsCount":174,"FacebookCount":0,"Summary":"At Microsoft Build Live today, we are sharing a first look at our plans for .NET Core 3. The highlight of .NET Core 3 is support for Windows desktop applications, specifically Windows Forms, Windows...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/","RawContent":null},{"Title":"Announcing .NET Core 2.1 RC 1","PublishedOn":"2018-05-07T15:39:20+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 2.1 Release Candidate 1 (RC 1). The .NET Core 2.1 RC 1 is now ready for broad testing and for production use. Our quality, reliability, and performance testing...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":50,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":75,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":48,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7640755266","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:32:51","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Opened pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""},{"Id":"7640750127","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:31:03","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/101","RelatedDescription":"Opened pull request \"Create mlnet.md\" (#101) at dotnet/home","RelatedBody":""},{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7644965785","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:03:40","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to ASP.NET Core 2.0.8.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to 2.0.8 to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_"},{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7647517258","Type":"PullRequestEvent","CreatedAt":"2018-05-09T04:32:16","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17855","RelatedDescription":"Merged pull request \"Update arm/arm64 test lists\" (#17855) at dotnet/coreclr","RelatedBody":"Update test list files with new tests that we were building, but did not run on arm.\r\n\r\n`JIT\\HardwareIntrinsics\\X86` tests are excluded except one.\r\n\r\nThis PR allows me to finish adding ILGen tests for arm64(#17759).\r\n\r\nSummary:\r\nfor arm32 490 tests were added (354 were excluded as `JIT\\HardwareIntrinsics\\X86`),\r\nfor arm64 489 tests were added (354 were excluded as `JIT\\HardwareIntrinsics\\X86`)."},{"Id":"7647372479","Type":"PullRequestEvent","CreatedAt":"2018-05-09T03:33:21","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17923","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx to preview1-02808-01, preview1-26509-01, preview1-26509-01, respectively (master)\" (#17923) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7647366167","Type":"PullRequestEvent","CreatedAt":"2018-05-09T03:30:55","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17926","RelatedDescription":"Merged pull request \"Rename mscorlib to System.Private.Corelib\" (#17926) at dotnet/coreclr","RelatedBody":"cc: @jkotas @safern @danmosemsft \r\n\r\nFixes: #17905"},{"Id":"7647366154","Type":"IssuesEvent","CreatedAt":"2018-05-09T03:30:55","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17905","RelatedDescription":"Closed issue \"Rename coreclr\\src\\mscorlib directory to coreclr\\src\\System.Private.CoreLib\" (#17905) at dotnet/coreclr","RelatedBody":"See #9474. This will reduce confusion: as the work continues to unify more and more code in the two corelibs, it makes sense for the directory name to reflect this. Also, it reflects the rename we did from mscorlib for 1.0.\r\n\r\n@maryamariyan you'll just need to do this and find everything that breaks. (Not just in the repo - eg., the mirror)"},{"Id":"7647034836","Type":"PullRequestEvent","CreatedAt":"2018-05-09T01:29:30","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17928","RelatedDescription":"Opened pull request \"Reduce allocation in StringBuilder marshaling\" (#17928) at dotnet/coreclr","RelatedBody":"When marshaling back results for a StringBuilder argument in a P/Invoke:\r\n- for UTF8 it's allocating a new char[], pinning it, and then handing that off to StringBuilder.ReplaceBufferInternal, which itself then allocates a new char[], and all of that happens even if the StringBuilder's char[] is already big enough to handle the results, which is commonly the case due to the StringBuilder having been sized appropriately from the get-go.\r\n- for both Unicode and Ansi, it's similarly allocating a new char[] invariably, even if the existing buffer is already sufficient.\r\n\r\nThis commit cleans that up.\r\n\r\nWhile ideally we wouldn't use StringBuilders at all in coreclr/corefx for marshaling, we still do in some places, e.g. Dns.GetHostName.  While we should separately fix that to avoid using a StringBuilder at all, it's useful to demonstrate the impact of the change here:\r\n```C#\r\n[Benchmark]\r\npublic static string GetHostName() => Dns.GetHostName();\r\n```\r\non my machine results in:\r\n```\r\n      Method |     Mean |    Error |   StdDev |  Gen 0 | Allocated |\r\n------------ |---------:|---------:|---------:|-------:|----------:|\r\n Before      | 145.1 ns | 2.923 ns | 3.801 ns | 0.2668 |   1.09 KB |\r\n After       | 103.0 ns | 2.142 ns | 2.859 ns | 0.1392 |     584 B |\r\n```\r\n\r\ncc: @jkotas, @JeremyKuhne, @vancem"},{"Id":"7646906061","Type":"PullRequestEvent","CreatedAt":"2018-05-09T00:39:29","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17927","RelatedDescription":"Opened pull request \"Update CoreClr, CoreFx to rtm-26508-04, rtm-26508-03, respectively (release/2.1)\" (#17927) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7647422774","Type":"IssuesEvent","CreatedAt":"2018-05-09T03:52:52","Actor":"yaakov-h","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9233","RelatedDescription":"Opened issue \"Explicitly run first-time experience\" (#9233) at dotnet/cli","RelatedBody":"Hi,\r\n\r\nI'm automating the creation of virtual machines that will be used as build servers.\r\n\r\nAfter installing the .NET Core SDK through the Visual Studio 2017 Installer, the first-time experience does not appear to be run. Thus, on the first build that happens on that server, that build includes the first-run experience.\r\n\r\nSince my build process attempts to build multiple projects in parallel, various instances of `dotnet` choke over the first-use sentinel when attempting concurrent writes:\r\n\r\n```\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core @ https://aka.ms/dotnet-docs. Use dotnet --help to see available commands or go to https://aka.ms/dotnet-cli-docs.\r\n\r\nTelemetry\r\n--------------\r\nThe .NET Core tools collect usage data in order to improve your experience. The data is anonymous and does not include command-line arguments. The data is collected by Microsoft and shared with the community.\r\nYou can opt out of telemetry by setting a DOTNET_CLI_TELEMETRY_OPTOUT environment variable to 1 using your favorite shell.\r\nYou can read more about .NET Core tools telemetry @ https://aka.ms/dotnet-cli-telemetry.\r\n\r\nMy.DotNet.Project.dll (net47) ExitCode = 1\r\nSystem.IO.IOException: The process cannot access the file 'C:\\Users\\BuildServerUser\\.dotnet\\2.1.104.dotnetFirstUseSentinel' because it is being used by another process.\r\n   at System.IO.FileStream.OpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize)\r\n   at System.IO.File.Create(String path)\r\n   at Microsoft.Extensions.EnvironmentAbstractions.FileWrapper.CreateEmptyFile(String path)\r\n   at Microsoft.DotNet.Configurer.FirstTimeUseNoticeSentinel.CreateIfNotExists()\r\n   at Microsoft.DotNet.Configurer.DotnetFirstTimeUseConfigurer.PrintFirstTimeUseNotice()\r\n   at Microsoft.DotNet.Configurer.DotnetFirstTimeUseConfigurer.Configure()\r\n   at Microsoft.DotNet.Cli.Program.ConfigureDotNetForFirstTimeUse(INuGetCacheSentinel nugetCacheSentinel, IFirstTimeUseNoticeSentinel firstTimeUseNoticeSentinel, CliFallbackFolderPathCalculator cliFallbackFolderPathCalculator)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n\r\nIs there a sensible way to kick off this process automatically at the time that the VM is created, rather than at the time of the first build? I'd rather do it eagerly than lazily.\r\n\r\nThanks."},{"Id":"7646967316","Type":"IssuesEvent","CreatedAt":"2018-05-09T01:03:30","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9231","RelatedDescription":"Closed issue \"dotnet-install.sh Installs wrong version of the RC1 runtime causing Build failures\" (#9231) at dotnet/cli","RelatedBody":"We are using the obtain script `dotnet-install.sh` to install dotnetcore in CodeShip CI. However, this script installs the wrong version of the runtime when pointing to rc1. \r\n\r\nWe then see build errors such as \r\n`error NU1102: Unable to find package Microsoft.NETCore.App with version (>= 2.1.0-rc1-26428-03)`\r\n\r\n## Steps to reproduce\r\n`curl -Lsfo ./dotnet-install.sh https://dot.net/v1/dotnet-install.sh`\r\n`./dotnet-install.sh --verbose --version 2.1.300-rc1-008673`\r\n`dotnet --info`\r\n\r\n## Expected  behavior\r\nFollowing would be installed\r\n`Microsoft.AspNetCore.App 2.1.0-rc1-final`\r\n`Microsoft.NETCore.App 2.1.0-rc1`\r\n\r\n## Actual behavior\r\nFollowing are installed:\r\n`Microsoft.AspNetCore.App 2.1.0-rc1-30682`\r\n`Microsoft.NETCore.App 2.1.0-rc1-26428-03`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET CLI version info:\r\n.NET Core SDK (reflecting any global.json):\r\nVersion:   2.1.300-rc1-008673\r\nCommit:    f5e3ddbe73\r\n\r\nRuntime Environment:\r\nOS Name:     ubuntu\r\nOS Version:  14.04\r\nOS Platform: Linux\r\nRID:         ubuntu.14.04-x64\r\nBase Path:   /home/rof/cache/.dotnet/sdk/2.1.300-rc1-008673/\r\n\r\nHost (useful for support):\r\nVersion: 2.1.0-rc1-26428-03\r\nCommit:  2c36b039fd\r\n\r\n.NET Core SDKs installed:\r\n2.1.300-rc1-008673 [/home/rof/cache/.dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\nMicrosoft.AspNetCore.All 2.1.0-rc1-30682 [/home/rof/cache/.dotnet/shared/Microsoft.AspNetCore.All]\r\nMicrosoft.AspNetCore.App 2.1.0-rc1-30682 [/home/rof/cache/.dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 2.1.0-rc1-26428-03 [/home/rof/cache/.dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\nhttps://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7646886528","Type":"PullRequestEvent","CreatedAt":"2018-05-09T00:31:51","Actor":"dotnet-maestro-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9232","RelatedDescription":"Opened pull request \"Update clicommandlineparser, climigrate, coresetup, coresetup, coresetup, fsharp, sdk, templating, templating, templating, websdk to rtm-62908-03, alpha-62908-03, rtm-26508-02, rtm-26508-02, rtm-26508-02, rtm-180508-0, rtm-62908-02, beta3-20180508-1667431, beta3-20180508-1667431, beta3-20180508-1667431, rtm-20180508-1667423, respectively (release/2.1.3xx)\" (#9232) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7646880121","Type":"IssuesEvent","CreatedAt":"2018-05-09T00:29:36","Actor":"parekhkb","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9231","RelatedDescription":"Opened issue \"dotnet-install.sh Installs wrong version of the RC1 runtime causing Build failures\" (#9231) at dotnet/cli","RelatedBody":"We are using the obtain script dotnet-install.sh to install dotnet in CodeShip CI. However, this script installs the wrong version of the runtime when pointing to rc1. \r\n\r\nWe then see build errors such as \r\n`error NU1102: Unable to find package Microsoft.NETCore.App with version (>= 2.1.0-rc1-26428-03)`\r\n\r\n## Steps to reproduce\r\ncurl -Lsfo ./dotnet-install.sh https://dot.net/v1/dotnet-install.sh\r\n./dotnet-install.sh --verbose --version 2.1.300-rc1-008673\r\ndotnet --info\r\n\r\n## Expected  behavior\r\nFollowing would be installed\r\nMicrosoft.AspNetCore.App 2.1.0-rc1-final\r\nMicrosoft.NETCore.App 2.1.0-rc1\r\n\r\n## Actual behavior\r\nFollowing are installed:\r\nMicrosoft.AspNetCore.App 2.1.0-rc1-30682\r\nMicrosoft.NETCore.App 2.1.0-rc1-26428-03\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET CLI version info:\r\n.NET Core SDK (reflecting any global.json):\r\nVersion:   2.1.300-rc1-008673\r\nCommit:    f5e3ddbe73\r\n\r\nRuntime Environment:\r\nOS Name:     ubuntu\r\nOS Version:  14.04\r\nOS Platform: Linux\r\nRID:         ubuntu.14.04-x64\r\nBase Path:   /home/rof/cache/.dotnet/sdk/2.1.300-rc1-008673/\r\n\r\nHost (useful for support):\r\nVersion: 2.1.0-rc1-26428-03\r\nCommit:  2c36b039fd\r\n\r\n.NET Core SDKs installed:\r\n2.1.300-rc1-008673 [/home/rof/cache/.dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\nMicrosoft.AspNetCore.All 2.1.0-rc1-30682 [/home/rof/cache/.dotnet/shared/Microsoft.AspNetCore.All]\r\nMicrosoft.AspNetCore.App 2.1.0-rc1-30682 [/home/rof/cache/.dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 2.1.0-rc1-26428-03 [/home/rof/cache/.dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\nhttps://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7646578034","Type":"IssuesEvent","CreatedAt":"2018-05-08T22:45:55","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9230","RelatedDescription":"Opened issue \"Unlocalized string in `dotnet build --help` output.\" (#9230) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. `DOTNET_CLI_UI_LANGUAGE=es dotnet build --help`\r\n\r\n## Expected  behavior\r\n\r\nThe `PROJECT` argument description is localized into Spanish.\r\n\r\n## Actual behavior\r\n\r\nThe `PROJECT` argument description is still in English.\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.400-preview-008836\r\n Commit:    309ca68e41\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk/2.1.400-preview-008836/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1-26423-06\r\n  Commit:  b50a96ee38\r\n\r\n.NET Core SDKs installed:\r\n  2.1.400-preview-008836 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-30661 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-30661 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1-26423-06 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7647594611","Type":"PullRequestEvent","CreatedAt":"2018-05-09T05:06:07","Actor":"luqunl","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29579","RelatedDescription":"Merged pull request \"Enable build S.R.WindowRuntime for .netcoreapp\" (#29579) at dotnet/corefx","RelatedBody":"This change is to allow build S.R.WindowsRuntime.dll for .netcoreapp on windows."},{"Id":"7647381424","Type":"PullRequestEvent","CreatedAt":"2018-05-09T03:36:46","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29594","RelatedDescription":"Merged pull request \"Remove StringBuilder usage from Dns.GetHostName\" (#29594) at dotnet/corefx","RelatedBody":"StringBuilder is pure overhead for an operation like this, resulting in more code and more allocation.\r\n\r\nOn my machine, this reduces the allocation of Dns.GetHostName from ~600 bytes to ~40 bytes.\r\n\r\ncc: @davidsh, @geoffkizer "},{"Id":"7647306458","Type":"IssuesEvent","CreatedAt":"2018-05-09T03:08:11","Actor":"ericstj","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29593","RelatedDescription":"Reopened issue \"After Docker image update to microsoft/dotnet:2.1-sdk. Receiving System.IO.IOException: Method not found: 'System.Memory`1<!0>\" (#29593) at dotnet/corefx","RelatedBody":"Copying issue from https://github.com/Microsoft/dotnet/issues/738\r\n\r\n> From @jdwilly2001:\r\nThe application was running last week, and now is failing. I am attempting to buidl the docker image with the same code that was confirmed running and now I cannot get the application to serve a basic healthcheck url. Are there any issues with the published 2.1-sdk image?\r\n\r\n> info: Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets[14]\r\nConnection id \"0HLDKUV7FGMOP\" communication error.\r\nSystem.IO.IOException: Method not found: 'System.Memory1<!0> System.Memory1.CreateFromPinnedArray(!0[], Int32, Int32)'. ---> System.MissingMethodException: Method not found: 'System.Memory1<!0> System.Memory1.CreateFromPinnedArray(!0[], Int32, Int32)'.\r\nat System.Buffers.MemoryPoolBlock..ctor(SlabMemoryPool pool, MemoryPoolSlab slab, Int32 offset, Int32 length)\r\nat System.Buffers.SlabMemoryPool.AllocateSlab()\r\nat System.Buffers.SlabMemoryPool.Lease()\r\nat System.IO.Pipelines.Pipe.AllocateWriteHeadUnsynchronized(Int32 sizeHint)\r\nat System.IO.Pipelines.Pipe.GetMemory(Int32 sizeHint)\r\nat Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.ProcessReceives()\r\nat Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoReceive()\r\n--- End of inner exception stack trace ---\r\n\r\n\r\n> From @anandtpatel: \r\nmicrosoft/dotnet 2.1-sdk image was working fine on Friday(May 4th). Started giving above error since yesterday(May 7).\r\n\r\ncc @pakrym, @weshaggard, @ericstj, @natemcmaster, @dagood, @mmitche \r\n \r\n\r\nI am not sure why MemoryPoolBlock is looking for Memory\\<T\\>.CreateFromPinnedArray. It was moved to MemoryMarshal quite a while ago, [here](https://github.com/dotnet/corefx/pull/28992):\r\n**src:** https://github.com/dotnet/corefx/blob/release/2.1/src/Common/src/CoreLib/System/Runtime/InteropServices/MemoryMarshal.cs#L264\r\n**ref:** https://github.com/dotnet/corefx/blob/release/2.1/src/System.Memory/ref/System.Memory.cs#L526\r\n\r\nI checked the System.Memory package from MyGet (both [RC](https://www.nuget.org/packages/System.Memory/4.5.0-rc1) and [RTM](https://dotnet.myget.org/feed/dotnet-core/package/nuget/System.Memory/4.5.0-rtm-26508-03) versions have this method on MemoryMarshal).\r\n\r\nMemoryPoolBlock is referencing the correct method:\r\nhttps://github.com/aspnet/Common/blob/release/2.1/shared/Microsoft.Extensions.Buffers.Sources/MemoryPoolBlock.Release.cs#L30\r\n\r\nThe dependencies seem correct as well: https://github.com/aspnet/Universe/blob/release/2.1/build/dependencies.props#L18\r\n\r\n**I don't know how exactly aspnet and the dotnet sdk is built**, but there might be a package mismatch somewhere up stack that could be causing this issue. Microsoft.NetCore.App version information would help."},{"Id":"7647306196","Type":"IssuesEvent","CreatedAt":"2018-05-09T03:08:07","Actor":"ericstj","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29593","RelatedDescription":"Closed issue \"After Docker image update to microsoft/dotnet:2.1-sdk. Receiving System.IO.IOException: Method not found: 'System.Memory`1<!0>\" (#29593) at dotnet/corefx","RelatedBody":"Copying issue from https://github.com/Microsoft/dotnet/issues/738\r\n\r\n> From @jdwilly2001:\r\nThe application was running last week, and now is failing. I am attempting to buidl the docker image with the same code that was confirmed running and now I cannot get the application to serve a basic healthcheck url. Are there any issues with the published 2.1-sdk image?\r\n\r\n> info: Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets[14]\r\nConnection id \"0HLDKUV7FGMOP\" communication error.\r\nSystem.IO.IOException: Method not found: 'System.Memory1<!0> System.Memory1.CreateFromPinnedArray(!0[], Int32, Int32)'. ---> System.MissingMethodException: Method not found: 'System.Memory1<!0> System.Memory1.CreateFromPinnedArray(!0[], Int32, Int32)'.\r\nat System.Buffers.MemoryPoolBlock..ctor(SlabMemoryPool pool, MemoryPoolSlab slab, Int32 offset, Int32 length)\r\nat System.Buffers.SlabMemoryPool.AllocateSlab()\r\nat System.Buffers.SlabMemoryPool.Lease()\r\nat System.IO.Pipelines.Pipe.AllocateWriteHeadUnsynchronized(Int32 sizeHint)\r\nat System.IO.Pipelines.Pipe.GetMemory(Int32 sizeHint)\r\nat Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.ProcessReceives()\r\nat Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoReceive()\r\n--- End of inner exception stack trace ---\r\n\r\n\r\n> From @anandtpatel: \r\nmicrosoft/dotnet 2.1-sdk image was working fine on Friday(May 4th). Started giving above error since yesterday(May 7).\r\n\r\ncc @pakrym, @weshaggard, @ericstj, @natemcmaster, @dagood, @mmitche \r\n \r\n\r\nI am not sure why MemoryPoolBlock is looking for Memory\\<T\\>.CreateFromPinnedArray. It was moved to MemoryMarshal quite a while ago, [here](https://github.com/dotnet/corefx/pull/28992):\r\n**src:** https://github.com/dotnet/corefx/blob/release/2.1/src/Common/src/CoreLib/System/Runtime/InteropServices/MemoryMarshal.cs#L264\r\n**ref:** https://github.com/dotnet/corefx/blob/release/2.1/src/System.Memory/ref/System.Memory.cs#L526\r\n\r\nI checked the System.Memory package from MyGet (both [RC](https://www.nuget.org/packages/System.Memory/4.5.0-rc1) and [RTM](https://dotnet.myget.org/feed/dotnet-core/package/nuget/System.Memory/4.5.0-rtm-26508-03) versions have this method on MemoryMarshal).\r\n\r\nMemoryPoolBlock is referencing the correct method:\r\nhttps://github.com/aspnet/Common/blob/release/2.1/shared/Microsoft.Extensions.Buffers.Sources/MemoryPoolBlock.Release.cs#L30\r\n\r\nThe dependencies seem correct as well: https://github.com/aspnet/Universe/blob/release/2.1/build/dependencies.props#L18\r\n\r\n**I don't know how exactly aspnet and the dotnet sdk is built**, but there might be a package mismatch somewhere up stack that could be causing this issue. Microsoft.NetCore.App version information would help."},{"Id":"7647242600","Type":"IssuesEvent","CreatedAt":"2018-05-09T02:45:12","Actor":"itn3000","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29595","RelatedDescription":"Opened issue \"running Task.WhenAll + ConcurrentQueue + Task.Yield() in netcoreapp2.1 is slower than netcoreapp2.0\" (#29595) at dotnet/corefx","RelatedBody":"I ran the benchmark with the following cases;\r\n\r\n1. `Task.WhenAll` and only do `await Task.Yield`\r\n2. `Task.WhenAll` and only returns `Task.CompletedTask`\r\n3. `Task.WhenAll` and do `await Task.Yield`, and then `ConcurrentQueue<int>.Enqueue`\r\n4. `Task.WhenAll` and do `ConcurrentQueue<int>.Enqueue`, then returns `Task.CompletedTask`\r\n\r\nrunning case 1,2,3 in netcoreapp2.1 are faster than or mostly same as netcoreapp2.0,\r\nbut case 4 is slower than netcoreapp2.0 by 2-3 times.\r\n\r\nhere is my [benchmark code](https://github.com/itn3000/task-queue-bench-netcoreapp2.1/tree/f093eb5593243902d5c538daad39cfbf2d4ececc) and [results](https://github.com/itn3000/task-queue-bench-netcoreapp2.1/blob/6e737de18a0ad618cb2ec3ec9406e8223820c5e3/results/WhenAllBench-report-sorted.csv)\r\n"},{"Id":"7647096035","Type":"PullRequestEvent","CreatedAt":"2018-05-09T01:51:42","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29594","RelatedDescription":"Opened pull request \"Remove StringBuilder usage from Dns.GetHostName\" (#29594) at dotnet/corefx","RelatedBody":"StringBuilder is pure overhead for an operation like this, resulting in more code and more allocation.\r\n\r\nOn my machine, this reduces the allocation of Dns.GetHostName from ~600 bytes to ~40 bytes.\r\n\r\ncc: @davidsh, @geoffkizer "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7647566432","Type":"IssuesEvent","CreatedAt":"2018-05-09T04:53:47","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26733","RelatedDescription":"Closed issue \"\"Add readonly modifier\" doesn't fire if you read from field in constructor\" (#26733) at dotnet/roslyn","RelatedBody":"``` VB\r\nClass Foo\r\n    Dim foo As List(Of String)\r\n\r\n    Sub New()\r\n        foo = New List(Of String)()\r\n        foo.Capacity = 10\r\n    End Sub\r\n\r\nEnd Class\r\n\r\n```\r\n\r\n**Expected:**\r\nMake readonly to fire\r\n\r\n**Actual:**\r\nMake readonly does not "},{"Id":"7647524380","Type":"IssuesEvent","CreatedAt":"2018-05-09T04:35:17","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26733","RelatedDescription":"Opened issue \"\"Add readonly modifier\" doesn't fire when if you read from field in constructor\" (#26733) at dotnet/roslyn","RelatedBody":"``` VB\r\nClass Foo\r\n    Dim foo As List(Of String)\r\n\r\n    Sub New()\r\n        foo = New List(Of String)()\r\n        foo.Capacity = 10\r\n    End Sub\r\n\r\nEnd Class\r\n\r\n```\r\n\r\n**Expected:**\r\nMake readonly to fire\r\n\r\n**Actual:**\r\nMake readonly does not "},{"Id":"7647121268","Type":"PullRequestEvent","CreatedAt":"2018-05-09T02:00:51","Actor":"shaggygi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26732","RelatedDescription":"Opened pull request \"Rearrange versions\" (#26732) at dotnet/roslyn","RelatedBody":"Moved 7.3 to bottom of list now that it is released.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7646832530","Type":"PullRequestEvent","CreatedAt":"2018-05-09T00:11:27","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26731","RelatedDescription":"Opened pull request \"Fix Index zero ends\" (#26731) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7645880542","Type":"PullRequestEvent","CreatedAt":"2018-05-08T20:07:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5785","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5785) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7645106034","Type":"PullRequestEvent","CreatedAt":"2018-05-08T17:31:57","Actor":"AtsushiKan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5786","RelatedDescription":"Merged pull request \"Fix in ParameterInfo.DefaultValue path\" (#5786) at dotnet/corert","RelatedBody":"There was a bug found in CoreCLR Reflection\r\nwhen attempting to take a DefaultValue in this scenario:\r\n\r\n    public void Method<T>(T arg = default(T)) { }\r\n\r\n    public static void Main(string[] args)\r\n    {\r\n        MethodInfo method = typeof(Program).GetMethod(\"Method\").MakeGenericMethod(typeof(AttributeTargets));\r\n        ParameterInfo argParameter = method.GetParameters()[0];\r\n        Console.WriteLine(argParameter.DefaultValue);\r\n    }\r\n\r\n\r\n (https://github.com/dotnet/corefx/issues/29570)\r\n\r\nProject N has a bug in the same scenario. This is the fix."},{"Id":"7645105402","Type":"PullRequestEvent","CreatedAt":"2018-05-08T17:31:49","Actor":"AtsushiKan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5786","RelatedDescription":"Opened pull request \"Fix in ParameterInfo.DefaultValue path\" (#5786) at dotnet/corert","RelatedBody":"There was a bug found in CoreCLR Reflection\r\nwhen attempting to take a DefaultValue in this scenario:\r\n\r\n    public void Method<T>(T arg = default(T)) { }\r\n\r\n    public static void Main(string[] args)\r\n    {\r\n        MethodInfo method = typeof(Program).GetMethod(\"Method\").MakeGenericMethod(typeof(AttributeTargets));\r\n        ParameterInfo argParameter = method.GetParameters()[0];\r\n        Console.WriteLine(argParameter.DefaultValue);\r\n    }\r\n\r\n\r\n (https://github.com/dotnet/corefx/issues/29570)\r\n\r\nProject N has a bug in the same scenario. This is the fix."},{"Id":"7644908591","Type":"PullRequestEvent","CreatedAt":"2018-05-08T16:52:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5781","RelatedDescription":"Merged pull request \"Partial implementation of Thread.GetApartmentState\" (#5781) at dotnet/corert","RelatedBody":"Related to #5776"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7646101636","Type":"IssuesEvent","CreatedAt":"2018-05-08T20:52:48","Actor":"jaredpar","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2227","RelatedDescription":"Opened issue \"Unnecessary dlls copied to output folder\" (#2227) at dotnet/sdk","RelatedBody":"Consider the following solution where all projects use the new SDK (VS 15.6.7):\r\n\r\n- Util: a DLL project targeting netstandard1.3 \r\n- MyApp: an EXE project targeting net46 and referencing Util\r\n\r\nThis projects have no other than the project template (hello world). I would expect building such a solution would put the minimum set of DLLs into the output folder of MyApp. Yet when I build I get the following set:\r\n\r\n- Microsoft.Win32.Primitives.dll\r\n- System.AppContext.dll\r\n- System.Console.dll\r\n- System.Diagnostics.DiagnosticSource.dll\r\n- System.Globalization.Calendars.dll\r\n- System.IO.Compression.dll\r\n- System.IO.Compression.ZipFile.dll\r\n- System.IO.FileSystem.dll\r\n- System.IO.FileSystem.Primitives.dll\r\n- System.Net.Http.dll\r\n- System.Net.Sockets.dll\r\n- System.Runtime.InteropServices.RuntimeInformation.dll\r\n- System.Security.Cryptography.Algorithms.dll\r\n- System.Security.Cryptography.Encoding.dll\r\n- System.Security.Cryptography.Primitives.dll\r\n- System.Security.Cryptography.X509Certificates.dll\r\n- System.Xml.ReaderWriter.dll\r\n\r\nAlmost none of these are necessary to run my application yet they are included in my project output. How am I supposed to know what DLLs are and aren't necessary for execution? This is important because I need to construct a minimal NuGet package. \r\n\r\nAdding System.Net.Http to a \"hello world\" app is fairly suspicious.  \r\n"},{"Id":"7643326370","Type":"IssuesEvent","CreatedAt":"2018-05-08T12:21:01","Actor":"mariusGundersen","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2226","RelatedDescription":"Opened issue \"[2.1-rc1] dotnet clean fails when obj folder is missing\" (#2226) at dotnet/sdk","RelatedBody":"**How to reproduce**\r\n* Run `dotnet new classlib` in an empty folder\r\n* Delete the obj folder\r\n* Run `dotnet clean`\r\n\r\n**What happens**\r\n* Clean fails\r\n* obj folder is created with empty folders\r\n\r\n**What should happen**\r\n* Nothing, project is already clean\r\n\r\nThis is an issue on our CI server, where we run `dotnet clean` as the first step of every build, and then run `dotnet restore` as the second step. It now fails on the initial build, when it clones the repo and there is no obj folder."},{"Id":"7643039430","Type":"IssuesEvent","CreatedAt":"2018-05-08T11:18:53","Actor":"davkean","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2225","RelatedDescription":"Closed issue \"New project-system is not importing .pdb symbol files from package lib folders\" (#2225) at dotnet/sdk","RelatedBody":"_From @mungojam on May 8, 2018 9:13_\n\nI'm happy to put together a minimum example for this if it isn't intended behaviour.\r\n\r\nIn our internal packages we have always put the symbol files alongside the DLLs in the appropriate lib folder. With the old project system, even when using PackageReference, these symbol files would automatically get output to the bin folder.\r\n\r\nWith the new project system these symbol files are no longer being copied to the bin folders so we are no longer able to easily debug into our packages.\r\n\r\nThis is a big regression in usability for us. I am happy to implement a workaround across our projects if there is one.\n\n_Copied from original issue: dotnet/project-system#3524_"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"993982168476012544","CreatedAt":"2018-05-08T22:33:10+00:00","UserScreenname":"dotnet","Text":".NET Core May 2018 Update https://t.co/OZkHLwpebZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":19,"RawContent":null},{"Id":"993982051735879680","CreatedAt":"2018-05-08T22:32:43+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Security and Quality Rollup https://t.co/jmOfJy1TEn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null},{"Id":"993840700750839810","CreatedAt":"2018-05-08T13:11:02+00:00","UserScreenname":"dotnet","Text":"Hey @VisualStudio fans at #MSBuild - join our Jeff Fritz (@csharpfritz) and pair-program with him IN-PERSON using V… https://t.co/tFi11XaXZN","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":1,"RawContent":null},{"Id":"993631068413681664","CreatedAt":"2018-05-07T23:18:02+00:00","UserScreenname":"dotnet","Text":"Dates just announced! Save the date for #dotNETConf 2018, 9/12-14.  This virtual training event is brought to you b… https://t.co/TOmBUcX9bN","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":163,"FavoriteCount":98,"RawContent":null}]}},"RunOn":"2018-05-09T05:30:25.5000947Z","RunDurationInMilliseconds":7834}