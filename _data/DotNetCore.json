{"Data":{"Blog":{"FeedItems":[{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where to start answering these important questions. But there&#8217;s a really... <a aria-label=\"read more about Experiment with Azure for FREE!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008 R2+.  We’ve added support for targeting the .NET Framework 4.7.1 in Visual Studio 2017 15.5. The .NET Framework 4.7.1 includes improvements in several areas: Accessibility improvements... <a aria-label=\"read more about Announcing the .NET Framework 4.7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. Quality and Reliability This release contains the following quality and reliability improvements. CLR Code optimization bug for x64 C# code targeting... <a aria-label=\"read more about .NET Framework October 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null},{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":101,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6746601565","Type":"PullRequestEvent","CreatedAt":"2017-10-21T04:44:43","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14644","RelatedDescription":"Merged pull request \"Update profiling API status\" (#14644) at dotnet/coreclr","RelatedBody":"We've been making progress testing APIs and fixing issues. The description in this doc had gotten well out of date."},{"Id":"6746575183","Type":"PullRequestEvent","CreatedAt":"2017-10-21T04:16:49","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14620","RelatedDescription":"Merged pull request \"Fix Register selection refactor bugs\" (#14620) at dotnet/coreclr","RelatedBody":"Fix #14617\r\nFix #14618"},{"Id":"6746575182","Type":"IssuesEvent","CreatedAt":"2017-10-21T04:16:49","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14618","RelatedDescription":"Closed issue \"[RyuJIT/arm32] Assertion failed 'recentAssignedRefWeight == farthestRefPosWeight'\" (#14618) at dotnet/coreclr","RelatedBody":"This is a recent regression.\r\n\r\n```\r\nAssert failure(PID 23576 [0x00005c18], Thread: 17092 [0x42c4]): Assertion failed 'recentAssignedRefWeight == farthestRefPosWeight' in 'Benchstone.BenchF.Lorenz:Bench():bool' (IL size 613)\r\n\r\n    File: e:\\gh\\coreclr3\\src\\jit\\lsra.cpp Line: 6400\r\n    Image: E:\\gh\\coreclr3\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nTest:\r\n```\r\nJIT\\Performance\\CodeQuality\\BenchF\\Lorenz\\Lorenz\\Lorenz.cmd\r\n```\r\n"},{"Id":"6746575181","Type":"IssuesEvent","CreatedAt":"2017-10-21T04:16:49","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14617","RelatedDescription":"Closed issue \"[RyuJIT/arm32] Assertion failed 'tgtReg != tmpReg'\" (#14617) at dotnet/coreclr","RelatedBody":"This seems like a recent regression.\r\n\r\n```\r\nAssert failure(PID 24376 [0x00005f38], Thread: 27324 [0x6abc]): Assertion failed 'tgtReg != tmpReg' in 'classarr:gaussj(ref,int,ref,int)' (IL size 763)\r\n\r\n    File: e:\\gh\\coreclr3\\src\\jit\\codegenarmarch.cpp Line: 1410\r\n    Image: E:\\gh\\coreclr3\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nTests:\r\n```\r\nJIT\\Methodical\\MDArray\\GaussJordan\\jaggedarr_cs_ro\\jaggedarr_cs_ro.cmd\r\nJIT\\Methodical\\MDArray\\InnerProd\\intarr_cs_ro\\intarr_cs_ro.cmd\r\nJIT\\Performance\\CodeQuality\\Bytemark\\Bytemark\\Bytemark.cmd\r\nJIT\\Methodical\\MDArray\\GaussJordan\\plainarr_cs_ro\\plainarr_cs_ro.cmd\r\nJIT\\Methodical\\MDArray\\InnerProd\\intarr_cs_do\\intarr_cs_do.cmd\r\nJIT\\Methodical\\MDArray\\GaussJordan\\structarr_cs_ro\\structarr_cs_ro.cmd\r\nJIT\\Methodical\\MDArray\\GaussJordan\\classarr_cs_do\\classarr_cs_do.cmd\r\nJIT\\Methodical\\MDArray\\GaussJordan\\plainarr_cs_do\\plainarr_cs_do.cmd\r\nJIT\\Methodical\\MDArray\\GaussJordan\\jaggedarr_cs_do\\jaggedarr_cs_do.cmd\r\nJIT\\Methodical\\MDArray\\GaussJordan\\structarr_cs_do\\structarr_cs_do.cmd\r\nJIT\\Methodical\\MDArray\\GaussJordan\\classarr_cs_ro\\classarr_cs_ro.cmd\r\n```\r\n"},{"Id":"6746493644","Type":"PullRequestEvent","CreatedAt":"2017-10-21T02:59:15","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14644","RelatedDescription":null,"RelatedBody":"We've been making progress testing APIs and fixing issues. The description in this doc had gotten well out of date."},{"Id":"6746493611","Type":"PullRequestEvent","CreatedAt":"2017-10-21T02:59:14","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14644","RelatedDescription":"Closed pull request \"Update profiling API status\" (#14644) at dotnet/coreclr","RelatedBody":"We've been making progress testing APIs and fixing issues. The description in this doc had gotten well out of date."},{"Id":"6746493268","Type":"PullRequestEvent","CreatedAt":"2017-10-21T02:58:57","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14622","RelatedDescription":"Closed pull request \"Disable PGO for CentOS\" (#14622) at dotnet/coreclr","RelatedBody":"Allows clean CI: https://github.com/dotnet/coreclr/issues/14581"},{"Id":"6746491813","Type":"PullRequestEvent","CreatedAt":"2017-10-21T02:57:34","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14645","RelatedDescription":"Merged pull request \"Revert \"Reenable PGO on Linux Release builds\"\" (#14645) at dotnet/coreclr","RelatedBody":"Reverts dotnet/coreclr#14554"},{"Id":"6746490350","Type":"PullRequestEvent","CreatedAt":"2017-10-21T02:56:12","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14645","RelatedDescription":"Opened pull request \"Revert \"Reenable PGO on Linux Release builds\"\" (#14645) at dotnet/coreclr","RelatedBody":"Reverts dotnet/coreclr#14554"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6746094823","Type":"PullRequestEvent","CreatedAt":"2017-10-20T22:43:58","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7880","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25820-05 (master)\" (#7880) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6746002921","Type":"PullRequestEvent","CreatedAt":"2017-10-20T22:09:48","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7877","RelatedDescription":"Merged pull request \"Update Microsoft.ApplicationInsights to 2.4.0\" (#7877) at dotnet/cli","RelatedBody":"The surface area we used for Microsoft.ApplicationInsights is small, basically one API -- \"to send\". I tested it with Fiddler on a clean machine, the captured data looks good."},{"Id":"6745642416","Type":"IssuesEvent","CreatedAt":"2017-10-20T20:25:46","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7879","RelatedDescription":"Opened issue \"Flaky test: GivenThatWeWantToReadLockFilesQuickly.ItFailsInLessThanOneSecondWhenTheProjectAssetsJsonDoesNotExist\" (#7879) at dotnet/cli","RelatedBody":"We should have proper perf tests, not assert a time limit. VMs in CI can run quite slow at times.\r\n\r\n\r\n\r\n\r\n"},{"Id":"6745492005","Type":"IssuesEvent","CreatedAt":"2017-10-20T19:47:19","Actor":"arishlabroo","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7878","RelatedDescription":"Opened issue \"dotnet pack with `/p` parameters does not work on windows\" (#7878) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nFrom any project directory run\r\n`dotnet pack /p:VersionPrefix=9.1.2\r\n`\r\n## Expected  behavior\r\n_Successfully created package '/Charlie/bin/Debug/Charlie.9.1.2.nupkg'_\r\n\r\n## Actual behavior\r\n### On Mac\r\n_Successfully created package '/Charlie/bin/Debug/Charlie.9.1.2.nupkg'_\r\n\r\n### On Windows\r\n\r\n_MSBUILD : **error MSB1009**: Project file does not exist.\r\nSwitch: p:VersionPrefix=9.1.2_\r\n\r\n## Environment data\r\n**Mac** `dotnet --info` output:\r\n\r\n> .NET Command Line Tools (2.0.2)\r\n> \r\n> Product Information:\r\n>  Version:            2.0.2\r\n>  Commit SHA-1 hash:  a04b4bf512\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Mac OS X\r\n>  OS Version:  10.13\r\n>  OS Platform: Darwin\r\n>  RID:         osx.10.12-x64\r\n>  Base Path:   /usr/local/share/dotnet/sdk/2.0.2/\r\n> \r\n> Microsoft .NET Core Shared Framework Host\r\n> \r\n>   Version  : 2.0.0\r\n>   Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n**Windows** `dotnet --info` output:\r\n\r\n> .NET Command Line Tools (2.0.2)\r\n> \r\n> Product Information:\r\n>  Version:            2.0.2\r\n>  Commit SHA-1 hash:  a04b4bf512\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Windows\r\n>  OS Version:  10.0.15063\r\n>  OS Platform: Windows\r\n>  RID:         win10-x64\r\n>  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n> \r\n> Microsoft .NET Core Shared Framework Host\r\n> \r\n>   Version  : 2.0.0\r\n>   Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n"},{"Id":"6745416709","Type":"PullRequestEvent","CreatedAt":"2017-10-20T19:28:33","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7877","RelatedDescription":"Opened pull request \"Update Microsoft.ApplicationInsights to 2.4.0\" (#7877) at dotnet/cli","RelatedBody":"The surface area we used for Microsoft.ApplicationInsights is small, basically one API -- \"to send\". I tested it with Fiddler on a clean machine, the captured data looks good."},{"Id":"6744828279","Type":"IssuesEvent","CreatedAt":"2017-10-20T17:07:28","Actor":"jaredpar","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7875","RelatedDescription":"Closed issue \"global.json not enforced on Windows\" (#7875) at dotnet/cli","RelatedBody":"Recently updated the version of CLI we were using and everything worked fine on Windows but failed when we switched to Linux / Mac. The failure was the new version no longer matched global.json and hence every command we executed failed with the error:\r\n\r\n``` txt\r\nThe specified SDK version [2.0.0] from global.json [/Users/jaredpar/code/roslyn/global.json] not found; install specified SDK version\r\nDid you mean to run dotnet SDK commands? Please install dotnet SDK from:\r\n  http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n```\r\n\r\nIt appears that global.json is simply not being enforced on Windows. I took care to ensure that I was using the same version of CLI in both cases, that I wasn't accidentally using a different one due to `%PATH%` tricks. \r\n\r\n\r\nRepro:\r\n\r\n- Clone https://github.com/jaredpar/roslyn on Windows\r\n- Checkout branch rerpo/global-json \r\n- Run Restore.cmd\r\n\r\nEverything will succeed here. \r\n\r\n- Clone https://github.com/jaredpar/roslyn on Linux / Mac\r\n- Checkout branch rerpo/global-json \r\n- Run cibuild.sh\r\n\r\nEverything will fail with errors about global.json being incorrect "},{"Id":"6744640704","Type":"PullRequestEvent","CreatedAt":"2017-10-20T16:23:19","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7848","RelatedDescription":"Merged pull request \"Enabling the publish of CLI NuPkg to the unified Transport feed.\" (#7848) at dotnet/cli","RelatedBody":"The upload was tested on my dev box. Here is the blob location:\r\nhttps://dotnetfeed.blob.core.windows.net/jbeisner/packages/microsoft.dotnet.cli.utils/\r\n\r\n--------------------------------\r\nStep 2 for: https://github.com/dotnet/cli/issues/7793\r\n\r\nNotes:\r\nbuild_projects/dotnet-cli-build/dotnet-cli-build.csproj:\r\nFor now, we will download the 'Microsoft.DotNet.Build.Tasks.Feed' package by placing a reference in 'dotnet-cli-build.csproj'; this is soon to be replaced by a \"toolset\" faux project per TaGoo.\r\n\r\nbuild/publish/PublishNupkgToTransportFeed.targets:\r\nFor now, the 'PublishNupkgToTransportFeed' target will be a 'VSO' style step similar to: \"Publish Windows Installer Nupkg to VS Feed\" and \"Publish MSBuild Extensions NuPkg to VS Feed\" - controlled by \"PUBLISH_NUPKG_TO_TRANSPORT_FEED\" Boolean.\r\n\r\nbuild/AzureInfo.props:\r\nThe value for 'TRANSPORTFEED_STORAGE_KEY' will be passed into the build via a secret parameter from VSO. The key will be stored in our Azure KeyVault.\r\n"},{"Id":"6744601594","Type":"IssuesEvent","CreatedAt":"2017-10-20T16:14:40","Actor":"jaredpar","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7875","RelatedDescription":"Opened issue \"global.json not enforced on Windows\" (#7875) at dotnet/cli","RelatedBody":"Recently updated the version of CLI we were using and everything worked fine on Windows but failed when we switched to Linux / Mac. The failure was the new version no longer matched global.json and hence every command we executed failed with the error:\r\n\r\n``` txt\r\nThe specified SDK version [2.0.0] from global.json [/Users/jaredpar/code/roslyn/global.json] not found; install specified SDK version\r\nDid you mean to run dotnet SDK commands? Please install dotnet SDK from:\r\n  http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n```\r\n\r\nIt appears that global.json is simply not being enforced on Windows. I took care to ensure that I was using the same version of CLI in both cases, that I wasn't accidentally using a different one due to `%PATH%` tricks. \r\n\r\n\r\nRepro:\r\n\r\n- Clone https://github.com/jaredpar/roslyn on Windows\r\n- Checkout branch rerpo/global-json \r\n- Run Restore.cmd\r\n\r\nEverything will succeed here. \r\n\r\n- Clone https://github.com/jaredpar/roslyn on Linux / Mac\r\n- Checkout branch rerpo/global-json \r\n- Run cibuild.sh\r\n\r\nEverything will fail with errors about global.json being incorrect "}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6745741520","Type":"IssuesEvent","CreatedAt":"2017-10-20T20:51:57","Actor":"isaac2004","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/544","RelatedDescription":"Opened issue \"DotNet Standard 2.0 Project downgraded to 1.6 and cannot update\" (#544) at dotnet/standard","RelatedBody":"I have a CL that was Standard 2.0 and after installing the 2.0.1 SDK it got downgraded somehow to 1.6 (.csproj still says 2.0). The application fails on build because of namespaces not available. When I try to upgrade through VS, I get this\r\n\r\n![capture](https://user-images.githubusercontent.com/8878502/31841261-baa2e134-b5b6-11e7-856d-2f8eeac5d88b.PNG)\r\n \r\nI am blocked to upgrade the package. If I try to upgrade via CLI, I get\r\n\r\n````\r\nPS C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper> dotnet add package NETStandard.Library --version 2.0.0\r\n  Writing C:\\Users\\Isaac\\AppData\\Local\\Temp\\tmp5E87.tmp\r\ninfo : Adding PackageReference for package 'NETStandard.Library' into project 'C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj'.\r\nlog  : Restoring packages for C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj...\r\ninfo : Package 'NETStandard.Library' is compatible with all the specified frameworks in project 'C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj'.\r\nerror: Error while performing Update for package 'NETStandard.Library'. Cannot edit items in imported files -\r\nerror:   Item 'PackageReference' for 'NETStandard.Library' in Imported file 'C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.DefaultItems.props'.\r\n````\r\nI imagine this has to do with me upgrading to 2.0.1, but I am unable to rollback in anyway. Do I need to uninstal 2.0.1 to have 2.0.0 work?"},{"Id":"6741695643","Type":"IssuesEvent","CreatedAt":"2017-10-20T02:39:56","Actor":"jcouv","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/543","RelatedDescription":"Opened issue \"Issue with ValueTuple on net471\" (#543) at dotnet/standard","RelatedBody":"@terrajobst @ryanelian If it's ok, let's move the investigation to a dedicated issue.\r\n\r\nHere's the latest comment from Ryan, in the thread for https://github.com/dotnet/standard/issues/514.\r\n\r\n----\r\n[msbuild.zip](https://github.com/dotnet/standard/files/1400613/msbuild.zip)\r\n\r\nbtw, just curious, how do you 'see' the content of the binary log?\r\n\r\nNo, adding those lines does not make the warning message disappear...\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```"},{"Id":"6740753772","Type":"IssuesEvent","CreatedAt":"2017-10-19T21:04:19","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/542","RelatedDescription":"Opened issue \"You must add a reference to assembly netstandard errors\" (#542) at dotnet/standard","RelatedBody":"@fahadabdulaziz opened this here: https://github.com/Microsoft/dotnet/issues/527\r\n\r\nHi,\r\n\r\nAfter targeting .Net Framework 4.7.1, in many projects referencing net standard libraries. I get these errors:\r\n![errs](https://user-images.githubusercontent.com/5483584/31769585-f06cdab6-b4dc-11e7-9a58-f6d3f52341da.png)\r\n\r\n`csharp\r\nThe type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n`\r\n\r\nThough I all the projects including that targeting net471 are building successfully!\r\n\r\nAny thoughts ? "},{"Id":"6740112293","Type":"IssuesEvent","CreatedAt":"2017-10-19T18:42:27","Actor":"cilerler","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/498","RelatedDescription":"Closed issue \"ClickOnce throws an error when it has .NetStandard reference\" (#498) at dotnet/standard","RelatedBody":"If you add a _.NetStandard_ project as reference to _WPF_ application which gets deployed through _ClickOnce_ throws the error below.\r\n\r\n## Error message\r\n\r\n> Unable to install or run the application.  The application requires that assembly **System.Drawing.Primitives** Version **4.0.2.0** be installed in the Global Assembly Cache (GAC) first.\r\n\r\nApplication itself runs fine _(direct click on **.exe** file)_ however installer _(direct click on **.application** file)_ throws that error message.\r\n\r\n## Steps to reproduce:\r\n1. **Create** a new solution with _WPF_ application via _VS2017_\r\n2. **Build** and **Publish**\r\n3. **Add** new _.NET Standard_ library project into the solution\r\n4. **Reference** it from _WPF_ project\r\n5. **Build** and **Publish**\r\n6. **Attempt** to Install by clicking the **.application file**\r\n\r\n## Additional Resource\r\n- I saw that issue reported at [Visual Studio community](https://developercommunity.visualstudio.com/content/problem/111414/clickonce-with-dependcy-with-netstandard-does-not.html) _(which is probably a wrong place)_ \r\n- I also found it at [StackOverflow](https://stackoverflow.com/questions/45843533/clickonce-deployment-does-not-install-as-expected) _(which also includes a [repository](https://github.com/colhountech/WPF_With_NetStandard) link to reproduce the issue)_"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6746582569","Type":"IssuesEvent","CreatedAt":"2017-10-21T04:24:20","Actor":"caozhiyuan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24787","RelatedDescription":"Closed issue \"socket server shutodown  linux client socket still established\" (#24787) at dotnet/corefx","RelatedBody":"tcp        0 159660 192.168.139.132:33693   10.1.4.204:2181         ESTABLISHED\r\n\r\nsocket server(10.1.4.204:2181) shutodown,  linux client socket still established\r\n\r\nhow to deal with it.\r\n\r\n"},{"Id":"6746504264","Type":"IssuesEvent","CreatedAt":"2017-10-21T03:08:47","Actor":"LYP951018","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24788","RelatedDescription":"Opened issue \"Add a single parameter, with return type `ValueTuple` overload for `Enumerable.Zip`?\" (#24788) at dotnet/corefx","RelatedBody":"Instead of writing\r\n\r\n```cs\r\nforeach (var (x, y) in Seq1.Zip(Seq2, (s1, s2) => (s1, s2)))\r\n```\r\n\r\nwe could write:\r\n\r\n```cs\r\nforeach (var (x, y) in Seq1.Zip(Seq2))\r\n```\r\n\r\nThe implementation seems to be trivial:\r\n\r\n```cs\r\npublic static class ZipExtensions\r\n{\r\n    public static IEnumerable<(T, U)> Zip<T, U>(this IEnumerable<T> seq1, IEnumerable<U> seq2)\r\n    {\r\n        return seq1.Zip(seq2, (x, y) => (x, y));\r\n    }\r\n}\r\n```\r\n\r\n## Usage\r\n\r\n```cs\r\nvar list = new List<int>{1, 2, 3, 4};\r\nforeach(var (n, i) in list.Zip(Range(0, list.Count)))\r\n{\r\n    Console.WriteLine($\"{i}: {n}\");\r\n}\r\n```\r\n\r\n## Other Languages\r\n\r\n`Zip`-like functions in Rust, C++ (Boost, range-v3) all return `tuple`s."},{"Id":"6746443924","Type":"IssuesEvent","CreatedAt":"2017-10-21T02:14:40","Actor":"caozhiyuan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24787","RelatedDescription":"Opened issue \"socket server shutodown  linux client socket still established\" (#24787) at dotnet/corefx","RelatedBody":"tcp        0 159660 192.168.139.132:33693   10.1.4.204:2181         ESTABLISHED\r\n\r\nsocket server(10.1.4.204:2181) shutodown,  linux client socket still established\r\n\r\nhow to deal with it.\r\n\r\n"},{"Id":"6746422275","Type":"IssuesEvent","CreatedAt":"2017-10-21T01:56:32","Actor":"Petermarcu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24786","RelatedDescription":"Opened issue \".NET Core 2.0: ResourceManager ignores Culture, always reads neutral RESX file\" (#24786) at dotnet/corefx","RelatedBody":"@hardcodet commented on [Fri Oct 20 2017](https://github.com/dotnet/core/issues/1036)\n\nVS2017, 15.3.5\r\n\r\nI have an ASP.NET Core 2.0 app to which I added two resource files - the neutral one and one for German:\r\n\r\n* `SiteResources.resx` (English strings)\r\n* `SiteResources.de.resx` (German strings)\r\n\r\nBoth have their Build Action set to `EmbeddedResource`  and the `ResxFileGenerator` as the Custom Tool. So far so good.\r\n\r\nThe problem is: The following code returns always the English value from the **neutral** RESX file:\r\n\r\n    SiteResources.Culture = new CultureInfo(\"de\");\r\n    string s1 = SiteResources.SomeTestString;\r\n\r\nSame would go for this, which is equivalent\r\n\r\n    string s1 = SiteResources.ResourceManager.GetString(\"SomeTestString\", new CultureInfo(\"de\"));\r\n\r\nThis somewhat defeats the whole purpose of having RESX files and the `ResourceManager`. Any idea how to work around this?\r\n\r\n\r\n### Some additional infos\r\n\r\n* My main DLL is called `TaxiLink.Site.dll`\r\n* The compiler creates the following resource file that is put into a culture-specific folder:\r\n   `\\bin\\Debug\\netcoreapp2.0\\de\\TaxiLink.Site.resources.dll`\r\n* I had my resources in a dedicated folder, and also tried a pair of resource files at the root of the application - both didn't work.\n\n"},{"Id":"6746383528","Type":"PullRequestEvent","CreatedAt":"2017-10-21T01:24:51","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24785","RelatedDescription":"Opened pull request \"Re-enabling previously disabled tests for uapaot due to Retain bug\" (#24785) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/24384\r\n\r\nThe tests that were disabled in https://github.com/dotnet/corefx/pull/24385 can now be re-enabled since the bugs have been fixed for uapaot.\r\n\r\ncc @jkotas, @KrzysztofCwalina, @stephentoub, @safern, @leekir"},{"Id":"6746354425","Type":"PullRequestEvent","CreatedAt":"2017-10-21T01:02:26","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24783","RelatedDescription":"Merged pull request \"Exlude CustomMemoryForTest from being reflected on to unblock tests on ILC\" (#24783) at dotnet/corefx","RelatedBody":"Span and friends (such as OwnedMemory) are reflection blocked.\r\nDuring test discovery, xunit tries to reflect on CustomMemoryForTest (the concrete implementation of OwnedMemory) and gets stuck which results in test failures.\r\n\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20171020.02/workItem/System.Memory.Tests/wilogs\r\n> 2017-10-20 13:43:06,224: ERROR: executor(376): _execute_command: Executor timed out after 1200 seconds and was killed.\r\n2017-10-20 13:43:06,224: INFO: event(43): send: Sending event type WorkItemTimeout\r\n\r\n\r\nTyvm for helping resolve this issue, @morganbr! \r\n\r\n@AtsushiKan, what is required to add these types to the contract and stop them from being reflection blocked?\r\n\r\ncc @stephentoub, @KrzysztofCwalina, @safern, @danmosemsft, @leekir"},{"Id":"6746345362","Type":"PullRequestEvent","CreatedAt":"2017-10-21T00:56:01","Actor":"karajas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24784","RelatedDescription":"Opened pull request \"Enable publishing to azure feed\" (#24784) at dotnet/corefx","RelatedBody":"These changes enable us to move on to the model of publishing to Azure Blob feeds.\r\n\r\n/cc @weshaggard @chcosta @MattGal "},{"Id":"6746305086","Type":"IssuesEvent","CreatedAt":"2017-10-21T00:28:34","Actor":"shmao","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24665","RelatedDescription":"Closed issue \"Add Synchronous APIs in Syndication for .Net Core\" (#24665) at dotnet/corefx","RelatedBody":"Syndication on .Net Core currently does not have synchronous APIs, which is not compatible with full framework. We need to add the APIs for compatibility."},{"Id":"6746305084","Type":"PullRequestEvent","CreatedAt":"2017-10-21T00:28:34","Actor":"shmao","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24720","RelatedDescription":"Merged pull request \"Add Synchronous APIs in Syndication for .Net Core\" (#24720) at dotnet/corefx","RelatedBody":"Syndication on .Net Core currently does not have synchronous APIs, which is not compatible with full framework. The PR added the missing APIs. After this PR, all APIs available on desktop are are available on Net Core.\r\n\r\nThis PR didn't add any tests for the sync version APIs. I will add the tests in the next PR.\r\n\r\nFix #24665"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6746558182","Type":"PullRequestEvent","CreatedAt":"2017-10-21T03:59:51","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22792","RelatedDescription":"Merged pull request \"Merge upstream/master into features/NullableReferenceTypes\" (#22792) at dotnet/roslyn","RelatedBody":""},{"Id":"6746426785","Type":"PullRequestEvent","CreatedAt":"2017-10-21T02:00:22","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22799","RelatedDescription":"Opened pull request \"Test only change: Enable VB PDB conversion tests that involve hoisted locals\" (#22799) at dotnet/roslyn","RelatedBody":"Upgrades to the new version of PDB converter that implements conversion of state machine hoisted locals and enables previously skipped VB tests."},{"Id":"6746425708","Type":"PullRequestEvent","CreatedAt":"2017-10-21T01:59:36","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22798","RelatedDescription":"Opened pull request \"Copy actual result from test into clipboard\" (#22798) at dotnet/roslyn","RelatedBody":"@jaredpar @gafter  This is a little experiment that I'd like to get your feedback on.\r\n\r\nI've had to do a lot of copy/paste to update some diagnostics in tests recently. I think we could design a codefix that would fix expectations with a single click (running the tests would collect the actual results into some store and associate them to the proper location in test code).\r\nBut I figured a really cheap approximation using the clipboard as a way to store the actual result for one test.\r\n\r\nSo far, I only instrumented `VerifyDiagnostics`, but we could do the same with other `Assert` methods.\r\nGiven that we don't have access to proper clipboard API in our target frameworks, I had to resort to a process, which pops up very briefly...\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6746459626","Type":"PullRequestEvent","CreatedAt":"2017-10-21T02:28:39","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4772","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4772) at dotnet/corert","RelatedBody":""},{"Id":"6746270525","Type":"PullRequestEvent","CreatedAt":"2017-10-21T00:08:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4773","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4773) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6746248468","Type":"PullRequestEvent","CreatedAt":"2017-10-20T23:56:33","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4773","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4773) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6746223197","Type":"PullRequestEvent","CreatedAt":"2017-10-20T23:42:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4772","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4772) at dotnet/corert","RelatedBody":""},{"Id":"6746222276","Type":"PullRequestEvent","CreatedAt":"2017-10-20T23:42:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4770","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4770) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6746221774","Type":"PullRequestEvent","CreatedAt":"2017-10-20T23:42:14","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4771","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4771) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6746181174","Type":"PullRequestEvent","CreatedAt":"2017-10-20T23:22:17","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4729","RelatedDescription":"Merged pull request \"Added support for ldsfld/stsfld/ldsflda/ldflda including general value type support\" (#4729) at dotnet/corert","RelatedBody":"@morganbr This commit somewhat steps on/builds from #4695. For the static fields, I'm not entirely certain what the structure should be for generating the fields. It would be helpful if there were type output scaffolding in place, to make it clear where the various type level operations should be taking place."},{"Id":"6746109805","Type":"PullRequestEvent","CreatedAt":"2017-10-20T22:50:13","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4771","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4771) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6745900789","Type":"PullRequestEvent","CreatedAt":"2017-10-20T21:36:59","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4770","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4770) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6745304281","Type":"IssuesEvent","CreatedAt":"2017-10-20T19:00:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4752","RelatedDescription":"Closed issue \"[ILVerify] Probably false negative in a specific case with generics\" (#4752) at dotnet/corert","RelatedBody":"For the following code, I get\r\n\r\n`Assert::AreEqual(!!0, !!0)][offset 0x0000000A][found ref 'T'][expected ref '[mscorlib]System.IEquatable´1<T>'] Unexpected type on the stack.`\r\n\r\nThe code is\r\n\r\n```\r\nusing System;\r\n\r\nnamespace ILVerifyBug\r\n{\r\n    static class Assert\r\n    {\r\n        public static bool AreEqual<T>(T a, T b) where T : IEquatable<T>\r\n        {\r\n            return a.Equals(b);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n(I have minimized it as much as possible.)"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":17,"RawContent":null},{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":377,"FavoriteCount":346,"RawContent":null},{"Id":"920393493557555205","CreatedAt":"2017-10-17T20:58:03+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Preview of Quality Rollup https://t.co/oVqxMXye74","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":16,"RawContent":null},{"Id":"920179824576028673","CreatedAt":"2017-10-17T06:49:00+00:00","UserScreenname":"dotnet","Text":".NET Framework Docker Performance Issue Resolved https://t.co/FST3EfcLtS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":29,"RawContent":null},{"Id":"920157146309730305","CreatedAt":"2017-10-17T05:18:54+00:00","UserScreenname":"dotnet","Text":"RyuJIT Just-in-Time Compiler Optimization Enhancements https://t.co/dhO8rAqiSI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":131,"FavoriteCount":76,"RawContent":null},{"Id":"918494723425406976","CreatedAt":"2017-10-12T15:13:01+00:00","UserScreenname":"dotnet","Text":"So many fantastic #dotnetconf sessions this year! Check them out on-demand on @ch9 https://t.co/aFDC9i36Lu https://t.co/diQ3nfOU5p","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":70,"RawContent":null},{"Id":"917994173541777409","CreatedAt":"2017-10-11T06:04:01+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Security and Quality Rollup https://t.co/MRrH6YjXGy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":29,"FavoriteCount":21,"RawContent":null}]}},"RunOn":"2017-10-21T05:30:18.7496264Z","RunDurationInMilliseconds":6487}