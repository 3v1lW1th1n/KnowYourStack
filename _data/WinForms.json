{"Data":{"GitHub":{"Issues":[{"Id":"588812835","IsPullRequest":true,"CreatedAt":"2020-03-27T00:47:20","Actor":"RussKie","Number":"3015","RawContent":null,"Title":"fix incorrect access modifiers","State":"open","Body":"Resolves #2997\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\n- fix incorrect access modifiers\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3015)","Url":"https://github.com/dotnet/winforms/pull/3015","RelatedDescription":"Open PR \"fix incorrect access modifiers\" (#3015)"},{"Id":"587839174","IsPullRequest":true,"CreatedAt":"2020-03-26T14:37:14","Actor":"mmitche","Number":"3011","RawContent":null,"Title":"Feed cleanup","State":"closed","Body":"Move away from blob feeds\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3011)","Url":"https://github.com/dotnet/winforms/pull/3011","RelatedDescription":"Closed or merged PR \"Feed cleanup\" (#3011)"},{"Id":"588241363","IsPullRequest":true,"CreatedAt":"2020-03-26T08:28:42","Actor":"M-Lipin","Number":"3014","RawContent":null,"Title":"Fixing issue 2704: Cannot find the RichEdit control of the \"Text\" property in UIA structure of a PropertyGrid control","State":"open","Body":"Adding PropertyGrid DropDown control holder and its child edit control to the UIA hierarchy of the PropertyGrid.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2704 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Adding accessible object for PropertyGrid's DropDownControlHolder;\r\n- Implementing accessible navigation to find DropDownControlHolder pane and its child edit control in UIA hierarchy in PropertyGrid.\r\n- Adding resource to announce DropDownControlHolder pane accessible name to inform users that the currently edited RichEdit control or another edit control is hosted in PropertyGrid's DropDown control holder.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers will be able to distinguish the dropped down control from another form controls if using Narrator or another screen reader.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/73003863-605b7d80-3e17-11ea-92af-f66d92fec2a1.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/73004026-ae708100-3e17-11ea-845d-448e48585d7d.png)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing;\r\n- Unit tests (to be implemented);\r\n- UI tests.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha1-015763\r\n Commit:    0d0c902b77\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-015763\\\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\nPrevious PR: was closed due to expiration: https://github.com/dotnet/winforms/pull/2758\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3014)","Url":"https://github.com/dotnet/winforms/pull/3014","RelatedDescription":"Open PR \"Fixing issue 2704: Cannot find the RichEdit control of the \"Text\" property in UIA structure of a PropertyGrid control\" (#3014)"},{"Id":"588169678","IsPullRequest":true,"CreatedAt":"2020-03-26T05:38:13","Actor":"RussKie","Number":"3013","RawContent":null,"Title":"Untangle test utils refs","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nPre-req or addendum to #3010\r\n\r\n\r\n## Proposed changes\r\n\r\n- Break up and remove `InternalUtilitiesForTests` project\r\n- Move all low-level general test functionality into `System.Windows.Forms.Primitives.TestUtilities` project. `System.Windows.Forms.Primitives.Tests` is made dependent on this project.\r\n- Move all other test-related functionality into `System.Windows.Forms.TestUtilities` project, dependent on `System.Windows.Forms.Primitives.TestUtilities` project. Update all main test projects to depend on this project.\r\n\r\nNB: some tests in `System.Windows.Forms.Primitives.Tests` have been commented out until necessary low-level abstractions (such as introduced in #3010) are added.\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3013)","Url":"https://github.com/dotnet/winforms/pull/3013","RelatedDescription":"Open PR \"Untangle test utils refs\" (#3013)"},{"Id":"587840819","IsPullRequest":false,"CreatedAt":"2020-03-25T16:51:17","Actor":"JuditRose","Number":"3012","RawContent":null,"Title":"Run API Compat tool for .NET Framework 4.8 and .NET Core 3.1","State":"open","Body":"We need to keep API compatibility documented to be aware of the breaking changes that we implemented over the VS Winforms versions. \r\n\r\nThe aim is to run API compat against .NET Framework 4.8 and the last released version in .NET Core for all PRs and on master and be notified if the backward compatibility changes.\r\n\r\nThe current implementation is running against .NET core 3.0 and .NET Framework 4.7.2: https://github.com/dotnet/winforms/pull/2092\r\nThere is a WIP PR for .NET Core 3.1: https://github.com/dotnet/winforms/pull/2112 \r\n - choice: iterate through the assemblies one by one and run api compat on each of them, or do it in batch. \r\nIf API compat is being run for each assemblies that is good when the assemblies are mostly built separate, so we can see the API compat outcome. Although if someone removes an assembly that could go unnoticed. (This is how it's implemented in the WIP PR, although for us maybe would make more sense to do it in batch.)\r\n\r\nImplementation steps:\r\n1. Create a witness project to download Winforms previous versions from nuget as a contract that we validate against (for both Framework and Core)\r\n - this will also download the dependency assemblies that we also want to compare because if a dependency changes that could also affect Winforms' backward compatibility\r\n2. we possibly don't want to compare all the assemblies, we could define a static list of exclusions like here: https://github.com/dotnet/winforms/blob/master/src/System.Windows.Forms/src/System.Windows.Forms.csproj\r\n3. run api compat tool to compare the contracts (Framework and Core)\r\n - There will be already differences in the contracts, so this will fail on the first run, based on that list we can create the baseline file\r\n - if the baseline file is defined, the api compat should be successful, and when it gets broken in the future it will break the build and log the error\r\n\r\nDocumentation on API Compat usage:\r\nhttps://github.com/dotnet/wpf/blob/master/Documentation/api-compat.md\r\nhttps://github.com/dotnet/arcade/blob/8fed91a4435cae29ab0f0e4f18a291cd38b0f23e/src/Microsoft.DotNet.ApiCompat/README.md\r\n\r\nAPI Compat shim: https://github.com/dotnet/runtime/blob/master/src/libraries/shims/ApiCompat.proj\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3012","RelatedDescription":"Open issue \"Run API Compat tool for .NET Framework 4.8 and .NET Core 3.1\" (#3012)"},{"Id":"587452214","IsPullRequest":true,"CreatedAt":"2020-03-25T05:27:44","Actor":"JeremyKuhne","Number":"3010","RawContent":null,"Title":"Add a low level window class","State":"open","Body":"Adds WindowClass for testing windows messages.\r\n\r\nAdds InternalsVisibleTo so we can expose helpers for Interop testing from internal test utility.\r\n\r\nRef to SWF in internal test utility should be removed. This is one step. Tests using AxHost should refactor AxHost helper methods into SWF.Primitives (don't move the whole AxHost down).\r\n\r\nFix a bug in Cursor interop.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3010)","Url":"https://github.com/dotnet/winforms/pull/3010","RelatedDescription":"Open PR \"Add a low level window class\" (#3010)"},{"Id":"586467115","IsPullRequest":false,"CreatedAt":"2020-03-24T01:52:49","Actor":"Jmales","Number":"3009","RawContent":null,"Title":"How to change ActiveWindow","State":"closed","Body":"I have a .NET Framework app where I need to change the active window that is focused. This does the trick:\r\n\r\n```\r\n    public override void SetFocus (IntPtr window) {\r\n        Win32.SetForegroundWindow(window);\r\n    }\r\n```\r\nAnd with this I'm able to select either a Chrome browser or one of my app windows as the active window.\r\n\r\nNow I'm in the process of moving it to .NET Core to work in Mac as well and I can't find any way of changing the selected window.\r\n\r\nIs this possible to do in .NET Core in any way?","Url":"https://github.com/dotnet/winforms/issues/3009","RelatedDescription":"Closed issue \"How to change ActiveWindow\" (#3009)"},{"Id":"586206523","IsPullRequest":true,"CreatedAt":"2020-03-23T13:25:24","Actor":"M-Lipin","Number":"3008","RawContent":null,"Title":"PropertyGridView crashes on editing ListBoxProperty with null values","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2316 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Adding the test selected item for null before accessing the selected item accessible object in PropertyGrid's ListBox property.\r\n\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Users will not experience error even the ListBox property has\r\n null values.\r\n\r\n## Regression? \r\n\r\n- Yes\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nApplication crash. Error with callstack ( please see #2316 )\r\n\r\n### After\r\n\r\nNo error.\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing;\r\n- Unit test (to be implemented);\r\n- UI automation.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha.1.20073.10\r\n Commit:    29f4d693a9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-alpha.1.20072.3\r\n  Commit:  c3dc1fdfdc\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\nPrevious PR (was cancelled): #2789 \r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3008)","Url":"https://github.com/dotnet/winforms/pull/3008","RelatedDescription":"Open PR \"PropertyGridView crashes on editing ListBoxProperty with null values\" (#3008)"},{"Id":"586137311","IsPullRequest":false,"CreatedAt":"2020-03-23T11:28:04","Actor":"harborsiem","Number":"3007","RawContent":null,"Title":"Anchoring a Control at a UserControl","State":"open","Body":"  * .NET Core Version: \r\n  .NET Core SDK (gemäß \"global.json\"):\r\n   Version:   3.1.200\r\n   Commit:    c5123d973b\r\n  \r\n  Laufzeitumgebung:\r\n   OS Name:     Windows\r\n   OS Version:  10.0.18363\r\n   OS Platform: Windows\r\n   RID:         win10-x64\r\n   Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.200\\\r\n  \r\n  Host (useful for support):\r\n    Version: 3.1.2\r\n    Commit:  916b5cba26\r\n  \r\n  * Have you experienced this same bug with .NET Framework?: \r\n   No \r\n  \r\n  **Problem description:**\r\n  \r\n  I place a ListView (or other Controls like a Panel) to a UserControl with the same Size 250, 200. Margins of the ListView are set to Zero. Anchor of ListView is set to Left, Top, Right and Bottom.\r\n  The UserControl is placed on a Form. When the Form is shown, the UserControl sized correctly to a Size of 292, 231 by the Segui Font, but the ListView have a Size 249, 199\r\n  \r\n  \r\n  **Expected behavior:**\r\n  \r\n  The ListView should anchor correctly to a Size like the UserControl.\r\n  \r\n  **Minimal repro:**\r\n\r\nSee project TestControls. I have colorized the BackColor of UserControl and ListView different.\r\n[TestControls.zip](https://github.com/dotnet/winforms/files/4368973/TestControls.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3007","RelatedDescription":"Open issue \"Anchoring a Control at a UserControl\" (#3007)"},{"Id":"585421772","IsPullRequest":false,"CreatedAt":"2020-03-23T02:52:26","Actor":"ygc369","Number":"3000","RawContent":null,"Title":"Proposal: add \"AutoSaveAndRepaint\" property to PictureBox control.","State":"closed","Body":"PictureBox current behavior:\r\n    If you paint something on the picturebox, and minimize the application that uses the picturebox, and then restore the application, you will find that what you have painted disappears. \r\n\r\nThis is a common problem that many people meet. So I hope that PictureBox control can have an \"AutoSaveAndRepaint\" property, if it is set as true, anything painted on the picturebox would be saved automatically and would not disappear when the picturebox is refreshed or repainted.","Url":"https://github.com/dotnet/winforms/issues/3000","RelatedDescription":"Closed issue \"Proposal: add \"AutoSaveAndRepaint\" property to PictureBox control.\" (#3000)"},{"Id":"585680876","IsPullRequest":true,"CreatedAt":"2020-03-23T02:17:25","Actor":"gpetrou","Number":"3004","RawContent":null,"Title":"Add ICON enum in Interop User32","State":"closed","Body":"## Proposed changes\r\n\r\n- Add ICON enum in Interop User32.\r\n- Remove ICON constants and replace their usages with the above enum values.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3004)","Url":"https://github.com/dotnet/winforms/pull/3004","RelatedDescription":"Closed or merged PR \"Add ICON enum in Interop User32\" (#3004)"},{"Id":"584825897","IsPullRequest":true,"CreatedAt":"2020-03-23T02:10:49","Actor":"RussKie","Number":"2994","RawContent":null,"Title":"Ship API that were release in Preview1","State":"closed","Body":"Preview1: d542887a907b98757a359078c3b4c25bf01b6837\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2994)","Url":"https://github.com/dotnet/winforms/pull/2994","RelatedDescription":"Closed or merged PR \"Ship API that were release in Preview1\" (#2994)"},{"Id":"585789811","IsPullRequest":true,"CreatedAt":"2020-03-22T19:09:15","Actor":"gpetrou","Number":"3006","RawContent":null,"Title":"Add SIZE enum in Interop User32","State":"open","Body":"## Proposed changes\r\n\r\n- Add SIZE enum in Interop User32.\r\n- Remove SIZE constants and replace their usages with the above enum values.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3006)","Url":"https://github.com/dotnet/winforms/pull/3006","RelatedDescription":"Open PR \"Add SIZE enum in Interop User32\" (#3006)"},{"Id":"585702710","IsPullRequest":true,"CreatedAt":"2020-03-22T12:22:40","Actor":"dotnet-maestro[bot]","Number":"3005","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200321.1\r\n- **Date Produced**: 3/21/2020 1:34 PM\r\n- **Commit**: 7dbc907fa03eacf4c57f827cb4235d77b7ed4fcd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20171.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20171.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20171.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20171.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20171.1\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3005)","Url":"https://github.com/dotnet/winforms/pull/3005","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3005)"},{"Id":"585528153","IsPullRequest":false,"CreatedAt":"2020-03-21T16:07:49","Actor":"AraHaan","Number":"3003","RawContent":null,"Title":"Form.ActiveForm does not return null when an owned model window should not be \"active\"","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET Core 3.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nWhen a form is showed the ``ActiveForm`` property on a form returns the form (if main form returns that), or ``null`` when a window from another process is active. However when on a ``Model`` form with the main form as the owner, doing that results in the property always returning that ``Model`` form instead of ``null`` like I think it should. Not even the ``Deactivate`` nor the ``Activated`` events fire when this happens.\r\n\r\n\r\n**Expected behavior:**\r\nfor ``ActiveForm`` to return ``null`` when no forms (including model forms with the main form as owner) when a window from another application is active. Same for the Activated/Deactivate events should also fire as well when this happens or when reclicked on that should make it become Activated again.\r\n\r\n\r\n**Minimal repro:**\r\n\r\n1. Create a new winforms project.\r\n2. Create a in the ``Form1`` code make the form create another form a button in it is clicked making that form the owner of another instance of itself.\r\n3. Do some painting work that uses the ``Paint`` event on the form code that changes colors when \r\n```cs\r\n// this.active is an added attempt to double check and make sure it is\r\n// active using the Activated/Deactivate events.\r\nif (Equals(ActiveForm, this) && this.active)\r\n{\r\n    // e.Graphics stuff.\r\n}\r\nelse\r\n{\r\n    // e.Graphics stuff.\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/3003","RelatedDescription":"Open issue \"Form.ActiveForm does not return null when an owned model window should not be \"active\"\" (#3003)"},{"Id":"585486108","IsPullRequest":true,"CreatedAt":"2020-03-21T12:17:44","Actor":"dotnet-maestro[bot]","Number":"3002","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200320.4\r\n- **Date Produced**: 3/20/2020 9:54 PM\r\n- **Commit**: 89aa923e9c53483f61ec28bf9d546ac39d54a26b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20170.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20170.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20170.4\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20170.4\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20170.4\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3002)","Url":"https://github.com/dotnet/winforms/pull/3002","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3002)"},{"Id":"584194863","IsPullRequest":true,"CreatedAt":"2020-03-21T07:58:24","Actor":"RussKie","Number":"2988","RawContent":null,"Title":"WIP: Fail `RemoteExecutor` tests that fail","State":"closed","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #\r\n\r\n\r\n## Proposed changes\r\n\r\n- \r\n- \r\n- \r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- \r\n- \r\n\r\n## Regression? \r\n\r\n- Yes / No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- \r\n- \r\n- \r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- <!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2988)","Url":"https://github.com/dotnet/winforms/pull/2988","RelatedDescription":"Closed or merged PR \"WIP: Fail `RemoteExecutor` tests that fail\" (#2988)"},{"Id":"584336442","IsPullRequest":true,"CreatedAt":"2020-03-21T07:56:30","Actor":"hughbe","Number":"2991","RawContent":null,"Title":"Test fix for ListViewGroup footer","State":"closed","Body":"Fixes #2970\r\n\r\nUnconditionally set footer even if it is empty\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2991)","Url":"https://github.com/dotnet/winforms/pull/2991","RelatedDescription":"Closed or merged PR \"Test fix for ListViewGroup footer\" (#2991)"},{"Id":"583696713","IsPullRequest":false,"CreatedAt":"2020-03-21T07:50:16","Actor":"mvtec-bergdolll","Number":"2986","RawContent":null,"Title":"Breaking change in SuspendLayout + AutoScaleDimensions interplay vs .NET Framework","State":"closed","Body":"* .NET Core Version: \r\n.NET Core 3.1.102\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nPorting our .NET Frameworks based library to .NET Core, we noticed a breaking change resulting in incorrectly scaled components. Reducing it down to a POC, showed the root of the problem seems to be the interplay between `SuspendLayout` and `AutoScaleDimensions`. The relevant code looks like this:\r\n\r\n```c#\r\nprivate void InitializeComponent()\r\n{\r\n    System.Drawing.Size ExpectedSize = new System.Drawing.Size(538, 558);\r\n\r\n    this.SuspendLayout();\r\n    this.components = new System.ComponentModel.Container();\r\n    this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\r\n    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\r\n    this.ClientSize = ExpectedSize;\r\n    this.Text = \"Form1\";\r\n    this.ResumeLayout(false);\r\n    this.PerformLayout();\r\n\r\n    System.Diagnostics.Debug.Assert(this.ClientSize == ExpectedSize);\r\n}\r\n```\r\n\r\nRunning the same code in .NET Frameworks 4.7.2 passes the assert, under .NET Core 3.1.102 the assert fails. This is a clear breaking change I couldn't find any documentation for. Is this intentional? Note, that taking out either `SuspendLayout` or `AutoScaleDimensions` makes the assert pass again.\r\n\r\n\r\n**Expected behavior:**\r\n\r\nSame behavior as .NET Framework or documented breaking change with porting advice.\r\n\r\n**Minimal repro:**\r\n\r\nFind the full .NET Core POC source here: https://github.com/mvtec-bergdolll/dotnet-core-layout-bug-poc","Url":"https://github.com/dotnet/winforms/issues/2986","RelatedDescription":"Closed issue \"Breaking change in SuspendLayout + AutoScaleDimensions interplay vs .NET Framework\" (#2986)"},{"Id":"585449394","IsPullRequest":false,"CreatedAt":"2020-03-21T07:39:35","Actor":"RussKie","Number":"3001","RawContent":null,"Title":"Allow set font application-wide","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nThe default font has been updated in .NET Core 3.0 (#656) and [documented](https://docs.microsoft.com/en-us/dotnet/core/compatibility/fx-core#default-control-font-changed-to-segoe-ui-9-pt). However for some users there is still an element of surprise when they migrate their apps to .NET Core.\r\nWe've received several questions regarding different sizes of forms (e.g. https://github.com/dotnet/winforms/issues/1122, https://github.com/dotnet/winforms/issues/1827, etc.).\r\n\r\nWhilst the new default font is here to stay, some users may wish to retain the original font (e.g. due to a design of their app). However for an application with more than a handful of forms, setting the original font may be tedious and cumbersome exercise.\r\n\r\n\r\n**Describe the solution you'd like**\r\n\r\nAdd the ability to set an application-wide font, similar to `SetHighDpiMode()` or `SetCompatibleTextRenderingDefault()` methods.\r\n\r\n* This method must be \"run only once\" kind, i.e. a user may not be allowed to invoke it once an app has started.\r\n* Any form that doesn't explicitly specify its own font, must inherit the application default font.\r\n\r\nThe signature:\r\n```cs\r\npublic class Application\r\n{\r\n\tvoid SetDefaultFont(Font font);\r\n}\r\n```\r\n\r\nThe callsite:\r\n```diff\r\n        [STAThread]\r\n        static void Main()\r\n        {\r\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\r\n            Application.EnableVisualStyles();\r\n            Application.SetCompatibleTextRenderingDefault(false);\r\n\r\n+           Application.SetDefaultFont(new Font(new FontFamily(\"Microsoft Sans Serif\"), 8f));\r\n\r\n            Application.Run(new Form1());\r\n        }\r\n```\r\n\r\n**Will this feature affect UI controls?**\r\n\r\nNo\r\n","Url":"https://github.com/dotnet/winforms/issues/3001","RelatedDescription":"Open issue \"Allow set font application-wide\" (#3001)"},{"Id":"585024042","IsPullRequest":true,"CreatedAt":"2020-03-21T05:33:44","Actor":"dotnet-maestro[bot]","Number":"2996","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200320.1\r\n- **Date Produced**: 3/20/2020 9:10 AM\r\n- **Commit**: 08954d95550364cb78764b078c9b24383f8cda48\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20170.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20170.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20170.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20170.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20170.1\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2996)","Url":"https://github.com/dotnet/winforms/pull/2996","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2996)"},{"Id":"585328190","IsPullRequest":true,"CreatedAt":"2020-03-20T21:08:26","Actor":"weltkante","Number":"2999","RawContent":null,"Title":"WIP: implement generic collections without signature changes","State":"open","Body":"Contributes to #2644\r\nAlternative implementation to PR #2749\r\n\r\nThis is a WIP PR for exploring the impact #2644 may have and whether its worth taking the breaking change. This PR attempts to make no breaking change except implementing additional interfaces.\r\n\r\nThis will allow LINQ support and other extension methods pick up the member type of the list, but the major downside of not allowing breaking changes is that plain `foreach` loops will not pick up nullability annotations because they need the return type of `GetEnumerator` adjusted, which is a breaking change (see PR #2749 for an implementation attempt)\r\n\r\nNotes:\r\n- As far as placement of new code goes I tried to orient myself on the corresponding `IList` methods (where available), this makes for weird placement since not all `IList<T>` methods are together, but considering I don't really want to reorder the existing methods (unless asked to) I figured it'd be the best solution to minimize diffs for now.\r\n- There are plenty of odd design decisions in the original collections subclassing hierarchy which makes updating them harder.\r\n- Existing `Remove` implementations don't tell the caller whether they removed something, but `IList<T>` requires this in its API. In some places where collections can be subclassed it is not easily possible to obtain this information, which leads to a bit weird looking implementation. Depending on how much you want to assume about subclass behavior these could be simplified.\r\n- There are bugs in some existing collection classes where they don't check in `Remove` implementations whether the item to be removed is actually part of the collection. They run logic which severs the item and partially disconnects it from its true owner, but without notifying that owner. I did not fix these bugs yet (some are marked with comments though), I'm going to create a separate issue for this problem (so it doesn't have to wait for this issue/PR, which probably will take a while to dicscuss and resolve all points).\r\n- xunit apparently doesn't support non-generic lists, so when you start implementing the generic list interface all kinds of collection-tests stop compiling because some analyzer wants you to use `Assert.Contains` or `Assert.DoesNotContain`. Minor inconvenience which is easily fixed.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2999)","Url":"https://github.com/dotnet/winforms/pull/2999","RelatedDescription":"Open PR \"WIP: implement generic collections without signature changes\" (#2999)"},{"Id":"585228622","IsPullRequest":false,"CreatedAt":"2020-03-20T17:42:05","Actor":"fahadabdulaziz","Number":"2998","RawContent":null,"Title":"Touch Support","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nLack of touch support.\r\n\r\n**Describe the solution you'd like**\r\n\r\nAdd support for touch to System.Windows.Form.Control.\r\n\r\nAs I know there are three events could be used:\r\nDown\r\nUp\r\nMove\r\n\r\n**Describe alternatives you've considered**\r\n\r\n\r\n**Will this feature affect UI controls?**\r\nYes\r\n\r\n- Will VS Designer need to support the feature? If yes, describe how you expect it to funсtion.\r\n                     **No**\r\n- What impact will it have on accessibility?\r\n                    **I don't know :-)**\r\n- Will this feature need to be localized or be localizable?\r\n                    **No**\r\n\r\nThanks\r\n","Url":"https://github.com/dotnet/winforms/issues/2998","RelatedDescription":"Open issue \"Touch Support\" (#2998)"},{"Id":"584795323","IsPullRequest":false,"CreatedAt":"2020-03-20T14:50:30","Actor":"HermanEldering","Number":"2993","RawContent":null,"Title":"Enable PickFolders in OpenFileDialog","State":"closed","Body":"Sometimes I need the user to select a folder. The OpenFileDialog can be used to select files but currently doesn't expose the functionality to select folders. Developers now need to include custom common dialog interop, for instance from the Windows API Code Pack which hasn't been maintained for many years or Okii Dialogs.\r\n\r\nThe solution I suggest is to add a property IsFolderPicker to set the FOS_PICKFOLDERS flag in the dialog options and changing the GetOptions() method to allow the flag. This seems to be a relatively minor change, especially if only Vista or later Windows version are supported.\r\n\r\nOne alternative to this change is to have each project duplicate the entire OpenFileDialog interop either within their source code or by referencing a nuget package, merely to toggle a single bit. A second alternative is [using reflection to toggle the bit in the private field](https://github.com/Willy-Kimura/BetterFolderBrowser). Yet another alternative is to use the FolderBrowserDialog class, but that option uses another UI.\r\n\r\nI is also possible to add a property to FolderBrowserDialog so that it will use the Vista OpenFileDialog folder picker, but that deviates more from the underlaying Windows API.\r\n\r\nThere seems to be an edge case where the Vista file dialog is not available (https://github.com/dotnet/winforms/issues/2506), that might need to be taken into account. It could perhaps fall back to FolderBrowserDialog in that case.","Url":"https://github.com/dotnet/winforms/issues/2993","RelatedDescription":"Closed issue \"Enable PickFolders in OpenFileDialog\" (#2993)"},{"Id":"585091742","IsPullRequest":false,"CreatedAt":"2020-03-20T14:04:52","Actor":"Nukepayload2","Number":"2997","RawContent":null,"Title":"BC30562: '“MsgBox” is ambiguous between declarations in Modules “Microsoft.VisualBasic.Interaction, Microsoft.VisualBasic._Interaction”","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0.100-preview.1.20155.7\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nUnable to use `MsgBox`, `Shell` and `InputBox` without qualifying them with `Interaction.`\r\nBC30562: '“MsgBox” is ambiguous between declarations in Modules “Microsoft.VisualBasic.Interaction, Microsoft.VisualBasic._Interaction”\r\n\r\n**Expected behavior:**\r\n`MsgBox(\"\")` should not have BC30562 compilation error .\r\nMicrosoft.VisualBasic._Interaction should be `Friend` instead of `Public` .\r\n\r\n**Minimal repro:**\r\n```cmd\r\ndotnet new winforms -lang vb\r\n```\r\n\r\nEdit Form1.vb\r\n```vb\r\nPrivate Sub Form1_Load() Handles Me.Load\r\n    MsgBox(\"\")\r\nEnd Sub\r\n```","Url":"https://github.com/dotnet/winforms/issues/2997","RelatedDescription":"Open issue \"BC30562: '“MsgBox” is ambiguous between declarations in Modules “Microsoft.VisualBasic.Interaction, Microsoft.VisualBasic._Interaction”\" (#2997)"},{"Id":"584829012","IsPullRequest":true,"CreatedAt":"2020-03-20T05:32:10","Actor":"RussKie","Number":"2995","RawContent":null,"Title":"Fix flaky test","State":"closed","Body":"The test may intermittently fail in internal CI agents. Presumably due to either no IE installer or a different version of IE, that yeilds `DocumentType` as \"HTM File\" instead of \"HTML Document\".\r\n\r\nFixes: https://github.com/dotnet/winforms/pull/2962#discussion_r394735398\r\n\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- Assert that `DocumentType` is set without asserting the string itself, as we don't control the content\r\n\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2995)","Url":"https://github.com/dotnet/winforms/pull/2995","RelatedDescription":"Closed or merged PR \"Fix flaky test\" (#2995)"},{"Id":"584335294","IsPullRequest":true,"CreatedAt":"2020-03-20T02:35:30","Actor":"hughbe","Number":"2990","RawContent":null,"Title":"Fix WebBrowser tests on internal CI","State":"closed","Body":"See https://github.com/dotnet/winforms/pull/2962#discussion_r394735398 - guessing this depends on the version of IE installed on the computer.\r\n\r\nDoesn't yet fix https://github.com/dotnet/winforms/pull/2962#discussion_r394748792 - waiting for comments /cc @russkie @weltkante \r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2990)","Url":"https://github.com/dotnet/winforms/pull/2990","RelatedDescription":"Closed or merged PR \"Fix WebBrowser tests on internal CI\" (#2990)"},{"Id":"584362891","IsPullRequest":true,"CreatedAt":"2020-03-20T00:41:47","Actor":"dotnet-maestro[bot]","Number":"2992","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200318.2\r\n- **Date Produced**: 3/18/2020 1:46 PM\r\n- **Commit**: 1ffbf7b1b3d4842d027aecda84e9ece2bb3855d0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20168.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20168.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20168.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20168.2\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20168.2\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2992)","Url":"https://github.com/dotnet/winforms/pull/2992","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2992)"},{"Id":"584214652","IsPullRequest":false,"CreatedAt":"2020-03-19T23:42:49","Actor":"TempeBrennan","Number":"2989","RawContent":null,"Title":"RichTextBox paint result is not good","State":"closed","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n3.1.200\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nUse sendMessage API to get RichTextBox paint result and draw to a panel:\r\n\r\nhttps://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessage\r\n\r\n```\r\nUnsafeNativeMethods.SendMessage(new HandleRef(this.myRichTextBox1, this.myRichTextBox1.Handle), UnsafeNativeMethods.EM_FORMATRANGE, new IntPtr(1), ref fmt);\r\nUnsafeNativeMethods.SendMessage(new HandleRef(this.myRichTextBox1, this.myRichTextBox1.Handle), UnsafeNativeMethods.EM_FORMATRANGE, IntPtr.Zero, IntPtr.Zero);\r\n```\r\n\r\nset font, everything is ok :\r\n![image](https://user-images.githubusercontent.com/51563666/77041169-5b204680-69f4-11ea-953d-3a39cac99869.png)\r\n\r\nset selection font, paint result is not good:\r\n![image](https://user-images.githubusercontent.com/51563666/77041366-be11dd80-69f4-11ea-8f16-523cc92373dd.png)\r\n\r\npaint method code:\r\n```\r\n        public Form1()\r\n        {\r\n            InitializeComponent();\r\n            this.myRichTextBox1.SelectionStart = 0;\r\n            this.myRichTextBox1.SelectionLength = 5;\r\n            this.myRichTextBox1.SelectionFont = new Font(\"MS PGothic\", (float)11.25);\r\n        }\r\n\r\n        private void panel1_Paint(object sender, PaintEventArgs e)\r\n        {\r\n            var render = new MyRichTextBox();\r\n            render.Rtf = this.myRichTextBox1.Rtf;\r\n\r\n            using (Metafile buffer = new Metafile(render.Graphics.GetHdc(), new RectangleF(0f, 0f, (float)render.Bounds.Width, (float)render.Bounds.Height),\r\n                           MetafileFrameUnit.Pixel, EmfType.EmfPlusDual))\r\n            {\r\n                render.Graphics.ReleaseHdc();\r\n                using (Graphics bufferGraphics = Graphics.FromImage(buffer))\r\n                {\r\n                    var hdc = bufferGraphics.GetHdc();\r\n                    try\r\n                    {\r\n                        FORMATRANGE fmt = new FORMATRANGE();\r\n                        fmt.hdc = hdc;\r\n                        fmt.hdcTarget = hdc;\r\n                        fmt.rc = new RECT(0, 0, 1500, 1500);\r\n                        fmt.rcPage = new RECT(0, 0, 1500, 1500);\r\n                        fmt.chrg.cpMin = 0;\r\n                        fmt.chrg.cpMax = -1;\r\n                        UnsafeNativeMethods.SendMessage(new HandleRef(this.myRichTextBox1, this.myRichTextBox1.Handle), UnsafeNativeMethods.EM_FORMATRANGE, new IntPtr(1), ref fmt);\r\n                        UnsafeNativeMethods.SendMessage(new HandleRef(this.myRichTextBox1, this.myRichTextBox1.Handle), UnsafeNativeMethods.EM_FORMATRANGE, IntPtr.Zero, IntPtr.Zero);\r\n                    }\r\n                    finally\r\n                    {\r\n                        bufferGraphics.ReleaseHdc(hdc);\r\n                    }\r\n                }\r\n                e.Graphics.DrawImage(buffer, render.Bounds, 0f, 0f, (float)render.Bounds.Width, (float)render.Bounds.Height, GraphicsUnit.Pixel);\r\n            }\r\n        }\r\n```\r\n\r\nMore detail please reference TestRichTextBoxNETCoreWithAPI\r\n\r\nIf change to use DrawToBitmap method:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.control.drawtobitmap?view=netframework-4.8\r\n\r\nselection font is ok:\r\n![image](https://user-images.githubusercontent.com/51563666/77041689-514b1300-69f5-11ea-8a85-24faf0e26e0b.png)\r\n\r\n\r\nfont is not good if set rich textbox transparent:\r\n![image](https://user-images.githubusercontent.com/51563666/77041509-ffa28880-69f4-11ea-9699-04f3f8ef7e56.png)\r\n\r\nTo solve this issue, we have to give up transparent back color, then issue is fixed:\r\n![image](https://user-images.githubusercontent.com/51563666/77041809-89525600-69f5-11ea-94b3-a9060b0e21bf.png)\r\n\r\n\r\npaint method code:\r\n\r\n```\r\n        public Form1()\r\n        {\r\n            InitializeComponent();\r\n            this.richTextBox1.Text = \"あいうえお\";\r\n            this.richTextBox1.SelectionStart = 0;\r\n            this.richTextBox1.SelectionLength = 5;\r\n            this.richTextBox1.SelectionFont = new Font(\"MS PGothic\", (float)11.25);\r\n\r\n            this.richTextBox2.Text = \"あいうえお\";\r\n            this.richTextBox2.SelectionStart = 0;\r\n            this.richTextBox2.SelectionLength = 5;\r\n            this.richTextBox2.SelectionFont = new Font(\"MS PGothic\", (float)11.25);\r\n        }\r\n\r\n        private void button1_Click(object sender, EventArgs e)\r\n        {\r\n            this.panel1.Invalidate();\r\n        }\r\n\r\n        private void panel1_Paint(object sender, PaintEventArgs e)\r\n        {\r\n            var img = new Bitmap(this.richTextBox1.Width, this.richTextBox1.Height);\r\n            this.richTextBox1.DrawToBitmap(img, new Rectangle(0, 0, this.richTextBox1.Width, this.richTextBox1.Height));\r\n            e.Graphics.DrawImage(img, 0, 0);\r\n        }\r\n\r\n        private void panel2_Paint(object sender, PaintEventArgs e)\r\n        {\r\n            var img = new Bitmap(this.richTextBox2.Width, this.richTextBox2.Height);\r\n            this.richTextBox2.DrawToBitmap(img, new Rectangle(0, 0, this.richTextBox2.Width, this.richTextBox2.Height));\r\n            e.Graphics.DrawImage(img, 0, 0);\r\n        }\r\n\r\n        private void button2_Click(object sender, EventArgs e)\r\n        {\r\n            this.panel2.Invalidate();\r\n        }\r\n```\r\n\r\n**Expected behavior:**\r\nChoose any API to get correct result to paint a rich textbox like real control.\r\nOr maybe this is limitation and is there any workaround to solve it? \r\nThanks a lot!\r\n\r\n**Minimal repro:**\r\n[TestRichTextBox.zip](https://github.com/dotnet/winforms/files/4353148/TestRichTextBox.zip)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/2989","RelatedDescription":"Closed issue \"RichTextBox paint result is not good\" (#2989)"},{"Id":"583733208","IsPullRequest":true,"CreatedAt":"2020-03-19T00:32:50","Actor":"gpetrou","Number":"2987","RawContent":null,"Title":"Move InvalidateRgn to Interop User32","State":"closed","Body":"## Proposed changes\r\n\r\n- Move InvalidateRgn to Interop User32.\r\n- Replace some ExternDll usages with Libraries instead.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2987)","Url":"https://github.com/dotnet/winforms/pull/2987","RelatedDescription":"Closed or merged PR \"Move InvalidateRgn to Interop User32\" (#2987)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-03-27T05:30:54.6723009Z","RunDurationInMilliseconds":878}