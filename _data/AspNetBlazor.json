{"Data":{"GitHubIssues":{"Issues":[{"Id":"345046058","IsPullRequest":false,"CreatedAt":"2018-07-27T00:12:49","Actor":"vertonghenb","Number":"1208","RawContent":null,"Title":"[Server Side] Add Support for cross Browser tab state per user","State":"closed","Body":"First of all the serversideblazor rocks, this is rather an enhancement.\r\n\r\nIn modern SPA's people tend to use the `localstorage `or cookies to store cross browser tab data for a user. Since we're working on the server I can image we can store this data cross tab via DI.\r\n\r\nCurrently we can store user data of the client side by creating an `AppState ` class and adding it to DI as a Scoped Service, which is stored per user per tab. However if we could add a class or service which is cross tab we can eliminate the use of localstorage. \r\n\r\nBasically add a class per user per browser tab/connection in DI, is it even possible?","Url":"https://github.com/aspnet/Blazor/issues/1208","RelatedDescription":"Closed issue \"[Server Side] Add Support for cross Browser tab state per user\" (#1208)"},{"Id":"345045583","IsPullRequest":true,"CreatedAt":"2018-07-27T00:02:58","Actor":"SteveSandersonMS","Number":"1207","RawContent":null,"Title":"Temporarily disable HtmlBlockPass","State":"open","Body":"We've received a number of bug reports about 0.5.0 having regressions for markup that people are commonly using (#1204, #1203, #1198, #1193). It looks like each of these relate to the new optimization in 0.5.0 that represents static HTML as markup frames.\r\n\r\nIt's not yet totally decided, but one possible way forwards for us would be:\r\n\r\n* Via this PR, temporarily disable the compiler part of markup blocks and release as 0.5.1 tomorrow\r\n   * This wouldn't stop people from using `MarkupString` (etc) as the runtime bits would be left enabled. I don't think any of the bugs above relate to the runtime bits anyway.\r\n   * People just trying to render HTML as normal like before would no longer be affected.\r\n* We also collect precise repro cases for each of the above issues\r\n* We fix any `HtmlBlockPass` issues or any runtime issues and re-enable it in 0.6.0 (or 0.5.2 if we decide to do a further patch).\r\n\r\nWe'll make a final call on this tomorrow morning. cc @rynowak @danroth27 ","Url":"https://github.com/aspnet/Blazor/pull/1207","RelatedDescription":"Open PR \"Temporarily disable HtmlBlockPass\" (#1207)"},{"Id":"345033852","IsPullRequest":false,"CreatedAt":"2018-07-26T23:00:00","Actor":"chanan","Number":"1206","RawContent":null,"Title":"Components (Pages) randomly not building in 0.5.0","State":"open","Body":"Not sure if I can reproduce this in a smaller project.\r\n\r\nI have a project: https://github.com/chanan/BlazorStrap that is a Blazor library plus a site the uses that library. The project was upgraded from 0.3.0 -> 0.5.0 (Skipped of 0.4.0 due to a blocking bug in 0.4.0). After upgrading both projects, I did a clean and then a build from within Visual Studio. I started checking the site and I noticed that many Components that have routes give me this error:\r\n\r\n```\r\nblazor.webassembly.js:1 Uncaught (in promise) Error: System.InvalidOperationException: 'Router' cannot find any component with a route for '/alerts2'.\r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.Refresh () <0x1c7cb70 + 0x000b4> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1be5e90 + 0x0003e> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1b6cfb0 + 0x00082> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1b6ce20 + 0x0008a> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InsertNewFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 newFrameIndex) <0x1b6cb00 + 0x000ca> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 oldStartIndex, System.Int32 oldEndIndexExcl, System.Int32 newStartIndex, System.Int32 newEndIndexExcl) <0x1b6c298 + 0x0024a> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.ComputeDiff (Microsoft.AspNetCore.Blazor.Rendering.Renderer renderer, Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] oldTree, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] newTree) <0x1b65ea8 + 0x000a6> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b63350 + 0x000b8> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x1b62f78 + 0x00040> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x1b62718 + 0x00048> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b54240 + 0x0006e> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b53f28 + 0x0003a> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x1b53e30 + 0x00048> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1b47360 + 0x000e0> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent (System.Type componentType, System.String domElementSelector) <0x1aef5d0 + 0x00090> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyBlazorApplicationBuilder.CreateRenderer () <0x1ad10d0 + 0x00078> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHost.StartAsync (System.Threading.CancellationToken cancellationToken) <0x1ab57c8 + 0x0010c> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostExtensions.Run (Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHost host) <0x1ab4f48 + 0x00020> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Sample.Program.Main (System.String[] args) [0x00001] in C:\\Users\\cbraunstein\\source\\repos\\BlazorStrap\\src\\Sample\\Program.cs:9 \r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.Refresh () <0x1c7cb70 + 0x000b4> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Routing.Router.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1be5e90 + 0x0003e> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1b6cfb0 + 0x00082> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1b6ce20 + 0x0008a> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InsertNewFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 newFrameIndex) <0x1b6cb00 + 0x000ca> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 oldStartIndex, System.Int32 oldEndIndexExcl, System.Int32 newStartIndex, System.Int32 newEndIndexExcl) <0x1b6c298 + 0x0024a> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.ComputeDiff (Microsoft.AspNetCore.Blazor.Rendering.Renderer renderer, Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] oldTree, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] newTree) <0x1b65ea8 + 0x000a6> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b63350 + 0x000b8> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x1b62f78 + 0x00040> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x1b62718 + 0x00048> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b54240 + 0x0006e> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b53f28 + 0x0003a> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x1b53e30 + 0x00048> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1b47360 + 0x000e0> in <14b3737636c3454d9ebdd58807bbf070>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent (System.Type componentType, System.String domElementSelector) <0x1aef5d0 + 0x00090> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyBlazorApplicationBuilder.CreateRenderer () <0x1ad10d0 + 0x00078> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHost.StartAsync (System.Threading.CancellationToken cancellationToken) <0x1ab57c8 + 0x0010c> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Microsoft.AspNetCore.Blazor.Hosting.WebAssemblyHostExtensions.Run (Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHost host) <0x1ab4f48 + 0x00020> in <7f8d33166e1d4772b374a06ec932c48c>:0 \r\n  at Sample.Program.Main (System.String[] args) [0x00001] in C:\\Users\\cbraunstein\\source\\repos\\BlazorStrap\\src\\Sample\\Program.cs:9 \r\n    at Object.callMethod (blazor.webassembly.js:1)\r\n    at Object.callEntryPoint (blazor.webassembly.js:1)\r\n    at blazor.webassembly.js:1\r\n    at blazor.webassembly.js:1\r\n    at Object.next (blazor.webassembly.js:1)\r\n    at i (blazor.webassembly.js:1)\r\ncallMethod @ blazor.webassembly.js:1\r\ncallEntryPoint @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\ni @ blazor.webassembly.js:1\r\nPromise.then (async)\r\nl @ blazor.webassembly.js:1\r\ni @ blazor.webassembly.js:1\r\nPromise.then (async)\r\nl @ blazor.webassembly.js:1\r\ni @ blazor.webassembly.js:1\r\nPromise.then (async)\r\nl @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\nr @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\nn @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\n(anonymous) @ blazor.webassembly.js:1\r\n``` \r\n\r\nYou will note that the route is /alerts2 - that is due to try to change the route from /alerts to a different route and see if it worked. It didnt.\r\n\r\nLooking in the obj folder I see the Pages folder but the Alerts.g.i.cs and Alerts.g.cs are missing (as well as some others, but some are there). \r\n\r\nI removed everything from Alerts.cshtml so it now looks like so:\r\n\r\n```\r\n@page \"/alerts2\"\r\n\r\n<h1>Alerts</h1>\r\n```\r\n\r\nThe build output shows no error.\r\n\r\nHowever curiously, the error list does show:\r\n\r\n```\r\nError\tfatal-error\t(ESLint) ESLint encountered a parsing error.\tSample JavaScript Content Files\tC:\\Users\\cbraunstein\\source\\repos\\BlazorStrap\\src\\Sample\\Pages\\Alerts.cshtml\t1\tActive\r\n```\r\n\r\nWhich makes no sense since I don't have anything that file at the moment.\r\n\r\nNo sure how I can get a reproduction sample other than I can upload to my repo the current state of BlazorStrap","Url":"https://github.com/aspnet/Blazor/issues/1206","RelatedDescription":"Open issue \"Components (Pages) randomly not building in 0.5.0\" (#1206)"},{"Id":"345015187","IsPullRequest":false,"CreatedAt":"2018-07-26T21:39:38","Actor":"galvesribeiro","Number":"1205","RawContent":null,"Title":"Failure to serialize Array on Async interop","State":"open","Body":"Hello folks,\r\n\r\nWhile updating the Storage extension to 0.5.0, I've found a potential bug with the *async* interop.\r\n\r\nIf I send an an array, lets say `WeatherForecast[]` from C# -> JS, it works just fine. When JS is sending back an array as return of of a method, the runtime just stops. Nothing happen. No errors, nothing.\r\n\r\nTo reproduce:\r\n\r\nOn a TS/JS:\r\n```typescript\r\n  public GetItem(myArray: any): any {\r\n    return myArray\r\n  };\r\n```\r\n\r\nOn C#:\r\nThat works:\r\n```csharp\r\n        public WeatherForecast[] GetItem(WeatherForecast[] myArray)\r\n        {\r\n            return ((IJSInProcessRuntime)JSRuntime.Current).Invoke<WeatherForecast[]>(\"GetItem\", myArray);\r\n        }\r\n```\r\n\r\nThat *doesn't* works:\r\n```csharp\r\n        public Task<WeatherForecast[]> GetItem(WeatherForecast[] myArray)\r\n        {\r\n            return JSRuntime.Current.InvokeAsync<WeatherForecast[]>(\"GetItem\", myArray);\r\n        }\r\n```\r\n\r\nIn other words... If we call it sync it works, but if we call async, it fail.\r\n\r\nMy first thought was something wrong with the serialization, but that works in the sync mode, so we discarded it.\r\n\r\nWe are suspecting [`endInvokeDotNetFromJS`](https://github.com/aspnet/Blazor/blob/3a27d9b81cad6b3cfa3ca14ba5b8a3453b5d0f03/src/Microsoft.JSInterop/JavaScriptRuntime/src/Microsoft.JSInterop.ts#L198) isn't being caller or is failing somehow. \r\n\r\nI would appreciate any help on that.\r\n\r\nThanks","Url":"https://github.com/aspnet/Blazor/issues/1205","RelatedDescription":"Open issue \"Failure to serialize Array on Async interop\" (#1205)"},{"Id":"345013561","IsPullRequest":false,"CreatedAt":"2018-07-26T21:33:46","Actor":"stavroskasidis","Number":"1204","RawContent":null,"Title":"@ChildContent issues with blazor 0.5.0","State":"open","Body":"I discovered a bug with **@ChildContent**, causing it to not render properly. Here is how to reproduce (in Blazor client-side/wasm) :\r\n\r\n\r\n\r\n#### _MyComponent.cshtml_\r\n```html\r\n<div>\r\n    @ChildContent\r\n</div>\r\n@functions{\r\n    [Parameter] RenderFragment ChildContent { get; set; }\r\n}\r\n```\r\n\r\n#### _Index.cshtml_\r\n```html\r\n<div>\r\n     <!-- this is not being rendered -->\r\n    <MyComponent><i class=\"test\">I am not being rendered</i></MyComponent> \r\n\r\n     <!-- this is being rendered (notice the space at the beginning of the content) -->\r\n    <MyComponent> <i class=\"test\">I am rendered</i></MyComponent>\r\n</div>\r\n```\r\n\r\n#### _Output_\r\n```html\r\n<div>\r\n    \r\n    <!--!--><div>\r\n    \r\n</div>\r\n\r\n    \r\n    <!--!--><div>\r\n     <!--!--><i class=\"test\">I am rendered</i>\r\n</div>\r\n</div>\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1204","RelatedDescription":"Open issue \"@ChildContent issues with blazor 0.5.0\" (#1204)"},{"Id":"344997310","IsPullRequest":false,"CreatedAt":"2018-07-26T20:39:59","Actor":"MarkStega","Number":"1203","RawContent":null,"Title":"Bootstrap menu not rendering properly in Blazor 0.5","State":"open","Body":"The following code in my navmenu.cshtml fails to render properly. Attached are two image pairs. The first pair, navbar-properlyrendered.png & navbar-blazorrendered.png show the odd styling (notice the layout of the three links) in Blazor. \r\n\r\nThe second pair, CollapsedNavbarWithMenuExpanded.png and CollapsedNavbarWithNonExpandingMenu.png show the proper expansion of the menu in the static page and the lack of any expansion in the Blazor page.\r\n\r\nThe proper rendering is in a static html page with the bootstrap css/js imports. The Blazor rendering is from a project derived from the template produced Blazor client.\r\n\r\n`&lt;nav class=\"navbar navbar-expand-md bg-dark navbar-dark\"&gt;\r\n    &lt;a class=\"navbar-brand\" href=\"#\"&gt;Navbar&lt;/a&gt;\r\n    &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\"&gt;\r\n        &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\r\n    &lt;/button&gt;\r\n    &lt;div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\"&gt;\r\n        &lt;ul class=\"navbar-nav\"&gt;\r\n            &lt;li class=\"nav-item\"&gt;\r\n                &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt;\r\n            &lt;/li&gt;\r\n            &lt;li class=\"nav-item\"&gt;\r\n                &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt;\r\n            &lt;/li&gt;\r\n            &lt;li class=\"nav-item\"&gt;\r\n                &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt;\r\n            &lt;/li&gt;\r\n        &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n&lt;/nav&gt;`\r\n\r\n![navbar-properly rendered](https://user-images.githubusercontent.com/634561/43286679-cec4be56-90f0-11e8-9f3f-eec2389c869b.png)\r\n\r\n![navbar-blazor rendered](https://user-images.githubusercontent.com/634561/43286678-ceb8ebbc-90f0-11e8-9ad0-457005cc81b0.png)\r\n\r\n![collapsednavbarwithmenuexpanded](https://user-images.githubusercontent.com/634561/43286956-84670b38-90f1-11e8-9ee9-7b49ae81aa6f.png)\r\n\r\n![collapsednavbarwithnonexpandingmenu](https://user-images.githubusercontent.com/634561/43286957-8470c40c-90f1-11e8-8f35-4027151398be.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1203","RelatedDescription":"Open issue \"Bootstrap menu not rendering properly in Blazor 0.5\" (#1203)"},{"Id":"344994789","IsPullRequest":false,"CreatedAt":"2018-07-26T20:31:58","Actor":"chris-ray","Number":"1202","RawContent":null,"Title":"Run server-side blazor on full framework (net461)","State":"open","Body":"Currently we can run ASP.NET Core 2 apps targeting the full framework. This allows me to wrap up some of my legacy code that has full-framework dependencies and put a nice ASP.NET Core 2 web api around it.\r\n\r\nIt would be great if Server-Side blazor was allowed to run on full framework for the same reason. Are there any specific impediments to supporting this? ","Url":"https://github.com/aspnet/Blazor/issues/1202","RelatedDescription":"Open issue \"Run server-side blazor on full framework (net461)\" (#1202)"},{"Id":"344952356","IsPullRequest":false,"CreatedAt":"2018-07-26T19:54:58","Actor":"stroker5","Number":"1201","RawContent":null,"Title":"Changing code in Chrome Inspector bug","State":"closed","Body":"Hello! I have discovered a stranger behavior on the development.\r\n\r\nSteps:\r\nCreate a simple form with bindings and events.\r\nDelete a line of html code, for experimental design purpose, for example a `<br>`\r\nNavigate to other page.\r\n\r\nThe console throws the following error:\r\nblazor.server.js:23 Uncaught TypeError: Cannot read property 'removeChild' of null\r\n    at e (blazor.server.js:23)\r\n    at e (blazor.server.js:23)\r\n    at Object.e [as removeLogicalChild] (blazor.server.js:23)\r\n    at e.applyEdits (blazor.server.js:23)\r\n    at e.updateComponent (blazor.server.js:23)\r\n    at Object.t.renderBatch (blazor.server.js:16)\r\n    at e.<anonymous> (blazor.server.js:38)\r\n    at blazor.server.js:16\r\n    at Array.forEach (<anonymous>)\r\n    at e.invokeClientMethod (blazor.server.js:16)\r\n\r\nNow the form appears in all the pages...\r\n![image](https://user-images.githubusercontent.com/8848170/43280249-d48b6d26-90ff-11e8-934d-049a3ec62c9a.png)\r\n\r\n![image](https://user-images.githubusercontent.com/8848170/43280273-e3f67a4e-90ff-11e8-9075-eeda60e34077.png)\r\n\r\nThanks! 😄 ","Url":"https://github.com/aspnet/Blazor/issues/1201","RelatedDescription":"Closed issue \"Changing code in Chrome Inspector bug\" (#1201)"},{"Id":"344853535","IsPullRequest":false,"CreatedAt":"2018-07-26T19:00:54","Actor":"danielmeza","Number":"1197","RawContent":null,"Title":"DotNet.invokeMethodAsync faild when invoke Task<T> method on c# code","State":"closed","Body":"When I try to call a async generic method from JavaScript I get this error: The assembly '{assemblyName}' does not contain a public method with [{nameof(JSInvokableAttribute)}(\\\"{methodIdentifier}\\\")].\r\n`\r\n        [JSInvokable]\r\n        public static Task<string> GetAccessToken(string connectionId)\r\n`\r\nits related to ScanAssemblyForCallableMethods in https://github.com/aspnet/Blazor/blob/master/src/Microsoft.JSInterop/DotNetDispatcher.cs  \r\n\r\nIt's a missing feature on this implementation?\r\nAnd if it's, is someone working on implementing?","Url":"https://github.com/aspnet/Blazor/issues/1197","RelatedDescription":"Closed issue \"DotNet.invokeMethodAsync faild when invoke Task<T> method on c# code\" (#1197)"},{"Id":"344760837","IsPullRequest":false,"CreatedAt":"2018-07-26T15:56:00","Actor":"skyne98","Number":"1195","RawContent":null,"Title":"DLLImport Native Libraries ","State":"closed","Body":"Hey everyone!\nI was wondering if it is possible already, or theoretically should be possible to use native LLVM WASM backend, or Emscripten to allow the app to use it's required native binaries?\n\nAs far as I understand, that should be possible to achieve and will allow to easily use already existing C# libraries such as LLVMSharp in the browser.\n\nThanks!","Url":"https://github.com/aspnet/Blazor/issues/1195","RelatedDescription":"Closed issue \"DLLImport Native Libraries \" (#1195)"},{"Id":"344900295","IsPullRequest":false,"CreatedAt":"2018-07-26T15:44:58","Actor":"radek7210","Number":"1200","RawContent":null,"Title":"Chrome: ASP.NET Core Hosted Blazor app does not start if Windows authentication is enabled (Blazor 0.5.0)","State":"open","Body":"Scenario: I have a Blazor app created using the „ASP.NET Core hosted“ template, using IISExpress to run the app. On the server project, I have the „Enable Windows authentication“ checkbox ticked, ie. the corresponding part of lauchSettings.json file is\r\n```code\r\n\"iisSettings\": {\r\n    \"windowsAuthentication\": true,\r\n    \"anonymousAuthentication\": false,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:8000/\",\r\n      \"sslPort\": 0\r\n    }\r\n  }\r\n```\r\n\r\nWhen I try to launch the application in Chrome, the Console shows an error and the application will not start:\r\n\r\n```code\r\nblazor.webassembly.js:1 GET http://localhost:8000/_framework/blazor.boot.json 401 (Unauthorized)\r\nblazor.webassembly.js:1 Uncaught (in promise) SyntaxError: Unexpected token < in JSON at position 0\r\n    at Object.<anonymous> (blazor.webassembly.js:1)\r\n    at blazor.webassembly.js:1\r\n    at Object.next (blazor.webassembly.js:1)\r\n    at i (blazor.webassembly.js:1)\r\n```\r\n\r\nThe “Network” tab indicates a problem with loading the blazor.boot.json file using the “fetch” method (screenshot attached).\r\n![chromefetcherror](https://user-images.githubusercontent.com/41726008/43272916-6e5f7bcc-90fb-11e8-9fdf-3eab4083d6a6.png)\r\n\r\n \r\n\r\nThe problem started to show after updating Blazor to 0.5.0. Before the update, all was working fine.\r\nI’ve tried many things to troubleshoot the issue:\r\n- in Firefox and in Edge, the same app works fine\r\n- I have tried to set-up CORS middleware on the server-side, no luck (but then I am not sure if this issue is related to CORS at all)\r\n- if I run the Fiddler debugging proxy sitting between Chrome and the IISExpress server, the issue miraculously disappears and the application launches fine even in Chrome (after disabling Fiddler, the issue re-appears)\r\n- tried to empty Chrome cache, disabled all extensions in Chrome, disabled all unnecessary middlewares in the server app -> no luck\r\n\r\nDo you have any suggestions what might be wrong? Thanks.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1200","RelatedDescription":"Open issue \"Chrome: ASP.NET Core Hosted Blazor app does not start if Windows authentication is enabled (Blazor 0.5.0)\" (#1200)"},{"Id":"344874568","IsPullRequest":false,"CreatedAt":"2018-07-26T14:43:04","Actor":"galvesribeiro","Number":"1199","RawContent":null,"Title":"404 on PDBs","State":"open","Body":"Hey folks!\r\n\r\nAfter the update to 0.5.0 on BlazorExtensions components, I'm starting to see weird errors on the console pointing that some .pdb files are missing:\r\n\r\n![image](https://user-images.githubusercontent.com/4714040/43269101-87d0b90a-90c8-11e8-8e22-4eec758112de.png)\r\n\r\nFor the record, I'm not even trying to debug. Just running the [BlazorExtensions.Logger test project](https://github.com/BlazorExtensions/Logging/tree/master/test/Blazor.Extensions.Logging.Test) \r\n\r\nCan someone shed a light on that?\r\n","Url":"https://github.com/aspnet/Blazor/issues/1199","RelatedDescription":"Open issue \"404 on PDBs\" (#1199)"},{"Id":"344874055","IsPullRequest":false,"CreatedAt":"2018-07-26T14:41:53","Actor":"uazo","Number":"1198","RawContent":null,"Title":"Issue on htmlblock render","State":"open","Body":"Consider this (please note: all in 1 line without space)\r\n```\r\n<NavLink class=\"nav-link\" href=\"fetchdata\"><span class=\"oi oi-list-rich\" aria-hidden=\"true\"></span> Fetch data</NavLink></li>\r\n```\r\n\r\nextension will compile with\r\n\r\n```\r\nbuilder.OpenComponent<Microsoft.AspNetCore.Blazor.Routing.NavLink>(48);\r\nbuilder.AddAttribute(49, \"class\", \"nav-link\");\r\nbuilder.AddAttribute(50, \"href\", \"fetchdata\");\r\nbuilder.AddMarkupContent(51, \"<span class=\\\"oi oi-list-rich\\\" aria-hidden=\\\"true\\\"></span>\");\r\nbuilder.AddAttribute(52, \"ChildContent\", (Microsoft.AspNetCore.Blazor.RenderFragment)((builder2) => {\r\n    builder2.AddContent(53, \" Fetch data\");\r\n}\r\n));\r\nbuilder.CloseComponent();\r\n```\r\n\r\nthat's incorrect because add an attribute after a content.","Url":"https://github.com/aspnet/Blazor/issues/1198","RelatedDescription":"Open issue \"Issue on htmlblock render\" (#1198)"},{"Id":"344840763","IsPullRequest":true,"CreatedAt":"2018-07-26T13:19:49","Actor":"uazo","Number":"1196","RawContent":null,"Title":"fix dispose components & EventHandler in OutOfProcess Render","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1196","RelatedDescription":"Open PR \"fix dispose components & EventHandler in OutOfProcess Render\" (#1196)"},{"Id":"344732495","IsPullRequest":false,"CreatedAt":"2018-07-26T07:49:48","Actor":"radek7210","Number":"1194","RawContent":null,"Title":"Blazor debugging in Chrome - source of files cannot be displayed if the files are read-only","State":"open","Body":"I understand that the Blazor debugging support is in an early stage yet. Anyways, here is an issue I've come into (developing on Windows 10, Blazor 0.5, latest Visual studio PRO, latest Chrome).\r\n\r\nScenario/repro steps:\r\n- I have a project source-controlled by TFS, checked-in files have read-only attribute\r\n- I run the Blazor app, activate the Blazor debugging in Chrome\r\n- on the DevTools tab, I try to see source of a class in the myproject.Client.dll\r\nI get the following error:\r\n\r\n//dotnet:dotnet://34_29\r\nUnable to open file  xyz (path to my file)\r\n\r\nException:\r\nSystem.UnauthorizedAccessException: Access to the path '............' is denied.\r\n   at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n   at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at WsProxy.MonoProxy.OnGetScriptSource(Int32 msg_id, String script_id, CancellationToken token)\r\n\r\nRunning Sysinternal's Process Monitor tool reveals that the \"dotnet.exe\" process is trying request the \"Generic Read/Write\" access on the file to be displayed; and that fails, as the file is read-only.\r\n\r\n\r\nDesired behavior: I would like to be be able to view content of read-only source files while debugging Blazor app in Chrome.\r\n\r\n\r\nMany thanks to all contributors to the excellent Blazor project.","Url":"https://github.com/aspnet/Blazor/issues/1194","RelatedDescription":"Open issue \"Blazor debugging in Chrome - source of files cannot be displayed if the files are read-only\" (#1194)"},{"Id":"344655794","IsPullRequest":false,"CreatedAt":"2018-07-26T00:50:20","Actor":"guardrex","Number":"1193","RawContent":null,"Title":"0.5.0 is decoding HTML entities","State":"open","Body":"I have angle bracket HTML entities in a Blazor client-side app page ...\r\n\r\n```html\r\n&lt;h1 style=\"font-style:@@_headingFontStyle\"&gt;@@_headingText&lt;/h1&gt;\r\n```\r\n\r\n... it would render that content out with the encoded angle brackets. The browser would render that as text ...\r\n\r\n```text\r\n<h1 style=\"font-style:@_headingFontStyle\">@_headingText</h1>\r\n```\r\n\r\nI just did an 0.4.0 -> 0.5.0 update. It's apparently decoding those `&lt;` and `&gt;` into actual angle brackets. The browser is now rendering that content as HTML.\r\n\r\n<img width=\"481\" alt=\"capture\" src=\"https://user-images.githubusercontent.com/1622880/43234650-e0ead786-9042-11e8-8271-2860cabc0ae9.PNG\">\r\n","Url":"https://github.com/aspnet/Blazor/issues/1193","RelatedDescription":"Open issue \"0.5.0 is decoding HTML entities\" (#1193)"},{"Id":"344608989","IsPullRequest":false,"CreatedAt":"2018-07-25T21:11:52","Actor":"SteveSandersonMS","Number":"1192","RawContent":null,"Title":"Set up nupkg signing in CI","State":"open","Body":"Because we won't be able to ship 0.6.0 until that's done.","Url":"https://github.com/aspnet/Blazor/issues/1192","RelatedDescription":"Open issue \"Set up nupkg signing in CI\" (#1192)"},{"Id":"344273261","IsPullRequest":false,"CreatedAt":"2018-07-25T16:54:19","Actor":"thild","Number":"1186","RawContent":null,"Title":"Razor compiler rewriting valid markup","State":"closed","Body":"Given this valid markup on a cshtml page\r\n```\r\n<ul class=\"legend\">\r\n    <li><span class=\"primeira-serie\"></span> Primeira série</li>\r\n    <li><span class=\"segunda-serie\"></span> Segunda série</li>\r\n    <li><span class=\"terceira-serie\"></span> Terceira série</li>\r\n    <li><span class=\"quarta-serie\"></span> Quarta série</li>\r\n</ul>\r\n```\r\nrazor compiler is rewriting to this\r\n```\r\n<ul class=\"legend\">\r\n   <li><span class=\"primeira-serie\"> Primeira série</span></li>\r\n   <li><span class=\"segunda-serie\"> Segunda série</span></li>\r\n   <li><span class=\"terceira-serie\"> Terceira série</span></li>\r\n   <li><span class=\"quarta-serie\"> Quarta série</span></li>\r\n</ul>\r\n```\r\n```\r\n0.6.0-preview1-10371\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1186","RelatedDescription":"Closed issue \"Razor compiler rewriting valid markup\" (#1186)"},{"Id":"344514948","IsPullRequest":true,"CreatedAt":"2018-07-25T16:53:33","Actor":"SteveSandersonMS","Number":"1190","RawContent":null,"Title":"Fix handling nonvoid elements in markup blocks","State":"closed","Body":"Fixes #1186","Url":"https://github.com/aspnet/Blazor/pull/1190","RelatedDescription":"Closed or merged PR \"Fix handling nonvoid elements in markup blocks\" (#1190)"},{"Id":"344518826","IsPullRequest":true,"CreatedAt":"2018-07-25T16:32:49","Actor":"SteveSandersonMS","Number":"1191","RawContent":null,"Title":"Further 0.5.0 tweaks","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1191","RelatedDescription":"Closed or merged PR \"Further 0.5.0 tweaks\" (#1191)"},{"Id":"344473805","IsPullRequest":true,"CreatedAt":"2018-07-25T14:41:38","Actor":"deril","Number":"1189","RawContent":null,"Title":"In SimpleJson, support nullable  enum values serialized as numbers.","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1189","RelatedDescription":"Open PR \"In SimpleJson, support nullable  enum values serialized as numbers.\" (#1189)"},{"Id":"344365007","IsPullRequest":false,"CreatedAt":"2018-07-25T10:44:34","Actor":"cores-system","Number":"1188","RawContent":null,"Title":"Component libraries","State":"closed","Body":"Hello, is there an example of this https://github.com/aspnet/Blazor/issues/340 solution at Blazor 0.4.0?","Url":"https://github.com/aspnet/Blazor/issues/1188","RelatedDescription":"Closed issue \"Component libraries\" (#1188)"},{"Id":"344296803","IsPullRequest":false,"CreatedAt":"2018-07-25T05:23:15","Actor":"danroth27","Number":"1187","RawContent":null,"Title":"Enable HTTPS in all blazor templates","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/1187","RelatedDescription":"Open issue \"Enable HTTPS in all blazor templates\" (#1187)"},{"Id":"344255121","IsPullRequest":false,"CreatedAt":"2018-07-25T01:07:07","Actor":"pranavkm","Number":"1185","RawContent":null,"Title":"[Server side] Doing a blocking call on IJSRuntime.InvokeAsync ends up locking the server","State":"open","Body":"Super nitpicky, but doing a .`Result` or '`Wait` on the task returned by `IJSRuntime` locks up the server. E.g. \r\n\r\n```C#\r\nvoid DoLog()\r\n{\r\n    JSRuntime.Current.InvokeAsync<string>(\"console.log\", \"Hello world\").Wait();\r\n}\r\n```\r\n\r\nThe server does not respond to any further actions.","Url":"https://github.com/aspnet/Blazor/issues/1185","RelatedDescription":"Open issue \"[Server side] Doing a blocking call on IJSRuntime.InvokeAsync ends up locking the server\" (#1185)"},{"Id":"344248746","IsPullRequest":false,"CreatedAt":"2018-07-25T00:25:50","Actor":"pranavkm","Number":"1184","RawContent":null,"Title":"[Server side] Exceptions thrown inside of a component are silently ignored","State":"open","Body":"I updated `FetchData.OnInitAsync` to throw an exception:\r\n\r\n```C#\r\n\r\n@functions {\r\n    WeatherForecast[] forecasts;\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        if (forecasts == null)\r\n        {\r\n            throw new ArgumentException();\r\n        }\r\n\r\n        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);\r\n    }\r\n}\r\n```\r\n\r\nI can debug the component and see the exception, but the exception is not logged to the server debug logs or visible in the console","Url":"https://github.com/aspnet/Blazor/issues/1184","RelatedDescription":"Open issue \"[Server side] Exceptions thrown inside of a component are silently ignored\" (#1184)"},{"Id":"344242771","IsPullRequest":true,"CreatedAt":"2018-07-24T23:51:01","Actor":"SteveSandersonMS","Number":"1183","RawContent":null,"Title":"Fixes for 0.5.0","State":"closed","Body":"Resolves issues we found today","Url":"https://github.com/aspnet/Blazor/pull/1183","RelatedDescription":"Closed or merged PR \"Fixes for 0.5.0\" (#1183)"},{"Id":"344238477","IsPullRequest":false,"CreatedAt":"2018-07-24T23:26:18","Actor":"pranavkm","Number":"1182","RawContent":null,"Title":"Generics in event handler tool tips aren't showing up correctly","State":"open","Body":"![image](https://user-images.githubusercontent.com/174281/43171299-472ef918-8f5e-11e8-9567-c802d7dbc1f1.png)\r\n\r\n\r\nMy guess is that it's supposed to say \r\n\r\n> Sets the 'onclick' attribute to the provided string or delegate value. A delegate value should be of type `'System.Action<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>'`","Url":"https://github.com/aspnet/Blazor/issues/1182","RelatedDescription":"Open issue \"Generics in event handler tool tips aren't showing up correctly\" (#1182)"},{"Id":"343925651","IsPullRequest":false,"CreatedAt":"2018-07-24T20:20:19","Actor":"SlowLogicBoy","Number":"1179","RawContent":null,"Title":"Incorrect OutputPath when using $(MSBuildThisFileDirectory)","State":"closed","Body":"I have `Directory.Build.props` file:\r\n```xml\r\n<Project>\r\n    <PropertyGroup>\r\n        <OutputPath>$(MSBuildThisFileDirectory)out\\bin</OutputPath>\r\n        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n    </PropertyGroup>\r\n</Project>\r\n```\r\nWhen I build Blazor app I get:\r\n```\r\nC:\\Users\\User\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.4.0\\targets\\Blazor.MonoRuntime.targets(11,5): \r\n    warning MSB3026: \r\n        Could not copy \r\n\"C:\\Users\\User\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.4.0\\targets\\..\\tools\\mono\\asmjs\\mono.asm.js\" \r\n        to \r\n\"d:\\Code\\Git\\MyApp\\src\\Client\\WebApp\\d:\\Code\\Git\\MyApp\\out\\bin\\netstandard2.0\\dist/_framework/asmjs/mono.asm.js\". \r\n    Beginning retry 1 in 1000ms. The filename, directory name, or volume label syntax is incorrect : \r\n'd:\\Code\\Git\\MyApp\\src\\Client\\WebApp\\d:\\Code\\Git\\MyApp\\out\\bin\\netstandard2.0\\dist\\_framework\\asmjs'  \r\n[d:\\Code\\Git\\MyApp\\src\\Client\\WebApp\\WebApp.csproj]\r\n```\r\nOutput Path seems to be generated incorrectly:\r\n`d:\\Code\\Git\\MyApp\\src\\Client\\WebApp\\d:\\Code\\Git\\MyApp\\out\\bin\\netstandard2.0\\dist\\_framework\\asmjs`\r\n\r\n**Workaround:**\r\nI added additional `Directory.Build.props` file in Blazor project directory:\r\n```xml\r\n<Project>\r\n    <!-- Reference to my main Directory.Build.props -->\r\n    <Import Project=\"..\\..\\..\\Directory.Build.props\" />\r\n    <PropertyGroup>\r\n        <!-- Override OutputPath with relative path -->\r\n        <OutputPath>..\\..\\..\\out\\bin</OutputPath>\r\n    </PropertyGroup>\r\n</Project>\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1179","RelatedDescription":"Closed issue \"Incorrect OutputPath when using $(MSBuildThisFileDirectory)\" (#1179)"},{"Id":"344156330","IsPullRequest":true,"CreatedAt":"2018-07-24T18:59:24","Actor":"SteveSandersonMS","Number":"1181","RawContent":null,"Title":"Server template tweaks","State":"closed","Body":"@rynowak I've been trying the RC1 build and it looks great. Publishing etc all looks perfect. Hopefully these tweaks are self-explanatory but let me know what you think.\r\n\r\ncc @danroth27","Url":"https://github.com/aspnet/Blazor/pull/1181","RelatedDescription":"Closed or merged PR \"Server template tweaks\" (#1181)"},{"Id":"344117821","IsPullRequest":false,"CreatedAt":"2018-07-24T18:51:39","Actor":"vanderstack","Number":"1180","RawContent":null,"Title":"Embed independent components in existing site","State":"closed","Body":"I have an existing site built entirely in Aurelia. As a demo to my organization regarding Blazor, I would like to replace a single existing component. In Aurelia it is possible to extend an existing application by calling an enhance method and providing a DOM selector.\r\n\r\nIs there any way to accomplish something similar with Blazor?\r\n\r\nLong term it would be nice to be able to import arbitrary components independent of them being rendered client side and hosted on CDN or server side and rendered by Azure.","Url":"https://github.com/aspnet/Blazor/issues/1180","RelatedDescription":"Closed issue \"Embed independent components in existing site\" (#1180)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-07-27T05:30:03.0866667Z","RunDurationInMilliseconds":1622}