{"Data":{"Vue":{"Events":[{"Id":"7169186376","Type":"IssuesEvent","CreatedAt":"2018-01-30T04:52:40","Actor":"dxcqcv","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/7561","RelatedDescription":"Opened issue \"v-show display flickering with <transition> component on IOS 11.1.2 and 11.0.2\" (#7561) at vuejs/vue","RelatedBody":"### Version\r\n2.5.4\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/dxcqcv/hby2g9ja/](https://jsfiddle.net/dxcqcv/hby2g9ja/)\r\n\r\n### Steps to reproduce\r\nwhen v-show display, the opacity transition will flicker.\r\n\r\n### What is expected?\r\nshow with opacity css animation \r\n\r\n### What is actually happening?\r\nshow with opacity css animation, but with flickering\r\n\r\n---\r\nIn my test this case will recurrent on IOS 11.1.2 iPhone 8 plus and IOS 11.0.2 iPhone 6s.\r\n\r\nAnd I record a [video about this bug](https://weibo.com/tv/v/G0MGYfcLm?fid=1034:29b27092d5c162a0d17ccd66f8e1dfc0)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"7169274085","Type":"IssuesEvent","CreatedAt":"2018-01-30T05:28:35","Actor":"vue-issue-bot","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2033","RelatedDescription":"Closed issue \"发现一个错别字\" (#2033) at vuejs/vue-router","RelatedBody":"<!--\r\nIMPORTANT: Please use the following link to create a new issue:\r\n\r\n  https://new-issue.vuejs.org/?repo=vuejs/vue-router\r\n\r\nIf your issue was not created using the app above, it will be closed immediately.\r\n-->\r\nhttps://router.vuejs.org/zh-cn/essentials/getting-started.html\r\n\r\n通过注入路由，我们可以用 this.$router 来访问它，就像在任何组件里用 this.$router 访问当前  **路有**   一样。\r\n\r\n谢谢大佬的框架 很喜欢 "},{"Id":"7169274030","Type":"IssuesEvent","CreatedAt":"2018-01-30T05:28:34","Actor":"542154968","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2033","RelatedDescription":"Opened issue \"发现一个错别字\" (#2033) at vuejs/vue-router","RelatedBody":"<!--\r\nIMPORTANT: Please use the following link to create a new issue:\r\n\r\n  https://new-issue.vuejs.org/?repo=vuejs/vue-router\r\n\r\nIf your issue was not created using the app above, it will be closed immediately.\r\n-->\r\nhttps://router.vuejs.org/zh-cn/essentials/getting-started.html\r\n\r\n通过注入路由，我们可以用 this.$router 来访问它，就像在任何组件里用 this.$router 访问当前  **路有**   一样。\r\n\r\n谢谢大佬的框架 很喜欢 "},{"Id":"7167915051","Type":"IssuesEvent","CreatedAt":"2018-01-29T22:12:12","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2032","RelatedDescription":"Closed issue \"Pushing a route with query parameters clones complex objects incorrectly\" (#2032) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/f5y29tjp/3/](https://jsfiddle.net/f5y29tjp/3/)\r\n\r\n### Steps to reproduce\r\n* When `whichTest` is `push`, a `Date` is pushed as a query parameter.\r\n* When `whichTest` is `path`, the hash location is changed to a string representation of `Date`.\r\n* When `whichTest` is `pushAndUpdateURL`, a `Date` is pushed as a query parameter, and after that, the hash location is set again with a new parameter.\r\n\r\n### What is expected?\r\nThat when a `Date` object is pushed by a query parameter, it should end up in `$state.query` the same way as if the page was loaded with that query parameter.\r\n\r\n### What is actually happening?\r\nIt's being cloned by a function that copies only simple object properties, which transforms the `Date` into a simple unusable `{}` object.\r\n\r\n---\r\nI believe the correct way to approach this, while wasteful, is to clone by doing `stringifyQuery` and then `parseQuery` instead of using a problematic `clone` function. This makes the behavior more consistent, and allows developers to implement these functions as they please.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7167458297","Type":"IssuesEvent","CreatedAt":"2018-01-29T20:37:38","Actor":"fer22f","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2032","RelatedDescription":"Opened issue \"Pushing a route with query parameters clones complex objects incorrectly\" (#2032) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/f5y29tjp/3/](https://jsfiddle.net/f5y29tjp/3/)\r\n\r\n### Steps to reproduce\r\n* When `whichTest` is `push`, a `Date` is pushed as a query parameter.\r\n* When `whichTest` is `path`, the hash location is changed to a string representation of `Date`.\r\n* When `whichTest` is `pushAndUpdateURL`, a `Date` is pushed as a query parameter, and after that, the hash location is set again with a new parameter.\r\n\r\n### What is expected?\r\nThat when a `Date` object is pushed by a query parameter, it should end up in `$state.query` the same way as if the page was loaded with that query parameter.\r\n\r\n### What is actually happening?\r\nIt's being cloned by a function that copies only simple object properties, which transforms the `Date` into a simple unusable `{}` object.\r\n\r\n---\r\nI believe the correct way to approach this, while wasteful, is to clone by doing `stringifyQuery` and then `parseQuery` instead of using a problematic `clone` function. This makes the behavior more consistent, and allows developers to implement these functions as they please.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7165763527","Type":"PullRequestEvent","CreatedAt":"2018-01-29T15:21:38","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/vuejs/vue-router/pull/2030","RelatedDescription":"Merged pull request \"[Doc EN]: 2017 dec - 2018 jan\" (#2030) at vuejs/vue-router","RelatedBody":"Update to set french documentation up-to-date with english one.\r\n"},{"Id":"7165731603","Type":"IssuesEvent","CreatedAt":"2018-01-29T15:16:26","Actor":"exophunk","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2031","RelatedDescription":"Opened issue \"Transition on router-view appears on pageload when router.beforeEach used\" (#2031) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://codepen.io/exophunk/pen/vdYKjd](https://codepen.io/exophunk/pen/vdYKjd)\r\n\r\n### Steps to reproduce\r\nA transition animation on <router-view> is supposed to only happen when the route changes, not already on the initial page load. In initial page load, it should only happen, when the \"appear\" attribute is present on the transition.\r\n\r\nWhen a \"router.beforeEach()\" hook is used and next() is called asynchronously, the transition also happens on initial page load. This is not desired and I don't finde a way to prevent it.\r\n\r\n- Is this an intended behaviour?\r\n- I think the usage of the \"beforeEach\" hook should not affect the transition on pageload.\r\n\r\n### What is expected?\r\nNo transition on page load in any case\r\n\r\n### What is actually happening?\r\nTransition on initial page load, but only when beforeEach() hook is used with async callback.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7165177325","Type":"PullRequestEvent","CreatedAt":"2018-01-29T13:42:57","Actor":"Haeresis","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/pull/2030","RelatedDescription":"Opened pull request \"[Doc EN]: 2017 dec - 2018 jan\" (#2030) at vuejs/vue-router","RelatedBody":"Update to set french documentation up-to-date with english one.\r\n"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2018-01-30T05:30:35.5009473Z","RunDurationInMilliseconds":2364}