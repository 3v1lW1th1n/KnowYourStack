{"Data":{"Blog":{"FeedItems":[{"Title":"iOS 13 Preview Release Now Available","PublishedOn":"2019-07-03T17:48:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are excited to share our first preview release focused on support for iOS 13 and Xcode 11! With today&#8217;s preview, you can begin building applications using Xcode 11 and start...","Href":"https://devblogs.microsoft.com/xamarin/ios-13-xcode-11/","RawContent":null},{"Title":"Xamarin and .NET Community Developer Events in July","PublishedOn":"2019-07-01T19:49:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Jumpstart your next mobile development project by networking with your local community and getting the latest updates about Xamarin and .NET related technologies. Discover upcoming developer events...","Href":"https://devblogs.microsoft.com/xamarin/july-xamarin-net-developer-events/","RawContent":null},{"Title":"Styling for Multiple Device Resolutions","PublishedOn":"2019-06-28T18:26:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Guest Post: Charlin Agramonte is a Microsoft MVP and co-founder of CrossGeeks. She writes Xamarin articles in her blog http://xamgirl.com/. Find her on twitter as @Chard003.\nA few months ago we...","Href":"https://devblogs.microsoft.com/xamarin/styling-for-multiple-device-resolutions/","RawContent":null},{"Title":"Migrating MacOS Apps to 64-bit Before the Apple Transition","PublishedOn":"2019-06-26T19:27:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Apple has been moving towards 64-bit only applications on macOS for a number of releases. Last June, Apple started requiring Apps on the macOS App Store to be 64-bit only and macOS 10.13.4 and above...","Href":"https://devblogs.microsoft.com/xamarin/apple-transition-migrate-macos-apps-to-64-bit/","RawContent":null},{"Title":"Faster Xamarin.Android Builds & Smaller Dex Files","PublishedOn":"2019-06-24T18:02:55+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"One of our current focus areas in Xamarin.Android is build performance. The &#8220;inner dev loop&#8221; directly impacts developer productivity&#8211;the time it takes to make a small code change and...","Href":"https://devblogs.microsoft.com/xamarin/dex-counting-xamarin-android-improved/","RawContent":null},{"Title":"Get Started with Free Xamarin Training on Microsoft Learn","PublishedOn":"2019-06-21T19:10:22+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Learn how to build cross-platform mobile applications on Android and iOS with the new Xamarin.Forms content on Microsoft Learn. The new and completely free platform where you can earn points and...","Href":"https://devblogs.microsoft.com/xamarin/microsoft-learn-free-xamarin-training/","RawContent":null},{"Title":"New Xamarin.Forms XAML IntelliSense in Visual Studio for Mac","PublishedOn":"2019-06-19T18:21:04+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Visual Studio 2019 for Mac version 8.2 is officially available as a preview. Now featuring significant improvements to the XAML editing experience for Xamarin developers. The Xamarin.Forms XAML...","Href":"https://devblogs.microsoft.com/xamarin/xaml-intellisense-vs4m-xamarin-forms/","RawContent":null},{"Title":"Automatic Android SDK Management","PublishedOn":"2019-06-17T20:24:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"As a mobile developer building apps for Android, there are many tools used under the hood to build, deploy, and debug your Android applications. We know this can be an intimidating process. So to...","Href":"https://devblogs.microsoft.com/xamarin/automatic-android-sdk-management/","RawContent":null},{"Title":"Xamarin Podcast: Xamarin.Forms 4 And So Much More!","PublishedOn":"2019-06-14T16:08:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Keeping up with the latest in .NET, C#, Xamarin, and Azure is easier than ever. Co-hosts Matt Soucoup and James Montemagno cover a range of topics relevant to Xamarin developers from designing mobile...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-podcast-xamarin-forms-4/","RawContent":null},{"Title":"Grial UI Kit: Building Beautiful Xamarin.Forms Apps, Faster","PublishedOn":"2019-06-12T17:07:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Leonardo Viacava. Leo is co-founder and CTO of UXDivers, creators of Grial UI Kit and Gorilla Player. UXDivers specializes in designing and coding...","Href":"https://devblogs.microsoft.com/xamarin/grial-ui-kit-xamarin-forms/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9952197266","Type":"PullRequestEvent","CreatedAt":"2019-07-04T20:18:59","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3328","RelatedDescription":"Opened pull request \"Increase AndroidClientHandler timeouts\" (#3328) at xamarin/xamarin-android","RelatedBody":"`AndroidClientHandler` has no way of accessing the `HttpClient.Timeout` property\r\nin order to set the timeout value of *two* native http client\r\nproperties (connect and read timeouts) and so it uses two custom properties to\r\nprovide these values. So far, the values were set to 100s for the read timeout\r\nand 120s for the connect timeout, which seemed to be a reasonable value for\r\ntheir purposes. However, if a developer sets `HttpClient.Timeout` to a\r\nvalue *larger* than our defaults, `AndroidClientHandler` values \"win\" and the\r\nconnection/read time out earlier. The workaround is to set \"our\" timeouts along\r\nwith the `HttpClient` one, but if the developer cannot do it, for any kind of\r\nreasons (i.e. to avoid platform-specific code) then they are faced with an\r\nannoying situation.\r\n\r\nThe real fix would be to improve `HttpClient` API so that its associated client\r\nhandler can access `HttpClient` properties, but since it's not a quick fix we\r\ncan implement now, this commit bumps the default timeout values to\r\nthe (unreasonable) value of 24h to make sure we use values higher than the most\r\nlikely figures assigned to `HttpClient.Timeout` and to match Xamarin.iOS\r\nNSUrlSessionHandler defaults."},{"Id":"9949306203","Type":"PullRequestEvent","CreatedAt":"2019-07-04T11:00:15","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3327","RelatedDescription":"Opened pull request \"[Xamarin.Andorid.Build.Tasks] Check if LogicalName is valid before check Resource File.\" (#3327) at xamarin/xamarin-android","RelatedBody":"Some of our customers are generating `Resource` files\r\nwhich have invalid file names (as far as aapt/aapt2 is\r\nconcerned). They use the `LogicalName` meta data to\r\nprovide the \"Real\" name that the build process should\r\nuse.\r\n\r\nHowever when using `aapt2` our `CheckForInvalidResourceFileNames`\r\ntask was NOT using the `LogicalName` metadata. It was\r\njust using the filename. This breaks their projects with\r\nan\r\n\r\n\tAPT0000: Invalid file name: It must contain only [^a-zA-Z0-9_.-]+\r\n\r\nor\r\n\r\n\tAPT0000: Invalid file name: It must contain only [^a-zA-Z0-9_.]+\r\n\r\nWe should really support this scenario since we allow the\r\nuse of `LogicalName` for resource files anyway.\r\n\r\nThis commit fixes that issue and adds a unit test."},{"Id":"9948238392","Type":"IssuesEvent","CreatedAt":"2019-07-04T08:27:56","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3307","RelatedDescription":"Closed issue \"[Bug] Unable to write on SD card\" (#3307) at xamarin/xamarin-android","RelatedBody":"### Description\r\nIf you try to write or simply move a file stored on SD card a `System.UnauthorizedAccessException: Access to the path is denied.` is thrown.\r\n\r\n**I don't get exceptions:**\r\n\r\n**- reading/writing files on the phone storage;**\r\n**- reading files on the SD card.**\r\n\r\nPermssions are present in the `AndroidManifest.xml` file\r\n```\r\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n```\r\nand they are given during runtime.\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Run the attached test app.\r\n2. Pick a file stored on SD in a physical device. The app just renames the file adding a simple string (\".mp3\").\r\n3. Right after the `System.IO.File.Move(path, newpath);` statement in the ViewModel.cs file, the app throws a System.UnauthorizedAccessException.\r\n\r\n### Expected Behavior\r\nThe file on the SD should be renamed/moved.\r\n### Actual Behavior\r\nA System.UnauthorizedAccessException is thrown.\r\n### Basic Information\r\n\r\n- Version with issue: 4.0.0.497661\r\n- Last known good version:\r\n- IDE: Visual Studio 2019\r\n- Platform Target Frameworks: \r\nAndroid: Android 9.0 (Pie)\r\n- Affected Devices: Devices with SD card\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/gitChef30/UnauthorizedExceptionXamarinForms\r\n"},{"Id":"9946674378","Type":"IssuesEvent","CreatedAt":"2019-07-04T02:26:39","Actor":"jennyf19","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3326","RelatedDescription":"Opened issue \"Login screen loses information on device orientation in Android\" (#3326) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Run a Xamarin Android app with [MSAL](https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/tree/master/tests/devapps/XForms\r\n) or ADAL with .WithEmbeddedWebview(true)\r\n2. On the login screen, enter the username\r\n3. When the password screen appears, change the screen orientation. \r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n=====\r\nZip file was too big, but here's a link to a [sample project](https://github.com/jennyf19/XamarinAndroidTest)\r\n\r\n### Expected Behavior\r\n- Upon screen orientation, the ui stays on the enter password screen, as it does with our native Android library\r\n### Actual Behavior\r\n- Upon screen orientation, the ui reverts back to the original login screen with no username present (this value has been lost)\r\n\r\nIn our dev sample, we have this in the MainActivity: \r\n [Activity(Label = \"XForms\", Icon = \"@drawable/icon\", Theme = \"@style/MainTheme\", MainLauncher = true,\r\n        ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]\r\n \r\nHere's the code in ADAL where we handle the [embedded webview](https://github.com/AzureAD/azure-activedirectory-library-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Clients.ActiveDirectory/Platforms/android/EmbeddedWebview/AuthenticationAgentActivity.cs#L41)\r\n \r\nHere's the similar issue in ADAL with [screen shots](https://github.com/AzureAD/azure-activedirectory-library-for-dotnet/issues/1622)\r\n\r\nAnd a similar issue in [msal](https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/issues/1244)\r\n\r\n=====\r\nOur native Android's code for their [webview](https://github.com/AzureAD/azure-activedirectory-library-for-android/blob/dev/adal/src/main/java/com/microsoft/aad/adal/AuthenticationActivity.java)\r\nand their [manifest](https://github.com/AzureAD/azure-activedirectory-library-for-android/blob/dev/adal/src/main/AndroidManifest.xml)"},{"Id":"9944185673","Type":"PullRequestEvent","CreatedAt":"2019-07-03T17:36:29","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3325","RelatedDescription":"Opened pull request \"[build] Create and use an android-toolchain artifact\" (#3325) at xamarin/xamarin-android","RelatedBody":"Attempts to speed up some of our Azure Pipeline provisioning steps by\r\nuploading the android-toolchain dependencies as a pipeline artifact which\r\ncan be used by other stages. The hope is that we'll see faster download\r\nspeeds for these components if they are saved as a build artifact."},{"Id":"9944158925","Type":"IssuesEvent","CreatedAt":"2019-07-03T17:32:13","Actor":"jrahma","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3324","RelatedDescription":"Opened issue \"You uploaded an APK that is not zip aligned. You will need to run a zip align tool on your APK and upload it again.\" (#3324) at xamarin/xamarin-android","RelatedBody":"Hi,\r\n\r\nWhy all my new projects shows shows:\r\n\r\n> You uploaded an APK that is not zip aligned. You will need to run a zip align tool on your APK and upload it again.\r\n\r\n\r\nwhen uploading the APK to Google Play?\r\n\r\nand when I try:\r\n\r\n`zipalign.exe -v -p 4 C:\\Temp\\zipalign\\com.jafaria.app.apk C:\\Temp\\zipalign\\com.jafaria.app-aligned.apk\r\n`\r\nand upload the APK then I get:\r\n\r\n> You uploaded an APK with an invalid signature (learn more about signing). Error from apksigner: ERROR: JAR_SIG_NO_MANIFEST: Missing META-INF/MANIFEST.MF\r\n\r\n\r\nI never shows these errors before\r\n\r\n"},{"Id":"9943909186","Type":"IssuesEvent","CreatedAt":"2019-07-03T16:53:31","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3323","RelatedDescription":"Closed issue \"Encountering startup crash with AOT or Bundle Assemblies in 16.2\" (#3323) at xamarin/xamarin-android","RelatedBody":"A couple of projects are crashing on startup with AOT or Bundle Assemblies enabled when built against d16-2.\r\n\r\n## Steps to Reproduce\r\n\r\n1. msbuild /t:Install /p:Configuration=Release /p:AotAssemblies=true /p:EnableLlvm=true [Topeka.csproj](https://github.com/xamarin/monodroid-samples/tree/master/android5.0/Topeka)\r\n2. Launch app on device.\r\n\r\nor\r\n1. msbuild /t:Install /p:Configuration=Release /p:BundleAssemblies=true  [Topeka.csproj](https://github.com/xamarin/monodroid-samples/tree/master/android5.0/Topeka)\r\n2. Launch app on device.\r\n\r\n\r\n<!--\r\nYou may drag & drop the attachment (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n### Current Behavior\r\nhttps://gist.github.com/pjcollins/975c5368ed4473f3492a1af00176f2b5\r\n```\r\n07-03 12:44:17.386 29889 29889 I MonoDroid: UNHANDLED EXCEPTION:\r\n07-03 12:44:17.401 29889 29889 I MonoDroid: System.TypeLoadException: Could not load type 'Android.Text.ITextWatcherInvoker' from assembly 'Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'.\r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at (wrapper managed-to-native) System.RuntimeTypeHandle.internal_from_name(string,System.Threading.StackCrawlMark&,System.Reflection.Assembly,bool,bool,bool)\r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at System.RuntimeTypeHandle.GetTypeByName (System.String typeName, System.Boolean throwOnError, System.Boolean ignoreCase, System.Boolean reflectionOnly, System.Threading.StackCrawlMark& stackMark, System.Boolean loadTypeFromPartialName) [0x0008d] in <a4ffac136b0549a681fa101adf9fe8b8>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at System.RuntimeType.GetType (System.String typeName, System.Boolean throwOnError, System.Boolean ignoreCase, System.Boolean reflectionOnly, System.Threading.StackCrawlMark& stackMark) [0x0000e] in <a4ffac136b0549a681fa101adf9fe8b8>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at System.Type.GetType (System.String typeName, System.Boolean throwOnError) [0x00002] in <a4ffac136b0549a681fa101adf9fe8b8>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.AndroidTypeManager.RegisterNativeMembers (Java.Interop.JniType jniType, System.Type type, System.String methods) [0x000fd] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.RegisterJniNatives (System.IntPtr typeName_ptr, System.Int32 typeName_len, System.IntPtr jniClass, System.IntPtr methods_ptr, System.Int32 methods_len) [0x00115] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at (wrapper managed-to-native) Java.Interop.NativeMethods.java_interop_jnienv_call_static_object_method_a(intptr,intptr&,intptr,intptr,Java.Interop.JniArgumentValue*)\r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Java.Interop.JniEnvironment+StaticMethods.CallStaticObjectMethod (Java.Interop.JniObjectReference type, Java.Interop.JniMethodInfo method, Java.Interop.JniArgumentValue* args) [0x00053] in <9234a7d3dc314014a9dc76c66d690cbf>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.CallStaticObjectMethod (System.IntPtr jclass, System.IntPtr jmethod, Android.Runtime.JValue* parms) [0x0000e] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.CallStaticObjectMethod (System.IntPtr jclass, System.IntPtr jmethod, Android.Runtime.JValue[] parms) [0x00018] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.FindClass (System.String classname) [0x0003d] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.AllocObject (System.String jniClassName) [0x00000] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.StartCreateInstance (System.String jniClassName, System.String jniCtorSignature, Android.Runtime.JValue* constructorParameters) [0x00007] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.StartCreateInstance (System.String jniClassName, System.String jniCtorSignature, Android.Runtime.JValue[] constructorParameters) [0x00018] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Text.TextWatcherImplementor..ctor (System.Object inst, System.EventHandler`1[TEventArgs] changed_handler, System.EventHandler`1[TEventArgs] before_handler, System.EventHandler`1[TEventArgs] after_handler) [0x00010] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Widget.TextView.add_TextChanged (System.EventHandler`1[TEventArgs] value) [0x00015] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Topeka.Fragments.SignInFragment.InitContentViews (Android.Views.View view) [0x00011] in <6203221cc06041c5a05d941769f573a9>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Topeka.Fragments.SignInFragment.OnViewCreated (Android.Views.View view, Android.OS.Bundle savedInstanceState) [0x0003e] in <6203221cc06041c5a05d941769f573a9>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.App.Fragment.n_OnViewCreated_Landroid_view_View_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_view, System.IntPtr native_savedInstanceState) [0x00019] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at (wrapper dynamic-method) Android.Runtime.DynamicMethodNameCounter.9(intptr,intptr,intptr,intptr)\r\n```\r\n\r\n[msbuild.binlog.zip](https://github.com/xamarin/xamarin-android/files/3355982/msbuild.binlog.zip)\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n**Version**:\r\nVS 2019 16.2 Preview 3.\r\n"},{"Id":"9943856090","Type":"IssuesEvent","CreatedAt":"2019-07-03T16:45:31","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3323","RelatedDescription":"Opened issue \"Encountering startup crash with AOT or Bundle Assemblies in 16.2\" (#3323) at xamarin/xamarin-android","RelatedBody":"A couple of projects are crashing on startup with AOT or Bundle Assemblies enabled when built against d16-2.\r\n\r\n## Steps to Reproduce\r\n\r\n1. msbuild /t:Install /p:Configuration=Release /p:AotAssemblies=true /p:EnableLlvm=true [Topeka.csproj](https://github.com/xamarin/monodroid-samples/tree/master/android5.0/Topeka)\r\n2. Launch app on device.\r\n\r\nor\r\n1. msbuild /t:Install /p:Configuration=Release /p:BundleAssemblies=true  [Topeka.csproj](https://github.com/xamarin/monodroid-samples/tree/master/android5.0/Topeka)\r\n2. Launch app on device.\r\n\r\n\r\n<!--\r\nYou may drag & drop the attachment (repro code/solution, screenshot, etc.) onto the issue.\r\n-->\r\n\r\n### Current Behavior\r\nhttps://gist.github.com/pjcollins/975c5368ed4473f3492a1af00176f2b5\r\n```\r\n07-03 12:44:17.386 29889 29889 I MonoDroid: UNHANDLED EXCEPTION:\r\n07-03 12:44:17.401 29889 29889 I MonoDroid: System.TypeLoadException: Could not load type 'Android.Text.ITextWatcherInvoker' from assembly 'Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'.\r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at (wrapper managed-to-native) System.RuntimeTypeHandle.internal_from_name(string,System.Threading.StackCrawlMark&,System.Reflection.Assembly,bool,bool,bool)\r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at System.RuntimeTypeHandle.GetTypeByName (System.String typeName, System.Boolean throwOnError, System.Boolean ignoreCase, System.Boolean reflectionOnly, System.Threading.StackCrawlMark& stackMark, System.Boolean loadTypeFromPartialName) [0x0008d] in <a4ffac136b0549a681fa101adf9fe8b8>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at System.RuntimeType.GetType (System.String typeName, System.Boolean throwOnError, System.Boolean ignoreCase, System.Boolean reflectionOnly, System.Threading.StackCrawlMark& stackMark) [0x0000e] in <a4ffac136b0549a681fa101adf9fe8b8>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at System.Type.GetType (System.String typeName, System.Boolean throwOnError) [0x00002] in <a4ffac136b0549a681fa101adf9fe8b8>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.AndroidTypeManager.RegisterNativeMembers (Java.Interop.JniType jniType, System.Type type, System.String methods) [0x000fd] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.RegisterJniNatives (System.IntPtr typeName_ptr, System.Int32 typeName_len, System.IntPtr jniClass, System.IntPtr methods_ptr, System.Int32 methods_len) [0x00115] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at (wrapper managed-to-native) Java.Interop.NativeMethods.java_interop_jnienv_call_static_object_method_a(intptr,intptr&,intptr,intptr,Java.Interop.JniArgumentValue*)\r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Java.Interop.JniEnvironment+StaticMethods.CallStaticObjectMethod (Java.Interop.JniObjectReference type, Java.Interop.JniMethodInfo method, Java.Interop.JniArgumentValue* args) [0x00053] in <9234a7d3dc314014a9dc76c66d690cbf>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.CallStaticObjectMethod (System.IntPtr jclass, System.IntPtr jmethod, Android.Runtime.JValue* parms) [0x0000e] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.CallStaticObjectMethod (System.IntPtr jclass, System.IntPtr jmethod, Android.Runtime.JValue[] parms) [0x00018] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.FindClass (System.String classname) [0x0003d] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.AllocObject (System.String jniClassName) [0x00000] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.StartCreateInstance (System.String jniClassName, System.String jniCtorSignature, Android.Runtime.JValue* constructorParameters) [0x00007] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Runtime.JNIEnv.StartCreateInstance (System.String jniClassName, System.String jniCtorSignature, Android.Runtime.JValue[] constructorParameters) [0x00018] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Text.TextWatcherImplementor..ctor (System.Object inst, System.EventHandler`1[TEventArgs] changed_handler, System.EventHandler`1[TEventArgs] before_handler, System.EventHandler`1[TEventArgs] after_handler) [0x00010] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.Widget.TextView.add_TextChanged (System.EventHandler`1[TEventArgs] value) [0x00015] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Topeka.Fragments.SignInFragment.InitContentViews (Android.Views.View view) [0x00011] in <6203221cc06041c5a05d941769f573a9>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Topeka.Fragments.SignInFragment.OnViewCreated (Android.Views.View view, Android.OS.Bundle savedInstanceState) [0x0003e] in <6203221cc06041c5a05d941769f573a9>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at Android.App.Fragment.n_OnViewCreated_Landroid_view_View_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_view, System.IntPtr native_savedInstanceState) [0x00019] in <c130c55abd344375a9a9632e4941efae>:0 \r\n07-03 12:44:17.401 29889 29889 I MonoDroid:   at (wrapper dynamic-method) Android.Runtime.DynamicMethodNameCounter.9(intptr,intptr,intptr,intptr)\r\n```\r\n\r\n[msbuild.binlog.zip](https://github.com/xamarin/xamarin-android/files/3355982/msbuild.binlog.zip)\r\n\r\n<!--\r\nWhat is the current behavior?\r\n-->\r\n\r\n**Version**:\r\nVS 2019 16.2 Preview 3.\r\n"},{"Id":"9943553820","Type":"PullRequestEvent","CreatedAt":"2019-07-03T16:05:03","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1860","RelatedDescription":"Closed pull request \"[Xamarin.Android.Build.Tasks] Use XNavigation for AndroidResource\" (#1860) at xamarin/xamarin-android","RelatedBody":"AndroidResource is slooow. Mainly because it is written to\r\nrepeatedly loop through the elements in the document.\r\nWe should use streaming to process these documents since it\r\nwill be faster.\r\n\r\nCurrent Master Xamarin Forms Test App Time Elapsed \r\n\r\n\r\n\r\n| Master | PR | Diff |\r\n| -------- | ---- | ---- |\r\n| 00:00:23.39 |  00:00:21.52 | -00:00:01.87\r\n- [ ]  Tests, tests and more tests\r\n- [x]  Switch to `AsyncTask`"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9952851717","Type":"IssuesEvent","CreatedAt":"2019-07-05T01:08:13","Actor":"wesleyscaldwell","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6783","RelatedDescription":"Opened issue \"Flyout behavior Disabled - Does not disable Flyout.\" (#6783) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nIn Shell, Flyout behavior : Disabled - Does not actually disable the flyout menu. \r\n- A workaround can be done by hiding the top bar but the user can still swipe in from the left side to access the menu. \r\n\r\nIt appears intended functionality is described as \"Disabled – indicates that the flyout can't be opened by the user.\"\r\n\r\n### Steps to Reproduce\r\nTrial 1:\r\n1.  Use the latest Xaminals project\r\n2.  FlyoutBehavior=\"Disabled\" to the shell object\r\n3.  Tested on multiple android devices - Did not test on iOS.\r\n4.  Flyout never gets disabled.\r\n\r\nTrial 2:\r\n1.  Created Blank project\r\n2.  Added Shell Flyout with two basic flyout items\r\n3.  FlyoutBehavior=\"Disabled\" to the shell object\r\n4.  Tested on multiple android devices - Did not test on iOS.\r\n5.  Flyout never gets disabled.\r\n\r\n\r\n\r\n### Expected Behavior\r\nFlyout behavior\r\nThe flyout can be accessed through the hamburger icon or by swiping from the side of the screen. However, this behavior can be changed by setting the Shell.FlyoutBehavior attached property to one of the FlyoutBehavior enumeration members:\r\n\r\n**Disabled – indicates that the flyout can't be opened by the user.**\r\nFlyout – indicates that the flyout can be opened and closed by the user. This is the default value for the FlyoutBehavior property.\r\nLocked – indicates that the flyout can't be closed by the user, and that it doesn't overlap content.\r\n\r\n### Actual Behavior\r\nThe flyout is still available to the user and all flyout items are active but the once disabled the flyout menu does not collapse.\r\n\r\n### Basic Information\r\nVS 2019 - 16.1.5\r\nXamarin.Forms - 4.1.0.555618\r\nNETStandard.Library 2.0.3\r\n\r\n"},{"Id":"9951864462","Type":"IssuesEvent","CreatedAt":"2019-07-04T18:34:48","Actor":"PKYADAV","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6782","RelatedDescription":"Opened issue \"Data Annotation validation from .net Standard Class Library\" (#6782) at xamarin/Xamarin.Forms","RelatedBody":"Hi Team,\r\n\r\nCan we use .net Standard Class Library Custom DataAnnotation in Xamarin.Forms for validation?\r\n\r\n**.net Standard Class Library**\r\n\r\n[DbRequired]\r\n[Display(Name = \"USER NAME\", Prompt = \"ENTER USER NAME\")]\r\npublic string User_Name\r\n{\r\nget { return GetValue(() => User_Name); }\r\nset { SetValue(() => User_Name, value); }\r\n}\r\n\r\n    [Display(Name = \"PASSWORD\", Prompt = \"ENTER PASSWORD\")]\r\n    [DataType(DataType.Password)]\r\n    [DbRequired]\r\n    public string User_Password\r\n    {\r\n        get { return GetValue(() => User_Password); }\r\n        set { SetValue(() => User_Password, value); }\r\n    }\r\n\r\nPlease help us to use and validate from class library."},{"Id":"9951634339","Type":"PullRequestEvent","CreatedAt":"2019-07-04T17:26:22","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/6781","RelatedDescription":"Opened pull request \"Clear global routes on unit tests and process global routes in the right place\" (#6781) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n- Since we throw an exception now if you register the same route twice we need to clear the global routes in the teardown of the unit tests\r\n- Global Routes were moved to only be processed if the ShellContent was specified as part of the uri but they should just be processed regardless\r\n\r\n### Testing Procedure ###\r\n- UI tests cover\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9952048284","Type":"PullRequestEvent","CreatedAt":"2019-07-04T19:31:53","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/6499","RelatedDescription":"Opened pull request \"[javascriptcore] Update for Xcode 11 beta 3\" (#6499) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9951851211","Type":"IssuesEvent","CreatedAt":"2019-07-04T18:30:41","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/6493","RelatedDescription":"Closed issue \"NSURLsessionDelegate issues \" (#6493) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Create a class that derives from NSURLProtocol and NSURLSession delegate interfaces:\r\nEx:     public partial class TestUrlProtocol : NSUrlProtocol, INSUrlSessionDelegate, INSUrlSessionTaskDelegate, INSUrlSessionDataDelegate\r\n\r\n2.  In StartLoading, create the URLSessionTask and resume the task\r\n3.  Add delegate methods to handle challenge and redirection\r\n\r\n### Expected Behavior\r\nThis needs to build / run and handle NTLM /certificate challenges\r\n### Actual Behavior\r\n\r\nFirst issue: \r\nGives a warning for the below delegate:\r\n **Warning MT4174: Unable to locate the block to delegate conversion method for the method TestSampleApp.TestUrlProtocol.WillPerformHttpRedirection's parameter #5. (MT4174)  Warning \r\n\r\nMT4174: Unable to locate the block to delegate conversion method for the method TestSampleApp.TestUrlProtocol.DidReceiveChallenge's parameter #4. (MT4174)** \r\n\r\n**And when running this will crash with below error:\r\n\r\nUnhandled managed exception: The runtime function get_block_wrapper_creator has been linked away. (ObjCRuntime.RuntimeException)\r\nCrash is pointing at DidReceiveChallenge call.**\r\n\r\n\r\n### Environment\r\n\r\n=== Visual Studio Enterprise 2019 for Mac ===\r\n\r\nVersion 8.1.3 (build 19)\r\nInstallation UUID: 5bba6d13-ac9c-4c7c-b27c-1f9467a37562\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 5.6.0.25 (d16-0 / 50f75273)\r\n\r\n\tPackage version: 518010028\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.18.1.28 (2018-08/223ea7ef92e) (64-bit)\r\n\tPackage version: 518010028\r\n\r\n=== NuGet ===\r\n\r\nVersion: 5.0.2.5988\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.11\r\n\t2.1.9\r\n\t2.1.8\r\n\t2.1.2\r\n\t2.1.1\r\nSDK: /usr/local/share/dotnet/sdk/2.1.700/Sdks\r\nSDK Versions:\r\n\t2.1.700\r\n\t2.1.505\r\n\t2.1.504\r\n\t2.1.302\r\n\t2.1.301\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.18.1/lib/mono/msbuild/Current/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.10\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Updater ===\r\n\r\nVersion: 11\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.2.1 (14490.122)\r\nBuild 10E1001\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.10.0.157 (Visual Studio Enterprise)\r\nHash: 6bd94753\r\nBranch: d16-1\r\nBuild date: 2019-06-12 17:28:48-0400\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.10.0.157 (Visual Studio Enterprise)\r\nHash: 6bd94753\r\nBranch: d16-1\r\nBuild date: 2019-06-12 17:28:47-0400\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.3.0.23 (Visual Studio Enterprise)\r\nCommit: HEAD/d0b48056f\r\nAndroid SDK: /Users/mbhattathiri/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 28.0.1\r\nSDK Build Tools Version: 27.0.3\r\n\r\nBuild Information: \r\nMono: mono/mono/2018-08@3a07bd426d3\r\nJava.Interop: xamarin/java.interop/d16-1@5ddc3e3\r\nLibZipSharp: grendello/LibZipSharp/d16-1@44de300\r\nLibZip: nih-at/libzip/rel-1-5-1@b95cf3f\r\nProGuard: xamarin/proguard/master@905836d\r\nSQLite: xamarin/sqlite/3.27.1@8212a2d\r\nXamarin.Android Tools: xamarin/xamarin-android-tools/d16-1@acabd26\r\n\r\n=== Microsoft Mobile OpenJDK ===\r\n\r\nJava SDK: /Users/mbhattathiri/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.25\r\n1.8.0-25\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 1.2.0.44\r\nHash: aac645b\r\nBranch: remotes/origin/d16-1\r\nBuild date: 2019-05-29 19:55:24 UTC\r\n\r\n=== Xamarin Designer ===\r\n\r\nVersion: 16.1.0.467\r\nHash: f1657e133\r\nBranch: remotes/origin/d16-1-new-document-model\r\nBuild date: 2019-06-18 21:57:42 UTC\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 801030019\r\nGit revision: 2d04b0145da8aa946d2cc9898fe2a59484e4f3f4\r\nBuild date: 2019-06-26 15:34:25+00\r\nBuild branch: release-8.1\r\nXamarin extensions: de240bddd6d1f96bfb1e7d11ce7ac5398956fe1d\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.5\r\nDarwin 18.6.0 Darwin Kernel Version 18.6.0\r\n    Thu Apr 25 23:16:27 PDT 2019\r\n    root:xnu-4903.261.4~2/RELEASE_X86_64 x86_64\r\n\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1146463951594459137","CreatedAt":"2019-07-03T17:01:20+00:00","UserScreenname":"xamarinhq","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the #Xamarin team https://t.co/Umwxz8RtPj","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"1146144741622505472","CreatedAt":"2019-07-02T19:52:55+00:00","UserScreenname":"xamarinhq","Text":"Jumpstart your next mobile development project by networking with your local community and getting the latest updat… https://t.co/JeIcDMSyUr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":27,"FavoriteCount":7,"RawContent":null},{"Id":"1145780868323168256","CreatedAt":"2019-07-01T19:47:01+00:00","UserScreenname":"xamarinhq","Text":"Join the Xamarin team at this years largest #Xamarin conference, the Xamarin Developer Summit! July 11-12 in Housto… https://t.co/ghYOrkuhhd","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":17,"FavoriteCount":6,"RawContent":null},{"Id":"1144685402965643277","CreatedAt":"2019-06-28T19:14:01+00:00","UserScreenname":"xamarinhq","Text":"We realized that making UI *look* good is not enough; it has to be truly adaptive. See how to handle this by using… https://t.co/CtEZskZmJ9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":113,"FavoriteCount":39,"RawContent":null},{"Id":"1144326789239644160","CreatedAt":"2019-06-27T19:29:01+00:00","UserScreenname":"xamarinhq","Text":"This week’s Xamarin Essential API, we look at the Email API; enabling you to open a pre-populated e-mail (with atta… https://t.co/oaob7atjW7","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":32,"FavoriteCount":14,"RawContent":null},{"Id":"1144002014592061441","CreatedAt":"2019-06-26T21:58:29+00:00","UserScreenname":"xamarinhq","Text":"Reminder: Though new Xamarin .Mac applications target 64-bit by default, existing Xamarin .Mac applications that ta… https://t.co/3k5pQmlyq9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":29,"FavoriteCount":14,"RawContent":null},{"Id":"1143968928076640257","CreatedAt":"2019-06-26T19:47:01+00:00","UserScreenname":"xamarinhq","Text":"Join the Xamarin team at this years largest #Xamarin conference, the Xamarin Developer Summit! July 11-12 in Housto… https://t.co/YssrTsTPHN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":30,"FavoriteCount":13,"RawContent":null},{"Id":"1143283413757190148","CreatedAt":"2019-06-24T22:23:01+00:00","UserScreenname":"xamarinhq","Text":"We've reevaluated our Xamarin .Android codebase and made changes that sped up builds and made smaller Dex Files. Se… https://t.co/H3JE59pryL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":148,"FavoriteCount":68,"RawContent":null},{"Id":"1143177825882726403","CreatedAt":"2019-06-24T15:23:27+00:00","UserScreenname":"xamarinhq","Text":"Get better at building cross-platform mobile apps with the new Xamarin.Forms. Microsoft Learn is all new and a comp… https://t.co/Kb8hT5LkIZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":86,"FavoriteCount":41,"RawContent":null},{"Id":"1142066359947407362","CreatedAt":"2019-06-21T13:46:53+00:00","UserScreenname":"xamarinhq","Text":"Join the Xamarin team at this years largest #Xamarin conference, the Xamarin Developer Summit! July 11-12 in Housto… https://t.co/zcg70tbgE9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":37,"FavoriteCount":17,"RawContent":null},{"Id":"1141695710716469249","CreatedAt":"2019-06-20T13:14:03+00:00","UserScreenname":"xamarinhq","Text":"Thanks to your feedback, #VS4Mac 8.2 has some really great improvements to the XAML editing experience; including i… https://t.co/vv0DVw9957","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":37,"FavoriteCount":9,"RawContent":null},{"Id":"1141064668477345794","CreatedAt":"2019-06-18T19:26:31+00:00","UserScreenname":"xamarinhq","Text":"On this episode of the #XamarinShow, @JamesMontemagno and #MSMVP @DanJSiegel show us a super-cool feature of Prism… https://t.co/GLEhnDlQjp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":40,"FavoriteCount":16,"RawContent":null},{"Id":"1140735760875872256","CreatedAt":"2019-06-17T21:39:33+00:00","UserScreenname":"xamarinhq","Text":"We want to make sure you’re using the latest tooling. The new and improved Automatic Android SDK Management tool is… https://t.co/H0CSaxzj9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":29,"RawContent":null},{"Id":"1140660631273652224","CreatedAt":"2019-06-17T16:41:01+00:00","UserScreenname":"xamarinhq","Text":"On the latest Xamarin.Essential API of the week show, we take a look at the File System Helpers API which contains… https://t.co/GOGKCwXu6S","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":34,"FavoriteCount":12,"RawContent":null},{"Id":"1139589442732285953","CreatedAt":"2019-06-14T17:44:30+00:00","UserScreenname":"xamarinhq","Text":"Keeping up w/the latest in #dotNET, C#, &amp; #Xamarin is easier than ever. \nThis week’s #XamarinPodcast includes:\n- hi… https://t.co/FDDO27QHDh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":32,"FavoriteCount":11,"RawContent":null},{"Id":"1138875870553300995","CreatedAt":"2019-06-12T18:29:01+00:00","UserScreenname":"xamarinhq","Text":"We make it simple for .NET developers to build beautiful cross-platform apps, fast.\nTake a look at how Grial UI Kit… https://t.co/vceU8u475R","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":108,"FavoriteCount":48,"RawContent":null},{"Id":"1138511096380309504","CreatedAt":"2019-06-11T18:19:32+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @chewamanda, App Center Program Manager, shows us the latest features in App Center… https://t.co/VHxAknaumJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":30,"FavoriteCount":17,"RawContent":null},{"Id":"1138151096067792898","CreatedAt":"2019-06-10T18:29:01+00:00","UserScreenname":"xamarinhq","Text":"Join us at Xamarin Developer Summit - July 11-12. With 35+ sessions, there is something for everyone:\n- Mobile DevO… https://t.co/Ez5mDpM1Az","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":84,"FavoriteCount":35,"RawContent":null},{"Id":"1137049335273840640","CreatedAt":"2019-06-07T17:31:01+00:00","UserScreenname":"xamarinhq","Text":"Our cross-platform API library enables any mobile app that uses the Maps API to launch a map w/ a specific location… https://t.co/BWS4qeqtyU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":87,"FavoriteCount":34,"RawContent":null}]}},"RunOn":"2019-07-05T05:30:59.5870877Z","RunDurationInMilliseconds":4745}