{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin.Forms 3.1: Improving the Little Things","PublishedOn":"2018-07-18T19:27:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Earlier this year, we surveyed Xamarin.Forms developers about the kinds of custom controls and extra platform code being written repeatedly that should be considered for support “in the box”. From...","Href":"https://blog.xamarin.com/xamarin-forms-3-1-improvments/","RawContent":null},{"Title":"Export To Application Insights With AppCenter Continuous Export","PublishedOn":"2018-07-10T03:35:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Five-star mobile apps have one special feature: they don’t let go of their users. This can be achieved by understanding your app, the app’s users, and how these users interact with your app. The deep...","Href":"https://blog.xamarin.com/appcenter-continuous-export-application-insights/","RawContent":null},{"Title":"The Xamarin Show: Exploring Awesome Xamarin & Visual Studio Features","PublishedOn":"2018-07-05T18:50:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Each week on The Xamarin Show we explore the latest and greatest in Xamarin development by looking at new features built into Visual Studio, build native cross-platform user interfaces with...","Href":"https://blog.xamarin.com/xamarin-show-ux-xamarinforms-apis-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Podcast: What’s New in Visual Studio 2017, Xamarin.Forms, and the Android designer","PublishedOn":"2018-07-02T19:36:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, Pierce Boggan and James Montemagno discuss the latest &#038; greatest in mobile .NET development, including Xamarin.Forms 3.0 and 3.1, Visual Studio 2017...","Href":"https://blog.xamarin.com/xamarin-podcast-vs2017-xamarinforms-android-designer/","RawContent":null},{"Title":"Use MSBuild to Define Advanced Android VersionCode","PublishedOn":"2018-06-28T16:20:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the introduction of Xamarin.Android v7.2, two new MSBuild properties were also introduced in order to make maintaining Android VersionCode for Android apps even easier: AndroidVersionCodePattern...","Href":"https://blog.xamarin.com/advanced-android-versioncode/","RawContent":null},{"Title":"What’s New In the Xamarin Android Designer","PublishedOn":"2018-06-25T20:10:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Backed by your feedback, our team has been able to improve the Xamarin Android Designer significantly since it&#8217;s initial release a few years back. Now, we have a ton of new and exciting work...","Href":"https://blog.xamarin.com/future-xamarin-android-designer/","RawContent":null},{"Title":"Getting Android Apps Ready for Google Play’s Target API Level Requirements","PublishedOn":"2018-06-21T18:46:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Developing Android applications is a unique experience, as it often involves taking advantage of the latest capabilities of Android while still providing backward compatibility to older Android...","Href":"https://blog.xamarin.com/android-apps-google-play-target-api-level-requirements/","RawContent":null},{"Title":"Supporting iOS 11 and iPhone X in Xamarin.iOS Apps","PublishedOn":"2018-06-18T19:18:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Apple has indicated that starting in July 2018 all new apps and app updates submitted to the App Store must be built with the iOS 11 SDK and support the iPhone X Super Retina display. The following...","Href":"https://blog.xamarin.com/supporting-ios-11-iphone-x-xamarin-apps/","RawContent":null},{"Title":"More Cross-Platform APIs with Xamarin.Essentials Latest Preview","PublishedOn":"2018-06-14T19:11:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced Xamarin.Essentials, a core set of cross-platform APIs to help developers build native apps, at Microsoft Build 2018. Xamarin.Essentials gives developers access to over thirty...","Href":"https://blog.xamarin.com/cross-platform-apis-xamarin-essentials-latest-preview/","RawContent":null},{"Title":"Use MongoDB With Your Xamarin Apps","PublishedOn":"2018-06-12T20:01:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important decisions that you&#8217;ll make when designing an app is what type of database to use. Not too long ago, the choice was limited to relational databases like SQL server....","Href":"https://blog.xamarin.com/write-apps-using-mongodb-xamarin/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8007220502","Type":"PullRequestEvent","CreatedAt":"2018-07-24T01:05:19","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1993","RelatedDescription":"Merged pull request \"[build] `make dist`-compatible log packages\" (#1993) at xamarin/xamarin-android","RelatedBody":"The \"log pakages\" produced by `make package-build-status` (a2a970f5)\r\nand `make package-test-errors` (0435a91f) have one usability problem:\r\nthey aren't compatible with [`make dist`][make-dist].\r\n\r\nSpecifically, `make dist`-style packages are packages which have a\r\nroot directory that is the same as the basename of the package name.\r\nFor example, if a package is named `foo.zip`, then the contents of\r\n`foo.zip` would all be within a `foo` directory.\r\n\r\nAddiotionally, `make dist`-style files usually have a \"version number\"\r\nof some form encoded in the filename, with `foo-1.zip` having all\r\nfiles within it nested under the `foo-1` directory.\r\n\r\nThis has two wonderful benefits:\r\n\r\n 1. When downloading such files, they won't \"collide\" with each other,\r\n    because they have unique values within the filename.\r\n\r\n 2. When extracting such files, the extracted contents won't collide\r\n    with each other, as they're extracted into unique \"toplevel\" dirs.\r\n\r\nCompare to e.g. `make package-build-status`, which creates a\r\n`build-status-$(GIT_COMMIT).zip` file (thus fulfilling benefit (1)),\r\nbut when you *extract* `build-status-$(GIT_COMMIT).zip`, it extracts\r\n\"on top of\" a previous extraction:\r\n\r\n\t$ unzip build-status-0636fcc.zip\r\n\tArchive:  build-status-0636fcc.zip\r\n\t  inflating: Configuration.OperatingSystem.props\r\n\t  inflating: bin/BuildDebug/msbuild-20180716T144550-prepare-deps.binlog\r\n\t...\r\n\r\n\t$ unzip build-status-0d81a6b7.zip\r\n\tArchive:  build-status-0d81a6b7.zip\r\n\treplace Configuration.OperatingSystem.props? [y]es, [n]o, [A]ll, [N]one, [r]ename:\r\n\t# ARGH!\r\n\r\nThis Is Madness™!\r\n\r\nUpdate the `make package-build-status` and `make package-test-errors`\r\ntargets so that the files they produce are consistent with\r\n`make dist` convention, e.g. `make package-build-status` will create a\r\nfile named `xa-build-status-vVERSION_OS-OS_ARCH_BRANCH_HASH.zip` --\r\nwhich is consistent with the `make package-oss` filename -- and the\r\n*contents* of `xa-build-status-vVERSION_OS-OS_ARCH_BRANCH_HASH.zip`\r\nare within a `xa-build-status-vVERSION_OS-OS_ARCH_BRANCH_HASH` path.\r\nThis allows these files to be extracted without overwriting previous\r\nextractions.\r\n\r\nSimilarly, `make package-test-errors` will now create a file named\r\n`xa-test-errors-vVERSION_OS-OS_ARCH_BRANCH_HASH.zip`.\r\n\r\n[make-dist]: https://www.gnu.org/prep/standards/html_node/Standard-Targets.html"},{"Id":"8005854855","Type":"PullRequestEvent","CreatedAt":"2018-07-23T19:10:05","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1993","RelatedDescription":"Opened pull request \"[build] `make dist`-compatible log packages\" (#1993) at xamarin/xamarin-android","RelatedBody":"The \"log pakages\" produced by `make package-build-status` (a2a970f5)\r\nand `make package-test-errors` (0435a91f) have one usability problem:\r\nthey aren't compatible with [`make dist`][make-dist].\r\n\r\nSpecifically, `make dist`-style packages are packages which have a\r\nroot directory that is the same as the basename of the package name.\r\nFor example, if a package is named `foo.zip`, then the contents of\r\n`foo.zip` would all be within a `foo` directory.\r\n\r\nAddiotionally, `make dist`-style files usually have a \"version number\"\r\nof some form encoded in the filename, with `foo-1.zip` having all\r\nfiles within it nested under the `foo-1` directory.\r\n\r\nThis has two wonderful benefits:\r\n\r\n 1. When downloading such files, they won't \"collide\" with each other,\r\n    because they have unique values within the filename.\r\n\r\n 2. When extracting such files, the extracted contents won't collide\r\n    with each other, as they're extracted into unique \"toplevel\" dirs.\r\n\r\nCompare to e.g. `make package-build-status`, which creates a\r\n`build-status-$(GIT_COMMIT).zip` file (thus fulfilling benefit (1)),\r\nbut when you *extract* `build-status-$(GIT_COMMIT).zip`, it extracts\r\n\"on top of\" a previous extraction:\r\n\r\n\t$ unzip build-status-0636fcc.zip\r\n\tArchive:  build-status-0636fcc.zip\r\n\t  inflating: Configuration.OperatingSystem.props\r\n\t  inflating: bin/BuildDebug/msbuild-20180716T144550-prepare-deps.binlog\r\n\t...\r\n\r\n\t$ unzip build-status-0d81a6b7.zip\r\n\tArchive:  build-status-0d81a6b7.zip\r\n\treplace Configuration.OperatingSystem.props? [y]es, [n]o, [A]ll, [N]one, [r]ename:\r\n\t# ARGH!\r\n\r\nThis Is Madness™!\r\n\r\nUpdate the `make package-build-status` and `make package-test-errors`\r\ntargets so that the files they produce are consistent with\r\n`make dist` convention, e.g. `make package-build-status` will create a\r\nfile named `xa-build-status-vVERSION_OS-OS_ARCH_BRANCH_HASH.zip` --\r\nwhich is consistent with the `make package-oss` filename -- and the\r\n*contents* of `xa-build-status-vVERSION_OS-OS_ARCH_BRANCH_HASH.zip`\r\nare within a `xa-build-status-vVERSION_OS-OS_ARCH_BRANCH_HASH` path.\r\nThis allows these files to be extracted without overwriting previous\r\nextractions.\r\n\r\nSimilarly, `make package-test-errors` will now create a file named\r\n`xa-test-errors-vVERSION_OS-OS_ARCH_BRANCH_HASH.zip`.\r\n\r\n[make-dist]: https://www.gnu.org/prep/standards/html_node/Standard-Targets.html"},{"Id":"8005216356","Type":"PullRequestEvent","CreatedAt":"2018-07-23T17:04:29","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1992","RelatedDescription":"Opened pull request \"[msbuild/tests] add test for custom framework setup via NuGet package.\" (#1992) at xamarin/xamarin-android","RelatedBody":"It proves incomplete but kind of working solution for https://github.com/xamarin/xamarin-android/issues/1880 .\r\n\r\nThe original idea (and what once worked) was to only extend an MSBuild\r\nproperty for ResolveSdks task. But after a couple of changes it does not\r\nwork anymore, as there had been a handful of SDK resolution changes.\r\n\r\nSince it's not really safe to depend on those properties, we should rather\r\nprovide a complete set of framework assemblies (which means, packages\r\ncontaining both v1.0 and latest) to get app still build."},{"Id":"8002743128","Type":"PullRequestEvent","CreatedAt":"2018-07-23T09:30:48","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1991","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Set the timestamps on the `resources.cache` files.\" (#1991) at xamarin/xamarin-android","RelatedBody":"We currently do not force the setting of the write and access\r\ntimestamps when saving the resource.caches files. We have\r\nrecently (90e31550) been reviewing and adding this in other\r\nparts of the build system. This is to ensure that when we do\r\nmodify a file it has the latest timestamp.\r\n\r\nThis commit adds support for calling\r\n\r\n\tMonoAndroidHelper.SetLastAccessAndWriteTimeUtc ()\r\n\r\nwhen we save the XDocument cache files."},{"Id":"8001497949","Type":"IssuesEvent","CreatedAt":"2018-07-23T03:27:11","Actor":"divega","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1990","RelatedDescription":"Opened issue \"Application using EF Core 2.1.1 with SdkOnly linking crashes due to duplicate values returned by GetMethod\" (#1990) at xamarin/xamarin-android","RelatedBody":"This was previously mentioned in https://github.com/xamarin/xamarin-android/issues/1813#issuecomment-400888600 and reported by multiple customers in the EF Core repo at https://github.com/aspnet/EntityFrameworkCore/issues/12460. I am copying some details in this issue but feel free to find more details and reach out to customers hitting it in those links.\r\n\r\nI am forwarding the issue to Xamarin because the only possible root cause seems to be that reflection is returning the same MethodInfo for different overloads of a method (which doesn't seem to make much sense) and given we don't have the Xamarin expertise we need someone to investigate if this is a bug or otherwise give us advice if we are doing something wrong. \r\n\r\nIn summary, the code that causes the exception is doing something like this:\r\n\r\n``` c#\r\n    var supportedMethods = new Dictionary<MethodInfo, string>\r\n        {\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(double) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(float) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(int) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(long) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(sbyte) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(short) }), \"abs\" },...\r\n```\r\n\r\nThat causes `System.ArgumentException: An item with the same key has already been added. Key: Int32 Abs(Int32)`, which seems to indicate that the MethodInfo returned for Math.Abs(int32) is the same as either Math.Abs(double) or Math.Abs(float), which doesn't make much sense.\r\n\r\nWe already suggested adding Math.Abs to LinkDescription.xml (in case GetMethod is just returning null because the actual code was removed by the linker) but customers report that this workaround does not help.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a project that uses Microsoft.EntityFrameworkCore.SqlLite. A repro project was provided at https://github.com/aspnet/EntityFrameworkCore/issues/12460#issuecomment-403451697. \r\n2. Build the project and link it with <AndroidLinkMode>SdkOnly</AndroidLinkMode>\r\n3. Run the application\r\n\r\n### Expected Behavior\r\nApplication runs.\r\n\r\n### Actual Behavior\r\nApplication crashes with:\r\n\r\n```\r\nException message:\r\nStack trace:\r\n06-25 16:48:31.244  9279  9279 I MonoDroid: UNHANDLED EXCEPTION:\r\n06-25 16:48:31.257  9279  9279 I MonoDroid: System.TypeInitializationException: The type initializer for 'Microsoft.EntityFrameworkCore.Sqlite.Query.ExpressionTranslators.Internal.SqliteMathTranslator' threw an exception. ---> System.ArgumentException: An item with the same key has already been added. Key: Int32 Abs(Int32)\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) <0xceeb8b14 + 0x0045c> in <c099d544051e40b89a67a87a43581f01>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) <0xceeb7fd0 + 0x00013> in <c099d544051e40b89a67a87a43581f01>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Sqlite.Query.ExpressionTranslators.Internal.SqliteMathTranslator..cctor () <0xcd753afc + 0x00207> in <135a24207446461281bfc2c90f71e590>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:    --- End of inner exception stack trace ---\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.RelationalCompositeMethodCallTranslator+<>c__DisplayClass5_0.<Translate>b__0 (Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator translator) <0xcd61f2dc + 0x00044> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Enumerable+SelectListIterator`2[TSource,TResult].MoveNext () <0xce42d194 + 0x000ff> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Enumerable.TryGetFirst[TSource] (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] predicate, System.Boolean& found) <0xce415f5c + 0x000f3> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Enumerable.FirstOrDefault[TSource] (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] predicate) <0xce415c6c + 0x0003f> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.RelationalCompositeMethodCallTranslator.Translate (System.Linq.Expressions.MethodCallExpression methodCallExpression, Microsoft.EntityFrameworkCore.Metadata.IModel model) <0xcd61ef6c + 0x002bf> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression) <0xcd614aac + 0x00393> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Expressions.MethodCallExpression.Accept (System.Linq.Expressions.ExpressionVisitor visitor) <0xce4a5000 + 0x0001b> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Expressions.ExpressionVisitor.Visit (System.Linq.Expressions.Expression node) <0xce49f890 + 0x00027> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit (System.Linq.Expressions.Expression expression) <0xce62b070 + 0x0006b> in <1081ac98085b4c0b96c42f3872e13655>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit (System.Linq.Expressions.Expression expression) <0xcd613b00 + 0x0010f> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitWhereClause (Remotion.Linq.Clauses.WhereClause whereClause, Remotion.Linq.QueryModel queryModel, System.Int32 index) <0xcd5f7064 + 0x000ef> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Remotion.Linq.Clauses.WhereClause.Accept (Remotion.Linq.IQueryModelVisitor visitor, Remotion.Linq.QueryModel queryModel, System.Int32 index) <0xce63c7cc + 0x00093> in <1081ac98085b4c0b96c42f3872e13655>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Remotion.Linq.QueryModelVisitorBase.VisitBodyClauses (System.Collections.ObjectModel.ObservableCollection`1[T] bodyClauses, Remotion.Linq.QueryModel queryModel) <0xce62e964 + 0x00167> in <1081ac98085b4c0b96c42f3872e13655>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel (Remotion.Linq.QueryModel queryModel) <0xce62e468 + 0x0006b> in <1081ac98085b4c0b96c42f3872e13655>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel (Remotion.Linq.QueryModel queryModel) <0xce6e2e08 + 0x00047> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel (Remotion.Linq.QueryModel queryModel) <0xcd5f5da0 + 0x0005f> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult] (Remotion.Linq.QueryModel queryModel) <0xce6e0fcc + 0x00177> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult] (Remotion.Linq.QueryModel queryModel) <0xce6c8964 + 0x000bb> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult] (System.Linq.Expressions.Expression query, Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator queryModelGenerator, Microsoft.EntityFrameworkCore.Storage.IDatabase database, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1[TLoggerCategory] logger, System.Type contextType) <0xce70f75c + 0x0028f> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler+<>c__DisplayClass13_0`1[TResult].<Execute>b__0 () <0xce71037c + 0x0005b> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc] (System.Object cacheKey, System.Func`1[TResult] compiler) <0xce6f70ac + 0x000c3> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult] (System.Object cacheKey, System.Func`1[TResult] compiler) <0xce6f7024 + 0x0003b> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult] (System.Linq.Expressions.Expression query) <0xce70f47c + 0x001a7> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult] (System.Linq.Expressions.Expression expression) <0xce6f7b58 + 0x00047> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Queryable.FirstOrDefault[TSource] (System.Linq.IQueryable`1[T] source) <0xce4096f4 + 0x000cb> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n```\r\n\r\n### Version Information\r\nEF Core version: 2.1.1\r\nXamarin Andriod version not specified in original report\r\n"},{"Id":"8001040166","Type":"PullRequestEvent","CreatedAt":"2018-07-22T23:18:27","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1987","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] build.props can cause ConvertResourceCa…\" (#1987) at xamarin/xamarin-android","RelatedBody":"…ses to skip (#1943)\r\n\r\nFixes: https://github.com/xamarin/xamarin-android/issues/1933\r\n\r\nThere have been various reports of a scenario such as:\r\n- Open a project in VS 2017, that uses uppercase letters when\r\n  referencing a resource, such as `@drawable/IMALLCAPS`\r\n- A Design-Time Build occurs\r\n- Some future build later, a *regular* build fails with an `APT0000`\r\n  error\r\n\r\n    Resources\\layout\\test.axml(3,0): error APT0000: No resource found that matches the given name (at 'src' with value '@drawable/IMALLCAPS')\r\n\r\nOnce you are in this state, you are basically hosed until you\r\n`Rebuild` or delete `obj`...\r\n\r\nAfter a lot of digging, I was able to reproduce the issue by\r\ninvalidating `build.props`. This happens in a lot of common\r\nsituations:\r\n- `$(DesignTimeBuild)` changes, such as a DTB or a regular build\r\n- `$(AdbTarget)` changes, such as when you change the device or\r\n  emulator you are deploying to\r\n\r\nI created a `BuildPropsBreaksConvertResourcesCases` test that\r\nreproduces this issue by modifying the timestamp on `build.props`.\r\n\r\nIf `build.props` was invalidated, this was happening:\r\n\r\n    Target Name=_UpdateAndroidResgen Project=UnnamedProject.csproj\r\n    ...\r\n        Target Name=_GenerateAndroidResourceDir Project=UnnamedProject.csproj\r\n            Building target \"_GenerateAndroidResourceDir\" completely.\r\n            Input file \"obj\\Debug\\build.props\" is newer than output file \"obj\\Debug\\res.flag\".\r\n            ...\r\n                CopyIfChanged Task\r\n                  ...\r\n                  ModifiedFiles:\r\n                    C:\\Users\\myuser\\Desktop\\Git\\xamarin-android\\bin\\TestDebug\\temp\\BuildPropsBreaksConvertResourcesCases\\obj\\Debug\\res\\layout\\main.xml\r\n                    C:\\Users\\myuser\\Desktop\\Git\\xamarin-android\\bin\\TestDebug\\temp\\BuildPropsBreaksConvertResourcesCases\\obj\\Debug\\res\\layout\\test.xml\r\n                    C:\\Users\\myuser\\Desktop\\Git\\xamarin-android\\bin\\TestDebug\\temp\\BuildPropsBreaksConvertResourcesCases\\obj\\Debug\\res\\values\\strings.xml\r\n\r\nThe `CopyIfChanged` task is overwriting my `test.xml` layout file with\r\nthe original file contents--which has `IMALLCAPS` in uppercase.\r\n\r\nThis would normally be OK, except `ConvertResourcesCases` skipped\r\nprocessing this file!\r\n\r\n    ConvertResourcesCases\r\n        Parameters\r\n            ResourceDirectories = obj\\Debug\\res\\\r\n            AcwMapFile = obj\\Debug\\acw-map.txt\r\n            AndroidConversionFlagFile = obj\\Debug\\R.cs.flag\r\n        ConvertResourcesCases Task\r\n          ResourceDirectories: obj\\Debug\\res\\\r\n          AcwMapFile: obj\\Debug\\acw-map.txt\r\n          AndroidConversionFlagFile: obj\\Debug\\R.cs.flag\r\n          AndroidConversionFlagFile modified: 7/9/2018 7:57:56 PM\r\n          Skipping: obj\\Debug\\res\\layout\\main.xml  7/9/2018 7:57:53 PM <= 7/9/2018 7:57:56 PM\r\n          Skipping: obj\\Debug\\res\\layout\\test.xml  7/9/2018 7:57:53 PM <= 7/9/2018 7:57:56 PM\r\n          Skipping: obj\\Debug\\res\\values\\strings.xml  7/9/2018 7:57:53 PM <= 7/9/2018 7:57:56 PM\r\n\r\nSince `obj\\Debug\\R.cs.flag` is newer than these files, `IMALLCAPS` is\r\nnot converted to lower case!\r\n\r\nIt appears that the `CopyIfChanged` MSBuild task was not setting the\r\ntimestamps of files it copies...\r\n\r\nAfter fixing this, `CopyIfChanged` does not ovewrite `test.xml` in the\r\nfirst place:\r\n\r\n    CopyIfChanged Task\r\n      ...\r\n      Skipping Resources\\drawable-hdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-mdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-xhdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-xxhdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-xxxhdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable\\IMALLCAPS.png its up to date\r\n      Skipping Resources\\layout\\Main.axml its up to date\r\n      Skipping Resources\\layout\\test.axml its up to date\r\n      Skipping Resources\\values\\Strings.xml its up to date\r\n    ModifiedFiles:\r\n\r\nNote that `ModifiedFiles` is blank, and my unit test now passes."},{"Id":"8000153898","Type":"IssuesEvent","CreatedAt":"2018-07-22T12:37:38","Actor":"jamesmcroft","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1989","RelatedDescription":"Opened issue \"Application crash on startup - condition new_val < (1 << ABORT_PROT_BLOCK_BITS) not met\" (#1989) at xamarin/xamarin-android","RelatedBody":"This bug has been copied across from Bugzilla as a quick search isn't showing up any results here. The bug itself had been confirmed but hasn't been updated since October 2017.\r\n\r\nAs a quick overview, there appears to be an issue with getting passed application startup if Xamarin.Android app has a Resource.designer.cs file which is around 12MB in size. We confirmed this on Friday (7/20/2018) with one of our companies enterprise applications reaching this limit after adding new layouts. Temporarily, we have followed the advice of commenters in the original Bugzilla report to optimize the app's resources by removing unused ones and renaming some to be shorter which has given us about 2MB back but we will inevitably reach the limit again. \r\n\r\nBased on my native Android experience, I don't think this is a limitation of Android itself and is an issue with Mono / Xamarin\r\n\r\nThe original details from the bug can be found below. \r\n\r\n## condition new_val < (1 << ABORT_PROT_BLOCK_BITS) not met\r\n\r\n_Submitted by a community member on 2017-06-09 13:56 UTC_\r\n\r\nI just upgraded to Xamarin.Android 7.3.1.2 and my app is crashing on startup with the following error:\r\n\r\nAssertion at /Users/builder/jenkins/workspace/xamarin-android/xamarin-android/external/mono/mono/metadata/threads.c:266, condition 'new\\_val \\< (1 \\<\\< ABORT\\_PROT\\_BLOCK\\_BITS)' not met\r\n\r\nThis was deployed to a device running Android 7.1.1\r\n\r\n* * *\r\n\r\n_Reference: <https://bugzilla.xamarin.com/show_bug.cgi?id=57320>_"},{"Id":"8000055277","Type":"IssuesEvent","CreatedAt":"2018-07-22T11:25:55","Actor":"deakjahn","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1988","RelatedDescription":"Opened issue \"XA0106 warnings in Xamarin.Forms/Android project\" (#1988) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Just start a new project\r\n2. VS will be full of \"Skipping .... Please check that your Nuget Package versions are compatible\" warnings. This is supposed to be a XA0106 warning but it has no code, so it can't even be disabled in the project properties.\r\n3. The project compiles without any problems but the hundreds of warnings make an awful lot of unwanted noise.\r\n\r\n### Expected Behavior\r\n\r\nOptimally, no warning. But at least a way to disable them.\r\n\r\n### Version Information\r\n\r\nXF: 3.1.0.583944 (I know there is a newer but it breaks important things so can't be installed. Anyway, this has no bearing on this particular issue).\r\nXA support libraries: 27.0.2.1"},{"Id":"7998804291","Type":"PullRequestEvent","CreatedAt":"2018-07-21T15:50:36","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1987","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] build.props can cause ConvertResourceCa…\" (#1987) at xamarin/xamarin-android","RelatedBody":"…ses to skip (#1943)\r\n\r\nFixes: https://github.com/xamarin/xamarin-android/issues/1933\r\n\r\nThere have been various reports of a scenario such as:\r\n- Open a project in VS 2017, that uses uppercase letters when\r\n  referencing a resource, such as `@drawable/IMALLCAPS`\r\n- A Design-Time Build occurs\r\n- Some future build later, a *regular* build fails with an `APT0000`\r\n  error\r\n\r\n    Resources\\layout\\test.axml(3,0): error APT0000: No resource found that matches the given name (at 'src' with value '@drawable/IMALLCAPS')\r\n\r\nOnce you are in this state, you are basically hosed until you\r\n`Rebuild` or delete `obj`...\r\n\r\nAfter a lot of digging, I was able to reproduce the issue by\r\ninvalidating `build.props`. This happens in a lot of common\r\nsituations:\r\n- `$(DesignTimeBuild)` changes, such as a DTB or a regular build\r\n- `$(AdbTarget)` changes, such as when you change the device or\r\n  emulator you are deploying to\r\n\r\nI created a `BuildPropsBreaksConvertResourcesCases` test that\r\nreproduces this issue by modifying the timestamp on `build.props`.\r\n\r\nIf `build.props` was invalidated, this was happening:\r\n\r\n    Target Name=_UpdateAndroidResgen Project=UnnamedProject.csproj\r\n    ...\r\n        Target Name=_GenerateAndroidResourceDir Project=UnnamedProject.csproj\r\n            Building target \"_GenerateAndroidResourceDir\" completely.\r\n            Input file \"obj\\Debug\\build.props\" is newer than output file \"obj\\Debug\\res.flag\".\r\n            ...\r\n                CopyIfChanged Task\r\n                  ...\r\n                  ModifiedFiles:\r\n                    C:\\Users\\myuser\\Desktop\\Git\\xamarin-android\\bin\\TestDebug\\temp\\BuildPropsBreaksConvertResourcesCases\\obj\\Debug\\res\\layout\\main.xml\r\n                    C:\\Users\\myuser\\Desktop\\Git\\xamarin-android\\bin\\TestDebug\\temp\\BuildPropsBreaksConvertResourcesCases\\obj\\Debug\\res\\layout\\test.xml\r\n                    C:\\Users\\myuser\\Desktop\\Git\\xamarin-android\\bin\\TestDebug\\temp\\BuildPropsBreaksConvertResourcesCases\\obj\\Debug\\res\\values\\strings.xml\r\n\r\nThe `CopyIfChanged` task is overwriting my `test.xml` layout file with\r\nthe original file contents--which has `IMALLCAPS` in uppercase.\r\n\r\nThis would normally be OK, except `ConvertResourcesCases` skipped\r\nprocessing this file!\r\n\r\n    ConvertResourcesCases\r\n        Parameters\r\n            ResourceDirectories = obj\\Debug\\res\\\r\n            AcwMapFile = obj\\Debug\\acw-map.txt\r\n            AndroidConversionFlagFile = obj\\Debug\\R.cs.flag\r\n        ConvertResourcesCases Task\r\n          ResourceDirectories: obj\\Debug\\res\\\r\n          AcwMapFile: obj\\Debug\\acw-map.txt\r\n          AndroidConversionFlagFile: obj\\Debug\\R.cs.flag\r\n          AndroidConversionFlagFile modified: 7/9/2018 7:57:56 PM\r\n          Skipping: obj\\Debug\\res\\layout\\main.xml  7/9/2018 7:57:53 PM <= 7/9/2018 7:57:56 PM\r\n          Skipping: obj\\Debug\\res\\layout\\test.xml  7/9/2018 7:57:53 PM <= 7/9/2018 7:57:56 PM\r\n          Skipping: obj\\Debug\\res\\values\\strings.xml  7/9/2018 7:57:53 PM <= 7/9/2018 7:57:56 PM\r\n\r\nSince `obj\\Debug\\R.cs.flag` is newer than these files, `IMALLCAPS` is\r\nnot converted to lower case!\r\n\r\nIt appears that the `CopyIfChanged` MSBuild task was not setting the\r\ntimestamps of files it copies...\r\n\r\nAfter fixing this, `CopyIfChanged` does not ovewrite `test.xml` in the\r\nfirst place:\r\n\r\n    CopyIfChanged Task\r\n      ...\r\n      Skipping Resources\\drawable-hdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-mdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-xhdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-xxhdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-xxxhdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable\\IMALLCAPS.png its up to date\r\n      Skipping Resources\\layout\\Main.axml its up to date\r\n      Skipping Resources\\layout\\test.axml its up to date\r\n      Skipping Resources\\values\\Strings.xml its up to date\r\n    ModifiedFiles:\r\n\r\nNote that `ModifiedFiles` is blank, and my unit test now passes."},{"Id":"7997404878","Type":"PullRequestEvent","CreatedAt":"2018-07-20T22:05:47","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1986","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] proguard warning code\" (#1986) at xamarin/xamarin-android","RelatedBody":"Added a warning code for the `Proguard` MSBuild task along with\r\ndocumentation. There was only one warning to fix here.\r\n\r\nAdditionally, I removed the extraneous log messages from the\r\n`Proguard` task, since diagnostic MSBuild output will include all the\r\ninformation we need."},{"Id":"7996822190","Type":"IssuesEvent","CreatedAt":"2018-07-20T19:34:23","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1770","RelatedDescription":"Reopened issue \"[Aapt2] Unable to build project with a TargetFrameworkVersion less than Android 5.0 on Windows with Aapt2 enabled\" (#1770) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. `msbuild /t:SignAndroidPackage /p:AndroidUseAapt2=true monodroid-samples\\Button\\DroidButton.csproj /v:diag`\r\n\r\nhttps://github.com/xamarin/monodroid-samples/tree/master/Button \r\n\r\nI can reproduce this with the default TargetFrameworkVersion of the project (v2.3), as well as v4.0.4, and v4.4. However, if I target v5.0 or greater then my build succeeds.\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nProject builds successfully with Aapt2 enabled.\r\n\r\n### Actual Behavior\r\n```\r\nExecuting link --manifest C:\\Users\\peter\\AppData\\Local\\Temp\\wtsbowgt.p03\\manifest\\AndroidManifest.xml --java C:\\Users\\peter\\AppData\\Local\\Temp\\wtsbowgt.p03 --custom-package mono.samples.button -R obj\\\\Debug\\\\compiled.flata --auto-add-overlay -I \"C:\\Program Files (x86)\\Android\\android-sdk\\platforms\\android-10\\android.jar\" --output-text-symbols obj\\\\Debug\\R.txt -o C:\\Users\\peter\\AppData\\Local\\Temp\\wtsbowgt.p03\\resources.apk (TaskId:97)\r\nW/ResourceType(23681): error APT0000: For resource 0x0101053d, entry index(1341) is beyond type entryCount(733) [C:\\Users\\peter\\source\\monodroid-samples\\Button\\DroidButton.csproj]\r\nW/ResourceType(23681): error APT0000: For resource 0x0101053e, entry index(1342) is beyond type entryCount(733) [C:\\Users\\peter\\source\\monodroid-samples\\Button\\DroidButton.csproj]\r\nW/ResourceType(23681): error APT0000: For resource 0x0101053b, entry index(1339) is beyond type entryCount(733) [C:\\Users\\peter\\source\\monodroid-samples\\Button\\DroidButton.csproj]\r\nW/ResourceType(23681): error APT0000: For resource 0x0101053c, entry index(1340) is beyond type entryCount(733) [C:\\Users\\peter\\source\\monodroid-samples\\Button\\DroidButton.csproj]\r\nDone executing task \"Aapt2Link\" -- FAILED. (TaskId:97)\r\n```\r\n### Version Information\r\nhttps://gist.github.com/pjcollins/220d551af40c4ccc18db3e7df0c1b72f\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nhttps://gist.github.com/pjcollins/57dec1bd340d9212129c1d8a0a779433\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->\n\n> VS bug [#624789](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/624789)"},{"Id":"7996819592","Type":"IssuesEvent","CreatedAt":"2018-07-20T19:33:43","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1985","RelatedDescription":"Opened issue \"[AAPT2] Aapt2 does not handle values passed to `AndroidResgenExtraArgs`\" (#1985) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Build app-acquaint with aapt2 enabled. This app sets the following property: `<AndroidResgenExtraArgs>--no-crunch </AndroidResgenExtraArgs>`\r\n\r\n\r\nhttps://github.com/xamarinhq/app-acquaint\r\n\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nI am not entirely sure if this _should_ be supported or not, however if this is an option only supported by `aapt` then perhaps we can try to improve the error message a bit (currently it prints the _entire_ usage messaging for aapt2.\r\n\r\n### Actual Behavior\r\n\r\n```\r\nerror APT0000: unknown option '--no-crunch'. \"unknown option '--no-crunch'.\". [/Users/xamarinqa/agent/_work/r1/a/app-acquaint/App/Acquaint.XForms/Acquaint.XForms.Droid/Acquaint.XForms.Droid.csproj]\r\n```\r\n\r\n\r\n### Version Information\r\nXA version: 9.0.0.17 (HEAD/dfb09269d)\r\n\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nhttp://xqa.blob.core.windows.net/gist/log-4ecc7c0748a842568aacb6df43bb7cab.txt\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8007129381","Type":"IssuesEvent","CreatedAt":"2018-07-24T00:29:17","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2798","RelatedDescription":"Reopened issue \"[iOS] Secondary Toolbar Items overlapping\" (#2798) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nAs originally reported at https://bugzilla.xamarin.com/show_bug.cgi?id=59868, toolbar items are still overlapping.\r\n\r\n### Steps to Reproduce\r\n1. Create a Xamarin Forms App\r\n2. Create a Page with 3 or more Toolbar Items that have images\r\n3. Run it on iOS 11 Simulator or iPhone\r\n\r\n### Expected Behavior\r\nThe Toolbar Items are shown side by side\r\n\r\n### Actual Behavior\r\nThe Toolbar Items are overlapping\r\n\r\n### Basic Information\r\n- Version with issue: 2.5 and newer\r\n- Last known good version: unknown\r\n- IDE: Visual Studio 15.7.2\r\n- Platform Target Frameworks: \r\n  - iOS: 11\r\n- Nuget Packages:\r\n  - Xamarin.Forms: 3.0.0.482510\r\n- Affected Devices:\r\n  - iOS 11 Devices\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/29125873/40353475-e2c5ed70-5db1-11e8-9939-a3ef0e980544.png)\r\n\r\n### Reproduction Link\r\n```\r\nvar page = new ContentPage()\r\n\t\t\t{\r\n\t\t\t\tToolbarItems =\r\n\t\t\t\t{\r\n\t\t\t\t\tnew ToolbarItem{Icon = \"bank.png\"},\r\n\t\t\t\t\tnew ToolbarItem{Icon = \"calculator.png\"},\r\n\t\t\t\t\tnew ToolbarItem{Icon = \"coffee.png\"},\r\n\t\t\t\t\tnew ToolbarItem{Icon = \"bank.png\", Order = ToolbarItemOrder.Secondary},\r\n\t\t\t\t\tnew ToolbarItem{Icon = \"calculator.png\", Order = ToolbarItemOrder.Secondary},\r\n\t\t\t\t\tnew ToolbarItem{Icon = \"coffee.png\", Order = ToolbarItemOrder.Secondary},\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\treturn new NavigationPage( page);\r\n```\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59868\r\nhttps://github.com/xamarin/Xamarin.Forms/pull/1208"},{"Id":"8005900365","Type":"IssuesEvent","CreatedAt":"2018-07-23T19:19:24","Actor":"pereirafabiosantos2018","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3384","RelatedDescription":"Opened issue \"CheckBox\" (#3384) at xamarin/Xamarin.Forms","RelatedBody":"##Summary\r\nThe CheckBox item of WPF.\r\n\r\n##API Changes\r\n<CheckBox Text=\"My checkbox\" x:name=\"myCheckBox\" \r\nTextDirection=\"Right\" IsChecked=\"bool\" Checked=\"event_handler\"/>\r\n\r\ne.g.\r\n\r\nIn order to facilitate the new Shiny Button api, a bool is added to the Button class. This is done as a bool because it is simpler to data bind and other reasons...\r\n\r\n    var button = new Button ();\r\n    button.MakeShiny = true; // new API\r\n\r\nThe MakeShiny API works even if the button is already visible.\r\n\r\n##Intended Use Case\r\nThis control can be used to select if a condition is true or no."},{"Id":"8005822156","Type":"IssuesEvent","CreatedAt":"2018-07-23T19:03:30","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3383","RelatedDescription":"Closed issue \"[UWP] Navigation bar hidden\" (#3383) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWith the current version of Xamarin.Forms (3.1.0.637273) on UWP devices the navigation bar is hidden. With the previous version (3.1.0.583944) it works.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new Xamarin.Forms app from template\r\n2. Change `MainPage = new MainPage();` to `MainPage = new NavigationPage(new MainPage());` in `App.xaml.cs`\r\n3. Update Xamarin.Forms to version 3.1.0.637273\r\n4. Start UWP app\r\n\r\n### Expected Behavior\r\n\r\nNavigation bar should be visible on top of the page.\r\n\r\n### Actual Behavior\r\n\r\nNavigation bar is hidden.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.1.0.637273\r\n- Last known good version: 3.1.0.583944\r\n- IDE: VS 2017 15.7.5\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  11.4\r\n  - Android: 8.1\r\n  - UWP:  16299\r\n- Android Support Library Version: default\r\n- Nuget Packages: default\r\n- Affected Devices: Windows 10\r\n\r\n### Screenshots\r\n\r\n![hiddennavigationbar_3 1 0 637273](https://user-images.githubusercontent.com/761881/43096309-f96873a8-8eb8-11e8-9179-0e34b33a1ca7.png)\r\n![navigationbar_3 1 0 583944](https://user-images.githubusercontent.com/761881/43096310-f98718bc-8eb8-11e8-8eaa-45b0dbaef6f1.png)\r\n\r\n"},{"Id":"8005721817","Type":"IssuesEvent","CreatedAt":"2018-07-23T18:43:35","Actor":"WebDucer","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3383","RelatedDescription":"Opened issue \"[UWP] Navigation bar hidden\" (#3383) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWith the current version of Xamarin.Forms (3.1.0.637273) on UWP devices the navigation bar is hidden. With the previous version (3.1.0.583944) it works.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new Xamarin.Forms app from template\r\n2. Change `MainPage = new MainPage();` to `MainPage = new NavigationPage(new MainPage());` in `App.xaml.cs`\r\n3. Update Xamarin.Forms to version 3.1.0.637273\r\n4. Start UWP app\r\n\r\n### Expected Behavior\r\n\r\nNavigation bar should be visible on top of the page.\r\n\r\n### Actual Behavior\r\n\r\nNavigation bar is hidden.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.1.0.637273\r\n- Last known good version: 3.1.0.583944\r\n- IDE: VS 2017 15.7.5\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  11.4\r\n  - Android: 8.1\r\n  - UWP:  16299\r\n- Android Support Library Version: default\r\n- Nuget Packages: default\r\n- Affected Devices: Windows 10\r\n\r\n### Screenshots\r\n\r\n![hiddennavigationbar_3 1 0 637273](https://user-images.githubusercontent.com/761881/43096309-f96873a8-8eb8-11e8-9179-0e34b33a1ca7.png)\r\n![navigationbar_3 1 0 583944](https://user-images.githubusercontent.com/761881/43096310-f98718bc-8eb8-11e8-8eaa-45b0dbaef6f1.png)\r\n\r\n"},{"Id":"8005554875","Type":"PullRequestEvent","CreatedAt":"2018-07-23T18:11:02","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3299","RelatedDescription":"Merged pull request \"Remove math on scroll view container for RTL\" (#3299) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAndroid - LayoutDirection needed to be set on the internal HorizontalScollView \r\nAndroid (when target < 17), UWP, iOS - When the scroll view is initially loaded and set to RTL it will start out scrolled all the way to the right.  \r\n\r\n### Issues Resolved ###\r\n- fixes #3000\r\n\r\n### Platforms Affected ###\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8005368129","Type":"IssuesEvent","CreatedAt":"2018-07-23T17:34:46","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3297","RelatedDescription":"Closed issue \"[UWP] No navigation bar on UWP when using version 3.1.0.637273\" (#3297) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nOn UWP, no navigation bar is shown with Forms version 3.1.0.637273. Works as expected on version 3.1.0.583944.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open Visual Studio and create a new Forms solution targeting UWP\r\n2. Update Xamarin Forms package to version 3.1.0.637273\r\n3. Add the following to create the first page:\r\n\r\n    ```public partial class App : Application\r\n    {\r\n        public App()\r\n        {\r\n            InitializeComponent();\r\n            var page = new ContentPage { BackgroundColor = Color.Blue, Title = \"Page title\" };\r\n            MainPage = new NavigationPage(page);\r\n        }\r\n    }\r\n\r\n4. Run the UWP app \r\n\r\n### Expected Behavior\r\nPage will show with a navigation bar displaying the page title\r\n\r\n### Actual Behavior\r\nPage shows but there is no navigation bar and page title is not displayed\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.1.0.637273\r\n- Last known good version: 3.1.0.583944.\r\n- IDE: Visual Studio 2017\r\n- Platform Target Frameworks: \r\n    - UWP:  16299 \r\n\r\n- Nuget Packages: Forms\r\n- Affected Devices: Windows 10 PC\r\n\r\n### Screenshots\r\nExpected result:\r\n\r\n![screen shot 2018-07-13 at 10 49 21 am](https://user-images.githubusercontent.com/4606509/42713246-7f322290-868a-11e8-9210-e88a2bd93217.png)\r\n\r\nActual result:\r\n\r\n![screen shot 2018-07-13 at 10 51 30 am](https://user-images.githubusercontent.com/4606509/42713307-ba716078-868a-11e8-8307-66137c4b4153.png)\r\n\r\n"},{"Id":"8005368112","Type":"IssuesEvent","CreatedAt":"2018-07-23T17:34:45","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3186","RelatedDescription":"Closed issue \"Java.Lang.NoSuchMethodError: no method with name='isInLayout' signature='()Z on Android 4.1.2\" (#3186) at xamarin/Xamarin.Forms","RelatedBody":"I have updated Xamarin.Form to the version 3.1.0.583944. \r\n\r\nRunning my application on Android 4.1.2 I get the error \"Java.Lang.NoSuchMethodError: no method with name='isInLayout' signature='()Z' in class Landroid/view/ViewGroup;\". On Android 8.0 works fine.\r\n\r\nMicrosoft Visual Studio Community 2017 \r\nVersione 15.7.4\r\nVisualStudio.15.Release/15.7.4+27703.2035\r\nMicrosoft .NET Framework\r\nVersione 4.7.03056\r\n\r\nEdizione installata: Community\r\n\r\nASP.NET and Web Tools 2017   15.0.40601.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.7.31476\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60419.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.40608.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Functions and Web Jobs Tools   15.0.40617.0\r\nAzure Functions and Web Jobs Tools\r\n\r\nGestione pacchetti NuGet   4.6.0\r\nGestione pacchetti NuGet in Visual Studio. Per altre informazioni su NuGet, visitare il sito Web http://docs.nuget.org/.\r\n\r\nMerq   1.1.19-rc (a4ffc1b)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools per contenitori   1.1\r\nConsente di sviluppare, eseguire e convalidare applicazioni ASP.NET Core nell'ambiente di destinazione. Premere F5 per modificare l'applicazione direttamente in un contenitore senza debug oppure CTRL+F5 per modificare e aggiornare l'app senza ricompilare il contenitore.\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nPacchetto di Strumenti Application Insights per Visual Studio   8.12.10405.1\r\nStrumenti Application Insights per Visual Studio\r\n\r\nPacchetto host dell'adattatore di debug di Visual Studio Code   1.0\r\nLivello di interoperabilità per l'hosting degli adattatori di debug di Visual Studio Code in Visual Studio\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nServizio di linguaggio JavaScript   2.0\r\nServizio di linguaggio JavaScript\r\n\r\nSQL Server Data Tools   15.1.61804.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nStrumenti C#   2.8.3-beta6-62923-07. Commit Hash: 7aafab561e449da50712e16c9e81742b8e7a2969\r\nComponenti di C# usati nell'IDE. A seconda delle impostazioni e del tipo di progetto, potrebbe essere usata una versione diversa del compilatore.\r\n\r\nStrumenti comuni di Azure   1.10\r\nFornisce servizi comuni da usare con Servizi mobili di Azure e gli strumenti di Microsoft Azure.\r\n\r\nStrumenti di Microsoft Azure   2.9\r\nStrumenti di Microsoft Azure per Microsoft Visual Studio 2017 - versione 2.9.10420.2\r\n\r\nStrumenti di recapito continuo Microsoft per Visual Studio   0.3\r\nConsente di automatizzare la configurazione dell'integrazione di compilazione continua e del recapito di compilazione continua direttamente dall'IDE di Visual Studio.\r\n\r\nStrumenti TypeScript   15.7.20419.2003\r\nStrumenti TypeScript per Microsoft Visual Studio\r\n\r\nStrumenti Visual Basic   2.8.3-beta6-62923-07. Commit Hash: 7aafab561e449da50712e16c9e81742b8e7a2969\r\nComponenti di Visual Basic usati nell'IDE. A seconda delle impostazioni e del tipo di progetto, potrebbe essere usata una versione diversa del compilatore.\r\n\r\nVisual F# Tools 10.1 per F# 4.1   15.7.0.0.  Commit Hash: 173513e369ffb7a1c4d5dccf83696d9aac2ab2d0.\r\nMicrosoft Visual F# Tools 10.1 per F# 4.1\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.10.10.2 (35a01d8dc)\r\nEstensione di Visual Studio per consentire lo sviluppo per Xamarin.iOS e Xamarin.Android.\r\n\r\nXamarin Designer   4.12.1 (f3257e429)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.3.3.2 (HEAD/dffc59120)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.12.0.4 (64fece5)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support."},{"Id":"8005278265","Type":"IssuesEvent","CreatedAt":"2018-07-23T17:17:05","Actor":"BillyMartin1964","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3382","RelatedDescription":"Opened issue \"Please add the Terrain Map Type and Custom Map Pin Rotation to Xamarin.Forms.Maps\" (#3382) at xamarin/Xamarin.Forms","RelatedBody":"I like using Xamarin Forms Maps, but now I need to be able to show the Google Map Terrain and be able to show which way the wind is blowing with a rotating custom pin. I know it can be done, because I've seen it in other apps, so could you please add these features to make it more versatile>"},{"Id":"8005078446","Type":"IssuesEvent","CreatedAt":"2018-07-23T16:38:25","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3139","RelatedDescription":"Closed issue \"[UWP] : DisplayActionSheet Is Hiding behind Loader.\" (#3139) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nReference : #3015  - Please refer last comment.This issue is closed but my problem is still  exist. \r\nplease help me solve this problem.\r\n\r\nvar res = await Application.Current.MainPage.DisplayActionSheet(\"Add Item ?\", \"Cancel\", \"\", \"YES\", \"NO\"); -- is hiding behind loader.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Start Loader using Acr.UserDialogs Plugin.\r\n2. Open Alert Popup. \r\n\r\n### Expected Behavior\r\n\r\n1. Alert should come on top of Loader\r\n2. Alert should not close on clicking outside.\r\n\r\n### Actual Behavior\r\n1. Loader is coming on top of Alert. \r\n2. Alert is closing if user clicks anywhere outside application.\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n     XF - 3.0.0.482510\r\n- Last known good version: NA\r\n- IDE: Microsoft Visual Studio Community 2017\r\n- Platform Target Frameworks:\r\n     UWP: 16299\r\n\r\n- Nuget Packages:\r\n    Acr.UserDialogs - v7.0.1.\r\n\r\n    XF - 3.0.0.482510\r\n- Affected Devices: UWP\r\n\r\n### Screenshots\r\n\r\n![displayactionsheetissue](https://user-images.githubusercontent.com/30036418/41762199-9d592a26-7617-11e8-8aca-b8a9450dd4a2.png)\r\n\r\n![actionsheetasyncissue](https://user-images.githubusercontent.com/30036418/41762198-9d0900fa-7617-11e8-8ec7-692243d10192.png)\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8007618674","Type":"PullRequestEvent","CreatedAt":"2018-07-24T03:33:02","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4494","RelatedDescription":"Opened pull request \"[xtro][foundation] Move some API to common-Foundation.ignore since they are now common across all OS\" (#4494) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"8007418329","Type":"PullRequestEvent","CreatedAt":"2018-07-24T02:20:09","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4493","RelatedDescription":"Opened pull request \"[macos][quartzcomposer] Update for beta 4\" (#4493) at xamarin/xamarin-macios","RelatedBody":"Apple re-added some constants that were dropped without any clue (and we\nfiled a rdar for it since it's a breaking change to remove them).\n\nIt's now clear that it's deprecated and why\n`QC_GL_DEPRECATED(10_5, 10_14);`\n\nso we can update the attribute (and fix the version).\n\nnote: also fix extra `;` in `CBUUIDValidRangeString` tests while removing\nthe special case added earlier (from beta 1)"},{"Id":"8005889225","Type":"PullRequestEvent","CreatedAt":"2018-07-23T19:17:08","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4487","RelatedDescription":"Merged pull request \"Bump to latest mono 2018-02 @4fe3280\" (#4487) at xamarin/xamarin-macios","RelatedBody":"Commit list for mono/mono:\r\n\r\n* mono/mono@4fe3280bba1 Revert \"[sdk] Do not fix android platform-tools version. Make it configurable. (#9508)\"\r\n* mono/mono@12ae4f9b0c6 Revert \"[runtime] Fix the --enable-minimal=aot build. (#9394)\"\r\n* mono/mono@a2b95fbb4b2 Revert \"[2018-02] Backport /bin/bash shell set for wasm\"\r\n* mono/mono@f795aa5d2db [llvm] Avoid using the preserveall calling convention in another place on watchos. (#9578)\r\n* mono/mono@04493d22247 Fix LogcatTextWriter_Log interpreting messages it logs, potentially writing random garbage and/or crashing (introduced by https://github.com/mono/mono/commit/984f6484666c2ee6fefec949c81fdff1189c9488) (Fixes https://github.com/xamarin/xamarin-android/issues/1951) (#9612)\r\n* mono/mono@35284c340c0 [runtime] Make sigterm dumper send file to merp (#9586)\r\n* mono/mono@077307fce4b [sdk] Do not fix android platform-tools version. Make it configurable. (#9508)\r\n* mono/mono@1ad118647cd [arm64] Make OP_CHECK_THIS read only a byte, to prevent unaligned access errors. (#9546)\r\n* mono/mono@86f99d31bd3 Merge pull request #9483 from alexanderkyte/2018-02-merp_params\r\n* mono/mono@97aa066389e [2018-02] Backport /bin/bash shell set for wasm\r\n* mono/mono@37091f00c29 [runtime] Enable application to register path for MERP restart\r\n* mono/mono@955ad4538ec [runtime] Make merp eventType icall argument\r\n* mono/mono@fc0c12f768b [Coop] Convert Mono.Runtime to coop. (#8599)\r\n* mono/mono@c495285cac4 [debugger] more locking and avoid race around mono_threads_join_lock & loader lock\r\n* mono/mono@d18b8941ab7 [debugger] Add locking around tls->frames usage/freeing\r\n* mono/mono@1bdbf71a8b2 [runtime] Fix the --enable-minimal=aot build. (#9394)\r\n\r\nDiff: https://github.com/mono/mono/compare/cae8c5488497bcd674e80e9e71814aceefbb0f14...4fe3280bba14cb9e81e2480bfdc6d934bcbc5c3c"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1019670557011243008","CreatedAt":"2018-07-18T19:49:40+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 3.1 delivers the latest in quality improvements. We're excited to introduce Xamarin.Forms 3.1, now wi… https://t.co/qW6S2P7Hi0","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":254,"FavoriteCount":160,"RawContent":null},{"Id":"1016758939877117952","CreatedAt":"2018-07-10T18:59:56+00:00","UserScreenname":"xamarinhq","Text":"Understanding your app, it's users, &amp; their interactions helps you build a 5-star app. Application Insights w/ AppC… https://t.co/Smw5tVHZ1X","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":43,"FavoriteCount":25,"RawContent":null},{"Id":"1014949294737186816","CreatedAt":"2018-07-05T19:09:03+00:00","UserScreenname":"xamarinhq","Text":"Cool intros to new goodies in &lt;10 minutes! Explore some of the “Snack Pack” episodes that @JamesMontemagno bundled… https://t.co/80gmo35fb6","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":90,"FavoriteCount":43,"RawContent":null},{"Id":"1014903254034141190","CreatedAt":"2018-07-05T16:06:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/3RaJk3O0xb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":33,"RawContent":null},{"Id":"1014521211970379776","CreatedAt":"2018-07-04T14:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":34,"RawContent":null},{"Id":"1014159326645313537","CreatedAt":"2018-07-03T14:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":25,"RawContent":null},{"Id":"1013873320834445313","CreatedAt":"2018-07-02T19:53:31+00:00","UserScreenname":"xamarinhq","Text":"In today's Xamarin Podcast, @PierceBoggan &amp; @JamesMontemagno talk up latest &amp; greatest in mobile #dotNET dev; Xamar… https://t.co/chy5AhHt86","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":63,"FavoriteCount":43,"RawContent":null},{"Id":"1013805063209455616","CreatedAt":"2018-07-02T15:22:17+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/kdzv9U4084","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":21,"RawContent":null},{"Id":"1013547297437835264","CreatedAt":"2018-07-01T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/JL1SW3MFro","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":27,"RawContent":null},{"Id":"1012399525338595328","CreatedAt":"2018-06-28T18:17:10+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/3QxhuBcUiC v7.2 introduces two new MSBuild properties to make maintaining Android VersionCode for Andr… https://t.co/j469e1DU24","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":84,"FavoriteCount":58,"RawContent":null},{"Id":"1011343460811583489","CreatedAt":"2018-06-25T20:20:45+00:00","UserScreenname":"xamarinhq","Text":"What’s new in the #XamarinAndroid designer: https://t.co/OOHH6tXhia https://t.co/lCAsZQzwls","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":89,"FavoriteCount":39,"RawContent":null},{"Id":"1009871245574332422","CreatedAt":"2018-06-21T18:50:42+00:00","UserScreenname":"xamarinhq","Text":"Get your #Xamarin Android apps ready for Google Play’s target API level requirements: https://t.co/2iFf5ijjj9 https://t.co/iQmylzyQ7o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":34,"RawContent":null},{"Id":"1008802730993967104","CreatedAt":"2018-06-18T20:04:48+00:00","UserScreenname":"xamarinhq","Text":"Get ready for the July 2018 deadline by ensuring your  #Xamarin apps support iOS 11 and iPhone X: https://t.co/1Wx6Bo4TSQ","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":43,"FavoriteCount":18,"RawContent":null},{"Id":"1007343670775963649","CreatedAt":"2018-06-14T19:27:01+00:00","UserScreenname":"xamarinhq","Text":"Get access to more cross-platform APIs with the latest Xamarin.Essentials Preview: https://t.co/WqtCV8OneC https://t.co/FgdScqkpPt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":116,"FavoriteCount":66,"RawContent":null},{"Id":"1007280505820254209","CreatedAt":"2018-06-14T15:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/zLa3RTUgaL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":21,"RawContent":null},{"Id":"1006915501405167616","CreatedAt":"2018-06-13T15:05:37+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/U9huu5DdJW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":22,"RawContent":null},{"Id":"1006682387743461376","CreatedAt":"2018-06-12T23:39:19+00:00","UserScreenname":"xamarinhq","Text":"Create your first #Xamarin app using #MongoDB: https://t.co/Nu6lZzYwYX","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":60,"FavoriteCount":25,"RawContent":null}]}},"RunOn":"2018-07-24T05:30:58.4495496Z","RunDurationInMilliseconds":4050}