{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7431511564","Type":"IssuesEvent","CreatedAt":"2018-03-25T15:25:05","Actor":"jkotas","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3000","RelatedDescription":"Opened issue \"System.IO.IOException thrown by MultipartReaderStream\" (#3000) at aspnet/Home","RelatedBody":"_From @dvdobrovolskiy on March 25, 2018 0:28_\n\nHave this code \r\n[FileUploadSample](https://github.com/aspnet/Docs/tree/master/aspnetcore/mvc/models/file-uploads/sample/FileUploadSample)\r\n\r\nworks perfectly well on 2.0 but is I implement it in 1.0 (version 1.1.7) project throws \"'System.IO.IOException' in mscorlib.dll\" exception.\r\n\r\nHere controller\r\n`[HttpPost]\r\n        [DisableFormValueModelBinding]\r\n        [ValidateAntiForgeryToken]\r\n        public async Task<IActionResult> Upload()\r\n        {\r\n            if (!MultipartRequestHelper.IsMultipartContentType(Request.ContentType))\r\n            {\r\n                return BadRequest($\"Expected a multipart request, but got {Request.ContentType}\");\r\n            }\r\n\r\n            // Used to accumulate all the form url encoded key value pairs in the \r\n            // request.\r\n            var formAccumulator = new KeyValueAccumulator();\r\n            string targetFilePath = null;\r\n\r\n            var boundary = MultipartRequestHelper.GetBoundary(\r\n                MediaTypeHeaderValue.Parse(Request.ContentType),\r\n                _defaultFormOptions.MultipartBoundaryLengthLimit);\r\n            var reader = new MultipartReader(boundary, HttpContext.Request.Body);\r\n\r\n            var section = await reader.ReadNextSectionAsync();     //<===Exception here\r\n`\r\n\r\nSorry if I forgot to set temp path somewhere but I am far before reading data to my stream or temp file\n\n_Copied from original issue: dotnet/coreclr#17197_"},{"Id":"7429945313","Type":"IssuesEvent","CreatedAt":"2018-03-24T19:33:58","Actor":"baseless","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2998","RelatedDescription":"Closed issue \"Azure deployment of net core 2.1 (preview1, VS2017 preview2) does not work\" (#2998) at aspnet/Home","RelatedBody":"Deploying net core 2.1 (preview1) as azure appservice do not work properly.\r\nDefault project templates will fail to deploy properly.\r\n\r\n# General\r\n\r\nThe following procedure do not work when tested:\r\n1. Create net core 2.1 preview1 project without authentication (using Visual Studio 2017 15.7.0 preview 2).\r\n2. Deploy through Visual Studio as new Azure AppService.\r\n3. The root url returns the default page `Your App Service app is up and running` and no pages work (returns `The resource you are looking for has been removed, had its name changed, or is temporarily unavailable.`)\r\n\r\n4. If changing the startup (for example comment out `app.UseHsts();` the site starts throwing `HTTP Error 502.5 - Process Failure` error pages which it continues to do even after startup is restored to original state)\r\n\r\nIs deployment of net core 2.1 to azure not yet supported? \r\n"},{"Id":"7429863285","Type":"IssuesEvent","CreatedAt":"2018-03-24T18:43:30","Actor":"stap123","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2999","RelatedDescription":"Opened issue \"Web Publish Upgraded Project to Azure Web App Failing\" (#2999) at aspnet/Home","RelatedBody":"I upgraded my ASP.NET Core web app from version 2.0.1 of packages to the latest (2.0.3). After completing this the site runs as expected locally. However when publishing to my Azure Web App it breaks and I get a 502.5 Process Failure error. I turned on stdout to investigate and the error is:\r\n\r\n```\r\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'Microsoft.AspNetCore.Hosting.Abstractions, Version=2.0.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n   at Web.Program.Main(String[] args)\r\n```\r\n\r\nThis suggests that the issue is that the newly upgraded packages haven't had their DLLs pushed as part of the publish to the Azure Web App. Sure enough if I manually delete the DLL in the Azure App and add the one from my dotnet\\sdk\\nugetfallbackfolder it seems to move onto the next DDL there is an issue with (in my case the Microsoft.AspNetCore.Hosting).\r\n\r\nDoes anyone know why this could be happening? Have I done something wrong or is it a common issue? How can I stop it happening, obviously not an ideal situation?\r\n\r\nObviously I can replace each one manually but it strikes me that there's a likely underlying reason."},{"Id":"7429853970","Type":"IssuesEvent","CreatedAt":"2018-03-24T18:37:47","Actor":"baseless","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2998","RelatedDescription":"Opened issue \"Azure deployment of net core 2.1 (preview1, VS2017 preview2) does not work\" (#2998) at aspnet/Home","RelatedBody":"Deploying net core 2.1 (preview1) as azure appservice do not work properly.\r\n\r\n project results in the default \"Your App Service app is up and running\" page. No pages works, results in \"\". \"HTTP Error 502.5 - Process Failure\".\r\n\r\n# General\r\n\r\nThe following procedure do not work when tested:\r\n1. Create net core 2.1 project without authentication.\r\n2. Deploy through Visual Studio as new Azure AppService.\r\n3. The root url returns the default page `Your App Service app is up and running` and no pages work (returns `The resource you are looking for has been removed, had its name changed, or is temporarily unavailable.`)\r\n\r\n4. If changing the startup (for example comment out `app.UseHsts();` the site starts throwing `HTTP Error 502.5 - Process Failure` error pages which it continues to do even after startup is restored to original state)\r\n\r\nIs deployment of net core 2.1 to azure not yet supported? \r\n"},{"Id":"7429553996","Type":"IssuesEvent","CreatedAt":"2018-03-24T15:37:49","Actor":"marian-margeta","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2997","RelatedDescription":"Opened issue \"DataProtection - encryption with high-protected capi certificate\" (#2997) at aspnet/Home","RelatedBody":"I have a problem with DataProtection when is used together with `ProtectKeysWithCertificate` to protect the data at rest. If I create highProtected certificate with CryptoAPI, e.g. using `New-SelfSignedCertificate` powershell cmdlet\r\n\r\n```\r\nNew-SelfSignedCertificate `\r\n         -Subject localhost `\r\n         -DnsName localhost `\r\n         -FriendlyName \"ASP.NET Data Protection`\r\n         -NotBefore (Get-Date) `\r\n         -NotAfter (Get-Date).AddYears(10) `\r\n         -CertStoreLocation \"cert:CurrentUser\\My\" `\r\n         -KeyAlgorithm RSA `\r\n         -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" `\r\n         -KeyLength 2048 `\r\n         -KeyUsage KeyEncipherment, DataEncipherment `\r\n         -KeyProtection ProtectHigh\r\n```\r\n\r\nthen the certificate is protected with additional password. Windows will ask for it every time the application is started. It shows modal window like that (in Slovak lang):\r\n\r\n![image](https://user-images.githubusercontent.com/6164767/37865531-1f27fa18-2f7e-11e8-8fc1-ef794bfd3d60.png)\r\n\r\nIf I type correct password, everything is good. However, when I type wrong password for the first time, and then correct one, DataProtection generates new master key, whereas the old one is still active (not expired or revoked). The application don't start until the correct password to the cert is given, but it nevertheless uses newly-generated key. Is there any way how to suppress this behavior? If I use method `DisableAutomaticKeyGeneration`, it also disables the key rotation.\r\n\r\nBtw, the log printed to console every time the incorrect password is given:\r\n\r\n```\r\nfail: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[24]\r\n      An exception occurred while processing the key element '<key id=\"bc5319fd-63a4-45f2-b75e-1ef181f6ec19\" version=\"1\" />'.\r\nInternal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: Access denied\r\n   at System.Security.Cryptography.RSACng.EncryptOrDecrypt(SafeNCryptKeyHandle key, Byte[] input, AsymmetricPaddingMode paddingMode, Void* paddingInfo, EncryptOrDecryptAction encryptOrDecrypt)\r\n   at System.Security.Cryptography.RSACng.EncryptOrDecrypt(Byte[] data, RSAEncryptionPadding padding, EncryptOrDecryptAction encryptOrDecrypt)\r\n   at System.Security.Cryptography.RSACng.Decrypt(Byte[] data, RSAEncryptionPadding padding)\r\n   at System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(Byte[] rgbIn)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.DecryptKey(Byte[] keyData, RSA rsa, Boolean useOAEP)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.DecryptEncryptedKey(EncryptedKey encryptedKey)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionKey(EncryptedData encryptedData, String symmetricAlgorithmUri)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument()\r\n   at Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor.Decrypt(XElement encryptedElement)\r\n   at Microsoft.AspNetCore.DataProtection.XmlEncryption.XmlEncryptionExtensions.DecryptElement(XElement element, IActivator activator)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager.Microsoft.AspNetCore.DataProtection.KeyManagement.Internal.IInternalXmlKeyManager.DeserializeDescriptorFromKeyElement(XElement keyElement)\r\nwarn: Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver[12]\r\n      Key {bc5319fd-63a4-45f2-b75e-1ef181f6ec19} is ineligible to be the default key because its CreateEncryptor method failed.\r\nInternal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: Access denied\r\n   at System.Security.Cryptography.RSACng.EncryptOrDecrypt(SafeNCryptKeyHandle key, Byte[] input, AsymmetricPaddingMode paddingMode, Void* paddingInfo, EncryptOrDecryptAction encryptOrDecrypt)\r\n   at System.Security.Cryptography.RSACng.EncryptOrDecrypt(Byte[] data, RSAEncryptionPadding padding, EncryptOrDecryptAction encryptOrDecrypt)\r\n   at System.Security.Cryptography.RSACng.Decrypt(Byte[] data, RSAEncryptionPadding padding)\r\n   at System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(Byte[] rgbIn)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.DecryptKey(Byte[] keyData, RSA rsa, Boolean useOAEP)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.DecryptEncryptedKey(EncryptedKey encryptedKey)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionKey(EncryptedData encryptedData, String symmetricAlgorithmUri)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument()\r\n   at Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor.Decrypt(XElement encryptedElement)\r\n   at Microsoft.AspNetCore.DataProtection.XmlEncryption.XmlEncryptionExtensions.DecryptElement(XElement element, IActivator activator)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager.Microsoft.AspNetCore.DataProtection.KeyManagement.Internal.IInternalXmlKeyManager.DeserializeDescriptorFromKeyElement(XElement keyElement)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.DeferredKey.<>c__DisplayClass1_0.<GetLazyDescriptorDelegate>b__0()\r\n   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1.CreateValue()\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyBase.get_Descriptor()\r\n   at Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngGcmAuthenticatedEncryptorFactory.CreateEncryptorInstance(IKey key)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyBase.CreateEncryptor()\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver.CanCreateAuthenticatedEncryptor(IKey key)\r\n```\r\n"},{"Id":"7428251137","Type":"IssuesEvent","CreatedAt":"2018-03-23T23:50:24","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2908","RelatedDescription":"Closed issue \"Routes question\" (#2908) at aspnet/Home","RelatedBody":"Hello, why when i define routes like this:\r\n\r\n```\r\npublic class Startup\r\n\t{\r\n\t\tpublic void ConfigureServices(IServiceCollection services)\r\n\t\t{\r\n\t\t\tservices.AddMvc();\r\n\t\t}\r\n\t\tpublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n\t\t{\r\n\t\t\tif (env.IsDevelopment())\r\n\t\t\t{\r\n\t\t\t\tapp.UseDeveloperExceptionPage();\r\n\t\t\t}\r\n\r\n\t\t\tapp.UseMvc(routes =>\r\n\t\t\t{\r\n\t\t\t\troutes.MapRoute(\r\n\t\t\t\t\tname: null,\r\n\t\t\t\t\ttemplate: \"{category}\",\r\n\t\t\t\t\tdefaults: new { controller = \"Home\", action = \"Index\" }\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\troutes.MapRoute(\r\n\t\t\t\t\tname: null,\r\n\t\t\t\t\ttemplate: \"\",\r\n\t\t\t\t\tdefaults: new { controller = \"Home\", action = \"Index\" }\r\n\t\t\t\t\t);\r\n\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n```\r\n\r\n\r\n```\r\n\tpublic class HomeController : Controller\r\n\t{\r\n\t\tstatic private int _calls = 0;\r\n\r\n\t\tpublic string Index()\r\n\t\t{\r\n\t\t\treturn $\"{++_calls}\";\r\n\t\t}\r\n\t}\r\n```\r\n\r\nHome.Index() called two times per request?\r\nproject -> https://github.com/Montigomo/AcTest1"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7432901828","Type":"IssuesEvent","CreatedAt":"2018-03-26T04:21:18","Actor":"ccic","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1724","RelatedDescription":"Opened issue \"Shall we allow DefaultHubProtocolResolver.GetProtocol accepts a parameter of HubConnnectionContext\" (#1724) at aspnet/SignalR","RelatedBody":"I found [DefaultHubProtocolResolver:GetProtocol.GetProtocol](https://github.com/aspnet/SignalR/blob/dev/src/Microsoft.AspNetCore.SignalR.Core/Internal/DefaultHubProtocolResolver.cs) refers to a unused parameter of HubConnnectionContext. It couples HubProtocolResolver and HubConnectionContext tightly. \r\n\r\nIf the design here is to allow customized protocol for derived HubConnectionContext, it is better use another more concrete parameter instead of HubConnectionContext."}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7432769759","Type":"IssuesEvent","CreatedAt":"2018-03-26T03:22:11","Actor":"javiercn","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7396","RelatedDescription":"Closed issue \"Completely Disabling Antiforgery\" (#7396) at aspnet/Mvc","RelatedBody":"Hi,\r\n\r\n   I'm trying to completely disable antiforgery, but it seems this is not possible. The documentation seems to suggest that using AddMvcCore as the only service will disable anti forgery. Whilst this seems true in that the tokens are not validated, the .aspnet.antiforgery token still gets set as a cookie in any requests omitting it. \r\n\r\nTrying to manually remove any services which are anti forgery related will throw an exception when attempting to view a view, such as:\r\n\r\nInvalidOperationException: Unable to resolve service for type 'Microsoft.AspNetCore.Antiforgery.IAntiforgery' while attempting to activate 'Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGenerator'.\r\n\r\nIs there any way to completely get rid of the cookies issued? I know i can rename them, but this isn't really the point.\r\n\r\nThanks!"},{"Id":"7432752836","Type":"IssuesEvent","CreatedAt":"2018-03-26T03:15:11","Actor":"javiercn","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7421","RelatedDescription":"Closed issue \"InvalidOperationException: Cannot find compilation library location for package ...\" (#7421) at aspnet/Mvc","RelatedBody":"I created a new ASP.NET core mvc project and created a xunit project beside. For the views, we created an own project which contains embedded views. To make this work, we use an EmbeddedFileProvider which points to this project. \r\nAs long as i run the unit tests within Visual Studio or with dotnet test, it works as expected. As soon as I use dotnet xunit, it fails with the exception \"InvalidOperationException : Cannot find compilation library location for package 'Repro'\"\r\n\r\nI already tried the fixes from these threads, but they won't work when using embedded files in another project: \r\nhttps://github.com/dotnet/core-setup/issues/3614\r\nhttps://github.com/dotnet/core-setup/issues/3494\r\n\r\nI created a repro:  https://github.com/michaelestermann/ReproRazorCompilationIssue\r\nJust fetch it and run dotnet xunit in the \"Repro.Views.Test\" folder and you'll face the exception.\r\n\r\nWe didn't manage to fix this. I think we use 'dotnet test' as long as its not working. Its not as nice as the 'dotnet xunit' because of the lack for teamcity support (dotnet xunit -teamcity)."},{"Id":"7432266429","Type":"IssuesEvent","CreatedAt":"2018-03-25T22:55:14","Actor":"khellang","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7546","RelatedDescription":"Opened issue \"Action with complex model and CancellationToken results in ambiguous binding source inference\" (#7546) at aspnet/Mvc","RelatedBody":"In a controller annotated with an `[ApiController]` attribute, if you have an action with both a complex model and a `CancellationToken`, MVC fails to infer the binding source and the action ends up returning 400:\r\n\r\n> Unable to unambiguously infer binding sources for parameters on 'System.Threading.Tasks.Task\\`1[Microsoft.AspNetCore.Mvc.ActionResult`1[Models.UserModel]] Register(Controllers.RegisterUserModel, System.Threading.CancellationToken)'. More than one parameter may be inferred to bound from body.\r\n\r\nIt's easy enough to get around it by just setting `SuppressInferBindingSourcesForParameters` and slapping an explicit `[FromBody]` attribute on the model, but this seems like a bug/oversight?"},{"Id":"7431658309","Type":"IssuesEvent","CreatedAt":"2018-03-25T16:50:22","Actor":"zokiad","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7545","RelatedDescription":"Opened issue \"Exception or log wrong asp-controller asp-action\" (#7545) at aspnet/Mvc","RelatedBody":"Hi,\r\n\r\nIt is not a bug but I think it is a request.\r\n\r\nCurrently, we can generate a link like:\r\n\r\n```html\r\n<a asp-controller=\"Home\" asp-action=\"IndexWrong\">...</a>\r\n```\r\n\r\nBut if asp-controller or asp-action are wrong (not found). There are no warning.\r\nI do similar error several time: I write a wrong asp-action and my link generate is by default /. If I don't test the link manually, I wannot know my error.\r\n\r\nPerhaps, it should generate an exception ?\r\n"},{"Id":"7430877700","Type":"IssuesEvent","CreatedAt":"2018-03-25T08:22:08","Actor":"javiercn","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7544","RelatedDescription":"Opened issue \"Main application assembly not being included in the list of parts\" (#7544) at aspnet/Mvc","RelatedBody":"I'm doing new webapi and I can't hit api/values. The reason is the part for the application assembly is not being added to the list of application parts.\r\n\r\nManually adding the part fixes the problem. @rynowak @pranavkm.\r\n\r\n![image](https://user-images.githubusercontent.com/6995051/37873063-8884167c-2fc9-11e8-8d97-186d4e0197a3.png)\r\n\r\nAside from that I also discovered out that there are other assemblies of our framework that show up as parts. \r\nWe should exclude them by default and plug them in as parts only when a gesture is made to turn the features on. We can do this with the new partfactory support.\r\n\r\n/cc: @SteveSandersonMS for JavaScriptServices"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7432780899","Type":"IssuesEvent","CreatedAt":"2018-03-26T03:26:53","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1574","RelatedDescription":"Closed issue \"Functional test discovery fails on build\" (#1574) at aspnet/Identity","RelatedBody":"Fails both locally and on the CI. From http://aspnetci/viewLog.html?buildId=387311&buildTypeId=Lite_Identity&tab=buildLog&_focus=407#_state=407: \r\n\r\n```C#\r\n[Step 4/6] [xUnit.net 00:00:00.2707368] Exception discovering tests from Microsoft.AspnetCore.Identity.Service.FunctionalTests: System.BadImageFormatException: Could not load file or assembly 'Microsoft.AspnetCore.Identity.Service.FunctionalTests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'. An attempt was made to load a program with an incorrect format.\r\n[13:07:57]\t[Step 4/6] File name: 'Microsoft.AspnetCore.Identity.Service.FunctionalTests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n[13:07:57]\t[Step 4/6] at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, IntPtr ptrLoadContextBinder)\r\n[13:07:57]\t[Step 4/6] at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, IntPtr ptrLoadContextBinder)\r\n[13:07:57]\t[Step 4/6] at System.Reflection.Assembly.Load(AssemblyName assemblyRef)\r\n[13:07:57]\t[Step 4/6] at Xunit.Sdk.ReflectionAssemblyInfo..ctor(String assemblyFileName) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Reflection\\ReflectionAssemblyInfo.cs:line 31\r\n[13:07:57]\t[Step 4/6] --- End of stack trace from previous location where exception was thrown ---\r\n[13:07:57]\t[Step 4/6] at Xunit.AppDomainManager_NoAppDomain.CreateObject[TObject](AssemblyName assemblyName, String typeName, Object[] args) in C:\\Dev\\xunit\\xunit\\src\\xunit.runner.utility\\AppDomain\\AppDomainMan\r\n```"},{"Id":"7432641731","Type":"IssuesEvent","CreatedAt":"2018-03-26T02:28:41","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1584","RelatedDescription":"Closed issue \"Travis not enabled in Identity?\" (#1584) at aspnet/Identity","RelatedBody":"For some reason it doesn't seem to be triggered @HaoK @Eilon \r\n\r\n![image](https://user-images.githubusercontent.com/6995051/35198212-64051ad0-fea0-11e7-86df-6249a08ce705.png)\r\n"},{"Id":"7432634194","Type":"IssuesEvent","CreatedAt":"2018-03-26T02:25:26","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1620","RelatedDescription":"Closed issue \"[IdentityUI]: Experience for using a custom ApplicationUser : IdentityUser has room for improvement\" (#1620) at aspnet/Identity","RelatedBody":"Writing the release verification plan for Identity that involves using a custom ApplicationUser type with additional properties. To do this, it seems like I have to override the following files in my application:\r\n\r\n* https://github.com/aspnet/Identity/blob/dev/samples/IdentitySample.DefaultUI/Areas/Identity/Pages/_ViewImports.cshtml\r\n* https://github.com/aspnet/Identity/blob/dev/samples/IdentitySample.DefaultUI/Areas/Identity/Pages/Account/Register.cshtml\r\n* https://github.com/aspnet/Identity/blob/dev/samples/IdentitySample.DefaultUI/Areas/Identity/Pages/Account/Register.cshtml.cs\r\n* https://github.com/aspnet/Identity/blob/dev/samples/IdentitySample.DefaultUI/Areas/Identity/Pages/Account/Manage/Index.cshtml\r\n* https://github.com/aspnet/Identity/blob/dev/samples/IdentitySample.DefaultUI/Areas/Identity/Pages/Account/Manage/Index.cshtml.cs\r\n\r\nThere's a fair bit of knowing the details of how things Identity UI work once you get to these many files. In addition, we'd need to provide guidance for users that customized these pages if we do update these files in our package. If this is a fairly commonly scenario, perhaps the experience in using a custom user this should be first class.\r\n\r\n\r\n"},{"Id":"7432603843","Type":"IssuesEvent","CreatedAt":"2018-03-26T02:12:00","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1667","RelatedDescription":"Closed issue \"Authentication workflow problem when email confirmation is required.\" (#1667) at aspnet/Identity","RelatedBody":"_From @Eilon on October 24, 2017 21:48_\n\n_From @Bartmax on October 21, 2015 8:23_\n\n**TL;DR:**\nUser using external login provider and application with email confirmation required will be able to login the first time (on user creation) without confirming email and he/she won't be able to log in again.\n\n---\n\nWhen a visitor enter the page and hit login, then choosing an external provider, it's then redirected to username/email confirmation.\n\ntyping an email creates and account and log the user in. (user should be required to confirm email)\nThere's no email sending code in the ExternalLogin workflow.\n\nif user logout and then try to login again, it's again presenting him the Associate account.\n\nIf he types in the same email address it says it's already taken.\nIf he types a new email address, it says Invalid login (already associated).\n\nIf he chooses to forgot password, then it's presented with a forgot password confirmation but not email sent because it's not confirmed.\n\nProblems summary:\n1. There's no way a user can log in (for a second time) in this scenario.\n2. The user can use the system without email confirmation as long as he/she stays logged in when account was created.\n3. No email confirmation is sent on this workflow.\n4. Forgot password does **not** help.\n\n\n_Copied from original issue: aspnet/Templates#242_\n\n_Copied from original issue: aspnet/templating#108_"},{"Id":"7432600585","Type":"IssuesEvent","CreatedAt":"2018-03-26T02:10:31","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1659","RelatedDescription":"Closed issue \"Identity UI Scaffolding Code Bug: duplicate \"_LoginPartial.cshtml\" cause some Anti-forgery token error.\" (#1659) at aspnet/Identity","RelatedBody":"I searched and did not see this bug was mentioned.\r\nFollowing the instruction in the [2.1 Identity UI](https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/), I added the identity code back to my project, then found this: if I logout from any of the \"Manage your account\" pages, an anti-forgery token error would happen and caused a 400 status page. It turned out that there were 2 _LoginPartial.cshtml in the project, /Pages/Shared/_LoginPartial.cshtml and /Views/Shared/_LoginPartial.cshtml. Removing /Pages/Shared/_LoginPartial.cshtml fixed the error for me.\r\n"},{"Id":"7430247184","Type":"IssuesEvent","CreatedAt":"2018-03-24T23:02:04","Actor":"xrkolovos","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1708","RelatedDescription":"Opened issue \"Add an option in Identity System, so we can define the length of TFA Recovery codes\" (#1708) at aspnet/Identity","RelatedBody":"As, i see in method [TwoFactorRecoveryCodeSignInAsync](https://github.com/aspnet/Identity/blob/c6a82ad19a0bdb80b7358dc843b66664bbf33f96/src/Identity/SignInManager.cs), they don't protect against brute force attacks.\r\n8 char long strings are venerable to brute force attacks.\r\n\r\nAdd an option in Identity System, so we can define the length of TFA Recovery codes, and i thing you should raise the number. Normally the recovery codes are larger strings.\r\n\r\nThat's issue comes from discussion #1700"},{"Id":"7426498757","Type":"PullRequestEvent","CreatedAt":"2018-03-23T16:39:25","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1707","RelatedDescription":"Merged pull request \"Release/2.1\" (#1707) at aspnet/Identity","RelatedBody":""},{"Id":"7426497978","Type":"PullRequestEvent","CreatedAt":"2018-03-23T16:39:17","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1707","RelatedDescription":"Opened pull request \"Release/2.1\" (#1707) at aspnet/Identity","RelatedBody":""}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7432312326","Type":"IssuesEvent","CreatedAt":"2018-03-25T23:26:37","Actor":"MuleaneEve","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2430","RelatedDescription":"Closed issue \"[Discussion] Why is ConnectionContext an abstract class and not an interface?\" (#2430) at aspnet/KestrelHttpServer","RelatedBody":"This is just a quick question to understand this choice.\r\nI tried to search through the old issues, but couldn't find a discussion on that. I saw that [it used to be IConnectionContext](https://github.com/aspnet/KestrelHttpServer/blob/f3745608af5020eaa3e83cd5a21aeaa2b85b618b/src/Kestrel.Transport.Abstractions/Internal/IConnectionContext.cs), so I'm sure it was discussed somewhere.\r\n\r\nBy the way, nice work with the ongoing BedRock refactoring :thumbsup:"},{"Id":"7431855456","Type":"IssuesEvent","CreatedAt":"2018-03-25T18:46:42","Actor":"MuleaneEve","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2430","RelatedDescription":"Opened issue \"[Discussion] Why is ConnectionContext an abstract class and not an interface?\" (#2430) at aspnet/KestrelHttpServer","RelatedBody":"This is just a quick question to understand this choice.\r\nI tried to search through the old issues, but couldn't find a discussion on that. I saw that [it used to be IConnectionContext](https://github.com/aspnet/KestrelHttpServer/blob/f3745608af5020eaa3e83cd5a21aeaa2b85b618b/src/Kestrel.Transport.Abstractions/Internal/IConnectionContext.cs), so I'm sure it was discussed somewhere.\r\n\r\nBy the way, nice work with the ongoing BedRock refactoring :thumbsup:"},{"Id":"7430712788","Type":"IssuesEvent","CreatedAt":"2018-03-25T05:57:52","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2429","RelatedDescription":"Opened issue \"Consider letting the transport own the creation of IDuplexPipe\" (#2429) at aspnet/KestrelHttpServer","RelatedBody":"Today the transport is responsible for exposing properties on the connection that can be used by Kestrel to create a duplex pipe. It does this today for a few reasons:\r\n\r\n- It wants to directly apply the MaxResponseBufferSize and MaxRequestBuffer size to pipe options\r\n- It communicates \"fin\" via cancelling the transport's output reader (this is super hacky and we should get rid of it anyways).\r\n- It wants to control where \"user code\" runs. This includes:\r\n  - ConnectionAdapters (soon to be deprecated)\r\n  - CancellationToken callbacks\r\n  - the request processing delegate\r\n\r\nDelegating to the transport has some other benefits:\r\n- Transports aren't tied to a specific pipe implementation.\r\n- We can potentially delete ITransportSchedulerFeature, IApplicationTransportFeature \r\n\r\nTo make this change though, we need to pass the relevant settings from kestrel to the transport without coupling.\r\n\r\nSee https://github.com/geoffkizer/KestrelHttpServer/tree/directsockets for an example of the socket transport with a direct pipe implementation.\r\n\r\n/cc @tmds @benaadams (only other people that wrote transports 😄)"},{"Id":"7429212025","Type":"PullRequestEvent","CreatedAt":"2018-03-24T11:57:25","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2428","RelatedDescription":"Opened pull request \"Move DuplexPipe into Kestrel.Core as internal\" (#2428) at aspnet/KestrelHttpServer","RelatedBody":"Fixes #2419 "},{"Id":"7429172507","Type":"IssuesEvent","CreatedAt":"2018-03-24T11:26:54","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2412","RelatedDescription":"Closed issue \"Bedrock API review\" (#2412) at aspnet/KestrelHttpServer","RelatedBody":"## Protocol abstractions renamed\r\n\r\nMicrosoft.AspNetCore.Connections.Abstractions\r\n\r\n```C#\r\npublic abstract ConnectionHandler\r\n{\r\n    Task OnConnectionAsync(ConnectionContext connectionContext);\r\n}\r\n```"},{"Id":"7429076891","Type":"PullRequestEvent","CreatedAt":"2018-03-24T10:12:54","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2421","RelatedDescription":"Merged pull request \"Expose DefaultConnectionContext POCO\" (#2421) at aspnet/KestrelHttpServer","RelatedBody":"- Made TransportConnecton derive from ConnectionContext\r\n- Less objects, less opinions about what the ConnectionContext is. This diverges from what we do with HttpContext but it seems better overall."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7428273159","Type":"PullRequestEvent","CreatedAt":"2018-03-24T00:00:29","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2218","RelatedDescription":"Opened pull request \"Make `TestProject.GetProjectDirectory` more thorough when finding project directory.\" (#2218) at aspnet/Razor","RelatedBody":"**Big Note:** I was unable to reproduce this issue and after digging through the code really can't see how things could be going wrong other than in our test project directory creation. Basically, in this PR i make our `GetProjectDirectory` a little more reliable in unknown scenarios and added some logic to help us diagnose future errors if they arise.\r\n\r\n- Relaxed some restrictions to find project directory\r\n- Added some logic to make future debugging/test failures more diagnosable.\r\n\r\n#2184 "},{"Id":"7428190226","Type":"PullRequestEvent","CreatedAt":"2018-03-23T23:24:40","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2217","RelatedDescription":"Opened pull request \"Use tool assembly path for computing default pipe name\" (#2217) at aspnet/Razor","RelatedBody":"https://github.com/aspnet/Razor/issues/2216\r\n\r\n"},{"Id":"7428117417","Type":"IssuesEvent","CreatedAt":"2018-03-23T22:56:44","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2216","RelatedDescription":"Opened issue \"Building on Visual Studio doesn't reuse existing build server\" (#2216) at aspnet/Razor","RelatedBody":"This is because we use `AppDomain.CurrentDomain.BaseDirectory` to compute the default pipe name. We should be using path to rzc instead."},{"Id":"7427979824","Type":"IssuesEvent","CreatedAt":"2018-03-23T22:10:25","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2215","RelatedDescription":"Opened issue \"Missing pdb inside Microsoft.AspNetCore.Razor.Design.symbols.nupkg\" (#2215) at aspnet/Razor","RelatedBody":"For some reason, the symbols nupkg we create for this assembly doesn't contain any pdb files.\r\n\r\ncc @pranavkm "},{"Id":"7427365890","Type":"PullRequestEvent","CreatedAt":"2018-03-23T19:37:26","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/pull/2213","RelatedDescription":"Closed pull request \"Register missed directives in RazorPageGenerator\" (#2213) at aspnet/Razor","RelatedBody":""},{"Id":"7427353485","Type":"PullRequestEvent","CreatedAt":"2018-03-23T19:34:23","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2213","RelatedDescription":"Opened pull request \"Register missed directives in RazorPageGenerator\" (#2213) at aspnet/Razor","RelatedBody":""},{"Id":"7422928715","Type":"IssuesEvent","CreatedAt":"2018-03-23T02:12:29","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2205","RelatedDescription":"Closed issue \"Razor extension does not report the right version number in Help->About\" (#2205) at aspnet/Razor","RelatedBody":"![image](https://user-images.githubusercontent.com/1430011/37742327-6aadcb06-2d22-11e8-8d81-b4b482476aba.png)\r\n\r\n\r\nWe will likely need to do something like : https://github.com/dotnet/roslyn/blob/14aed138a01c448143b9acf0fe77a662e3dfe2f4/src/VisualStudio/Core/Def/Utilities/ProvideRoslynVersionRegistration.cs\r\n\r\nThe code that VS gives you out of the box only provides you the ability to pass a hardcoded version, and so that's what we've always done."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":119,"FavoriteCount":81,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":3,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 f… https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesd… https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":69,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Ra… https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2018-03-26T05:30:09.5017766Z","RunDurationInMilliseconds":8174}