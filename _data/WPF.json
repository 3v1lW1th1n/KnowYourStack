{"Data":{"GitHub":{"Issues":[{"Id":"476590123","IsPullRequest":false,"CreatedAt":"2019-08-04T21:07:08","Actor":"rogalmic","Number":"1531","RawContent":null,"Title":"Generate xml documentation files for public WPF api","State":"closed","Body":"Would there be a possibity to include autogenerated C# xml documentation in github releases?\r\n\r\n![image](https://user-images.githubusercontent.com/23117003/62428759-ac99f080-b705-11e9-9998-38c9dae160cc.png)\r\n\r\nIt would be good to have those for public part of WPF API...","Url":"https://github.com/dotnet/wpf/issues/1531","RelatedDescription":"Closed issue \"Generate xml documentation files for public WPF api\" (#1531)"},{"Id":"476554774","IsPullRequest":true,"CreatedAt":"2019-08-04T14:01:06","Actor":"dotnet-maestro[bot]","Number":"1530","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 1:01 PM\r\n- **Commit**: 75f26eb8c2f1ab43dd0b202c2c54023b38856eec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19404.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1530","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1530)"},{"Id":"476551303","IsPullRequest":true,"CreatedAt":"2019-08-04T13:53:18","Actor":"dotnet-maestro[bot]","Number":"1529","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190803.11\r\n- **Date Produced**: 8/3/2019 10:00 PM\r\n- **Commit**: 3148ef691f39dba670f9e4767f21abf31c40541c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview9.19403.11\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1529","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1529)"},{"Id":"476551237","IsPullRequest":true,"CreatedAt":"2019-08-04T13:42:33","Actor":"dotnet-maestro[bot]","Number":"1528","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190803.11\r\n- **Date Produced**: 8/3/2019 10:00 PM\r\n- **Commit**: 3148ef691f39dba670f9e4767f21abf31c40541c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview9.19403.11\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1528","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1528)"},{"Id":"476545897","IsPullRequest":true,"CreatedAt":"2019-08-04T13:09:25","Actor":"dotnet-maestro[bot]","Number":"1526","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1526","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1526)"},{"Id":"476545911","IsPullRequest":true,"CreatedAt":"2019-08-04T12:07:50","Actor":"dotnet-maestro[bot]","Number":"1527","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1527","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1527)"},{"Id":"476490422","IsPullRequest":true,"CreatedAt":"2019-08-03T21:20:09","Actor":"vatsan-madhavan","Number":"1525","RawContent":null,"Title":"Fix for #1198 - support for DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED","State":"open","Body":"Addresses #1198.\r\n\r\n#### [Watson] clr20r3: CLR_EXCEPTION_System.Collections.Generic.KeyNotFoundException_80131577_PresentationCore.dll!MS.Internal.DpiUtil+DpiAwarenessScope..ctor\r\n\r\nThis is a 2nd fix approach for this issue, which is a more complete fix IMO compared to https://github.com/dotnet/wpf/pull/1515. This PR must be paired with the PR to the renderer at https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/pullrequest/2498?_a=overview\r\n\r\n\r\n--\r\n\r\nWhen a caller passes in dpiAwarenessContextValue==Invalid, new DpiAwarenessContextHandle(dpiAwarenssContextValue) throws KeyNotFoundException.\r\n\r\nThis happens because we do not have a pre-created pseudo-HANDLE corresponding to Invalid in our internal map of pseudo-handles in DpiAwarenessContextHandle.WellKnownContextValues. Such a pseudo-handle cannot be created either.\r\n\r\nWhen dpiAwarenessContextValue=Invalid is passed, the correct behavior is to treat it as a no-op and simply return. The corresponding Dispose() will also run benignly and the caller will get the correct behavior - which is that no changes will be made to the thread-state.\r\n\r\n\r\n==\r\n\r\nIdeally, this problem should not have happened when only dealing with 'valid' or 'good' `DpiAwarenessCotnextValue` enums (or equivalently, 'good' `DpiAwarenessContextHandle` values).\r\n\r\n\"good\" has two meanings here.\r\n\r\ni. Values recognized by the OS that are valid (as the OS sees it)\r\nii. Values recognized by WP as valid (i.e.., WPF has enough intelligence available to process this mode).\r\n\r\nWPF only knows how to process the following 4 DPI_AWARENESS_CONTEXT_HANDLE values, which were available during active feature development of .NET 4.8.\r\n\r\n- DPI_AWARENESS_CONTEXT_UNAWARE\r\n- DPI_AWARENESS_CONTEXT_SYSTEM_AWARE\r\n- DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE\r\n- DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2\r\n\r\nIt looks like one more value was added in Win10 1809 later in the development cycle which WPF has no understanding of.\r\n\r\n- DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED\r\n\r\nIn [SystemResources.cs](https://github.com/dotnet/wpf/blob/ac9d1b7a6b0ee7c44fd2875a1174b820b3940619/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/SystemResources.cs#L1146), we query HWND's for their DPI related info like this:\r\n\r\n```\r\n    var hwndDpiInfo =\r\n        IsPerMonitorDpiScalingActive ?\r\n        DpiUtil.GetExtendedDpiInfoForWindow(hwndNotify.Handle):\r\n        new DpiUtil.HwndDpiInfo(dpiContextValue, GetDpiScaleForUnawareOrSystemAwareContext(dpiContextValue));\r\n```\r\n\r\n`DpiUtil.GetExtendedDpiInfoForWindow(hwndNotify.Handle)` eventually calls into `new HwndDpiInfo`, which in turn attempts to map `DpiAwarenessContextHandle` -> `DpiAwarenessCotnextValue`. This mapping (which is acheived by an overloaded cast operator)\r\nonly recognizes `DPI_AWARENESS_CONTEXT_HANDLE` values WPF understands. Anything outside of this set is considered `Invalid`.\r\n\r\nIâ€™m reasonably confident that this crash happens because we are getting an `HWND` with `DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED` or something else outside the recognized spectrum.","Url":"https://github.com/dotnet/wpf/pull/1525","RelatedDescription":"Open PR \"Fix for #1198 - support for DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED\" (#1525)"},{"Id":"476445538","IsPullRequest":true,"CreatedAt":"2019-08-03T19:17:43","Actor":"dotnet-maestro[bot]","Number":"1520","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1520","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1520)"},{"Id":"476445583","IsPullRequest":true,"CreatedAt":"2019-08-03T19:17:18","Actor":"dotnet-maestro[bot]","Number":"1521","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1521","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1521)"},{"Id":"476451991","IsPullRequest":true,"CreatedAt":"2019-08-03T13:56:09","Actor":"dotnet-maestro[bot]","Number":"1524","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 12:52 PM\r\n- **Commit**: 04dadb073abc4d8f5fe6319c6b50493dc48ebd8e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19403.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1524","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1524)"},{"Id":"476449768","IsPullRequest":true,"CreatedAt":"2019-08-03T13:50:56","Actor":"dotnet-maestro[bot]","Number":"1523","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190802.13\r\n- **Date Produced**: 8/3/2019 6:26 AM\r\n- **Commit**: ee8eb14bd1f10c5b3612be15fa23a23944eff76f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview9.19402.13\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1523","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1523)"},{"Id":"476449342","IsPullRequest":true,"CreatedAt":"2019-08-03T13:35:19","Actor":"dotnet-maestro[bot]","Number":"1522","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190802.13\r\n- **Date Produced**: 8/3/2019 6:26 AM\r\n- **Commit**: ee8eb14bd1f10c5b3612be15fa23a23944eff76f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview9.19402.13\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1522","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1522)"},{"Id":"476438558","IsPullRequest":false,"CreatedAt":"2019-08-03T10:27:47","Actor":"elyoh","Number":"1519","RawContent":null,"Title":"SpellerHighlightLayer uses hard coded spell check squiggle color","State":"open","Body":"The [spell check underline squiggle](https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Documents/SpellerHighlightLayer.cs#L153) uses a hard coded color.  This behaviour is undesirable as it can lead to accessibility problems for users with color vision deficiency and when using custom themes.\r\n\r\nFor example, when the red squiggle is displayed on a black background (if using the HC Black theme) [insufficient color contrast is predicted](https://accessibilityinsights.io/) for users with Red-Weak/Protanomaly (and Green-Weak/Deuteranomaly). \r\n\r\nOriginal view\r\n![Capture](https://user-images.githubusercontent.com/14054078/62410535-bd9c1200-b5de-11e9-9403-ec0c4f15931a.PNG)\r\n\r\n[Red-Weak/Protanomaly simulation](https://www.color-blindness.com/coblis-color-blindness-simulator/)\r\n![redweak](https://user-images.githubusercontent.com/14054078/62410538-c0970280-b5de-11e9-9fc4-27bed00d84ee.PNG)\r\n![redweakmax](https://user-images.githubusercontent.com/14054078/62410656-8b8baf80-b5e0-11e9-83bc-e100dd6b68f9.PNG)\r\n\r\nIdeally it would be possible to override this color from controls which support spell check.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1519","RelatedDescription":"Open issue \"SpellerHighlightLayer uses hard coded spell check squiggle color\" (#1519)"},{"Id":"476435240","IsPullRequest":false,"CreatedAt":"2019-08-03T09:43:49","Actor":"elyoh","Number":"1518","RawContent":null,"Title":"DocumentViewer uses hard coded page border and drop shadow colors","State":"open","Body":"[DocumentGridPage](https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/PresentationFramework/MS/Internal/documents/DocumentGridPage.cs) renders pages in the DocumentViewer.  If the ShowPageBorders property is true, a border and drop shadow are shown around the page.\r\n\r\n![documentgrid issue](https://user-images.githubusercontent.com/14054078/62410077-bffb6d80-b5d8-11e9-9dd4-1774b515a867.png)\r\n\r\nCurrently:\r\n- The page border and drop shadow use hard coded colors and sizes.\r\n- It is not possible to have a page border without a drop shadow.\r\n\r\nThese behaviors are undesirable when using custom themes.\r\n","Url":"https://github.com/dotnet/wpf/issues/1518","RelatedDescription":"Open issue \"DocumentViewer uses hard coded page border and drop shadow colors\" (#1518)"},{"Id":"476431638","IsPullRequest":false,"CreatedAt":"2019-08-03T08:58:00","Actor":"elyoh","Number":"1517","RawContent":null,"Title":"Highlight annotations and sticky note annotations on FlowDocument use hard coded colors","State":"open","Body":"When highlight annotations or sticky note annotations are made to a FlowDocument, the highlight (and anchor) use hard coded colors.  This behavior is undesirable as it can lead to accessibility problems when using custom themes.\r\n\r\n![sticky note annotation issue](https://user-images.githubusercontent.com/14054078/62409726-95f37c80-b5d3-11e9-8da0-828e6a0b17a3.PNG)\r\n\r\nThe sticky note highlight annotation uses hard coded colors defined here:\r\n\r\n[MarkedHighlightComponent.cs \r\n ](https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/PresentationFramework/MS/Internal/Annotations/Component/MarkedHighlightComponent.cs#L1143)\r\n```csharp\r\ninternal static Color DefaultAnchorBackground = (Color)ColorConverter.ConvertFromString(\"#3380FF80\");\r\ninternal static Color DefaultMarkerColor = (Color)ColorConverter.ConvertFromString(\"#FF008000\");\r\ninternal static Color DefaultActiveAnchorBackground = (Color)ColorConverter.ConvertFromString(\"#3300FF00\");\r\ninternal static Color DefaultActiveMarkerColor = (Color)ColorConverter.ConvertFromString(\"#FF008000\");\r\n```\r\nThe highlight annotation uses hard coded colors defined here:\r\n\r\n[HighlightComponent.cs](https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/PresentationFramework/MS/Internal/Annotations/Component/HighlightComponent.cs#L680)\r\n\r\n```csharp\r\nprivate Color _defaultBackroundColor = (Color)ColorConverter.ConvertFromString(\"#33FFFF00\");\r\nprivate Color _defaultActiveBackgroundColor = (Color)ColorConverter.ConvertFromString(\"#339ACD32\");\r\n```\r\n\r\nIt ought to be possible to set these colors from the controls which support annotations i.e. FlowDocumentReader and FlowDocumentScrollViewer which derive from DocumentViewerBase.\r\n\r\nCurrently the only way to alter the highlight color is to manually modify the AnnotationResource objects in the Annotation.Cargos each time an annotation is loaded or when the application or system theme changes.  The anchor colors can only be set via reflection.","Url":"https://github.com/dotnet/wpf/issues/1517","RelatedDescription":"Open issue \"Highlight annotations and sticky note annotations on FlowDocument use hard coded colors\" (#1517)"},{"Id":"476408739","IsPullRequest":true,"CreatedAt":"2019-08-03T03:16:02","Actor":"dotnet-maestro[bot]","Number":"1516","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190802.5\r\n- **Date Produced**: 8/3/2019 2:14 AM\r\n- **Commit**: 44b5076b843a67ab8497fe73c17576ef3e4dbd99\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19402.5\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1516","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1516)"},{"Id":"476390391","IsPullRequest":true,"CreatedAt":"2019-08-02T23:41:51","Actor":"vatsan-madhavan","Number":"1515","RawContent":null,"Title":"Fix for #1198 - fixes potential crashes in high-DPI applications","State":"open","Body":"Addresses #1198. \r\n\r\n#### [Watson] clr20r3: CLR_EXCEPTION_System.Collections.Generic.KeyNotFoundException_80131577_PresentationCore.dll!MS.Internal.DpiUtil+DpiAwarenessScope..ctor\r\n\r\n--\r\n\r\nWhen a caller passes in `dpiAwarenessContextValue==Invalid`, `new DpiAwarenessContextHandle(dpiAwarenssContextValue)` throws `KeyNotFoundException`.\r\n\r\nThis happens because we do not have a pre-created pseudo-_HANDLE_  corresponding to `Invalid` in our internal map of pseudo-handles in `DpiAwarenessContextHandle.WellKnownContextValues`. Such a pseudo-handle cannot be created either.\r\n\r\nWhen `dpiAwarenessContextValue=Invalid` is passed, the correct behavior is to treat it as a no-op and simply `return`. The corresponding `Dispose()` will also run benignly and the caller will get the correct behavior - which is that no changes will be made to the thread-state.","Url":"https://github.com/dotnet/wpf/pull/1515","RelatedDescription":"Open PR \"Fix for #1198 - fixes potential crashes in high-DPI applications\" (#1515)"},{"Id":"476361789","IsPullRequest":true,"CreatedAt":"2019-08-02T22:21:23","Actor":"dotnet-maestro[bot]","Number":"1514","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190802.4\r\n- **Date Produced**: 8/2/2019 8:44 PM\r\n- **Commit**: f9557ba65ed0b8232c058556c38b22a11b1dab00\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19402.4\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1514","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1514)"},{"Id":"476340600","IsPullRequest":true,"CreatedAt":"2019-08-02T20:17:58","Actor":"rladuca","Number":"1513","RawContent":null,"Title":"XPS: Use original font when subsetting would grow the font","State":"open","Body":"When a call to CreateDeltaTTF returns ERR_WOULD_GROW, ComputeSubset should not throw FileFormatException.  Instead, it should copy the original font into the result buffer and return that.\r\n\r\nThis is so a subsetting attempt that would increase the font size can succeed by using the original font, since that is sufficient to display the file and is more compact than the subsetting algorithm can achieve.\r\n\r\nAddresses #1511 ","Url":"https://github.com/dotnet/wpf/pull/1513","RelatedDescription":"Open PR \"XPS: Use original font when subsetting would grow the font\" (#1513)"},{"Id":"476315275","IsPullRequest":true,"CreatedAt":"2019-08-02T19:21:06","Actor":"dotnet-maestro[bot]","Number":"1512","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190802.2\r\n- **Date Produced**: 8/2/2019 6:20 PM\r\n- **Commit**: 95677fb3cac1a3f368d8d247ed1677764733adea\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19402.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1512","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1512)"},{"Id":"476310129","IsPullRequest":false,"CreatedAt":"2019-08-02T18:45:59","Actor":"rladuca","Number":"1511","RawContent":null,"Title":"XpsSerialization in presentationcore.dll throws System.IO.FileFormatException","State":"open","Body":"When working with XPS documents WPF will subset fonts in order to reduce their size during embedding.  In certain cases, this can result in the font growing during subsetting.\r\n\r\nThis results in us returning [ERR_WOULD_GROW](https://github.com/dotnet/wpf/blob/ae1790531c3b993b56eba8b1f0dd395a3ed7de75/src/Microsoft.DotNet.Wpf/src/DirectWriteForwarder/CPP/TrueTypeSubsetter/TtfDelta/ttferror.h):\r\nhttps://github.com/dotnet/wpf/blob/e4a212b4fd7d3bb6bce7d88cf6f0471a9fc8e6f4/src/Microsoft.DotNet.Wpf/src/DirectWriteForwarder/CPP/TrueTypeSubsetter/TtfDelta/ttfdelta.cpp#L920\r\n\r\nWe already know what to do in this case (as the comments in the code above suggest), use the original font.  However, we seem to be ignoring that:\r\n\r\nhttps://github.com/dotnet/wpf/blob/70da708a5cb79eaccda5e924687c827393e144ba/src/Microsoft.DotNet.Wpf/src/DirectWriteForwarder/CPP/TrueTypeSubsetter/truetype.cpp#L105-L106\r\n\r\nThe fix is pretty straightforward, simply copy the font into the result buffer when we detect `ERR_WOULD_GROW` and return as usual.\r\n","Url":"https://github.com/dotnet/wpf/issues/1511","RelatedDescription":"Open issue \"XpsSerialization in presentationcore.dll throws System.IO.FileFormatException\" (#1511)"},{"Id":"476285179","IsPullRequest":false,"CreatedAt":"2019-08-02T17:34:47","Actor":"rladuca","Number":"1510","RawContent":null,"Title":"[DRT] Fix DrtFlow failures","State":"open","Body":"DrtFlow()\r\nOS: 2k8R2\r\nLog Link: See Test Results Emails","Url":"https://github.com/dotnet/wpf/issues/1510","RelatedDescription":"Open issue \"[DRT] Fix DrtFlow failures\" (#1510)"},{"Id":"476270366","IsPullRequest":false,"CreatedAt":"2019-08-02T16:52:07","Actor":"Safirion","Number":"1509","RawContent":null,"Title":"ProgressBar Indeterminate has a high CPU usage (even when collapsed)","State":"open","Body":"* .NET Core Version:  3.0 Preview7\r\n* Windows version: Certainly all but tested on Windows Server 2016 and Windows 10 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n \r\n **Problem description:**\r\n \r\nProgress bar with IsIndeterminate=true has a high CPU usage when collapsed.\r\n\r\n![image](https://user-images.githubusercontent.com/11511729/62385464-76b60a00-b555-11e9-997c-7c15e481d845.png)\r\n\r\nAs we can see, I have ~10-15% of CPU usage for a ProgressBar in collapsed stackpanel (and up to 50% of CPU usage on VM with only 2 vcpu).  I notice that every time I paused the process, the main thread is on \"WindowsBase.dll!MS.Win32.UnsafeNativeMethods.GetMessageW\"\r\n\r\nMy current workaround for this situation is when I collapse my StackPanel, I set also the IsIndeterminate property of my progressbar to false.\r\n\r\n **Actual behavior:** \r\nProgressBar indeterminate has high usage of CPU when collapsed.\r\n \r\n **Expected behavior:**\r\n ProgressBar indeterminate has no impact on CPU when collapsed.\r\n\r\nObviously, the best scenario should be that indeterminate progress bar has no impact on CPU even when visible... But animation has a cost, I know that...\r\n\r\n **Minimal repro:**\r\n```\r\n<StackPanel x:Name=\"LoadingPanel\">\r\n          <ProgressBar IsIndeterminate=\"True\" />\r\n</StackPanel>\r\n```\r\n\r\nDisplay LoadingPanel in a Window and collapse LoadingPanel. \r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1509","RelatedDescription":"Open issue \"ProgressBar Indeterminate has a high CPU usage (even when collapsed)\" (#1509)"},{"Id":"476254678","IsPullRequest":false,"CreatedAt":"2019-08-02T16:09:59","Actor":"grubioe","Number":"1508","RawContent":null,"Title":"Japanese kanji characters are not rendered correctly on WPF applications after applied KB4482887.","State":"open","Body":"Copied from OSG AzDO ID:  [22130413](https://microsoft.visualstudio.com/OS/_workitems/edit/22130413)\r\n\r\nWindows Versions affected: Windows 10 RS5, 19H1\r\n\r\n**Issue:** \r\nJapanese kanji characters are not rendered correctly on WPF applications after applied KB4482887.   Some horizontal lines of kanji characters will disappear.\r\nIt is hard to read and recognize what character is displayed.\r\n\r\n**Before KB 4482887**\r\n![image](https://user-images.githubusercontent.com/49078227/62383425-98d36c00-b504-11e9-8e5f-92fdb4c00556.png)\r\n\r\n**After KB 4482887**\r\n![image](https://user-images.githubusercontent.com/49078227/62383467-b43e7700-b504-11e9-84fb-45548ca1b87b.png)\r\n\r\n\r\nRepro Steps:\r\n\r\n1.  Install KB442887\r\n\r\n2.  Launch WPF application\r\n\r\n[20190417_WpfSample.zip](https://github.com/dotnet/wpf/files/3462088/20190417_WpfSample.zip)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1508","RelatedDescription":"Open issue \"Japanese kanji characters are not rendered correctly on WPF applications after applied KB4482887.\" (#1508)"},{"Id":"475984414","IsPullRequest":false,"CreatedAt":"2019-08-02T15:08:29","Actor":"skanvk15","Number":"1503","RawContent":null,"Title":"System.Windows.Forms.FolderBrowserDialog no longer compiles in WPF app","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n  Microsoft.NETCore.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n* Windows version: (`winver`)\r\nWindows 10\r\n\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\nN/A\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nI used to be able to use the Win Forms folder dialog in .NET Core 3.0 Preview version WPF app, like this:\r\n`System.Windows.Forms.FolderBrowserDialog folderBrowserDialog;`\r\nBut with latest .NET Core 3.0 Preview version I get compiler error.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n I get this compiler error:\r\nerror CS0234: The type or namespace name 'Forms' does not exist in the namespace 'System.Windows' (are you missing an assembly reference?)\r\n\r\n **Expected behavior:**\r\nNo error\r\n \r\n **Minimal repro:**\r\n Create new .NET Core WPF app and update MainWindow constructor like this:\r\n`public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            System.Windows.Forms.FolderBrowserDialog folderBrowserDialog;\r\n        }`\r\n","Url":"https://github.com/dotnet/wpf/issues/1503","RelatedDescription":"Closed issue \"System.Windows.Forms.FolderBrowserDialog no longer compiles in WPF app\" (#1503)"},{"Id":"476174427","IsPullRequest":true,"CreatedAt":"2019-08-02T13:36:06","Actor":"dotnet-maestro[bot]","Number":"1507","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190802.1\r\n- **Date Produced**: 8/2/2019 1:06 PM\r\n- **Commit**: 8437748b9bad0f8311218afb0f040dfaf8fdd737\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19402.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1507","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1507)"},{"Id":"476166708","IsPullRequest":true,"CreatedAt":"2019-08-02T13:22:54","Actor":"dotnet-maestro[bot]","Number":"1506","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190801.17\r\n- **Date Produced**: 8/2/2019 12:03 AM\r\n- **Commit**: 7bc5f66791539efacf8ed5952c720ba88a5f1948\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview9.19401.17\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1506","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1506)"},{"Id":"476165783","IsPullRequest":false,"CreatedAt":"2019-08-02T12:55:24","Actor":"xhanb","Number":"1505","RawContent":null,"Title":"Add  value to collection of type  'System.Windows.Controls.UIElementCollection' threw an exception","State":"open","Body":"* .NET Core Version: Preview7\r\n* Windows version: Windows Server 2012 R2\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nMy project is based on NET Core Preview7 and and references Mahapps.Metro nuget packge.\r\nWhen I run it on Windows Server 2012 R2, it crashes immediately and throw the exception like title.\r\nbut running normally on Win10.\r\n\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n application  crash  and  throw an exception\r\n **Expected behavior:**\r\n running normally.\r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1505","RelatedDescription":"Open issue \"Add  value to collection of type  'System.Windows.Controls.UIElementCollection' threw an exception\" (#1505)"},{"Id":"476147510","IsPullRequest":true,"CreatedAt":"2019-08-02T12:53:31","Actor":"dotnet-maestro[bot]","Number":"1504","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190801.23\r\n- **Date Produced**: 8/2/2019 6:58 AM\r\n- **Commit**: 941d6497356e00ea6b2bc35a22a67f4ecf988fd6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19401.23\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1504","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1504)"},{"Id":"475923393","IsPullRequest":true,"CreatedAt":"2019-08-01T22:56:45","Actor":"ojhad","Number":"1502","RawContent":null,"Title":"Removed HandleTwoWayBindingToPropertyWithNonPublicSetter compat flag","State":"open","Body":"Issue number: #1379 \r\n\r\nTwo-way binding to properties with non-public setters was being allowed because we took on behavior that was caused by a bug in .NET Framework 4.5. Back then, a compatibility flag was introduced due to this 4.5 bug. We no longer want to support this scenario because we want correct behavior in .NET Core and we want the behavior to be on parity with net472/8. So there is no longer need for the compat flag.\r\n\r\nRan a full DRT pass against this change and it was successful.","Url":"https://github.com/dotnet/wpf/pull/1502","RelatedDescription":"Open PR \"Removed HandleTwoWayBindingToPropertyWithNonPublicSetter compat flag\" (#1502)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-08-05T05:30:51.8899856Z","RunDurationInMilliseconds":721}