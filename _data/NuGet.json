{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It‚Äôs been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11561559355","Type":"PullRequestEvent","CreatedAt":"2020-02-19T23:39:47","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7000","RelatedDescription":"Closed pull request \"[PROPOSAL] Tool to determine if a .nupkg has valid Microsoft metadata\" (#7000) at NuGet/NuGetGallery","RelatedBody":"This is minimal effort to make a tool that will allow teams to check the metadata of their package before pushing it to nuget.org. This is optional but will help teams catch metadata problems before shipping.\r\n\r\nWe can formalize the tool later, perhaps with `nuget.exe verify` and some kind of rules abstraction. But this is the cheap first step.\r\n\r\nIt's a old style tools package and requires .NET Framework 4.6.2. The .exe is here inside the package:\r\n\r\n```\r\ntools\\NuGet.VerifyMicrosoftPackage.exe\r\n```\r\n\r\nIn other words, it can be used like `NuGet.CommandLine` or `xunit.runner.console` where the user just hard codes the path inside the package of where the .exe is.\r\n\r\nTeams with non-standard rules can specify a path to their custom rule set using `--rule-set`. We can communicate in a doc what owners have non-standard rule sets and what they are. There are 4 non-standard 4 rule sets in the PROD DB today.\r\n\r\nWe should also document that this does not cover author signature verification. This can easily be done with `nuget.exe verify -Signatures -CertificateFingerprint`.\r\n\r\n## Open Questions\r\n\r\n- How to know if the rules compiled into the tool are out of date?\r\n   - We would release a new package to nuget.org after every master merge. Customers would just take latest package version\r\n- Wouldn't a verify endpoint be easier? üê± \r\n\r\n## Example output - invalid\r\n\r\nExit code is 1 (the number of bad packages).\r\n\r\n```\r\nUsing the following package path argument:\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\5fda8093-4158-463b-b41e-de3e3b1fa2a1\\inner\\testA.nupkg\r\n\r\nINVALID.\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\5fda8093-4158-463b-b41e-de3e3b1fa2a1\\inner\\testA.nupkg\r\nThe package TestPackage-65ed825e-dd81-4964-9599-f6a28d67171d 1.0.0 is not compliant.\r\nThere is 1 problem.\r\n  - The package metadata defines 'Not Microsoft' as one of the authors which is not allowed by policy.\r\n\r\nValid package count: 0\r\nInvalid package count: 1\r\n\r\nThe metadata validation used the following property names and JSON ruleset.\r\n\r\nReadable .NET Name      | JSON Name\r\n----------------------- | ----------\r\nAllowedAuthors          | authors\r\nAllowedCopyrightNotices | copy\r\nErrorMessageFormat      | error\r\nIsLicenseUrlRequired    | licUrlReq\r\nIsProjectUrlRequired    | projUrlReq\r\nRequiredCoOwnerUsername | u\r\n\r\nIf question marks ('?') or weird characters appear below, consider using --write-default-rule-set.\r\n\r\n{\r\n  \"u\": \"Microsoft\",\r\n  \"copy\": [\r\n    \"(c) Microsoft Corporation. All rights reserved.\",\r\n    \"&#169; Microsoft Corporation. All rights reserved.\",\r\n    \"¬© Microsoft Corporation. All rights reserved.\",\r\n    \"¬© Microsoft Corporation. T√ºm haklarƒ± saklƒ±dƒ±r.\",\r\n    \"¬© Microsoft Corporation. Todos os direitos reservados.\",\r\n    \"¬© Microsoft Corporation. Alle Rechte vorbehalten.\",\r\n    \"¬© Microsoft Corporation. V≈°echna pr√°va vyhrazena.\",\r\n    \"¬© Microsoft Corporation. Todos los derechos reservados.\",\r\n    \"¬© Microsoft Corporation. Wszelkie prawa zastrze≈ºone.\",\r\n    \"¬© Microsoft Corporation. Tous droits r√©serv√©s.\",\r\n    \"¬© Microsoft Corporation„ÄÇ ‰øùÁïôÊâÄÊúâÊùÉÂà©„ÄÇ\",\r\n    \"¬© Microsoft Corporation. Tutti i diritti riservati.\",\r\n    \"¬© –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è –ú–∞–π–∫—Ä–æ—Å–æ—Ñ—Ç. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.\",\r\n    \"¬© Microsoft Corporation„ÄÇ Ëëó‰ΩúÊ¨äÊâÄÊúâÔºå‰∏¶‰øùÁïô‰∏ÄÂàáÊ¨äÂà©„ÄÇ\"\r\n  ],\r\n  \"authors\": [\r\n    \"Microsoft\"\r\n  ],\r\n  \"licUrlReq\": true,\r\n  \"projUrlReq\": true,\r\n  \"error\": \"The package is not compliant with metadata requirements for Microsoft packages on NuGet.org. Go to https://aka.ms/Microsoft-NuGet-Compliance for more information.\\r\\nPolicy violations: {0}\"\r\n}\r\n```\r\n\r\n## Example output - all valid\r\n\r\nExit code is 0.\r\n\r\n```\r\nUsing the following package path argument:\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\e5b7857c-2e25-42e2-9875-bc4eb26fcd94\\inner\\testA.nupkg\r\n\r\nVALID.\r\nC:\\Users\\jver\\AppData\\Local\\Temp\\NuGetTestFolder\\e5b7857c-2e25-42e2-9875-bc4eb26fcd94\\inner\\testA.nupkg\r\nThe package TestPackage-9be3d65e-7aa0-40e5-9cdb-6f5dc2fd8318 1.0.0 is compliant.\r\n\r\nValid package count: 1\r\nInvalid package count: 0\r\n```\r\n\r\n## Help text\r\n\r\nExit code is -1.\r\n\r\n```\r\nNuGet.VerifyMicrosoftPackage 0.0.1-jver-verify\r\n\r\nUsage: NuGet.VerifyMicrosoftPackage [arguments] [options]\r\n\r\nArguments:\r\n  PATHS  One or more file paths to a package (.nupkg).\r\n\r\nOptions:\r\n  -v | --version            Show version information.\r\n  -? | -h | --help          Show help information.\r\n  --recursive               Evaluate wildcards recursively into child directories.\r\n  --rule-set                A path to a JSON rule set file. See the default below.\r\n  --write-default-rule-set  Write the default rule set to the provided --rule-set file path.\r\n\r\nThis tool determines if a .nupkg meets the metadata requirements for Microsoft packages\r\non nuget.org. Relative paths and wildcards in the file name are supported. Globbing and\r\nwildcards in the directory are not supported.\r\n\r\nThe default rule set used for validation is the following:\r\n\r\nReadable .NET Name      | JSON Name\r\n----------------------- | ----------\r\nAllowedAuthors          | authors\r\nAllowedCopyrightNotices | copy\r\nErrorMessageFormat      | error\r\nIsLicenseUrlRequired    | licUrlReq\r\nIsProjectUrlRequired    | projUrlReq\r\nRequiredCoOwnerUsername | u\r\n\r\nIf question marks ('?') or weird characters appear below, consider using --write-default-rule-set.\r\n\r\n{\r\n  \"u\": \"Microsoft\",\r\n  \"copy\": [\r\n    \"(c) Microsoft Corporation. All rights reserved.\",\r\n    \"&#169; Microsoft Corporation. All rights reserved.\",\r\n    \"¬© Microsoft Corporation. All rights reserved.\",\r\n    \"¬© Microsoft Corporation. T√ºm haklarƒ± saklƒ±dƒ±r.\",\r\n    \"¬© Microsoft Corporation. Todos os direitos reservados.\",\r\n    \"¬© Microsoft Corporation. Alle Rechte vorbehalten.\",\r\n    \"¬© Microsoft Corporation. V≈°echna pr√°va vyhrazena.\",\r\n    \"¬© Microsoft Corporation. Todos los derechos reservados.\",\r\n    \"¬© Microsoft Corporation. Wszelkie prawa zastrze≈ºone.\",\r\n    \"¬© Microsoft Corporation. Tous droits r√©serv√©s.\",\r\n    \"¬© Microsoft Corporation„ÄÇ ‰øùÁïôÊâÄÊúâÊùÉÂà©„ÄÇ\",\r\n    \"¬© Microsoft Corporation. Tutti i diritti riservati.\",\r\n    \"¬© –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è –ú–∞–π–∫—Ä–æ—Å–æ—Ñ—Ç. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.\",\r\n    \"¬© Microsoft Corporation„ÄÇ Ëëó‰ΩúÊ¨äÊâÄÊúâÔºå‰∏¶‰øùÁïô‰∏ÄÂàáÊ¨äÂà©„ÄÇ\"\r\n  ],\r\n  \"authors\": [\r\n    \"Microsoft\"\r\n  ],\r\n  \"licUrlReq\": true,\r\n  \"projUrlReq\": true,\r\n  \"error\": \"The package is not compliant with metadata requirements for Microsoft packages on NuGet.org. Go to https://aka.ms/Microsoft-NuGet-Compliance for more information.\\r\\nPolicy violations: {0}\"\r\n}\r\n```\r\n"},{"Id":"11561516348","Type":"IssuesEvent","CreatedAt":"2020-02-19T23:32:18","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7844","RelatedDescription":"Closed issue \"Incorrect error message when PDB does not match DLL\" (#7844) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\nA user wants to update their .snupkg associated with an already pushed package:\r\nhttps://www.nuget.org/packages/tusdotnet/2.2.2\r\n\r\nThere is an existing .snupkg that was accepted but subsequent attempts fail with this error:\r\n\r\n> The uploaded symbols package contains one or more pdbs that are not portable.\r\n\r\nHowever upon closer investigation, the failure is not because the PDBs are portable but because the PEReader saw that the PDB and DLL do not match.\r\n\r\nI think the error is here:\r\nhttps://github.com/NuGet/NuGet.Jobs/blob/dbd927c309005b63b82c1017ff6bfcfec96434cf/src/Validation.Symbols/SymbolsValidatorService.cs#L251\r\n\r\nThis should use the error message `ValidationIssue.SymbolErrorCode_MatchingAssemblyNotFound`.\r\n\r\n### To Reproduce\r\n\r\nUpload a snupkg with a portable PDB that matches in name but does not match according to `PEReader.TryOpenAssociatedPortablePdb`.\r\n\r\n### Expected behavior\r\n\r\nThe validation should fail with a more helpful error message.\r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/94054/74369714-b2465200-4d8a-11ea-8bed-bffec4118b73.png)\r\n\r\n\r\n### Additional context\r\nAdd any other context about the problem here."},{"Id":"11548731683","Type":"IssuesEvent","CreatedAt":"2020-02-18T19:00:23","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7848","RelatedDescription":"Closed issue \"Can't publish symbols because name collision on nuget.org\" (#7848) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI can no longer publish symbols on nuget.smbsrc.net because someone published (and later delisted) a package with the same name.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Download MSI nupkg from https://dev.azure.com/heaths/public/_build/results?buildId=210&view=artifacts&type=publishedArtifacts\r\n2. Regenerate my key (it had expired), copy it, and try to publish to wither www.nuget.org (either package or symbol package) or nuget.smbsrc.net (symbol package).\r\n\r\n### Expected behavior\r\nI can publish the symbol package.\r\n\r\n### Actual behavior\r\nI get an HTTP 403 error. Seems someone published https://www.nuget.org/packages/msi, which is the name of my package for powershellgallery.com. I've been publishing symbols this way for a while, but no longer can because of a name collision on nuget.org. There was never a need to publish the package to nuget.org (it's a PowerShell module). Seems authentication and authorization shouldn't necessarily be tied together. Is there some other way?\r\n\r\nI can't seem to log into www.symbolsource.org anymore either. I can't remember account information (it's been a long time since I logged in), but http://www.symbolsource.org/Public/Account/SendPasswordMail says it requires a secure connection, but www.symbolsource.org doesn't respond via HTTPS.\r\n\r\n### Additional context\r\nAdd any other context about the problem here.\r\n\r\nLink to MSI package on PowerShell Gallery: https://www.powershellgallery.com/packages/MSI"},{"Id":"11548268252","Type":"IssuesEvent","CreatedAt":"2020-02-18T18:04:50","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7849","RelatedDescription":"Opened issue \"[2020-02-18] Deployment\" (#7849) at NuGet/NuGetGallery","RelatedBody":"### Azure Search Service\r\n\r\nChanges:\r\n- Use managed identity for KeyVault access: https://github.com/NuGet/Engineering/issues/2972\r\n\r\nRelease: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=579684\r\n\r\n- [ ] DEV\r\n- [ ] INT\r\n- [ ] PROD\r\n\r\n### CDNRedirect service\r\n\r\nChanges:\r\n- Use KeyVault integrated certificate: https://github.com/NuGet/Engineering/issues/2995\r\n\r\nRelease: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=580913\r\n\r\n- [x] DEV\r\n- [ ] PROD\r\n\r\n### Licenses service\r\n\r\nChanges:\r\n- Use KeyVault integrated certificate: https://github.com/NuGet/Engineering/issues/2995\r\n\r\nRelease: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=580910\r\n\r\n- [x] DEV\r\n- [ ] PROD"},{"Id":"11532462620","Type":"IssuesEvent","CreatedAt":"2020-02-17T05:19:19","Actor":"heaths","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7848","RelatedDescription":"Opened issue \"Can't publish symbols because name collision on nuget.org\" (#7848) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI can no longer publish symbols on nuget.smbsrc.net because someone published (and later delisted) a package with the same name.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Download MSI nupkg from https://dev.azure.com/heaths/public/_build/results?buildId=210&view=artifacts&type=publishedArtifacts\r\n2. Regenerate my key (it had expired), copy it, and try to publish to wither www.nuget.org (either package or symbol package) or nuget.smbsrc.net (symbol package).\r\n\r\n### Expected behavior\r\nI can publish the symbol package.\r\n\r\n### Actual behavior\r\nI get an HTTP 403 error. Seems someone published https://www.nuget.org/packages/msi, which is the name of my package for powershellgallery.com. I've been publishing symbols this way for a while, but no longer can because of a name collision on nuget.org. There was never a need to publish the package to nuget.org (it's a PowerShell module). Seems authentication and authorization shouldn't necessarily be tied together. Is there some other way?\r\n\r\n### Additional context\r\nAdd any other context about the problem here."},{"Id":"11527333541","Type":"IssuesEvent","CreatedAt":"2020-02-15T21:02:12","Actor":"robertmuehsig","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7847","RelatedDescription":"Opened issue \"Accessibility: Color-Contrast too low on package page\" (#7847) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI played around with [Accessibility Insights](https://accessibilityinsights.io/) and tried it on NuGet.org. The site seems (at least from the \"Fast pass\") quite good regarding accessibility, but the color on the package page for the currently released package is too low.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. On this URL 'https://www.nuget.org/packages/Newtonsoft.Json/'\r\n2. Perform this operation 'FastPass with https://accessibilityinsights.io/'\r\n3. See error\r\n\r\n### Expected behavior\r\n\"Congratulations!\r\nNo failed automated checks were found.\"\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/756703/74595115-19d7f800-503e-11ea-8730-fb319a456680.png)\r\n\r\n### Additional context\r\nThe link color and the background color (this blue-ish color) are problematic. I'm not sure if this combination is used on other pages as well. I would guess that the best fix would be to change the background color of the \"bg-info\" class. \r\n\r\nI could try to find a color combination, but I guess there is not \"right\" or \"wrong\", but if you would like that I should try something just give me a comment here. :)"},{"Id":"11524077052","Type":"IssuesEvent","CreatedAt":"2020-02-14T23:11:34","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7657","RelatedDescription":"Closed issue \"[Epic] Improve search results for Visual Studio (VS) client\" (#7657) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11516030661","Type":"PullRequestEvent","CreatedAt":"2020-02-14T03:23:36","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7846","RelatedDescription":"Merged pull request \"Removed some hot path logs\" (#7846) at NuGet/NuGetGallery","RelatedBody":"This was logging *every* time a search service request was sent. This line alone produces 500k-1m log lines per hour and duplicates the `dependencies` logging that is populated automatically."},{"Id":"11515829266","Type":"PullRequestEvent","CreatedAt":"2020-02-14T02:37:00","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7846","RelatedDescription":"Opened pull request \"Removed some hot path logs\" (#7846) at NuGet/NuGetGallery","RelatedBody":"This was logging *every* time a search service request was sent. This line alone produces 500k-1m log lines per hour and duplicates the `dependencies` logging that is populated automatically."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11561338442","Type":"IssuesEvent","CreatedAt":"2020-02-19T23:03:12","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9157","RelatedDescription":"Closed issue \"Accessibility Fixes in PM UI\" (#9157) at NuGet/Home","RelatedBody":"## batch 3\r\n- [994456](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/994456) - PackageDetail - Tags - A11y_NuGetClient-MinorUIChanges_TestPackageDeprecationOther_ScreenReader : Narrator does not announces \"Blank\" for the blank field.\r\n- [994459](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/994459) - PackageDetail - A11y_NuGetClient-MinorUIChanges_TestPackage.Deprecation.Other_Installed_ScreenReader : Narrator is annoucing \"Dependencies\" for \"No Dependencies\" text.\r\n\r\n## batch 4\r\n- [994452](https://devdiv.visualstudio.com/DevDiv/_queries/edit/994452) - PackageItem - A11y_NuGetClient-MinorUIChanges_Browse_ScreenReader : Screen reader focus is not going on the  \"version and Package Description\" text.\r\n\r\n## batch 5\r\n-[1049215](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1049215) - PackageDetail -nuget.org link- A11y_VS ASP.NET and Web Development_ Install Nuget Packages _ Screen Reader: Narrator is not reading the link text for ‚Äúnuget.org‚Äù link\r\n-[994495](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/994495) - PackageDetail - LicenseUI - A11y_NuGetClient-MinorUIChanges_TestPackage.Deprecation.CriticalBugs.AlternatePackage_Installed_ScreenReader : Narrator is not announcing the label association for the \"MIT\" link."},{"Id":"11560155036","Type":"IssuesEvent","CreatedAt":"2020-02-19T20:33:08","Actor":"jabbera","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9195","RelatedDescription":"Opened issue \"Forced locked mode doesn't work cross platform\" (#9195) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nWhen running a dotnet restore --locked-mode from a linux environment where dotnet restore --force-evaluate was run on windows it fails. This makes things very difficult to test cross platform. (Build on a linux agent then run tests on windows)\r\n\r\nNuGet product used: dotnet.exe \r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\n```\r\n‚ùØ dotnet nuget --version\r\nNuGet Command Line\r\n5.4.0.2\r\n```\r\n\r\ndotnet.exe --version (if appropriate):\r\n```\r\n‚ùØ dotnet --version\r\n3.1.102\r\n```\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10 Enterprise: 10.0.18363 and Ubuntu 18..04 (WSL in my case, but repro's on build agents as well)\r\n\r\nWorked before? If so, with which NuGet version: Unknown\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. git clone https://github.com/jabbera/nuget-locked-mode-bug.git\r\n2. cd nuget-locked-mode-bug\r\n3. dotnet restore --locked-mode # This succeeds as it should \r\n4. bash\r\n5. dotnet restore --locked-mode # This fails with:error NU1004: The packages lock file is inconsistent with\r\n6. dotnet restore --force-evaluate\r\n7. exit\r\n8. git diff # This will let you see the differences between the OS's\r\n\r\n## Other suggested things\r\n\r\nOutput of the diff:\r\n```\r\ndiff --git a/packages.lock.json b/packages.lock.json\r\nindex 1d02123..d72a20f 100644\r\n--- a/packages.lock.json\r\n+++ b/packages.lock.json\r\n@@ -9,7 +9,6 @@\r\n         \"contentHash\": \"7D2TMufjGiowmt0E941kVoTIS+GTNzaPopuzM1/1LSaJAdJdBrVP0SkZW7AgDd0a2U1DjsIeaKG1wxGVBNLDMw==\"             }\r\n     },\r\n-    \".NETCoreApp,Version=v3.1/win7-x86\": {},\r\n     \".NETFramework,Version=v4.6.2\": {\r\n       \"Microsoft.NETFramework.ReferenceAssemblies\": {\r\n         \"type\": \"Direct\",\r\n@@ -25,7 +24,6 @@\r\n         \"resolved\": \"1.0.0\",\r\n         \"contentHash\": \"ONGjkFWduK13lfxUtlEl4+nYwrqDe5NF5f8qRtp5fqWiWYlqft/Ko9ht3e6Secg9y3I1yL8Xnfag/JGOOn0yoQ==\"             }\r\n-    },\r\n-    \".NETFramework,Version=v4.6.2/win7-x86\": {}\r\n+    }\r\n   }\r\n }\r\n\\ No newline at end of file\r\n```\r\n\r\n"},{"Id":"11559538207","Type":"IssuesEvent","CreatedAt":"2020-02-19T19:22:32","Actor":"lanfeust69","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9194","RelatedDescription":"Opened issue \"Incorrect implementation of NodeWarningProperties.IsSubsetOf\" (#9194) at NuGet/Home","RelatedBody":"At [this line](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Commands/RestoreCommand/Logging/TransitiveNoWarnUtils.cs#L862), there logically should be an `else return false;`.\r\n\r\nThe fix is somewhat breaking though : if a package reference transitively arrives twice, and on only one of the paths has a `NoWarn`, there should be a warning at the end (at least that's the purpose of the code), but this may not be the case due to the bug. So fixing the bug may make some warnings appear (or even errors if `TreatWarningsAsErrors` !).\r\n\r\nI found it in one case where *adding* a project-level `NoWarn` made the warning *appear* ! This was because the `IsSubsetOf` was then 'correctly) diagnosed as false due to the earlier call to `IsSubSetOfWithNullCheck`.\r\n\r\n"},{"Id":"11558950115","Type":"IssuesEvent","CreatedAt":"2020-02-19T18:17:30","Actor":"DrGriff","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9193","RelatedDescription":"Opened issue \"Clarification regarding Standard 2.0 vs 2.1 as NuGet\" (#9193) at NuGet/Home","RelatedBody":"We have multiple applications that are written in .NET 4.8 and a few that are written in .Net Core 3.1.\r\n\r\nWe currently have a private library of NuGet packages that we've written in .Net Standard 2.0 that are consumed by both the 4.8 and Core 3.1 applications.  However, we want to start to leverage .Net Standard 2.1 so that we can use nullables etc.\r\n\r\nSo if I were to set the TargetFrameworks to be \"netstandard2.0;netstandard2.1\" and package this up as a NuGet package, then what will happen the 4.8 and Core 3.1 apps try to consume it?  Will the 4.8 one use the Standard 2.0 flavour, and the Core 3.1 use the Standard 2.1 flavour, or both use the Standard 2.0?\r\n\r\nIs the the best approach for creating a NuGet package available in 2.0 and 2.1?"},{"Id":"11555579889","Type":"IssuesEvent","CreatedAt":"2020-02-19T12:13:13","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9192","RelatedDescription":"Opened issue \"[Test Failure] There is an error ‚ÄúThe calling thread cannot access this object because a different thread owns it‚Äù after installing/updating/uninstalling package in the PM UI\" (#9192) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: dev-donnie-msft-a11yPmuiTabs\\5.6.0.10272\r\nVS Version: Master\\29818.127\r\nOS: Windows-10-Enterprise-RS5\r\n## Detailed repro steps so we can see the same problem\r\n1. Launch VS and create a project [e.g. Console App (.NET Core)].\r\n2. Open the PM UI of the project or the solution.\r\n3. Install/Update/Uninstall a package in the PM UI.\r\n4. Observe the Error List window.\r\n## Expected\r\nThere is no error in the Error List window.\r\n## Actual\r\nThere is an error ‚ÄúThe calling thread cannot access this object because a different thread owns it‚Äù after installing/updating/uninstalling package in the PM UI as below screenshot.\r\n![image](https://user-images.githubusercontent.com/20632625/74833300-2ddc6c00-5354-11ea-8df1-04cc517b842f.png)\r\n\r\n## Note\r\n1.\tThe error will disappear after building the project/solution.\r\n2.\tThe operation of installing/updating/uninstalling package is successful even the error appears.\r\n\r\n\r\n"},{"Id":"11555201964","Type":"IssuesEvent","CreatedAt":"2020-02-19T11:26:34","Actor":"Lonli-Lokli","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9191","RelatedDescription":"Opened issue \"<Library>.runtimeconfig.json is not copied from lib to output\" (#9191) at NuGet/Home","RelatedBody":"## Details about Problem\r\nActual issue -only dotnet-swagger.dll is ocpied, dotnet-swagger.runtimeconfig.json is not copied as assets from nuget to output folder.\r\n\r\nIt's actually required to run dll with this file as well.\r\n\r\n[RuntimeConfigNugetIssue.zip](https://github.com/NuGet/Home/files/4224768/RuntimeConfigNugetIssue.zip)\r\n\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\ndotnet.exe\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\n\r\ndotnet.exe --version (if appropriate):\r\n3.1.101\r\n\r\nVS version (if appropriate):\r\nVS 16.4.3\r\nOS version (i.e. win10 v1607 (14393.321)):\r\nwin10 v1909\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Open solution and run rebuild\r\n...\r\n\r\n### Sample Project\r\n\r\nSample attached.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"},{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to‚Ä¶ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto‚Ä¶ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are‚Ä¶ https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-02-20T05:30:43.7547409Z","RunDurationInMilliseconds":1992}