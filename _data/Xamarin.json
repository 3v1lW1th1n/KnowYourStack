{"Data":{"Blog":{"FeedItems":[{"Title":"Running Xamarin.iOS Unit Tests in Visual Studio Team Services","PublishedOn":"2018-01-19T18:32:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In previous posts, we&#8217;ve discussed how to set up continuous integration for your Xamarin.iOS applications inside Visual Studio Team Services(VSTS) using the new Hosted macOS Agent. Building the...","Href":"https://blog.xamarin.com/running-xamarin-ios-unit-tests-visual-studio-team-services/","RawContent":null},{"Title":"The Xamarin Show: Getting Started with iOS Development in C#","PublishedOn":"2018-01-18T18:54:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you&#8217;re looking to get started with iOS development, there&#8217;s no better place to look than our amazing Xamarin.iOS documentation guides. They cover each and every topic that you can...","Href":"https://blog.xamarin.com/the-xamarin-show-getting-started-with-ios-development-in-c-sharp/","RawContent":null},{"Title":"The C# Developer’s Guide to Shipping Better Apps with Visual Studio App Center","PublishedOn":"2018-01-16T19:41:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At our annual Microsoft Connect event in November, we announced the General Availability of Visual Studio App Center, combining our best developer services, incuding Xamarin Test Cloud and HockeyApp,...","Href":"https://blog.xamarin.com/c-developers-guide-shipping-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Podcast: Android 8.1, Xamarin Device Manager, and Visual Studio versions 15.5 & 15.6","PublishedOn":"2018-01-12T20:59:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I cover Android 8.1, the new Xamarin Device Manager Preview, what&#8217;s new for mobile developers in Visual Studio versions 15.5/15.6,...","Href":"https://blog.xamarin.com/podcast-android-8-1-xamarin-device-manager-visual-studio-versions-15-5-15-6/","RawContent":null},{"Title":"Xamarin.Android Now Double Stuffed with Oreo 8.1","PublishedOn":"2018-01-11T19:55:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android Oreo 8.1 introduces new features, including Android Go, Neural Networks API, Autofill framework enhancements, SharedMemory API, and many more. We&#8217;re excited to announce Xamarin.Android...","Href":"https://blog.xamarin.com/xamarin-android-now-double-stuffed-with-oreo-8-1/","RawContent":null},{"Title":"Upcoming Webinar | Xamarin University Presents: Ship Better Apps with Visual Studio App Center","PublishedOn":"2018-01-11T14:55:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Join Mark Smith, Director of Xamarin University, on Thursday, January 25 at 9 am PT / 12 pm ET / 5 pm GMT to learn how to automate your app development pipeline with Visual Studio App Center. You’ll...","Href":"https://blog.xamarin.com/upcoming-webinar-xamarin-university-presents-ship-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Visual Studio 2017 Version 15.6 Preview Available Today!","PublishedOn":"2018-01-10T19:16:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last month, we released Visual Studio 2017 version 15.5, which came with awesome new features, including the iOS Remoted Simulator becoming available to all developers, live XAML previewing in Android...","Href":"https://blog.xamarin.com/visual-studio-2017-version-15-6-preview-available-today/","RawContent":null},{"Title":"Delivering Rich Media Experiences with the Xamarin.Forms Video Player","PublishedOn":"2018-01-09T18:42:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post from Adam Fisher. Adam is the founder of Octane Software, focused on the creation of consumer Internet products. You can find Adam on Twitter at @adamgfisher and on Github at...","Href":"https://blog.xamarin.com/delivering-rich-media-experiences-xamarin-forms-video-player/","RawContent":null},{"Title":"Colonial Life Drives Field Sales Productivity with .NET, Mobile, and DevOps","PublishedOn":"2018-01-05T19:59:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The .NET community is millions of developers strong, with people around the world turning ideas into apps across web, mobile, desktop, and the newest connected device platforms. Colonial Life’s...","Href":"https://blog.xamarin.com/colonial-life-drives-field-sales-productivity-net-mobile-devops/","RawContent":null},{"Title":"CoreML Programming with Xamarin.Mac and F#","PublishedOn":"2018-01-04T18:08:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Although Xamarin technologies are most commonly used to develop mobile applications, Xamarin.Mac makes it easy to use your preferred .NET language to develop desktop Mac apps. There are many C#...","Href":"https://blog.xamarin.com/coreml-programming-xamarin-mac-f/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7126678607","Type":"PullRequestEvent","CreatedAt":"2018-01-20T13:22:24","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1212","RelatedDescription":"Merged pull request \"Remove extra \"v\" from $(TargetFrameworkVersion) XA0105 warning\" (#1212) at xamarin/xamarin-android","RelatedBody":"Removes an additional \"v\" that was being included in a warning message when the `$(TargetFrameworkVersion)` is lower than what other assemblies expect in a `XA0105` warning.\r\n\r\nExample Warnings on 15.6:\r\n\r\n```\r\n2>C:\\Users\\dougl\\source\\repos\\App75\\App75\\App75.Android\\App75.Android.csproj : warning XA0105: The $(TargetFrameworkVersion) for FormsViewGroup.dll (vv8.0) is greater than the $(TargetFrameworkVersion) for your project (v7.1). You need to increase the $(TargetFrameworkVersion) for your project.\r\n\r\n2>C:\\Users\\dougl\\source\\repos\\App75\\App75\\App75.Android\\App75.Android.csproj : warning XA0105: The $(TargetFrameworkVersion) for Xamarin.Forms.Platform.Android.dll (vv8.0) is greater than the $(TargetFrameworkVersion) for your project (v7.1). You need to increase the $(TargetFrameworkVersion) for your project.\r\n\r\n2>C:\\Users\\dougl\\source\\repos\\App75\\App75\\App75.Android\\App75.Android.csproj : warning XA0105: The $(TargetFrameworkVersion) for Xamarin.Forms.Platform.dll (vv8.0) is greater than the $(TargetFrameworkVersion) for your project (v7.1). You need to increase the $(TargetFrameworkVersion) for your project.\r\n```"},{"Id":"7125702185","Type":"PullRequestEvent","CreatedAt":"2018-01-20T00:48:13","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1214","RelatedDescription":"Opened pull request \"[build] Cursory JDK 9 support\" (#1214) at xamarin/xamarin-android","RelatedBody":"We have a VSTS+macOS build machine which has JDK 9 as the default JDK,\r\nthus causing *all* xamarin-android builds to fail, as `gradlew` and\r\nJDK 9 don't *directly* mix:\r\n\r\n\tExecuting: ./gradlew assembleDebug --stacktrace\r\n\t...\r\n\torg.gradle.api.ProjectConfigurationException: A problem occurred configuring project ':library'.\r\n\t  ...\r\n\tCaused by: org.gradle.internal.event.ListenerNotificationException:\r\n\tFailed to notify project evaluation listener.\r\n\t  ...\r\n\tCaused by: java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlSchema\r\n\t  ...\r\n\tCaused by: java.lang.ClassNotFoundException: javax.xml.bind.annotation.XmlSchema\r\n\r\nWhen using JDK 9, `gradlew` fails because *something* within it\r\nattempts to use the deprecated type\r\n`javax.xml.bind.annotation.XmlSchema`, and JDK 9 doesn't provide\r\ndeprecated modules in the default `$CLASSPATH`.\r\n\r\nKnowing that the VSTS machine *also* has JDK 8 installed, we've tried\r\nto \"filter out\" JDK 9 so that it wouldn't be used; see e.g. a3c43584.\r\nUnfortunately that doesn't work, because on macOS the default JDK used\r\nis [always the JDK with the highest version number][macOS-jdk], and\r\nthis can't be easily changed system-wide because changing this\r\nbehavior requires \"removing\" a `Info.plist` file to prevent the JDK\r\nfrom being \"seen\" by `/usr/bin/java`:\r\n\r\n[macOS-jdk]: https://stackoverflow.com/a/44169445\r\n\r\n\t# Don't use JDK 9 by default on macOS:\r\n\t$ cd /Library/Java/JavaVirtualMachines/jdk-9.0.4.jdk/Contents\r\n\t$ mv Info.plist Info.plist.disabled\r\n\r\n(Renaming `Info.plist.disabled` to `Info.plist` will restore JDK 9 as\r\nthe default JDK on the machine.)\r\n\r\nA \"proper\" fix would presumably involve using and exporting\r\n`$JAVA_HOME` *everywhere*, which isn't currently the case.\r\n[This is something that *should* be explored.][xa-1213]\r\n\r\n[xa-1213]: https://github.com/xamarin/xamarin-android/issues/1213\r\n\r\nIn the meantime, a question: *Can* we build with JDK 9?\r\n*Is it even possible in the first place*?\r\n\r\nTurns out, *yes*, it *is* possible. The above `gradlew` error can be\r\nfixed by providing the (new-in-JDK9) `--add-modules` option, so that\r\nthe `java.xml.bind` module is accessible:\r\n\r\n\t$ ANDROID_HOME=... JAVA_OPTS=\"--add-modules java.xml.bind\" ./gradlew assembleDebug --stacktrace --no-daemon\r\n\t# ...works!\r\n\r\nUnfortunately, *other* parts xamarin-android get in the way, e.g. the\r\n`<ResolveSdks/>` task doesn't correctly parse the version number out\r\nof `java -version`, and JDK 9 `javac` requires `-source` and `-target`\r\nwhen `-bootclasspath` is used.\r\n\r\nUpdate the build system and tests so that things *can* be built under\r\nJDK 9.\r\n\r\n**Note**: This does ***NOT*** mean that building and/or using JDK 9\r\nwill be commercially supported in *any* way. (It might not even work!)"},{"Id":"7124794872","Type":"PullRequestEvent","CreatedAt":"2018-01-19T20:16:20","Actor":"JonDouglas","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1212","RelatedDescription":"Opened pull request \"Remove extra \"v\" from $(TargetFrameworkVersion) XA0105 warning\" (#1212) at xamarin/xamarin-android","RelatedBody":"Removes an additional \"v\" that was being included in a warning message when the `$(TargetFrameworkVersion)` is lower than other assemblies expect in a `XA0105` warning.\r\n\r\nExample Warnings on 15.6:\r\n\r\n```\r\n2>C:\\Users\\dougl\\source\\repos\\App75\\App75\\App75.Android\\App75.Android.csproj : warning XA0105: The $(TargetFrameworkVersion) for FormsViewGroup.dll (vv8.0) is greater than the $(TargetFrameworkVersion) for your project (v7.1). You need to increase the $(TargetFrameworkVersion) for your project.\r\n\r\n2>C:\\Users\\dougl\\source\\repos\\App75\\App75\\App75.Android\\App75.Android.csproj : warning XA0105: The $(TargetFrameworkVersion) for Xamarin.Forms.Platform.Android.dll (vv8.0) is greater than the $(TargetFrameworkVersion) for your project (v7.1). You need to increase the $(TargetFrameworkVersion) for your project.\r\n\r\n2>C:\\Users\\dougl\\source\\repos\\App75\\App75\\App75.Android\\App75.Android.csproj : warning XA0105: The $(TargetFrameworkVersion) for Xamarin.Forms.Platform.dll (vv8.0) is greater than the $(TargetFrameworkVersion) for your project (v7.1). You need to increase the $(TargetFrameworkVersion) for your project.\r\n```"},{"Id":"7124363389","Type":"PullRequestEvent","CreatedAt":"2018-01-19T18:35:54","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1210","RelatedDescription":"Merged pull request \"[scripts] Add illinkanalyzer script\" (#1210) at xamarin/xamarin-android","RelatedBody":"It executes our copy of linker analyzer tool, which is included in the\r\nruntime bundle."},{"Id":"7123774762","Type":"PullRequestEvent","CreatedAt":"2018-01-19T16:27:20","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1208","RelatedDescription":"Merged pull request \"[Tests] Make the HttpClientTest.TestEscapedURI test ignore timeout\" (#1208) at xamarin/xamarin-android","RelatedBody":"The server used in the test sometimes cannot be reached, there's no need to\r\ntreat it as a failure. Ignore the timeout with Assert.Ignore instead."},{"Id":"7123575664","Type":"PullRequestEvent","CreatedAt":"2018-01-19T15:50:52","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1211","RelatedDescription":"Opened pull request \"Bump to llvm/master/bdb3a116\" (#1211) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1182"},{"Id":"7123003727","Type":"PullRequestEvent","CreatedAt":"2018-01-19T14:02:05","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1210","RelatedDescription":"Opened pull request \"[scripts] Add illinkanalyzer script\" (#1210) at xamarin/xamarin-android","RelatedBody":"It executes our copy of linker analyzer tool, which is included in the\r\nruntime bundle."},{"Id":"7121387221","Type":"IssuesEvent","CreatedAt":"2018-01-19T07:28:48","Actor":"rob2212","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1209","RelatedDescription":"Opened issue \"WCF service integration does not work with Visual Studio 2017 15.5.4\" (#1209) at xamarin/xamarin-android","RelatedBody":"### Description\r\n\r\nWhen you create a new Xamarin Project in Visual Studio 2017 using .Net Standard libraries, the access to a WCF web service does no longer work. Even the example project by Xamarin does produce the same issue.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download the Xamarin example: https://developer.xamarin.com/guides/xamarin-forms/cloud-services/consuming/wcf/\r\n2. Build with Visual Studio 2017 15.5.4\r\n3. Run Android App on a real device\r\n\r\n### Expected Behavior\r\nMethod call to web service works (method: SoapService.RefreshDataAsync)\r\n\r\n### Actual Behavior\r\nException: The message with Action '' cannot be processed at the receiver, due to a ContractFilter mismatch at the EndpointDispatcher. This may be because of either a contract mismatch (mismatched Actions between sender and receiver) or a binding/security mismatch between the sender and the receiver.  Check that sender and receiver have the same contract and the same binding (including security requirements, e.g. Message, Transport, None).\r\n\r\n### Basic Information\r\n\r\n- IDE: Visual Studio 2017 15.5.4\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  Not tested\r\n  - Android: Android SDK 7.1\r\n  - UWP:  Not tested\r\n- Android Support Library Version: <!-- if applicable -->\r\n- Affected Devices: Samsung Galaxy Tab A (2016)\r\n\r\n"},{"Id":"7119175045","Type":"IssuesEvent","CreatedAt":"2018-01-18T19:56:13","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1186","RelatedDescription":"Closed issue \"MonoTests.System.Reflection.Emit.SaveTest.Save test fails in Release configuration with BCL linking on\" (#1186) at xamarin/xamarin-android","RelatedBody":"A test from the Mono BCL test suite ([MonoTests.System.Reflection.Emit.SaveTest.Save](https://github.com/mono/mono/blob/master/mcs/class/corlib/Test/System.Reflection.Emit/SaveTest.cs#L321)) fails when the tests are built in Release mode with linking set to SdkOnly.\r\nIt seems that the linker somehow changes the order of interfaces in emitted code since turning BCL linking off makes the test work again. The test also works fine in Debug configuration (with the linker off)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Comment out [this line](https://github.com/xamarin/xamarin-android/blob/master/tests/BCL-Tests/Xamarin.Android.Bcl-Tests/nunit-excluded-tests.txt#L7)\r\n2. Run `make CONFIGURATION=Release run-apk-tests` from the top Xamarin.Android dir\r\n3. Wait patiently\r\n4. Find the failure in the NUnit tests result file (`TestResult-Xamarin.Android.Bcl_Tests.nunit-Release.xml` in the top Xamarin.Android directory)\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nThe test should run fine with BCL linking on\r\n\r\n### Actual Behavior\r\nThe test fails when executed with BCL linking on\r\n\r\n### Version Information\r\nXamarin.Android/master (`c4e81655ac22b06806e732e9dd0bc729e8d2c1d7`)\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Test failure\r\n```\r\nMESSAGE:\r\n  Expected: <iface1>\r\n  But was:  <System.IComparable>\r\n\r\n  +++++++++++++++++++\r\n  STACK TRACE:\r\n  at MonoTests.System.Reflection.Emit.SaveTest.CheckAssembly (System.Reflection.Assembly a) [0x000a0] in <1e30aff9165c427db5bedc42c5906861>:0 \r\n  at MonoTests.System.Reflection.Emit.SaveTest.Save () [0x00b6d] in <1e30aff9165c427db5bedc42c5906861>:0 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <0a3e31ed05774b07957e0b91c5cab789>:0\r\n```\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7127964627","Type":"IssuesEvent","CreatedAt":"2018-01-21T05:12:07","Actor":"HazyFish","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1627","RelatedDescription":"Opened issue \"TabbedPage with NavigationPage doesn't behave well on UWP\" (#1627) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen placing a NavigationPage into a TabbedPage, I want to hide the Navigation Bar which appears at the top. However, setting the NavigationPage.HasNavigationBar property to false doesn't work on UWP.  \r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a Tabbed Page with a Navigation Page inside;\r\n2. Set the NavigationPage.HasNavigationBar to false for the NavigationPage;\r\n3. Run the UWP App;\r\n4. Click the Navigation Page tab;\r\n5. The navigation bar appears.\r\n\r\n### XAML Code\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<TabbedPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\r\n             xmlns:local=\"clr-namespace:TabbedPageWithNavigationPage\"\r\n             x:Class=\"TabbedPageWithNavigationPage.MainPage\">\r\n\r\n    <local:TodayPage Title=\"Today\"/>\r\n    <NavigationPage Title=\"Schedule\">\r\n        <x:Arguments>\r\n            <local:SchedulePage NavigationPage.HasNavigationBar=\"False\"/>\r\n        </x:Arguments>\r\n    </NavigationPage>\r\n\r\n</TabbedPage>\r\n```\r\n\r\n### Expected Behavior\r\nThe navigation bar should not show up at the top\r\n\r\n### Actual Behavior\r\nThe navigation bar shows up at the top\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms 2.5.0.122203\r\n- IDE: Visual Studio 2017 Version 15.5.4\r\n- Platform Target Frameworks: \r\n  - UWP:  Windows 10 FCU Build 16299\r\n\r\n### Screenshots\r\n\r\n<img width=\"652\" alt=\"1\" src=\"https://user-images.githubusercontent.com/28922700/35190953-951d610a-fea9-11e7-9b42-2312d2d91146.png\">\r\n<img width=\"652\" alt=\"2\" src=\"https://user-images.githubusercontent.com/28922700/35190998-af53e8e0-feaa-11e7-8c57-aa517af6bc77.png\">\r\n\r\n"},{"Id":"7127538095","Type":"IssuesEvent","CreatedAt":"2018-01-20T22:49:45","Actor":"Pinox","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1626","RelatedDescription":"Opened issue \"XF - System.Runtime.CompilerServices.Unsafe\" (#1626) at xamarin/Xamarin.Forms","RelatedBody":"Getting the following error on many of my projects when trying to upgrade to XF using .net Standard 2 (latest version of XF)\r\n\r\n\"Could not load assembly 'System.Runtime.CompilerServices.Unsafe' during startup registration.\"\r\n\r\nThe easiest way to check error is using stock standard XF Blank template and adding nuget Microsoft.EntityFrameworkCore 2.0.1.   Build and run the app on Oreo (Android 8) and the error will result.\r\n\r\nI'm also seeing the same error on other projects that do not use entity framework, is someone looking at this or is there some workaround that I'm not aware of."},{"Id":"7126634038","Type":"IssuesEvent","CreatedAt":"2018-01-20T12:50:15","Actor":"albru123","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1625","RelatedDescription":"Opened issue \"Slider value is not changed for the first position change\" (#1625) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nSlider value is not changed for the first time its position is changed and `ValueChanged` event is not fired either.\r\nI've been able to confirm this issue on Android. It did not appear on UWP, but I think it may be hidden there due to value rounding and slider position recalculation that is present on UWP. Untested on iOS.\r\nThis bug has been already reported to Bugzilla [here](https://bugzilla.xamarin.com/show_bug.cgi?id=54887) and the thread points out that it might be linked with commit e0165abbcd1329a3dfd353548f5d75eef0c792de. I decided to report this issue here, because it's an old regression which makes Slider component unusable in practice.\r\n### Steps to Reproduce\r\n\r\n1. Open test solution and run under Android\r\n2. Tap (click) anywhere on the slider\r\n3. You can see that the bound label text did not change\r\n\r\n### Expected Behavior\r\nCorrect value change according to slider position after first tap.\r\n### Actual Behavior\r\nValue does not change after first tap, but slider position does.\r\n### Basic Information\r\nOnly tested on Android (confirmed) and UWP, but should apply to all platforms, as it seems to be related to Xamarin.Forms source code.\r\n\r\n- Version with issue: 2.5.0.122203\r\n- Last known good version: Unknown\r\n- IDE:\r\n- Platform Target Frameworks:\r\n  - Android: 8.0\r\n  - UWP:  16299\r\n- Android Support Library Version: 25.4.0.2\r\n\r\n### Screenshots\r\n\r\n![qemu-system-i386_2018-01-20_13-44-52](https://user-images.githubusercontent.com/7580983/35183526-3621a0a6-fde8-11e7-9f42-dda4dafe61c4.png)\r\n\r\n### Reproduction Link\r\n\r\n[SliderTest.zip](https://github.com/xamarin/Xamarin.Forms/files/1648809/SliderTest.zip)\r\n\r\n"},{"Id":"7126100321","Type":"IssuesEvent","CreatedAt":"2018-01-20T05:38:48","Actor":"dansiegel","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1624","RelatedDescription":"Opened issue \"Add FromStream to StyleSheet\" (#1624) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nIt would be great if we had a  `FromStream` factory method added to the new StyleSheet. This would simplify adding a StyleSheet that we may be reading locally or downloading from the web. \r\n\r\n### Expected Behavior\r\n\r\n```cs\r\nusing(var client = new HttpClient())\r\n{\r\n    var stream = await client.GetStreamAsync(\"http://contoso.com/api/app/css\");\r\n    var styleSheet = StyleSheet.FromStream(stream);\r\n}\r\n```\r\n\r\n### Actual Behavior\r\n\r\n```cs\r\nusing(var client = new HttpClient())\r\n{\r\n    var stream = await client.GetStreamAsync(\"http://contoso.com/api/app/css\");\r\n    var styleSheet = StyleSheet.FromReader(new StreamReader(stream));\r\n}\r\n```\r\n\r\n### Basic Information\r\n\r\n- Version with issue: vNext\r\n"},{"Id":"7125511350","Type":"IssuesEvent","CreatedAt":"2018-01-19T23:29:03","Actor":"charlesroddie","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1623","RelatedDescription":"Opened issue \"[UWP] Xamarin.Forms.Device.StartTimer is inaccurate\" (#1623) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\n`Xamarin.Forms.Device.StartTimer(interval...)`, at least on UWP, is linked to screen refresh rate, takes longer than `interval` to fire, and has a minimum time to fire of 2 frames.\r\n\r\nThis obviously makes it unusable as a method for displaying smooth graphics, as in the suggested code [here](https://forums.xamarin.com/discussion/100569/how-to-animate-a-simple-smooth-rotation,) which requres updating once a frame.\r\n\r\nI have not tested on other Xamarin.Forms platforms.\r\n\r\n### Steps to Reproduce\r\nFSharp test code:\r\n```\r\nlet testTimer interval =\r\n    let mutable n = 0\r\n    let sw = Stopwatch();\r\n    do  sw.Start()\r\n    do  Xamarin.Forms.Device.StartTimer(TimeSpan.FromSeconds(interval), fun () ->\r\n            n <- n+1\r\n            let expectedElapsed = (float n) * interval\r\n            let trueElapsed = sw.Elapsed.TotalSeconds\r\n            if n % (max (int (1./interval)) 1) = 0 then\r\n                Debug.WriteLine(sprintf \"interval: %A true / expected: %A trueInterval: %A\" interval (trueElapsed/expectedElapsed) (trueElapsed/float n))\r\n            true)\r\ndo  [10.;1.;0.1;0.05;1./30.;1./40.;1./60.;1./120.;1./240.] |> List.iter testTimer\r\n```\r\n### Results:\r\n\r\non a 59fps screen\r\n\r\n| intended interval | actual/expected | actual interval |\r\n|--|--|--|\r\n|10 |1.002 | 10.02 |\r\n|1\t|\t1.017\t\t|1.017\r\n|0.1\t\t|1.17\t\t|0.117\r\n|0.05\t\t|1.34\t\t|0.067 (1 every 4 screen fps)\r\n|0.033..\t|\t1.51\t\t|0.050 (1 every 3 screen fps)\r\n|0.025\t|\t2.01\t\t|0.050 (1 every 3 screen fps)\r\n|0.0166..\t|3.01\t\t|0.050 (1 every 3 screen fps)\r\n|0.00833..\t|4.02\t\t|0.034 (1 every 2 screen fps)\r\n|0.004166..\t|8.05\t\t|0.034 (1 every 2 screen fps)\r\n\r\non a 30fps screen\r\n\r\n| intended interval | actual/expected | actual interval |\r\n|--|--|--|\r\n|10\t\t|1.006\t\t|10.06\r\n|1\t\t|1.066\t\t|1.066\r\n|0.1\t\t|1.68\t\t|0.168\r\n|0.05\t\t|2.01\t\t|0.10 (1 every 3 screen fps)\r\n|0.033..\t|\t2.01\t\t|0.067 (1 every 2 screen fps)\r\n|0.025\t\t|2.68\t\t|0.067 (1 every 2 screen fps)\r\n|0.0166..\t|4.03\t\t|0.067 (1 every 2 screen fps)\r\n|0.00833..\t|8.05\t\t|0.034 (1 every 2 screen fps)\r\n|0.004166..\t|16.09\t\t|0.067 (1 every 2 screen fps)\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin Forms 2.5.0.121934\r\n- Last known good version: -\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  untested\r\n  - Android: untested\r\n  - UWP:  16299"},{"Id":"7125234210","Type":"IssuesEvent","CreatedAt":"2018-01-19T22:04:41","Actor":"BioTurboNick","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1622","RelatedDescription":"Opened issue \"Adding sound resource to Android project leads to NullReferenceException on LoadApplication()\" (#1622) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nAdding sound resource to Android project as described in (ttps://developer.xamarin.com/recipes/android/media/audio/play_audio/) leads to NullReferenceException on LoadApplication().\r\n(unclear if it has to be a sound file, but that's what I was using)\r\n\r\n### Steps to Reproduce\r\n\r\n0. Make a new Xamarin Cross-platform project (.Net Standard, Forms, Android project only)\r\n1. Add a sound file (.m4a) to the \"raw\" directory under \"resources\" in the Android project\r\n2. Set the build action of the file to \"AndroidResource\" and let the code generator work\r\n3. Build and run the application.\r\n4. Crash with \"NullReferenceException\" in the LoadApplication line in MainActivity.\r\n5. Delete the sound file.\r\n6. Rebuild and run.\r\n7. No crash.\r\n\r\n### Expected Behavior\r\n\r\nApplication should build and run regardless of changes to the resources directory.\r\n\r\n### Actual Behavior\r\n\r\nApplication crashes in non-user code on launch.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.122203\r\n- Last known good version: Unknown, tried back through 2.4.x\r\n- IDE: Visual Studio 2017 15.5.4\r\n- Platform Target Frameworks: \r\n  - Android: 8.0\r\n- Android Support Library Version: 25.4.0.2\r\n- Nuget Packages: SQLite-net-pcl, Microsoft.AppCenter.Analytics, Microsoft.AppCenter.Crashes\r\n- Affected Devices: x86 API25 emulator\r\n\r\n### Reproduction Link\r\n\r\nCan if necessary. Should be simple to reproduce.\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7127449955","Type":"IssuesEvent","CreatedAt":"2018-01-20T21:48:18","Actor":"garie","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3274","RelatedDescription":"Opened issue \"EntryCell Text Binding fails when iOS Auto-corrects text when the EntryCell loses focus (clicking outside of Entry)\" (#3274) at xamarin/xamarin-macios","RelatedBody":"This may be the same or a related issue to [Bug 42096](https://bugzilla.xamarin.com/show_bug.cgi?id=42096).\r\n\r\n### Steps to Reproduce\r\n\r\n1. Make sure that Auto-Correction is enabled on the iOS device/sim in Settings -> General -> Keyboard. And if using a simulator, do not use the Hardware keyboard as you will not get auto-correction suggestions when using the Hardware Keyboard, so in the iOS Simulator app, deselect \"Connect Hardware Keyboard\" from the Hardware->Keyboard menu. \r\n2. Place your cursor inside of an `EntryCell` field and type `ar`\r\n3. Note the autocorrect suggestion is `at`\r\n4. Click another `EntryCell` field - do *not* click the autocorrect suggestion or press space to accept the suggestion\r\n5. Note that the field value now displays `at` instead of the misspelled `ar`\r\n6. Note that the console log (if using the example code below) shows the following:\r\n```\r\nFirstName: a\r\nFirstName: ar\r\n```\r\n7. Debug the app and note that the bound value of the field is the value that was typed rather than the value showing on the screen\r\n\r\n### Expected Behavior\r\n\r\nValues of bound EntryCells will reflect the autocorrected text\r\n\r\n### Actual Behavior\r\n\r\nAutocorrected text changes are not reflected in bound values of `EntryCell.Text`\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\nVisual Studio Community 2017 for Mac\r\nVersion 7.3.3 (build 5)\r\nInstallation UUID: 21da93c7-2ff8-4531-8366-737d10886905\r\nRuntime:\r\n\tMono 5.4.1.7 (2017-06/e66d9abbb27) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 504010007\r\n\r\nNuGet\r\nVersion: 4.3.1.4445\r\n\r\n.NET Core\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.0.0/Sdks\r\nSDK Version: 2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\nXamarin.Profiler\r\nVersion: 1.6.0\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\nApple Developer Tools\r\nXcode 9.2 (13772)\r\nBuild 9C40b\r\n\r\nXamarin.iOS\r\nVersion: 11.6.1.3 (Visual Studio Community)\r\nHash: f70a1348\r\nBranch: xcode9.2\r\nBuild date: 2017-12-18 14:47:16-0500\r\n\r\nXamarin.Android\r\nVersion: 8.1.3.0 (Visual Studio Community)\r\nAndroid SDK: /Users/christi/Library/Android/sdk\r\n\tSupported Android versions:\r\n\t\t6.0 (API level 23)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.0\r\nSDK Build Tools Version: 26.0.0\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_101\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_101-b13)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nXamarin Inspector\r\nVersion: 1.3.2\r\nHash: 461f09a\r\nBranch: 1.3-release\r\nBuild date: Tue, 03 Oct 2017 18:26:57 GMT\r\nClient compatibility: 1\r\n\r\nXamarin.Mac\r\nVersion: 4.0.0.215 (Visual Studio Community)\r\n\r\nBuild Information\r\nRelease ID: 703030005\r\nGit revision: b1c2982e201e71ef758866c9ade05f253a8c6f47\r\nBuild date: 2017-12-21 11:04:40-05\r\nXamarin addins: f397ddfbacfb39e60c9cc8d9e410f73faf8c2cbc\r\nBuild lane: monodevelop-lion-d15-5\r\n\r\nOperating System\r\nMac OS X 10.12.6\r\nDarwin 16.7.0 Darwin Kernel Version 16.7.0\r\n    Mon Nov 13 21:56:25 PST 2017\r\n    root:xnu-3789.72.11~1/RELEASE_X86_64 x86_64\r\n\r\nEnabled user installed addins\r\nInternet of Things (IoT) development (Preview) 7.1\r\n```\r\n\r\n### Example Code\r\n\r\nPartial .xaml\r\n```\r\n<TableView Intent=\"Form\" x:Name=\"DataEntryForm\">\r\n    <TableRoot>\r\n        <TableSection>\r\n            <EntryCell \r\n                x:Name=\"FirstNameField\"\r\n                Placeholder=\"First Name\" \r\n                Text=\"{Binding Contact.FirstName}\"/>\r\n            <EntryCell \r\n                Placeholder=\"Last Name\" \r\n                Text=\"{Binding Contact.LastName}\"/>\r\n        </TableSection>\r\n    </TableRoot>\r\n</TableView>\r\n```\r\n\r\nPartial binding class\r\n```\r\n        string _firstName = string.Empty;\r\n        public string FirstName\r\n        {\r\n            get { return _firstName; }\r\n            set { \r\n                Logger.Debug($\"FirstName: {value}\");\r\n                SetProperty(ref _firstName, value); \r\n            }\r\n        }\r\n```\r\n"},{"Id":"7127199645","Type":"PullRequestEvent","CreatedAt":"2018-01-20T19:00:02","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3266","RelatedDescription":"Merged pull request \"[foundation] Add NSBundle.GetLocalizedString returning an NSString. Fixes #41292\" (#3266) at xamarin/xamarin-macios","RelatedBody":"The original, now obsoleted, `LocalizedString` API returned a .net\n`string` which does not work in most cases.\n\nDifferent versions of iOS seems to return different (public or internal)\nsubclasses of `NSString` that are understood by other API (like NSString\n`localizedStringWithFormat:`) for further customization.\n\nOur logic to convert NSString to string is correct but it cannot\nrecreate the custom, required subclass to continue the localization.\n\nSo the new API return an `NSString` publicly (which is actually a\nsubclass) that can do the required job.\n\nAdding a test in monotouch-test is presently blocked by #3265 [2]\n\n[1] https://bugzilla.xamarin.com/show_bug.cgi?id=41292\n[2] https://github.com/xamarin/xamarin-macios/issues/3265"},{"Id":"7125496740","Type":"IssuesEvent","CreatedAt":"2018-01-19T23:23:45","Actor":"jamchengms","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3273","RelatedDescription":"Opened issue \"NavigationController.HidesBarsOnSwipe Causes Memory Leak\" (#3273) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Using Navigation Controller, navigate from one UIViewController A to another UIViewController B\r\n2. In UIViewController B, set NavigationController.HidesBarsOnSwipe = true\r\n3. In UIViewController B, set a breakpoint at DidReceiveMemoryWarning function.\r\n4. In UIViewController B, swipe down to hide the navigation control. Swipe up again to show the navigation control.\r\n5. Hit the back button (called Title in this case) so we are now in UIViewController A.\r\n6. In Simulator, under Debug, press \"Simulate Memory Warning\". \r\n7. Notice that UIViewController B's DidReceiveMemoryWarning is hit.\r\n\r\n### Expected Behavior\r\nDidReceiveMemoryWarning in UIViewController B is not triggered as the view controller is disposed.\r\n### Actual Behavior\r\nDidReceiveMemoryWarning in UIViewController B is triggered. This is an indication to us that there is memory leak as we have dispose UIViewController B already.\r\n[TestNavigationBarSwipe.zip](https://github.com/xamarin/xamarin-macios/files/1648216/TestNavigationBarSwipe.zip)\r\n\r\n\r\n### Environment\r\n\r\n### Build Logs\r\n\r\n### Example Project (If Possible)\r\nSee attached\r\n"},{"Id":"7125286364","Type":"IssuesEvent","CreatedAt":"2018-01-19T22:18:50","Actor":"lobrien","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3272","RelatedDescription":"Opened issue \"Foundation.INSFilePresenter.PesentedItemOperationQueue misspells \"Presented\"\" (#3272) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Use Object Browser, etc. to view `Foundation.INSFilePresenter` interface\r\n\r\n### Expected Behavior\r\n\r\n\"PresentedItemOperationQueue\"\r\n\r\n### Actual Behavior\r\n\r\n\"PesentedItemOperationQueue\" \r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Community 2017 for Mac (Preview) ===\r\n\r\nVersion 7.4 Preview (7.4 build 839)\r\nInstallation UUID: 6b94f136-026d-4a5a-bf6d-af2c0d8dc019\r\nRuntime:\r\n\tMono 5.8.0.103 (2017-10/1359c52fc6e) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 508000103\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.0.3\r\n\t2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.0.3/Sdks\r\nSDK Versions:\r\n\t2.0.3\r\n\t2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.8.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.1\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.2 (13768)\r\nBuild 9C34b\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.2.0.1 (Visual Studio Community)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.8.0.1 (Visual Studio Community)\r\nHash: 82e38cd1\r\nBranch: d15-6\r\nBuild date: 2017-12-22 14:23:52-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.2.0.1 (Visual Studio Community)\r\nAndroid SDK: /Users/larryobrien/Library/Android/sdk\r\n\tSupported Android versions:\r\n\t\t5.0 (API level 21)\r\n\t\t6.0 (API level 23)\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 25.0.3\r\nSDK Build Tools Version: 26.0.2\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_144\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_144-b01)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0-beta1+69\r\nHash: 4012b4e\r\nBranch: master\r\nBuild date: Thu, 07 Dec 2017 16:20:26 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 704000839\r\nGit revision: 82eabac6f9ebeaa9c0f3143baa8037c26c6c00fc\r\nBuild date: 2018-01-05 22:22:29-05\r\nXamarin addins: b2cfc17e56386f2c360aaa8b02404b900d6be8c1\r\nBuild lane: monodevelop-lion-d15-6\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.2\r\nDarwin 17.3.0 Darwin Kernel Version 17.3.0\r\n    Thu Nov  9 18:09:22 PST 2017\r\n    root:xnu-4570.31.3~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nLarry's F# Templates 2.0.8\r\nInternet of Things (IoT) development (Preview) 7.1\r\n\r\n\r\n```\r\n\r\n\r\n"},{"Id":"7125156158","Type":"PullRequestEvent","CreatedAt":"2018-01-19T21:45:05","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3270","RelatedDescription":"Merged pull request \"[tests] Confirm a device/sim support Metal before running MetalPerformanceShaders tests. Fixes #3237 (#3268)\" (#3270) at xamarin/xamarin-macios","RelatedBody":"https://github.com/xamarin/xamarin-macios/issues/3237\n\nBackport of https://github.com/xamarin/xamarin-macios/pull/3268 to 15.6"},{"Id":"7124271496","Type":"PullRequestEvent","CreatedAt":"2018-01-19T18:14:12","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3271","RelatedDescription":"Merged pull request \"[msbuild] Add missing {1} in LogMessage\" (#3271) at xamarin/xamarin-macios","RelatedBody":"Backport of https://github.com/xamarin/xamarin-macios/pull/3262"},{"Id":"7123891016","Type":"PullRequestEvent","CreatedAt":"2018-01-19T16:49:50","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3271","RelatedDescription":"Opened pull request \"[msbuild] Add missing {1} in LogMessage\" (#3271) at xamarin/xamarin-macios","RelatedBody":"Backport of https://github.com/xamarin/xamarin-macios/pull/3262"},{"Id":"7123752767","Type":"PullRequestEvent","CreatedAt":"2018-01-19T16:23:12","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3270","RelatedDescription":"Opened pull request \"[tests] Confirm a device/sim support Metal before running MetalPerformanceShaders tests. Fixes #3237 (#3268)\" (#3270) at xamarin/xamarin-macios","RelatedBody":"https://github.com/xamarin/xamarin-macios/issues/3237\n\nBackport of https://github.com/xamarin/xamarin-macios/pull/3268 to 15.6"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"954895828895916032","CreatedAt":"2018-01-21T01:58:01+00:00","UserScreenname":"xamarinhq","Text":"Xamarin's @lobrien  shows you how to add augmented reality to your #Xamarin apps with #ARKit in #iOS11:… https://t.co/pxoHpfwz5J","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"954424071562956802","CreatedAt":"2018-01-19T18:43:25+00:00","UserScreenname":"xamarinhq","Text":"Running #Xamarin.iOS unit tests in #VSTS: https://t.co/20PDCJZkbJ https://t.co/ipWfWuyPoB","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":17,"RawContent":null},{"Id":"954398799362961408","CreatedAt":"2018-01-19T17:03:00+00:00","UserScreenname":"xamarinhq","Text":"#XamarinForms Program Manager @davidortinau shares his tips for beating the learning curve: https://t.co/amiCZn15ns","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":23,"RawContent":null},{"Id":"954066862928793600","CreatedAt":"2018-01-18T19:04:00+00:00","UserScreenname":"xamarinhq","Text":"Check out the latest and greatest from @TheXamarinShow on getting started with iOS development in C# with #Xamarin: https://t.co/OpnYrTJhnw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"954040437962104832","CreatedAt":"2018-01-18T17:19:00+00:00","UserScreenname":"xamarinhq","Text":"Get started with the JobScheduler API to enhance the experience your user has with your applications and update to… https://t.co/hJ3E8pPggV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":26,"FavoriteCount":7,"RawContent":null},{"Id":"953670252793090049","CreatedAt":"2018-01-17T16:48:01+00:00","UserScreenname":"xamarinhq","Text":"Add sound to your #XamarinForms app with the open-source SimpleAudioPlayer #NuGet plugin: https://t.co/r8NSFRpl33 https://t.co/BbdcfvhwCa","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":80,"FavoriteCount":35,"RawContent":null},{"Id":"953354972019732481","CreatedAt":"2018-01-16T19:55:12+00:00","UserScreenname":"xamarinhq","Text":"The #CSharp developer’s guide to shipping better apps with #VSAppCenter: https://t.co/jU0cnONnM8 https://t.co/yTZCnF9Yko","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":128,"FavoriteCount":69,"RawContent":null},{"Id":"953306603851218944","CreatedAt":"2018-01-16T16:43:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to make your #XamarinForms apps adaptive based on screen size, device type, and orientation: https://t.co/XZYix2Cv0j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":26,"RawContent":null},{"Id":"952935662407348230","CreatedAt":"2018-01-15T16:09:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use new project templates in #VisualStudio 2017 that enable you to use #dotNET Standard as a code shar… https://t.co/nRyxpQLx5D","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":30,"RawContent":null},{"Id":"952587115417821191","CreatedAt":"2018-01-14T17:04:01+00:00","UserScreenname":"xamarinhq","Text":"Update your #Xamarin iOS apps for the iPhone X: https://t.co/Yi49G6ijnP https://t.co/WfBaPE3aMD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":27,"RawContent":null},{"Id":"952220954310127617","CreatedAt":"2018-01-13T16:49:01+00:00","UserScreenname":"xamarinhq","Text":"Build a simple #XamarinForms chat app that leverages and connects to an https://t.co/y9erV6ivVL Core #WebSocket:… https://t.co/olv2ycerlY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":182,"FavoriteCount":83,"RawContent":null},{"Id":"951923977278164992","CreatedAt":"2018-01-12T21:08:56+00:00","UserScreenname":"xamarinhq","Text":"Start your weekend on a high note with this week's episode of the @XamarinPodcast, covering Android 8.1, the new… https://t.co/nyDaQnMQOM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null},{"Id":"951862087931789312","CreatedAt":"2018-01-12T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with Android Oreo Notification Channels: https://t.co/1XmtfYAaLv https://t.co/Drj1AHQYPg","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":32,"FavoriteCount":12,"RawContent":null},{"Id":"951544245466423296","CreatedAt":"2018-01-11T20:00:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with the exciting new features in Android Oreo 8.1 with updated support in #Xamarin.Android:… https://t.co/7RaFvwrg4V","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":19,"RawContent":null},{"Id":"951505598268563456","CreatedAt":"2018-01-11T17:26:27+00:00","UserScreenname":"xamarinhq","Text":"Ready to start building better apps, faster? Learn how to get started with #VSAppCenter in our upcoming @XamarinU w… https://t.co/zkJdTZ6JTX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":59,"FavoriteCount":31,"RawContent":null},{"Id":"951487872753946625","CreatedAt":"2018-01-11T16:16:01+00:00","UserScreenname":"xamarinhq","Text":"Simplified app signing with secure files in #VSTS: https://t.co/O5XooxuL40 https://t.co/TGqFOONLio","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":9,"RawContent":null},{"Id":"951172797337866240","CreatedAt":"2018-01-10T19:24:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio 2017 version 15.6 Preview is now available! Get started today: https://t.co/KG2CJ20AHH https://t.co/e5VR78hTLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":29,"RawContent":null},{"Id":"951133533246025738","CreatedAt":"2018-01-10T16:48:00+00:00","UserScreenname":"xamarinhq","Text":"Get the most out of Binding in #XamarinForms with this overview of the powerful features that you should be using: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":24,"RawContent":null},{"Id":"950803363595243521","CreatedAt":"2018-01-09T18:56:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to deliver rich media experiences with the #XamarinForms Video Player: https://t.co/ndy3yvDDNk https://t.co/V8JfqCj42s","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":90,"FavoriteCount":40,"RawContent":null}]}},"RunOn":"2018-01-21T05:30:41.0737106Z","RunDurationInMilliseconds":4309}