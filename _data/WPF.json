{"Data":{"GitHub":{"Issues":[{"Id":"388050568","IsPullRequest":true,"CreatedAt":"2018-12-06T04:19:59","Actor":"lindexi","Number":"101","RawContent":null,"Title":"Replace IsAssignableFrom to is pattern","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/101","RelatedDescription":"Open PR \"Replace IsAssignableFrom to is pattern\" (#101)"},{"Id":"388013328","IsPullRequest":true,"CreatedAt":"2018-12-06T02:42:09","Actor":"vatsan-madhavan","Number":"98","RawContent":null,"Title":"Adding Sdk section to global.json","State":"closed","Body":"Adding an Sdk section to global.json. This is needed to ensure that CI servers deterministically use the version of .NET Core 3.0 Sdk specified here to build the projects in the repo.","Url":"https://github.com/dotnet/wpf/pull/98","RelatedDescription":"Closed or merged PR \"Adding Sdk section to global.json\" (#98)"},{"Id":"388026006","IsPullRequest":false,"CreatedAt":"2018-12-06T02:10:03","Actor":"lindexi","Number":"100","RawContent":null,"Title":"ObjectWriterContext.GetDestinationType may throw null reference exception","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Windows version: Windows 10 17025\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: do not know\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nObjectWriterContext.GetDestinationType may throw null reference exception when CurrentFrame.Previous is not ObjectWriterFrame. \r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nThe code is in       wpf/src/Microsoft.DotNet.Wpf/src/System.Xaml/System/Xaml/Context/ObjectWriterContext.cs\r\n\r\n        internal XamlType GetDestinationType()\r\n        {\r\n            ObjectWriterFrame frame = _stack.CurrentFrame;\r\n\r\n            if (frame == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            if (frame.Instance != null && frame.XamlType == null) // when true\r\n            {\r\n                //\r\n                // Text/TypeConverter, we need to go up a frame\r\n                frame = frame.Previous as ObjectWriterFrame; // when the  frame.Previous is not ObjectWriterFrame that the frame is null\r\n            }\r\n\r\n            // for frame is null, calling the frame.Member will break\r\n            if (frame.Member == XamlLanguage.Initialization) \r\n            {\r\n                return frame.XamlType;\r\n            }\r\n            return frame.Member.Type;\r\n        }      \r\n\r\nhttps://github.com/dotnet/wpf/blob/bed20df8769a90615fb1a3a8efb3c18611283645/src/Microsoft.DotNet.Wpf/src/System.Xaml/System/Xaml/Context/ObjectWriterContext.cs#L325\r\n \r\n **Expected behavior:**\r\n\r\nWe should check the  `frame = frame.Previous as ObjectWriterFrame;` and the frame is not null.\r\n \r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/100","RelatedDescription":"Open issue \"ObjectWriterContext.GetDestinationType may throw null reference exception\" (#100)"},{"Id":"388024619","IsPullRequest":false,"CreatedAt":"2018-12-06T02:03:07","Actor":"lindexi","Number":"99","RawContent":null,"Title":"Can we build xaml to XBF in WPF?","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\nWPF should cost too many time to parse the xaml during startup. In UWP, we can build xaml to XBF that the binary representation enables performance advantages versus loading and parsing a XAML file as text.","Url":"https://github.com/dotnet/wpf/issues/99","RelatedDescription":"Open issue \"Can we build xaml to XBF in WPF?\" (#99)"},{"Id":"387516015","IsPullRequest":true,"CreatedAt":"2018-12-06T01:59:48","Actor":"AndreyAkinshin","Number":"73","RawContent":null,"Title":"Simplify some syntax constructions in XamlObjectReader","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/73","RelatedDescription":"Closed or merged PR \"Simplify some syntax constructions in XamlObjectReader\" (#73)"},{"Id":"387990312","IsPullRequest":false,"CreatedAt":"2018-12-06T01:14:09","Actor":"KelsonBall","Number":"93","RawContent":null,"Title":"build error from artifact (Duplicate attribute in AssemblyInfo.cs)","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n3.0.100-preview-009750\r\n\r\n* Windows version: (`winver`)\r\nVersion 1809 (OS Build 17763.134)\r\n\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\t\r\n\r\nWhen trying to build a basic WPF project for dotnet core 3.0 I get multiple duplicate attribute errors that **appear** to be from a temporary file (`\\obj\\Debug\\netcoreapp3.0\\NetCoreWpf_xnekjbde_wpftmp.AssemblyInfo.cs`) conflicting with the actual `AssemblyInfo.cs` file\r\n\r\n To get this error, after a fresh install of Visual Studio 2019 preview 1 I tried to open and build a wpf dotnet core project modified using Brian Lagunis's instructions [from his blog post here](http://brianlagunas.com/getting-started-net-core-3-conveting-existing-wpf-application/). The project is empty (was generated in Visual Studio 15.9.3)\r\n\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n6  duplicate attribute errors fail the build.\r\nCS0579 Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute\r\nCS0579 Duplicate 'System.Reflection.AssemblyConfigurationAttribute' attribute\r\nCS0579 Duplicate 'System.Reflection.AssemblyFileVersionAttribute' attribute\r\nCS0579 Duplicate 'System.Reflection.AssemblyProductAttribute' attribute\r\nCS0579 Duplicate 'System.Reflection.AssemblyTitleAttribute' attribute\r\nCS0579 Duplicate 'System.Reflection.AssemblyVersionAttribute' attribute\r\n\r\n **Expected behavior:**\r\n No duplicate attribute errors occur unless there are duplicate attributes in my project, in which case the error message should point to the human-made code where the error occurs.\r\n\r\n **Minimal repro:**\r\n https://github.com/KelsonBall/WpfDotnetCoreDuplicateAttributeError\r\n","Url":"https://github.com/dotnet/wpf/issues/93","RelatedDescription":"Closed issue \"build error from artifact (Duplicate attribute in AssemblyInfo.cs)\" (#93)"},{"Id":"388004177","IsPullRequest":false,"CreatedAt":"2018-12-06T00:25:40","Actor":"lindexi","Number":"97","RawContent":null,"Title":"Bring win2d to WPF","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\n[Win2D](http://github.com/Microsoft/Win2D) is an easy-to-use Windows Runtime API for immediate mode 2D graphics rendering with GPU acceleration. \r\n\r\nCan we bring win2d to WPF?","Url":"https://github.com/dotnet/wpf/issues/97","RelatedDescription":"Open issue \"Bring win2d to WPF\" (#97)"},{"Id":"387996784","IsPullRequest":false,"CreatedAt":"2018-12-05T23:52:36","Actor":"taori","Number":"96","RawContent":null,"Title":"Allow registering xmlns prefixes for foreign assemblies","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\nAs pointed out in https://github.com/dotnet/wpf/issues/45, using\r\n\r\n```cs\r\n[assembly: XmlnsPrefix(\"http://schemas.dotMorten.com/2018\", \"custom\")]\r\n[assembly: XmlnsDefinition(\"http://schemas.dotMorten.com/2018\", \"MyClassNamespace\")]\r\n```\r\n\r\nonly works for assemblies you own. \r\n\r\nIt would be nice if you could declare those attributes at application level, to provide controls of an assembly with custom namespaces, if they lack those attributes, or even override them. \r\n\r\nWhile the later one isn't essential, i think the first one could be useful, if people share their controls on nuget and don't know about custom namespace prefixes.\r\n\r\nAt least i've had situations where i was annoyed with the awfully verbose prefixes others chose, or the lack of them alltogether.\r\n\r\nAnother scenario would be that you are supplied with a viewmodels assembly and are going to use those in your views. Being able to group those namespaces would be neat.","Url":"https://github.com/dotnet/wpf/issues/96","RelatedDescription":"Open issue \"Allow registering xmlns prefixes for foreign assemblies\" (#96)"},{"Id":"387995958","IsPullRequest":false,"CreatedAt":"2018-12-05T23:49:04","Actor":"zezba9000","Number":"95","RawContent":null,"Title":"Q) Transform XAML into C# API?","State":"open","Body":"I know the code release is new and may not have everything yet but what API(s) would I use to transform XAML into a C# partial class for code behind as is done normally in WPF?","Url":"https://github.com/dotnet/wpf/issues/95","RelatedDescription":"Open issue \"Q) Transform XAML into C# API?\" (#95)"},{"Id":"387995573","IsPullRequest":false,"CreatedAt":"2018-12-05T23:47:27","Actor":"dotMorten","Number":"94","RawContent":null,"Title":"XAML parsing is 27% slower on .NETCore than on .NET Framework","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: 1803\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n I expected/hoped that with the XmlReader hopefully being `Span<T>` based. the XAML parser would be faster in .NET Core than the .NET Framework equivalent. However that's not what I'm seeing with this benchmark:\r\n```cs\r\n    public class BenchmarkTests\r\n    {\r\n        static readonly string xamlString = @\"<MyObject xmlns=\"\"clr-namespace:XamlBenchmark;assembly=XamlBenchmark\"\" StringProperty=\"\"Hello World\"\" Int32Property=\"\"1234\"\" DoubleProperty=\"\"123.4567890\"\" FloatProperty=\"\"-0.9876\"\" />\";\r\n\r\n        [Benchmark]\r\n        public object Test1()\r\n        {\r\n            object instance = System.Xaml.XamlServices.Parse(xamlString);\r\n            return instance;\r\n        }\r\n    }\r\n    public class MyObject\r\n    {\r\n        public string StringProperty { get; set; }\r\n        public int Int32Property { get; set; }\r\n        public double DoubleProperty { get; set; }\r\n        public float FloatProperty { get; set; }\r\n    }\r\n```\r\n\r\nHere are the results:\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17763.1 (1809/October2018Update/Redstone5)\r\nIntel Xeon CPU E5-1620 v3 3.50GHz, 1 CPU, 8 logical and 4 physical cores\r\n  [Host]     : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.3190.0\r\n  Job-FQKGZY : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.3190.0\r\n  Job-YTBJBT : .NET Core 3.0.0-preview-27122-01 (CoreCLR 4.6.27121.03, CoreFX 4.7.18.57103), 64bit RyuJIT\r\n\r\n\r\n```\r\n| Method | Runtime |     Toolchain |     Mean |    Error |   StdDev | Ratio | RatioSD |\r\n|------- |-------- |-------------- |---------:|---------:|---------:|------:|--------:|\r\n|  Test1 |     Clr |        net472 | 363.3 us | 7.139 us | 7.639 us |  1.00 |    0.00 |\r\n|  Test1 |    Core | netcoreapp3.0 | 461.6 us | 9.078 us | 8.048 us |  1.27 |    0.03 |\r\n\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/94","RelatedDescription":"Open issue \"XAML parsing is 27% slower on .NETCore than on .NET Framework\" (#94)"},{"Id":"387578529","IsPullRequest":false,"CreatedAt":"2018-12-05T22:46:57","Actor":"Wintermute21","Number":"80","RawContent":null,"Title":"Build script fails building with Visual Studio 2019 Preview 1 because script is looking for MsBuild in the wrong place","State":"closed","Body":"* .NET Core Version: (3.0 Preview1)\r\n* Windows version: (Windows 10 build 18290.1000)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n When cloning and building using Visual Studio 2019 Preview 1, build.cmd fails by not looking for NuGet.exe in the correct directory for Preview. \r\nLine 183 of eng/common/tools.ps1 has   $script:buildDriver = Join-Path $vsInstallDir \"MSBuild\\15.0\\Bin\\msbuild.exe\" where for Preview1 it should be   $script:buildDriver = Join-Path $vsInstallDir \"MSBuild\\Current\\Bin\\msbuild.exe\"\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n build fails with NuGet.exe not found\r\n **Expected behavior:**\r\n build succeeds and restores packages correctly.\r\n **Minimal repro:**\r\n clone and build under 2019 Preview 1.\r\n","Url":"https://github.com/dotnet/wpf/issues/80","RelatedDescription":"Closed issue \"Build script fails building with Visual Studio 2019 Preview 1 because script is looking for MsBuild in the wrong place\" (#80)"},{"Id":"387957493","IsPullRequest":true,"CreatedAt":"2018-12-05T22:05:18","Actor":"LyalinDotCom","Number":"92","RawContent":null,"Title":"Update SafeSecurityHelper.cs","State":"closed","Body":"Removed an extra space in a a functions Attribute","Url":"https://github.com/dotnet/wpf/pull/92","RelatedDescription":"Closed or merged PR \"Update SafeSecurityHelper.cs\" (#92)"},{"Id":"387954702","IsPullRequest":false,"CreatedAt":"2018-12-05T21:32:08","Actor":"dotMorten","Number":"91","RawContent":null,"Title":"Add support for Color Emoji support","State":"open","Body":"Currently when you render emojis in WPF, they are rendered black'n'white, and not rendering with the correct emoji color.\r\nIt would be good if we could update the text rasterizer renderers to render with the correct color.\r\nThere's a proof of concept implementation here: https://github.com/samhocevar/emoji.wpf, so perhaps @samhocevar would be willing to contribute? (I'm guessing this would be done on the DirectWrite level though)\r\n\r\nScreenshot from Emoji.WPF\r\n![image](https://user-images.githubusercontent.com/1378165/49545342-32714d80-f892-11e8-9cbf-ba0d87724c47.png)\r\n\r\nDocumentation how this works from https://blogs.windows.com/buildingapps/2017/06/06/using-color-fonts-beautiful-text-icons/#Crwe2VHsjP5PgAXS.97 (thanks @mikedn):\r\n![image](https://user-images.githubusercontent.com/1378165/49545803-86306680-f893-11e8-98dc-1554bd6179ee.png)\r\n\r\nAlso for discussion: Should we have a [IsColorFontEnabled](https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Xaml.Controls.TextBlock#Windows_UI_Xaml_Controls_TextBlock_IsColorFontEnabled) property that turns this behavior on/off, and should it be default like in UWP (behavior change). Also only 8.1+ uses the `D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT` flag, so I'm assuming the behavior would always be black/white on Win7 and 8.0","Url":"https://github.com/dotnet/wpf/issues/91","RelatedDescription":"Open issue \"Add support for Color Emoji support\" (#91)"},{"Id":"387934281","IsPullRequest":true,"CreatedAt":"2018-12-05T21:24:33","Actor":"gieniowski","Number":"90","RawContent":null,"Title":"Fix placeholder for string.Format","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/90","RelatedDescription":"Closed or merged PR \"Fix placeholder for string.Format\" (#90)"},{"Id":"387747632","IsPullRequest":true,"CreatedAt":"2018-12-05T20:37:21","Actor":"dotnet-maestro[bot]","Number":"83","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18604.15\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/83","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#83)"},{"Id":"387851715","IsPullRequest":true,"CreatedAt":"2018-12-05T19:58:32","Actor":"digitalbricklayer","Number":"88","RawContent":null,"Title":"Fixes missing space","State":"closed","Body":"Fixes a missing space in the \"How to Engage, Contribute, and Provide Feedback\" section.","Url":"https://github.com/dotnet/wpf/pull/88","RelatedDescription":"Closed or merged PR \"Fixes missing space\" (#88)"},{"Id":"387865627","IsPullRequest":false,"CreatedAt":"2018-12-05T17:29:32","Actor":"DingpingZhang","Number":"89","RawContent":null,"Title":"Make FrameworkElement.Triggers support more types of triggers","State":"open","Body":"`FrameworkElement.Triggers` now only accepts `EventTriggers` type, and we have to write a `Style` to add other triggers to the element, as shown below:\r\n\r\n```xml\r\n        <Button>\r\n            <Button.Style>\r\n                <Style TargetType=\"Button\" BasedOn=\"{StaticResource {x:Type Button}}\">\r\n                    <Style.Triggers>\r\n                        <Trigger Property=\"IsEnabled\" Value=\"False\">\r\n                            <Setter Property=\"Background\" Value=\"Gray\" />\r\n                        </Trigger>\r\n                    </Style.Triggers>\r\n                </Style>\r\n            </Button.Style>\r\n        </Button>\r\n```\r\n\r\nI think we need a more simplified xaml syntax to add triggers (`Trigger`, `DataTrigger`, `MultiTrigger` and `MultiDataTrigger`), just like below:\r\n\r\n```xml\r\n        <Button>\r\n            <Button.Triggers>\r\n                <Trigger Property=\"IsEnabled\" Value=\"False\">\r\n                    <Setter Property=\"Background\" Value=\"Gray\" />\r\n                </Trigger>\r\n            </Button.Triggers>\r\n        </Button>\r\n```","Url":"https://github.com/dotnet/wpf/issues/89","RelatedDescription":"Open issue \"Make FrameworkElement.Triggers support more types of triggers\" (#89)"},{"Id":"387844162","IsPullRequest":false,"CreatedAt":"2018-12-05T16:40:20","Actor":"JeroMiya","Number":"87","RawContent":null,"Title":"Document Microsoft Patent grants/licensing/etc...","State":"open","Body":"**Motivation**\r\nThe MIT license grants a license for the source w.r.t. copyright, but not any patents that Microsoft may have that cover the software. Even using this software for its intended purpose, i.e. writing Windows apps, potentially exposes users to patent infringement liability.\r\n\r\n**Suggestion**\r\nIt would be nice to have some documentation from Microsoft that includes:\r\n- What Microsoft-owned patents might cover functionality in WPF.\r\n- Which of those patents already have public grants/licenses such as OIN, and under what terms.\r\n- Instructions for licensing said patents, if not covered by an existing grant.","Url":"https://github.com/dotnet/wpf/issues/87","RelatedDescription":"Open issue \"Document Microsoft Patent grants/licensing/etc...\" (#87)"},{"Id":"387813613","IsPullRequest":false,"CreatedAt":"2018-12-05T15:36:10","Actor":"brandonhood","Number":"86","RawContent":null,"Title":"SVG support for Image.ImageSource","State":"open","Body":"SVG is a perfect match for WPF, but there's no way to display one without either using a third party library or converting it to XAML.","Url":"https://github.com/dotnet/wpf/issues/86","RelatedDescription":"Open issue \"SVG support for Image.ImageSource\" (#86)"},{"Id":"387809322","IsPullRequest":false,"CreatedAt":"2018-12-05T15:27:24","Actor":"JeroMiya","Number":"85","RawContent":null,"Title":"Extensible rendering pipeline","State":"open","Body":"### Motivation\r\nCurrent WPF implementation relies on DirectX/etc... to render vector graphics/UI. There is potentially a desire to use alternative rendering APIs (SkiaSharp, et. al.) for specific purposes, primarily portability, but also for performance or integration in nontraditional environments (Unity/Unreal engine, Web/Wasm, embedded/IOT, et. al.).\r\n\r\n### Suggestion\r\nAs much as possible, refactor rendering pipeline and other platform-specifics to be extensible, allowing for custom implementations decoupled from DirectX/etc..., for example: a SkiaSharp backend instead of a DirectX one.\r\n\r\n### Potential Questions\r\n**Question**: \"Why not just use Xamarin.Forms? There's already a system there for custom renderers and cross-platform UI.\"\r\n**Answer**: Xamarin.Forms implements something similar, allowing for platform specific or custom renderers for specific controls. However XF uses this to support platform native controls, whereas WPF would be more similar to Flutter/others in that it (more or less?) renders controls using graphics primitives or vector graphics from control templates and styles. There are pros and cons to each approach.\r\n","Url":"https://github.com/dotnet/wpf/issues/85","RelatedDescription":"Open issue \"Extensible rendering pipeline\" (#85)"},{"Id":"387754671","IsPullRequest":false,"CreatedAt":"2018-12-05T13:22:52","Actor":"thomaslevesque","Number":"84","RawContent":null,"Title":"Make Setter.Value the ContentProperty for Setter","State":"open","Body":"Currently, when you want to set the value of a setter to a complex object (e.g. control template), you have to specify the `<Setter.Value>` element:\r\n\r\n```xaml\r\n<Style TargetType=\"Button\">\r\n    <Setter Property=\"Template\">\r\n        <Setter.Value>\r\n            <ControlTemplate TargetType=\"Button\">\r\n                ...\r\n            </ControlTemplate>\r\n        </Setter.Value>\r\n    </Setter>\r\n</Style>\r\n```\r\nBut this element brings no value at all, it just adds noise. Making `Value` the `ContentProperty` for `Setter` would make the code a bit less verbose:\r\n\r\n```xaml\r\n<Style TargetType=\"Button\">\r\n    <Setter Property=\"Template\">\r\n        <ControlTemplate TargetType=\"Button\">\r\n            ...\r\n        </ControlTemplate>\r\n    </Setter>\r\n</Style>\r\n```\r\n\r\n(note: I tried to make this change, but I can't find the Setter class anywhere in the repo... nor can I find any of the controls. Where are they? Is there another repo?)","Url":"https://github.com/dotnet/wpf/issues/84","RelatedDescription":"Open issue \"Make Setter.Value the ContentProperty for Setter\" (#84)"},{"Id":"387639735","IsPullRequest":false,"CreatedAt":"2018-12-05T08:16:05","Actor":"teichgraf","Number":"82","RawContent":null,"Title":"Bringing WriteableBitmapEx into WPF? ","State":"open","Body":"Hi,\r\n\r\nIs there interest in a PR to bring WirteableBitmapEx extensions for the WriteableBitmap into WPF? 🤔\r\nhttps://github.com/teichgraf/WriteableBitmapEx \r\n\r\nIt's a long going and stable project I've created many years ago and keep on maintaining. It was all started because the built-in WriteableBitmap lacks functionality. Now with WPF being open source we could fix that and make it part of core WPF. 🤩\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/82","RelatedDescription":"Open issue \"Bringing WriteableBitmapEx into WPF? \" (#82)"},{"Id":"387619999","IsPullRequest":true,"CreatedAt":"2018-12-05T08:14:29","Actor":"jonesmz","Number":"81","RawContent":null,"Title":"contributing.md -- fix typo","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/81","RelatedDescription":"Closed or merged PR \"contributing.md -- fix typo\" (#81)"},{"Id":"387557039","IsPullRequest":true,"CreatedAt":"2018-12-05T01:49:49","Actor":"ConnorL33t","Number":"79","RawContent":null,"Title":"Apply missing licenses for tests, and remove old headers","State":"closed","Body":"Fixes #75 \r\n\r\n@karelz I took a look at the CodeFormatter project discussed in the issue, but I didn't have much luck getting it to work.","Url":"https://github.com/dotnet/wpf/pull/79","RelatedDescription":"Closed or merged PR \"Apply missing licenses for tests, and remove old headers\" (#79)"},{"Id":"387540469","IsPullRequest":false,"CreatedAt":"2018-12-05T01:49:49","Actor":"stevenbrix","Number":"75","RawContent":null,"Title":"Add license headers to test code","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/issues/75","RelatedDescription":"Closed issue \"Add license headers to test code\" (#75)"},{"Id":"387549957","IsPullRequest":false,"CreatedAt":"2018-12-05T01:11:38","Actor":"lindexi","Number":"78","RawContent":null,"Title":"WPF Main thread gets a deadlock when stylus input thread is waiting for the window to close","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: (`Windows 10 all versions / 7 SP1`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nWe found two way that can make the main thread locked. And we can not write any code to solve it and it can only be circumvented.\r\n\r\nThe easiest way to reproduce this issue is to wait for the window in the main thread to close in the stylus input thread. \r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\n## The first way\r\n\r\nThe first way is to write a custom class implementing `StylusPlugIn` and wait for a window to close in the `OnStylusUp` method.\r\n\r\nLet's create a new empty window named `FooWindow`.\r\n\r\n\r\n```csharp\r\npublic class FooWindow : Window\r\n{\r\n\r\n}\r\n```\r\n\r\nThen we create a `FooStylusPlugIn` class to implement the `StylusPlugIn` with overriding the `OnStylusUp` method. We add some code to wait for the window to close by calling `Invoke` which will wait by pumping a new message loop.\r\n\r\n```csharp\r\npublic class FooStylusPlugIn : StylusPlugIn\r\n{\r\n    public FooStylusPlugIn(FooWindow fooWindow)\r\n    {\r\n    \tFooWindow = fooWindow;\r\n    }\r\n\r\n    public FooWindow FooWindow { get; }\r\n\r\n    /// <inheritdoc />\r\n    protected override void OnStylusUp(RawStylusInput rawStylusInput)\r\n    {\r\n        FooWindow.Dispatcher.Invoke(() => FooWindow.Close());\r\n        base.OnStylusUp(rawStylusInput);\r\n    }\r\n}\r\n```\r\n\r\nTo combine both the critical codes above, we write some codes in the `MainWindow`. The `FooWindow` is instanced in the constructor and the `StylusPlugIn` is plugged in it. We also make a button in the XAML that can let us know whether the main thread is still running or not.\r\n\r\n```csharp\r\npublic partial class MainWindow : Window\r\n{\r\n    public MainWindow()\r\n    {\r\n        InitializeComponent();\r\n        _fooWindow = new FooWindow();\r\n        StylusPlugIns.Add(new FooStylusPlugIn(_fooWindow));\r\n        _fooWindow.Show();\r\n    }\r\n\r\n    private void Button_OnClick(object sender, RoutedEventArgs e)\r\n    {\r\n    }\r\n\r\n    private FooWindow _fooWindow;\r\n}\r\n```\r\n\r\nRun the project, touch the main window, and you'll find that the main window never responds to your interaction. Try to click the button to view the responding and you'll soon verify what I'm talking.\r\n\r\nThe reason is that the `OnStylusUp` in `FooStylusPlugIn` is running in the stylus input thread which is also running the inside loop of the `ThreadProc` method. It needs to go back to the outside loop to remove the `PenContext` when a window is closed. The stylus input thread is waiting for the main thread to close a window and the main thread is also waiting for the stylus input thread remove PenContext. Thus, the deadlock occurred.\r\n\r\nThe demo in [github](https://github.com/dotnet-campus/wpf-issues/tree/master/MainThreadDeadlockWithStylusInputThread/MainThreadDeadlockWhenTouchThreadWaitForWindowClosed)\r\n\r\n## The second way\r\n\r\nIf a touch happens exactly during a window closing, the main thread will enter a lock.\r\n\r\nThe difference between the first method and the second method is that the first one will lock both the main thread and the stylus input thread but the second one will only lock the main thread.\r\n\r\nFrom the theory, we know that the `PenContext` should be removed correctly in the outside loop. But in the second way, the stylus input thread is firing the touch event exactly when we run the code to remove the `PenContext` in the stylus input thread. As you can see we need to run the code to remove `PenContext` in the outside loop but at this moment the code is firing the touch event in the second loop.\r\n\r\nThe firing of the touch event means the `_pimcResetHandle` is released. Although the main thread has also released the lock the code cannot run to the outside loop to remove the `PenContext` and the main thread can no longer wait for the moment when the `PenContext` removal is finished.\r\n\r\n\r\n```csharp\r\nvoid ThreadProc()\r\n{\r\n    while (!__disposed)\r\n    {\r\n      \t// The outside loop\r\n    \t// To remove or add the PenContext\r\n    \t// The main thread is waiting for its finishing.\r\n    \tRemovePenContext();\r\n\r\n    \twhile (true)\r\n    \t{\r\n    \t\t// The inside loop\r\n    \t\t// Tt will be blocked by the PENIMC\r\n    \t\tif(!Penimc.UnsafeNativeMethods.GetPenEvent(/*wait the lock*/))\r\n    \t\t{\r\n    \t\t\t// If the `_pimcResetHandle` is released, this if branch will enter so the inside loop will end with the `break` and the code runs back to the outside loop.\r\n    \t\t\tbreak;\r\n    \t\t}\r\n\r\n    \t\tFireEvent(/*fire the touch events*/); // the code is running in this line\r\n    \t\t// and the `_pimcResetHandle` is released.\r\n    \t\t// the main thread release the `_pimcResetHandle` but the code can not go to RemovePenContext for it will no longer break. \r\n    \t}\r\n    }\r\n}\r\n```\r\n\r\nThe main thread has released the lock but the stylus input thread doesn't need to wait for the lock. The stylus input thread cannot go back to the outside loop to remove the `PenContext` and main thread can no longer wait for the moment when the `PenContext` removal is finished. \r\n\r\n **Expected behavior:**\r\n \r\n **Minimal repro:**\r\n \r\nSee https://github.com/dotnet-campus/wpf-issues/tree/master/MainThreadDeadlockWithStylusInputThread/MainThreadDeadlockWhenTouchThreadWaitForWindowClosed\r\n","Url":"https://github.com/dotnet/wpf/issues/78","RelatedDescription":"Open issue \"WPF Main thread gets a deadlock when stylus input thread is waiting for the window to close\" (#78)"},{"Id":"387546961","IsPullRequest":false,"CreatedAt":"2018-12-05T01:00:31","Actor":"walterlv","Number":"77","RawContent":null,"Title":"WPF applications stop responding to touches after adding or removing tablet devices","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: (`Windows 10 all versions / 7 SP1`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\n\r\n Run any WPF application on a computer which is currently has a high CPU usage, if you keep plugging and unplugging a USB HID tablet device at the same time, the WPF applications will stop responding to touches and only respond to mouse.\r\n\r\n **Actual behavior:**\r\n\r\n[c# - WPF applications stop responding to touches after adding or removing tablet devices - Stack Overflow](https://stackoverflow.com/questions/51854593/wpf-applications-stop-responding-to-touches-after-adding-or-removing-tablet-devi)\r\n \r\n **Expected behavior:**\r\n\r\nWPF works without touch lost.\r\n \r\n **Minimal repro:**\r\n \r\n1. Run any WPF application\r\n1. Keep plugging and unplugging a USB HID tablet device\r\n1. Make a high CPU usage\r\n","Url":"https://github.com/dotnet/wpf/issues/77","RelatedDescription":"Open issue \"WPF applications stop responding to touches after adding or removing tablet devices\" (#77)"},{"Id":"387546173","IsPullRequest":false,"CreatedAt":"2018-12-05T00:57:23","Actor":"lindexi","Number":"76","RawContent":null,"Title":"Make the dynamic render support MultiTouch","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\nWe need the user use multitouch in InkCanvas and the DynamicRender do not support multitouch.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/76","RelatedDescription":"Open issue \"Make the dynamic render support MultiTouch\" (#76)"},{"Id":"387535257","IsPullRequest":true,"CreatedAt":"2018-12-05T00:21:34","Actor":"stevenbrix","Number":"74","RawContent":null,"Title":"fixing missing license headers","State":"closed","Body":"some license headers were missed when porting system.xaml to .netcore 3","Url":"https://github.com/dotnet/wpf/pull/74","RelatedDescription":"Closed or merged PR \"fixing missing license headers\" (#74)"},{"Id":"387513097","IsPullRequest":false,"CreatedAt":"2018-12-04T22:43:59","Actor":"Marv51","Number":"72","RawContent":null,"Title":"VisualStateGroup not working","State":"open","Body":"* .NET Core Version: 3.0 Preview1 (3.0.100-preview-009812)\r\n* Windows version: win10 1809 17763\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\nThis is probably a know issue of the first preview, very excited about this thing by the way!\r\n\r\nRunning my app, I get exceptions for windows that contain a `System.Windows.VisualStateGroup`(only tested via xaml). See below. \r\nI had this on three different windows and removing the VisualStateGroup fixes it. (That of course also removes the functionality)\r\n\r\nI guess this is not yet done?  Known Bug? Or something real?\r\n \r\n **Actual behavior:**\r\n System.Windows.Markup.XamlParseException: \"'Set connectionId threw an exception.' Line number '11' and line position '14'.\"\r\nInner Exception:\r\nInvalidCastException: Unable to cast object of type 'System.Windows.VisualStateGroup' to type 'System.Windows.Shapes.Ellipse'.\r\n\r\n **Expected behavior:**\r\nShould work as it does in dotnet framework.\r\n\r\n \r\n **Minimal(ish) repro:**\r\n```xaml\r\n<Grid Name=\"TheEllipse\" MouseUp=\"TheEllipse_MouseUp\">\r\n    <VisualStateManager.VisualStateGroups>\r\n        <VisualStateGroup Name=\"MouseStates\">\r\n            <VisualState Name=\"MouseEnter\">\r\n                <Storyboard>\r\n                    <ColorAnimation To=\"#A1A1A1\" Duration=\"00:00:00.3\" Storyboard.TargetName=\"BackFill\" Storyboard.TargetProperty=\"(SolidColorBrush.Color)\" />\r\n                </Storyboard>\r\n            </VisualState>\r\n        </VisualStateGroup>\r\n   </VisualStateManager.VisualStateGroups>\r\n   <Ellipse Stroke=\"Black\" StrokeThickness=\"1\">\r\n       <Ellipse.Fill>\r\n           <SolidColorBrush x:Name=\"BackFill\" Color=\"#F1F1F1\" />\r\n       </Ellipse.Fill>\r\n   </Ellipse>\r\n</Grid>\r\n```","Url":"https://github.com/dotnet/wpf/issues/72","RelatedDescription":"Open issue \"VisualStateGroup not working\" (#72)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-06T05:31:15.818041Z","RunDurationInMilliseconds":1013}