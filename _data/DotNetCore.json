{"Data":{"Blog":{"FeedItems":[{"Title":"Help us help you! What desktop apps are you bringing to .NET Core 3.0?","PublishedOn":"2019-01-17T16:00:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Windows Desktop applications are coming to .NET Core. The recently released .NET Core 3.0 Preview 1 version includes WinForms and WPF support. To make .NET Core 3.0 viable for as many of you as...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/17/help-us-help-you-what-desktop-apps-are-you-bringing-to-net-core-3-0/","RawContent":null},{"Title":".NET Framework January 2019 Preview of Quality Rollup","PublishedOn":"2019-01-16T04:08:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the January 2019 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Addresses a garbage collection...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"Announcing ML.NET 0.9 – Machine Learning for .NET","PublishedOn":"2019-01-10T20:34:16+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Announcing ML.NET 0.9 &#8211; Machine Learning for .NET ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/10/announcing-ml-net-0-9-machine-learning-for-net/","RawContent":null},{"Title":"Tell us your thoughts on ML.NET, an open source and cross-platform machine learning framework","PublishedOn":"2019-01-09T17:31:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers. .NET developers can use their C# or F# skills to easily integrate custom machine learning into their...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/09/tell-us-your-thoughts-on-ml-net/","RawContent":null},{"Title":".NET Core January 2019 Updates – 2.1.7 and 2.2.1","PublishedOn":"2019-01-09T02:07:05+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2019 Update. These updates contain security and reliability fixes. .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( Download &#124; Release Notes ) .NET Core...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-core-january-2019-update/","RawContent":null},{"Title":".NET Framework January 2019 Security and Quality Rollup","PublishedOn":"2019-01-08T18:59:07+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the January 2019 Security and Quality Rollup. Security CVE-2019-0545 – Windows Security Feature Bypass Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3707","PublishedOn":"2018-12-15T02:11:55+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We have another early access build to share today! This release includes several accessibility, performance, reliability and stability fixes across the major framework libraries. We will continue to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/14/announcing-net-framework-4-8-early-access-build-3707/","RawContent":null},{"Title":"Visual Studio 2019 Preview .NET Productivity","PublishedOn":"2018-12-14T00:13:41+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As you hopefully heard, the first preview of Visual Studio 2019 is now available. In this post I’ll cover some of the productivity improvements for .NET developers we’re most excited about. For a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/13/visual-studio-2019-net-productivity/","RawContent":null},{"Title":".NET Framework December 2018 Security and Quality Rollup","PublishedOn":"2018-12-11T18:23:48+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the December 2018 Security and Quality Rollup. Security CVE-2018-8540 – Windows Remote Code Execution Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/11/net-framework-december-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Open Sourcing XAML Behaviors for WPF","PublishedOn":"2018-12-10T19:27:32+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are excited to announce that we are open sourcing XAML Behaviors for WPF. In the past, we open sourced XAML Behaviors for UWP which has been a great success and the Behaviors NuGet package...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/10/open-sourcing-xaml-behaviors-for-wpf/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8887340703","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Opened pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8860916656","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:28:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Merged pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8837337598","Type":"PullRequestEvent","CreatedAt":"2019-01-05T03:23:40","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Merged pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833785661","Type":"PullRequestEvent","CreatedAt":"2019-01-04T11:57:11","Actor":"MarcBruins","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Opened pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833210040","Type":"PullRequestEvent","CreatedAt":"2019-01-04T09:40:51","Actor":"ErikEJ","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Opened pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8831721539","Type":"PullRequestEvent","CreatedAt":"2019-01-04T00:22:43","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Merged pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""},{"Id":"8830688181","Type":"PullRequestEvent","CreatedAt":"2019-01-03T20:00:04","Actor":"carloscds","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Opened pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8852414845","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:17:46","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Opened issue \"January 2019 .NET Updates\" (#96) at dotnet/announcements","RelatedBody":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852318390","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Opened issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n"},{"Id":"8852317992","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:24","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n"},{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8931784932","Type":"IssuesEvent","CreatedAt":"2019-01-22T20:03:22","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22130","RelatedDescription":"Opened issue \"JIT: Index use can't be completely optimized away\" (#22130) at dotnet/coreclr","RelatedBody":"In the following example we'd like the jit to produce the same (or very similar code) for both `Fint` and `Findex`:\r\n```C#\r\nusing System;\r\n\r\nclass X\r\n{\r\n    public static void Fint(Span<int> c)\r\n    {\r\n        for (int i = 1; i <= c.Length; i++)\r\n        {\r\n            c[c.Length - i] += 1;\r\n        }\r\n    }\r\n\r\n    public static void Findex(Span<int> c)\r\n    {\r\n        for (int i = 1; i <= c.Length; i++)\r\n        {\r\n            c[new Index(i, fromEnd: true)] += 1;\r\n        }\r\n    }\r\n}\r\n```\r\nHowever currently the `Index` ctor won't inline (see #22079) and the IL is not jit-friendly. If we revise it and then force it to inline, we still see some codegen deficiencies:\r\n```asm\r\n;; Fint\r\n\r\nG_M7659_IG03:\r\n       mov      r8d, edx\r\n       sub      r8d, ecx\r\n       cmp      r8d, edx\r\n       jae      SHORT G_M7659_IG05\r\n       movsxd   r8, r8d\r\n       lea      r8, bword ptr [rax+4*r8]\r\n       inc      dword ptr [r8]\r\n       inc      ecx\r\n       cmp      ecx, edx\r\n       jle      SHORT G_M7659_IG03\r\n\r\n;; Findex (with Index ctor changes)\r\n\r\nG_M36427_IG03:\r\n       test     ecx, ecx\r\n       jl       SHORT G_M36427_IG08\r\n\r\nG_M36427_IG04:\r\n       mov      r8d, ecx\r\n       not      r8d\r\n       test     r8d, r8d\r\n       jl       SHORT G_M36427_IG05\r\n       jmp      SHORT G_M36427_IG06\r\n\r\nG_M36427_IG05:\r\n       not      r8d\r\n       mov      r9d, edx\r\n       sub      r9d, r8d\r\n       mov      r8d, r9d\r\n\r\nG_M36427_IG06:\r\n       cmp      r8d, edx\r\n       jae      SHORT G_M36427_IG09\r\n       movsxd   r8, r8d\r\n       lea      r8, bword ptr [rax+4*r8]\r\n       inc      dword ptr [r8]\r\n       inc      ecx\r\n       cmp      ecx, edx\r\n       jle      SHORT G_M36427_IG03\r\n```\r\nRoot cause is that `Index` uses an inverted (~negative) value to encode \"from end\" and the jit can't propagate this from construction down to use.\r\n\r\nRange prop might be the right place to address this  but it currently does not model `not`. But doing that, opts would only kick in when `Index` is used as an array index.\r\n\r\nTentatively putting this in 3.0,but may defer depending on urgency of removing overhead from use of `Index`."},{"Id":"8931648818","Type":"PullRequestEvent","CreatedAt":"2019-01-22T19:40:10","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22085","RelatedDescription":null,"RelatedBody":"Enable back when https://github.com/dotnet/coreclr/issues/22027 is fixed"},{"Id":"8931648625","Type":"PullRequestEvent","CreatedAt":"2019-01-22T19:40:08","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22085","RelatedDescription":"Closed pull request \"Disable JIT/superpmi/superpmicollect test in r2r jobs\" (#22085) at dotnet/coreclr","RelatedBody":"Enable back when https://github.com/dotnet/coreclr/issues/22027 is fixed"},{"Id":"8931647423","Type":"PullRequestEvent","CreatedAt":"2019-01-22T19:39:57","Actor":"erozenfeld","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22088","RelatedDescription":null,"RelatedBody":"AllocateSimpleClassAndCheckTypeNoHelper fails because\r\nthe object is allocated on the heap in R2R mode. The reason for that is\r\nthat we always use a helper for isinst in R2R mode and helper calls\r\ncause us to assume the object escapes.\r\n\r\nWe don't have to use a helper in this case (even for R2R), #22086 tracks\r\nfixing that.\r\n\r\nFor now the fix is not to check that the object was allocated on the stack\r\nin this test case.\r\n\r\nFixes #22026."},{"Id":"8931647188","Type":"PullRequestEvent","CreatedAt":"2019-01-22T19:39:54","Actor":"erozenfeld","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22088","RelatedDescription":"Closed pull request \"Fix R2R failure in one of ObjectStackAllocation tests.\" (#22088) at dotnet/coreclr","RelatedBody":"AllocateSimpleClassAndCheckTypeNoHelper fails because\r\nthe object is allocated on the heap in R2R mode. The reason for that is\r\nthat we always use a helper for isinst in R2R mode and helper calls\r\ncause us to assume the object escapes.\r\n\r\nWe don't have to use a helper in this case (even for R2R), #22086 tracks\r\nfixing that.\r\n\r\nFor now the fix is not to check that the object was allocated on the stack\r\nin this test case.\r\n\r\nFixes #22026."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8931454104","Type":"IssuesEvent","CreatedAt":"2019-01-22T19:07:49","Actor":"firelizzard18","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10644","RelatedDescription":"Opened issue \".NET Core 3.0 SDK preview breaks dependencies\" (#10644) at dotnet/cli","RelatedBody":"I have a project that has `System.Runtime.InteropServices` in its dependency graph. I can't share the \r\nproject itself. Below is part of the `csproj`.\r\n\r\nIf I build this project (on Windows) with .NET Core 2.2 SDK, everything works. If I build it with .NET Core 3.0 SDK (preview), the build artifacts are missing `System.Runtime.InteropServices.dll`, which breaks my application.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net462</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net462' \">\r\n    <Reference Include=\"System.ServiceProcess\" />\r\n    <Reference Include=\"System.Transactions\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Cors\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.Elm\" Version=\"0.2.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Routing\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.HttpSys\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.IISIntegration\" Version=\"2.1.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel\" Version=\"2.1.3\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Portable.BouncyCastle\" Version=\"1.8.4\" />\r\n    <PackageReference Include=\"System.Data.SqlClient\" Version=\"4.6.0\" />\r\n    <PackageReference Include=\"System.Reflection.TypeExtensions\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- lots of <ProjectReference>s -->\r\n  </ItemGroup>\r\n\r\n<Project>\r\n```\r\n\r\n"},{"Id":"8931437893","Type":"IssuesEvent","CreatedAt":"2019-01-22T19:05:07","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10643","RelatedDescription":"Closed issue \"Cannot build a supported target when an unsupported target exists in `<TargetFrameworks>`\" (#10643) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. On Windows, install .NET Core 2.0 SDK and .NET Framework 4.7 SDK\r\n2. `dotnet new console -o test`\r\n3. `cd test`\r\n4. In `test.csproj`, replace `<TargetFramework>...` with `<TargetFrameworks>net47;netcoreapp3.0</TargetFrameworks>`\r\n5. `dotnet build -f net47`\r\n\r\n## Expected  behavior\r\n\r\nThe CLI builds and runs the project using the specified target framework. The fact that there are other valid target frameworks is ignored.\r\n\r\n## Actual behavior\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.6.84.34536 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.104\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(135,5): error : The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\\Source\\temp\\build-test\\build-test.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.104)\r\n\r\nProduct Information:\r\n Version:            2.1.104\r\n Commit SHA-1 hash:  48ec687460\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.104\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n\r\n\r\n\r\n\r\n"},{"Id":"8931412584","Type":"IssuesEvent","CreatedAt":"2019-01-22T19:00:51","Actor":"CreativeHouseDotOrg","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10642","RelatedDescription":"Closed issue \"dotnet command line argument to terminate remaining build processes that are finished but dont exit\" (#10642) at dotnet/cli","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nI'm am trying to `build` and `publish`... but unfortunately there are hanging processes in Task Manager .NET Core Host that lead to a publish error if i try to `dotnet publish`\r\n\r\n### Describe the solution you'd like\r\nI want the Remaining Tasks to close after the build OR publish process has ended.\r\n\r\n### Describe alternatives you've considered\r\nSince now i've been terminating them by hand, it would be good to have a `dotnet <command>` to terminate all open .Net Core Hosts that remain.\r\n\r\n### Additional context\r\n\r\nHere is a Screenshot of the remaining Tasks:\r\n\r\n![1](https://user-images.githubusercontent.com/4038603/51504064-f1e87780-1dde-11e9-8ebd-1424a7654113.PNG)\r\n\r\n![unbenannt](https://user-images.githubusercontent.com/4038603/51504000-9f0ec000-1dde-11e9-8419-0216e6945290.PNG)\r\n\r\n"},{"Id":"8931408332","Type":"IssuesEvent","CreatedAt":"2019-01-22T19:00:13","Actor":"firelizzard18","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10643","RelatedDescription":"Opened issue \"Cannot build a supported target when an unsupported target exists in `<TargetFrameworks>`\" (#10643) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. On Windows, install .NET Core 2.0 SDK and .NET Framework 4.7 SDK\r\n2. `dotnet new console -o test`\r\n3. `cd test`\r\n4. In `test.csproj`, replace `<TargetFramework>...` with `<TargetFrameworks>net47;netcoreapp3.0</TargetFrameworks>`\r\n5. `dotnet build -f net47`\r\n\r\n## Expected  behavior\r\n\r\nThe CLI builds and runs the project using the specified target framework. The fact that there are other valid target frameworks is ignored.\r\n\r\n## Actual behavior\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.6.84.34536 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.104\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(135,5): error : The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\\Source\\temp\\build-test\\build-test.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.104)\r\n\r\nProduct Information:\r\n Version:            2.1.104\r\n Commit SHA-1 hash:  48ec687460\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.104\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n\r\n\r\n\r\n\r\n"},{"Id":"8931332493","Type":"IssuesEvent","CreatedAt":"2019-01-22T18:47:53","Actor":"CreativeHouseDotOrg","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10642","RelatedDescription":"Opened issue \"dotnet command line argument to terminate remaining build processes that are finished but dont exit\" (#10642) at dotnet/cli","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nI'm am trying to `build` and `publish`... but unfortunately there are hanging processes in Task Manager .NET Core Host that lead to a publish error if i try to `dotnet publish`\r\n\r\n### Describe the solution you'd like\r\nI want the Remaining Tasks to close after the build OR publish process has ended.\r\n\r\n### Describe alternatives you've considered\r\nSince now i've been terminating them by hand, it would be good to have a `dotnet <command>` to terminate all open .Net Core Hosts that remain.\r\n\r\n### Additional context\r\n\r\nHere is a Screenshot of the remaining Tasks:\r\n\r\n![1](https://user-images.githubusercontent.com/4038603/51504064-f1e87780-1dde-11e9-8ebd-1424a7654113.PNG)\r\n\r\n![unbenannt](https://user-images.githubusercontent.com/4038603/51504000-9f0ec000-1dde-11e9-8419-0216e6945290.PNG)\r\n\r\n"},{"Id":"8931020271","Type":"IssuesEvent","CreatedAt":"2019-01-22T17:55:49","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10624","RelatedDescription":"Closed issue \"Execute custom action on template, localization bug\" (#10624) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nIn non english environment (for example, spanish), try to create a new project using a template which has custom actions:\r\n\r\n```\r\ndotnet new is4aspid -n TestIS4.IdentityServerAspNetIdentity\r\nLa plantilla \"IdentityServer4 with ASP.NET Core Identity\" se creó correctamente.\r\n\r\nProcesando acciones posteriores...\r\nLa plantilla está configurada para ejecutar la siguiente acción:\r\nDescripción:\r\nInstrucciones manuales: Seeds the initial user database\r\nComando actual: dotnet run /seed\r\n¿Quiere ejecutar esta acción (S|N)?\r\n\r\n```\r\n\r\n## Expected  behavior\r\nAnswering 'S' to question should continue with action execution\r\n\r\n## Actual behavior\r\n'Y' has to be pressed instead of 'S'\r\n```\r\nS\r\nEntrada no válida: \"S\". Debe especificar S o N.\r\nY\r\nEjecutando el comando \"dotnet run /seed\"...\r\nEl comando se ejecutó correctamente.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nSDK de .NET Core (reflejando cualquier global.json):\r\n Version:   2.2.102\r\n Commit:    96ff75a873\r\n\r\nEntorno de tiempo de ejecución:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.102\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"8929163352","Type":"PullRequestEvent","CreatedAt":"2019-01-22T13:34:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10641","RelatedDescription":"Merged pull request \"Update dependencies from dotnet/arcade\" (#10641) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19070.2\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8911604917","Type":"IssuesEvent","CreatedAt":"2019-01-18T13:36:41","Actor":"aday12345","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1054","RelatedDescription":"Closed issue \".net standard 2.1 targeting question\" (#1054) at dotnet/standard","RelatedBody":"i have the .net core 2.2 sdk installed and can target it with no issue, but should i be able to target the netStandard 2.1 library when creating a class library? i only see 2.0 as an option."},{"Id":"8905927178","Type":"IssuesEvent","CreatedAt":"2019-01-17T16:54:08","Actor":"UnreachableCode","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1055","RelatedDescription":"Opened issue \"Android implementation of HTTPClient throwing up java.io.IOException \" (#1055) at dotnet/standard","RelatedBody":"I believe this relates to the bug detailed in Xamarin's old Bugzilla:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41100\r\n\r\nand is also similar to the issue discussed here:\r\nhttps://github.com/square/okhttp/issues/1517\r\n\r\nHere is the main stacktrace of my issue:\r\n\r\nLoginProvider+<LoginAsync>d__1.MoveNext () C:\\source\\repos\\MenziesScanning\\MenziesScanning\\MenziesScanning\\Services\\LoginProvider.cs:35\r\njava.io.IOException: unexpected end of stream on Connection{testclarity.i-menzies.com:443, proxy=DIRECT@ hostAddress=62.244.173.166 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1} (recycle count=0)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\r\ncom.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\r\ncom.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:905)\r\ncom.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:789)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:443)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:388)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:501)\r\ncom.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\r\ncom.android.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\r\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\r\ncom.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\r\n\r\nI have tried setting the connection closed header and setting chunked transfer encoding but neither of these fixes work. I would try to set the OkHTTP.setRetryOnConnectionFailure(true) but I don't think there is a way to do this in the referenced Java source."},{"Id":"8905371229","Type":"IssuesEvent","CreatedAt":"2019-01-17T15:38:49","Actor":"aday12345","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1054","RelatedDescription":"Opened issue \".net standard 2.1 targeting question\" (#1054) at dotnet/standard","RelatedBody":"i have the .net core 2.2 sdk installed and can target it with no issue, but should i be able to target the netStandard 2.1 library when creating a class library? i only see 2.0 as an option."},{"Id":"8903628578","Type":"IssuesEvent","CreatedAt":"2019-01-17T10:59:36","Actor":"gpcaretti","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Closed issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044) at dotnet/standard","RelatedBody":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?"},{"Id":"8900145912","Type":"PullRequestEvent","CreatedAt":"2019-01-16T21:17:04","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Merged pull request \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047) at dotnet/standard","RelatedBody":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8931764740","Type":"PullRequestEvent","CreatedAt":"2019-01-22T19:59:55","Actor":"MarcoRossignoli","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34747","RelatedDescription":"Opened pull request \"Flow Thread.CurrentPrincipal with ExecutionContext\" (#34747) at dotnet/corefx","RelatedBody":"fixes https://github.com/dotnet/corefx/issues/34489\r\n\r\n/cc @jkotas @stephentoub "},{"Id":"8931490398","Type":"IssuesEvent","CreatedAt":"2019-01-22T19:13:43","Actor":"MarcoRossignoli","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/34745","RelatedDescription":"Closed issue \"Possible bug on AppDomain.CurrentDomain.SetPrincipalPolicy\" (#34745) at dotnet/corefx","RelatedBody":"I'm working on https://github.com/dotnet/corefx/issues/34489 https://github.com/dotnet/corefx/compare/master...MarcoRossignoli:executioncontext\r\nI did some tests on `AppDomain.CurrentDomain.SetPrincipalPolicy` and I found different behaviour between netfx and netcore\r\n```cs\r\n        private static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\".NET Full \" + typeof(object).Assembly.Location);\r\n            AppDomain.CurrentDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal);\r\n            Console.WriteLine(Thread.CurrentPrincipal);\r\n            Thread.CurrentPrincipal = new ClaimsPrincipal();\r\n            Console.WriteLine(Thread.CurrentPrincipal);\r\n            Thread.CurrentPrincipal = null;\r\n            Console.WriteLine(Thread.CurrentPrincipal);\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\".NET Core \" + typeof(object).Assembly.Location);\r\n            AppDomain.CurrentDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal);\r\n            Console.WriteLine(Thread.CurrentPrincipal);\r\n            Thread.CurrentPrincipal = new ClaimsPrincipal();\r\n            Console.WriteLine(Thread.CurrentPrincipal);\r\n            Thread.CurrentPrincipal = null;\r\n            Console.WriteLine(Thread.CurrentPrincipal);\r\n        }\r\n```\r\noutcome\r\n```\r\n.NET Full C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\mscorlib.dll\r\nSystem.Security.Principal.GenericPrincipal\r\nSystem.Security.Claims.ClaimsPrincipal\r\nSystem.Security.Principal.GenericPrincipal\r\nPress any key to continue . . .\r\n\r\n.NET Core C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\2.2.1\\System.Private.CoreLib.dll\r\n\r\nSystem.Security.Claims.ClaimsPrincipal\r\n\r\nPress any key to continue . . .\r\n```\r\nThe same for `PrincipalPolicy.WindowsPrincipal` \r\nAm I missing something?\r\n\r\nThis PR should introduce new behaviour https://github.com/dotnet/corefx/commit/6fb57a4bfe4504b60b3af769798b96ba15e6c842#diff-e17a6ed29a0800366d75c1548f5bbd5f\r\n\r\n/cc @jkotas @Anipik "},{"Id":"8931420009","Type":"IssuesEvent","CreatedAt":"2019-01-22T19:02:03","Actor":"terrajobst","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33717","RelatedDescription":"Closed issue \"Allow recovering writable/heapable buffers from \"lower level\" types.\" (#33717) at dotnet/corefx","RelatedBody":"Thanks to @ChadNedzlek for the \"why can't you?\" as a followup to the \"how many copies of this?\" do we need from  #31011 and #26528:\r\n\r\nThe general idea is that when using utility methods that \"downcast\" from Memory toward ReadOnlySpan, a caller can recover their writable (and/or heapable) needs operating on the same memory range.  This means that for cases where writable doesn't feel very common (or heapable doesn't feel very common) the caller has a common \"how do I slice my original data to match?\" escape valve; and frameworks can fill in the {ReadOnly|}{Memory|Span} matrix as needed by scenario usage (for the places that the performance memory.Span twice is unacceptable).\r\n\r\n```C#\r\npublic partial struct Span<T>\r\n{\r\n    /// <summary>\r\n    /// Get a slice of this (writable) span which has the same start and length as a\r\n    /// contained readonly span.\r\n    /// </summary>\r\n    /// <remarks>\r\n    /// If containedSpan is empty, the behavior is the same as Slice(0, 0).\r\n    /// </remarks>\r\n    /// <exception cref=\"ArgumentOutOfRangeException\">containedSpan is not a sub-span of this span</exception>\r\n    public Span<T> SliceTo(ReadOnlySpan<T> containedSpan);\r\n}\r\n\r\npublic partial struct ReadOnlyMemory<T>\r\n{\r\n    /// <summary>\r\n    /// Get a slice of this memory which has the same start and length as a span over the\r\n    /// same memory\r\n    /// </summary>\r\n    /// <remarks>\r\n    /// If containedSpan is empty, the behavior is the same as Slice(0, 0).\r\n    /// </remarks>\r\n    /// <exception cref=\"ArgumentOutOfRangeException\">\r\n    /// containedSpan is not a sub-span of this span\r\n    /// </exception>\r\n    public ReadOnlyMemory<T> SliceTo(ReadOnlySpan<T> containedSpan);\r\n}\r\n\r\npublic partial struct Memory<T>\r\n{\r\n    /// <summary>\r\n    /// Get a slice of this memory which has the same start and length as a span\r\n    /// over the same memory\r\n    /// </summary>\r\n    /// <remarks>\r\n    /// If containedSpan is empty, the behavior is the same as Slice(0, 0).\r\n    /// </remarks>\r\n    /// <exception cref=\"ArgumentOutOfRangeException\">containedSpan is\r\n    /// not a sub-span of this span</exception>\r\n    public Memory<T> SliceTo(ReadOnlySpan<T> containedSpan);\r\n\r\n    /// <summary>\r\n    /// Get a slice of this (writable) memory which has the same start and length\r\n    /// as a contained readonly memory.\r\n    /// </summary>\r\n    /// <remarks>\r\n    /// If containedSpan is empty, the behavior is the same as Slice(0, 0).\r\n    /// </remarks>\r\n    /// <exception cref=\"ArgumentOutOfRangeException\">containedSpan is\r\n    /// not a sub-span of this span</exception>\r\n    public Memory<T> SliceTo(ReadOnlyMemory<T> containedSpan);\r\n}\r\n```\r\n\r\nSample usage for Split:\r\n\r\n```C#\r\nSpan<byte> data = ...;\r\n\r\nforeach (ReadOnlySpan<byte> segment in ((ReadOnlySpan<byte>)data).Split(0xFF))\r\n{\r\n    Span<byte> writableSegment = data.SliceTo(segment);\r\n    writableSegment.Clear();\r\n}\r\n```\r\n\r\nCC: @stephentoub @GrabYourPitchforks @terrajobst @ahsonkhan @KrzysztofCwalina "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8931762016","Type":"IssuesEvent","CreatedAt":"2019-01-22T19:59:27","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32676","RelatedDescription":"Opened issue \"Cannot build latest roslyn\" (#32676) at dotnet/roslyn","RelatedBody":"I'm getting:\r\n\r\n```\r\n1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(126,5): error : The current .NET SDK does not support targeting .NET Standard 2.0.  Either target .NET Standard 1.6 or lower, or use a version of the .NET SDK that supports .NET Standard 2.0.\r\n```\r\n"},{"Id":"8931408165","Type":"PullRequestEvent","CreatedAt":"2019-01-22T19:00:12","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32675","RelatedDescription":"Opened pull request \"Add bail out cases for unused members analyzer\" (#32675) at dotnet/roslyn","RelatedBody":"1. Usages as an argument to `nameof`: We have multiple reports of these being false positives in presence of reflection based usages and in variour test frameworks. Fixes #32488.\r\n2. Presence of 'dynamic' in C# - Conservatively bail out in presence of any dynamic operations. Fixes #32522."},{"Id":"8931327677","Type":"IssuesEvent","CreatedAt":"2019-01-22T18:47:07","Actor":"kingces95","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22183","RelatedDescription":"Closed issue \"Script to Reset Roslyn Experimental Instance\" (#22183) at dotnet/roslyn","RelatedBody":"I expect that after a fix has been submitted to correct a bug which corrupts the Roslyn VS 2017 experimental instance (see https://github.com/dotnet/roslyn/issues/22091), that there will exist a script contributors can run to reset their experimental instances to a clean state. And in so doing, when they sync, rebuild and deploy with the fix, then the experimental instance will launch. \r\n\r\nActually, I don't find such a script and trying a few remedies from the web did not allow me to successfully launch my experimental instance (and create a new project). "}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8931422516","Type":"PullRequestEvent","CreatedAt":"2019-01-22T19:02:28","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6867","RelatedDescription":"Opened pull request \"Ldvirtftn support for CPAOT\" (#6867) at dotnet/corert","RelatedBody":"Support for loading virtual delegates, plus splitting `getCallInfo` into a ReadyToRun specific implementation.\r\n\r\nIt will be easier to look at the commit diff for the ldvirtftn fix so the JIT interface changes aren't lost in the refactor."},{"Id":"8929110969","Type":"PullRequestEvent","CreatedAt":"2019-01-22T13:26:19","Actor":"filipnavara","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6866","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6866) at dotnet/corert","RelatedBody":"#6865 + build fixes."},{"Id":"8928999551","Type":"PullRequestEvent","CreatedAt":"2019-01-22T13:08:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6863","RelatedDescription":"Merged pull request \"Unify IL readers\" (#6863) at dotnet/corert","RelatedBody":"`ILReader` added in #6849 can be used in `ILStreamReader`, saving us 100 lines of code."},{"Id":"8928723683","Type":"PullRequestEvent","CreatedAt":"2019-01-22T12:19:54","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6865","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6865) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8928228139","Type":"PullRequestEvent","CreatedAt":"2019-01-22T10:52:24","Actor":"tonerdo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6725","RelatedDescription":"Closed pull request \"[Interpreter] Branching\" (#6725) at dotnet/corert","RelatedBody":"This PR adds support for the following opcodes:\r\n\r\n* br*\r\n* switch\r\n\r\nThe positive impact of this is that, interpreted assemblies can now be built in Debug mode\r\n\r\ncc @jkotas @MichalStrehovsky \r\n\r\nPS: Merry Christmas 🎉 "},{"Id":"8928225229","Type":"PullRequestEvent","CreatedAt":"2019-01-22T10:51:54","Actor":"tonerdo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6864","RelatedDescription":"Opened pull request \"[Interpreter] Branching\" (#6864) at dotnet/corert","RelatedBody":"This PR adds support for the following opcodes:\r\n\r\n* br*\r\n* switch\r\n\r\nA positive side effect of this is that interpreted assemblies can now be built in Debug mode.\r\n\r\nSupersedes #6725 "},{"Id":"8927755005","Type":"PullRequestEvent","CreatedAt":"2019-01-22T09:38:17","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6863","RelatedDescription":"Opened pull request \"Unify IL readers\" (#6863) at dotnet/corert","RelatedBody":"`ILReader` added in #6849 can be used in `ILStreamReader`, saving us 100 lines of code."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8931632302","Type":"IssuesEvent","CreatedAt":"2019-01-22T19:37:20","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1302","RelatedDescription":"Closed issue \"Long path error in symbols generation of dotnet store\" (#1302) at dotnet/sdk","RelatedBody":"From the offline discussion there seem to be a race condition during the copy of crossgen pdb to the staging dir. This produces errors like:\r\n```\r\n    Error generating PDB for 'C:\\gh\\MetaPackages2\\src\\Microsoft.AspNetCore.RuntimeStore\\bin\\work\\Build.RuntimeStore.References_2.0.0--\\runtimopt\\Microsoft.AspNetCore.Authentication.Abstractions.dll': Unspecified error (Exception from HRESULT: 0x80004005 (E_FAIL))\r\nEXEC : error : compilation failed for \"C:\\gh\\MetaPackages2\\src\\Microsoft.AspNetCore.RuntimeStore\\bin\\work\\Build.RuntimeStore.References_2.0.0--\\runtimopt\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" (0x80004005) [C:\\gh\\MetaPackages2\\src\\Microsoft.AspNetCore.RuntimeStore\\bin\\work\\Restore.csproj] [C:\\gh\\MetaPackages2\\.build\\KoreBuild.proj]\r\nC:\\Users\\johluo\\.dotnet\\x64\\sdk\\2.0.0-preview2-006215\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.CrossGen.targets(162,5): error MSB3073: The command \"C:\\Users\\johluo\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\2.0.0-preview2-25401-01\\tools\\crossgen.exe -readytorun -platform_assemblies_paths C:\\gh\\MetaPackages2\\src\\Microsoft.AspNetCore.RuntimeStore\\bin\\work\\Build.RuntimeStore.References_2.0.0--\\runtimeref;C:\\gh\\MetaPackages2\\src\\Microsoft.AspNetCore.RuntimeStore\\bin\\work\\Optimize\\netcoreapp -CreatePDB C:\\gh\\MetaPackages2\\src\\Microsoft.AspNetCore.RuntimeStore\\bin\\work\\Build.RuntimeStore.References_2.0.0--\\runtimesymbols\\microsoft.aspnetcore.authentication.abstractions\\2.0.0-preview3-25366\\lib\\netstandard2.0 C:\\gh\\MetaPackages2\\src\\Microsoft.AspNetCore.RuntimeStore\\bin\\work\\Build.RuntimeStore.References_2.0.0--\\runtimopt\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" exited with code -2147467259. [C:\\gh\\MetaPackages2\\src\\Microsoft.AspNetCore.RuntimeStore\\bin\\work\\Restore.csproj] [C:\\gh\\MetaPackages2\\.build\\KoreBuild.proj]\r\n```\r\n\r\nWe found this during our metapackage build https://github.com/aspnet/metapackages. Steps to repro:\r\n1. Set environment variable PACKAGE_CACHE_PLATFORM=x64\r\n2. Set environment variable BuildNumber=final\r\n3. run ./build.cmd /t:BuildPackageCache\r\n\r\nThis is blocking our cross-gen'ed symbols generation for preview2.\r\n\r\ncc @ramarag @eerhardt @bleroy @Eilon "},{"Id":"8931218226","Type":"IssuesEvent","CreatedAt":"2019-01-22T18:28:29","Actor":"cdmihai","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2855","RelatedDescription":"Opened issue \"Cannot build with DisableTransitiveProjectReferences=true\" (#2855) at dotnet/sdk","RelatedBody":"Given a graph with projects that do not have compile time dependencies on the transitive projects, it should be able to build the graph without injecting transitive project references into each project.\r\n\r\nRepro:\r\n[new-xtarget-3.zip](https://github.com/dotnet/sdk/files/2784102/new-xtarget-3.zip)\r\nThe zip has a graph like 1->2->3. Running with `DisableTransitiveProjectReferences=true` gives the following results:\r\n\r\n```\r\n\"E:\\projects\\MSBuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\1\\1.csproj\" (default target) (1) ->\r\n\"E:\\projects\\MSBuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\1\\1.csproj\" (Build target) (1:2) ->\r\n(GenerateBuildDependencyFile target) ->\r\n  C:\\Program Files\\dotnet\\sdk\\2.2.200-preview-009748\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(129,5): error NETSDK1007: Cannot find project info for 'E:\\projects\\MSB \r\nuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\3\\3.csproj'. This can indicate a missing project reference. [E:\\projects\\MSBuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\1 \r\n\\1.csproj]\r\n```\r\n\r\nFailing binlog: \r\n[failing.zip](https://github.com/dotnet/sdk/files/2784113/failing.zip)\r\n\r\n\r\n\r\n\r\n"},{"Id":"8930908829","Type":"PullRequestEvent","CreatedAt":"2019-01-22T17:37:23","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2850","RelatedDescription":"Merged pull request \"Fix failure when using evaluation API to evaluate multi-targeted projects\" (#2850) at dotnet/sdk","RelatedBody":"Follow nearby pattern to guard against undefined _TargetFrameworkVersionWithoutV"},{"Id":"8929118973","Type":"IssuesEvent","CreatedAt":"2019-01-22T13:27:35","Actor":"m0sa","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2854","RelatedDescription":"Opened issue \"Make multi-targeting constants local properties\" (#2854) at dotnet/sdk","RelatedBody":"The `DefineConstants` properties for multi targeting builds are a bit confusing, since they are global and not local. This means that if there is a custom `-p:DefineConstants=WHATEVER` on the command line, the multi targeting constants won't get added.\r\n\r\nWhat I'm asking here is to add a `TreatAsLocalProperty=\"DefineConstants\"` to Microsoft.NET.Sdk.CSharp.targets, (and possibly other .target / .props files where `DefineConstants` gets updated), so that it works consistently when the consuming build modifies it via a PropertyGroup as well as via command line args.\r\n\r\n---\r\n\r\nLet me elaborate. We have an old non-SDK style solution that we are gradually refactoring into AspNetCore and SDK-style. We were confronted with the build on the CI server failing miserably, because the target framework constants weren't defined during the build (e.g. `#if NET462` and `#if NETCOREAPP2_2` were not working as expected). Turned out that we had some build configurations passing in a custom `DefineConstants` property. As this property [is global](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-properties?view=vs-2017#global-properties), [this line Microsoft.NET.Sdk.CSharp.targets](https://github.com/dotnet/sdk/blob/006bb6ddaf2a3997ddd25f000fae968e9233fe93/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.CSharp.targets#L35) does not work like a *non-msbuild expert would* would expect from reading it. It took us multiple days of digging through MSBuildBinLog. We did skim over the SDK.CSharp.targets, as it was seemingly not doing what it was supposed to do, but it looked OK at first glance.\r\n\r\nAdding to the confusion was the fact that if you add a custom `<PropertyGroup><DefineConstants>WHATEVER</DefineConstants></PropertyGroup>`, it gets concatenated, and not overridden.\r\n\r\nIdeally, it would behave the same way (concatenate the existing  value) when it gets passed in via the command line arg.\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"open","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Open PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"401930891","IsPullRequest":false,"CreatedAt":"2019-01-22T20:03:22","Actor":"AndyAyersMS","Number":"22130","RawContent":null,"Title":"JIT: Index use can't be completely optimized away","State":"open","Body":"In the following example we'd like the jit to produce the same (or very similar code) for both `Fint` and `Findex`:\r\n```C#\r\nusing System;\r\n\r\nclass X\r\n{\r\n    public static void Fint(Span<int> c)\r\n    {\r\n        for (int i = 1; i <= c.Length; i++)\r\n        {\r\n            c[c.Length - i] += 1;\r\n        }\r\n    }\r\n\r\n    public static void Findex(Span<int> c)\r\n    {\r\n        for (int i = 1; i <= c.Length; i++)\r\n        {\r\n            c[new Index(i, fromEnd: true)] += 1;\r\n        }\r\n    }\r\n}\r\n```\r\nHowever currently the `Index` ctor won't inline (see #22079) and the IL is not jit-friendly. If we revise it and then force it to inline, we still see some codegen deficiencies:\r\n```asm\r\n;; Fint\r\n\r\nG_M7659_IG03:\r\n       mov      r8d, edx\r\n       sub      r8d, ecx\r\n       cmp      r8d, edx\r\n       jae      SHORT G_M7659_IG05\r\n       movsxd   r8, r8d\r\n       lea      r8, bword ptr [rax+4*r8]\r\n       inc      dword ptr [r8]\r\n       inc      ecx\r\n       cmp      ecx, edx\r\n       jle      SHORT G_M7659_IG03\r\n\r\n;; Findex (with Index ctor changes)\r\n\r\nG_M36427_IG03:\r\n       test     ecx, ecx\r\n       jl       SHORT G_M36427_IG08\r\n\r\nG_M36427_IG04:\r\n       mov      r8d, ecx\r\n       not      r8d\r\n       test     r8d, r8d\r\n       jl       SHORT G_M36427_IG05\r\n       jmp      SHORT G_M36427_IG06\r\n\r\nG_M36427_IG05:\r\n       not      r8d\r\n       mov      r9d, edx\r\n       sub      r9d, r8d\r\n       mov      r8d, r9d\r\n\r\nG_M36427_IG06:\r\n       cmp      r8d, edx\r\n       jae      SHORT G_M36427_IG09\r\n       movsxd   r8, r8d\r\n       lea      r8, bword ptr [rax+4*r8]\r\n       inc      dword ptr [r8]\r\n       inc      ecx\r\n       cmp      ecx, edx\r\n       jle      SHORT G_M36427_IG03\r\n```\r\nRoot cause is that `Index` uses an inverted (~negative) value to encode \"from end\" and the jit can't propagate this from construction down to use.\r\n\r\nRange prop might be the right place to address this  but it currently does not model `not`. But doing that, opts would only kick in when `Index` is used as an array index.\r\n\r\nTentatively putting this in 3.0,but may defer depending on urgency of removing overhead from use of `Index`.","Url":"https://github.com/dotnet/coreclr/issues/22130","RelatedDescription":"Open issue \"JIT: Index use can't be completely optimized away\" (#22130)"},{"Id":"401883538","IsPullRequest":true,"CreatedAt":"2019-01-22T17:55:48","Actor":"franksinankaya","Number":"22129","RawContent":null,"Title":"Coreclr gnuport","State":"open","Body":"This is an attempt to port PAL layer to GNU compiler. The rest will follow later.","Url":"https://github.com/dotnet/coreclr/pull/22129","RelatedDescription":"Open PR \"Coreclr gnuport\" (#22129)"},{"Id":"401161352","IsPullRequest":false,"CreatedAt":"2019-01-22T17:43:18","Actor":"VincentBu","Number":"22107","RawContent":null,"Title":"[x86] Index out of range exception in x86_checked_windows_nt_corefx","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_baseline/721/\r\n\r\n**Failed jobs:**\r\nSystem.Runtime.InteropServices.Tests.ArrayWithOffsetTests.Ctor_Array_Offset\r\n\r\n**Log:**\r\n```\r\nSystem.Runtime.InteropServices.Tests.ArrayWithOffsetTests.Ctor_Array_Offset(array: [0, 0], offset: -1, expectedHashCode: 8) [FAIL]\r\n        System.IndexOutOfRangeException : ArrayWithOffset: offset exceeds array size.\r\n        Stack Trace:\r\n             at System.Runtime.InteropServices.ArrayWithOffset..ctor(Object array, Int32 offset)\r\n          D:\\j\\workspace\\x86_checked_w---fbe14ed2\\_\\fx\\src\\System.Runtime.InteropServices\\tests\\System\\Runtime\\InteropServices\\ArrayWithOffsetTests.cs(25,0): at System.Runtime.InteropServices.Tests.ArrayWithOffsetTests.Ctor_Array_Offset(Object array, Int32 offset, Int32 expectedHashCode)\r\n    Finished:    System.Runtime.InteropServices.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.Runtime.InteropServices.Tests  Total: 1650, Errors: 0, Failed: 1, Skipped: 0, Time: 11.631s\r\n  ----- end 10:49:10.88 ----- exit code 1 ----------------------------------------------------------\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22107","RelatedDescription":"Closed issue \"[x86] Index out of range exception in x86_checked_windows_nt_corefx\" (#22107)"},{"Id":"401871327","IsPullRequest":false,"CreatedAt":"2019-01-22T17:24:05","Actor":"AndyAyersMS","Number":"22128","RawContent":null,"Title":"Regressions from switching corelib to R2R","State":"open","Body":"We have enough perf history now that we can call out a few regressions from #21497, where corelib prejitting was changed from fragile ngen to R2R.\r\n\r\nCrypto regressed ~4% on windows (505 -> 525) and ~6% on linux (515 -> 545)\r\n\r\n![image](https://user-images.githubusercontent.com/10121823/51552537-a0afa680-1e25-11e9-939e-e2dc80a6c3da.png)\r\n\r\nCsc/Dataflow regressed ~5% on windows (413 -> 432) and ~5% on linux (450 -> 470, noisy)\r\n\r\n![image](https://user-images.githubusercontent.com/10121823/51552694-fd12c600-1e25-11e9-9df6-23e5bc9d75fa.png)\r\n\r\nPerfLab / GetMethod20 regressed ~7% (3.52 -> 3.72). The other GetMethod tests regressed as well.\r\n\r\n![image](https://user-images.githubusercontent.com/10121823/51553153-051f3580-1e27-11e9-952a-d7109e640b59.png)\r\n\r\nThere may be some other cases that turn up -- will add them here.\r\n\r\ncc @fadimounir ","Url":"https://github.com/dotnet/coreclr/issues/22128","RelatedDescription":"Open issue \"Regressions from switching corelib to R2R\" (#22128)"},{"Id":"401401726","IsPullRequest":true,"CreatedAt":"2019-01-22T17:09:31","Actor":"MichalStrehovsky","Number":"22116","RawContent":null,"Title":"Restrict HW intrinsic name check to intrinsic types","State":"closed","Body":"Avoids having to compare names of all types in CoreLib to see if they're HW intrinsics.","Url":"https://github.com/dotnet/coreclr/pull/22116","RelatedDescription":"Closed or merged PR \"Restrict HW intrinsic name check to intrinsic types\" (#22116)"},{"Id":"401721036","IsPullRequest":true,"CreatedAt":"2019-01-22T17:08:31","Actor":"MichalStrehovsky","Number":"22126","RawContent":null,"Title":"Do not throw from TraceResolver","State":"closed","Body":"Fixes #22059.","Url":"https://github.com/dotnet/coreclr/pull/22126","RelatedDescription":"Closed or merged PR \"Do not throw from TraceResolver\" (#22126)"},{"Id":"401759996","IsPullRequest":true,"CreatedAt":"2019-01-22T13:17:24","Actor":"benaadams","Number":"22127","RawContent":null,"Title":"[WIP] Speedup .SequenceCompareTo(byte, ...)","State":"open","Body":"Last commit https://github.com/dotnet/coreclr/pull/22127/commits/342cbe42860b92c6b1a89ab26beda2440bee46a2 added on https://github.com/dotnet/coreclr/pull/22118 for `.SequenceCompareTo(byte, ...)`\r\n\r\nWill rebase when/if https://github.com/dotnet/coreclr/pull/22118 is merged\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/22078\r\n\r\n/cc @CarolEidt @fiigii @tannergooding @ahsonkhan","Url":"https://github.com/dotnet/coreclr/pull/22127","RelatedDescription":"Open PR \"[WIP] Speedup .SequenceCompareTo(byte, ...)\" (#22127)"},{"Id":"401145046","IsPullRequest":true,"CreatedAt":"2019-01-22T12:16:46","Actor":"filipnavara","Number":"22104","RawContent":null,"Title":"Move MemoryFailPoint to shared CoreLib partition","State":"closed","Body":"Contributes to #17904 and #21932.","Url":"https://github.com/dotnet/coreclr/pull/22104","RelatedDescription":"Closed or merged PR \"Move MemoryFailPoint to shared CoreLib partition\" (#22104)"},{"Id":"401613908","IsPullRequest":true,"CreatedAt":"2019-01-22T12:15:33","Actor":"Dotnet-GitSync-Bot","Number":"22122","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/coreclr/pull/22122","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#22122)"},{"Id":"401699965","IsPullRequest":false,"CreatedAt":"2019-01-22T10:36:47","Actor":"filipnavara","Number":"22125","RawContent":null,"Title":"CI aborts on x64_checked_osx10.12_innerloop_prtest","State":"open","Body":"This seems to happen very often now:\r\n\r\n```\r\n22:14:20 GitHub pull request #22122 of commit 51d44ce33ab82c23bbc3fbb9e1a28c9a35bc319a, no merge conflicts.\r\n22:14:21 Setting status of 51d44ce33ab82c23bbc3fbb9e1a28c9a35bc319a to PENDING with url https://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_osx10.12_innerloop_flow_prtest/12313/ and message: 'Started.'\r\n22:14:21 Using context: OSX10.12 x64 Checked Innerloop Build and Test\r\n22:14:21 Building remotely on OSX.1012.Amd64.Open-0121211312163-0 (dci-mac-build-082.local) (OSX.1012.Amd64.Open) in workspace /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/x64_checked_osx10.12_innerloop_flow_prtest@2\r\n22:14:21 [WS-CLEANUP] Deleting project workspace...\r\n22:14:21 [WS-CLEANUP] Done\r\n22:14:21 Selected Git installation does not exist. Using Default\r\n22:14:21 Cloning the remote Git repository\r\n22:14:21 Cloning repository https://github.com/dotnet/coreclr\r\n22:14:21  > git init /Users/dotnet-bot/j/workspace/dotnet_coreclr/master/x64_checked_osx10.12_innerloop_flow_prtest@2 # timeout=10\r\n22:14:21 Fetching upstream changes from https://github.com/dotnet/coreclr\r\n22:14:21  > git --version # timeout=10\r\n22:14:21  > git fetch --tags --progress https://github.com/dotnet/coreclr +refs/heads/*:refs/remotes/origin/* # timeout=90\r\n22:16:12  > git config remote.origin.url https://github.com/dotnet/coreclr # timeout=10\r\n22:16:12  > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10\r\n22:16:12  > git config remote.origin.url https://github.com/dotnet/coreclr # timeout=10\r\n22:16:12 Fetching upstream changes from https://github.com/dotnet/coreclr\r\n22:16:12  > git fetch --tags --progress https://github.com/dotnet/coreclr +refs/pull/22122/*:refs/remotes/origin/pr/22122/* # timeout=90\r\n22:16:14  > git rev-parse refs/remotes/origin/pr/22122/merge^{commit} # timeout=10\r\n22:16:14  > git rev-parse refs/remotes/origin/origin/pr/22122/merge^{commit} # timeout=10\r\n22:16:14 JENKINS-19022: warning: possible memory leak due to Git plugin usage; see: https://wiki.jenkins-ci.org/display/JENKINS/Remove+Git+Plugin+BuildsByBranch+BuildData\r\n22:16:14 Checking out Revision 36e9b0b7142f9909b228284240949cfffca09303 (refs/remotes/origin/pr/22122/merge)\r\n22:16:14 Commit message: \"Merge 51d44ce33ab82c23bbc3fbb9e1a28c9a35bc319a into 5c9febf6346f90c06e70b3cb9e002300e50fa54b\"\r\n22:16:14  > git config core.sparsecheckout # timeout=10\r\n22:16:14  > git checkout -f 36e9b0b7142f9909b228284240949cfffca09303\r\n22:16:50 First time build. Skipping changelog.\r\n22:16:50 Schedule job dotnet_coreclr » master » x64_checked_osx10.12_innerloop_prtest\r\n22:21:18 Build dotnet_coreclr » master » x64_checked_osx10.12_innerloop_prtest #11048 started\r\n00:44:25 dotnet_coreclr » master » x64_checked_osx10.12_innerloop_prtest #11048 completed  : ABORTED\r\n00:44:25 Setting status of 51d44ce33ab82c23bbc3fbb9e1a28c9a35bc319a to FAILURE with url https://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_osx10.12_innerloop_flow_prtest/12313/ and message: 'Build finished. '\r\n00:44:25 Using context: OSX10.12 x64 Checked Innerloop Build and Test\r\n00:44:25 ERROR: Step ‘Delete workspace when build is done’ failed: no workspace for dotnet_coreclr/master/x64_checked_osx10.12_innerloop_flow_prtest #12313\r\n00:44:25 ERROR: Step ‘Delete workspace when build is done’ failed: no workspace for dotnet_coreclr/master/x64_checked_osx10.12_innerloop_flow_prtest #12313\r\n00:44:25 Finished: ABORTED\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_osx10.12_innerloop_flow_prtest/12313/console\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_osx10.12_innerloop_flow_prtest/12320/console\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_osx10.12_innerloop_flow_prtest/12321/console","Url":"https://github.com/dotnet/coreclr/issues/22125","RelatedDescription":"Open issue \"CI aborts on x64_checked_osx10.12_innerloop_prtest\" (#22125)"},{"Id":"401653329","IsPullRequest":false,"CreatedAt":"2019-01-22T08:40:31","Actor":"joperator","Number":"22124","RawContent":null,"Title":".NET Core apps and some dotnet commands freeze with no output on FreeBSD 12.0","State":"open","Body":"I've published and run .NET Core apps on FreeBSD 11.2 with the .NET Core 3.0 SDKs for Windows and FreeBSD provided by the daily builds.\r\nBut I can't get it work on FreeBSD 12.0 because .NET Core apps just freeze with no output. Even dotnet commands like dotnet --help, --info and publish freeze with no output, whereas dotnet --list-sdks and --list-runtimes work as expected.","Url":"https://github.com/dotnet/coreclr/issues/22124","RelatedDescription":"Open issue \".NET Core apps and some dotnet commands freeze with no output on FreeBSD 12.0\" (#22124)"},{"Id":"401634542","IsPullRequest":false,"CreatedAt":"2019-01-22T07:38:45","Actor":"xoofx","Number":"22123","RawContent":null,"Title":"RuntimeHelpers.PrepareMethod with tiered compilation?","State":"open","Body":"Hey,\r\n\r\nJust a small question regarding the behavior of `RuntimeHelpers.PrepareMethod` in the presence of tiered compilation: Does it assume max optimizations or it generates only the thunk jump code?","Url":"https://github.com/dotnet/coreclr/issues/22123","RelatedDescription":"Open issue \"RuntimeHelpers.PrepareMethod with tiered compilation?\" (#22123)"},{"Id":"401543388","IsPullRequest":true,"CreatedAt":"2019-01-22T03:28:14","Actor":"marek-safar","Number":"22120","RawContent":null,"Title":"Move TplEtwProvider to shared partition","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22120","RelatedDescription":"Closed or merged PR \"Move TplEtwProvider to shared partition\" (#22120)"},{"Id":"401515649","IsPullRequest":true,"CreatedAt":"2019-01-22T02:56:55","Actor":"stephentoub","Number":"22119","RawContent":null,"Title":"Remove two unnecessary ToArray calls","State":"closed","Body":"We can just copy directly from the List, rather than first converting the list to an array and then copying that.","Url":"https://github.com/dotnet/coreclr/pull/22119","RelatedDescription":"Closed or merged PR \"Remove two unnecessary ToArray calls\" (#22119)"},{"Id":"401567464","IsPullRequest":false,"CreatedAt":"2019-01-22T01:56:48","Actor":"AriNuer","Number":"22121","RawContent":null,"Title":"[arm64\\windows] Build failed with error CS1061","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstress1_bld/29/\r\n\r\n**Failed log:**\r\n```\r\nJsonTestHelper.cs(219,112): error CS1061: 'Utf8JsonReader' does not contain a definition for 'GetStringValue' and no accessible extension method 'GetStringValue' accepting a first argument of type 'Utf8JsonReader' could be found (are you missing a using directive or an assembly reference?) [D:\\j\\workspace\\arm64_cross_c---ed9c69c9\\_\\fx\\src\\System.Text.Json\\tests\\System.Text.Json.Tests.csproj]\r\nJsonTestHelper.cs(228,112): error CS1061: 'Utf8JsonReader' does not contain a definition for 'GetStringValue' and no accessible extension method 'GetStringValue' accepting a first argument of type 'Utf8JsonReader' could be found (are you missing a using directive or an assembly reference?) [D:\\j\\workspace\\arm64_cross_c---ed9c69c9\\_\\fx\\src\\System.Text.Json\\tests\\System.Text.Json.Tests.csproj]\r\nUtf8JsonReaderTests.TryGet.cs(677,43): error CS1061: 'Utf8JsonReader' does not contain a definition for 'GetStringValue' and no accessible extension method 'GetStringValue' accepting a first argument of type 'Utf8JsonReader' could be found (are you missing a using directive or an assembly reference?) [D:\\j\\workspace\\arm64_cross_c---ed9c69c9\\_\\fx\\src\\System.Text.Json\\tests\\System.Text.Json.Tests.csproj]\r\nUtf8JsonReaderTests.TryGet.cs(681,50): error CS1061: 'Utf8JsonReader' does not contain a definition for 'GetStringValue' and no accessible extension method 'GetStringValue' accepting a first argument of type 'Utf8JsonReader' could be found (are you missing a using directive or an assembly reference?) [D:\\j\\workspace\\arm64_cross_c---ed9c69c9\\_\\fx\\src\\System.Text.Json\\tests\\System.Text.Json.Tests.csproj]\r\nUtf8JsonReaderTests.TryGet.cs(724,39): error CS1061: 'Utf8JsonReader' does not contain a definition for 'GetStringValue' and no accessible extension method 'GetStringValue' accepting a first argument of type 'Utf8JsonReader' could be found (are you missing a using directive or an assembly reference?) [D:\\j\\workspace\\arm64_cross_c---ed9c69c9\\_\\fx\\src\\System.Text.Json\\tests\\System.Text.Json.Tests.csproj]\r\nUtf8JsonReaderTests.TryGet.cs(757,47): error CS1061: 'Utf8JsonReader' does not contain a definition for 'GetStringValue' and no accessible extension method 'GetStringValue' accepting a first argument of type 'Utf8JsonReader' could be found (are you missing a using directive or an assembly reference?) [D:\\j\\workspace\\arm64_cross_c---ed9c69c9\\_\\fx\\src\\System.Text.Json\\tests\\System.Text.Json.Tests.csproj]\r\n    0 Warning(s)\r\n    6 Error(s)\r\n\r\nTime Elapsed 00:03:41.49\r\nBuild failed.\r\n[D:\\j\\workspace\\arm64_cross_c---ed9c69c9\\tests\\scripts\\run-corefx-tests.py]: Error: exit code 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22121","RelatedDescription":"Open issue \"[arm64\\windows] Build failed with error CS1061\" (#22121)"},{"Id":"401175974","IsPullRequest":true,"CreatedAt":"2019-01-21T21:20:19","Actor":"stephentoub","Number":"22111","RawContent":null,"Title":"Avoid intermediate strings in some StringBuilder formatting","State":"closed","Body":"Several appends to string builders are first creating strings and then appending those strings, and they're not using the existing Append(primitive) overloads because they want to customize the format string or provider as part of appending the value.  This fixes a few of those cases, using another internal AppendSpanFormattable overload on StringBuilder.\r\n\r\nExample:\r\n```C#\r\nprivate DateTime _dt = new DateTime(2019, 1, 20, 7, 37, 59, DateTimeKind.Utc);\r\nprivate char[] _buffer = new char[1024];\r\n[Benchmark] public bool DTTryFormat() => _dt.TryFormat(_buffer, out int charsWritten);\r\n```\r\nallocates 64 bytes before and 0 after.\r\n\r\ncc: @jkotas, @tarekgh ","Url":"https://github.com/dotnet/coreclr/pull/22111","RelatedDescription":"Closed or merged PR \"Avoid intermediate strings in some StringBuilder formatting\" (#22111)"},{"Id":"401450198","IsPullRequest":true,"CreatedAt":"2019-01-21T17:29:40","Actor":"benaadams","Number":"22118","RawContent":null,"Title":"Speedup SpanHelpers.IndexOf{Any}(byte, ...)","State":"open","Body":"Learnings from https://github.com/dotnet/coreclr/pull/22019; improvement on https://github.com/dotnet/coreclr/pull/21073\r\n\r\nApplied to\r\n```csharp\r\ninternal static partial class SpanHelpers\r\n{\r\n    static int IndexOf(ref byte searchSpace, byte value, int length);\r\n    static int IndexOfAny(ref byte searchSpace, byte value0, byte value1, int length);\r\n    static int IndexOfAny(ref byte searchSpace, byte value0, byte value1, byte value2, int length);\r\n}\r\n```\r\n\r\n\r\n`MoveMask`/`vpmovmskb` used for equality in the vectorized path already has flagged the bits that match; so if we use the specific intrinsics rather than generic Vector, we just need to determine the bit set, rather than do further processing to determine the element offset.\r\n\r\n```diff\r\n-; Total bytes of code 597, prolog size 5 for method SpanHelpers:IndexOf(byref,ubyte,int):int\r\n+; Total bytes of code 549, prolog size 5 for method SpanHelpers:IndexOf(byref,ubyte,int):int\r\n```\r\n\r\nPerformance measurements:\r\n\r\nArray length 512 significant improvements (up to more than double) for found item in any position. https://github.com/dotnet/coreclr/pull/22118#issuecomment-456199510 \r\n\r\nArray lengths >= 32 with item in last position significant improvements  (up to more than double)  https://github.com/dotnet/coreclr/pull/22118#issuecomment-456223461\r\n\r\n/cc @CarolEidt @fiigii @tannergooding @ahsonkhan","Url":"https://github.com/dotnet/coreclr/pull/22118","RelatedDescription":"Open PR \"Speedup SpanHelpers.IndexOf{Any}(byte, ...)\" (#22118)"},{"Id":"401446308","IsPullRequest":true,"CreatedAt":"2019-01-21T17:17:58","Actor":"MichalStrehovsky","Number":"22117","RawContent":null,"Title":"Decouple JIT_FLAG_PREJIT from HW intrinsics","State":"open","Body":"Per https://github.com/dotnet/corert/pull/6836#issuecomment-455054663 moving the decision whether to enable HW intrinsics to the EE side.\r\n\r\nThis will eventually let us support scenarios called out in #21603 (e.g. burn the target ISA into the AOT image, AOT-compile all code based on that, and respect the ISA setting when JITting at runtime to avoid AVX-SSE transition penalty).","Url":"https://github.com/dotnet/coreclr/pull/22117","RelatedDescription":"Open PR \"Decouple JIT_FLAG_PREJIT from HW intrinsics\" (#22117)"},{"Id":"401308731","IsPullRequest":true,"CreatedAt":"2019-01-21T11:24:38","Actor":"filipnavara","Number":"22115","RawContent":null,"Title":"WIP: Move common ThreadPool code to shared CoreLib partition.","State":"open","Body":"/cc @marek-safar @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/22115","RelatedDescription":"Open PR \"WIP: Move common ThreadPool code to shared CoreLib partition.\" (#22115)"},{"Id":"401231247","IsPullRequest":false,"CreatedAt":"2019-01-21T07:50:48","Actor":"simplejackcoder","Number":"22114","RawContent":null,"Title":"Optimizing HashSet<s/byte> (and other small numbers) to use a single or few Vector256?","State":"open","Body":"It will be awesome if `HashSet<byte>`/`Dictionary<byte, V>` could be made to use to Intrinsics feature in CoreCLR and optimize the heck out of the this case. It is provable that with Vector256 all operations are basically bit mask operations in one single register.\r\n\r\nThis also got me thinking if we could have a hash code selection algorithm for HashSets where the developer out right states the max value a hashset may contain and for what max value is it profitable to just use Vector256 registers in sequence.\r\n\r\nMost modern processors have a 64-byte cache line, therefore supporting a maximum value of 511 and a minimum value of 0 will be a no-brainer in my opinion using two Vector256 registers.\r\n\r\nFor the lookup performance, assuming all inlining is done great and well and the key that is being looked up has no collisions, we basically we have to beat the hash function accessing a register and doing math and then a single 64-byte cache line load of the pointer to the bucket and an equality check.","Url":"https://github.com/dotnet/coreclr/issues/22114","RelatedDescription":"Open issue \"Optimizing HashSet<s/byte> (and other small numbers) to use a single or few Vector256?\" (#22114)"},{"Id":"401229632","IsPullRequest":false,"CreatedAt":"2019-01-21T07:44:53","Actor":"v-haren","Number":"22113","RawContent":null,"Title":"error MSB3073","State":"open","Body":"failed in job: https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/master/job/perf_illink_Windows_NT_x64_full_opt_ryujit/3730/\r\n\r\nfailed log: \r\nD:\\j\\w\\perf_illink_W---e8877b83\\build.proj(43,5): error MSB3073: The command \"\"D:\\j\\w\\perf_illink_W---e8877b83\\Tools\\dotnetcli\\dotnet.exe\" restore --packages \"D:\\j\\w\\perf_illink_W---e8877b83\\packages\" --source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json --source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json --source https://api.nuget.org/v3/index.json --source https://dotnet.myget.org/F/dotnet-core-optimization-data/api/v3/index.json D:\\j\\w\\perf_illink_W---e8877b83\\src\\.nuget/optdata/optdata.csproj\" exited with code -1073741819.","Url":"https://github.com/dotnet/coreclr/issues/22113","RelatedDescription":"Open issue \"error MSB3073\" (#22113)"},{"Id":"401212025","IsPullRequest":true,"CreatedAt":"2019-01-21T06:34:16","Actor":"dotnet-maestro-bot","Number":"22112","RawContent":null,"Title":"Update CoreFx to preview.19071.2 (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/22112","RelatedDescription":"Open PR \"Update CoreFx to preview.19071.2 (master)\" (#22112)"},{"Id":"401165098","IsPullRequest":false,"CreatedAt":"2019-01-21T01:47:35","Actor":"VincentBu","Number":"22110","RawContent":null,"Title":"[x86] Test failed: System.Diagnostics.Tests.ProcessWaitingTests.WaitForSignal","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_minopts/699/\r\n\r\n**Failed tests:**\r\nSystem.Diagnostics.Tests.ProcessWaitingTests.WaitForSignal\r\n\r\n**Log:**\r\n```\r\nSystem.Diagnostics.Tests.ProcessWaitingTests.WaitForSignal [FAIL]\r\n        Assert.True() Failure\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x86_checked_w---91802095\\_\\fx\\src\\System.Diagnostics.Process\\tests\\ProcessWaitingTests.cs(207,0): at System.Diagnostics.Tests.ProcessWaitingTests.WaitForSignal()\r\n    Finished:    System.Diagnostics.Process.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.Diagnostics.Process.Tests  Total: 262, Errors: 0, Failed: 1, Skipped: 2, Time: 370.975s\r\n  ----- end  7:28:57.28 ----- exit code 1 ----------------------------------------------------------\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22110","RelatedDescription":"Open issue \"[x86] Test failed: System.Diagnostics.Tests.ProcessWaitingTests.WaitForSignal\" (#22110)"},{"Id":"401164132","IsPullRequest":false,"CreatedAt":"2019-01-21T01:39:38","Actor":"VincentBu","Number":"22109","RawContent":null,"Title":"[x86] Test failed: Interop_ICustomMarshaler._ConflictingNames_MultipleALCs_MultipleALCs_._ConflictingNames_MultipleALCs_MultipleALCs_cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_zapdisable/114/\r\n\r\n**Failed tests:**\r\nInterop_ICustomMarshaler._ConflictingNames_MultipleALCs_MultipleALCs_._ConflictingNames_MultipleALCs_MultipleALCs_cmd\r\n\r\n**Log:**\r\n```\r\nInterop_ICustomMarshaler._ConflictingNames_MultipleALCs_MultipleALCs_._ConflictingNames_MultipleALCs_MultipleALCs_cmd [FAIL]\r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      D:\\j\\workspace\\x86_checked_w---34329519\\bin\\tests\\Windows_NT.x86.Checked\\Reports\\Interop.ICustomMarshaler\\ConflictingNames\\MultipleALCs\\MultipleALCs.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n         \"D:\\j\\workspace\\x86_checked_w---34329519\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\corerun.exe\" MultipleALCs.exe \r\n        System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.NullReferenceException: Object reference not set to an instance of an object.\r\n           at System.Runtime.Loader.AssemblyLoadContext.ResolveUnmanagedDll(String unmanagedDllName, IntPtr gchManagedAssemblyLoadContext)\r\n           at CustomMarshalers.CustomMarshalerTest.NativeParseInt(WrappedString str)\r\n           at CustomMarshalers.CustomMarshalerTest.ParseInt(String str) in D:\\j\\workspace\\x86_checked_w---34329519\\tests\\src\\Interop\\ICustomMarshaler\\ConflictingNames\\CustomMarshaler.cs:line 50\r\n           --- End of inner exception stack trace ---\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n           at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n           at RunInALC.Run(AssemblyLoadContext context) in D:\\j\\workspace\\x86_checked_w---34329519\\tests\\src\\Interop\\ICustomMarshaler\\ConflictingNames\\RunInALC.cs:line 48\r\n           at RunInALC.ConflictingCustomMarshalerNamesInCollectibleLoadContexts_Succeeds() in D:\\j\\workspace\\x86_checked_w---34329519\\tests\\src\\Interop\\ICustomMarshaler\\ConflictingNames\\RunInALC.cs:line 32\r\n           at RunInALC.Main(String[] args) in D:\\j\\workspace\\x86_checked_w---34329519\\tests\\src\\Interop\\ICustomMarshaler\\ConflictingNames\\RunInALC.cs:line 18\r\n        Expected: 100\r\n        Actual: 101\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22109","RelatedDescription":"Open issue \"[x86] Test failed: Interop_ICustomMarshaler._ConflictingNames_MultipleALCs_MultipleALCs_._ConflictingNames_MultipleALCs_MultipleALCs_cmd\" (#22109)"},{"Id":"401162390","IsPullRequest":false,"CreatedAt":"2019-01-21T01:24:42","Actor":"VincentBu","Number":"22108","RawContent":null,"Title":"[x86] Test failed: Microsoft.Win32.SystemEventsTests.CreateTimerTests.ConcurrentTimers","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_jitstressregs0x1000/631/\r\n\r\n**Failed tests:**\r\nMicrosoft.Win32.SystemEventsTests.CreateTimerTests.ConcurrentTimers\r\n\r\n**Log:**\r\n```\r\nMicrosoft.Win32.SystemEventsTests.CreateTimerTests.ConcurrentTimers [FAIL]\r\n        System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.\r\n        ---- System.NullReferenceException : Object reference not set to an instance of an object.\r\n        Stack Trace:\r\n             at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n             at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n             at System.Delegate.DynamicInvokeImpl(Object[] args)\r\n          D:\\j\\workspace\\x86_checked_w---1070ee84\\_\\fx\\src\\Microsoft.Win32.SystemEvents\\src\\Microsoft\\Win32\\SystemEvents.cs(1464,0): at Microsoft.Win32.SystemEvents.SystemEventInvokeInfo.InvokeCallback(Object arg)\r\n          ----- Inner Stack Trace -----\r\n             at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n             at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value)\r\n          D:\\j\\workspace\\x86_checked_w---1070ee84\\_\\fx\\src\\Microsoft.Win32.SystemEvents\\tests\\SystemEvents.CreateTimer.cs(88,0): at Microsoft.Win32.SystemEventsTests.CreateTimerTests.<>c__DisplayClass3_0.<ConcurrentTimers>b__0(Object sender, TimerElapsedEventArgs args)\r\n    Finished:    Microsoft.Win32.SystemEvents.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     Microsoft.Win32.SystemEvents.Tests  Total: 208, Errors: 0, Failed: 1, Skipped: 0, Time: 6.312s\r\n  ----- end  3:51:00.73 ----- exit code 1 ----------------------------------------------------------\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22108","RelatedDescription":"Open issue \"[x86] Test failed: Microsoft.Win32.SystemEventsTests.CreateTimerTests.ConcurrentTimers\" (#22108)"},{"Id":"401156267","IsPullRequest":true,"CreatedAt":"2019-01-21T00:25:10","Actor":"stephentoub","Number":"22106","RawContent":null,"Title":"Switch CoreLib over to using newly shared Environment from corefx","State":"open","Body":"This requires merging/adapting the implementation with EnvironmentAugments (which goes away completely), the shared files, what corert has, etc.\r\n\r\nI've tried to coordinate the change across coreclr, corert, and corefx, with changes to each repo, but I'm expecting there to be a little fallout, as I'm sure I missed some flavor of build on one of them.  Once this goes in and is mirrored over to corert and corefx, those repos will need to cherry-pick the corresponding changes.\r\n\r\nContributes to https://github.com/dotnet/coreclr/issues/21932","Url":"https://github.com/dotnet/coreclr/pull/22106","RelatedDescription":"Open PR \"Switch CoreLib over to using newly shared Environment from corefx\" (#22106)"},{"Id":"401153533","IsPullRequest":true,"CreatedAt":"2019-01-20T23:54:47","Actor":"marek-safar","Number":"22105","RawContent":null,"Title":"Move Task to shared partition","State":"open","Body":"Contributes to #21932","Url":"https://github.com/dotnet/coreclr/pull/22105","RelatedDescription":"Open PR \"Move Task to shared partition\" (#22105)"},{"Id":"401061094","IsPullRequest":true,"CreatedAt":"2019-01-20T22:42:11","Actor":"benaadams","Number":"22101","RawContent":null,"Title":"Use List<T>.ToArray() in places","State":"closed","Body":"Also `List<T>.ToArray()` rather than creating a new array and then `.CopyTo`","Url":"https://github.com/dotnet/coreclr/pull/22101","RelatedDescription":"Closed or merged PR \"Use List<T>.ToArray() in places\" (#22101)"},{"Id":"401103746","IsPullRequest":false,"CreatedAt":"2019-01-20T14:32:17","Actor":"ayende","Number":"22103","RawContent":null,"Title":"Failed to compile CoreCLR when VS 2019 is installed","State":"open","Body":"I'm running the `build.cmd` from `Developer Command Prompt for VS 2017` console ,and I get a compilation error\r\n\r\n```\r\nc:\\work\\coreclr\\src\\vm\\amd64\\virtualcallstubcpu.hpp(589): error C2057: expected constant expression (compiling source\r\n file C:\\Work\\coreclr\\src\\vm\\virtualcallstub.cpp) [C:\\Work\\coreclr\\bin\\obj\\Windows_NT.x64.Debug\\src\\vm\\wks\\cee_wks.vc\r\nxproj]\r\n```\r\n\r\nI'm pretty sure that I followed the Windows build instructions. i looked at the line:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/master/src/vm/amd64/virtualcallstubcpu.hpp#L589\r\n\r\nAnd it _looks_ fine.  The values there are defined here: \r\nhttps://github.com/dotnet/coreclr/blob/master/src/vm/amd64/virtualcallstubcpu.hpp#L185-L186\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/22103","RelatedDescription":"Open issue \"Failed to compile CoreCLR when VS 2019 is installed\" (#22103)"},{"Id":"401070528","IsPullRequest":true,"CreatedAt":"2019-01-20T07:23:31","Actor":"TomerWeisberg","Number":"22102","RawContent":null,"Title":"Improve BinaryReader.ReadUInt32() perf by 30% when using MemoryStream","State":"open","Body":"BinaryReader.ReadInt32() has nice optimization which was missing from the ReadUInt32() version. Now both implementations are aligned.","Url":"https://github.com/dotnet/coreclr/pull/22102","RelatedDescription":"Open PR \"Improve BinaryReader.ReadUInt32() perf by 30% when using MemoryStream\" (#22102)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"401910031","IsPullRequest":false,"CreatedAt":"2019-01-22T19:07:49","Actor":"firelizzard18","Number":"10644","RawContent":null,"Title":".NET Core 3.0 SDK preview breaks dependencies","State":"open","Body":"I have a project that has `System.Runtime.InteropServices` in its dependency graph. I can't share the \r\nproject itself. Below is part of the `csproj`.\r\n\r\nIf I build this project (on Windows) with .NET Core 2.2 SDK, everything works. If I build it with .NET Core 3.0 SDK (preview), the build artifacts are missing `System.Runtime.InteropServices.dll`, which breaks my application.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net462</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net462' \">\r\n    <Reference Include=\"System.ServiceProcess\" />\r\n    <Reference Include=\"System.Transactions\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Cors\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.Elm\" Version=\"0.2.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Routing\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.HttpSys\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.IISIntegration\" Version=\"2.1.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel\" Version=\"2.1.3\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Portable.BouncyCastle\" Version=\"1.8.4\" />\r\n    <PackageReference Include=\"System.Data.SqlClient\" Version=\"4.6.0\" />\r\n    <PackageReference Include=\"System.Reflection.TypeExtensions\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- lots of <ProjectReference>s -->\r\n  </ItemGroup>\r\n\r\n<Project>\r\n```\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10644","RelatedDescription":"Open issue \".NET Core 3.0 SDK preview breaks dependencies\" (#10644)"},{"Id":"401907244","IsPullRequest":false,"CreatedAt":"2019-01-22T19:05:07","Actor":"firelizzard18","Number":"10643","RawContent":null,"Title":"Cannot build a supported target when an unsupported target exists in `<TargetFrameworks>`","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. On Windows, install .NET Core 2.0 SDK and .NET Framework 4.7 SDK\r\n2. `dotnet new console -o test`\r\n3. `cd test`\r\n4. In `test.csproj`, replace `<TargetFramework>...` with `<TargetFrameworks>net47;netcoreapp3.0</TargetFrameworks>`\r\n5. `dotnet build -f net47`\r\n\r\n## Expected  behavior\r\n\r\nThe CLI builds and runs the project using the specified target framework. The fact that there are other valid target frameworks is ignored.\r\n\r\n## Actual behavior\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.6.84.34536 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.104\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(135,5): error : The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\\Source\\temp\\build-test\\build-test.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.104)\r\n\r\nProduct Information:\r\n Version:            2.1.104\r\n Commit SHA-1 hash:  48ec687460\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.104\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10643","RelatedDescription":"Closed issue \"Cannot build a supported target when an unsupported target exists in `<TargetFrameworks>`\" (#10643)"},{"Id":"401902646","IsPullRequest":false,"CreatedAt":"2019-01-22T19:00:51","Actor":"CreativeHouseDotOrg","Number":"10642","RawContent":null,"Title":"dotnet command line argument to terminate remaining build processes that are finished but dont exit","State":"closed","Body":"### Is your feature request related to a problem? Please describe.\r\nI'm am trying to `build` and `publish`... but unfortunately there are hanging processes in Task Manager .NET Core Host that lead to a publish error if i try to `dotnet publish`\r\n\r\n### Describe the solution you'd like\r\nI want the Remaining Tasks to close after the build OR publish process has ended.\r\n\r\n### Describe alternatives you've considered\r\nSince now i've been terminating them by hand, it would be good to have a `dotnet <command>` to terminate all open .Net Core Hosts that remain.\r\n\r\n### Additional context\r\n\r\nHere is a Screenshot of the remaining Tasks:\r\n\r\n![1](https://user-images.githubusercontent.com/4038603/51504064-f1e87780-1dde-11e9-8ebd-1424a7654113.PNG)\r\n\r\n![unbenannt](https://user-images.githubusercontent.com/4038603/51504000-9f0ec000-1dde-11e9-8419-0216e6945290.PNG)\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10642","RelatedDescription":"Closed issue \"dotnet command line argument to terminate remaining build processes that are finished but dont exit\" (#10642)"},{"Id":"400190623","IsPullRequest":false,"CreatedAt":"2019-01-22T17:55:49","Actor":"farlop","Number":"10624","RawContent":null,"Title":"Execute custom action on template, localization bug","State":"closed","Body":"## Steps to reproduce\r\nIn non english environment (for example, spanish), try to create a new project using a template which has custom actions:\r\n\r\n```\r\ndotnet new is4aspid -n TestIS4.IdentityServerAspNetIdentity\r\nLa plantilla \"IdentityServer4 with ASP.NET Core Identity\" se creó correctamente.\r\n\r\nProcesando acciones posteriores...\r\nLa plantilla está configurada para ejecutar la siguiente acción:\r\nDescripción:\r\nInstrucciones manuales: Seeds the initial user database\r\nComando actual: dotnet run /seed\r\n¿Quiere ejecutar esta acción (S|N)?\r\n\r\n```\r\n\r\n## Expected  behavior\r\nAnswering 'S' to question should continue with action execution\r\n\r\n## Actual behavior\r\n'Y' has to be pressed instead of 'S'\r\n```\r\nS\r\nEntrada no válida: \"S\". Debe especificar S o N.\r\nY\r\nEjecutando el comando \"dotnet run /seed\"...\r\nEl comando se ejecutó correctamente.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nSDK de .NET Core (reflejando cualquier global.json):\r\n Version:   2.2.102\r\n Commit:    96ff75a873\r\n\r\nEntorno de tiempo de ejecución:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.102\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10624","RelatedDescription":"Closed issue \"Execute custom action on template, localization bug\" (#10624)"},{"Id":"401755135","IsPullRequest":true,"CreatedAt":"2019-01-22T13:34:42","Actor":"dotnet-maestro[bot]","Number":"10641","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19070.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10641","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10641)"},{"Id":"401047357","IsPullRequest":true,"CreatedAt":"2019-01-20T23:37:18","Actor":"dotnet-bot","Number":"10638","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10638","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#10638)"},{"Id":"401095922","IsPullRequest":true,"CreatedAt":"2019-01-20T13:35:00","Actor":"dotnet-maestro[bot]","Number":"10639","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19069.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10639","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10639)"},{"Id":"401095953","IsPullRequest":true,"CreatedAt":"2019-01-20T13:05:14","Actor":"dotnet-maestro[bot]","Number":"10640","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19067.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19067.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19067.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10640","RelatedDescription":"Open PR \"Update dependencies from dotnet/sdk\" (#10640)"},{"Id":"400703698","IsPullRequest":true,"CreatedAt":"2019-01-19T23:40:40","Actor":"v-zbsail","Number":"10632","RawContent":null,"Title":"LOC CHECKIN | dotnet/cli master | 20190118","State":"closed","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/10632","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/cli master | 20190118\" (#10632)"},{"Id":"400275049","IsPullRequest":true,"CreatedAt":"2019-01-19T23:23:11","Actor":"dotnet-maestro[bot]","Number":"10626","RawContent":null,"Title":"Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/templating\r\n\r\n- Microsoft.TemplateEngine.Cli - 1.0.2-beta5.19066.2\r\n\r\nUpdates from https://github.com/dotnet/templating\r\n\r\n- Microsoft.TemplateEngine.Cli - 1.0.2-beta5.19066.2\r\n\r\nUpdates from https://github.com/dotnet/templating\r\n\r\n- Microsoft.TemplateEngine.Cli - 1.0.2-beta5.19066.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10626","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/templating\" (#10626)"},{"Id":"400513797","IsPullRequest":true,"CreatedAt":"2019-01-19T22:56:54","Actor":"dotnet-bot","Number":"10629","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10629","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10629)"},{"Id":"400933582","IsPullRequest":true,"CreatedAt":"2019-01-19T22:45:35","Actor":"nguerrera","Number":"10636","RawContent":null,"Title":"Stop capturing test output because it is somehow causing failures in CI","State":"closed","Body":"There may be a corefx or msbuild bug here, but I need to get CI unblocked. :(\r\n","Url":"https://github.com/dotnet/cli/pull/10636","RelatedDescription":"Closed or merged PR \"Stop capturing test output because it is somehow causing failures in CI\" (#10636)"},{"Id":"400268504","IsPullRequest":true,"CreatedAt":"2019-01-19T13:35:04","Actor":"dotnet-maestro[bot]","Number":"10625","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19066.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19067.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19068.4\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10625","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10625)"},{"Id":"400934274","IsPullRequest":false,"CreatedAt":"2019-01-19T00:07:44","Actor":"nguerrera","Number":"10637","RawContent":null,"Title":"Investigate why CI fails often with TestCaptureOutput on","State":"open","Body":"We started getting failures like this all of the sudden very often in CI (no repro locally):\r\n\r\n```\r\nF:\\vsagent\\10\\s\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19065.6\\tools\\XUnit\\XUnit.targets(93,5): error MSB3491: Could not write lines to file \"F:\\vsagent\\10\\s\\artifacts\\log\\Release\\Microsoft.DotNet.Configurer.UnitTests_netcoreapp3.0_x64.log\". The process cannot access the file 'F:\\vsagent\\10\\s\\artifacts\\log\\Release\\Microsoft.DotNet.Configurer.UnitTests_netcoreapp3.0_x64.log' because it is being used by another process. [F:\\vsagent\\10\\s\\test\\Microsoft.DotNet.Configurer.UnitTests\\Microsoft.DotNet.Configurer.UnitTests.csproj]\r\n```\r\n\r\nThis is in a step in arcade where it appends to the log file that would have been written by a prior Exec with `> ` redirected output to it. Somehow the file is still in use. Maybe exec returned before the handle was released? But how?\r\n","Url":"https://github.com/dotnet/cli/issues/10637","RelatedDescription":"Open issue \"Investigate why CI fails often with TestCaptureOutput on\" (#10637)"},{"Id":"400910098","IsPullRequest":true,"CreatedAt":"2019-01-18T22:16:22","Actor":"nugetlurker","Number":"10635","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5783 into cli","State":"open","Body":"Insert NuGet Build 5.0.0-preview3.5783 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/10635","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview3.5783 into cli\" (#10635)"},{"Id":"400910087","IsPullRequest":true,"CreatedAt":"2019-01-18T22:16:19","Actor":"nugetlurker","Number":"10634","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5783 into cli","State":"open","Body":"Insert NuGet Build 5.0.0-preview3.5783 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/10634","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview3.5783 into cli\" (#10634)"},{"Id":"400513804","IsPullRequest":true,"CreatedAt":"2019-01-18T20:41:20","Actor":"dotnet-bot","Number":"10630","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10630","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10630)"},{"Id":"399921920","IsPullRequest":true,"CreatedAt":"2019-01-18T18:34:05","Actor":"nugetlurker","Number":"10617","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5781 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-preview3.5781 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/10617","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview3.5781 into cli\" (#10617)"},{"Id":"399921942","IsPullRequest":true,"CreatedAt":"2019-01-18T18:33:42","Actor":"nugetlurker","Number":"10618","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5781 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-preview3.5781 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/10618","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview3.5781 into cli\" (#10618)"},{"Id":"400761340","IsPullRequest":false,"CreatedAt":"2019-01-18T15:41:34","Actor":"djbreen7","Number":"10633","RawContent":null,"Title":"dotnet new angular boilerplate doesn't connect API with client","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. `dotnet new angular --name=MyApp`\r\n2. `cd MyApp`\r\n3. `dotnet build`\r\n4. `dotnet run`\r\n5. Open the url that the terminal displays in the browser, e.g., http://localhost:53000\r\n6. Click the Fetch Data button in the top nav\r\n\r\n## Expected  behavior\r\n- Data should be displayed  \r\n- The network tab should show a 200 OK for the endpoint /api/SampleData/WeatherForecasts\r\n\r\n## Actual behavior\r\n- Loading... is displayed indefinitely\r\n- The network tab returns a 404 NOT FOUND for the endpoint /api/SampleData/WeatherForecasts\r\n\r\n![image](https://user-images.githubusercontent.com/13296622/51394398-80b37680-1af7-11e9-9f40-61f00455b299.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.103\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10633","RelatedDescription":"Closed issue \"dotnet new angular boilerplate doesn't connect API with client\" (#10633)"},{"Id":"400631831","IsPullRequest":false,"CreatedAt":"2019-01-18T09:04:18","Actor":"pavelovcharov","Number":"10631","RawContent":null,"Title":"dotnet build ignores -f option in some cases","State":"open","Body":"Please see the attached project\r\n[build-framework-test.zip](https://github.com/dotnet/cli/files/2772232/build-framework-test.zip)\r\n\r\n\r\n## Steps to reproduce\r\n1) Create a new class library\r\n2) Create another class library, make it dependent on the first one\r\n3) Replace TargetFramework with TargetFrameworks (e.g. `<TargetFrameworks>netcoreapp3.0;net452</TargetFrameworks>`)\r\n4) Try to build solution against only one framework:\r\n`dotnet build -f netcoreapp3.0  .\\build-framework-test.sln`\r\n\r\n## Expected  behavior\r\nFirst library is built against specified framework\r\n\r\n## Actual behavior\r\nFirst library is built against all frameworks\r\n`  ClassLibrary1 -> C:\\work\\projects\\tests\\build-framework-test\\ClassLibrary1\\bin\\Debug\\netcoreapp3.0\\ClassLibrary1.dll`\r\n  `ClassLibrary1 -> C:\\work\\projects\\tests\\build-framework-test\\ClassLibrary1\\bin\\Debug\\net452\\ClassLibrary1.dll`\r\n  `ClassLibrary2 -> C:\\work\\projects\\tests\\build-framework-test\\build-framework-test\\bin\\Debug\\netcoreapp3.0\\ClassLibrary2.dll`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010124\r\n Commit:    41a73b60f2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010124\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview1-26919-02\r\n  Commit:  9ea8c26816\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-alpha1-009616 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010124 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 3.0.0-alpha1-10062 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-alpha1-10062 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19067-0383 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.DesktopUI.App 3.0.0-alpha-26829-8 [C:\\Program Files\\dotnet\\shared\\Microsoft.DesktopUI.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27316-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview1-26919-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27316-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10631","RelatedDescription":"Open issue \"dotnet build ignores -f option in some cases\" (#10631)"},{"Id":"400423818","IsPullRequest":true,"CreatedAt":"2019-01-17T23:43:45","Actor":"mmitche","Number":"10627","RawContent":null,"Title":"Update branding","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/10627","RelatedDescription":"Closed or merged PR \"Update branding\" (#10627)"},{"Id":"400052098","IsPullRequest":true,"CreatedAt":"2019-01-17T21:43:07","Actor":"dotnet-bot","Number":"10621","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10621","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#10621)"},{"Id":"400052118","IsPullRequest":true,"CreatedAt":"2019-01-17T21:43:01","Actor":"dotnet-bot","Number":"10623","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10623","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10623)"},{"Id":"400473652","IsPullRequest":false,"CreatedAt":"2019-01-17T21:37:07","Actor":"wli3","Number":"10628","RawContent":null,"Title":"Insert new nuget with NuGet.Packaging.Core breaking change","State":"open","Body":"- [ ] dotnet-migrate branding update\r\n- [x] Finish update of dotnet-migrate\r\n- [ ] Queue SDK 2.2.2xxx without test\r\n- [ ] Insert SDK 2.2.2xxx to CLI SDK 2.2.2xxx with new nuget and new dotnet-migrate\r\n- [ ] Update stage 0 in SDK 2.2.2xxx in new nuget insertion\r\n\r\n--------------\r\n- [ ] Queue SDK 2.1.6xxx without test\r\n- [ ] Insert SDK 2.1.6xxx to CLI SDK 2.1.6xxx with new nuget and new dotnet-migrate\r\n- [ ] Update stage 0 in SDK 2.1.6xxx in new nuget insertion\r\n\r\n--------------\r\n- [ ] Queue SDK 3.0.1xx without test\r\n- [ ] Insert SDK 3.0.1xx to CLI SDK 3.0.1xx with new nuget and new dotnet-migrate\r\n- [ ] Insert CLI to ToolSet\r\n- [ ] Insert ToolSet to core-sdk\r\n- [ ] Update stage 0 in SDK 3.0.1xx in new nuget insertion","Url":"https://github.com/dotnet/cli/issues/10628","RelatedDescription":"Open issue \"Insert new nuget with NuGet.Packaging.Core breaking change\" (#10628)"},{"Id":"400052106","IsPullRequest":true,"CreatedAt":"2019-01-17T19:22:31","Actor":"dotnet-bot","Number":"10622","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10622","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10622)"},{"Id":"400040801","IsPullRequest":true,"CreatedAt":"2019-01-16T23:16:33","Actor":"sdmaclea","Number":"10620","RawContent":null,"Title":"Update FXVersion to use SemVer 2.0.0","State":"open","Body":"Update FXVersion to use SemVer 2.0.0\r\nExtend and fix tests\r\n\r\nFixes #10608","Url":"https://github.com/dotnet/cli/pull/10620","RelatedDescription":"Open PR \"Update FXVersion to use SemVer 2.0.0\" (#10620)"},{"Id":"400015893","IsPullRequest":true,"CreatedAt":"2019-01-16T22:23:32","Actor":"johnbeisner","Number":"10619","RawContent":null,"Title":"Update 'Architecture' help documentation.","State":"closed","Body":"Update 'Architecture' help documentation; other...\r\n","Url":"https://github.com/dotnet/cli/pull/10619","RelatedDescription":"Closed or merged PR \"Update 'Architecture' help documentation.\" (#10619)"},{"Id":"399769790","IsPullRequest":false,"CreatedAt":"2019-01-16T20:37:41","Actor":"snobu","Number":"10615","RawContent":null,"Title":"Add scaffolding for Vue.js SPA","State":"closed","Body":"Please consider adding [Vue.js ](https://vuejs.org/) SPA scaffolding. Vue is popular enough to deserve its own scaffolding entry in the dotnet CLI. Right now only React and Angular SPAs are being generated.\r\n\r\n```bash\r\n$ dotnet new | grep SPA\r\nASP.NET Core with Angular                      angular            [C#]          Web/MVC/SPA\r\nASP.NET Core with React.js                     react              [C#]          Web/MVC/SPA\r\nASP.NET Core with React.js and Redux           reactredux         [C#]          Web/MVC/SPA\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10615","RelatedDescription":"Closed issue \"Add scaffolding for Vue.js SPA\" (#10615)"},{"Id":"399799799","IsPullRequest":true,"CreatedAt":"2019-01-16T13:30:08","Actor":"dotnet-maestro[bot]","Number":"10616","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19065.6\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10616","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10616)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"400334291","IsPullRequest":false,"CreatedAt":"2019-01-18T13:36:41","Actor":"aday12345","Number":"1054","RawContent":null,"Title":".net standard 2.1 targeting question","State":"closed","Body":"i have the .net core 2.2 sdk installed and can target it with no issue, but should i be able to target the netStandard 2.1 library when creating a class library? i only see 2.0 as an option.","Url":"https://github.com/dotnet/standard/issues/1054","RelatedDescription":"Closed issue \".net standard 2.1 targeting question\" (#1054)"},{"Id":"400369663","IsPullRequest":false,"CreatedAt":"2019-01-17T16:54:08","Actor":"UnreachableCode","Number":"1055","RawContent":null,"Title":"Android implementation of HTTPClient throwing up java.io.IOException ","State":"open","Body":"I believe this relates to the bug detailed in Xamarin's old Bugzilla:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41100\r\n\r\nand is also similar to the issue discussed here:\r\nhttps://github.com/square/okhttp/issues/1517\r\n\r\nHere is the main stacktrace of my issue:\r\n\r\nLoginProvider+<LoginAsync>d__1.MoveNext () C:\\source\\repos\\{MyApp}\\{MyApp}\\{MyApp}\\Services\\LoginProvider.cs:35\r\njava.io.IOException: unexpected end of stream on Connection{testclarity.i-menzies.com:443, proxy=DIRECT@ hostAddress=62.244.173.166 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1} (recycle count=0)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\r\ncom.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\r\ncom.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:905)\r\ncom.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:789)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:443)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:388)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:501)\r\ncom.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\r\ncom.android.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\r\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\r\ncom.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\r\n\r\nI have tried setting the connection closed header and setting chunked transfer encoding but neither of these fixes work. I would try to set the OkHTTP.setRetryOnConnectionFailure(true) but I don't think there is a way to do this in the referenced Java source.","Url":"https://github.com/dotnet/standard/issues/1055","RelatedDescription":"Open issue \"Android implementation of HTTPClient throwing up java.io.IOException \" (#1055)"},{"Id":"396287501","IsPullRequest":false,"CreatedAt":"2019-01-17T10:59:36","Actor":"gpcaretti","Number":"1044","RawContent":null,"Title":"FAQ: how to understand a package is compatible with NETStandard","State":"closed","Body":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?","Url":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Closed issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044)"},{"Id":"396610837","IsPullRequest":true,"CreatedAt":"2019-01-16T21:17:03","Actor":"wtgodbe","Number":"1047","RawContent":null,"Title":"Bump AssemblyVersion for nestandard.dll to 2.1.0.0","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Closed or merged PR \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047)"},{"Id":"399549465","IsPullRequest":false,"CreatedAt":"2019-01-15T21:45:54","Actor":"kaby76","Number":"1053","RawContent":null,"Title":"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.","State":"open","Body":"I've started porting (rewriting) the Net Core framework to the GPU. Part of this very large task is to go through the framework and verify that it indeed satisfies the Net Standard specification because I really don't trust anything/anyone. So, I have several questions regarding Net Standard.\r\n\r\n1) According to Microsoft documentation (https://docs.microsoft.com/en-us/dotnet/standard/net-standard), “[t]he .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations. The motivation behind the .NET Standard is establishing greater uniformity in the .NET ecosystem. ECMA 335 continues to establish uniformity for .NET implementation behavior, but there's no similar spec for the .NET Base Class Libraries (BCL) for .NET library implementations.”\r\n\r\nQ: Exactly where is the “formal specification” of the API? Is it the MD file for a particular version (e.g., https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md)? Is it the collection of C# files with stub implementations (e.g., the files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref)? Or, is it something else?\r\n\r\n2) Assuming that the C# files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref is the formal definition. I wrote a CSPROJ to build an assembly for the current state of the decls. Then, I wrote a program to go through a framework, following reference assemblies to implementation assemblies, and output a sorted list of all types, all methods, all attributes, for public decls. I compared the reference and implementation assemblies for Net Core with the Standard set forth in the C# code. And yes, there are some non-trivial differences, mostly because the standard is evolving.\r\n\r\nThe following are general questions of type equivalence.\r\n\r\nQ: If there's an attribute (\"[...]\") on a type is in Standard, but missing on the type in Core, does Core still satisfy the Standard?\r\n\r\nQ: If a method and/or type exists in Core, but not in Standard, does the implementation still satisfy the Standard? In other words, can an implementation provide \"extra\" and still satisfy Standard?\r\n\r\nThe full list of the type dump for Standard and Core assemblies is here (https://1drv.ms/f/s!Atb3HX_AxX9ZgaxT-m221N6ut285Vw).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1053","RelatedDescription":"Open issue \"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.\" (#1053)"},{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Closed or merged PR \"Remove the manual config system\" (#1040)"},{"Id":"392986163","IsPullRequest":false,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1032","RawContent":null,"Title":"Remove slim configuration system and stop overloading Configuration","State":"closed","Body":"We should stop overloading the `Configuration` property in favor of the right msbuild properties and remove the `ConfigurationGroup` property to enable native VS support and remove a lot of obsolete stuff.\r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)'==''\">\r\n    <ConfigurationGroup Condition=\"'$(ConfigurationGroup)'==''\">Debug</ConfigurationGroup>\r\n    <Configuration>$(ConfigurationGroup)</Configuration>\r\n    <Configuration Condition=\"'$(TargetGroup)'!=''\">$(TargetGroup)_$(Configuration)</Configuration>\r\n    <Configuration Condition=\"'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'\">$(OSGroup)_$(Configuration)</Configuration>\r\n  </PropertyGroup>\r\n```\r\n\r\ncc @ericstj @wtgodbe ","Url":"https://github.com/dotnet/standard/issues/1032","RelatedDescription":"Closed issue \"Remove slim configuration system and stop overloading Configuration\" (#1032)"},{"Id":"398564136","IsPullRequest":false,"CreatedAt":"2019-01-12T15:37:14","Actor":"netspiri","Number":"1052","RawContent":null,"Title":"Incorrect dll being copied","State":"open","Body":"I have\r\n\r\n- ProjectA targeting .Net Standard 2.0 making use of nuget library where the dlls for the different frameworks are named differently\r\n- ProjectB targeting .Net Standard 2.0 references ProjectA\r\n- ProjectC targeting .Net Framework 4.7.2 references ProjectB\r\n- ProjectD targeting .Net Framework 4.7.2 and is a Console app referencing ProjectC\r\n\r\nIf I run ProjectD I get the infamous \"Could not load file or assembly\" for Aspose.Email.Core.dll.\r\n\r\nI played around <RestoreProjectStyle>PackageReference</RestoreProjectStyle> in ProjectC and ProjectD but this results in .net framework dll (i.e Aspose.Email.dll) being copied over from the nuget package and not the .net standard dll (Aspose.Email.Core.dll).  I did not play with binding redirects because I do not think this is related.\r\n\r\nI've migrated manually ProjectC and ProjectD to the new csproj style but this had no effect.\r\n\r\nI do not want to end up with ProjectD referencing the required dlls directly because there must \"the proper way of doing it\".\r\n\r\nI have therefore uploaded a clean barebones project to https://bitbucket.org/netspiri/projectreferencestest.git , so as to see how the experts would do it, in the hope that this might help others. \r\n\r\nI've attached also the output of msbuild ProjectD.csproj /t:rebuild /bl\r\n\r\nIt would be nice if the experts would guide trough thier troubleshooting process.\r\n\r\n[log.txt](https://github.com/dotnet/standard/files/2752202/log.txt)\r\n[msbuild.zip](https://github.com/dotnet/standard/files/2752203/msbuild.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1052","RelatedDescription":"Open issue \"Incorrect dll being copied\" (#1052)"},{"Id":"396798571","IsPullRequest":false,"CreatedAt":"2019-01-11T01:19:54","Actor":"duncand","Number":"1050","RawContent":null,"Title":"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset","State":"closed","Body":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before.","Url":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Closed issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050)"},{"Id":"394796330","IsPullRequest":false,"CreatedAt":"2019-01-11T00:23:25","Actor":"MV10","Number":"1041","RawContent":null,"Title":"System.MathF missing in .NET Standard 2.1 README","State":"closed","Body":"Minor, but `System.MathF` is missing from the [README](https://github.com/dotnet/standard/blob/master/docs/planning/netstandard-2.1/README.md). I figured it would be in the Miscellaneous list at a minimum. (As I understand it, this is still on schedule for .NET Standard 2.1 per  https://github.com/dotnet/corefx/issues/15830, correct?)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1041","RelatedDescription":"Closed issue \"System.MathF missing in .NET Standard 2.1 README\" (#1041)"},{"Id":"396675175","IsPullRequest":false,"CreatedAt":"2019-01-11T00:22:05","Actor":"Entomy","Number":"1049","RawContent":null,"Title":"String Enhancements","State":"closed","Body":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?","Url":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Closed issue \"String Enhancements\" (#1049)"},{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"},{"Id":"396646204","IsPullRequest":true,"CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Number":"1048","RawContent":null,"Title":" Move source items into src folder","State":"closed","Body":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037","Url":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Closed or merged PR \" Move source items into src folder\" (#1048)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2019-01-07T22:02:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"closed","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Closed issue \"Group source items in a src folder\" (#1037)"},{"Id":"396598897","IsPullRequest":true,"CreatedAt":"2019-01-07T18:47:02","Actor":"wtgodbe","Number":"1046","RawContent":null,"Title":"Update APICompat baseline","State":"closed","Body":"I see these updates to the APICompat baselines after building from clean - I've confirmed that they weren't present before https://github.com/dotnet/standard/commit/dbb3e847a6dd09a8c9ec0206463ed1b848a5c90b. I figured I'd open a PR to use first as an easy way to view the diff & discuss, then to take into master if we decide it's the right thing. @ViktorHofer did you notice these locally when fixing up APICompat/GenAPI?","Url":"https://github.com/dotnet/standard/pull/1046","RelatedDescription":"Closed or merged PR \"Update APICompat baseline\" (#1046)"},{"Id":"396591596","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:51","Actor":"wtgodbe","Number":"1045","RawContent":null,"Title":"Convert seed.sh/.cmd files to proj files & update GenAPI invocations","State":"open","Body":"We should convert files like https://github.com/dotnet/standard/blob/8ca3d4c0c9599186d50196781484312176a9b2ad/platforms/xamarin.android/seed.sh to `.proj` files that can be built on-demand (either by direct invocation of `dotnet msbuild`, or a wrapper .ps1/.sh script that builds the project). This way we'll have access to the up-to-date version of `GenAPI`. We should also update the invocation of GenAPI to match the new standard introduced by https://github.com/dotnet/arcade/pull/1676\r\n\r\nCC @ViktorHofer ","Url":"https://github.com/dotnet/standard/issues/1045","RelatedDescription":"Open issue \"Convert seed.sh/.cmd files to proj files & update GenAPI invocations\" (#1045)"},{"Id":"396025237","IsPullRequest":true,"CreatedAt":"2019-01-04T19:25:54","Actor":"ViktorHofer","Number":"1043","RawContent":null,"Title":"Fix GenAPI invocation with new args","State":"closed","Body":"Also need to use DARC to get a GenApi fix in.","Url":"https://github.com/dotnet/standard/pull/1043","RelatedDescription":"Closed or merged PR \"Fix GenAPI invocation with new args\" (#1043)"},{"Id":"395644781","IsPullRequest":true,"CreatedAt":"2019-01-04T16:29:48","Actor":"ViktorHofer","Number":"1042","RawContent":null,"Title":"Respect ApiCompat cmd changes","State":"closed","Body":"Depends on https://github.com/dotnet/arcade/pull/1676","Url":"https://github.com/dotnet/standard/pull/1042","RelatedDescription":"Closed or merged PR \"Respect ApiCompat cmd changes\" (#1042)"},{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-26T21:14:18","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"closed","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Closed or merged PR \"Fix representation of enum values\" (#1039)"},{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"},{"Id":"392786865","IsPullRequest":false,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1029","RawContent":null,"Title":"Add ApiCompat run for netstandard2.0","State":"closed","Body":"We should add an APICompat run that checks against 2.0, similar the ones we already have for 1.0-1.6: https://github.com/dotnet/standard/blob/master/apicompat/baselines/ApiCompatBaseline.netstandard1.6.txt","Url":"https://github.com/dotnet/standard/issues/1029","RelatedDescription":"Closed issue \"Add ApiCompat run for netstandard2.0\" (#1029)"},{"Id":"393005614","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Number":"1035","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1035)"},{"Id":"393001679","IsPullRequest":true,"CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Number":"1034","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1034)"},{"Id":"392982975","IsPullRequest":false,"CreatedAt":"2018-12-20T10:31:53","Actor":"ViktorHofer","Number":"1031","RawContent":null,"Title":"Remove depproj approach and enable project restore","State":"open","Body":"As discussed in another PR I think it makes sense to remove the depproj approach here in the standard repo and follow the usual way of referencing packages directly in the respective project, in this case netstandard.csproj. Also the netstandard.builds file which restores for different frameworks can be incorporated in the csproj by adding a `TargetFrameworks` property and right PackageReference conditions. \r\n\r\ncc @wtgodbe @ericstj ","Url":"https://github.com/dotnet/standard/issues/1031","RelatedDescription":"Open issue \"Remove depproj approach and enable project restore\" (#1031)"},{"Id":"392822069","IsPullRequest":true,"CreatedAt":"2018-12-20T10:07:40","Actor":"wtgodbe","Number":"1030","RawContent":null,"Title":"Delete CI & redundant publish file","State":"closed","Body":"This deletes the old `netci.groovy` file, since we're using Azure DevOps for CI now. It also deletes `publish.msbuild`, which isn't used anywhere.\r\n\r\n@ViktorHofer PTAL","Url":"https://github.com/dotnet/standard/pull/1030","RelatedDescription":"Closed or merged PR \"Delete CI & redundant publish file\" (#1030)"},{"Id":"391885087","IsPullRequest":true,"CreatedAt":"2018-12-19T23:33:25","Actor":"wtgodbe","Number":"1027","RawContent":null,"Title":"Build Standard entirely against Arcade, without Buildtools","State":"closed","Body":"This cuts out buildtools entirely from the Standard repo, so that we fully rely on the Arcade SDK to build against instead. It replaces the functionality for code analyzers, `ValidateApiCompatForSrc`, and the build tasks.\r\n\r\n@ericstj @safern @danmosemsft @ViktorHofer @chcosta PTAL\r\n\r\nCC @karelz ","Url":"https://github.com/dotnet/standard/pull/1027","RelatedDescription":"Closed or merged PR \"Build Standard entirely against Arcade, without Buildtools\" (#1027)"},{"Id":"392146465","IsPullRequest":true,"CreatedAt":"2018-12-18T13:01:40","Actor":"dotnet-maestro[bot]","Number":"1028","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18617.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18618.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1028","RelatedDescription":"Open PR \"Update dependency files\" (#1028)"},{"Id":"391702003","IsPullRequest":true,"CreatedAt":"2018-12-17T15:07:31","Actor":"dotnet-maestro[bot]","Number":"1026","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1026","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1026)"},{"Id":"391465145","IsPullRequest":true,"CreatedAt":"2018-12-16T19:53:13","Actor":"dotnet-maestro[bot]","Number":"1025","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1025","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1025)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"401929649","IsPullRequest":true,"CreatedAt":"2019-01-22T19:59:54","Actor":"MarcoRossignoli","Number":"34747","RawContent":null,"Title":"Flow Thread.CurrentPrincipal with ExecutionContext","State":"open","Body":"fixes https://github.com/dotnet/corefx/issues/34489\r\n\r\n/cc @jkotas @stephentoub ","Url":"https://github.com/dotnet/corefx/pull/34747","RelatedDescription":"Open PR \"Flow Thread.CurrentPrincipal with ExecutionContext\" (#34747)"},{"Id":"401866645","IsPullRequest":false,"CreatedAt":"2019-01-22T19:13:42","Actor":"MarcoRossignoli","Number":"34745","RawContent":null,"Title":"Possible bug on AppDomain.CurrentDomain.SetPrincipalPolicy","State":"closed","Body":"I'm working on https://github.com/dotnet/corefx/issues/34489 https://github.com/dotnet/corefx/compare/master...MarcoRossignoli:executioncontext\r\nI did some tests on `AppDomain.CurrentDomain.SetPrincipalPolicy` and I found different behaviour between netfx and netcore\r\n```cs\r\n        private static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\".NET Full \" + typeof(object).Assembly.Location);\r\n            AppDomain.CurrentDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal);\r\n            Console.WriteLine(Thread.CurrentPrincipal);\r\n            Thread.CurrentPrincipal = new ClaimsPrincipal();\r\n            Console.WriteLine(Thread.CurrentPrincipal);\r\n            Thread.CurrentPrincipal = null;\r\n            Console.WriteLine(Thread.CurrentPrincipal);\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\".NET Core \" + typeof(object).Assembly.Location);\r\n            AppDomain.CurrentDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal);\r\n            Console.WriteLine(Thread.CurrentPrincipal);\r\n            Thread.CurrentPrincipal = new ClaimsPrincipal();\r\n            Console.WriteLine(Thread.CurrentPrincipal);\r\n            Thread.CurrentPrincipal = null;\r\n            Console.WriteLine(Thread.CurrentPrincipal);\r\n        }\r\n```\r\noutcome\r\n```\r\n.NET Full C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\mscorlib.dll\r\nSystem.Security.Principal.GenericPrincipal\r\nSystem.Security.Claims.ClaimsPrincipal\r\nSystem.Security.Principal.GenericPrincipal\r\nPress any key to continue . . .\r\n\r\n.NET Core C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\2.2.1\\System.Private.CoreLib.dll\r\n\r\nSystem.Security.Claims.ClaimsPrincipal\r\n\r\nPress any key to continue . . .\r\n```\r\nThe same for `PrincipalPolicy.WindowsPrincipal` \r\nAm I missing something?\r\n\r\nThis PR should introduce new behaviour https://github.com/dotnet/corefx/commit/6fb57a4bfe4504b60b3af769798b96ba15e6c842#diff-e17a6ed29a0800366d75c1548f5bbd5f\r\n\r\n/cc @jkotas @Anipik ","Url":"https://github.com/dotnet/corefx/issues/34745","RelatedDescription":"Closed issue \"Possible bug on AppDomain.CurrentDomain.SetPrincipalPolicy\" (#34745)"},{"Id":"401876488","IsPullRequest":false,"CreatedAt":"2019-01-22T17:37:20","Actor":"amanbha","Number":"34746","RawContent":null,"Title":"ObjectDisposedException at System.Net.Security.SslState.ThrowIfExceptional() on .NET Core on Linux","State":"open","Body":"Unhandled Exception:\r\nUnhandled Exception: System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'SslStream'.\r\nat System.Net.Security.SslState.ThrowIfExceptional()\r\nat System.Net.Security.SslState.CheckThrow(Boolean authSuccessCheck, Boolean shutdownCheck)\r\nat System.Net.Security.SslState.CheckOldKeyDecryptedData(Memory1 buffer) at System.Net.Security.SslState.HandleQueuedCallback(Object& queuedStateRequest) at System.Net.Security.SslState.FinishHandshakeRead(Int32 newState) at System.Net.Security.SslState.FinishHandshake(Exception e, AsyncProtocolRequest asyncRequest) at System.Net.Security.SslState.RehandshakeCompleteCallback(IAsyncResult result) at System.Net.LazyAsyncResult.Complete(IntPtr userToken) at System.Net.LazyAsyncResult.ProtectedInvokeCallback(Object result, IntPtr userToken) at System.Net.AsyncProtocolRequest.CompleteUserWithError(Exception e) at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request) at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) --- End of stack trace from previous location where exception was thrown --- at System.Threading.ThreadPoolWorkQueue.Dispatch()System.ObjectDisposedException: Cannot access a disposed object. Object name: 'SslStream'. at System.Net.Security.SslState.ThrowIfExceptional() at System.Net.Security.SslState.CheckThrow(Boolean authSuccessCheck, Boolean shutdownCheck) at System.Net.Security.SslState.CheckOldKeyDecryptedData(Memory1 buffer)\r\nat System.Net.Security.SslState.HandleQueuedCallback(Object& queuedStateRequest)\r\nat System.Net.Security.SslState.FinishHandshakeRead(Int32 newState)\r\nat System.Net.Security.SslState.FinishHandshake(Exception e, AsyncProtocolRequest asyncRequest)\r\nat System.Net.Security.SslState.RehandshakeCompleteCallback(IAsyncResult result)\r\nat System.Net.LazyAsyncResult.Complete(IntPtr userToken)\r\nat System.Net.LazyAsyncResult.ProtectedInvokeCallback(Object result, IntPtr userToken)\r\nat System.Net.AsyncProtocolRequest.CompleteUserWithError(Exception e)\r\nat System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Threading.ThreadPoolWorkQueue.Dispatch()\r\nAborted (core dumped)\r\n\r\n\r\n\r\nReported here https://github.com/Microsoft/service-fabric-client-dotnet/issues/54","Url":"https://github.com/dotnet/corefx/issues/34746","RelatedDescription":"Open issue \"ObjectDisposedException at System.Net.Security.SslState.ThrowIfExceptional() on .NET Core on Linux\" (#34746)"},{"Id":"401551344","IsPullRequest":true,"CreatedAt":"2019-01-22T17:22:45","Actor":"Anipik","Number":"34734","RawContent":null,"Title":"Making the milisecond test deterministic","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/34675\r\n\r\nThe change will ensure the newly created file has timestamp with non zero value of milliseconds.","Url":"https://github.com/dotnet/corefx/pull/34734","RelatedDescription":"Closed or merged PR \"Making the milisecond test deterministic\" (#34734)"},{"Id":"401766168","IsPullRequest":true,"CreatedAt":"2019-01-22T17:22:28","Actor":"Dotnet-GitSync-Bot","Number":"34741","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @filipnavara","Url":"https://github.com/dotnet/corefx/pull/34741","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,coreclr\" (#34741)"},{"Id":"401849537","IsPullRequest":false,"CreatedAt":"2019-01-22T16:33:52","Actor":"NonSecwitter","Number":"34744","RawContent":null,"Title":"Array objects should be able to represent their internal state of being sorted","State":"open","Body":"### Rationale\r\nThe condition of being sorted is a question of the internal state of the array. Without an internal representation to convey it's state, knowing the internal state of being sorted depends on (a) compliance with requirements known by successful communication through documentation or (b) implementing the routine to always perform a sort operation on a received array.\r\n\r\nThe first case pushes the responsibility of creating and maintaining knowledge of internal state onto the client. The second case would likely be grossly inefficient, and requires the client to know the internal behavior of providing sort functionality. In both cases, this is a violation of data abstraction principals and makes the implementation of the provided function dependent on the client for correct operation.\r\n\r\nAdding a property ```IsSorted``` helps relieve the amiguity, giving libraries the opportunity to check for the state of being sorted, to sort when needed, and to not sort when not needed.\r\n\r\n### Usage\r\nA lot of operations involving arrays are dependent on its state of being sorted or unsorted. Because the ```Array``` object does not indicate it's own internal state, it creates ambiguity\r\n\r\n A simple example of how this could be beneficial:\r\n\r\n```\r\npublic int BinarySearch(Array HayStack, object Needle)\r\n{\r\n    if(!HayStack.IsSorted)\r\n        HayStack.Sort();\r\n\r\n    BinarySearchFunctionality();\r\n}\r\n\r\n```\r\n### Proposed API\r\n```\r\npublic abstract partial class Array : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.ICloneable\r\n    {\r\n        internal Array() { }\r\n        public bool IsFixedSize { get { throw null; } }\r\n        public bool IsReadOnly { get { throw null; } }\r\n        public bool IsSynchronized { get { throw null; } }\r\n\r\n\r\n// New interface...\r\n        public bool IsSorted { get { throw null; } }\r\n// End new interface\r\n\r\n\r\n        public int Length { get { throw null; } }\r\n        public long LongLength { get { throw null; } }\r\n        public int Rank { get { throw null; } }\r\n        public object SyncRoot { get { throw null; } }\r\n        int System.Collections.ICollection.Count { get { throw null; } }\r\n        object System.Collections.IList.this[int index] { get { throw null; } set { } }\r\n        public static System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly<T>(T[] array) { throw null; }\r\n        public static int BinarySearch(System.Array array, int index, int length, object value) { throw null; }\r\n        public static int BinarySearch(System.Array array, int index, int length, object value, System.Collections.IComparer comparer) { throw null; }\r\n        public static int BinarySearch(System.Array array, object value) { throw null; }\r\n        public static int BinarySearch(System.Array array, object value, System.Collections.IComparer comparer) { throw null; }\r\n        public static int BinarySearch<T>(T[] array, int index, int length, T value) { throw null; }\r\n        public static int BinarySearch<T>(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer) { throw null; }\r\n        public static int BinarySearch<T>(T[] array, T value) { throw null; }\r\n        public static int BinarySearch<T>(T[] array, T value, System.Collections.Generic.IComparer<T> comparer) { throw null; }\r\n        public static void Clear(System.Array array, int index, int length) { }\r\n        public object Clone() { throw null; }\r\n        public static void ConstrainedCopy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length) { }\r\n        public static TOutput[] ConvertAll<TInput, TOutput>(TInput[] array, System.Converter<TInput, TOutput> converter) { throw null; }\r\n        public static void Copy(System.Array sourceArray, System.Array destinationArray, int length) { }\r\n        public static void Copy(System.Array sourceArray, System.Array destinationArray, long length) { }\r\n        public static void Copy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length) { }\r\n        public static void Copy(System.Array sourceArray, long sourceIndex, System.Array destinationArray, long destinationIndex, long length) { }\r\n        public void CopyTo(System.Array array, int index) { }\r\n        public void CopyTo(System.Array array, long index) { }\r\n        public static System.Array CreateInstance(System.Type elementType, int length) { throw null; }\r\n        public static System.Array CreateInstance(System.Type elementType, int length1, int length2) { throw null; }\r\n        public static System.Array CreateInstance(System.Type elementType, int length1, int length2, int length3) { throw null; }\r\n        public static System.Array CreateInstance(System.Type elementType, params int[] lengths) { throw null; }\r\n        public static System.Array CreateInstance(System.Type elementType, int[] lengths, int[] lowerBounds) { throw null; }\r\n        public static System.Array CreateInstance(System.Type elementType, params long[] lengths) { throw null; }\r\n        public static T[] Empty<T>() { throw null; }\r\n        public static bool Exists<T>(T[] array, System.Predicate<T> match) { throw null; }\r\n        public static void Fill<T>(T[] array, T value) { }\r\n        public static void Fill<T>(T[] array, T value, int startIndex, int count) { }\r\n        public static T[] FindAll<T>(T[] array, System.Predicate<T> match) { throw null; }\r\n        public static int FindIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match) { throw null; }\r\n        public static int FindIndex<T>(T[] array, int startIndex, System.Predicate<T> match) { throw null; }\r\n        public static int FindIndex<T>(T[] array, System.Predicate<T> match) { throw null; }\r\n        public static int FindLastIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match) { throw null; }\r\n        public static int FindLastIndex<T>(T[] array, int startIndex, System.Predicate<T> match) { throw null; }\r\n        public static int FindLastIndex<T>(T[] array, System.Predicate<T> match) { throw null; }\r\n        public static T FindLast<T>(T[] array, System.Predicate<T> match) { throw null; }\r\n        public static T Find<T>(T[] array, System.Predicate<T> match) { throw null; }\r\n        public static void ForEach<T>(T[] array, System.Action<T> action) { }\r\n        public System.Collections.IEnumerator GetEnumerator() { throw null; }\r\n        public int GetLength(int dimension) { throw null; }\r\n        public long GetLongLength(int dimension) { throw null; }\r\n        public int GetLowerBound(int dimension) { throw null; }\r\n        public int GetUpperBound(int dimension) { throw null; }\r\n        public object GetValue(int index) { throw null; }\r\n        public object GetValue(int index1, int index2) { throw null; }\r\n        public object GetValue(int index1, int index2, int index3) { throw null; }\r\n        public object GetValue(params int[] indices) { throw null; }\r\n        public object GetValue(long index) { throw null; }\r\n        public object GetValue(long index1, long index2) { throw null; }\r\n        public object GetValue(long index1, long index2, long index3) { throw null; }\r\n        public object GetValue(params long[] indices) { throw null; }\r\n        public static int IndexOf(System.Array array, object value) { throw null; }\r\n        public static int IndexOf(System.Array array, object value, int startIndex) { throw null; }\r\n        public static int IndexOf(System.Array array, object value, int startIndex, int count) { throw null; }\r\n        public static int IndexOf<T>(T[] array, T value) { throw null; }\r\n        public static int IndexOf<T>(T[] array, T value, int startIndex) { throw null; }\r\n        public static int IndexOf<T>(T[] array, T value, int startIndex, int count) { throw null; }\r\n        public void Initialize() { }\r\n        public static int LastIndexOf(System.Array array, object value) { throw null; }\r\n        public static int LastIndexOf(System.Array array, object value, int startIndex) { throw null; }\r\n        public static int LastIndexOf(System.Array array, object value, int startIndex, int count) { throw null; }\r\n        public static int LastIndexOf<T>(T[] array, T value) { throw null; }\r\n        public static int LastIndexOf<T>(T[] array, T value, int startIndex) { throw null; }\r\n        public static int LastIndexOf<T>(T[] array, T value, int startIndex, int count) { throw null; }\r\n        public static void Resize<T>(ref T[] array, int newSize) { }\r\n        public static void Reverse(System.Array array) { }\r\n        public static void Reverse(System.Array array, int index, int length) { }\r\n        public static void Reverse<T>(T[] array) { }\r\n        public static void Reverse<T>(T[] array, int index, int length) { }\r\n        public void SetValue(object value, int index) { }\r\n        public void SetValue(object value, int index1, int index2) { }\r\n        public void SetValue(object value, int index1, int index2, int index3) { }\r\n        public void SetValue(object value, params int[] indices) { }\r\n        public void SetValue(object value, long index) { }\r\n        public void SetValue(object value, long index1, long index2) { }\r\n        public void SetValue(object value, long index1, long index2, long index3) { }\r\n        public void SetValue(object value, params long[] indices) { }\r\n        public static void Sort(System.Array array) { }\r\n        public static void Sort(System.Array keys, System.Array items) { }\r\n        public static void Sort(System.Array keys, System.Array items, System.Collections.IComparer comparer) { }\r\n        public static void Sort(System.Array keys, System.Array items, int index, int length) { }\r\n        public static void Sort(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer) { }\r\n        public static void Sort(System.Array array, System.Collections.IComparer comparer) { }\r\n        public static void Sort(System.Array array, int index, int length) { }\r\n        public static void Sort(System.Array array, int index, int length, System.Collections.IComparer comparer) { }\r\n        public static void Sort<T>(T[] array) { }\r\n        public static void Sort<T>(T[] array, System.Collections.Generic.IComparer<T> comparer) { }\r\n        public static void Sort<T>(T[] array, System.Comparison<T> comparison) { }\r\n        public static void Sort<T>(T[] array, int index, int length) { }\r\n        public static void Sort<T>(T[] array, int index, int length, System.Collections.Generic.IComparer<T> comparer) { }\r\n        public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items) { }\r\n        public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, System.Collections.Generic.IComparer<TKey> comparer) { }\r\n        public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length) { }\r\n        public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer<TKey> comparer) { }\r\n        int System.Collections.IList.Add(object value) { throw null; }\r\n        void System.Collections.IList.Clear() { }\r\n        bool System.Collections.IList.Contains(object value) { throw null; }\r\n        int System.Collections.IList.IndexOf(object value) { throw null; }\r\n        void System.Collections.IList.Insert(int index, object value) { }\r\n        void System.Collections.IList.Remove(object value) { }\r\n        void System.Collections.IList.RemoveAt(int index) { }\r\n        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer) { throw null; }\r\n        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer) { throw null; }\r\n        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { throw null; }\r\n        public static bool TrueForAll<T>(T[] array, System.Predicate<T> match) { throw null; }\r\n    }\r\n```\r\n\r\n### Details\r\nThe ```Sort``` operation will need to update the internal flag indicating current sort state.\r\n\r\n### Open Questions\r\n\r\n- Handling scenarios where the condition of being ordered may change:\r\n    - When inserting items, the client can do insertion sort or just add elements in whatever order. Only allowing the Array object itself to manage the internal state may require adding methods for ```SortedInsert``` ","Url":"https://github.com/dotnet/corefx/issues/34744","RelatedDescription":"Open issue \"Array objects should be able to represent their internal state of being sorted\" (#34744)"},{"Id":"401830950","IsPullRequest":true,"CreatedAt":"2019-01-22T15:54:24","Actor":"dotnet-maestro[bot]","Number":"34743","RawContent":null,"Title":"Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview-27322-1\r\n- Microsoft.NETCore.DotNetHost - 3.0.0-preview-27322-1\r\n- Microsoft.NETCore.DotNetHostPolicy - 3.0.0-preview-27322-1\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview-27322-2\r\n- Microsoft.NETCore.DotNetHost - 3.0.0-preview-27322-2\r\n- Microsoft.NETCore.DotNetHostPolicy - 3.0.0-preview-27322-2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34743","RelatedDescription":"Open PR \"Update dependencies from dotnet/core-setup\" (#34743)"},{"Id":"401347375","IsPullRequest":true,"CreatedAt":"2019-01-22T14:50:56","Actor":"dotnet-maestro[bot]","Number":"34725","RawContent":null,"Title":"Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview-27320-72\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview-27320-72\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview-27320-72\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview-27321-72\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview-27321-72\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview-27321-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34725","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/coreclr\" (#34725)"},{"Id":"401596688","IsPullRequest":true,"CreatedAt":"2019-01-22T14:50:30","Actor":"NonSecwitter","Number":"34737","RawContent":null,"Title":"improve abstraction","State":"closed","Body":"The condition of being sorted is a question of the internal state of the array. absent an internal representation to convey it's state, knowing the internal state of being sorted depends on (a) compliance with requirements known by successful communication through documentation or (b) as the routine using the array, always performing a sort operation on a received array.\r\n\r\nThe first case pushes the responsibility of creating and maintaining knowledge of internal state onto the client, thus violating data abstraction principles. The second case would likely be grossly inneficient, and it may not always be clear whether the implementer has assumed the responsibility of assuming nothing is sorted.","Url":"https://github.com/dotnet/corefx/pull/34737","RelatedDescription":"Closed or merged PR \"improve abstraction\" (#34737)"},{"Id":"401784924","IsPullRequest":true,"CreatedAt":"2019-01-22T14:16:47","Actor":"benaadams","Number":"34742","RawContent":null,"Title":"Extend SequenceCompareTo_byte for longer vector lengths","State":"open","Body":"/cc @ahsonkhan ","Url":"https://github.com/dotnet/corefx/pull/34742","RelatedDescription":"Open PR \"Extend SequenceCompareTo_byte for longer vector lengths\" (#34742)"},{"Id":"401344352","IsPullRequest":true,"CreatedAt":"2019-01-22T13:31:26","Actor":"dotnet-maestro[bot]","Number":"34724","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.Build.Tasks.Configuration - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.19070.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.CoreFxTesting - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19070.2\r\n- Microsoft.DotNet.SourceRewriter - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.19070.2\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.Build.Tasks.Configuration - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.19070.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.CoreFxTesting - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19070.2\r\n- Microsoft.DotNet.SourceRewriter - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.19070.2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34724","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#34724)"},{"Id":"401565939","IsPullRequest":true,"CreatedAt":"2019-01-22T13:29:11","Actor":"dotnet-maestro[bot]","Number":"34735","RawContent":null,"Title":"Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview-27321-3\r\n- Microsoft.NETCore.DotNetHost - 3.0.0-preview-27321-3\r\n- Microsoft.NETCore.DotNetHostPolicy - 3.0.0-preview-27321-3\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview-27321-4\r\n- Microsoft.NETCore.DotNetHost - 3.0.0-preview-27321-4\r\n- Microsoft.NETCore.DotNetHostPolicy - 3.0.0-preview-27321-4\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview-27321-5\r\n- Microsoft.NETCore.DotNetHost - 3.0.0-preview-27321-5\r\n- Microsoft.NETCore.DotNetHostPolicy - 3.0.0-preview-27321-5\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34735","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/core-setup\" (#34735)"},{"Id":"401585539","IsPullRequest":true,"CreatedAt":"2019-01-22T13:28:50","Actor":"Dotnet-GitSync-Bot","Number":"34736","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corefx/pull/34736","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34736)"},{"Id":"401614867","IsPullRequest":true,"CreatedAt":"2019-01-22T13:07:11","Actor":"dotnet-maestro-bot","Number":"34738","RawContent":null,"Title":"Update CoreFx, ProjectNTfs, ProjectNTfsTestILC to preview.19071.2, beta-27322-00, beta-27322-00, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34738","RelatedDescription":"Closed or merged PR \"Update CoreFx, ProjectNTfs, ProjectNTfsTestILC to preview.19071.2, beta-27322-00, beta-27322-00, respectively (master)\" (#34738)"},{"Id":"401691856","IsPullRequest":false,"CreatedAt":"2019-01-22T10:17:20","Actor":"ramsubbaraoc","Number":"34740","RawContent":null,"Title":"error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure while using .NET Core","State":"open","Body":"I get the following error during Authentication on Linux:\r\n\r\nSystem.Security.Authentication.AuthenticationException: Authentication failed, see inner exception. ---> Interop+OpenSsl+SslException: SSL Handshake failed with OpenSSL error - SSL_ERROR_SSL. ---> Interop+Crypto+OpenSslCryptographicException: error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure\r\n   --- End of inner exception stack trace ---\r\n   at Interop.OpenSsl.DoSslHandshake(SafeSslHandle context, Byte[] recvBuf, Int32 recvOffset, Int32 recvCount, Byte[]& sendBuf, Int32& sendCount)\r\n   at System.Net.Security.SslStreamPal.HandshakeInternal(SafeFreeCredentials credential, SafeDeleteContext& context, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, SslAuthenticationOptions sslAuthenticationOptions)\r\n\r\nI had added the certificates using the following code:\r\n        ```\r\n  ```\r\n         X509Store personalStore = new X509Store(StoreName.Root, StoreLocation.CurrentUser);\r\n            personalStore.Open(OpenFlags.ReadWrite);\r\n            X509Certificate2Collection collection2 = new X509Certificate2Collection();\r\n\r\n            collection2.Import(\"client.p12\", \"12345\", X509KeyStorageFlags.PersistKeySet);\r\n            Console.WriteLine(\"Adding certificates into trusted store\");\r\n            foreach (X509Certificate2 cert in collection2)\r\n            {\r\n                Console.WriteLine(\"Subject is: '{0}'\", cert.Subject);\r\n                Console.WriteLine(\"Issuer is:  '{0}'\", cert.Issuer);\r\n                personalStore.Add(cert);\r\n            }\r\n```\r\n```\r\n   The error occurs during authentication and during the following call\r\n stream.AuthenticateAsClient(SERVERNAME, currentClientCerts, sslProtocol, sslCertRevocationCheck);","Url":"https://github.com/dotnet/corefx/issues/34740","RelatedDescription":"Open issue \"error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure while using .NET Core\" (#34740)"},{"Id":"401660942","IsPullRequest":false,"CreatedAt":"2019-01-22T09:01:57","Actor":"dotnet-mc-bot","Number":"34739","RawContent":null,"Title":"Test failure: TimerFiringTests/Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(dueTimes: [200, 250, 300])","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `TimerFiringTests/Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(dueTimes: [200, 250, 300])` has failed.\n\nFailure Message:\n```\n25% out of 240 timer firings were off by more than 100ms\\r\nExpected: 200, Actuals: 826, 826, 826, 826, 826, 826, 826, 826, 826, 826, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827\\r\nExpected: 250, Actuals: 826, 826, 826, 826, 826, 826, 826, 826, 826, 826, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827\\r\nExpected: 300, Actuals: 826, 826, 826, 826, 826, 826, 826, 826, 826, 826, 826, 826, 826, 827, 827, 827, 827, 827, 827, 827\\r\nExpected: True\\r\nActual:   False\n```\n\nStack Trace:\n```\n   at TimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(Int32[] dueTimes) in F:\\vsagent\\17\\s\\src\\System.Threading.Timer\\tests\\TimerFiringTests.cs:line 301\n--- End of stack trace from previous location where exception was thrown ---\n```\n\nBuild : 3.0 - 20190121.2 (Core Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS4-x86\n  - Release\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190121.2/workItem/System.Threading.Timer.Tests/analysis/xunit/TimerFiringTests~2FTimer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(dueTimes:%20%5B200,%20250,%20300%5D)","Url":"https://github.com/dotnet/corefx/issues/34739","RelatedDescription":"Open issue \"Test failure: TimerFiringTests/Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(dueTimes: [200, 250, 300])\" (#34739)"},{"Id":"401408133","IsPullRequest":true,"CreatedAt":"2019-01-22T01:45:22","Actor":"dotnet-maestro[bot]","Number":"34726","RawContent":null,"Title":"Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview-27321-2\r\n- Microsoft.NETCore.DotNetHost - 3.0.0-preview-27321-2\r\n- Microsoft.NETCore.DotNetHostPolicy - 3.0.0-preview-27321-2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34726","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/core-setup\" (#34726)"},{"Id":"401420110","IsPullRequest":true,"CreatedAt":"2019-01-22T01:44:39","Actor":"stephentoub","Number":"34727","RawContent":null,"Title":"Add tests for various length DateTime.ToString years","State":"closed","Body":"cc: @tarekgh ","Url":"https://github.com/dotnet/corefx/pull/34727","RelatedDescription":"Closed or merged PR \"Add tests for various length DateTime.ToString years\" (#34727)"},{"Id":"401512800","IsPullRequest":true,"CreatedAt":"2019-01-22T01:37:01","Actor":"dotnet-maestro-bot","Number":"34732","RawContent":null,"Title":"Update CoreFx to preview.19071.1 (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34732","RelatedDescription":"Closed or merged PR \"Update CoreFx to preview.19071.1 (master)\" (#34732)"},{"Id":"401514070","IsPullRequest":true,"CreatedAt":"2019-01-22T01:36:45","Actor":"Dotnet-GitSync-Bot","Number":"34733","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/34733","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34733)"},{"Id":"401506613","IsPullRequest":false,"CreatedAt":"2019-01-21T20:52:09","Actor":"MarcoRossignoli","Number":"34731","RawContent":null,"Title":"Possible issue using \"/p:XunitOptions=-method *method\"","State":"open","Body":"In past I was able to do console test using method options, now I get error:\r\n```\r\nD:\\git\\corefx\\src\\System.Threading.Thread (executioncontext -> origin)\r\nλ msbuild /t:rebuildandtest /v:m \"/p:XunitOptions=-method *CurrentPrincipalContextFlowTest\"\r\n...\r\n MTAMain -> D:\\git\\corefx\\artifacts\\bin\\MTAMain\\netstandard\\MTAMain.exe\r\n  DefaultApartmentStateMain -> D:\\git\\corefx\\artifacts\\bin\\DefaultApartmentStateMain\\netstandard\\DefaultApartmentStateMain.exe\r\n  RemoteExecutorConsoleApp -> D:\\git\\corefx\\artifacts\\bin\\RemoteExecutorConsoleApp\\netstandard\\RemoteExecutorConsoleApp.exe\r\n  System.Threading.Thread.Tests -> D:\\git\\corefx\\artifacts\\bin\\System.Threading.Thread.Tests\\netcoreapp-Debug\\System.Threading.Thread.Tests.dll\r\nC:\\Users\\marco_000\\.nuget\\packages\\microsoft.dotnet.corefxtesting\\1.0.0-beta.19066.1\\build\\core\\Core.targets(127,5): error : Please provide at least one test command to execute via the RunCommands property. [D:\\git\\corefx\\src\\System.Thre ading.Thread\\tests\\System.Threading.Thread.Tests.csproj]\r\n  DefaultApartmentStateMain -> D:\\git\\corefx\\artifacts\\bin\\DefaultApartmentStateMain\\netstandard-Debug\\DefaultApartmentStateMain.exe\r\n  MTAMain -> D:\\git\\corefx\\artifacts\\bin\\MTAMain\\netstandard-Debug\\MTAMain.exe\r\n  STAMain -> D:\\git\\corefx\\artifacts\\bin\\STAMain\\netstandard-Debug\\STAMain.exe\r\n```\r\nAm I missing something?\r\n\r\n/cc @ViktorHofer @karelz @wtgodbe\r\n\r\nEDIT: the issue seems related to `*` character","Url":"https://github.com/dotnet/corefx/issues/34731","RelatedDescription":"Open issue \"Possible issue using \"/p:XunitOptions=-method *method\"\" (#34731)"},{"Id":"401504906","IsPullRequest":false,"CreatedAt":"2019-01-21T20:45:41","Actor":"gh5692","Number":"34730","RawContent":null,"Title":"LdapConnection BeginSendRequest Throws PlatformNotSupportedException in .NET Core 2.2","State":"open","Body":"LdapConnection.BeginSendRequest uses BeginInvoke which is not supported in .NET Core.\r\n\r\n`<TargetFramework>netcoreapp2.2</TargetFramework>`\r\n\r\n`<PackageReference Include=\"System.DirectoryServices.Protocols\" Version=\"4.5.0\" />`\r\n\r\n> System.PlatformNotSupportedException: Operation is not supported on this platform.\r\n>    at System.DirectoryServices.Protocols.GetLdapResponseCallback.BeginInvoke(Int32 messageId, LdapOperation operation, ResultAll resultType, TimeSpan requestTimeout, Boolean exceptionOnTimeOut, AsyncCallback callback, Object object)\r\n>    at System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest(DirectoryRequest request, TimeSpan requestTimeout, PartialResultProcessing partialMode, AsyncCallback callback, Object state)\r\n>    at System.DirectoryServices.Protocols.LdapConnection.BeginSendRequest(DirectoryRequest request, PartialResultProcessing partialMode, AsyncCallback callback, Object state)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34730","RelatedDescription":"Open issue \"LdapConnection BeginSendRequest Throws PlatformNotSupportedException in .NET Core 2.2\" (#34730)"},{"Id":"401443090","IsPullRequest":true,"CreatedAt":"2019-01-21T17:08:28","Actor":"omajid","Number":"34729","RawContent":null,"Title":"[WIP: DO NOT MERGE] OpenSSL but pick up and use 1.1 where availalbe","State":"open","Body":"This is https://github.com/dotnet/corefx/pull/34443 but actually picks up OpenSSL 1.1 if it's installed (instead of always preferring 1.0). This PR is for testing how things look in CI. It's not meant to be reviewed or merged.\r\n\r\nPlease do not review or merge this. This is for testing #34443 only.","Url":"https://github.com/dotnet/corefx/pull/34729","RelatedDescription":"Open PR \"[WIP: DO NOT MERGE] OpenSSL but pick up and use 1.1 where availalbe\" (#34729)"},{"Id":"401425738","IsPullRequest":false,"CreatedAt":"2019-01-21T16:22:56","Actor":"PatrickHofman","Number":"34728","RawContent":null,"Title":"Redirect with location having an anchor fails in a HTTP 400 on some servers","State":"open","Body":"### Problem\r\n\r\nI think we are hitting a bug when having a third party (OAuth authentication server) returning a HTTP 302 redirect with the location set to a URL having a anchor (`#`). The redirected request returns a HTTP 400.\r\n\r\n### Test case\r\n\r\n```\r\nWebClient wc = new WebClient();\r\nwc.DownloadString(\"http://corefx-net.cloudapp.net/Redirect.ashx?uri=%2FEcho.ashx#something\");\r\n```\r\n\r\nI am not sure if this issue is the same as the following code, but it will at least give the exact same error message:\r\n\r\n```\r\nWebClient wc = new WebClient();\r\nwc.DownloadString(\"http://corefx-net.cloudapp.net/Redirect.ashx?statuscode=302&uri=%2FEcho.ashx%23something\");\r\n```\r\n\r\n### Expected result\r\n\r\nI expected that a request to `http://corefx-net.cloudapp.net/Redirect.ashx?statuscode=302&uri=%2FEcho.ashx%23something` would return in a redirect to `http://corefx-net.cloudapp.net/Echo.ashx#something` resulting in a HTTP 200.\r\n\r\n### Details\r\n\r\nThe problem reproduces on .NET Core 2.2 and 2.1, but it doesn't on .NET Core 2.0 and below. The problem doesn't reproduce on .NET Framework 4.7.2 and 4.7.\r\n\r\nGood to mention it concerns OAuth on Exact Online, a cloud accounting program, which support the Implicit Grant Flow of OAuth.\r\n\r\nIt reproduces as an error from Microsoft HTTPAPI (http.sys). Does not reproduce on AWS CloudFront hosted site as redirect URL.","Url":"https://github.com/dotnet/corefx/issues/34728","RelatedDescription":"Open issue \"Redirect with location having an anchor fails in a HTTP 400 on some servers\" (#34728)"},{"Id":"401336778","IsPullRequest":false,"CreatedAt":"2019-01-21T12:42:57","Actor":"MichalStrehovsky","Number":"34723","RawContent":null,"Title":"DispatchProxy doesn't handle Span","State":"open","Body":"This fails with:\r\n\r\nSystem.InvalidProgramException: 'Cannot create boxed ByRef-like values.'\r\n\r\nNot sure we can do anything with the existing structure, but this doesn't point to where the problem is.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Reflection;\r\n\r\nunsafe interface IFoo\r\n{\r\n    int Frob(Span<int> x);\r\n}\r\n\r\nunsafe class Program : DispatchProxy\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        IFoo myProxy = DispatchProxy.Create<IFoo, Program>();\r\n        int result = myProxy.Frob(default);\r\n        Console.WriteLine($\"myProxy.Frob returned {(IntPtr)result}\");\r\n    }\r\n\r\n    protected override object Invoke(MethodInfo targetMethod, object[] args)\r\n    {\r\n        Console.WriteLine($\"Invoked method {targetMethod.Name} with {args.Length} arguments\");\r\n        return 42;\r\n    }\r\n}\r\n\r\n```","Url":"https://github.com/dotnet/corefx/issues/34723","RelatedDescription":"Open issue \"DispatchProxy doesn't handle Span\" (#34723)"},{"Id":"401336155","IsPullRequest":false,"CreatedAt":"2019-01-21T12:41:10","Actor":"MichalStrehovsky","Number":"34722","RawContent":null,"Title":"DispatchProxy doesn't handle ref returns","State":"open","Body":"Not sure if anything can be done with the existing structure to make this work, but this fails with:\r\n\r\nSystem.ArgumentException: 'Cannot get TypeToken for a ByRef type.'\r\n\r\nThis doesn't really point to where the problem is.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Reflection;\r\n\r\nunsafe interface IFoo\r\n{\r\n    ref int Frob();\r\n}\r\n\r\nunsafe class Program : DispatchProxy\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        IFoo myProxy = DispatchProxy.Create<IFoo, Program>();\r\n        int result = myProxy.Frob();\r\n        Console.WriteLine($\"myProxy.Frob returned {(IntPtr)result}\");\r\n    }\r\n\r\n    protected override object Invoke(MethodInfo targetMethod, object[] args)\r\n    {\r\n        Console.WriteLine($\"Invoked method {targetMethod.Name} with {args.Length} arguments\");\r\n        return 42;\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/34722","RelatedDescription":"Open issue \"DispatchProxy doesn't handle ref returns\" (#34722)"},{"Id":"401330213","IsPullRequest":false,"CreatedAt":"2019-01-21T12:24:16","Actor":"markrendle","Number":"34721","RawContent":null,"Title":"System.Diagnostics.DiagnosticSource assembly has obsolete SecurityPermissionAttribute","State":"open","Body":"We're trying to use `System.Diagnostics.DiagnosticSource` package release `4.5.1` in a secure sandboxed environment, and it's being rejected because it has this assembly attribute:\r\n\r\n```csharp\r\n[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]\r\n```\r\n\r\nAccording to the docs, this attribute and the `SecurityAction` enum are obsolete and not supported by the runtime, so there's no reason for them to be in the `lib\\net46\\System.Diagnostics.DiagnosticSource` assembly.\r\n\r\nHaving downloaded and decompiled older versions of the package, it seems like this attribute turned up in [release 4.4.0](https://www.nuget.org/packages/System.Diagnostics.DiagnosticSource/4.4.0), which was the release that added the `Activity` type, which we are using and so can't revert to 4.3.1.\r\n\r\n`4.4.0` also introduced separate build targets for `net45` and `netcoreapp2.0`, where previously there had just been `net46`, `netstandard1.1`, `netstandard1.3` and the `portable...` builds. Is it possible that adding the `net45` target has dragged this attribute in from somewhere in the depths of the CI environment?","Url":"https://github.com/dotnet/corefx/issues/34721","RelatedDescription":"Open issue \"System.Diagnostics.DiagnosticSource assembly has obsolete SecurityPermissionAttribute\" (#34721)"},{"Id":"401311476","IsPullRequest":true,"CreatedAt":"2019-01-21T11:31:46","Actor":"MichalStrehovsky","Number":"34720","RawContent":null,"Title":"Add support for default interface methods in DispatchProxy","State":"open","Body":"The generated dispatch proxy shouldn't try to override non-virtual or final methods.\r\n\r\nThis also fixes a pre-existing bug where we would try to override static method on interfaces (while C# can't emit them, the CLR has supported them for ages).\r\n\r\nFixes dotnet/coreclr#15646.","Url":"https://github.com/dotnet/corefx/pull/34720","RelatedDescription":"Open PR \"Add support for default interface methods in DispatchProxy\" (#34720)"},{"Id":"401264592","IsPullRequest":false,"CreatedAt":"2019-01-21T09:33:47","Actor":"maxd","Number":"34719","RawContent":null,"Title":"StringParsingHelpers.ParseTcpGlobalStatisticsFromSnmpFile throw \"System.OverflowException: Arithmetic operation resulted in an overflow.\"","State":"open","Body":"In my case the [StringParsingHelpers.ParseTcpGlobalStatisticsFromSnmpFile](https://github.com/dotnet/corefx/blob/2f70dfc7382ce07bd40d38c60393a5c8e83ee53f/src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/StringParsingHelpers.Statistics.cs#L329-L361) method [read data](https://github.com/dotnet/corefx/blob/2f70dfc7382ce07bd40d38c60393a5c8e83ee53f/src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/LinuxTcpStatistics.cs#L15) from `/proc/net/snmp` file. It contains the following data:\r\n\r\n```\r\nIp: Forwarding DefaultTTL InReceives InHdrErrors InAddrErrors ForwDatagrams InUnknownProtos InDiscards InDelivers OutRequests OutDiscards OutNoRoutes ReasmTimeout ReasmReqds ReasmOKs ReasmFails FragOKs FragFails FragCreates\r\nIp: 1 64 2593378738 0 4 1208227 0 0 2592170507 2577000578 28 0 0 0 0 0 0 0 0\r\nIcmp: InMsgs InErrors InCsumErrors InDestUnreachs InTimeExcds InParmProbs InSrcQuenchs InRedirects InEchos InEchoReps InTimestamps InTimestampReps InAddrMasks InAddrMaskReps OutMsgs OutErrors OutDestUnreachs OutTimeExcds OutParmProbs OutSrcQuenchs OutRedirects OutEchos OutEchoReps OutTimestamps OutTimestampReps OutAddrMasks OutAddrMaskReps\r\nIcmp: 56 0 0 56 0 0 0 0 0 0 0 0 0 0 58 0 58 0 0 0 0 0 0 0 0 0 0\r\nIcmpMsg: InType3 OutType3\r\nIcmpMsg: 56 58\r\nTcp: RtoAlgorithm RtoMin RtoMax MaxConn ActiveOpens PassiveOpens AttemptFails EstabResets CurrEstab InSegs OutSegs RetransSegs InErrs OutRsts InCsumErrors\r\nTcp: 1 200 120000 -1 5194587 6129539 1493164 371287 93 2592159585 2576867425 5349 0 1864996 0\r\nUdp: InDatagrams NoPorts InErrors OutDatagrams RcvbufErrors SndbufErrors InCsumErrors IgnoredMulti\r\nUdp: 10810 56 0 10871 0 0 0 0\r\nUdpLite: InDatagrams NoPorts InErrors OutDatagrams RcvbufErrors SndbufErrors InCsumErrors IgnoredMulti\r\nUdpLite: 0 0 0 0 0 0 0 0\r\n```\r\n\r\nAs you can see the second `Tcp:` line contains 2592159585 (InSegs) and 2576867425 (OutSegs) values. These values out of bound of maximal values of [int](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/int) type (-2,147,483,648 to 2,147,483,647). So, it cause the following exception:\r\n\r\n```\r\nUnhandled Exception: System.OverflowException: Arithmetic operation resulted in an overflow.\r\n   at System.IO.StringParser.ParseNextInt32()\r\n   at System.Net.NetworkInformation.StringParsingHelpers.ParseTcpGlobalStatisticsFromSnmpFile(String filePath)\r\n   at System.Net.NetworkInformation.LinuxTcpStatistics..ctor(Boolean ipv4)\r\n   at System.Net.NetworkInformation.LinuxIPGlobalProperties.GetTcpIPv6Statistics()\r\n   at MyExchange.Metrics.TcpMetrics..ctor(MetricsBase metrics, IReadOnlyDictionary`2 tags) in /source/Common/src/Metrics/TcpMetrics.cs:line 58\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite enumerableCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Hosting.WebHostExtensions.RunAsync(IWebHost host, CancellationToken token, String shutdownMessage)\r\n   at Microsoft.AspNetCore.Hosting.WebHostExtensions.RunAsync(IWebHost host, CancellationToken token)\r\n   at Microsoft.AspNetCore.Hosting.WebHostExtensions.Run(IWebHost host)\r\n   at MyExchange.MarketData.WebSocketServer.Main(String[] args) in /source/MarketData.WS/src/Program.cs:line 14\r\n```\r\n\r\nWorkaround: Restart server to reset accumulated statistics in `/proc/net/snmp` file but this is unacceptable workaround for everyday usage.\r\n\r\nAdditional information:\r\n\r\n```\r\n# dotnet --info\r\n\r\nHost (useful for support):\r\n  Version: 2.1.7\r\n  Commit:  cca5d72d48\r\n\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nLet me know if required any additional information.\r\n","Url":"https://github.com/dotnet/corefx/issues/34719","RelatedDescription":"Open issue \"StringParsingHelpers.ParseTcpGlobalStatisticsFromSnmpFile throw \"System.OverflowException: Arithmetic operation resulted in an overflow.\"\" (#34719)"},{"Id":"401211690","IsPullRequest":false,"CreatedAt":"2019-01-21T06:32:37","Actor":"dotnet-mc-bot","Number":"34718","RawContent":null,"Title":"Test failure: System.IO.MemoryMappedFiles.Tests.MemoryMappedViewAccessorTests/ValidAccessLevelCombinations(mapAccess: ReadWriteExecute, viewAccess: ReadExecute)","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `System.IO.MemoryMappedFiles.Tests.MemoryMappedViewAccessorTests/ValidAccessLevelCombinations(mapAccess: ReadWriteExecute, viewAccess: ReadExecute)` has failed.\n\nFailure Message:\n```\nSystem.UnauthorizedAccessException : Access to the path is denied.\n---- System.IO.IOException : Operation not permitted\n```\n\nStack Trace:\n```\n   at System.IO.MemoryMappedFiles.MemoryMappedView.CreateView(SafeMemoryMappedFileHandle memMappedFileHandle, MemoryMappedFileAccess access, Int64 requestedOffset, Int64 requestedSize) in /__w/1/s/src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedView.Unix.cs:line 119\n   at System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(Int64 offset, Int64 size, MemoryMappedFileAccess access) in /__w/1/s/src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs:line 447\n   at System.IO.MemoryMappedFiles.Tests.MemoryMappedViewAccessorTests.<>c__DisplayClass1_0.<ValidAccessLevelCombinations>b__0() in /__w/1/s/src/System.IO.MemoryMappedFiles/tests/MemoryMappedViewAccessor.Tests.cs:line 84\n   at System.AssertExtensions.ThrowsIf[T](Boolean condition, Action action) in /__w/1/s/src/CoreFx.Private.TestUtilities/src/System/AssertExtensions.cs:line 189\n   at System.IO.MemoryMappedFiles.Tests.MemoryMappedViewAccessorTests.ValidAccessLevelCombinations(MemoryMappedFileAccess mapAccess, MemoryMappedFileAccess viewAccess) in /__w/1/s/src/System.IO.MemoryMappedFiles/tests/MemoryMappedViewAccessor.Tests.cs:line 80\n----- Inner Stack Trace -----\n\n```\n\nBuild : 3.0 - 20190120.4 (Core Tests)\nFailing configurations:\n- Ubuntu.1804.Arm64-arm64\n  - Release\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190120.4/workItem/System.IO.MemoryMappedFiles.Tests/analysis/xunit/System.IO.MemoryMappedFiles.Tests.MemoryMappedViewAccessorTests~2FValidAccessLevelCombinations(mapAccess:%20ReadWriteExecute,%20viewAccess:%20ReadExecute)","Url":"https://github.com/dotnet/corefx/issues/34718","RelatedDescription":"Open issue \"Test failure: System.IO.MemoryMappedFiles.Tests.MemoryMappedViewAccessorTests/ValidAccessLevelCombinations(mapAccess: ReadWriteExecute, viewAccess: ReadExecute)\" (#34718)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"401929483","IsPullRequest":false,"CreatedAt":"2019-01-22T19:59:27","Actor":"CyrusNajmabadi","Number":"32676","RawContent":null,"Title":"Cannot build latest roslyn","State":"open","Body":"I'm getting:\r\n\r\n```\r\n1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(126,5): error : The current .NET SDK does not support targeting .NET Standard 2.0.  Either target .NET Standard 1.6 or lower, or use a version of the .NET SDK that supports .NET Standard 2.0.\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/32676","RelatedDescription":"Open issue \"Cannot build latest roslyn\" (#32676)"},{"Id":"401907231","IsPullRequest":true,"CreatedAt":"2019-01-22T19:00:11","Actor":"mavasani","Number":"32675","RawContent":null,"Title":"Add bail out cases for unused members analyzer","State":"open","Body":"1. Usages as an argument to `nameof`: We have multiple reports of these being false positives in presence of reflection based usages and in variour test frameworks. Fixes #32488.\r\n2. Presence of 'dynamic' in C# - Conservatively bail out in presence of any dynamic operations. Fixes #32522.","Url":"https://github.com/dotnet/roslyn/pull/32675","RelatedDescription":"Open PR \"Add bail out cases for unused members analyzer\" (#32675)"},{"Id":"401897470","IsPullRequest":false,"CreatedAt":"2019-01-22T18:33:47","Actor":"jcouv","Number":"32674","RawContent":null,"Title":"Incorrect binding of suppressed target-typed array initializer","State":"open","Body":"\r\n```C#\r\n        [Fact]\r\n        public void SuppressNullableWarning_TargetTypedArrayInitializer()\r\n        {\r\n            var comp = CreateCompilation(@\"\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        string[] s = (new[] { null })!;\r\n    }\r\n}\");\r\n            comp.VerifyDiagnostics(\r\n                // (6,22): error CS0029: Cannot implicitly convert type '?[]' to 'string[]'\r\n                //         string[] s = (new[] { null })!;\r\n                Diagnostic(ErrorCode.ERR_NoImplicitConv, \"(new[] { null })!\").WithArguments(\"?[]\", \"string[]\").WithLocation(6, 22),\r\n                // (6,23): error CS0826: No best type found for implicitly-typed array\r\n                //         string[] s = (new[] { null })!;\r\n                Diagnostic(ErrorCode.ERR_ImplicitlyTypedArrayNoBestType, \"new[] { null }\").WithLocation(6, 23)\r\n                );\r\n        }\r\n```","Url":"https://github.com/dotnet/roslyn/issues/32674","RelatedDescription":"Open issue \"Incorrect binding of suppressed target-typed array initializer\" (#32674)"},{"Id":"401090669","IsPullRequest":true,"CreatedAt":"2019-01-22T18:00:25","Actor":"dotnet-bot","Number":"32664","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32664","RelatedDescription":"Closed or merged PR \"Merge master to dev16.1-preview1\" (#32664)"},{"Id":"401090692","IsPullRequest":true,"CreatedAt":"2019-01-22T18:00:15","Actor":"dotnet-bot","Number":"32665","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32665","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32665)"},{"Id":"401090696","IsPullRequest":true,"CreatedAt":"2019-01-22T18:00:10","Actor":"dotnet-bot","Number":"32666","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32666","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#32666)"},{"Id":"401884643","IsPullRequest":true,"CreatedAt":"2019-01-22T17:58:36","Actor":"DustinCampbell","Number":"32673","RawContent":null,"Title":"Add check to AbstractEditorFactory to load new WinForms designer if necessary","State":"open","Body":"When the AbstractEditorFactory needs to load the WinForms designer, it must first check the\r\nproject's TFM. If the TFM is netcoreapp and is greater or equal to 3.0, it specifies a\r\ndifferent string to the IVSMDDesignerService.CreateDesignerLoader(...) to indicate that the\r\nnew WinForms designer should be instantiated.\r\n\r\nEventually, this code will move into the WinForms designer itself.\r\n\r\nNote: At the moment, this will only use the netcoreapp3.0 TFM for a multi-targeted project if the netcoreapp3.0 TFM appears first in the list of TFMs. There is further design work needed to determine what to do in the case that there are multiple TFMs.","Url":"https://github.com/dotnet/roslyn/pull/32673","RelatedDescription":"Open PR \"Add check to AbstractEditorFactory to load new WinForms designer if necessary\" (#32673)"},{"Id":"401829696","IsPullRequest":false,"CreatedAt":"2019-01-22T15:51:53","Actor":"rainersigwald","Number":"32672","RawContent":null,"Title":"Feature: Enable setting the \"NoWarn\" option on a per-file basis","State":"open","Body":"_From @fubar-coder on January 21, 2019 13:57_\n\n### Steps to reproduce\r\n\r\nExample project file (as suggestion):\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <GenerateDocumentationFile Condition=\"'$(Configuration)' == 'Release'\">true</GenerateDocumentationFile>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"2.2.0\" PrivateAssets=\"All\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Update=\"Program.cs\">\r\n      <NoWarn>CS1591;$(NoWarn)</NoWarn>\r\n    </Compile>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n### Expected  behavior\r\n\r\nNo CS1591 warning for `Program.cs`.\r\n\r\n### Actual behavior\r\n\r\nI get a warning for `Program.cs`.\r\n\r\n\n\n_Copied from original issue: Microsoft/msbuild#4087_","Url":"https://github.com/dotnet/roslyn/issues/32672","RelatedDescription":"Open issue \"Feature: Enable setting the \"NoWarn\" option on a per-file basis\" (#32672)"},{"Id":"401734050","IsPullRequest":false,"CreatedAt":"2019-01-22T12:06:48","Actor":"TessenR","Number":"32671","RawContent":null,"Title":"Annotations do not work for user defined conversion operators","State":"open","Body":"**Version Used**: \r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.2 (26430.16) Release\r\nVisualStudio.15.Release/15.2.0+26430.16\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code\r\n```cs\r\n#nullable enable\r\nusing System.Runtime.CompilerServices;\r\n\r\nclass C\r\n{\r\n  void M(C? c)\r\n  {\r\n    if (c)\r\n    {\r\n      c.ToString();\r\n    }\r\n  }\r\n\r\n  public static extern implicit operator bool([NotNullWhenTrue] C? c);\r\n}\r\n\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n  class NotNullWhenTrueAttribute : System.Attribute { }\r\n}\r\n```\r\n\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABABgqYEYA6AJX1xgBLMHC4BhAPZgADoPIIAyogBuggMZwoAbkaMmAJgpjGAb0YV2AFgoBZABRiA/BTUBKcxTMMLFwQDMKOzcPCy8fHzUuABUJBRgEQVwAcztXHW8fAF8PbIYPJgBmdg4ANioAD3gEXAphaUJ1QRgKCWlECBgJBApgCQlCOwBtADkJGGGiQgB1AAtqKIR8OABdI2c3dNzGGhEoaQgNYt5+IRFxKVl5JQRVDShTfMNR8cnZ+cW4AEEYeMFgfHgFBAR2+v3+gJMFFymSAA==\r\n\r\n**Expected Behavior**:\r\nNo warnings for `c.ToString()` as according to the annotation it cannot be null when the conversion operator returns `true`\r\n\r\n**Actual Behavior**:\r\n`warning CS8602: Possible dereference of a null reference.`","Url":"https://github.com/dotnet/roslyn/issues/32671","RelatedDescription":"Open issue \"Annotations do not work for user defined conversion operators\" (#32671)"},{"Id":"400942706","IsPullRequest":false,"CreatedAt":"2019-01-22T01:15:09","Actor":"verelpode","Number":"32650","RawContent":null,"Title":"Extract Method C7 crash was not fixed successfully?","State":"closed","Body":"This ExtractMethodCodeRefactoringProvider C7 crash was supposed to be fixed, but surprisingly it happened to me again today with VS 15.9.3.  Following is the code that caused it (with some names changed).\r\n\r\n```\r\n\t\tprivate MyEnum1 _GetValueValidity(StringSegment inValueStr, out StringSegment outCorrectedString, bool inAllowTrim)\r\n\t\t{\r\n\t\t\toutCorrectedString = inValueStr;\r\n\t\t\tif (!fIsSurroundingWhiteSpaceAllowed)\r\n\t\t\t{\r\n\t\t\t\tStringSegment trimmedStrSeg = inValueStr.Trim();\r\n\t\t\t\tif (trimmedStrSeg.Length < inValueStr.Length)   // xxxxx\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!inAllowTrim) return MyEnum1.XXX1;\r\n\t\t\t\t\tinValueStr = trimmedStrSeg;\r\n\t\t\t\t\toutCorrectedString = trimmedStrSeg;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!fAreLineBreakCharsAllowed && MyHelper1.FindVertWhiteSpace(inValueStr) >= 0)\r\n\t\t\t\treturn MyEnum1.XXX2;\r\n\t\t\t\r\n\t\t\tif (fAllowedCharMatcher != null && fAllowedCharMatcher.FindNonChar(inValueStr) >= 0)\r\n\t\t\t\treturn MyEnum1.XXX1;\r\n\r\n\t\t\tint valueStrLength = inValueStr.Length;\r\n\t\t\tif (valueStrLength < fMinCharCount)\r\n\t\t\t\treturn (valueStrLength == 0) ? MyEnum1.XXX3 : MyEnum1.XXX4;\r\n\t\t\tint mxcc = fMaxCharCount;\r\n\t\t\tif (mxcc >= 0 && valueStrLength > mxcc)\r\n\t\t\t\treturn MyEnum1.XXX5;\r\n\r\n\t\t\treturn MyEnum1.XXX6;\r\n\t\t}\r\n\r\n\t\tpublic override MyEnum1 GetValueValidity()\r\n\t\t{\r\n\t\t\treturn this._GetValueValidity(fEditTextBox.Text, inAllowTrim: true);\r\n\t\t}\r\n```\r\n\r\n```\r\nExtractMethodCodeRefactoringProvider encountered an error and has been disabled.\r\nSystem.InvalidOperationException : Matrix does not contain Key 'C7'.\r\n   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodMatrix.GetVariableStyle(Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetVariableStyle(Dictionary`2 symbolMap,ISymbol symbol,SemanticModel model,ITypeSymbol type,Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GenerateVariableInfoMap(SemanticModel model,DataFlowAnalysis dataFlowAnalysisData,Dictionary`2 symbolMap)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\n_Originally posted by @verelpode in https://github.com/dotnet/roslyn/issue_comments#issuecomment-455733140_\r\n\r\nand   https://github.com/dotnet/roslyn/issues/29658","Url":"https://github.com/dotnet/roslyn/issues/32650","RelatedDescription":"Closed issue \"Extract Method C7 crash was not fixed successfully?\" (#32650)"},{"Id":"401533527","IsPullRequest":false,"CreatedAt":"2019-01-21T23:39:09","Actor":"MHanafy","Number":"32670","RawContent":null,"Title":"incorrect null coalescing ?? operator precedence with nullable int - int?","State":"closed","Body":"**Version Used**: \r\nReproducible with C# interactive x64, Microsoft (R) Roslyn C# Compiler version 2.10.0.0\r\nSolution target framework is: 4.6.2\r\n**Steps to Reproduce**:\r\nint? x = null;\r\nint? y = 1;\r\nWrite(x??0+y) // => prints 1, which is expected since 0 + 1 = 1\r\n\r\nNow if you do this:\r\nint? x = 1;\r\nint? y = 1:\r\nWrite(x??0+y) // => prints 1???, although it should be 1+1 = 2, but due to a weird operator precedence with int? and ?? it resolves to 1.\r\n\r\nThe workaround is to put Parentheses around, like this:\r\nWrite((x??0)+y) // => now it prints 2 as you would expect.\r\n\r\n**Expected Behavior**:\r\nWhen using ?? operator over int?, I expect it to have higher precedence over the later operators, in this case the +\r\n\r\n**Actual Behavior**:\r\nint? x = 1;\r\nint? y = 1:\r\nWrite(x??0+y) // results in 1, while it should be 2\r\n","Url":"https://github.com/dotnet/roslyn/issues/32670","RelatedDescription":"Closed issue \"incorrect null coalescing ?? operator precedence with nullable int - int?\" (#32670)"},{"Id":"401192274","IsPullRequest":false,"CreatedAt":"2019-01-21T04:48:27","Actor":"davkean","Number":"32669","RawContent":null,"Title":"6% of CPU opening a bunch of source files is GetService(typeof(SComponentModel))","State":"open","Body":"**Version Used**: \r\nVersion 16.0.0 Preview 3.0 [28517.116.d16.0stg]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. `> git clone http://github.com/dotnet/project-system`\r\n2. `> cd project-system`\r\n3. `project-system> build.cmd`\r\n4. `project-system> ProjectSystem.sln`\r\n5. File -> Open -> File\r\n6. In project-system\\src, search for ext:\"cs\"\r\n7. Select All to selected all files\r\n8. Open \r\n\r\n6% of the CPU time is just calling GetService over and over again. The overhead is almost all due the JoinableTaskFactory.Run call underneath inside VS's global service provider.\r\n![image](https://user-images.githubusercontent.com/1103906/51453456-a8266f80-1d93-11e9-91f3-5fe87ddd9bd5.png)\r\n\r\nThis line should be cached: https://github.com/dotnet/roslyn/blob/a6bc53bee0fbc893ec5e24c97fc2b510a86a6953/src/VisualStudio/Core/Def/Implementation/LanguageService/AbstractPackage%602.cs#L121.\r\n","Url":"https://github.com/dotnet/roslyn/issues/32669","RelatedDescription":"Open issue \"6% of CPU opening a bunch of source files is GetService(typeof(SComponentModel))\" (#32669)"},{"Id":"401112172","IsPullRequest":true,"CreatedAt":"2019-01-20T16:08:13","Actor":"CodeTherapist","Number":"32668","RawContent":null,"Title":"Exposes additional compilation options to the scripting API","State":"open","Body":"The values for the properties in the `ScriptOptions` are [the same as before](https://github.com/dotnet/roslyn/blob/master/src/Scripting/CSharp/CSharpScriptCompiler.cs#L57). To ensure no behavior change and being compatible with previous versions.\r\n\r\nCloses #32667 \r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/32668","RelatedDescription":"Open PR \"Exposes additional compilation options to the scripting API\" (#32668)"},{"Id":"401111291","IsPullRequest":false,"CreatedAt":"2019-01-20T15:58:57","Actor":"CodeTherapist","Number":"32667","RawContent":null,"Title":"Expose additonal compiler options to the scripting API","State":"open","Body":"The following compilation options [OptimizationLevel](https://github.com/dotnet/roslyn/blob/8c24e04bd2343bd719b62f57abbc859b9305cb36/src/Compilers/Core/Portable/Compilation/CompilationOptions.cs#L134), [AllowUnsafe](https://github.com/dotnet/roslyn/blob/8c24e04bd2343bd719b62f57abbc859b9305cb36/src/Compilers/CSharp/Portable/CSharpCompilationOptions.cs#L25), [CheckOverflow](https://github.com/dotnet/roslyn/blob/8c24e04bd2343bd719b62f57abbc859b9305cb36/src/Compilers/Core/Portable/Compilation/CompilationOptions.cs#L123), [WarningLevel](https://github.com/dotnet/roslyn/blob/8c24e04bd2343bd719b62f57abbc859b9305cb36/src/Compilers/Core/Portable/Compilation/CompilationOptions.cs#L144) aren't exposed in the [scripting options API](https://github.com/dotnet/roslyn/blob/master/src/Scripting/Core/ScriptOptions.cs) ([CSharpScriptCompiler](https://github.com/dotnet/roslyn/blob/master/src/Scripting/CSharp/CSharpScriptCompiler.cs#L57)).\r\n\r\nRelated issue: #1262","Url":"https://github.com/dotnet/roslyn/issues/32667","RelatedDescription":"Open issue \"Expose additonal compiler options to the scripting API\" (#32667)"},{"Id":"401047285","IsPullRequest":true,"CreatedAt":"2019-01-20T01:30:04","Actor":"dotnet-bot","Number":"32663","RawContent":null,"Title":"Merge master-vs-deps to dev16.1-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32663","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32663)"},{"Id":"401032973","IsPullRequest":false,"CreatedAt":"2019-01-19T20:43:35","Actor":"bartdesmet","Number":"32662","RawContent":null,"Title":"\"Make field readonly\" triggers on field of generic parameter type constrained to struct","State":"open","Body":"**Version Used**: VS 16.0 Preview 1.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\ninterface IQux\r\n{\r\n    bool this[int i] { get; set; }\r\n}\r\n\r\nclass Foo<T> where T : struct, IQux\r\n{\r\n    private T t; // \"Make field readonly\" makes code in Bar invalid.\r\n\r\n    public Foo(T t) => this.t = t;\r\n\r\n    public void Bar() => t[0] = true;\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/32662","RelatedDescription":"Open issue \"\"Make field readonly\" triggers on field of generic parameter type constrained to struct\" (#32662)"},{"Id":"401023473","IsPullRequest":false,"CreatedAt":"2019-01-19T18:47:37","Actor":"jcouv","Number":"32661","RawContent":null,"Title":"Verify semantic model on suppressed expressions","State":"open","Body":"From discussion with Neal, we think the suppression expression should have matching `Type` and `ConvertedType`, which would be the converted type of the underlying expression.\r\nIn `(Delegate)(() = {}!)` and `Delegate x = () => {}!;`, the suppressed expressions would have type and converted type `Delegate`.\r\n\r\nOther interesting scenarios involving conversions from expressions: `null`, `default`, lambdas, method groups, interpolated strings.\r\n\r\nLook for uses of `BoundNode.Kind` and `BoundKind.MethodGroup` (for instance, `GetTypeInfoForNode`)","Url":"https://github.com/dotnet/roslyn/issues/32661","RelatedDescription":"Open issue \"Verify semantic model on suppressed expressions\" (#32661)"},{"Id":"401007015","IsPullRequest":false,"CreatedAt":"2019-01-19T15:41:04","Actor":"jhinder","Number":"32660","RawContent":null,"Title":"VB does not produce an error when Conditional is placed on Function members","State":"open","Body":"**Version Used**: VS 16.0 Preview 1.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Copy the code below into a VB project.\r\n2. Compile.\r\n\r\n```vbnet\r\nPublic Class ConditionalAttrRepro\r\n    Public ReadOnly Property I As Integer\r\n        <Conditional(\"SOMETHING\")>\r\n        Get\r\n            Return 0\r\n        End Get\r\n    End Property\r\n\r\n    <Conditional(\"SOMETHING\")>\r\n    Public Function M() As Integer\r\n        Return 0\r\n    End Function\r\nEnd Class\r\n```\r\n\r\n**Expected Behavior**: The code does not compile, because the Conditional attribute is placed on invalid members.\r\n\r\nFrom the [docs](https://docs.microsoft.com/en-gb/dotnet/api/system.diagnostics.conditionalattribute?view=netframework-4.7.2#remarks):\r\n\r\n> You will get a compilation error in Visual Studio if you apply this attribute to a method that does not return void.\r\n\r\n**Actual Behavior**: The code compiles with warning BC41007 (\"Attribute 'Conditional' is only valid on 'Sub' declarations\"). No idea what would happen if a compiler consuming the assembly were to respect the attribute.","Url":"https://github.com/dotnet/roslyn/issues/32660","RelatedDescription":"Open issue \"VB does not produce an error when Conditional is placed on Function members\" (#32660)"},{"Id":"400989378","IsPullRequest":true,"CreatedAt":"2019-01-19T13:30:20","Actor":"dotnet-bot","Number":"32655","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32655","RelatedDescription":"Closed or merged PR \"Merge master to dev16.1-preview1\" (#32655)"},{"Id":"400989385","IsPullRequest":true,"CreatedAt":"2019-01-19T13:30:15","Actor":"dotnet-bot","Number":"32656","RawContent":null,"Title":"Merge master-vs-deps to dev16.1-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32656","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32656)"},{"Id":"400989399","IsPullRequest":true,"CreatedAt":"2019-01-19T13:30:11","Actor":"dotnet-bot","Number":"32657","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32657","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32657)"},{"Id":"400989413","IsPullRequest":true,"CreatedAt":"2019-01-19T13:30:07","Actor":"dotnet-bot","Number":"32658","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32658","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#32658)"},{"Id":"400989424","IsPullRequest":true,"CreatedAt":"2019-01-19T12:00:44","Actor":"dotnet-bot","Number":"32659","RawContent":null,"Title":"Merge master to features/NullableDogfood","State":"open","Body":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32659","RelatedDescription":"Open PR \"Merge master to features/NullableDogfood\" (#32659)"},{"Id":"400950493","IsPullRequest":true,"CreatedAt":"2019-01-19T02:17:23","Actor":"tmat","Number":"32654","RawContent":null,"Title":"Misc improvements in Roslyn preview installer scripts.","State":"open","Body":"Allow installing on Dev16.\r\nAllow to specify rootSuffix.\r\nBump min required VS version to 15.8.\r\nMisc cleanup.","Url":"https://github.com/dotnet/roslyn/pull/32654","RelatedDescription":"Open PR \"Misc improvements in Roslyn preview installer scripts.\" (#32654)"},{"Id":"400947229","IsPullRequest":true,"CreatedAt":"2019-01-19T01:42:16","Actor":"jasonmalinowski","Number":"32653","RawContent":null,"Title":"Don't crash if we can't fetch the IVsOutputWindow","State":"open","Body":"We potentially run the creation of the output window pane during the shutdown of Visual Studio. This can happen because we're using InvokeBelowInputPriorityAsync, which queues the switch to the UI thread\r\nusing IThreadingContext.JoinableTaskFactory.SwitchToMainThreadAsync(). This resulting continuation can run during package shutdown when services are no longer available.\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nCustomer closes Visual Studio. While it's shutting down, it might crash.\r\n\r\n### Bugs this fixes\r\n\r\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/744155\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nLow, just adding a null check that should have been there all along. And this is fixing a crash-during-shutdown scenario so we can't really make it worse.\r\n\r\n### Performance impact\r\n\r\nNone.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nWe believe so; this will now crash more often in 16.0 vs. 15.9.\r\n\r\n### Root cause analysis\r\n\r\nThere was a missing null check that should have been there, but it would have been difficult in practice to hit, because the code that would have crashed during shutdown wouldn't have actually ran. When we changed to use the Joinable Task Factory, these now can run during shutdown which can crash.\r\n\r\nWe're having a followup conversation to better the scenario here; this partly happened because of an unexpected link between tasks we scheduled and the asynchronous package that loaded us. Once we fully understand the behavior we may have to do an audit to look for other offenses, but that's a longer-term conversation.\r\n\r\n### How was the bug found?\r\n\r\nWindows Error Reporting (Watson) reports.\r\n\r\n</details>\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/32653","RelatedDescription":"Open PR \"Don't crash if we can't fetch the IVsOutputWindow\" (#32653)"},{"Id":"400946949","IsPullRequest":true,"CreatedAt":"2019-01-19T01:40:03","Actor":"genlu","Number":"32652","RawContent":null,"Title":"Make method body generation not rely on destination type","State":"open","Body":"Fix #30750.\r\n\r\nI think being able to extract method in an interface might be useful during a refactoring (this is how this bug was found), so I opt to make this change instead of disabling the refactoring in this scenario. Thoughts?\r\n\r\n@dotnet/roslyn-ide @CyrusNajmabadi \r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/32652","RelatedDescription":"Open PR \"Make method body generation not rely on destination type\" (#32652)"},{"Id":"400932830","IsPullRequest":true,"CreatedAt":"2019-01-19T01:30:08","Actor":"dotnet-bot","Number":"32647","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32647","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#32647)"},{"Id":"400945831","IsPullRequest":false,"CreatedAt":"2019-01-19T01:29:20","Actor":"ivanbasov","Number":"32651","RawContent":null,"Title":"invoke completion does not work at the beginning of partial symbol","State":"open","Body":"This happens with both existing and new completions.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. \r\n\r\n```\r\nnamespace ClassLibrary1\r\n{\r\n    public class Class1\r\n    {\r\n        Class1()\r\n        {\r\n            $$Ba\r\n        }\r\n        void Bar()\r\n        {\r\n\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n2.  press Ctrl+J or Ctrl+Space\r\n3. completion popup appears.\r\n\r\n**Expected Behavior**:\r\nBar is selected in the completion popup\r\n\r\n**Actual Behavior**:\r\nThe first element is selected in the completion popup\r\n","Url":"https://github.com/dotnet/roslyn/issues/32651","RelatedDescription":"Open issue \"invoke completion does not work at the beginning of partial symbol\" (#32651)"},{"Id":"400939762","IsPullRequest":true,"CreatedAt":"2019-01-19T00:41:46","Actor":"jasonmalinowski","Number":"32649","RawContent":null,"Title":"Fix metadata references not always having file watchers","State":"open","Body":"When we created metadata references inside of VisualStudioProject, we ensured we created them with a file watcher so we would know about changes. When we created a metadata reference after we converted a project reference back to a metadata reference that was originally a metadata reference, we didn't do so since that conversion happens in VisualStudioWorkspaceImpl itself and it couldn't access the file watcher.\r\n\r\nThis fixes this. The majority of the work here is just moving code around. Basically the watchers were per-project, which meant that it'd be forbidden to call into them the Workspace code because that would violate the lock hierarchy. To fix this, I move the file watching logic into it's own little type with a lock, and since no calls are made back into the workspace under that lock, it removes the deadlock concerns.\r\n\r\nFixes #32554.","Url":"https://github.com/dotnet/roslyn/pull/32649","RelatedDescription":"Open PR \"Fix metadata references not always having file watchers\" (#32649)"},{"Id":"400939371","IsPullRequest":true,"CreatedAt":"2019-01-19T00:39:19","Actor":"dibarbet","Number":"32648","RawContent":null,"Title":"Issue 31304 Check variables in scope when getting name declaration suggestions","State":"open","Body":"https://github.com/dotnet/roslyn/issues/31304\r\n\r\nThis changes the behavior of the declaration name provider to check to see if the variable name is already defined in the current scope.  \r\n\r\nRaising this to get some clarity on a couple issues.\r\n1.  I'm not sure what the performance impact of calling `LookupSymbols` on the location is when providing the suggestions.  It should only be called once every time the suggestion list is generated.\r\n2.  What symbols should be considered as conflicting?  Parameters and locals seem to be a definite, but I've also included ones like fields (which could be shadowed).\r\n","Url":"https://github.com/dotnet/roslyn/pull/32648","RelatedDescription":"Open PR \"Issue 31304 Check variables in scope when getting name declaration suggestions\" (#32648)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"401908040","IsPullRequest":true,"CreatedAt":"2019-01-22T19:02:28","Actor":"nattress","Number":"6867","RawContent":null,"Title":"Ldvirtftn support for CPAOT","State":"open","Body":"Support for loading virtual delegates, plus splitting `getCallInfo` into a ReadyToRun specific implementation.\r\n\r\nIt will be easier to look at the commit diff for the ldvirtftn fix so the JIT interface changes aren't lost in the refactor.","Url":"https://github.com/dotnet/corert/pull/6867","RelatedDescription":"Open PR \"Ldvirtftn support for CPAOT\" (#6867)"},{"Id":"401763657","IsPullRequest":true,"CreatedAt":"2019-01-22T13:26:19","Actor":"filipnavara","Number":"6866","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"#6865 + build fixes.","Url":"https://github.com/dotnet/corert/pull/6866","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#6866)"},{"Id":"401675437","IsPullRequest":true,"CreatedAt":"2019-01-22T13:08:04","Actor":"MichalStrehovsky","Number":"6863","RawContent":null,"Title":"Unify IL readers","State":"closed","Body":"`ILReader` added in #6849 can be used in `ILStreamReader`, saving us 100 lines of code.","Url":"https://github.com/dotnet/corert/pull/6863","RelatedDescription":"Closed or merged PR \"Unify IL readers\" (#6863)"},{"Id":"401738696","IsPullRequest":true,"CreatedAt":"2019-01-22T12:19:54","Actor":"Dotnet-GitSync-Bot","Number":"6865","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/6865","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#6865)"},{"Id":"401706301","IsPullRequest":true,"CreatedAt":"2019-01-22T10:51:54","Actor":"tonerdo","Number":"6864","RawContent":null,"Title":"[Interpreter] Branching","State":"open","Body":"This PR adds support for the following opcodes:\r\n\r\n* br*\r\n* switch\r\n\r\nA positive side effect of this is that interpreted assemblies can now be built in Debug mode.\r\n\r\nSupersedes #6725 ","Url":"https://github.com/dotnet/corert/pull/6864","RelatedDescription":"Open PR \"[Interpreter] Branching\" (#6864)"},{"Id":"401585560","IsPullRequest":true,"CreatedAt":"2019-01-22T06:08:29","Actor":"Dotnet-GitSync-Bot","Number":"6862","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6862","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6862)"},{"Id":"401043116","IsPullRequest":true,"CreatedAt":"2019-01-21T23:16:47","Actor":"tonerdo","Number":"6849","RawContent":null,"Title":"[Interpreter] Use ILReader","State":"closed","Body":"This PR does the following:\r\n\r\n* Swaps out `ILImporter` for `ILReader`, which provides a stream-like IL reading experience\r\n* ~Introduces `ILInstruction` and `ILOperand` classes to provide (in addition to `ILOpcode`) a strongly typed representation of the opcode, operand (if any) and (in the future) exception block information.~\r\n* Moves all interpretation logic from `ILImporter.Interpreter` to `ILInterpreter`. Excluding method name and argument changes, logic for existing interpreter functionality was kept as is.\r\n\r\ncc @MichalStrehovsky @jkotas @mikedn ","Url":"https://github.com/dotnet/corert/pull/6849","RelatedDescription":"Closed or merged PR \"[Interpreter] Use ILReader\" (#6849)"},{"Id":"401514112","IsPullRequest":true,"CreatedAt":"2019-01-21T22:30:38","Actor":"Dotnet-GitSync-Bot","Number":"6861","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6861","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6861)"},{"Id":"401373498","IsPullRequest":true,"CreatedAt":"2019-01-21T14:18:07","Actor":"filipnavara","Number":"6860","RawContent":null,"Title":"WIP: Move ThreadPool to shared CoreLib.","State":"open","Body":"Counterpart to https://github.com/dotnet/coreclr/pull/22115 for build testing.","Url":"https://github.com/dotnet/corert/pull/6860","RelatedDescription":"Open PR \"WIP: Move ThreadPool to shared CoreLib.\" (#6860)"},{"Id":"401316003","IsPullRequest":true,"CreatedAt":"2019-01-21T11:44:47","Actor":"MichalStrehovsky","Number":"6859","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6859","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6859)"},{"Id":"401203862","IsPullRequest":true,"CreatedAt":"2019-01-21T09:33:47","Actor":"jkotas","Number":"6858","RawContent":null,"Title":"Fixed reverse PInvoke UnmanagedType.LPArray+SizeParamIndex marshaling","State":"closed","Body":"Fixes #6852","Url":"https://github.com/dotnet/corert/pull/6858","RelatedDescription":"Closed or merged PR \"Fixed reverse PInvoke UnmanagedType.LPArray+SizeParamIndex marshaling\" (#6858)"},{"Id":"401072973","IsPullRequest":false,"CreatedAt":"2019-01-21T09:33:47","Actor":"robertsundstrom","Number":"6852","RawContent":null,"Title":"\"Invalid SizeParamIndex\" in WebAPI sample","State":"closed","Body":"In WebAPI sample.\r\n\r\nPublished using:\r\n```\r\ndotnet publish -r osx-x64 -c release\r\n```\r\n\r\nExecuting the program and open URL in browser:\r\n```\r\nhttps://localhost:5000/api/values/4\r\n```\r\n\r\nIn console:\r\n```\r\nUnhandled Exception: System.Exception: Invalid SizeParamIndex, parameter must be  of type int/uint\r\n   at helloworld!<BaseAddress>+0x88feb0\r\n```\r\n\r\nFollowed by a crash.","Url":"https://github.com/dotnet/corert/issues/6852","RelatedDescription":"Closed issue \"\"Invalid SizeParamIndex\" in WebAPI sample\" (#6852)"},{"Id":"401154096","IsPullRequest":true,"CreatedAt":"2019-01-21T07:22:45","Actor":"Dotnet-GitSync-Bot","Number":"6856","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6856","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6856)"},{"Id":"401156433","IsPullRequest":true,"CreatedAt":"2019-01-21T00:27:16","Actor":"stephentoub","Number":"6857","RawContent":null,"Title":"Adapt corert to Environment moving to shared","State":"open","Body":"Depends on (will need to be cherry-picked into the mirror for) https://github.com/dotnet/coreclr/pull/22106, likely with a few tweaks to accommodate anything I've missed.\r\n\r\nContributes to https://github.com/dotnet/coreclr/issues/21932","Url":"https://github.com/dotnet/corert/pull/6857","RelatedDescription":"Open PR \"Adapt corert to Environment moving to shared\" (#6857)"},{"Id":"401147644","IsPullRequest":true,"CreatedAt":"2019-01-20T23:56:36","Actor":"Dotnet-GitSync-Bot","Number":"6855","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6855","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6855)"},{"Id":"401112983","IsPullRequest":true,"CreatedAt":"2019-01-20T22:39:54","Actor":"Dotnet-GitSync-Bot","Number":"6854","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6854","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6854)"},{"Id":"401105985","IsPullRequest":false,"CreatedAt":"2019-01-20T15:49:31","Actor":"Rohansi","Number":"6853","RawContent":null,"Title":"[ILVerify] Duplicate type instances/Value type marked as reference type","State":"closed","Body":"I'm trying out the ILVerification library and my `typeof()`s are failing to verify. I can see that `Type.GetTypeFromHandle()` is (incorrectly) expecting the handle to be a reference type.\r\n\r\n![locals](https://files.facepunch.com/Rohan/2019/January/20_09-34-06.png)\r\n\r\nOne method it's failing in (at offset 6) has this IL:\r\n```\r\n.method public hidebysig static \r\n\tvoid CreateInstance<T> () cil managed \r\n{\r\n\t.maxstack 8\r\n\r\n\t/* 0x0000029E 00           */ IL_0000: nop\r\n\t/* 0x0000029F D00400001B   */ IL_0001: ldtoken   !!T\r\n\t/* 0x000002A4 281200000A   */ IL_0006: call      class [netstandard]System.Type [netstandard]System.Type::GetTypeFromHandle(valuetype [netstandard]System.RuntimeTypeHandle)\r\n\t/* 0x000002A9 281300000A   */ IL_000B: call      object [netstandard]System.Activator::CreateInstance(class [netstandard]System.Type)\r\n\t/* 0x000002B3 26           */ IL_0015: pop\r\n\t/* 0x000002B4 2A           */ IL_0016: ret\r\n} // end of method ActivatorTests::CreateInstance\r\n```\r\n\r\nI'm still looking into it but I can see that there are two different instances of `ValueType` which makes the `IsWellKnownType` check fail. Both of these instances have the same `Context`.\r\n\r\nI tried adding a test case for this locally but it passes (the `CreateInstance` makes no difference).\r\n```\r\n.class public auto ansi beforefieldinit LdtokenTestsType\r\n       extends [System.Runtime]System.Object\r\n{\r\n    .method static public hidebysig void Ldtoken.TypeOfConstant_Valid() cil managed \r\n    {\r\n        // typeof(object)\r\n        ldtoken [System.Runtime]System.Object\r\n        call class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)\r\n        pop\r\n        ret\r\n    }\r\n\r\n    .method static public hidebysig void Ldtoken.TypeOfGeneric_Valid<T>() cil managed \r\n    {\r\n        // typeof(T)\r\n        ldtoken !!T\r\n        call class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)\r\n        pop\r\n        ret\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/corert/issues/6853","RelatedDescription":"Closed issue \"[ILVerify] Duplicate type instances/Value type marked as reference type\" (#6853)"},{"Id":"401057289","IsPullRequest":false,"CreatedAt":"2019-01-20T03:01:19","Actor":"wjk","Number":"6851","RawContent":null,"Title":"Detect mismatched framework references and compiler version","State":"open","Body":"Repro is attached. If the `rd.xml` file is passed on the ilc command line, then ILC will throw an unhandled exception and crash. If not, then any code referencing Hashtable might crash at runtime (I first found this in \"real\" code when it was transitively referenced by DateTime-related code, but I couldn't cause a runtime crash with the attached repro). Please look into this. Thanks!\r\n\r\n[ilc-repro.zip](https://github.com/dotnet/corert/files/2776223/ilc-repro.zip)\r\n","Url":"https://github.com/dotnet/corert/issues/6851","RelatedDescription":"Open issue \"Detect mismatched framework references and compiler version\" (#6851)"},{"Id":"401050791","IsPullRequest":true,"CreatedAt":"2019-01-20T02:08:56","Actor":"Dotnet-GitSync-Bot","Number":"6850","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6850","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6850)"},{"Id":"400836386","IsPullRequest":true,"CreatedAt":"2019-01-19T18:56:10","Actor":"Dotnet-GitSync-Bot","Number":"6848","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6848","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6848)"},{"Id":"400463782","IsPullRequest":true,"CreatedAt":"2019-01-19T14:26:38","Actor":"sebastianulm","Number":"6843","RawContent":null,"Title":"Linux improvements (fixing linker args & Documentation updates)","State":"closed","Body":"~~Added -nopie to default linker args (following a gitter conversation) to help compile on Linux distributions that use PIE by default. \r\nShould solve https://github.com/dotnet/corert/issues/4988 (and a bunch of others)~~\r\n\r\nAdded some hints in the documentation to make CoreRT compile (and run) with more recent clang versions on Arch Linux\r\nhttps://github.com/dotnet/corert/issues/6835\r\n\r\nLet me know if there are any issues.","Url":"https://github.com/dotnet/corert/pull/6843","RelatedDescription":"Closed or merged PR \"Linux improvements (fixing linker args & Documentation updates)\" (#6843)"},{"Id":"400796654","IsPullRequest":true,"CreatedAt":"2019-01-18T16:27:15","Actor":"MichalStrehovsky","Number":"6847","RawContent":null,"Title":"[WIP] Fix PIC relocation issues","State":"open","Body":"Progress towards #4988.\r\n\r\nThe relocation issues we're having are due to two things: we emit all symbols as global, and we don't do the dance that is necessary to access symbols someone else could redefine in a different module and make them \"too far away\" to fit in a 32bit relocation. Ideally, we should find a way to ban this because I think it's breaking our ability to have static libraries built by different versions of CoreRT in the same process (they're going to redefine each other's symbols and that sounds bad).\r\n\r\nI ran out of time I allocated for myself for this. This is enough to actually build SharedLibrary.so, but the test is failing (because dlopen fails for reasons that I didn't investigate) and I didn't validate this doesn't break Windows or other (non-dynamic library) scenarios.\r\n\r\nI'll need to read up more on ELF relocs at some point.\r\n\r\nPutting it up in case someone would like to pick this up. I don't know when I'll be able to make time for this again.\r\n\r\nCc @tonerdo @tim241 @sebastianulm ","Url":"https://github.com/dotnet/corert/pull/6847","RelatedDescription":"Open PR \"[WIP] Fix PIC relocation issues\" (#6847)"},{"Id":"400615556","IsPullRequest":true,"CreatedAt":"2019-01-18T11:00:03","Actor":"marek-safar","Number":"6846","RawContent":null,"Title":"Fix defines in TaskAwaiter","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6846","RelatedDescription":"Closed or merged PR \"Fix defines in TaskAwaiter\" (#6846)"},{"Id":"400530340","IsPullRequest":true,"CreatedAt":"2019-01-18T02:06:56","Actor":"Dotnet-GitSync-Bot","Number":"6845","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6845","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#6845)"},{"Id":"400484744","IsPullRequest":true,"CreatedAt":"2019-01-17T23:29:52","Actor":"Dotnet-GitSync-Bot","Number":"6844","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @filipnavara","Url":"https://github.com/dotnet/corert/pull/6844","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6844)"},{"Id":"400461362","IsPullRequest":true,"CreatedAt":"2019-01-17T22:05:26","Actor":"Dotnet-GitSync-Bot","Number":"6842","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6842","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6842)"},{"Id":"400371690","IsPullRequest":true,"CreatedAt":"2019-01-17T17:49:50","Actor":"kvochko","Number":"6841","RawContent":null,"Title":"Linux/ARM assembly stub fixes","State":"closed","Body":"There are two small fixes in this patch:\r\n * R7 on Linux/arm is a general purpose callee-saved register and should be preserved in `PInvokeTransitionFrame`\r\n * Fix `RhpCheckedXchgRetry` return value\r\nCC @jkotas @alpencolt @iarischenko ","Url":"https://github.com/dotnet/corert/pull/6841","RelatedDescription":"Closed or merged PR \"Linux/ARM assembly stub fixes\" (#6841)"},{"Id":"400367151","IsPullRequest":true,"CreatedAt":"2019-01-17T17:10:30","Actor":"Dotnet-GitSync-Bot","Number":"6840","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6840","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6840)"},{"Id":"400307145","IsPullRequest":true,"CreatedAt":"2019-01-17T16:53:50","Actor":"filipnavara","Number":"6838","RawContent":null,"Title":"WIP: Split ContractsBCL and move it to shared.","State":"closed","Body":"Counter-piece for https://github.com/dotnet/coreclr/pull/22006 to run CI before merging.","Url":"https://github.com/dotnet/corert/pull/6838","RelatedDescription":"Closed or merged PR \"WIP: Split ContractsBCL and move it to shared.\" (#6838)"},{"Id":"400353851","IsPullRequest":true,"CreatedAt":"2019-01-17T16:19:38","Actor":"MichalStrehovsky","Number":"6839","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6839","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6839)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"401895527","IsPullRequest":false,"CreatedAt":"2019-01-22T18:28:29","Actor":"cdmihai","Number":"2855","RawContent":null,"Title":"Cannot build with DisableTransitiveProjectReferences=true","State":"open","Body":"Given a graph with projects that do not have compile time dependencies on the transitive projects, it should be able to build the graph without injecting transitive project references into each project.\r\n\r\nRepro:\r\n[new-xtarget-3.zip](https://github.com/dotnet/sdk/files/2784102/new-xtarget-3.zip)\r\nThe zip has a graph like 1->2->3. Running with `DisableTransitiveProjectReferences=true` gives the following results:\r\n\r\n```\r\n\"E:\\projects\\MSBuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\1\\1.csproj\" (default target) (1) ->\r\n\"E:\\projects\\MSBuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\1\\1.csproj\" (Build target) (1:2) ->\r\n(GenerateBuildDependencyFile target) ->\r\n  C:\\Program Files\\dotnet\\sdk\\2.2.200-preview-009748\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(129,5): error NETSDK1007: Cannot find project info for 'E:\\projects\\MSB \r\nuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\3\\3.csproj'. This can indicate a missing project reference. [E:\\projects\\MSBuildTestProjects\\projects\\sdk\\working\\new-xtarget-3\\1 \r\n\\1.csproj]\r\n```\r\n\r\nFailing binlog: \r\n[failing.zip](https://github.com/dotnet/sdk/files/2784113/failing.zip)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2855","RelatedDescription":"Open issue \"Cannot build with DisableTransitiveProjectReferences=true\" (#2855)"},{"Id":"401145954","IsPullRequest":true,"CreatedAt":"2019-01-22T17:37:23","Actor":"nguerrera","Number":"2850","RawContent":null,"Title":"Fix failure when using evaluation API to evaluate multi-targeted projects","State":"closed","Body":"Follow nearby pattern to guard against undefined _TargetFrameworkVersionWithoutV","Url":"https://github.com/dotnet/sdk/pull/2850","RelatedDescription":"Closed or merged PR \"Fix failure when using evaluation API to evaluate multi-targeted projects\" (#2850)"},{"Id":"401764141","IsPullRequest":false,"CreatedAt":"2019-01-22T13:27:34","Actor":"m0sa","Number":"2854","RawContent":null,"Title":"Make multi-targeting constants local properties","State":"open","Body":"The `DefineConstants` properties for multi targeting builds are a bit confusing, since they are global and not local. This means that if there is a custom `-p:DefineConstants=WHATEVER` on the command line, the multi targeting constants won't get added.\r\n\r\nWhat I'm asking here is to add a `TreatAsLocalProperty=\"DefineConstants\"` to Microsoft.NET.Sdk.CSharp.targets, (and possibly other .target / .props files where `DefineConstants` gets updated), so that it works consistently when the consuming build modifies it via a PropertyGroup as well as via command line args.\r\n\r\n---\r\n\r\nLet me elaborate. We have an old non-SDK style solution that we are gradually refactoring into AspNetCore and SDK-style. We were confronted with the build on the CI server failing miserably, because the target framework constants weren't defined during the build (e.g. `#if NET462` and `#if NETCOREAPP2_2` were not working as expected). Turned out that we had some build configurations passing in a custom `DefineConstants` property. As this property [is global](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-properties?view=vs-2017#global-properties), [this line Microsoft.NET.Sdk.CSharp.targets](https://github.com/dotnet/sdk/blob/006bb6ddaf2a3997ddd25f000fae968e9233fe93/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.CSharp.targets#L35) does not work like a *non-msbuild expert would* would expect from reading it. It took us multiple days of digging through MSBuildBinLog, and collective WTFing, to finally figure out what's going on. Ironically, we did skim over the SDK.CSharp.targets, as it was seemingly not doing what it was supposed to do, but it looked OK at first glance.\r\n\r\nAdding to the confusion was the fact that if you add a custom `<PropertyGroup><DefineConstants>WHATEVER</DefineConstants></PropertyGroup>`, it gets concatenated, and not overridden.\r\n\r\nIdeally, it would behave the same way (concatenate the existing  value) when it gets passed in via the command line arg.\r\n","Url":"https://github.com/dotnet/sdk/issues/2854","RelatedDescription":"Open issue \"Make multi-targeting constants local properties\" (#2854)"},{"Id":"401538714","IsPullRequest":true,"CreatedAt":"2019-01-21T23:05:45","Actor":"drewnoakes","Number":"2853","RawContent":null,"Title":"Don't set MSBuildAllProjects for MSBuild 16.0+","State":"open","Body":"Microsoft/msbuild#1299 discusses a change whereby MSBuild prepends the newest project file path to `MSBuildAllProjects` automatically. Therefore, so long as consumers of this property only use this property for up-to-date checks, it's possible to reduce both the size of this property and corresponding allocations.\r\n\r\nThis reduction applies equally to consumers, such as for the case discussed in dotnet/project-system#3744.\r\n\r\nFor backwards compatibility the property is still set for MSBuild versions prior to 16.0.\r\n\r\nSee also Microsoft/msbuild#3605.\r\n\r\n//cc: @jeffkl @rainersigwald @davkean ","Url":"https://github.com/dotnet/sdk/pull/2853","RelatedDescription":"Open PR \"Don't set MSBuildAllProjects for MSBuild 16.0+\" (#2853)"},{"Id":"401344480","IsPullRequest":true,"CreatedAt":"2019-01-21T14:14:36","Actor":"dotnet-maestro[bot]","Number":"2852","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19070.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19070.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2852","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2852)"},{"Id":"401311605","IsPullRequest":false,"CreatedAt":"2019-01-21T11:32:09","Actor":"0xd4d","Number":"2851","RawContent":null,"Title":"Publish self contained app with RIDs that refs a classlib without RIDs results in ArgumentNullException in ResolveFrameworkReferences","State":"open","Body":"Version: Latest build of .NET Core SDK (3.0.100-preview-010137)\r\n\r\nIf you have an app with RIDs in the csproj file that references a class library with no RIDs in its csproj file, and you publish a self contained .NET Core 3.0 app, the build fails with an ArgumentNullException in ResolveFrameworkReferences.\r\n\r\nhttps://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L132 calls `GetBestRuntimeIdentifier()` but this method assumes `AppHostRuntimeIdentifier` isn't `null`.\r\n\r\nStack trace:\r\n\r\n```\r\nThe \"ResolveFrameworkReferences\" task failed unexpectedly.\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: key\r\n   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n   at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)\r\n   at System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(TKey key)\r\n   at Microsoft.NET.Build.Tasks.NuGetUtils.GetBestMatchingRid(RuntimeGraph runtimeGraph, String runtimeIdentifier, IEnumerable`1 availableRuntimeIdentifiers, Boolean& wasInGraph) in /_/src/Tasks/Microsoft.NET.Build.Tasks/NuGetUtils.NuGet.cs:line 86\r\n   at Microsoft.NET.Build.Tasks.ResolveFrameworkReferences.GetBestRuntimeIdentifier(String targetRuntimeIdentifier, String availableRuntimeIdentifiers, Boolean& wasInGraph) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs:line 267\r\n   at Microsoft.NET.Build.Tasks.ResolveFrameworkReferences.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs:line 134\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\r\n```\r\n\r\nRepro:\r\n\r\n- Clone https://github.com/0xd4d/ResolveFrameworkReferences_issue\r\n- Use latest daily build of .NET Core SDK\r\n- dotnet publish -c Release -f netcoreapp3.0 -r win-x86 --self-contained\r\n","Url":"https://github.com/dotnet/sdk/issues/2851","RelatedDescription":"Open issue \"Publish self contained app with RIDs that refs a classlib without RIDs results in ArgumentNullException in ResolveFrameworkReferences\" (#2851)"},{"Id":"401095847","IsPullRequest":true,"CreatedAt":"2019-01-20T14:14:19","Actor":"dotnet-maestro[bot]","Number":"2849","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19069.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19069.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2849","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2849)"},{"Id":"401047377","IsPullRequest":true,"CreatedAt":"2019-01-20T02:00:07","Actor":"dotnet-bot","Number":"2848","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2848","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2848)"},{"Id":"400513894","IsPullRequest":true,"CreatedAt":"2019-01-19T23:36:30","Actor":"dotnet-bot","Number":"2840","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2840","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#2840)"},{"Id":"400993880","IsPullRequest":true,"CreatedAt":"2019-01-19T14:29:23","Actor":"dotnet-maestro[bot]","Number":"2847","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19068.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19068.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2847","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2847)"},{"Id":"399572528","IsPullRequest":true,"CreatedAt":"2019-01-18T23:56:17","Actor":"wli3","Number":"2826","RawContent":null,"Title":"Do no run GenerateShimsAssets when PackAsToolShimRuntimeIdentifiers is not set","State":"closed","Body":"fix https://github.com/dotnet/sdk/pull/2413\r\n\r\nI think the Windows no fail is due to 2.1.402 does not have the change https://github.com/dotnet/sdk/pull/2413 . It failed on my 3.0-preview\r\n\r\nThe root cause of https://github.com/dotnet/cli/issues/10607 is: Shim generation is moved to build step, so no new exe is created during publish step. However, generate shim require non self contain since there is no existing logic to create a shim on top of an existing exe. The good thing is most of the build project do not need shim generation. So only fail when it is set.\r\n\r\nThis is a \"good enough solution\". Since it will still fail to build when _PackAsToolShimRuntimeIdentifiers_ set. But, in the end, it is _build_ depends on _GenerateShimsAssets_. Removing it and put it back to _publish_ will make signing much harder.","Url":"https://github.com/dotnet/sdk/pull/2826","RelatedDescription":"Closed or merged PR \"Do no run GenerateShimsAssets when PackAsToolShimRuntimeIdentifiers is not set\" (#2826)"},{"Id":"400910097","IsPullRequest":true,"CreatedAt":"2019-01-18T22:16:22","Actor":"nugetlurker","Number":"2846","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5783 into sdk 2.1.6xx","State":"open","Body":"Insert NuGet Build 5.0.0-preview3.5783 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2846","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview3.5783 into sdk 2.1.6xx\" (#2846)"},{"Id":"400910086","IsPullRequest":true,"CreatedAt":"2019-01-18T22:16:19","Actor":"nugetlurker","Number":"2845","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5783 into sdk 2.2.2xx","State":"open","Body":"Insert NuGet Build 5.0.0-preview3.5783 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2845","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview3.5783 into sdk 2.2.2xx\" (#2845)"},{"Id":"400704723","IsPullRequest":true,"CreatedAt":"2019-01-18T21:01:02","Actor":"v-zbsail","Number":"2842","RawContent":null,"Title":"LOC CHECKIN | dotnet/cli master | 20190118","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2842","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/cli master | 20190118\" (#2842)"},{"Id":"400853709","IsPullRequest":false,"CreatedAt":"2019-01-18T19:14:24","Actor":"benjaminjnr","Number":"2844","RawContent":null,"Title":"dotnet build unable to download microsoft.netcore.dotnetapphost.3.0.0-preview-27316-4.nupkg","State":"open","Body":"While building a WPF on .NET Core 3 app with <TargetFramework>netcoreapp3.0</TargetFramework>, the dotnet build command tries to download the file above but errors out after a number of retries.\r\n\r\nAt first, I thought there was a problem with the internet connection or the host couldn't be reached.  So, I copied the url displayed (I don't have it now) and pasted it in the browser, it did return the file required but it had a .zip extension.  I think it was throwing the build tools off.\r\n\r\nThe file was saved to my %USERPROFILE%\\Downloads folder.  So, I changed the extension of the file from .zip to .nupkg.  To get the compiler to use it, I had to create a nuget.config file in the solution folder and specify the %USERPROFILE%\\Downloads folder as so:\r\n\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    <add key=\"aspnet-contrib\" value=\"https://www.myget.org/F/aspnet-contrib/api/v3/index.json\" />\r\n\t<add key=\"powershell-core\" value=\"http://powershell.myget.org/F/powershell-core/api/v3/index.json\" />\r\n    <add key=\"downloads folder\" value=\"%USERPROFILE%\\downloads\" />\r\n  </packageSources>\r\n</configuration>\r\n\r\nThis way, it could locate the file that it couldn't get from nuget.org and use it do the compilation and that worked.","Url":"https://github.com/dotnet/sdk/issues/2844","RelatedDescription":"Open issue \"dotnet build unable to download microsoft.netcore.dotnetapphost.3.0.0-preview-27316-4.nupkg\" (#2844)"},{"Id":"399921922","IsPullRequest":true,"CreatedAt":"2019-01-18T18:34:43","Actor":"nugetlurker","Number":"2831","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5781 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview3.5781 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2831","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview3.5781 into sdk\" (#2831)"},{"Id":"399921941","IsPullRequest":true,"CreatedAt":"2019-01-18T18:34:21","Actor":"nugetlurker","Number":"2832","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5781 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview3.5781 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2832","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview3.5781 into sdk\" (#2832)"},{"Id":"400716292","IsPullRequest":true,"CreatedAt":"2019-01-18T14:29:49","Actor":"dotnet-maestro[bot]","Number":"2843","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19067.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19067.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2843","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2843)"},{"Id":"400513901","IsPullRequest":true,"CreatedAt":"2019-01-18T01:30:24","Actor":"dotnet-bot","Number":"2841","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2841","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2841)"},{"Id":"400510769","IsPullRequest":false,"CreatedAt":"2019-01-17T23:40:10","Actor":"nguerrera","Number":"2839","RawContent":null,"Title":"Download runtime pack for each runtime identifier","State":"open","Body":"If we have\r\n\r\n``` xml\r\n<RuntimeIdentifiers>A;B;C</RuntimeIdentifiers>\r\n```\r\n\r\nAnd you do:\r\n\r\n`dotnet restore`\r\n`dotnet publish -r A --no-restore`\r\n\r\nThen the earlier restore should have pulled down runtime packs for A, B, and C. We are getting this for free for now because we still get the dependencies of the targeting pack (even rid specific) with excludeassets=all. When we switch to real runtime packs, we need to make ResolveFrameworkReferences take all the RuntimeIdentifiers and add a PackageDownload for all of them.","Url":"https://github.com/dotnet/sdk/issues/2839","RelatedDescription":"Open issue \"Download runtime pack for each runtime identifier\" (#2839)"},{"Id":"400094397","IsPullRequest":false,"CreatedAt":"2019-01-17T23:35:01","Actor":"timmydo","Number":"2837","RawContent":null,"Title":"Self-contained linux app missing libhostfxr.so","State":"closed","Body":"Using https://dotnetcli.blob.core.windows.net/dotnet/Sdk/master/dotnet-sdk-latest-linux-x64.tar.gz \r\n\r\nRUN dotnet restore --runtime linux-x64 --configfile /app/Nuget.Config\r\nRUN dotnet publish -c Release -f netcoreapp3.0 --self-contained --runtime linux-x64 --no-restore -o /out\r\n\r\ncsproj is roughly\r\n```\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netcoreapp3.0</TargetFrameworks>\r\n    <OutputType>Exe</OutputType>\r\n    <RuntimeIdentifiers>win10-x64;linux-x64</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n      <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n    </ItemGroup>\r\n```\r\n\r\n```\r\n# ./Watchdogs\r\nA fatal error occurred, the required library libhostfxr.so could not be found.\r\nIf this is a self-contained application, that library should exist in [/app/Watchdogs/].\r\nIf this is a framework-dependent application, install the runtime in the default location [/usr/share/dotnet] or use the DOTNET_ROOT environment variable to specify the runtime location.\r\n\r\n# ldd ./Watchdogs\r\n        linux-vdso.so.1 (0x00007fff783f2000)\r\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007ff3e590a000)\r\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007ff3e56ed000)\r\n        libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007ff3e536b000)\r\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007ff3e5067000)\r\n        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007ff3e4e50000)\r\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007ff3e4ab1000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007ff3e5b0e000)\r\n```\r\n\r\nI think this is a recent development. The previous sdk nightly worked fine. There are no *.so files in the output directory\r\n","Url":"https://github.com/dotnet/sdk/issues/2837","RelatedDescription":"Closed issue \"Self-contained linux app missing libhostfxr.so\" (#2837)"},{"Id":"400052227","IsPullRequest":true,"CreatedAt":"2019-01-17T21:11:54","Actor":"dotnet-bot","Number":"2835","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2835","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#2835)"},{"Id":"400052208","IsPullRequest":true,"CreatedAt":"2019-01-17T19:21:17","Actor":"dotnet-bot","Number":"2834","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2834","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2834)"},{"Id":"400052180","IsPullRequest":true,"CreatedAt":"2019-01-17T19:21:11","Actor":"dotnet-bot","Number":"2833","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2833","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#2833)"},{"Id":"400268160","IsPullRequest":true,"CreatedAt":"2019-01-17T14:30:19","Actor":"dotnet-maestro[bot]","Number":"2838","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19066.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19066.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2838","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2838)"},{"Id":"400052237","IsPullRequest":true,"CreatedAt":"2019-01-17T02:30:15","Actor":"dotnet-bot","Number":"2836","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2836","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2836)"},{"Id":"399589549","IsPullRequest":true,"CreatedAt":"2019-01-16T22:12:01","Actor":"dotnet-bot","Number":"2827","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2827","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#2827)"},{"Id":"399648847","IsPullRequest":true,"CreatedAt":"2019-01-16T22:11:34","Actor":"dotnet-bot","Number":"2829","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2829","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2829)"},{"Id":"399799438","IsPullRequest":true,"CreatedAt":"2019-01-16T18:28:31","Actor":"dotnet-maestro[bot]","Number":"2830","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19065.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19065.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2830","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2830)"},{"Id":"399599549","IsPullRequest":false,"CreatedAt":"2019-01-16T00:46:49","Actor":"nguerrera","Number":"2828","RawContent":null,"Title":"Improve testing of PreserveCompilationContext with approximation of what Razor does for runtime compilation","State":"open","Body":"Follow-up to offline conversation around https://github.com/dotnet/cli/issues/10502#issuecomment-453690369\r\n\r\nHistorically, we have broken this scenario too frequently. \r\n\r\nWe have identified two things:\r\n\r\n1. Code flow delays have been too long and we end up only trying end-to-end scenarios too close to release dates. \r\n\r\n2. It would be nice to have a unit test in dotnet/sdk that can catch as many related issues as possible immediately.\r\n\r\nAs of today, we finally have all involved repos inserting up to core-sdk automatically, so (1) will hopefully get better soon. 🙏 \r\n\r\nThis issue tracks (2). The idea we sketched out was to have a test that builds and runs a console app, which:\r\n\r\n1. Has a P2P reference\r\n2. References shared framework(s)\r\n3. Has a snippet of code that substantially replicates how razor enumerates compilation references at runtime\r\n4. Also enumerates runtime assemblies from deps file along the same lines\r\n\r\nLet me know if I missed something here, and please help to define the snippets of code for (3) and (4)\r\n\r\n@rynowak @pranavkm @mkArtakMSFT\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2828","RelatedDescription":"Open issue \"Improve testing of PreserveCompilationContext with approximation of what Razor does for runtime compilation\" (#2828)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1086041216355954688","CreatedAt":"2019-01-17T23:22:58+00:00","UserScreenname":"dotnet","Text":"We’re happy to read this sentiment about the broader #dotnet #CommunityStandup that @JamesMontemagno has created fo… https://t.co/VtBt7BRcPl","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":11,"RawContent":null},{"Id":"1085930999182020608","CreatedAt":"2019-01-17T16:05:00+00:00","UserScreenname":"dotnet","Text":"Excited about .NET Core and desktop apps? Please tell what kind of apps you plan on porting! https://t.co/x77TJp8odU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":67,"FavoriteCount":37,"RawContent":null},{"Id":"1085929481137782785","CreatedAt":"2019-01-17T15:58:58+00:00","UserScreenname":"dotnet","Text":"In the latest episode of #OnDotNet, Michael Hawker(@XAMLLlama) sits down with Jeremy(@jeremylikness) to introduce u… https://t.co/sntrhjBVQq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":13,"RawContent":null},{"Id":"1085408808988524544","CreatedAt":"2019-01-16T05:30:00+00:00","UserScreenname":"dotnet","Text":".NET Framework January 2019 Preview of Quality Rollup https://t.co/PHzmBv3Qwl","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":9,"RawContent":null},{"Id":"1084860808331448320","CreatedAt":"2019-01-14T17:12:27+00:00","UserScreenname":"dotnet","Text":"Join @csharpfritz and @julielerman this week to learn more about serverless technologies and CosmosDb.  It's a LIVE… https://t.co/9RjeePNX7g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":14,"RawContent":null},{"Id":"1084759529806487552","CreatedAt":"2019-01-14T10:30:00+00:00","UserScreenname":"dotnet","Text":"Learn how we're improving .NET IO performance with https://t.co/EpnUCQtOJb.Pipelines in this episode of On .NET… https://t.co/zPf1AjkGi3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":181,"FavoriteCount":64,"RawContent":null}]}},"RunOn":"2019-01-22T20:32:34.2615992Z","RunDurationInMilliseconds":25363}