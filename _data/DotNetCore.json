{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":63,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":46,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null},{"Title":".NET Highlights in Visual Studio 2017 version 15.7 Preview 4","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"As you know we continue to incrementally improve Visual Studio 2017 (version 15), and our 7th significant update is currently well under way with the 4th preview shipping today. As we’re winding down...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/visual-studio-2017-15-7-preview-4/","RawContent":null},{"Title":".NET Core April 2018 Update","PublishedOn":"2018-04-17T23:50:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2018 Update. This update includes .NET Core 1.0.11, 1.1.8 and 2.0.7. There are no new security fixes in this update. See April 2018 .NET Updates for other...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore Azure Cosmos DB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":66,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7631435692","Type":"PullRequestEvent","CreatedAt":"2018-05-05T01:44:14","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17885","RelatedDescription":"Merged pull request \"Update BuildTools to rc1-02804-05 (release/2.1)\" (#17885) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7631407457","Type":"PullRequestEvent","CreatedAt":"2018-05-05T01:23:05","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17891","RelatedDescription":"Opened pull request \"Speed up Array.Reverse by using ref reassignment\" (#17891) at dotnet/coreclr","RelatedBody":"This takes advantage of Roslyn's new ref reassignment feature to speed up the inner loop in `Array.Reverse`. Testing shows that for large arrays the reversal time is cut by approx. 20% from the baseline.\r\n\r\nOld loop codegen:\r\n\r\n```asm\r\n00007ff8`8311fc2c 4c63c0          movsxd  r8,eax\r\n00007ff8`8311fc2f 468b0c81        mov     r9d,dword ptr [rcx+r8*4]\r\n00007ff8`8311fc33 4e8d0481        lea     r8,[rcx+r8*4]\r\n00007ff8`8311fc37 4c63d2          movsxd  r10,edx\r\n00007ff8`8311fc3a 468b1c91        mov     r11d,dword ptr [rcx+r10*4]\r\n00007ff8`8311fc3e 458918          mov     dword ptr [r8],r11d\r\n00007ff8`8311fc41 46890c91        mov     dword ptr [rcx+r10*4],r9d\r\n00007ff8`8311fc45 ffc0            inc     eax\r\n00007ff8`8311fc47 ffca            dec     edx\r\n00007ff8`8311fc49 3bc2            cmp     eax,edx\r\n00007ff8`8311fc4b 7cdf            jl      ... (00007ff8`8311fc2c)\r\n```\r\n\r\nNew loop codegen:\r\n\r\n```asm\r\n00007ff8`831238e2 8b11            mov     edx,dword ptr [rcx]\r\n00007ff8`831238e4 448b00          mov     r8d,dword ptr [rax]\r\n00007ff8`831238e7 448901          mov     dword ptr [rcx],r8d\r\n00007ff8`831238ea 8910            mov     dword ptr [rax],edx\r\n00007ff8`831238ec 4883c104        add     rcx,4\r\n00007ff8`831238f0 4883c0fc        add     rax,0FFFFFFFFFFFFFFFCh\r\n00007ff8`831238f4 483bc8          cmp     rcx,rax\r\n00007ff8`831238f7 72e9            jb      ... (00007ff8`831238e2)\r\n```\r\n\r\nThe codegen samples above are for reversing an `int[]`. I saw similar performance gains for other types. Referential types like `object[]` don't get as large a benefit due to the card table checks, but there is still some speedup.\r\n\r\nI also took the opportunity to collapse the precondition checks using the recommended patterns for (index, count) parameters."},{"Id":"7631405655","Type":"PullRequestEvent","CreatedAt":"2018-05-05T01:22:00","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17890","RelatedDescription":"Opened pull request \"Delete unnecessary internal layer of Span globalization helpers\" (#17890) at dotnet/coreclr","RelatedBody":"This makes the code smaller and faster. For example, the following is 3x faster with this change:\r\n\r\n```\r\nReadOnlySpan<char> s1 = \"Hello world\";\r\nReadOnlySpan<char> s2 = \"world\";\r\nfor (int i = 0; i < 100000000; i++) s1.EndsWith(s2, StringComparison.OrdinalIgnoreCase);\r\n```\r\n\r\nAlso, I have ported GetCaseCompareOfComparisonCulture code size optimization from #16434 while I was on it because of it fit well with the rest of the changes."},{"Id":"7631352871","Type":"PullRequestEvent","CreatedAt":"2018-05-05T00:44:22","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17889","RelatedDescription":"Opened pull request \"Remove use of ByReference<T> in Memmove ABI\" (#17889) at dotnet/coreclr","RelatedBody":"This is a follow-up to https://github.com/dotnet/coreclr/pull/15947. Now that Roslyn's ref reassignment feature is available, we can use that rather than the earlier workaround of passing `ByReference<T>` through `Memmove`'s internal ABI.\r\n\r\nOn x64, there's no difference in the codegen between using `ByReference<T>` vs. ref reassignment. On x86, this change results in an approx. 15% decrease in codegen size for the `Memmove` method, and there is a commensurate increase in throughput in my brief testing. This is expected, as we knew during the original change that RyuJIT x86 doesn't quite optimize passing `ByReference<T>` around as well as its x64 counterpart does."},{"Id":"7631223976","Type":"PullRequestEvent","CreatedAt":"2018-05-04T23:33:33","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17888","RelatedDescription":"Opened pull request \"disable dialog box for forced unhandled exception\" (#17888) at dotnet/coreclr","RelatedBody":"Fix for #17870 Windows Event Log tests trigger an unhandled exception on purpose to test event logging. If we run this test from Desktop UI, it pops up a dialog box, and if the user doesn't click on \"Close\", it'll cause a timeout on the test and fail. This fix disables the dialog box from popping up so that tests will pass without having to click on the button."},{"Id":"7631170739","Type":"PullRequestEvent","CreatedAt":"2018-05-04T23:10:30","Actor":"stakx","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17887","RelatedDescription":"Opened pull request \"Reflection.Emit: Allow `ParameterBuilder.SetConstant(null)` for value-typed parameters\" (#17887) at dotnet/coreclr","RelatedBody":"This resolves https://github.com/dotnet/corefx/issues/26184.\r\n\r\n### Summary:\r\n\r\nThis change makes it possible for Reflection.Emit to set a default value of `default(TValueType)` for optional, non-nullable, value-typed parameters through a call to `ParameterBuilder.SetConstant(null)`.\r\n\r\nTests for this are included in `tests/src/reflection/OptionalParameters/SetConstantNull.csproj`.\r\n\r\n### Background:\r\n\r\nSee the issue linked above for details, but to summarize:\r\n\r\n* Without this change, there's no way to exactly reproduce a C# method declaration such as `void Method(UserDefinedValueType arg = default(UserDefinedValueType))` using Reflection.Emit.\r\n\r\n* It allows Reflection.Emit to produce the same metadata that the Roslyn compilers produce for such a declaration.\r\n\r\n* ECMA-335 says that constants (as set by `ParameterBuilder.SetConstant`) don't influence runtime behavior at all, but are stored in metadata for compilers and tools to reflect over. If the constant type doesn't exactly match the parameter type, that's a CLS-compliance violation at worst, but not an error.\r\n\r\n<details>\r\n<summary>(Expand to see citations from ECMA-335.)</summary>\r\n\r\n* II.15.4.1.4 The .param directive:\r\n\r\n   > The CLI attaches no semantic whatsoever to these values.\r\n\r\n* II.22.33 Param:\r\n\r\n   > If Flags.HasDefault = 1 then this row shall own exactly one row in the Constant table [ERROR]\r\n\r\n* II.22.9 Constant:\r\n\r\n   > Note that Constant information does not directly influence runtime behavior, although it is visible via Reflection [...]. Type shall match exactly the declared type of the Param [...] identified by Parent [...]. [CLS]\r\n</details>"},{"Id":"7631048897","Type":"IssuesEvent","CreatedAt":"2018-05-04T22:25:28","Actor":"glenn-slayden","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17886","RelatedDescription":"Opened issue \"'Buffer.Memmove' allow managed code path for compatible overlap cases\" (#17886) at dotnet/coreclr","RelatedBody":"(*This issue was originally mentioned [here](https://github.com/dotnet/coreclr/pull/9786#issuecomment-364801556)*)\r\n\r\nCommit c6372c5bfebd61470ea5d111f224d035b1d2ebdf changed how overlap between the source and destination is detected in `Buffer.Memmove`:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/ea9bee5ac2f96a1ea6b202dc4094b8d418d9209c/src/mscorlib/src/System/Buffer.cs#L262\r\n\r\n...became...\r\n\r\nhttps://github.com/dotnet/coreclr/blob/c6372c5bfebd61470ea5d111f224d035b1d2ebdf/src/mscorlib/src/System/Buffer.cs#L271\r\n\r\nThe original code may seem puzzling since the unsigned subtraction and compare \"incorrectly\" fails to identify source/destination overlap in the case where the destination (address) precedes the source (address) in memory. Indeed c6372c5bfebd61470ea5d111f224d035b1d2ebdf clarifies this and would also seem to fix a bug, but how did the original work anyway?\r\n\r\nThe answer, one eventually realizes, is that the original code was stealthily incorporating a strong assumption about--and dependency upon--the ***copy direction*** of the managed `Buffer.Memmove` implementation which followed it. \r\n\r\nThe unfortunate upshot is that, while c6372c5bfebd61470ea5d111f224d035b1d2ebdf certainly makes the code clearer and more readable, it now excludes ***all*** overlap cases and thus *no longer allows the performance benefit of fully-managed operation* (i.e., non-P/Invoke) in the **50% of cases** where the overlap happens to be compatible with the copy direction implemented in [Buffer.cs](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Buffer.cs). I blame the original code for not documenting its entirely non-obvious design and/or operation. \r\n\r\nAnyway, can we revisit this line (re-relax the overlap test) to restore the optimization that was lost here? That is, once again allow the managed code path to prevail instead of P/Invoke for the half of the detected overlaps which happen to comport with the copy direction that's hard-coded into `Buffer.Memmove`?"},{"Id":"7630908818","Type":"PullRequestEvent","CreatedAt":"2018-05-04T21:41:26","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17885","RelatedDescription":"Opened pull request \"Update BuildTools to rc1-02804-05 (release/2.1)\" (#17885) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7630896147","Type":"IssuesEvent","CreatedAt":"2018-05-04T21:37:42","Actor":"richlander","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9205","RelatedDescription":"Opened issue \"Bad UX for .NET Core SDK Windows Installer -- .NET Core Host in use\" (#9205) at dotnet/cli","RelatedBody":"Bad UX for .NET Core SDK processes that prevent a clean install of the product ... Listing the host n times isn't useful.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/39654144-93212e18-4fa8-11e8-8926-129b88a9f461.png)\r\n"},{"Id":"7630739785","Type":"PullRequestEvent","CreatedAt":"2018-05-04T20:56:51","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9204","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.8.0-preview1.5180 into cli\" (#9204) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.8.0-preview1.5180 into cli release/2.1.4xx branch"},{"Id":"7630607356","Type":"IssuesEvent","CreatedAt":"2018-05-04T20:25:41","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9195","RelatedDescription":"Closed issue \"dotnet SDK message: please remove please\" (#9195) at dotnet/cli","RelatedBody":"The first time you run `dotnet` after installing the SDK you get a message similar to:\r\n\r\n\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\n\r\nASP.NET Core\r\n------------\r\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\r\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms **please** refer to the platform specific documentation.\r\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\r\n\r\n------------------ End of output ---------------------------------\r\n\r\nPer the MS style guide\r\nAvoid please except in situations where the customer is asked to do something inconvenient or the application or site is to blame for the situation.\r\n\r\n\r\n\r\n"},{"Id":"7630606723","Type":"PullRequestEvent","CreatedAt":"2018-05-04T20:25:32","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9199","RelatedDescription":"Merged pull request \"Removing the word please from the ASP.NET first run message.\" (#9199) at dotnet/cli","RelatedBody":"@MattGertz for approval to take to ship room for RTM\r\n\r\n**Issues fixed**\r\n\r\nhttps://github.com/dotnet/cli/issues/9195\r\n\r\n**Description of Issue**\r\n\r\nWe have the word please in one of our messages in a situation where MS guidance asks us not to use it. We are just removing that message.\r\n\r\n**Customer Impact**\r\n\r\nWe are violating MS guidance.\r\n\r\n**Risk**\r\n\r\nLow - Just a small text change.\r\n\r\n**Testing**\r\n\r\nCLI CI."},{"Id":"7630602232","Type":"PullRequestEvent","CreatedAt":"2018-05-04T20:24:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9201","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.8.0-preview1.5158 into cli\" (#9201) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.8.0-preview1.5158 into cli release/2.1.4xx branch"},{"Id":"7630600464","Type":"PullRequestEvent","CreatedAt":"2018-05-04T20:24:03","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9191","RelatedDescription":"Closed pull request \"Push TpRTM in 2.1.3xx\" (#9191) at dotnet/cli","RelatedBody":"Inserting Testplatform RTM package in dotnet cli\r\n\r\nTestPlatform [Release Notes](https://github.com/Microsoft/vstest-docs/blob/master/docs/releases.md#1570)"},{"Id":"7630502667","Type":"IssuesEvent","CreatedAt":"2018-05-04T20:01:16","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9176","RelatedDescription":"Closed issue \"Remove source-build patches in cli\" (#9176) at dotnet/cli","RelatedBody":"In preview2, 11 patches were added to source-build to enable cli to build in source-build.  These patches should be incorporated into the cli code and removed from the source-build repo.  The patches are here: https://github.com/dotnet/source-build/tree/dev/release/2.1/patches/cli\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7630501478","Type":"IssuesEvent","CreatedAt":"2018-05-04T20:00:59","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9119","RelatedDescription":"Closed issue \"Provide fwlink in the warning about obsolete DotNetCliToolReference that points to good documentation about global tools\" (#9119) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nWith VS 15.7 + CLI for .NET Core 2.1 (CLI 2.1.300 or higher) installed,\r\n1. Open ASP.NET Core 2.0 project that was created using a previous version of the CLI\r\n2. View Error list or build\r\n\r\n## Actual behavior\r\nYou see the warnings below\r\n\r\n![image](https://user-images.githubusercontent.com/8246794/39138249-63e8c20a-46d4-11e8-8513-74f4350a3f96.png)\r\n\r\n## Expected  behavior\r\nWarning should include an fwlink that can be clicked and take you to good documentation about why the tools are obsolete and what is the mitigation\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7630404188","Type":"IssuesEvent","CreatedAt":"2018-05-04T19:37:51","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9203","RelatedDescription":"Opened issue \"Review the use of \"please\" throughout our strings\" (#9203) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nGrep our `.resx` files for the word \"please\".\r\n\r\nHere's what I found\r\n\r\n* `src/dotnet/commands/dotnet-add/dotnet-add-package/LocalizableStrings.resx`:\r\n  * `SpecifyExactlyOnePackageReference`\r\n  * `CmdDGFileIOException`\r\n* `src/dotnet/commands/dotnet-help/LocalizableStrings.resx`:\r\n  * `CommandDoesNotExist`\r\n* `src/dotnet/commands/dotnet-migrate/LocalizableStrings.resx`:\r\n  * `MigrationAdditionalHelp`\r\n* `src/dotnet/commands/dotnet-pack/LocalizableStrings.resx`:\r\n  * `CmdServiceableDescription`\r\n* `src/dotnet/commands/dotnet-remove/dotnet-remove-package/LocalizableStrings.resx`:\r\n  * `SpecifyExactlyOnePackageReference`\r\n* `src/dotnet/commands/dotnet-run/LocalizableStrings.resx`:\r\n  * `RunCommandException`\r\n  * `RunCommandExceptionUnableToRunSpecifyFramework`\r\n  * `RunCommandExceptionUnableToRun`\r\n* `src/dotnet/commands/dotnet-tool/install/LocalizableStrings.resx`:\r\n  * `SpecifyExactlyOnePackageId`\r\n  * `ToolInstallationFailedContactAuthor`\r\n  * `InstallToolCommandNeedGlobalOrToolPath`\r\n  * `InstallToolCommandInvalidGlobalAndToolPath`\r\n* `src/dotnet/commands/dotnet-tool/list/LocalizableStrings.resx`:\r\n  * `NeedGlobalOrToolPath`\r\n  * `GlobalAndToolPathConflict`\r\n* `src/dotnet/commands/dotnet-tool/uninstall/LocalizableStrings.resx`:\r\n  * `SpecifyExactlyOnePackageId`\r\n  * `UninstallToolCommandNeedGlobalOrToolPath`\r\n  * `UninstallToolCommandInvalidGlobalAndToolPath`\r\n* `src/dotnet/commands/dotnet-tool/update/LocalizableStrings.resx`:\r\n  * `SpecifyExactlyOnePackageId`\r\n  * `UpdateToolCommandNeedGlobalOrToolPath`\r\n  * `UpdateToolCommandInvalidGlobalAndToolPath`\r\n* `src/dotnet/commands/dotnet-tool/update/LocalizableStrings.resx`:\r\n  * A lot of strings have \"please\".\r\n* `src/Microsoft.DotNet.Cli.Utils/LocalizableStrings.resx`:\r\n  * `CannotFindCommandAvailableAsTool`\r\n\r\n## Expected  behavior\r\n\r\nAccording to Microsoft style guidance, the word \"please\" should only appear in situations where the customer is asked to do something inconvenient or the application or site is to blame for the situation.\r\n\r\nSee https://github.com/dotnet/cli/issues/9195 for a related issue.\r\n\r\n## Actual behavior\r\n\r\nThere are a number of places where we have strings that ask the user to \"please view this link\" or \"please correct the command line syntax used\".  These may be in violation of the style guidelines.\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rtm-008818\r\n Commit:    481e4a19b3\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk/2.1.300-rtm-008818/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1-26423-06\r\n  Commit:  b50a96ee38\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-rtm-008818 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-30661 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-30661 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1-26423-06 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7630373525","Type":"PullRequestEvent","CreatedAt":"2018-05-04T19:30:32","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9202","RelatedDescription":"Opened pull request \"Fixing CI build breaks for new CI legs; CLI:release/2.1.3xx\" (#9202) at dotnet/cli","RelatedBody":"The three newly supported Linux distros: Fedora 27, openSUSE 43.2, and Ubuntu 18.04 should not build native installer packages nor \"IncludeSharedFrameworksForBackwardsCompatibilityTests\"\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7619511676","Type":"PullRequestEvent","CreatedAt":"2018-05-02T21:29:23","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/722","RelatedDescription":"Merged pull request \"Fix LockFileCache when SDK and trimming task are using different NuGet dlls\" (#722) at dotnet/standard","RelatedBody":"Previously I copied the SDK caching code for caching the loaded lock file across task boundaries.\r\n\r\nThis became a problem when the SDK updated their NuGet version.\r\n\r\nWe didn't agree on the type that belonged in the cache.\r\n\r\nAvoid this by using a versioned prefix for the cache key.  Of course we will no longer share the read if we happen to be on the same version, but this is safer.\r\n\r\n/cc @nguerrera @dsplaisted "},{"Id":"7619284155","Type":"PullRequestEvent","CreatedAt":"2018-05-02T20:41:05","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/722","RelatedDescription":"Opened pull request \"Fix LockFileCache when SDK and trimming task are using different NuGet dlls\" (#722) at dotnet/standard","RelatedBody":"Previously I copied the SDK caching code for caching the loaded lock file across task boundaries.\r\n\r\nThis became a problem when the SDK updated their NuGet version.\r\n\r\nWe didn't agree on the type that belonged in the cache.\r\n\r\nAvoid this by using a versioned prefix for the cache key.  Of course we will no longer share the read if we happen to be on the same version, but this is safer.\r\n\r\n/cc @nguerrera @dsplaisted "},{"Id":"7613299458","Type":"PullRequestEvent","CreatedAt":"2018-05-01T20:42:40","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/721","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02801-01 (master)\" (#721) at dotnet/standard","RelatedBody":""},{"Id":"7612161291","Type":"IssuesEvent","CreatedAt":"2018-05-01T16:31:35","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/719","RelatedDescription":"Closed issue \"Different build output for classic projects: NuGet packages vs project reference. Is this on purpose?\" (#719) at dotnet/standard","RelatedBody":"Hi there,\r\n\r\nI have a WPF app (.NET Framework 4.6.1, classic .csproj) that references a .NET Standard 1.3 project that itself references another Multi-targeted project (.NET Standard 1.3 and .NET Framework 4.6.1).\r\n\r\nI've set `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` in the csproj file of the WPF app, but seems this is only important for NuGet packages?\r\n\r\nI would expect that the WPF app gets these dlls in the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395631-e0f9a786-4ae0-11e8-91f4-ecacadee72fc.png)\r\n\r\nBut it actually copies these dlls to the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395639-ee646884-4ae0-11e8-9ecb-78f0eff1afcd.png)\r\n\r\nIf the Storage Lib is referenced as a NuGet package, it works as expected:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395643-fe20684a-4ae0-11e8-8d8a-d2015b262057.png)\r\n\r\nIs this the expected behavior? When migrating the WPF app to SDK-style project format, it works also as expected as shown in the first picture.\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7631453968","Type":"IssuesEvent","CreatedAt":"2018-05-05T01:59:09","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29525","RelatedDescription":"Closed issue \"Span<T> Memory<T> support linq\" (#29525) at dotnet/corefx","RelatedBody":"It would be great if the Span<T> Memory<T> supported linq;\r\n\r\nIMHO this would improve the developer experience when slicing/dicing\r\ndata while preventing heap allocations "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7631616846","Type":"PullRequestEvent","CreatedAt":"2018-05-05T04:21:07","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26652","RelatedDescription":"Opened pull request \"IDE should display symbols with nullability information\" (#26652) at dotnet/roslyn","RelatedBody":"Most of the change is making the `IncludeNullableReferenceTypeModifier` symbol display option public (moving it from compiler internal options to misc options). Then the IDE (QuickInfo) just needs to pass that option.\r\n\r\nHere's what that looks like:\r\n![image](https://user-images.githubusercontent.com/12466233/39659590-7c72ed0e-4fe0-11e8-99a1-6cd316820bc8.png)\r\n\r\n@cston From our discussion, I think the nullability annotations should be unconditionally displayed in the IDE (it should depend on LangVersion, but not on whether the project has options to produce nullability warnings).\r\n\r\nFixes part of https://github.com/dotnet/roslyn/issues/26648 (the other part is that un-annotated APIs should be represented in the UI, either via QuickInfo or maybe via categorization?)"},{"Id":"7631589211","Type":"IssuesEvent","CreatedAt":"2018-05-05T03:54:58","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26644","RelatedDescription":"Closed issue \"Some squiggles missing for nullable warnings\" (#26644) at dotnet/roslyn","RelatedBody":"I'm using the RoslynDev hive, built from `features/NullableReferenceTypes`, and opening `Compilers.sln` from `features/NullableDogfood` branch.\r\n\r\nI build one project (`MSBuildTask`) and look at the warnings that are produced. Some warnings work fine: I double-click on one in the Error List and it takes me to the squiggled source. But some warnings only take me to the source (no squiggles).\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/39656175-d9f98920-4fb2-11e8-83c2-5ff483438023.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/39656172-d3e61274-4fb2-11e8-8ab2-621d391789f9.png)\r\n\r\n@heejaechang @CyrusNajmabadi Any idea how to troubleshoot this?"},{"Id":"7631477673","Type":"IssuesEvent","CreatedAt":"2018-05-05T02:18:43","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26651","RelatedDescription":"Opened issue \"Nullability of static field doesn't seem to be tracked\" (#26651) at dotnet/roslyn","RelatedBody":"[Example](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQDk4BstWFiAJQkiQDsBjCAFQE8AHFAGgBMQBqAHwFgAoAAQDMAAn4AmYQGFhfAN59hi0QEYAbMKRQWAezJZaKgAwB+YcmEBeYWWxYA3AqVDRAFmEBZABQBKGbyXC8v4BSgCWYMKe5gCEVjY43o4hgUnJAJDIAHTU2gDKMAihZADmPnbCAPQVwgDuUAhkRcVSuQAcqoZiIMIACtrIyKH4EMIsEEikEJQj2hFQ1rYaJONTVJmpAQC+qdu8m0A=)\r\n\r\n```C#\r\npublic class C \r\n{\r\n    static readonly string? s = null;\r\n    public void M() \r\n    {\r\n        if (s != null)\r\n        {\r\n         \ts.ToString(); // warning CS8602: Possible dereference of a null reference.\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nFound in nullable dogfood.\r\nTagging @cston "},{"Id":"7631351001","Type":"IssuesEvent","CreatedAt":"2018-05-05T00:43:07","Actor":"JulienLajugie","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26650","RelatedDescription":"Closed issue \"C# Pattern Matching type expressions don't work with covariant types\" (#26650) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nC# 7.2\r\n\r\n**Steps to Reproduce**:\r\n```csharp\r\npublic interface ITry<out T>    {    }\r\n\r\npublic class Success<T> : ITry<T> {\r\n        public readonly T Value;\r\n        public Success(T value) => Value = value;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n```csharp\r\nITry<object> test = new Success<string>(\"test\");\r\nAssert.True(test is Success<object>);\r\n```\r\nThe assert should pass.\r\n\r\n**Actual Behavior**:\r\nThe assert fails."},{"Id":"7631331006","Type":"IssuesEvent","CreatedAt":"2018-05-05T00:30:36","Actor":"JulienLajugie","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26650","RelatedDescription":"Opened issue \"C# Pattern Matching type expressions don't work with covariant types\" (#26650) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nC# 7.2\r\n\r\n**Steps to Reproduce**:\r\n`\r\npublic interface ITry<out T>    {    }\r\n\r\npublic class Success<T> : ITry<T> {\r\n        public readonly T Value;\r\n        public Success(T value) => Value = value;\r\n}\r\n`\r\n\r\n**Expected Behavior**:\r\n`\r\nITry<object> test = new Success<string>(\"test\");\r\nAssert.True(test is Success<object>);\r\n`\r\nThe assert should pass.\r\n\r\n**Actual Behavior**:\r\nThe assert fails."},{"Id":"7631252280","Type":"IssuesEvent","CreatedAt":"2018-05-04T23:47:02","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26649","RelatedDescription":"Opened issue \"Reached assertion in NodeMapBuilder.AddToMap\" (#26649) at dotnet/roslyn","RelatedBody":"While working on the `features/NullableDogfood` branch using a RoslynDev hive loaded with `features/NullableReferenceTypes`.\r\n\r\n`(object)existing[i] == added[i] || !(key is StatementSyntax)`. \r\n`(object)existing[i] == added[i]` is `false` and `key` is a block syntax (`{ throw new ArgumentException(e.Message, \"Sources\"); }`.\r\n\r\nFYI @AlekseyTs since might relate to IOperation or you may have an idea.\r\n\r\n```C#\r\n>\tMicrosoft.CodeAnalysis.CSharp.MemberSemanticModel.NodeMapBuilder.AddToMap(Microsoft.CodeAnalysis.CSharp.BoundNode root, System.Collections.Generic.Dictionary<Microsoft.CodeAnalysis.SyntaxNode, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CSharp.BoundNode>> map, Microsoft.CodeAnalysis.SyntaxNode node) Line 106\tC#\r\n \tMicrosoft.CodeAnalysis.CSharp.MemberSemanticModel.GuardedAddBoundTreeAndGetBoundNodeFromMap(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode syntax, Microsoft.CodeAnalysis.CSharp.BoundNode bound) Line 1328\tC#\r\n \tMicrosoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node) Line 1789\tC#\r\n \tMicrosoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node) Line 457\tC#\r\n \tMicrosoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, out Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode bindableNode, out Microsoft.CodeAnalysis.CSharp.BoundNode lowestBoundNode, out Microsoft.CodeAnalysis.CSharp.BoundNode highestBoundNode, out Microsoft.CodeAnalysis.CSharp.BoundNode boundParent) Line 1202\tC#\r\n \tMicrosoft.CodeAnalysis.CSharp.MemberSemanticModel.GetStatementOrRootOperation(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 1057\tC#\r\n \tMicrosoft.CodeAnalysis.CSharp.MemberSemanticModel.GetOperationWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 1002\tC#\r\n \tMicrosoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetOperationWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 186\tC#\r\n \tMicrosoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetOperationCore(Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 469\tC#\r\n \tMicrosoft.CodeAnalysis.SemanticModel.GetOperation(Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 77\tC#\r\n \tMicrosoft.CodeAnalysis.UseThrowExpression.AbstractUseThrowExpressionDiagnosticAnalyzer.GetContainingIfOperation(Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.Operations.IThrowOperation throwOperation, System.Threading.CancellationToken cancellationToken) Line 325\tC#\r\n \tMicrosoft.CodeAnalysis.UseThrowExpression.AbstractUseThrowExpressionDiagnosticAnalyzer.AnalyzeOperation(Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext context, Microsoft.CodeAnalysis.INamedTypeSymbol expressionTypeOpt) Line 77\tC#\r\n \tMicrosoft.CodeAnalysis.UseThrowExpression.AbstractUseThrowExpressionDiagnosticAnalyzer.InitializeWorker.AnonymousMethod__1(Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext operationContext) Line 57\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationAction.AnonymousMethod__44_0((System.Action<Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext> action, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext context) data) Line 589\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock<System.ValueTuple<System.Action<Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext>, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext>>(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Action<(System.Action<Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext>, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext)> analyze, (System.Action<Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext>, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext) argument, Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo? info) Line 1221\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows<System.ValueTuple<System.Action<Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext>, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext>>(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, System.Action<(System.Action<Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext>, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext)> analyze, (System.Action<Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext>, Microsoft.CodeAnalysis.Diagnostics.OperationAnalysisContext) argument, Microsoft.CodeAnalysis.Diagnostics.AnalysisContextInfo? info) Line 1190\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationAction(Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction operationAction, Microsoft.CodeAnalysis.IOperation operation, Microsoft.CodeAnalysis.ISymbol containingSymbol, Microsoft.CodeAnalysis.SemanticModel semanticModel, System.Action<Microsoft.CodeAnalysis.Diagnostic> addDiagnostic, System.Func<Microsoft.CodeAnalysis.Diagnostic, bool> isSupportedDiagnostic, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData analyzerStateOpt) Line 587\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationActions(Microsoft.CodeAnalysis.IOperation operation, System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.OperationKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction>> operationActionsByKind, Microsoft.CodeAnalysis.ISymbol containingSymbol, Microsoft.CodeAnalysis.SemanticModel model, System.Action<Microsoft.CodeAnalysis.Diagnostic> addDiagnostic, System.Func<Microsoft.CodeAnalysis.Diagnostic, bool> isSupportedDiagnostic, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData analyzerStateOpt) Line 1151\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationActions(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.IOperation> operationsToAnalyze, System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.OperationKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction>> operationActionsByKind, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.ISymbol containingSymbol, Microsoft.CodeAnalysis.SemanticModel model, System.Action<Microsoft.CodeAnalysis.Diagnostic> addDiagnostic, System.Func<Microsoft.CodeAnalysis.Diagnostic, bool> isSupportedDiagnostic, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData analyzerStateOpt) Line 1132\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationActionsCore(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.IOperation> operationsToAnalyze, System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.OperationKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction>> operationActionsByKind, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.ISymbol containingSymbol, Microsoft.CodeAnalysis.SemanticModel model, Microsoft.CodeAnalysis.Text.TextSpan filterSpan, Microsoft.CodeAnalysis.Diagnostics.AnalysisState.OperationAnalyzerStateData analyzerStateOpt, bool isGeneratedCode) Line 1104\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.TryExecuteOperationActions(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.IOperation> operationsToAnalyze, System.Collections.Generic.IDictionary<Microsoft.CodeAnalysis.OperationKind, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostics.OperationAnalyzerAction>> operationActionsByKind, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer analyzer, Microsoft.CodeAnalysis.SemanticModel model, Microsoft.CodeAnalysis.Text.TextSpan filterSpan, Microsoft.CodeAnalysis.SyntaxReference declaration, int declarationIndex, Microsoft.CodeAnalysis.ISymbol declaredSymbol, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool isGeneratedCode) Line 1075\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver<Microsoft.CodeAnalysis.CSharp.SyntaxKind>.TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.SyntaxReference decl, int declarationIndex, Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool shouldExecuteSyntaxNodeActions, bool shouldExecuteOperationActions, bool shouldExecuteCodeBlockActions, bool shouldExecuteOperationBlockActions, bool isInGeneratedCode, System.Threading.CancellationToken cancellationToken) Line 1819\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver<Microsoft.CodeAnalysis.CSharp.SyntaxKind>.TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool isGeneratedCodeSymbol, System.Threading.CancellationToken cancellationToken) Line 1638\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclared(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 964\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCore(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 919\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEvent(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 906\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 893\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 823\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ExecutePrimaryAnalysisTaskAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool usingPrePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 414\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.AnalyzerDriver.AttachQueueAndProcessAllEventsAsync(Microsoft.CodeAnalysis.Diagnostics.AsyncQueue<Microsoft.CodeAnalysis.Diagnostics.CompilationEvent> eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 343\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver driver, Microsoft.CodeAnalysis.Diagnostics.AsyncQueue<Microsoft.CodeAnalysis.Diagnostics.CompilationEvent> eventQueue, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, System.Threading.CancellationToken cancellationToken) Line 830\tC#\r\n \tMicrosoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsAsync.AnonymousMethod__1() Line 662\tC#\r\n \tSystem.Threading.Tasks.Task<System.Threading.Tasks.Task>.InnerInvoke()\tUnknown\r\n \tSystem.Threading.Tasks.Task.Execute()\tUnknown\r\n \tSystem.Threading.Tasks.Task.ExecutionContextCallback(object obj)\tUnknown\r\n \tSystem.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)\tUnknown\r\n \tSystem.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)\tUnknown\r\n \tSystem.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)\tUnknown\r\n \tSystem.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution)\tUnknown\r\n \tSystem.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\tUnknown\r\n \tSystem.Threading.ThreadPoolWorkQueue.Dispatch()\tUnknown\r\n \tSystem.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\tUnknown\r\n\r\n```\r\n\r\n"},{"Id":"7631243329","Type":"IssuesEvent","CreatedAt":"2018-05-04T23:42:37","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24162","RelatedDescription":"Closed issue \"Properly declare NuGet dependencies on Humanizer and ICSharpCode.Decompiler\" (#24162) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n2.7.0-beta3-62509-03\r\n\r\nI'm looking at this family of NuGets and I don't see a dependency on Humanizer and ICSharpCode.Decompiler. These need to be explicitly declared on the Roslyn NuGet packages that require them (EditorFeatures?)"},{"Id":"7631239590","Type":"PullRequestEvent","CreatedAt":"2018-05-04T23:40:52","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25542","RelatedDescription":"Merged pull request \"add package dependencies\" (#25542) at dotnet/roslyn","RelatedBody":"<details><summary>add package dependencies</summary>\r\n\r\n### Customer scenario\r\nEditorFeature nuget package does not specify all its depended packages, need to add the missing ones.\r\n\r\n### Bugs this fixes\r\nhttps://github.com/dotnet/roslyn/issues/24162\r\n\r\n### Workarounds, if any\r\nUsers need to figure out and install the depended packages themselves.\r\n\r\n### Risk\r\nLow, all the dependencies are pulled up from EditorFeatures.csproj, CSharpEditorFeatures.csproj, CSharpFeatures.csproj and Features.csproj.\r\n\r\n### Performance impact\r\nLow, all the dependencies are pulled up from EditorFeatures.csproj, CSharpEditorFeatures.csproj, CSharpFeatures.csproj and Features.csproj.\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### Root cause analysis\r\nNA\r\n\r\n### How was the bug found?\r\nCustomer reported\r\n\r\n### Test documentation updated?\r\nNA\r\n\r\n</details>\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7629179608","Type":"PullRequestEvent","CreatedAt":"2018-05-04T15:15:25","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5774","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5774) at dotnet/corert","RelatedBody":""},{"Id":"7629174852","Type":"PullRequestEvent","CreatedAt":"2018-05-04T15:14:30","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5774","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5774) at dotnet/corert","RelatedBody":""},{"Id":"7625927511","Type":"IssuesEvent","CreatedAt":"2018-05-03T23:50:24","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5773","RelatedDescription":"Opened issue \"Improve WebAssembly test output\" (#5773) at dotnet/corert","RelatedBody":"The WebAssembly test at https://github.com/dotnet/corert/blob/master/tests/src/Simple/HelloWasm/Program.cs currently only prints for tests that pass and always returns a success result (100). This should be refactored to print whether each test passes or fails and return a non-success result if a test fails. That will improve the likelihood of catching bugs during builds and make the output more readable."},{"Id":"7625891237","Type":"IssuesEvent","CreatedAt":"2018-05-03T23:37:13","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4515","RelatedDescription":"Closed issue \"Implement callvirt opcode correctly\" (#4515) at dotnet/corert","RelatedBody":"Currently, the WebAssembly importer treats call and callvirt identically, but there are two important differences:\r\n1. callvirt should check the ```this``` parameter and throw a NullReferenceException if it's null (or trap if exception handling doesn't work yet).\r\n2. callvirt should dispatch virtual methods. The runtime includes some of the dispatch logic, but some probably needs to be handled in codegen as well.\r\n\r\ncallvirt should be handled in:\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L528\r\n\r\nDepends on #4505 since this involves calls into the runtime."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7630909485","Type":"PullRequestEvent","CreatedAt":"2018-05-04T21:41:37","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2224","RelatedDescription":"Opened pull request \"Merge release/2.1.4xx to master\" (#2224) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7630837048","Type":"PullRequestEvent","CreatedAt":"2018-05-04T21:21:34","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2191","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.8.0-preview1.5158 into sdk\" (#2191) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.8.0-preview1.5158 into sdk release/2.1.3xx branch"},{"Id":"7630835029","Type":"PullRequestEvent","CreatedAt":"2018-05-04T21:21:01","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2220","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.8.0-preview1.5158 into sdk\" (#2220) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.8.0-preview1.5158 into sdk release/2.1.4xx branch"},{"Id":"7630653811","Type":"IssuesEvent","CreatedAt":"2018-05-04T20:36:31","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1502","RelatedDescription":"Closed issue \"Conflict resolution from desktop MSBuild fails to get assembly identity from cross-gen'ed linux binaries\" (#1502) at dotnet/sdk","RelatedBody":"1. Crete a new console project.\r\n2. Modify the contents to the following.\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <RuntimeIdentifier>centos.7-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Threading\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n3. dotnet restore\r\n4. dotnet publish --> works correctly\r\n5. msbuild /t:publish --> app will fail to start with a refdef mismatch for System.Threading.  \r\n\r\nThis is because the System.Threading.dll conflict isn't being resolved.  If you examine the log you'll see\r\n```\r\nEncountered conflict between 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\runtime.linux-x64.microsoft.netcore.app\\2.0.0\\runtimes\\linux-x64\\lib\\netcoreapp2.0\\System.Threading.dll' and 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\system.threading\\4.3.0\\lib\\netstandard1.3\\System.Threading.dll'.  Could not determine a winner because 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\runtime.linux-x64.microsoft.netcore.app\\2.0.0\\runtimes\\linux-x64\\lib\\netcoreapp2.0\\System.Threading.dll' is not an assembly.\r\n```\r\n\r\nCompare this to the following in dotnet publish:\r\n```\r\nEncountered conflict between 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\runtime.linux-x64.microsoft.netcore.app\\2.0.0\\runtimes\\linux-x64\\lib\\netcoreapp2.0\\System.Threading.dll' and 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\system.threading\\4.0.11\\lib\\netstandard1.3\\System.Threading.dll'.  Choosing 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\runtime.linux-x64.microsoft.netcore.app\\2.0.0\\runtimes\\linux-x64\\lib\\netcoreapp2.0\\System.Threading.dll' because AssemblyVersion '4.1.0.0' is greater than '4.0.11.0'.\r\n```\r\n\r\nIt would seem that the [desktop implementation](https://github.com/dotnet/sdk/blob/a34f9e69bad5c38a897e7102a16a242a82fa278d/src/Tasks/Common/src/FileUtilities.net45.cs#L13-L22) for getting the assembly version can't handle the cross-gened assemblies, however the [core implementation ](https://github.com/dotnet/sdk/blob/a34f9e69bad5c38a897e7102a16a242a82fa278d/src/Tasks/Common/src/FileUtilities.netstandard.cs#L17-L40) can.\r\n\r\n"},{"Id":"7630653075","Type":"PullRequestEvent","CreatedAt":"2018-05-04T20:36:20","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2185","RelatedDescription":"Merged pull request \"Use MetadataReader to get assembly versions for conflict resolution\" (#2185) at dotnet/sdk","RelatedBody":"Use MetadataReader version of GetAssemblyVersion for:\r\n\r\n- netcoreapp version of Microsoft.NET.Build.Extensions.Tasks\r\n- All versions of Microsoft.NET.Build.Tasks\r\n\r\nThis doesn't use it for the .NET Framework version of Microsoft.NET.Build.Extensions in order to avoid loading the System.Reflection.Metadata assembly in vanilla .NET Framework build scenarios.\r\n\r\nThis does use MetadataReader for the SDK tasks in order to correctly read the assembly versions of cross-gened assemblies.\r\n\r\nFixes #1502"},{"Id":"7630649372","Type":"IssuesEvent","CreatedAt":"2018-05-04T20:35:24","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1538","RelatedDescription":"Closed issue \"ResolvePackageFileConflicts fails when paths have New Line characters\" (#1538) at dotnet/sdk","RelatedBody":"NewLine characters in HintPaths are causing an exception in ResolvePackageFileConflicts for projects that previously worked. E.g. \r\n\r\n```xml\r\n<Reference Include=\"System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\">\r\n      <HintPath>\r\n      ..\\..\\packages\\System.Collections.Immutable.1.3.1\\lib\\portable-net45+win8+wp8+wpa81\\System.Collections.Immutable.dll\r\n      </HintPath>\r\n</Reference>\r\n```\r\n\r\nStackTrace:\r\n```\r\nThe \"ResolvePackageFileConflicts\" task failed unexpectedly.\r\nSystem.ArgumentException: Illegal characters in path.\r\n   at System.IO.Path.CheckInvalidPathChars(String path, Boolean checkAdditional)\r\n   at System.IO.Path.GetFileName(String path)\r\n   at Microsoft.NET.Build.Tasks.ItemUtilities.GetTargetPath(ITaskItem item)\r\n   at Microsoft.NET.Build.Tasks.ItemUtilities.GetReferenceTargetPath(ITaskItem item)\r\n   at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.<>c.<ExecuteCore>b__35_1(ConflictItem ci)\r\n   at Microsoft.NET.Build.Tasks.ConflictResolution.ConflictResolver`1.ResolveConflicts(IEnumerable`1 conflictItems, Func`2 getItemKey, Action`1 foundConflict, Boolean commitWinner, Action`1 unresolvedConflict)\r\n   at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.ExecuteCore()\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tServices (Services\\Services)\t\t\t\r\n```\r\n\r\nReports:\r\n- [VSFeedback](https://developercommunity.visualstudio.com/content/problem/99813/illegal-characters-in-path.html) | [484081](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/484081)\r\n- StackOverflow: https://stackoverflow.com/questions/45796041/visual-studio-illegal-characters-in-path\r\n- [VSFeedback](https://developercommunity.visualstudio.com/content/problem/98225/the-resolvepackagefileconflicts-task-failed-unexpe.html) | [482572](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/482572)\r\n\r\n/cc @dsplaisted "},{"Id":"7630648193","Type":"PullRequestEvent","CreatedAt":"2018-05-04T20:35:09","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2196","RelatedDescription":"Merged pull request \"Add trim for path in Item\" (#2196) at dotnet/sdk","RelatedBody":"**Customer scenario**\r\n\r\nIf there is an extra new line in hint path. The fullmsbuild build will fail with error \"Illegal characters in path\". Fix it by adding trim() when process the path.\r\n\r\nFor example:\r\n```xml\r\n<Reference Include=\"System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\">\r\n      <HintPath>\r\n      ..\\..\\packages\\System.Collections.Immutable.1.3.1\\lib\\portable-net45+win8+wp8+wpa81\\System.Collections.Immutable.dll\r\n      </HintPath>\r\n</Reference>\r\n```\r\n\r\n**Bugs this fixes**\r\n\r\nhttps://github.com/dotnet/sdk/issues/1538\r\n\r\n**Workarounds, if any**\r\n\r\nUse non new line instead\r\n```xml\r\n<HintPath>..\\..\\packages\\System.Collections.Immutable.1.3.1\\lib\\portable-net45+win8+wp8+wpa81\\System.Collections.Immutable.dll</HintPath>\r\n```\r\n\r\n**Risk**\r\n\r\nlow.\r\n\r\n**Performance impact**\r\n\r\nlow\r\n\r\n**Root cause analysis**\r\n\r\nNot enough regression test coverage.\r\n\r\n**How was the bug found?**\r\n\r\nIssue filed from Github\r\n"},{"Id":"7630629468","Type":"IssuesEvent","CreatedAt":"2018-05-04T20:30:45","Actor":"joperezr","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2221","RelatedDescription":"Opened issue \"Conflict Resolution is incorrectly assuming that all of the platform assemblies are referenced which is causing build time errors\" (#2221) at dotnet/sdk","RelatedBody":"Conflict resolution target will blindly assume that all of the platform assemblies are referenced (which is not necessarily true for all of the non-facade ones)\r\n\r\nThis can lead to problems like the one that [this user faced](https://github.com/dotnet/corefx/issues/28833#issuecomment-386615535). Basically the scenario is having a 4.7.2 console project that references the platform's System.Net.Http, and that also references System.Net.Http package (either transitively or directly). This will cause that first, `ResolveNuGetPackageAssets` target will remove the reference to the platform one by assuming that the NuGet package reference should win (which is also incorrect and I'm logging a separate bug for that on NuGet) and then the `_HandlePackageFileConflicts` target will remove the package reference to System.Net.Http since it will see that the platform's assembly version is higher, even though it is not referenced any longer. That leads to compilation errors when trying to use a type from System.Net.Http, since at the time of calling the compiler, no System.Net.Http will be referenced.\r\n\r\nHere are some simple repro steps:\r\n1.- Create a 4.7.2 Console App using the latest version of VS.\r\n2.- Edit your project.csproj file to include these lines:\r\n```xml\r\n  <ItemGroup>\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.3\" />\r\n  </ItemGroup>\r\n```\r\n3.- Edit your Program.cs file to use S.N.Http like:\r\n```cs\r\nusing System.Net.Http;\r\n...\r\nstatic void Main(string[] args)\r\n        {\r\n            HttpClient client = new HttpClient();\r\n```\r\n4.- Try to build.\r\n\r\nExpected:\r\nBuild should work since you are clearly referencing System.Net.Http\r\n\r\nActual:\r\nCan't find System.Net.Http.dll\r\n\r\ncc: @ericstj @nguerrera @dsplaisted @AlexandruGhiondea"},{"Id":"7630511809","Type":"IssuesEvent","CreatedAt":"2018-05-04T20:03:22","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2044","RelatedDescription":"Closed issue \"The \"ResolvePackageAssets\" task failed unexpectedly due to max path limitation of NuGet package cache\" (#2044) at dotnet/sdk","RelatedBody":"I am using version `2.1.300-preview2-008251` of the SDK and I am getting this failure multiple times when building inside VS. Building from the command line completes successfully.\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tMSB4018\tThe \"ResolvePackageAssets\" task failed unexpectedly.\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: path1\r\n   at System.IO.Path.Combine(String path1, String path2)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.RaisePackageAssets[T](LockFileTarget target, Func`2 getAssets, Func`2 filter, Action`2 setup)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore()\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tSocialWeather\tC:\\Users\\James\\.dotnet\\x64\\sdk\\2.1.300-preview2-008251\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets\t201\t\r\n```\r\n\r\nFailing source: https://github.com/aspnet/SignalR/commit/4b666dfa856a7600205ab488a7ad4c8facbe7f6e\r\n\r\nOpen SignalR.sln in 15.6.2 and rebuild solution for the error.\r\n\r\n[buildlogs.zip](https://github.com/dotnet/sdk/files/1812858/buildlogs.zip)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"991311154747199488","CreatedAt":"2018-05-01T13:39:31+00:00","UserScreenname":"dotnet","Text":"Do you have questions about async and await in C#?  Join @csharpfritz and @billwagner at 10a ET / 7a PT / 14:00 UTC… https://t.co/Sdn4F5XeZ2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":20,"RawContent":null},{"Id":"991060228220178432","CreatedAt":"2018-04-30T21:02:26+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.2 https://t.co/Tx658XoEZG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":553,"FavoriteCount":409,"RawContent":null},{"Id":"989532387775205376","CreatedAt":"2018-04-26T15:51:20+00:00","UserScreenname":"dotnet","Text":"Get the Azure Quick Start Guide for .NET Developers https://t.co/ALECzXryjk","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":49,"FavoriteCount":22,"RawContent":null},{"Id":"987375741204508673","CreatedAt":"2018-04-20T17:01:35+00:00","UserScreenname":"dotnet","Text":"Help us plan the future of .NET! https://t.co/R0QoZVvXx4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":125,"FavoriteCount":94,"RawContent":null},{"Id":"986692696507953152","CreatedAt":"2018-04-18T19:47:25+00:00","UserScreenname":"dotnet","Text":"Performance Improvements in .NET Core 2.1 https://t.co/6YMK8P99cZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":250,"FavoriteCount":153,"RawContent":null},{"Id":"986692437211987969","CreatedAt":"2018-04-18T19:46:23+00:00","UserScreenname":"dotnet","Text":"Announcing Visual Studio 2017 15.7 Preview 4 https://t.co/XYIzXNDMhn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":44,"RawContent":null},{"Id":"986400394786914304","CreatedAt":"2018-04-18T00:25:55+00:00","UserScreenname":"dotnet","Text":".NET Core April 2018 Update https://t.co/PuT2Jc7GBy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":68,"FavoriteCount":33,"RawContent":null}]}},"RunOn":"2018-05-05T05:30:22.8577874Z","RunDurationInMilliseconds":7871}