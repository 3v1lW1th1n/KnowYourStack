{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin and .NET Developer Events in September","PublishedOn":"2018-08-31T16:42:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin and .NET developer events this September: September 10: Los Angeles, CA. USA &#124; Los Angeles .NET Developers Group: LADOTNET &#8211; The Architectural Mindset by Jeremy Cameron September...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-september/","RawContent":null},{"Title":"Using the New Xamarin.Forms Controls Toolbox","PublishedOn":"2018-08-24T14:03:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms empowers you to deliver the same experience to multiple platforms. Using a set of UI elements abstracted from common mobile app controls, like text inputs and buttons, you can quickly...","Href":"https://blog.xamarin.com/using-new-xamarin-forms-controls-toolbox/","RawContent":null},{"Title":"Getting Started with Android Pie","PublishedOn":"2018-08-21T20:19:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Google recently released Android Pie for developers to enhance their apps and build new experiences with. Previously, Microsoft released an Android 9.0 Preview for Xamarin.Android and as of today, you...","Href":"https://blog.xamarin.com/android-pie-preview-getting-started/","RawContent":null},{"Title":"Exploring New iOS 12 ARKit Capabilities With Xamarin","PublishedOn":"2018-08-20T20:04:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s summertime, which for Xamarin developers means new iOS betas to explore and learn. ARKit, which debuted last year in iOS 11, has matured over the past year and in iOS 12 is much more...","Href":"https://blog.xamarin.com/exploring-new-ios-12-arkit-capabilities-with-xamarin/","RawContent":null},{"Title":"Attend A .NET Conf Event Near You!","PublishedOn":"2018-08-15T20:29:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you have not yet heard of the .NET Conf, it is a FREE, 3-day virtual developer event co-organized by the .NET community and Microsoft. There is a wide selection of live sessions with feature...","Href":"https://blog.xamarin.com/attend-a-net-conf-event-near-you/","RawContent":null},{"Title":"Preview: iOS 12 development with Xamarin","PublishedOn":"2018-08-10T16:30:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The latest Xamarin preview release supports Xcode 10 beta 5, which includes beta SDKs for iOS 12, macOS Mojave (10.14), watchOS 5, and tvOS 12. Get Started With New iOS 12 APIs Today: iOS 12 includes...","Href":"https://blog.xamarin.com/preview-ios-12-development-with-xamarin/","RawContent":null},{"Title":"Securing network traffic with TLS 1.2","PublishedOn":"2018-08-07T15:58:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Secure and encrypted network communications are a crucial part of mobile application development. Without some kind of security around the communication layer, it is trivial for a third party to...","Href":"https://blog.xamarin.com/securing-network-traffic-with-tls-1-2/","RawContent":null},{"Title":"Adaptive Mobile Designs with FlexLayout","PublishedOn":"2018-08-03T17:33:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms is fantastic for quickly shipping a single code base to multiple platforms and devices. As soon as you are present on all those different screens, you need to make sure your UI looks as...","Href":"https://blog.xamarin.com/adaptive-mobile-designs-with-flexlayout/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in August!","PublishedOn":"2018-08-01T19:46:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This year&#8217;s .NET Conf is coming to you September 12 &#8211; 14, 2018! Over the course of the three days, you have a wide selection of live sessions that feature speakers from the community and...","Href":"https://blog.xamarin.com/xamarin-dotnet-developer-events-august/","RawContent":null},{"Title":"Guest Post: Visual UI tests on iOS simulator using Xamarin and Appium","PublishedOn":"2018-07-30T19:07:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post from Sophie Tagar, a customer support engineer at Applitools. Previously, Sophie was a software developer at Matrix Israel where, among other things, she did full stack...","Href":"https://blog.xamarin.com/visual-ui-tests-ios-simulator-using-xamarin-appium/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8201384457","Type":"PullRequestEvent","CreatedAt":"2018-09-01T17:01:51","Actor":"luhenry","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2134","RelatedDescription":"Opened pull request \"[Xamarin.Android.Tools.BootstrapTasks] Make output of UnzipDirectoryChildren less messy\" (#2134) at xamarin/xamarin-android","RelatedBody":"The lines are all messed up because the underlying unzip command uses 2 steps to print a line: first the line content, then the '\\n'. This can race across processes and makes the output quite hard to read.\r\n\r\nThis fixes that by making sure we print the whole \"line+'\\n'\" at the same time. This doesn't completely reduce the chance of broken line, but it greatly reduces it anyway."},{"Id":"8201100705","Type":"PullRequestEvent","CreatedAt":"2018-09-01T13:40:43","Actor":"luhenry","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2118","RelatedDescription":"Merged pull request \" [mono-sdks] Use for cross-{arm,arm64,x86,x86_64}{,-win}\" (#2118) at xamarin/xamarin-android","RelatedBody":"Dependencies:\r\n - [x] https://github.com/xamarin/xamarin-android/pull/2110\r\n - [x] https://github.com/xamarin/xamarin-android/pull/2106\r\n - [x] https://github.com/mono/mono/pull/10395"},{"Id":"8200267324","Type":"PullRequestEvent","CreatedAt":"2018-09-01T01:43:13","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2133","RelatedDescription":"Opened pull request \"[WIP] [Mono.Android] make Stream seekable.\" (#2133) at xamarin/xamarin-android","RelatedBody":"There are some Android API that returns java.io.InputStream, which we\r\nconvert to System.IO.Stream and support `skip()` method, which works\r\nlike `Seek()` in .NET land.\r\nOur Stream implementation is sadly less functional and `Seek()` throws\r\nNotSupportedException. It is particularly problematic when we try to\r\nopen and seek Android assets via `AssetManager.Open()`.\r\n\r\nHere is an \"aggressive\" implementation that supports those operations\r\n(Java API for seek operation is fugly and cannot be simply implemented)."},{"Id":"8199454021","Type":"PullRequestEvent","CreatedAt":"2018-08-31T20:15:47","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2132","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] prevent _BuildLibraryProjectImportsCache always running\" (#2132) at xamarin/xamarin-android","RelatedBody":"When testing a build with no changes, I started noticing:\r\n\r\n    Building target \"_BuildLibraryImportsCache\" completely.\r\n    Input file \"App7\\bin\\Debug\\netstandard2.0\\App7.dll\" is newer than output file \"obj\\Debug\\90\\libraryimports.cache\".\r\n\r\nWhat was weird, is that earlier in the build log:\r\n\r\n    Did not copy from file \"bin\\Debug\\netstandard2.0\\App7.dll\" to file \"bin\\Debug\\App7.dll\" because the \"SkipUnchangedFiles\" parameter was set to \"true\" in the project and the files' sizes and timestamps match.\r\n\r\nSo the NetStandard assembly didn't change.\r\n\r\nWhen I looked at these files:\r\n\r\n    8/31/2018  11:02 AM App7.dll\r\n    8/31/2018  10:09 AM resourcepaths.cache\r\n\r\nWeird? It looks like `resourcepaths.cache`'s timestamp needs to be\r\nupdated?\r\n\r\nThen I looked and noticed that the timestamp of `resourcepaths.cache`\r\nwould only be updated if the XML changed.\r\n\r\nSo to fix this:\r\n- I made `XDocumentExtensions.SaveIfChanged` return a `bool`\r\n  indicating if the file changed.\r\n- I changed the `GetImportedLibraries` task so that it would update\r\n  the timestamp in cases where the file didn't change.\r\n\r\nBefore this change:\r\n\r\n    174 ms  _BuildLibraryImportsCache                  1 calls\r\n\r\nAfter this change:\r\n\r\n    5 ms  _BuildLibraryImportsCache                  1 calls\r\n\r\nIt seems to me this problem was always occurring on builds with no\r\nchanges. So this will likely help any incremental build.\r\n\r\nI also updated an existing test to make sure the\r\n`_BuildLibraryImportsCache` target isn't running all the time."},{"Id":"8199142541","Type":"PullRequestEvent","CreatedAt":"2018-08-31T18:59:15","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2131","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] simplify inputs to _CompileToDalvik\" (#2131) at xamarin/xamarin-android","RelatedBody":"Recently I've been discovering more and more places where usage of\r\n`**\\*.*` can hurt the performance of our build.\r\n\r\nIn this case, the `_FindCompiledJavaFiles` target:\r\n\r\n    <Target Name=\"_FindCompiledJavaFiles\" DependsOnTargets=\"_CompileJava\">\r\n        <CreateItem Include=\"$(IntermediateOutputPath)android\\bin\\classes\\\\**\\*.class\">\r\n            <Output TaskParameter=\"Include\" ItemName=\"_CompiledJavaFiles\" />\r\n        </CreateItem>\r\n    </Target>\r\n\r\nThis target is running even in builds with no changes, so we are\r\n*always* recursing directories and finding `*.class` files.\r\n\r\nBut since we are using a `classes.zip` file now, we don't need to\r\nrecurse and find the `*.class` files at all anymore!\r\n\r\nI was able to remove this target completely, and change\r\n`$(_CompileToDalvikInputs)` to use\r\n`$(IntermediateOutputPath)android\\bin\\classes.zip`. Less inputs also\r\nhelp build times, because MSBuild won't have to evaluate timestamps on\r\nall the `*.class` files. It can just look at the single `classes.zip`\r\nfile.\r\n\r\nTo see the difference, a build with no changes was taking:\r\n\r\n    51 ms  _FindCompiledJavaFiles                     1 calls\r\n    30 ms  _CompileToDalvikWithDx                     1 calls\r\n    Total time: 3.524s\r\n\r\nAfter these changes:\r\n\r\n    2 ms  _CompileToDalvikWithDx                     1 calls\r\n    Total time: 2.386s\r\n\r\n`_FindCompiledJavaFiles` is gone completely.\r\n\r\nYou can see there is some time savings in general here, I'm not sure\r\nhow MSBuild logs the time it is taking to compute `Inputs` and\r\n`Outputs` of targets."},{"Id":"8198637891","Type":"PullRequestEvent","CreatedAt":"2018-08-31T17:07:26","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2127","RelatedDescription":"Merged pull request \"[monodroid] Add java-interop-jvm.c to desktop libmonodroid\" (#2127) at xamarin/xamarin-android","RelatedBody":"So that `jnimarshalmethod-gen.exe` (and possible future desktop\r\nutilities, which would use JVM) work."},{"Id":"8198569534","Type":"PullRequestEvent","CreatedAt":"2018-08-31T16:52:11","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2130","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] precompile SetVsMonoAndroidRegistryKey\" (#2130) at xamarin/xamarin-android","RelatedBody":"In `Xamarin.Android.Sdk.props` we have some inline C# code for a\r\nMSBuild task named `SetVsMonoAndroidRegistryKey`. Which is\r\nunderstandable, since the code needed is so simple. But thinking about\r\nit, MSBuild has to *compile* this code to run it. Which seems\r\ninherently slower than if we compiled the code during our build.\r\n\r\nCurrently its entire parent target, `RedirectMonoAndroidSdkPaths`,\r\ntakes:\r\n\r\n    157 ms  RedirectMonoAndroidSdkPaths                1 calls\r\n\r\nI moved this task inside `Xamarin.Android.Build.Tasks.dll`, and we\r\nappear to get some improvements \"for free\":\r\n\r\n    76 ms  RedirectMonoAndroidSdkPaths                1 calls\r\n\r\nI looked at some past logs, and there are some times where the\r\n`RedirectMonoAndroidSdkPaths` target was taking over 200ms. I suspect\r\nMSBuild might also have some caching functionality for inlined C#\r\ncode. There might be a cached assembly somewhere? Not sure.\r\n\r\nWhat makes this a better fix is that this target runs for all\r\nbuilds--even builds with no changes.\r\n\r\nGeneral changes:\r\n- The `<UsingTask />` doesn't need a condition, since it will be\r\n  lazily evaluated anyways.\r\n- Used string interpolation where it looked nicer.\r\n- Used `LogDebugMessage` and improved the log message."},{"Id":"8198522274","Type":"PullRequestEvent","CreatedAt":"2018-08-31T16:41:48","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2129","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Add ConvertCustomView Task [WIP\" (#2129) at xamarin/xamarin-android","RelatedBody":""},{"Id":"8198152238","Type":"PullRequestEvent","CreatedAt":"2018-08-31T15:28:47","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2128","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] _CopyIntermediateAssemblies uses CopyIfChanged\" (#2128) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/2088\r\n\r\n970da9ef was a good step towards \"correctness\" in building\r\nincrementally in the following scenario:\r\n- File | New Xamarin.Forms project | NetStandard library\r\n- Build\r\n- Change XAML\r\n- Build\r\n\r\nIn this scenario, there is now a new target rising to the surface we\r\ncan improve:\r\n\r\n    276 ms  _CopyIntermediateAssemblies                1 calls\r\n\r\nLooking at the target, it seems we could use the `CopyIfChanged` task\r\nhere more effectively. This task will automaticaly set the timestamps\r\nof files that have been copied, and so we don't need any subsequent\r\n`<ItemGroup />` or `<Touch />` elements. It was also touching *all*\r\nfiles instead of just the ones that were changed.\r\n\r\nAfter this change:\r\n\r\n    33 ms  _CopyIntermediateAssemblies                1 calls\r\n\r\nThe overall build went from 7.058s to 6.652s, so there must be some\r\nother targets that benefit from the timestamps not changing on *all*\r\nof these files."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8201970582","Type":"IssuesEvent","CreatedAt":"2018-09-02T01:46:44","Actor":"scastria","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3695","RelatedDescription":"Opened issue \"[UWP] Button does not render properly when Rotation is changed and then changed back to 0\" (#3695) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nAttached is a sample program that demonstrates the bug.  Just keep clicking the button and it should rotate to 0, 90, 180, and 270 degrees and then start back at 0.  the problem is every time it gets back to 0, it does not render properly.\r\n\r\n### Steps to Reproduce\r\n\r\nSee Description above\r\n[UWPButtonRotation.zip](https://github.com/xamarin/Xamarin.Forms/files/2342908/UWPButtonRotation.zip)\r\n"},{"Id":"8201875422","Type":"IssuesEvent","CreatedAt":"2018-09-02T00:00:22","Actor":"AndreiMisiukevich","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3694","RelatedDescription":"Opened issue \"[Android] Device animations disabled issue\" (#3694) at xamarin/Xamarin.Forms","RelatedBody":"Hi there\r\n\r\nIf user disabled animations on his device, Animation.Commit would do nothing.\r\nSo, committing animation doesn't affect view's at all.\r\nIn my opinion, it would be better handle it next way:\r\n\r\nif animations are disabled, we call handler on last step at once.\r\n\r\nI fixed such issue for my plugin by adding\r\n- **IAnimationsChecker** interface\r\nhttps://github.com/AndreiMisiukevich/CardView/blob/master/PanCardView/Utility/IAnimationsChecker.cs\r\n- **AnimationsChecker** android service\r\nhttps://github.com/AndreiMisiukevich/CardView/blob/master/PanCardView.Droid/AnimationsChecker.cs\r\n- **AnimationWrapper** class\r\nhttps://github.com/AndreiMisiukevich/CardView/blob/master/PanCardView/Utility/AnimationWrapper.cs\r\n\r\n```csharp\r\nnamespace PanCardView.Utility\r\n{\r\n    public interface IAnimationsChecker\r\n    {\r\n        bool AreAnimationsEnabled { get; }\r\n    }\r\n}\r\n```\r\n\r\n```csharp\r\nusing PanCardView.Utility;\r\nusing Android.Provider;\r\nusing Android.App;\r\nusing PanCardView.Droid;\r\nusing Android.Runtime;\r\n\r\n[assembly: Xamarin.Forms.Dependency(typeof(AnimationsChecker))]\r\nnamespace PanCardView.Droid\r\n{\r\n    [Preserve(AllMembers = true)]\r\n    public class AnimationsChecker : IAnimationsChecker\r\n    {\r\n        public bool AreAnimationsEnabled \r\n        {\r\n            get\r\n            {\r\n                try\r\n                {\r\n                    var resolver = Application.Context.ContentResolver;\r\n                    var scale = Settings.Global.AnimatorDurationScale;\r\n                    return Settings.Global.GetFloat(resolver, scale, 1) > 0;\r\n                }\r\n                catch\r\n                {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```csharp\r\n\r\nusing System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing Xamarin.Forms;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace PanCardView.Utility\r\n{\r\n    public sealed class AnimationWrapper : IEnumerable\r\n    {\r\n        private readonly List<AnimationWrapper> _children;\r\n\r\n        public AnimationWrapper(Action<double> callback = null, double start = 0, double end = 1)\r\n        {\r\n            _children = new List<AnimationWrapper>();\r\n            Callback = callback;\r\n            Start = start;\r\n            End = end;\r\n        }\r\n\r\n        public IEnumerator GetEnumerator() => _children.GetEnumerator();\r\n\r\n        public double Start { get; private set; }\r\n\r\n        public double End { get; private set; }\r\n\r\n        public double BeginsAt { get; private set; }\r\n\r\n        public double FinishsAt { get; private set; }\r\n\r\n        public Action<double> Callback { get; private set; }\r\n\r\n        public void Add(double beginAt, double finishAt, AnimationWrapper animation)\r\n        {\r\n            animation.BeginsAt = beginAt;\r\n            animation.FinishsAt = finishAt;\r\n            _children.Add(animation);\r\n        }\r\n\r\n        public Task Commit(View view, string name, uint rate = 16u, uint length = 250u, Easing easing = null)\r\n        {\r\n            if (DependencyService.Get<IAnimationsChecker>()?.AreAnimationsEnabled ?? true)\r\n            {\r\n                var tcs = new TaskCompletionSource<bool>();\r\n                PrepareAnimation(this).Commit(view, name, rate, length, easing, (d, b) => tcs.SetResult(true));\r\n                return tcs.Task;\r\n            }\r\n\r\n            try\r\n            {\r\n                view.BatchBegin();\r\n                CommitWithoutAnimation(this);\r\n            }\r\n            finally\r\n            {\r\n                view.BatchCommit();\r\n            }\r\n            return Task.FromResult(true);\r\n        }\r\n\r\n        private void CommitWithoutAnimation(AnimationWrapper animation)\r\n        {\r\n            foreach (AnimationWrapper childAnimation in animation)\r\n            {\r\n                CommitWithoutAnimation(childAnimation);\r\n            }\r\n            animation.Callback?.Invoke(animation.End);\r\n        }\r\n\r\n        private Animation PrepareAnimation(AnimationWrapper animationWrapper)\r\n        {\r\n            var parentAnimation = animationWrapper.Callback != null\r\n                ? new Animation(animationWrapper.Callback, animationWrapper.Start, animationWrapper.End)\r\n                : new Animation();\r\n            \r\n            foreach (AnimationWrapper childAnimation in animationWrapper)\r\n            {\r\n                var anim = PrepareAnimation(childAnimation);\r\n                parentAnimation.Add(childAnimation.BeginsAt, childAnimation.FinishsAt, anim);\r\n            }\r\n            return parentAnimation;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI skipped some properties (Repeat and finished (Action), because i have no need in them, but i think it will be possible to add them as well as existing ones)\r\n\r\nMore info: there https://github.com/AndreiMisiukevich/CardView/issues/93"},{"Id":"8201035368","Type":"IssuesEvent","CreatedAt":"2018-09-01T12:50:00","Actor":"tluyben","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3668","RelatedDescription":"Closed issue \"[GTK] Background of ListView is always grey\" (#3668) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nNo matter what color you apply to the BackgroundColor of ListView, it is always grey. \r\n\r\n### Steps to Reproduce\r\n\r\n1. Add a ListView to a project, set the BackgroundColor = Color.Blue, add a few items\r\n\r\n### Expected Behavior\r\n\r\nList with a Blue background.\r\n\r\n### Actual Behavior\r\n\r\nList with a grey background. \r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.1.0.697729 of Xamarin.Forms.Platform.GTK\r\n- Last known good version: do not know; in the gallery by Ruiz Jsuarez, the ListViews also have grey backgrounds\r\n- IDE: Visual Studio 15.6.0\r\n- Platform Target Frameworks: \r\n - GTK: 3.1.0.697729\r\n- Affected Devices: Windows 10, Linux\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"8201030713","Type":"IssuesEvent","CreatedAt":"2018-09-01T12:46:14","Actor":"TFreudi1","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3693","RelatedDescription":"Opened issue \"Please Reopen [Enhancement] Padding on Buttons #1702\" (#3693) at xamarin/Xamarin.Forms","RelatedBody":"It is still not working, please Reopen it\r\n\r\nVS 2017 15.8.2\r\nIn Xaml: Button Padding=\"0\" \r\ngives\r\nUnhandled Exception:\r\n\r\nXamarin.Forms.Xaml.XamlParseException: Position 24:21. Cannot assign property \"Padding\": Property does not exists, or is not assignable, or mismatching type between value and property\r\n\r\n@TFreudi1\r\n"},{"Id":"8200286104","Type":"IssuesEvent","CreatedAt":"2018-09-01T02:00:14","Actor":"devmikew","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3692","RelatedDescription":"Opened issue \"Cant access x:Name property of an XF control\" (#3692) at xamarin/Xamarin.Forms","RelatedBody":"It would be nice to be able to access the x:Name property of an XF control, either created directly in XAML, or in a style/control template.\r\n\r\nAlso, to copy that name to the top level native control created by the renderer.\r\n\r\nEg, in Windows a FrameWorkElement has a Name property which is copied from the XAML.\r\n\r\nAndroid has Id, however it is an integer. It also has Tag which is an object.\r\n\r\nThen when debugging your code you could find the rendered control associated with your XF control.\r\n\r\nalso one could write code to Find a control by name. Or have platform dependent code reference the control by name, eg, in the VisualStateManager.\r\n\r\nIn XF it would need to be added to Element.\r\n"},{"Id":"8199701236","Type":"IssuesEvent","CreatedAt":"2018-08-31T21:19:59","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3633","RelatedDescription":"Closed issue \"[iOS] NullReferenceException in EntryRenderer.UpdateCursorFromControl\" (#3633) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nWe've updated to the latest beta version of Forms (3.2.0.729530-pre2) and starting seeing these come through in our bug reporting. When selecting / deselecting text in an entry control, a null reference exception is periodically thrown in EntryRenderer.UpdateCursorFromControl\r\n\r\n### Steps to Reproduce\r\n\r\n1. Put text into an entry control\r\n2. Long tap to try to select text in the control multiple times\r\n3. Eventually the exception will be thrown\r\n\r\n### Expected Behavior\r\nText selection doesn't cause an exception.\r\n\r\n### Actual Behavior\r\nPeriodically the app crashes with the exception when trying to select text.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms 3.2.0.729530-pre2\r\n- Last known good version: Xamarin.Forms 3.1.0.697729\r\n- IDE: Visual Studio for Mac 7.6\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  10 <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n\r\n### Reproduction Link\r\nI can easily reproduce with any entry in our application. If needed, I can try to provide an isolated reproduction case.\r\n\r\nExample Crash Log -\r\n[entry_crash.txt](https://github.com/xamarin/Xamarin.Forms/files/2310694/entry_crash.txt)\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"8199701228","Type":"IssuesEvent","CreatedAt":"2018-08-31T21:19:59","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3343","RelatedDescription":"Closed issue \"[Android] Cursor position in entry and selection length not working on 3.2.0-pre1\" (#3343) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nI set the cursor position and length, but on Android it doesn't have any impact. \r\n\r\nIn OnAppearing it works on iOS:\r\n```\r\nFirstEntry.CursorPosition = 4;\r\nFirstEntry.SelectionLength = 11;\r\n```\r\n\r\nNeither of them work if you set the values when you Init the Entry Control\r\n```\r\nFirstEntry = new Entry()\r\nFirstEntry.CursorPosition = 4;\r\nFirstEntry.SelectionLength = 11;\r\n```\r\n\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.2.0.637442-pre1\r\n\r\n### Screenshots\r\n\r\n<img width=\"545\" alt=\"screenshot 2018-07-19 14 38 59\" src=\"https://user-images.githubusercontent.com/41873/42966301-48eaeeb0-8b62-11e8-9548-366a409e0f11.png\">\r\n<img width=\"584\" alt=\"screenshot 2018-07-19 14 38 34\" src=\"https://user-images.githubusercontent.com/41873/42966302-48fb99d6-8b62-11e8-8cae-bbff48e5e3ad.png\">\r\n\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/davidortinau/TheLittleThingsPlayground/blob/3.2.0-pre/TheLittleThingsPlayground/Views/ThreeTwoPage.xaml\r\n\r\nhttps://github.com/davidortinau/TheLittleThingsPlayground/blob/3.2.0-pre/TheLittleThingsPlayground/Views/ThreeTwoPage.xaml.cs\r\n\r\n[CursorPosition.zip](https://github.com/xamarin/Xamarin.Forms/files/2212029/CursorPosition.zip)\r\n\r\n"},{"Id":"8199701216","Type":"IssuesEvent","CreatedAt":"2018-08-31T21:19:59","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2894","RelatedDescription":"Closed issue \"[iOS] Gesture Recognizers added to Span after it's been set to FormattedText don't work and can cause an NRE\" (#2894) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\n- Adding a TapGestureRecognizer to a span after it's been set to FormattedText on a label doesn't work\r\n- If you now click that Span really fast you'l get an NRE\r\n\r\n### Steps to Reproduce\r\n\r\nclick on the \r\n*\"I will not fire when clicked\"*\r\ntext and notice nothing happens\r\nclick on it really fast and see an NRE exception\r\n\r\n```c#\r\nvar label = new Label();\r\n\r\n\t\t\tvar s = new FormattedString();\r\n\t\t\tvar span = new Span { Text = \"I will fire when clicked\", FontAttributes = FontAttributes.Bold };\r\n\t\t\tvar span2 = new Span { Text = \"I will not fire when clicked\", FontAttributes = FontAttributes.Bold };\r\n\t\t\tspan.GestureRecognizers.Add(new TapGestureRecognizer()\r\n\t\t\t{\r\n\t\t\t\tCommand = new Command(async () =>\r\n\t\t\t   {\r\n\t\t\t\t   await MainPage.DisplayAlert(\"Yay clicked\", \"yay clicked\", \"yay clicked\");\r\n\t\t\t   })\r\n\t\t\t});\r\n\r\n\t\t\ts.Spans.Add(span);\r\n\t\t\ts.Spans.Add(span2);\r\n\r\n\t\t\tlabel.FormattedText = s;\r\n\t\t\tspan2.GestureRecognizers.Add(new TapGestureRecognizer()\r\n\t\t\t{\r\n\t\t\t\tCommand = new Command(async () =>\r\n\t\t\t   {\r\n\t\t\t\t\tawait MainPage.DisplayAlert(\"not working\", \"not working\", \"not working\");\r\n\t\t\t   })\r\n\t\t\t});\r\n\r\n\t\t\treturn new ContentPage()\r\n\t\t\t{\r\n\t\t\t\tContent = new StackLayout()\r\n\t\t\t\t{\r\n\t\t\t\t\tChildren = { label },\r\n\t\t\t\t\tPadding = 40\r\n\t\t\t\t}\r\n\t\t\t};\r\n```\r\n\r\n### Expected Behavior\r\nBoth spans should be clickable and clicking rapidly shouldn't cause a NRE\r\n\r\n### Actual Behavior\r\nWhen clicking on the second span nothing happens.\r\nIf you click the span really fast it'll cause a NRE\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.1 nightly\r\n- IDE: VS for Mac\r\n- Platform Target Frameworks:  \r\n  - iOS:  11.2  \r\n\r\n "},{"Id":"8199040200","Type":"PullRequestEvent","CreatedAt":"2018-08-31T18:35:57","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3466","RelatedDescription":"Merged pull request \"[CSS] add more properties\" (#3466) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nmap new CSS properties:\r\n- `color` on `IColorElement` (`ActivityIndicator`, `BoxView`),\r\n  `ProgressBar` and `Switch`\r\n- `row-gap` and `column-gap` on `Grid`\r\n- `transform` and `transform-origin` on `VisualElement`\r\n- `vertical-align` on `Label`\r\n\r\nadd new XF-specific CSS properties\r\n- `-xf-placeholder` and `-xf-placeholder-color` on `Editor`, `Entry`,\r\n  `SearchBar`\r\n- `-xf-max-length` on `InputView` (`Editor` and `Entry`)\r\n- `-xf-bar-background-color` and `-xf-bar-text-color` on\r\n  `NavigationPage` and `TabbedPage`\r\n- `-xf-orientation` on `ScrollView` and `StackLayout`\r\n- `-xf-horizontal-scroll-bar-visibility` and\r\n  `-xf-vertical-scroll-bar-visibility` on `ScrollView`\r\n- `-xf-min-track-color`, `-xf-max-track-color` and `(\"-xf-thumb-color`\r\n  on `Slider`\r\n- `-xf-spacing` on `StackLayout`\r\n\r\n### Issues Resolved ###\r\n\r\nThis PR replaces and closes #3276\r\n\r\n- fixes #2891\r\n\r\n### API Changes ###\r\n\r\nsome new attributes\r\n\r\n### Platforms Affected ###\r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\n/\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8199040195","Type":"IssuesEvent","CreatedAt":"2018-08-31T18:35:57","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2891","RelatedDescription":"Closed issue \"[CSS] vendor prefix\" (#2891) at xamarin/Xamarin.Forms","RelatedBody":"NOTE: this document is not a full spec. some side discussion happened on chats, and on PR reviews.\r\n\r\nIn addition to the already supported properties, we should introduce vendor prefixes `-xf-`, or `-forms-` and map them to some other of our properties.\r\n\r\nSee also #1723\r\n\r\n### Proposed new properties\r\n|Property|Applies to|Values (string literals are `grayed`, while types are _italic_)|Example|\r\n|---|---|---|---|\r\n|`color`|`BoxView`, `ActivityIndicator`, `ProgressBar`, ...|_color_  \\| `initial`|`color: green;`|\r\n|`-xf-placeholder`|`Entry`, `Editor`|_quoted text_ \\| `initial`|`-xf-placeholder: \"your name here\";`|\r\n|`-xf-placeholder-color`|`Entry`, `Editor`|_color_ \\| `initial`|`-xf-placeholder-color: limegreen;`|\r\n|`-xf-max-length`|`InputView`|_int_ \\| `initial`|`-xf-max-length: 16;`|\r\n|`-xf-keyboard`|`InputView`| `plain` \\| `chat` \\| `email` \\| `numeric` \\| `telephone` \\| `text` \\| `url` \\| `initial`|`-xf-max-length: 16;`|"},{"Id":"8198933796","Type":"IssuesEvent","CreatedAt":"2018-08-31T18:12:18","Actor":"deakjahn","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3691","RelatedDescription":"Opened issue \"UWP: Open up NavigationPageRenderer\" (#3691) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nPlease, open up `Xamarin.Forms.Platform.UWP.NavigationPageRenderer` for inheriting. This is just one more case when you, completely needlessly, leave important functions (OnElementChanged, OnElementPropertyChanged, etc) private or non-virtual. There is no way to override the page, for instance, to create custom transitions. The Android and iOS counterparts are OK, so there is no feature parity at all."},{"Id":"8198695798","Type":"PullRequestEvent","CreatedAt":"2018-08-31T17:20:31","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3402","RelatedDescription":"Merged pull request \"[Android,iOS,UWP] Allow Entry CursorPosition/SelectionLength to be set in ctor\" (#3402) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n#2539 added the ability to set `CursorPosition` and `SelectionLength` on `Entry`. It was set up to allow these properties to be set during construction, but that was thwarted by the initial `Text` triggering a `SelectionChanged`, which reverted the `CursorPosition` and `SelectionLength` to default values. This change established a one-time-use bool that will skip the initial `SelectionChanged` work.\r\n\r\nAlso resolved issue where clearing the set values of CursorPosition/SelectionLength did nothing.\r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #3343 \r\n- fixes #3633\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Testing procedure ###\r\n\r\n1. Open test case 3343.\r\n2. First Entry should have selection. CursorPositon: 4 SelectionLength: 7.\r\n3. Second Entry should have no selection. CursorPostion: 0 SelectionLength: 0.\r\n4. Tap in second Entry. Make selection. CursorPosition and SelectionLength should update accordingly. Note: iOS will snap to end on first click, tap and hold to move the cursor.\r\n5. Tap quickly between the two entries. Should not crash.\r\n6. Tap Click Me button. \r\n7. Second Entry should have selection. CursorPosition: 4. SelectionLength: 8.\r\n8. Tap Click Me After.\r\n9. Second Entry should have selection. CursorPosition: 2 SelectionLength 8.\r\n10. Tap Click Me Last. Watch the second entry.\r\n11. Second Entry selection should disappear. CursorPosition: 2 SelectionLength 0. \r\n12. Second Entry CursorPostion should snap to end. CursorPostion: 12 SelectionLength 0.\r\n13. Clear the text in the second Entry. CursorPosition: 0 SelectionLength: 0\r\n14. Tap Click Me. Should not crash. CursorPosition: 0 SelectionLength: 0\r\n15. Type three characters in the second Entry. CursorPosition: 3 SelectionLength: 0\r\n16. Tap Click Me. Should not crash. CursorPosition: 3 SelectionLength: 0\r\n17. Tap Click Me After. Should not crash. CursorPosition: 2 SelectionLength: 0\r\n18. Repeat 15-17 with varying text lengths.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8199806830","Type":"IssuesEvent","CreatedAt":"2018-08-31T21:51:16","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4740","RelatedDescription":"Opened issue \"Multiple LineGlyph bindings are NSLayoutManager are missing due to NSRangePointer usage\" (#4740) at xamarin/xamarin-macios","RelatedBody":"I was unable to port Apple's CircleView sample without an ugly manual binding:\r\n\r\n```\r\n\tpublic static class LayoutManagerExtensions\r\n\t{\r\n\t\tstatic readonly IntPtr selLineFragmentRectForGlyphAtIndex_EffectiveRange_Handle = ObjCRuntime.Selector.GetHandle (\"lineFragmentRectForGlyphAtIndex:effectiveRange:\");\r\n\r\n\t\t[DllImport (\"/usr/lib/libobjc.dylib\", EntryPoint = \"objc_msgSend_stret\")]\r\n\t\tpublic extern static void CGRect_objc_msgSend_stret_nuint_IntPtr (out CGRect retval, IntPtr receiver, IntPtr selector, nuint arg1, IntPtr arg2);\r\n\r\n\t\tpublic static CGRect LineFragmentRectForGlyphAtIndex (this NSLayoutManager manager, nuint glyphIndex, IntPtr effectiveGlyphRange)\r\n\t\t{\r\n\t\t\tNSApplication.EnsureUIThread ();\r\n\t\t\tCGRect_objc_msgSend_stret_nuint_IntPtr (out CGRect ret, manager.Handle, selLineFragmentRectForGlyphAtIndex_EffectiveRange_Handle, glyphIndex, effectiveGlyphRange);\r\n\t\t\treturn ret;\r\n\t\t}\r\n\t}\r\n```\r\n\r\nas we did not bind a number of glyph APIs that use NSRangePointer. The Swift sample passes null, so could we bind them for now with IntPtr.Zero?"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":26,"RawContent":null},{"Id":"1032375788375498753","CreatedAt":"2018-08-22T21:15:43+00:00","UserScreenname":"xamarinhq","Text":"Getting Started with Android Pie. Now you can download the support for #AndroidPie inside https://t.co/7TMjXUsU4u 9… https://t.co/sNrOIuI741","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":40,"RawContent":null},{"Id":"1031653104394096640","CreatedAt":"2018-08-20T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"Hey, Xamarin developers. It's time to explore and learn about the latest and greatest iOS 12 ARKit Capabilities w/… https://t.co/6x3vq5IuEb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":120,"FavoriteCount":78,"RawContent":null},{"Id":"1029840138099220487","CreatedAt":"2018-08-15T21:19:57+00:00","UserScreenname":"xamarinhq","Text":"Attend A #dotNETConf Event Near You - https://t.co/VrHYwnCS69\n\nIt's a FREE, 3-day virtual dev event co-organized by… https://t.co/tqMWcB8mJz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":34,"RawContent":null},{"Id":"1026898128509825024","CreatedAt":"2018-08-07T18:29:27+00:00","UserScreenname":"xamarinhq","Text":"- Authentication   - Encryption   - Integrity\n3 important requirements to securing network communications &amp; absolut… https://t.co/hDPkHLZsLA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":94,"FavoriteCount":50,"RawContent":null},{"Id":"1025442837813518336","CreatedAt":"2018-08-03T18:06:38+00:00","UserScreenname":"xamarinhq","Text":"Want to use a single code base for multiple platforms and devices? Of course you do. ...just posted to our Xamarin… https://t.co/qJBV4vvEir","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":176,"FavoriteCount":86,"RawContent":null},{"Id":"1024752638599028736","CreatedAt":"2018-08-01T20:24:02+00:00","UserScreenname":"xamarinhq","Text":"This year’s #dotNETConf is coming 9/12-14. Live sessions w/ speakers from the community &amp; it's your chance to learn… https://t.co/Nujb04dGd4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":47,"RawContent":null},{"Id":"1024013376295452672","CreatedAt":"2018-07-30T19:26:28+00:00","UserScreenname":"xamarinhq","Text":"Here's everything you need to know to integrate automated visual UI tests into a dev toolchain that includes an… https://t.co/12Ihjj4bSN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":121,"FavoriteCount":58,"RawContent":null},{"Id":"1022882059763830784","CreatedAt":"2018-07-27T16:31:01+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/RGpgfHMoPZ -- Announcing Xamarin .Android support for Android 9.0 (P) now available for both #VS2017 &amp;… https://t.co/9clAy4LHZp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":54,"RawContent":null},{"Id":"1022866229143461888","CreatedAt":"2018-07-27T15:28:07+00:00","UserScreenname":"xamarinhq","Text":"Previewing files from inside your Xamarin .iOS app is a great way to enhance user experience. ...and adding this fe… https://t.co/tF7v5at9xo","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null},{"Id":"1019670557011243008","CreatedAt":"2018-07-18T19:49:40+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 3.1 delivers the latest in quality improvements. We're excited to introduce Xamarin.Forms 3.1, now wi… https://t.co/qW6S2P7Hi0","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":262,"FavoriteCount":163,"RawContent":null},{"Id":"1016758939877117952","CreatedAt":"2018-07-10T18:59:56+00:00","UserScreenname":"xamarinhq","Text":"Understanding your app, it's users, &amp; their interactions helps you build a 5-star app. Application Insights w/ AppC… https://t.co/Smw5tVHZ1X","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1014949294737186816","CreatedAt":"2018-07-05T19:09:03+00:00","UserScreenname":"xamarinhq","Text":"Cool intros to new goodies in &lt;10 minutes! Explore some of the “Snack Pack” episodes that @JamesMontemagno bundled… https://t.co/80gmo35fb6","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":89,"FavoriteCount":43,"RawContent":null},{"Id":"1014903254034141190","CreatedAt":"2018-07-05T16:06:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/3RaJk3O0xb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":34,"RawContent":null},{"Id":"1014521211970379776","CreatedAt":"2018-07-04T14:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":34,"RawContent":null},{"Id":"1014159326645313537","CreatedAt":"2018-07-03T14:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":25,"RawContent":null}]}},"RunOn":"2018-09-02T05:30:56.7737492Z","RunDurationInMilliseconds":4537}