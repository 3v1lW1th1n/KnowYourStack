{"Data":{"Vue":{"Events":[],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"6876725994","Type":"IssuesEvent","CreatedAt":"2017-11-20T03:00:57","Actor":"vue-issue-bot","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1896","RelatedDescription":"Closed issue \"ScrollBehavior cannot record internal scroll bars for elements?\" (#1896) at vuejs/vue-router","RelatedBody":"ScrollBehavior cannot record internal scroll bars for elements?"},{"Id":"6876725980","Type":"IssuesEvent","CreatedAt":"2017-11-20T03:00:56","Actor":"DawnL6","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1896","RelatedDescription":"Opened issue \"ScrollBehavior cannot record internal scroll bars for elements?\" (#1896) at vuejs/vue-router","RelatedBody":"ScrollBehavior cannot record internal scroll bars for elements?"},{"Id":"6876281140","Type":"IssuesEvent","CreatedAt":"2017-11-19T22:50:22","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1895","RelatedDescription":"Reopened issue \"API for handling events from routed components\" (#1895) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nThe [documentation](https://router.vuejs.org/en/essentials/passing-props.html) already recommends avoiding using `$route` in routed components because it couples the component to the route.\r\n\r\nThere is API to avoid the coupling when passing params in from the route, but there is no API for handling events emitted by the routed component.\r\n\r\nMy use case is I'd like to use a component in one place where an interaction should cause a route change, and in another place where the same interaction needs to be handled without changing the route.\r\n\r\n### What does the proposed API look like?\r\nI think I'd like some way to add a handler for the component events in the route definition, similar to how you can pass a `props` argument, maybe there could be an `events` property?\r\n\r\nI was thinking something like this:\r\n\r\n```javascript\r\nconst router = new VueRouter({\r\n  routes: [\r\n    {\r\n      path: '/promotion/from-newsletter',\r\n      component: Promotion,\r\n      props: { newsletterPopup: false },\r\n      events: {\r\n        promotionAccepted: function() {\r\n          router.push('/promotion/accepted');\r\n        }\r\n    }\r\n  ]\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6876076555","Type":"IssuesEvent","CreatedAt":"2017-11-19T20:43:58","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1895","RelatedDescription":"Closed issue \"API for handling events from routed components\" (#1895) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nThe [documentation](https://router.vuejs.org/en/essentials/passing-props.html) already recommends avoiding using `$route` in routed components because it couples the component to the route.\r\n\r\nThere is API to avoid the coupling when passing params in from the route, but there is no API for handling events emitted by the routed component.\r\n\r\nMy use case is I'd like to use a component in one place where an interaction should cause a route change, and in another place where the same interaction needs to be handled without changing the route.\r\n\r\n### What does the proposed API look like?\r\nI think I'd like some way to add a handler for the component events in the route definition, similar to how you can pass a `props` argument, maybe there could be an `events` property?\r\n\r\nI was thinking something like this:\r\n\r\n```javascript\r\nconst router = new VueRouter({\r\n  routes: [\r\n    {\r\n      path: '/promotion/from-newsletter',\r\n      component: Promotion,\r\n      props: { newsletterPopup: false },\r\n      events: {\r\n        promotionAccepted: function() {\r\n          router.push('/promotion/accepted');\r\n        }\r\n    }\r\n  ]\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6875791798","Type":"IssuesEvent","CreatedAt":"2017-11-19T17:42:51","Actor":"chriscasola","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1895","RelatedDescription":"Opened issue \"API for handling events from routed components\" (#1895) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nThe [documentation](https://router.vuejs.org/en/essentials/passing-props.html) already recommends avoiding using `$route` in routed components because it couples the component to the route.\r\n\r\nThere is API to avoid the coupling when passing params in from the route, but there is no API for handling events emitted by the routed component.\r\n\r\nMy use case is I'd like to use a component in one place where an interaction should cause a route change, and in another place where the same interaction needs to be handled without changing the route.\r\n\r\n### What does the proposed API look like?\r\nI think I'd like some way to add a handler for the component events in the route definition, similar to how you can pass a `props` argument, maybe there could be an `events` property?\r\n\r\nI was thinking something like this:\r\n\r\n```javascript\r\nconst router = new VueRouter({\r\n  routes: [\r\n    {\r\n      path: '/promotion/from-newsletter',\r\n      component: Promotion,\r\n      props: { newsletterPopup: false },\r\n      events: {\r\n        promotionAccepted: function() {\r\n          router.push('/promotion/accepted');\r\n        }\r\n    }\r\n  ]\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6875540419","Type":"PullRequestEvent","CreatedAt":"2017-11-19T15:05:59","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/vuejs/vue-router/pull/1894","RelatedDescription":"Merged pull request \"Typo fixes\" (#1894) at vuejs/vue-router","RelatedBody":"There are a few wrong variables."},{"Id":"6875513822","Type":"PullRequestEvent","CreatedAt":"2017-11-19T14:49:24","Actor":"miyanokomiya","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/pull/1894","RelatedDescription":"Opened pull request \"Typo fixes\" (#1894) at vuejs/vue-router","RelatedBody":"There are a few wrong variables."}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"6876890300","Type":"IssuesEvent","CreatedAt":"2017-11-20T04:17:21","Actor":"vue-issue-bot","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/issues/1062","RelatedDescription":"Closed issue \"Cannot read property 'state' of undefined\" (#1062) at vuejs/vuex","RelatedBody":"here is my store\r\n```\r\nimport Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport createPersist from 'vuex-localstorage'\r\n\r\nVue.use(Vuex)\r\nconst createStore = () => {\r\n  return new Vuex.Store({\r\n    state: {\r\n      userType: '',\r\n      authToken: '',\r\n      lastPage_tried: '',\r\n      lastPage: '',\r\n      profile: {\r\n        pic: '',\r\n        firstname: '',\r\n        middlename: '',\r\n        lastname: ''\r\n      }\r\n    },\r\n    mutations: {\r\n      SET_USER (state, data) {\r\n        state.authToken = data.token\r\n        state.userType = data.userType\r\n        state.profile.pic = data.profile_pic\r\n        state.profile.firstname = data.firstname\r\n        state.profile.middlename = data.middlename\r\n        state.profile.lastname = data.lastname\r\n        state.profile.username = data.username\r\n      },\r\n      CLEAR_USER (state) {\r\n        state.authToken = ''\"\r\n        state.userType = ''\"\r\n        state.profile = {}\r\n      },\r\n      CHANGE_LAYOUT (state, layout) {\r\n        state.preferedLayout = layout\r\n      }\r\n    },\r\n    plugins: [createPersist({\r\n      namespace: 'mDr',\r\n      expires: 7 * 24 * 60 * 60 * 1e3\r\n    })]\r\n  })\r\n}\r\n\r\nexport default createStore\r\n```\r\n\r\nand in my main.js, I have this\r\n```\r\n// The Vue build version to load with the `import` command\r\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\r\nimport Vue from 'vue'\r\nimport App from './App'\r\nimport router from './router'\r\nimport store from './store'\r\nimport moment from 'moment'\r\n\r\nimport mixins from '@/plugins/mixins'\r\nimport * as VueGoogleMaps from 'vue2-google-maps'\r\nimport Notifications from 'vue-notification'\r\nVue.use(Notifications)\r\nVue.use(VueGoogleMaps, {\r\n  load: {\r\n    key: 'AIzaSyA2eiWNJkpYkQ-Nu-WTG9YQL2XZMkcQL-o',\r\n    libraries: 'places' \r\n  }\r\n})\r\n\r\nVue.prototype.$eventBus = new Vue()\r\nVue.mixin(mixins)\r\nVue.config.productionTip = true\r\n\r\nnew Vue({\r\n  el: '#app',\r\n  router,\r\n  store,\r\n  moment,\r\n  template: '<App/>',\r\n  components: { App }\r\n})\r\n```\r\n\r\nYet I get undefined on store values"},{"Id":"6876890277","Type":"IssuesEvent","CreatedAt":"2017-11-20T04:17:20","Actor":"jalasem","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/issues/1062","RelatedDescription":"Opened issue \"Cannot read property 'state' of undefined\" (#1062) at vuejs/vuex","RelatedBody":"here is my store\r\n```\r\nimport Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport createPersist from 'vuex-localstorage'\r\n\r\nVue.use(Vuex)\r\nconst createStore = () => {\r\n  return new Vuex.Store({\r\n    state: {\r\n      userType: '',\r\n      authToken: '',\r\n      lastPage_tried: '',\r\n      lastPage: '',\r\n      profile: {\r\n        pic: '',\r\n        firstname: '',\r\n        middlename: '',\r\n        lastname: ''\r\n      }\r\n    },\r\n    mutations: {\r\n      SET_USER (state, data) {\r\n        state.authToken = data.token\r\n        state.userType = data.userType\r\n        state.profile.pic = data.profile_pic\r\n        state.profile.firstname = data.firstname\r\n        state.profile.middlename = data.middlename\r\n        state.profile.lastname = data.lastname\r\n        state.profile.username = data.username\r\n      },\r\n      CLEAR_USER (state) {\r\n        state.authToken = ''\"\r\n        state.userType = ''\"\r\n        state.profile = {}\r\n      },\r\n      CHANGE_LAYOUT (state, layout) {\r\n        state.preferedLayout = layout\r\n      }\r\n    },\r\n    plugins: [createPersist({\r\n      namespace: 'mDr',\r\n      expires: 7 * 24 * 60 * 60 * 1e3\r\n    })]\r\n  })\r\n}\r\n\r\nexport default createStore\r\n```\r\n\r\nand in my main.js, I have this\r\n```\r\n// The Vue build version to load with the `import` command\r\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\r\nimport Vue from 'vue'\r\nimport App from './App'\r\nimport router from './router'\r\nimport store from './store'\r\nimport moment from 'moment'\r\n\r\nimport mixins from '@/plugins/mixins'\r\nimport * as VueGoogleMaps from 'vue2-google-maps'\r\nimport Notifications from 'vue-notification'\r\nVue.use(Notifications)\r\nVue.use(VueGoogleMaps, {\r\n  load: {\r\n    key: 'AIzaSyA2eiWNJkpYkQ-Nu-WTG9YQL2XZMkcQL-o',\r\n    libraries: 'places' \r\n  }\r\n})\r\n\r\nVue.prototype.$eventBus = new Vue()\r\nVue.mixin(mixins)\r\nVue.config.productionTip = true\r\n\r\nnew Vue({\r\n  el: '#app',\r\n  router,\r\n  store,\r\n  moment,\r\n  template: '<App/>',\r\n  components: { App }\r\n})\r\n```\r\n\r\nYet I get undefined on store values"}],"ResultType":"GitHubEvent"}},"RunOn":"2017-11-20T05:30:34.8541822Z","RunDurationInMilliseconds":2007}