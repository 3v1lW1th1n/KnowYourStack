{"Data":{"Blog":{"FeedItems":[{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7196610795","Type":"PullRequestEvent","CreatedAt":"2018-02-05T04:17:04","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15435","RelatedDescription":"Merged pull request \"Use stackalloc in string.Split\" (#15435) at dotnet/coreclr","RelatedBody":"Adds usage of Span and stackalloc for strings that are not large. Allows to avoid allocations of int arrays.\r\n\r\nBenchmarks:\r\n```\r\n|                    Method | Mean after | Mean before |  Mean diff |  Allocated after | Allocated before | Allocated diff |\r\n|-------------------------- |-----------:|------------:|-----------:|-----------------:|-----------------:|---------------:|\r\n|         SplitCharLength20 |   201.6 us |  213.80 us  |    5.71%   |     210.94 KB    |     312.50 KB    |     32.50%     |\r\n|        SplitCharLength200 | 1,199.6 us | 1194.10 us  |   -0.46%   |    1546.88 KB    |    2351.56 KB    |     34.21%     |\r\n|        SplitCharLength600 | 3,367.1 us | 3276.00 us  |   -2.78%   |    6882.81 KB    |    6882.81 KB    |       0%       |\r\n|       SplitStringLength20 |   159.4 us |  181.80 us  |   12.32%   |     132.81 KB    |     234.38 KB    |     43.34%     |\r\n|      SplitStringLength200 |   767.9 us |  844.40 us  |    9.06%   |     835.94 KB    |    1640.63 KB    |     49.05%     |\r\n|      SplitStringLength600 | 2,160.8 us | 2253.70 us  |    4.12%   |    4765.63 KB    |    4765.63 KB    |       0%       |\r\n|  SplitStringArrayLength20 |   308.5 us |  347.90 us  |   11.33%   |     210.94 KB    |     414.06 KB    |     49.06%     |\r\n| SplitStringArrayLength200 | 1,838.7 us | 1848.60 us  |    0.54%   |    1195.31 KB    |    2804.69 KB    |     57.38%     |\r\n| SplitStringArrayLength600 | 5,171.7 us | 5155.00 us  |   -0.32%   |    8117.19 KB    |    8117.19 KB    |       0%       |\r\n```\r\n\r\nBenchmark code:\r\nhttps://gist.github.com/cod7alex/f123c3e662d21c3327399aa71d338485\r\n\r\nCloses https://github.com/dotnet/coreclr/issues/6136\r\n\r\n@danmosemsft @stephentoub "},{"Id":"7196610787","Type":"IssuesEvent","CreatedAt":"2018-02-05T04:17:04","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/6136","RelatedDescription":"Closed issue \"Consider using stackalloc for string.Split\" (#6136) at dotnet/coreclr","RelatedBody":"Right now, `string.Split` allocates a new int array for both the [`char`](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/String.cs#L1060) and [`string`](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/String.cs#L1116-L1117) versions. We might want to consider using `stackalloc` here instead for strings of lengths under a certain threshold.\n\nAlternatively, we could introduce some type of `ArrayPool`-like API to mscorlib and use that, or just forego allocating anything altogether and simply count the length needed for the resulting array on our first pass.\n"},{"Id":"7196606321","Type":"PullRequestEvent","CreatedAt":"2018-02-05T04:14:49","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16206","RelatedDescription":"Opened pull request \"WIP Temp logging for issue 16203\" (#16206) at dotnet/coreclr","RelatedBody":""},{"Id":"7196246692","Type":"PullRequestEvent","CreatedAt":"2018-02-05T01:24:39","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16205","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26205-01 (master)\" (#16205) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7196085996","Type":"IssuesEvent","CreatedAt":"2018-02-04T23:36:57","Actor":"IlyaGrebnov","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16204","RelatedDescription":"Opened issue \"Unnecssary expensive UnsafeQueueCustomWorkItem call from TaskCompletionSource.TrySetCanceled after Task.WhenAny\" (#16204) at dotnet/coreclr","RelatedBody":"We using TaskCompletionSource to signal timeouts and cancellations after period of time from dedicated dispatcher / timer thread. TaskCompletionSource created with RunContinuationsAsynchronously to prevent hijacking this dedicated thread by continuations.  During timeouts and cancellations pattern works as expected, but if timeout is not necessary (underlying operation completed on time) we attempt to cleanup TaskCompletionSource calling TrySetCanceled (part of IDisposable pattern along some other things). And this TrySetCanceled show some expense call stack due to UnsafeQueueCustomWorkItem attempting to schedule singleTaskCompletionAction registered for Task.WhenAny promise, but this promise already completed and scheduling is not necessary.\r\n\r\nSo the ask is would it be possible to optimize for this scenario? The trick is that ITaskCompletionAction only implements Invoke(Task) method and we would need something to indicate that invocation and scheduling callback is not necessary.\r\n\r\nHere is minimal repro program:\r\n\r\n        public static async Task Main(string[] args)\r\n        {\r\n            var tcs = new TaskCompletionSource<bool>(TaskCreationOptions.RunContinuationsAsynchronously);\r\n            await Task.WhenAny(Task.Delay(10), tcs.Task);\r\n\r\n            // Triggers UnsafeQueueCustomWorkItem for already completed promise.\r\n            tcs.TrySetCanceled();\r\n        }\r\n"},{"Id":"7196061774","Type":"IssuesEvent","CreatedAt":"2018-02-04T23:20:12","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16203","RelatedDescription":"Opened issue \"Assertion Failed [DateTimeFormatInfo.GetAbbreviatedMonthNames] Expected 12 or 13 month names in a year\" (#16203) at dotnet/coreclr","RelatedBody":""},{"Id":"7196018520","Type":"IssuesEvent","CreatedAt":"2018-02-04T22:52:49","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16202","RelatedDescription":"Opened issue \"[Regression] [x64 Windows] Test failure: System.Collections.Immutable.Tests.ImmutableListTest / IndexOf & LastIndexOf\" (#16202) at dotnet/coreclr","RelatedBody":"_From @karelz on February 4, 2018 2:42_\n\n## Type of failures\r\n\r\nAffected OS: Win7 & Win8.1 & Win10 & Win10.Core & Win10.Nano - only x64 (x86 runs are fine)\r\n\r\n```\r\nAssert.Equal() Failure\r\nExpected: 2\r\nActual:   -1\r\n\r\nat System.Collections.Immutable.Tests.IndexOfTests.IndexOfTest[TCollection](Func`2 factory, Func`3 indexOfItem, Func`4 indexOfItemIndex, Func`5 indexOfItemIndexCount, Func`6 indexOfItemIndexCountEQ) in E:\\A\\_work\\484\\s\\corefx\\src\\System.Collections.Immutable\\tests\\IndexOfTests.cs:line 45\r\nat System.Collections.Immutable.Tests.ImmutableListTest.IndexOf() in E:\\A\\_work\\484\\s\\corefx\\src\\System.Collections.Immutable\\tests\\ImmutableListTest.cs:line 505\r\n```\r\n\r\n## History of failures\r\n\r\nDay | Build | Details\r\n-- | -- | --\r\n2/3 | 20180203.03 | 10x failures - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180203.03/workItem/System.Collections.Immutable.Tests)\r\n2/4 | 20180204.01 | 10x failures - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180204.01/workItem/System.Collections.Immutable.Tests)\r\n\n\n_Copied from original issue: dotnet/corefx#26821_"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7196617378","Type":"IssuesEvent","CreatedAt":"2018-02-05T04:20:20","Actor":"rmcc13","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8532","RelatedDescription":"Opened issue \"NuGet tag convention for dotnet cli tools\" (#8532) at dotnet/cli","RelatedBody":"Hi, first I wanted to say nice job on the extensibility model for the dotnet cli. Being able to install and use small focused tools for project management is awesome. I apologize if this is not the right place for this, but I would like to open up a discussion on defining a standard NuGet tag for dotnet cli tools.\r\n\r\nIn the JavaScript world, it is common for tools to use a common tag that the community can use when publishing plugins to npm. For example, [Karma](https://karma-runner.github.io/2.0/index.html) plugins use the tag [karma-plugin](https://www.npmjs.com/browse/keyword/karma-plugin) and gulp plugins use the tag [gulp-plugin](https://www.npmjs.com/browse/keyword/gulp-plugin). This makes it easy for people to find existing tools to their problems.\r\n\r\nThere is a [repository that lists many dotnet cli tools](https://github.com/natemcmaster/dotnet-tools), but I imagine it will eventually become out of date because that type of work can become tedious. When looking at the NuGet pages for many of those tools, their isn't much commonality in the tags that were used. [NuGet supports browsing by tag](https://www.nuget.org/packages?q=Tags%3A%22dotnet%22), so I think this would be very useful.\r\n\r\nIf the dotnet team and the community can come to an agreement on a tag to use for tools, I think it would be nice to have it mentioned in the [.NET Core CLI tools extensibility model documentation](https://docs.microsoft.com/en-us/dotnet/core/tools/extensibility) so others that are looking to build a new tool can see what tag(s) to use for visibility. If this is something others are interested, then I would like to suggest the tag `dotnet-tool`, but I would like to hear what others think.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7196092927","Type":"IssuesEvent","CreatedAt":"2018-02-04T23:41:58","Actor":"AmadeusW","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8531","RelatedDescription":"Opened issue \".net core SDK 2.1.4 generates projects that can't build\" (#8531) at dotnet/cli","RelatedBody":"I've been unsuccessfully trying to create a new project. The newly created project fails to restore and build. This happens both through VS 15.5.6 and through the command line. For simplicity, let's focus on the command line:\r\n\r\nBTW, I repaired, uninstalled and installed both `dotnet-sdk-2.1.4-win-x64.exe` and `dotnet-sdk-2.1.4-win-gs-x64.exe`, all to no help.\r\n\r\nIt looks like the generated .csproj has incorrect versions:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <RuntimeFrameworkVersion>2.1.0-preview1-25929-02</RuntimeFrameworkVersion>\r\n    <NETStandardImplicitPackageVersion>2.1.0-preview1-25929-02</NETStandardImplicitPackageVersion>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n## Steps to reproduce\r\n`dotnet new console`\r\n\r\n## Expected  behavior\r\nNew project is created, restored and ready to build\r\n\r\n## Actual behavior\r\n```\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on C:\\src\\sterling\\sterling.csproj...\r\n  Restoring packages for C:\\src\\sterling\\sterling.csproj...\r\nC:\\src\\sterling\\sterling.csproj : error NU1102: Unable to find package Microsoft.NETCore.App with version (>= 2.1.0-preview1-25929-02)\r\nC:\\src\\sterling\\sterling.csproj : error NU1102:   - Found 23 version(s) in nuget.org [ Nearest version: 2.0.5 ]\r\nC:\\src\\sterling\\sterling.csproj : error NU1102:   - Found 0 version(s) in Microsoft Visual Studio Offline Packages\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.2.0-preview1-007622)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007622\r\n Commit SHA-1 hash:  045e2b7bf7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.0-preview1-007622\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-25929-02\r\n  Build    : 328fbf0657c4e3bab243460660583c429eaae001\r\n```\r\n\r\n## Workaround\r\n\r\nThe project restores, builds and runs if I follow the warning and set both `RuntimeFrameworkVersion` and `NETStandardImplicitPackageVersion` to `2.0.5`. \r\n\r\n"},{"Id":"7195578510","Type":"IssuesEvent","CreatedAt":"2018-02-04T18:33:23","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8530","RelatedDescription":"Closed issue \"The MSBUILD_EXE_PATH environment variable is set for CLI Tools\" (#8530) at dotnet/cli","RelatedBody":"I noticed a small difference when running dotnet-tools via `dotnet <toolname>` (referenced via `DotNetCliToolReference`).\r\n\r\nWhen you run your tool as SCD or FDD the environment variable `MSBUILD_EXE_PATH` is not set while for `dotnet <tool>` it is set to something (`'MSBUILD_EXE_PATH' -> 'C:\\Program Files\\dotnet\\sdk\\2.1.4\\MSBuild.dll'` on windows for example).\r\n\r\nIf you use a dotnet-cli tool to call an external `msbuild` process this can lead to some strange errors (see https://github.com/fsharp/FAKE/issues/1776 for the issues and the analysis).\r\n\r\nSo my question now is: Is this difference by design or by mistake? Should we fix it here or add some detection into the dotnet-cli tool?\r\n\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  14.04\r\n OS Platform: Linux\r\n RID:         ubuntu.14.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.4/\r\nMicrosoft .NET Core Shared Framework Host\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\nand \r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"7195269843","Type":"IssuesEvent","CreatedAt":"2018-02-04T15:29:47","Actor":"matthid","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8530","RelatedDescription":"Opened issue \"The MSBUILD_EXE_PATH environment variable is set for CLI Tools\" (#8530) at dotnet/cli","RelatedBody":"I noticed a small difference when running dotnet-tools via `dotnet <toolname>` (referenced via `DotNetCliToolReference`).\r\n\r\nWhen you run your tool as SCD or FDD the environment variable `MSBUILD_EXE_PATH` is not set while for `dotnet <tool>` it is set to something (`'MSBUILD_EXE_PATH' -> 'C:\\Program Files\\dotnet\\sdk\\2.1.4\\MSBuild.dll'` on windows for example).\r\n\r\nIf you use a dotnet-cli tool to call an external `msbuild` process this can lead to some strange errors (see https://github.com/fsharp/FAKE/issues/1776 for the issues and the analysis).\r\n\r\nSo my question now is: Is this difference by design or by mistake? Should we fix it here or add some detection into the dotnet-cli tool?\r\n\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  14.04\r\n OS Platform: Linux\r\n RID:         ubuntu.14.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.4/\r\nMicrosoft .NET Core Shared Framework Host\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\nand \r\n\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"7194296276","Type":"IssuesEvent","CreatedAt":"2018-02-04T02:36:24","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8529","RelatedDescription":"Opened issue \"MacOS pkg installer does not include aspnetcore runtime\" (#8529) at dotnet/cli","RelatedBody":"The pkg installer for macOS doesn't install the aspnetcore runtime on my machine. However, the tar.gz for macOS contains the runtimes.\r\n\r\n## Steps to reproduce\r\nDownload https://dotnetfeed.blob.core.windows.net/orchestrated-release-2-1/20180202-02/final/assets/Sdk/2.1.300-preview1-008019/dotnet-sdk-2.1.300-preview1-008019-osx-x64.pkg\r\nInstall\r\n\r\n## Expected  behavior\r\nShould contain two aspnetcore runtimes\r\n```\r\n/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App/2.1.0-preview1-something\r\n/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All/2.1.0-preview1-something\r\n```\r\n\r\n## Actual behavior\r\nNo aspnetcore shared runtime installed.\r\n\r\nCompare to this: https://dotnetfeed.blob.core.windows.net/orchestrated-release-2-1/20180202-02/final/assets/Sdk/2.1.300-preview1-008019/dotnet-sdk-2.1.300-preview1-008019-osx-x64.tar.gz contains the right runtime.\r\n\r\ncc @livarcocc @Eilon - safe to assume this is a critical 2.1.0-preview1 scenario, eh?\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7192729963","Type":"IssuesEvent","CreatedAt":"2018-02-03T07:42:01","Actor":"AustinWise","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8528","RelatedDescription":"Opened issue \"How to update referenced package versions from CLI\" (#8528) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1) Type `dotnet help`\r\n\r\n## Expected  behavior\r\n1) Expect to see `dotnet update` or similar command to update referenced packages. Something equivalent to Visual Studio's GUI that allows upgrading packages.\r\n\r\n## Actual behavior\r\n1) After much searching, I can't find any command to update the package version.\r\n\r\n## Other thoughts\r\nCurrently there is no way that I can tell to update package versions when running on Linux, except to delete the reference and add it back. I can set the the `Version` attribute to equal \"`*`\", but that does not bind to a predictable version.\r\n\r\nIs there a way to list which packages are upgradeable that I missed?\r\n\r\nIf there is not such a command, is it desired?"},{"Id":"7192196704","Type":"IssuesEvent","CreatedAt":"2018-02-03T01:01:56","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8338","RelatedDescription":"Closed issue \"dotnet build -c throws exception instead of error message\" (#8338) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n` dotnet build -c`\r\n\r\n## Expected  behavior\r\n\r\nSome friendly error message\r\n\r\n## Actual behavior\r\n```\r\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.SZArrayHelper.get_Item[T](Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.DotNet.Cli.Telemetry.TopLevelCommandNameAndOptionToLog.AllowList(ParseResult parseResult)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n   at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.2)\r\n\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\n```\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7190412954","Type":"IssuesEvent","CreatedAt":"2018-02-02T17:09:21","Actor":"colgreen","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/640","RelatedDescription":"Opened issue \"Support for XDocument.LoadAsync()\" (#640) at dotnet/standard","RelatedBody":"XDocument.LoadAsync() is available in dotnet core 2.0 but not .NET Standard 2.0. We have encountered a few scenarios recently where this would have been useful.\r\n\r\nThe the workarounds we have are:\r\n\r\n1) Do a synchronous Load() and have a thread blocked waiting for IO.\r\n\r\n2) An asynchronous load into memory (e.g. sourceStream.CopyToAsnc(tempMemoryStream) and then do an synchronous load from the MemoryStream (which of course has no IO), however this requires allocation of large arrays, associated garbage collection, etc. It will also be a poor choice for very large XML documents.\r\n\r\n"},{"Id":"7186097286","Type":"IssuesEvent","CreatedAt":"2018-02-01T21:52:42","Actor":"reyou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/639","RelatedDescription":"Closed issue \"VS 2017 can build multi-target project but cli \"dotnet build\" fails.\" (#639) at dotnet/standard","RelatedBody":"I am following documentation at https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\nI can build project with VS 2017,  but \"dotnet build\" gives following error:\r\n\r\n> MultiTarget\\MultitargetLib.cs(1,18): error CS0234: The type or namespace name 'Http' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [C:\\SampleNetStandard\\SampleNetStandard.csproj]\r\n\r\nBuild FAILED.\r\n\r\n**To Reproduce:**\r\n\r\n1- Create a stand-alone .net standard 2.0 project with following .csproj \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2- Add `MultitargetLib.cs` file from following link: \r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\n\r\n3- In project folder make `dotnet restore`\r\n\r\n4- Make VS build. Should be building fine.\r\n\r\n5- In project folder make  `dotnet build`. This will give previous error mentioned. Cannot find reference.\r\n\r\n"},{"Id":"7185998311","Type":"IssuesEvent","CreatedAt":"2018-02-01T21:31:53","Actor":"reyou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/639","RelatedDescription":"Opened issue \"VS 2017 can build multi-target project but cli \"dotnet build\" fails.\" (#639) at dotnet/standard","RelatedBody":"I am following documentation at https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\nI can build project with VS 2017,  but \"dotnet build\" gives following error:\r\n\r\n> MultiTarget\\MultitargetLib.cs(1,18): error CS0234: The type or namespace name 'Http' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [C:\\SampleNetStandard\\SampleNetStandard.csproj]\r\n\r\nBuild FAILED.\r\n\r\n**To Reproduce:**\r\n\r\n1- Create a stand-alone .net standard 2.0 project with following .csproj \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2- Add `MultitargetLib.cs` file from following link: \r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\n\r\n3- In project folder make `dotnet restore`\r\n\r\n4- Make VS build. Should be building fine.\r\n\r\n5- In project folder make  `dotnet build`. This will give previous error mentioned. Cannot find reference.\r\n\r\n"},{"Id":"7185077325","Type":"PullRequestEvent","CreatedAt":"2018-02-01T18:18:58","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/638","RelatedDescription":"Merged pull request \"Building non-Windows builds using the CLI's MSBuild\" (#638) at dotnet/standard","RelatedBody":"cc: @weshaggard "},{"Id":"7184946192","Type":"PullRequestEvent","CreatedAt":"2018-02-01T17:51:31","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/638","RelatedDescription":"Opened pull request \"Building non-Windows builds using the CLI's MSBuild\" (#638) at dotnet/standard","RelatedBody":"cc: @weshaggard "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7196651390","Type":"IssuesEvent","CreatedAt":"2018-02-05T04:37:25","Actor":"ayende","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26846","RelatedDescription":"Opened issue \"Memory fragmentation as a result of using SslStream ?\" (#26846) at dotnet/corefx","RelatedBody":"I'm tracking high memory usage in a server application over a period of about 12 hours or so.\r\nThis is .Net Core 2.0.5 app running on Windows Server 2016.\r\n\r\nInteresting parts from the memory dump:\r\n\r\n```\r\n000001bdb64d4b50  1590529   1762729490      Free\r\nTotal 34634797 objects\r\nFragmented blocks larger than 0.5 MB:\r\n            Addr     Size      Followed by\r\n000001be1155bb58    1.7MB 000001be11711418 System.Byte[]\r\n000001be117126e8    1.5MB 000001be1189d5a0 System.Byte[]\r\n000001be118a28a0    1.2MB 000001be119d18f0 System.Byte[]\r\n// total of 118 of these\r\n```\r\n\r\nI started to look at these, and found that we have the following distribution:\r\n\r\n118 total fragmenting objects, all of them `byte[]` with the following distribution:\r\n\r\n* 96 buffers - size 3176 bytes\r\n*  16 buffers - size 72 bytes\r\n* 6 buffers - size (80, 88, 168, 8216, 16440, 65536)\r\n\r\nI dumped a few of these buffers, and they look like this:\r\n![image](https://user-images.githubusercontent.com/116915/35788059-5b4beb34-0a3b-11e8-9e82-1f30cb8093fe.png)\r\n\r\nThis looks like it is a buffer holding a certificate. \r\nAll communication with the application is done of over TLS, which means using SslStream.\r\n\r\n```\r\n00007ffeff694160       86         6880 System.Net.Security.SslStream\r\n```\r\n\r\nThe numbers don't match up exactly, but it does look like I have a lot of pinned instances like that.\r\n\r\nRuning `!gcroot` shows just a pinned handle and an async pinned handle. "},{"Id":"7196553079","Type":"IssuesEvent","CreatedAt":"2018-02-05T03:49:10","Actor":"MgSam","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26845","RelatedDescription":"Opened issue \"DataFrame Discussion\" (#26845) at dotnet/corefx","RelatedBody":"With work underway on `Tensor`, and the new perf optimizations available via `Span`, I think it's time the .NET team seriously considered adding a DataFrame type. Working with large amounts of data has become critical in many applications these days, and is the reason libraries like Pandas for Python have been so successful. It's time to bring similar capabilities to .NET, and it needs to start with the framework itself adding a DataFrame type.\r\n\r\nThere **are** DataFrame libraries out there available for .NET, but the problem is that they each have their own implementations of DataFrames, that are minimally compatible with the BCL or any of the other libraries out there. From my experience, support for many of these various libraries is also pretty weak. \r\n\r\nI think the BCL team implementing its own DataFrame is the first, most important step to improving the state of working with data in .NET. All we have right now is `DataTable`, a powerful but ancient type that is not well optimized for many scenarios and which I've variously seen .NET team members refer to as \"legacy\".\r\n\r\nI'm creating this issue to garner opinions on the topic. I don't have a specific API in mind to propose at this time, as gauging interest first is probably more important.\r\n\r\nLet's make .NET as great for data analysis as any other platform."},{"Id":"7196545425","Type":"PullRequestEvent","CreatedAt":"2018-02-05T03:45:41","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26835","RelatedDescription":"Merged pull request \"Disable Net.Http tests failing in Fedora.27\" (#26835) at dotnet/corefx","RelatedBody":"Disable tests that are failing in #26803"},{"Id":"7196463664","Type":"PullRequestEvent","CreatedAt":"2018-02-05T03:08:17","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26726","RelatedDescription":"Merged pull request \"Change the semantics of Span ToString to return the contents for T=char\" (#26726) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/26584\r\n\r\nRelated PR: https://github.com/dotnet/coreclr/pull/16143\r\n\r\nThis PR supersedes https://github.com/dotnet/corefx/pull/26663\r\n\r\nIt is blocked:\r\nAfter https://github.com/dotnet/coreclr/pull/16087 is merged and CoreFX is updated to use the new coreclr version, this PR can be merged.\r\n\r\ncc @pakrym, @jkotas, @stephentoub, @dotnet/corefxlab-contrib "},{"Id":"7196443541","Type":"IssuesEvent","CreatedAt":"2018-02-05T02:59:18","Actor":"ICE2017","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26844","RelatedDescription":"Opened issue \"Performance issues\" (#26844) at dotnet/corefx","RelatedBody":"i use system.data.sqlclient in my aps.net core project,but why the first time i request it's very slow,after request  it's faster.about few minutes later the request change slow again。  \r\n```\r\n  using (IDbConnection conn = DBFactory.GetDbConnection(serviceInfo.DBType))\r\n                {\r\n                    conn.ConnectionString = serviceInfo.ConnectionString;\r\n                    conn.Open();\r\n                    IEnumerable<dynamic> ret = await conn.QueryAsync(serviceInfo.CommandText, _paramsValue);\r\n                    var response = new { error_code = 0, error_desc = \"\", data = ret };\r\n                    return JsonConvert.SerializeObject(response);\r\n                }\r\n```  \r\nfirst request 4479ms second request 269ms  \r\ni use Dapper,but when i remove it,the test result is same."},{"Id":"7196372366","Type":"IssuesEvent","CreatedAt":"2018-02-05T02:26:51","Actor":"xljiulang","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26843","RelatedDescription":"Opened issue \"Low performance when set GZip|Deflate to HttpClientHandler.AutomaticDecompression at Win7 x64\" (#26843) at dotnet/corefx","RelatedBody":"when run this  code at win7x64 core20，it will take 11s but 4s only at win10 x64 core20，if without decompression，they are both 4s at core20 or .net framework.\r\n```c#\r\nstatic async void RunIUserApi(int loop = 1000)\r\n{\r\n    var watch = new Stopwatch();\r\n    watch.Start();\r\n\r\n    using (var client = HttpApiClient.Create<IUserApi>())\r\n    {\r\n        var decompression = DecompressionMethods.Deflate | DecompressionMethods.GZip;\r\n        client.ApiConfig.HttpClient.Handler.AutomaticDecompression = decompression;\r\n\r\n        for (var i = 0; i < loop; i++)\r\n        {\r\n            await Program.RunApisAsync(client);\r\n        }\r\n    }\r\n\r\n    watch.Stop();\r\n    Console.WriteLine($\"总共耗时：{watch.Elapsed}\");\r\n}\r\n```"},{"Id":"7196246617","Type":"PullRequestEvent","CreatedAt":"2018-02-05T01:24:37","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26842","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26205-01 (master)\" (#26842) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7196586011","Type":"PullRequestEvent","CreatedAt":"2018-02-05T04:04:39","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24629","RelatedDescription":"Merged pull request \"Adding a test\" (#24629) at dotnet/roslyn","RelatedBody":"by @sharwell's suggestion for #24628\r\n\r\nCloses #24628"},{"Id":"7196586004","Type":"IssuesEvent","CreatedAt":"2018-02-05T04:04:39","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24628","RelatedDescription":"Closed issue \"C# Analyzer gives wrong fix solution\" (#24628) at dotnet/roslyn","RelatedBody":"My code looks like:\r\n\r\n```csharp\r\nif (arg == null) throw new ArgumentNullException();\r\nvar key = MakeKey(arg);\r\ndict[key] = arg;\r\n```\r\n\r\nThe analyzer suggests using throw expressions:\r\n\r\n```csharp\r\nvar key = MakeKey(arg);\r\ndict[key] = arg ?? throw new ArgumentNullException();\r\n```\r\n\r\nBut in fact the two are not identical because `MakeKey` method can have side effects.\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/187379/c-analyzer-gives-wrong-fix-solution.html\r\nVSTS ticketId: 556384_\r\n_These are the original issue comments:_\r\n(no comments)\r\n_These are the original issue solutions:_\r\n(no solutions)"},{"Id":"7196446946","Type":"IssuesEvent","CreatedAt":"2018-02-05T03:00:44","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24631","RelatedDescription":"Opened issue \"ReplacePropertyWithMethodsCodeRefactoringProvider encounted an error and has been disabled\" (#24631) at dotnet/roslyn","RelatedBody":"Hello,\nSince 15.5.5 I am getting ReplacePropertyWithMethodsCodeRefactoringProvider  disabled quite ofter when trying to refactor property with this error:\n\nexception:\n\n\nSystem.InvalidCastException : Det gick inte att omvandla ett objekt av typen Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax till typen Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax.\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitNamedFieldInitializer(NamedFieldInitializerSyntax node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitObjectMemberInitializer(ObjectMemberInitializerSyntax node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitObjectCreationExpression(ObjectCreationExpressionSyntax node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitEqualsValue(EqualsValueSyntax node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitVariableDeclarator(VariableDeclaratorSyntax node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitTryBlock(TryBlockSyntax node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitMethodBlock(MethodBlockSyntax node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitClassBlock(ClassBlockSyntax node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitNamespaceBlock(NamespaceBlockSyntax node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitListElement[TNode](TNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.VisitCompilationUnit(CompilationUnitSyntax node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax.Accept[TResult](VisualBasicSyntaxVisitor`1 visitor)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxRewriter.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\n   at Microsoft.CodeAnalysis.VisualBasic.Syntax.SyntaxReplacer.Replace[TNode](SyntaxNode root,IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.ReplaceCore[TNode](IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)\n   at Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode[TRoot](TRoot root,SyntaxNode oldNode,SyntaxNode newNode)\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGeneration.VisualBasicSyntaxGenerator.ReplaceNode(SyntaxNode root,SyntaxNode declaration,SyntaxNode newDeclaration)\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxGenerator generator)\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()\n   at async Microsoft.CodeAnalysis.ReplacePropertyWithMethods.ReplacePropertyWithMethodsCodeRefactoringProvider.UpdateReferencesInDocumentAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.ReplacePropertyWithMethods.ReplacePropertyWithMethodsCodeRefactoringProvider.UpdateReferencesAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.ReplacePropertyWithMethods.ReplacePropertyWithMethodsCodeRefactoringProvider.ReplacePropertyWithMethodsAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputePreviewOperationsAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.PreviewChangesSuggestedAction.CreateAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.GetPreviewChangesFlavor(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.CreateAllFlavors(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/189826/replacepropertywithmethodscoderefactoringprovider-2.html\nVSTS ticketId: 558836_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7196329241","Type":"IssuesEvent","CreatedAt":"2018-02-05T02:06:48","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24609","RelatedDescription":"Closed issue \"Quick Actions and Refactoring - Implementing Interface dumps a ton of \"NotImplementedExceptions\" after EVERY interface member\" (#24609) at dotnet/roslyn","RelatedBody":"This is pretty ridiculous. I get it, these aren't implemented, but I don't need the hassle of choosing to go through and remove every single exception or having to load the interface and copy over the member definitions. It's ESPECIALLY stupid because any getter-setter property gets two of these giant freaking exceptions for both getter and setter.\n\nIt's so bulky and stupid. I don't know who thought it'd be a good idea.\n\nGive us an option to just add them in without all the exceptions.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/175005/quick-actions-and-refactoring-implementing-interfa.html\nVSTS ticketId: 545636_\n_These are the original issue comments:_\n\nJinu Joseph [MSFT] on ‎1‎/‎7‎/‎2018, 06:51 PM (25 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7196268087","Type":"IssuesEvent","CreatedAt":"2018-02-05T01:35:43","Actor":"MelbourneDeveloper","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24630","RelatedDescription":"Opened issue \"Metadata file System.Runtime.dll could not be found\" (#24630) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n1.0.8\r\n\r\n**Steps to Reproduce**:\r\nCan't reliably reproduce\r\n\r\n**Expected Behavior**:\r\nThe assembly compiles.\r\n\r\n**Actual Behavior**:\r\nThe assembly doesn't compile, and the error message makes no sense.\r\n\r\nWe use Roslyn for compiling code inside our app. We've been using it for about a year or so and have had no issues. But, recently we've been getting this error when we try to compile. I can't recreate the problem locally. It works fine on my dev computer, but the problem is occurring on two different servers where we have the app deployed.\r\n\r\n> Compiler Error Number: CS0006\r\n> Error Text: Metadata file &apos;C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\assembly\\dl3\\8GTGDQKQ.4QR\\V42JN801.7NM\\36a4366e\\f1f27652_1972d301\\System.Runtime.dll&apos; could not be found\r\n\r\nHere is a list of referenced DLLs. Note that System.Runtime.dll is not one of them:\r\n\r\n> C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Xml\\v4.0_4.0.0.0__b77a5c561934e089\\System.Xml.dll\r\n> C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Runtime.Serialization\\v4.0_4.0.0.0__b77a5c561934e089\\System.Runtime.Serialization.dll\r\n> C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System\\v4.0_4.0.0.0__b77a5c561934e089\\System.dll\r\n> C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.ServiceModel\\v4.0_4.0.0.0__b77a5c561934e089\\System.ServiceModel.dll\r\n> C:\\Windows\\Microsoft.Net\\assembly\\GAC_32\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll\r\n> C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Core\\v4.0_4.0.0.0__b77a5c561934e089\\System.Core.dll\r\n> C:\\Windows\\Microsoft.Net\\assembly\\GAC_32\\System.Web\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Web.dll\r\n> C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\Microsoft.CSharp\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\Microsoft.CSharp.dll\r\n> C:\\inetpub\\wwwroot\\Portal\\AMS\\Adapt.Model.Common.dll\r\n\r\nIf I add a reference to the version System.Runtime.dll that is packaged with the app (in the bin folder of the app), I get the same error message.\r\n\r\nWhy is the compiler looking for the DLL at C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\assembly\\dl3\\8GTGDQKQ.4QR\\V42JN801.7NM\\36a4366e\\f1f27652_1972d301\\System.Runtime.dll? I never told it to look there. Why won't the compiler accept the reference to System.Runtime.dll that I am giving it?\r\n"},{"Id":"7196081417","Type":"IssuesEvent","CreatedAt":"2018-02-04T23:33:42","Actor":"taori","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24537","RelatedDescription":"Closed issue \"Analyzer silently crashes when calling AnalyzeDataFlow on the semantic model\" (#24537) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS 15.5.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. call AnalyzeDataFlow on semantic model with a MethodDeclarationSyntax as parameter\r\n2. check analyzer unit test diagnostic for exception\r\n\r\n**Expected Behavior**:\r\n\r\nanalyzer should point out the exception (because i should pass the body property of the MethodDeclarationSyntax  instead of MethodDeclarationSyntax  itself)\r\n\r\n**Actual Behavior**:\r\n\r\nAnalyzer silently crashes and only tells me that there was no diagnostic.\r\n\r\n**Note**:\r\nI am not sure whether this is actually a bug in roslyn or if the implementation of DiagnosticVerifier should be modified to point the developer into the direction of the exception instead of silently failing."},{"Id":"7196070956","Type":"PullRequestEvent","CreatedAt":"2018-02-04T23:26:24","Actor":"Neme12","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24629","RelatedDescription":"Opened pull request \"Adding a test\" (#24629) at dotnet/roslyn","RelatedBody":"by @sharwell's suggestion for #24628"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7195160355","Type":"IssuesEvent","CreatedAt":"2018-02-04T14:23:33","Actor":"Blealtan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5345","RelatedDescription":"Opened issue \"Generated WASM code for creating specific array causes infinite recursion at runtime\" (#5345) at dotnet/corert","RelatedBody":"With `new long[]{1, 2, 3}`, generated code by wasm backend will cause infinite recursion at runtime. The reported stack trace by Firefox is as below:\r\n\r\n```\r\ntoo much recursion[Learn More]\r\nHelloWasm.js:153731:1\r\n_S_P_CoreLib_Internal_Runtime_EEType__GetFieldOffset\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:153731:1\r\n_S_P_CoreLib_Internal_Runtime_EEType__get_OptionalFieldsPtr\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:151826:1\r\n_S_P_CoreLib_Internal_Runtime_EEType__get_RareFlags\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:150469:1\r\n_S_P_CoreLib_Internal_Runtime_EEType__get_IsByRefLike\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:107801:1\r\n_S_P_CoreLib_System_Runtime_RuntimeExports__RhNewObject\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:100911:1\r\n_S_P_CoreLib_System_Threading_Monitor__GetLock\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:344883:1\r\n_S_P_CoreLib_System_Threading_Monitor__Enter_0\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:191838:1\r\n_S_P_CoreLib_System_SR__InternalGetResourceString\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:321325:1\r\n_S_P_CoreLib_System_SR__GetResourceString_0\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:199831:1\r\n_S_P_CoreLib_System_SR__get_ArgumentNull_Generic\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:337049:1\r\n_S_P_CoreLib_System_ArgumentNullException___ctor_0\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:193115:1\r\n_S_P_CoreLib_System_Threading_Monitor__GetLock\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:344932:1\r\n_S_P_CoreLib_System_Threading_Monitor__Enter_0\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:191838:1\r\n_S_P_CoreLib_System_SR__InternalGetResourceString\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:321325:1\r\n_S_P_CoreLib_System_SR__GetResourceString_0\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:199831:1\r\n_S_P_CoreLib_System_SR__get_ArgumentNull_Generic\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:337049:1\r\n_S_P_CoreLib_System_ArgumentNullException___ctor_0\r\nfile:///C:/Users/Blealtan/source/repos/corert/tests/src/Simple/HelloWasm/bin/Debug/wasm/native/HelloWasm.js:193115:1\r\n_S_P_CoreLib_System_Threading_Monitor__GetLock\r\n(omitting tens to hundreds lines here)\r\n```"},{"Id":"7194246719","Type":"PullRequestEvent","CreatedAt":"2018-02-04T01:53:27","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5342","RelatedDescription":"Merged pull request \"Fixed ldind failure and properly zext unsigned types in WebAssembly\" (#5342) at dotnet/corert","RelatedBody":"@morganbr \r\nThis is to fix the ldind issue I noticed in testing for #5172, In making the test for this I noticed that we weren't getting the right results for comparisons between unsigned types (smaller than 32bit) when they had the high bit set."},{"Id":"7194170564","Type":"IssuesEvent","CreatedAt":"2018-02-04T00:48:34","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4508","RelatedDescription":"Closed issue \"Add support for building WebAssembly on Mac/Linux\" (#4508) at dotnet/corert","RelatedBody":"Currently, ILC can only produce WebAssembly on Windows because it depends on [LLVMSharp](https://github.com/Microsoft/LLVMSharp), which in turn depends on a Windows build of libLLVM. There appears to be a Linux build of LLVMSharp, so the work should be to incorporate the Linux version and an associated Mac/Linux version of libLLVM into building ILC.\r\n\r\nWhen this is complete, please also remove the no_unix file from tests/src/Simple/HelloWasm in order to enable the test for Mac and Linux."},{"Id":"7194168900","Type":"PullRequestEvent","CreatedAt":"2018-02-04T00:47:18","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5297","RelatedDescription":"Merged pull request \"Add support for building wasm on OSX and Ubuntu 16\" (#5297) at dotnet/corert","RelatedBody":"Work in progress for making it possible to build wasm on OSX host.\r\n\r\nSpun off from this issue:\r\nhttps://github.com/dotnet/corert/issues/4508"},{"Id":"7193259823","Type":"PullRequestEvent","CreatedAt":"2018-02-03T14:38:54","Actor":"Blealtan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5344","RelatedDescription":"Opened pull request \"Implement break opcode as llvm.debugtrap.\" (#5344) at dotnet/corert","RelatedBody":"Implemented break opcode as llvm.debugtrap. Not adding any test cases since it seems that no C# codes generates break opcode directly."},{"Id":"7192645369","Type":"PullRequestEvent","CreatedAt":"2018-02-03T06:27:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5343","RelatedDescription":"Merged pull request \"perfom -> perform\" (#5343) at dotnet/corert","RelatedBody":""},{"Id":"7192642112","Type":"PullRequestEvent","CreatedAt":"2018-02-03T06:24:47","Actor":"github-john-doe","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5343","RelatedDescription":"Opened pull request \"perfom -> perform\" (#5343) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7195622027","Type":"IssuesEvent","CreatedAt":"2018-02-04T19:00:01","Actor":"lmagyar","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1930","RelatedDescription":"Opened issue \"OutOfMemoryException in XAML designer due to failed assembly reference resolution based on PackageReference tag\" (#1930) at dotnet/sdk","RelatedBody":"XAML Workflow Activity designer 100% throws **OutOfMemoryException** and crashes when some specific NuGet packages are referred through PackageReference (NOT with packages.config) using the \"old\" project file format (`<Project ToolsVersion=\"15.0\" ...>` and NOT `<Project Sdk=\"Microsoft.NET.Sdk\">`).\r\n\r\nI think this is caused by some assembly reference resolution error in the new **PackageReference** related code and related to #1244, #1499\r\n\r\nSteps to reproduce:\r\n* VS 2017 (any VS 15.x version I've tested fails)\r\n* fresh new empty solution with Workflow Activity library added from original VS template (net461, though any version I've tested fails)\r\n* add **any ONE** of these NuGet packages with **PackageReference** (NOT with packages.config)\r\n  * Microsoft.Orleans.Core (v1.5.3, though any version I've tested fails)\r\n  * Microsoft.Orleans.Core.Abstractions (v2.0.0-beta3, though any version I've tested fails)\r\n  * Abp (v3.4.0) + add reference to System.Drawing\r\n  * Dapper (v1.50.4)\r\n  * Orleans.Activities (v0.3.0)\r\n* open the empty Activity1.xaml in the designer\r\n\r\nInstead of opening the designer, VS says:\r\n```\r\nSystem.OutOfMemoryException: Insufficient memory to continue the execution of the program.\r\n   at VSLangProj.Reference.get_PublicKeyToken()\r\n   at Microsoft.VisualStudio.Activities.Helper.CreateAssemblyNameFromReference(Reference r)\r\n   at Microsoft.VisualStudio.Activities.Helper.GetReferenceAssemblies(VSProject project)\r\n   at Microsoft.VisualStudio.Activities.EditorPane.get_ReferencedAssemblies()\r\n   at Microsoft.VisualStudio.Activities.EditorPane.ResetShadowCopyPath()\r\n   at Microsoft.VisualStudio.Activities.EditorPane.CreateWorkflowDesignerInIsolatedMode()\r\n   at Microsoft.VisualStudio.Activities.EditorPane.Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.Load(String fileName, UInt32 formatMode, Int32 readOnly)\r\n```\r\n\r\nSome of the above packages (Microsoft.Orleans.Core, Orleans.Activities, Abp) also causes the \"The referenced component 'System.Net.Http' could not be found.\" warning, so after adding the below code to the end of the project files, the warning disappears, but the XAML designer still crashes:\r\n```\r\n  <Target Name=\"UpdateOriginalItemSpecs\" AfterTargets=\"ResolveAssemblyReferences\">\r\n    <ItemGroup>\r\n      <ReferencePath>\r\n        <OriginalItemSpec>%(ReferencePath.FileName)</OriginalItemSpec>\r\n      </ReferencePath>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\n**But 2 warnings remain even after adding the above target to the project file (I think the XAML designer uses some different target for assembly resolution):**\r\n* Could not run workflow validation because file 'System.Net.Http, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.\r\n* Could not compile workflow expressions because file 'file:///C:\\Users\\lmagyar\\.nuget\\packages\\system.net.http\\4.3.0\\ref\\net46\\System.Net.Http.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.\r\n\r\nNote: referring Microsoft.Orleans.Core.*Abstractions* or Dapper doesn't cause any warning, the designer simply crashes. Adding the above target workaround, doesn't change anything.\r\n\r\nI've tried to investigate:\r\n* I've added all the ~50 nuget packages that is referenced through Microsoft.Orleans.Core (based on the packages.config in another project), with PackageReference, no problem, but finally adding Microsoft.Orleans.Core results in the exception\r\n* I've tried several assembly binding redirects, nothing changes, exception\r\n* devenv.exe /safemode, exception\r\n* I've also tried to debug devenv, but I think due to CreateWorkflowDesignerInIsolatedMode(), I wasn't able to catch the exception\r\n* MSBuild.exe builds without any warning\r\n\r\nThis error also reported multiple times at several places:\r\n* https://developercommunity.visualstudio.com/content/problem/61637/vs-2017-outofmemoryexception-in-xaml-activity-desi.html\r\n* https://developercommunity.visualstudio.com/content/problem/113977/out-of-memory-exception-when-loading-workflow-xaml.html\r\n* https://developercommunity.visualstudio.com/content/problem/162045/windows-workflow-foundation-1.html\r\n* aspnetboilerplate/aspnetboilerplate#2805\r\n\r\nUsing the new project file format (`<Project Sdk=\"Microsoft.NET.Sdk\">`) is not an option, because it doesn't contain the XamlAppDef BuildAction and though the XAML designer starts without crash, it doesn't resolve any assembly, so useless. Using packages.config as workaround is awfully slow and painful.\r\n\r\nMaybe @dmetzgar can add some insights about the internals of the XAML Workflow Activity designer.\r\n"},{"Id":"7195103484","Type":"IssuesEvent","CreatedAt":"2018-02-04T13:46:55","Actor":"stevomccormack","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1929","RelatedDescription":"Opened issue \".NET Core 2.1.xx is not availabe in Visual Studio 2017 \" (#1929) at dotnet/sdk","RelatedBody":"Cannot create a class library using .NET Core v2.0.\r\nI can create it via command line but not using Visual Studio 2017.\r\nSo project will not build.\r\n\r\n\r\n------------\r\n\r\n.NET Core v2.1.4 is fully installed.\r\n>dotnet --version\r\n2.1.4\r\n\r\n----------------------\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.5.6\r\nVisualStudio.15.Release/15.5.6+27130.2027\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Professional\r\n\r\nVisual Basic 2017   00369-60000-00001-AA456\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00369-60000-00001-AA456\r\nMicrosoft Visual C# 2017\r\n\r\nVisual F# 4.1   00369-60000-00001-AA456\r\nMicrosoft Visual F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31127.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51007.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.2000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.2000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.3.2000.1\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.3.2000.1\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.0\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.3.2000.1\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51120.3\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nNode.js Tools   1.4.11025.7\r\nAdds support for developing and debugging Node.js apps in Visual Studio\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nWebJobs Tools v1.0.0   15.0.40108.0\r\nWebJobs Tools v1.0.0\r\n"},{"Id":"7191955018","Type":"PullRequestEvent","CreatedAt":"2018-02-02T23:22:16","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1928","RelatedDescription":"Merged pull request \"NETCorePlatformsImplicitPackageVersion copy from BundledNETCorePlatformsVersion\" (#1928) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/cli/issues/8421\r\n\r\nTo BundledNETCorePlatformsVersion\r\nNETCorePlatformsImplicitPackageVersion copy from BundledNETCorePlatformsVersion\r\nnext step insert SDK along with the name change in CLI in one PR to make CLI build"},{"Id":"7191556124","Type":"PullRequestEvent","CreatedAt":"2018-02-02T21:30:57","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1928","RelatedDescription":"Opened pull request \"Rename to BundledNETCoreAppPackageVersion\" (#1928) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/cli/issues/8421"},{"Id":"7189133425","Type":"IssuesEvent","CreatedAt":"2018-02-02T12:54:34","Actor":"dafo","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1926","RelatedDescription":"Closed issue \"r\" (#1926) at dotnet/sdk","RelatedBody":""},{"Id":"7189132361","Type":"IssuesEvent","CreatedAt":"2018-02-02T12:54:18","Actor":"dafo","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1926","RelatedDescription":"Opened issue \"r\" (#1926) at dotnet/sdk","RelatedBody":""},{"Id":"7188811502","Type":"PullRequestEvent","CreatedAt":"2018-02-02T11:32:34","Actor":"v-zbsail","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1925","RelatedDescription":"Opened pull request \"LOC CHECKIN | sdk master | 20180202\" (#1925) at dotnet/sdk","RelatedBody":null},{"Id":"7187904529","Type":"PullRequestEvent","CreatedAt":"2018-02-02T08:00:50","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1924","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1924) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180202-080048\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180202-080048 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"959498964503425026","CreatedAt":"2018-02-02T18:49:14+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1 roadmap https://t.co/1QFI97S11f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":229,"FavoriteCount":178,"RawContent":null},{"Id":"959498759733301248","CreatedAt":"2018-02-02T18:48:25+00:00","UserScreenname":"dotnet","Text":"Entity Framework Core 2.1 Roadmap https://t.co/jyrJwFiQzJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":105,"FavoriteCount":73,"RawContent":null},{"Id":"959492955391143939","CreatedAt":"2018-02-02T18:25:21+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 Roadmap https://t.co/v7JFqyVWWb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":207,"FavoriteCount":166,"RawContent":null},{"Id":"959125554988371969","CreatedAt":"2018-02-01T18:05:26+00:00","UserScreenname":"dotnet","Text":"#TBT: You've probably used LINQ for years, but have you ever wondered about the underlying pieces and how they fit… https://t.co/tuqqdA5nUG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":82,"FavoriteCount":27,"RawContent":null},{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null},{"Id":"955790963024257024","CreatedAt":"2018-01-23T13:14:57+00:00","UserScreenname":"dotnet","Text":"Check out @csharpfritz and @condrong at 10am ET, 15:00 UTC talking about new @AspNet Core features and benefits for… https://t.co/BLXAg7rubK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null},{"Id":"954763538328883201","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"dotnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/EefnkSEqfe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":6,"RawContent":null},{"Id":"954724179533758465","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"dotnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/dWA8n7Ttph","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-02-05T05:30:19.1843174Z","RunDurationInMilliseconds":7332}