{"Data":{"GitHub":{"Issues":[{"Id":"430718769","IsPullRequest":true,"CreatedAt":"2019-04-09T00:55:22","Actor":"singlis","Number":"3253","RawContent":null,"Title":"Fixing ONNX test","State":"open","Body":"The test pipeline for consuming an ONNX model would fail due to the Score column being named \"Score0\". The ONNX model will rename the output columns by design, therefore a different class with the ColumnName of \"Score0\" is needed. This fixes the test pipeline to address this issue.\r\n\r\nFixes #2981\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3253","RelatedDescription":"Open PR \"Fixing ONNX test\" (#3253)"},{"Id":"430704356","IsPullRequest":true,"CreatedAt":"2019-04-08T23:42:26","Actor":"glebuk","Number":"3252","RawContent":null,"Title":"Renamed WhatTheFeature and their abbreviations  to FeatureContributionScorer.","State":"open","Body":"### Change: \r\nDue to term usage policy we need to rename some outdated component names to fit the term review policy.  Specifically we need to rename all instances of WhatTheFeature to the FutureContributionScorer for it and all abbreviations.  The change cleans up the last remaining renamings of this feature.\r\n\r\n### Impact:\r\nNote that this change will break model compatibility for all previous versions of models containing FCC scorer.  \r\n\r\n### Workaround:\r\nThe workaround for legacy models exists.  It requires users to open the model ZIP file and manually rename the binary model file identifier string that contains the FCC model from \"WTF SCBI\" to \"FCC SCBI\"","Url":"https://github.com/dotnet/machinelearning/pull/3252","RelatedDescription":"Open PR \"Renamed WhatTheFeature and their abbreviations  to FeatureContributionScorer.\" (#3252)"},{"Id":"430703014","IsPullRequest":true,"CreatedAt":"2019-04-08T23:36:01","Actor":"wschin","Number":"3251","RawContent":null,"Title":"[WIP] Matrix factorization transformer","State":"open","Body":"In addition to a scorer, matrix factorization also commonly acts like a featurizer. It can map matrix row/column index to its representation. If we factorize matrix `R` into `P^TQ`, then the row index u's latent representation is defined as the u-th column of P. Similarly, the column index v's latent representation is the v-th column of Q. In addition, this transformer can find columns/rows similar to the given row/column by computing the inner products between row/column and all other columns/rows. The following data structure summarizes this transformer's output schema.\r\n```csharp\r\n        private class LatentVectorAndNeighbors\r\n        {\r\n            [VectorType(2)]\r\n            public float[] ColumnLatentVector { get; set; }\r\n\r\n            [VectorType(2)]\r\n            public float[] RowLatentVector { get; set; }\r\n\r\n            [VectorType(1)]\r\n            [KeyType(_oneClassMatrixRowCount)]\r\n            public uint[] SimilarRows { get; set; }\r\n\r\n            [VectorType(1)]\r\n            [KeyType(_oneClassMatrixColumnCount)]\r\n            public uint[] SImilarColumns { get; set; }\r\n        }\r\n```\r\nThis PR fix partially #1795 because we still need another evaluator.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3251","RelatedDescription":"Open PR \"[WIP] Matrix factorization transformer\" (#3251)"},{"Id":"430701461","IsPullRequest":true,"CreatedAt":"2019-04-08T23:28:49","Actor":"sfilipi","Number":"3250","RawContent":null,"Title":"[WIP] Exposing the confusion matrix","State":"open","Body":"Fixes #2009 by exposing the confusion matrix. ","Url":"https://github.com/dotnet/machinelearning/pull/3250","RelatedDescription":"Open PR \"[WIP] Exposing the confusion matrix\" (#3250)"},{"Id":"430685773","IsPullRequest":true,"CreatedAt":"2019-04-08T22:27:10","Actor":"codemzs","Number":"3249","RawContent":null,"Title":"Fix runtime exception in ImageClassification.","State":"open","Body":"fixes #3248\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3249","RelatedDescription":"Open PR \"Fix runtime exception in ImageClassification.\" (#3249)"},{"Id":"430685471","IsPullRequest":false,"CreatedAt":"2019-04-08T22:26:06","Actor":"codemzs","Number":"3248","RawContent":null,"Title":"Fix runtime exception in Image classification sample.","State":"open","Body":"This sample throws an exception for two reasons 1) model not found, should download the mode and unzip 2) even if the model exist it needs to set addBatchDimensionInput to true.","Url":"https://github.com/dotnet/machinelearning/issues/3248","RelatedDescription":"Open issue \"Fix runtime exception in Image classification sample.\" (#3248)"},{"Id":"430679199","IsPullRequest":true,"CreatedAt":"2019-04-08T22:04:55","Actor":"rogancarr","Number":"3247","RawContent":null,"Title":"Update Permutation Feature Importance Samples","State":"open","Body":"This PR updates the samples for `PermutationFeatureImportance` and adds samples for `MulticlassClassification` and `Ranking` tasks.\r\n\r\nFixes #3242 ","Url":"https://github.com/dotnet/machinelearning/pull/3247","RelatedDescription":"Open PR \"Update Permutation Feature Importance Samples\" (#3247)"},{"Id":"430674219","IsPullRequest":true,"CreatedAt":"2019-04-08T21:49:19","Actor":"ganik","Number":"3246","RawContent":null,"Title":"Add NaiveBayes sample","State":"open","Body":"repros #3226","Url":"https://github.com/dotnet/machinelearning/pull/3246","RelatedDescription":"Open PR \"Add NaiveBayes sample\" (#3246)"},{"Id":"430671588","IsPullRequest":true,"CreatedAt":"2019-04-08T21:41:55","Actor":"ganik","Number":"3245","RawContent":null,"Title":"[WIP] NaiveBayes sample added","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/3245","RelatedDescription":"Closed or merged PR \"[WIP] NaiveBayes sample added\" (#3245)"},{"Id":"430662559","IsPullRequest":true,"CreatedAt":"2019-04-08T21:16:21","Actor":"Ivanidzo4ka","Number":"3244","RawContent":null,"Title":"Normalize documentation","State":"open","Body":"towards #1209 ","Url":"https://github.com/dotnet/machinelearning/pull/3244","RelatedDescription":"Open PR \"Normalize documentation\" (#3244)"},{"Id":"430655782","IsPullRequest":false,"CreatedAt":"2019-04-08T20:58:58","Actor":"zeahmed","Number":"3243","RawContent":null,"Title":"SchemaShape.Column constructor is internal???","State":"open","Body":"`IEstimator` is a public interface that allows to create new estimators in ML.NET using NuGet only. The interface is public which defines two methods `Fit` and `GetOutputSchema`.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/1724da898d8cff88543fcf9e7b356ef0989b7bf7/src/Microsoft.ML.Core/Data/IEstimator.cs#L301\r\n\r\nThe `GetOutputSchema` method takes `SchemaShape` as input. The only way to create `SchemaShape` is through its constructor that takes `SchemaShape.Column` as input.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/1724da898d8cff88543fcf9e7b356ef0989b7bf7/src/Microsoft.ML.Core/Data/IEstimator.cs#L129\r\n\r\nHowever, the only constructor of `SchemaShape.Column`  is internal which blocks external user to create new estimators.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/1724da898d8cff88543fcf9e7b356ef0989b7bf7/src/Microsoft.ML.Core/Data/IEstimator.cs#L62\r\n\r\nHow can I create a new estimator using NuGet only?","Url":"https://github.com/dotnet/machinelearning/issues/3243","RelatedDescription":"Open issue \"SchemaShape.Column constructor is internal???\" (#3243)"},{"Id":"430653508","IsPullRequest":false,"CreatedAt":"2019-04-08T20:53:06","Actor":"rogancarr","Number":"3242","RawContent":null,"Title":"Clean up PFI Documentation","State":"open","Body":"The current documentation for Permutation Feature Importance does not cover a few use cases, and uses an old style.\r\n\r\nRelated to #1209","Url":"https://github.com/dotnet/machinelearning/issues/3242","RelatedDescription":"Open issue \"Clean up PFI Documentation\" (#3242)"},{"Id":"430652379","IsPullRequest":true,"CreatedAt":"2019-04-08T20:50:17","Actor":"rogancarr","Number":"3241","RawContent":null,"Title":"Update Feature Contribution Calculation Samples","State":"open","Body":"This PR cleans up the samples for FCC and creates a new one specifically for calibrated learners.\r\n\r\nFixes #3233 ","Url":"https://github.com/dotnet/machinelearning/pull/3241","RelatedDescription":"Open PR \"Update Feature Contribution Calculation Samples\" (#3241)"},{"Id":"430651595","IsPullRequest":true,"CreatedAt":"2019-04-08T20:48:27","Actor":"zeahmed","Number":"3240","RawContent":null,"Title":"Cherry pick for samples (Text)","State":"open","Body":"This PR cherry picks the following commits from the master related to text transforms.\r\n\r\n#3120\r\n#3123\r\n#3133\r\n#3142\r\n#3156\r\n#3177\r\n#3183\r\n#3191","Url":"https://github.com/dotnet/machinelearning/pull/3240","RelatedDescription":"Open PR \"Cherry pick for samples (Text)\" (#3240)"},{"Id":"430627192","IsPullRequest":false,"CreatedAt":"2019-04-08T19:48:49","Actor":"eerhardt","Number":"3239","RawContent":null,"Title":"Make it easier to use ML.NET in an ASP.NET app/service","State":"open","Body":"## Problem\r\nWith `1.0.0-preview` bits, it is currently harder than it needs to be to use ML.NET inside an ASP.NET service or application. The first problem users hit is whether they can cache a `PredictionEngine` statically and reuse it for multiple requests. As described in #1789, you cannot use a PredictionEngine on multiple threads at the same time. Doing so will cause problems in your application.\r\n\r\nThus the recommendation is to use a pooling technique, but writing one from scratch is rather hard and potentially error prone.\r\n\r\nAlso, by default the MLContext's Log operation is not aware of any logging infrastructure currently used by ASP.NET apps/services. Thus the log goes nowhere, and is lost.\r\n\r\n## Proposal\r\nWe propose to add a new library (`Microsoft.ML.Extensions?`, `Microsoft.Extensions.ML?`) that is aware of both `Microsoft.ML` and `Microsoft.Extensions.DependencyInjection`/`Microsoft.Extensions.Logging` and glues the two together. This should make it much easier to consume ML.NET models inside ASP.NET apps/services, as well as any other app model that integrates with the `Microsoft.Extensions.*` libraries.\r\n\r\n### Usage\r\nAdding a new ML.NET model into an ASP.NET application could be as simple as two steps:\r\n\r\n1. Add a PredictionEnginePool in your Startup.cs:\r\n\r\n```C#\r\n    // This method gets called by the runtime. Use this method to add services to the container.\r\n    public void ConfigureServices(IServiceCollection services)\r\n    {\r\n        services\r\n            .AddPredictionEnginePool<SentimentIssue, SentimentPrediction>(\"SentimentModel.zip\");\r\n\r\n        // other service configuration\r\n    }\r\n```\r\n\r\n2. In any controller that needs to make a prediction, inject the PredictionEngine pool in the constructor, and use it where necessary:\r\n\r\n```C#\r\n[ApiController]\r\npublic class PredictionController : ControllerBase\r\n{\r\n    private PredictionEnginePool<SentimentIssue, SentimentPrediction> _predictionEnginePool;\r\n\r\n    public PredictionController(PredictionEnginePool<SentimentIssue, SentimentPrediction> predictionEnginePool)\r\n    {\r\n        _predictionEnginePool = predictionEnginePool;\r\n    }\r\n\r\n    [HttpGet()]\r\n    public ActionResult<SentimentPrediction> GetSentiment([FromQuery]SentimentIssue input)\r\n    {\r\n        return _predictionEnginePool.Predict(input);\r\n    }\r\n}\r\n```\r\n\r\n### Other potential scenarios\r\n1. Being able to add a model `.zip` file from sources other than a file path\r\n    1. Azure Blob Storage\r\n    2. A SQL Database\r\n    3. Any URL\r\n2. Being able to automatically reload an updated model, if the file/URL changes (using FileWatcher or ETag or some other mechanism).\r\n3. Being able to have different \"named\" models for scenarios like A/B testing where you want 90% of users to get Model A and 10% to get Model B.\r\n\r\n@glennc @CESARDELATORRE @glebuk @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/3239","RelatedDescription":"Open issue \"Make it easier to use ML.NET in an ASP.NET app/service\" (#3239)"},{"Id":"430591991","IsPullRequest":true,"CreatedAt":"2019-04-08T19:11:07","Actor":"codemzs","Number":"3237","RawContent":null,"Title":"Fix DNN Featurizer sample bug.","State":"closed","Body":"DNN featurizer sample throws an exception because it cannot find the Resnet ONNX model. This PR fixes it.\r\n\r\nfixes  #3236","Url":"https://github.com/dotnet/machinelearning/pull/3237","RelatedDescription":"Closed or merged PR \"Fix DNN Featurizer sample bug.\" (#3237)"},{"Id":"430591769","IsPullRequest":false,"CreatedAt":"2019-04-08T19:11:07","Actor":"codemzs","Number":"3236","RawContent":null,"Title":"DNN Featurizer sample bug.","State":"closed","Body":"DNN featurizer sample throws an exception because it cannot find the Resnet ONNX model.","Url":"https://github.com/dotnet/machinelearning/issues/3236","RelatedDescription":"Closed issue \"DNN Featurizer sample bug.\" (#3236)"},{"Id":"430599088","IsPullRequest":false,"CreatedAt":"2019-04-08T18:38:29","Actor":"Ivanidzo4ka","Number":"3238","RawContent":null,"Title":"GetNormalizerModelParameters would be nice to accept name of column instead of index","State":"open","Body":"```\r\nvar normalize = mlContext.Transforms.NormalizeMinMax(new InputOutputColumnPair[] { new InputOutputColumnPair(\"ANorm\", \"A\"), new InputOutputColumnPair(\"BNorm\", \"B\") }, fixZero: false);\r\n```\r\n\r\nSo right now in order to get parameters for `BNorm` column I need to do this:\r\n```\r\n (normalizeTransform.GetNormalizerModelParameters(1) as Microsoft.ML.Transforms.NormalizingTransformer.AffineNormalizerModelParameters<ImmutableArray<float>>);\r\n```\r\n\r\nCan we have another function which would accept name of column instead of index in `InputOutputColumnPair` array?\r\n\r\n```\r\n (normalizeTransform.GetNormalizerModelParameters(\"BNorm\") as Microsoft.ML.Transforms.NormalizingTransformer.AffineNormalizerModelParameters<ImmutableArray<float>>);\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3238","RelatedDescription":"Open issue \"GetNormalizerModelParameters would be nice to accept name of column instead of index\" (#3238)"},{"Id":"430583719","IsPullRequest":false,"CreatedAt":"2019-04-08T18:00:42","Actor":"daholste","Number":"3235","RawContent":null,"Title":"Log Verbosity Handling in MLContext","State":"open","Body":"When subscribing to logs from MLContext, there may not be an easy / future-proof way to know the verbosity level of each returned log statement.\r\nAlso, when subscribing to logs, for one pipeline I ran, the logger returned a total of about 255 KB of text (lots of 'Trace'-level logs). Perhaps it could be convenient for a user, when subscribing to logs, to be able to specify a minimum log severity level if desired. (For instance, a user could subscribe to 'Warning'-level logs and above.)\r\nThanks for reading","Url":"https://github.com/dotnet/machinelearning/issues/3235","RelatedDescription":"Open issue \"Log Verbosity Handling in MLContext\" (#3235)"},{"Id":"429963521","IsPullRequest":true,"CreatedAt":"2019-04-08T17:48:06","Actor":"wschin","Number":"3227","RawContent":null,"Title":"Polish marshalling of MF model and MF problem and enable 32-bit tests","State":"closed","Body":"Fix #1441. Also related to some suggestion made in #3210. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3227","RelatedDescription":"Closed or merged PR \"Polish marshalling of MF model and MF problem and enable 32-bit tests\" (#3227)"},{"Id":"430571441","IsPullRequest":false,"CreatedAt":"2019-04-08T17:30:34","Actor":"codemzs","Number":"3234","RawContent":null,"Title":"CreatePredictionEngine  overrides inputSchemaDefinition by calling into DataViewConstructionUtils.GetSchemaDefinition","State":"open","Body":"It seems `CreatePredictionEngine`  overrides `inputSchemaDefinition` by calling into `DataViewConstructionUtils.GetSchemaDefinition`. This is problematic if some of the features of input schema is determined at runtime, example, length of feature vector. \r\n\r\n```csharp\r\n            ITransformer trainedModel;\r\n            using (var stream = new FileStream(modelFileFullPath, FileMode.Open, FileAccess.Read, FileShare.Read))\r\n            {\r\n               var trainedModel = mlContext.Model.Load(stream, out var inputSchema);\r\n               var = mlContext.Model.CreatePredictionEngine<TInput, TOutput>(trainedModel, inputSchemaDefinition: inputSchema); \r\n\r\n//Throws an exception features<vector<single>> does not match features<vector<single, 432>> because CreatePredictionEngine returns transformer.CreatePredictionEngine<TSrc, TDst>(_env, false, DataViewConstructionUtils.GetSchemaDefinition<TSrc>(_env, inputSchema)); and `DataViewConstructionUtils.GetSchemaDefinition` overrides inputSchema.\r\n\r\n            }\r\n\r\n//Below workaround that overrides the override!\r\n\r\nusing (var stream = new FileStream(modelFileFullPath\", FileMode.Open, FileAccess.Read, FileShare.Read))\r\n            {\r\n\r\n                var trainedModel = mlContext.Model.Load(stream, out var inputSchema);\r\n                var outputSchemaDefinition = SchemaDefinition.Create(typeof(TInput));\r\n                outputSchemaDefinition[\"Features\"].ColumnType = new VectorDataViewType(NumberDataViewType.Single, Convert.ToInt32(432));\r\n                var p = mlContext.Model.CreatePredictionEngine<TInput, TOutput>(trainedModel, inputSchemaDefinition: outputSchemaDefinition);\r\n            }\r\n\r\n```\r\n\r\nCC: @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/3234","RelatedDescription":"Open issue \"CreatePredictionEngine  overrides inputSchemaDefinition by calling into DataViewConstructionUtils.GetSchemaDefinition\" (#3234)"},{"Id":"430564280","IsPullRequest":false,"CreatedAt":"2019-04-08T17:13:06","Actor":"rogancarr","Number":"3233","RawContent":null,"Title":"Clean up FCC Documentation","State":"open","Body":"The current documentation for the Feature Contribution Calculator is not showing up on the docs site, and needs minor changes.\r\n\r\nRelated to #1209 ","Url":"https://github.com/dotnet/machinelearning/issues/3233","RelatedDescription":"Open issue \"Clean up FCC Documentation\" (#3233)"},{"Id":"430559469","IsPullRequest":true,"CreatedAt":"2019-04-08T17:03:20","Actor":"Ivanidzo4ka","Number":"3232","RawContent":null,"Title":"Projection documentation","State":"open","Body":"Towards #1209 ","Url":"https://github.com/dotnet/machinelearning/pull/3232","RelatedDescription":"Open PR \"Projection documentation\" (#3232)"},{"Id":"430548234","IsPullRequest":false,"CreatedAt":"2019-04-08T16:37:07","Actor":"codemzs","Number":"3231","RawContent":null,"Title":"Fix bug in ONNX scorer sample","State":"closed","Body":"ONNX scorer transformer sample throws an exception today because it cannot find the model file. This PR fixes that.","Url":"https://github.com/dotnet/machinelearning/issues/3231","RelatedDescription":"Closed issue \"Fix bug in ONNX scorer sample\" (#3231)"},{"Id":"430528584","IsPullRequest":true,"CreatedAt":"2019-04-08T16:35:10","Actor":"codemzs","Number":"3230","RawContent":null,"Title":"Fix bug in ONNX scorer sample.","State":"closed","Body":"ONNX scorer transformer sample throws an exception today because it cannot find the model file. This PR fixes that.\r\n\r\nfixes #3231","Url":"https://github.com/dotnet/machinelearning/pull/3230","RelatedDescription":"Closed or merged PR \"Fix bug in ONNX scorer sample.\" (#3230)"},{"Id":"430161963","IsPullRequest":false,"CreatedAt":"2019-04-07T16:01:53","Actor":"premingiet","Number":"3229","RawContent":null,"Title":"Deep Learning with ML.NET","State":"open","Body":"I checked available documentation for ML.NET and didn't find any help regarding Deep Learning Framework. Is Deep Learning possible with ML.NET ? Like CAFFE deep learning framework ? I need Deep learning framework for Dot Net. Is it possible with ML.NET ?","Url":"https://github.com/dotnet/machinelearning/issues/3229","RelatedDescription":"Open issue \"Deep Learning with ML.NET\" (#3229)"},{"Id":"430076989","IsPullRequest":false,"CreatedAt":"2019-04-06T21:08:37","Actor":"justinormont","Number":"3228","RawContent":null,"Title":"Overflow in MultiClassNaiveBayes","State":"open","Body":"We're storing the count of rows in an `int`. This causes an overflow for large datasets. In my case, Criteo 1TB w/ 4.4B rows. Recommend changing to a `long`.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/d2bf3e72fa935b12644b0a695ad0d044a8077a83/src/Microsoft.ML.StandardTrainers/Standard/MulticlassClassification/MulticlassNaiveBayesTrainer.cs#L242\r\n\r\nError:\r\n```\r\nUnexpected exception: Arithmetic operation resulted in an overflow., 'System.OverflowException'\r\n   at System.Linq.Enumerable.Sum(IEnumerable`1 source)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3228","RelatedDescription":"Open issue \"Overflow in MultiClassNaiveBayes\" (#3228)"},{"Id":"429958911","IsPullRequest":false,"CreatedAt":"2019-04-05T22:35:26","Actor":"ganik","Number":"3226","RawContent":null,"Title":"NaiveBayes doesnt produce meaningful result on simple dataset","State":"open","Body":"Use the same dataset as in  PR #3159 for NB but get garbage results no matter how good is separation among classes","Url":"https://github.com/dotnet/machinelearning/issues/3226","RelatedDescription":"Open issue \"NaiveBayes doesnt produce meaningful result on simple dataset\" (#3226)"},{"Id":"429958745","IsPullRequest":true,"CreatedAt":"2019-04-05T22:34:39","Actor":"rogancarr","Number":"3225","RawContent":null,"Title":"Renaming OptimizationTolerance to fix a spelling error. (#3199)","State":"open","Body":"* Renaming OptimizationTolerance in LBFGS to fix a spelling bug.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3225","RelatedDescription":"Open PR \"Renaming OptimizationTolerance to fix a spelling error. (#3199)\" (#3225)"},{"Id":"429944690","IsPullRequest":false,"CreatedAt":"2019-04-05T21:38:34","Actor":"eerhardt","Number":"3224","RawContent":null,"Title":"Ensure we have the proper attribution for MurmurHash3 algorithm","State":"open","Body":"We should ensure we have the correct attribution for\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/70ef7ecd43b031b481a4047ea361da5e2f360336/src/Microsoft.ML.DataView/DataViewRowId.cs#L72-L76\r\n\r\nand\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/b861b5d64841cbe0f2c866ee7586872aac450a51/src/Microsoft.ML.Core/Utilities/Hashing.cs#L109-L115\r\n\r\nWe should ensure this is in our third-party notice and any other attributions that are necessary.\r\n\r\n@richlander @shauheen ","Url":"https://github.com/dotnet/machinelearning/issues/3224","RelatedDescription":"Open issue \"Ensure we have the proper attribution for MurmurHash3 algorithm\" (#3224)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-04-09T05:30:34.7299244Z","RunDurationInMilliseconds":851}