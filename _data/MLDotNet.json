{"Data":{"GitHub":{"Issues":[{"Id":"339118249","IsPullRequest":false,"CreatedAt":"2018-07-07T05:13:28","Actor":"MrCSharp22","Number":"504","RawContent":null,"Title":"[BUG] Unable to load model file in MVC project. Same file works in console app.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 1803 (17134.112)\r\n- **.NET Version (eg., dotnet --info)**: .Net Framework 4.6.1 (ASP.Net MVC hosted in local IIS, Console App)\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI have a console application that trains a ML model then writes it to a specific location. The model file is then used by an ASP.Net MVC website.\r\n\r\n- **What happened?**\r\nWhen the website calls ```PredictionModel.ReadAsync<T1, T2>(filePath);``` to load the model I get the following exception:\r\n\r\n\"Message\": \"An error has occurred.\",\r\n                            \"ExceptionMessage\": \"Couldn't load model: 'DataLoaderModel\\\\Transform_005\\\\SchemaBindableMapper\\\\InnerMapper\\\\Predictor'\",\r\n                            \"ExceptionType\": \"System.FormatException\",\r\n                            \"StackTrace\": \"   at Microsoft.ML.Runtime.Model.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\\r\\n   at Microsoft.ML.Runtime.Model.ModelLoadContext.LoadModelOrNull[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, String dir, Object[] extra)\\r\\n   at Microsoft.ML.Runtime.Model.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, String name, Object[] extra)\\r\\n   at Microsoft.ML.Runtime.Data.SchemaBindablePredictorWrapperBase..ctor(IHostEnvironment env, ModelLoadContext ctx)\\r\\n   at Microsoft.ML.Runtime.Data.SchemaBindablePredictorWrapper.Create(IHostEnvironment env, ModelLoadContext ctx)\"\r\n\r\n\r\n- **What did you expect?**\r\nI expected the model to load from the file as it has done in my initial tests in the console app.\r\nAfter getting that exception, I tried to load the model from a different console app to simply run a prediction and the same model file loaded successfully and provided me with predictions.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/504","RelatedDescription":"Open issue \"[BUG] Unable to load model file in MVC project. Same file works in console app.\" (#504)"},{"Id":"339002308","IsPullRequest":false,"CreatedAt":"2018-07-06T16:38:57","Actor":"gilnahmias","Number":"503","RawContent":null,"Title":"Example of multiclass classification with random forest?","State":"open","Body":"Looking to train multiclass classification with random forest and hyperparameter tuning.\r\n\r\nTried (on dotnetcore with either the latest [LightGbm nuget](https://www.nuget.org/packages/Microsoft.ML.LightGBM/) or cloning the repo directly):\r\n```C#\r\nvar pipeline = new LearningPipeline();\r\n\r\npipeline.Add(new TextLoader(_dataFilePath).CreateFrom<MyDataClass>());\r\n\r\n // for features\r\npipeline.Add(new TextFeaturizer(\"My_Feature1_Vectorized\",\"My_Feature1\"));\r\npipeline.Add(new TextFeaturizer(\"My_Feature2_Vectorized\",\"My_Feature2\"));\r\n\r\n// for the label\r\npipeline.Add(new TextFeaturizer(\"Label_Vectorized\", \"Label\"));\r\n\r\n// ** CAN'T FIND FAST FOREST MULTI CLASS CLASSIFIER ** //\r\npipeline.Add(new LightGbmClassifier() { NumLeaves = 5, NumTrees = 5, MinDocumentsInLeafs = 2 });\r\n\r\nvar model = pipeline.Train<MyDataClass, MyPredictionClass>();\r\n```\r\n\r\nThis code crashes with `System.InvalidOperationException: Entry point 'Trainers.LightGbmClassifier' not found`\r\n\r\nAlso, if I'm missing any crucial steps (say around conversion from numbers to text or vice versa), please point them out.","Url":"https://github.com/dotnet/machinelearning/issues/503","RelatedDescription":"Open issue \"Example of multiclass classification with random forest?\" (#503)"},{"Id":"338929031","IsPullRequest":false,"CreatedAt":"2018-07-06T12:56:01","Actor":"rauhs","Number":"502","RawContent":null,"Title":"How to ignore a column","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win 10\r\n- **.NET Version (eg., dotnet --info)**:  2.1.201\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI added a custom column in my input data type. It holds a `DateTime`. I need it for stats but not for learning. I never \"copy\" it to the `\"Features\"` column. I also added\r\n\r\n```\r\nnew ColumnDropper() { Column = new []{ \"PlannedStart\"} }\r\n```\r\n\r\n- **What happened?**\r\nI got an `ArgumentOutOfRangeException`: Could not determine an IDataView type for member ...\r\n\r\n- **What did you expect?**\r\n\r\nI expected it to just ignore the column.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/502","RelatedDescription":"Open issue \"How to ignore a column\" (#502)"},{"Id":"338798894","IsPullRequest":false,"CreatedAt":"2018-07-06T04:10:12","Actor":"nsulikowski","Number":"501","RawContent":null,"Title":"Load data without a class?","State":"open","Body":"Is there a way to load data without creating a c# class before?\r\nIn this case I had to create the class SentimentData ahead of time:\r\n\r\n`...CreateFrom<SentimentData>(separator: ',')`\r\n\r\nWhat if I want to determine the fields/data types at run time. E.g. From an excel range, or from a DataTable","Url":"https://github.com/dotnet/machinelearning/issues/501","RelatedDescription":"Open issue \"Load data without a class?\" (#501)"},{"Id":"338618669","IsPullRequest":true,"CreatedAt":"2018-07-05T23:41:58","Actor":"TomFinley","Number":"496","RawContent":null,"Title":"Role mapped improvements","State":"closed","Body":"Fixes #445.\r\n\r\n* Generally, favors creating `RoleMappedSchema`/`RoleMappedData` by actual constructors, since that's how objects are generally created.\r\n* Concentrated the actual globally useful \"conveniences\" inside the classes themselves, rather than in completely undiscoverable `Utils` classes.\r\n* Got rid of the `Create` and `CreateOpt` idiom that required that we declare every creation method *twice* in favor of a simpler `bool` parameter on the constructors.\r\n* Added documentation.","Url":"https://github.com/dotnet/machinelearning/pull/496","RelatedDescription":"Closed or merged PR \"Role mapped improvements\" (#496)"},{"Id":"338702162","IsPullRequest":false,"CreatedAt":"2018-07-05T19:42:51","Actor":"mjmckp","Number":"500","RawContent":null,"Title":"GPU support for LightGBM wrapper","State":"open","Body":"The LightGBM wrapper currently only allows CPU based training, however it is possible to build an instance of the LightGBM dlls which [support GPU training.](https://github.com/Microsoft/LightGBM/blob/master/docs/Installation-Guide.rst#build-gpu-version).","Url":"https://github.com/dotnet/machinelearning/issues/500","RelatedDescription":"Open issue \"GPU support for LightGBM wrapper\" (#500)"},{"Id":"338698075","IsPullRequest":true,"CreatedAt":"2018-07-05T19:29:10","Actor":"sharwell","Number":"499","RawContent":null,"Title":"Validate XML comments in test sources during builds","State":"open","Body":"* CS1573, CS1591, and CS1712 are disabled in test code (documentation is not required)\r\n* Other documentation warnings are enabled (documentation, when included, must be syntactically and semantically correct)\r\n* Fixes cases where comments were incorrect in the current code\r\n\r\nRelated to #434\r\n\r\n⚠️ Please do not rewrite/rebase/squash this pull request during the merge. ⚠️ ","Url":"https://github.com/dotnet/machinelearning/pull/499","RelatedDescription":"Open PR \"Validate XML comments in test sources during builds\" (#499)"},{"Id":"338644435","IsPullRequest":false,"CreatedAt":"2018-07-05T16:27:16","Actor":"ErcinDedeoglu","Number":"498","RawContent":null,"Title":"Which model type should I use for financial price prediction?","State":"open","Body":"First of all thank you for the great library!\r\nMy question is simple: I want to predict next period price with pre-computed history values.\r\nI have over 30 rows data for each price.\r\nPrice and datas are decimal.\r\n\r\nFor example history:\r\nIndicator1 - Indicator 2 - Indicator 3 - Price - **Trend**\r\n10,01121 - 23,56540 - 12.00001 - 12,23321 - UP\r\n9,00001 - 3,00040 - 2.00001 - 1,23300 - DOWN\r\n...\r\n...\r\nAnd data to predict coming like\r\n8,11211 - 1,00020 - 0.00021 - 3,5555 - ?\r\nI want to get **TREND** field.\r\n\r\nWhich model should I use? Any example will be perfect?\r\nRegards!","Url":"https://github.com/dotnet/machinelearning/issues/498","RelatedDescription":"Open issue \"Which model type should I use for financial price prediction?\" (#498)"},{"Id":"338641876","IsPullRequest":false,"CreatedAt":"2018-07-05T16:19:57","Actor":"shauheen","Number":"497","RawContent":null,"Title":"Missing MKL","State":"open","Body":"Issue #234 , was resolved by disabling the modules that had a dependance on MKL. We need to address the missing MKL issue.","Url":"https://github.com/dotnet/machinelearning/issues/497","RelatedDescription":"Open issue \"Missing MKL\" (#497)"},{"Id":"338584198","IsPullRequest":false,"CreatedAt":"2018-07-05T13:52:10","Actor":"BernhardGlueck","Number":"495","RawContent":null,"Title":"Time Series support","State":"open","Body":"Quick question: I know that right now there is no real support for time series.... ( both on the data input side as well as in the implemented Learners ) \r\n\r\nHowever before i could often solve my case by windowing over the sequential stream of events i wanted to base my prediction on e.g \r\n\r\nFor this i would need Collection support for columns... is this possible right now ? \r\n\r\nE.g \r\n\r\nclass MeasurementTick  {\r\n\r\n   DateTime TimeStamp { get; set; }\r\n   float Temperature { get; set; }\r\n   float Pressure { get; set; }\r\n}\r\n\r\nclass FixedSizeMeasureMentWindow {\r\n   IList<MeasurementTick> Ticks { get; set; }\r\n}\r\n\r\nUsing FixedSizeMeasureMentWindow as my input data type.... \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/495","RelatedDescription":"Open issue \"Time Series support\" (#495)"},{"Id":"338487375","IsPullRequest":false,"CreatedAt":"2018-07-05T09:05:59","Actor":"petterton","Number":"494","RawContent":null,"Title":"Not able to use LightGBM in .NET Framework 4.6.1","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nWindows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n.NET Framework 4.6.1\r\n### Issue\r\n\r\n- **What did you do?**\r\nI am using the 0.3.0 version NuGet package.\r\nI tried to replicate the example at https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet/get-started/windows, with the small change of replacing the classifier with a LightGbmClassifier. I was able to do this with a .NET Core application (after I understood I had to add the Microsoft.ML.LightGBM Nuget package). But I need to run this in a full .NET framework application. So I followed the same procedure for a .NET Framework 4.6.1 console application. But this failed when I tried to add the Microsoft.ML.LightGBM Nuget package.\r\n\r\n- **What happened?**\r\nMicrosoft.ML.LightGBM depends on 'LightGBM 2.1.2.2', and I get the following error:\r\n\r\n\"Could not install package 'LightGBM 2.1.2.2'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.6.1', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\"\r\n\r\n\r\n- **What did you expect?**\r\nI expected this to work, ML.NET generally works on .NET Framework 4.6.1, right?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/494","RelatedDescription":"Open issue \"Not able to use LightGBM in .NET Framework 4.6.1\" (#494)"},{"Id":"338425893","IsPullRequest":false,"CreatedAt":"2018-07-05T04:47:12","Actor":"hellothere33","Number":"493","RawContent":null,"Title":"Concatenating a range of columns in the data class into the \"Features\" column will lead to exception thrown","State":"open","Body":"Hello!\r\n\r\nI often have CSV files with more than 50 float columns, so it's not feasible to specify each of them individually. I've failed to load them in one shot using a range/sweep specifier. To test things out in smaller scale, I used the Iris example because it ends with 4 float columns.\r\n\r\nHere's the data class, I only added 2 lines at the end:\r\n\r\n```\r\n    public class IrisData\r\n    {\r\n        [Column(\"0\")]\r\n        public float Label;\r\n\r\n        [Column(\"1\")]\r\n        public float SepalLength;\r\n\r\n        [Column(\"2\")]\r\n        public float SepalWidth;\r\n\r\n        [Column(\"3\")]\r\n        public float PetalLength;\r\n\r\n        [Column(\"4\")]\r\n        public float PetalWidth;\r\n\r\n        [Column(\"1-*\", name: \"Features\")] // New\r\n        public float[] Features; // New\r\n    }\r\n```\r\n\r\nHere's the simplified pipeline, I only commented out the normal way with ColumnConcatenator:\r\n```\r\n            var pipeline = new LearningPipeline();\r\n            pipeline.Add(new TextLoader(DataPath).CreateFrom<IrisData>(useHeader: true, separator: '\\t'));\r\n            //pipeline.Add(new ColumnConcatenator(\"Features\",\r\n            //                                    \"SepalLength\",\r\n            //                                    \"SepalWidth\",\r\n            //                                    \"PetalLength\",\r\n            //                                    \"PetalWidth\"));\r\n            pipeline.Add(new KMeansPlusPlusClusterer() { K = 3 });\r\n            var model = pipeline.Train<IrisData, ClusterPrediction>();\r\n```\r\n\r\nSo it worked when I load each column individually and then concatenate them in the pipeline, like the sample code says. But it always throws an exception when I use my above code:\r\n\r\n```\r\nSystem.Reflection.TargetInvocationException: 'Exception has been thrown by the target of an invocation.'\r\nInner Exception:\r\nInvalidOperationException: Column 'Features' is a vector of variable size, which is not supported for normalizers\r\n```\r\n\r\nPlease help! Thank you!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n=============================================================\r\n### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .Net Framework 4.7.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**: trying to load a CSV's multiple float columns by specifying a range in the data class's declaration, for example: \"1-4\"\r\n- **What happened?**: I got an exception on the Features' size. \r\n- **What did you expect?**: that concatenating columns by specifying a range would work the same as adding a ColumnConcatenator to the pipeline.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/493","RelatedDescription":"Open issue \"Concatenating a range of columns in the data class into the \"Features\" column will lead to exception thrown\" (#493)"},{"Id":"338413394","IsPullRequest":true,"CreatedAt":"2018-07-05T03:10:36","Actor":"mjmckp","Number":"492","RawContent":null,"Title":"Add options to enable use of GPU with LightGBM","State":"open","Body":"Note: requires a [build of LightGBM with GPU support](https://github.com/Microsoft/LightGBM/blob/master/docs/Installation-Guide.rst#build-gpu-version).  Addresses #500","Url":"https://github.com/dotnet/machinelearning/pull/492","RelatedDescription":"Open PR \"Add options to enable use of GPU with LightGBM\" (#492)"},{"Id":"338102214","IsPullRequest":true,"CreatedAt":"2018-07-04T01:32:11","Actor":"zeahmed","Number":"491","RawContent":null,"Title":"Added convenience constructors for set of transforms.","State":"open","Body":"This PR fixes #487.\r\n\r\nConvenience constructors are added for the following transforms. \r\n\r\n- ChooseColumnsTransform.cs\r\n- ConvertTransform.cs\r\n- DropSlotsTransform.cs\r\n- GenerateNumberTransform.cs\r\n- HashTransform.cs\r\n- KeyToValueTransform.cs\r\n- KeyToVectorTransform.cs\r\n- LabelConvertTransform.cs\r\n- LabelIndicatorTransform.cs\r\n- RangeFilter.cs\r\n- ShuffleTransform.cs\r\n- SkipTakeFilter.cs\r\n- TermTransform.cs\r\n","Url":"https://github.com/dotnet/machinelearning/pull/491","RelatedDescription":"Open PR \"Added convenience constructors for set of transforms.\" (#491)"},{"Id":"338012530","IsPullRequest":true,"CreatedAt":"2018-07-03T22:29:43","Actor":"Ivanidzo4ka","Number":"488","RawContent":null,"Title":"Hide argument object in ensemble multivoting","State":"closed","Body":"fixes #443 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/488","RelatedDescription":"Closed or merged PR \"Hide argument object in ensemble multivoting\" (#488)"},{"Id":"337662742","IsPullRequest":false,"CreatedAt":"2018-07-03T22:03:09","Actor":"JoshuaLight","Number":"475","RawContent":null,"Title":"`sentiment_data.tsv` and `sentiment_test.tsv` are missing in the solution.","State":"closed","Body":"### Issue\r\n\r\n- **What did you do?**\r\nOpened the solution.\r\n\r\n- **What happened?**\r\nI've found that `test\\data` solution folder contains missing files: `sentiment_data.tsv` and `sentiment_test.tsv`.\r\nAs it looks in [Microsoft.ML.sln](https://github.com/dotnet/machinelearning/blob/master/Microsoft.ML.sln) it has:\r\n```\r\n// Starts at 37.\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"data\", \"data\", \"{FDA2FD2C-A708-43AC-A941-4D941B0853BF}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t>>\ttest\\data\\sentiment_data.tsv = test\\data\\sentiment_data.tsv\r\n\t>>\ttest\\data\\sentiment_test.tsv = test\\data\\sentiment_test.tsv\r\n\tEndProjectSection\r\nEndProject\r\n```\r\nWhile such data actually doesn't present in repository, as it looks [here](https://github.com/dotnet/machinelearning/tree/master/test/data).\r\n- **What did you expect?**\r\nI'd expect that there should be no missing files in solution.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/475","RelatedDescription":"Closed issue \"`sentiment_data.tsv` and `sentiment_test.tsv` are missing in the solution.\" (#475)"},{"Id":"338061231","IsPullRequest":true,"CreatedAt":"2018-07-03T22:03:07","Actor":"JoshuaLight","Number":"490","RawContent":null,"Title":"Removed `data` solution-folder from solution files.","State":"closed","Body":"As mentioned in #475, files in `data` solution-folder currently are not presented in repository, so it's probably worth to remove them.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/490","RelatedDescription":"Closed or merged PR \"Removed `data` solution-folder from solution files.\" (#490)"},{"Id":"338041406","IsPullRequest":false,"CreatedAt":"2018-07-03T20:20:13","Actor":"Ivanidzo4ka","Number":"489","RawContent":null,"Title":"Image support in IDataView and transforms.","State":"open","Body":"Currently only way to work with images is by manually loading pixels arrays into array field in the class and wrap that class into collection data source. Which is not pleasant.\r\n\r\nI propose to add support for type Image in DataView type system which can be based on System.Drawing.Bitmap This way user can specify Bitmap image in their class and it will be properly consumed by CollectionDataSource. \r\n\r\nAlso I suggest to implement transform which would accept column with file paths and load this images during pipeline execution. Which allow you to save memory in case of streaming dataview, some trainers support streaming structure of data, and this way you need to keep in memory only one image for current row instead of images for all rows.\r\n\r\nSince quite often you need to modify images (Re-scale them, transform image into Grayscale, etc) it make sense to keep Image format as \"image\" and not directly convert it into vector of floats which we require for learners. Which means we need transform which would convert Image type into feature vector.\r\n\r\nTo summarize I propose to create following:\r\n\r\nImage type based on Bitmap.\r\nImageLoader transform\r\nImageResizer transform\r\nImageGrayscale transform\r\nImageToPixels transform \r\n\r\n@shauheen @TomFinley  @glebuk \r\n","Url":"https://github.com/dotnet/machinelearning/issues/489","RelatedDescription":"Open issue \"Image support in IDataView and transforms.\" (#489)"},{"Id":"338010262","IsPullRequest":false,"CreatedAt":"2018-07-03T18:32:00","Actor":"zeahmed","Number":"487","RawContent":null,"Title":"[Part 2] Create convenience constructor for the listed Transforms.","State":"open","Body":"This work item is related to #371 and is the 2nd work item in series of creating convenience constructor (cf. #380). In this work item, convenience constructors will be created following set of transforms. \r\n\r\n- ChooseColumnsTransform.cs\r\n- ConvertTransform.cs\r\n- DropSlotsTransform.cs\r\n- GenerateNumberTransform.cs\r\n- HashTransform.cs\r\n- KeyToValueTransform.cs\r\n- KeyToVectorTransform.cs\r\n- LabelConvertTransform.cs\r\n- LabelIndicatorTransform.cs\r\n- RangeFilter.cs\r\n- ShuffleTransform.cs\r\n- SkipTakeFilter.cs\r\n- TermTransform.cs\r\n","Url":"https://github.com/dotnet/machinelearning/issues/487","RelatedDescription":"Open issue \"[Part 2] Create convenience constructor for the listed Transforms.\" (#487)"},{"Id":"337997566","IsPullRequest":true,"CreatedAt":"2018-07-03T18:19:26","Actor":"zeahmed","Number":"486","RawContent":null,"Title":"Reverted 'new' modifier to be first in statement.","State":"closed","Body":"This is a small fix left over from PR 478. Following [C# documentation](https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2010/435f1dw2(v%3dvs.100)), placing 'new' modifier to be first in the statement.","Url":"https://github.com/dotnet/machinelearning/pull/486","RelatedDescription":"Closed or merged PR \"Reverted 'new' modifier to be first in statement.\" (#486)"},{"Id":"337976972","IsPullRequest":true,"CreatedAt":"2018-07-03T16:44:21","Actor":"markusweimer","Number":"485","RawContent":null,"Title":"Issue 434: Fixed imprecise `cref`s in XML Docs","State":"open","Body":"This fixes a couple of dangling `cref` in the XML Docs. This commit doesn't contain functional changes to the code.\r\n\r\nIssue:\r\n  This closes #434","Url":"https://github.com/dotnet/machinelearning/pull/485","RelatedDescription":"Open PR \"Issue 434: Fixed imprecise `cref`s in XML Docs\" (#485)"},{"Id":"337698392","IsPullRequest":true,"CreatedAt":"2018-07-03T16:39:51","Actor":"Ivanidzo4ka","Number":"478","RawContent":null,"Title":"Remove all spaces in the end of lines","State":"closed","Body":"It's nice to not have spaces in the end of lines","Url":"https://github.com/dotnet/machinelearning/pull/478","RelatedDescription":"Closed or merged PR \"Remove all spaces in the end of lines\" (#478)"},{"Id":"337934338","IsPullRequest":false,"CreatedAt":"2018-07-03T14:51:45","Actor":"eerhardt","Number":"484","RawContent":null,"Title":"We should set our PackageTags in the NuGet packages","State":"open","Body":"If we set the `$(PackageTags)` property in our NuGet package projects, the tags will automatically be defined in our .nupkg. And those values will be shown in nuget.org.\r\n\r\nWe are currently leaving this property blank in our packages.\r\n\r\n/cc @shauheen ","Url":"https://github.com/dotnet/machinelearning/issues/484","RelatedDescription":"Open issue \"We should set our PackageTags in the NuGet packages\" (#484)"},{"Id":"337930926","IsPullRequest":false,"CreatedAt":"2018-07-03T14:43:42","Actor":"eerhardt","Number":"483","RawContent":null,"Title":"We should publish our NuGet packages to VSTS's artifacts","State":"open","Body":"When doing an official build, we only publish our NuGet packages to MyGet. We should also publish them to VSTS's artifacts tab. This way they aren't only on MyGet, and when we push our official packages to `nuget.org`, we can pull them from VSTS's artifacts drop of the build.","Url":"https://github.com/dotnet/machinelearning/issues/483","RelatedDescription":"Open issue \"We should publish our NuGet packages to VSTS's artifacts\" (#483)"},{"Id":"337929799","IsPullRequest":false,"CreatedAt":"2018-07-03T14:41:01","Actor":"eerhardt","Number":"482","RawContent":null,"Title":"LightGBM doesn't work during F5 of a .NET Core application","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n```\r\n> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.400-preview-009063\r\n Commit:    dd0179a67c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.400-preview-009063\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.1\r\n  Commit:  6985b9f684\r\n```\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nUsing the latest `0.3.0-preview` NuGet package, I tried using LightGBM in a .NET Core application.  I did the walk through: https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet/get-started/windows, only changing:\r\n\r\n```C#\r\n            // STEP 4: Add learner\r\n            // Add a learning algorithm to the pipeline. \r\n            // This is a classification scenario (What type of iris is this?)\r\n            pipeline.Add(new LightGbmClassifier());\r\n//            pipeline.Add(new StochasticDualCoordinateAscentClassifier());\r\n```\r\n- **What happened?**\r\n\r\n```\r\nUnhandled Exception: System.InvalidOperationException: Entry point 'Trainers.LightGbmClassifier' not found\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointNode..ctor(IHostEnvironment env, IChannel ch, ModuleCatalog moduleCatalog, RunContext context, String id, String entryPointName, JObject inputs, JObject outputs, Boolean checkpoint, String stageId, Single cost, String label, String group, String weight)\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointNode.ValidateNodes(IHostEnvironment env, RunContext context, JArray nodes, ModuleCatalog moduleCatalog, String label, String group, String weight)\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointGraph..ctor(IHostEnvironment env, ModuleCatalog moduleCatalog, JArray nodes)\r\n   at Microsoft.ML.Runtime.Experiment.Compile()\r\n   at Microsoft.ML.LearningPipeline.Train[TInput,TOutput]()\r\n   at MLLightGBMSmokeTest.Program.Main(String[] args) in C:\\Users\\eerhardt\\source\\repos\\MLLightGBMSmokeTest\\Program.cs:line 72\r\n```\r\n\r\n- **What did you expect?**\r\nI expected the walk through app to run successfully.\r\n\r\n### Notes\r\nWhen F5 debugging a .NET Core app in VS, or using `dotnet run` on the command line, .NET Core doesn't have all the dependencies copied to the output directory. Instead, references that come from NuGet packages are executed from the NuGet package cache folder.\r\nSince LightGBM comes from a separate NuGet package than the rest of the Microsoft.ML, it is loaded from a separate folder than the rest of the Microsoft.ML package.\r\n\r\nI've looked through the [ComponentCatalog](https://github.com/dotnet/machinelearning/blob/c023727b76970ab913ec1ce38276508835c17bcf/src/Microsoft.ML.Core/ComponentModel/ComponentCatalog.cs#L393-L425) code, and it appears if I force the `Microsoft.ML.LightGBM.dll` to be loaded first, I can workaround the issue.\r\n\r\nSo I added \r\n\r\n```C#\r\n        static void Main(string[] args)\r\n        {\r\n            // workaround to ensure LightGbm assembly is loaded\r\n            new LightGbmArguments();\r\n```\r\n\r\nAnd I am able to successfully use LightGBM on .NET Core during F5.\r\n\r\n### Workarounds\r\n\r\nAny of these should allow you to workaround the issue:\r\n\r\n1. forcing the assembly to be loaded, like I did above: `new LightGbmArguments();`\r\n2. `dotnet publish` your application and running it from the published folder (since all dependencies are copied during publish)\r\n3. Using full .NET Framework\r\n\r\n/cc @ericstj @TomFinley @codemzs ","Url":"https://github.com/dotnet/machinelearning/issues/482","RelatedDescription":"Open issue \"LightGBM doesn't work during F5 of a .NET Core application\" (#482)"},{"Id":"337701078","IsPullRequest":true,"CreatedAt":"2018-07-03T13:15:18","Actor":"shauheen","Number":"479","RawContent":null,"Title":"Cherrypick to update release for V0.3","State":"closed","Body":"Cherrypick into release for v0.3","Url":"https://github.com/dotnet/machinelearning/pull/479","RelatedDescription":"Closed or merged PR \"Cherrypick to update release for V0.3\" (#479)"},{"Id":"337846609","IsPullRequest":false,"CreatedAt":"2018-07-03T10:51:59","Actor":"maxambrogi","Number":"481","RawContent":null,"Title":"there's an alternative to the TextLoader class?I would like to add the data to the pipeline without to use a file. Regards  ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/481","RelatedDescription":"Open issue \"there's an alternative to the TextLoader class?I would like to add the data to the pipeline without to use a file. Regards  \" (#481)"},{"Id":"337753953","IsPullRequest":false,"CreatedAt":"2018-07-03T05:48:21","Actor":"sharpwood","Number":"480","RawContent":null,"Title":"When will ML.NET support deeplearning network ,such as CNTK ,tensorflow","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/480","RelatedDescription":"Open issue \"When will ML.NET support deeplearning network ,such as CNTK ,tensorflow\" (#480)"},{"Id":"337684413","IsPullRequest":true,"CreatedAt":"2018-07-02T23:50:34","Actor":"GalOshri","Number":"476","RawContent":null,"Title":"Add release notes for ML.NET 0.3","State":"closed","Body":"This adds release notes for ML.NET 0.3","Url":"https://github.com/dotnet/machinelearning/pull/476","RelatedDescription":"Closed or merged PR \"Add release notes for ML.NET 0.3\" (#476)"},{"Id":"337693132","IsPullRequest":false,"CreatedAt":"2018-07-02T23:12:21","Actor":"sfilipi","Number":"477","RawContent":null,"Title":"Additional documentation for the ML.Net types and components should live in xml docs","State":"open","Body":"Through PR #455 we introduced XML strings in the codebase, that flow to the generated CSharpApi, to better document the trainers of the Microsoft.ML.Trainers namespace. \r\n\r\nThe final destination for those XML strings should be xml files, in the 'docs' folder, parallel to the src folder. Those documents should be referenced in the CSharp api, and through the code by xml <includes> tags. ","Url":"https://github.com/dotnet/machinelearning/issues/477","RelatedDescription":"Open issue \"Additional documentation for the ML.Net types and components should live in xml docs\" (#477)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-07-07T05:30:43.7002071Z","RunDurationInMilliseconds":990}