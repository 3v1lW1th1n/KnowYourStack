{"Data":{"GitHub":{"Issues":[{"Id":"395454916","IsPullRequest":true,"CreatedAt":"2019-01-03T04:36:50","Actor":"shauheen","Number":"2005","RawContent":null,"Title":"Bump master to 0.10","State":"open","Body":"Updating the version on Master to 0.10","Url":"https://github.com/dotnet/machinelearning/pull/2005","RelatedDescription":"Open PR \"Bump master to 0.10\" (#2005)"},{"Id":"395454253","IsPullRequest":true,"CreatedAt":"2019-01-03T04:30:19","Actor":"shauheen","Number":"2004","RawContent":null,"Title":"Merge master into release/preview for 0.9","State":"open","Body":"This PR merges master into release branch for 0.9","Url":"https://github.com/dotnet/machinelearning/pull/2004","RelatedDescription":"Open PR \"Merge master into release/preview for 0.9\" (#2004)"},{"Id":"395450969","IsPullRequest":false,"CreatedAt":"2019-01-03T03:59:29","Actor":"abgoswam","Number":"2003","RawContent":null,"Title":"StaticPipe.Runtime namespace","State":"open","Body":"As part of #1697 , we have removed \"Runtime\" from namespaces\r\n\r\nDo we also get rid of the  `Microsoft.ML.StaticPipe.Runtime` namespace,  and perhaps  consolidate the code related to the Static API inside  the `Microsoft.ML.StaticPipe`  namespace  instead ?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2003","RelatedDescription":"Open issue \"StaticPipe.Runtime namespace\" (#2003)"},{"Id":"395402167","IsPullRequest":true,"CreatedAt":"2019-01-03T00:01:02","Actor":"Ivanidzo4ka","Number":"1998","RawContent":null,"Title":"Add test for linear svm and polish it's code","State":"closed","Body":"Related to https://github.com/dotnet/machinelearning/issues/1984.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1998","RelatedDescription":"Closed or merged PR \"Add test for linear svm and polish it's code\" (#1998)"},{"Id":"395416094","IsPullRequest":false,"CreatedAt":"2019-01-02T23:39:16","Actor":"Anipik","Number":"2002","RawContent":null,"Title":"Running a Dry Run for the benchmarks","State":"open","Body":"Currently we are not running benchmarks on our CI. So they keep on breaking when we change the behavior. I propose running a dry job for all the benchmarks i.e. running the benchmarks for atleast one iteration.\r\neg.\r\nKmeans was broken and fixed by https://github.com/dotnet/machinelearning/pull/1883/files\r\nSimilarly before that stoachastic Gradient benchmarks were broken\r\n\r\ncc @danmosemsft @eerhardt @adamsitnik ","Url":"https://github.com/dotnet/machinelearning/issues/2002","RelatedDescription":"Open issue \"Running a Dry Run for the benchmarks\" (#2002)"},{"Id":"395412517","IsPullRequest":true,"CreatedAt":"2019-01-02T23:19:48","Actor":"wschin","Number":"2001","RawContent":null,"Title":"Make CompositeSchema not an ISchema","State":"open","Body":"Continue removing ISchema one-by-one. It's a part of #1501.","Url":"https://github.com/dotnet/machinelearning/pull/2001","RelatedDescription":"Open PR \"Make CompositeSchema not an ISchema\" (#2001)"},{"Id":"395406579","IsPullRequest":true,"CreatedAt":"2019-01-02T22:50:33","Actor":"abgoswam","Number":"2000","RawContent":null,"Title":"WIP [Please don't review] : Arguments, Options","State":"open","Body":"TBD. Please do not review\r\n\r\n1. Rename `Arguments` to `Options`\r\n2. Pass `Options` object instead of `Action` delegate\r\n3. Provide distinct constructors/extension methods.\r\n\r\nFor #1798 ","Url":"https://github.com/dotnet/machinelearning/pull/2000","RelatedDescription":"Open PR \"WIP [Please don't review] : Arguments, Options\" (#2000)"},{"Id":"395404836","IsPullRequest":false,"CreatedAt":"2019-01-02T22:42:33","Actor":"JakeRadMSFT","Number":"1999","RawContent":null,"Title":"Unhandled Exception: System.DllNotFoundException: Unable to load DLL 'CpuMathNative' ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n### Issue\r\n\r\n- **What did you do?** Followed tutorial: https://dotnet.microsoft.com/learn/machinelearning-ai/ml-dotnet-get-started-tutorial\r\n\r\n- **What happened?** Unhandled Exception: System.DllNotFoundException: Unable to load DLL 'CpuMathNative' or one of its dependencies: The specified module could not be found.\r\n(Exception from HRESULT: 0x8007007E)\r\n   at Microsoft.ML.Runtime.Internal.CpuMath.Thunk.SumSqU(Single* ps, Int32 c)\r\n   at Microsoft.ML.Trainers.SdcaTrainerBase`3.TrainCore(IChannel ch, RoleMappedData data, LinearPredictor predictor, Int32 weightSetCount)\r\n   at Microsoft.ML.Runtime.Learners.StochasticTrainerBase`2.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Runtime.Training.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Runtime.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at myApp.Program.Main(String[] args) in C:\\Users\\jakeradzikowski\\dev\\iris\\Program.cs:line 69\r\n- **What did you expect?** Iris example to work.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1999","RelatedDescription":"Open issue \"Unhandled Exception: System.DllNotFoundException: Unable to load DLL 'CpuMathNative' \" (#1999)"},{"Id":"395384176","IsPullRequest":false,"CreatedAt":"2019-01-02T21:20:35","Actor":"wschin","Number":"1997","RawContent":null,"Title":"Need to support Poisson, Gamma, and Tweedie regressions from LightGbm","State":"open","Body":"As mentioned in #1424, for LightGbm regression, ML.NET interface only exposes L2-loss function to users.","Url":"https://github.com/dotnet/machinelearning/issues/1997","RelatedDescription":"Open issue \"Need to support Poisson, Gamma, and Tweedie regressions from LightGbm\" (#1997)"},{"Id":"395351773","IsPullRequest":false,"CreatedAt":"2019-01-02T19:24:16","Actor":"TomFinley","Number":"1996","RawContent":null,"Title":"StopwordsRemovingEstimator direct instantiation tests/samples?","State":"open","Body":"We have #1646 introduced the estimator for stopwords removal, and the estimator, as `StopwordsRemovingEstimator` and transform. Howeve,r we did not directly test it, though it is being tested through the text transform. We should probably have direct tests for it, as well as an extension emthod for the text transformation catalog through `MLContext`.\r\n\r\nThis also makes me wonder if we've added other text featurizing things. That should be checked as well.","Url":"https://github.com/dotnet/machinelearning/issues/1996","RelatedDescription":"Open issue \"StopwordsRemovingEstimator direct instantiation tests/samples?\" (#1996)"},{"Id":"395320291","IsPullRequest":false,"CreatedAt":"2019-01-02T17:23:21","Actor":"TomFinley","Number":"1995","RawContent":null,"Title":"Internalize concepts of IDataTransform/Loader/TransformTemplate.","State":"open","Body":"Before we had the `IEstimator`/`ITransformer`/`IDataView` triad (see #581), we combined all three concepts inside `IDataTransform`. The initialization, the data, *and* the data model were all conflated. This was the source for years of constant confusion internally. We of course had to abandon the idea when we were trying to make an API. Here's the interface, for reference:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/2e67134b45c9253797d0fa137054ec8da1d7ad9c/src/Microsoft.ML.Data/Data/IDataLoader.cs#L90\r\n\r\nSimilarly, before we had `IDataReaderEstimator`/`IDataReader`/`IDataView` triad, we combined all three concepts inside `IDataLoader`.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/2e67134b45c9253797d0fa137054ec8da1d7ad9c/src/Microsoft.ML.Data/Data/IDataLoader.cs#L53\r\n\r\nWe also have the old concept of `ITransformTemplate`, which the `ITransformer` interface has likewise obviated.\r\n\r\nWe've introduced the new concepts over the course of the last half year or so, which is great, yet the artifacts of the old world remain. The interfaces should be made internal so people don't stumble into using them. Further, the objects used through `ITransform` and `IDataView` should (even when still backed by an `IDataTransform` object!) be hidden so it is not obvious these concepts are being conflated internally, even if \"under the hood\" there is just a small shim to present what is (internally) an `IDataTransform` as publicly an `ITransformer`/`IDataView`. (Always with the aim, of course, of having the architecture reflect the shape it presents as its public surface, but what we can refactor over some time we can at least hide now.)","Url":"https://github.com/dotnet/machinelearning/issues/1995","RelatedDescription":"Open issue \"Internalize concepts of IDataTransform/Loader/TransformTemplate.\" (#1995)"},{"Id":"395202486","IsPullRequest":true,"CreatedAt":"2019-01-02T16:14:23","Actor":"mnboos","Number":"1994","RawContent":null,"Title":"Typo fixed: duplicate 'in case of' removed","State":"closed","Body":"There was a duplicate 'in case of' in the description of the constructor.","Url":"https://github.com/dotnet/machinelearning/pull/1994","RelatedDescription":"Closed or merged PR \"Typo fixed: duplicate 'in case of' removed\" (#1994)"},{"Id":"395020091","IsPullRequest":true,"CreatedAt":"2019-01-02T06:12:40","Actor":"Ivanidzo4ka","Number":"1988","RawContent":null,"Title":"Support back compat for ngram hash","State":"closed","Body":"fixes #1982 ","Url":"https://github.com/dotnet/machinelearning/pull/1988","RelatedDescription":"Closed or merged PR \"Support back compat for ngram hash\" (#1988)"},{"Id":"394733229","IsPullRequest":false,"CreatedAt":"2019-01-02T06:12:40","Actor":"yaeldekel","Number":"1982","RawContent":null,"Title":"NGramHashingTransformer cannot read old models","State":"closed","Body":"The serialization version was recently incremented, but we should be able to load old models using SignatureLoadDataTransform.","Url":"https://github.com/dotnet/machinelearning/issues/1982","RelatedDescription":"Closed issue \"NGramHashingTransformer cannot read old models\" (#1982)"},{"Id":"395035226","IsPullRequest":true,"CreatedAt":"2019-01-02T06:11:48","Actor":"Ivanidzo4ka","Number":"1989","RawContent":null,"Title":"Use channel info in SymSGD ","State":"closed","Body":"Fixes #1985 ","Url":"https://github.com/dotnet/machinelearning/pull/1989","RelatedDescription":"Closed or merged PR \"Use channel info in SymSGD \" (#1989)"},{"Id":"394745106","IsPullRequest":false,"CreatedAt":"2019-01-02T06:11:48","Actor":"daholste","Number":"1985","RawContent":null,"Title":"SymbolicStochasticGradientDescent always prints to console","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRan this code:\r\n```\r\nconst string trainDataPath = @\"C:\\data\\sample_train2.csv\";\r\nconst string validationDataPath = @\"C:\\data\\sample_valid2.csv\";\r\nconst string testDataPath = @\"C:\\data\\sample_test2.csv\";\r\n\r\nvar mlContext = new MLContext();\r\n\r\n// auto-infer text loader args\r\nvar textLoaderArgs = RecipeInference.MyAutoMlInferTextLoaderArguments(mlContext, trainDataPath, \"Label\");\r\n\r\n// load data\r\nvar textLoader = new TextLoader(mlContext,\r\n\tnew TextLoader.Arguments()\r\n\t{\r\n\t\tSeparator = \",\",\r\n\t\tHasHeader = true,\r\n\t\tColumn = new[]\r\n\t\t{\r\n\t\t\tnew TextLoader.Column(\"Age\", DataKind.R4, 0),\r\n\t\t\tnew TextLoader.Column(\"Workclass\", DataKind.TX, 1),\r\n\t\t\tnew TextLoader.Column(\"Fnlwgt\", DataKind.R4, 2),\r\n\t\t\tnew TextLoader.Column(\"Education\", DataKind.TX, 3),\r\n\t\t\tnew TextLoader.Column(\"EducationNum\", DataKind.R4, 4),\r\n\t\t\tnew TextLoader.Column(\"MaritalStatus\", DataKind.TX, 5),\r\n\t\t\tnew TextLoader.Column(\"Occupation\", DataKind.TX, 6),\r\n\t\t\tnew TextLoader.Column(\"Relationship\", DataKind.TX, 7),\r\n\t\t\tnew TextLoader.Column(\"Race\", DataKind.TX, 8),\r\n\t\t\tnew TextLoader.Column(\"Sex\", DataKind.TX, 9),\r\n\t\t\tnew TextLoader.Column(\"CapitalGain\", DataKind.R4, 10),\r\n\t\t\tnew TextLoader.Column(\"CapitalLoss\", DataKind.R4, 11),\r\n\t\t\tnew TextLoader.Column(\"HoursPerWeek\", DataKind.R4, 12),\r\n\t\t\tnew TextLoader.Column(\"NativeCountry\", DataKind.TX, 13),\r\n\t\t\tnew TextLoader.Column(\"Label\", DataKind.Bool, 14),\r\n\t\t}\r\n\t});\r\n\r\nvar trainData = textLoader.Read(trainDataPath);\r\nvar validationData = textLoader.Read(validationDataPath);\r\nvar testData = textLoader.Read(testDataPath);\r\n\r\n// preprocess\r\nvar preprocessorEstimator = mlContext.Transforms.Categorical.OneHotEncoding(\"Workclass\", \"Workclass\")\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Education\", \"Education\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"MaritalStatus\", \"MaritalStatus\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Occupation\", \"Occupation\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Relationship\", \"Relationship\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Race\", \"Race\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Sex\", \"Sex\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"NativeCountry\", \"NativeCountry\"))\r\n\t.Append(mlContext.Transforms.Concatenate(DefaultColumnNames.Features,\r\n\t\t\"Age\", \"Workclass\", \"Fnlwgt\", \"Education\", \"EducationNum\", \"MaritalStatus\", \"Occupation\", \"Relationship\",\r\n\t\t\"Race\", \"Sex\", \"CapitalGain\", \"CapitalLoss\", \"HoursPerWeek\", \"NativeCountry\"));\r\n\r\n// train model\r\nvar trainer = mlContext.BinaryClassification.Trainers.SymbolicStochasticGradientDescent();\r\nvar estimatorChain = preprocessorEstimator.Append(trainer);\r\nvar model = estimatorChain.Fit(trainData);\r\n```\r\n\r\n- **What happened?**\r\n```\r\nInitial learning rate is tuned to 10.000000\r\n```\r\nwas printed to the console. Looks like SymSGD learner w/ no initialization params always prints this line?\r\n\r\n- **What did you expect?**\r\nNothing to be printed to the console","Url":"https://github.com/dotnet/machinelearning/issues/1985","RelatedDescription":"Closed issue \"SymbolicStochasticGradientDescent always prints to console\" (#1985)"},{"Id":"395118902","IsPullRequest":false,"CreatedAt":"2019-01-01T22:59:51","Actor":"zish82","Number":"1993","RawContent":null,"Title":"CreateStreamingDataView does not exist in MLContext","State":"open","Body":"### System information\r\n\r\n- **All**:\r\n- **All**: \r\n\r\n### Issue\r\n\r\n- **What did you do?** Tried to access CreateStreamingDataView method\r\n- **What happened?** It does not exits in MLContext, has it moved or should i be using something else?\r\n- **What did you expect?** i expected to be able to load data using CreateStreamingDataView\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1993","RelatedDescription":"Open issue \"CreateStreamingDataView does not exist in MLContext\" (#1993)"},{"Id":"395107830","IsPullRequest":false,"CreatedAt":"2019-01-01T19:52:56","Actor":"justinormont","Number":"1992","RawContent":null,"Title":"LightGBM Random Forest","State":"open","Body":"LightGBM added [random forest support](https://github.com/Microsoft/LightGBM/pull/678) in July 2017. ML.NET should expose this functionality. \r\n\r\nThis is exposed as another booster type. Currently we support { Tree Booster, Dropout Tree Booster, and Gradient-based One-Size Sampling } boosters of LightGBM.\r\n\r\nFor our defaults for the new booster type we could copy the test:\r\nhttps://github.com/Microsoft/LightGBM/blob/fb28070e1daa500b087d3102145ae48988030195/tests/python_package_test/test_engine.py#L53-L62\r\n\r\nI don't see that LightGBM provides a default for these parameters. So we need to provide reasonable defaults for the user; without ff/bagfrac set to <1.0, LightGBM throws an error. I think `ff=0.5` & `bagfrac=0.5` may be a bit low; perhaps 0.7? As always benchmarks on representative datasets speak louder than I.\r\n\r\nThis adds to our existing FastTree Random Forest implementation, and is another implementation that could be use for #1729. ","Url":"https://github.com/dotnet/machinelearning/issues/1992","RelatedDescription":"Open issue \"LightGBM Random Forest\" (#1992)"},{"Id":"395075069","IsPullRequest":false,"CreatedAt":"2019-01-01T11:26:01","Actor":"pekspro","Number":"1991","RawContent":null,"Title":"Why do I need to add a property to my class to get Score?","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 2.2.0\r\n\r\n### Issue\r\n\r\nIn the [GitHubLabeler sample application](https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/end-to-end-apps/MulticlassClassification-GitHubLabeler) the input data is defined like this:\r\n\r\n    internal class GitHubIssue\r\n    {\r\n        public string ID;\r\n        public string Area; // This is an issue label, for example \"area-System.Threading\"\r\n        public string Title;\r\n        public string Description;\r\n    }\r\n\r\nAnd the class to get the prediction is defined like this:\r\n\r\n    internal class GitHubIssuePrediction\r\n    {\r\n        [ColumnName(\"PredictedLabel\")]\r\n        public string Area;\r\n    }\r\n\r\nI think it makes sense that you need to define the prediction class yourself since I guess it could contain any kinds of properties and types.\r\n\r\nIf you have the model loaded and a model prediction function created it’s easy to get a prediction:\r\n\r\n    GitHubIssue singleIssue = new GitHubIssue() { ID = \"Any-ID\", Title = \"Entity Framework crashes\", Description = \"When connecting to the database, EF is crashing\" };\r\n\r\n    //Predict label for single hard-coded issue\r\n    //Score\r\n    var prediction = _predFunction.Predict(singleIssue);\r\n\r\nSo far everything makes sense. But if you want to get scores of the prediction you need to change the prediction class to:\r\n\r\n    internal class GitHubIssuePrediction\r\n    {\r\n        [ColumnName(\"PredictedLabel\")]\r\n        public string Area;\r\n\r\n        [ColumnName(\"Score\")]\r\n        public float[] Score { get; set; }\r\n    }\r\n\r\nPersonally, I find this to be very unintuitive. Can’t `PredictionFunction.Predict` instead return an object like this instead? \r\n\r\n    public sealed class PredictionResult<TDst>\r\n        where TDst : class, new()\r\n    {\r\n        public float[] Score { get; set; }\r\n\r\n        public TDst Prediction { get; set; }\r\n    }\r\n\r\nWhere `TDst` would be `GitHubIssuePrediction` in this specific case. Or maybe something more fancy like this:\r\n\r\n    public sealed class PredictionResult<TDst>\r\n        where TDst : class, new()\r\n        {\r\n            public float PredictionScore { get; set; }\r\n\r\n            public TDst Prediction { get; set; }\r\n\r\n            public float[] ScoresForAllCategories { get; set; }\r\n        }\r\n\r\nAs mentioned in #1881, it would be very useful to map a score to a specific category too.","Url":"https://github.com/dotnet/machinelearning/issues/1991","RelatedDescription":"Open issue \"Why do I need to add a property to my class to get Score?\" (#1991)"},{"Id":"395060167","IsPullRequest":false,"CreatedAt":"2019-01-01T06:34:16","Actor":"yaeldekel","Number":"1990","RawContent":null,"Title":"Vector of length 0 as missing value for vector type columns is problematic","State":"open","Body":"ValueMappingTransformer returns a vector of length 0 when the value it is trying to map is not in the dictionary. When data that has a missing value like this is saved as text data, then TextLoader is not able to reload this data. For example: if the mapping is\r\n\"a\" -> 0,1\r\n\"b\" -> 1,0\r\n\"c\" -> 1,1\r\n\r\nand we apply the ValueMappingTransformer to the following data:\r\n\r\na b\r\nb c\r\nd a\r\n\r\nthe result should be:\r\n\r\na b 0 1 1 0\r\nb c 1 0 1 1\r\nd a <missing vector of length 2> 0 1\r\n\r\nbut the actual result is\r\na b 0 1 1 0\r\nb c 1 0 1 1\r\nd a 0 1\r\n\r\nwhich causes TextLoader to load the data as\r\n\r\na b 0 1 1 0\r\nb c 1 0 1 1\r\nd a 0 1 0 0\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1990","RelatedDescription":"Open issue \"Vector of length 0 as missing value for vector type columns is problematic\" (#1990)"},{"Id":"394675873","IsPullRequest":false,"CreatedAt":"2018-12-29T15:18:31","Actor":"sakopov12","Number":"1981","RawContent":null,"Title":"Is \"mlContext.Transforms.Conversion.MapKeyToValue\" call supported in 0.8 version?","State":"closed","Body":"Hello,\r\n\r\nI have installed the 0.8 version, and can see that mlContext.Transforms.Conversion.MapKeyToValue() gives me compiler error. What would be the alternative call?\r\n\r\nThank you.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1981","RelatedDescription":"Closed issue \"Is \"mlContext.Transforms.Conversion.MapKeyToValue\" call supported in 0.8 version?\" (#1981)"},{"Id":"394779080","IsPullRequest":false,"CreatedAt":"2018-12-29T09:30:26","Actor":"DevLob-zz","Number":"1987","RawContent":null,"Title":"Model Contain Text and numeric features 0.8 issue","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:W10\r\n- **.NET Version (eg., dotnet --info)**: 4.61\r\n\r\n### Issue\r\n\r\n- **What did you do?**i read training data from database then convert to to IDataView i try to learn the Model \r\nMy Model Object Contain numeric value + Text values \r\n\r\ni used 0.8 version\r\n- **What happened?** throw exception 'Column 'tagText' has values of Textwhich is not the same as earlier observed type of R4.'\r\n- **What did you expect?** should be worked as schema read correctly [observed type of R4. i don't know when this value read from]\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\n`public class NormalTagsModelFeatures\r\n    {\r\n        [Column(ordinal: \"0\", name: \"Label\")] public string Label;\r\n\r\n        [Column(\"1\")] public float fontSize;\r\n        [Column(\"2\")] public float isBold;\r\n        [Column(\"3\")] public float isItalic;\r\n        [Column(\"4\")] public float isUnderLine;\r\n        [Column(\"5\")] public float containsDot;\r\n        [Column(\"6\")] public float containsQuestionMark;\r\n        [Column(\"7\")] public string fontColor;\r\n        [Column(\"8\")] public float isAllCaps;\r\n        [Column(\"9\")] public string tagText;\r\n        [Column(\"10\")] public string firstWord;\r\n\r\n    }`\r\n\r\n`    public class NormalTagsPrediction\r\n    {\r\n        [Column(ordinal: \"0\", name: \"PredictedLabel\")]\r\n        // public string Class;\r\n        public string Label;\r\n        public float[] Score { get; set; }\r\n    }`\r\n\r\n`public  void BuildNormalTrainEvaluateAndSaveModel()\r\n        {\r\n            //Set a random seed for repeatable/deterministic results across multiple trainings.\r\n            var mlContext = new MLContext(seed: 1);\r\n\r\n            #region \"STEP 1: Common data loading configuration\"\r\n            IDataView trainingDataView = GetNormalDataSet(mlContext);\r\n            \r\n            //var env = mlContext.Data.GetEnvironment();\r\n            //IDataView trainingDataView  =mlContext.Data.ReadFromBinary(stream);\r\n            #endregion\r\n            #region \"STEP 2: Common data process configuration with pipeline data transformations\"\r\n         \r\n            var dataProcessPipeline = mlContext.Transforms.Concatenate(\"Features\", \"fontSize\",\r\n                                                                                       \"isBold\",\r\n                                                                                       \"isItalic\",\r\n                                                                                       \"isUnderLine\",\r\n                                                                                       \"containsDot\",\r\n                                                                                       \"containsQuestionMark\",\r\n                                                                                       \"isAllCaps\",\r\n                                                                                        //\"pageNo\",\r\n                                                                                        //\"tagHeight\",\r\n                                                                                        //\"tagWidth\",\r\n                                                                                        //\"NumericFeatures\"\r\n                                                                                        //\"fontColor\",\r\n                                                                                        \"tagText\",\r\n                                                                                        \"firstWord\");\r\n            var dataProcessPipeline1 = mlContext.Transforms.Text.FeaturizeText(new List<string> { \"tagText\", \"firstWord\" }, \"Features\");\r\n            \r\n\r\n            //mlContext.Transforms.CustomMapping()\r\n            #endregion\r\n            #region  \"STEP 3: Set the training algorithm, then create and config the modelBuilder\"                            \r\n            var modelBuilder = new ModelBuilder<NormalTagsModelFeatures, NormalTagsPrediction>(mlContext, dataProcessPipeline);\r\n            // We apply our selected Trainer \r\n            \r\n            var trainer = mlContext.MulticlassClassification.Trainers.StochasticDualCoordinateAscent(labelColumn: \"Label\", featureColumn: \"Features\");\r\n            \r\n            modelBuilder.AddTrainer(trainer);\r\n            #endregion\r\n            #region \"STEP 4: Train the model fitting to the DataSet\"\r\n            //The pipeline is trained on the dataset that has been loaded and transformed.\r\n            //Console.WriteLine(\"=============== Training the model ===============\");\r\n           \r\n            modelBuilder.Train(trainingDataView);\r\n            #endregion\r\n            #region \"STEP 5: Evaluate the model and show accuracy stats\"\r\n            //Console.WriteLine(\"===== Evaluating Model's accuracy with Test data =====\");\r\n            var metrics = modelBuilder.EvaluateMultiClassClassificationModel(trainingDataView, \"Label\");\r\n            Common.ConsoleHelper.PrintMultiClassClassificationMetrics(trainer.ToString(), metrics);\r\n            #endregion\r\n            #region \"STEP 6: Save/persist the trained model to a .ZIP file\r\n            //Console.WriteLine(\"=============== Saving the model to a file ===============\");\r\n            string fullFilePath = GetModelPath(\"Norm\");\r\n            UpdateNormalModelPath(fullFilePath);\r\n            modelBuilder.SaveModelAsFile(fullFilePath);\r\n            #endregion\r\n        }`\r\n\r\n![image](https://user-images.githubusercontent.com/5037612/50536401-b4d0f280-0b5c-11e9-856b-3b0cafd1a9be.png)\r\n\r\n![image](https://user-images.githubusercontent.com/5037612/50536406-c3b7a500-0b5c-11e9-8c79-2902bed261a5.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1987","RelatedDescription":"Open issue \"Model Contain Text and numeric features 0.8 issue\" (#1987)"},{"Id":"394774516","IsPullRequest":false,"CreatedAt":"2018-12-29T09:20:43","Actor":"DevLob-zz","Number":"1986","RawContent":null,"Title":"Convert CollectionDataSource  to IDataView 0.8 ","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: W10\r\n- **.NET Version (eg., dotnet --info)**: 4\r\n\r\n### Issue\r\n\r\n- **What did you do?** try reading training data from Microsoft SQL \r\n- **What happened?** no way to convert CollectionDataSource to IDataView\r\n- **What did you expect?** i expected a way to enable me to read data from Sql Server not only Txt or CSV FIle\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1986","RelatedDescription":"Closed issue \"Convert CollectionDataSource  to IDataView 0.8 \" (#1986)"},{"Id":"394743280","IsPullRequest":false,"CreatedAt":"2018-12-29T00:28:41","Actor":"daholste","Number":"1984","RawContent":null,"Title":"LinearSupportVectorMachines trainer not working","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.1\r\n\r\n### Issue\r\n\r\n**Setup code**\r\n```\r\nconst string trainDataPath = @\"C:\\data\\sample_train2.csv\";\r\nconst string validationDataPath = @\"C:\\data\\sample_valid2.csv\";\r\nconst string testDataPath = @\"C:\\data\\sample_test2.csv\";\r\n\r\nvar mlContext = new MLContext();\r\n\r\n// auto-infer text loader args\r\nvar textLoaderArgs = RecipeInference.MyAutoMlInferTextLoaderArguments(mlContext, trainDataPath, \"Label\");\r\n\r\n// load data\r\nvar textLoader = new TextLoader(mlContext,\r\n\tnew TextLoader.Arguments()\r\n\t{\r\n\t\tSeparator = \",\",\r\n\t\tHasHeader = true,\r\n\t\tColumn = new[]\r\n\t\t{\r\n\t\t\tnew TextLoader.Column(\"Age\", DataKind.R4, 0),\r\n\t\t\tnew TextLoader.Column(\"Workclass\", DataKind.TX, 1),\r\n\t\t\tnew TextLoader.Column(\"Fnlwgt\", DataKind.R4, 2),\r\n\t\t\tnew TextLoader.Column(\"Education\", DataKind.TX, 3),\r\n\t\t\tnew TextLoader.Column(\"EducationNum\", DataKind.R4, 4),\r\n\t\t\tnew TextLoader.Column(\"MaritalStatus\", DataKind.TX, 5),\r\n\t\t\tnew TextLoader.Column(\"Occupation\", DataKind.TX, 6),\r\n\t\t\tnew TextLoader.Column(\"Relationship\", DataKind.TX, 7),\r\n\t\t\tnew TextLoader.Column(\"Race\", DataKind.TX, 8),\r\n\t\t\tnew TextLoader.Column(\"Sex\", DataKind.TX, 9),\r\n\t\t\tnew TextLoader.Column(\"CapitalGain\", DataKind.R4, 10),\r\n\t\t\tnew TextLoader.Column(\"CapitalLoss\", DataKind.R4, 11),\r\n\t\t\tnew TextLoader.Column(\"HoursPerWeek\", DataKind.R4, 12),\r\n\t\t\tnew TextLoader.Column(\"NativeCountry\", DataKind.TX, 13),\r\n\t\t\tnew TextLoader.Column(\"Label\", DataKind.Bool, 14),\r\n\t\t}\r\n\t});\r\n\r\nvar trainData = textLoader.Read(trainDataPath);\r\nvar validationData = textLoader.Read(validationDataPath);\r\nvar testData = textLoader.Read(testDataPath);\r\n\r\n// preprocess\r\nvar preprocessorEstimator = mlContext.Transforms.Categorical.OneHotEncoding(\"Workclass\", \"Workclass\")\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Education\", \"Education\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"MaritalStatus\", \"MaritalStatus\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Occupation\", \"Occupation\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Relationship\", \"Relationship\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Race\", \"Race\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Sex\", \"Sex\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"NativeCountry\", \"NativeCountry\"))\r\n\t.Append(mlContext.Transforms.Concatenate(DefaultColumnNames.Features,\r\n\t\t\"Age\", \"Workclass\", \"Fnlwgt\", \"Education\", \"EducationNum\", \"MaritalStatus\", \"Occupation\", \"Relationship\",\r\n\t\t\"Race\", \"Sex\", \"CapitalGain\", \"CapitalLoss\", \"HoursPerWeek\", \"NativeCountry\"));\r\n```\r\n\r\n**Code that worked**\r\n```\r\n// train model\r\nvar trainer = mlContext.BinaryClassification.Trainers.StochasticDualCoordinateAscent();\r\nvar estimatorChain = preprocessorEstimator.Append(trainer);\r\nvar model = estimatorChain.Fit(trainData);\r\n```\r\n\r\n**Code that didn't work**\r\n```\r\n// train model\r\nvar trainer = mlContext.BinaryClassification.Trainers.LinearSupportVectorMachines();\r\nvar estimatorChain = preprocessorEstimator.Append(trainer);\r\nvar model = estimatorChain.Fit(trainData);\r\n```\r\n\r\n**Exception**\r\nSystem.InvalidOperationException: 'Weight column 'Weight' is not found'","Url":"https://github.com/dotnet/machinelearning/issues/1984","RelatedDescription":"Open issue \"LinearSupportVectorMachines trainer not working\" (#1984)"},{"Id":"394742731","IsPullRequest":false,"CreatedAt":"2018-12-29T00:22:05","Actor":"daholste","Number":"1983","RawContent":null,"Title":"FastTree LearningRate not settable thru arguments object","State":"open","Body":"### Issue\r\n\r\n- **What did you do?**\r\n```\r\n            Action<FastTreeBinaryClassificationTrainer.Arguments> argsFunc = (args) =>\r\n            {\r\n                args.LearningRates = 0.1;\r\n            };\r\n            var trainer = mlContext.BinaryClassification.Trainers.FastTree(advancedSettings: argsFunc);\r\n```\r\n- **What happened?**\r\ntrainer.Args.LearningRate = the default learning rate of 0.2\r\n\r\n- **What did you expect?**\r\ntrainer.Args.LearningRate = 0.1\r\n\r\nI think this happens because \r\n```\r\nif (Args.LearningRates != learningRate)\r\n            {\r\n                using (var ch = Host.Start($\"Setting learning rate to: {learningRate} as supplied in the direct arguments.\"))\r\n                    Args.LearningRates = learningRate;\r\n            }\r\n```\r\nin BoostingFastTree.cs","Url":"https://github.com/dotnet/machinelearning/issues/1983","RelatedDescription":"Open issue \"FastTree LearningRate not settable thru arguments object\" (#1983)"},{"Id":"394645400","IsPullRequest":false,"CreatedAt":"2018-12-28T14:11:35","Actor":"MagicMaxxx","Number":"1980","RawContent":null,"Title":"Missing Values (from a CSV file) and how TextLoader processes them","State":"open","Body":"### System information\r\n- **OS version/distro**:\r\nWindows 10 Home\r\n- **.NET Version (eg., dotnet --info)**: \r\n.NET Core 2.1.5\r\nML.NET 0.8\r\n\r\n### Issue\r\nWhen I read the Titanic data set from Kaggle and TextLoader reads missing numeric values as ZEROES. \r\n\r\n- **What did you do?**\r\nI removed a data from AGE column and I tried to use context.Transforms.IndicateMissingValues and/or context.Transforms.ReplaceMissingValues in order to process the missing values but got no luck as TextLoader processes empty/missing values as ZEROES so there are no NaN values in the Data View processed by IndicateMissingValues/ReplaceMissingValues \r\n\r\n- **What happened?**\r\nData sample:\r\n\r\nPassengerId,Survived,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked\r\n1,0,3,\"Braund, Mr. Owen Harris\",male,,1,0,A/5 21171,7.25,,S\r\nTake a look - there is no age (it goes after \"male\") but TextLoader reads the data like that passenger's age == 0\r\n\r\n- **What did you expect?**\r\nI expected to see something like NaN or similar value in the data when there is an empty space in the file in the cell/position related to the related portion of the data\r\n\r\n### Source code / logs\r\nHere is how I create the TextLoader, BTW when I use AllowQuoting = false it can't read names even if I use Separator = \",\" - it uses \" \" (the very first space in the name) as a separator\r\n            return context.Data.TextReader(new TextLoader.Arguments()\r\n            {\r\n                HasHeader = true, Separator = \",\", TrimWhitespace = true, AllowSparse = false, AllowQuoting = true, \r\n                Column = [...columns array...]\r\n            });\r\nI'd prefer to have some kind of one more settings for the TextLoader - something like NanIfEmpty (?) true/false\r\n\r\nThank you!\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1980","RelatedDescription":"Open issue \"Missing Values (from a CSV file) and how TextLoader processes them\" (#1980)"},{"Id":"394559743","IsPullRequest":true,"CreatedAt":"2018-12-28T06:32:58","Actor":"sfilipi","Number":"1979","RawContent":null,"Title":"making GetCoefficientStatistics public","State":"open","Body":"Fixes #1977 by making method GetCoefficientStatistics  public. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1979","RelatedDescription":"Open PR \"making GetCoefficientStatistics public\" (#1979)"},{"Id":"394552966","IsPullRequest":false,"CreatedAt":"2018-12-28T05:45:36","Actor":"sfilipi","Number":"1978","RawContent":null,"Title":"KeyToValueMappingTransformer need to expose the key-value map","State":"open","Body":"The key-value map is useful to some scenarios: like in multi-class it is needed to interpreting the scores for each label. ","Url":"https://github.com/dotnet/machinelearning/issues/1978","RelatedDescription":"Open issue \"KeyToValueMappingTransformer need to expose the key-value map\" (#1978)"},{"Id":"394549347","IsPullRequest":false,"CreatedAt":"2018-12-28T05:16:27","Actor":"sfilipi","Number":"1977","RawContent":null,"Title":"GetCoefficientStatistics in Microsoft.ML.Learners.LinearModelStatistics  needs to be public","State":"open","Body":"[GetCoefficientStatistics](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.StandardLearners/Standard/ModelStatistics.cs#L327) in Microsoft.ML.Learners.LinearModelStatistics  needs to be publicly accessible. \r\n\r\nThe statistics calculated provide no value, if they can't be accessed. ","Url":"https://github.com/dotnet/machinelearning/issues/1977","RelatedDescription":"Open issue \"GetCoefficientStatistics in Microsoft.ML.Learners.LinearModelStatistics  needs to be public\" (#1977)"},{"Id":"394518639","IsPullRequest":false,"CreatedAt":"2018-12-28T00:43:43","Actor":"TomFinley","Number":"1976","RawContent":null,"Title":"EvaluatorBase and IEvaluator internalization","State":"open","Body":"We should consider internalizing `IEvaluator` and all implementations of it. The reason we might be able to do so is that while the code to do evaluation must exist somewhere, we are currently exposing the way we compute metrics via `MLContext`, as we see here:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/7e21afa4612ddca53bbf9d67b84df2b58d4636c2/src/Microsoft.ML.Data/TrainContext.cs#L232\r\n\r\nSo it is not clear to me that `IEvaluator` needs to be part of our public API.\r\n\r\nIf this for some reason proves impractical for reasons I do not appreciate yet, we must then refactor the evaluators so that they are engineered so that they expose fewer of their guts for everyone to see. For example:\r\n\r\n`public sealed class AnomalyDetectionEvaluator : EvaluatorBase<AnomalyDetectionEvaluator.Aggregator>`\r\n\r\nThat we might have an `IEvaluator` and a convenience class is fine, but the generic parameter describes something that the user should not need to know about, e.g., how it collates and computes the metrics.","Url":"https://github.com/dotnet/machinelearning/issues/1976","RelatedDescription":"Open issue \"EvaluatorBase and IEvaluator internalization\" (#1976)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-03T05:30:46.3031625Z","RunDurationInMilliseconds":1030}