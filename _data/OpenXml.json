{"Data":{"Sdk":{"Events":[{"Id":"7524112260","Type":"PullRequestEvent","CreatedAt":"2018-04-13T05:22:14","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/481","RelatedDescription":"Merged pull request \"A few perf improvements\" (#481) at OfficeDev/Open-XML-SDK","RelatedBody":"- A `.Where` in the SemanticConstraintRegistry is in a hot path for validation and adds a number of allocations during validation\r\n- A few restrictions were using Regex values. These are removed where easy, and otherwise precompiled if possible\r\n- ValidationTraverser contained a lambda that was unnecessary and is on a hot path so it was allocating a large percentage of the validation memory"},{"Id":"7523852264","Type":"PullRequestEvent","CreatedAt":"2018-04-13T03:34:50","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/482","RelatedDescription":"Opened pull request \"Use marshalling to load constraint data\" (#482) at OfficeDev/Open-XML-SDK","RelatedBody":"Instead of reading byte by byte, we can just load the entire structure\r\nat a single time since all the objects are structs and have simple data\r\ntypes. This provides a good performance help and allows for easier\r\nupdates to the data structures without needing to manually rework the\r\nserialization and deserialization methods"},{"Id":"7523832549","Type":"PullRequestEvent","CreatedAt":"2018-04-13T03:27:06","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/481","RelatedDescription":"Opened pull request \"A few perf improvements\" (#481) at OfficeDev/Open-XML-SDK","RelatedBody":"- A `.Where` in the SemanticConstraintRegistry is in a hot path for validation and adds a number of allocations during validation\r\n- A few restrictions were using Regex values. These are removed where easy, and otherwise precompiled if possible\r\n- ValidationTraverser contained a lambda that was unnecessary and is on a hot path so it was allocating a large percentage of the validation memory"},{"Id":"7518726587","Type":"IssuesEvent","CreatedAt":"2018-04-12T09:18:35","Actor":"proff","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/480","RelatedDescription":"Opened issue \"static method AttributeTranslator.DicOfTranslators is not thread safe\" (#480) at OfficeDev/Open-XML-SDK","RelatedBody":"![default](https://user-images.githubusercontent.com/991922/38667774-f6e171e8-3e4a-11e8-929a-48dfa5398f2d.png)\r\nWhen loading excel files from different threads this method can be executed at same time. On screenshot we got race condition when inserting tblLook in non thread safe class Dictionary"},{"Id":"7509060465","Type":"PullRequestEvent","CreatedAt":"2018-04-10T19:06:36","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/468","RelatedDescription":"Merged pull request \"Enable saving without closing and provide a OpenXmlPackage.CanSave flag\" (#468) at OfficeDev/Open-XML-SDK","RelatedBody":"Fixes #294"},{"Id":"7509060449","Type":"IssuesEvent","CreatedAt":"2018-04-10T19:06:36","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/294","RelatedDescription":"Closed issue \"Calling Save() doesn't flush to the stream\" (#294) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\nI am writing a wrapper class for SpreadsheetDocument. **I would like to be able to Save the document more than once**. Currently the only way to force SpreadsheetDocument to flush to the stream is by calling Close() on it. Is there anyway to avoid that?\r\n\r\n**Information**\r\n\r\n- .NET Target: .Net Standard 2.0\r\n- DocumentFormat.OpenXml Version: 2.7.2\r\n\r\n**Repro**\r\n\r\n```csharp\r\nusing DocumentFormat.OpenXml;\r\nusing DocumentFormat.OpenXml.Packaging;\r\nusing DocumentFormat.OpenXml.Spreadsheet;\r\nusing System;\r\nusing System.IO;\r\n\r\nnamespace OpenXmlDemo\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            using (var stream = new MemoryStream())\r\n            {\r\n                var document = SpreadsheetDocument.Create(stream: stream,\r\n                                                          type: SpreadsheetDocumentType.Workbook,\r\n                                                          autoSave: true);\r\n\r\n                var workbookPart = document.AddWorkbookPart();\r\n                var workbook = workbookPart.Workbook = new Workbook();\r\n                var sheetsElement = new Sheets();\r\n                workbook.AppendChild(sheetsElement);\r\n\r\n                InsertSheet(document, workbookPart, sheetsElement, \"Sheet A\", 1);\r\n\r\n                // Save the workbook and document\r\n                workbook.Save();\r\n                document.Save();\r\n\r\n                // document.Close();\r\n\r\n                // Returns an empty array if the document isn't closed\r\n                // stream.Position = 0; // Some places suggested this, unfortunately this doesn't seem to help.\r\n                var bytes = stream.ToArray(); \r\n                File.WriteAllBytes(@\"D:\\sheet.xlsx\", bytes);\r\n            }\r\n        }\r\n\r\n        private static Sheet InsertSheet(SpreadsheetDocument doc,\r\n                                      WorkbookPart workbookpart,\r\n                                      Sheets sheetsElement,\r\n                                      string name,\r\n                                      uint id)\r\n        {\r\n            WorksheetPart newWorksheetPart = workbookpart.AddNewPart<WorksheetPart>();\r\n            newWorksheetPart.Worksheet = new Worksheet(new SheetData());\r\n\r\n            string relationshipId = workbookpart.GetIdOfPart(newWorksheetPart);\r\n\r\n            // Give the new worksheet a name.\r\n            if (string.IsNullOrEmpty(name))\r\n                name = \"Sheet\" + id;\r\n\r\n            // Append the new worksheet and associate it with the workbook.\r\n            Sheet sheet = new Sheet() { Id = relationshipId, SheetId = id, Name = name };\r\n            sheetsElement.AppendChild(sheet);\r\n\r\n            return sheet;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Observed**\r\n\r\nThe stream is empty.\r\n\r\n**Expected**\r\n\r\nThe stream should contain the document.\r\n"},{"Id":"7508624990","Type":"IssuesEvent","CreatedAt":"2018-04-10T17:45:36","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/479","RelatedDescription":"Opened issue \"Create an abstracted package exporter/importer\" (#479) at OfficeDev/Open-XML-SDK","RelatedBody":"Currently, there is some functionality to export/import packages to/from strings via the `ToFlatOpcâ€¦` helpers. However, it would be nice to separate this out and create a generalized export/import pattern. This issue is to track this for vNext and to gather ideas of what we could/should include in this design."},{"Id":"7508417181","Type":"IssuesEvent","CreatedAt":"2018-04-10T17:06:26","Actor":"daniel-white","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/478","RelatedDescription":"Opened issue \"Add option ToFlatOpcString to exclude whitespace.\" (#478) at OfficeDev/Open-XML-SDK","RelatedBody":"**Description**\r\n\r\n`OpenXmlDocument.ToFlatOpcString` formulates the document with a lot of whitespace - line breaks and tabs. These aren't needed in XML and creates bloat when transferring.\r\n\r\n**Information**\r\n\r\n- .NET Target: Any\r\n- DocumentFormat.OpenXml Version: 2.8.1\r\n"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[{"Id":"7523781661","Type":"PullRequestEvent","CreatedAt":"2018-04-13T03:07:27","Actor":"ocdi","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/219","RelatedDescription":"Opened pull request \"Add additional styling controls\" (#219) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"I had a need to control cell colouring, rotation for manually crafting some Excel files. I've been using this code in production since at least 2017, just thought I would share my commits if anyone else would like to use them."},{"Id":"7497493664","Type":"PullRequestEvent","CreatedAt":"2018-04-08T20:15:11","Actor":"TiagoBonin","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/218","RelatedDescription":"Opened pull request \"Allow HtmlToWmlConverterCore to recognize the \"text-align\" css property\" (#218) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"I working on a project where I have to convert an html file into a word document and insert it into a bigger word document.\r\n\r\nDuring the process I noticed that the code was not recognizing when the css property \"text-align\" was set, and because o that the text was never changing it's align.\r\n\r\nMy change consist in fixing it so the code will be able to recognize the \"text-align\" attribute.\r\n\r\nWhat I basicaly did is:\r\nCapturing every css atribute that is set in the HTML, and adding to the standard library of css properties with a foreach loop.\r\n\r\nI'm creating this pull request to try to improve the code, if I did it wrong please let me know\r\nThere are some auto corrections made by the visual studio, don't mind it."},{"Id":"7472826606","Type":"IssuesEvent","CreatedAt":"2018-04-03T13:48:13","Actor":"adamjez","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/217","RelatedDescription":"Closed issue \"ore\" (#217) at OfficeDev/Open-Xml-PowerTools","RelatedBody":""},{"Id":"7472825449","Type":"IssuesEvent","CreatedAt":"2018-04-03T13:47:58","Actor":"adamjez","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/217","RelatedDescription":"Opened issue \"ore\" (#217) at OfficeDev/Open-Xml-PowerTools","RelatedBody":""},{"Id":"7460221411","Type":"IssuesEvent","CreatedAt":"2018-03-30T18:41:29","Actor":"MatthewMcD","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/issues/143","RelatedDescription":"Closed issue \"Unable to run any PowerShell Cmdlets\" (#143) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"I am really struggling here.\r\nI cloned both Open-XML-SDK and Open-XML-PowerTools.\r\nI compiled the Open-XML-SDK\r\nI tried \r\n`Import-Module .\\Open-XML-PowerTools.psm1` and I get:\r\n> Add-Type : Cannot bind parameter 'Path' to the target. Exception setting \"Path\": \"Cannot find path 'C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-Sdk\\DocumentFormat.OpenXml\\bin\\debug\\System.IO.Packaging.dll' because it does not exist.\"\r\n> At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\AddTypes.ps1:69 char:16. -Type -Path \"$PSScriptRoot\\..\\Open-Xml-Sdk\\DocumentFormat.OpenXml\\bin ...\r\n> CategoryInfo          : WriteError: (:) [Add-Type], ParameterBindingException\r\n> FullyQualifiedErrorId : ParameterBindingFailed,Microsoft.PowerShell.Commands.AddTypeCommand\r\n> \r\n> Add-Type : (0) : Metadata file 'C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\..\\Open-Xml-Sdk\\DocumentFormat.OpenXml\\bin\\debug\\System.IO.Packaging.dll' could not be found\r\n> At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\AddTypes.ps1:70 char:1\r\n> Add-Type -ReferencedAssemblies $assemblies -Path $sources -OutputAsse ...\r\n>  CategoryInfo          : InvalidData: (Microsoft.Power...peCompilerError:AddTypeCompilerError) [Add-Type], Exception FullyQualifiedErrorId : SOURCE_CODE_ERROR,Microsoft.PowerShell.Commands.AddTypeCommand\r\n> Add-Type : Cannot add type. Compilation errors occurred.\r\n> At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\AddTypes.ps1:70 char:1\r\n> Add-Type -ReferencedAssemblies $assemblies -Path $sources -OutputAsse ...\r\n>  CategoryInfo          : InvalidData: (:) [Add-Type], InvalidOperationException\r\n> FullyQualifiedErrorId : COMPILER_ERRORS,Microsoft.PowerShell.Commands.AddTypeCommand\r\n\r\nI fixed the paths by adding \"\\net46\\ to the debug dll locations in AddTypes.ps1 Now the Import-Module works without error. When I try any cmdlet like the example:\r\n`New-Docx Out-2.docx -Comment`\r\nI get:\r\n\r\n> New-Object : Cannot find type [System.Collections.Generic.List[OpenXmlPowerTools.Source]]: verify that the assembly containing this type is loaded.\r\n> At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\Cmdlets\\New-Docx.ps1:303 char:16   $srcList = New-Object 'System.Collections.Generic.List[OpenXmlPowerT ...\r\n> CategoryInfo          : InvalidType: (:) [New-Object], PSArgumentException\r\n> FullyQualifiedErrorId : TypeNotFound,Microsoft.PowerShell.Commands.NewObjectCommand\r\n> \r\n> New-Object : Cannot find type [OpenXmlPowerTools.WmlDocument]: verify that the assembly containing this type is loaded. At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\Cmdlets\\New-Docx.ps1:404 char:13\r\n> $wml = (New-Object OpenXmlPowerTools.WmlDocument(\"DummyName.docx\" ...\r\n> CategoryInfo          : InvalidType: (:) [New-Object], PSArgumentException\r\n> FullyQualifiedErrorId : TypeNotFound,Microsoft.PowerShell.Commands.NewObjectCommand\r\n> \r\n> New-Object : Cannot find type [OpenXmlPowerTools.Source]: verify that the assembly containing this type is loaded. At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\Cmdlets\\New-Docx.ps1:411 char:17\r\n> $src = (New-Object OpenXmlPowerTools.Source($wml))\r\n> CategoryInfo          : InvalidType: (:) [New-Object], PSArgumentException\r\n> FullyQualifiedErrorId : TypeNotFound,Microsoft.PowerShell.Commands.NewObjectCommand\r\n> \r\n> You cannot call a method on a null-valued expression.\r\n> At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\Cmdlets\\New-Docx.ps1:413 char:5\r\n> $srcList.Add($src)\r\n> \r\n> CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n> FullyQualifiedErrorId : InvokeMethodOnNull\r\n> \r\n> Unable to find type [OpenXmlPowerTools.DocumentBuilder]. At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\Cmdlets\\New-Docx.ps1:351 char:26\r\n> $mergedWmlDocument = [OpenXmlPowerTools.DocumentBuilder]::BuildDo ...\r\n> CategoryInfo          : InvalidOperation: (OpenXmlPowerTools.DocumentBuilder:TypeName) [], RuntimeException FullyQualifiedErrorId : TypeNotFound\r\n> \r\n> You cannot call a method on a null-valued expression.\r\n> At C:\\Users\\ruby\\Documents\\WindowsPowerShell\\Modules\\Open-Xml-PowerTools\\Cmdlets\\New-Docx.ps1:385 char:13\r\n> $mergedWmlDocument.SaveAs($outputFi.FullName)\r\n> CategoryInfo          : InvalidOperation: (:) [], RuntimeException\r\n> FullyQualifiedErrorId : InvokeMethodOnNull\r\n> \r\n\r\nDoes the PowerShell work for anyone? I just want to use the project. I have spent several hours on and off trying to get this to work. Any help will be greatly appreciated.\r\n\r\nEven better...can I get an \"Install-Module\" option so I don't have to build it all myself?"}],"ResultType":"GitHubEvent"}},"RunOn":"2018-04-13T05:30:27.8121252Z","RunDurationInMilliseconds":1669}