{"Data":{"GitHub":{"Issues":[{"Id":"470128230","IsPullRequest":true,"CreatedAt":"2019-07-19T04:11:33","Actor":"PranovD","Number":"4022","RawContent":null,"Title":"Dnn","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4022","RelatedDescription":"Open PR \"Dnn\" (#4022)"},{"Id":"469957216","IsPullRequest":true,"CreatedAt":"2019-07-18T23:14:13","Actor":"CESARDELATORRE","Number":"4021","RawContent":null,"Title":"DatabaseLoader specs: Update on NuGet and Class library design","State":"closed","Body":"Minor update so we are more explicit about the NuGet and Class library design for this feature.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4021","RelatedDescription":"Closed or merged PR \"DatabaseLoader specs: Update on NuGet and Class library design\" (#4021)"},{"Id":"469934177","IsPullRequest":false,"CreatedAt":"2019-07-18T18:53:41","Actor":"cookt","Number":"4020","RawContent":null,"Title":"What is TModel?","State":"open","Body":"Given that the examples do not use type parameters, it would extremely helpful to include documentation of TModel especially for creating a function. \n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 5ec45442-8e5f-a544-cc9a-58483a383513\n* Version Independent ID: 040169f9-d169-cbbd-099e-f04a7a5a6b3f\n* Content: [PermutationFeatureImportanceExtensions.PermutationFeatureImportance Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet#Microsoft_ML_PermutationFeatureImportanceExtensions_PermutationFeatureImportance__1_Microsoft_ML_MulticlassClassificationCatalog_Microsoft_ML_ISingleFeaturePredictionTransformer___0__Microsoft_ML_IDataView_System_String_System_Boolean_System_Nullable_System_Int32__System_Int32_)\n* Content Source: [dotnet/xml/Microsoft.ML/PermutationFeatureImportanceExtensions.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/PermutationFeatureImportanceExtensions.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4020","RelatedDescription":"Open issue \"What is TModel?\" (#4020)"},{"Id":"469646332","IsPullRequest":false,"CreatedAt":"2019-07-18T08:50:18","Actor":"yaeldekel","Number":"4019","RawContent":null,"Title":"Add a stratified trainer to ML.NET","State":"open","Body":"Add a trainer that splits the data according to a specified categorical column, and trains a model for each category, as well as a \"default\" model on the whole dataset. At scoring time, the model corresponding to the example's category is used, unless the category was not present in the training set, in which case the default model is used.","Url":"https://github.com/dotnet/machinelearning/issues/4019","RelatedDescription":"Open issue \"Add a stratified trainer to ML.NET\" (#4019)"},{"Id":"469642403","IsPullRequest":false,"CreatedAt":"2019-07-18T08:41:49","Actor":"yaeldekel","Number":"4018","RawContent":null,"Title":"Add left join transformer","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/4018","RelatedDescription":"Open issue \"Add left join transformer\" (#4018)"},{"Id":"469640840","IsPullRequest":false,"CreatedAt":"2019-07-18T08:38:18","Actor":"yaeldekel","Number":"4017","RawContent":null,"Title":"Integrate with Vowpal Wabbit","State":"open","Body":"https://github.com/VowpalWabbit/vowpal_wabbit\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4017","RelatedDescription":"Open issue \"Integrate with Vowpal Wabbit\" (#4017)"},{"Id":"469637175","IsPullRequest":false,"CreatedAt":"2019-07-18T08:29:57","Actor":"yaeldekel","Number":"4016","RawContent":null,"Title":"Add a \"learning with counts\" transformer","State":"open","Body":"This transformation is a simple way to handle categorical features, and is explained here: https://blogs.technet.microsoft.com/machinelearning/2015/02/17/big-learning-made-easy-with-counts/\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4016","RelatedDescription":"Open issue \"Add a \"learning with counts\" transformer\" (#4016)"},{"Id":"469623733","IsPullRequest":false,"CreatedAt":"2019-07-18T07:58:11","Actor":"yaeldekel","Number":"4015","RawContent":null,"Title":"Add an expression transformer","State":"open","Body":"The expression transformer takes the expression in the form of text using syntax of a simple expression language, and performs the operation defined in the expression on the input columns in each row of the data. The transformer supports having a vector input column, in which case it applies the expression to each slot of the vector independently. The expression language is extendable to user defined operations. ","Url":"https://github.com/dotnet/machinelearning/issues/4015","RelatedDescription":"Open issue \"Add an expression transformer\" (#4015)"},{"Id":"469619889","IsPullRequest":false,"CreatedAt":"2019-07-18T07:48:33","Actor":"yaeldekel","Number":"4014","RawContent":null,"Title":"Add a loader/saver for SVMLight file format","State":"open","Body":"Many datasets are saved in the SVMLight format, describe in this page: http://svmlight.joachims.org/.\r\n\r\nIt would be useful for ML.NET to support loading data directly from files in this format.","Url":"https://github.com/dotnet/machinelearning/issues/4014","RelatedDescription":"Open issue \"Add a loader/saver for SVMLight file format\" (#4014)"},{"Id":"469456502","IsPullRequest":true,"CreatedAt":"2019-07-17T21:31:11","Actor":"michaelgsharp","Number":"4013","RawContent":null,"Title":"OneVersusAllModelParameters Strongly Typed","State":"open","Body":"Fixes #2467\r\n\r\nWe used to remove all Type information when we constructed our `OneVersusAllModelParameters`. This prevented the users from access the inner model without run-time casting.\r\n\r\nThis PR makes the `OneVersusAllModelParameters` strongly typed, and adds a strongly typed version of the `OneVersusAllTrainer` as it uses the `OneVersusAllModelParameters`. This change is no longer a breaking change to the current public api. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/4013","RelatedDescription":"Open PR \"OneVersusAllModelParameters Strongly Typed\" (#4013)"},{"Id":"469254231","IsPullRequest":true,"CreatedAt":"2019-07-17T14:37:07","Actor":"SnakyBeaky","Number":"4012","RawContent":null,"Title":"Minor typo fix in regularization documentation","State":"open","Body":"Minor typo fix `empricial` -> `empirical`\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4012","RelatedDescription":"Open PR \"Minor typo fix in regularization documentation\" (#4012)"},{"Id":"469165064","IsPullRequest":false,"CreatedAt":"2019-07-17T12:30:11","Actor":"tiborsekera","Number":"4011","RawContent":null,"Title":"Score column contains square of Euclidean distance?","State":"open","Body":"The column \"Score\" appears to contain square of Euclidean distance. Is that correct?\r\n\r\nE.g., for centroid coordinates [0,0,0] and a prediction coordinate [2,0,0], the \"Score\" would be 4, and NOT 2.\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: d93c6f58-e726-7734-06ed-c3b8f87c6a6e\r\n* Version Independent ID: bcd37e78-d924-c5c2-f5d5-745a8d586330\r\n* Content: [KMeansTrainer Class (Microsoft.ML.Trainers)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.kmeanstrainer?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers/KMeansTrainer.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers/KMeansTrainer.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @sfilipi\r\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4011","RelatedDescription":"Open issue \"Score column contains square of Euclidean distance?\" (#4011)"},{"Id":"468918945","IsPullRequest":true,"CreatedAt":"2019-07-16T23:41:58","Actor":"wangyems","Number":"4010","RawContent":null,"Title":"fixes #3992","State":"open","Body":"fixes #3992, when inputColumnNames is not provided, it is set to new[] { outputColumnName }\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4010","RelatedDescription":"Open PR \"fixes #3992\" (#4010)"},{"Id":"468891021","IsPullRequest":true,"CreatedAt":"2019-07-16T22:05:04","Actor":"artidoro","Number":"4009","RawContent":null,"Title":"Farewell to the Static API","State":"open","Body":"Fixes #3952.\r\n\r\nIn this PR I 1. remove the static API code and 2. migrate the tests to the C# API (dynamic API) and 3. stop producing the static pipe nugets.\r\n\r\nThe commits are organized logically, which should simplify the review process.","Url":"https://github.com/dotnet/machinelearning/pull/4009","RelatedDescription":"Open PR \"Farewell to the Static API\" (#4009)"},{"Id":"468421139","IsPullRequest":false,"CreatedAt":"2019-07-16T02:55:06","Actor":"Dmitry-A","Number":"4008","RawContent":null,"Title":"[AutoML] bring AutoML API code into master from feature branch","State":"open","Body":"We have been working out of a features/automl branch.  CLI is going to stay there for now but we want to bring API nuget into master.","Url":"https://github.com/dotnet/machinelearning/issues/4008","RelatedDescription":"Open issue \"[AutoML] bring AutoML API code into master from feature branch\" (#4008)"},{"Id":"468218125","IsPullRequest":true,"CreatedAt":"2019-07-16T00:01:31","Actor":"wangyems","Number":"4002","RawContent":null,"Title":"fixes #3992,  when inputColumnNames is not provided, it is set to new[] { outputColumnName }. and part of #3994(making SlotDroppingTransfomer exposed as public)","State":"closed","Body":"fixes #3992 and part of #3994(making SlotDroppingTransfomer exposed as public)\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4002","RelatedDescription":"Closed or merged PR \"fixes #3992,  when inputColumnNames is not provided, it is set to new[] { outputColumnName }. and part of #3994(making SlotDroppingTransfomer exposed as public)\" (#4002)"},{"Id":"468346816","IsPullRequest":true,"CreatedAt":"2019-07-15T21:36:19","Actor":"RadicalRayan","Number":"4007","RawContent":null,"Title":"Stop LightGbm Warning for Default Metric Input [Issue #3965 Fix]","State":"open","Body":"Issue #3965 reported that a warning, \"LightGBM] [Warning] Unknown parameter metric=\" is produced when the default metric is used. This warning came after this [commit](https://github.com/dotnet/machinelearning/pull/3859) which aimed to provide a consistent user experience from an ML.NET implementation of LightGbm with standalone LightGbm. If a user were to set `EvaluationMetric = EvaluateMetricType.Default`, they might expect that this would set the EvaluationMetric to \"\" and assigned the metric based on the objective as shown in the LightGbm docs. When the correction was made, this warning began to appear when the metric parameter was set to \"\". which was also being produced in LightGbm alone. The only way to prevent this error would be to not assign a parameter to the metric at all.\r\n\r\nThis warning has not appeared in previous versions of ML.NET and can be prevent by assigning the correct metric based on the objective as was previously done.\r\n\r\nTo prevent this warning, the changes from this [commit](https://github.com/dotnet/machinelearning/pull/3859) were reverted.","Url":"https://github.com/dotnet/machinelearning/pull/4007","RelatedDescription":"Open PR \"Stop LightGbm Warning for Default Metric Input [Issue #3965 Fix]\" (#4007)"},{"Id":"468340302","IsPullRequest":true,"CreatedAt":"2019-07-15T21:18:44","Actor":"PranovD","Number":"4006","RawContent":null,"Title":"Cleanuptodate","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4006","RelatedDescription":"Closed or merged PR \"Cleanuptodate\" (#4006)"},{"Id":"468318774","IsPullRequest":false,"CreatedAt":"2019-07-15T20:25:11","Actor":"nicolehaugen","Number":"4005","RawContent":null,"Title":"Provide a way to append\\concatentate multiple IDataViews","State":"open","Body":"### System information\r\n\r\n- ML.NET - 1.2.0: \r\n\r\n### Issue\r\n\r\nThere should be a way to append or concatenate multiple IDataViews together.\r\n\r\nHere's the scenario:\r\nThe [new ranking sample](https://github.com/dotnet/machinelearning-samples/pull/549) needs the ability to train the model using two datasets that are each loaded from a separate text file and have the same schema - specifically, there is a (1) Training dataset and (2) Validation dataset, that need to be combined.  For example, refer to step #3 in the steps outlined below which the sample is based on.\r\n\r\nHere's the steps shown in the sample - generally, the pattern to train, validate, and test a model includes the following steps:\r\n1. The model is trained on the **training** dataset.  The model's metrics are then evaluated using the **validation** dataset.\r\n2. Step #1 is repeated by retraining and reevaluating the model until the desired metrics are achieved.  The outcome of this step is a pipeline that applies the necessary data transformations and trainer.\r\n3. The pipeline is used to train on the combined **training** + **validation** datasets.  The model's metrics are then evaluated on the **testing** dataset (exactly once) -- this is the final set of metrics used to measure the model's quality.\r\n4. The final step is to retrain the pipeline on **all** of the combined **training** + **validation** +  **testing** datasets.  This model is then ready to be deployed into production.\r\n\r\nToday to achieve this, the sample has to first load the data from a text file, then create an enumerable so that the datasets can be concatenated - this process would be greatly simplified if you could append/concatenate two IDataViews together:\r\n\r\n```\r\n\r\n//Load training data (has a header)\r\nIDataView trainData = mlContext.Data.LoadFromTextFile<SearchResultData>(TrainDatasetPath, separatorChar: '\\t', hasHeader: true);\r\n\r\n//Load validation data (has a header)\r\nIDataView validationData = mlContext.Data.LoadFromTextFile<SearchResultData>(ValidationDatasetPath, separatorChar: '\\t', hasHeader: false);\r\n\r\n// Combine the training and validation datasets.\r\nvar validationDataEnum = mlContext.Data.CreateEnumerable<SearchResultData>(validationData, false);\r\nvar trainDataEnum = mlContext.Data.CreateEnumerable<SearchResultData>(trainData, false);\r\nvar trainValidationDataEnum = validationDataEnum.Concat<SearchResultData>(trainDataEnum);\r\nIDataView trainValidationData = mlContext.Data.LoadFromEnumerable<SearchResultData>(trainValidationDataEnum);\r\n```\r\n\r\nNOTE: I also considered creating a text loader to load multiple text files (as described [here])(https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.data.textloader.load?view=ml-dotnet#Microsoft_ML_Data_TextLoader_Load_Microsoft_ML_Data_IMultiStreamSource_); however, one of the data files included a header while the other didn't.  It looks like to create a TextLoader for multiple files, that the file headers must be consistent across files.\r\n\r\n### Source code / logs\r\n\r\nNote that there is a method today that provides the ability to append rows - we should consider exposing this publicly:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/70ef7ecd43b031b481a4047ea361da5e2f360336/src/Microsoft.ML.Data/DataView/AppendRowsDataView.cs#L23-L31\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4005","RelatedDescription":"Open issue \"Provide a way to append\\concatentate multiple IDataViews\" (#4005)"},{"Id":"468266314","IsPullRequest":false,"CreatedAt":"2019-07-15T18:15:28","Actor":"pieths","Number":"4004","RawContent":null,"Title":"TypeConvertingTransformer requires \"Experimental\" onnx version.","State":"open","Body":"When exporting a NimbusML pipeline which contains a predictor to ONNX, a `TypeConvertingTransformer` is sometimes inserted in the pipeline. The `TypeConvertingTransformer` currently requires the `Experimental` ONNX flag to be set in order for it to be converted to ONNX (see line 390 in `src\\Microsoft.ML.Data\\Transforms\\TypeConverting.cs`). Can this be updated to no longer require the `Experimental` flag?","Url":"https://github.com/dotnet/machinelearning/issues/4004","RelatedDescription":"Open issue \"TypeConvertingTransformer requires \"Experimental\" onnx version.\" (#4004)"},{"Id":"468254487","IsPullRequest":false,"CreatedAt":"2019-07-15T17:47:24","Actor":"baruchiro","Number":"4003","RawContent":null,"Title":"Create from enumerable after registering new type","State":"open","Body":"I think I'm missing something.\r\n\r\nWe have the Type System in `DataViewTypeManager`, and we can register a new type to map it to one of the system types. But even I register a new type to the system, when I try to load from enumerable I getting exception because the next `if`:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/02a857a7646188fec2d1cba5e187a6c9d0838e23/src/Microsoft.ML.Data/DataView/InternalSchemaDefinition.cs#L194-L195\r\n\r\nEven if I add a new type, the first condition `!itemType.TryGetDataKind(out _)` will return `!false` = `true` because my type will never be in the next code:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/c3bdaaa2a29f88a85dd91cde3fbb805001011903/src/Microsoft.ML.Core/Data/DataKind.cs#L293-L337","Url":"https://github.com/dotnet/machinelearning/issues/4003","RelatedDescription":"Open issue \"Create from enumerable after registering new type\" (#4003)"},{"Id":"468131540","IsPullRequest":true,"CreatedAt":"2019-07-15T13:35:28","Actor":"SnakyBeaky","Number":"4001","RawContent":null,"Title":"Fixing #4000 documentation and code issues","State":"open","Body":"Fixes the documentation/code snippet issues in #4000 \r\n\r\n- Changed `dv` to `dataView` for a more readable variable and aligned style with other variables in snippet.\r\n- Fixed code not using `IrisVectorData` output class\r\n- Fixed code not calling `CreateEnumerable<T>()` from `.Data`\r\n- Fixed some texts referencing variable `arr` (which existed in some previous version of this documentation file, but not anymore\r\n- Fixed minor indentation style in array initialization\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4001","RelatedDescription":"Open PR \"Fixing #4000 documentation and code issues\" (#4001)"},{"Id":"468131415","IsPullRequest":false,"CreatedAt":"2019-07-15T13:35:15","Actor":"SnakyBeaky","Number":"4000","RawContent":null,"Title":"Invalid code and missing variables in SchemaComprehension docs","State":"open","Body":"The documentation for https://github.com/dotnet/machinelearning/blob/master/docs/code/SchemaComprehension.md has invalid code (I'm assuming it worked in previous versions of the framework) and the texts reference variables that don't exist anymore in the code snippets (removed in previous commits).\r\n\r\nWas partially fixed in #2054 and #2039, but still missing some minor things.","Url":"https://github.com/dotnet/machinelearning/issues/4000","RelatedDescription":"Open issue \"Invalid code and missing variables in SchemaComprehension docs\" (#4000)"},{"Id":"467696100","IsPullRequest":false,"CreatedAt":"2019-07-13T09:18:27","Actor":"Suriman","Number":"3999","RawContent":null,"Title":"Possibility to specify the algorithm in AutoML","State":"open","Body":"There are scenarios where you know in advance the algorithms that will work better under certain data. In these cases, it would be very useful to specify through parameters what algorithms we want to test AutoML with different configuration parameters, so the time spent would be used to find better configurations of the specified algorithms, instead of trying algorithms that are known in advance to be to give worse results.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3999","RelatedDescription":"Open issue \"Possibility to specify the algorithm in AutoML\" (#3999)"},{"Id":"467636492","IsPullRequest":false,"CreatedAt":"2019-07-12T23:34:09","Actor":"pieths","Number":"3998","RawContent":null,"Title":"Support saving to ONNX for the OptionalColumnCreator transform","State":"open","Body":"When NimbusML creates pipelines for regressors, classifiers and rankers, it prepends an OptionalColumnCreator transform to the pipeline. These pipelines can not be exported in their entirety in the ONNX format because the OptionalColumnCreator is not exportable to ONNX.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3998","RelatedDescription":"Open issue \"Support saving to ONNX for the OptionalColumnCreator transform\" (#3998)"},{"Id":"467541066","IsPullRequest":false,"CreatedAt":"2019-07-12T18:18:16","Actor":"pieths","Number":"3997","RawContent":null,"Title":"Misleading error message when using Global Contrast Normalizer","State":"open","Body":"When attempting to fit a global contrast normalizer using NimbusML and providing a column of type float32 produces this error message:\r\n\r\n> Expected Single or known-size vector of Single, got Single\r\n\r\nThis error message seems to imply that using a column of type Single (float32) is valid. There are two places in `src\\Microsoft.ML.Transforms\\GcnTransform.cs` where this message is used. In either case a column of type vector is expected.\r\n\r\nShould this message be updated to be more clear about requiring a vector column?","Url":"https://github.com/dotnet/machinelearning/issues/3997","RelatedDescription":"Open issue \"Misleading error message when using Global Contrast Normalizer\" (#3997)"},{"Id":"467385182","IsPullRequest":false,"CreatedAt":"2019-07-12T16:56:33","Actor":"nighotatul","Number":"3996","RawContent":null,"Title":"How we load data in ml.net from sql server table?","State":"closed","Body":"right now, we are loading data in ml.net from csv file. but we want to load data in ml.net through sql server table or how we load data from datatable in ml.net. ","Url":"https://github.com/dotnet/machinelearning/issues/3996","RelatedDescription":"Closed issue \"How we load data in ml.net from sql server table?\" (#3996)"},{"Id":"467200962","IsPullRequest":false,"CreatedAt":"2019-07-12T03:19:02","Actor":"nicolehaugen","Number":"3995","RawContent":null,"Title":"Exception messages need to be richer\\clearer","State":"open","Body":"Many exception messages thrown are unclear - as a result, when an exception occurs, it's challenging to identify whether the issue in with the ML.NET code, with the underlying data, with how the algorithm is being applied, etc.  Often it takes stepping through the ML.NET fwk in attempt to get further context.\r\n\r\nI logged this as a single issue because I think there would be benefit in looking at all places where exceptions are being thrown\\rethrown to ensure that default exception messages aren't provided and that the messages are as clear\\rich as possible.  Let me know if you would like these broken into separate issues rather than having them combined in one.  \r\n\r\nHere are some specific examples:\r\n\r\n\r\n  | Trainer | Scenario | Actual Message | Suggested   Message\r\n-- | -- | -- | -- | --\r\n|1. | N/A | Occurs when invalid field index is provided to the LoadColumn   attribute.         For example:<br>``` [LoadColumn(100)]   public uint Label { get; set; }```<br>In the above code, the value of 100 is an invalid index value since   the underlying data has less than 100 columns. | System.ArgumentNullException: 'Value cannot be null.   Parameter   name: items' | Message should indicate which column has the issue; the reference to   parameter ‘items’ is unclear.|\r\n|2. | N/A | Occurs when Feature column is of some other type than float\\single.        For example: <br>``` [ColumnName(\"Test\"), LoadColumn(135)]   public uint Test { get; set; }``` | System.InvalidOperationException:   'Column ‘Test’ has values of UInt32, which is not the same as earlier   observed type of Single.' | It’s unclear what “same as earlier observed type” means.  Consider rewording to state that the   Feature columns must all be of a certain type (e.g. Single).\r\n|3. | LightGbm | Occurs when custom gains are specified without providing a group id   column.       For example:<br>```var customGains = new LightGbmRankingTrainer.Options();             customGains.CustomGains = new int[] { 0,   1, 2, 3 };IEstimator<ITransformer> trainer = mlContext.Ranking.Trainers.LightGbm(customGains);IEstimator<ITransformer> trainerPipeline =   dataPipeline.Append(trainer);```<br>Notice that in the above code, the Group Id isn’t being explicitly   set as follows:<br> ```customGains.RowGroupColumnName = \"GroupId\";``` | System.ArgumentOutOfRangeException: 'Need a group column.   Parameter   name: data' | ArgumentOutOfRangeException is confusing; instead, throw ArgumentNullException   or InvalidOperationException.       Message should also indicate the ‘Group Id’ column is missing\\null;   the reference to parameter ‘data’ is unclear.\r\n|4. | LightGbm | Occurs when custom gains cardinality doesn’t match the cardinality of  the relevance label values.         For example:<br>```var customGains = new LightGbmRankingTrainer.Options(); customGains.CustomGains  = new int[] { 0, 1, 2 };                customGains.RowGroupColumnName = \"GroupId\";```<br>In the underlying data, the relevance label values are: {0, 1, 2, 3,   4 } – in other words, the cardinality of the relevance label values is   greater than the specified custom gains. | System.InvalidOperationException:   'LightGBM Error, code is -1, error message is 'label (0) excel the max range   3'.' | There appears to be a typo – “excel” should say “exceeds”.  Also, the message should state that the   cardinality of the relevance label values must less than or equal to the   cardinality of the custom gains.       Note: Refer to similar issue logged directly against LightGBM: https://github.com/Microsoft/LightGBM/issues/1090\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3995","RelatedDescription":"Open issue \"Exception messages need to be richer\\clearer\" (#3995)"},{"Id":"467191139","IsPullRequest":false,"CreatedAt":"2019-07-12T02:34:56","Actor":"nicolehaugen","Number":"3994","RawContent":null,"Title":"Docs show using VectorType instead of concatenating features","State":"open","Body":"Numerous places in the docs, we show to store features as a VectorType.  However, this isn't ideal because it doesn't allow you to easily do feature engineering where you pick\\choose the most influential features to include when training a model.  Instead, to easily support feature engineering, it's recommended to concatenate your features as part of the pipeline. \r\n\r\nFor example, here are a few places where we show using a VectorType:\r\n1.) https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/load-data-ml-net#create-the-data-model\r\n2.) https://github.com/dotnet/machinelearning/blob/master/docs/code/MlNetCookBook.md#how-do-i-load-data-from-a-text-file\r\n\r\nInstead, we should show feature concatenation and explain why this is a preferred approach - for example:\r\n```\r\n   IEstimator<ITransformer> dataPipeline = mlContext.Transforms.Concatenate(FeaturesVectorName, featureCols)\r\n                .Append(mlContext.Transforms.Conversion.MapValueToKey(nameof(SearchResultData.Label)))\r\n                .Append(mlContext.Transforms.Conversion.Hash(nameof(SearchResultData.GroupId), nameof(SearchResultData.GroupId), numberOfBits: 20));\r\n```\r\nAlso, why is there a VectorType attribute?  Are there ever benefits to using this?  If not, we should consider removing.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3994","RelatedDescription":"Open issue \"Docs show using VectorType instead of concatenating features\" (#3994)"},{"Id":"467170942","IsPullRequest":false,"CreatedAt":"2019-07-12T01:02:33","Actor":"nicolehaugen","Number":"3993","RawContent":null,"Title":"Exception is thrown if NDCG > 10 is used with LightGbm for evaluating ranking","State":"open","Body":"- Version: ML.NET 1.2.0\r\n\r\nThe current code in the RankingEvaluator.cs file has the MaxTruncationLevel for NDCG (Normalized Cumulative Gain Metric) set to 10.  Also, the code currently throws an exception if the NDCG is set to a value > 10.  This is a blocking issue for ranking because it prevents the ability to measure the quality of ranking with result sets > 10.  For example, if you were attempting to rank a group of 100 results, with the MaxTruncationLevel of 10, you could only measure whether the first 10 results were ranked correctly.\r\n\r\nHere's the code:\r\n\r\n```\r\n         public RankingEvaluator(IHostEnvironment env, Arguments args)\r\n            : base(env, LoadName)\r\n        {\r\n            // REVIEW: What kind of checking should be applied to labelGains?\r\n            if (args.DcgTruncationLevel <= 0 || args.DcgTruncationLevel > Aggregator.Counters.MaxTruncationLevel)\r\n                throw Host.ExceptUserArg(nameof(args.DcgTruncationLevel), \"DCG Truncation Level must be between 1 and {0}\", Aggregator.Counters.MaxTruncationLevel);\r\n            Host.CheckUserArg(args.LabelGains != null, nameof(args.LabelGains), \"Label gains cannot be null\");\r\n...\r\n}\r\n```\r\nIt appears from the //Review comment in the above code that this functionality hasn't been fully completed.  \r\n\r\nWhile I'm unsure what the MaxTruncationLevel value should be, I have seen on a ranking contest\\example on Kaggle.com where one contest was measuring NDCG with a truncation level of up to 38.  \r\n\r\nI also noticed that in other parts of this file, the code indicates that a value between 0-100 should be allowed:\r\n\r\n```\r\n public Transform(IHostEnvironment env, IDataView input, string labelCol, string scoreCol, string groupCol,\r\n                int truncationLevel, Double[] labelGains)\r\n                : base(env, input, labelCol, scoreCol, groupCol, RegistrationName)\r\n            {\r\n                Host.CheckParam(0 < truncationLevel && truncationLevel < 100, nameof(truncationLevel),\r\n                    \"Truncation level must be between 1 and 99\");\r\n...\r\n}\r\n```\r\n\r\nAlso, refer to the linked bug since it is related to this scenario: [Ranker Evaluate doesn't allow you specify metric parameters.] (https://github.com/dotnet/machinelearning/issues/2728)","Url":"https://github.com/dotnet/machinelearning/issues/3993","RelatedDescription":"Open issue \"Exception is thrown if NDCG > 10 is used with LightGbm for evaluating ranking\" (#3993)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-07-19T05:30:41.7254698Z","RunDurationInMilliseconds":1040}