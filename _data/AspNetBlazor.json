{"Data":{"GitHubIssues":{"Issues":[{"Id":"374606375","IsPullRequest":true,"CreatedAt":"2018-10-27T04:49:31","Actor":"OmarTawfik","Number":"1619","RawContent":null,"Title":"Always return a non-null task from life cycle methods in BlazorComponent","State":"open","Body":"### Problem:\r\n\r\nImplementations of a component cannot just call `await base.On___Async()` because it *might be* null. They have to check, which leads to wasted time debugging to figure out why, and useless null checks in different components to figure out if they should await parent tasks or not.\r\n\r\n### Proposal:\r\n\r\nNever use null tasks, and always return a `Task.CompletedTask` from life cycle methods. This leads to a much cleaner implementation:\r\n\r\n```csharp\r\n        protected override async Task OnInitAsync()\r\n        {\r\n             // User specific operations\r\n            await base.OnInitAsync();\r\n        }\r\n```\r\n\r\ncc @SteveSandersonMS ","Url":"https://github.com/aspnet/Blazor/pull/1619","RelatedDescription":"Open PR \"Always return a non-null task from life cycle methods in BlazorComponent\" (#1619)"},{"Id":"374521570","IsPullRequest":true,"CreatedAt":"2018-10-26T22:38:21","Actor":"VictoriaLasso","Number":"1616","RawContent":null,"Title":"Asp","State":"closed","Body":"asp","Url":"https://github.com/aspnet/Blazor/pull/1616","RelatedDescription":"Closed or merged PR \"Asp\" (#1616)"},{"Id":"374554116","IsPullRequest":false,"CreatedAt":"2018-10-26T21:30:23","Actor":"galvesribeiro","Number":"1618","RawContent":null,"Title":"TypedArray fail to serialize","State":"open","Body":"Hello folks!\r\n\r\nWhile I was implementing [Blazor.Extensions.WebUSB](\r\nhttps://github.com/BlazorExtensions/WebUSB), I had to send/receive buffers to the USB device connected. In C#, I was sending `byte[]` down to JS and it was working perfectly fine. However, when I was sending a buffer back from JS to C#, it fail without any errors since it was unable to deserialize the `Uint8Array` into a `byte[]`. It just hang on the `resolve(array)` call.\r\n\r\nAfter a day trying to figure out what is going on, I noticed that if I convert it to a regular array it works perfectly with `Array.prototype.slice.call(new Uint8Array(out.data.buffer))`. That is very inefficient... \r\n\r\nThe reason for that (looks like) is because we don't have support to deserialize [`TypedArray`s](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) on SimpleJson...\r\n\r\nThe same problem happens on [Blazor.Extensions.SignalR](https://github.com/BlazorExtensions/SignalR) when we have a callback that expects a `byte[]`.\r\n\r\nLook at the examples [here](https://github.com/BlazorExtensions/WebUSB/blob/master/src/Blazor.Extensions.WebUSB.JS/src/USBManager.ts#L184) and [here](https://github.com/BlazorExtensions/SignalR/blob/master/src/Blazor.Extensions.SignalR.JS/src/HubConnectionManager.ts#L100).\r\n\r\nDo we have a less hacky/slow alternative to this?\r\n\r\nThanks!","Url":"https://github.com/aspnet/Blazor/issues/1618","RelatedDescription":"Open issue \"TypedArray fail to serialize\" (#1618)"},{"Id":"374553778","IsPullRequest":true,"CreatedAt":"2018-10-26T21:29:06","Actor":"Suchiman","Number":"1617","RawContent":null,"Title":"Add repository in nuspec files","State":"open","Body":"Also changes `<projectUrl>` in `Microsoft.AspNetCore.Blazor.Templates.nuspec` to be consistent with the rest.\r\n`<licenseUrl>` is also inconsistent between those two but i have no idea if this is intentional","Url":"https://github.com/aspnet/Blazor/pull/1617","RelatedDescription":"Open PR \"Add repository in nuspec files\" (#1617)"},{"Id":"374288801","IsPullRequest":false,"CreatedAt":"2018-10-26T19:26:56","Actor":"DCollart","Number":"1615","RawContent":null,"Title":"Compile error after update to 0.6","State":"closed","Body":"Hi,\r\n\r\nI just created a new blazor project (front only).\r\nEverything is working and I can compile without any issues. \r\n\r\nI tried to upgrade these two packages : \r\n- Microsoft.AspNetCore.Blazor.Browser : 0.5.1 -> 0.6\r\n- Microsoft.AspNetCore.Blazor.Build : 0.5.1 -> 0.6\r\n\r\nAnd now I have a compile error (I didn't do any change from the creation): \r\n> dotnet \"[...]\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.6.0\\targets\\../tools/Microsoft.AspNetCore.Blazor.Build.dll\" write-boot-json \"obj\\Debug\\netstandard2.0\\WebApplication3.dll\" --references \"[...]\\obj\\Debug\\netstandard2.0\\blazor\\bootjson-references.txt\" --embedded-resources \"[...]\\obj\\Debug\\netstandard2.0\\blazor\\embedded.resources.txt\" --linker-enabled --output \"[...]\\obj\\Debug\\netstandard2.0\\blazor\\blazor.boot.json\"\" exited with code -2147450730.\t\r\n\r\nThanks in advance :-)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1615","RelatedDescription":"Closed issue \"Compile error after update to 0.6\" (#1615)"},{"Id":"374041571","IsPullRequest":false,"CreatedAt":"2018-10-25T16:57:13","Actor":"Kaffeegangster","Number":"1614","RawContent":null,"Title":"Server side blazor Microsoft.JSInterop/SignalR exception when passing large strings ","State":"open","Body":"passing or returning a string>32k  with Microsoft.JSInterop throws an exception and closes SignalR connection. Do i need to implement some kind of argument chunking ? Is the blazor serialisation buffersize configurable?\r\n\r\nMicrosoft.AspNetCore.SignalR.HubConnectionHandler:Error: Error when processing requests.\r\n\r\nSystem.InvalidOperationException: Advancing examined to the end would cause pipe to deadlock because FlushAsync is waiting.\r\n   at System.IO.Pipelines.ThrowHelper.ThrowInvalidOperationException_BackpressureDeadlock()\r\n   at System.IO.Pipelines.Pipe.AdvanceReader(BufferSegment consumedSegment, Int32 consumedIndex, BufferSegment examinedSegment, Int32 examinedIndex)\r\n   at System.IO.Pipelines.Pipe.AdvanceReader(SequencePosition& consumed, SequencePosition& examined)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.AdvanceTo(SequencePosition consumed, SequencePosition examined)\r\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler`1.DispatchMessagesAsync(HubConnectionContext connection)\r\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler`1.RunHubAsync(HubConnectionContext connection)\r\nMicrosoft.AspNetCore.Hosting.Internal.WebHost:Information: Request finished in 11613.7288ms 101 ","Url":"https://github.com/aspnet/Blazor/issues/1614","RelatedDescription":"Open issue \"Server side blazor Microsoft.JSInterop/SignalR exception when passing large strings \" (#1614)"},{"Id":"373909382","IsPullRequest":false,"CreatedAt":"2018-10-25T11:52:56","Actor":"SamVogelskamp","Number":"1613","RawContent":null,"Title":"[Suggestion] Make Blazor Library content such as images referenceable in using project","State":"open","Body":"To my knowledge and experimentation there is no way to use content provided by a Blazor Library in the project it's referenced in, unless I'm missing some specification of tagHelpers that introduce this behavior.\r\n\r\nTo give an example I would like to be able to use an image located in the library's content folder by referencing to src=\"\\<LibraryName>/content/\\<image>\"","Url":"https://github.com/aspnet/Blazor/issues/1613","RelatedDescription":"Open issue \"[Suggestion] Make Blazor Library content such as images referenceable in using project\" (#1613)"},{"Id":"373814778","IsPullRequest":true,"CreatedAt":"2018-10-25T07:45:34","Actor":"chorpo","Number":"1612","RawContent":null,"Title":"Add Code of conduct to readme to streamline this repository with other under aspnet","State":"open","Body":"Add Code of conduct to readme to streamline this repository with other under aspnet","Url":"https://github.com/aspnet/Blazor/pull/1612","RelatedDescription":"Open PR \"Add Code of conduct to readme to streamline this repository with other under aspnet\" (#1612)"},{"Id":"373764337","IsPullRequest":false,"CreatedAt":"2018-10-25T04:00:56","Actor":"a3diaz","Number":"1611","RawContent":null,"Title":"DateTime.Now retrieves the UTC Time","State":"open","Body":"I have the following code in a blazor component:\r\n\r\n```\r\n@page \"/sales\"\r\n@inherits SalesBehind\r\n\r\n<div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n        <div class=\"col-4 p-2\">\r\n            <div>\r\n                <table class=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td><strong>Folio: </strong></td>\r\n                            <td>000001</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><strong>Fecha: </strong></td>\r\n                            <td>@DateTime.Now</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><strong>Sucursal: </strong></td>\r\n                            <td>Matriz</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><strong>Cliente: </strong></td>\r\n                            <td>Publico general <button class=\"btn btn-default\"><i class=\"fas fa-user\"></i></button></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div>\r\n                <img class=\"img-fluid\" src=\"/images/qr-code.png\" />\r\n\r\n                <div class=\"input-group mb-3\">\r\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Ingrese el codigo de producto\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\">\r\n                    <div class=\"input-group-append\">\r\n                        <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\"><i class=\"fas fa-plus\"></i></button>\r\n                    </div>\r\n                </div>\r\n\r\n                <button class=\"btn btn-primary btn-block\"><i class=\"fas fa-coins\"></i> Cobrar venta</button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"col-8\">\r\n            <table class=\"table table-stripped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Cantidad</th>\r\n                        <th>Descripción</th>\r\n                        <th>Precio</th>\r\n                        <th>Importe</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr><td colspan=\"4\"><strong>Productos</strong></td></tr>\r\n                    @foreach(var product in Sale.Products)\r\n                    {\r\n                    <tr>\r\n                        <td>@product.Quantity</td>\r\n                        <td>@product.ProductDescription</td>\r\n                        <td class=\"text-right\">$ @product.Price.ToString(\"0.00\")</td>\r\n                        <td class=\"text-right\">$ @product.Amount.ToString(\"0.00\")</td>\r\n                    </tr>\r\n                    }\r\n                </tbody>\r\n                <tbody>\r\n                    <tr><td colspan=\"4\"><strong>Servicios</strong></td></tr>\r\n                </tbody>\r\n            </table>\r\n            <div class=\"fixed-bottom text-right p-3\">\r\n                <span class=\"h1\">Total $ @Sale.Balance.ToString(\"0.00\")</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n```\r\n\r\nAnd this gets render:\r\n\r\n![2018-10-24 1 _li](https://user-images.githubusercontent.com/14021432/47475288-762b5e80-d7e0-11e8-8117-d512df1ecd67.jpg)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1611","RelatedDescription":"Open issue \"DateTime.Now retrieves the UTC Time\" (#1611)"},{"Id":"373147679","IsPullRequest":false,"CreatedAt":"2018-10-24T22:08:56","Actor":"MarkStega","Number":"1604","RawContent":null,"Title":"blazorlib template fails if -n parameter not used","State":"closed","Body":"If you try to create a new blazorlib project using \"dotnet new blazorlib\" the contents are placed in the current directory rather than using the current directory name for the new project name per the dotnet new documentation.","Url":"https://github.com/aspnet/Blazor/issues/1604","RelatedDescription":"Closed issue \"blazorlib template fails if -n parameter not used\" (#1604)"},{"Id":"373659224","IsPullRequest":false,"CreatedAt":"2018-10-24T20:53:23","Actor":"christoph68","Number":"1610","RawContent":null,"Title":"websockets guidance","State":"closed","Body":"I absolutely love Blazor the way it glues c# with the web.\r\nAfter some hours searching the web, I still am kind of blind about Blazor and Websockets.\r\nRemark: I cannot use SignalR since I need to connect to an existing WSS-Server.\r\nWebsockets (Client) support is essential for many scenarios that favor Blazor over any other SPA.\r\n\r\nIn order to connect to any Websocket Server from a Blazor Client, what options are there now and in future? Thanks for helping explanations.\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1610","RelatedDescription":"Closed issue \"websockets guidance\" (#1610)"},{"Id":"373567739","IsPullRequest":true,"CreatedAt":"2018-10-24T16:24:44","Actor":"hutchcodes","Number":"1609","RawContent":null,"Title":"Return completed task rather than null for empty virtual async methods.","State":"open","Body":"Also changed the OnAfterRenderAsync task to only ContinueWith if the task has not RunToCompletion so that it won't run on the completed task. OnInitAsync and OnParameterSetAsync were already handling this.","Url":"https://github.com/aspnet/Blazor/pull/1609","RelatedDescription":"Open PR \"Return completed task rather than null for empty virtual async methods.\" (#1609)"},{"Id":"373351239","IsPullRequest":false,"CreatedAt":"2018-10-24T15:51:37","Actor":"mikart143","Number":"1607","RawContent":null,"Title":"Problem with creating and opening Blazor project in Visual Studio 2017","State":"closed","Body":"Hi!\r\nI have problem with creating base Blazor project in VS17. I stick to the instruction on Blazor website. When i click OK in last window nothing happens.  VS back to the main window. Sometime VS is trying to load project but after a few seconds is not responding. I created and run with success project from the command line. Even when I open project which i made from command line, VS start not responding after a few seconds. \r\n\r\n\r\nVS17 - 15.8.7\r\n\r\nDotNetCore - 2.1.403 ","Url":"https://github.com/aspnet/Blazor/issues/1607","RelatedDescription":"Closed issue \"Problem with creating and opening Blazor project in Visual Studio 2017\" (#1607)"},{"Id":"373490025","IsPullRequest":false,"CreatedAt":"2018-10-24T13:43:08","Actor":"kswoll","Number":"1608","RawContent":null,"Title":"\"Unknown edit type: 0\" when calling StateHasChanged","State":"open","Body":"When calling `StateHasChanged` in response to a component's callback event, I get the above error in Chrome's Javascript console.  On version 0.6 of Blazor.  \r\n\r\nThe repro steps are pretty straightforward.  This is a contrived minimal example, but the idea is to respond to `CTRL-Enter` in a textbox (to save the changes, for example). First create a component named `TestComponent.cshtml`:\r\n\r\n```\r\n<input type=\"text\" bind=\"@Text\" onkeydown=\"@OnKeyDown\" />\r\n\r\n@functions {\r\n    private string text;\r\n\r\n    [Parameter]\r\n    private string Text\r\n    {\r\n        get => text;\r\n        set\r\n        {\r\n            text = value;\r\n            TextChanged?.Invoke(text);\r\n        }\r\n    }\r\n\r\n    [Parameter]\r\n    private Action<string> TextChanged { get; set; }\r\n\r\n    [Parameter]\r\n    private Action Committed { get; set; }\r\n\r\n    private void OnKeyDown(UIKeyboardEventArgs e)\r\n    {\r\n        if (e.Key == \"Enter\" && e.CtrlKey)\r\n        {\r\n            Committed?.Invoke();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThen use this component in a different file:\r\n\r\n```\r\n@if (flag)\r\n{\r\n    <TestComponent bind-Text=\"@text\" Committed=\"@OnCommitted\" />\r\n}\r\nelse\r\n{\r\n    @text\r\n}\r\n\r\n@functions {\r\n    private bool flag = true;\r\n    private string text;\r\n\r\n    private void OnCommitted()\r\n    {\r\n        flag = false;\r\n        StateHasChanged();\r\n    }\r\n}\r\n```\r\n\r\nNow type at least one character in the textbox, then hit `CTRL-Enter`.  The view doesn't re-render (i'd expect the textbox to go away and be replaced with the value of `text`) and I see the following errors in the console:\r\n\r\n```\r\nblazor.webassembly.js:1 Uncaught (in promise) Error: Microsoft.JSInterop.JSException: Unknown edit type: 0\r\nError: Unknown edit type: 0\r\n    at e.applyEdits (blazor.webassembly.js:1)\r\n    at e.updateComponent (blazor.webassembly.js:1)\r\n    ...\r\n```\r\n\r\nand\r\n\r\n```\r\nblazor.webassembly.js:1 Uncaught (in promise) Error: Microsoft.JSInterop.JSException: Cannot read property 'parentNode' of undefined\r\nTypeError: Cannot read property 'parentNode' of undefined\r\n    at Object.e [as removeLogicalChild] (blazor.webassembly.js:1)\r\n    at e.applyEdits (blazor.webassembly.js:1)\r\n   ...\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1608","RelatedDescription":"Open issue \"\"Unknown edit type: 0\" when calling StateHasChanged\" (#1608)"},{"Id":"373246704","IsPullRequest":false,"CreatedAt":"2018-10-23T23:42:59","Actor":"SteveSandersonMS","Number":"1606","RawContent":null,"Title":"Apply default memory limit in Mono env","State":"open","Body":"Recommendation from @kumpera is to set it at 128MB initially, allowing the developer to change that setting for their app if they want.\r\n\r\nIf we don't do this, and the app exceeds the amount of memory the browser wishes to give, then it fails with an obscure error instead of an OutOfMemoryException.\r\n\r\nNote to self: to set env vars for the Mono wasm runtime, call something like the following from JS before the runtime starts.\r\n\r\n    MONO.mono_wasm_setenv (\"MONO_LOG_MASK\", \"all\");","Url":"https://github.com/aspnet/Blazor/issues/1606","RelatedDescription":"Open issue \"Apply default memory limit in Mono env\" (#1606)"},{"Id":"373093906","IsPullRequest":false,"CreatedAt":"2018-10-23T23:40:05","Actor":"a3diaz","Number":"1603","RawContent":null,"Title":"Is there any local database for Blazor?","State":"closed","Body":"Actually is there any local database implemetation for Blazor? For example, WebSQL, IndexedDB or some EntityFramwork implementation (such as SQLite)","Url":"https://github.com/aspnet/Blazor/issues/1603","RelatedDescription":"Closed issue \"Is there any local database for Blazor?\" (#1603)"},{"Id":"372893199","IsPullRequest":false,"CreatedAt":"2018-10-23T23:39:02","Actor":"kingreatwill","Number":"1600","RawContent":null,"Title":"blazor.boot.json not found","State":"closed","Body":"Often occurs\r\n![image](https://user-images.githubusercontent.com/13087689/47349812-ff5e6a80-d6e6-11e8-8ce3-87abbd62adcb.png)\r\nhttps://github.com/BuiltCloud/wcoder.com","Url":"https://github.com/aspnet/Blazor/issues/1600","RelatedDescription":"Closed issue \"blazor.boot.json not found\" (#1600)"},{"Id":"373089276","IsPullRequest":false,"CreatedAt":"2018-10-23T23:37:53","Actor":"a3diaz","Number":"1602","RawContent":null,"Title":"Is there any roadmap for Blazor?","State":"closed","Body":"I'm thinking about to use blazor for a new requiriment in the job, but since it's an experimental technology I would like to know if is there any roadmap or planning for the product; for example, It's already an offical Microsoft Product? and It's a fact that Blazor reach any stable versión (I guess that I and thousands of developers really hope so)?","Url":"https://github.com/aspnet/Blazor/issues/1602","RelatedDescription":"Closed issue \"Is there any roadmap for Blazor?\" (#1602)"},{"Id":"373165311","IsPullRequest":false,"CreatedAt":"2018-10-23T19:32:58","Actor":"christiansparre","Number":"1605","RawContent":null,"Title":"Server Side Blazor - Can I serve the \"index.html\" content from a Controller action or Razor page?","State":"open","Body":"Hi, I have been playing around trying to have Azure AD authentication in a Server Side Blazor app and have tried the following:\r\n\r\nI made it work (sort of) using the \"child app\" approach that others have pointed to in other issues, like so\r\n\r\n```\r\napp.Map(\"/app\", childApp =>\r\n{\r\n    childApp.UseAuthentication();\r\n    childApp.UseServerSideBlazor<App.Startup>();\r\n});\r\n```\r\nBut using that approach I have to check if the user is authenticated in the App.cshtml `OnInit` method and while it works, I would like to simply not \"start\" the Blazor app if the user is not authenticated, but I can't really figure out if that is possible.\r\n\r\nThe other thing I have tried, to solve that, is having an MVC controller with an `/app` route where I would return the `index.html` content instead of it being served by a static file provider from the `wwwroot` folder. But that did not work as I immediately get the following error.\r\n\r\n> The SPA default page middleware could not return the default page '/index.html' because it was not found, and no other middleware handled the request.\r\n\r\nSo I'm a little lost here on how to approach this. Is it possible or am I one the wrong track?\r\n","Url":"https://github.com/aspnet/Blazor/issues/1605","RelatedDescription":"Open issue \"Server Side Blazor - Can I serve the \"index.html\" content from a Controller action or Razor page?\" (#1605)"},{"Id":"373051532","IsPullRequest":false,"CreatedAt":"2018-10-23T15:10:01","Actor":"toddlang","Number":"1601","RawContent":null,"Title":"Blazor.sln references non-existant project","State":"closed","Body":"Pull latest blazor source.  Load Blazor.sln.   test/Microsoft.JSInterop.Test fails to load.  (Doesn't exist)","Url":"https://github.com/aspnet/Blazor/issues/1601","RelatedDescription":"Closed issue \"Blazor.sln references non-existant project\" (#1601)"},{"Id":"372781058","IsPullRequest":true,"CreatedAt":"2018-10-23T02:38:21","Actor":"Gaulomatic","Number":"1599","RawContent":null,"Title":"Fix NullReferenceException when href is null","State":"open","Body":"Fix `NavLink` when the given href is null (or an empty string in the markup).","Url":"https://github.com/aspnet/Blazor/pull/1599","RelatedDescription":"Open PR \"Fix NullReferenceException when href is null\" (#1599)"},{"Id":"372597859","IsPullRequest":false,"CreatedAt":"2018-10-22T16:36:09","Actor":"demigor","Number":"1598","RawContent":null,"Title":"Blazor Components: Remove ParameterAttribute and allow fields.","State":"open","Body":"Hi,\r\n\r\nStarted to port some React components to play with Blazor. \r\nFirst thing is stumbled upon is Parameter attribute.\r\n\r\nHere is a current snippet from my code:\r\n\r\n@functions {\r\n[Parameter]\r\ndouble? left { get; set; }\r\n\r\n[Parameter]\r\ndouble? top { get; set; }\r\n\r\n[Parameter]\r\ndouble? right { get; set; }\r\n\r\n[Parameter]\r\ndouble? bottom { get; set; }\r\n\r\n[Parameter]\r\ndouble? width { get; set; }\r\n\r\n[Parameter]\r\ndouble? height { get; set; }\r\n\r\n[Parameter]\r\ndouble? star { get; set; }\r\n\r\n[Parameter]\r\ndouble? basis { get; set; }\r\n\r\n[Parameter]\r\nbool auto { get; set; }\r\n\r\n[Parameter]\r\nbool column { get; set; }\r\n\r\n[Parameter]\r\nbool absolute { get; set; }\r\n\r\n[Parameter]\r\nbool absoluteLeft { get; set; }\r\n\r\n[Parameter]\r\nbool absoluteRight { get; set; }\r\n\r\n[Parameter]\r\nbool relative { get; set; }\r\n\r\n[Parameter]\r\nbool @static { get; set; }\r\n\r\n[Parameter]\r\nbool @fixed { get; set; }\r\n\r\n[Parameter]\r\nbool fixedLeft { get; set; }\r\n\r\n[Parameter]\r\nbool fixedRight { get; set; }\r\n\r\n[Parameter]\r\nbool hidden { get; set; }\r\n\r\n[Parameter]\r\nbool wrap { get; set; }\r\n\r\n[Parameter]\r\nbool autoScroll { get; set; }\r\n\r\n[Parameter]\r\nbool crop { get; set; }\r\n\r\n[Parameter]\r\nRenderFragment ChildContent { get; set; }\r\n}\r\n\r\nI imagine that ParameterAttribute indicates properties (and only properties) which could be specified from outside. Exactly for the same reason C# has **public** property and field modifiers.\r\nSo why couldn't we for the sake of simplicity indicate parameters with public properties and fields? Each public property and field should be a parameter by default.\r\n\r\nSo the code above could look much simpler and take less time to type:\r\n\r\n@functions {\r\npublic double? left, top, right, bottom, width, height, star, basis;\r\npublic bool auto, column, absolute, absoluteLeft, absoluteRight, relative, @static, @fixed, fixedLeft, fixedRight, hidden, wrap, autoScroll, crop;\r\npublic RenderFragment ChildContent;\r\n}\r\n\r\nIf we want internal fields for state, just use private or protected members like we normally do.","Url":"https://github.com/aspnet/Blazor/issues/1598","RelatedDescription":"Open issue \"Blazor Components: Remove ParameterAttribute and allow fields.\" (#1598)"},{"Id":"372503871","IsPullRequest":false,"CreatedAt":"2018-10-22T12:40:05","Actor":"SteveSandersonMS","Number":"1597","RawContent":null,"Title":"Markup blocks don't run tryApplySpecialProperty logic","State":"open","Body":"In the Blazor.Browser.JS code, after it inserts a markup block, should run the same logic that it would if it had constructed the DOM attribute-by-attribute. But it doesn't, which means that things like:\r\n\r\n```\r\n<select value=@someValue>\r\n    <option value=\"a\">Item 1</option>\r\n    <option value=\"b\">Item 2</option>\r\n</select>\r\n```\r\n\r\n... don't pre-populate the dropdown with the correct initial selection if (for example) `someValue` equals `\"a\"`.\r\n\r\nTo fix this, we need to run a pass through the inserted subtree to apply the captured values.","Url":"https://github.com/aspnet/Blazor/issues/1597","RelatedDescription":"Open issue \"Markup blocks don't run tryApplySpecialProperty logic\" (#1597)"},{"Id":"372364246","IsPullRequest":false,"CreatedAt":"2018-10-21T22:34:16","Actor":"teeboy75","Number":"1596","RawContent":null,"Title":"Server Side Blazor + Kestrel + Windows Auth = Crash","State":"open","Body":"I am trying to setup windows Auth using kesterel on blazor server side.I have the progam setup like this:\r\n\r\nBlazor.Web.server\r\n\r\nProgram.cs\r\n\r\n     `  public static void Main(string[] args)\r\n        {\r\n            BuildWebHost(args).Run();            \r\n        }\r\n        public static IWebHost BuildWebHost(string[] args) =>\r\n            WebHost.CreateDefaultBuilder(args)\r\n            .UseHttpSys(\r\n                                        options =>\r\n                                        {\r\n                                            options.Authentication.Schemes =\r\n                                               AuthenticationSchemes.Negotiate | AuthenticationSchemes.NTLM; \r\n                                            options.Authentication.AllowAnonymous = false;                                          \r\n                                        })\r\n                .UseConfiguration(new ConfigurationBuilder()\r\n                    .AddCommandLine(args)\r\n                    .Build())\r\n                .UseStartup<Startup>()\r\n                .Build();\r\n    }\r\n`\r\n\r\nStartup.cs\r\n\r\n     `   public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            // Adds the Server-Side Blazor services, and those registered by the app project's startup.\r\n            services.AddServerSideBlazor<App.Startup>();\r\n            services.AddHttpContextAccessor();\r\n            services.AddTransient<App.HttpContextAccessor>();\r\n            services.AddResponseCompression(options =>\r\n            {\r\n                options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(new[]\r\n                {\r\n                    MediaTypeNames.Application.Octet,\r\n                    WasmMediaTypeNames.Application.Wasm,\r\n                });\r\n            });\r\n        }\r\n\r\n`\r\n\r\nBlazor.Web.App\r\n\r\nStartup.cs\r\n\r\n `public class Startup\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            // Since Blazor is running on the server, we can use an application service\r\n            // to read the forecast data.\r\n            services.AddSingleton<WeatherForecastService>();                        \r\n        }\r\n        public void Configure(IBlazorApplicationBuilder app)\r\n        {\r\n            app.AddComponent<App>(\"app\");            \r\n        }\r\n    }\r\n\r\n`\r\n   \r\nProgram.cs\r\n\r\n\r\n`public class Program\r\n    {        public static void Main(string[] args)\r\n        {\r\n            CreateHostBuilder(args).Build().Run();            \r\n        }\r\n\r\n        public static IWebAssemblyHostBuilder CreateHostBuilder(string[] args) =>\r\n            BlazorWebAssemblyHost.CreateDefaultBuilder()\r\n                .UseBlazorStartup<Startup>();\r\n    }\r\n\r\n    public class HttpContextAccessor\r\n    {\r\n        private readonly IHttpContextAccessor _httpContextAccessor;\r\n\r\n        public HttpContextAccessor(IHttpContextAccessor httpContextAccessor)\r\n        {\r\n            _httpContextAccessor = httpContextAccessor;\r\n        }\r\n\r\n        public HttpContext Context => _httpContextAccessor.HttpContext;\r\n    }\r\n`\r\n   \r\n    \r\nAuth.cshtml\r\n\r\n  `  @using System.Net.Http\r\n     @inject Blazor.Web.App.HttpContextAccessor HttpContext\r\n     @page \"/two-way-data-binding\"\r\n\r\nLogged in User: @HttpContext.Context.User.Identity.Name <br /> \r\n`\r\n\r\nIt errors when I navigate to Auth.cshtml with this exception.\r\nError:\r\nSystem.ObjectDisposedException\r\n  HResult=0x80131622\r\n  Message=Safe handle has been closed\r\n  Source=System.Private.CoreLib\r\n  StackTrace:\r\n   at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)\r\n   at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)\r\n   at Interop.Advapi32.GetTokenInformation(SafeAccessTokenHandle TokenHandle, UInt32 TokenInformationClass, SafeLocalAllocHandle TokenInformation, UInt32 TokenInformationLength, UInt32& ReturnLength)\r\n   at System.Security.Principal.WindowsIdentity.GetTokenInformation(SafeAccessTokenHandle tokenHandle, TokenInformationClass tokenInformationClass, Boolean nullOnInvalidParam)\r\n   at System.Security.Principal.WindowsIdentity.get_User()\r\n   at System.Security.Principal.WindowsIdentity.<GetName>b__46_0()\r\n   at System.Security.Principal.WindowsIdentity.<>c__DisplayClass62_0.<RunImpersonatedInternal>b__0(Object <p0>)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Security.Principal.WindowsIdentity.RunImpersonatedInternal(SafeAccessTokenHandle token, Action action)\r\n   at System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Action action)\r\n   at System.Security.Principal.WindowsIdentity.GetName()\r\n   at System.Security.Principal.WindowsIdentity.get_Name()\r\n   at Cloud.WebUI.App.Pages.TwoWayDataBinding.BuildRenderTree(RenderTreeBuilder builder)\r\n   at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch(RenderBatchBuilder batchBuilder, RenderFragment renderFragment)\r\n   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch(RenderQueueEntry renderQueueEntry)\r\n   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue()\r\n   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue(Int32 componentId, RenderFragment renderFragment)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1596","RelatedDescription":"Open issue \"Server Side Blazor + Kestrel + Windows Auth = Crash\" (#1596)"},{"Id":"372269083","IsPullRequest":true,"CreatedAt":"2018-10-21T01:29:48","Actor":"csnewman","Number":"1595","RawContent":null,"Title":"Add routing enhancements","State":"open","Body":"Attempts to add some functionality from #293 plus some other features/bug fixes.\r\n\r\n- Makes router extensible (Many aspects are now virtual methods)\r\n- Adds 404 handling via virtual method, defaults to a fallback route parameter\r\n- Adds error handling via virtual method, defaults to a error route parameter\r\n- Cache components per assembly\r\n- Allow adding and removing of assemblies from router\r\n- Makes route tables \"routes\" get only\r\n- Enables route inheritance (from component base classes)\r\n- Fixes component assembly searching (Now checks to see whether blazor is indirectly referenced)\r\n- Step closer to nested routers (BaseURI is now a parameter, and you have a lot more control over which assemblies are loaded)\r\n- Step closer to late/lazy loaded modules (You can add and remove assemblies from routers at runtime)\r\n\r\nOne important change was that RouteTables cannot be cached per assembly, as the order of the routes inside the table specifies the matching order, meaning instead the routes must be cached (route collection) and then merged and ordered. \r\n\r\nAt the moment the unit tests etc have not been updated, only the core logic just to see what you think.\r\n\r\nIn the future if an error occurs elsewhere inside the application, it might be an idea to hook into the \"handleerror\" method to route to an error page. For now it just handles routing errors.","Url":"https://github.com/aspnet/Blazor/pull/1595","RelatedDescription":"Open PR \"Add routing enhancements\" (#1595)"},{"Id":"372227142","IsPullRequest":false,"CreatedAt":"2018-10-20T16:16:22","Actor":"enetstudio","Number":"1594","RawContent":null,"Title":"Bound property not updating upon change","State":"open","Body":"In my Blazor app, I have the following input field in a view:\r\n\r\n<input bind=\"@amount.Display\" type=\"text\" />\r\nThis is bound to a property defined with the following accessors:\r\n\r\nget\r\n{\r\n    return _display;\r\n}\r\nset\r\n{\r\n    var parsed = Decimal.Parse(value);\r\n    _display = parsed.ToString(\"F2\");\r\n}\r\nThe real accessor logic is more complicated than this, but I've simplified it above to the extent that I can while still retaining the behavior that's confusing me.\r\n\r\nBasically, when the user enters \"2\", then tabs or clicks out of the input field, I'd like this to automatically be converted to \"2.00\". What's strange is that this conversion only seems to happen if the user enters a string representing a number that is different than the one already in place. For example, if the input field currently has a value of \"1.00\" and I enter \"2\", I correctly end up with \"2.00.\" But if the input field has a value of \"2.00\" and I enter \"2\", it just remains \"2\". It's as though the set accessor is not being called in this latter case, and I can't imagine why.","Url":"https://github.com/aspnet/Blazor/issues/1594","RelatedDescription":"Open issue \"Bound property not updating upon change\" (#1594)"},{"Id":"372222262","IsPullRequest":true,"CreatedAt":"2018-10-20T15:26:36","Actor":"rolshevsky","Number":"1593","RawContent":null,"Title":"Fix unreachable code in GenericComponentPass.cs","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1593","RelatedDescription":"Open PR \"Fix unreachable code in GenericComponentPass.cs\" (#1593)"},{"Id":"372195102","IsPullRequest":false,"CreatedAt":"2018-10-20T09:58:33","Actor":"roboriaan","Number":"1592","RawContent":null,"Title":"Switching from client-side to server-side. CookieAuthentication behaviour","State":"open","Body":"Hi,\r\n\r\nI'm using CookieAuthentication with a client-side blazor app. Works great.\r\n\r\nWhen I switch the app to server-side \"`services.AddServerSideBlazor`\" everything works fine except the Authentication cookie  doesn't get created on the browser. Which I assume is expected behaviour? \r\n\r\nWhat seems strange is that the user at that point can still access the protected api until the browser is refreshed (manual F5). So it does live somewhere. I might be wrong but I reckon it's something to do when the signalR connection terminates and reconnects and that the cookie is created on another process?\r\n\r\nAny ideas how I would go about getting the same behaviour on server-side?\r\nI hope it makes sense. I'll try and explain better or submit a git sample if it doesn't make sense. \r\n\r\nTIA\r\n ","Url":"https://github.com/aspnet/Blazor/issues/1592","RelatedDescription":"Open issue \"Switching from client-side to server-side. CookieAuthentication behaviour\" (#1592)"},{"Id":"372149913","IsPullRequest":true,"CreatedAt":"2018-10-19T23:53:06","Actor":"eeevans","Number":"1591","RawContent":null,"Title":"Add webpack to prereqs on readme page for the less initiated.","State":"open","Body":"Was looking to contribute and ran into missing prerequisite webpack.  That was the only other thing needed for building.","Url":"https://github.com/aspnet/Blazor/pull/1591","RelatedDescription":"Open PR \"Add webpack to prereqs on readme page for the less initiated.\" (#1591)"},{"Id":"372045401","IsPullRequest":true,"CreatedAt":"2018-10-19T17:21:00","Actor":"BickelLukas","Number":"1590","RawContent":null,"Title":"Fix razor compilation error for mixed event handler content (#1530)","State":"open","Body":"If a event Handler contained a mixture of c# and html content the compilation failed. Now it compiles down to a c# template string. \r\n\r\n`<button onclick=\"alert(@(a)b)\">...</button>`\r\nturns into \r\n`$\"alert({a}b)\"`\r\n\r\nI also renamed the other test I created in my last PR for consistency.\r\n\r\nfixes #1530 ","Url":"https://github.com/aspnet/Blazor/pull/1590","RelatedDescription":"Open PR \"Fix razor compilation error for mixed event handler content (#1530)\" (#1590)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-10-27T05:30:03.7256016Z","RunDurationInMilliseconds":1752}