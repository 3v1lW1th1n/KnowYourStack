{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7488739735","Type":"IssuesEvent","CreatedAt":"2018-04-06T03:24:44","Actor":"shravan2x","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3031","RelatedDescription":"Opened issue \"Default IDistributedCache for session\" (#3031) at aspnet/Home","RelatedBody":"I call `services.AddSession()` in the Configure section of my Startup file. I am able to store and retrieve data even without adding a distributed cache. Does `AddSession()` do this automatically?"},{"Id":"7488411137","Type":"IssuesEvent","CreatedAt":"2018-04-06T01:06:05","Actor":"shravan2x","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3030","RelatedDescription":"Opened issue \"Use same cookie for session and authentication\" (#3030) at aspnet/Home","RelatedBody":"It appears that right now, separate cookies are being created for session data and authentication, named `.AspNetCore.Session` and `.AspNetCore.Cookie`. Since both these cookies serve only to uniquely identify users, could they be combined? i.e. Have session use the authentication cookie?"},{"Id":"7487952398","Type":"IssuesEvent","CreatedAt":"2018-04-05T22:25:29","Actor":"JamesNK","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3029","RelatedDescription":"Opened issue \"HttpRequest - Gets or set\" (#3029) at aspnet/Home","RelatedBody":"https://github.com/aspnet/HttpAbstractions/blob/dev/src/Microsoft.AspNetCore.Http.Abstractions/HttpRequest.cs\r\n\r\n        /// <summary>\r\n        /// Gets or set the HTTP method.\r\n        /// </summary>\r\n        /// <returns>The HTTP method.</returns>\r\n\r\nShould say \"Gets or sets\". A lot of the properties in this class have the same typo."},{"Id":"7486663916","Type":"IssuesEvent","CreatedAt":"2018-04-05T17:54:26","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/1791","RelatedDescription":"Closed issue \"Loading a X509Certificate2 causes a CGI exception on Azure App Service\" (#1791) at aspnet/Home","RelatedBody":"I am trying to load a .p12 file into a X509Certificate2 object. \n\n**The code runs fine on my local machine.**\n\nWhenever, I run the following line **on Azure, it crashes the asp.net process with a CGI error**:\n\n`var certificate = new X509Certificate2(fileBytes, \"notasecret\", X509KeyStorageFlags.Exportable);`\n\nThe following line does **not** crash:\n\n`var cert = new X509Certificate2();`\n\nAlso, **if the password is incorrect, the server gives a normal exception** explaining that the password is incorrect:\n\n`var certificate = new X509Certificate2(fileBytes, \"wrong\");`\n\nI upgraded to 1.0.1 hoping it would solve the problem, but it **occured on both 1.0.0 and 1.0.1**.\n\nSo, to be clear:\n- Only crashes on Azure App Site (with CGI error)\n- Only happens when the cert file password is correct\n\nHere is the full code:\n\n``````\n        ```\n        var log = \"\";\n\n        var keyFileServerPath = _env.ContentRootPath + @\"\\GACert.p12\";\n        log += \"\\r\\n\" + \"Got File Path\";\n\n        var cert = new X509Certificate2();\n        log += \"\\r\\n\" + \"Created Empty Cert\";\n\n        var fileExists = System.IO.File.Exists(keyFileServerPath);\n        log += \"\\r\\n\" + \"File Exists? =\" + fileExists;\n\n        var fileBytes = System.IO.File.ReadAllBytes(keyFileServerPath);\n        log += \"\\r\\n\" + \"File Bytes.Length=\" + fileBytes.Length;\n\n        //// WRONG PASSWORD - Causes a normal Exception (so password is OK)\n        //var certificate = new X509Certificate2(fileBytes, \"wrong\");\n        //log += \"\\r\\n\" + \"Created Cert Using Bytes\";\n\n        //// FAILED - CGI Error (Crashing the Asp.Net Process)\n        //var certificate = new X509Certificate2(fileBytes, \"notasecret\", X509KeyStorageFlags.Exportable);\n        //log += \"\\r\\n\" + \"Created Cert Using Bytes\";\n``````\n\n```\n```\n"},{"Id":"7486558531","Type":"IssuesEvent","CreatedAt":"2018-04-05T17:34:17","Actor":"dougbu","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3026","RelatedDescription":"Closed issue \"System.Net.Http.Formatting.Extension 5.2.3 is not compatible with xamarinios10 (Xamarin.iOS,Version=v1.0). Package System.Net.Http.Formatting.Extension 5.2.3 supports: net (.NETFramework,Version=v0.0)\" (#3026) at aspnet/Home","RelatedBody":"I am working on a Xamarin.Forms PCL where I need to call a service for OCR(optical character recognition). The image captured by camera of the mobile device need to be passed to the service as byte stream. While calling the OCR service ,  MediaTypeFormatter under System.Net.Http.Formatting need to be passed. \r\nI added nuget package for System.Net.Http.Formatting.Extension version 5.2.3.But when I am trying build the PCL project, getting this error System.Net.Http.Formatting.Extension 5.2.3 is not compatible with xamarinios10 (Xamarin.iOS,Version=v1.0). Package System.Net.Http.Formatting.Extension 5.2.3 supports: net (.NETFramework,Version=v0.0).   I was previously able to perform same task in native Xamarin app for android without any issue. The problem seems to be with iOS. \r\n\r\nMy code is below :\r\n\r\n```c#\r\n            var imageModel = new ImageModel();\r\n            imageModel.Image = filedata.DataArray;\r\n\r\n            ///////////////////////////Call OCR Service////////////////////////////\r\n            var client = new HttpClient();\r\n            client.DefaultRequestHeaders.Accept.Clear();\r\n            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/bson\"));\r\n            MediaTypeFormatter bsonFormatter = new BsonMediaTypeFormatter();\r\n            HttpResponseMessage response = await client.PostAsync<ImageModel>(eXfinity.SL.DigiCafe.OCRApp.Utility.OCRService, imageModel, bsonFormatter);\r\n            var contents = \"\";\r\n            if (response.IsSuccessStatusCode)\r\n            {\r\n                contents = await response.Content.ReadAsStringAsync();\r\n            }\r\n```\r\n"},{"Id":"7486428447","Type":"IssuesEvent","CreatedAt":"2018-04-05T17:08:57","Actor":"pakrym","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3021","RelatedDescription":"Closed issue \"DI lifetime not validated when having a Scoped -> Singleton -> Scoped dependency chain.\" (#3021) at aspnet/Home","RelatedBody":"I've had the following wrong DI configuration:\r\n```\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n   services.AddScoped<Facade>();\r\n   services.AddSingleton<Service>();\r\n   services.AddScoped<DataAccess>();\r\n\r\n   services.AddMvc();\r\n}\r\n```\r\n\r\nWhere `Facade` depends on `Service`, and `Service `depends on `DataAccess`. Note that I've introduced a _Captive Dependency_ here: a singleton which uses a scoped dependency. \r\n\r\nASP.NET Core 2.0 should throw an exception to tell me this configuration is not valid. But it doesn't do that. Instead, I can normally run my project and the `DataAccess` becomes a singleton.\r\n\r\nWhen I replace `services.AddScoped<Facade>();` with `services.AddSingleton<Facade>();` the exception is thrown: \r\n_Cannot consume scoped service 'WebApplication1.DataAccess' from singleton 'WebApplication1.Service'._\r\n\r\nIs this a bug in ASP.NET? Does it stop the validation after it finds a scoped service which depends on a singleton service?"},{"Id":"7486104023","Type":"IssuesEvent","CreatedAt":"2018-04-05T16:08:05","Actor":"huhobocot","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3028","RelatedDescription":"Opened issue \"mvc core 2 StaticFiles midleware internal error\" (#3028) at aspnet/Home","RelatedBody":"I try to use nanoscroller js from https://jamesflorentino.github.io/nanoScrollerJS/\r\nI install package from bower and link script to _Layout.cshtml file\r\n\r\n`<script src=\"~/lib/nanoscroller/bin/javascripts/jquery.nanoscroller.js\"></script>`\r\n\r\nstart my web app ang got error\r\n\r\n`GET https://localhost:44323/lib/nanoscroller/bin/javascripts/jquery.nanoscroller.js net::ERR_ABORTED\r\nEvent:500 \r\nGET https://localhost:44323/lib/nanoscroller/bin/javascripts/jquery.nanoscroller.js 404 (Not Found)`\r\n\r\nI rename subfolder bin to dist and change link to \r\n\r\n`<script src=\"~/lib/nanoscroller/dist/javascripts/jquery.nanoscroller.js\"></script>`\r\n\r\ni update page and all fine"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7488890638","Type":"IssuesEvent","CreatedAt":"2018-04-06T04:26:07","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1642","RelatedDescription":"Closed issue \"Block overlapping incoming requests to the POST endpoint for the same connection\" (#1642) at aspnet/SignalR","RelatedBody":"We need to lock (semaphore slim) while writing to the application pipe here https://github.com/aspnet/SignalR/blob/45f4beccb9f35eb771f634bbd632b011fce005d3/src/Microsoft.AspNetCore.Sockets.Http/HttpConnectionDispatcher.cs#L455-L459. Today we're just getting lucky that clients don't make this explode."},{"Id":"7488889916","Type":"PullRequestEvent","CreatedAt":"2018-04-06T04:25:48","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1876","RelatedDescription":"Merged pull request \"Lock when sending data to connection\" (#1876) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/1642\r\n\r\nI've confirmed that the test failed before the lock."},{"Id":"7488874382","Type":"IssuesEvent","CreatedAt":"2018-04-06T04:19:17","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1842","RelatedDescription":"Closed issue \"(Http)TransportType.All\" (#1842) at aspnet/SignalR","RelatedBody":"    [Flags]\r\n    public enum TransportType\r\n    {\r\n        WebSockets = 1,\r\n        ServerSentEvents = 2,\r\n        LongPolling = 4,\r\n        All = WebSockets | ServerSentEvents | LongPolling\r\n    }\r\n\r\nThe problem with `All` is if a new transport type is added then it is out of date.\r\n\r\nCould a new transport type be added in the future? And if so would updating the `All` option to have new flags be a breaking change?"},{"Id":"7488873273","Type":"PullRequestEvent","CreatedAt":"2018-04-06T04:18:48","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1873","RelatedDescription":"Merged pull request \"HttpTransportType refactor\" (#1873) at aspnet/SignalR","RelatedBody":"- Rename file to HttpTransportType.cs\r\n- Add HttpTransportType.None\r\n- Move All to static readonly field"},{"Id":"7488795437","Type":"IssuesEvent","CreatedAt":"2018-04-06T03:46:52","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1857","RelatedDescription":"Closed issue \"Does bearer token expiration still work?\" (#1857) at aspnet/SignalR","RelatedBody":"The idea behind having accessTokenFactory was to call the factory before sending each HTTP request to obtain the current token. This way, if the user knows the current token is about to expire, they can get a new token from the server and return it from the factory to prevent from stopping the connection with an error due to an expired token. \r\nToday I found this:\r\nhttps://github.com/aspnet/SignalR/blob/32b4d5cc6ce8a938d83d473a7e0030184b008e4a/src/Microsoft.AspNetCore.Http.Connections.Client/HttpConnection.cs#L427\r\nwhich, if I read the code correctly, means that the access token value will be set once when starting the connection and SignalR will not ask the user for the token again."},{"Id":"7488794870","Type":"PullRequestEvent","CreatedAt":"2018-04-06T03:46:37","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1880","RelatedDescription":"Merged pull request \"Fix AccessTokenFactory not being called with each request\" (#1880) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/1857"},{"Id":"7488689142","Type":"PullRequestEvent","CreatedAt":"2018-04-06T03:03:49","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1880","RelatedDescription":"Opened pull request \"Fix AccessTokenFactory not being called with each request\" (#1880) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/1857"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7488408607","Type":"IssuesEvent","CreatedAt":"2018-04-06T01:05:00","Actor":"sebastienros","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7605","RelatedDescription":"Opened issue \"Routes are not found when using Microsoft.AspNetCore.All\" (#7605) at aspnet/Mvc","RelatedBody":"In the benchmarks app    \r\n\r\n```\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"$(BenchmarksAspNetCoreVersion)\" />\r\n```\r\n\r\nI can't reach mvc endpoints, but when I use\r\n```\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"$(BenchmarksAspNetCoreVersion)\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv\" Version=\"$(BenchmarksAspNetCoreVersion)\" />\r\n```\r\nThen mvc is enabled, but I get a 404 and a debug message stating no route matched.\r\n\r\nThis application uses attribute routing, so I assume the controller is not found in this case.\r\nAll other middleware work as expected.\r\nI tried with the latest aspnet core version and also a one week old one.\r\n\r\nNote: I have not yet tried the templates to repro ... doing it now"},{"Id":"7488114679","Type":"PullRequestEvent","CreatedAt":"2018-04-05T23:14:57","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7604","RelatedDescription":"Opened pull request \"Throw if multiple Body bound parameters are discovered\" (#7604) at aspnet/Mvc","RelatedBody":"Fixes #6963"},{"Id":"7487570272","Type":"IssuesEvent","CreatedAt":"2018-04-05T20:55:11","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7214","RelatedDescription":"Closed issue \"Action Filters returns an empty body in asp.net-core 2.0\" (#7214) at aspnet/Mvc","RelatedBody":"I have same problem as https://github.com/aspnet/Mvc/issues/5594 and the potential fix doesn't work.\r\nWhen Result is set, status code is changed (422) but response is empty.\r\n\r\nI tried different combinations of setting up the `actionExecutedContext.Exception` and `actionExecutedContext.ExceptionHandled`.\r\n\r\nInitial code:\r\n``` CSharp\r\npublic override void OnActionExecuted(ActionExecutedContext actionExecutedContext)\r\n{\r\n    if (actionExecutedContext.Exception is ModelValidationException validationException)\r\n    {\r\n        var result = new BadRequestObjectResult(validationException.Errors) { StatusCode = 422 };\r\n        actionExecutedContext.Exception = null;\r\n        actionExecutedContext.ExceptionHandled = true;\r\n        actionExecutedContext.Result = result;\r\n    }\r\n\r\n    base.OnActionExecuted(actionExecutedContext);\r\n}\r\n```\r\n\r\nAs well as suggested workaround:\r\n``` CSharp\r\npublic override void OnActionExecuted(ActionExecutedContext actionExecutedContext)\r\n{\r\n    if (actionExecutedContext.Exception is ModelValidationException validationException)\r\n    {\r\n        actionExecutedContext.ExceptionHandled = false; // mark exception as handled\r\n        actionExecutedContext.HttpContext.Response.Clear();\r\n        actionExecutedContext.HttpContext.Response.StatusCode = 422;\r\n        actionExecutedContext.HttpContext.Response.ContentType = new MediaTypeHeaderValue(\"application/json\").ToString();\r\n        string json = JsonConvert.SerializeObject(validationException.Errors);\r\n        actionExecutedContext.HttpContext.Response.WriteAsync(json, Encoding.UTF8).Wait();\r\n    }\r\n\r\n    base.OnActionExecuted(actionExecutedContext);\r\n}\r\n```\r\n\r\nIt works as expected on `OnActionExecuting`:\r\n``` CSharp\r\npublic override void OnActionExecuting(ActionExecutingContext actionContext)\r\n{\r\n    if (!actionContext.ModelState.IsValid)\r\n    {\r\n        //422 - Unprocessable Entity\r\n        var result = new BadRequestObjectResult(actionContext.ModelState) { StatusCode = 422 };\r\n        actionContext.Result = result;\r\n    }\r\n}\r\n```\r\n \r\nEdit:\r\nThe `ValidationException.Errors` is `Dictionary<string, IEnumerable<string>>` so that JSON structure is consistent with `actionContext.ModelState`."},{"Id":"7487559838","Type":"IssuesEvent","CreatedAt":"2018-04-05T20:53:00","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7058","RelatedDescription":"Closed issue \"Error: CS1703: System.Runtime, Version=4.1.2.0\" (#7058) at aspnet/Mvc","RelatedBody":"_From @Vohuman on November 15, 2017 5:6_\n\nWhen my MVC.core project tries to open any page, I face with the following error:\r\n\r\n> CS1703: An assembly with the same identity 'System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' has already been imported.\r\n\r\nI tried to clean Temporary folder and checked about the conflicts within the projects but I found nothing.  \n\n_Copied from original issue: dotnet/corefx#25260_"},{"Id":"7487530880","Type":"IssuesEvent","CreatedAt":"2018-04-05T20:47:07","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7266","RelatedDescription":"Closed issue \"ViewComponent.InvokeAsync method not discovered correctly after migration to Aspnet 2.0\" (#7266) at aspnet/Mvc","RelatedBody":"```\r\nMicrosoft.AspNetCore.Mvc.Razor.Compilation.CompilationFailedException: One or more compilation failures occurred:\r\n(0,0): Error RZ3900: Could not find an 'Invoke' or 'InvokeAsync' method for the view component 'TestViewComponent'\r\n\r\n  w Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\r\n   w Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CreateCacheEntry(String normalizedPath)\r\n\r\n   w System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   w System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   w Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)\r\n   w Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet`1 expirationTokens, String relativePath, Boolean isMainPage)\r\n   w Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.OnCacheMiss(ViewLocationExpanderContext expanderContext, ViewLocationCacheKey cacheKey)\r\n   w Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromViewLocations(ActionContext actionContext, String pageName, Boolean isMainPage)\r\n   w Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   w Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   w Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor.FindView(ActionContext actionContext, ViewResult viewResult)\r\n   w System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   w Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)\r\n   w Microsoft.AspNetCore.Mvc.ViewResult.<ExecuteResultAsync>d__26.MoveNext()\r\n```\r\n\r\n\r\nAfter migration I had to add following code to all ViewComponents:\r\n```\r\n        public override Task<IViewComponentResult> InvokeAsync(int someId)\r\n        {\r\n            return base.InvokeAsync(someId);\r\n        }\r\n```\r\nI have base:\r\n`public abstract class MyViewComponent<X, Y>` with method:\r\n`public virtual async Task<IViewComponentResult> InvokeAsync([UsedImplicitly] int someId)`\r\n\r\nThis worked perfectly fine before 2.0.\r\n\r\nI've found error message `Could not find an '{0}' or '{1}' method for the view component '{2}'.` in mvc source code and tried launching `DefaultViewComponentDescriptorProvider.FindMethod` on my TestViewComponent class, and it was discovered correctly (without exception).\r\n\r\nI am unable to create repo reproducing this. If I just create Aspnet2.0 application it works, If I try to extract controllers and viewComponents to separate assembly I am getting UnresolvedReferences to everything.\r\n\r\nI have ClassLibrary with Startup, my Controllers and ViewComponents, Mvc references, etc. Then I have WebApplication just with Program.cs pointing to dll and views. Running on full framework .net 4.6.1 on windows.\r\n\r\n"},{"Id":"7487504383","Type":"IssuesEvent","CreatedAt":"2018-04-05T20:41:37","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7349","RelatedDescription":"Closed issue \"Do not require `pageName` parameters to start with a '/'\" (#7349) at aspnet/Mvc","RelatedBody":"`pageName` parameters in `PageConventionCollection` extension methods are documented as *relative* paths. Though the examples show leading slashes, it's unexpected that this extra character is required.\r\n\r\ne.g.\r\n```\r\nAn error occurred while starting the application.\r\nArgumentException: 'Contact' is not a valid page name. A page name is path relative to the Razor Pages root directory that starts with a leading forward slash ('/') and does not contain the file extension e.g \"/Users/Edit\".\r\nParameter name: pageName\r\nMicrosoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.EnsureValidPageName(string pageName)\r\n\r\nArgumentException: 'Contact' is not a valid page name. A page name is path relative to the Razor Pages root directory that starts with a leading forward slash ('/') and does not contain the file extension e.g \"/Users/Edit\".\r\n Parameter name: pageName\r\nMicrosoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.EnsureValidPageName(string pageName)\r\nMicrosoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection.AddAreaPageRouteModelConvention(string areaName, string pageName, Action<PageRouteModel> action)\r\nMicrosoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AddAreaPageRoute(PageConventionCollection conventions, string areaName, string pageName, string route)\r\nPages.areas._207.Startup+<>c.<ConfigureServices>b__4_3(RazorPagesOptions options) in Startup.cs\r\n-\r\n            services\r\n                .AddMvc()\r\n                .SetCompatibilityVersion(CompatibilityVersion.Version_2_0)\r\n                .AddRazorPagesOptions(options =>\r\n                {\r\n                    options.AllowAreas = false;\r\n                    options.Conventions\r\n                        .AddAreaPageRoute(areaName: \"MyArea\", pageName: \"Contact\", route: \"/MyContact\")\r\n                        .AuthorizeAreaPage(areaName: \"MyArea\", pageName: \"Contact\");\r\n                });\r\n        }\r\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n...\r\n```"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7488380870","Type":"IssuesEvent","CreatedAt":"2018-04-06T00:53:37","Actor":"mderriey","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1738","RelatedDescription":"Opened issue \"Would it be possible to separate the Compat DbContext and CookieInterop classes in separate NuGet packages?\" (#1738) at aspnet/Identity","RelatedBody":"Hi there :wave:,\r\n\r\nWe have an existing EF6-, Identity v2-based solution that targets .NET 4.5.1.\r\n\r\nWe want to create a new ASP.NET Core 2.0 application that targets the same database.\r\nSince ASP.NET Core only supports Identity v3, it means the schema needs to be updated.\r\n\r\nThis is where the `Microsoft.AspNet.Identity.AspNetCoreCompat` comes into play.\r\nFrom what I understand, this package allows an application based on Identity v2 to be compatible with the Identity v3 schema. This is done by using the classes in that package.\r\n\r\nNow, in our case, since we want to keep the Identity v2 bits running as-is, we're not interested in sharing cookies between the v2 and v3 app. Still, the package comes with the OWIN-compatible secure data format that allows it to decrypt cookies issues with the new .NET Core DataProtection stack.\r\n\r\nThis has two implications for us:\r\n\r\n - The need to upgrade every single project that uses the ASP.NET Identity v2 to .NET 4.6.1 to be able to install the NuGet package\r\n - Since it depends on the new DataProtection stack and the OWIN-interop, it installs 27 dependent packages that we don't use\r\n\r\nIs there a possibility to separate these two capabilities in separate NuGet packages?\r\n"},{"Id":"7488264414","Type":"IssuesEvent","CreatedAt":"2018-04-06T00:08:03","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1737","RelatedDescription":"Opened issue \"[Preview2-Validation] Pages under Account/Manage loose the 'Title' information from ViewData\" (#1737) at aspnet/Identity","RelatedBody":"For example, when we go to `Manage` page, we should see the title of the html page to be like `Profile - <application-name>` but we only get ` - <application-name>`.\r\n\r\n@pranavkm and I debugged through this and think that the cause of this issue could be with how Identity UI uses a model type(abstract) on the view versus the actual type(implementation). Following line of code is a suspect:\r\nhttps://github.com/aspnet/Mvc/commit/7127bb5dbbb07eb325a2852ac9a91be0cf443205#diff-0901f55a5e636aeef89b9663dafcb625R171"},{"Id":"7487312237","Type":"IssuesEvent","CreatedAt":"2018-04-05T20:02:18","Actor":"dougbu","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1736","RelatedDescription":"Opened issue \"/Identity/Account/ResetPassword page is not reachable when auth required globally\" (#1736) at aspnet/Identity","RelatedBody":"Looks like at least one page was missed when fixing #1617 \r\n## Repro steps\r\n1. `dotnet new mvc --name netcoreIndividualAuth --auth Individual --use-local-db` (doubt `--use-local-db` is mandatory)\r\n2. `cd netcoreIndividualAuth`\r\n3. Open project in Visual Studio\r\n4. Edit `Startup.ConfigureServices(...)` to require an authenticated user globally i.e. change `services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);` to\r\n  ``` c#\r\n  services\r\n      .AddMvc(configuration =>\r\n      {\r\n          var policy = new AuthorizationPolicyBuilder()\r\n              .RequireAuthenticatedUser()\r\n              .Build();\r\n          configuration.Filters.Add(new AuthorizeFilter(policy));\r\n      })\r\n      .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\r\n  ```\r\n\r\n5. Start app in the debugger\r\n6. Ensure debug option \"Enable Just My Code\" is disabled and \"Microsoft Symbol Servers\" are enabled under \"Symbols\"\r\n7. Set C# function breakpoint at `Microsoft.AspNetCore.Identity.UI.Services.EmailSender.SendEmailAsync` \r\n8. In browser, register a new user\r\n9. In debugger, copy the URL in the `htmlMessage` parameter\r\n10. In browser, head to the copied URL but change `&amp;code` to `&code`\r\n11. In browser, log out, click on \"Forgot your password\", then enter the new user's email and click Submit\r\n12. In debugger, copy the URL in the `htmlMessage` parameter\r\n13. In browser, head to the copied URL\r\n\r\n### Expected\r\n- Land on /Identity/Account/ForgotPasswordConfirmation page after step 11\r\n- Land on /Identity/Account/ResetPassword page after step 13\r\n### Actual\r\nRedirected to the login page again in both cases i.e. both page models lack `[AllowAnonymous]` though the lack in /Identity/Account/ResetPassword is more troublesome.\r\n\r\n----\r\nThis is a small part of #1617 which does not work end-to-end. Found while verifying (aspnet/Release#263) with the 2.1.300-preview2-008523 SDK and Microsoft.AspNetCore.Identity.UI 2.1.0-preview2-30552."},{"Id":"7482980019","Type":"IssuesEvent","CreatedAt":"2018-04-05T05:13:01","Actor":"DamianEdwards","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1735","RelatedDescription":"Opened issue \"Localize the default UI\" (#1735) at aspnet/Identity","RelatedBody":"Now that we have Identity UI in a library, we should consider having it use `IViewLocalizer` and `IStringLocalizer` to support localization of the various strings. I think it might be possible to just wrap all strings with calls to these interfaces, but **not** provide any resources, but rather have them picked up via the app if they're provided and configured correctly (we added features in 2.0 if I recall to enable this scenario)."},{"Id":"7476557947","Type":"IssuesEvent","CreatedAt":"2018-04-04T03:52:17","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1732","RelatedDescription":"Closed issue \"Make UserManager<TUser> implement IUserManager<TUser>\" (#1732) at aspnet/Identity","RelatedBody":"We have to go through an insane amount of mocking (see #344) and creating fake testing classes to get around the fact that UserManager<TUser> does not implement a service interface like just about everything else does when we want to test our code that consumes UserManager<TUser>'s services.  This is silly.  We are not testing UserManager<TUser>, we should not have to mock its dependencies, or include its functionality in our own tests.\r\n\r\nRight now, to support multiple services that use UserManager<TUser> we have to make something like this:\r\n\r\n```\r\n\tpublic class FakeUserManagerDependencies<T> where T : class\r\n\t{\r\n\t\tpublic readonly Mock<IdentityErrorDescriber> MockedIdentityErrorDescriber = new Mock<IdentityErrorDescriber>();\r\n\t\tpublic readonly Mock<IOptions<IdentityOptions>> MockedIdentityOptions = new Mock<IOptions<IdentityOptions>>();\r\n\t\tpublic readonly Mock<ILogger<UserManager<T>>> MockedLogger = new Mock<ILogger<UserManager<T>>>();\r\n\t\tpublic readonly Mock<ILookupNormalizer> MockedLookupNormalizer = new Mock<ILookupNormalizer>();\r\n\t\tpublic readonly Mock<IPasswordHasher<T>> MockedPasswordHasher = new Mock<IPasswordHasher<T>>();\r\n\r\n\t\tpublic readonly Mock<IEnumerable<IPasswordValidator<T>>>\r\n\t\t\tMockedPasswordValidators = new Mock<IEnumerable<IPasswordValidator<T>>>();\r\n\r\n\t\tpublic readonly Mock<IServiceProvider> MockedServiceProvider = new Mock<IServiceProvider>();\r\n\t\tpublic readonly Mock<IUserStore<T>> MockedUserStore = new Mock<IUserStore<T>>();\r\n\r\n\t\tpublic readonly Mock<IEnumerable<IUserValidator<T>>>\r\n\t\t\tMockedUserValidators = new Mock<IEnumerable<IUserValidator<T>>>();\r\n\t}\r\n\r\n\tpublic class FakeUserManager<T> : UserManager<T> where T : class\r\n\t{\r\n\t\tpublic FakeUserManagerDependencies<T> MockedDependencies { get; }\r\n\r\n\t\tpublic FakeUserManager() : this(new FakeUserManagerDependencies<T>())\r\n\t\t{\r\n\t\t}\r\n\r\n\t\tpublic FakeUserManager(FakeUserManagerDependencies<T> deps)\r\n\t\t\t: base(deps.MockedUserStore.Object,\r\n\t\t\t\tdeps.MockedIdentityOptions.Object,\r\n\t\t\t\tdeps.MockedPasswordHasher.Object,\r\n\t\t\t\tdeps.MockedUserValidators.Object,\r\n\t\t\t\tdeps.MockedPasswordValidators.Object,\r\n\t\t\t\tdeps.MockedLookupNormalizer.Object,\r\n\t\t\t\tdeps.MockedIdentityErrorDescriber.Object,\r\n\t\t\t\tdeps.MockedServiceProvider.Object,\r\n\t\t\t\tdeps.MockedLogger.Object\r\n\t\t\t)\r\n\t\t{\r\n\t\t\tMockedDependencies = deps;\r\n\t\t}\r\n\t}\r\n```\r\n\r\nNow let's say we want to test a method that will retrieve a user and perform some work with that user object.  In our test, we now have to build out the `IUserStore<TUser>`, figure out what `UserManager<TUser>` does \"under the hood\" to return the expected response, and mock out the requests.  Instead, all we should be doing is mocking the `IUserManager<TUser>.FindByNameAsync(string userName)` to return a specific user object.\r\n\r\nThe current way does not allow the tester to properly isolate the actual code under test; we _must_ test the `UserManager<TUser>`'s functionality along with our own.  If the test were to fail, we cannot say for certain that the problem is in our code; for all we know it could be in the inner workings of the `UserManager<TUser>` class.\r\n\r\nThe way this is set up violates many tenets and good practices of code design and unit testing, which are tenets and good practices for a reason.  The level of effort does not seem like it would be especially high either; mostly a 1:1 replacement in code where it's used as a dependency, than a little rewiring in the dependency configuration.\r\n\r\n"},{"Id":"7473962090","Type":"PullRequestEvent","CreatedAt":"2018-04-03T16:51:05","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1734","RelatedDescription":"Opened pull request \"React to future Razor Sdk package breaking changes\" (#1734) at aspnet/Identity","RelatedBody":""}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7486266709","Type":"IssuesEvent","CreatedAt":"2018-04-05T16:37:30","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/1853","RelatedDescription":"Reopened issue \"Authentication failed because the remote party has closed the transport stream\" (#1853) at aspnet/KestrelHttpServer","RelatedBody":"When I configure HTTPS and browse to my app I see this error logged when I close the browser:\r\n\r\n```\r\n      Failed to authenticate HTTPS connection.\r\nSystem.IO.IOException: Authentication failed because the remote party has closed the transport stream.\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.PartialFrameCallback(AsyncProtocolRequest asyncRequest)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Net.Security.SslState.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\n   at System.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result)\r\n   at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Https.HttpsConnectionAdapter.<OnConnectionAsync>d__7.MoveNext()\r\n```\r\n\r\n```\r\n~\\Desktop\\NewApp> dotnet --info\r\n.NET Command Line Tools (2.0.0-preview1-005977)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview1-005977\r\n Commit SHA-1 hash:  414cab8a0b\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview1-005977\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002111-00\r\n  Build    : 1ff021936263d492539399688f46fd3827169983\r\n```"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7487958066","Type":"PullRequestEvent","CreatedAt":"2018-04-05T22:27:06","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2244","RelatedDescription":"Merged pull request \"Add experimental flag to un-special-case data-\" (#2244) at aspnet/Razor","RelatedBody":"This change allows blazor to opt into treating data- attributes the same\r\nway as normal attributes in the parser."},{"Id":"7487956782","Type":"PullRequestEvent","CreatedAt":"2018-04-05T22:26:44","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2242","RelatedDescription":"Merged pull request \"Add support for type parameters to class nodes\" (#2242) at aspnet/Razor","RelatedBody":"This change will allow someone extending Razor to use generic type\r\nparameters in generated classes.\r\n\r\nThere's no user-level extensibility provided here yet, as in there is no\r\nlanguage support for adding type parameters."},{"Id":"7487904451","Type":"IssuesEvent","CreatedAt":"2018-04-05T22:12:18","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2119","RelatedDescription":"Closed issue \"Razor Sdk: Require docs on various available settings and instructions for users to use the Sdk in a class library\" (#2119) at aspnet/Razor","RelatedBody":"We need some documentation for various settings for the Sdk. In addition, the fwlink https://go.microsoft.com/fwlink/?linkid=868374 needs to include details on how to get the right set of additional references to use the Sdk\r\n\r\n### Wiring up the Sdk\r\n* [ ] RazorCompileOnBuild\r\n* [ ] RazorCompileOnPublish\r\n\r\n### Inputs and outputs\r\n* [ ] EnableDefaultContentItems \r\n* [ ] EnableDefaultRazorGenerateItems\r\n* [ ] GenerateRazorTargetAssemblyInfo\r\n* [ ] EnableDefaultRazorTargetAssemblyInfoAttributes\r\n* [ ] RazorGenerate\r\n* [ ] RazorCompile\r\n* [ ] RazorAssemblyAttribute\r\n* [ ] RazorTargetName\r\n* [ ] RazorOutputPath\r\n* [ ] CopyRazorGenerateFilesToPublishDirectory\r\n* [ ] CopyRefAssembliesToPublishDirectory\r\n* [ ] IncludeRazorContentInPack\r\n* [ ] EmbedRazorGenerateSources\r\n\r\n### Sdk lifecycle targets and properties\r\n* [ ] RazorGenerate\r\n* [ ] RazorCompile\r\n* [ ] RazorCompileToolset\r\n* [ ] UseRazorBuildServer\r\n* [ ] CustomBeforeRazorSdkTargets \\ CustomAfterRazorSdkTargets"},{"Id":"7487829208","Type":"PullRequestEvent","CreatedAt":"2018-04-05T21:52:58","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2244","RelatedDescription":"Opened pull request \"Add experimental flag to un-special-case data-\" (#2244) at aspnet/Razor","RelatedBody":"This change allows blazor to opt into treating data- attributes the same\r\nway as normal attributes in the parser."},{"Id":"7487786220","Type":"IssuesEvent","CreatedAt":"2018-04-05T21:42:39","Actor":"ryanbrandenburg","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2243","RelatedDescription":"Opened issue \"Razor SDK switch issues\" (#2243) at aspnet/Razor","RelatedBody":"<EnableDefaultContentItems>false</EnableDefaultContentItems> doesn't seem to work on netcoreapp projects.\r\n\r\n1. Clone ryanbrandenburg/RazorPageLibrary\r\n2. Add `<EnableDefaultContentItems>false</EnableDefaultContentItems>` to App.csproj's propertyGroup\r\n3. Build and run the app in VS and find that it still found the views."},{"Id":"7487589213","Type":"IssuesEvent","CreatedAt":"2018-04-05T20:59:10","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1871","RelatedDescription":"Closed issue \"HtmlConventions -  optional or customizable\" (#1871) at aspnet/Razor","RelatedBody":"I am currently trying to setup angular 5 with Razor and Asp.Net Core and have some issues with directives not working due to casing of the rendered html. Newer version of angular have updated directives from kebab case to camel case, i.e ng-if is now ngIf and it appears that all html is transformed to lower case by Razor. (I believe its done by HtmlConventions.ToHtmlCase).\r\n\r\nWould it be possible to have some way of disabling or customizing html conventions?"},{"Id":"7487548818","Type":"IssuesEvent","CreatedAt":"2018-04-05T20:50:46","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1965","RelatedDescription":"Closed issue \"TagHelperOutput AppendHtml method serialize the html string array value as differently\" (#1965) at aspnet/Razor","RelatedBody":"_From @manikandan05 on January 23, 2018 14:46_\n\nHi All,\r\n\r\nIn my application i have dynamically form the input elements like as below mentioned code block. In my Process method, i have append the html string to the  **TagHelperOutput.*\r\n\r\n> public override void Process(TagHelperContext context, TagHelperOutput output) {    \r\n>   \r\n>        string inputTag = \"<input data-val-requiredif-values=\"[\"ValueData1\",\"ValueData2\"]\" style=\"width: 100%;\" type=\"text\" data-val=\"true\" data-val-requiredif=\"txtbox\" data-val-requiredif-field=\"txtbox\"   id=\"TextSF\" name=\"TextSF\" value=\"\" />\";\r\n> \r\n>       //append the html string value into the TagHelperOutput\r\n> \r\n>        output.Content.AppendHtml(inputTag);\r\n> \r\n>    }\r\n\r\nBut the resultant data is slightly different from my input data. The array values are automatically converted into lowercase, also extra one space added in first string array value. This issue only raised in string array value data types.\r\n\r\n![88a4243](https://user-images.githubusercontent.com/5366630/35281608-498780e6-0079-11e8-866e-beb6096ab5c0.PNG)\r\n\r\nHow i can overcome from this array value serialized as lowercase issue! is really appreciated.\r\n\r\nThanks.\n\n_Copied from original issue: aspnet/Home#2818_"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"981890668095332353","CreatedAt":"2018-04-05T13:45:52+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz live stream today to learn more about getting started with #ASP.NET Core. https://t.co/mkwxUOObrd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null},{"Id":"981214732198674433","CreatedAt":"2018-04-03T16:59:56+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\n#ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/Tukk2JSsvC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":39,"FavoriteCount":15,"RawContent":null},{"Id":"981205689891803136","CreatedAt":"2018-04-03T16:24:01+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz for some #ASP.NET Core coding today, and ask questions during his live coding stream at 12:30… https://t.co/PCKhYbjIMP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null},{"Id":"980945681794809856","CreatedAt":"2018-04-02T23:10:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/lCnzHFb8x9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":96,"FavoriteCount":55,"RawContent":null},{"Id":"979863409561812993","CreatedAt":"2018-03-30T23:30:16+00:00","UserScreenname":"aspnet","Text":"We just released some minor bug fixes to jquery-ajax-unobtrusive and jquery-validation-unobtrusive:… https://t.co/9P5vskn1i8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":13,"RawContent":null},{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":160,"FavoriteCount":100,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null}]}},"RunOn":"2018-04-06T05:30:10.1653061Z","RunDurationInMilliseconds":8862}