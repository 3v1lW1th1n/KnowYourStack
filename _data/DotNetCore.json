{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":28,"FacebookCount":0,"Summary":"Updated: January 22, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7136068102","Type":"IssuesEvent","CreatedAt":"2018-01-23T04:49:07","Actor":"TakisGenn","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15974","RelatedDescription":"Opened issue \"Environment.GetFolderPath\" (#15974) at dotnet/coreclr","RelatedBody":"Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)\r\n\r\nvb.net vs2015\r\n.Net 4.5.2\r\nwin10\r\n"},{"Id":"7135810161","Type":"IssuesEvent","CreatedAt":"2018-01-23T03:08:23","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15319","RelatedDescription":"Closed issue \"Different code behavior in Release and Debug mode.\" (#15319) at dotnet/coreclr","RelatedBody":"Executing the following code:\r\n\r\n```\r\nprivate static void Main(string[] args)\r\n{\r\n\r\n    var ar = new double[]\r\n    {\r\n        100\r\n    };\r\n\r\n    FillTo1(ref ar, 5);\r\n    Console.WriteLine(string.Join(\",\", ar.Select(a => a.ToString()).ToArray()));\r\n}\r\n\r\npublic static void FillTo1(ref double[] dd, int N)\r\n{\r\n    if (dd.Length >= N)\r\n        return;\r\n\r\n    double[] Old = dd;\r\n    double d = double.NaN;\r\n    if (Old.Length > 0)\r\n        d = Old[0];\r\n\r\n    dd = new double[N];\r\n\r\n    for (int i = 0; i < Old.Length; i++)\r\n    {\r\n        dd[N - Old.Length + i] = Old[i];\r\n    }\r\n    for (int i = 0; i < N - Old.Length; i++)\r\n        dd[i] = d;\r\n}\r\n```\r\nThe result in Debug mode is: 100,100,100,100,100 but in Release mode is: 100,100,100,100,0\r\n\r\nTested on .net framework 4.7.1 and .net core 2.0.0\r\n\r\nAlso posted to Stack Overflow (https://stackoverflow.com/questions/47591915/why-code-behavior-is-different-in-release-debug-mode)."},{"Id":"7135806732","Type":"PullRequestEvent","CreatedAt":"2018-01-23T03:07:16","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15941","RelatedDescription":"Merged pull request \"Misc Span/Memory changes\" (#15941) at dotnet/coreclr","RelatedBody":"- [Move Span.DangerousCreate to MemoryMarshal.CreateSpan](https://github.com/dotnet/corefx/issues/26139)\r\n- [Move ReadOnlySpan.DangerousCreate to MemoryMarshal.CreateReadOnlySpan](https://github.com/dotnet/corefx/issues/26139)\r\n- [Move Span.NonPortableCast to MemoryMarshal.Cast](https://github.com/dotnet/corefx/issues/26368)\r\n- [Move ReadOnlySpan.NonPortableCast to MemoryMarshal.Cast](https://github.com/dotnet/corefx/issues/26368)\r\n- [Add ToString override to Span and ReadOnlySpan](https://github.com/dotnet/corefx/issues/26295)\r\n- [Add ToEnumerable function to MemoryMarshal that takes a Memory](https://github.com/dotnet/corefx/issues/24854)\r\n\r\nprogress towards https://github.com/dotnet/corefx/issues/26368, https://github.com/dotnet/corefx/issues/24854, https://github.com/dotnet/corefx/issues/26295, https://github.com/dotnet/corefx/issues/26139\r\n\r\nNote that this includes breaking changes to any upstream projects using these functions. This means it will break CoreFX builds dependent on any new coreclr produced until an accompanying PR in dotnet/corefx/ is merged. "},{"Id":"7135764080","Type":"PullRequestEvent","CreatedAt":"2018-01-23T02:53:07","Actor":"nategraf","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15972","RelatedDescription":"Merged pull request \"Disable EventPipe tests which fair in stress runs\" (#15972) at dotnet/coreclr","RelatedBody":"Addresses: #15924\r\nFollow-up: #15927"},{"Id":"7135619400","Type":"PullRequestEvent","CreatedAt":"2018-01-23T02:04:25","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15973","RelatedDescription":"Opened pull request \"Add \"CLRJitAttachState\" global export from coreclr.dll that contains the CLR_DEBUGGING_PROCESS_FLAGS.\" (#15973) at dotnet/coreclr","RelatedBody":"This will allow VS to implement JIT debugging for .NET Core.\r\n\r\nIssue #12074"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7135635116","Type":"PullRequestEvent","CreatedAt":"2018-01-23T02:09:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8447","RelatedDescription":"Merged pull request \"Separate tool package and shim file location\" (#8447) at dotnet/cli","RelatedBody":"**Customer scenario**\r\n\r\nConsumer install a global tool on CLI that has the same command name as the package id, for example dotnet-watch. The install will fail with access denied error on macOS and Linux.\r\n\r\n**Bugs this fixes**\r\n\r\nhttps://github.com/dotnet/cli/issues/8445\r\n\r\n**Workarounds, if any**\r\n\r\nRepublish the global tools with a different packageId\r\n\r\n**Risk**\r\n\r\nlow\r\n\r\n**Performance impact**\r\n\r\nno\r\n\r\n**Root cause analysis**\r\n\r\nSince tools shim and package are stored in the same folder. If the tool command name and the package name is the same, a folder and a file with the same name will be created. And this is not allow in unix file system. More integration test coverage is needed.\r\n\r\n**How was the bug found?**\r\n\r\nManual testing\r\n"},{"Id":"7135215351","Type":"IssuesEvent","CreatedAt":"2018-01-22T23:53:54","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8411","RelatedDescription":"Closed issue \"BUG LINUX/OSX Error when Building solutions with csproj/fsproj properties due to Permissions\" (#8411) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate a solution with multiple projects. Ensure that one of the base (non-dependent) projects needs a property set in the csproj during building. This will break the building process for the entire solution. C# projects get warnings while F# projects errors.\r\n\r\nSample error:\r\n/usr/share/dotnet/sdk/2.1.4/FSharp/Microsoft.FSharp.Targets(263,9): error MSB6003: The specified task executable \"RunFsc.cmd\" could not be run. Permission denied [/MYPROJECT.fsproj]\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7135207777","Type":"IssuesEvent","CreatedAt":"2018-01-22T23:51:32","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8442","RelatedDescription":"Closed issue \"dotnet not finding libraries like Microsoft.CodeAnalysis.CSharp.Workspaces.dll at runtime\" (#8442) at dotnet/cli","RelatedBody":"_From @tomfanning on January 22, 2018 16:44_\n\nI have a VS2017 solution containing a ASP.NET Core project with these nuget references:\r\n```\r\n  <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.2\" />\r\n  <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"1.1.0\" />\r\n  <PackageReference Include=\"Swashbuckle.AspNetCore.Swagger\" Version=\"1.1.0\" />\r\n```\r\n\r\nCompiled with:\r\n`  devenv.exe myapp.sln /p:Configuration=Release /p:Platform=x64 #####################`\r\n\r\nPackaged:\r\n`  myapp\\bin\\Release\\netcoreapp2.0\\*`\r\n\r\nTransferred to CentOS 7 with dotnet installed:\r\n```\r\n  rpm --import https://packages.microsoft.com/keys/microsoft.asc\r\n  sh -c 'echo -e \"[packages-microsoft-com-prod]\\nname=packages-microsoft-com-prod \\nbaseurl= https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" > /etc/yum.repos.d/dotnetdev.repo'\r\n  yum install -q -y libunwind libicu\r\n  yum install -q -y dotnet-sdk-2.1.4\r\n```\r\n\r\nRun with:\r\n`  dotnet myapp.dll`\r\n```\r\nError:\r\n  An assembly specified in the application dependencies manifest (myapp.deps.json) was not found:\r\n    package: 'Microsoft.CodeAnalysis.CSharp.Workspaces', version: '2.3.1'\r\n    path: 'lib/netstandard1.3/Microsoft.CodeAnalysis.CSharp.Workspaces.dll'\r\n```\r\n\r\nRun: \r\n`  find / | grep Microsoft.CodeAnalysis.CSharp.Workspaces.dll`\r\n\r\nA file is present with that name, just not somewhere dotnet is looking:\r\n  `/usr/share/dotnet/sdk/NuGetFallbackFolder/microsoft.codeanalysis.csharp.workspaces/2.3.1/lib/netstandard1.3/Microsoft.CodeAnalysis.CSharp.Workspaces.dll`\r\n\r\nCopying that file to my application directory clears the error, exposing another, next one relates to Microsoft.CodeAnalysis.CSharp.Workspaces.dll. Several files later I'm still nowhere:\r\n\r\n```\r\n   11  cp /usr/share/dotnet/sdk/NuGetFallbackFolder/microsoft.codeanalysis.csharp.workspaces/2.3.1/lib/netstandard1.3/Microsoft.CodeAnalysis.CSharp.Workspaces.dll .\r\n   12  dotnet myapp.dll\r\n   13  find / | grep Microsoft.CodeAnalysis.Workspaces.dll\r\n   14  cp /usr/share/dotnet/sdk/NuGetFallbackFolder/microsoft.codeanalysis.workspaces.common/2.3.1/lib/netstandard1.3/Microsoft.CodeAnalysis.Workspaces.dll .\r\n   15  dotnet myapp.dll\r\n   16  find / | grep Microsoft.VisualStudio.Web.CodeGeneration.Contracts.dll\r\n   17  cp /usr/share/dotnet/sdk/NuGetFallbackFolder/microsoft.visualstudio.web.codegeneration.contracts/2.0.2/lib/netstandard2.0/Microsoft.VisualStudio.Web.CodeGeneration.Contracts.dll .\r\n   18  dotnet myapp.dll\r\n   19  find / | grep Microsoft.VisualStudio.Web.CodeGeneration.Core.dll\r\n   20  cp /usr/share/dotnet/sdk/NuGetFallbackFolder/microsoft.visualstudio.web.codegeneration.core/2.0.2/lib/netstandard2.0/Microsoft.VisualStudio.Web.CodeGeneration.Core.dll .\r\n   21  dotnet myapp.dll\r\n   22  find / | grep dotnet-aspnet-codegenerator-design.dll\r\n   23  cp /usr/share/dotnet/sdk/NuGetFallbackFolder/microsoft.visualstudio.web.codegeneration.design/2.0.2/lib/netcoreapp2.0/dotnet-aspnet-codegenerator-design.dll .\r\n   24  dotnet myapp.dll\r\n   25  find / | grep Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore.dll\r\n   26  cp /usr/share/dotnet/sdk/NuGetFallbackFolder/microsoft.visualstudio.web.codegeneration.entityframeworkcore/2.0.2/lib/netstandard2.0/Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore.dll .\r\n```\r\n   \r\nIt seems dotnet is just not looking in /usr/share/dotnet/sdk/NuGetFallbackFolder for dependencies. Is it supposed to be? If not, how do I install those files somewhere that dotnet looks for them?\n\n_Copied from original issue: dotnet/coreclr#15964_"},{"Id":"7134845038","Type":"PullRequestEvent","CreatedAt":"2018-01-22T22:17:57","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7951","RelatedDescription":"Merged pull request \"add basic support for FreeBSD\" (#7951) at dotnet/cli","RelatedBody":"This is another part of https://github.com/dotnet/corefx/issues/1626\r\n\r\nThis adds basic handling for platform suffixes. \r\nWith this and previous core-setup changes I was able to get minimal sdk cli functions.  "},{"Id":"7134841969","Type":"PullRequestEvent","CreatedAt":"2018-01-22T22:17:17","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8439","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#8439) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180122-080100\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180122-080100 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7134839640","Type":"PullRequestEvent","CreatedAt":"2018-01-22T22:16:48","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8444","RelatedDescription":"Merged pull request \"Updating the CLI branding and version to 2.1.300.\" (#8444) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"7134837344","Type":"PullRequestEvent","CreatedAt":"2018-01-22T22:16:18","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8446","RelatedDescription":"Merged pull request \"Updating the branding to 2.1.3-preview2.\" (#8446) at dotnet/cli","RelatedBody":""},{"Id":"7134815106","Type":"PullRequestEvent","CreatedAt":"2018-01-22T22:11:29","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8443","RelatedDescription":"Merged pull request \"Generate a Nuget.config once\" (#8443) at dotnet/cli","RelatedBody":"If the Nuget.config has already been generated, do not re-generate the file every time 'Run-Build' or 'Build' is called.\r\nIf 'OrchestratedPackageVersionsProps.props' is present, do not re-download the file every time 'Run-Build' or 'Build' is called.\r\n\r\nThis is consistent with the treatment for: \r\nBuildInfo.props\r\nGitCommitInfo.props\r\nHostInfo.props\r\n\r\nThis change should repair the errors we are seeing in the 'AllLinuxDistrosNativeInstallers' leg of orchestrated build; to wit: \"Failure at Linux leg because native installer tests are not honoring the package sources.\" \r\n\r\nThe 'AllLinuxDistrosNativeInstallers' leg is markedly different in that there is another call to 'build.sh' here: https://github.com/dotnet/cli/blob/master/build/SandBoxAndPackage.proj#L50 \r\nThis call generates a new Nuget.config without the benefit of the 'ExternalRestoreSources' property.\r\n"},{"Id":"7134789022","Type":"PullRequestEvent","CreatedAt":"2018-01-22T22:05:52","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8447","RelatedDescription":"Opened pull request \"[WIP] Separate tool package and shim file location\" (#8447) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7120169085","Type":"IssuesEvent","CreatedAt":"2018-01-18T23:43:26","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/626","RelatedDescription":"Opened issue \"Trimming will break when SDK stops running RunResolvePackageDependencies\" (#626) at dotnet/standard","RelatedBody":"I chatted with @nguerrera and he mentioned that SDK will no longer run RunResolvePackageDependencies as part of the build for perf reasons.\r\n\r\nWe depend on the PackageDependencies item in trimming in order to construct the package graph and will no longer get them.\r\n\r\nWe should update the target sequencing so that we run RunResolvePackageDependencies ourselves in order to get these items.  We should be careful when doing this to not regress the non-SDK case which may not have the RunResolvePackageDependencies target."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7136082708","Type":"PullRequestEvent","CreatedAt":"2018-01-23T04:55:03","Actor":"Priya91","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26429","RelatedDescription":"Merged pull request \"Use ManagedWebSocket implementation everywhere except uap.\" (#26429) at dotnet/corefx","RelatedBody":"fixes #9503 \r\n\r\n\r\ncc @karelz @davidsh @wfurt @stephentoub "},{"Id":"7136082701","Type":"IssuesEvent","CreatedAt":"2018-01-23T04:55:03","Actor":"Priya91","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/9503","RelatedDescription":"Closed issue \"Use managed WebSockets implementation on all Windows (not UWP)\" (#9503) at dotnet/corefx","RelatedBody":"Now that we have a managed implementation of Websockets that we use on Unix, should we also use it on Windows pre-Windows 8, since the current Windows implementation requires OS support only available Windows 8 and later?  I'm assuming this should mostly be an issue of package authoring?\n\ncc: @davidsh, @cipop, @ericstj, @davidfowl \n"},{"Id":"7135946923","Type":"IssuesEvent","CreatedAt":"2018-01-23T03:58:58","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26485","RelatedDescription":"Closed issue \"Regex null-refs while processing pattern.\" (#26485) at dotnet/corefx","RelatedBody":"Found while writing dotnet/roslyn#23984 (a usable regex parser for use in IDE scenarios)\r\n\r\nRegex pattern is: ```(?(?S))```\r\n\r\nException happens here:\r\n\r\n```\r\n \tSystem.Text.RegularExpressions.RegexWriter.RegexCodeFromRegexTree(tree)\tUnknown\r\n \tSystem.Text.RegularExpressions.Regex.Regex(pattern, options, matchTimeout, useCache)\tUnknown\r\n \tSystem.Text.RegularExpressions.Regex.Regex(pattern, options)\tUnknown\r\n```\r\n\r\n--\r\n\r\nNote: https://github.com/dotnet/roslyn/pull/23984 comes with several thousands of regex tests that could be adoped by corefx to help ensure that parsing either succeeds, or throws an ArgumentException as per the regex constructor documentation https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=netframework-4.7.1#System_Text_RegularExpressions_Regex__ctor_System_String_"},{"Id":"7135938692","Type":"IssuesEvent","CreatedAt":"2018-01-23T03:55:57","Actor":"KKhurin","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26538","RelatedDescription":"Opened issue \"Properly use SizeRef in MemoryCache once it is exposed in CoreClr\" (#26538) at dotnet/corefx","RelatedBody":"Once https://github.com/dotnet/coreclr/issues/14561 is fixed MemoryCache should start using it."},{"Id":"7135931439","Type":"IssuesEvent","CreatedAt":"2018-01-23T03:52:59","Actor":"KKhurin","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26537","RelatedDescription":"Opened issue \"MemoryCache.GetLastSize() returns percentage of the limit instead of the absolute size\" (#26537) at dotnet/corefx","RelatedBody":"Unfortunately this is the same on desktop .NET MemoryCache.\r\n\r\nWe should fix it because even if someone can derive the approximate cache size from the returned percentage (which is approximate by itself) this won't work if there is no cache size limit set... \r\n"},{"Id":"7135911280","Type":"IssuesEvent","CreatedAt":"2018-01-23T03:45:12","Actor":"KKhurin","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26536","RelatedDescription":"Opened issue \"Consider disabling timers in MemoryCache when they are not needed\" (#26536) at dotnet/corefx","RelatedBody":"There are cases when MemoryCache doesn't have both cache size limit and physical memory limit. \r\nIn this case it would be beneficial to never start the timer that invokes the code to enforce those limits. "},{"Id":"7135893389","Type":"PullRequestEvent","CreatedAt":"2018-01-23T03:38:31","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26521","RelatedDescription":"Merged pull request \"Fixing spacing in S.Memory and S.Runtime refs\" (#26521) at dotnet/corefx","RelatedBody":"From: https://github.com/dotnet/corefx/pull/26518#discussion_r163056147\r\nRelated: https://github.com/dotnet/buildtools/pull/1870\r\n\r\ncc @weshaggard, @jkotas"},{"Id":"7135866973","Type":"IssuesEvent","CreatedAt":"2018-01-23T03:28:39","Actor":"bojanrajkovic","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26535","RelatedDescription":"Opened issue \"ServicePoint retrieved via FindServicePoint does not contain server certificate\" (#26535) at dotnet/corefx","RelatedBody":"A typical way to obtain the server certificate after making a request via `HttpClient` is to use `ServicePointManager.FindServicePoint` with the URI and grab the `Certificate` property off of that.\r\n\r\nThis works fine in .NET 4.5, as evidenced by this fragment from a [workbook]:\r\n\r\n![image](https://user-images.githubusercontent.com/110747/35256633-b8f1174c-ffc2-11e7-8793-629517806b68.png)\r\n\r\nHowever, in a .NET Core application, this doesn't work:\r\n\r\n![image](https://user-images.githubusercontent.com/110747/35256704-10a6de18-ffc3-11e7-99d5-67c4db540a3b.png)\r\n\r\nYou can also see the attached project in [certificate-test.zip](https://github.com/dotnet/corefx/files/1654414/certificate-test.zip). It contains a sample you can download and `dotnet run`.\r\n\r\n\r\n[workbook]: https://github.com/Microsoft/workbooks"},{"Id":"7135866324","Type":"PullRequestEvent","CreatedAt":"2018-01-23T03:28:24","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26534","RelatedDescription":"Opened pull request \"Remove skeletal caching from ExprVisitorBase\" (#26534) at dotnet/corefx","RelatedBody":"Methods exist to build caching layer out of, but without actually implementing it. Any such cache would almost never have a cache hit, so remove it."},{"Id":"7135815359","Type":"PullRequestEvent","CreatedAt":"2018-01-23T03:10:09","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26533","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#26533) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7135678575","Type":"IssuesEvent","CreatedAt":"2018-01-23T02:23:26","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/19127","RelatedDescription":"Closed issue \"Need to expose /embed compiler option through MSBuild\" (#19127) at dotnet/roslyn","RelatedBody":"csc.exe has the /embed option (embed all sources in the portable PDB). There is the EmbeddedFiles MSBuild item that lets you specify the list of files to embed.\r\n\r\nHowever there is no MSBuild alternative to the /embed option and people have to resort to workarounds such as:\r\n```\r\n  <Target Name=\"PopulateEmbeddedFiles\"\r\n          AfterTargets=\"BeforeCompile\"\r\n          BeforeTargets=\"CoreCompile\">\r\n    <ItemGroup>\r\n      <EmbeddedFiles Include=\"@(Compile)\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\nIt would be very useful to introduce a new Csc task parameter \"EmbedAllSourcesInPdb\" or similar. If set, it would automatically populate `EmbeddedFiles` with `Sources`.\r\n\r\nOtherwise everyone will be forced to have a custom target like above.\r\n\r\nAlternatively, we can do this entirely on the MSBuild side, and have that target added to the common targets and specify a condition to turn it on or off.\r\n\r\nBut basically if people want to embed sources in PDB they're very likely to want to embed them all anyway. So removing ceremony here would be very helpful."},{"Id":"7135647860","Type":"IssuesEvent","CreatedAt":"2018-01-23T02:13:30","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18706","RelatedDescription":"Closed issue \"ServiceHub.RoslynCodeAnalysisService32.exe high CPU when overriding methods from Object\" (#18706) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVisual Studio Enterprise 2017 Version 15.1 (26403.3) Release\r\n\r\n**Steps to Reproduce**:\r\n1. Open a large solution\r\n2. Open a file that has a class that overrides ToString, Equals, and or GetHashCode\r\n\r\n**Expected Behavior**:\r\nIt would be nice if we could disable CodeLense from getting the count of references for methods that are overridden from Object to prevent massive CPU spikes.\r\n\r\n**Actual Behavior**:\r\nServiceHub.RoslynCodeAnalysisService32.exe spins up to almost 100% CPU while it goes out and calculates all the references to ToString, Equals, and GetHashCode"},{"Id":"7135641060","Type":"IssuesEvent","CreatedAt":"2018-01-23T02:11:18","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23406","RelatedDescription":"Closed issue \"CA1823 warning disappears after navigation\" (#23406) at dotnet/roslyn","RelatedBody":"Ported from https://github.com/dotnet/roslyn-analyzers/issues/1410\r\n\r\n**Version Used**: \r\nD15rel 27123.00\r\n**Steps to Reproduce**:\r\n1. Clone https://github.com/shadowsocks/shadowsocks-windows\r\n2. Install Microsoft.CodeAnalysis.FxCopAnalyzers 2.6.0-beta1-62322-01 from https://dotnet.myget.org/feed/roslyn-analyzers/package/nuget/Microsoft.CodeAnalysis.FxCopAnalyzers/2.6.0-beta1-62322-01#\r\n3. Enable CA1810 for code analysis and build the project.\r\n4. Navigate to the only CA1823 warning which points to line 106 in UnitTest.cs\r\nprivate static object locker = new object();\r\nThe warning is valid as a FAR doesn't pull up any other instances of locker.\r\n\r\n**Expected Behavior**:\r\nThe warning stays.\r\n**Actual Behavior**:\r\nThe warning disappeared either after navigating to the warning location or running a FAR to check if the warning was valid."},{"Id":"7135464858","Type":"IssuesEvent","CreatedAt":"2018-01-23T01:13:42","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24194","RelatedDescription":"Closed issue \"Migrate command handlers to the new editor commanding\" (#24194) at dotnet/roslyn","RelatedBody":"In VS 2015 15.6 Preview3 the editor introduced a new commanding system, designed after Roslyn commading, see https://github.com/Microsoft/vs-editor-api/wiki/Modern-Editor-Commanding-API-Revisited.\r\nThis issue tracks migration of all Roslyn command handlers to the new editor commanding API.\r\nThe work is being done in PR https://github.com/dotnet/roslyn/pull/23769"},{"Id":"7135106058","Type":"IssuesEvent","CreatedAt":"2018-01-22T23:21:27","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22786","RelatedDescription":"Closed issue \"Ctrl+click GTD is too aggressive on string literals\" (#22786) at dotnet/roslyn","RelatedBody":"From: Daofa Li \r\nBasically C# identifies all literals as clickable symbols. The worst case is where the string literal is a url. Ctrl+click on the url may open the string metadata in editor as well as open the url in external browser. \r\n\r\nCan this be improved not to return literals as navigable symbols? The current behavior doesn’t make much sense to me as a user.\r\n![image](https://user-images.githubusercontent.com/12449387/31809648-8172baee-b52d-11e7-96c8-11f9b6a9f594.png)\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7135947493","Type":"PullRequestEvent","CreatedAt":"2018-01-23T03:59:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5279","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5279) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7135807252","Type":"PullRequestEvent","CreatedAt":"2018-01-23T03:07:27","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5279","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5279) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7135620082","Type":"PullRequestEvent","CreatedAt":"2018-01-23T02:04:37","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5278","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5278) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7135610828","Type":"PullRequestEvent","CreatedAt":"2018-01-23T02:01:45","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5278","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5278) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7135601893","Type":"PullRequestEvent","CreatedAt":"2018-01-23T01:58:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5277","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5277) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7135601346","Type":"PullRequestEvent","CreatedAt":"2018-01-23T01:58:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5276","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5276) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7135303572","Type":"PullRequestEvent","CreatedAt":"2018-01-23T00:21:07","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5277","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5277) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7134853134","Type":"PullRequestEvent","CreatedAt":"2018-01-22T22:19:39","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5276","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5276) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7135114382","Type":"PullRequestEvent","CreatedAt":"2018-01-22T23:23:46","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1887","RelatedDescription":"Merged pull request \"Updating branding to 2.1.300-preview1.\" (#1887) at dotnet/sdk","RelatedBody":""},{"Id":"7135111989","Type":"PullRequestEvent","CreatedAt":"2018-01-22T23:23:06","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1885","RelatedDescription":"Merged pull request \"Updating the branding to 2.1.300-preview2.\" (#1885) at dotnet/sdk","RelatedBody":""},{"Id":"7134936114","Type":"PullRequestEvent","CreatedAt":"2018-01-22T22:39:06","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1887","RelatedDescription":"Opened pull request \"Updating branding to 2.1.300-preview1.\" (#1887) at dotnet/sdk","RelatedBody":""},{"Id":"7134931515","Type":"PullRequestEvent","CreatedAt":"2018-01-22T22:37:55","Actor":"rainersigwald","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1886","RelatedDescription":"Opened pull request \"Quoting and other shell nitpicks\" (#1886) at dotnet/sdk","RelatedBody":"When adopting this to MSBuild, @mfillipov noticed some quoting problems in `build.sh`: https://github.com/Microsoft/msbuild/pull/2868#pullrequestreview-90268672\r\n\r\nThese edits are suggestions from Shellcheck.\r\n\r\ncc @cdmihai"},{"Id":"7134926448","Type":"PullRequestEvent","CreatedAt":"2018-01-22T22:36:42","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1885","RelatedDescription":"Opened pull request \"Updating the branding to 2.1.300-preview2.\" (#1885) at dotnet/sdk","RelatedBody":""},{"Id":"7134889412","Type":"IssuesEvent","CreatedAt":"2018-01-22T22:28:04","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1884","RelatedDescription":"Opened issue \"TargetFrameworkVersion value now case sensitive\" (#1884) at dotnet/sdk","RelatedBody":"- Create a new .NET Framework Console App in VS\r\n- Edit project file to capitalize the `v` in the `TargetFrameworkVersion` property (ie change from `v4.6.1` to `V4.6.1`)\r\n- Reload project file\r\n\r\n**EXPECTED**: Project loads and builds successfully\r\n**ACTUAL**: Load / build failure:\r\n\r\n> A numeric comparison was attempted on \"$(_TargetFrameworkVersionWithoutV)\" that evaluates to \"V4.6.1\" instead of a number, in condition \"'$(ImplicitlyExpandNETStandardFacades)' == '' AND '$(_TargetFrameworkVersionWithoutV)' >= '4.6.1'\".  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.NETFramework.targets\r\n\r\n**ROOT CAUSE**: We are doing a case sensitive comparison here: https://github.com/dotnet/sdk/blob/79d5e5d11c1142cdbb93d0127b82915729d4900e/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Sdk.BeforeCommon.targets#L91"},{"Id":"7130686404","Type":"PullRequestEvent","CreatedAt":"2018-01-22T08:01:05","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1883","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1883) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180122-080104\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180122-080104 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7130686325","Type":"PullRequestEvent","CreatedAt":"2018-01-22T08:01:03","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1882","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#1882) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180122-080102\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180122-080102 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7130101805","Type":"IssuesEvent","CreatedAt":"2018-01-22T04:04:25","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1531","RelatedDescription":"Closed issue \"NUGET Documentation Xml file no more restored\" (#1531) at dotnet/sdk","RelatedBody":"I'm not sure I'm posting the issue in the right repo, please help me.\r\n\r\nMy issue is quite simple, if I create a new project using VS2017 using the \"old\" csproj when I add a package reference to any nuget package (take the \"microsoft.aspnetcore.mvc.core\" package as example, but it's not relevant, the issue is always present with any packages) after building the project I can find into my output folder both **Microsoft.AspNetCore.Mvc.Core.dll** and **Microsoft.AspNetCore.Mvc.Core.xml** (together with my dll)\r\n\r\nIf I migrate the csproj to the \"Microsoft.dotnet.sdk\", this behaviour changes and I'm no more able to get the XML into my output folder.\r\n\r\nIt doesn't matter the framework of the project, it's all about the \"old\" or \"new\" csproj format, I think it's correlated to the tool used to restore.\r\n\r\nI read a lot in deep the nuget spec documentation and making some tricks now i'm able to produce my own nuget packages including the Documentation XML as Content (ye, I dislike it too but it's the only way I found out) and doing this way, when I reference that package the xml file is added into the project as link, unfotunately it is not copied into the output folder and it is not possible to mark as \"Copy Always\" because doing this way it adds into the csproj its full path which contains the version :-(\r\nAnd, even if this technique could work, it could be applied to my own packages, not for all the existing ones.\r\n\r\nPlease, point me in the right direction to address this problem, I really need to have the XML contained into the nuget package in the output folder of my main project.\r\n"},{"Id":"7129910803","Type":"IssuesEvent","CreatedAt":"2018-01-22T02:41:01","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1853","RelatedDescription":"Reopened issue \"[tools] Pack should glob result of publish or not\" (#1853) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/pull/1843#discussion_r161075634\r\n\r\nNeed further discussion \r\n\r\n>dasMulli\r\nI think I suggested ResolvedFileToPublish previously but having doubts now. It could by PreserveNewest with some modification already done in the publish output or users could have targets with <Copy> stuff in there. (or even post-built steps using xcopy execute).\r\nThe most \"correct\" but also slowest would be to do the same as the web sdk does for publishing - clean an intermediate directory and publish to it, then use a glob to harvest this clean publish. e.g. like #1846 (comment)"},{"Id":"7129910540","Type":"IssuesEvent","CreatedAt":"2018-01-22T02:40:54","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1853","RelatedDescription":"Closed issue \"[tools] Pack should glob result of publish or not\" (#1853) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/pull/1843#discussion_r161075634\r\n\r\nNeed further discussion \r\n\r\n>dasMulli\r\nI think I suggested ResolvedFileToPublish previously but having doubts now. It could by PreserveNewest with some modification already done in the publish output or users could have targets with <Copy> stuff in there. (or even post-built steps using xcopy execute).\r\nThe most \"correct\" but also slowest would be to do the same as the web sdk does for publishing - clean an intermediate directory and publish to it, then use a glob to harvest this clean publish. e.g. like #1846 (comment)"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"954763538328883201","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"dotnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/EefnkSEqfe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":6,"RawContent":null},{"Id":"954724179533758465","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"dotnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/dWA8n7Ttph","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":7,"RawContent":null},{"Id":"953279226869960704","CreatedAt":"2018-01-16T14:54:13+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz today to learn more about .NET and ask questions about .NET, .NET Core, Visual Studio or ASPNet. https://t.co/ZtyD9ubcE6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"952185961085067266","CreatedAt":"2018-01-13T14:29:58+00:00","UserScreenname":"dotnet","Text":"Our Jeff Fritz (@csharpfritz) will be LIVE CODING again today.  Today's topic is unit testing @AspNet Core projects… https://t.co/kXZpzdtOqA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":10,"RawContent":null},{"Id":"950980824685412352","CreatedAt":"2018-01-10T06:41:11+00:00","UserScreenname":"dotnet","Text":".NET Framework January 2018 Security and Quality Rollup https://t.co/vyjtKwKpkb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":14,"RawContent":null},{"Id":"950944972588462080","CreatedAt":"2018-01-10T04:18:43+00:00","UserScreenname":"dotnet","Text":".NET for UWP January 2018 Update https://t.co/zckziEWmv7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":28,"RawContent":null}]}},"RunOn":"2018-01-23T05:30:21.404056Z","RunDurationInMilliseconds":8367}