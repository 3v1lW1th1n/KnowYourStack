{"Data":{"Vue":{"Events":[],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"7082706085","Type":"IssuesEvent","CreatedAt":"2018-01-10T21:06:06","Actor":"eddyerburgh","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1976","RelatedDescription":"Closed issue \"Expose RouterLink and RouterView components\" (#1976) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nCurrently it's not possible to find RouterLink and RouterView when using vue-test-utils. You can find the rendered content, but if you want to check that a RouterLink receives the correct to property, you need to check the <a> tag renders an href:\r\n```js\r\nwrapper.find('a').element.href\r\n```\r\nWe're considering adding a RouterLink stub to vue-test-utils, so you can do this:\r\n```js\r\nwrapper.find(RouterLink).props().to\r\n```\r\nBut adding a stub basically means reimplimenting the RouterLink, since we don't actually need to stub it, we just need to have access to the component as a selector.\r\nInstead, would we be able to expose RouterLink and RouterView from Vue Router?\r\n  \r\n\r\n\r\n### What does the proposed API look like?\r\nWe could import the components with the same name they are registered with:\r\n\r\n```js\r\nimport { RouterLink, RouterView } from 'vue-router'\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7081456750","Type":"IssuesEvent","CreatedAt":"2018-01-10T16:40:06","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1921","RelatedDescription":"Closed issue \"Document Named Views and Nested Routes\" (#1921) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\nFull problem Example\r\n[https://jsfiddle.net/oaxs8ek8/](https://jsfiddle.net/oaxs8ek8/)\r\n\r\n### Steps to reproduce\r\nI have created a Homepage with  2 Named Views called for example RouteA and RouteB. \r\nNow RouteA and RouteB have 2 other nested routes like so RouteA1 and RouteA2 - RouteB1 and RouteB2.\r\n\r\n```\r\nconst router = new VueRouter({\r\n  routes: [\r\n    {\r\n      path: '/',\r\n      components: {\r\n        RouteA : Bar,\r\n        RouteB: Baz\r\n      }\r\n    }\r\n  ]\r\n})\r\n```\r\n\r\nthis work very well for the first route but then i cant continue the routing chain for the 2 differente route since i cant only do this: \r\n\r\n```\r\nconst router = new VueRouter({\r\n  routes: [\r\n    {\r\n      path: '/',\r\n      components: {\r\n        RouteA : Bar,\r\n        RouteB: Baz\r\n      },\r\n      children: [\r\n        {\r\n          path: '' // Load RouteA1 on RouteA\r\n          component: UserProfile\r\n        },\r\n        {\r\n          path: '', // Load RouteB1 on RouteB\r\n          component: UserPosts\r\n        }\r\n      ]\r\n    }\r\n    }\r\n  ]\r\n})\r\n```\r\n\r\nThere is no way to specify the different route.\r\n\r\nA solution could be enable this for example:\r\n\r\n```\r\nconst router = new VueRouter({\r\n  routes: [\r\n    {\r\n      path: '/',\r\n      components: {\r\n        RouteA : {\r\n                     path: ''\r\n                     component: Bar,\r\n                     children:{\r\n                        ....\r\n                     }\r\n              },\r\n        RouteB:  {\r\n                     path: ''\r\n                     component: Baz,\r\n                     children:{\r\n                        ....\r\n                     }\r\n      }\r\n    }\r\n  ]\r\n})\r\n```\r\n\r\n### What is expected?\r\nThe router should allow nested route with named view router\r\n\r\n### What is actually happening?\r\nit's not routeing correctly\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7081456760","Type":"PullRequestEvent","CreatedAt":"2018-01-10T16:40:05","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/vuejs/vue-router/pull/1931","RelatedDescription":"Merged pull request \"docs: add example of nested named routes\" (#1931) at vuejs/vue-router","RelatedBody":"Closes #1921\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"7083380570","Type":"IssuesEvent","CreatedAt":"2018-01-11T00:01:00","Actor":"LinusBorg","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/issues/1123","RelatedDescription":"Closed issue \"Getters proposal\" (#1123) at vuejs/vuex","RelatedBody":"### What problem does this feature solve?\r\nBetter API consistency, IMHO.\r\n\r\nThere are getters, mutations and actions.\r\nAs for mutations, you use the `$store.commit('mutation-name', stuff)` syntax while for actions you do `$store.dispatch('action-name', stuff)`, which is really nice. But, as for getters, the current approach is `$store.getters.getter-name`.\r\n\r\nFrom a user perspective, I think there's a nicer option that wouldn't also break backwards compatibility since both ways could coexist without any problem.\r\n\r\n### What does the proposed API look like?\r\nSimilar to mutations and actions, I think `$store.getter('getter-name')` could be a better way to call getters.\r\n\r\nThis way the syntax for getters, mutations and actions would be more similar:\r\n\r\n```js\r\n$store.getter('name')\r\n$store.commit('name', data)\r\n$store.dispatch('name', data)\r\n```\r\n\r\n**Note:** I'm not specifically proposing `.getter('name')`. It may be something else like `.fetch(...)` or `.pull(...)` or whatever (the best thing would have been `$store.get('name')` in my opinion, but `.get` is already a JavaScript method on objects so... no way I guess). What I mean is to use a function call like what happens to \"use\" mutations and actions.\r\n\r\nI understand this is totally subjective and I am not expecting everyone to agree on this proposal, but I see this approach as a much cleaner and consistent one.\r\n\r\nAlso, I understand this is just a minor \"thing\" (not even a problem) but I wanted to express my idea anyway in case someone else would find this interesting and/or having any sense.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7082564332","Type":"PullRequestEvent","CreatedAt":"2018-01-10T20:34:21","Actor":"hootlex","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/pull/1131","RelatedDescription":"Opened pull request \"Make component name multi-word and use it with PascalCase\" (#1131) at vuejs/vuex","RelatedBody":"https://github.com/vuejs/vuex/issues/1109 @ktsn "},{"Id":"7080613317","Type":"IssuesEvent","CreatedAt":"2018-01-10T14:08:04","Actor":"LinusBorg","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/issues/1130","RelatedDescription":"Closed issue \"registerModule with option { preserveState: true } not working\" (#1130) at vuejs/vuex","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://github.com/Serhiy-Nazarov/demo-error-with-vuex-register-module/blob/master/src/store/index.js](https://github.com/Serhiy-Nazarov/demo-error-with-vuex-register-module/blob/master/src/store/index.js)\r\n\r\n### Steps to reproduce\r\ngit clone git@github.com:Serhiy-Nazarov/demo-error-with-vuex-register-module.git\r\nyarn install\r\nyarn dev\r\n\r\nAfter this, open a console in the browser an look to messages.\r\n\r\n\r\n### What is expected?\r\ntwo modules will be registered\r\n\r\n### What is actually happening?\r\nOnly first module (with preserveState: false) is registered\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7080438699","Type":"IssuesEvent","CreatedAt":"2018-01-10T13:32:00","Actor":"Serhiy-Nazarov","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/issues/1130","RelatedDescription":"Opened issue \"registerModule with option { preserveState: true } not working\" (#1130) at vuejs/vuex","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://github.com/Serhiy-Nazarov/demo-error-with-vuex-register-module/blob/master/src/store/index.js](https://github.com/Serhiy-Nazarov/demo-error-with-vuex-register-module/blob/master/src/store/index.js)\r\n\r\n### Steps to reproduce\r\ngit clone git@github.com:Serhiy-Nazarov/demo-error-with-vuex-register-module.git\r\nyarn install\r\nyarn dev\r\n\r\nAfter this, open a console in the browser an look to messages.\r\n\r\n\r\n### What is expected?\r\ntwo modules will be registered\r\n\r\n### What is actually happening?\r\nOnly first module (with preserveState: false) is registered\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"}},"RunOn":"2018-01-11T05:30:31.7643115Z","RunDurationInMilliseconds":1795}