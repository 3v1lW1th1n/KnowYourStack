{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework May 2018 Preview of Quality Rollup","PublishedOn":"2018-05-15T18:10:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Resolves an issue in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core May 2018 Update","PublishedOn":"2018-05-08T22:31:30+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2018 Update. This update includes .NET Core 2.1.200 SDK and ASP.NET Core 2.0.8. Security Microsoft is releasing this security advisory to provide information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/","RawContent":null},{"Title":".NET Framework May 2018 Security and Quality Rollup","PublishedOn":"2018-05-08T21:18:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Security and Quality Rollup. Security CVE-2018-1039 – Windows Security Feature Bypass Vulnerability A security feature bypass vulnerability exists in Windows which...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.7","PublishedOn":"2018-05-08T18:22:06+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"We’re excited to share updates about changes to F# and F# tools which shipped with the Visual Studio 2017 version 15.7 release. Let’s dive in! Type Providers now support .NET Standard For those who...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/f-language-and-tools-update-for-visual-studio-2017-version-15-7/","RawContent":null},{"Title":"Introducing ML.NET: Cross-platform, Proven and Open Source Machine Learning Framework","PublishedOn":"2018-05-08T00:41:28+00:00","CommentsCount":23,"FacebookCount":0,"Summary":"Today at //Build 2018, we are excited to announce the preview of ML.NET, a cross-platform, open source machine learning framework. ML.NET will allow .NET developers to develop their own models and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 RC 1","PublishedOn":"2018-05-07T18:00:05+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are excited to announce that the first release candidate of EF Core 2.1 is available, alongside .NET Core 2.1 RC 1 and ASP.NET Core 2.1 RC 1, for broad testing, and now also for production...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-entity-framework-core-2-1-rc-1/","RawContent":null},{"Title":".NET Core 3 and Support for Windows Desktop Applications","PublishedOn":"2018-05-07T15:40:04+00:00","CommentsCount":286,"FacebookCount":0,"Summary":"At Microsoft Build Live today, we are sharing a first look at our plans for .NET Core 3. The highlight of .NET Core 3 is support for Windows desktop applications, specifically Windows Forms, Windows...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/","RawContent":null},{"Title":"Announcing .NET Core 2.1 RC 1","PublishedOn":"2018-05-07T15:39:20+00:00","CommentsCount":48,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 2.1 Release Candidate 1 (RC 1). The .NET Core 2.1 RC 1 is now ready for broad testing and for production use. Our quality, reliability, and performance testing...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":54,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":75,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7640755266","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:32:51","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Opened pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""},{"Id":"7640750127","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:31:03","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/101","RelatedDescription":"Opened pull request \"Create mlnet.md\" (#101) at dotnet/home","RelatedBody":""},{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7660843516","Type":"IssuesEvent","CreatedAt":"2018-05-11T12:12:46","Actor":"Longvimol","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/69","RelatedDescription":"Opened issue \"Dotnet / announcement \" (#69) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\n"},{"Id":"7644965785","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:03:40","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to ASP.NET Core 2.0.8.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to 2.0.8 to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_"},{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7687108925","Type":"PullRequestEvent","CreatedAt":"2018-05-17T03:23:25","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18027","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, PgoData to preview1-26517-01, preview1-26517-01, master-20180516-1546, respectively (master)\" (#18027) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7687017223","Type":"PullRequestEvent","CreatedAt":"2018-05-17T02:49:19","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18028","RelatedDescription":"Merged pull request \"Replace sizeof(TADDR) with TARGET_POINTER_SIZE in Zap\" (#18028) at dotnet/coreclr","RelatedBody":"This PR is work towards Cross-Bitness Support for CrossGen (#16513):\r\n* Add `#include \"gcinfotypes.h\"` to make macro `TARGET_POINTER_SIZE` available in src/zap\r\n* Replace `sizeof(TADDR)` with macro `TARGET_POINTER_SIZE`\r\n\r\n@jkotas PTAL"},{"Id":"7686880859","Type":"PullRequestEvent","CreatedAt":"2018-05-17T01:59:52","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18007","RelatedDescription":"Merged pull request \"Generate EventSources Representing DotNETRuntime Eventing Providers\" (#18007) at dotnet/coreclr","RelatedBody":"These EventSources will be used to dispatch the events that originate from the native providers to managed EventListeners.\r\n\r\nAs of this PR, these EventSources aren't used and are marked as internal."},{"Id":"7686586136","Type":"PullRequestEvent","CreatedAt":"2018-05-17T00:06:33","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18028","RelatedDescription":"Opened pull request \"Replace sizeof(TADDR) in Zap\" (#18028) at dotnet/coreclr","RelatedBody":"This PR is work towards Cross-Bitness Support for CrossGen (#16513):\r\n* Add `#include \"gcinfotypes.h\"` to make macro `TARGET_POINTER_SIZE` available in src/zap\r\n* Replace `sizeof(TADDR)` with macro `TARGET_POINTER_SIZE`\r\n\r\n@jkotas PTAL"},{"Id":"7686461515","Type":"PullRequestEvent","CreatedAt":"2018-05-16T23:22:42","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18025","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#18025) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"7686409275","Type":"PullRequestEvent","CreatedAt":"2018-05-16T23:05:45","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18027","RelatedDescription":"Opened pull request \"Update PgoData to master-20180516-1546 (master)\" (#18027) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7686352765","Type":"PullRequestEvent","CreatedAt":"2018-05-16T22:48:41","Actor":"AtsushiKan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17881","RelatedDescription":"Merged pull request \"System.Reflection: Replicate custom modifiers of method parameters in MemberRef signatures\" (#17881) at dotnet/coreclr","RelatedBody":"This is in response to https://github.com/dotnet/corefx/issues/29254.\r\n\r\n`ModuleBuilder.GetMemberRefToken` reproduces a method's signature for use in a *MethodRef* metadata entry, but currently ignores custom modifiers placed on the method's parameters... which leads to non-matching signatures and `MissingMethodException`s when using e.g. reflection.\r\n\r\nThis commit adds a new method overload (in order to avoid a larger refactoring for now) that allows the inclusion of custom modifiers on parameters.\r\n\r\n~~This is currently work in progress:~~\r\n\r\n* [X] ~~Needs further testing.~~  \r\n   I ran successful end-to-end tests using tests from Castle DynamicProxy, which has tests targeting this. I'm going to submit another PR with tests for dotnet/corefx.\r\n\r\n* [X] ~~Are there any code paths into `ModuleBuilder.GetMemberRefToken` that are negatively affected by the change made?~~  \r\n   It appears unlikely and did not find any (but it's pretty hard to keep track here, given all the branching and similarly named methods strewn across at least two classes).\r\n\r\n* [X] ~~Are there any other code paths into the method that could profit from the change made?~~  \r\n   Additional code paths have been included in the second commit of this PR.\r\n\r\n* [X] ~~Shouldn't the same be done for the methods' return type (not just its parameters)?~~  \r\n   Yes, but as it turns out, doing this for return parameters poses some unique problems that are perhaps better dealt with in a separate, dedicated PR."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7687288250","Type":"PullRequestEvent","CreatedAt":"2018-05-17T04:35:17","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9300","RelatedDescription":"Merged pull request \"Add the NoWarn option when producing Cli.Utils for full framework as well\" (#9300) at dotnet/cli","RelatedBody":"Add the NoWarn option when producing Cli.Utils for full framework as well.\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7680627988","Type":"PullRequestEvent","CreatedAt":"2018-05-16T02:46:56","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/734","RelatedDescription":"Merged pull request \"Run msbuild.cmd from Tools dir relative to repo path in master\" (#734) at dotnet/standard","RelatedBody":"See https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build/index?buildId=1689917&_a=summary. It appears I have to make the path to the Tools directory relative to the repo root.\r\n\r\nCC @weshaggard @MattGal "},{"Id":"7680627712","Type":"PullRequestEvent","CreatedAt":"2018-05-16T02:46:49","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/735","RelatedDescription":"Merged pull request \"Run msbuild.cmd from Tools dir relative to repo path in 2.0.0\" (#735) at dotnet/standard","RelatedBody":"See https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build/index?buildId=1689917&_a=summary. It appears I have to make the path to the Tools directory relative to the repo root.\r\n\r\nCC @weshaggard @MattGal"},{"Id":"7680541571","Type":"IssuesEvent","CreatedAt":"2018-05-16T02:14:50","Actor":"sam-wheat","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/736","RelatedDescription":"Opened issue \"Documentation error\" (#736) at dotnet/standard","RelatedBody":"With regard to [this page](https://docs.microsoft.com/en-us/dotnet/standard/net-standard)\r\n\r\nThe following sentence is ambiguous:\r\n\r\n> The column header indicates the .NET Standard version that your target supports (and any lower .NET Standard versions will also support it).\r\n\r\nIf \"it\" means your implementation than the sentence is also incorrect.  The correct sentences are:\r\n\"You may also target any lower .Net Standard.\"\r\n\"Higher .Net standards will also support your implementation\".\r\n"},{"Id":"7679442777","Type":"PullRequestEvent","CreatedAt":"2018-05-15T20:48:31","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/735","RelatedDescription":"Opened pull request \"Run msbuild.cmd from Tools dir relative to repo path in 2.0.0\" (#735) at dotnet/standard","RelatedBody":"See https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build/index?buildId=1689917&_a=summary. It appears I have to make the path to the Tools directory relative to the repo root.\r\n\r\nCC @weshaggard @MattGal"},{"Id":"7679441498","Type":"PullRequestEvent","CreatedAt":"2018-05-15T20:48:17","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/734","RelatedDescription":"Opened pull request \"Run msbuild.cmd from Tools dir relative to repo path in master\" (#734) at dotnet/standard","RelatedBody":"See https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build/index?buildId=1689917&_a=summary. It appears I have to make the path to the Tools directory relative to the repo root.\r\n\r\nCC @weshaggard @MattGal "},{"Id":"7674747401","Type":"PullRequestEvent","CreatedAt":"2018-05-15T06:00:24","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/733","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02815-01 (master)\" (#733) at dotnet/standard","RelatedBody":""},{"Id":"7674727375","Type":"IssuesEvent","CreatedAt":"2018-05-15T05:53:39","Actor":"Jeelliya","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/732","RelatedDescription":"Opened issue \"System.IO.FileNotFoundException: 'Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.'\" (#732) at dotnet/standard","RelatedBody":"Please anyone who have faced the same issue and solved it please do reply"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7687419374","Type":"PullRequestEvent","CreatedAt":"2018-05-17T05:29:17","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/29702","RelatedDescription":"Closed pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to preview1-02815-01, preview1-26515-05, preview1-26515-04, preview1-26515-01, beta-26515-00, beta-26515-00, respectively (master)\" (#29702) at dotnet/corefx","RelatedBody":""},{"Id":"7687155397","Type":"IssuesEvent","CreatedAt":"2018-05-17T03:41:19","Actor":"douglasg14b","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29759","RelatedDescription":"Opened issue \"Extremely poor performance of ConcurrentQueue.Count\" (#29759) at dotnet/corefx","RelatedBody":"Getting the `Count` property is very slow, and as the size of the queue grows it takes longer and longer to retrieve this property. Eventually almost all processing power is utilized by the retrieval of `Count`.\r\n\r\n**Example:**\r\n\r\n```cs\r\nusing System;\r\nusing System.Collections.Concurrent;\r\nusing System.Diagnostics;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        //Measures the time it takes to get Count 1000 times as the number of queue elements increases\r\n        static void Main(string[] args)\r\n        {\r\n            ConcurrentQueue<int> queue = new ConcurrentQueue<int>();\r\n\r\n            Stopwatch sw = new Stopwatch();\r\n            Console.WriteLine($\"Ms ---- Elements\");\r\n            for (int i = 0; i < 1000000; i++)//1 million\r\n            {\r\n                sw.Start();\r\n\r\n                if (queue.Count >= 100000) //100k\r\n                {\r\n                    break;\r\n                }\r\n\r\n                sw.Stop();\r\n\r\n                queue.Enqueue(i);\r\n                if (i % 1000 == 0)\r\n                {\r\n                    \r\n                    Console.WriteLine($\"{sw.ElapsedMilliseconds} ---- {i}\");\r\n                    sw.Reset();\r\n                }\r\n                \r\n                \r\n            }\r\n\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n \r\n**Example output:**\r\n\r\n![image](https://user-images.githubusercontent.com/1400380/40155578-5c852562-5949-11e8-9452-56ae0c8ef332.png)\r\n\r\n"},{"Id":"7687059281","Type":"PullRequestEvent","CreatedAt":"2018-05-17T03:04:37","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29758","RelatedDescription":"Opened pull request \"Fix client certificate lifetime handling in tests\" (#29758) at dotnet/corefx","RelatedBody":"This was a difficult bug to track down. Our use of importing PFX files into the\r\ntests has problems due to a combination of issues. The summary is that these\r\nissues cause the private key (which is written to a temp file on disk) to get\r\ncorrupted/deleted. This is why we would get random errors about \"invalid client\r\ncredentials\" when using client certificates in HttpClient (or SslStream).\r\n\r\nThanks to @bartonjs for helping me work thru this.\r\n\r\nThe lifetime of the temp file containing the private key is associated with the managed\r\nX509Certificate2 object that is created. However, our use of X509Certificate2Collection\r\nfollowed by the use of the .Find() API in\r\n[GetEligibleClientCertificate](https://github.com/dotnet/corefx/blob/10aa8277de2521fb1e6a5b42d053ad8cc947be81/src/Common/src/System/Net/Security/CertificateHelper.cs#L55-L59)\r\ncauses new managed objects to get created including both a new collection object and\r\nnew certificate objects wrapping the existing native PCCERT_CONTEXT of the old managed\r\ncertificate object. This causes lifetime issues for the temp file containing the private\r\nkey since the old managed objects are GC'd.\r\n\r\nIn terms of fixing this for the tests, I've optimized the Configuration.Certificates\r\nhelper and removed constructs that we don't actually use in our tests. Switching from\r\nusing .Import() on the collection object to actually creating the X509Certificate2\r\nobject directly helps with managing the lifetime of the certificate.\r\n\r\nI will be doing a follow-up PR to optimze GetEligibleClientCertificate() to switch from\r\nusing .Find() and instead directly query the certificates in the original collection.\r\nThis will result in less managed objects being created as well as avoid additional private\r\nkey lifetime issues for certificates imported that use the default X509KeyStorage.DefaultKeySet\r\nflags.\r\n\r\nI also fixed a problem with the test which was always failing on NETFX.\r\n\r\nCloses #9543"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7686631272","Type":"IssuesEvent","CreatedAt":"2018-05-17T00:24:07","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5810","RelatedDescription":"Opened issue \"wasm: build wasm fails after build clean\" (#5810) at dotnet/corert","RelatedBody":"Pulling corert at 3bc92075760d474f64686b86882e532ad66b9780 `build clean` succeeds, but then `build wasm` fails with \r\n```\r\nD:\\GitHub\\corert>build wasm\r\nChecking pre-requisites...\r\n\r\n**********************************************************************\r\n** Visual Studio 2017 Developer Command Prompt v15.7.1\r\n** Copyright (c) 2017 Microsoft Corporation\r\n**********************************************************************\r\nCommencing CoreRT Repo build\r\n\r\nCommencing build of native components for WebAssembly.wasm.Debug\r\n\r\n**********************************************************************\r\n** Visual Studio 2017 Developer Command Prompt v15.7.1\r\n** Copyright (c) 2017 Microsoft Corporation\r\n**********************************************************************\r\n[vcvarsall.bat] Environment initialized for: 'x86_x64'\r\n-- Configuring done\r\nCMake Error at System.Private.TypeLoader.Native/CMakeLists.txt:36 (add_library):\r\n  Cannot find source file:\r\n\r\n    D:/GitHub/corert/src/Native/System.Private.TypeLoader.Native/wasm/ConstrainedCallSupportHelpers.S\r\n\r\n  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp\r\n  .hxx .in .txx\r\n\r\n\r\nCMake Error: Cannot determine link language for target \"System.Private.TypeLoader.Native\".\r\nCMake Error: CMake can not determine linker language for target: System.Private.TypeLoader.Native\r\n-- Generating done\r\n-- Build files have been written to: D:/GitHub/corert/bin/obj/Native/WebAssembly.wasm.Debug\r\nERROR:root:Configure step failed with non-zero return code 1! Command line: ['D:\\\\Program Files\\\\CMake\\\\bin\\\\cmake.exe', '-DCMAKE_CROSSCOMPILING_EMULATOR=\"D:/GitHub/emsdk/node/8.9.1_64bit/bin/node.exe\"', '-DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=1', '-DCMAKE_TOOLCHAIN_FILE=D:\\\\GitHub\\\\emsdk\\\\emscripten\\\\1.37.36/cmake/Modules/Platform/Emscripten.cmake', '-DCLR_CMAKE_TARGET_ARCH=wasm', '-DCMAKE_BUILD_TYPE=Debug', '-G', 'NMake Makefiles', 'D:\\\\GitHub\\\\corert\\\\buildscripts\\\\..\\\\src\\\\Native'] at D:\\GitHub\\corert\\bin\\obj\\Native\\WebAssembly.wasm.Debug\r\n```\r\n"},{"Id":"7679952954","Type":"IssuesEvent","CreatedAt":"2018-05-15T22:49:12","Actor":"Spongman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5809","RelatedDescription":"Opened issue \"cannot install pre-requisites\" (#5809) at dotnet/corert","RelatedBody":"can't install `libcurl4-openssl-dev` AND `dotnet-sdk-2.1.200` at the same time on bionic on wsl.\r\n\r\n```\r\n$ lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 18.04 LTS\r\nRelease:        18.04\r\nCodename:       bionic\r\n$ uname -a\r\nLinux grunge 4.4.0-17134-Microsoft #48-Microsoft Fri Apr 27 18:06:00 PST 2018 x86_64 x86_64 x86_64 GNU/Linux\r\n$ sudo apt install libcurl4-openssl-dev\r\nReading package lists... Done\r\nBuilding dependency tree\r\nReading state information... Done\r\nSome packages could not be installed. This may mean that you have\r\nrequested an impossible situation or if you are using the unstable\r\ndistribution that some required packages have not yet been created\r\nor been moved out of Incoming.\r\nThe following information may help to resolve the situation:\r\n\r\nThe following packages have unmet dependencies:\r\n libcurl4-openssl-dev : Depends: libcurl4 (= 7.58.0-2ubuntu3) but it is not going to be installed\r\nE: Unable to correct problems, you have held broken packages.\r\n$ sudo apt install libcurl4\r\nReading package lists... Done\r\nBuilding dependency tree\r\nReading state information... Done\r\nThe following packages were automatically installed and are no longer required:\r\n  aspnetcore-store-2.0.0 aspnetcore-store-2.0.3 aspnetcore-store-2.0.5 aspnetcore-store-2.0.6 aspnetcore-store-2.0.7\r\n  aspnetcore-store-2.0.8 dotnet-host dotnet-hostfxr-2.0.3 dotnet-hostfxr-2.0.7 dotnet-runtime-deps-2.1.0-rc1 liblttng-ust-ctl4\r\n  liblttng-ust0 liburcu6\r\nUse 'sudo apt autoremove' to remove them.\r\nThe following packages will be REMOVED:\r\n  dotnet-runtime-2.0.7 dotnet-sdk-2.1.200 libcurl3\r\nThe following NEW packages will be installed:\r\n  libcurl4\r\n0 upgraded, 1 newly installed, 3 to remove and 0 not upgraded.\r\nNeed to get 214 kB of archives.\r\nAfter this operation, 270 MB disk space will be freed.\r\n```"},{"Id":"7673295508","Type":"IssuesEvent","CreatedAt":"2018-05-14T21:37:35","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5808","RelatedDescription":"Opened issue \"Casting throws out-of-bounds exception in optimized WASM builds\" (#5808) at dotnet/corert","RelatedBody":"The WebAssembly casting test throws an out-of-bounds exception when compiled with LLVM optimizations enabled (```-O2``` and ```--llvm-lto=2```) and in WASM mode. Using the same bitcode, but building asm.js, with ```-O0``` or without ```--emrun``` does not fail. It's not clear when this failure was introduced.\r\n\r\nOutput from the test looks like:\r\n```\r\nInt to String Test: Ok if next line says 42.\r\n42\r\nexception thrown: RuntimeError: index out of bounds,wasm-function[135]@http://localhost:6931/HelloWasm.js:38620:1\r\nwasm-function[179]@http://localhost:6931/HelloWasm.js:63457:1\r\nwasm-function[174]@http://localhost:6931/HelloWasm.js:57569:1\r\nwasm-function[7516]@http://localhost:6931/HelloWasm.js:4629529:1\r\nwasm-function[7889]@http://localhost:6931/HelloWasm.js:4871540:1\r\nModule._main@http://localhost:6931/HelloWasm.js:1:126607\r\ncallMain@http://localhost:6931/HelloWasm.js:1:130981\r\ndoRun@http://localhost:6931/HelloWasm.js:1:131666\r\nrun/<@http://localhost:6931/HelloWasm.js:1:131834\r\n```"},{"Id":"7673261177","Type":"PullRequestEvent","CreatedAt":"2018-05-14T21:29:56","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5794","RelatedDescription":"Merged pull request \"improved llvm generated variable names for WASM\" (#5794) at dotnet/corert","RelatedBody":"@morganbr \r\nThis is to follow up on the work done in #5784, it tries to pipe through as much info as possible when generating the names for llvm variables. Its not perfect, but I think it dramatically improves the readability of most common cases."},{"Id":"7673252286","Type":"PullRequestEvent","CreatedAt":"2018-05-14T21:27:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5807","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5807) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7673045566","Type":"PullRequestEvent","CreatedAt":"2018-05-14T20:46:01","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5805","RelatedDescription":"Merged pull request \"Start building System.Private.TypeLoader.Native\" (#5805) at dotnet/corert","RelatedBody":"And remove workaround that was trying to avoid dependency on `ConstrainedCallSupport_GetStubs`."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"996461470748622848","CreatedAt":"2018-05-15T18:45:02+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Preview of Quality Rollup https://t.co/z5jUANGS1A","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":6,"RawContent":null},{"Id":"994438149693620225","CreatedAt":"2018-05-10T04:45:05+00:00","UserScreenname":"dotnet","Text":"Bye bye! See you next year for #MSBuild 👋 https://t.co/IwcXQwKarV","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":105,"FavoriteCount":10,"RawContent":null},{"Id":"993982168476012544","CreatedAt":"2018-05-08T22:33:10+00:00","UserScreenname":"dotnet","Text":".NET Core May 2018 Update https://t.co/OZkHLwpebZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":34,"RawContent":null},{"Id":"993982051735879680","CreatedAt":"2018-05-08T22:32:43+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Security and Quality Rollup https://t.co/jmOfJy1TEn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-05-17T05:30:23.2200593Z","RunDurationInMilliseconds":7399}