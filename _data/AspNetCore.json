{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET application running Kestrel. Since 2.0 we have been hard at...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing compatibility version in MVC","PublishedOn":"2018-02-27T22:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Ryan Nowak In 2.1 we&#8217;re adding a feature to address a long-standing problem for maintaining MVC &#8211; how do we make improvements to framework code without making it...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/introducing-compatibility-version-in-mvc/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Getting started with SignalR","PublishedOn":"2018-02-27T21:57:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since 2013, ASP.NET developers have been using SignalR to build real-time web applications. Now, with ASP.NET Core 2.1 Preview 1, we&#8217;re bringing SignalR over to ASP.NET Core so you can build...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Using ASP.NET Core Previews on Azure App Service","PublishedOn":"2018-02-27T19:18:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are 3 options to get ASP.NET Core 2.1 Preview applications running on Azure App Service: Installing the Preview1 site extension Deploying your app self-contained Using Web Apps for Containers...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-using-asp-net-core-previews-on-azure-app-service/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for using HTTPS","PublishedOn":"2018-02-27T18:01:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Securing web apps with HTTPS is more important than ever before. Browser enforcement of HTTPS is becoming increasingly strict. Sites that don&#8217;t use HTTPS are increasingly labeled as insecure....","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-https-improvements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1 now available","PublishedOn":"2018-02-27T18:00:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we&#8217;re very happy to announce that the first preview of the next minor release of ASP.NET Core and .NET Core is now available for you to try out. We&#8217;ve been working hard on this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-now-available/","RawContent":null},{"Title":"Announcing ASP.NET MVC 5.2.4, Web API 5.2.4, and Web Pages 3.2.4","PublishedOn":"2018-02-12T17:36:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released stable packages for ASP.NET MVC 5.2.4, Web API 5.2.4, and Web Pages 3.2.4 on NuGet. This release contains some minor bug fixes and a couple of new features specifically targeted at...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/12/announcing-asp-net-mvc-5-2-4-web-api-5-2-4-and-web-pages-3-2-4/","RawContent":null},{"Title":"Two Lesser Known Tools for Local Azure Development","PublishedOn":"2018-02-09T00:01:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you’re developing applications that target Azure services (e.g. Web Apps, Functions, Storage), you’ll want to know about two powerful tools that come with Visual Studio 2017 and the Azure...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/08/two-lesser-known-tools-for-local-azure-development/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7313282687","Type":"IssuesEvent","CreatedAt":"2018-03-01T00:18:34","Actor":"natemcmaster","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2775","RelatedDescription":"Closed issue \"Broken symlinks return HTTP 500 instead of HTTP 404\" (#2775) at aspnet/Home","RelatedBody":"Repro:\r\n```\r\ndotnet new mvc\r\nln -s doesnotexists.txt wwwroot/test.txt\r\ndotnet run\r\n```\r\nhttp://localhost:5000/test.txt\r\n\r\n**Expected**\r\nHTTP 404. This file does not exist\r\n\r\n**Actual**\r\nHTTP 500\r\n```\r\nFileNotFoundException: Could not find file '/private/tmp/symlink/wwwroot/test.txt'.\r\nInterop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, string path, bool isDirectory, Func<ErrorInfo, ErrorInfo> errorRewriter)\r\nMicrosoft.Win32.SafeHandles.SafeFileHandle.Open(string path, OpenFlags flags, int mode)\r\nSystem.IO.FileStream..ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options)\r\nMicrosoft.Extensions.FileProviders.Physical.PhysicalFileInfo.CreateReadStream()\r\n```\r\n\r\n**details**\r\nmacOS\r\n```\r\n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.1.0-preview1-28042\" />\r\n```\r\n"},{"Id":"7313065334","Type":"IssuesEvent","CreatedAt":"2018-02-28T23:15:33","Actor":"ajaybhargavb","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2876","RelatedDescription":"Closed issue \"[JsonPatch]: PathHelpers.NormalizePath should allow spaces and \\\\ characters\" (#2876) at aspnet/Home","RelatedBody":"Consider\r\n```\r\npublic class Person\r\n{\r\n    [JsonProperty(\"Person Name\")]\r\n    public string Name { get; set; }\r\n}\r\n```\r\n\r\nA patch can be sucessfully applied to this property as \r\n```C#\r\nvar doc = new JsonPatchDocument\r\n{\r\n    Operations = \r\n    {\r\n        new Operation(\"add\", \"/Person Name\", null, \"New Name\"),\r\n    },\r\n};\r\n\r\ndoc.ApplyTo(person); // This works correctly.\r\ndoc.Add(\"Person Name\", \"New Name\") fails\r\n```\r\n\r\nSame deal with back slashes. The invalid char check in that method is kinda unncecessary."},{"Id":"7311667250","Type":"IssuesEvent","CreatedAt":"2018-02-28T18:29:57","Actor":"Legends","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2912","RelatedDescription":"Closed issue \"How to build the source files\" (#2912) at aspnet/Home","RelatedBody":"**I want to build the source files for each project below.**\r\nBoth ASP.NET Core and Microsoft.AspNetCore.Mvc fails when executing **build.ps1**, which is part of the root folder.\r\n\r\nAnd why does it try to download another zip file?\r\n\r\n\r\n> Downloading KoreBuild from https://github.com/aspnet/KoreBuild/archive/rel/2.0.0.zip\r\n> Failed to download 'https://github.com/aspnet/KoreBuild/archive/rel/2.0.0.zip': The request was aborted: Could not create SSL/TLS secure channel.\r\n> Waiting 10 seconds before retrying. Retries left: 5"},{"Id":"7311347932","Type":"IssuesEvent","CreatedAt":"2018-02-28T17:30:22","Actor":"Legends","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2912","RelatedDescription":"Opened issue \"How to build the source files\" (#2912) at aspnet/Home","RelatedBody":"Both ASP.NET Core and Microsoft.AspNetCore.Mvc fails when executing **build.ps1**, which is part of the root folder.\r\n\r\nAnd why does it try to download another zip file?\r\n\r\n\r\n> Downloading KoreBuild from https://github.com/aspnet/KoreBuild/archive/rel/2.0.0.zip\r\n> Failed to download 'https://github.com/aspnet/KoreBuild/archive/rel/2.0.0.zip': The request was aborted: Could not create SSL/TLS secure channel.\r\n> Waiting 10 seconds before retrying. Retries left: 5"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7314016697","Type":"IssuesEvent","CreatedAt":"2018-03-01T04:34:48","Actor":"neville-nazerane","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1518","RelatedDescription":"Opened issue \"Doesn't connect with xamarin forms\" (#1518) at aspnet/SignalR","RelatedBody":"When I try the following\r\n\r\n1. Create a new Xamarin Forms project\r\n2. Update all release packages\r\n3. Run `Install-Package Microsoft.AspNetCore.SignalR.Client -Version 1.0.0-preview1-final` on the portable project\r\n\r\nI find the following error:\r\n> \"Could not load assembly 'System.Threading.Tasks.Extensions' during startup registration\". \r\n\r\nI have tried installing the latest pre-release of `System.Threading.Tasks.Extensions`. Still no change in the error."},{"Id":"7312791647","Type":"PullRequestEvent","CreatedAt":"2018-02-28T22:12:00","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1510","RelatedDescription":"Merged pull request \"Add some more logging\" (#1510) at aspnet/SignalR","RelatedBody":""},{"Id":"7312778823","Type":"PullRequestEvent","CreatedAt":"2018-02-28T22:09:12","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1516","RelatedDescription":"Merged pull request \"set the RID for tests in netfx\" (#1516) at aspnet/SignalR","RelatedBody":"The lack of this was causing my builds to fail with errors loading `libuv` because it wasn't being dropped in the bin folder. Not sure why AppVeyor seemed to be passing..."},{"Id":"7312349660","Type":"PullRequestEvent","CreatedAt":"2018-02-28T20:42:02","Actor":"pakrym","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1501","RelatedDescription":"Merged pull request \"Pipelines in corefx\" (#1501) at aspnet/SignalR","RelatedBody":"Disregard source.props"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7314051924","Type":"IssuesEvent","CreatedAt":"2018-03-01T04:50:08","Actor":"tb-mtg","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7419","RelatedDescription":"Opened issue \"RazorPages ViewEngine with customizable file extensions.\" (#7419) at aspnet/Mvc","RelatedBody":"The RazorPages view engine (RazorViewEngine) only support cshtml.\r\n\r\nCan the hard coded instances of \"cshtml\" be removed and replace with a property or something to be able to make a custom RazorViewEngine that supports to any file/page/view extension?\r\n\r\nFor example in files:\r\n* Microsoft.AspNetCore.Mvc.Razor.Internal.xxxMicrosoft.AspNetCore.Mvc.Razor.Internal.FileProviderRazorProject (RazorFileExtension)\r\n* Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionDescriptorChangeProvider (_searchPattern)\r\n* Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvokerProvider (ViewStartFileName)\r\n* Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection (EnsureValidPageName)\r\n* Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageSelectorModel (IndexFileName)\r\n* Microsoft.AspNetCore.Mvc.RazorPages.Internal.RazorPagesRazorViewEngineOptionsSetup (Configure uses RazorViewEngine.ViewExtension)\r\n* Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine (ViewExtension & ViewStartFileName)\r\n* Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewEngineOptionsSetup (Configure)\r\n\r\n"},{"Id":"7314043228","Type":"IssuesEvent","CreatedAt":"2018-03-01T04:46:17","Actor":"maxtoroq","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7418","RelatedDescription":"Opened issue \"Password value: input vs editor\" (#7418) at aspnet/Mvc","RelatedBody":"When you use the input helper for a password field, the value attribute is not rendered. When you use the editor helper, the value attribute is rendered. This is how it works in MVC 5, I haven't tried in Core but a quick look at the code tells me it should work the same (see [DefaultEditorTemplates.PasswordTemplate](https://github.com/aspnet/Mvc/blob/ee5535203ebcc58ca8847d3765632bea4bcdb38e/src/Microsoft.AspNetCore.Mvc.ViewFeatures/Internal/DefaultEditorTemplates.cs#L317).\r\n\r\nIs there a reason for this difference?"},{"Id":"7313069344","Type":"IssuesEvent","CreatedAt":"2018-02-28T23:16:35","Actor":"ryanbrandenburg","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6099","RelatedDescription":"Closed issue \"Localization Resource Not Found if Path to View contains \"./\"\" (#6099) at aspnet/Mvc","RelatedBody":"This one had me scratching my head for 2 and 3/4 days!\r\n\r\nI have a view that included a partial from the path ./Partials/_viewname.cshtml.\r\n\r\nI have the translation that was /resourcePath/views/controller_name/partials/_viewname.culture.resx\r\n\r\nI could not figure out why the translations from my resource were not being applied, even after checking the pathing, Resource Keys, etc.  I didn't find the issue until I started recreating how the path to the resource was being created...\r\n\r\nI noticed that the path was being generated as resourcePath.views.controller_name[..].partials._viewname. In the debugger I had seen the '...',   however; I had thought that the debugger was placing ellipses in the string to make it easier to read. \r\n\r\nI did not find any other references related to this.  Let me know if you need anything from me, and I will provide what I can.\r\n\r\nI do think an easy fix will be to add another Replace to the Resource Path string that replaces '...' with '.'.\r\n\r\nThe other thought I had is, if you are not supposed to do './' in your @Html.RenderPartial(Async) calls, why does Razor load the file and render it?\r\n\r\nThanks.  \r\nChris\r\n"},{"Id":"7313031266","Type":"IssuesEvent","CreatedAt":"2018-02-28T23:06:50","Actor":"VAchris","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7366","RelatedDescription":"Closed issue \"asp.net core 2, iis express and client certificates\" (#7366) at aspnet/Mvc","RelatedBody":"I'm developing w/VS2017 using asp.net core 2.0.1 with IIS express. My problem is I cannot get IIS express to negotiate for a SSL client certificate.\r\n\r\nI have tried editing the applicationhost.config located in the \\.vs\\config folder of the project by changing the `<access sslFlags=\"None\" />` to  `<access sslFlags=\"Ssl, SslNegotiateCert\" />`\r\n\r\nI have also tried requiring a certificate using `<access sslFlags=\"Ssl, SslNegotiateCert, SslRequireCert\" />` but this causes IIS express to crash and produce a HttpFailure*.html file which reports: `The page you are attempting to access requires your browser to have a Secure Sockets Layer (SSL) client certificate that the Web server recognizes.`\r\n\r\nMy Startup.cs contains `services.Configure<IISOptions>(options => {options.ForwardClientCertificate = true; });` and I have called `UseIISIntegration` in the BuildWebHost method.\r\n\r\nMy application works as expected when I deploy it on IIS and require SSL client certificates."},{"Id":"7312974299","Type":"IssuesEvent","CreatedAt":"2018-02-28T22:52:41","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7083","RelatedDescription":"Closed issue \"Html.Partial causes deadlocks and should be marked obsolete\" (#7083) at aspnet/Mvc","RelatedBody":"So I've spent the last couple of days trying to figure out the source of deadlocks in our application, and it turns out that `Html.Partial` can cause deadlocks in ASP.NET Core 2.0, because it's [implementation](https://github.com/aspnet/Mvc/blob/760c8f38678118734399c58c2dac981ea6e47046/src/Microsoft.AspNetCore.Mvc.ViewFeatures/Rendering/HtmlHelperPartialExtensions.cs#L233) is:\r\n\r\n```csharp\r\nvar result = htmlHelper.RenderPartialAsync(partialViewName, htmlHelper.ViewData.Model, viewData: null);\r\nresult.GetAwaiter().GetResult();\r\n```\r\n\r\nwhich is a classic misuse of async/await APIs due to the potential for deadlocks when you do synchronous blocking on a task.\r\n\r\nLiterally in our Razor view, changing:\r\n\r\n```\r\n@Html.Partial(\"../Shared/Navigation\", new JamHost.ViewModels.NavigationViewModel\r\n{\r\n  Entries = JamHost.Services.NavigationEntries.GetNavigationEntries(),\r\n  User = CurrentUser.IsAuthenticated ? await CurrentUser.GetUser() : null\r\n})\r\n```\r\n\r\nto\r\n\r\n```\r\n@await Html.PartialAsync(\"../Shared/Navigation\", new JamHost.ViewModels.NavigationViewModel\r\n{\r\n  Entries = JamHost.Services.NavigationEntries.GetNavigationEntries(),\r\n  User = CurrentUser.IsAuthenticated ? await CurrentUser.GetUser() : null\r\n})\r\n```\r\n\r\nis the difference between a deadlock and the page rendering okay, which is *crazy* because as a consumer, it means I can't trust any of the MVC API surface when it comes to \"will using this function cause deadlocks?\". There's no declaration or warning that using Html.Partial in Razor views can cause deadlocks, and the only reason I even thought of changing Html.Partial to Html.PartialAsync as a solution is because [someone else also ran into this problem](https://stackoverflow.com/questions/39195134/asp-net-core-mvc-app-request-never-finish). Indeed at the moment we're fighting random scenarios where our application deadlocks and never continues serving any more requests, and because of this issue I'm likely to believe it is in fact just that half the MVC API surface we're using can cause deadlocks because of an implementation detail.\r\n\r\nAnyway, any methods which can cause deadlocks like this should either be fixed, or be marked Obsolete telling the consumer to use the async version (as far as I'm aware all Razor views are async now anyway so there's no scenarios where the non-async versions should be used).\r\n\r\n\r\n\r\n"},{"Id":"7312924351","Type":"IssuesEvent","CreatedAt":"2018-02-28T22:40:58","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7416","RelatedDescription":"Opened issue \"Redesign the ViewEngine to be async\" (#7416) at aspnet/Mvc","RelatedBody":""},{"Id":"7312873325","Type":"IssuesEvent","CreatedAt":"2018-02-28T22:29:43","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7360","RelatedDescription":"Closed issue \"`[Required]` rarely detects errors in top-level nodes\" (#7360) at aspnet/Mvc","RelatedBody":"`[Required]` on top-level nodes works with `string` and few other types. This goes beyond `ValueType`s, the usual `[Required]` / `[BindRequired]` discussion point. (That part's inherent in `[Required]`'s semantics.) `[Required]` also does not catch the expected errors on pretty much any collection or complex type if it's a top-level node.\r\n\r\nConsider the following action and a `<form>` containing no `<input/>` fields:\r\n``` c#\r\n[HttpPost(\"/Ints\")]\r\npublic IActionResult Ints([Required] int[] ints)\r\n{\r\n    // ...\r\n}\r\n```\r\nIn this scenario, `ModelState.IsValid` will always be `true`.\r\n\r\nBecause `ints` is an action parameter, model binding considers it a top-level node and provides a non-`null` default value. In this case, the default value is an empty array. Importantly, this default is chosen *before* validation. So `[Required]` is passed the empty array and sees nothing amiss.\r\n\r\nOne possibility would be to move our `IsTopLevelNode` special cases out of model binding and into `ParameterBinder` and other model binding callers. This would allow providing default values after validation."},{"Id":"7312870511","Type":"IssuesEvent","CreatedAt":"2018-02-28T22:29:05","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7415","RelatedDescription":"Opened issue \"Create an Analyzer to warn customers to not user Required attribute on top-level parameters\" (#7415) at aspnet/Mvc","RelatedBody":""},{"Id":"7312833802","Type":"IssuesEvent","CreatedAt":"2018-02-28T22:21:03","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7363","RelatedDescription":"Closed issue \"Create a new [Https] attribute that enforces HTTPS on a given endpoint\" (#7363) at aspnet/Mvc","RelatedBody":"This is useful for libraries that expose endpoints to enforce that HTTPS is used on the environments they are consumed. For example libraries with UI for authentication flows. The attribute (and associated filter) will send back a 400 on incoming HTTP calls and will possibly allow you to configure a callback to know that this is happening (for example to revoke/blacklist disclosed credentials)."}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7305424221","Type":"IssuesEvent","CreatedAt":"2018-02-27T18:46:05","Actor":"fe-c","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1653","RelatedDescription":"Opened issue \"Microsoft.AspNetCore.Identity.EntityFrameworkCore nuget reference\" (#1653) at aspnet/Identity","RelatedBody":"Microsoft.AspNetCore.Identity.EntityFrameworkCore (v2.0.1)  uses Microsoft.EntityFrameworkCore.SqlServer (e.g. SqlServerValueGenerationStrategy atribute), but last not refernced by nuget packet of Microsoft.AspNetCore.Identity.EntityFrameworkCore."},{"Id":"7302454876","Type":"IssuesEvent","CreatedAt":"2018-02-27T09:46:03","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1652","RelatedDescription":"Closed issue \"Don't work reference for Microsoft.AspNet.Identity.AspNetCoreCompat\" (#1652) at aspnet/Identity","RelatedBody":"Don't work reference for open source code of package Microsoft.AspNet.Identity.AspNetCoreCompat: https://github.com/aspnet/Identity/tree/dev/src/Microsoft.AspNet.Identity.AspNetCoreCompat\r\n\r\nPlease repair it or specefy new path."},{"Id":"7301743668","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:57:25","Actor":"Testdrivebusiness","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1652","RelatedDescription":"Opened issue \"Don't work reference for Microsoft.AspNet.Identity.AspNetCoreCompat\" (#1652) at aspnet/Identity","RelatedBody":"Don't work reference for open source code of package Microsoft.AspNet.Identity.AspNetCoreCompat: https://github.com/aspnet/Identity/tree/dev/src/Microsoft.AspNet.Identity.AspNetCoreCompat\r\n\r\nPlease repair it or specefy new path."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7313920921","Type":"PullRequestEvent","CreatedAt":"2018-03-01T03:54:45","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2295","RelatedDescription":"Merged pull request \"Pass StringValues via in\" (#2295) at aspnet/KestrelHttpServer","RelatedBody":"Depends on https://github.com/aspnet/Common/pull/311 (for perf)\r\n\r\nResolves https://github.com/aspnet/KestrelHttpServer/issues/2301"},{"Id":"7313920918","Type":"IssuesEvent","CreatedAt":"2018-03-01T03:54:45","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2301","RelatedDescription":"Closed issue \"StringValues should always be passed as in (and a readonly struct)\" (#2301) at aspnet/KestrelHttpServer","RelatedBody":"This makes it more efficient by skipping the copy before passing it by reference; which is what happens with pass by value.\r\n\r\nHowever it should also be marked as a `readonly struct` https://github.com/aspnet/Home/issues/2856"},{"Id":"7312601939","Type":"IssuesEvent","CreatedAt":"2018-02-28T21:33:01","Actor":"andrewbull99","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2353","RelatedDescription":"Opened issue \"\"BadHttpRequestException - Request timed out\"  With Large Requests\" (#2353) at aspnet/KestrelHttpServer","RelatedBody":"We are encountering a problem with Kestrel timeouts when making large requests to a .NET Core API. The requests are being redirected (for authentication purposes) but redirecting large requests seems to cause Kestrel to choke. It's fine with smaller requests, but anything over a couple of hundred MB seems to trigger the timeout. I think this relates to the message body draining functionality. Apparently it can sometimes abandon draining the request body and send a keep-alive response without an exception and sometimes it throws due to timeout. \r\n\r\nThe exception looks like this:\r\n\r\n2018-02-28 10:12:58.8406 [9][KestrelTrace.ConnectionStart] DEBUG: Connection id \"0HLBUQL57F3CA\" started. \r\n2018-02-28 10:12:58.8506 [19][HostingApplicationDiagnostics.LogRequestStarting] INFO: Request starting HTTP/1.1 POST http\\://localhost:5000/api/values/upload  873690784 \r\n2018-02-28 10:12:58.8506 [19][TreeRouterLoggerExtensions.MatchedRoute] DEBUG: Request successfully matched the route with name '(null)' and template 'api/Values/upload'. \r\n2018-02-28 10:12:58.8836 [19][MvcCoreLoggerExtensions.ExecutingAction] DEBUG: Executing action WebApplication1.Controllers.ValuesController.Post (WebApplication1) \r\n2018-02-28 10:12:58.9036 [19][MvcCoreLoggerExtensions.ActionMethodExecuting] INFO: Executing action method WebApplication1.Controllers.ValuesController.Post (WebApplication1) with arguments ((null)) - ModelState is Valid \r\n2018-02-28 10:12:58.9346 [19][MvcCoreLoggerExtensions.ActionMethodExecuted] DEBUG: Executed action method WebApplication1.Controllers.ValuesController.Post (WebApplication1), returned result Microsoft.AspNetCore.Mvc.EmptyResult. \r\n2018-02-28 10:12:58.9656 [19][MvcCoreLoggerExtensions.ExecutedAction] INFO: Executed action WebApplication1.Controllers.ValuesController.Post (WebApplication1) in 62.7726ms \r\n2018-02-28 10:12:58.9816 [19][KestrelTrace.RequestBodyStart] DEBUG: Connection id \"0HLBUQL57F3CA\", Request id \"0HLBUQL57F3CA:00000001\": started reading request body. \r\n2018-02-28 10:13:05.3562 [17][KestrelTrace.ConnectionBadRequest] INFO: Connection id \"0HLBUQL57F3CA\" bad request data: \"Request timed out.\" Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException Request timed out.\r\n2018-02-28 10:13:05.3562 [5][KestrelTrace.RequestBodyDone] DEBUG: Connection id \"0HLBUQL57F3CA\", Request id \"0HLBUQL57F3CA:00000001\": done reading request body. \r\n2018-02-28 10:13:05.3562 [20][KestrelTrace.ConnectionBadRequest] INFO: Connection id \"0HLBUQL57F3CA\" bad request data: \"Request timed out.\" Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException Request timed out. Void ThrowFailed()    at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipeCompletion.ThrowFailed()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Pipe.GetResult(ReadResult& result)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Pipe.Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IReadableBufferAwaiter.GetResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBufferAwaitable.GetResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.<ConsumeAsync>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()\r\n2018-02-28 10:13:05.3872 [9][LibuvTrace.ConnectionPause] DEBUG: Connection id \"0HLBUQL57F3CA\" paused. \r\n2018-02-28 10:13:05.3872 [20][HostingApplicationDiagnostics.LogRequestFinished] INFO: Request finished in 6539.707ms 408  \r\n2018-02-28 10:13:05.3872 [20][KestrelTrace.ConnectionDisconnect] DEBUG: Connection id \"0HLBUQL57F3CA\" disconnecting. \r\n2018-02-28 10:13:05.4092 [17][KestrelTrace.ConnectionStop] DEBUG: Connection id \"0HLBUQL57F3CA\" stopped. \r\n2018-02-28 10:13:05.4092 [9][LibuvTrace.ConnectionWriteFin] DEBUG: Connection id \"0HLBUQL57F3CA\" sending FIN. \r\n\r\n\r\nThis seems to happen much more often when running behind IIS, though I can also get it to happen when running with Krestrel directly.\r\n\r\nFiddler seems to affect it. Sometimes it prevents the issue occurring, which is perhaps not surprising as Fiddler is buffering the request.\r\n\r\nI've created [an example solution](https://github.com/andrewbull99/RequestTimeOutRepro) which seems to trigger the issue quite reliably when running behind IIS. I've been using files of around 800MB. \r\n\r\nOur actual code is using a multi-part request which seems to trigger the issue even when running against Krestrel directly. For simplicity I've not implemented multi-part requests in the repro solution. I can do if you think it would be useful."},{"Id":"7312348972","Type":"PullRequestEvent","CreatedAt":"2018-02-28T20:41:52","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2337","RelatedDescription":"Merged pull request \" React to pipes in corefx\" (#2337) at aspnet/KestrelHttpServer","RelatedBody":"I'll move BufferReader and Writer to common."},{"Id":"7311311878","Type":"IssuesEvent","CreatedAt":"2018-02-28T17:23:54","Actor":"FrederickBrier","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2351","RelatedDescription":"Closed issue \"Knowing when Kestrel has stopped and completed finishing processing requests\" (#2351) at aspnet/KestrelHttpServer","RelatedBody":"This is a feature request. I just finished digging through the Kestrel source, primarily the KestrelServer class, looking for a way to know the server has stopped accepting connections and all processing of requests is complete. There are no events or reactive extensions, no lambda(s) to inject, no lifecycle methods that could be overridden. All the data members are private. None of the methods are virtual. If StopAsync() were virtual, or the _stoppedTcs were a public property, they could be overridden, or used to know the state of the server (non-null TaskCompletionSource<object>, null, or exception object).\r\n\r\nIt would be helpful if the KestrelServer class had some extension points or were not quite so locked down.\r\n\r\nMy use case is that OnShutdown, I want to save the system state in memory to a database. Thank you."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7314051481","Type":"IssuesEvent","CreatedAt":"2018-03-01T04:49:56","Actor":"tb-mtg","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2125","RelatedDescription":"Opened issue \"RazorPages ViewEngine with customizable file extensions.\" (#2125) at aspnet/Razor","RelatedBody":"The RazorPages view engine (RazorViewEngine) only support cshtml.\r\n\r\nCan the hard coded instances of \"cshtml\" be removed and replace with a property or something to be able to make a custom RazorViewEngine that supports to any file/page/view extension?\r\n\r\nFor example in files:\r\n* Microsoft.AspNetCore.Razor.Language.FileSystemRazorProject (EnumerateItems)\r\n* Microsoft.AspNetCore.Mvc.Razor.Extensions.MvcRazorTemplateEngine (Options.ImportsFileName)"},{"Id":"7313593319","Type":"PullRequestEvent","CreatedAt":"2018-03-01T01:58:22","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2123","RelatedDescription":"Merged pull request \"Fix #2099 - make AssemblyExtension public\" (#2123) at aspnet/Razor","RelatedBody":"This is needed when a runtime wants to construct its own configuration\r\nmanually, especially useful in tests."},{"Id":"7312847520","Type":"IssuesEvent","CreatedAt":"2018-02-28T22:23:58","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2063","RelatedDescription":"Closed issue \"Razor Pages Reference Directories\" (#2063) at aspnet/Razor","RelatedBody":"Reference Directories would allow Razor Pages living in other directories to be included in the Pages structure.\r\n\r\nRazor Pages builds routing from the folder structure of the Pages (or other specified) directory. It would be nice to be able to create a folder in the directory that points to another location - a virtual directory. This would allow reusing pages, and composing Razor Page sites from sets of reusable pages.\r\n\r\nFor example -\r\nCurrently, I have a set of pages for an \"approval\" process.\r\n```\r\nPages\r\n   Requests\r\n       Approvals\r\n           Review.cshtml\r\n           Approve.cshtml\r\n```\r\n`http://Requests/Approvals/Review`\r\n\r\nI want to be able to reuse those pages to approve other things, and keep my route logically clean. AFIK, I would need to duplicate those pages\r\n```\r\nPages\r\n   Requests\r\n       Approvals\r\n           Review.cshtml\r\n           Approve.cshtml\r\n   Results\r\n       Approvals\r\n           Review.cshtml\r\n           Approve.cshtml\r\n```\r\n`http://Results/Approvals/Review`\r\n\r\nReference Directories would let me move this common set of pages into another director, and reference it from the pages directory.\r\n```\r\nReusePages\r\n       Approvals\r\n           Review.cshtml\r\n           Approve.cshtml\r\nPages\r\n    Requests\r\n       Approve[ReusePages/Approvals]\r\n    Results\r\n        Approve[ReusePages/Approvals]\r\n``` \r\n```\r\nhttp://Requests/Approve/Review\r\nhttp://Results/Approve/Review\r\n```\r\n\r\n"},{"Id":"7312667064","Type":"PullRequestEvent","CreatedAt":"2018-02-28T21:46:19","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2124","RelatedDescription":"Merged pull request \"Fix #2041 - Add static constructor to DocumentWriter\" (#2124) at aspnet/Razor","RelatedBody":"The instance Create method was always supposed to be static."},{"Id":"7312548567","Type":"PullRequestEvent","CreatedAt":"2018-02-28T21:24:26","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2124","RelatedDescription":"Opened pull request \"Fix #2041 - Add static constructor to DocumentWriter\" (#2124) at aspnet/Razor","RelatedBody":"The instance Create method was always supposed to be static."},{"Id":"7312520502","Type":"PullRequestEvent","CreatedAt":"2018-02-28T21:16:47","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2123","RelatedDescription":"Opened pull request \"Fix #2099 - make AssemblyExtension public\" (#2123) at aspnet/Razor","RelatedBody":"This is needed when a runtime wants to construct its own configuration\r\nmanually, especially useful in tests."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"},{"Id":"7271114444","Type":"IssuesEvent","CreatedAt":"2018-02-20T18:33:27","Actor":"abpiskunov","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/347","RelatedDescription":"Closed issue \"File nesting in Solution Explorer is inconsistent and incorrect\" (#347) at aspnet/Tooling","RelatedBody":"The Solution Explorer for ASP.NET 5 MVC projects has several major problems - one of them is file nesting. The below issues affect Visual Studio 2015 Update 1 with ASP.NET 5 Release Candidate 1.\n#### tl;dr\n- Please fix nesting rules for `.less`, `.scss` and `.sass`, so those files are nested under `.html`.\n- Please fix incorrect nesting that sometimes appear after renaming/moving/copying files and folders.\n- Please provide an option to disable all file nesting, and eventually, options to configure nesting rules.\n- Please fix other critical Solution Explorer issues - this is just one of them, and there are many more.\n#### File nesting is inconsistent when nesting files under `.html`.\n\nThe `.less` and `.scss` files should be nested under `.html`. Those files compile to `.css` just like `.ts` compile to `.js` and they are just as much part of the view component. \n![less-not-nested-under-html](https://cloud.githubusercontent.com/assets/6388663/11942660/6452782c-a838-11e5-9a44-d7ab6a2e5fc9.png)\n![scss-not-nested-under-html](https://cloud.githubusercontent.com/assets/6388663/11942664/66bbd3a6-a838-11e5-8e3c-f1c369d5e1de.png)\nIn fact, if we only have a `.css` file in there, then it _is_ nested as expected, so clearly `.less` and `.scss` should also be nested:\n![css-is-nested-as-expected](https://cloud.githubusercontent.com/assets/6388663/11942670/6be4bdd4-a838-11e5-99b1-1dcc43238459.png)\n\nWhile the above is clearly a bug, and a very annoying one at that, the rules for other file types are less obvious, but should maybe also be considered... maybe `.json` should also be nested under `.html`?\nIt probably contains either settings, string resources, or data for that view component, so it seems resonable to me, although I consider this far less important than getting the style sheet nesting fixed.\n![json-not-nested-under-html](https://cloud.githubusercontent.com/assets/6388663/11939884/4a1bb224-a825-11e5-9ff6-631b4e8fed39.png)\n\nThose nesting rules have been inconsistent ever since they were introduced in ASP.NET 5, and **it really needs to be fixed**. Sure, everything compiles just fine, but I'm getting really pissed off looking at this mess in my Solution Explorer every day. Inconsistencies like this makes the whole concept of nesting seem like an annoyance more than a help, as it raises the obvious question \"if only some files are nested, then why nest anything at all - that's just an extra click to get to the .ts file\". Which brings me to...\n#### File nesting can be annoying\n\nWhile the fundamental idea of file nesting is not nessesarily bad, it can be _very_ annoying at times, which is why, as a _minimum_, **I want an option to disable all file nesting** - and ideally, options to configure the nesting rules.\n\nConsider this folder structure, where the folder already represents a container for the component:\n![file-nesting-is-annoying](https://cloud.githubusercontent.com/assets/6388663/11940913/ff28392a-a82b-11e5-86b4-571bc70d21bb.png)\nHere the file nesting provides no benefit at all, and actually just introduces a _really_ annoying extra click to get to the `.ts` file. A possible fix for this might be to only nest files if the folder name is different from the name of the `.html` file, but this might also be wrong - for example, a folder named `tabs` representing some fancy `tabs` component might actually contain multiple elements that work together, e.g. `tabs.html/js`, `tab-pane.html/js` and `tab-button.html/js`, and in this case we _do_ want nesting for all three of those. Therefore, I strongly believe an option to simply disable all nesting is the best option here - and it is very much needed, because despite this example, we do have projects in which the nesting provides absolutely no value and represents a major annoyance.\n\nOne could also argue that the `.html` file should actually be nested under the `.js` file.\nConsider an Angular 2 application, where the `.ts` file represents the actual Component, annotated with metadata specifying either the path to the `.html` file representing its view, or if the view is small, a string representing the markup of the view. Same for styles, where the metadata in the `.ts` file specifies either the path to the `.css` file, or a string representing the style rules. Here, both the view and the style sheet is clearly dependencies of the `.ts` file, so it would make sense to nest them below that...\n##### An alternative idea\n\nAlternatively, you could consider a completely different approach to nesting, where the part of the file name the files have in common, is used to show a \"virtual folder\" containing all the files - then file nesting could be used only for things like transpiler generated files. The image below is a concept I mocked up to illustrate this idea:\n![virtual-folder-concept](https://cloud.githubusercontent.com/assets/6388663/11942319/042b84ea-a836-11e5-80f1-b5941cfbdfa7.png)\nHere, all the files have the \"foo\" part of their name in common, and is therefore nested under a \"foo\" node in Solution Explorer. However, in the file system, the actual files are all located in the components folder, so in the code the path would be `app/components/foo.js` - nice an clean, works for any file type, and makes no assumptions about whether `.html` or `.js` is more important.\n\nGoing further with this idea, the IDE could also be smart, so when selecting this \"virtual folder\", it could maybe somehow open all the `foo.*` files in a split view (ignoring transpilation output of course), thus providing a quick way to see all the component code at once. Just a thought...\n### File nesting is broken\n\nNot only is file nesting inconsistent, and sometimes annoying, but it is also broken.\nHere are two cases of incorrect behavior I managed to reproduce - unfortunately, this does not seem to fail consistently, so it can be hard to reproduce - but it does happen often enough to be annoying.\n![file-nested-on-drag-copy](https://cloud.githubusercontent.com/assets/6388663/11943207/4749c9e8-a83c-11e5-9f15-304cb16e8419.png)\n![nesting-broken-when-folder-is-renamed](https://cloud.githubusercontent.com/assets/6388663/11943211/4c807074-a83c-11e5-8e71-4bed0bd4353c.png)\n\nPlease take those Solution Explorer issues seriously - I've provided feedback about multiple critical issues several several months ago, and thus far _nothing_ has improved. Solution Explorer still hangs or crashes the whole IDE when a large number of files is modified/moved/copied/renamed, it still has annoying, inconsistent and buggy file nesting, and it still constantly gets out of sync with the file system, crashing first the project system and eventually the whole IDE. I'm more that a little concerned about seeing a release candidate label on something this buggy and unpolished - if this is indeed what you intend to release, then we intend to find another IDE for our frontend development.\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7215731126","Type":"IssuesEvent","CreatedAt":"2018-02-08T09:18:22","Actor":"SteveSandersonMS","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/289","RelatedDescription":"Opened issue \"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)\" (#289) at aspnet/Announcements","RelatedBody":"The `Microsoft.AspNetCore.SpaTemplates` package never shipped in the .NET Core SDK, and never reached an official level of support. The ASP.NET team's development resources are finite, and we think we can deliver more valuable features to ASP.NET developers by focusing elsewhere.\r\n\r\nSo:\r\n\r\n* The `Microsoft.DotNet.Web.Spa.ProjectTemplates` package, containing **Angular**, **React**, and **React+Redux** templates, is **not affected**. This ships in the .NET Core SDK and is officially supported. We continue to invest development effort in this package. We can put *more* time and effort into these SPA templates now the effort isn't so spread out.\r\n* If you have an existing Aurelia/Knockout/Vue project based on our SPA templates, you're not directly affected because these templates are only used to create new projects. You can continue building and shipping your app forever. Obviously we still support and enhance the underlying ASP.NET Core APIs (such as those in JavaScriptServices) that you are using.\r\n* The `Microsoft.AspNetCore.SpaTemplates` package, containing Aurelia, Knockout, and Vue templates, continues to be available, but we'll no longer update it or work on issues related to it.\r\n* We encourage enthusiastic community members to [ship your own `dotnet new` templates](https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates). The `dotnet new` system is extensible for this exact reason. If you want to own the go-to Aurelia/Knockout/Vue project template, now's your chance! You could [fork the ones from `Microsoft.AspNetCore.SpaTemplates`](https://github.com/aspnet/templating/tree/dev/src/Microsoft.AspNetCore.SpaTemplates), or start from scratch depending on what you prefer.\r\n* In the long term, if another JavaScript SPA framework becomes dominant, we will of course consider adding a template for it to the SDK templates package.\r\n\r\nI know this will be irritating to some people, especially those who have worked on PRs for the Aurelia/Knockout/Vue templates. I'm sorry about that! I hope you can understand that our goal is to offer the overall maximum benefit for ASP.NET developers based on the resources available."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":66,"FavoriteCount":50,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Ra… https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"965964952442933249","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"aspnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/HVyIw0Wcgd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":9,"RawContent":null},{"Id":"963791622822612994","CreatedAt":"2018-02-14T15:06:43+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz this FRIDAY at 10am / 15:00 UTC for a free online workshop to get started with ASPNet Core.… https://t.co/qtufFsbfmc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":16,"RawContent":null},{"Id":"963559608869568512","CreatedAt":"2018-02-13T23:44:47+00:00","UserScreenname":"aspnet","Text":"The #ASPNET Community Standup is starting now! Join us!\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":2,"RawContent":null},{"Id":"963556129748918272","CreatedAt":"2018-02-13T23:30:57+00:00","UserScreenname":"aspnet","Text":"Starting in 15 minutes... join us!\n\nhttps://t.co/4Ioo9jNSN2 https://t.co/C7LilH9606","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":8,"RawContent":null},{"Id":"963413986912997376","CreatedAt":"2018-02-13T14:06:08+00:00","UserScreenname":"aspnet","Text":"Join @csharpfritz at 10am ET / 15:00 UTC to learn more about @AspNet Core and get your .NET related questions answe… https://t.co/ORAYG28QGW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"963180036571332609","CreatedAt":"2018-02-12T22:36:30+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"962026058412249090","CreatedAt":"2018-02-09T18:11:00+00:00","UserScreenname":"aspnet","Text":"ASPNET Core 2.0 is out! Join @csharpfritz as he walks you through the improvements, additions and enhancements of t… https://t.co/AC3AJnLo9t","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":52,"FavoriteCount":32,"RawContent":null},{"Id":"961980507939528705","CreatedAt":"2018-02-09T15:10:00+00:00","UserScreenname":"aspnet","Text":"Working with ASPNET and want to invest in Angular? Check out @Paladique at @DevIntersection, March 25-28 in Orlando… https://t.co/i9BCRXD1fc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":16,"RawContent":null},{"Id":"961596291968102400","CreatedAt":"2018-02-08T13:43:16+00:00","UserScreenname":"aspnet","Text":"Our @csharpfritz and ASPInsider @brendoneus will be showing unit testing patterns and structure practices LIVE onli… https://t.co/dvU3elJX8R","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"961390822993399809","CreatedAt":"2018-02-08T00:06:48+00:00","UserScreenname":"aspnet","Text":"Did you miss this week's #ASPNET Community Standup (with the latest news on Blazor, starring @danroth27 and… https://t.co/tfeqgnhClX","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"961390078932148224","CreatedAt":"2018-02-08T00:03:51+00:00","UserScreenname":"aspnet","Text":"Sure, after you've left a PR on the #ASPNET docs...\n\nhttps://t.co/Dau0ZgAUbe\n\n;) https://t.co/s8UGKAhK0e","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":2,"RawContent":null},{"Id":"961382608818130944","CreatedAt":"2018-02-07T23:34:10+00:00","UserScreenname":"aspnet","Text":"Join our Jeff Fritz and ASPInsider Brendan Enrick for a LIVE CODING stream talking about how to write better unit t… https://t.co/7ecMOR53sw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":0,"RawContent":null}]}},"RunOn":"2018-03-01T05:30:08.8795446Z","RunDurationInMilliseconds":7574}