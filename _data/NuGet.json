{"Data":{"Blog":{"FeedItems":[{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10197577121","Type":"IssuesEvent","CreatedAt":"2019-08-13T01:03:41","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7397","RelatedDescription":"Closed issue \"Popups on Admin Support Request page appear in wrong location\" (#7397) at NuGet/NuGetGallery","RelatedBody":"The move to a new version of jQuery appears to have created a bug on our Admin Support Requests page.\r\n\r\n# Steps to reproduce:\r\n\r\n1. [Go to Admin support requests page](https://www.nuget.org/Admin/SupportRequest)\r\n2. Click on either \"History\" or \"Edit\" for any support request\r\n\r\nExpected:\r\n\r\nThe popup appears in the center of the screen.\r\n\r\nActual:\r\n\r\nThe popup appears in the top left corner of the page and an exception is thrown in the console:\r\n```\r\nUncaught TypeError: elem.getClientRects is not a function\r\n    at jQuery.fn.init.offset (site.min.js?v=uBd4cfF2ptMQM7tS8-_LDHUzMDNbpJ9ynKecXvDRak41:10259)\r\n    at Object.getWithinInfo (page-support-requests?v=ezGcDwVBQeVGtS1hlaQwHtI7WMpsDgWfGrrG7-or4FM1:1)\r\n    at jQuery.fn.init.n.fn.position (page-support-requests?v=ezGcDwVBQeVGtS1hlaQwHtI7WMpsDgWfGrrG7-or4FM1:1)\r\n    at n.<computed>.<computed>._position (page-support-requests?v=ezGcDwVBQeVGtS1hlaQwHtI7WMpsDgWfGrrG7-or4FM1:1)\r\n    at n.<computed>.<computed>._position (page-support-requests?v=ezGcDwVBQeVGtS1hlaQwHtI7WMpsDgWfGrrG7-or4FM1:1)\r\n    at n.<computed>.<computed>.open (page-support-requests?v=ezGcDwVBQeVGtS1hlaQwHtI7WMpsDgWfGrrG7-or4FM1:1)\r\n    at n.<computed>.<computed>.open (page-support-requests?v=ezGcDwVBQeVGtS1hlaQwHtI7WMpsDgWfGrrG7-or4FM1:1)\r\n    at HTMLDivElement.<anonymous> (page-support-requests?v=ezGcDwVBQeVGtS1hlaQwHtI7WMpsDgWfGrrG7-or4FM1:1)\r\n    at Function.each (site.min.js?v=uBd4cfF2ptMQM7tS8-_LDHUzMDNbpJ9ynKecXvDRak41:371)\r\n    at jQuery.fn.init.each (site.min.js?v=uBd4cfF2ptMQM7tS8-_LDHUzMDNbpJ9ynKecXvDRak41:206)\r\n```"},{"Id":"10197354558","Type":"IssuesEvent","CreatedAt":"2019-08-12T23:58:55","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7443","RelatedDescription":"Closed issue \"AttributeRouting package missed\" (#7443) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n[AttributeRouting](https://www.nuget.org/packages/AttributeRouting/) package current version is 3.4.2. But several months ago I can downloaded version is 3.5.6, so is anything lose in database?\r\nHere is my local file [AttributeRouting.3.5.6.zip](https://github.com/NuGet/NuGetGallery/files/3490860/AttributeRouting.3.5.6.zip)\r\n\r\n### Screenshots\r\n3.5.6 config from my local.\r\n![image](https://user-images.githubusercontent.com/3859838/62843087-c761fb80-bce9-11e9-99bd-7f6f88fa83cb.png)\r\n\r\nCurrent package config \r\n![image](https://user-images.githubusercontent.com/3859838/62843066-9eda0180-bce9-11e9-8187-68dd5821f980.png)\r\nand error is \r\n![Error](https://user-images.githubusercontent.com/3859838/62842913-6d146b00-bce8-11e9-9808-98284317d2cc.png)\r\n\r\nSo nuget.org missed 3.5.6 package? Or the owner delete versions?\r\n\r\n"},{"Id":"10197324162","Type":"IssuesEvent","CreatedAt":"2019-08-12T23:50:31","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7444","RelatedDescription":"Closed issue \"Homepage messes after sign-in with nuget.org account\" (#7444) at NuGet/NuGetGallery","RelatedBody":"# Describe the bug\r\nAfter signing in with a nuget.org account, the home page was frozen and mess.\r\nSeems like a popup with the title \"Sign-in with Microsoft account\" did not show up on top of the homepage.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. On nuget.org\r\n2. Signing in with nuget.org account\r\n3. See error\r\n\r\n### Expected behavior\r\nMaybe a popup about \"Sign-in with Microsoft account\" should show up.\r\n\r\n### Screenshots\r\n![Screen Shot 2019-08-12 at 11 02 14 AM](https://user-images.githubusercontent.com/13304483/62844085-5d4d5480-bcf1-11e9-9333-544024afa1a1.png)\r\n\r\n"},{"Id":"10197023842","Type":"IssuesEvent","CreatedAt":"2019-08-12T22:33:42","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7446","RelatedDescription":"Opened issue \"[Azure Search] Stand up secondary Azure Search environment to allow A/B testing\" (#7446) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10198417989","Type":"IssuesEvent","CreatedAt":"2019-08-13T05:12:06","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/7406","RelatedDescription":"Reopened issue \"Provide a way to access the value and type of the license without attempting to parse license expression\" (#7406) at NuGet/Home","RelatedBody":"Currently, it seems, the only way to get the data specified in the &lt;license> node of the nuspec file is to call the `NuspecReader.GetLicenseMetadata`. This performs full processing of the value including the license expression parsing. If someone wants to protect themselves from parsing multi-megabyte license expressions they might want to check the length of the expression before attempting to parse it. It would be nice to have a way to access the value of license expression without attempting to parse it.\r\n\r\nBeing able to check the license expression type in the same minimal processing mode would also be nice.\r\n\r\n- improve the error conditions when the license metadata does not contain the type. "},{"Id":"10198417880","Type":"IssuesEvent","CreatedAt":"2019-08-13T05:12:05","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7406","RelatedDescription":"Closed issue \"Provide a way to access the value and type of the license without attempting to parse license expression\" (#7406) at NuGet/Home","RelatedBody":"Currently, it seems, the only way to get the data specified in the &lt;license> node of the nuspec file is to call the `NuspecReader.GetLicenseMetadata`. This performs full processing of the value including the license expression parsing. If someone wants to protect themselves from parsing multi-megabyte license expressions they might want to check the length of the expression before attempting to parse it. It would be nice to have a way to access the value of license expression without attempting to parse it.\r\n\r\nBeing able to check the license expression type in the same minimal processing mode would also be nice.\r\n\r\n- improve the error conditions when the license metadata does not contain the type. "},{"Id":"10198417713","Type":"IssuesEvent","CreatedAt":"2019-08-13T05:12:00","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7406","RelatedDescription":"Closed issue \"Provide a way to access the value and type of the license without attempting to parse license expression\" (#7406) at NuGet/Home","RelatedBody":"Currently, it seems, the only way to get the data specified in the &lt;license> node of the nuspec file is to call the `NuspecReader.GetLicenseMetadata`. This performs full processing of the value including the license expression parsing. If someone wants to protect themselves from parsing multi-megabyte license expressions they might want to check the length of the expression before attempting to parse it. It would be nice to have a way to access the value of license expression without attempting to parse it.\r\n\r\nBeing able to check the license expression type in the same minimal processing mode would also be nice.\r\n\r\n- improve the error conditions when the license metadata does not contain the type. "},{"Id":"10198412831","Type":"IssuesEvent","CreatedAt":"2019-08-13T05:10:32","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8450","RelatedDescription":"Opened issue \"Remove Sha512HashFunction \" (#8450) at NuGet/Home","RelatedBody":"We should investigate removing the SHA512HashFunction. \r\nSHA512Managed is supported in both net472 and netstandard2.0. \r\nI'd imagine the motivation behind having our own function was the fact that .NETStandard did not have the APIs needed yet. \r\n\r\nNote that we might want to have a hashing wrapper, so this is just a blind code removal."},{"Id":"10197978218","Type":"IssuesEvent","CreatedAt":"2019-08-13T02:59:49","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8449","RelatedDescription":"Opened issue \"Remove PDBGit warnings\" (#8449) at NuGet/Home","RelatedBody":"Our builds are full of warnings like this:\r\n\r\n> ##[warning]C:\\Users\\dlab14\\.nuget\\packages\\pdbgit\\3.0.41\\tools\\PdbGit.targets(9,5): Warning : File \"e:\\a\\_work\\260\\s\\build\\shared\\equalityutility.cs\" missing or changed since the PDB was compiled.\r\n\r\nIt appears that every single `.cs` file in the repo gets this warning.\r\n\r\nWe should resolve the issue, so it's easier to find real issues when looking at our build logs"},{"Id":"10197555362","Type":"IssuesEvent","CreatedAt":"2019-08-13T00:57:02","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8448","RelatedDescription":"Opened issue \"Make NuGet.CommandLine.XPlat debuggable\" (#8448) at NuGet/Home","RelatedBody":"Historically it has been very difficult to debug NuGet.CommandLine.XPlat (the entry point to several `dotnet` cli commands), involving copying compiled binaries into a dotnet sdk folder, setting an environment variable to cause NuGet to pause until a debugger is attached, and then attaching Visual Studio as a debugger to the correct PID.\r\n\r\nIt should be as easy to debug as debugging any other command line program."},{"Id":"10196547258","Type":"IssuesEvent","CreatedAt":"2019-08-12T21:02:43","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8442","RelatedDescription":"Closed issue \"Lock file missing entries when RuntimeIdentifier is specified for netcoreapp 3.0 projects\" (#8442) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: dotnet.exe\r\n\r\ndotnet.exe --version: 3.0.100-preview7-012821\r\n\r\nWorked before? If so, with which NuGet version: yes. Seems to work even with current sdk if targeting netcoreapp2.0\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n### Automated repro\r\nDownload [repro_missingRuntimePackage.zip](https://github.com/NuGet/Home/files/3488060/repro_missingRuntimePackage.zip) and run repro.bat for an automated repro.\r\n\r\n### Manual steps\r\n\r\n1. Create a basic .csproj targeting netcoreapp3.0\r\n\r\n2. Add `<RuntimeIdentifier>win-x64</RuntimeIdentifier>`\r\n\r\n3. `dotnet restore --use-lock-file`\r\n\r\n4. Notice that the generated lock file has no packages in it even though the build actually uses several (e.g. microsoft.netcore.app.runtime.win-x64)\r\n\r\nThis is a regression from netcoreapp2.0, which listed all packages as expected.\r\n\r\nTagging @rrelyea and @nkolev92 as FYI.\r\n"},{"Id":"10195544064","Type":"IssuesEvent","CreatedAt":"2019-08-12T18:24:27","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8444","RelatedDescription":"Closed issue \"Test:  improve Apex diagnostic logging\" (#8444) at NuGet/Home","RelatedBody":"To aid in diagnosing test failures, Apex tests should log contents of:\r\n* the Package Manager output window pane\r\n* the Package Manager Console window"},{"Id":"10195536969","Type":"IssuesEvent","CreatedAt":"2019-08-12T18:23:19","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7802","RelatedDescription":"Closed issue \"nuget.xplat list errors when there is msbuild sdk\" (#7802) at NuGet/Home","RelatedBody":"[msbuild sdk](https://github.com/Microsoft/MSBuildSdks/tree/master/src/CentralPackageVersions)\r\n```\r\nλ dotnet list package\r\nerror: Sequence contains more than one element\r\n```\r\n\r\n\r\n### Sample Project\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.0.1\" />\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n\r\n```"},{"Id":"10195471737","Type":"IssuesEvent","CreatedAt":"2019-08-12T18:13:19","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8447","RelatedDescription":"Opened issue \"Get-Package -Updates -ProjectName MyProject does not work\" (#8447) at NuGet/Home","RelatedBody":"@mrward commented on [Sat Jan 26 2019](https://github.com/NuGet/docs.microsoft.com-nuget/issues/1287)\n\n\r\nThe following command does not seem to work in Visual Studio 2017 with NuGet 4.9.2 although it seems like it could work.\r\n\r\n    Get-Package -Updates -ProjectName MyProject\r\n\r\nRunning the above returns the error:\r\n\r\nGet-Package: Parameter set cannot be resolved using the specified named arguments.\r\n\r\nThe GetPackageCommand code does not seem to include ProjectName as part of the Updates parameter set.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/8d300225298df9c6af6c784efffa7522109f0096/src/NuGet.Clients/NuGet.PackageManagement.PowerShellCmdlets/Cmdlets/GetPackageCommand.cs#L36\r\n\r\nAlthough it looks like adding ProjectName to the Updates parameter set would just work without any other code changes.\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 9477f383-5e28-7739-6562-fb3234b6b0ec\r\n* Version Independent ID: f9af74cb-e3a8-d5e0-75d1-7c7199e76d36\r\n* Content: [NuGet Get-Package PowerShell Reference](https://docs.microsoft.com/en-us/nuget/tools/ps-ref-get-package)\r\n* Content Source: [docs/tools/ps-ref-get-package.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/tools/ps-ref-get-package.md)\r\n* Product: **nuget**\r\n* GitHub Login: @karann-msft\r\n* Microsoft Alias: **karann**\n\n---\n\n@hastarin commented on [Thu Apr 11 2019](https://github.com/NuGet/docs.microsoft.com-nuget/issues/1287#issuecomment-482414479)\n\nThis is still an issue with VS2019.\n\n---\n\n@Mikejo5000 commented on [Mon Aug 12 2019](https://github.com/NuGet/docs.microsoft.com-nuget/issues/1287#issuecomment-520533351)\n\n@nkolev92 Nikolche, should this command work or is this a doc error? Thx.\n\n---\n\n@nkolev92 commented on [Mon Aug 12 2019](https://github.com/NuGet/docs.microsoft.com-nuget/issues/1287#issuecomment-520535475)\n\nnot sure, I'll move it to the engineering side for investigation. \n\n"},{"Id":"10195428026","Type":"IssuesEvent","CreatedAt":"2019-08-12T18:06:38","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8291","RelatedDescription":"Closed issue \"'error NU5000 - Nuspec file does not exist in package' should either identify the package or reinstall it\" (#8291) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\ndotnet.exe --version: 3.0.100-preview5-011568\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a .csproj\r\n\r\n2. Add a PackageReference to something not bundled with the .net sdk (e.g. ````<PackageReference Include=\"NUnit\" Version=\"3.12.0\" />````)\r\n\r\n3. `dotnet restore`\r\n\r\n4. Delete the .nuspec file for the package from the packages cache (e.g. %userprofile%\\.nuget\\packages\\nunit\\3.12.0\\nunit.3.12.0.nuspec\r\n\r\n5. Delete the obj\\ directory next to the .csproj\r\n\r\n6. `dotnet restore`\r\n\r\nThis will produce the following error: `error NU5000: Nuspec file does not exist in package`\r\n\r\n## Desired behavior\r\nOne of the following should happen:\r\n1. The error should identify which package id/version/install dir is broken.\r\n    a. Otherwise the error is nearly inactionable without clearing the entire packages cache\r\n2. Silently reinstall the package like would occur if the entire install dir was deleted\r\n\r\n## Comments\r\n* This reflects cache corruption; it is not a mainline scenario\r\n* This is a real scenario that one of our devs encountered (though we don't know exactly how the bad state happened)"},{"Id":"10195142751","Type":"IssuesEvent","CreatedAt":"2019-08-12T17:23:04","Actor":"drache42","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8446","RelatedDescription":"Opened issue \"nuget list can show multiple version of same project\" (#8446) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe):\r\n\r\nNuGet version (x.x.x.xxx):5.1.0.6013\r\n\r\nWorked before? If so, with which NuGet version: unknown\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. nuget.exe list -source <link>\r\n\r\nAccording to nuget help list, list should only display the latest version of each package\r\nActual: some packages are listed multiple times with different version\r\n...\r\n\r\n## Other suggested things\r\nIf I run the above command with verbose, I can see that nuget list does a GET on pages vs the entire thing. This means that it lists the latest version on page n, then list the latest version on page n+1 which may include the same package name\r\n\r\n### Verbose Logs\r\n```\r\n...\r\nPowerToolsPresentation\r\n 1.25.5\r\n Common UI/Presentation logic between different Power Tools applications\r\n\r\n  GET https://artifactory.prod.tableautools.com/artifactory/api/nuget/power-tools-nuget-local/Search()?$filter=IsLatestVersion&$orderby=Id&searchTerm=''&targetFramework=''&includePrerelease=false&$skip=30&$top=30&semVerLevel=2.0.0\r\n  OK https://artifactory.prod.tableautools.com/artifactory/api/nuget/power-tools-nuget-local/Search()?$filter=IsLatestVersion&$orderby=Id&searchTerm=''&targetFramework=''&includePrerelease=false&$skip=30&$top=30&semVerLevel=2.0.0 15ms\r\nPowerToolsPresentation\r\n 2019.3.18\r\n Common UI/Presentation logic between different Power Tools applications\r\n...\r\n```\r\n"},{"Id":"10194573115","Type":"IssuesEvent","CreatedAt":"2019-08-12T15:58:47","Actor":"rainersigwald","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8445","RelatedDescription":"Opened issue \"Comment for framework-specific package import\" (#8445) at NuGet/Home","RelatedBody":"I just had a bad time trying to figure out why a package I referenced wasn't working for one of the `TargetFramework`s in the project. It [turned out](https://github.com/microsoft/MSBuildLocator/commit/fec2e9e40250b9236a8d0a2b79ebf4bdfa81ce8e) that this was because we (accidentally) referenced the package _only_ for one of the TFs in the project.\r\n\r\nNuGet (correctly!) generated MSBuild logic to import the `build/` folder from the package for the affected TF and for the outer build, but not for the other TF in the project.\r\n\r\nIt would have been nice if there had been a breadcrumb in the generated build logic that said something like\r\n\r\n```xml\r\n<!-- Package Whatever is not referenced in TargetFramework X -->\r\n```\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet CLI primarily\r\n\r\nNuGet version (x.x.x.xxx): 5.3.0.0\r\n\r\ndotnet.exe --version (if appropriate): `3.0.100-preview9-013744`\r\n\r\nVS version (if appropriate): 16.3 previews\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): all\r\n\r\nWorked before? If so, with which NuGet version: no\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10193791103","Type":"IssuesEvent","CreatedAt":"2019-08-12T14:23:51","Actor":"elvisFabian","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8433","RelatedDescription":"Closed issue \"nuget pack breaks on linux\" (#8433) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: **NuGet.exe** with mono\r\nNuGet version: **5.1.0.6013**\r\ndotnet.exe --version: **2.2.401**\r\nOS version: **Ubuntu 19.04**\r\n\r\n## Detailed repro steps so we can see the same problem\r\n1. `nuget pack PJMT.SGP.PreCadastro.Contracts.nuspec -suffix rc -verbosity detailed -ForceEnglishOutput`\r\n\r\n\r\n## Verbose Logs\r\n### Linux (fail)\r\n```\r\nalias nuget=\"mono /usr/local/bin/nuget.exe\"\r\n\r\nnuget pack ./temp/PJMT.SGP.PreCadastro.Contracts.nuspec -verbosity detailed -ForceEnglishOutput\r\nNuGet Version: 5.1.0.6013\r\nAttempting to build package from 'PJMT.SGP.PreCadastro.Contracts.nuspec'.\r\nAn error occured while trying to parse the value '' of property 'dependencies' in the manifest file.\r\n  Index was outside the bounds of the array.\r\nSystem.IO.InvalidDataException: An error occured while trying to parse the value '' of property 'dependencies' in the manifest file. ---> System.IndexOutOfRangeException: Index was outside the bounds of the array.  at System.Collections.Generic.LargeArrayBuilder`1[T].GetBuffer (System.Int32 index) [0x00022] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at System.Collections.Generic.LargeArrayBuilder`1[T].CopyTo (System.Collections.Generic.CopyPosition position, T[] array, System.Int32 arrayIndex, System.Int32 count) [0x00041] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at System.Collections.Generic.SparseArrayBuilder`1[T].CopyTo (T[] array, System.Int32 arrayIndex, System.Int32 count) [0x0009a] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at System.Collections.Generic.SparseArrayBuilder`1[T].ToArray () [0x00028] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at System.Linq.Enumerable+Concat2Iterator`1[TSource].ToArray () [0x00024] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00021] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at NuGet.Frameworks.NuGet.Frameworks1141431.DefaultFrameworkMappings.get_CompatibilityMappings () [0x00478] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Frameworks.NuGet.Frameworks1141431.FrameworkNameProvider.InitMappings (System.Collections.Generic.IEnumerable`1[T] mappings) [0x00055] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Frameworks.NuGet.Frameworks1141431.FrameworkNameProvider..ctor (System.Collections.Generic.IEnumerable`1[T] mappings, System.Collections.Generic.IEnumerable`1[T] portableMappings) [0x0010e] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Frameworks.NuGet.Frameworks1141431.DefaultFrameworkNameProvider..ctor () [0x0001c] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Frameworks.NuGet.Frameworks1141431.DefaultFrameworkNameProvider.get_Instance () [0x0000a] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Frameworks.NuGet.Frameworks1141431.NuGetFramework.Parse (System.String folderName) [0x00000] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.ManifestReader+<>c.<ReadDependencyGroups>b__10_0 (System.Xml.Linq.XElement element) [0x00027] in <f495a477196947558735199950d701a7>:0 \r\n  at System.Linq.Enumerable+WhereSelectEnumerableIterator`2[TSource,TResult].ToList () [0x0002f] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at System.Linq.Enumerable.ToList[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00021] in <13c0993ff82548209b09f271bd5e6a78>:0 \r\n  at NuGet.Packaging.ManifestReader.ReadDependencyGroups (System.Xml.Linq.XElement dependenciesElement) [0x000a3] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.ManifestReader.ReadMetadataValue (NuGet.Packaging.ManifestMetadata manifestMetadata, System.Xml.Linq.XElement element, System.Collections.Generic.HashSet`1[T] allElements) [0x004ce] in <f495a477196947558735199950d701a7>:0 \r\n   --- End of inner exception stack trace ---\r\n  at NuGet.Packaging.ManifestReader.ReadMetadataValue (NuGet.Packaging.ManifestMetadata manifestMetadata, System.Xml.Linq.XElement element, System.Collections.Generic.HashSet`1[T] allElements) [0x0056f] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.ManifestReader.ReadMetadata (System.Xml.Linq.XElement xElement) [0x0003f] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.ManifestReader.ReadManifest (System.Xml.Linq.XDocument document) [0x00015] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.Manifest.ReadFrom (System.IO.Stream stream, System.Func`2[T,TResult] propertyProvider, System.Boolean validateSchema) [0x0009e] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.PackageBuilder.ReadManifest (System.IO.Stream stream, System.String basePath, System.Func`2[T,TResult] propertyProvider) [0x00000] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.PackageBuilder..ctor (System.String path, System.String basePath, System.Func`2[T,TResult] propertyProvider, System.Boolean includeEmptyDirectories) [0x00041] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Packaging.PackageBuilder..ctor (System.String path, System.Func`2[T,TResult] propertyProvider, System.Boolean includeEmptyDirectories) [0x00008] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Commands.PackCommandRunner.CreatePackageBuilderFromNuspec (System.String path) [0x00101] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Commands.PackCommandRunner.BuildFromNuspec (System.String path) [0x00000] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Commands.PackCommandRunner.BuildPackage (System.String path) [0x00016] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.Commands.PackCommandRunner.BuildPackage () [0x00021] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.CommandLine.PackCommand.ExecuteCommand () [0x0022d] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.CommandLine.Command.ExecuteCommandAsync () [0x00000] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.CommandLine.Command.Execute () [0x000dd] in <f495a477196947558735199950d701a7>:0 \r\n  at NuGet.CommandLine.Program.MainCore (System.String workingDirectory, System.String[] args) [0x001c0] in <f495a477196947558735199950d701a7>:0 \r\n  ```\r\n\r\n### Windows (Work)\r\n```\r\n.\\nuget.exe pack PJMT.SGP.PreCadastro.Contracts.nuspec -suffix rc -verbosity de\r\ntailed -ForceEnglishOutput\r\nNuGet Version: 5.1.0.6013\r\nAttempting to build package from 'PJMT.SGP.PreCadastro.Contracts.nuspec'.\r\n\r\nId: PJMT.SGP.PreCadastro.Contracts\r\nVersion: 1.0.1-rc\r\nAuthors: PJMT.SGP.PreCadastro.Contracts\r\nDescription: Package Description\r\nDependencies:\r\n\r\nAdded file '[Content_Types].xml'.\r\nAdded file '[Content_Types].xml'.\r\nAdded file '_rels/.rels'.\r\nAdded file '_rels/.rels'.\r\nAdded file 'lib/netstandard2.0/PJMT.SGP.PreCadastro.Contracts.dll'.\r\nAdded file 'package/services/metadata/core-properties/abe9ebfb2a0944069d2f442215e30d61.psmdcp'.\r\nAdded file 'package/services/metadata/core-properties/e8883027b2f74736b8359b2154fc114f.psmdcp'.\r\nAdded file 'PJMT.SGP.PreCadastro.Contracts.nuspec'.\r\n```\r\n\r\n\r\n## Sample Project\r\n[PJMT.SGP.PreCadastro.Contracts.1.0.1.zip](https://github.com/NuGet/Home/files/3479030/PJMT.SGP.PreCadastro.Contracts.1.0.1.zip)\r\n"},{"Id":"10191675439","Type":"IssuesEvent","CreatedAt":"2019-08-12T09:03:46","Actor":"v-longmin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7627","RelatedDescription":"Closed issue \"Creating ASP.NET Web Application (that uses the template wizard) does not work when the assembly is not signed\" (#7627) at NuGet/Home","RelatedBody":"## Details about Problem\r\nVS Version: D16.0 28410.60\r\nOS Version: 17763.RS5_Release.180914-1434.\r\nNuGet Version: Dev-nkolev92-fixlnteropBuild\\Local\r\n## Detailed repro steps\r\n1. Launch VS.\r\n2. Create a new ASP.NET Web Application (.NET Framework) project.\r\n## Expected \r\nThe project should be created correctly.\r\n## Actual\r\nNothing created as below screenshot.\r\n![created failed](https://user-images.githubusercontent.com/40230425/49859024-797eb600-fe31-11e8-9418-f29a3f747190.PNG)\r\n## Notes\r\n1. The issue also repro on all Web Site templates.\r\n2. The issue does not repro on ASP.NET Core Web Application.\r\n3. The issue does not repro before installing NuGet Client Dev-nkolev92-fixlnteropBuild\\Local\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null},{"Id":"1116042504854335488","CreatedAt":"2019-04-10T18:17:22+00:00","UserScreenname":"nuget","Text":"We have just published the NuGet Roadmap for Spring 2019. Check it out now! \nhttps://t.co/gt7qR0S3wV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-08-13T05:30:43.9076392Z","RunDurationInMilliseconds":2625}