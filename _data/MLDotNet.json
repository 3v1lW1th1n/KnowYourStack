{"Data":{"GitHub":{"Issues":[{"Id":"410031635","IsPullRequest":true,"CreatedAt":"2019-02-15T03:11:37","Actor":"maryamariyan","Number":"2539","RawContent":null,"Title":"Remove OpenInputFile and CreateOutputFile methods from IHostEnvironment","State":"closed","Body":"Didn't add new tests since the implementation is just moved from HostEnvironmentBase to HostEnvironmentUtils class.\r\n\r\nOn a separate PR will remove CreateTempFile which still part of IHostEnvironment interface.\r\n\r\nRelated to: #1287\r\ncc: @eerhardt \r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2539","RelatedDescription":"Closed or merged PR \"Remove OpenInputFile and CreateOutputFile methods from IHostEnvironment\" (#2539)"},{"Id":"410566218","IsPullRequest":true,"CreatedAt":"2019-02-15T01:30:55","Actor":"wschin","Number":"2564","RawContent":null,"Title":"Make primal stochastic trainer also typed","State":"open","Body":"To fix #2555, we apply idea done in #2506 to another stochastic gradient trainer. Basically, to align this trainer and the whole SDCA family, `StochasticGradientDescentClassificationTrainer` got renamed to\r\n```csharp\r\n    public abstract class SgdBinaryTrainerBase<TModelParameters> :\r\n        LinearTrainerBase<BinaryPredictionTransformer<TModelParameters>, TModelParameters>\r\n        where TModelParameters : class, IPredictorProducing<float>\r\n```\r\nwhich holds common functions used in all derived classes.\r\nThe new class, `SgdBinaryTrainerBase`, branches out into three actual implementations:\r\n- `LegacySgdBinaryTrainer` for command line and entry point BC.\r\n- `SgdNonCalibratedBinaryTrainer` for training `LinearBinaryModelParameters` with any loss which implements `IClassificationLoss`.\r\n- `SgdBinaryTrainer` for training `CalibratedModelParametersBase<LinearBinaryModelParameters, PlattCalibrator>`, which is essentially logistic regression and was the default before this PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2564","RelatedDescription":"Open PR \"Make primal stochastic trainer also typed\" (#2564)"},{"Id":"410561532","IsPullRequest":true,"CreatedAt":"2019-02-15T01:08:27","Actor":"abgoswam","Number":"2563","RawContent":null,"Title":"In the public surface area, all occurrences of Argument keyword replaced with Options","State":"open","Body":"Fixes #2557\r\n\r\nFor **public** API surface, all occurrences of *Argument* keyword replaced with *Options*\r\n\r\nSeveral internal classes continue to be called `Arguments`. We can target those post V1.0  since they are not part of public surface area anyway.","Url":"https://github.com/dotnet/machinelearning/pull/2563","RelatedDescription":"Open PR \"In the public surface area, all occurrences of Argument keyword replaced with Options\" (#2563)"},{"Id":"410526039","IsPullRequest":true,"CreatedAt":"2019-02-15T00:52:28","Actor":"rogancarr","Number":"2556","RawContent":null,"Title":"Rename Resize Transform to ResizeImages","State":"closed","Body":"This PR changes the catalog entry for the `ImageResizer` to be `ResizeImages` from `Resize`.\r\n\r\nThis PR also does a quick fix to rename the `LoadImages` sample to `LoadImages` from `LoadImage`.\r\n\r\nFixes #2550 ","Url":"https://github.com/dotnet/machinelearning/pull/2556","RelatedDescription":"Closed or merged PR \"Rename Resize Transform to ResizeImages\" (#2556)"},{"Id":"410407567","IsPullRequest":false,"CreatedAt":"2019-02-15T00:52:28","Actor":"rogancarr","Number":"2550","RawContent":null,"Title":"Transforms.Resize has a vague name","State":"closed","Body":"The `ImageResizingEstimator` is in the catalog as `Resize`. By it's name, it isn't clear that this is intended for images. It could easily refer to a transform that resizes vectors. I suggest naming it to something more specific, such as `ResizeImages` (e.g. parallel language to `LoadImages`).","Url":"https://github.com/dotnet/machinelearning/issues/2550","RelatedDescription":"Closed issue \"Transforms.Resize has a vague name\" (#2550)"},{"Id":"410545997","IsPullRequest":true,"CreatedAt":"2019-02-14T23:57:55","Actor":"sharwell","Number":"2562","RawContent":null,"Title":"Update to Microsoft.CodeAnalysis.Testing","State":"open","Body":"Fixes #2480\r\n\r\nðŸš§ I'm going to make a few notes on some of the changes to ensure they are covered in the review.","Url":"https://github.com/dotnet/machinelearning/pull/2562","RelatedDescription":"Open PR \"Update to Microsoft.CodeAnalysis.Testing\" (#2562)"},{"Id":"410545192","IsPullRequest":true,"CreatedAt":"2019-02-14T23:54:30","Actor":"najeeb-kazmi","Number":"2561","RawContent":null,"Title":"Reorder MatrixFactorizationTrainer parameters","State":"open","Body":"Fixes #1826 \r\n\r\nChanged order of parameters to make labelColumn the first parameter. Since the following two parameters after reordering were required, I had to remove the default label name from the labelColumn param.","Url":"https://github.com/dotnet/machinelearning/pull/2561","RelatedDescription":"Open PR \"Reorder MatrixFactorizationTrainer parameters\" (#2561)"},{"Id":"410543472","IsPullRequest":true,"CreatedAt":"2019-02-14T23:47:49","Actor":"Anipik","Number":"2560","RawContent":null,"Title":"[Donot Review] Mono ci","State":"open","Body":"Just testing some stuff on CI","Url":"https://github.com/dotnet/machinelearning/pull/2560","RelatedDescription":"Open PR \"[Donot Review] Mono ci\" (#2560)"},{"Id":"410542722","IsPullRequest":false,"CreatedAt":"2019-02-14T23:44:41","Actor":"zeahmed","Number":"2559","RawContent":null,"Title":"Make `ISupportBoosterParameterFactory` internal in LightGBM project","State":"open","Body":"This interface was tried to be made internal in the following PR\r\nhttps://github.com/dotnet/machinelearning/pull/2476\r\n\r\nHowever, it seems like there is more work needed to make it internal. Thus, creating this issue to track the work.","Url":"https://github.com/dotnet/machinelearning/issues/2559","RelatedDescription":"Open issue \"Make `ISupportBoosterParameterFactory` internal in LightGBM project\" (#2559)"},{"Id":"410540493","IsPullRequest":true,"CreatedAt":"2019-02-14T23:35:33","Actor":"ganik","Number":"2558","RawContent":null,"Title":"Lockdown Microsoft.ML.KMeansClustering public surface","State":"open","Body":"fixes  #2270 ","Url":"https://github.com/dotnet/machinelearning/pull/2558","RelatedDescription":"Open PR \"Lockdown Microsoft.ML.KMeansClustering public surface\" (#2558)"},{"Id":"410539667","IsPullRequest":false,"CreatedAt":"2019-02-14T23:32:03","Actor":"abgoswam","Number":"2557","RawContent":null,"Title":"Renmants of Arguments keyword in public API","State":"open","Body":"There are some classes in our public API which still have word 'Arguments' in them \r\n\r\nhttps://github.com/dotnet/machinelearning/blob/17c037f757113aba8acdc88abf2803b86fe95b93/src/Microsoft.ML.StandardLearners/Standard/Online/OnlineLinear.cs#L22\r\n\r\nWe should rename them to *Options instead. Related to #1798 #1758 \r\n","Url":"https://github.com/dotnet/machinelearning/issues/2557","RelatedDescription":"Open issue \"Renmants of Arguments keyword in public API\" (#2557)"},{"Id":"410106403","IsPullRequest":true,"CreatedAt":"2019-02-14T21:19:14","Actor":"eerhardt","Number":"2547","RawContent":null,"Title":"DataView type rename","State":"closed","Body":"This covers the first 3 changes proposed in #2297.\r\n\r\n1. We will ensure the class names in the `Microsoft.Data.DataView` package are unique by adding a prefix to any name deemed too general. Add a `DataView` prefix.\r\n2. Add the base type suffix to all types that derive from the current `ColumnType` class.\r\n3. Rename the properties on NumberType to match the type name in `System` namespace.\r\n\r\nThe rest of the proposed changes will come in a separate PR (this one is big enough).","Url":"https://github.com/dotnet/machinelearning/pull/2547","RelatedDescription":"Closed or merged PR \"DataView type rename\" (#2547)"},{"Id":"410490605","IsPullRequest":false,"CreatedAt":"2019-02-14T21:01:59","Actor":"wschin","Number":"2555","RawContent":null,"Title":"All linear trainers should be typed","State":"open","Body":"There are still some binary classification trainers to (generalized) linear models. As done in  #2506, they all should be typed according to the types learned. They also should not do auto-calibration in API land.","Url":"https://github.com/dotnet/machinelearning/issues/2555","RelatedDescription":"Open issue \"All linear trainers should be typed\" (#2555)"},{"Id":"410484266","IsPullRequest":false,"CreatedAt":"2019-02-14T20:45:00","Actor":"rogancarr","Number":"2554","RawContent":null,"Title":"ColumnInfo as an API parameter","State":"open","Body":"The use of `ColumnInfo` in the public API can be rather jarring. I'd like to clarify when we should use it in the catalog API, and if the parameter name could be made to be more consistent with the API, such as `ColumnOptions` or `Options`.","Url":"https://github.com/dotnet/machinelearning/issues/2554","RelatedDescription":"Open issue \"ColumnInfo as an API parameter\" (#2554)"},{"Id":"410449581","IsPullRequest":false,"CreatedAt":"2019-02-14T19:14:40","Actor":"Ivanidzo4ka","Number":"2553","RawContent":null,"Title":"Cleaning of overload Fit functions","State":"open","Body":"- We shouldn't use `IPredictor` interface for `initialPredictor`, we should specify proper class type.\r\n- `initialPredictor` should be renamed to `modelParameters`\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2553","RelatedDescription":"Open issue \"Cleaning of overload Fit functions\" (#2553)"},{"Id":"410447731","IsPullRequest":false,"CreatedAt":"2019-02-14T19:09:54","Actor":"yaeldekel","Number":"2552","RawContent":null,"Title":"Should TensorFlowModelInfo be public?","State":"open","Body":"Related to #2280.\r\nThe TensorFlowModelInfo class is still public, and so are two methods for creating a TensorFlowEstimator from a TensorFlowModelInfo. I was wondering whether we should have these, since the only way to get a TensorFlowModelInfo is by calling TensorFlowUtils.LoadTensorFlowModel(), and that uses a file name - and users that have a file name, can instantiate a TensorFlowEstimator from that directly. \r\nThere is one scenario that I can think of where a user would benefit from using this API: The TensorFlowModelInfo class has a method GetInputSchema(), that can be used to get the name of the input layer(s), and then the TensorFlowEstimator can be instantiated from the TensorFlowModelInfo instead of instantiating it from the file name and having to load it from disk again. Is this reason enough to keep these APIs?\r\nIf it is, then TensorFlowUtils.LoadTensorFlowModel should be moved to TensorFlowCatalog, and perhaps also the GetInputSchema() method of TensorFlowModelInfo.\r\n@TomFinley , @zeahmed , @abgoswam , @ganik  - thoughts?\r\n\r\nAnother unrelated issue: Microsoft.ML.TensorFlow has two AssemblyInfo.cs files, one in src\\Microsoft.ML.TensorFlow\\ and one in  src\\Microsoft.ML.TensorFlow\\Properties. These should be unified.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2552","RelatedDescription":"Open issue \"Should TensorFlowModelInfo be public?\" (#2552)"},{"Id":"410141329","IsPullRequest":false,"CreatedAt":"2019-02-14T18:07:35","Actor":"wschin","Number":"2549","RawContent":null,"Title":"Example classes should be static","State":"closed","Body":"We have accumulated a bunch of examples while our coding guideline changes from time to time. We should as least make all example classes static to meet our latest decision.","Url":"https://github.com/dotnet/machinelearning/issues/2549","RelatedDescription":"Closed issue \"Example classes should be static\" (#2549)"},{"Id":"410140763","IsPullRequest":true,"CreatedAt":"2019-02-14T18:07:35","Actor":"wschin","Number":"2548","RawContent":null,"Title":"[Tiny & Simple Change] Example classes should be static","State":"closed","Body":"Polish DYNAMIC examples to fix #2549. This change is inspired by @TomFinley's good comment to #2506 and I sincerely want to address that.\r\n\r\n- Example class should be static\r\n- Example function should be called `Example()`\r\n- Remove redundant `using` statements.\r\n\r\nPlease note that this PR only focuses on dynamic examples' `static` problem. I don't have much bandwidth to take care other cases.","Url":"https://github.com/dotnet/machinelearning/pull/2548","RelatedDescription":"Closed or merged PR \"[Tiny & Simple Change] Example classes should be static\" (#2548)"},{"Id":"410423496","IsPullRequest":false,"CreatedAt":"2019-02-14T18:02:28","Actor":"ameet20","Number":"2551","RawContent":null,"Title":"Returns true for null array ","State":"open","Body":"Hi,\r\n\r\n`Microsoft.ML.Internal.Utilities.Utils` has a couple of array checks that return `true` when a `null` array is passed in. Is this the expected behavior?\r\n\r\nHere are the culprits:\r\n\r\n```cs\r\npublic static bool IsSorted(IList<float> values);\r\npublic static bool IsSorted(int[] values);\r\n```\r\n\r\n```cs\r\npublic static bool IsIncreasing(int min, ReadOnlySpan<int> values, int lim);\r\n```\r\n\r\nNote that `IsIncreasing` is typically used for checking `int[]` arrays because `ReadOnlySpan` performs an implicit cast and null arrays are set to a 0-length `ReadOnlySpan`.\r\n\r\nIn a similar vein, `IsSorted` uses a null-safe `Utils.Size()` to check the input length of the array.\r\n\r\nDoes this make sense that we say that `null` arrays are sorted, and that they are decreasing?","Url":"https://github.com/dotnet/machinelearning/issues/2551","RelatedDescription":"Open issue \"Returns true for null array \" (#2551)"},{"Id":"410094650","IsPullRequest":true,"CreatedAt":"2019-02-14T02:22:25","Actor":"zeahmed","Number":"2546","RawContent":null,"Title":"Added support for String types in TensorFlowTransformer.","State":"open","Body":"This PR fixes #2545 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2546","RelatedDescription":"Open PR \"Added support for String types in TensorFlowTransformer.\" (#2546)"},{"Id":"410093541","IsPullRequest":false,"CreatedAt":"2019-02-14T02:17:37","Actor":"zeahmed","Number":"2545","RawContent":null,"Title":"Add support for string types in TensorFlowTransformer","State":"open","Body":"There are a couple of request to support string in TensorFlowTransformer. Strings are handled quite differently in TensorFlow. Strings are variable length data. To represent string as a tensor, TensorFlow requires tensor be represented in the following way c.f.\r\n https://github.com/tensorflow/tensorflow/blob/01cf864bb0d82370c259866c0735c0358e33377c/tensorflow/c/c_api.h#L206.\r\n\r\n``` c\r\n/ --------------------------------------------------------------------------\r\n// TF_Tensor holds a multi-dimensional array of elements of a single data type.\r\n// For all types other than TF_STRING, the data buffer stores elements\r\n// in row major order.  E.g. if data is treated as a vector of TF_DataType:\r\n//\r\n//   element 0:   index (0, ..., 0)\r\n//   element 1:   index (0, ..., 1)\r\n//   ...\r\n//\r\n// The format for TF_STRING tensors is:\r\n//   start_offset: array[uint64]\r\n//   data:         byte[...]\r\n//\r\n//   The string length (as a varint), followed by the contents of the string\r\n//   is encoded at data[start_offset[i]]]. TF_StringEncode and TF_StringDecode\r\n//   facilitate this encoding.\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2545","RelatedDescription":"Open issue \"Add support for string types in TensorFlowTransformer\" (#2545)"},{"Id":"410077612","IsPullRequest":true,"CreatedAt":"2019-02-14T01:07:53","Actor":"codemzs","Number":"2544","RawContent":null,"Title":"Lockdown Microsoft.ML.OnnxTransform public surface, possibly rename ","State":"open","Body":"fixes #2272\r\n\r\nThere isn't anything obvious to lockdown and the only task I see here is the rename suggestion by @TomFinley \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2544","RelatedDescription":"Open PR \"Lockdown Microsoft.ML.OnnxTransform public surface, possibly rename \" (#2544)"},{"Id":"410067404","IsPullRequest":true,"CreatedAt":"2019-02-14T00:25:41","Actor":"codemzs","Number":"2543","RawContent":null,"Title":"Exclude SamplesUtils from ML.NET nuget and make its own nuget","State":"open","Body":"fixes #2277\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2543","RelatedDescription":"Open PR \"Exclude SamplesUtils from ML.NET nuget and make its own nuget\" (#2543)"},{"Id":"410064346","IsPullRequest":false,"CreatedAt":"2019-02-14T00:14:00","Actor":"Ivanidzo4ka","Number":"2542","RawContent":null,"Title":"Multiclass classification Score vs Scores column","State":"open","Body":"This is silly, but probably worth small discussion.\r\nAll our Multiclass samples using following example:\r\nhttps://github.com/dotnet/machinelearning/blob/fd30559d9f8070d7cb71ba937897a63646d5b0bc/src/Microsoft.ML.SamplesUtils/SamplesDatasetUtils.cs#L500\r\nwhich has:\r\n```\r\n// The probabilities of being \"AA\", \"BB\", \"CC\", and \"DD\".\r\npublic float[] Scores;\r\n```\r\nThere is small problem with that. All our multiclass learners produce column `Score`, not `Scores`, so we just copy column from `Score` to `Scores`, or reassign them in pigsty.\r\nWhich doesn't look like good idea for me, more like workaround.\r\n\r\nQuestion is following: do we prefer to have consistency and call score column everywhere as `Score` column, or we want to be more user friendly and for multiclass use `Scores` (basically introduce (`DefaultColumnNames.MulticlassScore`)\r\n\r\nIn we want consistency we better rename `Scores` in `MulticlassClassificationExample` to `Score`. If we want be more user friendly, we need to go through lot of code, and replace for all multiclass cases `Score` to `Scores`.","Url":"https://github.com/dotnet/machinelearning/issues/2542","RelatedDescription":"Open issue \"Multiclass classification Score vs Scores column\" (#2542)"},{"Id":"410060271","IsPullRequest":true,"CreatedAt":"2019-02-13T23:58:38","Actor":"codemzs","Number":"2541","RawContent":null,"Title":"Lockdown Microsoft.ML.StandardLearners public surface","State":"open","Body":"fixes #2264\r\n\r\n**Reduces public API count from 529 to 303.**\r\n\r\n| Before | After |   \r\n|:-:|:-:|\r\n|![image](https://user-images.githubusercontent.com/1211949/52752493-e2a4b600-2fa7-11e9-99b6-80a4509d0409.png)|![image](https://user-images.githubusercontent.com/1211949/52752269-0fa49900-2fa7-11e9-8878-8b861ff27eea.png)|\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2541","RelatedDescription":"Open PR \"Lockdown Microsoft.ML.StandardLearners public surface\" (#2541)"},{"Id":"409989117","IsPullRequest":false,"CreatedAt":"2019-02-13T22:51:24","Actor":"ermirbeqiraj","Number":"2535","RawContent":null,"Title":"Regression evaluate throws ArgumentOutOfRangeException with named parameters","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: win10\r\n- **.NET Version (eg., dotnet --info)**: 2.2.0\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n[taxi fare prediction](https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/taxi-fare) sample, Evaluate method:\r\n// this throws sys.argumentexception\r\nvar metrics = mlContext.Regression.Evaluate(dataView, label: \"Label\", score: \"Score\");\r\n// this works:\r\nvar metrics = mlContext.Regression.Evaluate(predictions, \"Label\", \"Score\");\r\n- **What happened?**\r\nSystem.ArgumentOutOfRangeException: 'Label column 'Label' not found\r\nParameter name: schema'\r\n\r\n### Source code / logs\r\n\r\n![image](https://user-images.githubusercontent.com/7790756/52741979-fc112680-2fd6-11e9-80a0-c4ba4466be10.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2535","RelatedDescription":"Closed issue \"Regression evaluate throws ArgumentOutOfRangeException with named parameters\" (#2535)"},{"Id":"410032214","IsPullRequest":false,"CreatedAt":"2019-02-13T22:24:30","Actor":"artidoro","Number":"2540","RawContent":null,"Title":"Explicit implementation for IsRowToRowMapper and GetRowToRowMapper","State":"open","Body":"The interface `ITransformer` defines two methods:\r\n\r\n```csharp\r\n/// <summary>\r\n/// Whether a call to <see cref=\"GetRowToRowMapper(Schema)\"/> should succeed, on an\r\n/// appropriate schema.\r\n/// </summary>\r\nbool IsRowToRowMapper { get; }\r\n\r\n/// <summary>\r\n/// Constructs a row-to-row mapper based on an input schema. If <see cref=\"IsRowToRowMapper\"/>\r\n/// is <c>false</c>, then an exception should be thrown. If the input schema is in any way\r\n/// unsuitable for constructing the mapper, an exception should likewise be thrown.\r\n/// </summary>\r\n/// <param name=\"inputSchema\">The input schema for which we should get the mapper.</param>\r\n/// <returns>The row to row mapper.</returns>\r\nIRowToRowMapper GetRowToRowMapper(Schema inputSchema);\r\n```\r\n\r\nA transformer maps `IDataViews` to `IDataViews`, however this process can in some cases be optimized by mapping rows to rows with a `IRowToRowMapper`. Although for most scenarios a user should not be using them directly, they might be useful in custom extensions which we would like to enable in the future. This is why the above two methods are present in the interface of `ITransformer` and are necessary.  \r\n\r\nSince, however, these are not usually employed directly by users, we should implement them explicitly. \r\n\r\n/cc: @TomFinley \r\n","Url":"https://github.com/dotnet/machinelearning/issues/2540","RelatedDescription":"Open issue \"Explicit implementation for IsRowToRowMapper and GetRowToRowMapper\" (#2540)"},{"Id":"410026703","IsPullRequest":false,"CreatedAt":"2019-02-13T22:09:15","Actor":"rogancarr","Number":"2538","RawContent":null,"Title":"Create functional tests for all V1 TensorFlow scenarios","State":"open","Body":"As laid out in #2498 , we need scenarios to cover the TensorFlow functionality we want fully supported in V1.\r\n\r\n- An existing TF model can be used to produce predictions\r\n- Any layer from a TF model can be used to produce predictions\r\n- Input and output nodes can be identified from an existing TF model\r\n- Train TF models with a defined TF model topology","Url":"https://github.com/dotnet/machinelearning/issues/2538","RelatedDescription":"Open issue \"Create functional tests for all V1 TensorFlow scenarios\" (#2538)"},{"Id":"410010066","IsPullRequest":true,"CreatedAt":"2019-02-13T21:26:00","Actor":"rogancarr","Number":"2537","RawContent":null,"Title":"Rename CV and TrainTest \"stratification\" parameter","State":"open","Body":"This PR changes the `CrossValidation` and `TrainTest` parameter `StratificationColumn` to be `GroupPreservationColumn` and updates the docstrings to give a clearer explanation.\r\n\r\nFixes #2536 \r\n\r\nSee conversation in #2536 \r\n\r\nRelated to #1204, but that issue might be asking for further coverage.","Url":"https://github.com/dotnet/machinelearning/pull/2537","RelatedDescription":"Open PR \"Rename CV and TrainTest \"stratification\" parameter\" (#2537)"},{"Id":"410003743","IsPullRequest":false,"CreatedAt":"2019-02-13T21:10:21","Actor":"rogancarr","Number":"2536","RawContent":null,"Title":"StratificationColumn in CrossValidation and TrainTestSplit","State":"open","Body":"`CrossValidation` and `TrainTestSplit` have a parameter called `StratificationColumn` that is used to preserve groupings of columns across splits (as discussed in #2487). This isn't actually stratification, so we should rename the column.\r\n\r\nThis is a forked sub-issue from #2487\r\n\r\nRelated to #1204","Url":"https://github.com/dotnet/machinelearning/issues/2536","RelatedDescription":"Open issue \"StratificationColumn in CrossValidation and TrainTestSplit\" (#2536)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-02-15T05:30:51.5677454Z","RunDurationInMilliseconds":797}