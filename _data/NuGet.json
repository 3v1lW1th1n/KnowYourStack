{"Data":{"Blog":{"FeedItems":[{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"It‚Äôs been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10366993716","Type":"PullRequestEvent","CreatedAt":"2019-09-07T03:47:36","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7521","RelatedDescription":"Opened pull request \"Fix timezone issues\" (#7521) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/Engineering/issues/2499\r\n\r\nSorry @xavierdecoster. Should we move our CIs to CET üòÑ? Seems like the negative offsets from the prime meridian are a great edge case for our tests."},{"Id":"10366505093","Type":"PullRequestEvent","CreatedAt":"2019-09-06T23:44:32","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7511","RelatedDescription":"Merged pull request \"Add site admin check for tenant\" (#7511) at NuGet/NuGetGallery","RelatedBody":"As part of getting rid of old AAD/MSA configs, we want to bolster the site admin check. https://github.com/NuGet/Engineering/issues/2567\r\n\r\nThis PR needs the new configs, will send that PR out separately.\r\n\r\n![image](https://user-images.githubusercontent.com/1646506/64389418-7054fb00-cff7-11e9-8cae-7ee7ff3680eb.png)\r\n"},{"Id":"10366461355","Type":"PullRequestEvent","CreatedAt":"2019-09-06T23:29:29","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7504","RelatedDescription":"Merged pull request \"[SDL] Use HttpClient instead of HttpWebRequest\" (#7504) at NuGet/NuGetGallery","RelatedBody":"Functional test run: https://nuget.visualstudio.com/NuGetBuild/_build/results?buildId=61456\r\n\r\nPart of https://github.com/nuget/engineering/issues/2686"},{"Id":"10366403675","Type":"PullRequestEvent","CreatedAt":"2019-09-06T23:11:20","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7502","RelatedDescription":"Closed pull request \"Add token expiration of 14 days\" (#7502) at NuGet/NuGetGallery","RelatedBody":"Tokens are used for:\r\n - adding owners to packages\r\n - adding members to organizations\r\n - transforming users to organizations\r\n\r\nProgress on https://github.com/NuGet/Engineering/issues/2679\r\n\r\nWhen a token is older than 14 days, it will no longer work. This means that \"accept\" / \"reject\" links in email will stop working 14 days after they are sent. All of these action links have counterparts in the web UI. When the request is older than 14 days, the recipient of the request will see \"(request expired)\".\r\n\r\nThe action links (\"accept\" / \"reject\") are not visible when the request is expired. In other words, the recipient sees that the request is expired for informational purposes only. I spoke offline with @karann-msft and we agreed that we don't need to implement a \"dismiss\" (essentially a POST-based ) button for the recipient. If we hear significant feedback from users, then we can revisit this decision later and likely add a `PostLink` to a new \"dismiss\" or \"cancel\" endpoint that supports POST.\r\n\r\n## Existing state (no expiration concept)\r\n\r\nOperation | Sender can cancel? | Sender can cancel? | Recipient can cancel? | Recipient can cancel?\r\n-- | -- | -- | -- | --\r\n&nbsp; | **Before expiration** | **After Expiration** | **Before Expiration** | **After Expiration**\r\nAdd owner to package |  ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ\r\nAdd member to organization |  ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ\r\nTransform organization |  ‚ùå | ‚ùå | ‚úÖ | ‚úÖ\r\n\r\nNote that the recipient of the \"Transform organization\" operation is the user that was specified as the admin of the new organization. There is currently no way for the sender of a \"transform organization\" operation to cancel.\r\n\r\n## After this PR\r\n\r\nOperation | Sender can cancel? | Sender can cancel? | Recipient cancel? | Recipient cancel?\r\n-- | -- | -- | -- | --\r\n&nbsp; | **Before expiration** | **After Expiration** | **Before Expiration** | **After Expiration**\r\nAdd owner to package |  ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå\r\nAdd member to organization |  ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå\r\nTransform organization |  ‚ùå | ‚ùå | ‚úÖ | ‚ùå\r\n\r\n## Screenshots\r\n\r\n## Sender: expired package ownership request\r\n\r\n![image](https://user-images.githubusercontent.com/94054/64276448-d6a92300-cefc-11e9-9803-60af073ec316.png)\r\n\r\n![image](https://user-images.githubusercontent.com/94054/64276366-a497c100-cefc-11e9-9bfb-166dae5b2f7b.png)\r\n\r\n## Recipient: expired package ownership request\r\n\r\n![image](https://user-images.githubusercontent.com/94054/64276422-ca24ca80-cefc-11e9-873c-a34cbf9474aa.png)\r\n\r\n## Sender: expired organization membership request\r\n\r\n![image](https://user-images.githubusercontent.com/94054/64276263-5b477180-cefc-11e9-891d-c8a6c1a0c38a.png)\r\n\r\n## Recipient: expired organization membership request\r\n\r\n![image](https://user-images.githubusercontent.com/94054/64276220-3f43d000-cefc-11e9-9b1d-9a74c638c977.png)\r\n\r\n## Recipient: expired transform organization\r\n\r\n![image](https://user-images.githubusercontent.com/94054/64276119-ff7ce880-cefb-11e9-8352-1dea07508556.png)\r\n"},{"Id":"10366352199","Type":"PullRequestEvent","CreatedAt":"2019-09-06T22:55:28","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7519","RelatedDescription":"Merged pull request \"Make the readme show more link not jump to the top of the page\" (#7519) at NuGet/NuGetGallery","RelatedBody":"As mentioned on https://github.com/NuGet/NuGetGallery/pull/7516#issuecomment-529023098. Thanks for the top, @304NotModified. Worked like a charm."},{"Id":"10366336688","Type":"IssuesEvent","CreatedAt":"2019-09-06T22:50:49","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7518","RelatedDescription":"Closed issue \"The gallery search ordering is broken when searching for an existing package name\" (#7518) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nWhen searching for [Amazon.AspNetCore.Identity.Cognito](https://www.nuget.org/packages?page=3&q=Amazon.AspNetCore.Identity.Cognito), it only shows up on the 3rd page.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Navigate to https://www.nuget.org/\r\n2. Search for Amazon.AspNetCore.Identity.Cognito\r\n3. Click next page twice, to see the package in the 3rd page\r\n\r\n### Expected behavior\r\nWhen supplying a valid package name, the search should put this package in top position.\r\n\r\n### Screenshots\r\nn/a\r\n\r\n### Additional context\r\nn/a"},{"Id":"10366327198","Type":"IssuesEvent","CreatedAt":"2019-09-06T22:48:03","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7492","RelatedDescription":"Closed issue \"[Azure Search] Accept malformed query strings\" (#7492) at NuGet/NuGetGallery","RelatedBody":"Handle the following search request patterns:\r\n\r\n* Query string not properly escaped\r\n    * https://api-v2v3search-0.nuget.org/query?q=newtonsoft&&json\r\n    * https://azuresearch-usnc-perf.nuget.org/query?q=newtonsoft&&json\r\n* Trailing `&`\r\n    * https://api-v2v3search-0.nuget.org/query?q=json&\r\n    * https://azuresearch-usnc-perf.nuget.org/query?q=json&\r\n* Extra `&`\r\n    * https://api-v2v3search-0.nuget.org/query?q=json&&skip=1\r\n    * https://azuresearch-usnc-perf.nuget.org/query?q=json&&skip=1 \r\n* Query parameter missing value\r\n    * https://api-v2v3search-0.nuget.org/query?q=&skip\r\n    * https://azuresearch-usnc-perf.nuget.org/query?q=&skip\r\n\r\ndev branch build: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2985774\r\ndev branch release: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=430976\r\n\r\nFinal build: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2987272\r\nFinal release: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=431634\r\n\r\nSplit from: https://github.com/nuget/nugetgallery/issues/7467"},{"Id":"10366308061","Type":"PullRequestEvent","CreatedAt":"2019-09-06T22:42:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7520","RelatedDescription":"Opened pull request \"Update to latest ServerCommon to react to method rename\" (#7520) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/7490"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10366769157","Type":"IssuesEvent","CreatedAt":"2019-09-07T01:39:59","Actor":"scottbommarito","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8545","RelatedDescription":"Closed issue \"Solution \"Installed\"-Tab shows unexpected the latest version not the installed version\" (#8545) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/712579/nuget-solution-installed-tab-shows-unexpected-the.html)._\n\n---\nDear VS-Team,\n\nI had to throw some work for cleaning up packages folder away, due the behaivior of the &quot;Installed&quot; Tab in NuGet Solution Browser. I think we can agree that the &quot;Installed&quot; Tab shows the installed packages. Unexpectedly the showed version is NOT the installed version, but the latest one. This makes no sense for this tab, because it is agains the given context.\n\nOf course it is possible that multiple versions are installed, but in that case a easy &quot;multiple versions&quot; text would be appropriate.\nIt would of course also possible to addionaly show the latest version of the package also.\n\nThe content of the same installed tab for a specific project looks different and also shows the installed version.\n\nI would also recommend, also for the other tabs, to show some prefix like &quot;newest:&quot; &quot;installed:&quot; before the version or some more intuitive than &quot;green arrow&quot; icon for the installed version. Currently its not intuitive as it should for such a simple dialog. I also discussed that with some collegues and they agree my conclusions.\n\nBest regards\nMarco Borm\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/27/2019, 01:39 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Donnie Goodson [MSFT] on 8/30/2019, 04:58 PM: \n\n<p>Thanks for reporting the issue. If your selected package source doesn‚Äôt have the version that‚Äôs installed, it will only show the ‚Äúlatest‚Äù version it can find. What sources (feeds) do you have selected here? If you are only pointing to a local source, then does that source have the package you‚Äôre trying to install?</p>\n<p>Thanks for the UI suggestion. I‚Äôve created an issue on GitHub where it can be discussed with the team and community: <a target='_blank' href=\"https://github.com/NuGet/Home/issues/8538\">https://github.com/NuGet/Home/issues/8538</a></p>\n\n#### Marco Borm on 9/2/2019, 01:47 AM: \n\n<p>Dear Donnie, no, that's not correct. We only use packages from nuget.org. The installed tab for *the whole solution* *never* shows the installed version. It always shows the latest version.</p>\n\n#### Donnie Goodson [MSFT] on 9/3/2019, 02:04 PM: \n\n<p>I see the issue now. The Solution PM UI tab should behave the same as the Project PM UI. Moving to GitHub.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"10366711197","Type":"IssuesEvent","CreatedAt":"2019-09-07T01:09:10","Actor":"cristinamanum","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8559","RelatedDescription":"Opened issue \"[Centrally managing NuGet packages and versions] Define step by step Visual Studio scenarios and experience.\" (#8559) at NuGet/Home","RelatedBody":"Define all the Visual Studio user scenarios. \r\n\r\n"},{"Id":"10365727662","Type":"IssuesEvent","CreatedAt":"2019-09-06T20:39:10","Actor":"bergbria","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8558","RelatedDescription":"Opened issue \"'dotnet restore' emits invalid lock file if a package couldn't be found\" (#8558) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Details about Problem\r\n\r\ndotnet.exe --version: 2.2.401\r\n\r\n## Automated repro\r\nDownload [invalidLockFileRepro.zip](https://github.com/NuGet/Home/files/3585627/invalidLockFileRepro.zip) and run repro.bat\r\n\r\n## Manual repro steps\r\n\r\n1. Create a csproj with a PackageReference to a nonexistent package (e.g. `<PackageReference Include=\"this.isnt.a.real.package\" Version=\"1.0.0\" />`\r\n\r\n2. `dotnet restore`\r\n\r\n**Expected**\r\nThe restore operation should fail. No lock file should be emitted\r\n\r\n**Actual**\r\nThe restore operation fails. An invalid lock file is emitted.\r\nSpecifically, the lock file will not contain an entry for the missing package.\r\n\r\n## Bonus / related bugs\r\nOnce the invalid lock file has been generated, run `dotnet restore --locked-mode`. This should simply report that the lock file is incorrect. However, it will also go out and re-query the feed for the package. This is possibly related to #8160.\r\n\r\nThere's also a permutation of this bug.\r\n1. csproj has PackageReference to package A\r\n2. A lists a dependency on B\r\n3. A exists on the feed but B does not\r\n\r\nIn this scenario, the generated lock file will reference B in the 'dependencies' field for A, but there will be no root entry for B in the top-level dependencies dictionary.\r\n\r\n## Discussion\r\nWhile one could argue that generating a bad lock file is OK because subsequent builds will still fail, I'd content that emitting bad outputs is worse and more confusing than emitting no outputs. There's also an increased chance of the bogus file getting checked into source control.\r\n\r\nIf the team has any custom processes related to lock files (e.g. auditing package dependencies, generating pre-build tasks, etc), generating bogus files is also likely to cause further downstream errors."},{"Id":"10365229573","Type":"IssuesEvent","CreatedAt":"2019-09-06T19:14:29","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8554","RelatedDescription":"Closed issue \"NU5048 is a warning in the error range\" (#8554) at NuGet/Home","RelatedBody":"NU code from 5000-5099 are errors.\r\n5100-5199 are warnings. \r\n\r\nThe root cause that the warning in question was originally an error and was never fixed. \r\n\r\nWe should discuss if/how we want to address this, given that this has shipped in previews already. \r\n\r\n//cc @dominoFire @rrelyea \r\n\r\nNote that the pack codes already have issues; https://github.com/NuGet/Home/issues/7381"},{"Id":"10361761808","Type":"IssuesEvent","CreatedAt":"2019-09-06T10:52:08","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8421","RelatedDescription":"Closed issue \"[Test Failure][Localization] Deprecated package description strings and the tooltip are not localized\" (#8421) at NuGet/Home","RelatedBody":"## Details about Problem\r\nImplicit NuGet version: NuGet Client Dev\\5.3.0.6103\r\nVS Version: D16.3\\29201.74\r\nOS: Windows-10-Enterprise-RS5-RU-RU-03-27-2019\r\n## Detailed repro steps\r\n1. Create a C# Console Application (.NET Framework).\r\n2. Open PM UI of this project and click ‚ÄúSettings‚Äù button.\r\n3. Add a deprecated package source: https://apidev.nugettest.org/v3-index/index.json\r\n4. Select the above deprecated package source and search below packages in Browse tab of PM UI.\r\n    afine\r\n    test10k\r\n    ComplexLicense\r\nComplexLicenseExpressionWithException\r\n5. Click the package in the left panel and check the deprecated package description in the right panel.\r\n6. Hover on the warning icon and check the tooltip.\r\n## Expected\r\nDeprecated package description strings and the tooltip should be localized correctly.\r\n## Actual\r\nDeprecated package description strings (as below) and the tooltip are not localized as below screenshot.\r\n\r\n**Deprecated**\r\nThis package has been deprecated as it has critical bugs and is no longer maintained.\r\n**Alternate package**\r\nABC version 4.0.0\r\n![NotLocalized](https://user-images.githubusercontent.com/20632625/62360111-be836400-b54a-11e9-8278-50fae2492b71.png)\r\n\r\n## Note\r\nIt repro on all non-ENU languages.\r\n"},{"Id":"10361540198","Type":"IssuesEvent","CreatedAt":"2019-09-06T10:16:13","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8557","RelatedDescription":"Opened issue \"[Test Failure][Deprecation] Deprecated info of the deprecated package ‚Äútest10k‚Äù will show on PM UI right pane with 30 seconds‚Äô delay and VS hanging\" (#8557) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.3.0.6224\r\nVS Version: D16.3\\29305.141\r\nOS: Windows-10-Enterprise-19H1-04-05-2019\r\n## Detailed repro steps \r\n1. Launch VS and create a project. [e.g. Console Application (.NET Core)]\r\n2. Add a deprecated package source: https://apidev.nugettest.org/v3-index/index.json.\r\n3. Open PM UI of the project, select the above deprecated package source and search the deprecated package ‚Äútest10k‚Äù in Browse tab.\r\n4. Click the package on the left pane and look at the right pane.\r\n## Expected\r\nDeprecated info of the package should show immediately.\r\n## Actual\r\nDeprecated info of the deprecated package ‚Äútest10k‚Äù will show on PM UI right pane with 30 seconds‚Äô delay and VS hung when loading the deprecated info as below video.\r\n\r\n![DeprecationInfoDelay](https://user-images.githubusercontent.com/20632625/64420367-b8e0e700-d0d1-11e9-8300-4292e537cdeb.gif)\r\n\r\n"},{"Id":"10358730959","Type":"IssuesEvent","CreatedAt":"2019-09-06T00:32:37","Actor":"mbranscomb","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8556","RelatedDescription":"Opened issue \"Provide option to upload packages for verification and be staged but unpublished.\" (#8556) at NuGet/Home","RelatedBody":"## Details\r\n\r\nWe would like to be able to upload packages to NuGet.org for signature validation / virus scanning / verification but such that they could be deleted if necessary before publishing and listing. Effectively we would like to stage the NuGet packages ready for release but know that we could take them down if any last minute showstopper issues were discovered.\r\n\r\nWe want to do this because we have a coordinated release of multiple products across different platforms and wherever possible we want these all to go live within the same time window. \r\n\r\nThe proposed workflow would be:\r\n1. Upload/push updated packages\r\n2. Signature validation, virus scanning, verification\r\n3. Stage (but can delete at this point)\r\n4. Publish (with option not to list)\r\n5. List (publicly visible)"},{"Id":"10358046435","Type":"IssuesEvent","CreatedAt":"2019-09-05T21:52:11","Actor":"scottbommarito","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8490","RelatedDescription":"Closed issue \"Add test for NuGet/NuGet.Client#3024 change\" (#8490) at NuGet/Home","RelatedBody":"NuGet/NuGet.Client#3024 code change added quickly to meet shipping schedule. Need to add test."},{"Id":"10357423501","Type":"IssuesEvent","CreatedAt":"2019-09-05T20:13:21","Actor":"dotMorten","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8555","RelatedDescription":"Opened issue \"Nuget command line parameters are inconsistent\" (#8555) at NuGet/Home","RelatedBody":"## Details about Problem\r\nWhen using nuget.exe I was looking for help. So I naturally tried the various common ways to get the help output:\r\n```\r\nnuget /?\r\nnuget -?\r\nnuget --?\r\nnuget -help\r\nnuget /help\r\nnuget --help\r\n```\r\nAll of them returned:\r\n```\r\nUnknown command: '/?'\r\nNuGet.CommandLine.CommandLineException: Unknown command: '/?'\r\n   at NuGet.CommandLine.CommandManager.GetCommand(String commandName)\r\n   at NuGet.CommandLine.CommandLineParser.ParseCommandLine(IEnumerable`1 commandLineArgs)\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\n```\r\nInstead it turns out the command is\r\n`nuget help`\r\nThis is a bit against common convention.\r\nHowever it gets weirder. I needed help for the `nuget config` command, so now having learned you add `help` without a dash, I entered this:\r\n```\r\nc:\\>nuget config help\r\nKey 'help' not found.\r\n```\r\n\r\nIt turns out that in this specific case, you must use a dash in front of the command: `nuget config -help`\r\n\r\nThis is rather inconsistent. The quick fix would allow `nuget -help`  and `nuget -?` (or forward slash on Windows) to be the common documented approach, as it's in alignment with common conventions, and also aligns with other help commands in the nuget cli.\r\n\r\nI later realized you can also do `nuget help config`, but again I've found it more common you ask for help after the command you want help with, and not the other way around.\r\n\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx):  5.1.0.6013\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Win10 v1809 17763.529\r\n\r\n"},{"Id":"10356992035","Type":"IssuesEvent","CreatedAt":"2019-09-05T19:09:10","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8554","RelatedDescription":"Opened issue \"NU5048 is a warning in the error range\" (#8554) at NuGet/Home","RelatedBody":"NU code from 5000-5099 are errors.\r\n5100-5199 are warnings. \r\n\r\nThe root cause that the warning in question was originally an error and was never fixed. \r\n\r\nWe should discuss how we want to address this, given that this has shipped in previews already. \r\n\r\n//cc @dominoFire @rrelyea "},{"Id":"10356529626","Type":"IssuesEvent","CreatedAt":"2019-09-05T18:02:24","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8553","RelatedDescription":"Closed issue \"Build:  ShouldSkipOptimize is hard-coded in YAML\" (#8553) at NuGet/Home","RelatedBody":"[`ShouldSkipOptimize` is currently hard-coded to `false` in build\\vsts_build.yaml](https://github.com/NuGet/NuGet.Client/blob/4b312015695f580eb307791a4544d0ec81292d05/build/vsts_build.yaml#L72).  The impact of this is that if sufficient time should pass between successive builds such that previous optimization data has been deleted due to retention limits, the next build will fail.  Resolving this would require a commit to change `ShouldSkipOptimize` to `true`, allowing the build and its corresponding release to complete and then another change to return `ShouldSkipOptimize` back to `false`.\r\n\r\n`ShouldSkipOptimize` should be settable at build queue time."},{"Id":"10356025715","Type":"IssuesEvent","CreatedAt":"2019-09-05T16:50:17","Actor":"scottbommarito","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8518","RelatedDescription":"Closed issue \"[Accessibility] Installed tab with a warning icon due to deprecation is not announced\" (#8518) at NuGet/Home","RelatedBody":"Install a deprecated package and go to the PM/Solution PM UI. \r\n\r\nNavigate to installed tab and notice that the deprecation warning is not announced. \r\n\r\nNote that if you have a number in the updates tab it is announced, so there is precedent for this. "},{"Id":"10355961541","Type":"IssuesEvent","CreatedAt":"2019-09-05T16:40:59","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8553","RelatedDescription":"Opened issue \"Build:  ShouldSkipOptimize is hard-coded in YAML\" (#8553) at NuGet/Home","RelatedBody":"[`ShouldSkipOptimize` is currently hard-coded to `false` in build\\vsts_build.yaml](https://github.com/NuGet/NuGet.Client/blob/4b312015695f580eb307791a4544d0ec81292d05/build/vsts_build.yaml#L72).  The impact of this is that if sufficient time should pass between successive builds such that previous optimization data has been deleted due to retention limits, the next build will fail.  Resolving this would require a commit to change `ShouldSkipOptimize` to `true`, allowing the build and its corresponding release to complete and then another change to return `ShouldSkipOptimize` back to `false`.\r\n\r\n`ShouldSkipOptimize` should be settable at build queue time."},{"Id":"10355228102","Type":"IssuesEvent","CreatedAt":"2019-09-05T15:12:15","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8303","RelatedDescription":"Closed issue \"nuget pack Illegal characters in path.\" (#8303) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): nuget.exe\r\n\r\nNuGet version (x.x.x.xxx): NuGet Version: 5.0.2.5988\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate): 2013\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):  Windows 7\r\n\r\nWorked before? If so, with which NuGet version: NuGet Version: 4.8.1.5435\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.    Use attached zipped project.  Note that on my machine, the project was located in C:\\dev\\NugetTest\r\n\r\n2.   nuget pack NugetTest.csproj\r\n\r\nOutput is:\r\nc:\\dev\\NugetTest>nuget pack\r\nAttempting to build package from 'NugetTest.csproj'.\r\nIllegal characters in path.\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\nNuGet Version: 5.0.2.5988\r\nAttempting to build package from 'NugetTest.csproj'.\r\nIllegal characters in path.\r\nSystem.ArgumentException: Illegal characters in path.\r\n   at System.IO.Path.CheckInvalidPathChars(String path, Boolean checkAdditional)\r\n   at System.IO.Path.Combine(String path1, String path2)\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)\r\n   at NuGet.CommandLine.MsBuildUtility.GetMSBuild()\r\n   at NuGet.CommandLine.MsBuildUtility.GetMsBuildToolset(String userVersion, IConsole console)\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at NuGet.CommandLine.PackCommand.<ExecuteCommand>b__80_0()\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at NuGet.Commands.PackCommandRunner.BuildFromProjectFile(String path)\r\n   at NuGet.Commands.PackCommandRunner.BuildPackage()\r\n   at NuGet.CommandLine.PackCommand.ExecuteCommand()\r\n   at NuGet.CommandLine.Command.ExecuteCommandAsync()\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\n\r\nNote: there is no error when running with previous version of Nuget (as noted above).\r\n\r\n### Sample Project\r\n\r\n[NugetTest.zip](https://github.com/NuGet/Home/files/3361741/NugetTest.zip)\r\n\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"‚ö† Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo‚Ä¶ https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?‚Ä¶ https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-09-08T05:30:42.774585Z","RunDurationInMilliseconds":2849}