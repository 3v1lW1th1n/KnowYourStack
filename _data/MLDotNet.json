{"Data":{"GitHub":{"Issues":[{"Id":"422030394","IsPullRequest":true,"CreatedAt":"2019-03-18T04:17:31","Actor":"abgoswam","Number":"2990","RawContent":null,"Title":"Fix FeatureColumnName in the public API","State":"open","Body":"Fixes #2975\r\n\r\n- also fixes an incorrect parameter name `featureColumn` parameter in ExplanabilityCatalog.cs","Url":"https://github.com/dotnet/machinelearning/pull/2990","RelatedDescription":"Open PR \"Fix FeatureColumnName in the public API\" (#2990)"},{"Id":"421788246","IsPullRequest":false,"CreatedAt":"2019-03-16T09:22:59","Actor":"Alex-fbr","Number":"2989","RawContent":null,"Title":"DateTime  ERROR","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:  Windows 10 Home\r\n- **.NET Version (eg., dotnet --info)**:  .net core 2.2.0\r\n\r\n### Issue\r\nI updated Nuget package from ML 0.8 to 0.11. I have a truble. \r\nMy csv File contain:\r\n\r\nSECID,CurrentDate,OpenPrice,FareClosePrice\r\nLKOH,2019-01-01,4984.00,5007.00\r\n\r\n\r\n\r\n### Source code / logs\r\n\r\n  _textLoader = mlContext.Data.CreateTextLoader(\r\n                separatorChar: ',',\r\n                hasHeader: true,\r\n                columns: new TextLoader.Column[]\r\n                {\r\n                    new TextLoader.Column(\"SECID\", DataKind.String, 0),\r\n                    new TextLoader.Column(\"CurrentDate\", DataKind.DateTime, 1),\r\n                    new TextLoader.Column(\"OpenPrice\", DataKind.Double, 2),\r\n                    new TextLoader.Column(\"FareClosePrice\", DataKind.Double, 3)\r\n                });\r\n\r\n           IDataView dataView = _textLoader.Load(dataPath);\r\n            var pipeline = mlContext.Transforms.CopyColumns(\"Label\", \"FareClosePrice\")\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(\"SECID\"))\r\n                .Append(mlContext.Transforms.Concatenate(\"Features\", \"SECID\", \"CurrentDate\", \"OpenPrice\", \"FareClosePrice\"))\r\n            .Append(mlContext.Regression.Trainers.FastTree());\r\n\r\n// An error occurs here:  System.InvalidOperationException: \"Column 'CurrentDate' has values of // DateTimewhich is not the same as earlier observed type of R4.\"\r\n\r\n            var model = pipeline.Fit(dataView);\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2989","RelatedDescription":"Open issue \"DateTime  ERROR\" (#2989)"},{"Id":"421742554","IsPullRequest":true,"CreatedAt":"2019-03-15T23:55:23","Actor":"jwood803","Number":"2988","RawContent":null,"Title":"Load a model by path","State":"closed","Body":"Updates for #2983.\r\n\r\nOpening as draft for any discussion.","Url":"https://github.com/dotnet/machinelearning/pull/2988","RelatedDescription":"Closed or merged PR \"Load a model by path\" (#2988)"},{"Id":"421741781","IsPullRequest":true,"CreatedAt":"2019-03-15T23:47:51","Actor":"eerhardt","Number":"2987","RawContent":null,"Title":"Move IDataView into Microsoft.ML namespace","State":"open","Body":"Fix #2974\r\n\r\nHere's the steps I took:\r\n\r\n1. Rename the folders and files for the `src\\Microsoft.Data.DataView` and `pkg\\Microsoft.Data.DataView` to `Microsoft.ML.DataView`.\r\n2. Rename the namespaces in that assembly:\r\n    - IDataView.cs and DataViewSchema.cs move to the `Microsoft.ML` namespace.\r\n    - Everything else in the assembly move to the `Microsoft.ML.Data` namespace.\r\n3. Find all `using Microsoft.Data.DataView;` lines and delete them.\r\n4. Compile, and fix any build errors to add `using Microsoft.ML.Data;` lines.\r\n5. In the Parquet files, there were some full namespace usages that I removed.\r\n6. Find all \"Microsoft.Data\" in the repo, and change as appropriate (it was only docs). \r\n   - there is only 1 place left - which was there before we made this change\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/87ede9ef39c10b8511fc7f14f97d1250bbd2b951/src/Microsoft.ML.Core/ComponentModel/AssemblyLoadingUtils.cs#L121","Url":"https://github.com/dotnet/machinelearning/pull/2987","RelatedDescription":"Open PR \"Move IDataView into Microsoft.ML namespace\" (#2987)"},{"Id":"421740613","IsPullRequest":false,"CreatedAt":"2019-03-15T23:41:05","Actor":"eerhardt","Number":"2986","RawContent":null,"Title":"Co-locate VBuffer and VectorType with IDataView","State":"open","Body":"Once we do #2974, to move `IDataView` into the `ML` namespace, we should move `VBuffer`, `VectorType` and `KeyType` into the same assembly/package as `IDataView`.\r\n\r\n`VBuffer` and `KeyType` were left in `Microsoft.ML` because they were too specific to machine learning usages to be in `Microsoft.Data`. If we are moving `IDataView` back into the `Microsoft.ML` namespace, then we should be able to locate these types in the same package.\r\n\r\ncc @TomFinley @shauheen @glebuk ","Url":"https://github.com/dotnet/machinelearning/issues/2986","RelatedDescription":"Open issue \"Co-locate VBuffer and VectorType with IDataView\" (#2986)"},{"Id":"421727275","IsPullRequest":true,"CreatedAt":"2019-03-15T22:31:52","Actor":"abgoswam","Number":"2985","RawContent":null,"Title":"OutputTokens option in FeaturizeText API","State":"open","Body":"Fixes #2957\r\n\r\n- the PR follows the proposal https://github.com/dotnet/machinelearning/issues/2957#issuecomment-473568237 to fix the issue\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2985","RelatedDescription":"Open PR \"OutputTokens option in FeaturizeText API\" (#2985)"},{"Id":"421724812","IsPullRequest":true,"CreatedAt":"2019-03-15T22:21:24","Actor":"rogancarr","Number":"2984","RawContent":null,"Title":"Add functional tests for ONNX scenarios","State":"open","Body":"As laid out in #2498 , we need scenarios to cover the ONNX functionality we want fully supported in V1.\r\n\r\nScenarios:\r\n- I can take an existing ONNX model and get predictions from it (as both final output and as input to downstream pipelines)\r\n- P1: I can export ML.NET models to ONNX (limited to the existing internal functionality) (In Model Files section, but can be fleshed out a bit better with other ONNX tests)\r\n\r\nFixes #2963","Url":"https://github.com/dotnet/machinelearning/pull/2984","RelatedDescription":"Open PR \"Add functional tests for ONNX scenarios\" (#2984)"},{"Id":"421720910","IsPullRequest":false,"CreatedAt":"2019-03-15T22:04:58","Actor":"eerhardt","Number":"2983","RawContent":null,"Title":"Add MLContext.Model.Load overload that takes a file path","State":"open","Body":"Today, the only way to load a model is by using a `Stream`:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e2464f606c69357898572aac8e4d8d3c1451c92f/src/Microsoft.ML.Data/Model/ModelOperationsCatalog.cs#L36-L41\r\n\r\nWe should add an overload that takes a `string filePath` as a convenience API over top of this. That way all the callers don't need to open a `FileStream` and dispose of it, etc, just to load a model.\r\n\r\n@TomFinley @CESARDELATORRE @sfilipi @shauheen ","Url":"https://github.com/dotnet/machinelearning/issues/2983","RelatedDescription":"Open issue \"Add MLContext.Model.Load overload that takes a file path\" (#2983)"},{"Id":"421720200","IsPullRequest":false,"CreatedAt":"2019-03-15T22:02:15","Actor":"rogancarr","Number":"2982","RawContent":null,"Title":"ONNX Transform changes output types","State":"open","Body":"Serializing and deserializing a model to and from ONNX not only changes the names of the output (#2980) but also changes the types of the output. For example, a `Score` column produced by a model (`R4`/`float`) becomes a `Vec<R4, 1, 1>`.","Url":"https://github.com/dotnet/machinelearning/issues/2982","RelatedDescription":"Open issue \"ONNX Transform changes output types\" (#2982)"},{"Id":"421716798","IsPullRequest":false,"CreatedAt":"2019-03-15T21:49:23","Actor":"rogancarr","Number":"2981","RawContent":null,"Title":"Cannot fit an Onnx Transform as part of a pipeline","State":"open","Body":"It is possible to fit an ONNX model by itself:\r\n\r\n```cs\r\nvar onnxEstimator = mlContext.Transforms.ApplyOnnxModel(modelPath)\r\nvar onnxModel = onnxEstimator.Fit(data);\r\n```\r\n\r\nBut it throws when it is part of a pipeline:\r\n```cs\r\nvar onnxEstimator = mlContext.Transforms.ApplyOnnxModel(modelPath)\r\n    // TODO #2980: ONNX outputs don't match the outputs of the model, so we must hand-correct this for now.\r\n    .Append(mlContext.Transforms.CopyColumns(\"Score\", \"Score0\"));\r\n    .Append(mlContext.Transforms.CopyColumns(\"Label\", \"Fable\"));\r\n    .Append(mlContext.Transforms.NormalizeLpNorm(\"Features2\", \"Features\", LpNormNormalizingEstimatorBase.NormFunction.L2));\r\nvar onnxModel = onnxEstimator.Fit(data);\r\n```\r\nAny of these `Append` statements cause a throw. They do not affect the ONNX model at all, and use either the result of the calculation (`Score0`), rows unused by the model (`Label`) or rows also used by the transform (`Features`).\r\n\r\nIn this case, the error message is:\r\n`System.ArgumentOutOfRangeException : Schema mismatch for input column 'Label': expected vector, got R4\r\nParameter name: inputSchema`","Url":"https://github.com/dotnet/machinelearning/issues/2981","RelatedDescription":"Open issue \"Cannot fit an Onnx Transform as part of a pipeline\" (#2981)"},{"Id":"421712433","IsPullRequest":false,"CreatedAt":"2019-03-15T21:33:20","Actor":"rogancarr","Number":"2980","RawContent":null,"Title":"ONNX outputs don't match model outputs after serialization","State":"open","Body":"When I save a model to ONNX, load, and apply it with `ApplyOnnxModel`, it adds a zero as a suffix to all columns, including the expected output. This includes input columns, so the resulting `IDataView` now has double the columns, plus the output. To top it off, it's not clear how to find the output because it's been renamed.\r\n\r\nExample:\r\nML.NET model\r\n  Input:  `Features`\r\n  Output: `Score`\r\n  Resulting Schema: `Features`, `Score`\r\n\r\nAfter Onnx Serialization / Deserialization:\r\n  Input: `Features`\r\n  Output: `Features0`, `Score0`\r\n  Resulting Schema: `Features`, `Features0`, `Score0`\r\n\r\nI am not sure if this is by design, but it feels like a bug.","Url":"https://github.com/dotnet/machinelearning/issues/2980","RelatedDescription":"Open issue \"ONNX outputs don't match model outputs after serialization\" (#2980)"},{"Id":"421703060","IsPullRequest":true,"CreatedAt":"2019-03-15T21:01:46","Actor":"shmoradims","Number":"2979","RawContent":null,"Title":"In-memory & self-contained sample template.","State":"open","Body":"Related to #2726 I created this in-memory and self-contained sample for FastTree. I'll use the final version from this PR as template for the following samples.","Url":"https://github.com/dotnet/machinelearning/pull/2979","RelatedDescription":"Open PR \"In-memory & self-contained sample template.\" (#2979)"},{"Id":"421694588","IsPullRequest":false,"CreatedAt":"2019-03-15T20:36:22","Actor":"yaeldekel","Number":"2978","RawContent":null,"Title":"Public API for SchemaDefinition class","State":"open","Body":"There are no samples/tests in the code that make use of this class, even though it is part of the public API.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2978","RelatedDescription":"Open issue \"Public API for SchemaDefinition class\" (#2978)"},{"Id":"421683219","IsPullRequest":false,"CreatedAt":"2019-03-15T20:02:09","Actor":"TomFinley","Number":"2977","RawContent":null,"Title":"Somehow discourage (or embrace!!) Preview Debugger Extensions from public usage","State":"open","Body":"We have these debugger extensions meant to make \"debugger level\" inspection of things like `IDataView` and `IDataLoader` and such like more convenient. How nice!\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/87ede9ef39c10b8511fc7f14f97d1250bbd2b951/src/Microsoft.ML.Data/DebuggerExtensions.cs#L15\r\n\r\nNow, this is fine, or would be, except that, wouldn't you know it, people are actually using it in their applications, as opposed to more scalable solutions like the as-enumerable helpers or even direct usage of `IDataView` directly. Which, of course, is bad. 😄 So we should discourage its use as bad practice in the API.\r\n\r\nTwo ways that occur to me:\r\n\r\n1. `Obsolete` attribute on the class to \"hint\" at people that they shouldn't be doing it (hopefully it will not show up as obsolete in immediate window),\r\n\r\n2. Write something to the code analyzer forbidding its use in a project, while allowing it in the immediate window.\r\n\r\nMaybe there's some other way.","Url":"https://github.com/dotnet/machinelearning/issues/2977","RelatedDescription":"Open issue \"Somehow discourage (or embrace!!) Preview Debugger Extensions from public usage\" (#2977)"},{"Id":"421634248","IsPullRequest":true,"CreatedAt":"2019-03-15T17:44:56","Actor":"wschin","Number":"2976","RawContent":null,"Title":"Make Multiclass Linear Trainers Typed Based on Output Model Types.","State":"open","Body":"Multiclass SDCA can train multi-class SVM but it always outputs multi-class logistic regression model. This is not correct because we should not apply softmax to SVM model.\r\n\r\nTo fix #1100, we got the following working items.\r\n- [x] Clean code.\r\n- [x] Create two multi-class linear models.\r\n- [x] Make multiclass SDCA trainers typed.\r\n- [x] Give the two new model classes better.","Url":"https://github.com/dotnet/machinelearning/pull/2976","RelatedDescription":"Open PR \"Make Multiclass Linear Trainers Typed Based on Output Model Types.\" (#2976)"},{"Id":"421633105","IsPullRequest":false,"CreatedAt":"2019-03-15T17:42:11","Actor":"rogancarr","Number":"2975","RawContent":null,"Title":"FeatureColumn vs FeatureColumnName in Model Transformers.","State":"open","Body":"In the public API, we've been switching `FeatureColumn` to `FeatureColumnName`. However, trained models like `SDCA` have `FeatureColumnName` in the input, but produce a `Transformer` that has a `FeatureColumn` property. I think this is widespread.","Url":"https://github.com/dotnet/machinelearning/issues/2975","RelatedDescription":"Open issue \"FeatureColumn vs FeatureColumnName in Model Transformers.\" (#2975)"},{"Id":"421306728","IsPullRequest":true,"CreatedAt":"2019-03-15T17:36:38","Actor":"zeahmed","Number":"2971","RawContent":null,"Title":"Fixed a rendering issue in the TensorFlow doc.","State":"closed","Body":"There is a rendering issue with TensorFlow documentation where a link appears as code snippet in the doc at the following link. \r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.tensorflowcatalog?view=ml-dotnet\r\n\r\nThis PR fixes it.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2971","RelatedDescription":"Closed or merged PR \"Fixed a rendering issue in the TensorFlow doc.\" (#2971)"},{"Id":"421271958","IsPullRequest":true,"CreatedAt":"2019-03-15T17:11:27","Actor":"shauheen","Number":"2961","RawContent":null,"Title":"Enable MyGet uploads again","State":"closed","Body":"#2240 required to disable the upload. Seems the issue is fixed now.","Url":"https://github.com/dotnet/machinelearning/pull/2961","RelatedDescription":"Closed or merged PR \"Enable MyGet uploads again\" (#2961)"},{"Id":"421297095","IsPullRequest":true,"CreatedAt":"2019-03-15T16:02:54","Actor":"shmoradims","Number":"2970","RawContent":null,"Title":"Updated xml docs for tree-based trainers.","State":"closed","Body":"Updated XML documentation for tree-based trainers (FastTree, FastForest, GAM, etc). Related to #2522.\r\n\r\nSamples to come in a separate PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2970","RelatedDescription":"Closed or merged PR \"Updated xml docs for tree-based trainers.\" (#2970)"},{"Id":"421499966","IsPullRequest":false,"CreatedAt":"2019-03-15T12:40:50","Actor":"eerhardt","Number":"2974","RawContent":null,"Title":"Move IDataView into Microsoft.ML namespace","State":"open","Body":"We've received feedback that having `IDataView` in the `Microsoft.Data` namespace (which was done in #2220) is confusing to users. Traditionally, the `System.Data` namespace has been populated with \"database\" specific technologies. `Microsoft.Data` isn't all that different from `System.Data`, and one could argue they are basically the \"same thing\", with the `System.Data` technologies being inside of the BCL and/or `netstandard` definition while `Microsoft.Data` being built outside of the BCL/`netstandard` definition. There are already \"database\" specific APIs in `Microsoft.Data`, for example https://docs.microsoft.com/en-us/dotnet/api/microsoft.data.sqlite.\r\n\r\n`System.Data` even already has a [`DataView` class](https://docs.microsoft.com/en-us/dotnet/api/system.data.dataview), and `IDataView` and `DataView` are drastically different.\r\n\r\nTo solve this confusion, we should rename the `Microsoft.Data.DataView` NuGet package to `Microsoft.ML.DataView` and move the `Microsoft.Data.DataView` namespace under `Microsoft.ML`. The NuGet package will still be separated from the algorithms and transforms in the larger `Microsoft.ML` NuGet package. So the value of #1860 can still be realized. The separate package will just be branded `ML` instead of `Data`.\r\n\r\n/cc @TomFinley @shauheen @markusweimer @glebuk ","Url":"https://github.com/dotnet/machinelearning/issues/2974","RelatedDescription":"Open issue \"Move IDataView into Microsoft.ML namespace\" (#2974)"},{"Id":"421308588","IsPullRequest":true,"CreatedAt":"2019-03-15T01:03:25","Actor":"artidoro","Number":"2973","RawContent":null,"Title":"Cleaning TrainCatalog and RecommenderCatalog","State":"open","Body":"Fixes #2972.\r\n\r\nIn this PR I clean `TrainCatalog` (commit 1) and `RecommenderCatalog` (commit 2).\r\nThe other commits are simply the adjustments in the code that need to be done to compile. ","Url":"https://github.com/dotnet/machinelearning/pull/2973","RelatedDescription":"Open PR \"Cleaning TrainCatalog and RecommenderCatalog\" (#2973)"},{"Id":"421308185","IsPullRequest":false,"CreatedAt":"2019-03-15T01:01:12","Actor":"artidoro","Number":"2972","RawContent":null,"Title":"TrainCatalog and RecommenderCatalog need cleaning","State":"open","Body":"There are some methods in the catalogs that do not respect the naming conventions that we are enforcing in the trainers and the transforms. \r\n\r\nThe methods that should be fixed are the `Evaluate` and `CrossValidate` in particular.\r\n\r\nWe should rename the parameters accordingly.","Url":"https://github.com/dotnet/machinelearning/issues/2972","RelatedDescription":"Open issue \"TrainCatalog and RecommenderCatalog need cleaning\" (#2972)"},{"Id":"421292514","IsPullRequest":true,"CreatedAt":"2019-03-14T23:43:39","Actor":"Ivanidzo4ka","Number":"2969","RawContent":null,"Title":"Configurable Threshold for binary models","State":"open","Body":"fixes #2465","Url":"https://github.com/dotnet/machinelearning/pull/2969","RelatedDescription":"Open PR \"Configurable Threshold for binary models\" (#2969)"},{"Id":"421289748","IsPullRequest":true,"CreatedAt":"2019-03-14T23:31:42","Actor":"abgoswam","Number":"2968","RawContent":null,"Title":"Fixing ModelParameter discrepancies","State":"open","Body":"Fixes #2938 \r\n\r\n- Fixes to the ~7 odd ModelParameter types which were inconsistent  with the  rest of the ModelParameter types\r\n\r\nCouple of notes: \r\n\r\n1.  PR follows naming convention  used by other ModelParameter types in the codebase\r\n    - {AlgoName}(optional){TypeOfTask}ModelParameters\r\n    - {TypeOfTask} is added  only when needed to distinguish between `Binary` , `Regression` or `Multiclass`\r\n\r\n2. ModelParameter types do not use the word `Classification` in the {TypeOfTask} . PR follows that convention.\r\n\r\nEDIT : MulticlassLogisticRegressionModelParameters is being refactored by separate issue #1100 .  SO not fixing that in this PR","Url":"https://github.com/dotnet/machinelearning/pull/2968","RelatedDescription":"Open PR \"Fixing ModelParameter discrepancies\" (#2968)"},{"Id":"421286304","IsPullRequest":false,"CreatedAt":"2019-03-14T23:17:10","Actor":"zeahmed","Number":"2967","RawContent":null,"Title":"More tests for TextFeaturizer.","State":"open","Body":"TextFeaturizer is a complex transform and it takes more options as input then any other component in ML.NET. Using those options, the TextFeaturizer build up the underlying components.\r\n\r\nAssuming that underlying component are well tested, there is a need to test the options for TextFeaturizer so that we are sure that underlying components are created as intended and results produced are as expected.","Url":"https://github.com/dotnet/machinelearning/issues/2967","RelatedDescription":"Open issue \"More tests for TextFeaturizer.\" (#2967)"},{"Id":"421285821","IsPullRequest":true,"CreatedAt":"2019-03-14T23:15:17","Actor":"artidoro","Number":"2966","RawContent":null,"Title":"Clean FeatureContributionCalculation and PermutationFeatureImportance","State":"open","Body":"Fixes #2965.\r\n\r\nIn this PR:\r\n1.  I move and rename the extension `MlContext.Model.Explainability.FeatureContributionCalculation` to `MlContext.Transforms.CalculateFeatureContribution`.\r\n\r\n2. I also remove the `MlContext.Model.Explainability` catalog. \r\n\r\n3. Clean up the `FeatureContributionCalculation` extension\r\n\r\n4. Clean up PFI extensions \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2966","RelatedDescription":"Open PR \"Clean FeatureContributionCalculation and PermutationFeatureImportance\" (#2966)"},{"Id":"421285020","IsPullRequest":false,"CreatedAt":"2019-03-14T23:11:59","Actor":"artidoro","Number":"2965","RawContent":null,"Title":"Scrubbing of FeatureContributionCalculation and Explainability Catalog","State":"open","Body":"Explainability catalog should be cleaned up. \r\n\r\nThe `MlContext.Model.Explainability` catalog was created with the idea that all the model explainability operations would live there.\r\n\r\nBut it only contains `FeatureContributionCalculation` because `PermutationFeatureImportance` lives in the training task specific catalog (i.e. `MlContext.BinaryClassification`...) because it is task specific. \r\n\r\n@rogancarr  and @TomFinley  agreed that it is not desirable to have a subcatalog with only one transform. And since `FeatureContributionCalculation` is an estimator/transformer it should probably live under:\r\n\r\n`MlContext.Transforms.FeatureContributionCalculation`","Url":"https://github.com/dotnet/machinelearning/issues/2965","RelatedDescription":"Open issue \"Scrubbing of FeatureContributionCalculation and Explainability Catalog\" (#2965)"},{"Id":"421284905","IsPullRequest":true,"CreatedAt":"2019-03-14T23:11:35","Actor":"ganik","Number":"2964","RawContent":null,"Title":"WIP Remove duplicate NormalizeFeatures from FFM trainer","State":"open","Body":"Fixes #2958. There are two flags controlling normalization steps right before and in FFM trainer. We decide to disable the former one because FFM has its own built-in normalization for multiple feature columns and the other normalization only works with a single feature column.","Url":"https://github.com/dotnet/machinelearning/pull/2964","RelatedDescription":"Open PR \"WIP Remove duplicate NormalizeFeatures from FFM trainer\" (#2964)"},{"Id":"421284887","IsPullRequest":false,"CreatedAt":"2019-03-14T23:11:29","Actor":"rogancarr","Number":"2963","RawContent":null,"Title":"Create functional tests for all ONNX scenarios","State":"open","Body":"As laid out in #2498 , we need scenarios to cover the ONNX functionality we want fully supported in V1.\r\n\r\nScenarios:\r\n- I can take an existing ONNX model and get predictions from it (as both final output and as input to downstream pipelines)\r\n- P1: I can export ML.NET models to ONNX (limited to the existing internal functionality) (In Model Files section, but can be fleshed out a bit better with other ONNX tests)","Url":"https://github.com/dotnet/machinelearning/issues/2963","RelatedDescription":"Open issue \"Create functional tests for all ONNX scenarios\" (#2963)"},{"Id":"421284175","IsPullRequest":true,"CreatedAt":"2019-03-14T23:08:21","Actor":"zeahmed","Number":"2962","RawContent":null,"Title":"Made 'StopWordsRemover' in TextFeaturizer configurable again.","State":"open","Body":"This PR addresses the StopWordsRemover issue in https://github.com/dotnet/machinelearning/issues/838\r\n\r\nThis PR make available two options to remove stop words.\r\n1. PredefinedStopWordsRemover: removes stops words using built in technique in ML.NET.\r\n2. UseCustomStopWordsRemover: User provides the list of stop words to remove. Currently `string[]` is exposed to collect that list.\r\n\r\nNo support is added to load stop words from file. I think if we make No.2 take list as `IEnumerable<string>` instead of `string[]` then user can load list on their own. Let me know if reviewers have any thought.","Url":"https://github.com/dotnet/machinelearning/pull/2962","RelatedDescription":"Open PR \"Made 'StopWordsRemover' in TextFeaturizer configurable again.\" (#2962)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-18T05:30:35.1465005Z","RunDurationInMilliseconds":621}