{"Data":{"GitHub":{"Issues":[{"Id":"381816984","IsPullRequest":true,"CreatedAt":"2018-11-17T02:02:17","Actor":"Ivanidzo4ka","Number":"1661","RawContent":null,"Title":"Fix problem with saving/loading empty vbuffer ","State":"open","Body":"Fix #1660 ","Url":"https://github.com/dotnet/machinelearning/pull/1661","RelatedDescription":"Open PR \"Fix problem with saving/loading empty vbuffer \" (#1661)"},{"Id":"381815949","IsPullRequest":false,"CreatedAt":"2018-11-17T01:50:49","Actor":"Ivanidzo4ka","Number":"1660","RawContent":null,"Title":"ReadOnlyMemory<char> codec fails if we write and then read empty vector","State":"open","Body":"How to reproduce:\r\nGo to WordBagWorkout test and set WordHashBagEstimator to have invertHash to be -1\r\n`Append(new WordHashBagEstimator(Env, \"text\", \"bag_of_wordshash\", invertHash:-1));`\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bc6d7f463258eb4fc9af5ce55b9b426b626312fe/src/Microsoft.ML.Data/Transforms/InvertHashUtils.cs#L397\r\n\r\nthis thing will try to save VBuffer<ReadOnlyMemory<char>> with size of 65536 and empty values and indices arrays.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bc6d7f463258eb4fc9af5ce55b9b426b626312fe/src/Microsoft.ML.Data/Transforms/InvertHashUtils.cs#L363\r\nthis thing will try to read it and fails on\r\n`ch.CheckDecode(stream.ReadByte() == -1);`\r\n\r\nIn case of empty VBuffer we currently write following information:\r\n4 bytes: How many vectors we have - 1\r\n4 bytes: Size of all vectors - 65536\r\n4 bytes: Counts for each vector - 0\r\n4 bytes: size of indices array  - 0\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/d0522f36699f7acf1879645c2570e3c4094946ee/src/Microsoft.ML.Data/DataLoadSave/Binary/Codecs.cs#L1054\r\nprevents stops us from reading further in stream because we determine absence of values.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/d0522f36699f7acf1879645c2570e3c4094946ee/src/Microsoft.ML.Data/DataLoadSave/Binary/Codecs.cs#L870\r\nthis code responsible for filling buffer during save\r\nwe write same things:\r\n4 bytes: How many vectors we have - 1\r\n4 bytes: Size of all vectors - 65536\r\n4 bytes: Counts for each vector - 0\r\n4 bytes: size of indices array  - 0\r\nPlus content of value writer which is stream with size of vector and builder you need to use to populate it during reading. \r\n5 bytes: 0 + \"\"\r\n\r\nWhich brings inconsistency and exception\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1660","RelatedDescription":"Open issue \"ReadOnlyMemory<char> codec fails if we write and then read empty vector\" (#1660)"},{"Id":"381333888","IsPullRequest":true,"CreatedAt":"2018-11-17T00:56:16","Actor":"wschin","Number":"1637","RawContent":null,"Title":"Remove the uses of CreatePredictionEngine","State":"closed","Body":"Fixes #1409. Those tests are full of copy-and-paste, so I also clean them a bit.","Url":"https://github.com/dotnet/machinelearning/pull/1637","RelatedDescription":"Closed or merged PR \"Remove the uses of CreatePredictionEngine\" (#1637)"},{"Id":"381801982","IsPullRequest":true,"CreatedAt":"2018-11-17T00:02:21","Actor":"wschin","Number":"1659","RawContent":null,"Title":"[WIP] Make CpuMath internal and be a best friend","State":"open","Body":"This PR tries to make `CpuMath` internal, so that it's not going to be exposed to users. It's a part of #1519.","Url":"https://github.com/dotnet/machinelearning/pull/1659","RelatedDescription":"Open PR \"[WIP] Make CpuMath internal and be a best friend\" (#1659)"},{"Id":"381792709","IsPullRequest":true,"CreatedAt":"2018-11-16T23:11:03","Actor":"shmoradims","Number":"1658","RawContent":null,"Title":"[WIP] Enable PermutationFeatureImportance","State":"open","Body":"This is a WIP-PR to enable PermutationFeatureImportance feature for model explainability. It shows how to do PFI for a regression model.\r\n\r\nDiscussion points / open issues:\r\n* Namespace: I'm having some circular dependency issues, so MLContext.Regression.PermutationFeatureImportance() is not fully implemented yet. I've put a comment in there.\r\n* Final name: PermutationFeatureImportance or something else?\r\n* Return type: It used to be IDataView in TLC. I suggest we return List<(string featureName, RegressionEvaluator.Result metricsDelta)> instead.\r\n* Weight Filtering: TLC had weight filtering features by using IPredictorWithFeatureWeights. We can't do this in ML.NET so I removed that option.\r\n* Report file: TLC produces a text report file. I left that option out. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1658","RelatedDescription":"Open PR \"[WIP] Enable PermutationFeatureImportance\" (#1658)"},{"Id":"381787388","IsPullRequest":true,"CreatedAt":"2018-11-16T22:46:26","Actor":"Anipik","Number":"1657","RawContent":null,"Title":"Removed AlignedArray ","State":"open","Body":"- Removed Aligned Array\r\n- Matmul and MatmulTran modified for any dimension of row and col\r\n- added some more tests for new dimension changes\r\n- corrected the base implementation of MatMulTrans\r\n- added tolerance for some tests for netcoreapp3.0\r\n\r\n\r\nFixes https://github.com/dotnet/machinelearning/issues/1018\r\nRelated to https://github.com/dotnet/machinelearning/issues/1096\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1657","RelatedDescription":"Open PR \"Removed AlignedArray \" (#1657)"},{"Id":"381786530","IsPullRequest":true,"CreatedAt":"2018-11-16T22:42:33","Actor":"montebhoover","Number":"1656","RawContent":null,"Title":"[WIP] Static extension work for time series.","State":"open","Body":"Static extension work for time series.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1656","RelatedDescription":"Open PR \"[WIP] Static extension work for time series.\" (#1656)"},{"Id":"381770927","IsPullRequest":true,"CreatedAt":"2018-11-16T21:43:28","Actor":"Ivanidzo4ka","Number":"1655","RawContent":null,"Title":"Let me introduce RowToRowTransformerBase!","State":"open","Body":"I need to have base class from which I can derive OneToOneTransformerBase and some-non OneToOne transforms. We currently have ConcatColumns, TensorFlow and Onnx, and i'm working on NGramHash and StopWordRemover.","Url":"https://github.com/dotnet/machinelearning/pull/1655","RelatedDescription":"Open PR \"Let me introduce RowToRowTransformerBase!\" (#1655)"},{"Id":"381375266","IsPullRequest":true,"CreatedAt":"2018-11-16T21:31:34","Actor":"rogancarr","Number":"1642","RawContent":null,"Title":"Fix GAM default options and values","State":"closed","Body":"This PR updates the `TreeTrainerCatalog` entries for `GAMs` to use better choices for default (non-advanced) parameters, and updates the default values for GAMs be those specified in the GAMs `Arguments` class.\r\n\r\nFixes #1630 ","Url":"https://github.com/dotnet/machinelearning/pull/1642","RelatedDescription":"Closed or merged PR \"Fix GAM default options and values\" (#1642)"},{"Id":"381346952","IsPullRequest":true,"CreatedAt":"2018-11-16T19:28:12","Actor":"rogancarr","Number":"1638","RawContent":null,"Title":"Fix the name for GAMs in the API Catalog","State":"closed","Body":"This is a short fix that renames GAM Trainers in the catalog to `GeneralizedAdditiveModels` from `GeneralizedAdditiveMethods` to be consistent with the common nomenclature [1].\r\n\r\n[1] Hastie and Tibshirani are generally considered to have introduced the methodology, for example in Hastie, Trevor and Tibshirani, Robert. (1986), [Generalized Additive Models](https://www.jstor.org/stable/2245459), Statistical Science, Vol. 1, No 3, 297-318.\r\n\r\nFixes #1623 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1638","RelatedDescription":"Closed or merged PR \"Fix the name for GAMs in the API Catalog\" (#1638)"},{"Id":"381728015","IsPullRequest":true,"CreatedAt":"2018-11-16T19:21:01","Actor":"yaeldekel","Number":"1654","RawContent":null,"Title":"Fix CodeGen command and add a unit test","State":"open","Body":"Fixes #1643 .\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1654","RelatedDescription":"Open PR \"Fix CodeGen command and add a unit test\" (#1654)"},{"Id":"381707652","IsPullRequest":false,"CreatedAt":"2018-11-16T18:16:09","Actor":"eerhardt","Number":"1653","RawContent":null,"Title":"DifferentiableFunctionAggregator doesn't appear to be used - can we delete it?","State":"open","Body":"See the comment on https://github.com/dotnet/machinelearning/pull/1650/files#r234085400.\r\n\r\nWe don't appear to be using this class at all. We should investigate removing it. And if we decide we need it, we should put it under some tests.","Url":"https://github.com/dotnet/machinelearning/issues/1653","RelatedDescription":"Open issue \"DifferentiableFunctionAggregator doesn't appear to be used - can we delete it?\" (#1653)"},{"Id":"381412208","IsPullRequest":true,"CreatedAt":"2018-11-16T18:06:35","Actor":"Zruty0","Number":"1647","RawContent":null,"Title":"Adding custom mapping to cookbook","State":"closed","Body":"Added custom mapping example to cookbook","Url":"https://github.com/dotnet/machinelearning/pull/1647","RelatedDescription":"Closed or merged PR \"Adding custom mapping to cookbook\" (#1647)"},{"Id":"381672814","IsPullRequest":false,"CreatedAt":"2018-11-16T16:33:48","Actor":"rogancarr","Number":"1652","RawContent":null,"Title":"SCDA Summary Not Sorted","State":"open","Body":"The `Summary()` for `SDCA` does not sort the output by the feature index. This makes it difficult to read. For reference, `OLS` does sort by the feature index and is easy to read.\r\n\r\nVersion: ML.NET 0.7 Release\r\n\r\nExample `Summary()` output:\r\n```\r\nLinear Regression Predictor non-zero weights\r\n\r\n(Bias)  -0.4338956\r\n15      0.8659377\r\n14      0.6250594\r\n0       0.5953168\r\n7       -0.5625336\r\n6       -0.5331995\r\n8       -0.5284117\r\n5       -0.450398\r\n9       -0.430093\r\n13      0.3840194\r\n1       0.3470894\r\n4       -0.3077467\r\n10      -0.2826627\r\n12      0.1388556\r\n3       -0.1202137\r\n2       0.103458\r\n11      -0.09171117\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1652","RelatedDescription":"Open issue \"SCDA Summary Not Sorted\" (#1652)"},{"Id":"381630876","IsPullRequest":false,"CreatedAt":"2018-11-16T14:52:22","Actor":"petterton","Number":"1651","RawContent":null,"Title":"Monotone_constraints in LightGbm","State":"open","Body":"In my ML problem I get significantly better results from `LightGbm` by using the `monotone_constraints`  [parameter](https://github.com/Microsoft/LightGBM/blob/master/docs/Parameters.rst#monotone_constraints). I can not see that this is available through the ML.NET interface. Could this be added?","Url":"https://github.com/dotnet/machinelearning/issues/1651","RelatedDescription":"Open issue \"Monotone_constraints in LightGbm\" (#1651)"},{"Id":"381435820","IsPullRequest":true,"CreatedAt":"2018-11-16T03:54:36","Actor":"eerhardt","Number":"1650","RawContent":null,"Title":"Complete VBuffer redesign","State":"open","Body":"This completes the redesign work for `VBuffer` by removing `.Values` and `.Indices` public arrays and converts all their usages to the new pattern. This is proposed change (4) in https://github.com/dotnet/machinelearning/issues/608#issuecomment-433185895.\r\n\r\n> Change the public T[] Values and public int[] Indices to public ReadOnlySpan<T> GetValues() and public ReadOnlySpan<int> GetIndices().\r\n\r\nFixes #608\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1650","RelatedDescription":"Open PR \"Complete VBuffer redesign\" (#1650)"},{"Id":"381419309","IsPullRequest":false,"CreatedAt":"2018-11-16T02:23:18","Actor":"wschin","Number":"1649","RawContent":null,"Title":"Tensorflow Transform Doesn't Accept Key-typed Labels","State":"open","Body":"In the current Tensorflow tests, I tried changing its label type from I8 to U4[0:9] but then I couldn't retrain Tensorflow anymore.","Url":"https://github.com/dotnet/machinelearning/issues/1649","RelatedDescription":"Open issue \"Tensorflow Transform Doesn't Accept Key-typed Labels\" (#1649)"},{"Id":"381417223","IsPullRequest":false,"CreatedAt":"2018-11-16T02:12:28","Actor":"eerhardt","Number":"1648","RawContent":null,"Title":"Change FastTree BinFinder to use floats and remove one data copy","State":"open","Body":"See the conversation here: https://github.com/dotnet/machinelearning/pull/1580#discussion_r233672947\r\n\r\nWith the above change, I made it so the FastTree `BinFinder.FindDistinctCounts` was no longer destructive of the `values` VBuffer during `CalculateBins`.\r\n\r\nNow that it no longer destroys the buffer, we no longer need to copy it here:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cb9effcd091c60fa291aad96cc18c14ddf841b6f/src/Microsoft.ML.FastTree/FastTree.cs#L1475-L1478\r\n\r\nHowever, I couldn't easily remove this copy because doing the copy also changed the VBuffer from `float` to `double`. This should also be changed, as recognized by this `REVIEW` comment in the code:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/cb9effcd091c60fa291aad96cc18c14ddf841b6f/src/Microsoft.ML.FastTree/FastTree.cs#L2408\r\n\r\nThis issue is to fix both of these things. First, change BinFinder to work on `float` instead of `double`. Then, we can remove this extra copy and just pass in the normal `VBuffer<float>` to `BinFinder`, without worrying if it will destroy the buffer.\r\n\r\n/cc @Zruty0 @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/1648","RelatedDescription":"Open issue \"Change FastTree BinFinder to use floats and remove one data copy\" (#1648)"},{"Id":"381400077","IsPullRequest":true,"CreatedAt":"2018-11-16T00:44:19","Actor":"Ivanidzo4ka","Number":"1646","RawContent":null,"Title":"WIP stop and custom words remover to estimator","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/1646","RelatedDescription":"Open PR \"WIP stop and custom words remover to estimator\" (#1646)"},{"Id":"381392159","IsPullRequest":false,"CreatedAt":"2018-11-16T00:05:39","Actor":"rogancarr","Number":"1645","RawContent":null,"Title":"Add Documentation for GAM Trainers","State":"open","Body":"As @sfilipi pointed out on a PR #1642, the GAM trainers don't have samples available in the dynamic API. I suggest that we add samples to show how to use these learners.\r\n\r\n@sfilipi 's comment:\r\n```\r\nMy new comment on every PR that touches the catalogs: how do you feel about writing a sample for this, and referencing it here :)\r\n\r\nsee: https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/SDCA.cs\r\n\r\nand its reference:\r\nhttps://github.com/dotnet/machinelearning/src/Microsoft.ML.StandardLearners/StandardLearnersCatalog.cs\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1645","RelatedDescription":"Open issue \"Add Documentation for GAM Trainers\" (#1645)"},{"Id":"381384611","IsPullRequest":false,"CreatedAt":"2018-11-15T23:33:56","Actor":"rogancarr","Number":"1644","RawContent":null,"Title":"WhatTheFeature Scorer is Missing in ML.NET","State":"open","Body":"The ML.NET codebase has definitions for `IWhatTheFeatureValueMapper` and implementations for linear models and tree models. I would like to see a scorer in ML.NET that can produce these feature importance scores.","Url":"https://github.com/dotnet/machinelearning/issues/1644","RelatedDescription":"Open issue \"WhatTheFeature Scorer is Missing in ML.NET\" (#1644)"},{"Id":"381378302","IsPullRequest":false,"CreatedAt":"2018-11-15T23:08:41","Actor":"yaeldekel","Number":"1643","RawContent":null,"Title":"GenerateCodeCommand bug","State":"open","Body":"This command has a replacementMap dictionary, and it uses it to find the keys in the generated code template and replace them with the values. But there is one pair in the dictionary with a key that doesn't exist in the template.","Url":"https://github.com/dotnet/machinelearning/issues/1643","RelatedDescription":"Open issue \"GenerateCodeCommand bug\" (#1643)"},{"Id":"381372509","IsPullRequest":true,"CreatedAt":"2018-11-15T22:47:42","Actor":"yaeldekel","Number":"1641","RawContent":null,"Title":"Fix StopWordRemoverTransform bugs","State":"open","Body":"Fixes #1629 .\r\nAlso fix a bug with splitting a comma separated list of stop words into tokens.","Url":"https://github.com/dotnet/machinelearning/pull/1641","RelatedDescription":"Open PR \"Fix StopWordRemoverTransform bugs\" (#1641)"},{"Id":"381360916","IsPullRequest":false,"CreatedAt":"2018-11-15T22:10:07","Actor":"daholste","Number":"1640","RawContent":null,"Title":"'Ignore' not respected in schema","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.1\r\n\r\n### Issue\r\n\r\n- **What did you do?** \r\nRan MML command line: execgraph \"C:\\Benchmarking\\automl_graph.json\"\r\n\r\nContents of automl_.graph.json:\r\n\r\n```json\r\n{\r\n  \"Inputs\": {\r\n    \"file_train\": \"D:\\\\SplitDatasets\\\\ExcitementFG2_train.csv\",\r\n    \"file_test\": \"D:\\\\SplitDatasets\\\\ExcitementFG2_valid.csv\"\r\n  },\r\n  \"Nodes\": [\r\n    {\r\n      \"Inputs\": {\r\n        \"CustomSchema\": \"sep=, col=Label:R4:0 col=Features:R4:1-13 col=Cat:TX:14 col=Cat01:TX:15 col=Ignore:TX:16,25 col=Cat02:TX:17 col=Cat03:TX:18 col=Cat04:TX:19 col=Cat05:TX:20 col=Cat06:TX:21 col=Cat07:TX:22 col=Cat08:TX:23 col=Cat09:TX:24 col=Cat10:TX:26 col=Cat11:TX:27 col=Cat12:TX:28 col=Cat13:TX:29 col=Cat14:TX:30 col=Cat15:TX:31 col=Cat16:TX:32 col=Cat17:TX:33 col=Cat18:TX:34 col=Cat19:TX:35 col=Cat20:TX:36 col=Cat21:TX:37 col=Cat22:TX:38 col=Cat23:TX:39\",\r\n        \"InputFile\": \"$file_train\"\r\n      },\r\n      \"Name\": \"Data.CustomTextLoader\",\r\n      \"Outputs\": {\r\n        \"Data\": \"$data_train\"\r\n      }\r\n    },\r\n    {\r\n      \"Inputs\": {\r\n        \"CustomSchema\": \"sep=, col=Label:R4:0 col=Features:R4:1-13 col=Cat:TX:14 col=Cat01:TX:15 col=Ignore:TX:16,25 col=Cat02:TX:17 col=Cat03:TX:18 col=Cat04:TX:19 col=Cat05:TX:20 col=Cat06:TX:21 col=Cat07:TX:22 col=Cat08:TX:23 col=Cat09:TX:24 col=Cat10:TX:26 col=Cat11:TX:27 col=Cat12:TX:28 col=Cat13:TX:29 col=Cat14:TX:30 col=Cat15:TX:31 col=Cat16:TX:32 col=Cat17:TX:33 col=Cat18:TX:34 col=Cat19:TX:35 col=Cat20:TX:36 col=Cat21:TX:37 col=Cat22:TX:38 col=Cat23:TX:39\",\r\n        \"InputFile\": \"$file_test\"\r\n      },\r\n      \"Name\": \"Data.CustomTextLoader\",\r\n      \"Outputs\": {\r\n        \"Data\": \"$data_test\"\r\n      }\r\n    },\r\n    {\r\n      \"Inputs\": {\r\n        \"BatchSize\": 3,\r\n        \"StateArguments\": {\r\n          \"Name\": \"AutoMlState\",\r\n          \"Settings\": {\r\n            \"Engine\": {\r\n              \"Name\": \"Rocket\",\r\n              \"Settings\": {}\r\n            },\r\n            \"Metric\": \"Accuracy\",\r\n            \"TerminatorArgs\": {\r\n              \"Name\": \"IterationLimited\",\r\n              \"Settings\": {\r\n                \"FinalHistoryLength\": 100\r\n              }\r\n            },\r\n            \"TrainerKind\": \"SignatureBinaryClassifierTrainer\"\r\n          }\r\n        },\r\n        \"TestingData\": \"$data_test\",\r\n        \"TrainingData\": \"$data_train\"\r\n      },\r\n      \"Name\": \"Models.PipelineSweeper\",\r\n      \"Outputs\": {\r\n        \"Results\": \"$output_data\",\r\n        \"State\": \"$xyz\"\r\n      }\r\n    }\r\n  ],\r\n  \"Outputs\": {\r\n    \"output_data\": \"C:\\\\Benchmarking\\\\01-ResultsOut.csv\"\r\n  }\r\n}\r\n```\r\n\r\n- **What happened?**\r\nEven though Ignore:TX:16,25 is specified in the schema, the learners start expensive / slow text transforms / n-gram extractions on the columns\r\n\r\n- **What did you expect?**\r\nThe columns to be ignored","Url":"https://github.com/dotnet/machinelearning/issues/1640","RelatedDescription":"Open issue \"'Ignore' not respected in schema\" (#1640)"},{"Id":"381360693","IsPullRequest":false,"CreatedAt":"2018-11-15T22:09:25","Actor":"rogancarr","Number":"1639","RawContent":null,"Title":"Precedence between main arguments and advancedSettings","State":"open","Body":"In some learnings, for example [GAM](https://github.com/dotnet/machinelearning/blob/8a45f37cf87e380a93146d08acac19f215648f9a/src/Microsoft.ML.FastTree/GamTrainer.cs#L135), the [APIs specify a set of default values](https://github.com/dotnet/machinelearning/blob/8a45f37cf87e380a93146d08acac19f215648f9a/src/Microsoft.ML.FastTree/TreeTrainersCatalog.cs#L110), with an optional advanced settings argument.\r\n\r\nOftentimes, as is the case with GAMs, this means that there are two ways to specify the value for a parameter -- as a main line item, or in the advanced settings. In the GAM code, the main line items are applied, followed by the advanced settings. There is no normalization that occurs., meaning that options in the advanced settings can override options set in the main line items.\r\n\r\nIs there supposed to be precedence here, or is there any way to make the APIs simpler so that there is only one way to specify a parameter? I'd love to hear people's thoughts on this.\r\n\r\nI don't know of any bugs caused by this, but this seems like the kind of thing that can cause unintentional behavior.","Url":"https://github.com/dotnet/machinelearning/issues/1639","RelatedDescription":"Open issue \"Precedence between main arguments and advancedSettings\" (#1639)"},{"Id":"381317493","IsPullRequest":false,"CreatedAt":"2018-11-15T20:01:28","Actor":"rogancarr","Number":"1636","RawContent":null,"Title":"Recovering ITransformers from Predictor Objects","State":"open","Body":"Oftentimes it is necessary to have an actual object of a predictor, such as a `RegressionGAMPredictor` or `LinearRegressionPredictor` to access methods particular to the predictor. However, it is a bit cumbersome to get back to the `ITransformer` interface. One must manually create a `RegressionPredictionTransformer` like so:\r\n\r\n```\r\nvar linearTransformer = new RegressionPredictionTransformer<LinearRegressionPredictor>(mlContext, linearPredictor, trainSet.Schema, \"Features\");\r\n```\r\n\r\nI'd like to see all the predictor objects support a method like `AsTransformer()` to return an `ITransformer`. It seems like the predictor objects have enough information to automate the process, and it would make the APIs much easier to use.","Url":"https://github.com/dotnet/machinelearning/issues/1636","RelatedDescription":"Open issue \"Recovering ITransformers from Predictor Objects\" (#1636)"},{"Id":"381317275","IsPullRequest":false,"CreatedAt":"2018-11-15T20:00:50","Actor":"petterton","Number":"1635","RawContent":null,"Title":"TrainTestSplit random seed","State":"open","Body":"I am repeatedly calling `TrainTestSplit` for a data set (for cross validation) and see that the resulting split is the same every call. In sklearn, the `train_test_split` function has the possibility of taking a seed for a random number generator as an input. Could this be added also in ML.NET?","Url":"https://github.com/dotnet/machinelearning/issues/1635","RelatedDescription":"Open issue \"TrainTestSplit random seed\" (#1635)"},{"Id":"381315599","IsPullRequest":false,"CreatedAt":"2018-11-15T19:56:01","Actor":"rogancarr","Number":"1634","RawContent":null,"Title":"Normalization option, FixZero, is not available in high-level APIs","State":"open","Body":"When I perform minmax normalization on dense datasets, I like to turn off \"fixzero\". This option is not available in the high-level APIs, e.g. `mlContext.Transforms.Normalize()`.\r\n\r\nTo use this, you need to go back and create `AffineColumn` and `MinMaxArguments` objects and use the old-style `Create` API:\r\n```\r\nvar column = new NormalizeTransform.AffineColumn() { Name = \"Index0\", FixZero = false };\r\nvar minMaxArgs = new NormalizeTransform.MinMaxArguments() { FixZero = false, Column = new NormalizeTransform.AffineColumn[1] { column } };\r\nIDataView transform = NormalizeTransform.Create(mlContext, minMaxArgs, loader);\r\n```\r\n\r\nI think these old-style APIs are very confusing to use, especially since there are two ways to specify `FixZero`, and it's unclear which one is used and if there is precedence between them.","Url":"https://github.com/dotnet/machinelearning/issues/1634","RelatedDescription":"Open issue \"Normalization option, FixZero, is not available in high-level APIs\" (#1634)"},{"Id":"381309646","IsPullRequest":false,"CreatedAt":"2018-11-15T19:38:30","Actor":"yaeldekel","Number":"1633","RawContent":null,"Title":"Marshal.Invoke cannot be called with a method that has a generic return type","State":"open","Body":"In DataViewConstructionUtils.cs there is a method GetGetterDelegate() that calls Marshal.Invoke with GetGetter<int> that has a generic return type (ValueGetter<TDst>).\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1633","RelatedDescription":"Open issue \"Marshal.Invoke cannot be called with a method that has a generic return type\" (#1633)"},{"Id":"381306251","IsPullRequest":false,"CreatedAt":"2018-11-15T19:28:19","Actor":"yaeldekel","Number":"1632","RawContent":null,"Title":"NGramHashTransform doesn't provide slot names","State":"open","Body":"There is an argument in the Arguments class to provide slot names, however the resulting schema doesn't contain this metadata.","Url":"https://github.com/dotnet/machinelearning/issues/1632","RelatedDescription":"Open issue \"NGramHashTransform doesn't provide slot names\" (#1632)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-11-17T05:30:33.7619036Z","RunDurationInMilliseconds":1452}