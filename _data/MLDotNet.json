{"Data":{"GitHub":{"Issues":[{"Id":"427954237","IsPullRequest":false,"CreatedAt":"2019-04-02T02:38:01","Actor":"codemzs","Number":"3161","RawContent":null,"Title":"Remove generic normalizer estimator catalog methods.","State":"closed","Body":"We now have a method for each of the normalizer type so we should get rid of methods that accept enum for normalizer type.","Url":"https://github.com/dotnet/machinelearning/issues/3161","RelatedDescription":"Closed issue \"Remove generic normalizer estimator catalog methods.\" (#3161)"},{"Id":"427981700","IsPullRequest":true,"CreatedAt":"2019-04-02T01:30:46","Actor":"abgoswam","Number":"3165","RawContent":null,"Title":"Samples and unit test for image-related  transform estimators","State":"open","Body":"Towards #1209\r\n\r\nThe PR makes the following changes\r\n\r\n- Adds unit test and  sample  for the `ConvertToImage` transform estimator.   \r\n\r\n- Fixes the info presented to the user for the 4 existing image samples   {ConvertToGrayscale, LoadImages, ExtractPixels, ResizeImages}\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3165","RelatedDescription":"Open PR \"Samples and unit test for image-related  transform estimators\" (#3165)"},{"Id":"427971389","IsPullRequest":false,"CreatedAt":"2019-04-02T00:40:54","Actor":"Anipik","Number":"3164","RawContent":null,"Title":"Use new Microsoft.DotNet.RemoteExecutor package","State":"open","Body":"Dotnet team just added a new package in the arcade repo called Microsoft.DotNet.RemoteExecutor package. https://github.com/dotnet/arcade/pull/2176\r\n\r\nWe use a lot of code from this project to run our tests. This code was added in https://github.com/dotnet/machinelearning/pull/2200\r\n\r\nAlthough slight modifications were made to the code to handle Microsoft.ML based scenarios.\r\nBut i think we should be able to use this package to run other tests.\r\n\r\ncc @ViktorHofer ","Url":"https://github.com/dotnet/machinelearning/issues/3164","RelatedDescription":"Open issue \"Use new Microsoft.DotNet.RemoteExecutor package\" (#3164)"},{"Id":"427970071","IsPullRequest":true,"CreatedAt":"2019-04-02T00:34:25","Actor":"singlis","Number":"3163","RawContent":null,"Title":"Adding initial F# example for docs/samples","State":"open","Body":"- Adds initial FSharp example for the docs samples. This is the ApplyCustomWordEmbedding. It is an in-memory example that follows the C# example. \r\n- Adds the Microsoft.ML.Samples.FSharp project to hold the FSharp examples\r\n- Adds the FSharp examples directory structure\r\n- Updates the ApplyWordBedding with an code-fsharp tag so that it will link to the correct sample\r\n\r\nReferences #3100\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3163","RelatedDescription":"Open PR \"Adding initial F# example for docs/samples\" (#3163)"},{"Id":"427121986","IsPullRequest":true,"CreatedAt":"2019-04-01T23:56:11","Actor":"zeahmed","Number":"3140","RawContent":null,"Title":"Updating .tt file due to renaming of LbfgsPoissonRegression.","State":"closed","Body":"This PR fixes the issue related to renaming done in #3034. Currently, we are finding a way to forcing people to update the .tt file instead of .cs file generated from .tt.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3140","RelatedDescription":"Closed or merged PR \"Updating .tt file due to renaming of LbfgsPoissonRegression.\" (#3140)"},{"Id":"427957016","IsPullRequest":false,"CreatedAt":"2019-04-01T23:32:26","Actor":"abgoswam","Number":"3162","RawContent":null,"Title":"Schema comprehension fails for type System.Drawing.Bitmap","State":"open","Body":"Several of the image transforms in ML.NET produce intermediate columns of type System.Drawing.Bitmap\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e5cbca78683e3c1036966e07b7fd7d1b180c1562/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/ImageAnalytics/ConvertToGrayScale.cs#L39-L42\r\n\r\nIf we try to use  schema comprehension to  map some intermediate data (e.g. `transformedData`) to an IEnumerable,  we  hit an exception  when  dealing with  a column of type ` System.Drawing.Bitmap`\r\n\r\n**Error**: Unhandled Exception: System.ArgumentOutOfRangeException: Could not determine an IDataView type for member ImageObject\r\n\r\n@Ivanidzo4ka ","Url":"https://github.com/dotnet/machinelearning/issues/3162","RelatedDescription":"Open issue \"Schema comprehension fails for type System.Drawing.Bitmap\" (#3162)"},{"Id":"427905494","IsPullRequest":true,"CreatedAt":"2019-04-01T22:33:56","Actor":"shauheen","Number":"3158","RawContent":null,"Title":"Update release version to 1.0 for release branch","State":"closed","Body":"This PR updates the version on the release v1.0 branch","Url":"https://github.com/dotnet/machinelearning/pull/3158","RelatedDescription":"Closed or merged PR \"Update release version to 1.0 for release branch\" (#3158)"},{"Id":"427931647","IsPullRequest":false,"CreatedAt":"2019-04-01T22:02:04","Actor":"shmoradims","Number":"3160","RawContent":null,"Title":"API reference - Finalize the template for trainer samples","State":"open","Body":"Our current template for trainer API reference samples is as follows:\r\n\r\n1) Create in-memory random training data (as discussed in #2726 we're avoiding complex datasets and text-loader).\r\n2) Create a pipeline with just the trainer (i.e. focusing only on the API that this sample is about without getting into complex featurization pipeline).\r\n3) Fit the trainer.\r\n4) Generate 5 predictions and output results.\r\n5) Evaluate with in-memory test data and output metrics.\r\n\r\nBelow are some examples:\r\n* Binary classification: [FastTree](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/FastTree.cs), [FastTreeWithOptions](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/FastTreeWithOptions.cs)\r\n* Regression: [PoissonRegression](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/PoissonRegression.cs), [PoissonRegressionWithOptions](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/PoissonRegressionWithOptions.cs).\r\n\r\nOther samples will be added using this template. If you want to make any changes please mention them here so that we can finalize the sample.\r\n\r\n/cc @shauheen @glebuk\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3160","RelatedDescription":"Open issue \"API reference - Finalize the template for trainer samples\" (#3160)"},{"Id":"427925136","IsPullRequest":true,"CreatedAt":"2019-04-01T21:42:14","Actor":"ganik","Number":"3159","RawContent":null,"Title":"Added OneVersusAll and PairwiseCoupling samples.","State":"open","Body":"Part of #2522.\r\nAdds a sample for OneVersusAll classification.\r\nAdds a sample for PairwiseCoupling classification.","Url":"https://github.com/dotnet/machinelearning/pull/3159","RelatedDescription":"Open PR \"Added OneVersusAll and PairwiseCoupling samples.\" (#3159)"},{"Id":"427897987","IsPullRequest":true,"CreatedAt":"2019-04-01T20:29:45","Actor":"shauheen","Number":"3157","RawContent":null,"Title":"Temporarily disable myget","State":"open","Body":"fixes #2244 yet AGAIN!","Url":"https://github.com/dotnet/machinelearning/pull/3157","RelatedDescription":"Open PR \"Temporarily disable myget\" (#3157)"},{"Id":"427863444","IsPullRequest":false,"CreatedAt":"2019-04-01T20:15:57","Actor":"TomerZeitune","Number":"3155","RawContent":null,"Title":"Beginner: 'Schema mismatch for label column '': expected R4, got Key<U4>' exception thrown.","State":"closed","Body":"- **Windows 10**:\r\n\r\n\r\n\r\nTrying to create my first regression in ML.NET\r\nI get an exception thrown:\r\nSchema mismatch for label column '': expected R4, got Key<U4>\r\nI was expecting to get \r\n\"Predicted 6 + 3 is: 9\"\r\nprinted to the console.\r\n\r\nI wrote a python script to create training data with 3 columns :\r\nfirst, second, result.\r\nfirst and second are random values.\r\nresult is first+second.\r\n\r\nI expect the machine to get first and second and predict the result. \r\n\r\nnumbers.cvs:\r\n```\r\n35,74,109\r\n69,36,105\r\n75,3,78\r\n19,44,63\r\n65,93,158\r\n40,15,55\r\n2,67,69\r\n27,63,90 ... X1000 times\r\n```\r\nCode that matters:\r\n```\r\n\r\n    public class NumberData\r\n    {\r\n        [LoadColumn(0)]\r\n        public float first;\r\n        [LoadColumn(1)]\r\n        public float second;\r\n        [LoadColumn(2)]\r\n        public float result;\r\n    }\r\n    public class NumberPrediction\r\n    {\r\n        [ColumnName(\"PredictedNumber\")]\r\n        public float PredictedNumber;\r\n    }\r\n.\r\n.\r\n.\r\nusing Microsoft.Data.DataView;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\n.\r\n.\r\n.\r\nMLContext mlContext = new MLContext();          \r\nIDataView trainingDataView = \r\nmlContext.Data.LoadFromTextFile<NumberData>(\r\n\"numbers.csv\",',',false);\r\nConsole.WriteLine(\"Loaded Data\");\r\nvar trainingPipeline =\r\nmlContext.Transforms.Conversion.MapValueToKey(nameof(NumberData.result))\r\n.Append(mlContext.Transforms.Concatenate(\r\nDefaultColumnNames.Features,\r\nnameof(NumberData.first),\r\nnameof(NumberData.second)))\r\n.Append(mlContext.Regression.Trainers.StochasticDualCoordinateAscent(\r\nlabelColumnName: \"result\",\r\nfeatureColumnName: DefaultColumnNames.Features))\r\n.Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedNumber\"));\r\nConsole.WriteLine(\"Created Trainer\");\r\nvar model = trainingPipeline.Fit(trainingDataView);//**RELEVANT** exception thrown here\r\nConsole.WriteLine(\"Trained The Model\");\r\nvar prediction =\r\nmodel.CreatePredictionEngine<NumberData, NumberPrediction>(mlContext).Predict(\r\nnew NumberData()\r\n{\r\nfirst = 6f,\r\nsecond = 3f,\r\nresult = 0// To be predicted\r\n});\r\nConsole.WriteLine($\"Predicted 6 + 3 is: {prediction.PredictedNumber}\");\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3155","RelatedDescription":"Closed issue \"Beginner: 'Schema mismatch for label column '': expected R4, got Key<U4>' exception thrown.\" (#3155)"},{"Id":"427092619","IsPullRequest":true,"CreatedAt":"2019-04-01T19:52:49","Actor":"TomFinley","Number":"3136","RawContent":null,"Title":"Update VBuffer documentation","State":"closed","Body":"Towards #3095, specifically about `VBuffer`s. Changes documentation to reflect the changes made by @eerhardt in his refactoring of #1580.","Url":"https://github.com/dotnet/machinelearning/pull/3136","RelatedDescription":"Closed or merged PR \"Update VBuffer documentation\" (#3136)"},{"Id":"427881915","IsPullRequest":true,"CreatedAt":"2019-04-01T19:50:40","Actor":"zeahmed","Number":"3156","RawContent":null,"Title":" Created samples for TokenizeIntoWords and RemoveStopWords APIs.","State":"open","Body":"Related to #1209.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3156","RelatedDescription":"Open PR \" Created samples for TokenizeIntoWords and RemoveStopWords APIs.\" (#3156)"},{"Id":"427150200","IsPullRequest":true,"CreatedAt":"2019-04-01T19:46:59","Actor":"zeahmed","Number":"3142","RawContent":null,"Title":"Created sample for 'ApplyWordEmbedding' API.","State":"closed","Body":"Related to #1209.","Url":"https://github.com/dotnet/machinelearning/pull/3142","RelatedDescription":"Closed or merged PR \"Created sample for 'ApplyWordEmbedding' API.\" (#3142)"},{"Id":"427810821","IsPullRequest":false,"CreatedAt":"2019-04-01T16:52:23","Actor":"mareklinka","Number":"3154","RawContent":null,"Title":"ImageLoadingTransformer hides exceptions in Mapper.MakeGetter","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 1809\r\n- **.NET Version (eg., dotnet --info)**: 2.2.202\r\n\r\n### Issue\r\n\r\nI recently tried to use ML.NET in a Xamarin-based UWP app. I targeted the earliest version of UWP that support .NET Standard 2.0 and everything installed correctly. My intention was to make use a separately-trained TensorFlow model to predict some data from an image.\r\n\r\nWhile my code worked without issues in a .NET Core 2.2 console app, in the UWP it was failing. I was constantly getting an exception when attempting to load the target image - `Image [whatever] was not found.` No additional details, no inner exception.\r\n\r\nOnly after a fair amount of headscratching and trying various things I managed to find the culprit (which was obvious in hindsight): UWP does not support bitmaps. After I tried to replicate a little bit of the `ImageLoader` code, I got an unsupported platform exception.\r\n\r\nThis is all fair but then looking into the code some more, I found this:\r\nhttps://github.com/dotnet/machinelearning/blob/b5a8d9962a10bcf6b7885ba9a4efa56e2b65f3f4/src/Microsoft.ML.ImageAnalytics/ImageLoader.cs#L215\r\n\r\nThe code is catching all exceptions and throwing a custom exception in their place, *without* providing the base exception. I think this could be improved as part of making the API surface friendlier to use - spending an hour on this, I started to think I was doing something insanely wrong. The inner exception would have told me the root cause in 10 seconds flat.\r\n\r\nSo there are basically two issues:\r\n1. Hiding the base exceptions\r\n2. Image analytics won't work in UWP at all because of bitmaps\r\n\r\nI think a fix for 1. could be relatively simple. 2. will be much more difficult and might not be desirable but I wanted to throw it out there. Maybe using a platform-agnostic implementation of image handling could be useful.\r\n\r\nOpinions? Thoughts?\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3154","RelatedDescription":"Open issue \"ImageLoadingTransformer hides exceptions in Mapper.MakeGetter\" (#3154)"},{"Id":"427564778","IsPullRequest":false,"CreatedAt":"2019-04-01T08:02:57","Actor":"vinodshanbhag","Number":"3153","RawContent":null,"Title":"AutoML feature request: Datetime column featurization","State":"open","Body":"Given a date time column, create features like 'day of the week', 'month of the year' etc.","Url":"https://github.com/dotnet/machinelearning/issues/3153","RelatedDescription":"Open issue \"AutoML feature request: Datetime column featurization\" (#3153)"},{"Id":"427545484","IsPullRequest":false,"CreatedAt":"2019-04-01T07:10:09","Actor":"vinodshanbhag","Number":"3152","RawContent":null,"Title":"AutoML feature request: Weight of evidence","State":"open","Body":"Needed for automl feature engineering\r\nhttps://www.kaggle.com/pavansanagapati/weight-of-evidence-woe-information-value-iv","Url":"https://github.com/dotnet/machinelearning/issues/3152","RelatedDescription":"Open issue \"AutoML feature request: Weight of evidence\" (#3152)"},{"Id":"427543868","IsPullRequest":false,"CreatedAt":"2019-04-01T07:05:20","Actor":"byQ96","Number":"3151","RawContent":null,"Title":"Time Series forecasting","State":"open","Body":"### System information\r\n\r\n- **OS version/distro Windows 10:\r\n- **.NET Version (eg., dotnet --info) Core 2.0 - 2.2: \r\n\r\n### Issue\r\n\r\nI am looking for time series prediction possibility, but can't find one example. There are a lot of posts about forecasting - all from 2018. So my question is: Is time series forecasting included into ml.net 0.11 or do you plan to add it in the future versions?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3151","RelatedDescription":"Open issue \"Time Series forecasting\" (#3151)"},{"Id":"427543336","IsPullRequest":false,"CreatedAt":"2019-04-01T07:03:43","Actor":"vinodshanbhag","Number":"3150","RawContent":null,"Title":"AutoML feature request: Target encoding","State":"open","Body":"Needed for automl feature engineering\r\n(In TCL land, I imagine this is knows as Dracula??)","Url":"https://github.com/dotnet/machinelearning/issues/3150","RelatedDescription":"Open issue \"AutoML feature request: Target encoding\" (#3150)"},{"Id":"427542855","IsPullRequest":false,"CreatedAt":"2019-04-01T07:02:04","Actor":"vinodshanbhag","Number":"3149","RawContent":null,"Title":"AutoML feature request: Tree featurizer","State":"open","Body":"Needed for \r\n- feature engineering\r\n- SMAC sweeper implementation ","Url":"https://github.com/dotnet/machinelearning/issues/3149","RelatedDescription":"Open issue \"AutoML feature request: Tree featurizer\" (#3149)"},{"Id":"427541127","IsPullRequest":false,"CreatedAt":"2019-04-01T06:56:41","Actor":"vinodshanbhag","Number":"3148","RawContent":null,"Title":"AutoML feature request:  Ensembling APIs","State":"open","Body":"https://en.wikipedia.org/wiki/Ensemble_learning\r\nEnsembling of models produces better accuracy more often than not. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/3148","RelatedDescription":"Open issue \"AutoML feature request:  Ensembling APIs\" (#3148)"},{"Id":"427399725","IsPullRequest":false,"CreatedAt":"2019-04-01T06:52:23","Actor":"hobbsa","Number":"3144","RawContent":null,"Title":"K-means clustering getting centroid coordinates","State":"closed","Body":"### System information\r\n\r\n- Windows 10\r\n- .NET 4.6.1, ML.NET .11\r\n\r\n### Issue\r\n\r\nI am using the KMeans clustering trainer but is there anyway to get the actual centroid locations as X,Y (trying to plot the results on a graph for visual representation).  I see the CentroidL2S private property on the KMeansParms class but those seem to be vector based.  Has anyone plotted the results of a cluster or have a good way to generate X,Y coords for plotting purposes?\r\n\r\nThanks\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3144","RelatedDescription":"Closed issue \"K-means clustering getting centroid coordinates\" (#3144)"},{"Id":"427500760","IsPullRequest":false,"CreatedAt":"2019-04-01T03:58:34","Actor":"sethreidnz","Number":"3147","RawContent":null,"Title":"Linear Regression using ML.NET","State":"open","Body":"I am trying to do simple linear regression with ML.NET and am struggling to figure out how you would do this. Is it possible and if so what is your recommendation? It's not clear from the documentation if a simple linear regression is possible with ML.NET.","Url":"https://github.com/dotnet/machinelearning/issues/3147","RelatedDescription":"Open issue \"Linear Regression using ML.NET\" (#3147)"},{"Id":"427410278","IsPullRequest":false,"CreatedAt":"2019-03-31T21:01:34","Actor":"jwood803","Number":"3146","RawContent":null,"Title":"Error when using ConvertToOnnx","State":"closed","Body":"When trying to use the `context.Model.ConvertToOnnx` method it shows an error saying `Reference to type 'ITransformer' claims to be defined in 'Microsoft.ML.Core', but it could not be found`.\r\n\r\nBelow is the code when trying to access it.\r\n\r\n```csharp\r\nvar context = new MLContext();\r\n\r\nvar textLoader = context.Data.CreateTextLoader(new[]\r\n{\r\n    new TextLoader.Column(\"YearsExperience\", DataKind.Single, 0),\r\n    new TextLoader.Column(\"Label\", DataKind.Single, 1),\r\n},\r\nhasHeader: true,\r\nseparatorChar: ',');\r\n\r\nvar data = textLoader.Load(\"./SalaryData.csv\");\r\n\r\nvar trainTestData = context.Regression.TrainTestSplit(data);\r\n\r\nvar pipeline = context.Transforms.Concatenate(\"Features\", \"YearsExperience\")\r\n    .Append(context.Regression.Trainers.FastTree());\r\n\r\nITransformer model = pipeline.Fit(trainTestData.TrainSet);\r\n\r\ncontext.Model.ConvertToOnnx(model, data);\r\n```\r\n\r\nUsing version v.11. I have the `Microsoft.ML.Onnx` package installed, but I'm not sure if it's needed.","Url":"https://github.com/dotnet/machinelearning/issues/3146","RelatedDescription":"Closed issue \"Error when using ConvertToOnnx\" (#3146)"},{"Id":"427403727","IsPullRequest":false,"CreatedAt":"2019-03-31T14:38:30","Actor":"1amirjalai","Number":"3145","RawContent":null,"Title":"LinearSupportVectorMachines trained Model not working","State":"open","Body":"### System information\r\n\r\n- **OS windows 10**:\r\n- **.NET Version (Microsoft.NETCore.App 2.2.3)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\ntrained a model using LinearSupportVectorMachines\r\n- **What happened?**\r\nThe model was created then i load the model and tried to predict on the model but it shows exception\r\n```\r\nUnhandled Exception: System.ArgumentOutOfRangeException: Could not find input column 'IdPreservationColumn'\r\nParameter name: inputSchema\r\n   at Microsoft.ML.Data.ColumnConcatenatingTransformer.Mapper.MakeColumn(DataViewSchema inputSchema, Int32 iinfo)\r\n   at Microsoft.ML.Data.ColumnConcatenatingTransformer.Mapper..ctor(ColumnConcatenatingTransformer parent, DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.ColumnConcatenatingTransformer.MakeRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.RowToRowTransformerBase.Microsoft.ML.ITransformer.GetRowToRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.TransformerChain`1.Microsoft.ML.ITransformer.GetRowToRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.TransformerChain`1.Microsoft.ML.ITransformer.GetRowToRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.PredictionEngineBase`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n```\r\n- **What did you expect?**\r\nI expected to predict based on loaded trained model\r\n### Source code / logs\r\n\r\nIdPreservationColumn i don't know what this is and i can't find any document about it\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3145","RelatedDescription":"Open issue \"LinearSupportVectorMachines trained Model not working\" (#3145)"},{"Id":"427175863","IsPullRequest":false,"CreatedAt":"2019-03-29T20:59:06","Actor":"jignparm","Number":"3143","RawContent":null,"Title":"Need Example for Onnx Export","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: All\r\n- **.NET Version (eg., dotnet --info)**: All\r\n\r\n### Issue\r\n\r\nThe tutorials page below contains invalid links for Onnx export functionality in ML.Net. Users need to have a working example. Please update the link with a working example of how to export to Onnx via ML.Net\r\n\r\nhttps://github.com/onnx/tutorials\r\n\r\n### Source code / logs\r\n\r\nN/A\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3143","RelatedDescription":"Open issue \"Need Example for Onnx Export\" (#3143)"},{"Id":"427142386","IsPullRequest":false,"CreatedAt":"2019-03-29T19:19:47","Actor":"zeahmed","Number":"3141","RawContent":null,"Title":"Problem with GloVe100D and GloVe200D files...","State":"open","Body":"GloVe200D word embedding file contains 100D embedding vector and GloVe100D contains 200D embedding vector for each token. The file names look fine. It seems like contents of the file or filename got interchanged.\r\nhttps://github.com/dotnet/machinelearning/blob/e95f31d2417a58103f70fe06b212d31ac5963dff/src/Microsoft.ML.Transforms/Text/WordEmbeddingsExtractor.cs#L603\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e95f31d2417a58103f70fe06b212d31ac5963dff/src/Microsoft.ML.Transforms/Text/WordEmbeddingsExtractor.cs#L604\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3141","RelatedDescription":"Open issue \"Problem with GloVe100D and GloVe200D files...\" (#3141)"},{"Id":"427103253","IsPullRequest":false,"CreatedAt":"2019-03-29T17:42:54","Actor":"ericjohannsen","Number":"3139","RawContent":null,"Title":"IPredictor inaccessible in 0.11","State":"open","Body":"### System information\r\n\r\n- Windows 10\r\n- .NET Core 2.2.104\r\n\r\n### Issue\r\n\r\n- Updated ML.Net 0.10 to 0.11 using NuGet\r\n- CS0122\t'IPredictor' is inaccessible due to its protection level\r\n- The rationale behind the change to be documented and new strategies to be highlighted.\r\n\r\n### Source code / logs\r\n\r\nPlease see https://stackoverflow.com/q/55344383/141172\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3139","RelatedDescription":"Open issue \"IPredictor inaccessible in 0.11\" (#3139)"},{"Id":"427102104","IsPullRequest":false,"CreatedAt":"2019-03-29T17:40:02","Actor":"ericjohannsen","Number":"3138","RawContent":null,"Title":"CreateEnumerable gone in 0.11","State":"open","Body":"### System information\r\n\r\n- Windows 10\r\n- .NET Core 2.2.104\r\n\r\n### Issue\r\n\r\n- Updated ML.Net 0.10 to 0.11 using NuGet\r\n- MLContext.CreateEnumerable no longer available\r\n- Document the new way to create an `IEnumerable<T>` from an `IDataView`\r\n\r\n### Source code / logs\r\n\r\n`var nativePredictions = mlContext.CreateEnumerable<TP>(dataWithPredictions, false)`\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3138","RelatedDescription":"Open issue \"CreateEnumerable gone in 0.11\" (#3138)"},{"Id":"427101121","IsPullRequest":false,"CreatedAt":"2019-03-29T17:37:19","Actor":"ericjohannsen","Number":"3137","RawContent":null,"Title":"ColumnAttribute gone in 0.11","State":"open","Body":"### System information\r\n\r\n- Windows 10\r\n- .NET Core 2.2.104\r\n\r\n### Issue\r\n\r\n- Updated ML.Net 0.10 to 0.11 using NuGet\r\n- ColumnAttribute no longer defined\r\n- The change be documented in breaking change notes, specifically whether you now use the similar attribute from `System.ComponentModel.DataAnnotations.Schema` or if you defined a differently-named attribute.\r\n\r\n### Source code / logs\r\n\r\n        [Column(ordinal: \"0\", name: \"Label\")]\r\n        public float Sentiment;\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3137","RelatedDescription":"Open issue \"ColumnAttribute gone in 0.11\" (#3137)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-04-02T05:30:33.1252774Z","RunDurationInMilliseconds":541}