{"Data":{"Blog":{"FeedItems":[{"Title":"Moving to real time test discovery in Test Explorer","PublishedOn":"2017-10-30T22:46:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Real time test discovery is a new Visual Studio feature that uses a Roslyn analyzer to discover tests and populate the test explorer in real time without requiring you to build your project. This feature has been introduced in Visual Studio 2017 15.5 Preview 2 behind a feature flag. You can try it out by... <a aria-label=\"read more about Moving to real time test discovery in Test Explorer\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/","RawContent":null},{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the difference between EF6 and EF Core, please refer to our documentation. How to obtain the new package You can install EF 6.2 either using the &#8220;Manage NuGet Packages&#8221; option... <a aria-label=\"read more about Entity Framework 6.2 Runtime Released\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018. We&#8217;re excited to have a new tool to use to help make .NET Core faster on Intel chips. Intel has been a strong partner in the development... <a aria-label=\"read more about .NET Core Performance Profiling with Intel® VTune™ Amplifier 2018\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where to start answering these important questions. But there&#8217;s a really... <a aria-label=\"read more about Experiment with Azure for FREE!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008 R2+.  We’ve added support for targeting the .NET Framework 4.7.1 in Visual Studio 2017 15.5. The .NET Framework 4.7.1 includes improvements in several areas: Accessibility improvements... <a aria-label=\"read more about Announcing the .NET Framework 4.7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. Quality and Reliability This release contains the following quality and reliability improvements. CLR Code optimization bug for x64 C# code targeting... <a aria-label=\"read more about .NET Framework October 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null},{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":108,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6766996801","Type":"IssuesEvent","CreatedAt":"2017-10-26T00:24:01","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/36","RelatedDescription":"Opened issue \"microsoft/dotnet-framework images now support Windows Server 1709\" (#36) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released earlier this month. [microsoft/windowsservercore](https://hub.docker.com/r/microsoft/windowsservercore/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/).\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnet](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #35](https://github.com/Microsoft/dotnet-framework-docker/issues/35)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #31](https://github.com/Microsoft/dotnet-framework-docker/pull/31)\r\n* [microsoft/dotnet-framework-docker #34](https://github.com/Microsoft/dotnet-framework-docker/pull/34)\r\n* [microsoft/dotnet-framework-docker #32](https://github.com/Microsoft/dotnet-framework-docker/issues/32)\r\n\r\n.NET Framework Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\n.NET Framework 3.5 and 4.7.1 images are available for Windows Server 1709. Windows Server 1709 includes the .NET Framework 4.7.1. .NET Framework 4.6.2 and .NET Framework 4.7 images are only available with Windows Server 2016 images. You can see an example of 1709-based images in the following example.\r\n\r\n![.NET Framework Windows 1709 images](https://user-images.githubusercontent.com/2608468/32028249-6684a82c-b9a2-11e7-8afa-1b1abf89eb3b.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Framework images with the tag substring `windowsservercore-1709` and Windows Server 2016 images with the tag substring `windowsservercore-10.0.14393`. You will likely notice that the 1709-based images are easier to identify than the Windows Server 2016 ones. \r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Framework images will adopt [manifest lists](https://github.com/Microsoft/dotnet-framework-docker/issues/32) so that a single logical tag, like `4.7.1`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet-framework:4.7.1` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines. [.NET Core](https://hub.docker.com/r/microsoft/dotnet) Docker images use this same feature to support Linux and Windows hosts and AMD64 and ARM32 hosts with the same logical tag, like `2.0-runtime`.\r\n\r\nThe following tags will be updated to use manifest lists:\r\n\r\n- `latest`\r\n- `4.7.1`\r\n- `3.5`\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be."},{"Id":"6761784781","Type":"IssuesEvent","CreatedAt":"2017-10-25T04:03:38","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/35","RelatedDescription":"Opened issue \"microsoft/dotnet-framework latest tag updated to 4.7.1\" (#35) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework latest tag updated to 4.7.1\r\n\r\nThe [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/) was released earlier this month. The [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework) `latest` [tag](https://hub.docker.com/r/microsoft/dotnet-framework/tags/) was also updated.\r\n\r\nThe .NET Framework 4.7.1 is represented by the `microsoft/dotnet-framework:4.7.1` tag.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #33](https://github.com/Microsoft/dotnet-framework-docker/issues/33)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #28](https://github.com/Microsoft/dotnet-framework-docker/pull/28)\r\n* [microsoft/dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework 4.7.1 image is now available as a Docker image. The `latest` tag points to the same image.\r\n\r\nThe following repos were updated:\r\n\r\n* [microsoft/asp](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\nThe [microsoft/dotnet-framework-samples](https://hub.docker.com/r/microsoft/dotnet-framework-samples) repo has not yet been updated.\r\n\r\nWe recommend that you use version-specific tags for production apps. For experimentation or while an application is in development, using the `latest` tag is a fine practice.\r\n\r\nWe recently found a [significant performance issue with .NET Framework Docker images](https://github.com/dotnet/announcements/issues/33). The .NET Framework 4.7.1 image includes the fix for that problem.\r\n"},{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6787589368","Type":"PullRequestEvent","CreatedAt":"2017-10-31T05:16:33","Actor":"hseok-oh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14761","RelatedDescription":"Opened pull request \"[RyuJIT/ARM32] Fix double type PutArgStk check bug on LSRA init\" (#14761) at dotnet/coreclr","RelatedBody":"Fix to handle hardfp/softfp all\r\n\r\nFix #13746 \r\n\r\ncc/ @dotnet/arm32-contrib "},{"Id":"6787108392","Type":"PullRequestEvent","CreatedAt":"2017-10-31T01:54:34","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14760","RelatedDescription":"Opened pull request \"Update CoreFx to preview1-25831-01 (master)\" (#14760) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6787096796","Type":"PullRequestEvent","CreatedAt":"2017-10-31T01:49:56","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14759","RelatedDescription":"Opened pull request \"Don't inline GetTaskForResult when await'ing ValueTask\" (#14759) at dotnet/coreclr","RelatedBody":"When await'ing a ValueTask, we should only ever end up calling AwaitUnsafeOnCompleted when the ValueTask wraps a non-null _task; if its _task were null, IsCompleted would have returned true due to treating the _result as the successful result.  However, the value task's AsTask() is currently used via an inlined interface invocation in AwaitUnsafeOnCompleted to get the _task from the ValueTask, and AsTask ends up inlining the _task==null branch that inlines AsyncTaskMethodBuilder'1.GetTaskForResult, which ends up bloating the asm unnecessarily.  We can simply change the interface implementation used by AwaitUnsafeOnCompleted to not inline GetTaskForResult.  In a simple example, this cuts the asm for AwaitUnsafeOnCompleted by ~50%.\r\n\r\ne.g. for this code:\r\n```C#\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static async Task Main() => await VTMethodAsync();\r\n    static async ValueTask<int> VTMethodAsync() { await Task.Delay(1000); return 42; }\r\n}\r\n```\r\nBefore asm for Main's AwaitUnsafeOnCompleted:\r\n```\r\nG_M29712_IG01:\r\n       57                   push     rdi\r\n       56                   push     rsi\r\n       53                   push     rbx\r\n       4883EC40             sub      rsp, 64\r\n       C5F877               vzeroupper\r\n       33C0                 xor      rax, rax\r\n       4889442430           mov      qword ptr [rsp+30H], rax\r\n       488BF2               mov      rsi, rdx\r\n\r\nG_M29712_IG02:\r\n       498BD0               mov      rdx, r8\r\n       E83C5BFFFF           call     System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[VoidTaskResult][System.Threading.Tasks.VoidTaskResult]:GetStateMachineBox(byref):ref:this\r\n       488BF8               mov      rdi, rax\r\n       480FBE0E             movsx    rcx, byte  ptr [rsi]\r\n\r\nG_M29712_IG03:\r\n       C4E17A6F06           vmovdqu  xmm0, qword ptr [rsi]\r\n       C4E17A7F442430       vmovdqu  qword ptr [rsp+30H], xmm0\r\n\r\nG_M29712_IG04:\r\n       488B4C2430           mov      rcx, gword ptr [rsp+30H]\r\n       4885C9               test     rcx, rcx\r\n       7562                 jne      SHORT G_M29712_IG07\r\n       8B742438             mov      esi, dword ptr [rsp+38H]\r\n       8BDE                 mov      ebx, esi\r\n       83FB09               cmp      ebx, 9\r\n       7D38                 jge      SHORT G_M29712_IG05\r\n       83FEFF               cmp      esi, -1\r\n       7C33                 jl       SHORT G_M29712_IG05\r\n       48B928309F03F87F0000 mov      rcx, 0x7FF8039F3028\r\n       BA3B050000           mov      edx, 0x53B\r\n       E81332765F           call     CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE\r\n       48B9782211E8D3010000 mov      rcx, 0x1D3E8112278\r\n       488B09               mov      rcx, gword ptr [rcx]\r\n       8D4301               lea      eax, [rbx+1]\r\n       3B4108               cmp      eax, dword ptr [rcx+8]\r\n       7340                 jae      SHORT G_M29712_IG09\r\n       4863C0               movsxd   rax, eax\r\n       488B5CC110           mov      rbx, gword ptr [rcx+8*rax+16]\r\n       EB1C                 jmp      SHORT G_M29712_IG06\r\n\r\nG_M29712_IG05:\r\n       48B950D8E403F87F0000 mov      rcx, 0x7FF803E4D850\r\n       E80530765F           call     CORINFO_HELP_NEWSFAST\r\n       C7403400000001       mov      dword ptr [rax+52], 0x1000000\r\n       897038               mov      dword ptr [rax+56], esi\r\n       488BD8               mov      rbx, rax\r\n\r\nG_M29712_IG06:\r\n       488BCB               mov      rcx, rbx\r\n\r\nG_M29712_IG07:\r\n       488BD7               mov      rdx, rdi\r\n       41B801000000         mov      r8d, 1\r\n       E867F4FFFF           call     System.Runtime.CompilerServices.TaskAwaiter:UnsafeOnCompletedInternal(ref,ref,bool)\r\n       90                   nop\r\n\r\nG_M29712_IG08:\r\n       4883C440             add      rsp, 64\r\n       5B                   pop      rbx\r\n       5E                   pop      rsi\r\n       5F                   pop      rdi\r\n       C3                   ret\r\n\r\nG_M29712_IG09:\r\n       E8391F2C5F           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3\r\n```\r\nAfter asm for Main's AwaitUnsafeOnCompleted:\r\n```\r\nG_M29707_IG01:\r\n       57                   push     rdi\r\n       56                   push     rsi\r\n       4883EC38             sub      rsp, 56\r\n       C5F877               vzeroupper\r\n       33C0                 xor      rax, rax\r\n       4889442428           mov      qword ptr [rsp+28H], rax\r\n       488BF2               mov      rsi, rdx\r\n\r\nG_M29707_IG02:\r\n       498BD0               mov      rdx, r8\r\n       E89D5AFFFF           call     System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[VoidTaskResult][System.Threading.Tasks.VoidTaskResult]:GetStateMachineBox(byref):ref:this\r\n       488BF8               mov      rdi, rax\r\n       480FBE0E             movsx    rcx, byte  ptr [rsi]\r\n\r\nG_M29707_IG03:\r\n       C4E17A6F06           vmovdqu  xmm0, qword ptr [rsi]\r\n       C4E17A7F442428       vmovdqu  qword ptr [rsp+28H], xmm0\r\n\r\nG_M29707_IG04:\r\n       488B4C2428           mov      rcx, gword ptr [rsp+28H]\r\n       4885C9               test     rcx, rcx\r\n       750D                 jne      SHORT G_M29707_IG05\r\n       488D4C2428           lea      rcx, bword ptr [rsp+28H]\r\n       E83666FFFF           call     System.Threading.Tasks.ValueTask`1[Int32][System.Int32]:GetTaskForResultNoInlining():ref:this\r\n       488BC8               mov      rcx, rax\r\n\r\nG_M29707_IG05:\r\n       488BD7               mov      rdx, rdi\r\n       41B801000000         mov      r8d, 1\r\n       E8BDF4FFFF           call     System.Runtime.CompilerServices.TaskAwaiter:UnsafeOnCompletedInternal(ref,ref,bool)\r\n       90                   nop\r\n\r\nG_M29707_IG06:\r\n       4883C438             add      rsp, 56\r\n       5E                   pop      rsi\r\n       5F                   pop      rdi\r\n       C3                   ret\r\n```\r\n\r\ncc: @AndyAyersMS, @kouvel "},{"Id":"6787058364","Type":"PullRequestEvent","CreatedAt":"2017-10-31T01:34:04","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14752","RelatedDescription":"Merged pull request \"Add wrapper support for getUnboxedEntry\" (#14752) at dotnet/coreclr","RelatedBody":"@sandreenko PTAL\r\ncc @dotnet/jit-contrib \r\n\r\nI always forget to update this part, since it doesn't build in the CI."},{"Id":"6786971892","Type":"PullRequestEvent","CreatedAt":"2017-10-31T00:59:06","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14758","RelatedDescription":"Opened pull request \"[WIP][do not merge] dummy change\" (#14758) at dotnet/coreclr","RelatedBody":""},{"Id":"6786950826","Type":"IssuesEvent","CreatedAt":"2017-10-31T00:50:24","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/12643","RelatedDescription":"Closed issue \"Test failures in Linux/x64/pri1r2r\" (#12643) at dotnet/coreclr","RelatedBody":"e.g. https://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_ubuntu_pri1r2r_tst/2165/\r\n\r\nA binary search indicates that these failures came in with the changes in https://github.com/dotnet/coreclr/pull/11962.\r\n\r\n@ruben-ayrapetyan @janvorli can you take a look?"},{"Id":"6786949316","Type":"PullRequestEvent","CreatedAt":"2017-10-31T00:49:46","Actor":"karajas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14755","RelatedDescription":"Merged pull request \"Set toolset dir only for ARM64\" (#14755) at dotnet/coreclr","RelatedBody":"This removes toolset dir from being passed to x64 and arm official builds .\r\n\r\n@wtgodbe @jashook @BruceForstall @weshaggard "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6787108066","Type":"PullRequestEvent","CreatedAt":"2017-10-31T01:54:26","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7938","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25830-04 (master)\" (#7938) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6786981062","Type":"PullRequestEvent","CreatedAt":"2017-10-31T01:02:55","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7939","RelatedDescription":"Merged pull request \"The transport feed DLL method: 'PushToBlobFeed' parameters have changed\" (#7939) at dotnet/cli","RelatedBody":"With https://github.com/dotnet/cli/pull/7900 the transport feed DLL has a newer version [than release/2.0.0] that is compatible with netcoreapp2.1: 1.0.0-prerelease-02130-01 - however, the parameters to 'PushToBlobFeed' have changed, therefore the 'PublishNupkgToTransportFeed' target must change.\r\n\r\nIssue: https://github.com/dotnet/cli/issues/7793\r\n\r\n \r\n"},{"Id":"6786795531","Type":"PullRequestEvent","CreatedAt":"2017-10-30T23:49:39","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7939","RelatedDescription":"Opened pull request \"The transport feed DLL method: 'PushToBlobFeed' parameters have changed\" (#7939) at dotnet/cli","RelatedBody":"With https://github.com/dotnet/cli/pull/7900 the transport feed DLL has a newer version [than release/2.0.0] that is compatible with netcoreapp2.1: 1.0.0-prerelease-02130-01 - however, the parameters to 'PushToBlobFeed' have changed, therefore the 'PublishNupkgToTransportFeed' target must change.\r\n\r\nIssue: https://github.com/dotnet/cli/issues/7793\r\n\r\n \r\n"},{"Id":"6786599000","Type":"IssuesEvent","CreatedAt":"2017-10-30T22:44:22","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7918","RelatedDescription":"Closed issue \".NET Core SDK Telemetry Change: Adopt Hashing\" (#7918) at dotnet/cli","RelatedBody":"# .NET Core SDK Telemetry Change: Adopt Hashing\r\n\r\nThe .NET Core SDK provides a set of development time tools to help you build and test .NET Core applications. The SDK collects CLI usage data including .NET Core Version, Operating System and CLI verbs. We share this data with the community. Check out [what we learned from .NET Core SDK telemetry](https://blogs.msdn.microsoft.com/dotnet/2017/07/21/what-weve-learned-from-net-core-sdk-telemetry/) to see what data we collect, how we use it, and how you can access the aggregate data.\r\n\r\nThe telemetry system was designed to only collect known CLI commands. When we initially shared the CLI data with the community, we received feedback that developers were concerned there might be sensitive information in the data set. In considering this feedback, we decided we could hash usage data on the client prior to sending. This further reduces the chance that sensitive data can be accessed by Microsoft or anyone else - for example when someone types something accidentally.\r\n\r\nThe data we collect drives improvements in the products you use. We will continue to be transparent about what we collect and share our findings with you. You can see how to [opt out of telemetry](https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry) in the documentation.\r\n\r\n## Design\r\n\r\n* Use the [SHA-256](https://en.wikipedia.org/wiki/SHA-2) hash function to hash all telemetry values that are created in the CLI/SDK. Each command, argument, and switch will be normalized to upper case before hashing to produce consistent hashes.\r\n\r\n* The names of Microsoft provided templates (names that are parameters to dotnet new) are not hashed. For Microsoft templates, the hashed target framework is also sent. Names for all other templates are hashed. Parameters to templates are not sent.\r\n\r\n* As a result of this change, most telemetry information will now be hashed. To use the data, a reverse lookup table will be precomputed based on known values like the dotnet verbs.\r\n\r\n* We will continue to provide usage data to the community. The data we release will contain the plain text values we have reversed via our lookup table and any values that remain hashed. We will also share the lookup table.\r\n\r\n## Details\r\n\r\nThe hash algorithm needs to be one way and deterministic. That means, if arbitrary text is hashed, the original text cannot be directly recovered and given the same hash algorithm with the same input, the output hash will always be the same.\r\n\r\nWe will use the SHA-256 algorithm.\r\n\r\nThe code that will hash values is:\r\n\r\n``` C#\r\npublic static string Hash(string text)\r\n{\r\n    var sha256 = SHA256.Create();\r\n    byte[] bytes = Encoding.UTF8.GetBytes(text);\r\n    byte[] hash = sha256.ComputeHash(bytes);\r\n    StringBuilder hashString = new StringBuilder();\r\n    foreach (byte x in hash)\r\n    {\r\n        hashString.AppendFormat(\"{0:x2}\", x);\r\n    }\r\n    return hashString.ToString();\r\n}\r\n```\r\n\r\n## Examples\r\n\r\nWalking through the telemetry sent when calling two dotnet commands will illustrate the process.\r\n\r\nThe user types `dotnet new console -n consoleapp1`. The following telemetry is sent:\r\n\r\nEvent Name = dotnet/cli/sublevelparser/command\r\n\r\n| Key                  | Value                                                            |\r\n|----------------------|------------------------------------------------------------------|\r\n| OS Version           | 10.0.15063                                                       |\r\n| OS Platform          | Windows                                                          |\r\n| Runtime Id           | win10-x64                                                        |\r\n| Product Version      | 2.0.1                                                            |\r\n| Docker Container     | False                                                            |\r\n| Current Path Hash    | 437059c8b2809cb25b0edbf6aa9e474df52e8861da88e0ca66cbc05d4af799ae |\r\n| Machine ID           | ddc77f7407553edbe4f5764588ea9bce995c22258e2b35e4228dea01220e5e92 |\r\n| verb                 | a253ff09c5a8678e1fd1962b2c329245e139e45f9cc6ced4e5d7ad42c4108fc0 |\r\n| argument             | 98b5b495e453d6c2cd36e7e812916bc5f3264045225cf685729065387a346897 |\r\n\r\nYou will notice that you don't see \"console\" and \"consoleapp1\" in the telemetry, but see hashed values.\r\n\r\nTo use this data we need a precomputed lookup table that maps hashes to known values. The precomputed lookup table will look similar to:\r\n\r\n| Hash                                                             |   Text  |\r\n|------------------------------------------------------------------|:-------:|\r\n| a253ff09c5a8678e1fd1962b2c329245e139e45f9cc6ced4e5d7ad42c4108fc0 |   NEW   |\r\n| 565be3f826b6ada938f1ae39dcb365e8b7d8e77323ac5c081c1715a975576321 | RESTORE |\r\n| 98b5b495e453d6c2cd36e7e812916bc5f3264045225cf685729065387a346897 | CONSOLE |\r\n\r\nWe can recognize the verb `NEW` and the template name `CONSOLE` from these known values, and can replace these hashes with known text on the server.\r\n\r\nNext, the user types `dotnet new ProjectX`. The following telemetry is sent:\r\n\r\nEvent Name = dotnet/cli/sublevelparser/command\r\n\r\n| Key                  | Value                                                            |\r\n|----------------------|------------------------------------------------------------------|\r\n| OS Version           | 10.0.15063                                                       |\r\n| OS Platform          | Windows                                                          |\r\n| Runtime Id           | win10-x64                                                        |\r\n| Product Version      | 2.0.1                                                            |\r\n| Docker Container     | False                                                            |\r\n| Current Path Hash    | 437059c8b2809cb25b0edbf6aa9e474df52e8861da88e0ca66cbc05d4af799ae |\r\n| Machine ID           | ddc77f7407553edbe4f5764588ea9bce995c22258e2b35e4228dea01220e5e92 |\r\n| verb                 | a253ff09c5a8678e1fd1962b2c329245e139e45f9cc6ced4e5d7ad42c4108fc0 |\r\n| argument             | 13807dc72a30ea2ac552b7560c7c1f3d0060509f953d2d48926b338b90582f6a |\r\n\r\nYou will notice that you don't see \"ProjectX\" in the telemetry, but see a hashed value. This value is not in the lookup table, so remains a hashed value. We can count the number of times the hash `13807dc72a30ea2ac552b7560c7c1f3d0060509f953d2d48926b338b90582f6a` is used, but we can't recover the original value.\r\n\r\n## Other Changes\r\n\r\nThere has also been a change to the name of a telemetry event which is sent when MSBuild evaluates a project file. The event previously named _TargetFramework_ will now be named _targetframeworkeval_.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6786595382","Type":"IssuesEvent","CreatedAt":"2017-10-30T22:43:16","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7922","RelatedDescription":"Closed issue \"Add support for the `net40-client` target framework\" (#7922) at dotnet/cli","RelatedBody":"It would be nice to have support of the .NET Framework 4 Client Profile.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6786434671","Type":"PullRequestEvent","CreatedAt":"2017-10-30T21:58:17","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7933","RelatedDescription":"Merged pull request \"Clarify when myapp.exe and myapp.runtimeconfig.json are needed\" (#7933) at dotnet/cli","RelatedBody":"Fixes https://github.com/dotnet/cli/issues/7692"},{"Id":"6786434664","Type":"IssuesEvent","CreatedAt":"2017-10-30T21:58:17","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7692","RelatedDescription":"Closed issue \"app.runtimeconfig.json is not optional\" (#7692) at dotnet/cli","RelatedBody":"According to this documentation [Runtime Conifguraiton Files](https://github.com/dotnet/cli/blob/master/Documentation/specs/runtime-configuration-file.md), `app.runtimeconfig.json` is an optional configuration file.  However, it doesn't look like it's the case.\r\n\r\n\r\n## Steps to reproduce\r\nI have the following test app:\r\n```\r\nusing System;\r\nnamespace test {\r\n    class Program {\r\n        static void Main(string[] args) {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRun the following commands in sequence:\r\n\r\n> dotnet publish\r\n> cd bin\\Debug\\netcoreapp2.0\\publish\r\n> del test.runtimeconfig.json\r\n> dotnet test.dll\r\n\r\n## Expected  behavior\r\nApplication writes to console:\r\n\r\n> Hello World!\r\n\r\n## Actual behavior\r\nDotnet executable reports the following error: \r\n\r\n> A fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'd:\\workspace\\test\\bin\\Debug\\netcoreapp2.0\\publish\\'.\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6786404918","Type":"PullRequestEvent","CreatedAt":"2017-10-30T21:50:55","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7938","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25830-03 (master)\" (#7938) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6786034651","Type":"IssuesEvent","CreatedAt":"2017-10-30T20:26:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7937","RelatedDescription":"Closed issue \"dotnet add package without version not updating packages\" (#7937) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ninside a folder with a .csproj file run dotnet add package {packagename} on a package that is not currently up to date.\r\n\r\n## Expected  behavior\r\nPackage should update to the latest version available\r\n\r\n## Actual behavior\r\nPackage does not update\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n"},{"Id":"6785911841","Type":"PullRequestEvent","CreatedAt":"2017-10-30T20:00:04","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7887","RelatedDescription":"Merged pull request \"Sync solution\" (#7887) at dotnet/cli","RelatedBody":"So there is no error open in VS"},{"Id":"6785903584","Type":"IssuesEvent","CreatedAt":"2017-10-30T19:58:19","Actor":"rlm95","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7937","RelatedDescription":"Opened issue \"dotnet add package without version not updating packages\" (#7937) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ninside a folder with a .csproj file run dotnet add package {packagename} on a package that is not currently up to date.\r\n\r\n## Expected  behavior\r\nPackage should update to the latest version available\r\n\r\n## Actual behavior\r\nPackage does not update\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n"},{"Id":"6785697824","Type":"IssuesEvent","CreatedAt":"2017-10-30T19:12:31","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7934","RelatedDescription":"Closed issue \"dotnet-install.sh fails because the download URL returns 404\" (#7934) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nDownload the installer script - https://dot.net/v1/dotnet-install.sh\r\nRun ./dotnet-install.sh \r\n\r\n\r\n## Expected  behavior\r\nShould be able to download the binaries\r\n\r\n## Actual behavior\r\nIf supplied with no params the installer script fails with the following error message - \r\n\r\nDownloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.0.4/dotnet-sdk-1.0.4-linux-x64.tar.gz\r\ncurl: (22) The requested URL returned error: 404\r\n\r\n## Environment data\r\nDebian 9\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6785406331","Type":"IssuesEvent","CreatedAt":"2017-10-30T18:12:29","Actor":"danmosemsft","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7936","RelatedDescription":"Closed issue \"self contained publish fails using daily build \" (#7936) at dotnet/cli","RelatedBody":"My goal is to create a self contained app using recent bits.\r\n\r\n## Steps to reproduce\r\n\r\n0)\tEnsured myget is in my global nuget.config;     <add key=\"myget.dotnetcore\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\r\n1)\tUnzipped https://dotnetcli.blob.core.windows.net/dotnet/Sdk/master/dotnet-sdk-latest-win-x64.zip  into c:\\dotnet\r\n2)\tset DOTNET_MULTILEVEL_LOOKUP=0\r\n3)\tc:\\dotnet\\dotnet new console \r\n4)\tedited csproj to this (got version number from the CLI page)\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n\r\n    <RuntimeFrameworkVersion>2.1.0-preview1-25825-07</RuntimeFrameworkVersion> \r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n5)\tc:\\dotnet run works!\r\n6)\tSelf contained publish fails:\r\n\r\n## Actual behavior\r\n```\r\nc:\\dotnet\\1>dotnet publish --self-contained\r\nC:\\Program Files\\dotnet\\sdk\\15.5.0-preview-007044\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(135,5): error : The current .NET SDK does not support targeting .NET Core 2.1.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1. [F:\\dotnet\\1\\1.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\15.5.0-preview-007044\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(135,5): error : The current .NET SDK does not support targeting .NET Core 2.1.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1. [F:\\dotnet\\1\\1.csproj]\r\n```\r\n\r\n## Expected  behavior\r\n\r\nIt works\r\n\r\n\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nF:\\dotnet\\1>dotnet --info\r\n```\r\n.NET Command Line Tools (15.5.0-preview-007044)\r\n\r\nProduct Information:\r\n Version:            15.5.0-preview-007044\r\n Commit SHA-1 hash:  278cbf6c44\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\15.5.0-preview-007044\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n@weshaggard @ViktorHofer \r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6786580989","Type":"PullRequestEvent","CreatedAt":"2017-10-30T22:39:00","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/563","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02130-03 (master)\" (#563) at dotnet/standard","RelatedBody":""},{"Id":"6786387543","Type":"PullRequestEvent","CreatedAt":"2017-10-30T21:46:36","Actor":"dseefeld","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/565","RelatedDescription":"Opened pull request \"Add retry logic for setup of dotnet cli\" (#565) at dotnet/standard","RelatedBody":"Copy init-tools.sh retry logic from corefx.\r\n\r\nFixes dotnet/core-eng#1966"},{"Id":"6784576808","Type":"IssuesEvent","CreatedAt":"2017-10-30T15:40:45","Actor":"Poppyto","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/564","RelatedDescription":"Opened issue \"Can't launch UWP XBox One when a lib .net standard 2.0 is added\" (#564) at dotnet/standard","RelatedBody":"Using .net standard 2.0 library on XBOXOne (Fall Creators) app fails anytime at launch :\r\n\r\n![image](https://user-images.githubusercontent.com/12406939/32179808-a114039c-bd90-11e7-96ed-26e3ab5e3e42.png)\r\n\r\nStep Reproduction :\r\n- Create a new UWP app With Fall Creators support\r\n- Create an empty lib .net standard 2.0\r\n- Add a reference of the lib on the UWP app\r\n- Launch on XBoxOne\r\n\r\nIf I remove the .net standard lib reference, the app is launching.\r\n\r\n\r\n"},{"Id":"6778790926","Type":"PullRequestEvent","CreatedAt":"2017-10-28T15:19:20","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/563","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02128-02 (master)\" (#563) at dotnet/standard","RelatedBody":""},{"Id":"6778163753","Type":"IssuesEvent","CreatedAt":"2017-10-28T06:47:01","Actor":"safern","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/560","RelatedDescription":"Closed issue \"msbuild error - .NET 4.7.1 console app referrencing dotnet standard 2.0 lib\" (#560) at dotnet/standard","RelatedBody":"Hello, \r\nI got in troubles on my dev environments with switching from .NET Framework 4.6.1 to  4.7.1.\r\nFinally I tried to create simple solution with (console app 4.7.1+ lib ,targeting .netstandard2.0), which build  ended up with:\r\nerror CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n\r\nBasically, according to  [Immo Landwerth's video ](https://www.youtube.com/watch?v=u67Eu_IgEMs) it should work :) , but It did't. \r\ndifferences to the video env, I encountered are to the environment on video are:\r\n-  I have newer VS 2017 15.4.1 then I have omitted to install .NET 4.6.2,.NET 4.7 \r\n![image](https://user-images.githubusercontent.com/11144487/32121786-521311cc-bb5e-11e7-9b55-e72aa01bd8d7.png)\r\n- .NET Core SDK 2.0.2\r\n- didn't work on both Win10 1607 build 14393.17770 and 1709 bild 16299.19\r\n\r\nHere we are the solution  [CSOMTest.zip](https://github.com/dotnet/standard/files/1423300/CSOMTest.zip)\r\n"},{"Id":"6777662687","Type":"PullRequestEvent","CreatedAt":"2017-10-27T23:49:20","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/561","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02127-10 (master)\" (#561) at dotnet/standard","RelatedBody":""},{"Id":"6777661672","Type":"PullRequestEvent","CreatedAt":"2017-10-27T23:48:49","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/562","RelatedDescription":"Merged pull request \"Merge dev/release/2.0.0 branch to master\" (#562) at dotnet/standard","RelatedBody":"cc @eerhardt @dagood "},{"Id":"6777517406","Type":"PullRequestEvent","CreatedAt":"2017-10-27T22:46:02","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/562","RelatedDescription":"Opened pull request \"Merge dev/release/2.0.0 branch to master\" (#562) at dotnet/standard","RelatedBody":"cc @eerhardt @dagood "},{"Id":"6777280643","Type":"PullRequestEvent","CreatedAt":"2017-10-27T21:26:06","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/561","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02127-10 (master)\" (#561) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6787369174","Type":"PullRequestEvent","CreatedAt":"2017-10-31T03:37:39","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24958","RelatedDescription":"Merged pull request \"Add information on myget feed and local SDK\" (#24958) at dotnet/corefx","RelatedBody":"Does anything else need updating here?"},{"Id":"6787362978","Type":"IssuesEvent","CreatedAt":"2017-10-31T03:35:05","Actor":"LHCGreg","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24943","RelatedDescription":"Closed issue \"Calling Dispose() on a socket inside a synchronous Accept() on Linux hangs\" (#24943) at dotnet/corefx","RelatedBody":"Operation System: Debian Stretch\r\nTested with git master (coreclr SHA 67a66156d0307b49522a13618522d289268bc1f9 and corefx SHA 389d7ee)\r\n\r\nReproduction code: https://gist.github.com/LHCGreg/a8a144da68d59f225a4b2c4bd1cbd05d\r\n\r\nThis program takes three arguments. First argument is 'async' or 'sync' for whether to call Accept() or AcceptAsync(). Second argument is 'shutdown' to try to stop listening socket by calling Shutdown(SocketShutdown.Both), then Dispose(), or 'dispose' to just call Dispose(). Third argument is 'signal' to register signal handlers for SIGINT (or ctrl+c on windows) and SIGTERM (netcore only), or 'auto' to automatically try to stop the listening socket after 3 seconds.\r\n\r\nReproduction steps:\r\n\r\nOn Linux, run\r\n\r\n```\r\ndotnet SocketStopTest.dll sync dispose auto\r\n```\r\n\r\nExpected result: A SocketException is thrown from the Accept() call and the program terminates.\r\n\r\nActual result: The program hangs inside Socket.Dispose().\r\n\r\nOn Windows, both full framework and .net core, calling Dispose() on a Socket that is in a synchronous Accept() call will break it out of the Accept() call with a SocketException. On Linux, it hangs inside the Dispose(). On Linux, calling Shutdown(SocketShutdown.Both) before calling Dispose() works and causes a SocketException to be thrown from the Accept(), although the exception message is a little weird: \"Invalid argument\". But on Windows, whether full framework or .net core, calling Shutdown(SocketShutdown.Both) apparently hangs when called from regular code or throws a SocketException on the Shutdown (and does not interrupt the Accept) when called from a ctrl+c handler with a message of \"A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket using a sendto call) no address was supplied\"\r\n\r\nWith AcceptAsync(), Dispose() generally works as expected on Windows full framework, Windows .net core, and Linux .net core, with the small exception of Windows full framework raising ObjectDisposedException from the accept task instead of SocketException.\r\n\r\nSee outcome.txt in the gist for outcomes of all combinations of Windows net47 vs Windows netcore vs Linux netcore, Accept() vs. AsyncAccept(), Shutdown(SocketShutdown.Both) + Dispose() vs. just Dispose(), and socket stopped from delayed Task vs. ctrl+c/SIGINT handler vs. SIGTERM handler.\r\n\r\nIt's also far from clear from documentation what the correct way of interrupting an Accepting socket is. One might guess to call Dispose() on it, but calling Shutdown would be another reasonable guess and works on Linux but not Windows."},{"Id":"6787359321","Type":"IssuesEvent","CreatedAt":"2017-10-31T03:33:30","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24754","RelatedDescription":"Closed issue \"Dev Center Certification Fails for Microsoft.NETCore.UniversalWindowsPlatform 6.0.1\" (#24754) at dotnet/corefx","RelatedBody":"@EdiWang reported this here: https://github.com/Microsoft/dotnet/issues/528\r\n\r\n**Steps to Reproducte:**\r\n\r\n1. Upgrade UWP's nuget package to Microsoft.NETCore.UniversalWindowsPlatform 6.0.1\r\n3. Target 16299 for both target and min version.\r\n4. Generate an app package to upload to store\r\n\r\n**Actual Behaviour:**\r\n\r\nCertification Failed\r\n> PI ClearCommBreak in kernel32.dll is not supported for this application type. System.IO.Ports.dll calls this API.\r\n> API ClearCommError in kernel32.dll is not supported for this application type. System.IO.Ports.dll calls this API.\r\n> .... etc.\r\n\r\n**Workaround**\r\n\r\nDowngrade the package to 5.4.1 will fix the problem. \r\n\r\n**Note**\r\n\r\nI don't know if the dev center is not ready for verify 6.x uwp package, or it is the package itself have problem?\r\n\r\nFYI the question on MSDN forum https://social.msdn.microsoft.com/Forums/en-US/b7355d61-cbf9-42e6-a9eb-44ffa144aa1f/rs31709certification-failure-due-to-unsupported-apis-after-upgrading-to-16299-sdk?forum=wpsubmit "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6787510980","Type":"IssuesEvent","CreatedAt":"2017-10-31T04:41:07","Actor":"lostllama","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22925","RelatedDescription":"Opened issue \"Can't report problems\" (#22925) at dotnet/roslyn","RelatedBody":"[Video here](https://youtu.be/aaMPxy7jNvc)\r\n\r\n**Version Used**: \r\n\r\nVisual Studio 2017 Enterprise v15.4.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Click \"Report a problem\"\r\n2. Be told that you need to be signed in.\r\n3. Sign in\r\n4. GOTO 1\r\n\r\n**Expected Behavior**:\r\n\r\nLogin to complete successfully and for me to be able to report a problem.\r\n\r\n**Actual Behavior**:\r\n\r\nThe button always remains as \"Sign in\" even after being signed in.\r\n\r\n---\r\n\r\nIf I go onto the VS communtiy website, it tells me to report the problem via Visual Studio. Right...\r\nIf I go to the \"contact Microsoft\" link, it tells me to purchase a support contract to report the problem. I won't get into how shady it is to require someone to purchase a support contract to report a bug with YOUR software, but it's pretty shady."},{"Id":"6787177546","Type":"IssuesEvent","CreatedAt":"2017-10-31T02:21:52","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22921","RelatedDescription":"Closed issue \"C# compiler does not provide a warning about unused lambda variables\" (#22921) at dotnet/roslyn","RelatedBody":"For the code:\r\n\r\n```\r\n    void SomeMethod()\r\n    {\r\n        void localFunction()\r\n        {\r\n        }\r\n\r\n        Func<int> lambda = () =>\r\n        {\r\n            return 1;\r\n        };\r\n    }\r\n```\r\n\r\ncompiler provides a warning for the unused local function but does not for the unused lambda. I expect they should be consistent.\r\nThose compiler diagnostics is used in roslyn-analyzers."},{"Id":"6787135251","Type":"IssuesEvent","CreatedAt":"2017-10-31T02:04:59","Actor":"maca88","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22924","RelatedDescription":"Opened issue \"Make SyntaxNodeExtensions.RemoveNode EOF configurable\" (#22924) at dotnet/roslyn","RelatedBody":"**Version Used**: 2.4.0\r\n\r\nCurrently, the EOF that [may be added](https://github.com/dotnet/roslyn/blob/614299ff83da9959fa07131c6d0ffbc58873b6ae/src/Compilers/CSharp/Portable/Syntax/SyntaxNodeRemover.cs#L108) by [RemoveNode](https://github.com/dotnet/roslyn/blob/1102ba506092bd6edfcfe1abdc990162ff337d47/src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs#L260) or [RemoveNodes](https://github.com/dotnet/roslyn/blob/1102ba506092bd6edfcfe1abdc990162ff337d47/src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs#L275) is CRLF and cannot be changed.\r\nBy making the EOF configurable, we would be able to preserve the EOF of the original document, as we could do it with [NormalizeWhitespace](https://github.com/dotnet/roslyn/blob/1102ba506092bd6edfcfe1abdc990162ff337d47/src/Compilers/Core/Portable/Syntax/SyntaxNodeExtensions.cs#L295)."},{"Id":"6787095880","Type":"IssuesEvent","CreatedAt":"2017-10-31T01:49:33","Actor":"JosefPihrt","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22923","RelatedDescription":"Opened issue \"Two symbols should be equal but they are not\" (#22923) at dotnet/roslyn","RelatedBody":"**Version Used**: VS Community 2017 15.4.1\r\n\r\n**Steps to Reproduce**:\r\n\r\nLet's say I have this code:\r\n```csharp\r\npublic class FooException<T> : Exception\r\n{\r\n    /// <exception cref=\"FooException{T}\"></exception>\r\n    private void Foo()\r\n    {\r\n        throw new FooException<T>();\r\n    }\r\n}\r\n```\r\n\r\nand I want to check symbols for equality:\r\n```csharp\r\nprivate static void Foo()\r\n{\r\n    SyntaxTree tree = CSharpSyntaxTree.ParseText(@\"\r\n        public class FooException<T> : Exception\r\n        {\r\n            /// <exception cref=\"\"FooException{T}\"\"></exception>\r\n            private void Foo()\r\n            {\r\n                throw new FooException<T>();\r\n            }\r\n\r\n        }\");\r\n\r\n    PortableExecutableReference reference = MetadataReference.CreateFromFile(typeof(object).Assembly.Location);\r\n    CSharpCompilation compilation = CSharpCompilation.Create(\"Compilation\", new SyntaxTree[] { tree }, new MetadataReference[] { reference });\r\n    SemanticModel semanticModel = compilation.GetSemanticModel(tree);\r\n    SyntaxNode root = tree.GetRoot();\r\n\r\n    CrefSyntax cref = root.DescendantNodes(descendIntoTrivia: true).OfType<CrefSyntax>().First();\r\n    ObjectCreationExpressionSyntax objectCreation = root.DescendantNodes().OfType<ObjectCreationExpressionSyntax>().First();\r\n\r\n    ITypeSymbol a = semanticModel.GetTypeSymbol(objectCreation);\r\n    ISymbol b = semanticModel.GetSymbol(cref);\r\n\r\n    Debug.WriteLine(a == b);\r\n    Debug.WriteLine(a == b.OriginalDefinition);\r\n    Debug.WriteLine(b == b.OriginalDefinition);\r\n    Debug.WriteLine(b.OriginalDefinition == b.OriginalDefinition.OriginalDefinition);\r\n}\r\n```\r\n\r\n**Output**: \r\n```\r\nFalse\r\nTrue\r\nFalse\r\nTrue\r\n```\r\n\r\n**Questions**:\r\n* Why `a == b` returns False?\r\n* Why `b == b.OriginalDefinition` returns False?\r\n* If this is correct behavior how can I compare these symbols for equality?\r\n"},{"Id":"6787057980","Type":"IssuesEvent","CreatedAt":"2017-10-31T01:33:55","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22922","RelatedDescription":"Opened issue \"Need to revise Roslyn.Test.Utilities\" (#22922) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. \r\n2. \r\n3. \r\n\r\n**Expected Behavior**:\r\n\r\n**Actual Behavior**:\r\n"},{"Id":"6787044784","Type":"IssuesEvent","CreatedAt":"2017-10-31T01:28:33","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22921","RelatedDescription":"Opened issue \"C# compiler does not provide a warning about unused lambda variables\" (#22921) at dotnet/roslyn","RelatedBody":"For the code:\r\n\r\n```\r\n    void SomeMethod()\r\n    {\r\n        void localFunction()\r\n        {\r\n        }\r\n\r\n        Func<int> lambda = () =>\r\n        {\r\n            return 1;\r\n        };\r\n    }\r\n```\r\n\r\ncompiler provides a warning for the unused local function but does not for the unused lambda. I expect they should be consistent.\r\nThose compiler diagnostics is used in roslyn-analyzers."},{"Id":"6787025344","Type":"PullRequestEvent","CreatedAt":"2017-10-31T01:20:37","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22920","RelatedDescription":"Opened pull request \"tagger OOM test\" (#22920) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n**Test documentation updated?**\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n"},{"Id":"6786914317","Type":"IssuesEvent","CreatedAt":"2017-10-31T00:35:10","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/19661","RelatedDescription":"Closed issue \"OutOfMemoryException in MS.CA.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsAsync\" (#19661) at dotnet/roslyn","RelatedBody":"**Version Used**: 2.02.0.61624 (MS.CA)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Load 14 projects in a solution containing 300+ in Visual Studio 2017 (rest disabled with [vsFunnel](http://vsfunnel.com/))\r\n2. Edit files for ~2.5 hours\r\n\r\n**StackTrace**:\r\n```\r\n   at System.Collections.Immutable.ImmutableArray`1.Builder.ToArray()\r\n   at System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable()\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.AttributeExpressionVisitor.VisitArguments(ImmutableArray`1 arguments, DiagnosticBag diagnostics, Boolean& attrHasErrors, Boolean parentHasErrors)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.GetAttribute(BoundAttribute boundAttribute, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.GetAttribute(AttributeSyntax node, NamedTypeSymbol boundAttributeType, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.GetAttributes(ImmutableArray`1 binders, ImmutableArray`1 attributesToBind, ImmutableArray`1 boundAttributeTypes, CSharpAttributeData[] attributesBuilder, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbol.LoadAndValidateAttributes(OneOrMany`1 attributesSyntaxLists, CustomAttributesBag`1& lazyCustomAttributesBag, AttributeLocation symbolPart, Boolean earlyDecodingOnly, DiagnosticBag addToDiagnostics, Binder binderOpt)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.EnsureAttributesAreBound()\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSourceDeclarationDiagnostics(SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Func`4 locationFilterOpt, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForSyntaxTree(CompilationStage stage, SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Boolean includeEarlierStages, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDiagnostics(Nullable`1 span, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GenerateCompilationEvents(AnalysisScope analysisScope, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.<GenerateCompilationEventsAndPopulateEventsCacheAsync>d__57.MoveNext()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.<ComputeAnalyzerDiagnosticsAsync>d__56.MoveNext()\r\n```\r\n\r\nNotes:\r\n- ReSharper is **not** installed.\r\n- Crash dump lists 32 analyzers that appear to be built-ins e.g. IDE0031, CSxxxx, IDE0027, etc...\r\n- I can share the 3GB+ crash dump\r\n\r\n**Expected Behavior**: Does not crash\r\n\r\n**Actual Behavior**: Crashed\r\n"},{"Id":"6786789438","Type":"IssuesEvent","CreatedAt":"2017-10-30T23:47:24","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21614","RelatedDescription":"Closed issue \"[IOperation] Handling user-defined conversions\" (#21614) at dotnet/roslyn","RelatedBody":"Currently, for user-defined conversions, we produce an IConversionExpression that looks something like this:\r\n```C#\r\nclass C1\r\n{\r\n    void M1()\r\n    {\r\n        C1 c1 = new C1();\r\n        C2 /*<bind>*/c2 = (C2)c1/*</bind>*/;\r\n    }\r\n\r\n    public static explicit operator C2(C1 c1) => new C2();\r\n}\r\n\r\nclass C2 { }\r\n```\r\n```\r\nIVariableDeclarationStatement (1 declarations) (OperationKind.VariableDeclarationStatement) (Syntax: 'C2 /*<bind> ... *</bind>*/;')\r\n  IVariableDeclaration (1 variables) (OperationKind.VariableDeclaration) (Syntax: 'C2 /*<bind> ... *</bind>*/;')\r\n    Variables: Local_1: C2 c2\r\n    Initializer: IConversionExpression (Explicit, TryCast: False, Unchecked) (OperatorMethod: C2 C1.op_Explicit(C1 c1)) (OperationKind.ConversionExpression, Type: C2) (Syntax: '(C2)c1')\r\n        Conversion: CommonConversion (Exists: True, IsIdentity: False, IsNumeric: False, IsReference: False, IsUserDefined: True) (MethodSymbol: C2 C1.op_Explicit(C1 c1))\r\n        Operand: ILocalReferenceExpression: c1 (OperationKind.LocalReferenceExpression, Type: C1) (Syntax: 'c1'\r\n```\r\n\r\nHowever, this is effectively a method call of the conversion method. Because of this VB has some additional complications we're currently not handling, namely around in and out conversions. For example:\r\n```VB.NET\r\nModule Program\r\n    Sub M1(args As String())\r\n        Dim i As Integer = 1\r\n        Dim c1 As C1 = i'BIND:\"Dim c1 As C1 = i\"\r\n    End Sub\r\n\r\n    Class C1\r\n        Public Shared Widening Operator CType(ByVal i As Long) As C1\r\n            Return New C1\r\n        End Operator\r\n    End Class\r\nEnd Module\r\n```\r\n```\r\nIVariableDeclarationStatement (1 declarations) (OperationKind.VariableDeclarationStatement) (Syntax: 'Dim c1 As C1 = i')\r\n  IVariableDeclaration (1 variables) (OperationKind.VariableDeclaration) (Syntax: 'c1')\r\n    Variables: Local_1: c1 As Program.C1\r\n    Initializer: IConversionExpression (Implicit, TryCast: False, Unchecked) (OperatorMethod: Function Program.C1.op_Implicit(i As System.Int64) As Program.C1) (OperationKind.ConversionExpression, Type: Program.C1) (Syntax: 'i')\r\n        Conversion: CommonConversion (Exists: True, IsIdentity: False, IsNumeric: False, IsReference: False, IsUserDefined: True) (MethodSymbol: Function Program.C1.op_Implicit(i As System.Int64) As Program.C1)\r\n        Operand: ILocalReferenceExpression: i (OperationKind.LocalReferenceExpression, Type: System.Int32) (Syntax: 'i')\r\n```\r\n\r\nThere is an implicit conversion from int to long in the implicit user-defined conversion here that we are not currently representing. There are two possibilities for how to resolve this. The first is to have represent user-defined conversions in both languages as a function call. The nicety here is twofold: first, the user-defined conversion _is_ a function call. Second, we can represent that the in and out conversion are part of the same conversion step. However, this will make it harder to IOperation users to simply get all conversions, as they'll have to subscribe to all invocations and filter to method symbols that are conversions.\r\nThe other possibility (and the one I favor) is to simply insert the in and out conversions as IConversionExpressions if necessary. So the hierarchy would look like this:\r\n```\r\nIConversionExpression (out conversion, if present)\r\n    Operand:\r\n        IConversionExpression (User-defined conversion)\r\n            Operand:\r\n                IConversionExpression (in conversion, if present)\r\n                    Operand:\r\n                        IOperation (Converted expression)\r\n```\r\nI like this because it makes it easy to see that multiple conversions are actually taking place. `IsImplict` on the outer and inner conversion should provide the information that the conversion is actually part of the user-defined conversion. Tagging @dotnet/analyzer-ioperation @AlekseyTs for discussion."},{"Id":"6786616269","Type":"PullRequestEvent","CreatedAt":"2017-10-30T22:49:31","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22919","RelatedDescription":"Opened pull request \"Add declaration kind for local functions\" (#22919) at dotnet/roslyn","RelatedBody":"Towards #22918\r\nNeed this declaration kind in analyzers"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6787566209","Type":"PullRequestEvent","CreatedAt":"2017-10-31T05:06:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4844","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4844) at dotnet/corert","RelatedBody":""},{"Id":"6787563433","Type":"PullRequestEvent","CreatedAt":"2017-10-31T05:04:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4837","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4837) at dotnet/corert","RelatedBody":""},{"Id":"6787492286","Type":"PullRequestEvent","CreatedAt":"2017-10-31T04:32:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4843","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4843) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6787485982","Type":"PullRequestEvent","CreatedAt":"2017-10-31T04:29:32","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4843","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4843) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6786935480","Type":"PullRequestEvent","CreatedAt":"2017-10-31T00:44:00","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4839","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4839) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6786934868","Type":"PullRequestEvent","CreatedAt":"2017-10-31T00:43:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4842","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4842) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6786882941","Type":"PullRequestEvent","CreatedAt":"2017-10-31T00:22:44","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4842","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4842) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6786850673","Type":"PullRequestEvent","CreatedAt":"2017-10-31T00:09:50","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4841","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4841) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6786848897","Type":"PullRequestEvent","CreatedAt":"2017-10-31T00:09:09","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4841","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4841) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6786698991","Type":"PullRequestEvent","CreatedAt":"2017-10-30T23:15:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4832","RelatedDescription":"Merged pull request \"ARM: fix helpers emitting\" (#4832) at dotnet/corert","RelatedBody":"Signed-off-by: Petr Bred <bredpetr@gmail.com>"},{"Id":"6786674508","Type":"PullRequestEvent","CreatedAt":"2017-10-30T23:07:47","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4840","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4840) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6786656334","Type":"PullRequestEvent","CreatedAt":"2017-10-30T23:01:56","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4840","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4840) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6786616297","Type":"PullRequestEvent","CreatedAt":"2017-10-30T22:49:31","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4838","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4838) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6786545607","Type":"PullRequestEvent","CreatedAt":"2017-10-30T22:28:35","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4839","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4839) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6787515719","Type":"IssuesEvent","CreatedAt":"2017-10-31T04:43:19","Actor":"yaakov-h","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1703","RelatedDescription":"Opened issue \"MissingMethodException when using Microsoft.Build alongside ZipFile\" (#1703) at dotnet/sdk","RelatedBody":"I hope this is the correct place for this bug, if not, please point me as to where to file this.\r\n\r\n---\r\n\r\nI've hit a really strange place in the SDK with regards to NuGet packages and .NET Standard and type forwarders and all the magic going on there.\r\n\r\nI have a project that uses Microsoft.Build + Microsoft.Build.Framework + Microsoft.Build.Utilities.Core from NuGet.\r\n\r\nThis same project also deals with Zip files, so it uses System.IO.Compression and System.IO.Compression.FileSystem.\r\n\r\nMicrosoft.Build v15.1 does not use System.IO.Compression and so all works fine.\r\n\r\nMicrosoft.Build v15.3 and above do use System.IO.Compression. They refer to version 4.1.2.0. The version included in the .NET Framework is version 4.0.0.0.\r\n\r\nIf I reference Microsoft.Build from NuGet and System.IO.Compression from the SDK/GAC, I get build warnings/errors. This occurs with both the old (\"Classic Desktop\") SDK as well as the new SDK.\r\n\r\nOld SDK (with SDK/GAC reference to System.IO.Compression[.FileSystem]):\r\n\r\n> `1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(1988,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.`\r\n\r\nNew SDK (targetting `net461`):\r\n\r\n> `The type 'ZipArchive' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.IO.Compression, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.`\r\n\r\nIf I reference Microsoft.Build from NuGet and System.IO.Compression from NuGet, it compiles with no warnings or errors, however I get a runtime/JIT exception.\r\n\r\n> `Unhandled Exception: System.MissingMethodException: Method not found: 'System.IO.Compression.ZipArchive System.IO.Compression.ZipFile.Open(System.String, System.IO.Compression.ZipArchiveMode)'.\r\n   at CompressyCoreApp.Program.Main(String[] args)`\r\n\r\nIs there any way to reference both `Microsoft.Build` >= 15.3 and `System.IO.Compression.ZipFile` from the same project?"},{"Id":"6786645924","Type":"PullRequestEvent","CreatedAt":"2017-10-30T22:58:50","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1702","RelatedDescription":"Opened pull request \"Moving to the repo toolset.\" (#1702) at dotnet/sdk","RelatedBody":"Still doing some final validation (cross-plat test still needs a fix or two), but this should be otherwise \"complete\"."},{"Id":"6786624300","Type":"PullRequestEvent","CreatedAt":"2017-10-30T22:51:59","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1442","RelatedDescription":"Merged pull request \"Fix #1435 - calculation of ResolvedPath for project references\" (#1442) at dotnet/sdk","RelatedBody":"See #479 and #1435 for error description and analysis of the problem. In short:\r\n\r\nThe old implementation combined the relative `<ProjectReference Include=\"...\" />` path with the directory of the `ProjectAssetFile`.\r\nCorrected this to combine the relative project reference with the current's project path.\r\n\r\nQuestions:\r\n - Is it actually the desired outcome that ResolvedPath points to the csproj file? Or should it point to the output directory of that project?\r\n - Is ProjectPath always passed in as full path? (otherwise it needs to be enclosed by a `Path.GetFullPath`)"},{"Id":"6786483866","Type":"PullRequestEvent","CreatedAt":"2017-10-30T22:11:19","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1700","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/15.5\" (#1700) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171030-065957\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171030-065957 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6786384522","Type":"PullRequestEvent","CreatedAt":"2017-10-30T21:45:53","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1530","RelatedDescription":"Merged pull request \"Fix-#1521 Output the file path in warning message\" (#1530) at dotnet/sdk","RelatedBody":"This PR only enriches the log message with the file path which caused the warning, but it doesn't provide the approach to allow the user to ignore these kind of warnings. Please refer to the issue #1521 "},{"Id":"6786379593","Type":"PullRequestEvent","CreatedAt":"2017-10-30T21:44:37","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1548","RelatedDescription":"Merged pull request \"Provide shorter path to an unmanaged API.\" (#1548) at dotnet/sdk","RelatedBody":"This should avoid DirectoryNotFoundException if CurrentDir+RelattivePath is longer than max path length."},{"Id":"6785323250","Type":"PullRequestEvent","CreatedAt":"2017-10-30T17:56:06","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1692","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/15.5\" (#1692) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171027-065947\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171027-065947 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6785317988","Type":"PullRequestEvent","CreatedAt":"2017-10-30T17:55:04","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1693","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#1693) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171027-065949\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171027-065949 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6785313987","Type":"PullRequestEvent","CreatedAt":"2017-10-30T17:54:18","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1701","RelatedDescription":"Closed pull request \"Merge release/15.5 to master\" (#1701) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171030-065958\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171030-065958 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"925135073921310720","CreatedAt":"2017-10-30T22:59:24+00:00","UserScreenname":"dotnet","Text":"Experience real time test discovery in Test Explorer https://t.co/niKJvslM5p #visualstudio","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":33,"FavoriteCount":25,"RawContent":null},{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":127,"FavoriteCount":77,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":41,"FavoriteCount":22,"RawContent":null},{"Id":"923037554265296896","CreatedAt":"2017-10-25T04:04:36+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework latest tag updated to 4.7.1 https://t.co/NuV11juPrm /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":22,"RawContent":null},{"Id":"922503653402882049","CreatedAt":"2017-10-23T16:43:04+00:00","UserScreenname":"dotnet","Text":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018  https://t.co/TPKfGvwNLH /cc @intel","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":96,"FavoriteCount":56,"RawContent":null},{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":20,"RawContent":null},{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":385,"FavoriteCount":346,"RawContent":null},{"Id":"920393493557555205","CreatedAt":"2017-10-17T20:58:03+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Preview of Quality Rollup https://t.co/oVqxMXye74","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":16,"RawContent":null},{"Id":"920179824576028673","CreatedAt":"2017-10-17T06:49:00+00:00","UserScreenname":"dotnet","Text":".NET Framework Docker Performance Issue Resolved https://t.co/FST3EfcLtS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":30,"RawContent":null},{"Id":"920157146309730305","CreatedAt":"2017-10-17T05:18:54+00:00","UserScreenname":"dotnet","Text":"RyuJIT Just-in-Time Compiler Optimization Enhancements https://t.co/dhO8rAqiSI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":133,"FavoriteCount":79,"RawContent":null}]}},"RunOn":"2017-10-31T05:30:20.5814854Z","RunDurationInMilliseconds":7713}