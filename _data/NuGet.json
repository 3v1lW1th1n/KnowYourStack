{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10628901032","Type":"PullRequestEvent","CreatedAt":"2019-10-14T23:15:58","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7627","RelatedDescription":"Merged pull request \"Merge branch 'dev' into master\" (#7627) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10628713950","Type":"PullRequestEvent","CreatedAt":"2019-10-14T22:32:50","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7626","RelatedDescription":"Merged pull request \"Merge branch 'master' into dev\" (#7626) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10626819738","Type":"IssuesEvent","CreatedAt":"2019-10-14T17:25:12","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7065","RelatedDescription":"Closed issue \"[Icons] Add a flag to Gallery to completely ignore IconUrl\" (#7065) at NuGet/NuGetGallery","RelatedBody":"Eventually we'll completely drop support for icon URLs, need a flag to represent that."},{"Id":"10626646065","Type":"PullRequestEvent","CreatedAt":"2019-10-14T16:58:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7627","RelatedDescription":"Opened pull request \"Merge branch 'dev' into master\" (#7627) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10626609917","Type":"IssuesEvent","CreatedAt":"2019-10-14T16:53:34","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7190","RelatedDescription":"Closed issue \"[Azure Search] Analyze autocomplete data to validate current design\" (#7190) at NuGet/NuGetGallery","RelatedBody":"Look at data for what customers are searching for in autocomplete. Look at length of autocomplete queries (as current implementation has issues with long queries), and compare old vs new results under that threshold.\r\n\r\nFigure out all the scenarios around autocomplete. Ensure these scenarios are met with the new autocomplete implementation (consider UX studies?)\r\n\r\nInteresting scenario: autocomplete for \"AspnetCore\". May work well on old impl but not on new one.\r\n\r\nOn service index, consider deploying autocomplete resource after the search resource."},{"Id":"10626603950","Type":"IssuesEvent","CreatedAt":"2019-10-14T16:52:41","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7610","RelatedDescription":"Closed issue \"Auxiliary2AzureSearch is stuck in PROD\" (#7610) at NuGet/NuGetGallery","RelatedBody":"This is because there are too many download count decreases by its own definition. The max it allows is 5,000. There are 10,603."},{"Id":"10626552521","Type":"PullRequestEvent","CreatedAt":"2019-10-14T16:45:18","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7626","RelatedDescription":"Opened pull request \"Merge branch 'dev' to master\" (#7626) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10614928159","Type":"IssuesEvent","CreatedAt":"2019-10-12T00:04:35","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7625","RelatedDescription":"Opened issue \"[GitHub Indexer] Add run duration telemetry\" (#7625) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10614664595","Type":"PullRequestEvent","CreatedAt":"2019-10-11T22:43:43","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7624","RelatedDescription":"Merged pull request \"Add nuget.org and nugettest.org to the HTTP URL rewrite list\" (#7624) at NuGet/NuGetGallery","RelatedBody":"https://github.com/nuget/engineering/issues/2756\r\nhttps://github.com/nuget/engineering/issues/2757\r\n\r\nWe should rewrite http nuget.org and nugettest.org links into https."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10629611773","Type":"IssuesEvent","CreatedAt":"2019-10-15T02:19:45","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8695","RelatedDescription":"Opened issue \"Stand-up PackageSources and enable tests that depend on them\" (#8695) at NuGet/Home","RelatedBody":"#8539  Details about Problem\r\nThe XPlatPushTests are disabled ([example](https://github.com/NuGet/NuGet.Client/blob/dev/test/NuGet.Core.FuncTests/NuGet.XPlat.FuncTest/XPlatPushTests.cs#L17)) because we do not currently have any test servers setup to do automated testing for HTTP responses. Ideally, we would setup something (perhaps even a BaGet server) that we can maintain and rely on for CI to automatically test things such as this. There may be other tests that need PackageSource help.\r\n\r\nThese tests have been skipped for a long while. I improved the Skip messages for the PackageSources that were there, and also improved the test in general so it's in a better place when we do reintroduce this test. \r\n\r\n"},{"Id":"10628508919","Type":"IssuesEvent","CreatedAt":"2019-10-14T21:51:56","Actor":"SotoiGhost","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8694","RelatedDescription":"Opened issue \"Adding a NuGet package to Visual Studio does not add .targets and .props files of package dependencies\" (#8694) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nIt seems that **.targets** and **.props** files of dependencies packages are not being added correctly to the **project.assets.json** file or to **Foo.csproj.nuget.g.props** and **Foo.csproj.nuget.g.targets** files. These files are added until you explicitly add the NuGet package to the project.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nThis happens with Visual Studio 2019 16.3 on Windows, Visual Studio for Mac Version 8.3.3 (build 8), also with Mono's MSBuild when using /t:restore the nuget.g.props and nuget.g.targets files do not contain dependencies.\r\n\r\nNuGet version: 5.3.0.6192\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100\r\n\r\nVS version (if appropriate): Visual Studio 2019 16.3 on Windows, Visual Studio for Mac Version 8.3.3 (build 8)\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): macOS Mojave 10.14.6 (18G103)\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nTest case: [AdMobTest.zip](https://github.com/NuGet/Home/files/3725941/AdMobTest.zip)\r\n\r\nSteps to reproduce the error:\r\n\r\n1. Open the test case.\r\n2. Add the `Xamarin.Firebase.iOS.Analytics` package.\r\n3. Build.\r\n\r\nWhen it fails, open the **AdMobTest.csproj.nuget.g.targets** and it will be just 1 import when it should be 3 imports due to dependencies. \r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\n[log.txt](https://github.com/NuGet/Home/files/3726527/log.txt)\r\n\r\n"},{"Id":"10627627902","Type":"IssuesEvent","CreatedAt":"2019-10-14T19:28:55","Actor":"RajuVCh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8693","RelatedDescription":"Opened issue \"internal 3rd party nuget packages management using packagereferances?\" (#8693) at NuGet/Home","RelatedBody":"Hi Team,\r\n\r\nKindly share any information on managing internal 3rdpary nuget packages. we are in the process migrating from packages.config. migration tools working for public nuget packages and for internal pacakges it nighter show log nor error. migrationbackup folder has packages.config file and .csproj file but not upgradelog.\r\n\r\nVS Version 2017.\r\n\r\nThanks.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nPlease read the following information before posting the issue.\r\n\r\n## Before posting the issue...\r\n\r\n* If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues)\r\n* If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place.\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10627567201","Type":"IssuesEvent","CreatedAt":"2019-10-14T19:19:21","Actor":"AArnott","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8692","RelatedDescription":"Opened issue \"restore fails when nuget.dgspec.json is \"used by another process\"\" (#8692) at NuGet/Home","RelatedBody":"I'm trying to renovate my PInvoke repo to use the latest .NET tooling, and in the process I've seen a high failure rate during package restore. For example in [this build](https://dev.azure.com/andrewarnott/OSS/_build/results?buildId=1855&view=logs&j=2d2b3007-3c5c-5840-9bb0-2b1ea49925f3&t=abae1f68-3c73-5bff-491f-f2b908580ce6&l=82):\r\n\r\n> D:\\a\\1\\s\\src\\BCrypt\\BCrypt.csproj : error : One or more errors occurred. (The process cannot access the file 'C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\d7b7ea43-5b9f-4c98-9945-129825a55c6f.nuget.dgspec.json' because it is being used by another process.)\r\n\r\nI've seen this error 2-3 times out of just half a dozen builds in Azure Pipelines.\r\n\r\nrestore command: `dotnet restore`\r\ndotnet SDK: v2.2.401\r\nnuget cred provider: v0.1.19 (from https://api.github.com/repos/Microsoft/artifacts-credprovider/releases/latest)\r\n\r\nThis particular repo (https://github.com/aarnott/pinvoke) has several dozen projects in a very flat P2P hierarchy, so a great many projects may be restoring in parallel, perhaps leading to this file access conflict."},{"Id":"10627268797","Type":"IssuesEvent","CreatedAt":"2019-10-14T18:33:16","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8382","RelatedDescription":"Closed issue \"Undo temporary workaround for MSBuild bug causing Linux to timeout\" (#8382) at NuGet/Home","RelatedBody":"## Details about Problem\r\nIn [this issue](https://github.com/NuGet/Home/issues/8381), we set an Environment Variable to avoid a timeout caused by MSBuild: `MSBUILDDISABLENODEREUSE=1`.\r\n\r\nOnce MSBuild resolves [this issue](https://github.com/dotnet/cli/issues/11560), we should stop using this Environment Variable."},{"Id":"10626876025","Type":"IssuesEvent","CreatedAt":"2019-10-14T17:33:35","Actor":"DanteGagne","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8691","RelatedDescription":"Opened issue \"Error List pops up after use of package manager, even without messages and with option to show on build disabled\" (#8691) at NuGet/Home","RelatedBody":"I did a simple repro…\r\n\r\n1.\tNew WPF project\r\n2.\tClose Error List\r\n3.\tUncheck “Always show Error List if build finishes with errors” under Projects and Solutions > General\r\n4.\tManage NuGet Packages\r\n5.\tSwitch to Browse\r\n6.\tSelect a package and hit Install (I did it with Newtonsoft.Json)\r\n7.\tAccept any interim dialogs\r\n\r\nExpected: Error List is still closed \r\nCurrent: Error List comes up with no messages in it. I would forgive it if there was some error, but since nothing technically went wrong and the user says they don’t want it… why should it post?\r\n\r\nThis was the root cause of this item: https://developercommunity.visualstudio.com/idea/769040/error-list-window-is-always-shown.html\r\n\r\n"},{"Id":"10625577294","Type":"IssuesEvent","CreatedAt":"2019-10-14T14:45:36","Actor":"carpnick","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8690","RelatedDescription":"Opened issue \"Make it easier to work on integration tests within visual studio\" (#8690) at NuGet/Home","RelatedBody":"Development Issue:\r\nWhile working on https://github.com/NuGet/NuGet.Client/pull/3075, specifically adding a test to Dotnet.Integration.Test.DotnetRestoreTests, I was struggling to understand why debug builds were not working.  Currently the code depends on nuget packages (within artifacts/nupkgs) folder to be updated .  When you are trying to work on an integration test, VS doesnt by default run the pack target on the builds.\r\n\r\nThis lead to a couple hours wasted figuring out what the problem is for a new developer.  Suggest we update the copy to use the artifacts from the artifacts folders directly OR we make the default build targets also include the packaging of the packages."},{"Id":"10622965501","Type":"IssuesEvent","CreatedAt":"2019-10-14T08:53:54","Actor":"codermrrob","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8689","RelatedDescription":"Opened issue \"Fails to install any package\" (#8689) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx): 5.3.0.6251\r\n\r\ndotnet.exe --version (if appropriate): .NET Core SDK (3.0.100)\r\n\r\nVS version (if appropriate): 16.3.4\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win 10 1903 build 18362.418\r\n\r\nWorked before? If so, with which NuGet version:\r\nSame version worked before. Just stopped working.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new .Net Core class library, no dependencies, one empty class, also same for a new Console app both created in normal New Project way.\r\n\r\n2. From Package Manager console or 'Manage Packages' UI - it is the same result\r\n`install-package autofac`\r\n\r\n(the package is unimportant same for all packages)\r\n\r\n```\r\nPM> install-package autofac\r\ninstall-package : The operation failed as details for project ClassLibrary1 could not be loaded.\r\nAt line:1 char:1\r\n+ install-package autofac\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n Time Elapsed: 00:00:00.5614007\r\n```\r\n...\r\n\r\n## Other suggested things\r\n\r\nThis is happening for me with both newly created class libraries, console applications and also adding new projects into a solution.\r\n\r\nProjects created with the new Worker Service templates are not affected and nuget is working as normal within those projects.\r\n\r\nWork around:\r\n\r\n1) After the error unload/reload the project or restart VS.\r\n2) Open the 'Manage Packages for Solution' UI\r\n3) Change the package source (it can be changed back to the original, the act of changing seems important not what it is set to; I changed from 'All' to 'nuget.org' and back to 'All'. Without doing this the next step would fail.\r\n4) Browse or search package to install and install it successfully with the UI. Again, without this the next step would fail.\r\n5) Now it is once again possible to install-packages normally with the console as well\r\n\r\nThis is not a global solution and I have to do for each new project I create (except worker services).\r\n\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\nThere is nothing useful I can see in the log generated from devenv /Log \\VSLog.xml but it is attached just in case I missed something. It is the log from starting VS, creating the project and attempting to `install-package autofac` resulting in the above error.\r\n\r\n[vslog3.zip](https://github.com/NuGet/Home/files/3723624/vslog3.zip)\r\n\r\nAnd the sample project attached which created this log\r\n\r\n[ConsoleApp5.zip](https://github.com/NuGet/Home/files/3723628/ConsoleApp5.zip)\r\n\r\n\r\nVery helpful if you can zip a project and paste into this issue!"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-10-15T05:30:45.5099593Z","RunDurationInMilliseconds":2377}