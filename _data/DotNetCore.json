{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing ML.NET 0.9 – Machine Learning for .NET","PublishedOn":"2019-01-10T20:34:16+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Announcing ML.NET 0.9 &#8211; Machine Learning for .NET ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/10/announcing-ml-net-0-9-machine-learning-for-net/","RawContent":null},{"Title":"Tell us your thoughts on ML.NET, an open source and cross-platform machine learning framework","PublishedOn":"2019-01-09T17:31:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers. .NET developers can use their C# or F# skills to easily integrate custom machine learning into their...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/09/tell-us-your-thoughts-on-ml-net/","RawContent":null},{"Title":".NET Core January 2019 Updates – 2.1.7 and 2.2.1","PublishedOn":"2019-01-09T02:07:05+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2019 Update. These updates contain security and reliability fixes. .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( Download &#124; Release Notes ) .NET Core...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-core-january-2019-update/","RawContent":null},{"Title":".NET Framework January 2019 Security and Quality Rollup","PublishedOn":"2019-01-08T18:59:07+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the January 2019 Security and Quality Rollup. Security CVE-2019-0545 – Windows Security Feature Bypass Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3707","PublishedOn":"2018-12-15T02:11:55+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We have another early access build to share today! This release includes several accessibility, performance, reliability and stability fixes across the major framework libraries. We will continue to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/14/announcing-net-framework-4-8-early-access-build-3707/","RawContent":null},{"Title":"Visual Studio 2019 Preview .NET Productivity","PublishedOn":"2018-12-14T00:13:41+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As you hopefully heard, the first preview of Visual Studio 2019 is now available. In this post I’ll cover some of the productivity improvements for .NET developers we’re most excited about. For a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/13/visual-studio-2019-net-productivity/","RawContent":null},{"Title":".NET Framework December 2018 Security and Quality Rollup","PublishedOn":"2018-12-11T18:23:48+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the December 2018 Security and Quality Rollup. Security CVE-2018-8540 – Windows Remote Code Execution Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/11/net-framework-december-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Open Sourcing XAML Behaviors for WPF","PublishedOn":"2018-12-10T19:27:32+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are excited to announce that we are open sourcing XAML Behaviors for WPF. In the past, we open sourced XAML Behaviors for UWP which has been a great success and the Behaviors NuGet package...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/10/open-sourcing-xaml-behaviors-for-wpf/","RawContent":null},{"Title":"Take C# 8.0 for a spin","PublishedOn":"2018-12-05T23:51:33+00:00","CommentsCount":99,"FacebookCount":0,"Summary":"Take C# 8.0 for a spin Yesterday we announced the first preview of both Visual Studio 2019 (Making every developer more productive with Visual Studio 2019) and .NET Core 3.0 (Announcing .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/take-c-8-0-for-a-spin/","RawContent":null},{"Title":".NET Framework December 5, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2018-12-05T22:00:42+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the December 5, 2018 Preview of .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/net-framework-december-4-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8887340703","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Opened pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8860916656","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:28:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Merged pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8837337598","Type":"PullRequestEvent","CreatedAt":"2019-01-05T03:23:40","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Merged pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833785661","Type":"PullRequestEvent","CreatedAt":"2019-01-04T11:57:11","Actor":"MarcBruins","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Opened pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833210040","Type":"PullRequestEvent","CreatedAt":"2019-01-04T09:40:51","Actor":"ErikEJ","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Opened pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8831721539","Type":"PullRequestEvent","CreatedAt":"2019-01-04T00:22:43","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Merged pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""},{"Id":"8830688181","Type":"PullRequestEvent","CreatedAt":"2019-01-03T20:00:04","Actor":"carloscds","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Opened pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8852414845","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:17:46","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Opened issue \"January 2019 .NET Updates\" (#96) at dotnet/announcements","RelatedBody":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852318390","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Opened issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n"},{"Id":"8852317992","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:24","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n"},{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8887264104","Type":"PullRequestEvent","CreatedAt":"2019-01-15T04:48:50","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21989","RelatedDescription":"Merged pull request \"fix the help message for runtest.sh so the gcstress instructions aren't split across multiple lines\" (#21989) at dotnet/coreclr","RelatedBody":""},{"Id":"8887129704","Type":"PullRequestEvent","CreatedAt":"2019-01-15T03:59:13","Actor":"A-And","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21727","RelatedDescription":"Merged pull request \"Large version bubble Support\" (#21727) at dotnet/coreclr","RelatedBody":"Opening this up for preliminary comments. \r\nThe below changes pass all Pri-0 tests both with and without the `/largeversionbubble` switch enabled. Without the switch specified the changes don't introduce any functional changes.\r\n\r\nThese changes treat the entire input as a singular version bubble. \r\n\r\ncc @sergiy-k "},{"Id":"8887094358","Type":"IssuesEvent","CreatedAt":"2019-01-15T03:47:19","Actor":"jkoritzinsky","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/19654","RelatedDescription":"Closed issue \"P/Invoke custom marshaler sometimes fails type cast\" (#19654) at dotnet/coreclr","RelatedBody":"I'm trying to track down why [my upgrade](https://github.com/AArnott/Nerdbank.GitVersioning/pull/210) of libgit2sharp to 0.25.2 led to nerdbank.gitversioning to fail (reliably) on a seemingly random set of projects across multiple repos.\r\n\r\nIn [the failure](https://github.com/AArnott/Nerdbank.GitVersioning/issues/215), [a type check](https://github.com/libgit2/libgit2sharp/blob/5199c83d37f7baf5a775eacaffd66322b1d90ef1/LibGit2Sharp/Core/FilePathMarshaler.cs#L67) fails after passing through [a very clearly type constraining method](https://github.com/libgit2/libgit2sharp/blob/5199c83d37f7baf5a775eacaffd66322b1d90ef1/LibGit2Sharp/Core/NativeMethods.cs#L1395-L1398). Considering that perhaps it's a matter of assembly double-loading, I checked. The managed debugger reports the assembly is loaded once, and that the AssemblyLoadContext is the same at both points of the callstack leading up to the failure. \r\n\r\nThis repros only on .NET Core (2.1), and does so on Windows and Linux (I didn't test Mac). This same code works fine within MSBuild running on the .NET Framework.\r\n\r\n[The repro](https://github.com/AArnott/Nerdbank.GitVersioning/issues/215#issuecomment-415785686) is super reliable and relatively simple. @rainersigwald also has [a great repro](https://github.com/AArnott/Nerdbank.GitVersioning/issues/215#issuecomment-415774717)."},{"Id":"8886879072","Type":"IssuesEvent","CreatedAt":"2019-01-15T02:41:19","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21974","RelatedDescription":"Closed issue \"[x64\\windows]  Interop_COM._NativeClients_Primitives_Primitives_._NativeClients_Primitives_Primitives_cmd failed with Assert failure\" (#21974) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/x64_checked_windows_nt_standalone_gc/438/testReport/\r\n**Failed test:**\r\n Interop_COM._NativeClients_Primitives_Primitives_._NativeClients_Primitives_Primitives_cmd\r\n\r\n**Failed log:**\r\n```\r\nInterop_COM._NativeClients_Primitives_Primitives_._NativeClients_Primitives_Primitives_cmd [FAIL]\r\n        \r\n        Assert failure(PID 1268 [0x000004f4], Thread: 12584 [0x3128]): FAILED(hr)\r\n        \r\n        CORECLR! ThrowHR + 0x95 (0x00007ffc`62150b59)\r\n        CORECLR! InitializeGarbageCollector + 0x16B (0x00007ffc`62193683)\r\n        CORECLR! EEStartupHelper + 0x832 (0x00007ffc`6219157a)\r\n        CORECLR! `EEStartup'::`9'::__Body::Run + 0x84 (0x00007ffc`621940c4)\r\n        CORECLR! EEStartup + 0x49 (0x00007ffc`62190ce9)\r\n        CORECLR! EnsureEEStarted + 0x1A9 (0x00007ffc`62191b8d)\r\n        CORECLR! CorRuntimeHostBase::Start + 0xD6 (0x00007ffc`6219d596)\r\n        CORECLR! CorHost2::Start + 0x148 (0x00007ffc`6219d428)\r\n        CORECLR! coreclr_initialize + 0x1BB (0x00007ffc`6211ed1b)\r\n        CORESHIM! coreclr::Initialize + 0xCD (0x00007ffc`66765e11)\r\n            File: d:\\j\\workspace\\x64_checked_w---d9cea6d6\\src\\utilcode\\ex.cpp Line: 963\r\n            Image: D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\COM\\NativeClients\\Primitives\\COMClientPrimitives.exe\r\n        \r\n        \r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Reports\\Interop.COM\\NativeClients\\Primitives\\Primitives.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n        \r\n        D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\COM\\NativeClients\\Primitives>set COMPLUS_GCNAME=clrgc.dll \r\n        Copying 'D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreShim.dll'...\r\n                1 file(s) copied.\r\n         \"D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" Primitives.exe \r\n        Searching for exe to launch in D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\COM\\NativeClients\\Primitives...\r\n        Launching 'D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\COM\\NativeClients\\Primitives\\COMClientPrimitives.exe'...\r\n        \r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n  > D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\COM\\NativeClients\\Primitives\\Primitives.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\Interop.COM\\Interop.COM.XUnitWrapper.cs(179,0): at Interop_COM._NativeClients_Primitives_Primitives_._NativeClients_Primitives_Primitives_cmd()\r\n```"},{"Id":"8886878177","Type":"PullRequestEvent","CreatedAt":"2019-01-15T02:41:02","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21983","RelatedDescription":"Merged pull request \"Finding Standalone GC and CoreDisTools in non-standard host testing\" (#21983) at dotnet/coreclr","RelatedBody":"~~Update standalone GC search path to include probing the `CORE_ROOT` environment variable. This is done to ensure native COM tests that aren't hosted by `CoreRun.exe` can find the standalone GC.~~\r\n\r\n~~See https://github.com/dotnet/coreclr/pull/21261 for prior art.~~\r\n\r\nAlso look in the \"internal system directory\" (i.e. location of `coreclr.dll`) for standalone GC and coredistools.\r\n\r\ncc @jkoritzinsky "},{"Id":"8886674094","Type":"PullRequestEvent","CreatedAt":"2019-01-15T01:42:02","Actor":"erozenfeld","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21539","RelatedDescription":null,"RelatedBody":"Using this to do some CI testing.\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8886837231","Type":"IssuesEvent","CreatedAt":"2019-01-15T02:28:39","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10475","RelatedDescription":"Closed issue \"Acquire and use AppHost for framework dependent apps targeting .NET Core 3 and up\" (#10475) at dotnet/cli","RelatedBody":"Currently, the AppHost is in the package dependency graph of Microsoft.NETCore.App, and the `ResolvePackageAssets` task finds it in the assets file so that it can be copied to the output directory and renamed for framework-dependent apps.\r\n\r\nWith .NET Core 3.0, we will be using [targeting packs](https://github.com/dotnet/cli/issues/10006) instead of package references, so we will need another way to acquire and locate the apphost.\r\n\r\nLikely, we will implement this by generating \"download only package references\" for a package which contains the app host.  This will depend on the RID, so we will need to use the RID graph (see #10104) to resolve the best apphost RID to use.\r\n\r\n"},{"Id":"8886625182","Type":"PullRequestEvent","CreatedAt":"2019-01-15T01:27:42","Actor":"jainaashish","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10604","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.9.3-rtm.5777 into cli release/2.2.1xx\" (#10604) at dotnet/cli","RelatedBody":"@livarcocc "},{"Id":"8886439736","Type":"IssuesEvent","CreatedAt":"2019-01-15T00:33:53","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/issues/10602","RelatedDescription":"Reopened issue \"Dotnet publish with -r ubuntu-x64 and --self-contained=false fails to find framework\" (#10602) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n```\r\n$ docker run -it ubuntu:18.04 bash\r\n$ apt-get update\r\n$ apt-get install liblttng-ust0 libcurl3 libssl1.0.0 libkrb5-3 zlib1g libicu60 -y\r\n$ dotnet --version\r\n> 2.2.101\r\n$ dotnet --list-runtimes\r\n> Microsoft.AspNetCore.All 2.2.1 [/tmp/dotnet/shared/Microsoft.AspNetCore.All]\r\n> Microsoft.AspNetCore.App 2.2.1 [/tmp/dotnet/shared/Microsoft.AspNetCore.App]\r\n> Microsoft.NETCore.App 2.2.1 [/tmp/dotnet/shared/Microsoft.NETCore.App]\r\n$ dotnet new webapi\r\n$ dotnet publish -r ubuntu-x64 --self-contained=false\r\n$ cd bin/Debug/netcoreapp2.2/ubuntu-x64/publish/\r\n$ ./project --server.urls http://0.0.0.0:8080\r\n> The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n  - Check application dependencies and target a framework version installed at:\r\n      /tmp/project/bin/Debug/netcoreapp2.2/ubuntu-x64/publish/\r\n  - Installing .NET Core prerequisites might help resolve this problem:\r\n      http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n  - The .NET Core framework and SDK can be installed from:\r\n      https://aka.ms/dotnet-download\r\n```\r\n\r\n## Expected  behavior\r\n\r\nWe are not sure if this is a valid workflow but we expected `Microsoft.AspNetCore.App` to be found.\r\n\r\n## Actual behavior\r\n\r\nThe error seen above with missing framework.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    29ae5ac2c2\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  14.04\r\n OS Platform: Linux\r\n RID:         ubuntu.14.04-x64\r\n Base Path:   /tmp/dotnet/sdk/2.2.101/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.2.101 [/tmp/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.1 [/tmp/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.1 [/tmp/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [/tmp/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nThis is using an SDK built from source against ubuntu 18.04 and everything else seems to be working: https://github.com/dotnet/cli/blob/master/Documentation/project-docs/developer-guide.md#buildingrunning\r\n\r\nI don't see why the framework wouldn't be found. Should this workflow with `dotnet publish -r ubuntu-x64 --self-contained=false` be valid? I've found some other issues where the `-r` flag and `--self-contained=false` are used together. What should we expect to happen in this case? Is the app packaged with the specific runtime but not entirely self-contained?\r\n\r\nThanks for the help!"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8884663796","Type":"PullRequestEvent","CreatedAt":"2019-01-14T18:45:01","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Merged pull request \"Remove the manual config system\" (#1040) at dotnet/standard","RelatedBody":"Fixes https://github.com/dotnet/standard/issues/1032"},{"Id":"8884663779","Type":"IssuesEvent","CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1032","RelatedDescription":"Closed issue \"Remove slim configuration system and stop overloading Configuration\" (#1032) at dotnet/standard","RelatedBody":"We should stop overloading the `Configuration` property in favor of the right msbuild properties and remove the `ConfigurationGroup` property to enable native VS support and remove a lot of obsolete stuff.\r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)'==''\">\r\n    <ConfigurationGroup Condition=\"'$(ConfigurationGroup)'==''\">Debug</ConfigurationGroup>\r\n    <Configuration>$(ConfigurationGroup)</Configuration>\r\n    <Configuration Condition=\"'$(TargetGroup)'!=''\">$(TargetGroup)_$(Configuration)</Configuration>\r\n    <Configuration Condition=\"'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'\">$(OSGroup)_$(Configuration)</Configuration>\r\n  </PropertyGroup>\r\n```\r\n\r\ncc @ericstj @wtgodbe "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8887281521","Type":"PullRequestEvent","CreatedAt":"2019-01-15T04:55:22","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34598","RelatedDescription":"Opened pull request \"Update dependencies from dotnet/core-setup\" (#34598) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview-27314-5\r\n- Microsoft.NETCore.DotNetHost - 3.0.0-preview-27314-5\r\n- Microsoft.NETCore.DotNetHostPolicy - 3.0.0-preview-27314-5\r\n\r\n"},{"Id":"8887273583","Type":"IssuesEvent","CreatedAt":"2019-01-15T04:52:27","Actor":"ZMoscipan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34597","RelatedDescription":"Opened issue \"IIS Web App Freezes for SQL server Network Error in Startup\" (#34597) at dotnet/corefx","RelatedBody":"I have app where Startup method must access SQL server to get param for Middleware and services.\r\nIf application is reloaded and Startup method has no no access to the SQL Server at this moment, it freezes Web app permanently.  Consecutive requests are not processed even if the SQL server become available later.\r\nError Handler Returns:\r\nAn error occurred while starting the application.\r\nWin32Exception: No such host is known\r\nUnknown location\r\n\r\nSqlException: A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 0 - No such host is known.)\r\nSystem.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, uint waitForMultipleObjectsTimeout, bool allowCreate, bool onlyOneCheckConnection, DbConnectionOptions userOptions, out DbConnectionInternal connection)\r\n\r\nWebsite enabled log:\r\nApplication startup exception: System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 0 - No such host is known.) ---> System.ComponentModel.Win32Exception (11001): No such host is known\r\n   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling, String accessToken)\r\n   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n   at System.Data.SqlClient.SqlConnection.Open()\r\n   at GtsCustomLogger.SqlLogger.WriteToSqlServer(String storageLocation, GtsLogger loggerData)  ...\r\n   at GtsCustomLogger.GtsLogger.LogData() in ...\r\n   at AuthServerJwt.Startup.LogMiddlewareOK() in ...\r\n   at AuthServerJwt.Startup.Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory) in ...\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.Configure(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Mvc.Internal.MiddlewareFilterBuilderStartupFilter.<>c__DisplayClass0_0.<Configure>g__MiddlewareFilterBuilder|0(IApplicationBuilder builder)\r\n   at Microsoft.AspNetCore.Server.IISIntegration.IISSetupFilter.<>c__DisplayClass4_0.<Configure>b__0(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.HostFilteringStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Hosting.Internal.AutoRequestServicesStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder builder)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\nClientConnectionId:00000000-0000-0000-0000-000000000000\r\nError Number:11001,State:0,Class:20\r\ncrit: Microsoft.AspNetCore.Hosting.Internal.WebHost[6]\r\n      Application startup exception\r\nSystem.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 0 - No such host is known.) ---> System.ComponentModel.Win32Exception (11001): No such host is known\r\n   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling, String accessToken)\r\n   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n   at System.Data.SqlClient.SqlConnection.Open()\r\n   at GtsCustomLogger.SqlLogger.WriteToSqlServer(String storageLocation, GtsLogger loggerData)...\r\nSimply test:\r\n1. Have access to the SQL Server in Startup method.\r\n2. Publish the App to IIS.\r\n3. Request the page from the browser.\r\n4. Disconnect SQL server \r\n5. Restart Web app\r\n6. Request the page from the browser. (Will get error)\r\n7. Connect SQL server\r\n8. Request the page from the browser. (Will get error)\r\n9. Repeat  8. (Will get error)\r\n10. Restart Application Pool manually\r\n11. Request the page from the browser. (Works fine)\r\n\r\nCan't restart Application Pool in code do to security errors.\r\n"},{"Id":"8886869298","Type":"PullRequestEvent","CreatedAt":"2019-01-15T02:38:20","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34594","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#34594) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh"},{"Id":"8886850763","Type":"PullRequestEvent","CreatedAt":"2019-01-15T02:32:42","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34596","RelatedDescription":"Opened pull request \"Update CoreClr, CoreFx to preview-27315-01, preview.19064.1, respectively (master)\" (#34596) at dotnet/corefx","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"8886785787","Type":"PullRequestEvent","CreatedAt":"2019-01-15T02:13:44","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34595","RelatedDescription":"Opened pull request \"skip SetDateTimeMax test on 32b Unix platforms\" (#34595) at dotnet/corefx","RelatedBody":"fixes #33966 \r\n\r\nOn 32 bit platforms time_t is only 32 bit (signed) and cannot hold time beyond ~ 2038. This is conceptually product bug/OS limitation,. Since we already skio  on OSX I simply extended that.\r\n\r\nWith this all tests pass (including outerloop)\r\n```\r\n    Finished:    System.IO.FileSystem.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.IO.FileSystem.Tests  Total: 4192, Errors: 0, Failed: 0, Skipped: 10, Time: 130.589s\r\n  /ssd/toweinfu/wfurt-corefx-arm/src/System.IO.FileSystem/tests\r\n  ----- end 01:50:56 ----- exit code 0 ----------------------------------------------------------\r\n  exit code 0 means Exited Successfully\r\n```\r\n"},{"Id":"8886610434","Type":"PullRequestEvent","CreatedAt":"2019-01-15T01:23:34","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34344","RelatedDescription":"Merged pull request \"Consume core-setup using darc\" (#34344) at dotnet/corefx","RelatedBody":"We need a successful core-setup build now that I've setup the channels for core-setup when publishing and also I set up a subscription to have corefx depend on core-setup in the 3 dev channel.\r\n\r\nOnce there is a build, I'll run darc manually and update this PR.\r\n\r\ncc: @danmosemsft "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8887353766","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:20:49","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32471","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#32471) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8887353241","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:20:38","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32470","RelatedDescription":"Opened pull request \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32470) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8887353070","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:20:35","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32469","RelatedDescription":"Opened pull request \"Merge dev16.0-preview2-vs-deps to master-vs-deps\" (#32469) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8887352765","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:20:28","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32468","RelatedDescription":"Opened pull request \"Merge master to dev16.1-preview1\" (#32468) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8887340279","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:04","Actor":"zaytsev-victor","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32467","RelatedDescription":"Opened pull request \"Incorrect IDE0004 \"Cast is redundant\" when passing enum cast to int as constructor parameter accepting int\" (#32467) at dotnet/roslyn","RelatedBody":"This is a fix for #31963\r\n\r\n```ReplacementChangesSemanticsForNode``` did not correctly detect that the fixed expression would create an error in the new code."},{"Id":"8887298954","Type":"IssuesEvent","CreatedAt":"2019-01-15T05:00:50","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31019","RelatedDescription":"Closed issue \"IWorkspaceProjectContext.Dispose() still has UI thread affinity\" (#31019) at dotnet/roslyn","RelatedBody":"@davkean still discovered it's got one icky UI thread requirement here:\r\n\r\n```\r\n    Microsoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.Contract.ThrowIfFalse(bool condition, string message)    Unknown\r\n    Microsoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.AssertIsForeground()    Unknown\r\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.SetDocumentContext(Microsoft.CodeAnalysis.DocumentId documentId)    Unknown\r\n    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.ClearOpenDocument(Microsoft.CodeAnalysis.DocumentId documentId, bool isSolutionClosing)    Unknown\r\n    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.ClearOpenDocuments(Microsoft.CodeAnalysis.ProjectId projectId)    Unknown\r\n    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.ClearProjectData(Microsoft.CodeAnalysis.ProjectId projectId)    Unknown\r\n    Microsoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Workspace.OnProjectRemoved(Microsoft.CodeAnalysis.ProjectId projectId)    Unknown\r\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.OnProjectRemoved(Microsoft.CodeAnalysis.ProjectId projectId)    Unknown\r\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.RemoveFromWorkspace.AnonymousMethod__86_0(Microsoft.CodeAnalysis.Workspace w)    Unknown\r\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyChangeToWorkspace(System.Action<Microsoft.CodeAnalysis.Workspace> action)    Unknown\r\n    Microsoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.RemoveFromWorkspace()    Unknown\r\n    Microsoft.VisualStudio.LanguageServices.Implementation.dll!Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProject.Dispose()    Unknown\r\n```"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8886868214","Type":"PullRequestEvent","CreatedAt":"2019-01-15T02:38:00","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6823","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6823) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh"},{"Id":"8886516496","Type":"PullRequestEvent","CreatedAt":"2019-01-15T00:56:26","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6823","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6823) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8886494483","Type":"PullRequestEvent","CreatedAt":"2019-01-15T00:50:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6822","RelatedDescription":"Merged pull request \"Fix a thread pool deadlock issue\" (#6822) at dotnet/corert","RelatedBody":"Fixes https://github.com/dotnet/corert/issues/6780:\r\n- `ShouldStopProcessingWorkNow` was checking the count of existing threads and decrementing the count of processing threads. Due to differences from CoreCLR, the condition needs to be different. The effect was that when hill climbing decides to crease the thread count goal, `ShouldStop...` stops all threads that were processing work if there are enough existing threads, and even though there are several thread requests, the now-all-waiting threads are not released to process more work, leading to deadlock. The condition in `ShouldAdjustMaxWorkersActive` was also incorrect, fixed both.\r\n- Fixed a few other small things that I saw\r\n\r\nPerf results for this test case:\r\n\r\n```c#\r\n        int iterationCount = 20_000_000;\r\n        var done = new ManualResetEvent(false);\r\n\r\n        WaitCallback wc = null;\r\n        wc = delegate\r\n        {\r\n            if (Interlocked.Decrement(ref iterationCount) == 0)\r\n            {\r\n                done.Set();\r\n            }\r\n            else\r\n            {\r\n                ThreadPool.QueueUserWorkItem(wc);\r\n            }\r\n        };\r\n\r\n        var sw = Stopwatch.StartNew();\r\n        for (int i = 0, n = Environment.ProcessorCount; i < n; ++i)\r\n        {\r\n            ThreadPool.QueueUserWorkItem(wc);\r\n        }\r\n        done.WaitOne();\r\n        sw.Stop();\r\n        Console.WriteLine($\"{sw.Elapsed.TotalMilliseconds,10:0.00}\");\r\n```\r\n\r\nAs written:\r\n\r\n```\r\nwindows coreclr: 2213\r\n  linux coreclr: 2160\r\n windows corert: 2049\r\n   linux corert: 3302\r\n```\r\n\r\nAfter adding some delay to the thread (calculate Fib(15) recursively), with 2 M work items instead of 20 M:\r\n\r\n```\r\nwindows coreclr: 1840\r\n  linux coreclr: 2409\r\n windows corert: 1528\r\n   linux corert: 1977\r\n```\r\n\r\nI don't fully understand yet why the CoreRT implementation on Linux is relatively slower when there is no delay, needs further investigation. The same implementation on Windows is not hitting the issue, and there appears to be something to do with scheduling and threads falling into a certain pattern."},{"Id":"8886494472","Type":"IssuesEvent","CreatedAt":"2019-01-15T00:50:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6780","RelatedDescription":"Closed issue \"Potential deadlock?\" (#6780) at dotnet/corert","RelatedBody":"@jkotas I tried to run all the benchmarks from `dotnet/performance` repository for CoreRT (https://github.com/dotnet/performance/pull/218)\r\n\r\nI started all the benchmarks before going to sleep and expected that in the morning I am going to have all the results ready waiting for me. However, the run got deadlocked after 1h and I don't have full results yet.\r\n\r\nBenchmark which got deadlocked comes from [CoreFX](https://github.com/dotnet/corefx/blob/4378851bc5fd0e3c5043a6d0a3ac835e838fcf7d/src/System.Collections.Concurrent/tests/Performance/Perf.ConcurrentStack.cs#L146) and I ported in the following [way](https://github.com/dotnet/performance/blob/3941f11e000edd7a404599fc2e401129c25bc4ad/src/benchmarks/micro/corefx/System.Collections/Concurrent/AddRemoveFromDifferentThreads.cs#L71-L107) to the performance repo.\r\n\r\n@stephentoub could you please take a look at my port? I double checked it and it looks good to me.\r\n\r\nI was able to create a small repro without BenchmarkDotNet dependency and reproduce the deadlock on my Ubuntu machine:\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Collections.Concurrent;\r\n\r\nnamespace BenchmarkDotNet.Autogenerated\r\n{\r\n    public class UniqueProgramName\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var sut = new AddRemoveFromDifferentThreads<int>();\r\n\r\n            for(int i = 0; i < 100; i++)\r\n            {\r\n                Console.WriteLine($\"ConcurrentStack {i}\");\r\n\r\n                sut.SetupConcurrentStackIteration();\r\n                sut.ConcurrentStack();\r\n                sut.IterationCleanup();\r\n            }\r\n\r\n            Console.WriteLine(\"OK\");\r\n        }\r\n    }\r\n\r\n    public class AddRemoveFromDifferentThreads<T>\r\n    {\r\n        const int NumThreads = 2;\r\n\r\n        public int Size = 2_000_000;\r\n\r\n        private Barrier _barrier;\r\n        private Task _producer, _consumer;\r\n\r\n        public void SetupConcurrentStackIteration()\r\n        {\r\n            var stack = new ConcurrentStack<T>();\r\n\r\n            _barrier = new Barrier(NumThreads + 1);\r\n            \r\n            _producer = Task.Factory.StartNew(() =>\r\n            {\r\n                _barrier.SignalAndWait();\r\n                _barrier.SignalAndWait();\r\n\r\n                for (int i = 0; i < Size; i++)\r\n                {\r\n                    stack.Push(default);\r\n                }\r\n            }, CancellationToken.None, TaskCreationOptions.LongRunning, TaskScheduler.Default);\r\n\r\n            _consumer = Task.Factory.StartNew(() =>\r\n            {\r\n                _barrier.SignalAndWait();\r\n                _barrier.SignalAndWait();\r\n\r\n                int count = 0;\r\n                while (count < Size)\r\n                {\r\n                    if (stack.TryPop(out T _))\r\n                    {\r\n                        count++;\r\n                    }\r\n                }\r\n            }, CancellationToken.None, TaskCreationOptions.LongRunning, TaskScheduler.Default);\r\n            \r\n            _barrier.SignalAndWait();\r\n        }\r\n\r\n        public void ConcurrentStack() => SignalAndWaitForAllTasks();\r\n\r\n        private void SignalAndWaitForAllTasks()\r\n        {\r\n            _barrier.SignalAndWait();\r\n\r\n            Task.WaitAll(_producer, _consumer);\r\n        }\r\n\r\n\tpublic void IterationCleanup() => _barrier.Dispose();\r\n    }\r\n}\r\n```\r\n\r\nThe code does not always get deadlocked, sometimes I need to re-run the app 3 times.\r\n\r\nProject file:\r\n\r\n```xml\r\n<Project ToolsVersion=\"15.0\">\r\n  <PropertyGroup>\r\n    <ImportDirectoryBuildProps>false</ImportDirectoryBuildProps>\r\n    <ImportDirectoryBuildTargets>false</ImportDirectoryBuildTargets>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <LangVersion>7.2</LangVersion>\r\n    <RuntimeIdentifier>linux-x64</RuntimeIdentifier>\r\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>\r\n    <DebugType>pdbonly</DebugType>\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <UseSharedCompilation>false</UseSharedCompilation>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\nNuGet.config\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    \r\n    <add key=\"coreRtNuGetFeed\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\r\n  </packageSources>\r\n</configuration>\r\n```\r\n\r\nbuild.sh\r\n\r\n```sh\r\n/home/adam/projects/performace_corert/tools/dotnet/x64/dotnet restore --packages \"/home/adam/projects/performace_corert/artifacts/packages\"  /p:UseSharedCompilation=false -r linux-x64\r\n/home/adam/projects/performace_corert/tools/dotnet/x64/dotnet build -c Release  /p:UseSharedCompilation=false -r linux-x64\r\n/home/adam/projects/performace_corert/tools/dotnet/x64/dotnet publish -c Release  /p:UseSharedCompilation=false -r linux-x64\r\n```\r\n\r\nI can't reproduce it for .NET Core 3.0 or any previous .NET Core.\r\n\r\n```log\r\nadam@adsitnik-ubuntu:~/projects/performace_corert$ hostnamectl\r\n   Static hostname: adsitnik-ubuntu\r\n         Icon name: computer-desktop\r\n           Chassis: desktop\r\n        Machine ID: 21e2aa4fa8ba420ca524966404ceec9d\r\n           Boot ID: 518e9cf7cbe34d948a2f9710b1d0f1b9\r\n  Operating System: Ubuntu 18.04.1 LTS\r\n            Kernel: Linux 4.15.0-42-generic\r\n      Architecture: x86-64\r\nadam@adsitnik-ubuntu:~/projects/performace_corert$ /home/adam/projects/performace_corert/tools/dotnet/x64/dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010006\r\n Commit:    166534d9bf\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /home/adam/projects/performace_corert/tools/dotnet/x64/sdk/3.0.100-preview-010006/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-010006 [/home/adam/projects/performace_corert/tools/dotnet/x64/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18630-0234 [/home/adam/projects/performace_corert/tools/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/home/adam/projects/performace_corert/tools/dotnet/x64/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nmicrosoft.dotnet.ilcompiler got resolved to 1.0.0-alpha-27305-01\r\n\r\n@jkotas should I disable this benchmark and try to get the results for other benchmarks?"},{"Id":"8886234708","Type":"PullRequestEvent","CreatedAt":"2019-01-14T23:38:17","Actor":"kouvel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6822","RelatedDescription":"Opened pull request \"Fix a thread pool deadlock issue\" (#6822) at dotnet/corert","RelatedBody":"Fixes https://github.com/dotnet/corert/issues/6780:\r\n- `ShouldStopProcessingWorkNow` was checking the count of existing threads and decrementing the count of processing threads. Due to differences from CoreCLR, the condition needs to be different. The effect was that when hill climbing decides to crease the thread count goal, `ShouldStop...` stops all threads that were processing work if there are enough existing threads, and even though there are several thread requests, the now-all-waiting threads are not released to process more work, leading to deadlock. The condition in `ShouldAdjustMaxWorkersActive` was also incorrect, fixed both.\r\n- Fixed a few other small things that I saw\r\n\r\nPerf results for this test case:\r\n\r\n```c#\r\n        int iterationCount = 20_000_000;\r\n        var done = new ManualResetEvent(false);\r\n\r\n        WaitCallback wc = null;\r\n        wc = delegate\r\n        {\r\n            if (Interlocked.Decrement(ref iterationCount) == 0)\r\n            {\r\n                done.Set();\r\n            }\r\n            else\r\n            {\r\n                ThreadPool.QueueUserWorkItem(wc);\r\n            }\r\n        };\r\n\r\n        var sw = Stopwatch.StartNew();\r\n        for (int i = 0, n = Environment.ProcessorCount; i < n; ++i)\r\n        {\r\n            ThreadPool.QueueUserWorkItem(wc);\r\n        }\r\n        done.WaitOne();\r\n        sw.Stop();\r\n        Console.WriteLine($\"{sw.Elapsed.TotalMilliseconds,10:0.00}\");\r\n```\r\n\r\nAs written:\r\n\r\n```\r\nwindows coreclr: 2213\r\n  linux coreclr: 2160\r\n windows corert: 2049\r\n   linux corert: 3302\r\n```\r\n\r\nAfter adding some delay to the thread (calculate Fib(15) recursively), with 2 M work items instead of 20 M:\r\n\r\n```\r\nwindows coreclr: 1840\r\n  linux coreclr: 2409\r\n windows corert: 1528\r\n   linux corert: 1977\r\n```\r\n\r\nI don't fully understand yet why the CoreRT implementation is relatively slower when there is no delay, needs further investigation."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8886610211","Type":"PullRequestEvent","CreatedAt":"2019-01-15T01:23:30","Actor":"jainaashish","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2821","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.9.3-rtm.5777 into sdk 2.2.1xx\" (#2821) at dotnet/sdk","RelatedBody":"@livarcocc "},{"Id":"8884346048","Type":"PullRequestEvent","CreatedAt":"2019-01-14T17:50:24","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2820","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.9.3-rtm.5777 into sdk\" (#2820) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.9.3-rtm.5777 into sdk release/2.1.5xx branch"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"open","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Open PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"399115118","IsPullRequest":true,"CreatedAt":"2019-01-15T04:48:50","Actor":"davmason","Number":"21989","RawContent":null,"Title":"fix the help message for runtest.sh so the gcstress instructions aren't split across multiple lines","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21989","RelatedDescription":"Closed or merged PR \"fix the help message for runtest.sh so the gcstress instructions aren't split across multiple lines\" (#21989)"},{"Id":"398733237","IsPullRequest":false,"CreatedAt":"2019-01-15T02:41:19","Actor":"AriNuer","Number":"21974","RawContent":null,"Title":"[x64\\windows]  Interop_COM._NativeClients_Primitives_Primitives_._NativeClients_Primitives_Primitives_cmd failed with Assert failure","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/x64_checked_windows_nt_standalone_gc/438/testReport/\r\n**Failed test:**\r\n Interop_COM._NativeClients_Primitives_Primitives_._NativeClients_Primitives_Primitives_cmd\r\n\r\n**Failed log:**\r\n```\r\nInterop_COM._NativeClients_Primitives_Primitives_._NativeClients_Primitives_Primitives_cmd [FAIL]\r\n        \r\n        Assert failure(PID 1268 [0x000004f4], Thread: 12584 [0x3128]): FAILED(hr)\r\n        \r\n        CORECLR! ThrowHR + 0x95 (0x00007ffc`62150b59)\r\n        CORECLR! InitializeGarbageCollector + 0x16B (0x00007ffc`62193683)\r\n        CORECLR! EEStartupHelper + 0x832 (0x00007ffc`6219157a)\r\n        CORECLR! `EEStartup'::`9'::__Body::Run + 0x84 (0x00007ffc`621940c4)\r\n        CORECLR! EEStartup + 0x49 (0x00007ffc`62190ce9)\r\n        CORECLR! EnsureEEStarted + 0x1A9 (0x00007ffc`62191b8d)\r\n        CORECLR! CorRuntimeHostBase::Start + 0xD6 (0x00007ffc`6219d596)\r\n        CORECLR! CorHost2::Start + 0x148 (0x00007ffc`6219d428)\r\n        CORECLR! coreclr_initialize + 0x1BB (0x00007ffc`6211ed1b)\r\n        CORESHIM! coreclr::Initialize + 0xCD (0x00007ffc`66765e11)\r\n            File: d:\\j\\workspace\\x64_checked_w---d9cea6d6\\src\\utilcode\\ex.cpp Line: 963\r\n            Image: D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\COM\\NativeClients\\Primitives\\COMClientPrimitives.exe\r\n        \r\n        \r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Reports\\Interop.COM\\NativeClients\\Primitives\\Primitives.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n        \r\n        D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\COM\\NativeClients\\Primitives>set COMPLUS_GCNAME=clrgc.dll \r\n        Copying 'D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreShim.dll'...\r\n                1 file(s) copied.\r\n         \"D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" Primitives.exe \r\n        Searching for exe to launch in D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\COM\\NativeClients\\Primitives...\r\n        Launching 'D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\COM\\NativeClients\\Primitives\\COMClientPrimitives.exe'...\r\n        \r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n  > D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\Interop\\COM\\NativeClients\\Primitives\\Primitives.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_checked_w---d9cea6d6\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\Interop.COM\\Interop.COM.XUnitWrapper.cs(179,0): at Interop_COM._NativeClients_Primitives_Primitives_._NativeClients_Primitives_Primitives_cmd()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21974","RelatedDescription":"Closed issue \"[x64\\windows]  Interop_COM._NativeClients_Primitives_Primitives_._NativeClients_Primitives_Primitives_cmd failed with Assert failure\" (#21974)"},{"Id":"399028621","IsPullRequest":true,"CreatedAt":"2019-01-15T02:41:01","Actor":"AaronRobinsonMSFT","Number":"21983","RawContent":null,"Title":"Finding Standalone GC and CoreDisTools in non-standard host testing","State":"closed","Body":"~~Update standalone GC search path to include probing the `CORE_ROOT` environment variable. This is done to ensure native COM tests that aren't hosted by `CoreRun.exe` can find the standalone GC.~~\r\n\r\n~~See https://github.com/dotnet/coreclr/pull/21261 for prior art.~~\r\n\r\nAlso look in the \"internal system directory\" (i.e. location of `coreclr.dll`) for standalone GC and coredistools.\r\n\r\ncc @jkoritzinsky ","Url":"https://github.com/dotnet/coreclr/pull/21983","RelatedDescription":"Closed or merged PR \"Finding Standalone GC and CoreDisTools in non-standard host testing\" (#21983)"},{"Id":"399036876","IsPullRequest":true,"CreatedAt":"2019-01-15T00:33:38","Actor":"jkoritzinsky","Number":"21984","RawContent":null,"Title":"Add test calling a NativeCallable via an unmanaged calli.","State":"closed","Body":"I noticed that we didn't have a test verifying that a method marked `NativeCallable` could be called from managed code via a `calli` instruction. Add a test verifying this behavior.","Url":"https://github.com/dotnet/coreclr/pull/21984","RelatedDescription":"Closed or merged PR \"Add test calling a NativeCallable via an unmanaged calli.\" (#21984)"},{"Id":"399097844","IsPullRequest":true,"CreatedAt":"2019-01-15T00:21:59","Actor":"fadimounir","Number":"21987","RawContent":null,"Title":"Removing noisy R2R compilation outputs, and putting them under the /verbose switch","State":"closed","Body":"If we're going to ship crossgen as a public and widely used tool for building .NET core apps, we need to cleanup the noisy output (mostly about unsupported R2R scenarios), which based on feedback, is pretty confusing especially when compilation succeeds at the end.","Url":"https://github.com/dotnet/coreclr/pull/21987","RelatedDescription":"Closed or merged PR \"Removing noisy R2R compilation outputs, and putting them under the /verbose switch\" (#21987)"},{"Id":"399121968","IsPullRequest":false,"CreatedAt":"2019-01-14T23:31:00","Actor":"BruceForstall","Number":"21990","RawContent":null,"Title":"ARM64: potential issue with frame pointer offsets out of range","State":"open","Body":"It appears there are a couple cases where the expression generated by arm64 codegen might not be encodable.\r\n\r\n```\r\nIn CodeGen::genReportGenericContextArg(regNumber initReg, bool* pInitRegZeroed)\r\n...\r\n    getEmitter()->emitIns_R_R_I(ins_Store(TYP_I_IMPL), EA_PTRSIZE, reg, genFramePointerReg(),\r\n                                compiler->lvaCachedGenericContextArgOffset());\r\n```\r\n\r\nWith a huge frame (>32760 bytes), generating `[fp + lvaCachedGenericContextArgOffset()]` won't be encodable, if it is placed on the frame far from `fp`.\r\n\r\n```\r\nIn genFnProlog():\r\n\r\n    if (compiler->info.compPublishStubParam)\r\n    {\r\n#if CPU_LOAD_STORE_ARCH\r\n        getEmitter()->emitIns_R_R_I(ins_Store(TYP_I_IMPL), EA_PTRSIZE, REG_SECRET_STUB_PARAM, genFramePointerReg(),\r\n                                    compiler->lvaTable[compiler->lvaStubArgumentVar].lvStkOffs);\r\n```\r\n\r\nIf the sub argument is far from `fp`, the expression won't be encodable.","Url":"https://github.com/dotnet/coreclr/issues/21990","RelatedDescription":"Open issue \"ARM64: potential issue with frame pointer offsets out of range\" (#21990)"},{"Id":"398497787","IsPullRequest":true,"CreatedAt":"2019-01-14T22:49:00","Actor":"tarekgh","Number":"21968","RawContent":null,"Title":"Fix TimeSpan parsing","State":"closed","Body":"This PR is addressing the issues discussed in the closed PR https://github.com/dotnet/coreclr/pull/21077\r\n\r\n### Summary\r\nWe are inconsistent when parsing the fraction part of the time spans especially when having a leading zeros. inconsistency means sometime we throw exception on some fraction string while not throwing in some other similar fractions. \r\nAlso, in some cases we parse the fraction incorrectly. here is some examples of the problems in the TimeSpan parsing; \r\n\r\n- Parsing \"0:00:00.00123456\" (8-digits) return the same result as parsing \"0:00:00.0123456\" which is wrong. The first should produce 12346 and the second should produce 123456.\r\n- \"0:00:00.00000098\" (8-digits) is parsed wrongly to 98 ticks while is should be parsed to 10 ticks (rounding it to 7-digits).\r\n- \"0:00:00.00000099\" (8-digits)  throwing exception while it should be parsed to to 10 ticks (rounding it to 7-digits without throwing).\r\n- Parsing \"0:0:0.00000001\" (8-digits) return same result when parsing \"01:01:01.0000001\" (7 digits).\r\n- parsing \"0:00:00.01000000\" (8-digits) produces 1000000 ticks while it should be 100000.\r\n\r\n### The Fix\r\nThe fix here is to make our behavior consistent and produce logical and expected results. The fix is when there is leading zeros, we'll round the number to 7-digits and succeed the parsing. here is the expectation of the cases mentioned above:\r\n- Parsing \"0:00:00.00123456\" (8-digits) will produce 12346 ticks while parsing \"0:00:00.0123456\" will produce 123456 ticks.\r\n- \"0:00:00.00000098\" (8-digits) will produce 10 ticks instead of 98 ticks.\r\n- \"0:00:00.00000099\" (8-digits)  will produce 10 ticks instead of 98 ticks and will not throw.\r\n- Parsing \"0:0:0.00000001\" (8-digits) will produce 0 ticks while \"01:01:01.0000001\" (7 digits) will produce 1 tick.\r\n- parsing \"0:00:00.01000000\" (8-digits) produces will produce 100000 ticks instead of 1000000 ticks.\r\n\r\n### Notes \r\n- We still be limited to Max value 9,999,999 for the fraction. this is not changed and we should fail as we used to if we encounter a bigger number.\r\n- We still limited of parsing numbers up to 0xFFFFFFF when parsing even if we have leading zeros. this is original design and we are keeping it. we can relax that if we find evidence it is needed.\r\n- As we are fixing the parsing, it is kind of breaking change if anyone depended on the wrong behavior\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/21968","RelatedDescription":"Closed or merged PR \"Fix TimeSpan parsing\" (#21968)"},{"Id":"399102670","IsPullRequest":true,"CreatedAt":"2019-01-14T22:31:51","Actor":"sbomer","Number":"21988","RawContent":null,"Title":"Add freebsd official build","State":"open","Body":"Should unblock https://github.com/dotnet/core-setup/pull/4964 and https://github.com/dotnet/corefx/pull/34169.\r\nHere's a job with a passing FreeBSD leg: https://dnceng.visualstudio.com/internal/_build/results?buildId=72433.","Url":"https://github.com/dotnet/coreclr/pull/21988","RelatedDescription":"Open PR \"Add freebsd official build\" (#21988)"},{"Id":"398990280","IsPullRequest":true,"CreatedAt":"2019-01-14T22:17:01","Actor":"stephentoub","Number":"21981","RawContent":null,"Title":"Fix TaskCompletionSource to avoid capturing ExecutionContext","State":"closed","Body":"When a TaskCompletionSource is constructed without any arguments, it simply creates a Task using a simple Task constructor that sets a few fields and is done.  When it's constructed with options, though, those options are validated, and then it calls into a shared routine that configures based on those options.  A previous set of changes resulted in erroneously doing the ExecutionContext.Capture for the task inside of that shared routine, rather than only doing it for tasks that actually have a delegate to be executed.  The net effect of this is that, while TaskCompletionSources created with the parameterless constructor correctly did not capture ExecutionContext, TaskCompletionSources created with options erroneously did; this doesn't have a functional impact, because that ExecutionContext isn't used for anything, but it can have a performance impact, in particular for memory, if the resulting Task is cached, and if the captured ExecutionContext holds onto some expensive object from an AsyncLocal, such that the cached Task then does so, too.\r\n\r\nThe fix is simply to move the capture from the shared routine that's invoked in two places to instead be done only in the one caller that's for tasks with delegates.\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/21662\r\ncc: @kouvel, @tarekgh, @davidfowl ","Url":"https://github.com/dotnet/coreclr/pull/21981","RelatedDescription":"Closed or merged PR \"Fix TaskCompletionSource to avoid capturing ExecutionContext\" (#21981)"},{"Id":"399005071","IsPullRequest":true,"CreatedAt":"2019-01-14T18:11:38","Actor":"jashook","Number":"21982","RawContent":null,"Title":"Remove tizen jobs as valid pr jobs","State":"closed","Body":"Related to https://github.com/dotnet/coreclr/issues/21422.\r\n\r\nNote that with the corefx job no longer working our armel jobs now will fail.","Url":"https://github.com/dotnet/coreclr/pull/21982","RelatedDescription":"Closed or merged PR \"Remove tizen jobs as valid pr jobs\" (#21982)"},{"Id":"398396056","IsPullRequest":true,"CreatedAt":"2019-01-14T17:43:52","Actor":"cshung","Number":"21961","RawContent":null,"Title":"Making sure the nativeCodeVersion flowing change works with Rejit and EnC","State":"closed","Body":"This change is done to address the unfinished business in pull request #21925.\r\n","Url":"https://github.com/dotnet/coreclr/pull/21961","RelatedDescription":"Closed or merged PR \"Making sure the nativeCodeVersion flowing change works with Rejit and EnC\" (#21961)"},{"Id":"398975555","IsPullRequest":true,"CreatedAt":"2019-01-14T16:44:18","Actor":"wayne-o","Number":"21980","RawContent":null,"Title":"Update gcenv.object.h","State":"open","Body":"Bringing it back to street level","Url":"https://github.com/dotnet/coreclr/pull/21980","RelatedDescription":"Open PR \"Update gcenv.object.h\" (#21980)"},{"Id":"398958100","IsPullRequest":true,"CreatedAt":"2019-01-14T16:06:16","Actor":"filipnavara","Number":"21979","RawContent":null,"Title":"Make ResourceManager use Assembly instead of RuntimeAssembly internally.","State":"open","Body":"This is clean-up to aid moving System.Resources classes into shared CoreLib partition.","Url":"https://github.com/dotnet/coreclr/pull/21979","RelatedDescription":"Open PR \"Make ResourceManager use Assembly instead of RuntimeAssembly internally.\" (#21979)"},{"Id":"398941088","IsPullRequest":true,"CreatedAt":"2019-01-14T15:30:57","Actor":"MichalStrehovsky","Number":"21978","RawContent":null,"Title":"Handle complex constrained calls with default interface methods","State":"open","Body":"This adds handling for the interface dispatch corner case where:\r\n\r\n* We have a constrained callsite to a method on a generic interface in shared code over a valuetype\r\n* The callsite cannot be statically resolved because the result of dispatch depends on the generic context\r\n* At runtime, the dispatch resolves to a default interface method\r\n\r\nThis would require us to have infrastructure to build \"boxing thunks\" - thunks that would box their first argument before dispatching to the default interface method implementation. Since this is a corner case and the fix is actually quite involved, we're making the runtime just throw in this situation (as opposed to causing a heap corruption).\r\n\r\nThe test is written so that it should pass both if the runtime chooses to throw, or if the runtime makes the boxing thunk and implements the specced behavior (we're not hardcoding the implementation limitation).\r\n\r\nI'm deleting the C# version of the test since the C# test doesn't compile, has diverged with the IL version, and results in an IL source code that is very much unreadable.\r\n\r\nResolves #15681. Resolves #15353.","Url":"https://github.com/dotnet/coreclr/pull/21978","RelatedDescription":"Open PR \"Handle complex constrained calls with default interface methods\" (#21978)"},{"Id":"398870586","IsPullRequest":false,"CreatedAt":"2019-01-14T12:38:44","Actor":"k15tfu","Number":"21977","RawContent":null,"Title":"COR_CTOR_METHOD_NAME_W/COR_CCTOR_METHOD_NAME_W and COR_ENUM_FIELD_NAME_W macros are of type wchar_t on Linux","State":"open","Body":"COR_CTOR_METHOD_NAME_W/COR_CCTOR_METHOD_NAME_W and COR_ENUM_FIELD_NAME_W macros are of type wchar_t on Linux but Profiler API uses WCHAR which is char16_t on non-Windows platforms.\r\n\r\nP.S. I can prepare a PR for this.","Url":"https://github.com/dotnet/coreclr/issues/21977","RelatedDescription":"Open issue \"COR_CTOR_METHOD_NAME_W/COR_CCTOR_METHOD_NAME_W and COR_ENUM_FIELD_NAME_W macros are of type wchar_t on Linux\" (#21977)"},{"Id":"398766424","IsPullRequest":false,"CreatedAt":"2019-01-14T06:49:32","Actor":"AriNuer","Number":"21976","RawContent":null,"Title":"[x64\\linux]Thousands of tests failed in x64_release_ubuntu_standalone_gc_tst","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_release_ubuntu_standalone_gc_tst/360/\r\n**One of the failed log:**\r\n```\r\nbaseservices_TieredCompilation._TieredVtableMethodTests_TieredVtableMethodTests_._TieredVtableMethodTests_TieredVtableMethodTests_sh [FAIL]\r\n        coreclr_initialize failed - status: 0x80004005\r\n        /n/nReturn code:      1/nRaw output file:      /mnt/j/workspace/dotnet_coreclr/master/x64_release_ubuntu_standalone_gc_tst/bin/tests/Linux.x64.Release/Interop/StructPacking/Reports/Interop.StructPacking/StructPacking/StructPacking.output.txt/nRaw output:/nBEGIN EXECUTION\r\n        /mnt/j/workspace/dotnet_coreclr/master/x64_release_ubuntu_standalone_gc_tst/bin/tests/Linux.x64.Release/Tests/Core_Root/corerun StructPacking.exe\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        /nTo run the test:/n> set CORE_ROOT=/mnt/j/workspace/dotnet_coreclr/master/x64_release_ubuntu_standalone_gc_tst/bin/tests/Linux.x64.Release/Tests/Core_Root/n> /mnt/j/workspace/dotnet_coreclr/master/x64_release_ubuntu_standalone_gc_tst/bin/tests/Linux.x64.Release/Interop/StructPacking/StructPacking/StructPacking.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21976","RelatedDescription":"Open issue \"[x64\\linux]Thousands of tests failed in x64_release_ubuntu_standalone_gc_tst\" (#21976)"},{"Id":"398667252","IsPullRequest":false,"CreatedAt":"2019-01-14T05:40:23","Actor":"damageboy","Number":"21971","RawContent":null,"Title":"Generic Type Check elision for enums","State":"closed","Body":"Hi,\r\nI'm trying to figure out if / how can generic type checking for enums be elided at JIT time...\r\nSample (of theoretical code that I would like the JIT to pick up and optimize away:\r\n\r\n[Link to sharplab.io](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxNMAfAAgBgARYCMA3ALABQueAygBYQIAOAMhMAHQBKArgHYwBLMHDKUAzAQBMeAMJ4A3hTzKCEuL25gaAe2EBRDVsXkVpvAEEkeAEJWZVgCJKVAX2fL3qggBY8AWQAKAEo8T2MzFWpdOANNPAg8AF4dfUN2B1EI5XNGRnUAEwBxdUQBAGMAiCDM109PUwBtACkBGGLeUoqYAE887QAzAKjUzSCggF16lQF+RF4IABsfC1yC9s6AHgAVAD4ArbwYIKnlcKzTAHoLvEYYBDxaRDg8ASh4m+0Z+HuYbUPHm4MCDCb54ADuzzBEH4hz+/W0CEgMGIeHhCBOZiueCgQkYC2eADdFtxnj08m8IXgytCqdAYP9noxPrN7vkBAg4GUYAtulZgNx6WiMZdrkQcG9ofk8HwANa8bRg3h4ADmJQQ5TwRIWJMOvTgFOeHTgUt+N24CyWMEeYGFKix2gFmoECQSZONeA5/SevDKcAotuUWKtrzwC202hlb2VCG0UCgfMdBxDcoVSog9KaAEktgBaQTCbF/YNvakWw4cv0mc5266qmAl3SMAT4qX5VOw95sjlc2llsGtWh4eV4YAIaFlWgzZUBl79PABN0DfYhRLJReDKDAbrwMYz0w5PK8fIBQjVGdwBZQZ4COcLvVLrYrtf3wZbnfHKvVswHgoBSRnz9qwvK9Z3nddlySZ8+g3WgESOD8vwiH8jwCMQAMQvBgOvW9wMfSDdWggJuCgWCEHgvcVGQ49vHQxCsNAu9CLw1cCLgJcvl3QCMKogIAFZaK/eibzAl8IJY8DuA4hCMMo1YUIANgEoDL2wkSmKfVilzDXhlU4mTZMPY8AHYlPOIScNE5ioLYwZzW0HS9P0lZDICAAOUysnMtSbLE6yl36MN00c/SeIATg8iIvMYnyrM0wY224YB8WCmSeMIHAIrMKLcI08D8k5IRFhS7i5OPQhTxqQSVIYnL8PA4BwwWYrELS/9KuUkDhOih9ctEicGGar80rQ9qzOqrravE0TCkk/JBurNKaNGzzxos9S6tEhx0zgLYhDgebzjS/jlsi1bvJ6jamL26hGGhA6sjSxSTqys7usGR92EzKBYjAaSQtKgJ5Ke89XsmvzBjFe7Tgo7IAcIEzntMNwuJWq8ZzOf6XMIdzEdqFHlGR0xPCwCQsF8HivniEIwgxIhQsqJTkYoFwgA==)\r\n```csharp\r\ninternal void AppendGeneric<T>(T t)\r\n{\r\n    // this looks gross, but T is known at JIT-time so this call tree\r\n    // gets compiled down to a direct call with no branching\r\n    if (typeof(T) == typeof(sbyte))\r\n      Append(1);\r\n    else if (typeof(T) == typeof(byte))\r\n       Append(2);\r\n    ...\r\n    else if (typeof(T).IsEnum)\r\n        Append(66);\r\n    else if (typeof(T) == typeof(string))\r\n        Append(17);\r\n    else\r\n        Append(18);\r\n}   \r\n```\r\n\r\nCurrently, the JIT appears to not recognize / pickup the `if (typeof(T).IsEnum)` expression at JIT time.\r\n\r\nWould it be possible for the JIT to support such type checks at JIT time?\r\n\r\nNaturally, this sort of enhancement should not be limited to IsEnum specifically, and there are many other type checks that could benefit from this sort of optimization...","Url":"https://github.com/dotnet/coreclr/issues/21971","RelatedDescription":"Closed issue \"Generic Type Check elision for enums\" (#21971)"},{"Id":"398754699","IsPullRequest":false,"CreatedAt":"2019-01-14T05:38:07","Actor":"AriNuer","Number":"21975","RawContent":null,"Title":"[x64\\windows] AssemblyDependencyResolverTests failed in x64_checked_windows_nt_r2r_gcstress15","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_r2r_gcstress15/129/testReport/\r\n**Failed test:**\r\nLoader_AssemblyDependencyResolverTests._AssemblyDependencyResolverTests_AssemblyDependencyResolverTests_._AssemblyDependencyResolverTests_AssemblyDependencyResolverTests_cmd\r\n\r\n**Failed log:**\r\n```\r\nLoader_AssemblyDependencyResolverTests._AssemblyDependencyResolverTests_AssemblyDependencyResolverTests_._AssemblyDependencyResolverTests_AssemblyDependencyResolverTests_cmd [FAIL]\r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      D:\\j\\workspace\\x64_checked_w---18f655dc\\bin\\tests\\Windows_NT.x64.Checked\\Reports\\Loader.AssemblyDependencyResolverTests\\AssemblyDependencyResolverTests\\AssemblyDependencyResolverTests.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n                1 file(s) copied.\r\n        \" D:\\j\\workspace\\x64_checked_w---18f655dc\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\crossgen.exe\" /Platform_Assemblies_Paths D:\\j\\workspace\\x64_checked_w---18f655dc\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root;D:\\j\\workspace\\x64_checked_w---18f655dc\\bin\\tests\\Windows_NT.x64.Checked\\Loader\\AssemblyDependencyResolverTests\\AssemblyDependencyResolverTests\\IL;D:\\j\\workspace\\x64_checked_w---18f655dc\\bin\\tests\\Windows_NT.x64.Checked\\Loader\\AssemblyDependencyResolverTests\\AssemblyDependencyResolverTests /in AssemblyDependencyResolverTests.org /out AssemblyDependencyResolverTests.exe\r\n        Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n        Copyright (c) Microsoft Corporation.  All rights reserved.\r\n        \r\n        Native image AssemblyDependencyResolverTests.exe generated successfully.\r\n         \"D:\\j\\workspace\\x64_checked_w---18f655dc\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" AssemblyDependencyResolverTests.exe \r\n        TestMissingHostPolicy Start\r\n        TestMissingHostPolicy PASSED.\r\n        TestComponentLoadFailure Start\r\n        TestComponentLoadFailure FAILED:\r\n        System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> Xunit.Sdk.ThrowsException: Assert.Throws() Failure\r\n        Expected: typeof(System.InvalidOperationException)\r\n        Actual:   typeof(System.NullReferenceException): Object reference not set to an instance of an object. ---> System.NullReferenceException: Object reference not set to an instance of an object.\r\n           at AssemblyDependencyResolverTests.AssemblyDependencyResolver..ctor(String componentAssemblyPath) in D:\\j\\workspace\\x64_checked_w---18f655dc\\tests\\src\\Loader\\AssemblyDependencyResolverTests\\AssemblyDependencyResolver.cs:line 31\r\n           at AssemblyDependencyResolverTests.AssemblyDependencyResolverTests.<TestComponentLoadFailure>b__4_1() in D:\\j\\workspace\\x64_checked_w---18f655dc\\tests\\src\\Loader\\AssemblyDependencyResolverTests\\AssemblyDependencyResolverTests.cs:line 60\r\n           at Xunit.Assert.RecordException(Action testCode) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\Record.cs:line 28\r\n           --- End of inner exception stack trace ---\r\n           at Xunit.Assert.Throws(Type exceptionType, Exception exception) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\ExceptionAsserts.cs:line 148\r\n           at Xunit.Assert.Throws[T](Action testCode) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\ExceptionAsserts.cs:line 27\r\n           at AssemblyDependencyResolverTests.AssemblyDependencyResolverTests.TestComponentLoadFailure() in D:\\j\\workspace\\x64_checked_w---18f655dc\\tests\\src\\Loader\\AssemblyDependencyResolverTests\\AssemblyDependencyResolverTests.cs:line 56\r\n           --- End of inner exception stack trace ---\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n           at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n           at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\r\n           at AssemblyDependencyResolverTests.TestBase.<>c__DisplayClass18_1.<RunTestsForInstance>b__1() in D:\\j\\workspace\\x64_checked_w---18f655dc\\tests\\src\\Loader\\AssemblyDependencyResolverTests\\TestBase.cs:line 87\r\n           at AssemblyDependencyResolverTests.TestBase.RunSingleTest(Action test, String testName) in D:\\j\\workspace\\x64_checked_w---18f655dc\\tests\\src\\Loader\\AssemblyDependencyResolverTests\\TestBase.cs:line 71\r\n        TestComponentLoadFailureWithPreviousErrorWriter Start\r\n        TestComponentLoadFailureWithPreviousErrorWriter PASSED.\r\n        TestAssembly Start\r\n        TestAssembly PASSED.\r\n        TestAssemblyWithNoRecord Start\r\n        TestAssemblyWithNoRecord PASSED.\r\n        TestAssemblyWithMissingFile Start\r\n        TestAssemblyWithMissingFile PASSED.\r\n        TestSingleResource Start\r\n        TestSingleResource PASSED.\r\n        TestMutipleResourcesWithSameBasePath Start\r\n        TestMutipleResourcesWithSameBasePath PASSED.\r\n        TestMutipleResourcesWithDifferentBasePath Start\r\n        TestMutipleResourcesWithDifferentBasePath PASSED.\r\n        TestAssemblyWithNeutralCulture Start\r\n        TestAssemblyWithNeutralCulture PASSED.\r\n        TestSingleNativeDependency Start\r\n        TestSingleNativeDependency PASSED.\r\n        TestMultipleNativeDependencies Start\r\n        TestMultipleNativeDependencies PASSED.\r\n        TestSimpleNameAndNoPrefixAndNoSuffix Start\r\n        TestSimpleNameAndNoPrefixAndNoSuffix PASSED.\r\n        TestSimpleNameAndNoPrefixAndSuffix Start\r\n        TestSimpleNameAndNoPrefixAndSuffix PASSED.\r\n        TestSimpleNameAndLibPrefixAndNoSuffix Start\r\n        TestSimpleNameAndLibPrefixAndNoSuffix PASSED.\r\n        TestRelativeNameAndLibPrefixAndNoSuffix Start\r\n        TestRelativeNameAndLibPrefixAndNoSuffix PASSED.\r\n        TestSimpleNameAndLibPrefixAndSuffix Start\r\n        TestSimpleNameAndLibPrefixAndSuffix PASSED.\r\n        TestNameWithSuffixAndNoPrefixAndNoSuffix Start\r\n        TestNameWithSuffixAndNoPrefixAndNoSuffix PASSED.\r\n        TestNameWithSuffixAndNoPrefixAndSuffix Start\r\n        TestNameWithSuffixAndNoPrefixAndSuffix PASSED.\r\n        TestNameWithSuffixAndNoPrefixAndDoubleSuffix Start\r\n        TestNameWithSuffixAndNoPrefixAndDoubleSuffix PASSED.\r\n        TestNameWithSuffixAndPrefixAndNoSuffix Start\r\n        TestNameWithSuffixAndPrefixAndNoSuffix PASSED.\r\n        TestNameWithSuffixAndPrefixAndSuffix Start\r\n        TestNameWithSuffixAndPrefixAndSuffix PASSED.\r\n        TestRelativeNameWithSuffixAndPrefixAndSuffix Start\r\n        TestRelativeNameWithSuffixAndPrefixAndSuffix PASSED.\r\n        TestNameWithPrefixAndNoPrefixAndNoSuffix Start\r\n        TestNameWithPrefixAndNoPrefixAndNoSuffix PASSED.\r\n        TestNameWithPrefixAndPrefixAndNoSuffix Start\r\n        TestNameWithPrefixAndPrefixAndNoSuffix PASSED.\r\n        TestNameWithPrefixAndNoPrefixAndSuffix Start\r\n        TestNameWithPrefixAndNoPrefixAndSuffix PASSED.\r\n        TestNameWithPrefixAndPrefixAndSuffix Start\r\n        TestNameWithPrefixAndPrefixAndSuffix PASSED.\r\n        TestWindowsAddsSuffixEvenWithOnePresent Start\r\n        TestWindowsAddsSuffixEvenWithOnePresent PASSED.\r\n        TestWindowsDoesntAddSuffixWhenExectubaleIsPresent Start\r\n        TestWindowsDoesntAddSuffixWhenExectubaleIsPresent PASSED.\r\n        TestFullPathLookupWithMatchingFileName Start\r\n        TestFullPathLookupWithMatchingFileName PASSED.\r\n        TestFullPathLookupWithDifferentFileName Start\r\n        TestFullPathLookupWithDifferentFileName PASSED.\r\n        Expected: 100\r\n        Actual: -1\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=D:\\j\\workspace\\x64_checked_w---18f655dc\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n  > D:\\j\\workspace\\x64_checked_w---18f655dc\\bin\\tests\\Windows_NT.x64.Checked\\Loader\\AssemblyDependencyResolverTests\\AssemblyDependencyResolverTests\\AssemblyDependencyResolverTests.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_checked_w---18f655dc\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\Loader.AssemblyDependencyResolverTests\\Loader.AssemblyDependencyResolverTests.XUnitWrapper.cs(109,0): at Loader_AssemblyDependencyResolverTests._AssemblyDependencyResolverTests_AssemblyDependencyResolverTests_._AssemblyDependencyResolverTests_AssemblyDependencyResolverTests_cmd()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21975","RelatedDescription":"Open issue \"[x64\\windows] AssemblyDependencyResolverTests failed in x64_checked_windows_nt_r2r_gcstress15\" (#21975)"},{"Id":"398716653","IsPullRequest":false,"CreatedAt":"2019-01-14T00:20:00","Actor":"benaadams","Number":"21973","RawContent":null,"Title":"Task/TaskAwaiter completion makes lots of duplicate memory reads","State":"open","Body":"```csharp\r\npublic async Task CompletedTask()\r\n{\r\n    for (int i = 0; i < 100; i++)\r\n        await Task.CompletedTask;\r\n}\r\n```\r\n```\r\nInlines into 06000007 <CompletedTask>d__3:MoveNext():this\r\n  [1 IL=0019 TR=000066 06001F0C] [below ALWAYS_INLINE size] Task:get_CompletedTask():ref\r\n  [2 IL=0024 TR=000069 06001F2E] [below ALWAYS_INLINE size] Task:GetAwaiter():struct:this\r\n    [3 IL=0001 TR=000172 060049ED] [below ALWAYS_INLINE size] TaskAwaiter:.ctor(ref):this\r\n  [4 IL=0032 TR=000079 060049EE] [below ALWAYS_INLINE size] TaskAwaiter:get_IsCompleted():bool:this\r\n    [5 IL=0006 TR=000194 06001F03] [below ALWAYS_INLINE size] Task:get_IsCompleted():bool:this\r\n      [6 IL=0010 TR=000206 06001F04] [below ALWAYS_INLINE size] Task:IsCompletedMethod(int):bool\r\n  [7 IL=0064 TR=000109 060048CB] [below ALWAYS_INLINE size] AsyncTaskMethodBuilder:AwaitUnsafeOnCompleted(byref,byref):this\r\n    [0 IL=0008 TR=000227 060048D5] [FAILED: has exception handling] AsyncTaskMethodBuilder`1:AwaitUnsafeOnCompleted(byref,byref):this\r\n  [8 IL=0101 TR=000044 060049F1] [below ALWAYS_INLINE size] TaskAwaiter:GetResult():this\r\n    [9 IL=0006 TR=000239 060049F2] [below ALWAYS_INLINE size] TaskAwaiter:ValidateEnd(ref)\r\n      [10 IL=0001 TR=000245 06001EE7] [aggressive inline attribute] Task:get_IsWaitNotificationEnabledOrNotRanToCompletion():bool:this\r\n      [11 IL=0009 TR=000255 060049F3] [profitable inline] TaskAwaiter:HandleNonSuccessAndDebuggerNotification(ref)\r\n        [12 IL=0001 TR=000272 06001F03] [below ALWAYS_INLINE size] Task:get_IsCompleted():bool:this\r\n          [13 IL=0010 TR=000327 06001F04] [below ALWAYS_INLINE size] Task:IsCompletedMethod(int):bool\r\n        [14 IL=0019 TR=000310 06001F39] [below ALWAYS_INLINE size] Task:InternalWait(int,struct):bool:this\r\n        [0 IL=0026 TR=000281 06001EE5] [FAILED: unprofitable inline] Task:NotifyDebuggerOfWaitCompletionIfNecessary():bool:this\r\n        [15 IL=0033 TR=000288 06001F05] [profitable inline] Task:get_IsCompletedSuccessfully():bool:this\r\n        [0 IL=0041 TR=000298 060049F4] [FAILED: noinline per IL/cached result] TaskAwaiter:ThrowForNonSuccess(ref)\r\n  [0 IL=0150 TR=000151 060048CE] [FAILED: within catch region] AsyncTaskMethodBuilder:SetException(ref):this\r\n  [16 IL=0171 TR=000126 060048CD] [profitable inline] AsyncTaskMethodBuilder:SetResult():this\r\n    [17 IL=0011 TR=000368 060048DE] [profitable inline] AsyncTaskMethodBuilder`1:SetResult(ref):this\r\n      [0 IL=0026 TR=000390 060048DC] [FAILED: noinline per IL/cached result] AsyncTaskMethodBuilder`1:SetExistingTaskResult(struct):this\r\n```\r\n```asm\r\n;  V00 this         [V00,T01] ( 22, 40   )   byref  ->  [rbp+0x10]   do-not-enreg[H] this\r\n;  V01 loc0         [V01,T12] (  2,  2   )     int  ->  rcx        \r\n;  V02 loc1         [V02    ] (  6, 19   )  struct ( 8) [rbp-0x10]   do-not-enreg[XS] must-init addr-exposed ld-addr-op\r\n;  V03 loc2         [V03,T04] (  2, 16   )     int  ->  rdx        \r\n;* V04 loc3         [V04    ] (  0,  0   )     ref  ->  zero-ref    class-hnd\r\n;  V05 OutArgs      [V05    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;* V06 tmp1         [V06    ] (  0,  0   )     int  ->  zero-ref    \"dup spill\"\r\n;  V07 tmp2         [V07,T15] (  2,  0   )     ref  ->  rdx         class-hnd \"impSpillSpecialSideEff\"\r\n;  V08 tmp3         [V08,T02] (  3, 24   )     ref  ->  rdx         class-hnd \"Inlining Arg\"\r\n;* V09 tmp4         [V09    ] (  0,  0   )  struct ( 8) zero-ref    \"NewObj constructor temp\"\r\n;  V10 tmp5         [V10,T03] (  2, 16   )     ref  ->  rdx         class-hnd \"Inlining Arg\"\r\n;  V11 tmp6         [V11,T06] (  2,  8   )     int  ->  rdx         \"Inline stloc first use temp\"\r\n;  V12 tmp7         [V12,T07] (  2,  4   )   byref  ->  rcx         \"Inlining Arg\"\r\n;  V13 tmp8         [V13,T00] (  7, 44   )     ref  ->  rsi         class-hnd \"Inlining Arg\"\r\n;* V14 tmp9         [V14    ] (  0,  0   )  struct ( 8) zero-ref    ld-addr-op \"Inline ldloca(s) first use temp\"\r\n;* V15 tmp10        [V15    ] (  0,  0   )    bool  ->  zero-ref    \"Inline stloc first use temp\"\r\n;  V16 tmp11        [V16,T10] (  2,  4   )     int  ->  rcx         \"Inline stloc first use temp\"\r\n;* V17 tmp12        [V17    ] (  0,  0   )  struct ( 8) zero-ref    \"Inlining Arg\"\r\n;  V18 tmp13        [V18,T08] (  2,  4   )   byref  ->  rcx         \"Inlining Arg\"\r\n;  V19 tmp14        [V19,T05] (  4,  8   )   byref  ->  rcx         \"Inlining Arg\"\r\n;  V20 tmp15        [V20,T13] (  2,  2   )  struct ( 8) [rbp-0x18]   do-not-enreg[SF] must-init ld-addr-op \"Inline ldloca(s) first use temp\"\r\n;  V21 tmp16        [V21,T09] (  2,  4   )     ref  ->  rdx         class-hnd exact \"Inlining Arg\"\r\n;  V22 tmp17        [V22    ] (  6, 19   )     ref  ->  [rbp-0x10]   do-not-enreg[X] addr-exposed V02.m_task(offs=0x00) P-DEP \"field V02.m_task (fldOffset=0x0)\"\r\n;* V23 tmp18        [V23    ] (  0,  0   )     ref  ->  zero-ref    V09.m_task(offs=0x00) P-INDEP \"field V09.m_task (fldOffset=0x0)\"\r\n;* V24 tmp19        [V24,T11] (  0,  0   )     ref  ->  zero-ref    V14._source(offs=0x00) P-INDEP \"field V14._source (fldOffset=0x0)\"\r\n;* V25 tmp20        [V25,T14] (  0,  0   )     ref  ->  zero-ref    V17._source(offs=0x00) P-INDEP \"field V17._source (fldOffset=0x0)\"\r\n;  V26 PSPSym       [V26    ] (  1,  1   )    long  ->  [rbp-0x20]   do-not-enreg[X] addr-exposed \"PSPSym\"\r\n;* V27 tmp22        [V27    ] (  0,  0   )   byref  ->  zero-ref    \"optAddCopies\"\r\nG_M10160_IG01:\r\n       55                   push     rbp\r\n       56                   push     rsi\r\n       4883EC38             sub      rsp, 56\r\n       488D6C2440           lea      rbp, [rsp+40H]\r\n       33C0                 xor      rax, rax\r\n       488945F0             mov      qword ptr [rbp-10H], rax\r\n       488945E8             mov      qword ptr [rbp-18H], rax\r\n       488965E0             mov      qword ptr [rbp-20H], rsp\r\n       48894D10             mov      bword ptr [rbp+10H], rcx   ; set [rbp+10H] from rcx\r\n\r\nG_M10160_IG02:\r\n       488B4D10             mov      rcx, bword ptr [rbp+10H]    ; read [rbp+10H] to rcx\r\n       8B09                 mov      ecx, dword ptr [rcx]\r\n\r\nG_M10160_IG03:\r\n       85C9                 test     ecx, ecx\r\n       0F8486000000         je       G_M10160_IG05\r\n       488B4D10             mov      rcx, bword ptr [rbp+10H]    ; read [rbp+10H] to rcx  \r\n       33D2                 xor      edx, edx\r\n       895104               mov      dword ptr [rcx+4], edx\r\n       488B4D10             mov      rcx, bword ptr [rbp+10H]    ; read [rbp+10H] to rcx  \r\n       83790464             cmp      dword ptr [rcx+4], 100\r\n       0F8DFF000000         jge      G_M10160_IG09\r\n\r\nG_M10160_IG04:                                              ; ** for body start\r\n       48B9783EECCFFB7F0000 mov      rcx, 0x7FFBCFEC3E78\r\n       BA40020000           mov      edx, 576\r\n       E81AACBA5F           call     CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE\r\n       48BAF8159DDC14020000 mov      rdx, 0x214DC9D15F8\r\n       488B12               mov      rdx, gword ptr [rdx]\r\n       8B0A                 mov      ecx, dword ptr [rdx]\r\n       488955F0             mov      gword ptr [rbp-10H], rdx\r\n       488B55F0             mov      rdx, gword ptr [rbp-10H]\r\n       8B5234               mov      edx, dword ptr [rdx+52]\r\n       F7C200006001         test     edx, 0x1600000\r\n       755A                 jne      SHORT G_M10160_IG06\r\n       488B5510             mov      rdx, bword ptr [rbp+10H]    ; read [rbp+10H] to rdx  \r\n       33C9                 xor      ecx, ecx\r\n       890A                 mov      dword ptr [rdx], ecx\r\n       488B5510             mov      rdx, bword ptr [rbp+10H]    ; read [rbp+10H] to rdx    \r\n       488D4A10             lea      rcx, bword ptr [rdx+16]\r\n       488B55F0             mov      rdx, gword ptr [rbp-10H]\r\n       E8EF93BA5F           call     CORINFO_HELP_CHECKED_ASSIGN_REF\r\n       488B5510             mov      rdx, bword ptr [rbp+10H]    ; read [rbp+10H] to rdx   \r\n       3912                 cmp      dword ptr [rdx], edx\r\n       488B5510             mov      rdx, bword ptr [rbp+10H]    ; read [rbp+10H] to rdx  \r\n       488D4A08             lea      rcx, bword ptr [rdx+8]\r\n       488D55F0             lea      rdx, bword ptr [rbp-10H]\r\n       4C8B4510             mov      r8, bword ptr [rbp+10H]\r\n       E8D4F5FFFF           call     AsyncTaskMethodBuilder`1:AwaitUnsafeOnCompleted(byref,byref):this\r\n       E9D0000000           jmp      G_M10160_IG11\r\n\r\nG_M10160_IG05:\r\n       488B4D10             mov      rcx, bword ptr [rbp+10H]    ; read [rbp+10H] to rcx  \r\n       488B4910             mov      rcx, gword ptr [rcx+16]\r\n       48894DF0             mov      gword ptr [rbp-10H], rcx\r\n       488B4D10             mov      rcx, bword ptr [rbp+10H]    ; read [rbp+10H] to rcx  \r\n       4533C0               xor      r8, r8\r\n       4C894110             mov      qword ptr [rcx+16], r8\r\n       488B4D10             mov      rcx, bword ptr [rbp+10H]    ; read [rbp+10H] to rcx \r\n       C701FFFFFFFF         mov      dword ptr [rcx], -1\r\n\r\nG_M10160_IG06:\r\n       488B75F0             mov      rsi, gword ptr [rbp-10H]\r\n       8B4E34               mov      ecx, dword ptr [rsi+52]\r\n       81E100000011         and      ecx, 0x11000000\r\n       81F900000001         cmp      ecx, 0x1000000\r\n       743C                 je       SHORT G_M10160_IG08\r\n       8B4E34               mov      ecx, dword ptr [rsi+52]\r\n       F7C100006001         test     ecx, 0x1600000\r\n       7510                 jne      SHORT G_M10160_IG07\r\n       488BCE               mov      rcx, rsi\r\n       4533C0               xor      r8, r8\r\n       BAFFFFFFFF           mov      edx, -1\r\n       E83E27AC5A           call     Task:InternalWaitCore(int,struct):bool:this\r\n\r\nG_M10160_IG07:\r\n       488BCE               mov      rcx, rsi\r\n       E8B600AC5A           call     Task:NotifyDebuggerOfWaitCompletionIfNecessary():bool:this\r\n       8B4E34               mov      ecx, dword ptr [rsi+52]\r\n       81E100006001         and      ecx, 0x1600000\r\n       81F900000001         cmp      ecx, 0x1000000\r\n       7408                 je       SHORT G_M10160_IG08\r\n       488BCE               mov      rcx, rsi\r\n       E8DDEBB05A           call     TaskAwaiter:ThrowForNonSuccess(ref)\r\n\r\nG_M10160_IG08:\r\n       488B5510             mov      rdx, bword ptr [rbp+10H]    ; read [rbp+10H] to rdx  \r\n       8B5204               mov      edx, dword ptr [rdx+4]\r\n       FFC2                 inc      edx\r\n       488B4D10             mov      rcx, bword ptr [rbp+10H]    ; read [rbp+10H] to rcx  \r\n       895104               mov      dword ptr [rcx+4], edx\r\n       488B5510             mov      rdx, bword ptr [rbp+10H]    ; read [rbp+10H] to rdx  \r\n       837A0464             cmp      dword ptr [rdx+4], 100\r\n       0F8C01FFFFFF         jl       G_M10160_IG04          ; ** for body end\r\n\r\nG_M10160_IG09:\r\n       488B5510             mov      rdx, bword ptr [rbp+10H]    ; read [rbp+10H] to rdx  \r\n       C702FEFFFFFF         mov      dword ptr [rdx], -2\r\n       488B5510             mov      rdx, bword ptr [rbp+10H]    ; read [rbp+10H] to rdx  \r\n       3912                 cmp      dword ptr [rdx], edx\r\n       488B5510             mov      rdx, bword ptr [rbp+10H]    ; read [rbp+10H] to rdx  \r\n       488D4A08             lea      rcx, bword ptr [rdx+8]\r\n       48BA88259DDC14020000 mov      rdx, 0x214DC9D2588\r\n       488B12               mov      rdx, gword ptr [rdx]\r\n       48833900             cmp      gword ptr [rcx], 0\r\n       7507                 jne      SHORT G_M10160_IG10\r\n       E80F93BA5F           call     CORINFO_HELP_CHECKED_ASSIGN_REF\r\n       EB0E                 jmp      SHORT G_M10160_IG11\r\n\r\nG_M10160_IG10:\r\n       C645E800             mov      byte  ptr [rbp-18H], 0\r\n       480FBE55E8           movsx    rdx, byte  ptr [rbp-18H]\r\n       E8FFCCB05A           call     AsyncTaskMethodBuilder`1:SetExistingTaskResult(struct):this\r\n\r\nG_M10160_IG11:\r\n       90                   nop      \r\n\r\nG_M10160_IG12:\r\n       488D65F8             lea      rsp, [rbp-08H]\r\n       5E                   pop      rsi\r\n       5D                   pop      rbp\r\n       C3                   ret      \r\n\r\nG_M10160_IG13:\r\n       55                   push     rbp\r\n       56                   push     rsi\r\n       4883EC28             sub      rsp, 40\r\n       488B6920             mov      rbp, qword ptr [rcx+32]\r\n       48896C2420           mov      qword ptr [rsp+20H], rbp\r\n       488D6D40             lea      rbp, [rbp+40H]\r\n\r\nG_M10160_IG14:\r\n       488B4D10             mov      rcx, bword ptr [rbp+10H]    ; read [rbp+10H] to rcx  \r\n       C701FEFFFFFF         mov      dword ptr [rcx], -2\r\n       488B4D10             mov      rcx, bword ptr [rbp+10H]    ; read [rbp+10H] to rcx  \r\n       3909                 cmp      dword ptr [rcx], ecx\r\n       488B4D10             mov      rcx, bword ptr [rbp+10H]    ; read [rbp+10H] to rcx  \r\n       4883C108             add      rcx, 8\r\n       E8A716B35A           call     AsyncTaskMethodBuilder:SetException(ref):this\r\n       488D05C1FFFFFF       lea      rax, G_M10160_IG11\r\n\r\nG_M10160_IG15:\r\n       4883C428             add      rsp, 40\r\n       5E                   pop      rsi\r\n       5D                   pop      rbp\r\n       C3                   ret      \r\n\r\n; Total bytes of code 455, prolog size 29 for method <CompletedTask>d__3:MoveNext():this      \r\n```\r\n\r\nCan this be elided where its not changing the register (as its just set the line or so before)\r\n\r\n/cc @stephentoub @AndyAyersMS ","Url":"https://github.com/dotnet/coreclr/issues/21973","RelatedDescription":"Open issue \"Task/TaskAwaiter completion makes lots of duplicate memory reads\" (#21973)"},{"Id":"398687015","IsPullRequest":false,"CreatedAt":"2019-01-13T18:48:21","Actor":"Tornhoof","Number":"21972","RawContent":null,"Title":"Differences in Codegen of method with ReadOnlySpan with In parameter modifier and without it","State":"open","Body":"This is a spinoff of https://github.com/dotnet/corefx/issues/34568#issuecomment-453760485 as @jkotas  suggested that my reported behaviour should not happen.\r\nI tried to reproduce it standalone without Expression Tree codegen and failed, so I tried to gather as much info as possible from the current code.\r\n\r\n**Introduction**\r\nIn SpanJson I noticed a large ~15% regression in performance for UTF16 deserialization if I remove the ``In`` parameter modifier is removed. The UTF8 version is not affected.\r\nTake the following code snippet\r\n```csharp\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic static ulong ReadUInt64(in ReadOnlySpan<byte> span, int offset)\r\n{\r\n    return Unsafe.ReadUnaligned<ulong>(ref Unsafe.Add(ref MemoryMarshal.GetReference(span), offset));\r\n}\r\n```\r\n(https://github.com/Tornhoof/SpanJson/blob/master/SpanJson/Helpers/SpanHelper.cs)\r\n\r\nit is heavily used for the integer based property matching during deserialization, the same code exists for byte, ushort, uint32 and is used for both UTF8 and UTF16 , the difference for UTF16 that prior to that snippet there is a ``MemoryMarshal.AsBytes`` to get the bytes instead of chars for the matching and there are more calls to it as there are twice the bytes for utf16.\r\n\r\nIf I remove the ``in`` from these methods (and do not change anything else), there is a 15% regression in performance in my nested serializer tests for UTF16 and only UTF16:\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17763.253 (1809/October2018Update/Redstone5)\r\nIntel Core i9-9900K CPU 3.60GHz, 1 CPU, 16 logical and 8 physical cores\r\n.NET Core SDK=3.0.100-preview-009844\r\n  [Host]     : .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n  Job-MNYSVC : .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n\r\nUnrollFactor=2  \r\n\r\n```\r\n\r\n**With in**\r\n\r\n|                                      Method |     Mean |     Error |    StdDev | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|-------------------------------------------- |---------:|----------:|----------:|------------:|------------:|------------:|--------------------:|\r\n|     DeserializeAnswerWithSpanJsonSerializer | 3.556 us | 0.0209 us | 0.0196 us |      0.2937 |      0.0038 |           - |             1.84 KB |\r\n| DeserializeAnswerWithSpanJsonSerializerUtf8 | 4.129 us | 0.0149 us | 0.0139 us |      0.2899 |           - |           - |             1.84 KB |                                      \r\n\r\n**Without In**\t\t\t\t\t\t\t\t\t  \r\n\r\n|         \t\t\t\t\t\t\t   Method |     Mean |     Error |    StdDev | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|-------------------------------------------- |---------:|----------:|----------:|------------:|------------:|------------:|--------------------:|\r\n|     DeserializeAnswerWithSpanJsonSerializer | 4.081 us | 0.0462 us | 0.0432 us |      0.2899 |           - |           - |             1.84 KB |\r\n| DeserializeAnswerWithSpanJsonSerializerUtf8 | 4.151 us | 0.0343 us | 0.0287 us |      0.2899 |           - |           - |             1.84 KB |\r\n\r\n**Analysis so far** \r\n\r\n***IL Dumps***\r\nI dumped the IL of both variants via WinDbg and the difference is pretty much non-existent.\r\nThe only consistent difference is, for each and every call to one of those Read methods is the use of **ldloca.s** in the fast one and **ldloc.s** in the slow one (notice the missing **a**)\r\nThis is expected, as we're using byref.\r\n***Fast Version with In***\r\n\r\n```csharp\r\nIL_0049: ldloca.s VAR OR ARG 4\r\nIL_004b: ldc.i4.0 \r\nIL_004c: call 6000008 SpanJson.Helpers.SpanHelper.ReadUInt64(System.ReadOnlySpan`1<Byte> ByRef, Int32)\r\n```\r\n***Slow Version without  In***\r\n\r\n```csharp\r\nIL_0049: ldloc.s VAR OR ARG 4\r\nIL_004b: ldc.i4.0 \r\nIL_004c: call 6000008 SpanJson.Helpers.SpanHelper.ReadUInt64(System.ReadOnlySpan`1<Byte>, Int32)\r\n```\r\nThe full dumps of serialization code is attached (it includes all dynamic method, including a few unrelated ones), if you compare it via WinMerge, the only differences (besides offsets) is that with ``In`` it uses ldloc**a**.s and without ``In`` it uses ldloc.s, sometimes it also uses ldloca.s VAR OR ARG 3 and ldloc.3 in the slow version (I tracked that down to the enum deserialization code, which uses the same concept).\r\n\r\n[ILDumpWithoutIn.txt](https://github.com/dotnet/coreclr/files/2753343/ILDumpWithoutIn.txt)\r\n[ILDumpWithIn.txt](https://github.com/dotnet/coreclr/files/2753344/ILDumpWithIn.txt)\r\n\r\n\r\nFor dumping in Windbg I used\r\n<details>\r\n\r\n```js\r\n\r\n\"use strict\";\r\n\r\nfunction initializeScript() {\r\n    return [new host.apiVersionSupport(1, 3)];\r\n}\r\n\r\nfunction invokeScript() {\r\n    var ctl = host.namespace.Debugger.Utility.Control;\r\n    var output = ctl.ExecuteCommand(\"!dumpheap -type DynamicMethod\");\r\n    host.diagnostics.debugLog(\"***> Displaying command output \\n\");\r\n\r\n    for (var line of output) {\r\n\r\n        var ilOutput = ctl.ExecuteCommand(\"!dumpil \" + line.split(\" \")[0]);\r\n        for (var line2 of ilOutput) {\r\n            host.diagnostics.debugLog(line2 + \"\\n\");\r\n        }\r\n    }\r\n\r\n    host.diagnostics.debugLog(\"***> Exiting RunCommands Function \\n\");\r\n\r\n}\r\n```\r\n</details>\r\n\r\n***JIT Dumps***\r\nAfter the IL dumps didn't help much, I proceeded to dump the disassembly and (as much as possible) the Jit data via COMPlus_JitDisasm and Complus_JitDump.\r\nJitDisasm is the full one as it's small and JitDump is only for lambda_method, which appears to be the name of the deserialization functors.\r\n\r\n[jitdisasmwithin.txt](https://github.com/dotnet/coreclr/files/2753346/jitdisasmwithin.txt)\r\n[jitdisasmwithoutin.txt](https://github.com/dotnet/coreclr/files/2753347/jitdisasmwithoutin.txt)\r\n\r\nComparing the disassembly via WinMerge shows a fairly large difference for a lambda_method at the end, according to the var/tmp listing it has 30 extra vars  and the disasm shows quite a bit of extra work for the version without ``In``, the code size of that specific method is ~50% bigger. (starts at line 45257). I think it's safe to assume that's the/a problem there.\r\n\r\nOne of the more common extra code snippets in the version without ``in`` looks like:\r\n```asm\r\n       lea      rcx, bword ptr [rsp+888H]\r\n       mov      bword ptr [rcx], r14\r\n       mov      dword ptr [rcx+8], r12d\r\n\r\nG_M13327_IG36:\r\n       vmovdqu  xmm0, qword ptr [rsp+888H]\r\n       vmovdqu  qword ptr [rsp+878H], xmm0\r\n\r\nG_M13327_IG37:\r\n       mov      rcx, bword ptr [rsp+878H]\r\n```\r\n\r\nThe JitDump for both versions is located here: https://github.com/Tornhoof/SpanJson/blob/InROS/SpanJson.Console/jitdump_lambda_method.zip\r\n(each file is ~150 Mb, WinMerge_x64 is can still compare it usefully though)\r\n\r\n\r\n**Repro**\r\n1. Clone https://github.com/Tornhoof/SpanJson/tree/InROS\r\n2. cd SpanJson\\SpanJson.Benchmarks (there is also .Console which only deserializes a known payload, this decreases the jitdump size)\r\n3. dotnet run -c Release\r\n4. Remove the ``in`` parameter modifiers in https://github.com/Tornhoof/SpanJson/blob/InROS/SpanJson/Helpers/SpanHelper.cs\r\n5. dotnet run -c Release","Url":"https://github.com/dotnet/coreclr/issues/21972","RelatedDescription":"Open issue \"Differences in Codegen of method with ReadOnlySpan with In parameter modifier and without it\" (#21972)"},{"Id":"399066728","IsPullRequest":false,"CreatedAt":"2019-01-13T18:36:17","Actor":"monokot","Number":"21985","RawContent":null,"Title":"Why does DisablePrivateReflection attribute not work on .net core 2.1, but works perfectly on .net core 2.0?","State":"open","Body":"Hello!\r\n\r\nWhy does `DisablePrivateReflection` attribute not work on .net core 2.1, but works perfectly on .net core 2.0?\r\n\r\nI have a class with private fields. The class is in assembly marked with a `DisablePrivateReflection` attribute.\r\n\r\nThe following test will be passed successfully on .net core 2.0\r\n\r\n```csharp\r\nvar field = typeof(MonLicenseManager).GetField(\"_licenses\", BindingFlags.NonPublic | \r\nBindingFlags.Static);\r\n\r\nAssert.IsNotNull(field);\r\n\r\ntry\r\n{\r\n    var value = field.GetValue(null);\r\n    Assert.Fail(\"FieldAccessException must be thrown\");\r\n}\r\ncatch (FieldAccessException)\r\n{\r\n\r\n}\r\n```\r\n\r\nbut on .net core 2.1, `FieldAccessException` will never be thrown\r\n\r\nThanks\r\n","Url":"https://github.com/dotnet/coreclr/issues/21985","RelatedDescription":"Open issue \"Why does DisablePrivateReflection attribute not work on .net core 2.1, but works perfectly on .net core 2.0?\" (#21985)"},{"Id":"398631689","IsPullRequest":false,"CreatedAt":"2019-01-13T08:39:17","Actor":"hpbieker","Number":"21970","RawContent":null,"Title":"await ValueTask performance","State":"open","Body":"I did some performance testing for async-await on a completed `ValueTask` and compared it to a `Task.CompletedTask`. I see that for `Task.CompletedTask` it does not matter if I bypass `await` if I check the `Task` for `IsCompletedSuccessfully`, but for `ValueTask` it has significant performance impact (3x). Is there a missing optimization in the async code generated for `async`-`await` when using `ValueTask`?\r\n\r\n```\r\nBenchmarkDotNet=v0.11.3, OS=Windows 7 SP1 (6.1.7601.0)\r\nIntel Core i5-6300U CPU 2.40GHz (Skylake), 1 CPU, 4 logical and 2 physical cores\r\nFrequency=2437558 Hz, Resolution=410.2466 ns, Timer=TSC\r\n.NET Core SDK=2.2.100\r\n  [Host]     : .NET Core 2.2.0 (CoreCLR 4.6.27110.04, CoreFX 4.6.27110.04), 64bit RyuJIT\r\n  Job-OUSAWM : .NET Core 2.2.0 (CoreCLR 4.6.27110.04, CoreFX 4.6.27110.04), 64bit RyuJIT\r\n\r\nWarmupCount=1\r\n\r\n                                 Method |       Mean |     Error |    StdDev | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n--------------------------------------- |-----------:|----------:|----------:|------------:|------------:|------------:|--------------------:|\r\n                              ValueTask | 1,031.7 ns | 16.990 ns | 15.892 ns |           - |           - |           - |                   - |\r\n     ValueTaskIfIsCompletedSuccessfully |   291.5 ns |  2.743 ns |  2.291 ns |           - |           - |           - |                   - |\r\n CompletedTaskIfIsCompletedSuccessfully |   277.7 ns |  5.460 ns |  6.288 ns |           - |           - |           - |                   - |\r\n                          CompletedTask |   319.5 ns |  4.782 ns |  3.993 ns |           - |           - |           - |                   - |\r\n```\r\n\r\n```\r\n        [Benchmark]\r\n        public async Task ValueTask()\r\n        {\r\n            for (int i = 0; i < 100; i++)\r\n                await new ValueTask();\r\n        }\r\n\r\n        [Benchmark]\r\n        public async Task ValueTaskIfIsCompletedSuccessfully()\r\n        {\r\n            for (int i = 0; i < 100; i++)\r\n            {\r\n                var valueTask = new ValueTask();\r\n                if (!valueTask.IsCompletedSuccessfully)\r\n                    await valueTask;\r\n            }\r\n        }\r\n\r\n        [Benchmark]\r\n        public async Task CompletedTaskIfIsCompletedSuccessfully()\r\n        {\r\n            for (int i = 0; i < 100; i++)\r\n            {\r\n                var task = Task.CompletedTask;\r\n                if (!task.IsCompletedSuccessfully)\r\n                    await task;\r\n            }\r\n        }\r\n\r\n        [Benchmark]\r\n        public async Task CompletedTask()\r\n        {\r\n            for (int i = 0; i < 100; i++)\r\n                await Task.CompletedTask;\r\n        }\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21970","RelatedDescription":"Open issue \"await ValueTask performance\" (#21970)"},{"Id":"398540066","IsPullRequest":false,"CreatedAt":"2019-01-12T09:58:34","Actor":"RevensofT","Number":"21969","RawContent":null,"Title":"[CIL, Bug] jmp error when jump to Func`2<!!T,!!T>, T = ValueTuple`3<int32[],int32,int32>","State":"open","Body":"Hi,\r\nI got unusual error I can't point a finger what's wrong with it, maybe a bug so I report it here.\r\n\r\nOp jmp error on jump to generic delegate of value tuple of generic array,\r\n\r\n```\r\n.method public static !!T recursive<T>(\r\n\t\t!!T Data,\r\n\t\tclass [mscorlib]System.Func`2<!!T,!!T> Recursive_method,\r\n\t\tclass [mscorlib]System.Func`2<!!T,bool> Stop_condition) \r\n\t\tcil managed aggressiveinlining\r\n{   .custom instance void [mscorlib]System.Runtime.CompilerServices.ExtensionAttribute::.ctor() = ( 01 00 00 00 ) \r\n\t\t.maxstack 3 \r\n\t\tldarg.2\t\tldarg.0\r\n\t\tcallvirt\tinstance !1 class [mscorlib]System.Func`2<!!T,bool>::Invoke(!0)\r\n\t\tbrfalse.s\tlb_recursive\r\n\t\tldarg.0\tret\r\n\r\n\t\tlb_recursive:\r\n\t\tldarg.1\t\tldarg.0\r\n\t\tcallvirt\tinstance !1 class [mscorlib]System.Func`2<!!T,!!T>::Invoke(!0)\r\n\r\n\t\t// It's work fine with tail. call.\t\t\r\n\t\t/* \r\n\t\tldarg.1\t\tldarg.2\r\n\t\ttail. call\t!!0 Your_namespace.Your_static_class::recursive<!!0>(\r\n\t\t\t\t\t!!0,\r\n\t\t\t\t\tclass [mscorlib]System.Func`2<!!0,!!0>,\r\n\t\t\t\t\tclass [mscorlib]System.Func`2<!!0,bool>)\r\n\t\t*/\r\n\t\t\r\n\t\t// But error when T is value tuple of generic array type.\r\n\t\tstarg.s 0\r\n\t\tjmp\t\t\t!!0 Your_namespace.Your_static_class::recursive<!!0>(\t\r\n\t\t\t\t\t\t!!0,\r\n\t\t\t\t\t\tclass [mscorlib]System.Func`2<!!0,!!0>,\r\n\t\t\t\t\t\tclass [mscorlib]System.Func`2<!!0,bool>)\r\n\t\tret\r\n}\r\n```\r\n\r\nI test on some sample and found it only error when tuple with array type.\r\n\r\n```\r\n    Public Function Test_recursion(Of T)(Input As T, Work As Func(Of T, T), Stop_c As Func(Of T, Boolean)) As T\r\n        If Stop_c(Input) Then Return Input\r\n        Input = Work(Input)\r\n        Return Test_recursion(Input, Work, Stop_c)\r\n    End Function\r\n\r\n    Public Sub main()\r\n\r\n        '// Work fine without any error\r\n        Console.WriteLine(\r\n            Your_namespace.recursive((Input:=5, sum:=1),\r\n                Function(Data) (Data.input - 1, Data.sum * Data.input),\r\n                Function(Data) Data.input < 2\r\n            ).sum\r\n        )\r\n\r\n        Dim Input_data = (Input:={1, 2, 3, 4}, Index:=0, sum:=0)\r\n\r\n        Console.WriteLine(Test_recursion(Input_data,\r\n                Function(Data) (Data.Input, Data.Index + 1, Data.sum + Data.Input(Data.Index)),\r\n                Function(Data) Data.Index >= Data.Input.Length).sum)\r\n\r\n        '// Crash when run into this line, not a hint what's cause this error.\r\n        Console.WriteLine(Your_namespace.recursive(Input_data,\r\n                Function(Data) (Data.Input, Data.Index + 1, Data.sum + Data.Input(Data.Index)),\r\n                Function(Data) Data.Index >= Data.Input.Length).sum)\r\n\r\n        Console.ReadKey()\r\n    End Sub\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21969","RelatedDescription":"Open issue \"[CIL, Bug] jmp error when jump to Func`2<!!T,!!T>, T = ValueTuple`3<int32[],int32,int32>\" (#21969)"},{"Id":"398495450","IsPullRequest":true,"CreatedAt":"2019-01-12T00:03:36","Actor":"echesakovMSFT","Number":"21967","RawContent":null,"Title":"Clean-up of build.sh build-test.sh build-packages.sh related to PortableBuild","State":"open","Body":"1. Makes `initHostDistroRid()` to be identical in build.sh build-test.sh build-packages.sh\r\n2. Switch portableBuild to opt-out mechanism in build-test.sh \r\n3. Refactor the way we define whether a build is portable in *.yml files\r\n\r\nThis fixes currently failing tests in AzDO on Linux_musl and Linux_rhel6\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/21967","RelatedDescription":"Open PR \"Clean-up of build.sh build-test.sh build-packages.sh related to PortableBuild\" (#21967)"},{"Id":"398495442","IsPullRequest":true,"CreatedAt":"2019-01-12T00:03:34","Actor":"echesakovMSFT","Number":"21966","RawContent":null,"Title":"Use MSBuild for generating __TestEnv files when submit jobs to Helix","State":"open","Body":"This removes a dependency on Python during test running on Helix. As a result, **tests/runtest_helix.py** is no longer needed.\r\n\r\n**tests/testenvironment.proj** is basically translation of netci.groovy knowledge of test scenarios (and their test environments) to an MSBuild file where each test scenario corresponds to TestEnvironment item and COMPlus_ variables values that needed to be written to __TestEnv file correspond to the item Metadata (i.e. JitStress, JitStressRegs etc.)\r\n\r\nDuring submission step the following command is sent to Helix:\r\n\r\n`%CORE_ROOT%\\CoreRun.exe %CORE_ROOT%\\xunit.console.dll %(FileName)%(Extension) -parallel collections -nocolor -noshadow -xml testResults.xml -notrait category=outerloop -notrait category=failing`\r\n\r\nso it should make process of repro-ing a test failure pretty straightforward.\r\n","Url":"https://github.com/dotnet/coreclr/pull/21966","RelatedDescription":"Open PR \"Use MSBuild for generating __TestEnv files when submit jobs to Helix\" (#21966)"},{"Id":"398495434","IsPullRequest":true,"CreatedAt":"2019-01-12T00:03:32","Actor":"echesakovMSFT","Number":"21965","RawContent":null,"Title":"Make JIT\\superpmi\\superpmicollect compatible with Helix","State":"open","Body":"Two changes here:\r\n1. Build dependent projects as a part of superpmicollect - this ensures that their executables and running scripts are copied to superpmicollect folder\r\n2. Keep names of the dependent projects in a separate file - this allows embedding the file as an assembly resource (instead of hard-coding) and using the same file from MSBuild\r\n\r\nFixes #21698\r\n\r\nShouldn't break current testing with Jenkins","Url":"https://github.com/dotnet/coreclr/pull/21965","RelatedDescription":"Open PR \"Make JIT\\superpmi\\superpmicollect compatible with Helix\" (#21965)"},{"Id":"398493567","IsPullRequest":false,"CreatedAt":"2019-01-11T23:53:08","Actor":"swaroop-sridhar","Number":"21964","RawContent":null,"Title":"Arm64: RegDisplay Missing Context while throwing exceptions","State":"open","Body":"`Interop\\NativeLibraryResolveEvent\\ResolveEventTests` proposed in https://github.com/dotnet/coreclr/pull/21929 fails on ARM64 Windows.\r\n\r\nWhile trying to throw `DllNotFoundException` , ExceptionTracker::UpdateNonvolatileRegisters() fails at the `UPDATEREG(X19)` step because RegDisplay contents are not valid.\r\n\r\n```\r\nC:\\Users\\swaroops\\coreclr\\bin\\tests\\Interop\\NativeLibraryResolveEvent\\ResolveEventTests>ResolveEventTests.cmd\r\nBEGIN EXECUTION\r\n \"C:\\Users\\swaroops\\coreclr\\bin\\tests\\Tests\\Core_Root\\corerun.exe\" ResolveEventTests.exe\r\n\r\nAssert failure(PID 8660 [0x000021d4], Thread: 5564 [0x15bc]): false\r\n\r\nCORECLR! GetCLRRuntimeHost + 0x1A8EE4 (0x00007ffb`dcc794a4)\r\nCORECLR! GetCLRRuntimeHost + 0x19EFA4 (0x00007ffb`dcc6f564)\r\nCORECLR! GetCLRRuntimeHost + 0x1AA844 (0x00007ffb`dcc7ae04)\r\nNTDLL! chkstk + 0x24C (0x00007ffc`0bbf506c)\r\nNTDLL! RtlUnwindEx + 0x24C (0x00007ffc`0bc09e7c)\r\nCORECLR! GetCLRRuntimeHost + 0x19B080 (0x00007ffb`dcc6b640)\r\nCORECLR! GetCLRRuntimeHost + 0x1AAA84 (0x00007ffb`dcc7b044)\r\nNTDLL! chkstk + 0x1CC (0x00007ffc`0bbf4fec)\r\nNTDLL! RtlRaiseException + 0x340 (0x00007ffc`0bc52f70)\r\nNTDLL! RtlRaiseException + 0xC0 (0x00007ffc`0bc52cf0)\r\n    File: d:\\j\\workspace\\arm64_cross_c---f1ec3c8e\\src\\vm\\exceptionhandling.cpp Line: 508\r\n    Image: C:\\Users\\swaroops\\coreclr\\bin\\tests\\Tests\\Core_Root\\CoreRun.exe\r\n\r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/21964","RelatedDescription":"Open issue \"Arm64: RegDisplay Missing Context while throwing exceptions\" (#21964)"},{"Id":"398418484","IsPullRequest":true,"CreatedAt":"2019-01-11T19:18:49","Actor":"BrianBohe","Number":"21963","RawContent":null,"Title":"Remove unreachable code","State":"open","Body":"If condition in line 4205 doesn't hold, It won't hold on line 4219 because they are the same.","Url":"https://github.com/dotnet/coreclr/pull/21963","RelatedDescription":"Open PR \"Remove unreachable code\" (#21963)"},{"Id":"398401722","IsPullRequest":true,"CreatedAt":"2019-01-11T18:37:38","Actor":"jashook","Number":"21962","RawContent":null,"Title":"Remove the Smarty lst files from CoreCLR","State":"closed","Body":"/cc @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/pull/21962","RelatedDescription":"Closed or merged PR \"Remove the Smarty lst files from CoreCLR\" (#21962)"},{"Id":"398395051","IsPullRequest":true,"CreatedAt":"2019-01-11T18:04:43","Actor":"jorive","Number":"21960","RawContent":null,"Title":"[Back Port] Addressing https://github.com/dotnet/coreclr/issues/21461 (#21771)","State":"open","Body":"- Increase the polling interval to 20 seconds.\r\n- Provide an opt-out option to the EventPipe file polling.\r\n","Url":"https://github.com/dotnet/coreclr/pull/21960","RelatedDescription":"Open PR \"[Back Port] Addressing https://github.com/dotnet/coreclr/issues/21461 (#21771)\" (#21960)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"399149876","IsPullRequest":true,"CreatedAt":"2019-01-15T01:27:41","Actor":"jainaashish","Number":"10604","RawContent":null,"Title":"Insert NuGet Build 4.9.3-rtm.5777 into cli release/2.2.1xx","State":"open","Body":"@livarcocc ","Url":"https://github.com/dotnet/cli/pull/10604","RelatedDescription":"Open PR \"Insert NuGet Build 4.9.3-rtm.5777 into cli release/2.2.1xx\" (#10604)"},{"Id":"399005682","IsPullRequest":true,"CreatedAt":"2019-01-14T17:57:25","Actor":"nugetlurker","Number":"10603","RawContent":null,"Title":"Insert NuGet Build 4.9.3-rtm.5777 into cli","State":"open","Body":"Insert NuGet Build 4.9.3-rtm.5777 into cli release/2.1.5xx branch","Url":"https://github.com/dotnet/cli/pull/10603","RelatedDescription":"Open PR \"Insert NuGet Build 4.9.3-rtm.5777 into cli\" (#10603)"},{"Id":"398955111","IsPullRequest":false,"CreatedAt":"2019-01-14T15:59:56","Actor":"tylerphelan","Number":"10602","RawContent":null,"Title":"Dotnet publish with -r ubuntu-x64 and --self-contained=false fails to find framework","State":"open","Body":"## Steps to reproduce\r\n```\r\n$ docker run -it ubuntu:18.04 bash\r\n$ apt-get update\r\n$ apt-get install liblttng-ust0 libcurl3 libssl1.0.0 libkrb5-3 zlib1g libicu60 -y\r\n$ dotnet --version\r\n> 2.2.101\r\n$ dotnet --list-runtimes\r\n> Microsoft.AspNetCore.All 2.2.1 [/tmp/dotnet/shared/Microsoft.AspNetCore.All]\r\n> Microsoft.AspNetCore.App 2.2.1 [/tmp/dotnet/shared/Microsoft.AspNetCore.App]\r\n> Microsoft.NETCore.App 2.2.1 [/tmp/dotnet/shared/Microsoft.NETCore.App]\r\n$ dotnet new webapi\r\n$ dotnet publish -r ubuntu-x64 --self-contained=false\r\n$ cd bin/Debug/netcoreapp2.2/ubuntu-x64/publish/\r\n$ ./project --server.urls http://0.0.0.0:8080\r\n> The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n  - Check application dependencies and target a framework version installed at:\r\n      /tmp/project/bin/Debug/netcoreapp2.2/ubuntu-x64/publish/\r\n  - Installing .NET Core prerequisites might help resolve this problem:\r\n      http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n  - The .NET Core framework and SDK can be installed from:\r\n      https://aka.ms/dotnet-download\r\n```\r\n\r\n## Expected  behavior\r\n\r\nWe are not sure if this is a valid workflow but we expected `Microsoft.AspNetCore.App` to be found.\r\n\r\n## Actual behavior\r\n\r\nThe error seen above with missing framework.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    29ae5ac2c2\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  14.04\r\n OS Platform: Linux\r\n RID:         ubuntu.14.04-x64\r\n Base Path:   /tmp/dotnet/sdk/2.2.101/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.2.101 [/tmp/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.1 [/tmp/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.1 [/tmp/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [/tmp/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nThis is using an SDK built from source against ubuntu 18.04 and everything else seems to be working: https://github.com/dotnet/cli/blob/master/Documentation/project-docs/developer-guide.md#buildingrunning\r\n\r\nI don't see why the framework wouldn't be found. Should this workflow with `dotnet publish -r ubuntu-x64 --self-contained=false` be valid? I've found some other issues where the `-r` flag and `--self-contained=false` are used together. What should we expect to happen in this case? Is the app packaged with the specific runtime but not entirely self-contained?\r\n\r\nThanks for the help!","Url":"https://github.com/dotnet/cli/issues/10602","RelatedDescription":"Open issue \"Dotnet publish with -r ubuntu-x64 and --self-contained=false fails to find framework\" (#10602)"},{"Id":"398507521","IsPullRequest":true,"CreatedAt":"2019-01-12T01:35:13","Actor":"dotnet-maestro[bot]","Number":"10601","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19061.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19061.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19061.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19061.6\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10601","RelatedDescription":"Open PR \"Update dependencies from dotnet/arcade\" (#10601)"},{"Id":"398500899","IsPullRequest":true,"CreatedAt":"2019-01-12T00:38:54","Actor":"wli3","Number":"10600","RawContent":null,"Title":"Add specific guide for no manifest","State":"open","Body":"fix https://github.com/dotnet/cli/issues/10499\r\n\r\nActual message:\r\n```\r\nCannot find any manifests file. Searched:\r\n/.config/dotnet-tools.json\r\n/dotnet-tools.json\r\nNo tools were restored.\r\n\r\nCannot find any manifests file. Searched:\r\n/.config/dotnet-tools.json\r\n/dotnet-tools.json\r\nIf you want to install a global tool, add '-g'. If you want to add to a tool manifest, you must first create it with 'dotnet new tool-manifest'.\r\n```","Url":"https://github.com/dotnet/cli/pull/10600","RelatedDescription":"Open PR \"Add specific guide for no manifest\" (#10600)"},{"Id":"398444559","IsPullRequest":true,"CreatedAt":"2019-01-11T20:42:01","Actor":"aawadall","Number":"10599","RawContent":null,"Title":"Added triage helpers badge","State":"open","Body":"skip ci please\r\n\r\nAdded triage helpers badge to README.md file \r\n","Url":"https://github.com/dotnet/cli/pull/10599","RelatedDescription":"Open PR \"Added triage helpers badge\" (#10599)"},{"Id":"398253778","IsPullRequest":true,"CreatedAt":"2019-01-11T17:44:58","Actor":"halex2005","Number":"10594","RawContent":null,"Title":"update NUnit3.DotNetNew.Template dependency version to 1.6.1","State":"closed","Body":"Update dotnet-new-nunit dependency version to latest 1.6.1 (requested in https://github.com/nunit/dotnet-new-nunit/issues/21).\r\n\r\nIs `master` branch right place for .NET Core 3.0 development?\r\n\r\nI didn't found `BundledTemplates.props` and `DependencyVersions.props` files in `master` branch. Where are them now?","Url":"https://github.com/dotnet/cli/pull/10594","RelatedDescription":"Closed or merged PR \"update NUnit3.DotNetNew.Template dependency version to 1.6.1\" (#10594)"},{"Id":"398278075","IsPullRequest":false,"CreatedAt":"2019-01-11T17:43:09","Actor":"skovsende","Number":"10595","RawContent":null,"Title":"ained runtime","State":"closed","Body":"## Steps to reproduce\r\n\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10595","RelatedDescription":"Closed issue \"ained runtime\" (#10595)"},{"Id":"398232797","IsPullRequest":false,"CreatedAt":"2019-01-11T17:40:29","Actor":"eiriktsarpalis","Number":"10593","RawContent":null,"Title":"Projects with `TargetFrameworks` property containing single framework failing in dotnet publish","State":"closed","Body":"## Steps to reproduce\r\n\r\n```\r\nmkdir repro &&\r\ncd repro &&\r\ndotnet new console &&\r\nsed -i 's/TargetFramework/TargetFrameworks/g' repro.csproj &&\r\ndotnet publish\r\n```\r\n\r\n## Expected  behavior\r\n\r\nShould successfully complete the publish step, since no framework ambiguity exists\r\n\r\n## Actual behavior\r\nFails with the error\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.CrossTargeting.targets(31,5): error : The 'Publish' target is not supported without specifying a target framework. The current project targets multiple frameworks, please specify the framework for the published application. [C:\\Users\\user\\devel\\private\\repro\\repro.csproj]\r\n```\r\nMy expectation would be that projects containing a single framework in `TargetFrameworks` should not be treated as multi-targeted projects.\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10593","RelatedDescription":"Closed issue \"Projects with `TargetFrameworks` property containing single framework failing in dotnet publish\" (#10593)"},{"Id":"398073530","IsPullRequest":true,"CreatedAt":"2019-01-11T17:38:08","Actor":"livarcocc","Number":"10591","RawContent":null,"Title":"Updating the SDK LKG version to 3.0.100-preview-010046","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10591","RelatedDescription":"Closed or merged PR \"Updating the SDK LKG version to 3.0.100-preview-010046\" (#10591)"},{"Id":"398280664","IsPullRequest":true,"CreatedAt":"2019-01-11T17:37:48","Actor":"dotnet-maestro[bot]","Number":"10596","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19060.8\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10596","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10596)"},{"Id":"398191673","IsPullRequest":false,"CreatedAt":"2019-01-11T17:25:05","Actor":"nalla","Number":"10592","RawContent":null,"Title":"dotnet SDK 2.2.102 fails to run netcoreapp2.1 that references Microsoft.AspNetCore.SignalR","State":"closed","Body":"After installing SDK `2.2.102`, a `netcoreapp2.1` service that has a reference to the `Microsoft.AspNetCore.SignalR` package fails to start.\r\n\r\n## Steps to reproduce\r\n```\r\nmkdir test\r\ndotnet new globaljson --sdk-version 2.1.503\r\ndotnet new web\r\nrm global.json // optional, both with fixed sdk and without the same error occurs.\r\ndotnet add package Microsoft.AspNetCore.SignalR --version 1.0.4\r\ndotnet run\r\n```\r\n\r\n## Expected  behavior\r\nApp starts.\r\n\r\n## Actual behavior\r\n```\r\nApplication startup exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IO.FileLoadException: Could not load file or assembly 'Microsoft.AspNetCore.Connections.Abstractions, Version=2.1.3.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions..ctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean wrapExceptions, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor)\r\n   at System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean wrapExceptions, Boolean skipCheckThis, Boolean fillCache)\r\n   at System.Activator.CreateInstance[T]()\r\n   at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)\r\n   at Microsoft.Extensions.Options.OptionsManager`1.<>c__DisplayClass5_0.<Get>b__0()\r\n   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1.CreateValue()\r\n   at Microsoft.Extensions.Options.OptionsCache`1.GetOrAdd(String name, Func`1 createOptions)\r\n   at Microsoft.Extensions.Options.OptionsManager`1.Get(String name)\r\n   at Microsoft.Extensions.Options.OptionsManager`1.get_Value()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.CreateServiceContext(IOptions`1 options, ILoggerFactory loggerFactory)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer..ctor(IOptions`1 options, ITransportFactory transportFactory, ILoggerFactory loggerFactory)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine.<>c__DisplayClass1_0.<RealizeService>b__0(ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureServer()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\ncrit: Microsoft.AspNetCore.Hosting.Internal.WebHost[6]\r\n      Application startup exception\r\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IO.FileLoadException: Could not load file or assembly 'Microsoft.AspNetCore.Connections.Abstractions, Version=2.1.3.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions..ctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean wrapExceptions, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor)\r\n   at System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean wrapExceptions, Boolean skipCheckThis, Boolean fillCache)\r\n   at System.Activator.CreateInstance[T]()\r\n   at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)\r\n   at Microsoft.Extensions.Options.OptionsManager`1.<>c__DisplayClass5_0.<Get>b__0()\r\n   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1.CreateValue()\r\n   at Microsoft.Extensions.Options.OptionsCache`1.GetOrAdd(String name, Func`1 createOptions)\r\n   at Microsoft.Extensions.Options.OptionsManager`1.Get(String name)\r\n   at Microsoft.Extensions.Options.OptionsManager`1.get_Value()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.CreateServiceContext(IOptions`1 options, ILoggerFactory loggerFactory)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer..ctor(IOptions`1 options, ITransportFactory transportFactory, ILoggerFactory loggerFactory)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine.<>c__DisplayClass1_0.<RealizeService>b__0(ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureServer()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n\r\nUnhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IO.FileLoadException: Could not load file or assembly 'Microsoft.AspNetCore.Connections.Abstractions, Version=2.1.3.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions..ctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean wrapExceptions, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor)\r\n   at System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean wrapExceptions, Boolean skipCheckThis, Boolean fillCache)\r\n   at System.Activator.CreateInstance[T]()\r\n   at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)\r\n   at Microsoft.Extensions.Options.OptionsManager`1.<>c__DisplayClass5_0.<Get>b__0()\r\n   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1.CreateValue()\r\n   at Microsoft.Extensions.Options.OptionsCache`1.GetOrAdd(String name, Func`1 createOptions)\r\n   at Microsoft.Extensions.Options.OptionsManager`1.Get(String name)\r\n   at Microsoft.Extensions.Options.OptionsManager`1.get_Value()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.CreateServiceContext(IOptions`1 options, ILoggerFactory loggerFactory)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer..ctor(IOptions`1 options, ITransportFactory transportFactory, ILoggerFactory loggerFactory)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine.<>c__DisplayClass1_0.<RealizeService>b__0(ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureServer()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Hosting.WebHostExtensions.RunAsync(IWebHost host, CancellationToken token, String shutdownMessage)\r\n   at Microsoft.AspNetCore.Hosting.WebHostExtensions.RunAsync(IWebHost host, CancellationToken token)\r\n   at Microsoft.AspNetCore.Hosting.WebHostExtensions.Run(IWebHost host)\r\n   at test.Program.Main(String[] args) in C:\\Sources\\nalla\\test\\Program.cs:line 17\r\n```\r\n\r\n## Workaround\r\n- Change implicit version of `<PackageReference Include=\"Microsoft.AspNetCore.App\" />` to explicit version `<PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"2.1.7\" />`\r\n- or install Microsoft.AspNetCore.Connections.Abstractions 2.1.3\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.503\r\n Commit:    4c506e0f35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.503\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10592","RelatedDescription":"Closed issue \"dotnet SDK 2.2.102 fails to run netcoreapp2.1 that references Microsoft.AspNetCore.SignalR\" (#10592)"},{"Id":"398314692","IsPullRequest":false,"CreatedAt":"2019-01-11T14:37:26","Actor":"eiriktsarpalis","Number":"10598","RawContent":null,"Title":"dotnet sln builds using incorrect project configuration for transitive dependencies","State":"open","Body":"## Steps to reproduce\r\n\r\n```\r\nmkdir repro &&\r\ncd repro &&\r\ndotnet new classlib -o projA &&\r\ndotnet new classlib -o projB &&\r\ndotnet add projB reference projA &&\r\ndotnet new sln &&\r\ndotnet sln repro.sln add projB &&\r\ndotnet build repro.sln -c Release\r\n```\r\n## Expected  behavior\r\n\r\nShould build `projA` and `projB` using `Release` configuration.\r\n\r\n## Actual behavior\r\n\r\n`projA` is built using `Debug` and `projB` is built using `Release`.\r\n```\r\n$ dotnet build repro.sln -c Release\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for C:\\Users\\eirik.tsarpalis\\devel\\private\\repro\\repro\\projB\\projB.csproj...\r\n  Restore completed in 52.68 ms for C:\\Users\\eirik.tsarpalis\\devel\\private\\repro\\repro\\projA\\projA.csproj.\r\n  Restore completed in 210.78 ms for C:\\Users\\eirik.tsarpalis\\devel\\private\\repro\\repro\\projB\\projB.csproj.\r\n  projA -> C:\\Users\\eirik.tsarpalis\\devel\\private\\repro\\repro\\projA\\bin\\Debug\\netstandard2.0\\projA.dll\r\n  projB -> C:\\Users\\eirik.tsarpalis\\devel\\private\\repro\\repro\\projB\\bin\\Release\\netstandard2.0\\projB.dll\r\n```\r\nThe fact that this behaviour is incorrect is corroborated by the fact that project-driven builds do not exhibit this behaviour:\r\n```\r\n$ dotnet build projB/ -c Release\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 54.32 ms for C:\\Users\\eirik.tsarpalis\\devel\\private\\repro\\repro\\projB\\projB.csproj.\r\n  Restore completed in 54.32 ms for C:\\Users\\eirik.tsarpalis\\devel\\private\\repro\\repro\\projA\\projA.csproj.\r\n  projA -> C:\\Users\\eirik.tsarpalis\\devel\\private\\repro\\repro\\projA\\bin\\Release\\netstandard2.0\\projA.dll\r\n  projB -> C:\\Users\\eirik.tsarpalis\\devel\\private\\repro\\repro\\projB\\bin\\Release\\netstandard2.0\\projB.dll\r\n```\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10598","RelatedDescription":"Open issue \"dotnet sln builds using incorrect project configuration for transitive dependencies\" (#10598)"},{"Id":"398280790","IsPullRequest":true,"CreatedAt":"2019-01-11T13:04:54","Actor":"dotnet-maestro[bot]","Number":"10597","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19060.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19061.4\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19062.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19062.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10597","RelatedDescription":"Open PR \"Update dependencies from dotnet/sdk\" (#10597)"},{"Id":"398016065","IsPullRequest":true,"CreatedAt":"2019-01-11T00:13:44","Actor":"dotnet-bot","Number":"10590","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10590","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10590)"},{"Id":"397967829","IsPullRequest":true,"CreatedAt":"2019-01-10T20:28:45","Actor":"livarcocc","Number":"10588","RawContent":null,"Title":"Updating SDK to 2.1.600-preview-63710-04","State":"closed","Body":"This contains a matching NuGet.\r\n","Url":"https://github.com/dotnet/cli/pull/10588","RelatedDescription":"Closed or merged PR \"Updating SDK to 2.1.600-preview-63710-04\" (#10588)"},{"Id":"397968796","IsPullRequest":true,"CreatedAt":"2019-01-10T20:28:32","Actor":"livarcocc","Number":"10589","RawContent":null,"Title":"Updating SDK to 2.2.200-preview-63710-03","State":"closed","Body":"This contains a matching NuGet.","Url":"https://github.com/dotnet/cli/pull/10589","RelatedDescription":"Closed or merged PR \"Updating SDK to 2.2.200-preview-63710-03\" (#10589)"},{"Id":"397952416","IsPullRequest":true,"CreatedAt":"2019-01-10T19:11:45","Actor":"rainersigwald","Number":"10587","RawContent":null,"Title":"MSBuild 16.0.360-preview+g9781d96883","State":"closed","Body":"This is the version of MSBuild that's on the VS 16.0-preview2 train currently.\r\n\r\n@livarcocc I didn't see any darc-driven updates for this; are they coming or is that something that'll only apply to newer release vehicles?","Url":"https://github.com/dotnet/cli/pull/10587","RelatedDescription":"Closed or merged PR \"MSBuild 16.0.360-preview+g9781d96883\" (#10587)"},{"Id":"397586057","IsPullRequest":true,"CreatedAt":"2019-01-10T18:36:22","Actor":"dotnet-bot","Number":"10580","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10580","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10580)"},{"Id":"397821652","IsPullRequest":true,"CreatedAt":"2019-01-10T18:35:52","Actor":"dotnet-maestro[bot]","Number":"10585","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10585","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10585)"},{"Id":"397821786","IsPullRequest":true,"CreatedAt":"2019-01-10T18:17:33","Actor":"dotnet-maestro[bot]","Number":"10586","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19059.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10586","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/sdk\" (#10586)"},{"Id":"397814342","IsPullRequest":false,"CreatedAt":"2019-01-10T17:47:10","Actor":"desmondgc","Number":"10584","RawContent":null,"Title":"Absolute reference to project.assets.json prevents separating build and publish stages","State":"closed","Body":"The .csproj.nuget.g.props file contains an absolute reference to project.assets.json which prevents us from separating build and publish stages in our CI pipeline. The idea is to have a pipeline that first builds the project, then test and publish jobs can be run in parallel using the output from the build stage. (I want to use `dotnet test --no-build` and `dotnet publish --no-build` to ensure the same output is used for all future stages.)\r\n\r\nThe problematic behavior can be reproduced by building a project, renaming the root folder or moving it elsewhere, and then attempting to publish with `--no-build`. The real-world case is that our CI jobs may be run on different runners so the build job runs under `/builds/765eb435/...` and the publish job runs under `/builds/5951fa48/...` for example.\r\n\r\n## Steps to reproduce\r\n\r\n```\r\ndotnet new console -o foo\r\ndotnet build foo\r\nmv foo bar\r\ndotnet publish --no-build bar\r\n```\r\n\r\n## Expected  behavior\r\n\r\nProject is published successfully.\r\n\r\n## Actual behavior\r\n\r\n```\r\n/usr/share/dotnet/sdk/2.2.101/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error NETSDK1004: Assets file '/tmp/foo/obj/project.assets.json' not found. Run a NuGet package restore to generate this file. [/tmp/bar/foo.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.101/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.2.101 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```","Url":"https://github.com/dotnet/cli/issues/10584","RelatedDescription":"Closed issue \"Absolute reference to project.assets.json prevents separating build and publish stages\" (#10584)"},{"Id":"397742060","IsPullRequest":true,"CreatedAt":"2019-01-10T13:04:19","Actor":"v-zbsail","Number":"10583","RawContent":null,"Title":"LOC CHECKIN | dotnet/cli master | 20190110","State":"closed","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/10583","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/cli master | 20190110\" (#10583)"},{"Id":"397686280","IsPullRequest":false,"CreatedAt":"2019-01-10T06:59:56","Actor":"veer66","Number":"10582","RawContent":null,"Title":"dotnet new couldn't obtain some templates using Thai locale","State":"closed","Body":"## Steps to reproduce\r\n1. Remove existing template and configuration \r\n\r\n```\r\nrm -rf ~/.dotnet ~/.templateengine \r\n```\r\n\r\n2. Remove existing project by \r\n\r\n```\r\nrm -rf ConsoleApp \r\n```\r\n\r\n3. Create project using Thai locale by \r\n\r\n```\r\nLC_ALL=th_TH.UTF-8 LANG=th_TH.UTF-8 dotnet new console --output ConsoleApp\r\n```\r\n\r\n## Expected  behavior\r\n\r\n```\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\n\r\nASP.NET Core\r\n------------\r\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\r\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms refer to the platform specific documentation.\r\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\r\nGetting ready...\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on ConsoleApp/ConsoleApp.csproj...\r\n  Restoring packages for /home/vee/Develop/exper/dotnet/ConsoleApp/ConsoleApp.csproj...\r\n  Generating MSBuild file /home/vee/Develop/exper/dotnet/ConsoleApp/obj/ConsoleApp.csproj.nuget.g.props.\r\n  Generating MSBuild file /home/vee/Develop/exper/dotnet/ConsoleApp/obj/ConsoleApp.csproj.nuget.g.targets.\r\n  Restore completed in 174.66 ms for /home/vee/Develop/exper/dotnet/ConsoleApp/ConsoleApp.csproj.\r\n\r\nRestore succeeded.\r\n```\r\n\r\n## Actual behavior\r\n\r\n```\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\n\r\nASP.NET Core\r\n------------\r\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\r\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms refer to the platform specific documentation.\r\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\r\nGetting ready...\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --dry-run           Displays a summary of what would happen if the given command line were run if it would result in a template creation.\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n\r\n\r\nNo templates matched the input template name: console.\r\n\r\nTemplates                                 Short Name      Language      Tags       \r\n-----------------------------------------------------------------------------------\r\nASP.NET Core with Angular                 angular         [C#]          Web/MVC/SPA\r\nASP.NET Core with React.js                react           [C#]          Web/MVC/SPA\r\nASP.NET Core with React.js and Redux      reactredux      [C#]          Web/MVC/SPA\r\n\r\nExamples:\r\n    dotnet new angular\r\n    dotnet new react\r\n    dotnet new --help\r\n\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.102\r\n Commit:    96ff75a873\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.10\r\n OS Platform: Linux\r\n RID:         ubuntu.18.10-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.102/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.2.102 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10582","RelatedDescription":"Closed issue \"dotnet new couldn't obtain some templates using Thai locale\" (#10582)"},{"Id":"397649585","IsPullRequest":false,"CreatedAt":"2019-01-10T02:46:46","Actor":"dsplaisted","Number":"10581","RawContent":null,"Title":"Update targeting pack asset resolution to handle assets from \"real\" targeting packs","State":"open","Body":"With https://github.com/dotnet/sdk/pull/2774, we are resolving assets from \"targeting packs\", but we are using the existing packages (such as Microsoft.NETCore.App) as the targeting packs.  We plan to use different packages with different layouts as the real targeting packs.  Along with that, we will need to update the asset resolution logic to account for this.\r\n\r\nSee [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) for the current design for the targeting pack layout.\r\n\r\nItems that should be resolved from targeting packs:\r\n\r\n- Assembly references\r\n- Platform manifests for conflict resolution\r\n- `PackageConflictPreferredPackages`\r\n- Possibly, `PackageConflictOverrides` items","Url":"https://github.com/dotnet/cli/issues/10581","RelatedDescription":"Open issue \"Update targeting pack asset resolution to handle assets from \"real\" targeting packs\" (#10581)"},{"Id":"397586042","IsPullRequest":true,"CreatedAt":"2019-01-10T00:26:12","Actor":"dotnet-bot","Number":"10579","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10579","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10579)"},{"Id":"397570591","IsPullRequest":true,"CreatedAt":"2019-01-09T22:29:35","Actor":"livarcocc","Number":"10578","RawContent":null,"Title":"Merge release/2.1.6xx into release/2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10578","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx into release/2.2.2xx\" (#10578)"},{"Id":"397524367","IsPullRequest":true,"CreatedAt":"2019-01-09T21:59:49","Actor":"mmitche","Number":"10577","RawContent":null,"Title":"Add a darc dependency for Microsoft.TemplateEngine.Cli","State":"closed","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/10577","RelatedDescription":"Closed or merged PR \"Add a darc dependency for Microsoft.TemplateEngine.Cli\" (#10577)"},{"Id":"397362465","IsPullRequest":true,"CreatedAt":"2019-01-09T18:03:50","Actor":"dotnet-maestro[bot]","Number":"10575","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10575","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10575)"},{"Id":"397362609","IsPullRequest":true,"CreatedAt":"2019-01-09T17:32:44","Actor":"dotnet-maestro[bot]","Number":"10576","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19058.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10576","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/sdk\" (#10576)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Closed or merged PR \"Remove the manual config system\" (#1040)"},{"Id":"392986163","IsPullRequest":false,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1032","RawContent":null,"Title":"Remove slim configuration system and stop overloading Configuration","State":"closed","Body":"We should stop overloading the `Configuration` property in favor of the right msbuild properties and remove the `ConfigurationGroup` property to enable native VS support and remove a lot of obsolete stuff.\r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)'==''\">\r\n    <ConfigurationGroup Condition=\"'$(ConfigurationGroup)'==''\">Debug</ConfigurationGroup>\r\n    <Configuration>$(ConfigurationGroup)</Configuration>\r\n    <Configuration Condition=\"'$(TargetGroup)'!=''\">$(TargetGroup)_$(Configuration)</Configuration>\r\n    <Configuration Condition=\"'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'\">$(OSGroup)_$(Configuration)</Configuration>\r\n  </PropertyGroup>\r\n```\r\n\r\ncc @ericstj @wtgodbe ","Url":"https://github.com/dotnet/standard/issues/1032","RelatedDescription":"Closed issue \"Remove slim configuration system and stop overloading Configuration\" (#1032)"},{"Id":"398564136","IsPullRequest":false,"CreatedAt":"2019-01-12T15:37:14","Actor":"netspiri","Number":"1052","RawContent":null,"Title":"Incorrect dll being copied","State":"open","Body":"I have\r\n\r\n- ProjectA targeting .Net Standard 2.0 making use of nuget library where the dlls for the different frameworks are named differently\r\n- ProjectB targeting .Net Standard 2.0 references ProjectA\r\n- ProjectC targeting .Net Framework 4.7.2 references ProjectB\r\n- ProjectD targeting .Net Framework 4.7.2 and is a Console app referencing ProjectC\r\n\r\nIf I run ProjectD I get the infamous \"Could not load file or assembly\" for Aspose.Email.Core.dll.\r\n\r\nI played around <RestoreProjectStyle>PackageReference</RestoreProjectStyle> in ProjectC and ProjectD but this results in .net framework dll (i.e Aspose.Email.dll) being copied over from the nuget package and not the .net standard dll (Aspose.Email.Core.dll).  I did not play with binding redirects because I do not think this is related.\r\n\r\nI've migrated manually ProjectC and ProjectD to the new csproj style but this had no effect.\r\n\r\nI do not want to end up with ProjectD referencing the required dlls directly because there must \"the proper way of doing it\".\r\n\r\nI have therefore uploaded a clean barebones project to https://bitbucket.org/netspiri/projectreferencestest.git , so as to see how the experts would do it, in the hope that this might help others. \r\n\r\nI've attached also the output of msbuild ProjectD.csproj /t:rebuild /bl\r\n\r\nIt would be nice if the experts would guide trough thier troubleshooting process.\r\n\r\n[log.txt](https://github.com/dotnet/standard/files/2752202/log.txt)\r\n[msbuild.zip](https://github.com/dotnet/standard/files/2752203/msbuild.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1052","RelatedDescription":"Open issue \"Incorrect dll being copied\" (#1052)"},{"Id":"396798571","IsPullRequest":false,"CreatedAt":"2019-01-11T01:19:54","Actor":"duncand","Number":"1050","RawContent":null,"Title":"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset","State":"closed","Body":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before.","Url":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Closed issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050)"},{"Id":"391463924","IsPullRequest":false,"CreatedAt":"2019-01-11T00:24:30","Actor":"dmitriyse","Number":"1024","RawContent":null,"Title":"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset","State":"closed","Body":"Please open new .NetStandard branch with deep refresh of .Net API surface.\r\nCurrently .NetStandard 2.0 and it's successor .NetStandard 2.1 contains everything that were added in .net since version 1.0. Some API is already outdated and another will become outdated soon.\r\n\r\n.Net Standard 2.1 have some positive movements. It's drops some components to out of standard into additional components.\r\n\r\nBut it's not enough. It's time to stay in .Net Standard only good and modern parts.\r\nFor example:\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(T[] array);\r\n     // ...\r\n}\r\n```\r\ncan be replaced with:\r\n\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(Span<T> output);\r\n     // ...\r\n}\r\n```\r\nAssemblies targeting .NetStandard 2.0, .NetStandard 2.1 and proposed .NetStandard 3.0.0 should be capable to work side-by-side inside the same AppDomain.\r\n\r\nTODO: Add diagram.\r\n","Url":"https://github.com/dotnet/standard/issues/1024","RelatedDescription":"Closed issue \"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset\" (#1024)"},{"Id":"394796330","IsPullRequest":false,"CreatedAt":"2019-01-11T00:23:25","Actor":"MV10","Number":"1041","RawContent":null,"Title":"System.MathF missing in .NET Standard 2.1 README","State":"closed","Body":"Minor, but `System.MathF` is missing from the [README](https://github.com/dotnet/standard/blob/master/docs/planning/netstandard-2.1/README.md). I figured it would be in the Miscellaneous list at a minimum. (As I understand it, this is still on schedule for .NET Standard 2.1 per  https://github.com/dotnet/corefx/issues/15830, correct?)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1041","RelatedDescription":"Closed issue \"System.MathF missing in .NET Standard 2.1 README\" (#1041)"},{"Id":"396675175","IsPullRequest":false,"CreatedAt":"2019-01-11T00:22:05","Actor":"Entomy","Number":"1049","RawContent":null,"Title":"String Enhancements","State":"closed","Body":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?","Url":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Closed issue \"String Enhancements\" (#1049)"},{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"},{"Id":"396646204","IsPullRequest":true,"CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Number":"1048","RawContent":null,"Title":" Move source items into src folder","State":"closed","Body":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037","Url":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Closed or merged PR \" Move source items into src folder\" (#1048)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2019-01-07T22:02:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"closed","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Closed issue \"Group source items in a src folder\" (#1037)"},{"Id":"396610837","IsPullRequest":true,"CreatedAt":"2019-01-07T19:06:28","Actor":"wtgodbe","Number":"1047","RawContent":null,"Title":"Bump AssemblyVersion for nestandard.dll to 2.1.0.0","State":"open","Body":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Open PR \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047)"},{"Id":"396598897","IsPullRequest":true,"CreatedAt":"2019-01-07T18:47:02","Actor":"wtgodbe","Number":"1046","RawContent":null,"Title":"Update APICompat baseline","State":"closed","Body":"I see these updates to the APICompat baselines after building from clean - I've confirmed that they weren't present before https://github.com/dotnet/standard/commit/dbb3e847a6dd09a8c9ec0206463ed1b848a5c90b. I figured I'd open a PR to use first as an easy way to view the diff & discuss, then to take into master if we decide it's the right thing. @ViktorHofer did you notice these locally when fixing up APICompat/GenAPI?","Url":"https://github.com/dotnet/standard/pull/1046","RelatedDescription":"Closed or merged PR \"Update APICompat baseline\" (#1046)"},{"Id":"396591596","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:51","Actor":"wtgodbe","Number":"1045","RawContent":null,"Title":"Convert seed.sh/.cmd files to proj files & update GenAPI invocations","State":"open","Body":"We should convert files like https://github.com/dotnet/standard/blob/8ca3d4c0c9599186d50196781484312176a9b2ad/platforms/xamarin.android/seed.sh to `.proj` files that can be built on-demand (either by direct invocation of `dotnet msbuild`, or a wrapper .ps1/.sh script that builds the project). This way we'll have access to the up-to-date version of `GenAPI`. We should also update the invocation of GenAPI to match the new standard introduced by https://github.com/dotnet/arcade/pull/1676\r\n\r\nCC @ViktorHofer ","Url":"https://github.com/dotnet/standard/issues/1045","RelatedDescription":"Open issue \"Convert seed.sh/.cmd files to proj files & update GenAPI invocations\" (#1045)"},{"Id":"396287501","IsPullRequest":false,"CreatedAt":"2019-01-06T19:38:08","Actor":"gpcaretti","Number":"1044","RawContent":null,"Title":"FAQ: how to understand a package is compatible with NETStandard","State":"open","Body":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?","Url":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Open issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044)"},{"Id":"396025237","IsPullRequest":true,"CreatedAt":"2019-01-04T19:25:54","Actor":"ViktorHofer","Number":"1043","RawContent":null,"Title":"Fix GenAPI invocation with new args","State":"closed","Body":"Also need to use DARC to get a GenApi fix in.","Url":"https://github.com/dotnet/standard/pull/1043","RelatedDescription":"Closed or merged PR \"Fix GenAPI invocation with new args\" (#1043)"},{"Id":"395644781","IsPullRequest":true,"CreatedAt":"2019-01-04T16:29:48","Actor":"ViktorHofer","Number":"1042","RawContent":null,"Title":"Respect ApiCompat cmd changes","State":"closed","Body":"Depends on https://github.com/dotnet/arcade/pull/1676","Url":"https://github.com/dotnet/standard/pull/1042","RelatedDescription":"Closed or merged PR \"Respect ApiCompat cmd changes\" (#1042)"},{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-26T21:14:18","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"closed","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Closed or merged PR \"Fix representation of enum values\" (#1039)"},{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"},{"Id":"392786865","IsPullRequest":false,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1029","RawContent":null,"Title":"Add ApiCompat run for netstandard2.0","State":"closed","Body":"We should add an APICompat run that checks against 2.0, similar the ones we already have for 1.0-1.6: https://github.com/dotnet/standard/blob/master/apicompat/baselines/ApiCompatBaseline.netstandard1.6.txt","Url":"https://github.com/dotnet/standard/issues/1029","RelatedDescription":"Closed issue \"Add ApiCompat run for netstandard2.0\" (#1029)"},{"Id":"393005614","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Number":"1035","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1035)"},{"Id":"393001679","IsPullRequest":true,"CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Number":"1034","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1034)"},{"Id":"392982975","IsPullRequest":false,"CreatedAt":"2018-12-20T10:31:53","Actor":"ViktorHofer","Number":"1031","RawContent":null,"Title":"Remove depproj approach and enable project restore","State":"open","Body":"As discussed in another PR I think it makes sense to remove the depproj approach here in the standard repo and follow the usual way of referencing packages directly in the respective project, in this case netstandard.csproj. Also the netstandard.builds file which restores for different frameworks can be incorporated in the csproj by adding a `TargetFrameworks` property and right PackageReference conditions. \r\n\r\ncc @wtgodbe @ericstj ","Url":"https://github.com/dotnet/standard/issues/1031","RelatedDescription":"Open issue \"Remove depproj approach and enable project restore\" (#1031)"},{"Id":"392822069","IsPullRequest":true,"CreatedAt":"2018-12-20T10:07:40","Actor":"wtgodbe","Number":"1030","RawContent":null,"Title":"Delete CI & redundant publish file","State":"closed","Body":"This deletes the old `netci.groovy` file, since we're using Azure DevOps for CI now. It also deletes `publish.msbuild`, which isn't used anywhere.\r\n\r\n@ViktorHofer PTAL","Url":"https://github.com/dotnet/standard/pull/1030","RelatedDescription":"Closed or merged PR \"Delete CI & redundant publish file\" (#1030)"},{"Id":"391885087","IsPullRequest":true,"CreatedAt":"2018-12-19T23:33:25","Actor":"wtgodbe","Number":"1027","RawContent":null,"Title":"Build Standard entirely against Arcade, without Buildtools","State":"closed","Body":"This cuts out buildtools entirely from the Standard repo, so that we fully rely on the Arcade SDK to build against instead. It replaces the functionality for code analyzers, `ValidateApiCompatForSrc`, and the build tasks.\r\n\r\n@ericstj @safern @danmosemsft @ViktorHofer @chcosta PTAL\r\n\r\nCC @karelz ","Url":"https://github.com/dotnet/standard/pull/1027","RelatedDescription":"Closed or merged PR \"Build Standard entirely against Arcade, without Buildtools\" (#1027)"},{"Id":"392146465","IsPullRequest":true,"CreatedAt":"2018-12-18T13:01:40","Actor":"dotnet-maestro[bot]","Number":"1028","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18617.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18618.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1028","RelatedDescription":"Open PR \"Update dependency files\" (#1028)"},{"Id":"391702003","IsPullRequest":true,"CreatedAt":"2018-12-17T15:07:31","Actor":"dotnet-maestro[bot]","Number":"1026","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1026","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1026)"},{"Id":"391465145","IsPullRequest":true,"CreatedAt":"2018-12-16T19:53:13","Actor":"dotnet-maestro[bot]","Number":"1025","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1025","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1025)"},{"Id":"391376312","IsPullRequest":true,"CreatedAt":"2018-12-15T13:41:30","Actor":"dotnet-maestro[bot]","Number":"1023","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18614.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1023","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1023)"},{"Id":"391102384","IsPullRequest":true,"CreatedAt":"2018-12-14T13:21:43","Actor":"dotnet-maestro[bot]","Number":"1021","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1021","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1021)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"399188205","IsPullRequest":true,"CreatedAt":"2019-01-15T04:55:22","Actor":"dotnet-maestro[bot]","Number":"34598","RawContent":null,"Title":"Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/core-setup\r\n\r\n- Microsoft.NETCore.App - 3.0.0-preview-27314-5\r\n- Microsoft.NETCore.DotNetHost - 3.0.0-preview-27314-5\r\n- Microsoft.NETCore.DotNetHostPolicy - 3.0.0-preview-27314-5\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34598","RelatedDescription":"Open PR \"Update dependencies from dotnet/core-setup\" (#34598)"},{"Id":"399141534","IsPullRequest":true,"CreatedAt":"2019-01-15T02:38:20","Actor":"Dotnet-GitSync-Bot","Number":"34594","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corefx/pull/34594","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34594)"},{"Id":"399162665","IsPullRequest":true,"CreatedAt":"2019-01-15T02:32:42","Actor":"dotnet-maestro-bot","Number":"34596","RawContent":null,"Title":"Update CoreClr, CoreFx to preview-27315-01, preview.19064.4, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34596","RelatedDescription":"Open PR \"Update CoreClr, CoreFx to preview-27315-01, preview.19064.4, respectively (master)\" (#34596)"},{"Id":"399158906","IsPullRequest":true,"CreatedAt":"2019-01-15T02:13:44","Actor":"wfurt","Number":"34595","RawContent":null,"Title":"skip SetDateTimeMax test on 32b Unix platforms","State":"open","Body":"fixes #33966 \r\n\r\nOn 32 bit platforms time_t is only 32 bit (signed) and cannot hold time beyond ~ 2038. This is conceptually product bug/OS limitation,. Since we already skio  on OSX I simply extended that.\r\n\r\nWith this all tests pass (including outerloop)\r\n```\r\n    Finished:    System.IO.FileSystem.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.IO.FileSystem.Tests  Total: 4192, Errors: 0, Failed: 0, Skipped: 10, Time: 130.589s\r\n  /ssd/toweinfu/wfurt-corefx-arm/src/System.IO.FileSystem/tests\r\n  ----- end 01:50:56 ----- exit code 0 ----------------------------------------------------------\r\n  exit code 0 means Exited Successfully\r\n```\r\n","Url":"https://github.com/dotnet/corefx/pull/34595","RelatedDescription":"Open PR \"skip SetDateTimeMax test on 32b Unix platforms\" (#34595)"},{"Id":"399129787","IsPullRequest":true,"CreatedAt":"2019-01-15T00:07:35","Actor":"wtgodbe","Number":"34593","RawContent":null,"Title":"Reset package list for 1.0.14","State":"closed","Body":"CC @safern @ericstj @rmkerr ","Url":"https://github.com/dotnet/corefx/pull/34593","RelatedDescription":"Closed or merged PR \"Reset package list for 1.0.14\" (#34593)"},{"Id":"399129180","IsPullRequest":false,"CreatedAt":"2019-01-15T00:02:20","Actor":"yantang-msft","Number":"34592","RawContent":null,"Title":"The System.Diagnostics.StackTrace returns empty StackFrame for some exception","State":"open","Body":"This is the original issue https://github.com/Microsoft/ApplicationInsights-dotnet/issues/922 where we find this problem.\r\nThe StackTrace class is able to parse the call stack for one exception but not the other (returning empty stack frames), the formats do look a bit different. Is it a bug or expected?\r\n\r\n### stacktrace that can be parsed\r\n```\r\n   at System.Fabric.FabricClient.CreateNativeClient(IEnumerable`1 connectionStringsLocal)\r\n   at System.Fabric.Interop.Utility.<>c__DisplayClass27_0.<WrapNativeSyncInvoke>b__0()\r\n   at System.Fabric.Interop.Utility.WrapNativeSyncInvoke[TResult](Func`1 func, String functionTag, String functionArgs)\r\n   at System.Fabric.Interop.Utility.WrapNativeSyncInvoke(Action action, String functionTag, String functionArgs)\r\n   at System.Fabric.Interop.Utility.RunInMTA(Action action)\r\n   at System.Fabric.FabricClient.InitializeFabricClient(SecurityCredentials credentialArg, FabricClientSettings newSettings, String[] hostEndpointsArg)\r\n   at Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.<>c.<GetDefault>b__21_0()\r\n   at Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetClient()\r\n   at Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveHelperAsync(Func`5 resolveFunc, ResolvedServicePartition previousRsp, TimeSpan resolveTimeout, TimeSpan maxRetryInterval, CancellationToken cancellationToken, Uri serviceUri)\r\n   at Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.GetClientAsync(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings, CancellationToken cancellationToken)\r\n   at Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.GetClientAsync(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings, CancellationToken cancellationToken)\r\n   at Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.GetCommunicationClientAsync(CancellationToken cancellationToken)\r\n   at Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync[TResult](Func`2 func, CancellationToken cancellationToken, Type[] doNotRetryExceptionTypes)\r\n   at Microsoft.ServiceFabric.Services.Remoting.V2.Client.ServiceRemotingPartitionClient.InvokeAsync(IServiceRemotingRequestMessage remotingRequestMessage, String methodName, CancellationToken cancellationToken)\r\n   at Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsyncV2(Int32 interfaceId, Int32 methodId, String methodName, IServiceRemotingRequestMessageBody requestMsgBodyValue, CancellationToken cancellationToken)\r\n   at Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResultV2[TRetval](Int32 interfaceId, Int32 methodId, Task`1 task)\r\n```\r\n\r\n### stacktrace that can't be parsed\r\n```\r\n   at StatelessBackendService.StatelessBackendService.GetCountAsync() in D:\\service-fabric-dotnet-getting-started\\src\\GettingStartedApplication\\StatelessBackendService\\StatelessBackendService.cs:line 35\r\n   at StatelessBackendService.Interfaces.IStatelessBackendService_.service.disp.IStatelessBackendServiceMethodDispatcher.OnDispatchAsync(Int32 , Object , IServiceRemotingRequestMessageBody , IServiceRemotingMessageBodyFactory , CancellationToken )\r\n   at Microsoft.ServiceFabric.Services.Remoting.V2.Builder.MethodDispatcherBase.DispatchAsync(Object objectImplementation, Int32 methodId, IServiceRemotingRequestMessageBody requestBody, IServiceRemotingMessageBodyFactory remotingMessageBodyFactory, CancellationToken cancellationToken)\r\n   at Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher.OnDispatch(IServiceRemotingRequestMessageHeader requestMessageHeaders, IServiceRemotingRequestMessageBody requestBody, CancellationToken cancellationToken)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher.OnDispatch(IServiceRemotingRequestMessageHeader requestMessageHeaders, IServiceRemotingRequestMessageBody requestBody, CancellationToken cancellationToken)\r\n   at Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher.<>c__DisplayClass8_0.<HandleRequestResponseAsync>b__0(CancellationToken cancellationToken)\r\n   at Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationHelper.<DispatchRequest>d__5`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.ServiceRemotingMessageDispatcher.<HandleRequestResponseAsync>d__8.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.ServiceFabric.Services.Remoting.V2.FabricTransport.Runtime.FabricTransportMessageHandler.<RequestResponseAsync>d__7.MoveNext()\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/34592","RelatedDescription":"Open issue \"The System.Diagnostics.StackTrace returns empty StackFrame for some exception\" (#34592)"},{"Id":"399122355","IsPullRequest":false,"CreatedAt":"2019-01-14T23:32:32","Actor":"wtgodbe","Number":"34591","RawContent":null,"Title":"Add language to library-servicing.md for Private packages in 1.x","State":"open","Body":"We need to add info to https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/library-servicing.md about what to do in the case of 1.x.x Private packages. For example, `System.Private.Uri` has no Ref assembly, and builds runtime packages, meaning that the base packages has no `lib` folder. This causes buildtools to throw an error when we try to bump the AssemblyVersion & add a `AssemblyVersionInPackageVersion` error. Our workaround for this was to avoid adding a `AssemblyVersionInPackageVersion` entry, and rather to update the `BaselineVersion`. We should determine if we want that to be our policy (and therefore add it to the doc), or if we should fix the tooling in 1.x.x buildtools (It was already fixed in master here: https://github.com/dotnet/buildtools/commit/066e80bcad46c37fdcf097dfa8c2b743c2f45763#diff-2cd7181464965577be98f226e5ad075d)\r\n\r\nCC @ericstj @rmkerr ","Url":"https://github.com/dotnet/corefx/issues/34591","RelatedDescription":"Open issue \"Add language to library-servicing.md for Private packages in 1.x\" (#34591)"},{"Id":"399066910","IsPullRequest":true,"CreatedAt":"2019-01-14T23:24:19","Actor":"jkoritzinsky","Number":"34589","RawContent":null,"Title":"Remove flaky ReadByte assert.","State":"closed","Body":"We've hit the flaky assert in the Marshal.ReadByte test. I don't think that this test is worth the flaky-ness in the `Byte` case, so I'm just going to remove this assert and bring it back to how it was beforehand. Fixes #34579.\r\n\r\nSee #34445.\r\n\r\ncc: @AaronRobinsonMSFT","Url":"https://github.com/dotnet/corefx/pull/34589","RelatedDescription":"Closed or merged PR \"Remove flaky ReadByte assert.\" (#34589)"},{"Id":"398776892","IsPullRequest":false,"CreatedAt":"2019-01-14T23:24:19","Actor":"dotnet-mc-bot","Number":"34579","RawContent":null,"Title":"Test failure: System.Runtime.InteropServices.Tests.ByteTests/ReadByte_StructWithReferenceTypes_ReturnsExpected","State":"closed","Body":"Opened on behalf of @AriNuer\n\nThe test `System.Runtime.InteropServices.Tests.ByteTests/ReadByte_StructWithReferenceTypes_ReturnsExpected` has failed.\n\nFailure Message:\n```\nAssert.NotEqual() Failure\nExpected: Not 0\nActual:   0\n```\n\nStack Trace:\n```\n   at System.Runtime.InteropServices.Tests.ByteTests.ReadByte_StructWithReferenceTypes_ReturnsExpected() in /Users/vsts/agent/2.144.0/work/1/s/src/System.Runtime.InteropServices/tests/System/Runtime/InteropServices/Marshal/ReadWrite/ByteTests.cs:line 136\n```\n\nBuild : 3.0 - 20190113.2 (Core Tests)\nFailing configurations:\n- OSX.1014.Amd64-x64\n  - Release\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190113.2/workItem/System.Runtime.InteropServices.Tests/analysis/xunit/System.Runtime.InteropServices.Tests.ByteTests~2FReadByte_StructWithReferenceTypes_ReturnsExpected","Url":"https://github.com/dotnet/corefx/issues/34579","RelatedDescription":"Closed issue \"Test failure: System.Runtime.InteropServices.Tests.ByteTests/ReadByte_StructWithReferenceTypes_ReturnsExpected\" (#34579)"},{"Id":"399113313","IsPullRequest":false,"CreatedAt":"2019-01-14T22:58:03","Actor":"ahsonkhan","Number":"34590","RawContent":null,"Title":"Should Utf8JsonReader expose whether a JSON string needs to be unescaped or not?","State":"open","Body":"The `Utf8JsonReader` already knows whether a particular JSON string needs to be unescaped. If it stored that fact (and publicly exposed it), users like `JsonDocument` would not need to duplicate that check (which means we save the search for a backslash in the json payload).\r\n\r\nhttps://github.com/dotnet/corefx/blob/77096755443730962810662501f82550fdb4656d/src/System.Text.Json/src/System/Text/Json/Utf8JsonReader.cs#L760-L771\r\n\r\ncc @bartonjs ","Url":"https://github.com/dotnet/corefx/issues/34590","RelatedDescription":"Open issue \"Should Utf8JsonReader expose whether a JSON string needs to be unescaped or not?\" (#34590)"},{"Id":"399187718","IsPullRequest":false,"CreatedAt":"2019-01-14T21:02:32","Actor":"ZMoscipan","Number":"34597","RawContent":null,"Title":"IIS Web App Freezes for SQL server Network Error in Startup","State":"open","Body":"I have app where Startup method must access SQL server to get param for Middleware and services.\r\nIf application is reloaded and Startup method has no no access to the SQL Server at this moment, it freezes Web app permanently.  Consecutive requests are not processed even if the SQL server become available later.\r\nError Handler Returns:\r\nAn error occurred while starting the application.\r\nWin32Exception: No such host is known\r\nUnknown location\r\n\r\nSqlException: A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 0 - No such host is known.)\r\nSystem.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, uint waitForMultipleObjectsTimeout, bool allowCreate, bool onlyOneCheckConnection, DbConnectionOptions userOptions, out DbConnectionInternal connection)\r\n\r\nWebsite enabled log:\r\nApplication startup exception: System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 0 - No such host is known.) ---> System.ComponentModel.Win32Exception (11001): No such host is known\r\n   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling, String accessToken)\r\n   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n   at System.Data.SqlClient.SqlConnection.Open()\r\n   at GtsCustomLogger.SqlLogger.WriteToSqlServer(String storageLocation, GtsLogger loggerData)  ...\r\n   at GtsCustomLogger.GtsLogger.LogData() in ...\r\n   at AuthServerJwt.Startup.LogMiddlewareOK() in ...\r\n   at AuthServerJwt.Startup.Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory) in ...\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.Configure(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Mvc.Internal.MiddlewareFilterBuilderStartupFilter.<>c__DisplayClass0_0.<Configure>g__MiddlewareFilterBuilder|0(IApplicationBuilder builder)\r\n   at Microsoft.AspNetCore.Server.IISIntegration.IISSetupFilter.<>c__DisplayClass4_0.<Configure>b__0(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.HostFilteringStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Hosting.Internal.AutoRequestServicesStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder builder)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\nClientConnectionId:00000000-0000-0000-0000-000000000000\r\nError Number:11001,State:0,Class:20\r\ncrit: Microsoft.AspNetCore.Hosting.Internal.WebHost[6]\r\n      Application startup exception\r\nSystem.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 0 - No such host is known.) ---> System.ComponentModel.Win32Exception (11001): No such host is known\r\n   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling, String accessToken)\r\n   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n   at System.Data.SqlClient.SqlConnection.Open()\r\n   at GtsCustomLogger.SqlLogger.WriteToSqlServer(String storageLocation, GtsLogger loggerData)...\r\nSimply test:\r\n1. Have access to the SQL Server in Startup method.\r\n2. Publish the App to IIS.\r\n3. Request the page from the browser.\r\n4. Disconnect SQL server \r\n5. Restart Web app\r\n6. Request the page from the browser. (Will get error)\r\n7. Connect SQL server\r\n8. Request the page from the browser. (Will get error)\r\n9. Repeat  8. (Will get error)\r\n10. Restart Application Pool manually\r\n11. Request the page from the browser. (Works fine)\r\n\r\nCan't restart Application Pool in code do to security errors.\r\n","Url":"https://github.com/dotnet/corefx/issues/34597","RelatedDescription":"Open issue \"IIS Web App Freezes for SQL server Network Error in Startup\" (#34597)"},{"Id":"399064647","IsPullRequest":false,"CreatedAt":"2019-01-14T20:41:31","Actor":"ssa3512","Number":"34588","RawContent":null,"Title":"Clean build failing all SqlClient tests with JSON parsing exception","State":"open","Body":"After pulling latest master and running `build -allconfigurations`, `build src\\System.Data.SqlClient -allconfigurations` fails citing JSON parsing errors on `xunit.console.runtimeconfig.json` files\r\nhttps://gist.github.com/ssa3512/efd3a0ca3f26896e6afee7d84ff02243\r\n\r\nContents of `artifacts/bin/tests/System.Data.SqlClient.Tests/xunit.console.runtimeconfig.json` are\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <runtime>\r\n    <developmentMode developerInstallation=\"true\" />\r\n    <UseRandomizedStringHashAlgorithm enabled=\"1\" />\r\n  </runtime>\r\n</configuration>\r\n```\r\nwhich is XML, not JSON","Url":"https://github.com/dotnet/corefx/issues/34588","RelatedDescription":"Open issue \"Clean build failing all SqlClient tests with JSON parsing exception\" (#34588)"},{"Id":"398990508","IsPullRequest":true,"CreatedAt":"2019-01-14T17:19:24","Actor":"stephentoub","Number":"34587","RawContent":null,"Title":"Test to validate that TaskCompletionSource doesn't capture ExecutionContext","State":"open","Body":"Depends on https://github.com/dotnet/coreclr/pull/21981","Url":"https://github.com/dotnet/corefx/pull/34587","RelatedDescription":"Open PR \"Test to validate that TaskCompletionSource doesn't capture ExecutionContext\" (#34587)"},{"Id":"398972001","IsPullRequest":false,"CreatedAt":"2019-01-14T16:36:21","Actor":"AmirShokr","Number":"34586","RawContent":null,"Title":"DispatchProxy needs a non-generic Create API ","State":"open","Body":"Currently DispatchProxy just provides the following Generic API to create a proxy :\r\n  public static T Create<T, TProxy>() {..}\r\n\r\nHowever, when you want to create Proxies dynamically (on the fly) , you need a non-generic method like this:\r\n  public static object Create(Type contract, Type DispatchProxy)\r\n\r\nthe proposed implementation would be very simple like:\r\n\r\n  public static object Create(Type contract, Type DispatchProxy)\r\n        {\r\n            return DispatchProxyGenerator.CreateProxyInstance(DispatchProxy, contract);\r\n        }\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34586","RelatedDescription":"Open issue \"DispatchProxy needs a non-generic Create API \" (#34586)"},{"Id":"398940086","IsPullRequest":true,"CreatedAt":"2019-01-14T15:28:53","Actor":"tmds","Number":"34585","RawContent":null,"Title":"Unix: Add test for ExitCode on SIGTERM","State":"open","Body":"This test verifies the default ExitCode on SIGTERM is not zero.\r\n\r\nVerifies https://github.com/dotnet/coreclr/pull/21300.\r\n\r\n@jkotas @janvorli PTAL.\r\n\r\nThe `InlineData(null)` case will fail and should start working once the change from coreclr reaches corefx.","Url":"https://github.com/dotnet/corefx/pull/34585","RelatedDescription":"Open PR \"Unix: Add test for ExitCode on SIGTERM\" (#34585)"},{"Id":"398934401","IsPullRequest":false,"CreatedAt":"2019-01-14T15:16:51","Actor":"shortspider","Number":"34584","RawContent":null,"Title":"Certificate Revocation List Not Checked for ChainPolicy.ExtraStore on Windows","State":"open","Body":"We have an application that verifys a provided certificate against a root certificate. We do not want to have the certificate installed in the Windows Certificate Store and so we use the ChainPolicy.ExtraStore to set the root and verify.\r\n\r\nWe expect to get an UntrustedRoot error since it's not in the Windows store but the issue we are having is that on Windows the CRL is not retrieved and checked if an untrusted root is detected. We would expect that even if the root is untrusted that the CRL would be checked anyway. On Linux we do see this happen.\r\n\r\nLooking at the code, in [Windows](https://github.com/dotnet/corefx/blob/master/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Windows/ChainPal.BuildChain.cs) the BuildChain method sets up the chain engine with a handle to either the local machine store or the user store. It then calls crypt32.dll’s CertGetCertificateChain and passes it that chain engine to build the chain and returns a pointer to the chain context and a boolean indicating whether or not the chain was built successfully.\r\n\r\nIn [Linux](https://github.com/dotnet/corefx/blob/master/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Unix/ChainPal.cs) the BuildChain calls the FindCandidates method which checks several additional stores for the root certificate. This includes the ExtraStore which is what we are currently adding our root certificate to. It still does specifically look for System Trusted root in the BuildChain method, but its existence does not look like it determines whether or not the revocation check occurs. The method returns the newly built chain and a bool.\r\n\r\nIn Linux the BuildChain method only sets the untrusted root flag when building the chain. The revocation check still occurs unlike in Windows.\r\n\r\nCan anyone confirm that is a bug or if it's by design? If it's by design can you explain why?\r\n\r\nWe are using .NET Core 2.2.\r\n\r\nThanks.\r\n","Url":"https://github.com/dotnet/corefx/issues/34584","RelatedDescription":"Open issue \"Certificate Revocation List Not Checked for ChainPolicy.ExtraStore on Windows\" (#34584)"},{"Id":"398933149","IsPullRequest":true,"CreatedAt":"2019-01-14T15:14:10","Actor":"kevingosse","Number":"34583","RawContent":null,"Title":"Fix DispatchProxy arguments with [Out] methods","State":"open","Body":"When calling a method with the [Out] argument, DispatchProxy incorrectly interprets it as a \"out\" method and sets the argument to null.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/34582","Url":"https://github.com/dotnet/corefx/pull/34583","RelatedDescription":"Open PR \"Fix DispatchProxy arguments with [Out] methods\" (#34583)"},{"Id":"398933063","IsPullRequest":false,"CreatedAt":"2019-01-14T15:14:00","Actor":"kevingosse","Number":"34582","RawContent":null,"Title":"DispatchProxy sets [Out] arguments to null","State":"open","Body":"When using `DispatchProxy` with a method that has an `[Out]` parameter, for instance:\r\n\r\n```\r\npublic interface TestOut\r\n{\r\n    void Test([Out] StringBuilder parameter);\r\n}\r\n```\r\n\r\nDispatchProxy incorrectly interprets the parameter as a `out` (the C# keyword) and the value of the parameter is null. \r\n\r\nThis happens because it only checks the `IsOut` property of the ParameterInfo object: https://github.com/dotnet/corefx/blob/master/src/System.Reflection.DispatchProxy/src/System/Reflection/DispatchProxyGenerator.cs#L442\r\nThis property is true when the `out` parameter is used, but also when the `[Out]` attribute is present. To distinguish the two cases, we can use the `IsByRef` property of the ParameterType. But then it would still incorrectly recognize `void Test([In][Out] ref StringBuilder parameter)`, so we need to check for `[In]` as well.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34582","RelatedDescription":"Open issue \"DispatchProxy sets [Out] arguments to null\" (#34582)"},{"Id":"398809451","IsPullRequest":false,"CreatedAt":"2019-01-14T09:39:44","Actor":"OculiViridi","Number":"34580","RawContent":null,"Title":".NET Core 2.1 System.Data.SqlClient is not supported on this platform","State":"open","Body":"I have a **.NET Core 2.1** solution with different projects (.NET Core 2.1 and .NET Standard 2.0), built into a single application for **x64** environment.\r\nThe application has to run on a **Windows Server 2016 x64** machine.\r\n\r\nWhile I was updating to a new release, when tried to execute it, I got this message:\r\n\r\n> System.Data.SqlClient is not supported on this platform.\r\n\r\nBefore updating, the application it was running fine. If I replace the new version with the old one, it executes correctly.\r\n\r\nThese are some information about the application, environment and DLLs:\r\n\r\n```\r\nProject: .NET Core 2.1.6 x64\r\nRuntime: .NET Core 2.1.6 Runtime bundle\r\nOS: Windows Server 2016 x64 with latest Windows updates\r\n\r\n```\r\nDependency on `System.Data.SqlClient.dll` taken from `MyApplication.deps.json` file:\r\n\r\n```json\r\n\"Microsoft.EntityFrameworkCore.SqlServer/2.1.4\": {\r\n    \"dependencies\": {\r\n      \"Microsoft.EntityFrameworkCore.Relational\": \"2.1.4\",\r\n      \"System.Data.SqlClient\": \"4.5.1\"\r\n    },\r\n    \"runtime\": {\r\n      \"lib/netstandard2.0/Microsoft.EntityFrameworkCore.SqlServer.dll\": {\r\n        \"assemblyVersion\": \"2.1.4.0\",\r\n        \"fileVersion\": \"2.1.4.18263\"\r\n      }\r\n    }\r\n  },\r\n```\r\n\r\nIf I remove the `System.Data.SqlClient.dll` file I get this error:\r\n\r\n> Error:\r\n  An assembly specified in the application dependencies manifest (Ecoprogetti.Dcs.WindowsService.deps.json) was not found:\r\n    package: 'System.Data.SqlClient', version: '4.5.1'\r\n    path: 'runtimes/win/lib/netcoreapp2.1/System.Data.SqlClient.dll'\r\n\r\n\r\nBetween the previous release of my application and this new one, I surely updated many packages with nuget, including the **EF Core** ones, till latest .NET Core 2.1 version that is **2.1.4**, because I want to stay on .NET Core 2.1 LTS release.\r\n\r\nIf I compare the previous version of `System.Data.SqlClient.dll` and the new one, the DLLs differs only for file size and not for file version. Please see the attached screenshots.\r\n\r\n### Old DLL\r\n\r\n![image](https://user-images.githubusercontent.com/42179710/51105008-0bd6f880-17e8-11e9-998b-89fcd696f542.png)\r\n\r\n### New DLL\r\n\r\n![image](https://user-images.githubusercontent.com/42179710/51104993-feba0980-17e7-11e9-85b1-d4650dda0c7d.png)\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34580","RelatedDescription":"Open issue \".NET Core 2.1 System.Data.SqlClient is not supported on this platform\" (#34580)"},{"Id":"398765340","IsPullRequest":false,"CreatedAt":"2019-01-14T06:43:10","Actor":"NextTurn","Number":"34578","RawContent":null,"Title":"Proposal: YAML support","State":"open","Body":"YAML has become a popular language, even adopted in widely used Microsoft's products such as [Azure Pipelines](https://azure.microsoft.com/en-us/services/devops/pipelines/) and [DocFX](https://dotnet.github.io/docfx/). However, .NET hasn't had built-in APIs or great third-party libraries (like Json.NET) to deal with YAML.\r\n\r\nI suggest a `System.Yaml` namespace (like `System.Xml`) which supports YAML serialization.","Url":"https://github.com/dotnet/corefx/issues/34578","RelatedDescription":"Open issue \"Proposal: YAML support\" (#34578)"},{"Id":"398737463","IsPullRequest":false,"CreatedAt":"2019-01-14T03:27:56","Actor":"ahsonkhan","Number":"34577","RawContent":null,"Title":"Implement Utf8JsonReader, Writer and JsonDocument to support netstandard2.0","State":"open","Body":"The current implementation of S.T.Json targets netcoreapp3.0.\r\n\r\nThis will likely require some conditional includes (to fix the S.T.Json dependencies) and ifdefs in the source around APIs that are not included within netstandard2.0.\r\n\r\nThis change is necessary to produce a source package that targets netstandard2.0.\r\n\r\ncc @KrzysztofCwalina, @bartonjs, @steveharter, @joperezr ","Url":"https://github.com/dotnet/corefx/issues/34577","RelatedDescription":"Open issue \"Implement Utf8JsonReader, Writer and JsonDocument to support netstandard2.0\" (#34577)"},{"Id":"398728090","IsPullRequest":false,"CreatedAt":"2019-01-14T02:14:00","Actor":"ahsonkhan","Number":"34576","RawContent":null,"Title":"Utf8JsonWriter DateTime(Offset) formatting should produce smallest output that round trips.","State":"open","Body":"The `Utf8JsonWriter` uses `Utf8Formatter` with the standard format \"O\" to write the date time to the output.\r\n\r\nInstead, it should use custom formatter that rounds  the fractional part of the second to the nearest second to create the smallest round-trippable output. This is particularly important for trailing zero seconds which are omitted by other APIs like `XmlConvert.ToString(new DateTime(2019, 1, 1, 2, 42, 42, 100), XmlDateTimeSerializationMode.RoundtripKind)` which produces `2019-01-01T02:42:42.1`.\r\n\r\nUse the following implementation without writing the fractional seconds digit. In stead, if the fractional part is >= 0.5 seconds, increment `value.Second` before writing it to the output. Otherwise, just omit it.\r\nhttps://github.com/dotnet/corefx/blob/77096755443730962810662501f82550fdb4656d/src/Common/src/CoreLib/System/Buffers/Text/Utf8Formatter/Utf8Formatter.Date.O.cs#L69-L72\r\n\r\nFor more info: https://github.com/dotnet/corefx/pull/34425#discussion_r247309832\r\n\r\ncc @jkotas, @JamesNK ","Url":"https://github.com/dotnet/corefx/issues/34576","RelatedDescription":"Open issue \"Utf8JsonWriter DateTime(Offset) formatting should produce smallest output that round trips.\" (#34576)"},{"Id":"398712148","IsPullRequest":true,"CreatedAt":"2019-01-13T23:44:39","Actor":"xtqqczze","Number":"34575","RawContent":null,"Title":"WIP: Replace DateTime with DateTimeOffset in X509Certificate2","State":"closed","Body":"* Replace references to DateTime with DateTimeOffset","Url":"https://github.com/dotnet/corefx/pull/34575","RelatedDescription":"Closed or merged PR \"WIP: Replace DateTime with DateTimeOffset in X509Certificate2\" (#34575)"},{"Id":"398709491","IsPullRequest":false,"CreatedAt":"2019-01-13T22:58:25","Actor":"RickStrahl","Number":"34574","RawContent":null,"Title":"CommandLine parses incorrectly when quoted argument with trailing backslash is passed","State":"open","Body":"In a .NET Core Console app I'm trying to access the following command line:\r\n\r\n```\r\n\"~\\2017\\\" -o\r\n```\r\n\r\nwith:\r\n\r\n```cs\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(args[0]);\r\n            Console.WriteLine(args[1]);\r\n\r\n        }\r\n    }\r\n```\r\n\r\n\r\nThe first arg[0] returned as:\r\n\r\n```\r\n~\\2017\"\r\n```\r\n\r\nExpected return should be:\r\n\r\n```\r\n~\\2017\\\r\n```\r\n\r\nWithout the slash at the end the string properly returns:\r\n\r\n```\r\n~\\2017\r\n```\r\n\r\nIOW, it looks like it's parsing the last slash as a string character delimiter rather than a literal slash.\r\n\r\nHowever, this weird parsing is totally inconsistent. Passing this:\r\n\r\n```\r\n\"~\\\\2017\\\\\"\r\n```\r\n\r\non the command line returns:\r\n\r\n```\r\n~\\\\2017\\\r\n```\r\n\r\nRuntime: .NET Core 2.2 \r\nWindows 10, 1809\r\n\r\n\r\nApparently this behaivior is not new - just tried this in a full framework project and it does the same thing.\r\n","Url":"https://github.com/dotnet/corefx/issues/34574","RelatedDescription":"Open issue \"CommandLine parses incorrectly when quoted argument with trailing backslash is passed\" (#34574)"},{"Id":"398706172","IsPullRequest":true,"CreatedAt":"2019-01-13T22:24:23","Actor":"Wraith2","Number":"34573","RawContent":null,"Title":"SqlClient enviroment change optimization","State":"open","Body":"When connecting to the sql server and during various ambient events environment changes are signalled back from the sql server to the client. These events are infrequent after login and handled extremely quickly. The current implementation always allocates new arrays for any binary data even though only a small number are acted on and it uses arrays to carry the change set leading to dropped short term allocations.\r\n\r\nThis PR changes the `SqlEnvChange` class to form it's own singly linked list, introduces a SqlEnvChange pool class based on a lock free pool from Roslyn and changes byte[] allocations to use the shared `ArrayPool` for backing arrays. \r\n\r\nauto and manual tests pass. cc the usual people @AfsanehR @keeratsingh @saurabh500 ","Url":"https://github.com/dotnet/corefx/pull/34573","RelatedDescription":"Open PR \"SqlClient enviroment change optimization\" (#34573)"},{"Id":"398697817","IsPullRequest":false,"CreatedAt":"2019-01-13T20:49:37","Actor":"InRedikaWB","Number":"34572","RawContent":null,"Title":"EnumerableSorter.ElementAt optimization","State":"open","Body":"Method ElementAt  from EnumerableSorter<TElement, TKey> is trivial \"Kth order statistic\" algorithm.\r\nhttps://github.com/dotnet/corefx/blob/f3b56d1dfc2b8fb52c8d22a3bcd32a797b684adf/src/System.Linq/src/System/Linq/OrderedEnumerable.cs#L428-L430\r\n\r\nThat implementation has time complexity O(N^2) in worse case. But some variations of this algo has O(N) complexity in any case. As example: http://marcodiiga.github.io/kth-order-statistic.\r\nWhat about changing realization to make in O(N)?","Url":"https://github.com/dotnet/corefx/issues/34572","RelatedDescription":"Open issue \"EnumerableSorter.ElementAt optimization\" (#34572)"},{"Id":"398614179","IsPullRequest":true,"CreatedAt":"2019-01-13T16:53:52","Actor":"dotnet-maestro-bot","Number":"34571","RawContent":null,"Title":"Update CoreClr, CoreFx to preview-27312-01, preview.19063.1, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34571","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreFx to preview-27312-01, preview.19063.1, respectively (master)\" (#34571)"},{"Id":"398552904","IsPullRequest":false,"CreatedAt":"2019-01-12T13:09:20","Actor":"ahsonkhan","Number":"34570","RawContent":null,"Title":"Improve Utf8JsonWriter code coverage for custom IBufferWriter implementations","State":"open","Body":"In particular:\r\n- Add more tests that use `FixedSizedBufferWriter` to test re-try and grow logic (writing should fail if buffer too small).\r\n- Add tests that use `PipeWriter` as the `IBufferWriter` passed into the `Utf8JsonWriter`\r\n\r\nUse the existing test code as a guide.\r\n\r\n**For example:**\r\n```C#\r\n// The branches: _buffer.Length <= idx is not covered\r\nprivate void WriteStartMinimized(byte token)\r\n{\r\n    int idx = 0;\r\n    if (_currentDepth < 0)\r\n    {\r\n        if (_buffer.Length <= idx)\r\n        {\r\n            GrowAndEnsure();\r\n        }\r\n        _buffer[idx++] = JsonConstants.ListSeparator;\r\n    }\r\n\r\n    if (_buffer.Length <= idx)\r\n    {\r\n        AdvanceAndGrow(ref idx);\r\n    }\r\n    _buffer[idx++] = token;\r\n\r\n    Advance(idx);\r\n}\r\n```\r\n```C#\r\n// The branch: _buffer.Length <= idx is not covered\r\nprivate void WriteStringValue(ReadOnlySpan<byte> escapedValue, ref int idx)\r\n{\r\n    if (_buffer.Length <= idx)\r\n    {\r\n        AdvanceAndGrow(ref idx);\r\n    }\r\n    _buffer[idx++] = JsonConstants.Quote;\r\n    // ...\r\n```\r\n```C#\r\n// The branch: _buffer.Length <= idx is not covered\r\nprivate void WriteListSeparator(ref int idx)\r\n{\r\n    if (_currentDepth < 0)\r\n    {\r\n        if (_buffer.Length <= idx)\r\n        {\r\n            GrowAndEnsure();\r\n        }\r\n        _buffer[idx++] = JsonConstants.ListSeparator;\r\n    }\r\n}\r\n```\r\n```C#\r\n// These methods needs coverage\r\nWriteCommentEscapeValue(ReadOnlySpan<char> value, int firstEscapeIndexVal)();\r\nWriteCommentEscapeValue(ReadOnlySpan<byte> value, int firstEscapeIndexVal)();\r\nWriteCommentSuppressFalse(ReadOnlySpan<byte> value)();\r\n```\r\n\r\n```C#\r\n// Throw helper coverage missing for invalid input\r\npublic static void ThrowArgumentException(ReadOnlySpan<byte> propertyName, ReadOnlySpan<byte> value)\r\n{\r\n    if (propertyName.Length > JsonConstants.MaxTokenSize)\r\n    {\r\n        ThrowArgumentException(SR.Format(SR.PropertyNameTooLarge, propertyName.Length));\r\n    }\r\n    else\r\n    {\r\n        Debug.Assert(value.Length > JsonConstants.MaxTokenSize);\r\n        ThrowArgumentException(SR.Format(SR.ValueTooLarge, value.Length));\r\n    }\r\n}\r\n\r\npublic static void ThrowArgumentException(ReadOnlySpan<byte> propertyName, ReadOnlySpan<char> value)\r\n{\r\n    if (propertyName.Length > JsonConstants.MaxTokenSize)\r\n    {\r\n        ThrowArgumentException(SR.Format(SR.PropertyNameTooLarge, propertyName.Length));\r\n    }\r\n    else\r\n    {\r\n        Debug.Assert(value.Length > JsonConstants.MaxCharacterTokenSize);\r\n        ThrowArgumentException(SR.Format(SR.ValueTooLarge, value.Length));\r\n    }\r\n}\r\n\r\npublic static void ThrowArgumentException(ReadOnlySpan<char> propertyName, ReadOnlySpan<byte> value)\r\n{\r\n    if (propertyName.Length > JsonConstants.MaxCharacterTokenSize)\r\n    {\r\n        ThrowArgumentException(SR.Format(SR.PropertyNameTooLarge, propertyName.Length));\r\n    }\r\n    else\r\n    {\r\n        Debug.Assert(value.Length > JsonConstants.MaxTokenSize);\r\n        ThrowArgumentException(SR.Format(SR.ValueTooLarge, value.Length));\r\n    }\r\n}\r\n\r\npublic static void ThrowArgumentException(ReadOnlySpan<char> propertyName, ReadOnlySpan<char> value)\r\n{\r\n    if (propertyName.Length > JsonConstants.MaxCharacterTokenSize)\r\n    {\r\n        ThrowArgumentException(SR.Format(SR.PropertyNameTooLarge, propertyName.Length));\r\n    }\r\n    else\r\n    {\r\n        Debug.Assert(value.Length > JsonConstants.MaxCharacterTokenSize);\r\n        ThrowArgumentException(SR.Format(SR.ValueTooLarge, value.Length));\r\n    }\r\n}\r\n```\r\n\r\n`Utf8JsonWriter` added here: https://github.com/dotnet/corefx/pull/34425\r\n\r\nCurrent code coverage is at ~95% line coverage and ~85% branch coverage.\r\n[code_coverage.zip](https://github.com/dotnet/corefx/files/2752019/code_coverage.zip)\r\n","Url":"https://github.com/dotnet/corefx/issues/34570","RelatedDescription":"Open issue \"Improve Utf8JsonWriter code coverage for custom IBufferWriter implementations\" (#34570)"},{"Id":"398541565","IsPullRequest":false,"CreatedAt":"2019-01-12T10:20:39","Actor":"albahari","Number":"34569","RawContent":null,"Title":"SqlClient gives wrong error with expired or incorrect SQL Server credentials","State":"open","Body":"Microsoft Windows [Version 10.0.17763.253]\r\nMicrosoft.NETCore.App 3.0.0-preview1-26929-01\r\n\r\nTo reproduce:\r\n\r\n1. In SQL Server 2017, create a new SQL Server login with SQL Server authentication. Set the username to 'test' and the password to 'foo'. Leave the checkbox \"User must change password at next login\" ticked. (Note that the bug still occurs without that checkbox ticked, but the consequences are not as severe).\r\n\r\n2. Create a .NET Core Console app that references nuget:System.Data.SqlClient and paste in the following code:\r\n\r\n```\r\nstatic void Main (string[] args)\r\n{\r\n    TestSql ();    // Fails - gives wrong error\r\n    // Try again 6 seconds later\r\n    Thread.Sleep (6000);\r\n    TestSql ();   // Now it works correctly\r\n}\r\n\r\nstatic void TestSql()\r\n{\r\n    var cx = new SqlConnection (\"Data Source=.;User ID=test;Password=foo\");\r\n    try\r\n    {\r\n        cx.Open ();\r\n    }\r\n    catch (SqlException ex)\r\n    {\r\n        Console.WriteLine (ex.Number);\r\n        Console.WriteLine (ex.Message);\r\n    }\r\n    Console.WriteLine();\r\n}\r\n```\r\n\r\nExpected result:\r\n```\r\n18488\r\nLogin failed for user 'test'.  Reason: The password of the account must be changed.\r\n\r\n18488\r\nLogin failed for user 'test'.  Reason: The password of the account must be changed.\r\n```\r\n\r\nActual result:\r\n```\r\n233\r\nA connection was successfully established with the server, but then an error occurred during the login process. (provider: Shared Memory Provider, error: 0 - No process is on the other end of the pipe.)\r\n\r\n18488\r\nLogin failed for user 'test'.  Reason: The password of the account must be changed.\r\n```\r\n\r\nIt's a bit of a showstopper if you're trying to catch the scenario of a user's login expiring, so you can prompt the user to change their password. The problem does not occur with .NET Framework. \r\n\r\nHere's the stack trace for the first exception:\r\n```\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n   at System.Data.SqlClient.SqlConnection.Open()\r\n```","Url":"https://github.com/dotnet/corefx/issues/34569","RelatedDescription":"Open issue \"SqlClient gives wrong error with expired or incorrect SQL Server credentials\" (#34569)"},{"Id":"398536590","IsPullRequest":false,"CreatedAt":"2019-01-12T09:05:56","Actor":"ahsonkhan","Number":"34568","RawContent":null,"Title":"Investigate Utf8JsonWriter performance improvement by using AggressiveInlining","State":"open","Body":"From https://github.com/dotnet/corefx/pull/34425#discussion_r247299987\r\n\r\nGiven we do not pass spans by ref within the `Utf8JsonWriter`, it is likely fruitful to mark certain Write methods as `AggressiveInlining` to reduce the amount of struct copies.\r\n\r\nInvestigate the performance of deep call graphs and consider marking the common path as `AggressiveInlining` (if it shows noticeable performance improvement).\r\n\r\nFor example, something like this:\r\n```C#\r\n// => denotes a method call in this case (not valid C# syntax)\r\nWriteStringValue(ReadOnlySpan<char> value, bool suppressEscaping = false)\r\n=> WriteStringSuppressFalse(ReadOnlySpan<char> value)\r\n=> WriteStringByOptions(ReadOnlySpan<char> value)\r\n=> WriteStringMinimized(ReadOnlySpan<char> escapedValue)\r\n=> WriteStringValue(ReadOnlySpan<char> escapedValue, ref int idx)\r\n```\r\n\r\nThe above call graph includes `WriteStringSuppressFalse` which has just a single callsite, so it would ok to inline it into the caller - either using AggresiveInlining (preferred); or by just not having the separate method at all and just inlining the code in manually.\r\n","Url":"https://github.com/dotnet/corefx/issues/34568","RelatedDescription":"Open issue \"Investigate Utf8JsonWriter performance improvement by using AggressiveInlining\" (#34568)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"399192461","IsPullRequest":true,"CreatedAt":"2019-01-15T05:20:48","Actor":"dotnet-bot","Number":"32471","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32471","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#32471)"},{"Id":"399192426","IsPullRequest":true,"CreatedAt":"2019-01-15T05:20:38","Actor":"dotnet-bot","Number":"32470","RawContent":null,"Title":"Merge master-vs-deps to dev16.1-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32470","RelatedDescription":"Open PR \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32470)"},{"Id":"399192416","IsPullRequest":true,"CreatedAt":"2019-01-15T05:20:35","Actor":"dotnet-bot","Number":"32469","RawContent":null,"Title":"Merge dev16.0-preview2-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32469","RelatedDescription":"Open PR \"Merge dev16.0-preview2-vs-deps to master-vs-deps\" (#32469)"},{"Id":"399192400","IsPullRequest":true,"CreatedAt":"2019-01-15T05:20:28","Actor":"dotnet-bot","Number":"32468","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"open","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32468","RelatedDescription":"Open PR \"Merge master to dev16.1-preview1\" (#32468)"},{"Id":"399191584","IsPullRequest":true,"CreatedAt":"2019-01-15T05:16:03","Actor":"zaytsev-victor","Number":"32467","RawContent":null,"Title":"Incorrect IDE0004 \"Cast is redundant\" when passing enum cast to int as constructor parameter accepting int","State":"open","Body":"This is a fix for #31963\r\n\r\n```ReplacementChangesSemanticsForNode``` did not correctly detect that the fixed expression would create an error in the new code.","Url":"https://github.com/dotnet/roslyn/pull/32467","RelatedDescription":"Open PR \"Incorrect IDE0004 \"Cast is redundant\" when passing enum cast to int as constructor parameter accepting int\" (#32467)"},{"Id":"399128630","IsPullRequest":true,"CreatedAt":"2019-01-15T05:00:18","Actor":"dotnet-bot","Number":"32451","RawContent":null,"Title":"Merge dev16.0-preview2 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview2 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32451","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview2 to master\" (#32451)"},{"Id":"399128640","IsPullRequest":true,"CreatedAt":"2019-01-15T05:00:15","Actor":"dotnet-bot","Number":"32452","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32452","RelatedDescription":"Closed or merged PR \"Merge master to dev16.1-preview1\" (#32452)"},{"Id":"399128710","IsPullRequest":true,"CreatedAt":"2019-01-15T05:00:11","Actor":"dotnet-bot","Number":"32454","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32454","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32454)"},{"Id":"399128727","IsPullRequest":true,"CreatedAt":"2019-01-15T05:00:07","Actor":"dotnet-bot","Number":"32456","RawContent":null,"Title":"Merge dev16.0-preview2 to features/enhanced-using","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview2 into features/enhanced-using.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-features/enhanced-using\ngit reset --hard upstream/features/enhanced-using\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-features/enhanced-using --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32456","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview2 to features/enhanced-using\" (#32456)"},{"Id":"399128696","IsPullRequest":true,"CreatedAt":"2019-01-15T02:30:09","Actor":"dotnet-bot","Number":"32453","RawContent":null,"Title":"Merge dev16.0-preview2 to dev16.0-preview2-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview2 into dev16.0-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps\ngit reset --hard upstream/dev16.0-preview2-vs-deps\ngit merge upstream/dev16.0-preview2\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-to-dev16.0-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32453","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview2 to dev16.0-preview2-vs-deps\" (#32453)"},{"Id":"399161555","IsPullRequest":false,"CreatedAt":"2019-01-15T02:26:59","Actor":"taomylife521","Number":"32466","RawContent":null,"Title":"Vs stop working","State":"open","Body":"1.应用程序: devenv.exe\r\nFramework 版本: v4.0.30319\r\n说明: 应用程序通过 System.Environment.FailFast(string message) 请求终止进程。\r\n消息: StreamJsonRpc.RemoteInvocationException: Request locate failed with message: Cannot find service module info file '*/roslynCodeAnalysis.servicehub.service.json' in 'd:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\ServiceHub\\Services', using discovery services failed: VsixServiceDiscovery: connect ENOENT \\\\?\\pipe\\90f6de52698644129c6632a232ffe862\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   在 StreamJsonRpc.JsonRpc.<InvokeCoreAsync>d__67`1.MoveNext()\r\n--- 引发异常的上一位置中堆栈跟踪的末尾 ---\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   在 Microsoft.VisualStudio.Threading.ThreadingTools.<WithCancellationSlow>d__11`1.MoveNext()\r\n--- 引发异常的上一位置中堆栈跟踪的末尾 ---\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   在 Microsoft.ServiceHub.Client.HubClient.<LocateServiceAsync>d__40.MoveNext()\r\n--- 引发异常的上一位置中堆栈跟踪的末尾 ---\r\n   在 Microsoft.ServiceHub.Client.HubClient.<LocateServiceAsync>d__40.MoveNext()\r\n--- 引发异常的上一位置中堆栈跟踪的末尾 ---\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   在 Microsoft.ServiceHub.Client.HubClient.<RequestServiceChannelNameAsync>d__26.MoveNext()\r\n--- 引发异常的上一位置中堆栈跟踪的末尾 ---\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   在 Microsoft.ServiceHub.Client.HubClient.<RequestServiceAsync>d__29.MoveNext()\r\n--- 引发异常的上一位置中堆栈跟踪的末尾 ---\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   在 Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.<RetryRemoteCallAsync>d__0`2.MoveNext()\r\n--- 引发异常的上一位置中堆栈跟踪的末尾 ---\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   在 Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.<RequestServiceAsync>d__1.MoveNext()\r\n--- 引发异常的上一位置中堆栈跟踪的末尾 ---\r\n   在 Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n堆栈:\r\n   在 System.Environment.FailFast(System.String, System.Exception)\r\n   在 Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   在 Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   在 Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)\r\n   在 Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient+Connections+<RequestServiceAsync>d__1.MoveNext()\r\n   在 System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   在 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   在 System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   在 System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   在 System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action, Boolean, System.Threading.Tasks.Task ByRef)\r\n   在 System.Threading.Tasks.Task.FinishContinuations()\r\n   在 System.Threading.Tasks.Task.FinishStageThree()\r\n   在 System.Threading.Tasks.Task`1[[System.Threading.Tasks.VoidTaskResult, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetResult(System.Threading.Tasks.VoidTaskResult)\r\n   在 System.Threading.Tasks.Task+DelayPromise.Complete()\r\n   在 System.Threading.Tasks.Task+<>c.<Delay>b__274_1(System.Object)\r\n   在 System.Threading.TimerQueueTimer.CallCallbackInContext(System.Object)\r\n   在 System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   在 System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   在 System.Threading.TimerQueueTimer.CallCallback()\r\n   在 System.Threading.TimerQueueTimer.Fire()\r\n   在 System.Threading.TimerQueue.FireQueuedTimerCompletion(System.Object)\r\n   在 System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   在 System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   在 System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n","Url":"https://github.com/dotnet/roslyn/issues/32466","RelatedDescription":"Open issue \"Vs stop working\" (#32466)"},{"Id":"399149641","IsPullRequest":false,"CreatedAt":"2019-01-15T01:26:26","Actor":"Spongman","Number":"32465","RawContent":null,"Title":"non-nullability of anonymous type properties in lambdas are messed up","State":"open","Body":"\r\n```c#\r\nSystem.Linq.Expressions.Expression<int>? first;\r\nvar q = first?.Parameters.Select(f => new { f });\r\n```\r\n\r\nhover over the `f` in `new { f }`:\r\n\r\n![image](https://user-images.githubusercontent.com/1088194/51151855-385b3680-1821-11e9-9add-c5625f21397a.png)\r\n\r\nwhich is it? is `f` nullable or not?","Url":"https://github.com/dotnet/roslyn/issues/32465","RelatedDescription":"Open issue \"non-nullability of anonymous type properties in lambdas are messed up\" (#32465)"},{"Id":"399147626","IsPullRequest":false,"CreatedAt":"2019-01-15T01:16:47","Actor":"gafter","Number":"32464","RawContent":null,"Title":"Capture extra invalid dimensions for SemanticModel and IOperation","State":"open","Body":"In invalid code such as `void M(string[20] x)`, we should capture the expression `20` for use in the `SemanticModel` and `IOperation`. These were previously a syntax error and result in skipped tokens, but they are now being parsed but not bound after https://github.com/dotnet/roslyn/pull/32431","Url":"https://github.com/dotnet/roslyn/issues/32464","RelatedDescription":"Open issue \"Capture extra invalid dimensions for SemanticModel and IOperation\" (#32464)"},{"Id":"399146855","IsPullRequest":false,"CreatedAt":"2019-01-15T01:13:23","Actor":"Spongman","Number":"32463","RawContent":null,"Title":"nullability checking inconsisten between locals & parameters","State":"open","Body":"```c#\r\npublic void Foo(string? param)\r\n{\r\n\tif (param != null)\r\n\t{\r\n\t\tvar l1 = param.Length;\r\n\t\tvar l2 = new[] { 0 }.Select(_ => param.Length);  // CS8602\r\n\t}\r\n\r\n\tstring? local = \"\";\r\n\tif (local != null)\r\n\t{\r\n\t\tvar l1 = local.Length;\r\n\t\tvar l2 = new[] { 0 }.Select(_ => local.Length);\r\n\t}\r\n}\r\n```\r\n\r\nonly `param` get a `warning CS8602: Possible dereference of a null reference.`.\r\n\r\nfor some reason the `local` doesn't get the same warning.\r\n\r\n- both should be consistent.\r\n- really, since both are read-only in the method, _neither_ should get that warning.","Url":"https://github.com/dotnet/roslyn/issues/32463","RelatedDescription":"Open issue \"nullability checking inconsisten between locals & parameters\" (#32463)"},{"Id":"399141210","IsPullRequest":false,"CreatedAt":"2019-01-15T00:54:38","Actor":"tmat","Number":"32462","RawContent":null,"Title":"Run tests in AfterSolutionBuild.targets","State":"open","Body":"Roslyn is not using Arcade SDK test runner on Windows - we have a custom runner that optimizes scheduling of the tests for overall speed.\r\n\r\nThis test runner is invoked from function [TestUsingOptimizedRunner](https://github.com/dotnet/roslyn/blob/master/eng/build.ps1#L212) in `build.ps1` after the Arcade driven build completes. \r\n\r\nThis means that in official build we run tests after building and publishing artifacts. This is not ideal since we'll end up publishing packages and symbols even when tests fail.\r\n\r\nTo fix the ordering the test runner needs to be executed from a target in `eng\\AfterSolutionBuild.targets`. This is a file that's imported by Arcade SDK after the solution is built and before artifacts are published.","Url":"https://github.com/dotnet/roslyn/issues/32462","RelatedDescription":"Open issue \"Run tests in AfterSolutionBuild.targets\" (#32462)"},{"Id":"399141183","IsPullRequest":false,"CreatedAt":"2019-01-15T00:54:30","Actor":"heejaechang","Number":"32461","RawContent":null,"Title":"provide fix all ability to CodeRefactoringProvider","State":"open","Body":"fix all is just a concept of scope. not something tightly coupled with the concept of diagnostics or code fixer or code refactoring.\r\n\r\nwe should provide a way to let users select a scope for CodeRefactoringProvider (http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeRefactorings/CodeRefactoringProvider.cs,11)\r\n\r\n...\r\n\r\nproposal will be\r\n\r\n1. add RefactoringFixAllProvider as in CodeFixProvider.GetFixAllProvider\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeFixes/CodeFixProvider.cs,33 to CodeRefactoringProvider\r\n\r\nwhich is the same as FixAllProvider but without GetSupportedFixAllDiagnosticIds.\r\n\r\nit would be awesome if we can merge those 2, but if we can't, having new type seems fine.\r\n\r\n2. FixAllContext for GetFixAsync gets new one RefactoringFixAllContext. again, it would be nice if we can merge those 2 but, if that's a problem (due to it being public API and etc), having new type seems fine to me\r\n\r\nand like RefactoringFixAllprovider, RefactoringFixAllContext should not have any API related to DiagnosticIDs but all other ones like Scope, CancellationToken and etc should be provided same.\r\n\r\nin this proposal, implementer of RefactoringFixAllProvider will implement the fix all provider almost same way as existing FixAllProvider, only difference will be rather than get code location to apply fix by diagnostics, it will run its own discovery code based on given scope and return fix all code action as existing CodeFix FixAllProvider.\r\n\r\nlike existing FixAllProvider, we can provide general RefactoringFixAllProvider such as BatchFixAllProvider (http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeFixes/FixAllOccurrences/BatchFixAllProvider.cs,23) by let it accept discoverer that will run on the given scope to find places to call existing CodeRefactoringProvider almost same way as we do for CodeFixProvider.\r\n\r\n...\r\n\r\nit doesn't need to be the way I proposed above, but the point is us providing a way for user to invoke code refactoring fix all so that it doesn't become a reason to make people to convert refactoring to analyzers. \r\n\r\npeople should convert one to analyzer if they believe it is something worth to break build in CI. LB or Fix all shouldn't be the reason. in that sense, once we have this, we should consider some of analyzer with hidden diagnostics, whether we should move those to refactoring rather than analyzers.\r\n","Url":"https://github.com/dotnet/roslyn/issues/32461","RelatedDescription":"Open issue \"provide fix all ability to CodeRefactoringProvider\" (#32461)"},{"Id":"399141128","IsPullRequest":false,"CreatedAt":"2019-01-15T00:54:11","Actor":"Draethorian","Number":"32460","RawContent":null,"Title":"Why is CodeFixer run thrice to apply the actual fix instead of being cached?","State":"open","Body":"**Version Used**: \r\n2.6.3\r\n**Steps to Reproduce**:\r\n\r\n `class StaticInheritanceAnalyzer \r\n{ \r\n    internal static ConcurrentDictionary<Location, DiagnosticData> DiagnosticDataDict =\r\n            new ConcurrentDictionary<Location, DiagnosticData>();\r\n} // gets poplated by all the necesary data to ensure static inheritance.\r\n// also: can't use context.RegisterCompilationStartAction to clear DiagnosticDataDict. because it wipes data arbitrarily and unreliably.`\r\n\r\nCodeFixer:\r\n\r\n        private ConcurrentDictionary<Location, int> cacheReleaseCounter = new ConcurrentDictionary<Location, int>();\r\n\r\n        private async Task<Document> FixInheritanceAsync(Document document, Location location,\r\n            CancellationToken cancellationToken)\r\n        {\r\n            DiagnosticData diagnosticData;\r\n            int counter = cacheReleaseCounter.GetOrAdd(location, 0);\r\n            switch (counter)\r\n            {\r\n                case 0:\r\n                case 1:\r\n                    StaticInheritanceAnalyzer.DiagnosticDataDict.TryGetValue(location, out diagnosticData);\r\n                    break;\r\n                case 2:\r\n                    StaticInheritanceAnalyzer.DiagnosticDataDict.TryRemove(location, out diagnosticData);\r\n                    break;\r\n                default:\r\n                    throw new Exception(counter.ToString());\r\n            }\r\n            cacheReleaseCounter.TryUpdate(location, counter == 2 ? 0 : counter + 1, counter);\r\n            // counter == 2 => fix gets applied, analyzer will finally produce a new Solution\r\n            [... actual code ...]\r\n        }\r\n\r\n1. Cache some DiagnosticData\r\n2. Try to release Data on first CodeFix run\r\n3. Run into the Issue that first Run is only used for the Preview\r\n4. Wonder what the next two runs do\r\n5. Be happy that it at least needs 3 runs consistently ( for what I've encountered so far)\r\n\r\n**Expected Behavior**:\r\n\r\ncached Data can be released by first call / CodeFixer needs to be run only once\r\n\r\n**Actual Behavior**:\r\n\r\nCodefixer has to be run thrice before Fix is applied","Url":"https://github.com/dotnet/roslyn/issues/32460","RelatedDescription":"Open issue \"Why is CodeFixer run thrice to apply the actual fix instead of being cached?\" (#32460)"},{"Id":"399139697","IsPullRequest":false,"CreatedAt":"2019-01-15T00:46:58","Actor":"Spongman","Number":"32459","RawContent":null,"Title":"implicitly typed array of nullables has wrong type","State":"open","Body":"```c#\r\nvar foo = new [] { default(string?) };\r\n```\r\n\r\nhover over `foo`, it shows type `string[]`, i would expect `string?[]`\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/32459","RelatedDescription":"Open issue \"implicitly typed array of nullables has wrong type\" (#32459)"},{"Id":"399134283","IsPullRequest":false,"CreatedAt":"2019-01-15T00:20:00","Actor":"Spongman","Number":"32458","RawContent":null,"Title":"non-nullability is not preserved","State":"open","Body":"```c#\r\npublic static Foo()\r\n{\r\n\tFunc<T, A0> Func<T, A0>(Func<T, A0> func) => func;\r\n\tvar func = Func((int i) => default(string?));\r\n\tvar val = func();\r\n}\r\n```\r\n\r\nhover over the last `var` keyword. it shows `string`\r\n\r\ni would expect `string?`\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/32458","RelatedDescription":"Open issue \"non-nullability is not preserved\" (#32458)"},{"Id":"399128739","IsPullRequest":true,"CreatedAt":"2019-01-15T00:00:42","Actor":"dotnet-bot","Number":"32457","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"open","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32457","RelatedDescription":"Open PR \"Merge master to features/editorconfig-in-compiler\" (#32457)"},{"Id":"399128722","IsPullRequest":true,"CreatedAt":"2019-01-15T00:00:35","Actor":"dotnet-bot","Number":"32455","RawContent":null,"Title":"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/dev16.1-preview1\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32455","RelatedDescription":"Open PR \"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps\" (#32455)"},{"Id":"399128463","IsPullRequest":true,"CreatedAt":"2019-01-14T23:59:29","Actor":"JoeRobich","Number":"32450","RawContent":null,"Title":"Fix RenameTracking NRE race condition","State":"open","Body":"We were creating a race condition by setting `TrackingSession` to `null` before canceling the session.\r\n\r\nFixes #31883","Url":"https://github.com/dotnet/roslyn/pull/32450","RelatedDescription":"Open PR \"Fix RenameTracking NRE race condition\" (#32450)"},{"Id":"399123442","IsPullRequest":true,"CreatedAt":"2019-01-14T23:37:13","Actor":"agocke","Number":"32449","RawContent":null,"Title":"Make array Range indexer expression an rvalue","State":"open","Body":"Fixes #31889","Url":"https://github.com/dotnet/roslyn/pull/32449","RelatedDescription":"Open PR \"Make array Range indexer expression an rvalue\" (#32449)"},{"Id":"399121233","IsPullRequest":true,"CreatedAt":"2019-01-14T23:27:55","Actor":"RikkiGibson","Number":"32448","RawContent":null,"Title":"Merge dev16.1-preview1 into features/unmanaged-constructed-types","State":"open","Body":"- Resolved a conflict in MessageID.cs by adding the unmanaged constructed feature ID to the end of the enum declaration.\r\n- Resolved conflicts in SourceNamedTypeSymbol_Bases.cs by using the modified ConstraintsHelper.CheckAllConstraints() that takes a CSharpCompilation\r\n- Resolved conflicts in NullableReferenceTypesTests.cs by changing the expected error spans in a few places as a result of constraint checking being delayed until after type members are added.\r\n\r\nDid I do this right or did I accidentally introduce commits that shouldn't go into this feature branch?","Url":"https://github.com/dotnet/roslyn/pull/32448","RelatedDescription":"Open PR \"Merge dev16.1-preview1 into features/unmanaged-constructed-types\" (#32448)"},{"Id":"399118902","IsPullRequest":false,"CreatedAt":"2019-01-14T23:18:17","Actor":"gafter","Number":"32447","RawContent":null,"Title":"Nullability dropped in binding typeof()","State":"open","Body":"The compiler accepts `typeof(string?)`, but totally ignores the nullability annotation.\r\n\r\nIn my opinion the nullability annotation should be forbidden here.","Url":"https://github.com/dotnet/roslyn/issues/32447","RelatedDescription":"Open issue \"Nullability dropped in binding typeof()\" (#32447)"},{"Id":"399117972","IsPullRequest":false,"CreatedAt":"2019-01-14T23:14:45","Actor":"gafter","Number":"32446","RawContent":null,"Title":"Nullability dropped in binding __refvalue","State":"open","Body":"[The following code](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABABgqYEYBuRpgZnYAmCgGEKAb0YVp7AUwAsFALIAKACoBPAA5wUAJTgAzRNQDGlBAEoJUmXYD6FALwV79hEYBuEQvjgrkdg4WAH5LADoAGWoAcxgACx4GOwBfRjSGIA==) fails to produce a warning, even though it dereferences a possibly-null lvalue produced through `__refvalue`.  This is caused by us discarding the nullable annotation when binding the type in `Binder.BindRefValue`.\r\n\r\n``` c#\r\n#nullable enable\r\nusing System;\r\npublic class C {\r\n    public void M(TypedReference r) {\r\n        _ = __refvalue(r, string?).Length;\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/32446","RelatedDescription":"Open issue \"Nullability dropped in binding __refvalue\" (#32446)"},{"Id":"399117330","IsPullRequest":true,"CreatedAt":"2019-01-14T23:12:26","Actor":"mavasani","Number":"32445","RawContent":null,"Title":"Fix UseExpressionBodyHelper.GetDiagnosticLocation for indexer declara…","State":"open","Body":"…tions\r\n\r\nPort existing override [UseExpressionBodyForPropertiesHelper.GetDiagnosticLocation](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp.Features/UseExpressionBody/Helpers/UseExpressionBodyForPropertiesHelper.cs,76) to `UseExpressionBodyForIndexersHelper`\r\n\r\nFixes #31308","Url":"https://github.com/dotnet/roslyn/pull/32445","RelatedDescription":"Open PR \"Fix UseExpressionBodyHelper.GetDiagnosticLocation for indexer declara…\" (#32445)"},{"Id":"399116850","IsPullRequest":false,"CreatedAt":"2019-01-14T23:10:40","Actor":"Spongman","Number":"32444","RawContent":null,"Title":"CS8618 lines numbers are unhelpful","State":"open","Body":"_From @Spongman on January 14, 2019 23:3_\n\n```\r\nc:\\path\\file.cs(14,27,14,41): CS8618: Non-nullable property 'XYZ' is uninitialized.\r\n```\r\n\r\nthe line number points to the line containing the property's parent `class` definition. it would be _much_ more useful if it pointed to the property definition itself.\n\n_Copied from original issue: dotnet/csharplang#2143_","Url":"https://github.com/dotnet/roslyn/issues/32444","RelatedDescription":"Open issue \"CS8618 lines numbers are unhelpful\" (#32444)"},{"Id":"399112462","IsPullRequest":true,"CreatedAt":"2019-01-14T22:55:01","Actor":"meziantou","Number":"32443","RawContent":null,"Title":"Fix typo","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32443","RelatedDescription":"Open PR \"Fix typo\" (#32443)"},{"Id":"399111928","IsPullRequest":true,"CreatedAt":"2019-01-14T22:53:09","Actor":"tmat","Number":"32442","RawContent":null,"Title":"Publish to BAR","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32442","RelatedDescription":"Open PR \"Publish to BAR\" (#32442)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"399141572","IsPullRequest":true,"CreatedAt":"2019-01-15T02:38:00","Actor":"Dotnet-GitSync-Bot","Number":"6823","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corert/pull/6823","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6823)"},{"Id":"399123697","IsPullRequest":true,"CreatedAt":"2019-01-15T00:50:07","Actor":"kouvel","Number":"6822","RawContent":null,"Title":"Fix a thread pool deadlock issue","State":"closed","Body":"Fixes https://github.com/dotnet/corert/issues/6780:\r\n- `ShouldStopProcessingWorkNow` was checking the count of existing threads and decrementing the count of processing threads. Due to differences from CoreCLR, the condition needs to be different. The effect was that when hill climbing decides to crease the thread count goal, `ShouldStop...` stops all threads that were processing work if there are enough existing threads, and even though there are several thread requests, the now-all-waiting threads are not released to process more work, leading to deadlock. The condition in `ShouldAdjustMaxWorkersActive` was also incorrect, fixed both.\r\n- Fixed a few other small things that I saw\r\n\r\nPerf results for this test case:\r\n\r\n```c#\r\n        int iterationCount = 20_000_000;\r\n        var done = new ManualResetEvent(false);\r\n\r\n        WaitCallback wc = null;\r\n        wc = delegate\r\n        {\r\n            if (Interlocked.Decrement(ref iterationCount) == 0)\r\n            {\r\n                done.Set();\r\n            }\r\n            else\r\n            {\r\n                ThreadPool.QueueUserWorkItem(wc);\r\n            }\r\n        };\r\n\r\n        var sw = Stopwatch.StartNew();\r\n        for (int i = 0, n = Environment.ProcessorCount; i < n; ++i)\r\n        {\r\n            ThreadPool.QueueUserWorkItem(wc);\r\n        }\r\n        done.WaitOne();\r\n        sw.Stop();\r\n        Console.WriteLine($\"{sw.Elapsed.TotalMilliseconds,10:0.00}\");\r\n```\r\n\r\nAs written:\r\n\r\n```\r\nwindows coreclr: 2213\r\n  linux coreclr: 2160\r\n windows corert: 2049\r\n   linux corert: 3302\r\n```\r\n\r\nAfter adding some delay to the thread (calculate Fib(15) recursively), with 2 M work items instead of 20 M:\r\n\r\n```\r\nwindows coreclr: 1840\r\n  linux coreclr: 2409\r\n windows corert: 1528\r\n   linux corert: 1977\r\n```\r\n\r\nI don't fully understand yet why the CoreRT implementation on Linux is relatively slower when there is no delay, needs further investigation. The same implementation on Windows is not hitting the issue, and there appears to be something to do with scheduling and threads falling into a certain pattern.","Url":"https://github.com/dotnet/corert/pull/6822","RelatedDescription":"Closed or merged PR \"Fix a thread pool deadlock issue\" (#6822)"},{"Id":"398282501","IsPullRequest":true,"CreatedAt":"2019-01-13T22:34:59","Actor":"trylek","Number":"6809","RawContent":null,"Title":"Remove the context cookie from method context","State":"closed","Body":"Based on Michal's feedback I have removed the cookie from\r\nMethodContext as unreliable for method context comparisons. Thanks\r\nto this change I could carry out several additional simplifications\r\n- I have changed MethodContext to be a struct and I simplified\r\nits manipulation in the CPAOT code.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6809","RelatedDescription":"Closed or merged PR \"Remove the context cookie from method context\" (#6809)"},{"Id":"398680628","IsPullRequest":false,"CreatedAt":"2019-01-13T17:35:25","Actor":"TFTomSun","Number":"6821","RawContent":null,"Title":"Exception when rd.xml is specified","State":"open","Body":"i tried to add reflection information as described here: \r\nhttps://github.com/dotnet/corert/blob/master/samples/WebApi/README.md#using-reflection\r\n\r\nhowever when I run the build again, I get the following exception:\r\n\r\n> \r\n> EXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) \r\n> EXEC : error : Sequence contains no elements [D:\\Git\\Tooling\\src\\Core\\<app>\\<app>.csproj]\r\n>   System.InvalidOperationException: Sequence contains no elements\r\n>      at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)\r\n>      at ILCompiler.RdXmlRootProvider.AddCompilationRoots(IRootingServiceProvider rootProvider)\r\n>      at ILCompiler.Compilation..ctor(DependencyAnalyzerBase`1 dependencyGraph, NodeFactory nodeFactory, IEnumerable`1 compilationRoots, ILProvider ilProvider, DebugInformationProvider debugInformationProvider, DevirtualizationManager devirtualizationManager, Logger logger)\r\n>      at ILCompiler.ILScannerBuilder.ToILScanner()\r\n>      at ILCompiler.Program.Run(String[] args)\r\n>      at ILCompiler.Program.Main(String[] args)","Url":"https://github.com/dotnet/corert/issues/6821","RelatedDescription":"Open issue \"Exception when rd.xml is specified\" (#6821)"},{"Id":"398647777","IsPullRequest":true,"CreatedAt":"2019-01-13T11:24:57","Actor":"MichalStrehovsky","Number":"6820","RawContent":null,"Title":"Change reflection defaults","State":"open","Body":"The biggest issue people have been hitting when trying out CoreRT on existing projects is reflection. This is due to .NET's heritage of being a dynamic runtime where generating new code at runtime is how you do things.\r\n\r\nThis pull request does two things: adds a document describing the challenges of reflection in an AOT compiled runtime, and **establishes new compilation defaults that improve the reflection experience** (new defaults are documented in the doc that is part of the pull request).\r\n\r\nThe improvement in reflection experience is not free. We are trading size and compilation speed for compatibility. E.g. the size of the ASP.NET WebApi sample we have in our repo goes from 24 MB to 30 MB. The size of the MonoGame sample goes from 6 MB to 9 MB. While the size increase is pretty significant (30-50%), the resulting size of the deployment is still very competitive with the size of a CoreCLR self contained app, or Mono's mkbundle (both of which set a pretty low bar).\r\n\r\nPeople who would like deployment sizes that are more competitive with Go and Rust can **opt into** the optimizations that used to be the default before this pull request (described in the doc and linked from a message the build emits). We are going to add more of these optimizations in the future.\r\n\r\nTo see the effect, I've updated the RD.XML files we have in the samples directory. I expect we'll be able to further minimize the amount of RD.XML needed once I bring back 3ec32cc13497f9d720349032a61da355af1ace3f (that improves reflection experience with generics).","Url":"https://github.com/dotnet/corert/pull/6820","RelatedDescription":"Open PR \"Change reflection defaults\" (#6820)"},{"Id":"398606761","IsPullRequest":false,"CreatedAt":"2019-01-13T00:41:44","Actor":"TFTomSun","Number":"6819","RawContent":null,"Title":"How to compile into one single executable?","State":"open","Body":"The CoreRT is advertised as a possibility to compile any application into one single native executable. I have an application with some project and nuget dependencies. Is it already possible to create a single exe out of it? If so, how? Is there a special build flag, that i need to pass?\r\n\r\nThanks in advance","Url":"https://github.com/dotnet/corert/issues/6819","RelatedDescription":"Open issue \"How to compile into one single executable?\" (#6819)"},{"Id":"398580192","IsPullRequest":true,"CreatedAt":"2019-01-12T21:25:01","Actor":"MichalStrehovsky","Number":"6818","RawContent":null,"Title":"Remove unused parameter to ReadyToRunHelperNode constructor","State":"closed","Body":"Became unnecessary after #6688. Should have done it then...\r\n\r\nAlso delete references to it from places that don't actually use it.","Url":"https://github.com/dotnet/corert/pull/6818","RelatedDescription":"Closed or merged PR \"Remove unused parameter to ReadyToRunHelperNode constructor\" (#6818)"},{"Id":"398577907","IsPullRequest":true,"CreatedAt":"2019-01-12T19:00:05","Actor":"MichalStrehovsky","Number":"6817","RawContent":null,"Title":"Don't fail compilation if a native file was an input","State":"closed","Body":"Sometimes we see garbage passed as input to ILC. This is normally ignored, but `--rootallapplicationassemblies` looks at all inputs.","Url":"https://github.com/dotnet/corert/pull/6817","RelatedDescription":"Closed or merged PR \"Don't fail compilation if a native file was an input\" (#6817)"},{"Id":"398577496","IsPullRequest":true,"CreatedAt":"2019-01-12T18:59:52","Actor":"MichalStrehovsky","Number":"6816","RawContent":null,"Title":"Fix IL scanning of unboxing thunks on byref-like generic types","State":"closed","Body":"Fixes a compilation failure when compiling ASP.NET with `<RootAllApplicationAssemblies>true</RootAllApplicationAssemblies>`.\r\n\r\nThe fix is to mirror the dependency that the normal `MethodCodeNode` has for special unboxing thunks.","Url":"https://github.com/dotnet/corert/pull/6816","RelatedDescription":"Closed or merged PR \"Fix IL scanning of unboxing thunks on byref-like generic types\" (#6816)"},{"Id":"398577412","IsPullRequest":true,"CreatedAt":"2019-01-12T18:05:59","Actor":"MichalStrehovsky","Number":"6815","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6815","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6815)"},{"Id":"398504431","IsPullRequest":true,"CreatedAt":"2019-01-12T04:13:28","Actor":"Dotnet-GitSync-Bot","Number":"6813","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii","Url":"https://github.com/dotnet/corert/pull/6813","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6813)"},{"Id":"398507519","IsPullRequest":true,"CreatedAt":"2019-01-12T03:43:19","Actor":"cshung","Number":"6814","RawContent":null,"Title":"Make sure we emit a BOM when generating cpp","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6814","RelatedDescription":"Closed or merged PR \"Make sure we emit a BOM when generating cpp\" (#6814)"},{"Id":"398463575","IsPullRequest":true,"CreatedAt":"2019-01-11T22:20:33","Actor":"MichalStrehovsky","Number":"6812","RawContent":null,"Title":"Update CppCodegen status","State":"closed","Body":"@dotnet-bot skip ci please","Url":"https://github.com/dotnet/corert/pull/6812","RelatedDescription":"Closed or merged PR \"Update CppCodegen status\" (#6812)"},{"Id":"398434073","IsPullRequest":true,"CreatedAt":"2019-01-11T20:49:23","Actor":"Dotnet-GitSync-Bot","Number":"6811","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6811","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6811)"},{"Id":"398306144","IsPullRequest":true,"CreatedAt":"2019-01-11T15:13:11","Actor":"kbaladurin","Number":"6810","RawContent":null,"Title":"[CppCodeGen] Fix importing ldftn","State":"closed","Body":"In the case of ldvirtftn we should pop object off the stack. This patch fixes `InvalidProgramException` during compilation:\r\n```\r\nCommon Language Runtime detected an invalid program. ([S.P.CoreLib]System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1<bool,System.__Canon>.get_MoveNextAction())\r\n```","Url":"https://github.com/dotnet/corert/pull/6810","RelatedDescription":"Closed or merged PR \"[CppCodeGen] Fix importing ldftn\" (#6810)"},{"Id":"398176634","IsPullRequest":true,"CreatedAt":"2019-01-11T09:09:14","Actor":"Dotnet-GitSync-Bot","Number":"6808","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6808","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6808)"},{"Id":"398049742","IsPullRequest":true,"CreatedAt":"2019-01-11T08:11:18","Actor":"Dotnet-GitSync-Bot","Number":"6806","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6806","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6806)"},{"Id":"398139925","IsPullRequest":true,"CreatedAt":"2019-01-11T08:00:18","Actor":"jkotas","Number":"6807","RawContent":null,"Title":"Avoid infinite recursion with current CultureInfo initialization","State":"closed","Body":"Fixes #6804","Url":"https://github.com/dotnet/corert/pull/6807","RelatedDescription":"Closed or merged PR \"Avoid infinite recursion with current CultureInfo initialization\" (#6807)"},{"Id":"397780728","IsPullRequest":false,"CreatedAt":"2019-01-11T08:00:18","Actor":"tonerdo","Number":"6804","RawContent":null,"Title":"String.StartsWith causes StackOverflow exception when using Experimental TypeLoader","State":"closed","Body":"This can be reproduced with a simple console app\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        bool startsWith = \"\".StartsWith(\"a\");\r\n    }\r\n}\r\n```\r\n\r\nThis only happens for Experimental builds\r\n\r\n@jkotas @MichalStrehovsky mentioning you because `Assembly.Load` uses it and it's preventing me from testing out the interpreter","Url":"https://github.com/dotnet/corert/issues/6804","RelatedDescription":"Closed issue \"String.StartsWith causes StackOverflow exception when using Experimental TypeLoader\" (#6804)"},{"Id":"397967260","IsPullRequest":true,"CreatedAt":"2019-01-10T20:29:41","Actor":"Dotnet-GitSync-Bot","Number":"6805","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams @marek-safar","Url":"https://github.com/dotnet/corert/pull/6805","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6805)"},{"Id":"397752899","IsPullRequest":true,"CreatedAt":"2019-01-10T19:01:44","Actor":"marek-safar","Number":"6803","RawContent":null,"Title":"Move COMException to shared partition","State":"closed","Body":"and updated the implementation logic to match CoreCLR","Url":"https://github.com/dotnet/corert/pull/6803","RelatedDescription":"Closed or merged PR \"Move COMException to shared partition\" (#6803)"},{"Id":"397475559","IsPullRequest":true,"CreatedAt":"2019-01-10T18:50:56","Actor":"Dotnet-GitSync-Bot","Number":"6796","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @marek-safar @jkotas","Url":"https://github.com/dotnet/corert/pull/6796","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6796)"},{"Id":"397694107","IsPullRequest":true,"CreatedAt":"2019-01-10T12:23:16","Actor":"jkotas","Number":"6801","RawContent":null,"Title":"Merge nmirror to master","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6801","RelatedDescription":"Closed or merged PR \"Merge nmirror to master\" (#6801)"},{"Id":"397729848","IsPullRequest":true,"CreatedAt":"2019-01-10T12:22:35","Actor":"MichalStrehovsky","Number":"6802","RawContent":null,"Title":"Fix ProjectN build break","State":"closed","Body":"Using statement got deleted, but it's used in the WinRT code paths.","Url":"https://github.com/dotnet/corert/pull/6802","RelatedDescription":"Closed or merged PR \"Fix ProjectN build break\" (#6802)"},{"Id":"397602731","IsPullRequest":true,"CreatedAt":"2019-01-10T06:47:51","Actor":"dotnet-bot","Number":"6799","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/6799","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#6799)"},{"Id":"397661972","IsPullRequest":true,"CreatedAt":"2019-01-10T03:54:04","Actor":"yowl","Number":"6800","RawContent":null,"Title":"WIP: WASM: Enable reflection for types","State":"open","Body":"Fixes #5842 \r\nThanks for all the help on this.\r\nI'm leaving this WIP as it contains 2 changes from @morganbr in `ILToWebAssemblyImporter.cs`: the funclets for try/catch/finally which is needed here; and some alignment fixes which is not strictly necessary for the WASM=1 output, but it was earlier in the branch and was useful for debugging.  Ideally these changes would be merged separately but this work is getting old and I wanted to push it along as the merge to `master` was hard enough now.  And with respect to the merge, the work here might be useful for Morgan as due to the overlapping time of the `ThrowIfNull` changes and these the merge is not straightforward.   Also maybe the other parts of this could be reviewed?","Url":"https://github.com/dotnet/corert/pull/6800","RelatedDescription":"Open PR \"WIP: WASM: Enable reflection for types\" (#6800)"},{"Id":"397600408","IsPullRequest":true,"CreatedAt":"2019-01-09T23:06:55","Actor":"trylek","Number":"6798","RawContent":null,"Title":"Generic lookup fixes","State":"open","Body":"1) Add new form of generic lookup for generic non-GC static base.\r\n\r\n2) Stop back-translating canonical fields to their runtime\r\ndetermined counterparts for the purpose of emitting R2R signatures.\r\n\r\nThese changes fix three Pri# 0 CoreCLR tests.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6798","RelatedDescription":"Open PR \"Generic lookup fixes\" (#6798)"},{"Id":"397575422","IsPullRequest":true,"CreatedAt":"2019-01-09T21:45:59","Actor":"nattress","Number":"6797","RawContent":null,"Title":"Update RyuJIT","State":"open","Body":"Breaking JIT interface change requires updating CoreRT's RyuJit version so we can create local debug JITs to debug CPAOT.","Url":"https://github.com/dotnet/corert/pull/6797","RelatedDescription":"Open PR \"Update RyuJIT\" (#6797)"},{"Id":"397245960","IsPullRequest":false,"CreatedAt":"2019-01-09T16:37:51","Actor":"xoofx","Number":"6794","RawContent":null,"Title":"Failure with ReadyToRun without asking for ReadyToRun","State":"closed","Body":"Hey,\r\n\r\nI'm trying to use the latest clrjit(ilc) by compiling from CoreCLR master but I'm getting a weird behavior where the `CorInfoImpl.GetHelperFtnUncached` is being called with arguments that are not handled (like `CORINFO_HELP_THROW_TYPE_NOT_SUPPORTED`, `CORINFO_HELP_POLL_GC`...etc.) and If I add fake handling here, it will fail later on `getReadyToRunHelper` not handling `CORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPEHANDLE_MAYBENULL` while I'm not using ilc with the readytorun option.\r\n\r\nThe code that I'm trying to compile is quite simple though:\r\n\r\n```c#\r\n    class Program\r\n    {\r\n        static int Main()\r\n        {\r\n            var array = new int[] {1, 2, 3, 4};\r\n\r\n            var result = 0;\r\n            for (int i = 0; i < array.Length; i++)\r\n            {\r\n                result = array[i];\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n```\r\n\r\nAm I doing something wrong? Or something changed in CoreCLR that should be passed to RyuJit or?","Url":"https://github.com/dotnet/corert/issues/6794","RelatedDescription":"Closed issue \"Failure with ReadyToRun without asking for ReadyToRun\" (#6794)"},{"Id":"397315768","IsPullRequest":true,"CreatedAt":"2019-01-09T12:19:04","Actor":"Dotnet-GitSync-Bot","Number":"6795","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @wfurt","Url":"https://github.com/dotnet/corert/pull/6795","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6795)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"399149064","IsPullRequest":true,"CreatedAt":"2019-01-15T01:23:30","Actor":"jainaashish","Number":"2821","RawContent":null,"Title":"Insert NuGet Build 4.9.3-rtm.5777 into sdk 2.2.1xx","State":"open","Body":"@livarcocc ","Url":"https://github.com/dotnet/sdk/pull/2821","RelatedDescription":"Open PR \"Insert NuGet Build 4.9.3-rtm.5777 into sdk 2.2.1xx\" (#2821)"},{"Id":"399003063","IsPullRequest":true,"CreatedAt":"2019-01-14T17:50:23","Actor":"nugetlurker","Number":"2820","RawContent":null,"Title":"Insert NuGet Build 4.9.3-rtm.5777 into sdk","State":"open","Body":"Insert NuGet Build 4.9.3-rtm.5777 into sdk release/2.1.5xx branch","Url":"https://github.com/dotnet/sdk/pull/2820","RelatedDescription":"Open PR \"Insert NuGet Build 4.9.3-rtm.5777 into sdk\" (#2820)"},{"Id":"398943648","IsPullRequest":true,"CreatedAt":"2019-01-14T15:36:21","Actor":"v-zbsail","Number":"2819","RawContent":null,"Title":"LOC CHECKIN | dotnet/sdk master | 20190114","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2819","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/sdk master | 20190114\" (#2819)"},{"Id":"398836170","IsPullRequest":false,"CreatedAt":"2019-01-14T10:54:16","Actor":"theimowski","Number":"2818","RawContent":null,"Title":"ApplicationIcon property doesn't work for F# projects when targeting Full .NET","State":"open","Body":"This works correctly for C# and VB.NET projects:\r\n\r\n1. `dotnet new console -lang C#` / `dotnet new console -lang VB`\r\n2. place any icon file (icon.ico) in the root directory\r\n3. in project file, change `TargetFramework` to `net45` and add `<ApplicationIcon>icon.ico</ApplicationIcon>`\r\n4. `dotnet build`\r\n\r\nThe *.exe in `bin/Debug/net45` has a proper icon set.\r\nIf however you repeat the same steps above, but for F# (`dotnet new console -lang F#`) the icon is not set.\r\n\r\n---\r\n\r\n```\r\n> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.503\r\n Commit:    4c506e0f35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.503\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.7\r\n  Commit:  cca5d72d48\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```","Url":"https://github.com/dotnet/sdk/issues/2818","RelatedDescription":"Open issue \"ApplicationIcon property doesn't work for F# projects when targeting Full .NET\" (#2818)"},{"Id":"398624608","IsPullRequest":false,"CreatedAt":"2019-01-13T06:36:42","Actor":"himalpatel81","Number":"2817","RawContent":null,"Title":"Error with dotnet publish ","State":"open","Body":"I'm trying to publish an ASP.NET Core .NET Framework project using CLI and it fails with the error message \"error CS0246: The type or namespace name 'Leadtools' could not be found (are you missing a using directive or an assembly reference?) [WebApplication1.csproj] \" \r\n\r\nLeadTools is .net Framework nuget. I read few articles saying that dotnet cli doesnt support it. I also tried to use msbuild but getting the same error. \r\n\r\nHere is the command that i use\r\n\r\nCLI:\r\n`dotnet publish /nologo /p:PublishProfile=Release  /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /maxcpucount:1 /p:platform=\"Any CPU\" /p:configuration=\"Release\" /p:DesktopBuildPackageLocation=\"output.zip\"`\r\n\r\nMSBuild:\r\n\r\n`msbuild \"WebApplication1.csproj\" publish /nologo /p:PublishProfile=Release  /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /maxcpucount:1 /p:platform=\"Any CPU\" /p:configuration=\"Release\" /p:DesktopBuildPackageLocation=\"output.zip\"\r\n`\r\nand Here is the repro project\r\n[Repro](https://github.com/himalpatel81/DotNETCLIIssue)\r\n","Url":"https://github.com/dotnet/sdk/issues/2817","RelatedDescription":"Open issue \"Error with dotnet publish \" (#2817)"},{"Id":"398509159","IsPullRequest":true,"CreatedAt":"2019-01-12T20:41:56","Actor":"peterhuene","Number":"2816","RawContent":null,"Title":"Limit default apphost feature to netcoreapp3.0 targeted apps.","State":"closed","Body":"This commit limits the default apphost feature to applications that target\r\n`netcoreapp3.0` or later.\r\n\r\nThis prevents altering the expected outputs of previous projects after an\r\nupgrade to a 3.0 SDK.\r\n\r\nMore importantly, this allows for the removal of the hack that was put in place\r\nto force a restore of the SDK RID to obtain the apphost; the apphost is now\r\nresolved through framework references.\r\n\r\nFixes dotnet/cli#10566.","Url":"https://github.com/dotnet/sdk/pull/2816","RelatedDescription":"Closed or merged PR \"Limit default apphost feature to netcoreapp3.0 targeted apps.\" (#2816)"},{"Id":"398507434","IsPullRequest":true,"CreatedAt":"2019-01-12T07:55:30","Actor":"dotnet-maestro[bot]","Number":"2815","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19061.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19061.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2815","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2815)"},{"Id":"398507229","IsPullRequest":true,"CreatedAt":"2019-01-12T01:32:18","Actor":"jkoritzinsky","Number":"2814","RawContent":null,"Title":"Add SDK support for upcoming .NET Core 3.0 Managed COM Server support","State":"open","Body":"Add an MSBuild property and tasks/targets to enable creating a COM Server running on .NET Core.\r\n\r\nIf the user sets the `UseComHost` property and has an rid targeting Windows, the build will generate a `.clsidmap` file, make a copy of `comhost.dll`, embed the CLSIDmap if possible, and copy a renamed comhost.dll (along with the CLSIDmap if it wasn't embedded) to the output directory.\r\n\r\nRight now since `comhost.dll` isn't in the AppHost package (it's still in PR review). I've disabled those tests for CI. To test them manually, add a dll in the `.nuget` folder in the apphost package next to `apphost.exe` and re-enable them.\r\n\r\nAlso, includes a property for internal use (i.e. those of us on the interop team) to explicitly not embed the CLSIDmap.\r\n\r\ncc: @AaronRobinsonMSFT","Url":"https://github.com/dotnet/sdk/pull/2814","RelatedDescription":"Open PR \"Add SDK support for upcoming .NET Core 3.0 Managed COM Server support\" (#2814)"},{"Id":"397640906","IsPullRequest":true,"CreatedAt":"2019-01-11T23:24:59","Actor":"peterhuene","Number":"2805","RawContent":null,"Title":"Respect PlatformTarget when setting DefaultAppHostRuntimeIdentifier.","State":"closed","Body":"This commit uses `PlatformTarget` to determine the value for\r\n`DefaultAppHostRuntimeIdentifier` on Windows.\r\n\r\nIf `PlatformTarget` is set to `x86`, then a PE32 apphost is used.\r\n\r\nIf `PlatformTarget` is set to `x64`, then a PE32+ apphost is used.\r\n\r\nOtherwise, the apphost for the SDK RID is used.\r\n\r\nFixes #2632.","Url":"https://github.com/dotnet/sdk/pull/2805","RelatedDescription":"Closed or merged PR \"Respect PlatformTarget when setting DefaultAppHostRuntimeIdentifier.\" (#2805)"},{"Id":"397961784","IsPullRequest":false,"CreatedAt":"2019-01-11T23:07:56","Actor":"greyb","Number":"2809","RawContent":null,"Title":"Add ReferencePath to Microsoft.NET.Sdk.props AssemblySearchPaths","State":"closed","Body":"AssemblySearchPaths has no ReferencePath, why?","Url":"https://github.com/dotnet/sdk/issues/2809","RelatedDescription":"Closed issue \"Add ReferencePath to Microsoft.NET.Sdk.props AssemblySearchPaths\" (#2809)"},{"Id":"396751430","IsPullRequest":true,"CreatedAt":"2019-01-11T22:38:54","Actor":"livarcocc","Number":"2796","RawContent":null,"Title":"Add netstandard2.1 to the list of supported target frameworks.","State":"closed","Body":"Fixes internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/761489","Url":"https://github.com/dotnet/sdk/pull/2796","RelatedDescription":"Closed or merged PR \"Add netstandard2.1 to the list of supported target frameworks.\" (#2796)"},{"Id":"398016176","IsPullRequest":true,"CreatedAt":"2019-01-11T21:00:15","Actor":"dotnet-bot","Number":"2810","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2810","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2810)"},{"Id":"398251998","IsPullRequest":false,"CreatedAt":"2019-01-11T18:01:11","Actor":"am11","Number":"2811","RawContent":null,"Title":"Support for .NET Framework TFM tools","State":"closed","Body":"`dotnet pack /p:PackAsTool=true` and `dotnet-tool` provide a nice mechanism to create and deliver utility tools in a uniform manner. Unfortunately, it only supports .NET Core (PackTool targets has [explicit check](https://github.com/dotnet/sdk/blob/f0a1246be1ebe11a88097ac3dd5736f0ad15b855/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PackTool.targets#L75-L76)).\r\n\r\nFor utilities written with .NET Framework TFMs, we are left with quite inconvenient option: manually collect all dependencies of console app's closure and deliver as a zip file (would be nice to know if there is an easy workaround available meanwhile, by NuGet or MSBuild?)\r\n\r\nIf it is feasible, please consider enabling .NET Framework support in PackTool targets.\r\n\r\nSteps to repro:\r\n\r\n```pwsh\r\n#!/usr/bin/env pwsh\r\n\r\npushd /temp\r\ndotnet new console -n mydntool\r\npushd mydntool\r\n# replace TFM to net471 (system has C:\\Program Files\\git\\usr\\bin\\ in PATH containing sed etc.)\r\nsed -i '/<\\/TargetFramework\\>/c\\    <TargetFramework\\>net471\\<\\/TargetFramework\\>' mydntool.csproj\r\ndotnet pack /p:PackAsTool=true\r\ndotnet tool install mydntool --add-source bin/Debug --tool-path mydir\r\n```\r\n\r\nExpected:\r\n\r\n> You can invoke the tool using the following command: mydntool\r\nTool 'mydntool' (version '1.0.0') was successfully installed.\r\n\r\nActual:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.1.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.PackTool.targets(32,5): error NETSDK1054: only supports .NET Core. [C:\\temp\\mydntool\\mydntool.csproj]\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2811","RelatedDescription":"Closed issue \"Support for .NET Framework TFM tools\" (#2811)"},{"Id":"398280330","IsPullRequest":true,"CreatedAt":"2019-01-11T17:52:24","Actor":"dotnet-maestro[bot]","Number":"2812","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19060.8\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19060.8\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2812","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2812)"},{"Id":"398310177","IsPullRequest":false,"CreatedAt":"2019-01-11T14:25:46","Actor":"rla4","Number":"2813","RawContent":null,"Title":"dotnet build fails when OutputPath starts with the source path","State":"open","Body":"When building an SDK project, the source files are not being collected correctly, causing a \"CS5001: Program does not contain a static 'Main' method suitable for an entry point\" error. If I change the `OutputPath` to anything other than a substring of the source path, all source files are picked up just fine and build succeeds. Issue only happens after the 2nd build (presumably because the output folder is not empty).\r\n\r\nStill repro'ed on latest stable 2.2, but could *not* repro on `3.0.100-preview-009812`, so possibly an issue that only affects < 3.0.\r\n\r\nRepro steps:\r\n\r\n```\r\nmkdir C:\\Temp2 && cd C:\\Temp2\r\n@echo {\"sdk\":{\"version\":\"2.2.100\"}}> global.json\r\nmkdir TestFullPath && cd TestFullPath && dotnet new console && cd ..\r\ndotnet build C:\\Temp2\\TestFullPath\\TestFullPath.csproj -o C:\\Temp2\\Test\r\ndotnet build C:\\Temp2\\TestFullPath\\TestFullPath.csproj -o C:\\Temp2\\Test\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nC:\\Temp2\r\nλ cd ..\r\n\r\nC:\\\r\nλ rm -rf C:\\Temp2\r\n\r\nC:\\\r\nλ mkdir C:\\Temp2 && cd C:\\Temp2\r\n\r\nC:\\Temp2\r\nλ @echo {\"sdk\":{\"version\":\"2.2.100\"}}> global.json\r\n\r\nC:\\Temp2\r\nλ mkdir TestFullPath && cd TestFullPath && dotnet new console && cd ..\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on C:\\Temp2\\TestFullPath\\TestFullPath.csproj...\r\n  Restoring packages for C:\\Temp2\\TestFullPath\\TestFullPath.csproj...\r\n  Generating MSBuild file C:\\Temp2\\TestFullPath\\obj\\TestFullPath.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\Temp2\\TestFullPath\\obj\\TestFullPath.csproj.nuget.g.targets.\r\n  Restore completed in 193.24 ms for C:\\Temp2\\TestFullPath\\TestFullPath.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nC:\\Temp2\r\nλ dotnet build C:\\Temp2\\TestFullPath\\TestFullPath.csproj -o C:\\Temp2\\Test\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 35.26 ms for C:\\Temp2\\TestFullPath\\TestFullPath.csproj.\r\n  TestFullPath -> C:\\Temp2\\Test\\TestFullPath.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.06\r\n\r\nC:\\Temp2\r\nλ dotnet build C:\\Temp2\\TestFullPath\\TestFullPath.csproj -o C:\\Temp2\\Test\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 37.45 ms for C:\\Temp2\\TestFullPath\\TestFullPath.csproj.\r\nCSC : error CS5001: Program does not contain a static 'Main' method suitable for an entry point [C:\\Temp2\\TestFullPath\\TestFullPath.csproj]\r\n\r\nBuild FAILED.\r\n\r\nCSC : error CS5001: Program does not contain a static 'Main' method suitable for an entry point [C:\\Temp2\\TestFullPath\\TestFullPath.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.94\r\n```","Url":"https://github.com/dotnet/sdk/issues/2813","RelatedDescription":"Open issue \"dotnet build fails when OutputPath starts with the source path\" (#2813)"},{"Id":"397403353","IsPullRequest":false,"CreatedAt":"2019-01-10T18:37:36","Actor":"Xarkam","Number":"2804","RawContent":null,"Title":"Remove old sdk can't remove all old runtime","State":"closed","Body":"Hello,\r\n\r\nToday, I removed old sdk from my machine.\r\nBut, I have two old runtime not removed:\r\n![image](https://user-images.githubusercontent.com/331816/50906063-93a5b700-1424-11e9-88e6-5e40f2bf028e.png)\r\n![image](https://user-images.githubusercontent.com/331816/50906249-fa2ad500-1424-11e9-976f-a190e4af12a4.png)\r\n![image](https://user-images.githubusercontent.com/331816/50906311-1c245780-1425-11e9-964d-7b4c466a66e7.png)\r\nIs there a reason for these two versions to still be present?\r\nWhy folders 2.1.0 and 2.1.2 in `C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App` are not empty and is not listed as installed ?\r\n\r\nHow to delete them?\r\n\r\nMy sdk :\r\n![image](https://user-images.githubusercontent.com/331816/50906146-c485ec00-1424-11e9-9e06-87cf022b91cf.png)\r\n\r\nI do not have a runtime installed outside of those installed by the sdk.\r\n\r\nThanks","Url":"https://github.com/dotnet/sdk/issues/2804","RelatedDescription":"Closed issue \"Remove old sdk can't remove all old runtime\" (#2804)"},{"Id":"397821299","IsPullRequest":true,"CreatedAt":"2019-01-10T18:25:05","Actor":"dotnet-maestro[bot]","Number":"2807","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19058.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2807","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2807)"},{"Id":"397029560","IsPullRequest":true,"CreatedAt":"2019-01-10T18:24:32","Actor":"nugetlurker","Number":"2798","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5754 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5754 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2798","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5754 into sdk\" (#2798)"},{"Id":"397949083","IsPullRequest":false,"CreatedAt":"2019-01-10T18:02:39","Actor":"jeffhube","Number":"2808","RawContent":null,"Title":"Intermittent build failures with no error messages","State":"open","Body":"I'm encountering intermittent build failures when using `dotnet run` where there is no output describing what failed. The failure can occur immediately after a previous `dotnet run` succeeded for the same project, with no changes made to the project files.\r\n\r\nAny suggestions on how I can troubleshoot this?\r\n\r\n```\r\n$ dotnet run --project foo -- fooargs\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.102\r\n Commit:    96ff75a873\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.102/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.1.503 [/usr/share/dotnet/sdk]\r\n  2.2.102 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n**Additional background**\r\n\r\nI have a Jenkins job that clones a git repository containing a .NET Core project and executes a script that calls `dotnet run` 5 times for that project with different arguments\r\n\r\n```\r\ndotnet run --project foo -- fooargs1\r\ndotnet run --project foo -- fooargs2\r\ndotnet run --project foo -- fooargs3\r\ndotnet run --project foo -- fooargs4\r\ndotnet run --project foo -- fooargs5\r\n```\r\n\r\nWhen I ran this job ~60 times, it failed 3 times with the error mentioned above. None of those failures were on the first invocation of `dotnet run`..","Url":"https://github.com/dotnet/sdk/issues/2808","RelatedDescription":"Open issue \"Intermittent build failures with no error messages\" (#2808)"},{"Id":"397745003","IsPullRequest":true,"CreatedAt":"2019-01-10T13:05:04","Actor":"v-zbsail","Number":"2806","RawContent":null,"Title":"LOC CHECKIN | dotnet/sdk master | 20190110","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2806","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/sdk master | 20190110\" (#2806)"},{"Id":"397029578","IsPullRequest":true,"CreatedAt":"2019-01-10T01:48:39","Actor":"nugetlurker","Number":"2799","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5754 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5754 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2799","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5754 into sdk\" (#2799)"},{"Id":"397362127","IsPullRequest":true,"CreatedAt":"2019-01-09T17:44:41","Actor":"dotnet-maestro[bot]","Number":"2803","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19058.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2803","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2803)"},{"Id":"397217147","IsPullRequest":false,"CreatedAt":"2019-01-09T05:26:51","Actor":"dsplaisted","Number":"2802","RawContent":null,"Title":"Set metadata on references coming from shared framework targeting pack to show them in solution explorer tree view","State":"open","Body":"See https://github.com/dotnet/project-system/issues/4444","Url":"https://github.com/dotnet/sdk/issues/2802","RelatedDescription":"Open issue \"Set metadata on references coming from shared framework targeting pack to show them in solution explorer tree view\" (#2802)"},{"Id":"397167762","IsPullRequest":true,"CreatedAt":"2019-01-09T04:22:42","Actor":"nguerrera","Number":"2801","RawContent":null,"Title":"Fix dogfood.sh","State":"closed","Body":"Various infrastructure changes or changes only to dogfood.ps1 have left `source eng\\dogfood.sh` broken...","Url":"https://github.com/dotnet/sdk/pull/2801","RelatedDescription":"Closed or merged PR \"Fix dogfood.sh\" (#2801)"},{"Id":"397081406","IsPullRequest":true,"CreatedAt":"2019-01-09T04:01:06","Actor":"nguerrera","Number":"2800","RawContent":null,"Title":"Separate copying of refs from preservation of compilation info","State":"closed","Body":"PreserveCompilationContext does two things today:\r\n\r\n1. Write compilation info to .deps\r\n2. Copy reference-only assemblies to build/publish refs/ folder\r\n\r\nAdd PreserveCompilationReferences to control (2) independently and default it to PreserveCompilationContext for backwards compatibility.\r\n\r\nFix #2122 \r\n\r\ncc @pranavkm @rynowak @eerhardt ","Url":"https://github.com/dotnet/sdk/pull/2800","RelatedDescription":"Closed or merged PR \"Separate copying of refs from preservation of compilation info\" (#2800)"},{"Id":"396896917","IsPullRequest":true,"CreatedAt":"2019-01-08T17:39:14","Actor":"dotnet-maestro[bot]","Number":"2797","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19057.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19057.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2797","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2797)"},{"Id":"396741517","IsPullRequest":false,"CreatedAt":"2019-01-08T03:57:42","Actor":"yaakov-h","Number":"2795","RawContent":null,"Title":"Incorrect assembly binding redirects generated in 3.0 preview","State":"open","Body":"See: https://github.com/KirillOsenkov/SourceBrowser/issues/108\r\n\r\nWhen building SourceBrowser with SDK v2.1.502, binding redirects for `Newtonsoft.Json` and `System.Collections.Immutable` are generated for versions `11.0.0.0` and `1.2.3.0` respectively.\r\n\r\nWhen building SourceBrowser with SDK v3.0.100-preview-009812 (as shipped with VS2019 Preview 1), binding redirects for `Newtonsoft.Json` and `System.Collections.Immutable` are generated for versions `9.0.0.0` and `1.2.1.0` respectively.\r\n\r\nThis appears to be a regression in the SDK.","Url":"https://github.com/dotnet/sdk/issues/2795","RelatedDescription":"Open issue \"Incorrect assembly binding redirects generated in 3.0 preview\" (#2795)"},{"Id":"396709121","IsPullRequest":false,"CreatedAt":"2019-01-08T00:57:39","Actor":"xen2","Number":"2794","RawContent":null,"Title":"runtime.json only works if PackageReference is directly referenced by project","State":"open","Body":"I have a a `netcoreapp2.1` app with a `PackageReference` (let's call it MyPackageA) that contains a `runtime.json`.\r\n\r\nIt seems that if I don't include this MyPackageA `PackageReference` explicitly in the final executable project, its `runtime.json` is not properly used to compute the deps.json file (and it can't find/load some of the .dll).\r\n\r\nWhat works:\r\n- Main executable project: `PackageReference` to MyPackageA in main executable project\r\n\r\nWhat doesn't work:\r\n- Main executable project: `PackageReference` that references MyPackageA transitively\r\n- Library1: `PackageReference` to MyPackageA + Main executable: ProjectReference to Library1\r\n\r\nThis problem doesn't happen with net461 (libraries are properly copied by Visual Studio in all situations).","Url":"https://github.com/dotnet/sdk/issues/2794","RelatedDescription":"Open issue \"runtime.json only works if PackageReference is directly referenced by project\" (#2794)"},{"Id":"396634759","IsPullRequest":false,"CreatedAt":"2019-01-07T20:19:51","Actor":"natemcmaster","Number":"2792","RawContent":null,"Title":"RuntimeFrameworkVersion for 3.0 apps","State":"open","Body":"Filing on behalf of @DamianEdwards @davidfowl \r\n\r\nIt appears the RuntimeFrameworkVersion property is no longer honored in netcoreapp3.0 projects. If our recollection is correct, the plan was to use this property so customers could define the versions used by FrameworkReference. \r\n\r\nOpen question: how to handle the difference between shared framework versions. After RTM, we should (in theory) always patch all in-box shared frameworks. But during per-release, however, these versions will rarely align. \r\n","Url":"https://github.com/dotnet/sdk/issues/2792","RelatedDescription":"Open issue \"RuntimeFrameworkVersion for 3.0 apps\" (#2792)"},{"Id":"396675588","IsPullRequest":false,"CreatedAt":"2019-01-04T21:36:37","Actor":"Lohnegrim","Number":"2793","RawContent":null,"Title":"Result of chr() cannot be used as initial value of a Const in .Net Core 3 Preview 1","State":"open","Body":"Version: 3.0.100-preview-009812\r\nCommit: e3abf6e935\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.17763\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\nVersion: 3.0.0-preview-27122-01\r\nCommit: 00c5c8bc40\r\n\r\nHave you experienced this same bug with .NET Framework?: No\r\n\r\nIn the .Net Framework using VB.Net you can compile this Line:\r\n\r\n``` vb\r\nPrivate Const TabChar As Char = Chr(9)\r\n``` \r\n\r\nIn .Net Core 3 Preview 1 it failes with:\r\nerror BC30059: Constant expression is required.","Url":"https://github.com/dotnet/sdk/issues/2793","RelatedDescription":"Open issue \"Result of chr() cannot be used as initial value of a Const in .Net Core 3 Preview 1\" (#2793)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1084860808331448320","CreatedAt":"2019-01-14T17:12:27+00:00","UserScreenname":"dotnet","Text":"Join @csharpfritz and @julielerman this week to learn more about serverless technologies and CosmosDb.  It's a LIVE… https://t.co/9RjeePNX7g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":33,"FavoriteCount":13,"RawContent":null},{"Id":"1084759529806487552","CreatedAt":"2019-01-14T10:30:00+00:00","UserScreenname":"dotnet","Text":"Learn how we're improving .NET IO performance with https://t.co/EpnUCQtOJb.Pipelines in this episode of On .NET… https://t.co/zPf1AjkGi3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":165,"FavoriteCount":61,"RawContent":null},{"Id":"1083419958153887750","CreatedAt":"2019-01-10T17:47:01+00:00","UserScreenname":"dotnet","Text":"Starting the .NET Open Source Revolution https://t.co/7Y7FfWTaY4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":142,"FavoriteCount":59,"RawContent":null},{"Id":"1082818321353912320","CreatedAt":"2019-01-09T01:56:20+00:00","UserScreenname":"dotnet","Text":"Oopsie. Looks like @WhildyBeast executed\n\n$ dotnet clean https://t.co/gCte14spFY","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":29,"FavoriteCount":5,"RawContent":null},{"Id":"1082768839874535424","CreatedAt":"2019-01-08T22:39:42+00:00","UserScreenname":"dotnet","Text":"We just blogged about the .NET Framework January 2019 Security and Quality Rollup. https://t.co/XW8wiS0AIV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":17,"RawContent":null},{"Id":"1082649436851982337","CreatedAt":"2019-01-08T14:45:15+00:00","UserScreenname":"dotnet","Text":"In 15 minutes, join our @csharpfritz as he explores the @elgatogaming StreamDeck's new SDK and how to interact with… https://t.co/H2oVdzFOgr","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":9,"RawContent":null},{"Id":"1081303837263069184","CreatedAt":"2019-01-04T21:38:19+00:00","UserScreenname":"dotnet","Text":"“Code is, in our not-so-humble opinion, the most inexhaustible source of magic.” https://t.co/HtYQeRiB8t","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":141,"FavoriteCount":31,"RawContent":null},{"Id":"1081214419672096768","CreatedAt":"2019-01-04T15:43:00+00:00","UserScreenname":"dotnet","Text":"In this On .NET episode we learn about XAML Islands and how to integrate UI components from the Universal Windows P… https://t.co/JMXJ3aoBsM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-01-15T05:30:40.1355622Z","RunDurationInMilliseconds":18929}