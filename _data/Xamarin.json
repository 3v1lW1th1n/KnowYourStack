{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin Announcements from Microsoft Connect(); 2017","PublishedOn":"2017-11-15T16:42:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2017, we shared some very exciting updates related to Visual Studio and Xamarin. We invite you to join us tomorrow and Thursday to see even more during the remainder of...","Href":"https://blog.xamarin.com/xamarin-announcements-microsoft-connect-2017/","RawContent":null},{"Title":"Visual Studio App Center: The Next Generation of Xamarin Test Cloud","PublishedOn":"2017-11-15T13:08:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today at Microsoft Connect(); we announced the launch of Visual Studio App Center, the next generation of Xamarin Test Cloud. App Center brings the power of Xamarin Test Cloud combined with ability to...","Href":"https://blog.xamarin.com/visual-studio-app-center-next-generation-xamarin-test-cloud/","RawContent":null},{"Title":"Microsoft Connect(); 2017 Sessions for Xamarin Developers","PublishedOn":"2017-11-15T12:18:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Connect(); 2017 is underway, and there will be a ton of great content for mobile developers over the next three days. To help ensure you catch it all,  we’ve compiled a list of the sessions...","Href":"https://blog.xamarin.com/microsoft-connect-2017-sessions-xamarin-developers/","RawContent":null},{"Title":"Webinar Recording | Build Better Games with Unity and Microsoft Azure","PublishedOn":"2017-11-14T19:49:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Join David Antognoli in this pre-recorded webinar and see how to take your Unity games to the next level with powerful cloud services. He walks through how to connect your apps to Microsoft Azure,...","Href":"https://blog.xamarin.com/webinar-recording-build-better-games-unity-microsoft-azure/","RawContent":null},{"Title":"Adding Sound to a Xamarin.Forms App","PublishedOn":"2017-11-13T20:15:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Audio has many uses in mobile applications. Sounds can be essential to your app; they may notify users of important events or make your app accessible to visually-impaired users. We can also use sound...","Href":"https://blog.xamarin.com/adding-sound-xamarin-forms-app/","RawContent":null},{"Title":".NET Standard Comes to Xamarin.Forms Project Templates!","PublishedOn":"2017-11-10T19:06:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Standard is a formal specification of the .NET APIs that allow you to share even more code across the platforms you target. Xamarin developers are able to use .NET Standard libraries for sharing...","Href":"https://blog.xamarin.com/net-standard-comes-xamarin-forms-project-templates/","RawContent":null},{"Title":"Xamarin and Xamarin University Sessions at Microsoft Connect(); 2017","PublishedOn":"2017-11-09T20:47:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We invite you to join us for Microsoft&#8217;s annual Connect(); developer event, scheduled to stream live online November 15–17, 2017! Save the date now to ensure you don&#8217;t miss a minute of...","Href":"https://blog.xamarin.com/xamarin-xamarin-university-sessions-microsoft-connect-2017/","RawContent":null},{"Title":"Android Oreo Notification Channels","PublishedOn":"2017-11-07T20:52:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important features introduced in Android 8.0 Oreo is notification channels. Notification channels make it possible for you to group notifications so that all notifications posted to a...","Href":"https://blog.xamarin.com/android-oreo-notification-channels/","RawContent":null},{"Title":"Simplified App Signing with Secure Files in Visual Studio Team Services","PublishedOn":"2017-11-06T21:00:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One thing I never want to worry about when building my apps is needing to remember where I stored my provisioning profiles, certificates, and keystores. Thanks to Visual Studio Team Services (VSTS), I...","Href":"https://blog.xamarin.com/simplified-app-signing-secure-files-visual-studio-team-services/","RawContent":null},{"Title":"Making iOS 11 Even Easier with Xamarin.Forms","PublishedOn":"2017-11-03T21:31:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"iOS 11 has introduced a few new visual design updates that you may want to take advantage of, including safe area layout guides and large titles. For Xamarin.iOS developers, we’ve recently published...","Href":"https://blog.xamarin.com/making-ios-11-even-easier-xamarin-forms/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6867823980","Type":"PullRequestEvent","CreatedAt":"2017-11-17T02:45:43","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1035","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Aapt task needs to ignore fakeLogOpen\" (#1035) at xamarin/xamarin-android","RelatedBody":"Context: https://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1137183\r\n(search for APT0000 in Xamarin.Android-Tests.sln output)\r\n\r\nOur Windows builds on VSTS are randomly failing with:\r\n```\r\n2017-11-14T00:49:35.1654201Z   Executing package -f -m -M\r\nE:\\A\\_work\\_temp\\lrwwmk1i.il2\\manifest\\AndroidManifest.xml -J\r\nE:\\A\\_work\\_temp\\lrwwmk1i.il2 --custom-package mono.android_tests -F\r\nE:\\A\\_work\\_temp\\lrwwmk1i.il2\\resources.apk.bk -S obj\\Debug\\res -S\r\nE:\\A\\_work\\2\\s\\src\\Mono.Android\\Test\\obj\\Debug\\lp\\1\\jl\\res -I\r\nC:\\Users\\dlab\\android-toolchain\\sdk\\platforms\\android-26\\android.jar\r\n--auto-add-overlay --max-res-version 26 (TaskId:87)\r\n2017-11-14T00:49:35.2324246Z\r\nE:\\A\\_work\\2\\s\\bin\\Debug\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1373,2):\r\nerror APT0000: fakeLogOpen(/dev/log_crash, O_WRONLY) failed\r\n[E:\\A\\_work\\2\\s\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj]\r\n2017-11-14T00:49:35.2324246Z\r\nE:\\A\\_work\\2\\s\\bin\\Debug\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1373,2):\r\nerror APT0000: fakeLogOpen(/dev/log_security, O_WRONLY) failed\r\n[E:\\A\\_work\\2\\s\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj]\r\n2017-11-14T00:49:35.2324246Z\r\nE:\\A\\_work\\2\\s\\bin\\Debug\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1373,2):\r\nerror APT0000: fakeLogOpen(/dev/log_security, O_WRONLY) failed\r\n[E:\\A\\_work\\2\\s\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj]\r\n2017-11-14T00:49:35.2324246Z\r\nE:\\A\\_work\\2\\s\\bin\\Debug\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(1373,2):\r\nerror APT0000: fakeLogOpen(/dev/log_security, O_WRONLY) failed\r\n[E:\\A\\_work\\2\\s\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj]\r\n2017-11-14T00:49:35.2333825Z Done executing task \"Aapt\" -- FAILED.\r\n(TaskId:87)\r\n```\r\n\r\nI was able to repro this locally with the following PowerShell script:\r\n```\r\n$successful='0'\r\nwhile ($successful -eq '0')\r\n{\r\n    & git clean -dxf .\\src\\ .\\bin\\TestDebug\\\r\n    & .\\bin\\Debug\\bin\\xabuild.exe .\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj /t:SignAndroidPackage /bl /noconsolelogger\r\n    $successful = $lastExitCode\r\n}\r\n```\r\n\r\nMerely cleaning stuff and rebuilding over and over would cause the issue\r\nto crop up.\r\n\r\nWhat is also odd about the failure:\r\n- Running the `aapt.exe` command manually after the failure works\r\n- The exit code is 0\r\n- If I change the Aapt task to ignore errors, the APK seems to be valid.\r\nMono.Android-Tests still pass when I deploy and run them.\r\n\r\nSo what I *think* should be done here is to just check for `fakeLogOpen`\r\nin the output, and treat this as a warning. This allows the build to go\r\non, which seems to produce a valid APK. We may not know this is resolved\r\nuntil merged into master and we see a few builds succeed on VSTS."},{"Id":"6867803895","Type":"PullRequestEvent","CreatedAt":"2017-11-17T02:38:06","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1037","RelatedDescription":"Merged pull request \"Unify location with the rest of the Xamarin extensions\" (#1037) at xamarin/xamarin-android","RelatedBody":""},{"Id":"6867219019","Type":"PullRequestEvent","CreatedAt":"2017-11-16T23:20:02","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1038","RelatedDescription":"Opened pull request \"Generate api-*.xml.in on the fly, using class-parse and api-xml-adjuster.\" (#1038) at xamarin/xamarin-android","RelatedBody":"It helps API generator changes more robust by running API generation\r\nconsistently with unit testing."},{"Id":"6866424340","Type":"PullRequestEvent","CreatedAt":"2017-11-16T20:14:10","Actor":"kzu","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1037","RelatedDescription":"Opened pull request \"Unify location with the rest of the Xamarin extensions\" (#1037) at xamarin/xamarin-android","RelatedBody":""},{"Id":"6866379010","Type":"PullRequestEvent","CreatedAt":"2017-11-16T20:04:02","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1031","RelatedDescription":"Merged pull request \"[Tests] Measure test sizes in Release/Aot configuration again\" (#1031) at xamarin/xamarin-android","RelatedBody":"One more fix after the migration of running the apk tests to msbuild\r\n(https://github.com/xamarin/xamarin-android/commit/cdf3bcc11aaf036b68daaec504f6ffa4dbbc120a).\r\n\r\nThe reason of it is that `_AotName` property is not set, when building\r\nthe test. This patch moves the property to `Configuration.props` and\r\nrenames it to `TestsAotName`, so that it is set in the test project.\r\n\r\nI also have to move _RecordApkSizes target to `TestApks.targets` as I\r\nwas experiencing troubles with `AfterTargets` dependency. It looks\r\nlike `xbuild` didn't run it the second time, even when the target was\r\ncalled from project called by MSBuild task.\r\n\r\nSo to overcome this dependency issue, I moved the target to avoid\r\nusing `AfterTargets`. This also means that we can now easily measure\r\nthe sizes of the other tests as well (on demand).\r\n"},{"Id":"6866362294","Type":"PullRequestEvent","CreatedAt":"2017-11-16T20:00:28","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1036","RelatedDescription":"Merged pull request \"[tests] Check for \"ERROR:\" emulator message\" (#1036) at xamarin/xamarin-android","RelatedBody":"Context: https://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1145123&tab=details&_a=summary\r\n\r\nWe want to check for `emulator` errors early, so that we don't have a\r\n\"hung build\" that sticks around until we hit a timeout; see db668ba0.\r\n\r\nA new error condition arose while attempting to run the\r\n`emulator`-based tests on VSTS:\r\n\r\n\t[emulator stdout] emulator: ERROR: This AVD's configuration is missing a kernel file! Please ensure the file \"kernel-ranchu\" is in the same location as your system image.\r\n\t[emulator stdout] emulator: ERROR: ANDROID_SDK_ROOT is undefined\r\n\r\nThese weren't otherwise handled, and thus the error wasn't treated as\r\nan actual error. The result is that *nothing happened*, and the\r\nsubsequent `adb wait-for-device` hung until the build timed out.\r\n\r\nCheck for a message containing `ERROR:` written to stderr, and if such\r\na message is seen, flag it as an error."},{"Id":"6865889789","Type":"PullRequestEvent","CreatedAt":"2017-11-16T18:20:25","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/982","RelatedDescription":"Merged pull request \"No need to parse JavaDoc in class-parse anymore.\" (#982) at xamarin/xamarin-android","RelatedBody":"Use pre-generated parameter names description instead.\r\n\r\nThey can be generated at external/xamarin-android-docimporter-ng/\r\n\r\nSoon we will be able to delete src/Mono.Android/Profiles/api*.xml.in.\r\n\r\nSo far, build-tools/api-xml-adjuster is updated to take these params.txt\r\nand generate api-*.xml.in. It is now done within a few minutes."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6868004993","Type":"PullRequestEvent","CreatedAt":"2017-11-17T03:57:23","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1285","RelatedDescription":"Opened pull request \"Fix various memory leaks in UWP applications\" (#1285) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nCurrently the UWP ListView creates its first set of cells without going through the TemplatedItemsList; because of this, subsequent updates to the data behind the cells causes a second set of cells to be realized; this both doubles the number of cells created and leaks the first set of cells (they can never been garbage collected). This change forces all cell creation to go through the TemplateItemsList to avoid double creation and leaking.\r\n\r\nThis change fixes a bug where switching the application's main page while displaying a modal page leaked the modal page and its contents on Windows. \r\n\r\nThis change fixes a bug where NavigationPageRenderer instances were leaked because event handlers for PageControl were not cleaned up.\r\n\r\nThis change fixes a bug where Page instances were leaked because resource changed event handlers were not cleaned up.\r\n\r\n### Bugs Fixed ###\r\n\r\n- [45722 – Memory leak in Xamarin Forms ListView](https://bugzilla.xamarin.com/show_bug.cgi?id=45722)\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6867428417","Type":"PullRequestEvent","CreatedAt":"2017-11-17T00:25:38","Actor":"WonyoungChoi","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1284","RelatedDescription":"Opened pull request \"[XamlC] Add NETStandard2.0 support to XF.Build.Tasks\" (#1284) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThis is a modification to build the Xamarin.Forms application including xaml files using dotnet-cli (>=.NETCore 2.0).\r\n\r\nPreviously, when trying to build an app with dotnet-cli, the following error occurred.\r\n\r\n> Could not load file or assembly 'Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n\r\nThe reason of this error is that Xamarin.Forms.Build.Tasks.dll was built with NET45 target framework.\r\nFor dotnet-cli, it must be build with NETStandard or NETCoreApp.\r\n\r\nThis PR has following changes.\r\n- Change Xamarin.Forms.Build.Tasks.csproj with new project-system (VS2017)\r\n- Use Mono.Cecil 0.10.0-beta7\r\n- Fix some code of Xamarin.Forms.Build.Tasks to build with netstandard2.0\r\n- Use project-dependency in solution file instead of ProjectReference for Xamarin.Forms.Build.Tasks\r\n- Add netstandard2.0 stuff to Xamarin.Forms.nuspec\r\n\r\nRelated PR: https://github.com/xamarin/Xamarin.Forms/pull/868\r\n\r\n### Bugs Fixed ###\r\n\r\nsee dotnet/cli#5457 (comment) for a repro\r\n\r\n### API Changes ###\r\n\r\nN/A\r\n\r\n### Behavioral Changes ###\r\n\r\nIf a XF app is built with NETStandard 2.0 or a target framework that supports it, Xamarin.Forms.Build.Tasks.dll, built with netstandard2.0, is used.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [X] Rebased on top of master at time of PR\r\n- [X] Changes adhere to coding standard\r\n- [X] Consolidate commits as makes sense\r\n"},{"Id":"6866144907","Type":"PullRequestEvent","CreatedAt":"2017-11-16T19:15:44","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/909","RelatedDescription":"Merged pull request \"[Xaml] decorate TypeConverter for additional check\" (#909) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nCatch error at XamlC step if a property or type has a non-compatible [TypeConverter]\r\n\r\n### Bugs Fixed ###\r\n\r\n- https://bugzilla.xamarin.com/show_bug.cgi?id=55862\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n - public class Xamarin.Forms.Xaml.TypeConversionAttribute\r\n\r\nChanged:\r\n - added [TypeConversion] to our converters\r\n\r\n\r\n### Behavioral Changes ###\r\n\r\na wrongly attributed property will now fail at compile time vs runtime\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"},{"Id":"6864271260","Type":"PullRequestEvent","CreatedAt":"2017-11-16T13:17:54","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1283","RelatedDescription":"Opened pull request \"[Xaml] find BP defined on base types\" (#1283) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nwhen using netstandard, GetFields() differs differently than on other\r\nplatforms, and the public static types aren't returned by default. Pass\r\nsome BindingFlags to get them,\r\n\r\n### Bugs Fixed ###\r\n\r\n/\r\n\r\n### API Changes ###\r\n\r\n/\r\n\r\n### Behavioral Changes ###\r\n\r\n/\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"6864268822","Type":"PullRequestEvent","CreatedAt":"2017-11-16T13:17:20","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1282","RelatedDescription":"Opened pull request \"[C] fix an issue with netstnadard when context type is object\" (#1282) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n[C] fix an issue with netstnadard when context type is object\r\n\r\n### Bugs Fixed ###\r\n\r\n/\r\n\r\n### API Changes ###\r\n\r\n/\r\n\r\n### Behavioral Changes ###\r\n\r\n/\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"},{"Id":"6864265729","Type":"PullRequestEvent","CreatedAt":"2017-11-16T13:16:39","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1281","RelatedDescription":"Opened pull request \"[XamlC] treat netstandard types as mscorlib\" (#1281) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nIf the end user project type differs from Core's type, the compiler can\r\nbe confused while comparing base styles, like System.Double.\r\n\r\nthis fixes that by assuming System.Runtime, mscorlib and netstnadard\r\ntypes are equivalent (because they are)\r\n\r\n### Bugs Fixed ###\r\n\r\n/\r\n\r\n### API Changes ###\r\n\r\n/\r\n\r\n### Behavioral Changes ###\r\n\r\n/\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"},{"Id":"6863744457","Type":"PullRequestEvent","CreatedAt":"2017-11-16T11:13:58","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/909","RelatedDescription":null,"RelatedBody":"### Description of Change ###\r\n\r\nCatch error at XamlC step if a property or type has a non-compatible [TypeConverter]\r\n\r\n### Bugs Fixed ###\r\n\r\n- https://bugzilla.xamarin.com/show_bug.cgi?id=55862\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n - public class Xamarin.Forms.Xaml.TypeConversionAttribute\r\n\r\nChanged:\r\n - added [TypeConversion] to our converters\r\n\r\n\r\n### Behavioral Changes ###\r\n\r\na wrongly attributed property will now fail at compile time vs runtime\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6866801834","Type":"PullRequestEvent","CreatedAt":"2017-11-16T21:38:15","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2974","RelatedDescription":"Merged pull request \"[CoreImage] Update filters for Xcode 9\" (#2974) at xamarin/xamarin-macios","RelatedBody":"- Fixes bug #57350: Review new CoreImage filters added in Xcode 9\n(https://bugzilla.xamarin.com/show_bug.cgi?id=57350).\n- Adds `AVCameraCalibrationData` and `CIBarcodeDescriptor` to `generator-filters`.\n- Fixes `ApiCoreImageFiltersTest`'s `GenerateBinding` to use valid `[CoreImageFilterProperty]`.\n- In `CheckManagedFilters` generate code of SuperClass when detected so it's easier to bind."},{"Id":"6866779105","Type":"PullRequestEvent","CreatedAt":"2017-11-16T21:33:05","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3017","RelatedDescription":"Opened pull request \"[coreimage] Add new Image Dictionary Keys\" (#3017) at xamarin/xamarin-macios","RelatedBody":"- Fixes bug #59296: [coreimage] Some `kCI*`keys are not bound (https://bugzilla.xamarin.com/show_bug.cgi?id=59296)\n- Generate a StrongDictionary for `CIImageInitializationOptions` to avoid manual code.\n- Move `CGImageProperties Properties { get; set; }` to parent type `CIImageInitializationOptions` (avoid 2 strong dictionaries).\n  Reason:\n  Even though the headers give us an indication of which constructors should use some CIImage keys it's hard to apply that to all constructors consistently.\n  We could have 1 strong dictionary per constructor (duplicate members) with just the exact members we know it supports (based on headers) however it's better to have a single strong dictionary and document the options because A might be available only in X today and Y next too next year.\n- Fix `DictionaryContainer`'s `GetStrongDictionary` to return null and not throw if target StrongDictionary is not yet set.\n\nBasically:\n\n``` var options = new CIImageInitializationOptionsWithMetadata ();\n           Assert.That (options.Dictionary.Count, Is.EqualTo (0), \"Count\");\n```\n\nWould throw:\n\n``` System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.\n ----> System.ArgumentNullException : Value cannot be null.\n```\n\n- Add EditorBrowsableState.Advanced to CIImage's NSDictionary .ctor"},{"Id":"6866139474","Type":"PullRequestEvent","CreatedAt":"2017-11-16T19:14:36","Actor":"timrisi","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3012","RelatedDescription":"Closed pull request \"Fix introspection test failures\" (#3012) at xamarin/xamarin-macios","RelatedBody":"Typo ignores are failures if the system is set to English (Canada)"},{"Id":"6865753689","Type":"PullRequestEvent","CreatedAt":"2017-11-16T17:50:44","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3014","RelatedDescription":"Merged pull request \"[xharness] Don't run BCL tests in parallel for Xamarin.Mac.\" (#3014) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"6865744028","Type":"PullRequestEvent","CreatedAt":"2017-11-16T17:48:39","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3015","RelatedDescription":"Merged pull request \"[monotouch-test] Tweak CalendarTest yet again.\" (#3015) at xamarin/xamarin-macios","RelatedBody":"Hopefully third time's the charm...\r\n\r\nDon't do date math (adding hours) to a local datetime, since DST *will* muddy\r\nthe waters and prove that 1=2.\r\n\r\nInstead convert the date we want to calculate on to UTC, which should be DST-agnostic.\r\n\r\nI've tested this by running the test for every hour during the next 10 years,\r\nso that should cover mostly everything (although I'm still waiting for the\r\nDelorean I ordered to be able to test both in the future and the past).\r\n\r\nPrevious attempts:\r\n\r\nhttps://github.com/rolfbjarne/xamarin-macios/commit/0442cdf9c0c4cbb3ae2a0f21125dcc98ae85b648\r\nhttps://github.com/rolfbjarne/xamarin-macios/commit/5caddb35710482574eafd7b9a0cbb8c4aa97d4db\r\n\r\nShould fix https://github.com/xamarin/maccore/issues/573."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"931327778301063168","CreatedAt":"2017-11-17T01:07:00+00:00","UserScreenname":"xamarinhq","Text":"Thanks for joining us for Day 2 of #MSFTConnect! Tune in tomorrow for live online training from @XamarinU.","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":8,"FavoriteCount":2,"RawContent":null},{"Id":"931308149457506305","CreatedAt":"2017-11-16T23:49:00+00:00","UserScreenname":"xamarinhq","Text":"It's the last talk of the day at #MSFTConnect! Join Donovan Brown &amp; Jessica Deen for \"#DevOps for Any Language and… https://t.co/BYNjySPV9Y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":6,"FavoriteCount":8,"RawContent":null},{"Id":"931293552717582336","CreatedAt":"2017-11-16T22:51:00+00:00","UserScreenname":"xamarinhq","Text":"Xamarin's @JamesMontemagno takes the stage with \"#Xamarin: The Future of App Development\" at #MSFTConnect at 3 pm P… https://t.co/pLEDlA2VAK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"931279207916650496","CreatedAt":"2017-11-16T21:54:00+00:00","UserScreenname":"xamarinhq","Text":"Don't touch that browser! You've got a choice coming up—\"#CICD #DevOps Pipeline for Mobile Apps and Services\" with… https://t.co/v6YuQuwoS6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":12,"FavoriteCount":8,"RawContent":null},{"Id":"931263355259621376","CreatedAt":"2017-11-16T20:51:00+00:00","UserScreenname":"xamarinhq","Text":"You don't want to miss this—join us at 1 pm PT / 4 pm ET on the #MSFTConnect live stream to learn how to \"Ship Five… https://t.co/cXLM0ODYH4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":8,"FavoriteCount":3,"RawContent":null},{"Id":"931236175414784003","CreatedAt":"2017-11-16T19:03:00+00:00","UserScreenname":"xamarinhq","Text":"Can't watch #MSFTConnect live? Check out these #Xamarin-focused on demand videos from the event: https://t.co/6pOPUzJTMN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":21,"FavoriteCount":5,"RawContent":null},{"Id":"931225857670156288","CreatedAt":"2017-11-16T18:22:00+00:00","UserScreenname":"xamarinhq","Text":"See \"What's New in #XamarinForms\" with @davidortinau in this on demand video from #MSFTConnect: https://t.co/hSAuXQjcYf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":11,"RawContent":null},{"Id":"931205440263938048","CreatedAt":"2017-11-16T17:00:52+00:00","UserScreenname":"xamarinhq","Text":"Don't miss \"A Day in the Life of a Modern #dotNET Developer\" with Scott Hunter, featuring live Q&amp;A, next up at 12 p… https://t.co/age6LgkvjS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"931189619772805121","CreatedAt":"2017-11-16T15:58:00+00:00","UserScreenname":"xamarinhq","Text":"Day 2 of #MSFTConnect is about to start! Don't know which sessions you should prioritize? Here's our guide to the b… https://t.co/DRguluF5x4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":18,"FavoriteCount":11,"RawContent":null},{"Id":"930920821035601920","CreatedAt":"2017-11-15T22:09:54+00:00","UserScreenname":"xamarinhq","Text":"That's it for Day 1 of #MSFTConnect! Join us again tomorrow for technical deep dives on today's announcements: https://t.co/kdvGKzBVFW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":6,"RawContent":null},{"Id":"930877295233064961","CreatedAt":"2017-11-15T19:16:56+00:00","UserScreenname":"xamarinhq","Text":"Everything #Xamarin developers should know about from #MSFTConnect, from #VSAppCenter to new #VisualStudio tools:… https://t.co/Z9XxAesS3S","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":68,"FavoriteCount":50,"RawContent":null},{"Id":"930875853751373825","CreatedAt":"2017-11-15T19:11:13+00:00","UserScreenname":"xamarinhq","Text":"#VSAppCenter is the next generation of #Xamarin Test Cloud. Learn more: https://t.co/mjIAHM40mM https://t.co/xQR77mRQiA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":45,"RawContent":null},{"Id":"930874776209543169","CreatedAt":"2017-11-15T19:06:56+00:00","UserScreenname":"xamarinhq","Text":"#MSFTConnect has SO MANY amazing sessions from today through Friday! Not sure where to start? Here's our guide to C… https://t.co/2HHFUNEayR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":7,"RawContent":null},{"Id":"930868754552180737","CreatedAt":"2017-11-15T18:43:00+00:00","UserScreenname":"xamarinhq","Text":"Don't miss #Xamarin's @NatFriedman showing you how to build and ship apps faster with C# and #VSAppCenter, live fro… https://t.co/6yKsZl32lU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":12,"RawContent":null},{"Id":"930810377390002177","CreatedAt":"2017-11-15T14:51:02+00:00","UserScreenname":"xamarinhq","Text":"It's time! Join us live online for the FREE #MSFTConnect developer conference, starting at 7 am PT / 10 am ET / 3 p… https://t.co/fOdhC65nln","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":20,"RawContent":null},{"Id":"930533047761502209","CreatedAt":"2017-11-14T20:29:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build better games using #Unity3D and Microsoft #Azure in this previously recorded webinar:… https://t.co/wmTSoKZrLu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":20,"RawContent":null}]}},"RunOn":"2017-11-17T05:30:40.3753999Z","RunDurationInMilliseconds":4151}