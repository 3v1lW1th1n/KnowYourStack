{"Data":{"GitHub":{"Issues":[{"Id":"450569299","IsPullRequest":false,"CreatedAt":"2019-05-31T01:03:59","Actor":"CESARDELATORRE","Number":"3798","RawContent":null,"Title":"Release daily-drop preview packages on MyGet or any public feed","State":"open","Body":"I think it would be good to release the daily-drop preview packages on MyGet or any public feed.\r\n\r\nThoughts?","Url":"https://github.com/dotnet/machinelearning/issues/3798","RelatedDescription":"Open issue \"Release daily-drop preview packages on MyGet or any public feed\" (#3798)"},{"Id":"450553933","IsPullRequest":false,"CreatedAt":"2019-05-30T23:47:41","Actor":"ganik","Number":"3797","RawContent":null,"Title":"TextFeaturizer to save specific features","State":"open","Body":"User scenario:\r\nTrained learner on top of TextFeaturizer.\r\nLearner uses only several ngram features.\r\nStill the combined model file is huge due to the fact the TextFeaturizer save dictionary counts for all ngrams extracted. \r\n\r\nFeature request: add ability for TextFeaturizer to save its model with specified features / ngrams only","Url":"https://github.com/dotnet/machinelearning/issues/3797","RelatedDescription":"Open issue \"TextFeaturizer to save specific features\" (#3797)"},{"Id":"450542033","IsPullRequest":true,"CreatedAt":"2019-05-30T22:58:40","Actor":"yaeldekel","Number":"3796","RawContent":null,"Title":"Change ensembles trainer to work with ITrainerEstimators instead of ITrainers","State":"open","Body":"This is needed for using ensembles with non-default values for the sub-trainers.\r\nFixes #3709 .\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3796","RelatedDescription":"Open PR \"Change ensembles trainer to work with ITrainerEstimators instead of ITrainers\" (#3796)"},{"Id":"449533150","IsPullRequest":true,"CreatedAt":"2019-05-30T22:02:34","Actor":"pkumar07","Number":"3785","RawContent":null,"Title":"Add AVX and FMA intrinsics in Factorization Machine","State":"closed","Body":"Added AVX and FMA C++ intrinsics in factorizationmachinenative.dll which currently implements C++ SSE code as suggested in #3000.","Url":"https://github.com/dotnet/machinelearning/pull/3785","RelatedDescription":"Closed or merged PR \"Add AVX and FMA intrinsics in Factorization Machine\" (#3785)"},{"Id":"450522222","IsPullRequest":false,"CreatedAt":"2019-05-30T21:50:42","Actor":"CESARDELATORRE","Number":"3795","RawContent":null,"Title":"Alternate Fit() with no IDataView parameter for cases where data is not needed (i.e. Scoring a Tensorflow model)","State":"open","Body":"The following is a typical case when you prepare a pipeline only for scoring with a TensorFlow model:\r\n\r\n```\r\nprivate ITransformer SetupMlnetModel(string imagesFolderPath, string tensorFlowModelFilePath)\r\n{\r\n    var pipeline = _mlContext.Transforms.LoadImages(outputColumnName: TensorFlowModelSettings.inputTensorName, imageFolder: imagesFolderPath, inputColumnName: nameof(ImageInputData.ImagePath))\r\n        .Append(_mlContext.Transforms.ResizeImages(outputColumnName: TensorFlowModelSettings.inputTensorName, imageWidth: ImageSettings.imageWidth, imageHeight: ImageSettings.imageHeight, inputColumnName: TensorFlowModelSettings.inputTensorName))\r\n        .Append(_mlContext.Transforms.ExtractPixels(outputColumnName: TensorFlowModelSettings.inputTensorName, interleavePixelColors: ImageSettings.channelsLast, offsetImage: ImageSettings.mean))\r\n        .Append(_mlContext.Model.LoadTensorFlowModel(tensorFlowModelFilePath).\r\n        ScoreTensorFlowModel(outputColumnNames: new[] { \"loss\" },\r\n                            inputColumnNames: new[] { \"Placeholder\" }, addBatchDimensionInput: false));\r\n\r\n    ITransformer mlModel = pipeline.Fit(CreateEmptyDataView());\r\n    return mlModel;\r\n}\r\nprivate IDataView CreateEmptyDataView()\r\n{\r\n    //Create empty DataView. We just need the schema to call fit()\r\n    List<ImageInputData> list = new List<ImageInputData>();\r\n    list.Add(new ImageInputData() { ImagePath = \"\" });\r\n    IEnumerable<ImageInputData> enumerableData = list;\r\n\r\n    var dv = _mlContext.Data.LoadFromEnumerable<ImageInputData>(list);\r\n    return dv;\r\n}\r\n```\r\n\r\nThe issue with that API is that Fit(IDataView idv) always requires an IDataView as parameter, but in this case, data is not needed, it just needs the IDataView schema. \r\n\r\nCurrently you just create an \"Empty DataView\" and from there, the schema will be taken. \r\nThis seems like a workaround but it doesn't make sense for the user to create an empty structure/DataView:\r\n\r\nPossible proposal:\r\n\r\nAllow a parameter-less for the \"Fit()\" method and by simply providing as a generic what's the data type to use as the base to generate the IDataView schema, such as:\r\n\r\n` .Fit<ImageInputData>();`\r\n\r\nBasically, internally it would run the code I have in the `CreateEmptyDataView()` method. \r\n\r\nAdditional solutions or thoughts to improve this API?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3795","RelatedDescription":"Open issue \"Alternate Fit() with no IDataView parameter for cases where data is not needed (i.e. Scoring a Tensorflow model)\" (#3795)"},{"Id":"450467731","IsPullRequest":true,"CreatedAt":"2019-05-30T19:26:32","Actor":"daholste","Number":"3794","RawContent":null,"Title":"[AutoML] Cross validation fixes; validate empty training / validation input data","State":"open","Body":"Updates --\r\n- In the AutoML API -- when calling the `Execute` method signature that contains both training & validation data, if validation data is null, route to the `Execute` method that doesn't contain validation data / that splits the data in a train/test or cross-val manner depending on the # of rows.\r\n- Don't crash if some cross val splits have empty train/test data. As long as not all splits have empty train or test data, proceed only using splits w/ non-empty train & test sets. Explicitly throw an exception if all splits either have empty train or test sets.\r\n- Validate input training & validation data (if explicitly provided) are not empty","Url":"https://github.com/dotnet/machinelearning/pull/3794","RelatedDescription":"Open PR \"[AutoML] Cross validation fixes; validate empty training / validation input data\" (#3794)"},{"Id":"450432101","IsPullRequest":true,"CreatedAt":"2019-05-30T17:59:17","Actor":"shmoradims","Number":"3793","RawContent":null,"Title":"Added samples for loading text","State":"open","Body":"Fix #2457 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/3793","RelatedDescription":"Open PR \"Added samples for loading text\" (#3793)"},{"Id":"450411774","IsPullRequest":false,"CreatedAt":"2019-05-30T17:10:00","Actor":"justinormont","Number":"3792","RawContent":null,"Title":"CLI codegen fails with spaces in project name","State":"open","Body":"The AutoML CodeGen can't handle spaces in the project name, or it produces a corrupt .cs file.\r\n\r\nRepro:\r\n`mlnet auto-train --dataset analcatdata_germangss.csv  --ml-task multiclass-classification --label-column-name \"Political_system\" --max-exploration-time 60 --name \"Analyzing Categorical Data\" --output-path /tmp/blah/`\r\n\r\nNote the spaces in the project name: \r\n`--name \"Analyzing Categorical Data\" `\r\n\r\nDataset: \r\nhttps://www.openml.org/data/get_csv/53559/analcatdata_germangss.arff\r\n\r\nThis produces corrupted .cs files with replicas of the project name.\r\n\r\nFor example, `Program.cs`:\r\n```c#\r\nusing System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing Microsoft.ML;\r\nusing Analyzing Categorical Data.Model.DataModels;\r\n\r\nnamespace Analyzing Categorical Data.ConsoleApp\r\n{\r\n    class Program\r\n{\r\n```\r\n\r\nYou'll note `Analyzing Categorical Data` is replicated into `Program.cs` with the spaces intact. We need to sanitize the project name to fit namespace/variable name requirements.\r\n\r\nCurrently we use a simple sanitization on the column names:\r\nhttps://github.com/dotnet/machinelearning/blob/fac974daaec029b732802c1d0802818a27ab37be/src/mlnet/Utilities/Utils.cs#L47-L50\r\n\r\nWe may be able to reuse that sanitizer.","Url":"https://github.com/dotnet/machinelearning/issues/3792","RelatedDescription":"Open issue \"CLI codegen fails with spaces in project name\" (#3792)"},{"Id":"450377894","IsPullRequest":false,"CreatedAt":"2019-05-30T15:55:18","Actor":"huy302","Number":"3791","RawContent":null,"Title":"What data to be fed into PermutationFeatureImportance?","State":"open","Body":"In general I know that the data should be transformed by the trained model before being fed into PermutationFeatureImportance, but should it be transformed training data or test data, assuming I have both? and why?\r\nI've been reading documents and related issues but couldn't find the answer. Thanks","Url":"https://github.com/dotnet/machinelearning/issues/3791","RelatedDescription":"Open issue \"What data to be fed into PermutationFeatureImportance?\" (#3791)"},{"Id":"450090276","IsPullRequest":false,"CreatedAt":"2019-05-30T01:42:45","Actor":"CESARDELATORRE","Number":"3790","RawContent":null,"Title":"[Bug/issue] Prediction Engine using TensorFlow model doesn't close the used image files?","State":"open","Body":"Looks like when I provide an image file to the prediction engine which is using a TensorFlow model, after predicting and getting the result, it never closes the image file and you cannot even delete those image files (in my case, those image files are temp files that I need to delete from the code)\r\n\r\nOnly when the app using the prediction engine is finished, then the image files are closed and I can delete them (manually). But that is not the desired behavior. \r\n\r\nHere's an app with a repro:\r\nhttps://github.com/CESARDELATORRE/TensorFlowImageClassificationWebApp/tree/master/WebApp\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3790","RelatedDescription":"Open issue \"[Bug/issue] Prediction Engine using TensorFlow model doesn't close the used image files?\" (#3790)"},{"Id":"450076677","IsPullRequest":true,"CreatedAt":"2019-05-30T00:32:38","Actor":"daholste","Number":"3789","RawContent":null,"Title":"[AutoML] CLI telemetry rev","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/3789","RelatedDescription":"Open PR \"[AutoML] CLI telemetry rev\" (#3789)"},{"Id":"450063264","IsPullRequest":true,"CreatedAt":"2019-05-29T23:29:34","Actor":"artidoro","Number":"3788","RawContent":null,"Title":"Fix TextLoader constructor and add exception message","State":"open","Body":"Fixes #3705.\r\n\r\nIn issue #3705 it appeared that the class defining the data was required to have both get and **set** auto-properties. In `TextLoader` however, we don't use the set property, so I removed that from the conditions.\r\n\r\nSecond, I added an exception message in case no public readable property or field is found in the class defining the data and no dataSample is passed to the constructor.\r\n\r\nI added a related test which tests the various scenarios.\r\n ","Url":"https://github.com/dotnet/machinelearning/pull/3788","RelatedDescription":"Open PR \"Fix TextLoader constructor and add exception message\" (#3788)"},{"Id":"449810140","IsPullRequest":false,"CreatedAt":"2019-05-29T13:30:57","Actor":"PeterPann23","Number":"3787","RawContent":null,"Title":"Prediction multiclass only transmit score Label and label index are \"\" and 0","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: \r\nWindows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n.Net Core 3.0, Microsoft.ML 1.0.0\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI created a pipline like so:\r\n```\r\nvar sdcaPipeline = mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: DefaultColumnNames.KeyColumn, inputColumnName: DefaultColumnNames.Label,keyOrdinality:ValueToKeyMappingEstimator.KeyOrdinality.ByOccurrence)\r\n    .Append(mlContext.Transforms.Concatenate(DefaultColumnNames.RawFeatures, MSBar2.GetColumnNames(DataKind.Single)))\r\n    .Append(mlContext.Transforms.NormalizeMinMax(outputColumnName: DefaultColumnNames.Features,inputColumnName:DefaultColumnNames.RawFeatures))\r\n    .AppendCacheCheckpoint(mlContext)\r\n    .Append(mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(labelColumnName : DefaultColumnNames.KeyColumn ,featureColumnName: DefaultColumnNames.Features))\r\n    .Append(mlContext.Transforms.CopyColumns(inputColumnName: KeyColumn, outputColumnName: DefaultColumnNames.PredictedLabelIndex))\r\n    .Append(mlContext.Transforms.Conversion.MapKeyToValue(inputColumnName: DefaultColumnNames.KeyColumn ,outputColumnName: DefaultColumnNames.PredictedLabel));                      \r\n\r\nvar model=  sdcaPipeline.Fit(trainingDataView);\r\n```\r\n\r\n- **What happened?**\r\nWhen performing a single prediction the score property is placed. However the DefaultColumnNames.PredictedLabel and DefaultColumnNames.PredictedLabelIndex are always populated with the .net default values of empty string and 0\r\n\r\n- **What did you expect?**\r\nI'd expect the values to be mapped as it is configured in the pipeline\r\n\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3787","RelatedDescription":"Open issue \"Prediction multiclass only transmit score Label and label index are \"\" and 0\" (#3787)"},{"Id":"449804898","IsPullRequest":false,"CreatedAt":"2019-05-29T13:21:01","Actor":"sharwell","Number":"3786","RawContent":null,"Title":"Replace LangVersion=latest with a specific version","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/9a80b78d7aba8463859975119e697afb72f91c09/Directory.Build.props#L94\r\n\r\nThis property means \"vary the build environment for each individual developer, and break teams when possible\". It should be avoided in all circumstances outside of the dotnet/roslyn test suite. Currently this project appears to use C# 7.3, so I would recommend replacing the current value with:\r\n\r\n```xml\r\n<LangVersion>7.3</LangVersion>\r\n```\r\n\r\n📝 While the compile-time behavior can be locked to a specific version by referencing the Microsoft.Net.Compilers NuGet package, the IDE features triggered by specific language versions will not be able to correctly determine the effective language version in all cases and the experience will still vary across users. Using a specific version resolves all issues and ensures the experience is consistent.","Url":"https://github.com/dotnet/machinelearning/issues/3786","RelatedDescription":"Open issue \"Replace LangVersion=latest with a specific version\" (#3786)"},{"Id":"449300715","IsPullRequest":false,"CreatedAt":"2019-05-28T23:14:00","Actor":"nfnpmc","Number":"3784","RawContent":null,"Title":"Bitmap data","State":"closed","Body":"What is (I assume a variable) Enumerable and how do you get it from a Bitmap or Image, neither of which is Enumerable? Two loops to examine the pixels and put it into a linear array?\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 8b9c0132-7901-8114-b8bc-faa09ad74797\n* Version Independent ID: 8274abb2-6952-674b-e8bc-1e314aeee4cc\n* Content: [TensorFlowModel.ScoreTensorFlowModel Method (Microsoft.ML.Transforms)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.tensorflowmodel.scoretensorflowmodel?view=ml-dotnet-preview#feedback)\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms/TensorFlowModel.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms/TensorFlowModel.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/3784","RelatedDescription":"Closed issue \"Bitmap data\" (#3784)"},{"Id":"447896097","IsPullRequest":true,"CreatedAt":"2019-05-28T05:30:54","Actor":"yaeldekel","Number":"3772","RawContent":null,"Title":"Fix the user name in LoadableClassAttribute of VectorToImageTransformer","State":"closed","Body":"Update user name in loadable class attribute to the right name.","Url":"https://github.com/dotnet/machinelearning/pull/3772","RelatedDescription":"Closed or merged PR \"Fix the user name in LoadableClassAttribute of VectorToImageTransformer\" (#3772)"},{"Id":"448327873","IsPullRequest":true,"CreatedAt":"2019-05-28T04:29:12","Actor":"yaeldekel","Number":"3774","RawContent":null,"Title":"Add load names to Platt calibrator","State":"closed","Body":"The load names of the `PlattCalibratorTrainerFactory` need to match those of the `LoadableClassAttribute`.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3774","RelatedDescription":"Closed or merged PR \"Add load names to Platt calibrator\" (#3774)"},{"Id":"448787407","IsPullRequest":false,"CreatedAt":"2019-05-27T10:41:01","Actor":"PeterPann23","Number":"3783","RawContent":null,"Title":"[AutoML]  feature request Include PFI statistics","State":"open","Body":"Users of AutoML would probably appreciate having templating injected PFI for the \"best\" model as described in the online [documentation](https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/explain-machine-learning-model-permutation-feature-importance-ml-net)\r\n\r\nI guess one could add it after the training dialogue as well. Nice for those that like to spin the data. perhaps start training again after the user excludes some of the \"noisy features\"","Url":"https://github.com/dotnet/machinelearning/issues/3783","RelatedDescription":"Open issue \"[AutoML]  feature request Include PFI statistics\" (#3783)"},{"Id":"448720019","IsPullRequest":false,"CreatedAt":"2019-05-27T09:32:09","Actor":"constructor-igor","Number":"3781","RawContent":null,"Title":"Error message 'Could not find feature column' in Fit() method","State":"closed","Body":"### System information\r\n\r\n- **Windows7x64**:\r\n- **.NET Version 2.1.502**: \r\n\r\n### Issue\r\n\r\n- I try to create my first sample of Microsoft.ML and my program fails with message 'Could not find feature column 'X'', but type contains the field.\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/1849690/58404863-d03e1c00-806e-11e9-9845-2e43e2fcbf1e.png)\r\n\r\n\r\n### Source code / logs\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Numerics;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Trainers;\r\n\r\nnamespace ML.NET\r\n{\r\n    public class FormulaData{\r\n        [ColumnName(\"Label\")]\r\n        public float Y;\r\n        [ColumnName(\"Features\")]\r\n        public float X;\r\n        public FormulaData(double x, double y){\r\n            X = Convert.ToSingle(x);\r\n            Y = Convert.ToSingle(y);\r\n        }\r\n    }\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            List<FormulaData> pointsValues = Enumerable\r\n                .Range(-1, 8)\r\n                .Select(value => {return new FormulaData(value, value*2-1);})\r\n                .ToList();\r\n\r\n            // Create MLContext\r\n            var mlContext = new MLContext(1);\r\n\r\n            // Load Data\r\n            IDataView data = mlContext.Data.LoadFromEnumerable<FormulaData>(pointsValues);\r\n\r\n            DataOperationsCatalog.TrainTestData dataSplit = mlContext.Data.TrainTestSplit(data, testFraction: 0.2);\r\n            IDataView trainData = dataSplit.TrainSet;\r\n            IDataView testData = dataSplit.TestSet;\r\n\r\n            // Define trainer options.\r\n            var options = new SdcaRegressionTrainer.Options\r\n            {\r\n                LabelColumnName = nameof(FormulaData.Y),\r\n                FeatureColumnName = nameof(FormulaData.X),\r\n                // Make the convergence tolerance tighter. It effectively leads to more training iterations.\r\n                ConvergenceTolerance = 0.02f,\r\n                // Increase the maximum number of passes over training data. Similar to ConvergenceTolerance,\r\n                // this value specifics the hard iteration limit on the training algorithm.\r\n                MaximumNumberOfIterations = 30,\r\n                // Increase learning rate for bias.\r\n                BiasLearningRate = 0.1f            \r\n            };\r\n\r\n            // Define StochasticDualCoodrinateAscent regression algorithm estimator\r\n            var sdcaEstimator = mlContext.Regression.Trainers.Sdca(options);\r\n\r\n            // Build machine learning model\r\n            var trainedModel = sdcaEstimator.Fit(trainData);\r\n\r\n            // Use trained model to make inferences on test data\r\n            IDataView testDataPredictions = trainedModel.Transform(testData);\r\n\r\n            // Extract model metrics and get RSquared\r\n            RegressionMetrics trainedModelMetrics = mlContext.Regression.Evaluate(testDataPredictions);\r\n            double rSquared = trainedModelMetrics.RSquared;\r\n\r\n            Console.WriteLine($\"rSquared: {rSquared}\");\r\n        }\r\n    }\r\n}\r\n\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3781","RelatedDescription":"Closed issue \"Error message 'Could not find feature column' in Fit() method\" (#3781)"},{"Id":"448743119","IsPullRequest":false,"CreatedAt":"2019-05-27T08:58:43","Actor":"PeterPann23","Number":"3782","RawContent":null,"Title":"Cookbook could use a sample of tweeking schema for training","State":"open","Body":"At the moment the [cook book](https://github.com/dotnet/machinelearning/blob/master/docs/code/MlNetCookBook.md) is the best kick starter for using the model and explains the getting started concepts of the API. \r\n\r\nMissing though I feel is how to manipulate the pipeline when it comes to adding bias and or techniques for dealing with under and overfitting. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3782","RelatedDescription":"Open issue \"Cookbook could use a sample of tweeking schema for training\" (#3782)"},{"Id":"448621429","IsPullRequest":false,"CreatedAt":"2019-05-27T00:09:35","Actor":"Ashish225","Number":"3780","RawContent":null,"Title":"Bias value gets changed every run at 100th place","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 4.6.1\r\n\r\n### Issue\r\n\r\n- **What did you do?** I run sample code on given document (Using full data as Traning data)\r\n\r\n- **What happened?** Bias value gets changed every run at 100th place\r\n1st try result -\r\n2nd try result -\r\n3rd try result -\r\n\r\n- **What did you expect?**\r\nSame value, because of using same sample data at every run.\r\n\r\n### Source code / logs\r\nSample code I tried - https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/train-machine-learning-model-ml-net\r\n\r\n`HousingData[] housingData = new HousingData[]\r\n            {\r\n                new HousingData\r\n                {\r\n                    Size = 600f,\r\n                    HistoricalPrices = new float[] { 100000f ,125000f ,122000f },\r\n                    CurrentPrice = 170000f\r\n                },\r\n                new HousingData\r\n                {\r\n                    Size = 1000f,\r\n                    HistoricalPrices = new float[] { 200000f, 250000f, 230000f },\r\n                    CurrentPrice = 225000f\r\n                },\r\n                new HousingData\r\n                {\r\n                    Size = 1000f,\r\n                    HistoricalPrices = new float[] { 126000f, 130000f, 200000f },\r\n                    CurrentPrice = 195000f\r\n                },\r\n                new HousingData\r\n                {\r\n                    Size = 850f,\r\n                    HistoricalPrices = new float[] { 150000f,175000f,210000f },\r\n                    CurrentPrice = 205000f\r\n                },\r\n                new HousingData\r\n                {\r\n                    Size = 900f,\r\n                    HistoricalPrices = new float[] { 155000f, 190000f, 220000f },\r\n                    CurrentPrice = 210000f\r\n                },\r\n                new HousingData\r\n                {\r\n                    Size = 550f,\r\n                    HistoricalPrices = new float[] { 99000f, 98000f, 130000f },\r\n                    CurrentPrice = 180000f\r\n                }\r\n            };\r\n\r\n            MLContext mlContext = new MLContext();\r\n            IDataView trainingData = mlContext.Data.LoadFromEnumerable(housingData);\r\n\r\n            // Define Data Prep Estimator\r\n            // 1. Concatenate Size and Historical into a single feature vector output to a new column called Features\r\n            // 2. Normalize Features vector\r\n            IEstimator<ITransformer> dataPrepEstimator =\r\n                mlContext.Transforms.Concatenate(\"Features\", \"Size\", \"HistoricalPrices\")\r\n                    .Append(mlContext.Transforms.NormalizeMinMax(\"Features\"));\r\n\r\n            // Create data prep transformer\r\n            ITransformer dataPrepTransformer = dataPrepEstimator.Fit(trainingData);\r\n\r\n            // Apply tranforms to training data\r\n            IDataView transformedTrainingData = dataPrepTransformer.Transform(trainingData);\r\n\r\n            var UserDefinedColumnSdcaEstimator = mlContext.Regression.Trainers.Sdca(labelColumnName: \"CurrentPrice\", featureColumnName: \"Features\");\r\n            // Define StochasticDualCoodrinateAscent regression algorithm estimator\r\n            var sdcaEstimator = mlContext.Regression.Trainers.Sdca();\r\n\r\n            // Build machine learning model\r\n            var trainedModel = sdcaEstimator.Fit(transformedTrainingData);\r\n\r\n            var trainedModelParameters = trainedModel.Model as LinearRegressionModelParameters;\r\n            var bias = trainedModelParameters.Bias;`\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3780","RelatedDescription":"Open issue \"Bias value gets changed every run at 100th place\" (#3780)"},{"Id":"448599254","IsPullRequest":false,"CreatedAt":"2019-05-26T19:40:56","Actor":"daholste","Number":"3779","RawContent":null,"Title":"[AutoML] Add dataset statistics that indicate whether or not a shuffle transform could be helpful","State":"open","Body":"Thanks @justinormont for pointing this out\r\n\r\nThanks also for brainstorming that a snazzy way to do this could be to append row #s from the original dataset to the reservoir sample from https://github.com/dotnet/machinelearning/issues/3778, and then calculate correlation between row # and label","Url":"https://github.com/dotnet/machinelearning/issues/3779","RelatedDescription":"Open issue \"[AutoML] Add dataset statistics that indicate whether or not a shuffle transform could be helpful\" (#3779)"},{"Id":"448598514","IsPullRequest":false,"CreatedAt":"2019-05-26T19:31:47","Actor":"daholste","Number":"3778","RawContent":null,"Title":"[AutoML] Reservoir sample dataset statistics","State":"open","Body":"Currently dataset statistics within AutoML are calculated from the first 1,000 rows of a dataset. Instead, we should be calculating statistics from a random sample of 1,000 rows. (First 1,000 rows could be biased if they are sorted by label, any other column, time of collection, etc.) We can use reservoir sampling to obtain a random sample of a fixed size in a single pass over the dataset","Url":"https://github.com/dotnet/machinelearning/issues/3778","RelatedDescription":"Open issue \"[AutoML] Reservoir sample dataset statistics\" (#3778)"},{"Id":"448596499","IsPullRequest":true,"CreatedAt":"2019-05-26T19:06:42","Actor":"daholste","Number":"3777","RawContent":null,"Title":"[AutoML] Enhance calculated dataset statistics; expose dataset statistics to CLI","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/3777","RelatedDescription":"Open PR \"[AutoML] Enhance calculated dataset statistics; expose dataset statistics to CLI\" (#3777)"},{"Id":"448501311","IsPullRequest":true,"CreatedAt":"2019-05-25T20:47:57","Actor":"daholste","Number":"3776","RawContent":null,"Title":"[AutoML] Reservoir sample dataset statistics","State":"open","Body":"Closes #3778","Url":"https://github.com/dotnet/machinelearning/pull/3776","RelatedDescription":"Open PR \"[AutoML] Reservoir sample dataset statistics\" (#3776)"},{"Id":"448402582","IsPullRequest":false,"CreatedAt":"2019-05-25T02:18:07","Actor":"seabluescn","Number":"3775","RawContent":null,"Title":"An Exception about using CustomMappingFactory","State":"open","Body":"Hello there,\r\nI am learning about CustomMappingFactory, I found the following code: \r\nmachinelearning/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/CustomMappingSaveAndLoad.cs\r\nThis code runs normally, but if I create a new MLContext before loading the model (line 36), as follows: \r\n\r\nmlContext = new MLContext();\r\nvar loadedTransform = mlContext.Model.Load(\"customTransform.zip\", out var inputSchema);\r\n\r\nThen the system will report an error: \r\nInvalidOperationException: Unable to locate an extension for the contract 'IsUnderThirty'. Ensure you have called ComponentCatalog.RegisterAssembly with the Assembly that contains a class decorated with a 'Microsoft.ML.Transforms.CustomMappingFactoryAttributeAttribute'.\r\n\r\nI think creating a new MLContext before loading the model should be a necessary operation. Is this a bug?","Url":"https://github.com/dotnet/machinelearning/issues/3775","RelatedDescription":"Open issue \"An Exception about using CustomMappingFactory\" (#3775)"},{"Id":"448145353","IsPullRequest":false,"CreatedAt":"2019-05-24T12:30:37","Actor":"drake7707","Number":"3773","RawContent":null,"Title":"Incorrect metrics when the order of labels do not correspond to the indices in multiclassification","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**:  .NET Core 2.2, ML.1.0.0\r\n\r\n### Issue\r\n\r\n- **What did you do?** Train a trainingset with LightGbm and then evaluate a test set\r\n- **What happened?** The printed metrics are incorrect if the labels are not ordered from 0 -> n\r\n- **What did you expect?** A correct confusion matrix and LogLoss, ... metrics\r\n\r\nConfusion matrix when I add the labels ascending (0 -> n)  of the samples (e.g 0,1,2,3,4,0,1,2,3,4,...). This is the correct evaluation.\r\n```\r\n          ||========================================================================================\r\nPREDICTED ||     0 |     1 |     2 |     3 |     4 |     5 |     6 |     7 |     8 |     9 |    10 | Recall\r\nTRUTH     ||========================================================================================\r\n        0 ||    58 |     0 |     1 |    19 |     0 |     0 |     1 |     1 |     2 |     0 |     2 | 0,6905\r\n        1 ||     0 |    79 |     0 |     0 |     0 |     5 |     0 |     0 |     0 |     0 |     0 | 0,9405\r\n        2 ||     0 |     0 |    79 |     3 |     0 |     0 |     0 |     0 |     2 |     0 |     0 | 0,9405\r\n        3 ||     0 |     0 |     0 |    84 |     0 |     0 |     0 |     0 |     0 |     0 |     0 | 1,0000\r\n        4 ||     0 |     0 |     0 |     0 |    81 |     0 |     0 |     0 |     3 |     0 |     0 | 0,9643\r\n        5 ||     0 |     8 |     0 |     0 |     0 |    71 |     5 |     0 |     0 |     0 |     0 | 0,8452\r\n        6 ||     0 |     0 |     0 |     0 |     0 |     0 |    84 |     0 |     0 |     0 |     0 | 1,0000\r\n        7 ||     0 |     0 |     0 |     0 |     0 |     2 |     0 |    82 |     0 |     0 |     0 | 0,9762\r\n        8 ||     0 |     0 |     0 |     8 |     0 |     0 |     0 |     1 |    72 |     0 |     3 | 0,8571\r\n        9 ||     0 |     0 |     0 |     0 |     0 |     0 |     0 |     0 |     0 |    84 |     0 | 1,0000\r\n       10 ||     0 |     0 |     0 |     0 |     0 |     2 |     1 |     0 |     0 |     0 |    81 | 0,9643\r\n          ||========================================================================================\r\nPrecision ||1,0000 |0,9080 |0,9875 |0,7368 |1,0000 |0,8875 |0,9231 |0,9762 |0,9114 |1,0000 |0,9419 |\r\n\r\n************************************************************\r\n```\r\nNow when I do OrderByDescending to reverse the labels and run it again, I get:\r\n\r\nConfusion matrix when I reverse the labels (n -> 0)  of the samples (e.g 4,3,2,1,0,4,3,2,1,0,...)\r\n\r\n```\r\n          ||========================================================================================\r\nPREDICTED ||     0 |     1 |     2 |     3 |     4 |     5 |     6 |     7 |     8 |     9 |    10 | Recall\r\nTRUTH     ||========================================================================================\r\n        0 ||     3 |     0 |     3 |     1 |     0 |     6 |     0 |    14 |     0 |     0 |    57 | 0,0357\r\n        1 ||     0 |     0 |     0 |     0 |     0 |     2 |     0 |     0 |     0 |    82 |     0 | 0,0000\r\n        2 ||     0 |     0 |     3 |     0 |     0 |     0 |     0 |     8 |    73 |     0 |     0 | 0,0357\r\n        3 ||     0 |     0 |     0 |     0 |     0 |     0 |     0 |    84 |     0 |     0 |     0 | 0,0000\r\n        4 ||     0 |     0 |     2 |     0 |     0 |     0 |    82 |     0 |     0 |     0 |     0 | 0,0000\r\n        5 ||     0 |     0 |     0 |     0 |     3 |    74 |     0 |     0 |     0 |     7 |     0 | 0,8810\r\n        6 ||     0 |     0 |     0 |     0 |    83 |     0 |     0 |     0 |     0 |     0 |     1 | 0,0000\r\n        7 ||     0 |     0 |     0 |    84 |     0 |     0 |     0 |     0 |     0 |     0 |     0 | 0,0000\r\n        8 ||     2 |     0 |    76 |     0 |     0 |     0 |     0 |     6 |     0 |     0 |     0 | 0,0000\r\n        9 ||     0 |    84 |     0 |     0 |     0 |     0 |     0 |     0 |     0 |     0 |     0 | 0,0000\r\n       10 ||    84 |     0 |     0 |     0 |     0 |     0 |     0 |     0 |     0 |     0 |     0 | 0,0000\r\n          ||========================================================================================\r\nPrecision ||0,0337 |0,0000 |0,0357 |0,0000 |0,0000 |0,9024 |0,0000 |0,0000 |0,0000 |0,0000 |0,0000 |\r\n```\r\n\r\nI think there is an expectation somewhere that the label == the label index.\r\n\r\n### Source code / logs\r\n```\r\n            var trainingDataView = mlContext.Data.LoadFromEnumerable(trainingDataArray, schemaDef);\r\n            var testDataView = mlContext.Data.LoadFromEnumerable(testDataArray, schemaDef);\r\n\r\n            var featureNames = typeof(RecordFeatures).GetProperties().Where(p => p.Name != nameof(RecordFeatures.Label)).Select(p => p.Name).ToArray();\r\n\r\n            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: \"KeyColumn\", inputColumnName: nameof(RecordFeatures.Label))\r\n                                                                       .Append(mlContext.Transforms.Concatenate(\"Features\", featureNames))\r\n                                                                       .AppendCacheCheckpoint(mlContext);\r\n\r\n            var trainer = mlContext.MulticlassClassification.Trainers.LightGbm(labelColumnName: \"KeyColumn\", featureColumnName: \"Features\");\r\n          \r\n            var trainingPipeline = dataProcessPipeline.Append(trainer);\r\n\r\n            Console.WriteLine(\"=============== Training the model ===============\");\r\n            var trainedModel = trainingPipeline.Fit(trainingDataView);\r\n\r\n            Console.WriteLine(\"===== Evaluating Model's accuracy with Test data =====\");\r\n            var predictions = trainedModel.Transform(testDataView);\r\n            var metrics = mlContext.MulticlassClassification.Evaluate(predictions, \"Label\", \"Score\");\r\n\r\n            PrintMultiClassClassificationMetrics(trainer.ToString(), metrics);\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3773","RelatedDescription":"Open issue \"Incorrect metrics when the order of labels do not correspond to the indices in multiclassification\" (#3773)"},{"Id":"447665443","IsPullRequest":false,"CreatedAt":"2019-05-23T13:32:42","Actor":"sharpwood","Number":"3771","RawContent":null,"Title":"Are there any algorithms that are independent of native libraries and can run in xamarin forms?","State":"open","Body":"Are there any algorithms that are independent of native libraries and can run in xamarin forms?","Url":"https://github.com/dotnet/machinelearning/issues/3771","RelatedDescription":"Open issue \"Are there any algorithms that are independent of native libraries and can run in xamarin forms?\" (#3771)"},{"Id":"447593748","IsPullRequest":false,"CreatedAt":"2019-05-23T11:12:23","Actor":"PeterPann23","Number":"3770","RawContent":null,"Title":"AutoML feature request for TensorFlow","State":"open","Body":"Would be nice to see some TensorFlow integration in AutoML.\r\nOne find nice Multiclass Iris prediction with TensorFlow in Python in the web. \r\nWould be nice to see it implemented in AutoMl as I guess it's a good _bootstrap'er_  for those that would like to implement it. ","Url":"https://github.com/dotnet/machinelearning/issues/3770","RelatedDescription":"Open issue \"AutoML feature request for TensorFlow\" (#3770)"},{"Id":"447498029","IsPullRequest":false,"CreatedAt":"2019-05-23T07:42:42","Actor":"PeterPann23","Number":"3769","RawContent":null,"Title":"ConfusionMatrix.GetFormattedConfusionTable() sorts on arbitrary in order found on disk ","State":"open","Body":"\r\n[Enter feedback here]\r\nWhen training a MultiClass you will/can discover the classes in a random order.\r\nThe \"random\" order is then indexed and repeated in the labels. \r\nOne can influence the order using keyOrdinality in MlContext.Transforms.Conversion.MapValueToKey \r\n\r\n```\r\n//     How items should be ordered when vectorized. If Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByOccurrence\r\n//     chosen they will be in the order encountered. If Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue,\r\n```\r\n\r\nThe Y axis does map the index to a label, this helps but it would be better to allow users to sort on the label to get a consistent layout as well as allow the user to use cast the labels back to enumerable classes (if this is what is used for the labels) and sort in order of the enumerable.   \r\n\r\nTo \"fix\" report formatting one should not have to alter the learning pipeline, these are 2 separate concerns. \r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: a65b98b6-bd97-8615-8f5f-827305a203c1\r\n* Version Independent ID: 6975eed6-3d30-cb7d-295d-edce198c2e43\r\n* Content: [ConfusionMatrix.GetFormattedConfusionTable Method (Microsoft.ML.Data)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.data.confusionmatrix.getformattedconfusiontable?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3DEN-US%26k%3Dk(Microsoft.ML.Data.ConfusionMatrix.GetFormattedConfusionTable);k(SolutionItemsProject);k(TargetFrameworkMoniker-.NETFramework,Version%3Dv4.7.2);k(DevLang-csharp)%26rd%3Dtrue&view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Data/ConfusionMatrix.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Data/ConfusionMatrix.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @sfilipi\r\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/3769","RelatedDescription":"Open issue \"ConfusionMatrix.GetFormattedConfusionTable() sorts on arbitrary in order found on disk \" (#3769)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-05-31T05:30:36.6020703Z","RunDurationInMilliseconds":601}