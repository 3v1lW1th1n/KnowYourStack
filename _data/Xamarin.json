{"Data":{"Blog":{"FeedItems":[{"Title":"Multi-targeting with Android Support Library v28","PublishedOn":"2018-11-28T18:09:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting with Xamarin’s Android Support Library version 28, we are introducing multi-targeting. This includes assemblies for older support library versions when your application&#8217;s...","Href":"https://blog.xamarin.com/multi-targeting-with-android-support-library-v28/","RawContent":null},{"Title":"Android Build Performance and Reliability","PublishedOn":"2018-11-21T16:45:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As a Xamarin developer working on Android apps, you may be well-aware of two issues that slow down your everyday development; build times and the correctness of the build. If you aren&#8217;t sure...","Href":"https://blog.xamarin.com/android-build-performance-reliability/","RawContent":null},{"Title":"Xamarin.Forms 3.4.0: Say Hello to ImageButton","PublishedOn":"2018-11-15T19:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of our long-term goal to have more frequent releases, we’re pleased to announce the release of Xamarin.Forms 3.4.0. As always, this release contains even more bug fixes and most notably,...","Href":"https://blog.xamarin.com/xamarin-forms-3-4-0-say-hello-to-imagebutton/","RawContent":null},{"Title":"Twitch Workshop: Build Your First Mobile App with C#, Xamarin, and the Cloud","PublishedOn":"2018-11-14T18:45:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you been clamoring to get started with mobile development using C# and Xamarin? What if you could attend a full day workshop from the comfort of your house or in a conference room with some...","Href":"https://blog.xamarin.com/twitch-workshop-build-your-first-mobile-app/","RawContent":null},{"Title":"Gorilla Player: A Tool to Craft Beautiful XAML UIs for Xamarin.Forms","PublishedOn":"2018-11-08T21:00:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post contributed by Leonardo Rodríguez Viacava. Leo is co-founder and CTO of UXDivers, creators of Grial UIKit and Gorilla Player. UXDivers specializes in designing and coding engaging...","Href":"https://blog.xamarin.com/gorilla-player-a-tool-to-craft-beautiful-xaml-uis-for-xamarin-forms/","RawContent":null},{"Title":"Xamarin and .NET Community Events in November","PublishedOn":"2018-11-01T16:01:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-community-events-in-november/","RawContent":null},{"Title":"Xamarin.Forms and Zeplin: Speed Up Your Design to Development Process","PublishedOn":"2018-10-23T18:53:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Arnstein Johansen, a Norwegian software engineer interested in mobile and web development. He works for Itema AS, a consultant agency in Trondheim, Norway and a...","Href":"https://blog.xamarin.com/xamarin-forms-and-zeplin-speed-up-your-design-to-development-process/","RawContent":null},{"Title":"Xamarin.Forms 3.3.0: Little Things, Huge Difference","PublishedOn":"2018-10-18T19:06:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin.Forms team has been working closely with our open-source community to help fill in the “little things”. Things you’ve told us are important to building your mobile apps and being supremely...","Href":"https://blog.xamarin.com/xamarin-forms-3-3-0-little-things-huge-difference/","RawContent":null},{"Title":"Complex Animations in Xamarin.Forms using Finite State Machine","PublishedOn":"2018-10-16T17:32:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Slava Chernikoff, a Principal Engineer at Binwell. Microsoft MVP and Xamarin Certified experienced mobile cross-platform and native developer. Also, a previously...","Href":"https://blog.xamarin.com/complex-animations-xamarin-forms-using-finite-state-machine/","RawContent":null},{"Title":"Protect your Xamarin.Android Apps at Runtime with Dotfuscator","PublishedOn":"2018-10-12T18:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest blog by Bill Leach. Bill is CTO and co-founder of PreEmptive Solutions, makers of Dotfuscator and DashO application protection tools. Protecting Your Xamarin.Android Apps In a previous...","Href":"https://blog.xamarin.com/protect-xamarin-android-apps-dotfuscator/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8678624638","Type":"PullRequestEvent","CreatedAt":"2018-11-30T20:33:53","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2467","RelatedDescription":"Merged pull request \"Improve timing accuracy and efficiency\" (#2467) at xamarin/xamarin-android","RelatedBody":"Current timing code in monodroid-glue.cc uses the `gettimeofday` which provides\r\na most a microsecond accuracy, not enough for certain measurements.\r\nAdditionally, current code rounds it up to the millisecond boundery, making the\r\nmeasurements very inaccurate. Also, `gettimeofday` is quite heavy in terms of\r\ntime spent in the syscall.\r\n\r\nReplace `gettimeofday` with a call to `clock_gettime` when targetting Android or\r\nLinux. This allows us to specify an alternative lock source, `CLOCK_MONOTONIC`,\r\nwhich is very accurate and fast (not as fast as `CLOCK_MONOTONIC_COARSE` but\r\nwith higher resolution, thus better suited for our needs).\r\n\r\nIn addition, introduce a small collection of structures to be used for timing\r\ninstead of the currently used `long long` variables. Also introduced are the\r\n`Util` class APIs to record the time (using the new `timing_period` structure\r\nwhich has members to mark both the start and the end of the timing period - the\r\n`start` and `end` fields, respectively) as well as a function to calculate the\r\ndifference between times stored in `time_period`. Structure representing the\r\ndifference supports reporting in seconds + milliseconds + nanoseconds."},{"Id":"8678454803","Type":"PullRequestEvent","CreatedAt":"2018-11-30T19:58:24","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2476","RelatedDescription":"Merged pull request \"Bump Java.Interop to fix a typo\" (#2476) at xamarin/xamarin-android","RelatedBody":"Pulls: https://github.com/xamarin/java.interop/commit/df65e7c15e1f480db1b36514b35aaa9a56cc2d4a"},{"Id":"8678442945","Type":"PullRequestEvent","CreatedAt":"2018-11-30T19:56:08","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2476","RelatedDescription":"Opened pull request \"Bump Java.Interop to fix a typo\" (#2476) at xamarin/xamarin-android","RelatedBody":"Pulls: https://github.com/xamarin/java.interop/commit/df65e7c15e1f480db1b36514b35aaa9a56cc2d4a"},{"Id":"8678390458","Type":"PullRequestEvent","CreatedAt":"2018-11-30T19:45:56","Actor":"luhenry","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2382","RelatedDescription":"Closed pull request \"[mono] Fetch the target url and package of system Mono from GitHub API\" (#2382) at xamarin/xamarin-android","RelatedBody":"The idea is to have a single place from which we track the mono dependency: the `external/mono` submodule. We then get the package's URL and name from the GitHub status API"},{"Id":"8678337622","Type":"PullRequestEvent","CreatedAt":"2018-11-30T19:35:45","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2469","RelatedDescription":"Merged pull request \"[build] Do not build obsolete Mono.Android assemblies\" (#2469) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/1032\r\n\r\nWe previously obsoleted support for API levels earlier than API-19;\r\nsee commit 66e1b655.\r\n\r\nNext up: stop *building* `Mono.Android.dll` and related assemblies for\r\nAPI levels earlier than API-19, and stop *shipping* `Mono.Android.dll`\r\nassemblies for `$(TargetFrameworkVersion)` values before `v4.4` (19).\r\n\r\nPR #1032 previously tried to do this, and failed, because it attempted\r\nto do \"too much,\" removing code from `Mono.Android.dll` *as well as*\r\nremoving support for *building* the obsolete API levels.\r\n\r\nSimplify things by *just* altering the build system and *not* the\r\nsource code within `Mono.Android.dll`."},{"Id":"8678320108","Type":"IssuesEvent","CreatedAt":"2018-11-30T19:32:21","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2475","RelatedDescription":"Opened issue \"Investigate dex limit in Xamarin.Android versus Java/Android Studio\" (#2475) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=55117\r\n\r\n1. It has been observed that Xamarin.Android projects hit the multi-dex limit sooner than Java projects.\r\n2. We should understand why.\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nXamarin.Android has an approximately known overhead of Java methods and fields:\r\n* a \"fixed\" overhead for Java XA support code: we should know this\r\n* a linear overhead of each `Java.Lang.Object` subclass, and each overridden method in C#\r\n\r\n### Actual Behavior\r\n\r\nWe have, at best, a vague idea of this comparison.\r\n\r\n### What should we do?\r\n\r\nWe should rerun @JonDouglas' example with the latest bits: https://bugzilla.xamarin.com/show_bug.cgi?id=55117\r\n\r\nIn addition to adding jar files the \"Java way\", we should *also* compare what happens if we use all the jar files from `obj\\Debug\\lp`. What is the difference there?\r\n\r\nDepending on what is wrong, we might need to take different actions:\r\n- Are there extra types from the jar files in `obj\\Debug\\lp`? How are they there?\r\n- Is the overhead of fields/methods from Xamarin.Android in general substantial?"},{"Id":"8677753421","Type":"PullRequestEvent","CreatedAt":"2018-11-30T17:42:09","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2474","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] minimal Reference Assemblies support\" (#2474) at xamarin/xamarin-android","RelatedBody":"This is the beginning of our support for MSBuild/Roslyn \"Reference\r\nAssemblies\".\r\n\r\nAdding the following to a `csproj` file:\r\n\r\n    <ProduceReferenceAssembly>True</ProduceReferenceAssembly>\r\n\r\nCauses a `bin\\Debug\\ref\\MyLibrary.dll` to exist alongside\r\n`bin\\Debug\\MyLibrary.dll`.\r\n\r\nTwo item groups, `@(ReferenceCopyLocalPaths)` and `@(ReferencePath)`\r\nwill have new `%(ReferenceAssembly)` metadata:\r\n\r\n    bin\\Debug\\MyLibrary.dll\r\n        ReferenceAssembly = C:\\full\\path\\to\\bin\\Debug\\ref\\MyLibrary.dll\r\n\r\nIf an assembly does *not* include a reference assembly, it will still\r\nmaintain `%(ReferenceAssembly)` metadata pointing to itself:\r\n\r\n    bin\\Debug\\OtherLibrary.dll\r\n        ReferenceAssembly = C:\\full\\path\\to\\bin\\Debug\\OtherLibrary.dll\r\n\r\nIn some cases this metadata might not be there, such as using a path\r\nas input to `ResolveAssemblies` (`$(OutDir)$(TargetFileName)`), so our\r\n`ResolveAssemblies` MSBuild task should produce the value if it does\r\nnot exist.\r\n\r\n## Changes ##\r\n\r\nThe biggest change here is to rework `ResolveAssemblies` so that it\r\npreserves item metadata. The metadata was getting lost in various\r\nways:\r\n\r\n- Use of `%(ReferencePath.Identity)` instead of `@(ReferencePath)`.\r\n- Any new `TaskItem` instances created should use the ctor taking in\r\n  an existing `ITaskItem`. This preserves the metadata from the\r\n  original item.\r\n\r\nWe also needed to make some changes to support `%(ReferenceAssembly)`:\r\n\r\n- New `TaskItem` objects created by a file path should set\r\n  `%(ReferenceAssembly)`.\r\n- We should check if `%(ReferenceAssembly)` is missing, and set it\r\n  where appropriate.\r\n\r\nAdditionally, I could rework `_GenerateJavaStubs` so it can be skipped\r\nwhen a reference assembly didn't change.\r\n\r\nI merely changed a single input: `@(_ResolvedAssemblies)` to\r\n`@(_ResolvedAssemblies->'%(ReferenceAssembly)')`.\r\n\r\nWe can skip `_GenerateJavaStubs` if reference assemblies didn't change\r\nbecause:\r\n\r\n- The `<GenerateJavaStubs/>` call only operates on public APIs\r\n- The `<ConvertCustomView/>` call is OK here since\r\n  `@(_AndroidResourceDest)` are an input. The entire\r\n  `_GenerateJavaStubs` target would re-run if a resource changed.\r\n\r\nI added some documentation about what I found out with MSBuild\r\n\"Reference Assembly\" support, in general. I also added a unit test\r\nverifying which targets skip when `$(ProduceReferenceAssembly)` is set\r\nin a library project."},{"Id":"8677400783","Type":"PullRequestEvent","CreatedAt":"2018-11-30T16:40:31","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2440","RelatedDescription":"Merged pull request \"[do-not-merge] use a 5.16 debug build\" (#2440) at xamarin/xamarin-android","RelatedBody":"hopefully helps to identify the msbuild hang with mono\r\n\r\nContext: https://github.com/mono/mono/pull/11706 & https://github.com/xamarin/xamarin-android/pull/2357\r\n\r\n/cc @luhenry "}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8679715759","Type":"IssuesEvent","CreatedAt":"2018-12-01T01:47:56","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4171","RelatedDescription":"Closed issue \"BoxView Margin not working version 3.3\" (#4171) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nBoxView Margin not working I have Margin=\"-10,0,-10,0\" not working\r\nI have attached Screen shot which is having tracking No# which is BoxView I need full width of BoxView \r\nplease check\r\n### Steps to Reproduce\r\n\r\n1. Any ContentPage having grid and assing grid margin  \"Margin=\"10,0,10,0\"\r\n2. Inside the grid add BoxView control and give margin to BoxView like Margin=\"-10,0,-10,0\"\r\n3. It wont work nagative margin in previos version of XF working fine\r\n\r\n### Expected Behavior\r\nIt should work with negative margin \r\n### Actual Behavior\r\nIt won't work with negative margin \r\n### Basic Information\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.8.7\r\nVisualStudio.15.Release/15.8.7+28010.2046\r\nMicrosoft .NET Framework\r\nVersion 4.7.03190\r\n\r\nInstalled Version: Professional\r\n\r\nMicrosoft Visual Studio Tools for Applications 2017   00369-60000-00001-AA420\r\nMicrosoft Visual Studio Tools for Applications 2017\r\n\r\nVisual C++ 2017   00369-60000-00001-AA420\r\nMicrosoft Visual C++ 2017\r\n\r\nApplication Insights Tools for Visual Studio Package   8.13.10627.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.8.05085.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.8.31590\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60618.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nC# Tools   2.9.0-beta8-63208-01\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMLGen Package Extension   1.0\r\nMLGen Package Visual Studio Extension Detailed Info\r\n\r\nMono Debugging for Visual Studio   4.11.11-pre (8fb558f)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.28010.2046\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nWindows Template Studio   2.4.18260.1\r\nWindows Template Studio quickly builds a UWP app, using a wizard-based UI to turn your needs into a foundation of Windows 10 patterns and best practices.\r\n\r\nXamarin   4.11.0.776 (d15-8@1ae9b59d7)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.15.9 (d000f568b)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Live Reload   0.4.0 (remotes/origin/dev@75526a0)\r\nProvides live reload capabilities for Xamarin XAML.\r\n\r\nXamarin Templates   1.1.116 (9619170)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.0.0.20 (HEAD/86d33f45b)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.0.0.15 (84552a4)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n\r\n  - Android:  version 6 API Level 23\r\n\r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n![screenshot_20181023-121346](https://user-images.githubusercontent.com/1029026/47341237-29e7fd80-d6be-11e8-974e-b64e585802f9.png)\r\n\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n\r\n"},{"Id":"8679627730","Type":"PullRequestEvent","CreatedAt":"2018-12-01T01:05:43","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4601","RelatedDescription":"Opened pull request \"[Android] Fix ImageSource being set to null and fix ImageCell so it loads images\" (#4601) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nSet the ImageView to null if the ImageSource is set to null. \r\nFix ImageCell \r\n\r\n### Issues Resolved ### \r\n- fixes #4597\r\n- fixes #4584\r\n\r\n None\r\n\r\n### Platforms Affected ### \r\n- Android\r\n\r\n\r\n### Testing Procedure ###\r\nGo to the included UI test and follow the instructions\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8679443401","Type":"IssuesEvent","CreatedAt":"2018-11-30T23:54:38","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4600","RelatedDescription":"Opened issue \"[iOS] CollectionView with empty ObservableCollection crash\" (#4600) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nIf the ObservableCollection is empty it will crash on iOS\r\n\r\n### Steps to Reproduce\r\n\r\n1. Try run attached sample\r\n\r\n### Expected Behavior\r\n\r\nShould not crash, when items are added I should see them appear on the screen\r\n\r\n### Actual Behavior\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: \r\n  - iOS:  \r\n- Nuget Packages: 4.0.0-pre1\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<img width=\"1680\" alt=\"screenshot 2018-11-30 at 23 51 09\" src=\"https://user-images.githubusercontent.com/1235097/49320726-2afd1d80-f4fb-11e8-9cf2-a1824728cd75.png\">\r\n\r\n\r\n### Reproduction Link\r\n\r\n[CollectionViewSample.zip](https://github.com/xamarin/Xamarin.Forms/files/2635336/CollectionViewSample.zip)"},{"Id":"8679435914","Type":"IssuesEvent","CreatedAt":"2018-11-30T23:51:56","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4547","RelatedDescription":"Closed issue \"[Feedback] Xamarin.Forms Image, Loads on Android, does not on iOS\" (#4547) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\n\n<p>Using Visual Studio for Mac Community (updated to latest stable)\n\n1.) New “Blank Xamarin.Forms App”\n2.) Update all of the Nuget Packages to current\n3.) Under the “Welcome to Xamarin.Forms” label add a new image control\n\n&lt;Image Source=&quot;https://img.discogs.com/P2bwDyNI_40_POp15pPOj3lOahY=/600x437/smart/filters:strip_icc():format(jpeg):mode_rgb():quality(90)/discogs-images/A-158120-1490159581-3776.jpeg.jpg&quot; /&gt;\u2028\n4a.) Run Android Project “Android_Accelerated_Nougat (API 25)”\n     - Observe Image is displayed as expected.\n4b.) Run iOS Project on “iPhone 8 iOS 12.1” Simulator\n     - Observe nothing is displayed under the label, no erros are thrown and no logging is giving in the application output.\n\nThis behavior has been 100% repeatable on physical devices as well, works on any android device, fails on any iOS device.  I’ve ensured I was using the “NSUrlSession” http client and I event tried adding the “NSAllowsArbitraryLoads” to my info.plist. dispite it being a valid https endpoint w/ a good certificate.\n\nI posted a question on the Xamarin.Forms Forums and was given a work-around but it is flaky at best and sometimes the View with refresh and the images will dissapear.  \n\nLink to question: https://forums.xamarin.com/discussion/142154/\n\nA note about the URL.  I’m writing a media app to integrate with https://www.discogs.com developer API and these are the url’s that are returned via their api calls and there’s really nothing I can do about it.\n\nThanks,\nRich</p>\n<a href=\"https://developercommunity.visualstudio.com/content/problem/378950/xamarinforms-image-loads-on-android-does-not-on-io.html\">View on Developer Community</a>\n<br>To find diagnostic information, see the <a href=\"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/726192\">original linked feedback ticket</a>.\r\n\r\n### Source\r\n\r\n[736035](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/736035)"},{"Id":"8679399356","Type":"IssuesEvent","CreatedAt":"2018-11-30T23:39:30","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4359","RelatedDescription":"Closed issue \"Xamarin.Forms Android - slow tab switch from fifth tab\" (#4359) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWe have application with five tabs in Xamarin.Forms. iOS version is fine, but in Android performance on tab switch is really slow since the moment when we added five tab. When we remove any from tabs, then the performance is much better and tabs are opened almost immediately. \r\nThe problem is especially noticeable, when you go from first to last or from last to first. \r\n\r\n### Steps to Reproduce\r\n\r\n1. Create Xamarin.Forms application with 5 tabs with some heavier content \r\n2. Run application\r\n3. Go from first tab to five, or from five to first\r\n\r\n### Expected Behavior\r\n\r\nNew tab is selected immediately.\r\n\r\n### Actual Behavior\r\n\r\nYou have to wait few seconds to see new tab. \r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.2.0.871581\r\n- Last known good version: N/A\r\n- IDE:\r\n- Platform Target Frameworks: \r\n  - Android: 9.0.0.19\r\n- Android Support Library Version: 27.0.2\r\n- Affected Devices: Android devices, tested on Samsung Galaxy S6, Huawei P20 Pro etc.\r\n"},{"Id":"8679380003","Type":"IssuesEvent","CreatedAt":"2018-11-30T23:33:18","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4467","RelatedDescription":"Closed issue \"Xamarin.iOS Tabbed Page tabs bar disappear after PopAsync()\" (#4467) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nI have a TabbedPage that contains 3 pages (Page 1, Page 2, Page 3). When any tab is selected, the tabs bar which displays all the pages is presented. Then I add a NavigationPage on top of the TabbedPage. After that, when I remove the page using PopAsync / press back button, and select other tab in the TabbedPage, the tabs bar disappear, which is not supposed to happened.\r\n\r\nNote: This is only happened in iOS. On Android, the tabs bar works normally.\r\n\r\n### Steps to Reproduce\r\n1. Create a TabbedPage as the root page.\r\n2. Add a NavigationPage to the navigation stack (use PushAsync other page).\r\n3. Clear the most top page in the navigation stack (use PopAsync).\r\n4. Select other tab in the root TabbedPage, and the tabs bar is disappear.\r\n\r\n### Expected Behavior\r\nThe tabs bar is expected to be displayed permanently.\r\n\r\n### Actual Behavior\r\nThe tabs bar is gone in iPhone\r\n\r\n### Basic Information\r\n- Version with issue: Xamarin.Forms 3.4.0.1008975\r\n- IDE: Visual Studio for Mac 7.6.11\r\n- Platform Target Frameworks: \r\n  - iOS:  Version 12.2.1.10 (Visual Studio Community), Xcode 10.1 (14460.46)\r\n- Nuget Packages: Version 4.3.1.4445\r\n- Affected Devices: All iPhone (simulator and devices)\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\nI have uploaded a very simple project in this repository that demonstrates this problem below\r\nhttps://github.com/RushAid93/xamarin_testing.git"},{"Id":"8679247275","Type":"IssuesEvent","CreatedAt":"2018-11-30T22:54:47","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4392","RelatedDescription":"Closed issue \"[iOS] HttpClient GetAsync does not consider connection loss as an error\" (#4392) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nI'm using HttpClient to download files from URLs with GetAsync method. With huge images for example, when I stop internet connection manually in the middle of the download, it is considered as a normal ending for the GetAsync method and the resulting HttpResponse is totally normal (status 200, no error message, no exception).  Depending of the moment of the connection loss, the resulting image corresponds to the download progress (starting from the top of the image).\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download an image from a public URL using HttpClient.GetAsync\r\n2. Disable your internet connection during the download \r\n3. Set an Image ImageSource with the response\r\n\r\n### Expected Behavior\r\n\r\nAt least an exception for the connection loss or another status for the HttpResponse\r\n\r\n### Actual Behavior\r\n\r\nNothing.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: \r\n   - Xamarin.Forms 3.3.0.912540\r\n   - Xamarin.iOS 12.1.0.15\r\n   - HttpClient Implementation : NSUrlSession (iOS 7+)\r\n\r\n### Sample project\r\n\r\n[TestHttpClientGet.zip](https://github.com/xamarin/Xamarin.Forms/files/2584792/TestHttpClientGet.zip)\r\n\r\nSimple sample project with a \"Download\" button.\r\nTo reproduce, you need to stop internet connection after you clicked on Download."},{"Id":"8678832694","Type":"IssuesEvent","CreatedAt":"2018-11-30T21:18:53","Actor":"skolesni","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4599","RelatedDescription":"Opened issue \"[iOS] V3.0 Unexpected left margin inside the ListView control, after the control is moved outside of the screen boundaries and back (iPhone X devices in Portrait mode only)\" (#4599) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nThe Xamarin.Forms.ListView control on iOS introduces unexpected left margin after being shifted outside of the screen boundary and back using the TransformX function. This only happens on iPhone X devices in Landscape mode. \r\n\r\nIn this scenario, I create a slide in menu, which uses ListView control to display Menu Items. When the user taps on the \"Menu\" button (see screenshots in the sample solution below), the menu slides in from the left. When the user dismisses the menu, it slides out back to the left. Once the menu panel control is created, it stays hidden outside the boundaries of the view. The menu panel control is created dynamically, placed outside of the view and attached to the parent control, then its position is manipulated using TransformX with animation.\r\n\r\nHere is the sample solution which demonstrates the issue: https://github.com/skolesni/Issues.ListViewTranslate.Forms\r\n\r\nThis code has been working in a number of production apps since 2016. Since the introduction of the iPhone X devices (with the notch) the issue started to appear only on iPhone X devices. The code works fine on any pre-iPhone X devices, e.g. iPhone 8, iPhone 8 Plus, etc., on Android and UWP.\r\n\r\nI have tried different approaches to create a sliding effect of the menu, but never get satisfying results with the ListView in the scope of affected devices. If I use other controls, such as StackLayout of items, the solution works as expected.\r\n\r\nOnce the sample solution is downloaded, please have a look at the screenshots in the \"Screenshots\" folder.\r\n\r\n### Steps to Reproduce\r\n1. Download the solution from GitHub repo given above.\r\n2. Start the app on iOS X device or iOS X simulator in portrait (normal) mode.\r\n3. Tap the \"Menu\" button - note that the menu slides in from the left, and the remaining screen is dimmed.\r\n4. Observe that the \"Home\", \"Messages\", \"Settings\" and \"About\" menu items have a correct 16px margin on the left\r\n4. Tap on \"Messages\" item, this will highlight the item. This proves that the ListView is working as expected\r\n5. Tap anywhere outside the menu panel to close it\r\n6. Repeat step 2 again and observe that the menu appears as expected\r\n7. Close the menu\r\n8. Rotate device Counter-Clockwise to turn the device to the Landscape mode\r\n9. Tap the \"Menu\" button - note that the menu slides in from the left\r\n10. Observe that this time the \"Home\", \"Messages\", \"Settings\" and \"About\" menu items are shifted significantly to the right (see screenshot file \"Simulator Screen Shot - iPhone XR - Landscape.png\")\r\n11. Close the menu item\r\n12. Rotate device Clockwise to turn the device to the Portrait mode again\r\n13. Observe that the menu appears as expected\r\n\r\n### Expected Behavior\r\nThere is no unexpected margin on the left in the menu panel\r\n\r\n### Actual Behavior\r\nThere is an unexpected margin of approximately 75px on the left in the menu panel\r\n\r\n### Basic Information\r\nFor a brief description of the solution, please refer to the \"readme.md\" file in the https://github.com/skolesni/Issues.ListViewTranslate.Forms repository\r\n\r\n- Version with issue:\r\n- Last known good version: Pre iPhone X devices work fine\r\n- IDE: Visual Studio 2017 Pro\r\n- Platform Target Frameworks:\r\n  - iOS:  12.1\r\n  - Android: N/A\r\n  - UWP:  N/A \r\n- Android Support Library Version: N/A\r\n- Nuget Packages: Xamarin.Forms 3.4.0\r\n- Affected Devices: iPhone X, iPhone XS, iPhone XS Max, iPhone XR\r\n\r\n### Screenshots\r\nScreenshots are provided in the \"Screenshots\" folder of the https://github.com/skolesni/Issues.ListViewTranslate.Forms repository\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8679247029","Type":"IssuesEvent","CreatedAt":"2018-11-30T22:54:43","Actor":"samhouts","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5215","RelatedDescription":"Opened issue \"[iOS] HttpClient GetAsync does not consider connection loss as an error\" (#5215) at xamarin/xamarin-macios","RelatedBody":"_From @Flheriau on November 13, 2018 15:53_\n\n<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nI'm using HttpClient to download files from URLs with GetAsync method. With huge images for example, when I stop internet connection manually in the middle of the download, it is considered as a normal ending for the GetAsync method and the resulting HttpResponse is totally normal (status 200, no error message, no exception).  Depending of the moment of the connection loss, the resulting image corresponds to the download progress (starting from the top of the image).\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download an image from a public URL using HttpClient.GetAsync\r\n2. Disable your internet connection during the download \r\n3. Set an Image ImageSource with the response\r\n\r\n### Expected Behavior\r\n\r\nAt least an exception for the connection loss or another status for the HttpResponse\r\n\r\n### Actual Behavior\r\n\r\nNothing.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: \r\n   - Xamarin.Forms 3.3.0.912540\r\n   - Xamarin.iOS 12.1.0.15\r\n   - HttpClient Implementation : NSUrlSession (iOS 7+)\r\n\r\n### Sample project\r\n\r\n[TestHttpClientGet.zip](https://github.com/xamarin/Xamarin.Forms/files/2584792/TestHttpClientGet.zip)\r\n\r\nSimple sample project with a \"Download\" button.\r\nTo reproduce, you need to stop internet connection after you clicked on Download.\n\n_Copied from original issue: xamarin/Xamarin.Forms#4392_"},{"Id":"8679052200","Type":"PullRequestEvent","CreatedAt":"2018-11-30T22:06:25","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5214","RelatedDescription":"Opened pull request \" [mmp] Add rpath to MonoBundle folder if we copy any NativeLibraries in \" (#5214) at xamarin/xamarin-macios","RelatedBody":"- #4435\r\n- A common enough breakage in our handling of native references is if you have\r\ntwo native libraries with dependencies (with rpath) between them that get copied into MonoBundle\r\n- We did not add rpath to this location so we would not resolve them\r\n- This is a behavior change, as anything that touches library resolution in mmp, but should be safe enough\r\n- Also a tiny warning fix \\ FIXME removal"},{"Id":"8678333046","Type":"IssuesEvent","CreatedAt":"2018-11-30T19:34:51","Actor":"pp111","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5213","RelatedDescription":"Opened issue \"Application referencing a native framework signing issue\" (#5213) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\nIn my project I have referenced a Native framework (not signed). When I compile, the framework is copied to the bundle inside the /Contents/Frameworks as expected and everything works ok.\r\n\r\nHowever when I try to deep sign the bundle it shows:\r\n\"bundle format is ambiguous (could be app or framework) In Subcomponent: <Path to the Framework>\"\r\n\r\nAccording to Apple, only two things allowed at the root of a framework folder: symlinks and the Versions directory. I checked the original framework and it is compliant, however when Xamarin copies the framework to the bundle it replaces the symlinks with the real files.\r\n\r\nTo confirm this was the issue, I copied manually the framework to the the bundle and I was able to sign the bundle successfully.\r\n\r\nAs a workaround I added a postbuild task to my project to delete the framework from the compiled bundle and copy it with copy -R command to keep the symlinks.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Create a new project and add a 3rd party framework as a native reference\r\n2.  Compile to Release\r\n3.  sign manually the bundle with:\r\ncodesign --force --sign \"my signature ID\" \"MyApplication.app\" --deep\r\n\r\n### Expected Behavior\r\nThe native framework is copied to the bundle in /Contents/Frameworks as it is in the origin\r\nApplication signed correctly\r\n\r\n### Actual Behavior\r\nXamarin copied the Framework replacing symlinks with the real files\r\nThe codesign tool failed with:\r\n\"bundle format is ambiguous (could be app or framework) In Subcomponent: <Path to the Framework>\"\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.7 (build 1868)\r\nInstallation UUID: e238b76e-7013-49fd-9574-267eccb5a563\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.7.0.5148\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.0.5\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.4\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nNot Installed\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.4.1 (14161)\r\nBuild 9F2000\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.11 (Visual Studio Community)\r\nHash: 5ef73d34\r\nBranch: \r\nBuild date: 2018-11-21 00:03:25-0500\r\n\r\n=== Xamarin.iOS ===\r\n\r\nXamarin.iOS not installed.\r\nCan't find mtouch or the Version file at /Library/Frameworks/Xamarin.iOS.framework/Versions/Current.\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707001868\r\nGit revision: 8bcdfa96d67c8c88dc45728cc968a2f84b55322f\r\nBuild date: 2018-11-22 12:19:29+00\r\nBuild branch: release-7.7\r\nXamarin extensions: d66dbedcda237cd9b546abfecfeecafba6f8e3cb\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.0\r\nDarwin 18.0.0 Darwin Kernel Version 18.0.0\r\n    Wed Aug 22 20:13:40 PDT 2018\r\n    root:xnu-4903.201.2~1/RELEASE_X86_64 x86_64\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1068601941339582469","CreatedAt":"2018-11-30T20:25:31+00:00","UserScreenname":"xamarinhq","Text":"Now announcing multi-targeting with Android Support Library v28. \n\n...but what is multi-targeting you ask? Well, no… https://t.co/oBJ1j9vP6P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":22,"RawContent":null},{"Id":"1067915081495846913","CreatedAt":"2018-11-28T22:56:10+00:00","UserScreenname":"xamarinhq","Text":"The Xamarin #Android team has been working hard on improving Build Performance &amp; Reliability in both #VS2017 v15.9… https://t.co/c4iSbZJDy9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":81,"FavoriteCount":42,"RawContent":null},{"Id":"1063457672048058371","CreatedAt":"2018-11-16T15:44:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing the release of Xamarin.Forms 3.4.0 w/ even more bug fixes and another new highly requested feature, an I… https://t.co/EJadLHYi73","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":178,"FavoriteCount":101,"RawContent":null},{"Id":"1063145593562902528","CreatedAt":"2018-11-15T19:03:56+00:00","UserScreenname":"xamarinhq","Text":"Build and deploy #ethereum smart contracts using the new @trufflesuite extension for #VSCode from @MSFTBlockchain… https://t.co/nEbiFUYaM2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":15,"RawContent":null},{"Id":"1062819180100100099","CreatedAt":"2018-11-14T21:26:53+00:00","UserScreenname":"xamarinhq","Text":"Want to get started w/ mobile dev using C# &amp; #Xamarin? We've got a Twitch Workshop for that.\n\nComing Friday, Nov 16… https://t.co/ce2vH9dC4t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":113,"FavoriteCount":58,"RawContent":null},{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":24,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":29,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":19,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":28,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":37,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":32,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":31,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":200,"FavoriteCount":110,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":55,"RawContent":null}]}},"RunOn":"2018-12-01T05:31:33.8988452Z","RunDurationInMilliseconds":3724}