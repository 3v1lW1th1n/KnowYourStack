{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T00:00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T00:00:00","CommentsCount":16,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T00:00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":24,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":50,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6658569200","Type":"IssuesEvent","CreatedAt":"2017-09-30T20:59:29","Actor":"4creators","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14279","RelatedDescription":"Opened issue \"[macOS] Build failure: __undef_min_max:17:2: error: : macro min is incompatible with C++. #undefing min [-Werror,-W#warnings]\" (#14279) at dotnet/coreclr","RelatedBody":"Reproducible hitting the above error while trying to build freshly cloned coreclr repo. \r\n```\r\nExecuting make install -j 5\r\nScanning dependencies of target tracepointprovider\r\nScanning dependencies of target System.Globalization.Native\r\nScanning dependencies of target System.Globalization.Native_Static\r\nScanning dependencies of target unixcoreruncommon\r\nScanning dependencies of target coreclrpal\r\n[  0%] Building CXX object src/coreclr/hosts/unixcoreruncommon/CMakeFiles/unixcoreruncommon.dir/coreruncommon.cpp.o\r\n[  0%] Building CXX object src/pal/src/CMakeFiles/tracepointprovider.dir/misc/tracepointprovider.cpp.o\r\n[  0%] Building CXX object src/corefx/System.Globalization.Native/CMakeFiles/System.Globalization.Native.dir/calendarData.cpp.o\r\n[  0%] Building CXX object src/corefx/System.Globalization.Native/CMakeFiles/System.Globalization.Native_Static.dir/calendarData.cpp.o\r\nIn file included from /Users/uw/src/coreclr/src/pal/src/misc/tracepointprovider.cpp:19:\r\nIn file included from /Users/uw/src/coreclr/src/pal/src/include/pal/palinternal.h:591:\r\nIn file included from /System/Library/Frameworks/CoreServices.framework/Headers/CoreServices.h:19:\r\nIn file included from /System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h:24:\r\nIn file included from /Library/Developer/CommandLineTools/usr/include/c++/v1/math.h:310:\r\nIn file included from /Library/Developer/CommandLineTools/usr/include/c++/v1/limits:112:\r\n/Library/Developer/CommandLineTools/usr/include/c++/v1/__undef_min_max:17:2: error: : macro min is incompatible with C++. #undefing min [-Werror,-W#warnings]\r\n#warning: macro min is incompatible with C++.  #undefing min\r\n ^\r\n/Library/Developer/CommandLineTools/usr/include/c++/v1/__undef_min_max:29:2: error: : macro max is incompatible with C++. #undefing max [-Werror,-W#warnings]\r\n#warning: macro max is incompatible with C++.  #undefing max\r\n ^\r\n[  0%] Building CXX object src/pal/src/CMakeFiles/coreclrpal.dir/cruntime/file.cpp.o\r\nIn file included from /Users/uw/src/coreclr/src/pal/src/cruntime/file.cpp:22:\r\nIn file included from /Users/uw/src/coreclr/src/pal/src/include/pal/palinternal.h:591:\r\nIn file included from /System/Library/Frameworks/CoreServices.framework/Headers/CoreServices.h:19:\r\nIn file included from /System/Library/Frameworks/CoreFoundation.framework/Headers/CoreFoundation.h:24:\r\nIn file included from /Library/Developer/CommandLineTools/usr/include/c++/v1/math.h:310:\r\nIn file included from /Library/Developer/CommandLineTools/usr/include/c++/v1/limits:112:\r\n/Library/Developer/CommandLineTools/usr/include/c++/v1/__undef_min_max:17:2: error: : macro min is incompatible with C++. #undefing min [-Werror,-W#warnings]\r\n#warning: macro min is incompatible with C++.  #undefing min\r\n ^\r\n/Library/Developer/CommandLineTools/usr/include/c++/v1/__undef_min_max:29:2: error: : macro max is incompatible with C++. #undefing max [-Werror,-W#warnings]\r\n#warning: macro max is incompatible with C++.  #undefing max\r\n ^\r\n2 errors generated.\r\nmake[2]: *** [src/pal/src/CMakeFiles/tracepointprovider.dir/misc/tracepointprovider.cpp.o] Error 1\r\nmake[1]: *** [src/pal/src/CMakeFiles/tracepointprovider.dir/all] Error 2\r\nmake[1]: *** Waiting for unfinished jobs....\r\n\r\n```\r\n\r\nSystem configuration:\r\n```\r\n  System Version:\tmacOS 10.12.6 (16G29)\r\n  Kernel Version:\tDarwin 16.7.0\r\n  Boot Volume:\tMacintosh HD\r\n  Boot Mode:\tNormal\r\n  Computer Name:\tMacBook Air (Admin)\r\n  Xcode Version:      Version 8.3.2 (8E2002)\r\n```\r\nrepo commit: c90a41bb6b9b5c5cc7f8f29a9d06aa2f9d0e51fd"},{"Id":"6658556420","Type":"IssuesEvent","CreatedAt":"2017-09-30T20:48:53","Actor":"4creators","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14278","RelatedDescription":"Opened issue \"[Crossgen/Linux/x86] Build failure: An attempt was made to load a program with an incorrect format. (Exception from HRESULT: 0x8007000B)\" (#14278) at dotnet/coreclr","RelatedBody":"Build on WSL Ubuntu 16.04 with clang 3.9.1 for x86/Release target fails:\r\n\r\n```\r\nGenerating native image for System.Private.CoreLib.\r\n/mnt/e/src/ms/dotnet/coreclr-lnx/bin/Product/Linux.x86.Release/crossgen /Platform_Assemblies_Paths /mnt/e/src/ms/dotnet/coreclr-lnx/bin/Product/Linux.x86.Release/IL  /out /mnt/e/src/ms/dotnet/coreclr-lnx/bin/Product/Linux.x86.Release/System.Private.CoreLib.dll /mnt/e/src/ms/dotnet/coreclr-lnx/bin/Product/Linux.x86.Release/IL/System.Private.CoreLib.dll\r\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.22220.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nCould not load file or assembly '/mnt/e/src/ms/dotnet/coreclr-lnx/bin/Product/Linux.x86.Release/IL/System.Private.CoreLib.dll'. An attempt was made to load a program with an incorrect format.\r\n (Exception from HRESULT: 0x8007000B)\r\nError: compilation failed for \"/mnt/e/src/ms/dotnet/coreclr-lnx/bin/Product/Linux.x86.Release/IL/System.Private.CoreLib.dll\" (0x8007000b)\r\nFailed to generate native image for System.Private.CoreLib.\r\n```\r\nBuild for x64/Release target succeeds.\r\n\r\nrepo commit: c90a41bb6b9b5c5cc7f8f29a9d06aa2f9d0e51fd\r\n\r\n"},{"Id":"6657878494","Type":"PullRequestEvent","CreatedAt":"2017-09-30T12:01:43","Actor":"colgreen","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14277","RelatedDescription":"Opened pull request \"Removed redundant null tests when sorting a secondary values array.\" (#14277) at dotnet/coreclr","RelatedBody":"#14162"},{"Id":"6657190837","Type":"PullRequestEvent","CreatedAt":"2017-09-30T01:56:44","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14272","RelatedDescription":"Merged pull request \"Adding a patch to fix coreclr build for VS 15.5 (using older SDKs).\" (#14272) at dotnet/coreclr","RelatedBody":"cc @jkotas, @AndyAyersMS \r\n\r\nFrom Andy:\r\n> If you are building with 15.5 you may need this patch. C++ folks elevated 4768  to on by default (apparently a windows ask) but older SDKs have the bad pattern."},{"Id":"6657190675","Type":"IssuesEvent","CreatedAt":"2017-09-30T01:56:36","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14276","RelatedDescription":"Opened issue \"Move disable warning options from compileoptions.cmake to warningcontrol.h\" (#14276) at dotnet/coreclr","RelatedBody":"From https://github.com/dotnet/coreclr/pull/14272#discussion_r141993057\r\n> I have just realized we have the warning disabling at two places. One is here and the other is in the compileoptions.cmake:\r\nhttps://github.com/dotnet/coreclr/blob/master/compileoptions.cmake#L94\r\nIt seems it would be better to have them at one place only.\r\n\r\nRemove from compileoptions.cmake:\r\n`add_compile_options(/wd4960 /wd4961 /wd4603 /wd4627 /wd4838 /wd4456 /wd4457 /wd4458 /wd4459 /wd4091 /we4640)`\r\n\r\nand Add to src/inc/warningcontrol.h:\r\n```cpp\r\n#pragma warning(disable :4960)\r\n#pragma warning(disable :4961)\r\n...\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6658761766","Type":"PullRequestEvent","CreatedAt":"2017-09-30T23:49:55","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/7734","RelatedDescription":null,"RelatedBody":"@dotnet/dotnet-cli "},{"Id":"6658603655","Type":"IssuesEvent","CreatedAt":"2017-09-30T21:27:24","Actor":"mklement0","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7739","RelatedDescription":"Opened issue \"Calling .NET Core executables via symlinks on Windows should be supported\" (#7739) at dotnet/cli","RelatedBody":"Trying to call a .NET Core 2.0 `*.exe` file via a symbolic link doesn't work as-is, resulting in the following error message:\r\n\r\n    The managed DLL bound to this executable: '<original-name>.dll', did not match own \r\n    name '<symlink-name>.dll'.\r\n    A fatal error was encountered. This executable was not bound to load a managed DLL.\r\n\r\nThe idea is to **use a symlink to provide an efficient, shell-agnostic way to invoke an executable by a shorter name** (without having to resort to shell-specific aliases or cumbersome wrapper batch files) - **just like on Unix platforms, where this scenario is already supported**.\r\n\r\nThis came up while discussing [a shell-agnostic way to invoke PowerShell Core with a shorter name](https://github.com/PowerShell/PowerShell/issues/4214).\r\n\r\n---\r\n\r\n### Steps to reproduce\r\n\r\nRun the following from an _elevated PowerShell_ prompt on (64-bit) _Windows_:\r\n\r\nCreate a hello-world project with executable `foo.exe` in `%TEMP%\\foo`:\r\n\r\n    PS> Set-Location (mkdir $env:Temp/foo)\r\n    PS> dotnet new console\r\n    PS> dotnet publish -c Release -r win-x64\r\n\r\nInvoke the resulting executable, which works fine:\r\n\r\n    PS> .\\bin\\Release\\netcoreapp2.0\\win-x64\\foo.exe\r\n    Hello World!\r\n\r\nNow create a symlink named `fooL.exe` that points to the executable and try to invoke it:\r\n\r\n    PS> cmd /c mklink fooL.exe .\\bin\\Release\\netcoreapp2.0\\win-x64\\foo.exe\r\n    PS> .\\fooL.exe  # !! Fails as of .NET Core 2.0\r\n    \r\nThis results in the error message cited at the top.\r\n\r\nNote that creating the symlink *without extension* (`fooL` instead of `fooL.exe`) _half_ works: \r\n\r\n  * From `cmd.exe`, you can't call this symlink as an executable at all.\r\n  * PowerShell _does_ allow invocation and even succeeds in calling the target executable with the arguments specified, but invariably runs it in a _new_ console window.\r\n\r\n---\r\n\r\nUse `Set-Location ~; Remove-Item -Recurse $env:TEMP/foo` to remove the temp. directory afterwards.\r\n"},{"Id":"6658314370","Type":"PullRequestEvent","CreatedAt":"2017-09-30T17:43:50","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7738","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25730-01 (master)\" (#7738) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6658225537","Type":"IssuesEvent","CreatedAt":"2017-09-30T16:37:54","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7736","RelatedDescription":"Closed issue \"dotnet new mvc fails to restore\" (#7736) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet new mvc\r\ndotnet restore\r\n\r\n## Expected  behavior\r\nRestore succeeds.\r\n\r\n## Actual behavior\r\n```\r\nE:\\delete\\test>dotnet restore\r\n  Restoring packages for E:\\delete\\test\\test.csproj...\r\n  Restoring packages for E:\\delete\\test\\test.csproj...\r\nE:\\delete\\test\\test.csproj : error NU1102: Unable to find package Microsoft.AspNetCore.All with version (>= 2.1.0-preview1-26751)\r\nE:\\delete\\test\\test.csproj : error NU1102:   - Found 4 version(s) in nuget.org [ Nearest version: 2.0.0 ]\r\nE:\\delete\\test\\test.csproj : error NU1102:   - Found 0 version(s) in Microsoft Visual Studio Offline Packages\r\nE:\\delete\\test\\test.csproj : error NU1102:   - Found 0 version(s) in Package source\r\nE:\\delete\\test\\test.csproj : error NU1102: Unable to find package Microsoft.VisualStudio.Web.CodeGeneration.Tools with version (>= 2.1.0-preview1-26751)\r\nE:\\delete\\test\\test.csproj : error NU1102:   - Found 15 version(s) in nuget.org [ Nearest version: 2.0.0 ]\r\nE:\\delete\\test\\test.csproj : error NU1102:   - Found 4 version(s) in Microsoft Visual Studio Offline Packages [ Nearest version: 1.1.0-preview4-final ]\r\nE:\\delete\\test\\test.csproj : error NU1102:   - Found 0 version(s) in Package source\r\nC:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\NuGet.targets(102,5): error : Value cannot be null. [E:\\delete\\test\\test.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\NuGet.targets(102,5): error : Parameter name: path [E:\\delete\\test\\test.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.0-preview1-007228)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007228\r\n Commit SHA-1 hash:  28a1f7e9d6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-25719-04\r\n  Build    : b5c917c0b24171ae27c7cfcfd2617b1088d41c11\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"6657281957","Type":"IssuesEvent","CreatedAt":"2017-09-30T03:05:45","Actor":"netroby","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7737","RelatedDescription":"Opened issue \"Feature request, compile dotnet to one self contained executable file\" (#7737) at dotnet/cli","RelatedBody":"This is a feature request. The current dotnet build result (even self contained build) will output a executable file and much more dll.\r\nCan we built them all in one single executable file?\r\n\r\ngolang/rust can build into one executable file(which good for redistribute). hope dotnet have the same ability "},{"Id":"6657072591","Type":"IssuesEvent","CreatedAt":"2017-09-30T00:33:08","Actor":"cdmihai","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7736","RelatedDescription":"Opened issue \"dotnet new mvc fails to restore\" (#7736) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet new mvc\r\ndotnet restore\r\n\r\n## Expected  behavior\r\nRestore succeeds.\r\n\r\n## Actual behavior\r\n```\r\nE:\\delete\\test>dotnet restore\r\n  Restoring packages for E:\\delete\\test\\test.csproj...\r\n  Restoring packages for E:\\delete\\test\\test.csproj...\r\nE:\\delete\\test\\test.csproj : error NU1102: Unable to find package Microsoft.AspNetCore.All with version (>= 2.1.0-preview1-26751)\r\nE:\\delete\\test\\test.csproj : error NU1102:   - Found 4 version(s) in nuget.org [ Nearest version: 2.0.0 ]\r\nE:\\delete\\test\\test.csproj : error NU1102:   - Found 0 version(s) in Microsoft Visual Studio Offline Packages\r\nE:\\delete\\test\\test.csproj : error NU1102:   - Found 0 version(s) in Package source\r\nE:\\delete\\test\\test.csproj : error NU1102: Unable to find package Microsoft.VisualStudio.Web.CodeGeneration.Tools with version (>= 2.1.0-preview1-26751)\r\nE:\\delete\\test\\test.csproj : error NU1102:   - Found 15 version(s) in nuget.org [ Nearest version: 2.0.0 ]\r\nE:\\delete\\test\\test.csproj : error NU1102:   - Found 4 version(s) in Microsoft Visual Studio Offline Packages [ Nearest version: 1.1.0-preview4-final ]\r\nE:\\delete\\test\\test.csproj : error NU1102:   - Found 0 version(s) in Package source\r\nC:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\NuGet.targets(102,5): error : Value cannot be null. [E:\\delete\\test\\test.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\NuGet.targets(102,5): error : Parameter name: path [E:\\delete\\test\\test.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.0-preview1-007228)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007228\r\n Commit SHA-1 hash:  28a1f7e9d6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-25719-04\r\n  Build    : b5c917c0b24171ae27c7cfcfd2617b1088d41c11\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"6657037272","Type":"PullRequestEvent","CreatedAt":"2017-09-30T00:11:10","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7730","RelatedDescription":"Merged pull request \"Fixing a publish break in master: \"UploadToLinuxPackageRepository\"\" (#7730) at dotnet/cli","RelatedBody":"Error in the last 3 builds of: Dotnet CLI CI [AllLinuxDistrosNativeInstallers][x64][master]\r\nhttps://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1025637\r\nhttps://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1022838\r\nhttps://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1022013\r\n\r\nerror MSB4018: The \"UploadToLinuxPackageRepository\" task failed unexpectedly. [/home/DDITAdministrator/myagent/_work/878/s/build.proj]\r\nerror MSB4018: System.IO.FileLoadException: Could not load file or assembly 'NuGet.Protocol, Version=4.4.0.3, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. Could not find or load a specific file. (Exception from HRESULT: 0x80131621) [/home/DDITAdministrator/myagent/_work/878/s/build.proj]\r\nerror MSB4018: File name: 'NuGet.Protocol, Version=4.4.0.3, Culture=neutral, PublicKeyToken=31bf3856ad364e35' [/home/DDITAdministrator/myagent/_work/878/s/build.proj]\r\n\r\n\r\nNuGet.Protocol needs to load the 'CLI_NuGet_Version' [binary ver = 4.4.0.3] not the prior version.\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6657495023","Type":"PullRequestEvent","CreatedAt":"2017-09-30T06:27:41","Actor":"voltagex","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/520","RelatedDescription":"Opened pull request \"Add more explicit instructions for installing Microsoft.Packaging.Tools.Trimming\" (#520) at dotnet/standard","RelatedBody":"Solves https://github.com/dotnet/standard/issues/518"},{"Id":"6657489636","Type":"IssuesEvent","CreatedAt":"2017-09-30T06:22:43","Actor":"voltagex","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/519","RelatedDescription":"Opened issue \"error MSB4018: The \"TrimFiles\" task failed unexpectedly.\" (#519) at dotnet/standard","RelatedBody":"I have done the following:\r\n* Installed Microsoft.Packaging.Tools.Trimming version 1.1.0-preview1-25729-01\r\n* Set up my .csproj to include `<TrimUnusedDependencies>true</TrimUnusedDependencies>` as per https://github.com/dotnet/standard/blob/release/2.0.0/Microsoft.Packaging.Tools.Trimming/docs/trimming.md\r\n\r\n\r\n```\r\n>------ Rebuild All started: Project: Music, Configuration: Debug Any CPU ------\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: The \"TrimFiles\" task failed unexpectedly.\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: System.ArgumentNullException: Value cannot be null.\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: Parameter name: source\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.TrimFiles.Execute()\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n1>Done building project \"Music.csproj\" -- FAILED.\r\n```\r\n\r\nAny clues? This is pretty much the MVC template from the 2.0.0 SDK."},{"Id":"6657469160","Type":"IssuesEvent","CreatedAt":"2017-09-30T06:03:47","Actor":"voltagex","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/518","RelatedDescription":"Opened issue \"Microsoft.Packaging.Tools.Trimming package can't be found\" (#518) at dotnet/standard","RelatedBody":"VS2017, .NET Core 2.0.\r\n\r\nThe instructions in https://github.com/dotnet/standard/blob/release/2.0.0/Microsoft.Packaging.Tools.Trimming/docs/trimming.md say to install `Microsoft.Packaging.Tools.Trimming` however I can't locacte that package.\r\n\r\n```\r\nPM> Install-Package Microsoft.Packaging.Tools.Trimming\r\nInstall-Package : Unable to find package 'Microsoft.Packaging.Tools.Trimming'\r\nAt line:1 char:1\r\n+ Install-Package Microsoft.Packaging.Tools.Trimming\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n \r\nTime Elapsed: 00:00:01.2276512\r\nPM> \r\n```"},{"Id":"6657075642","Type":"PullRequestEvent","CreatedAt":"2017-09-30T00:35:13","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/516","RelatedDescription":"Merged pull request \"Add developer metaphor for .NET Standard\" (#516) at dotnet/standard","RelatedBody":"Based on @davidfowl's [gist](https://gist.github.com/davidfowl/8939f305567e1755412d6dc0b8baf1b7)"},{"Id":"6656669297","Type":"PullRequestEvent","CreatedAt":"2017-09-29T21:39:50","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/517","RelatedDescription":"Merged pull request \"Update prerelease label to 'servicing'\" (#517) at dotnet/standard","RelatedBody":"@weshaggard @Petermarcu "},{"Id":"6656492672","Type":"PullRequestEvent","CreatedAt":"2017-09-29T20:50:34","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/517","RelatedDescription":"Opened pull request \"Update prerelease label to 'servicing'\" (#517) at dotnet/standard","RelatedBody":"@weshaggard @Petermarcu "},{"Id":"6656052612","Type":"PullRequestEvent","CreatedAt":"2017-09-29T18:57:50","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/516","RelatedDescription":"Opened pull request \"Add developer metaphor for .NET Standard\" (#516) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6658603449","Type":"IssuesEvent","CreatedAt":"2017-09-30T21:27:12","Actor":"MatthewLymer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24363","RelatedDescription":"Opened issue \"WinHttpHandler not respecting case sensitivity of request `Connection` header (`Keep-Alive`)\" (#24363) at dotnet/corefx","RelatedBody":"The `WinHttpHandler` class (and I'm assuming WinHTTP) has an issue when sending the `Connection` HTTP header.\r\n\r\nThe problem is that any requests sent through `WinHttpHandler` that are intended to be keep-alive always emit a header that reads `Connection: Keep-Alive` (note the casing of the header value).  \r\n\r\nI am also looking for a workaround / alternatives, as I have no control over the server I am sending requests to (the server chokes on `Connection: Keep-Alive` but not `Connection: keep-alive`, which is a 3rd party IIS server).\r\n\r\nSetup:\r\n- Dotnet Core 2.0.0\r\n- Windows 10 Creators Update\r\n\r\nNotes:\r\n- Dotnet Core 2.0.0 on Ubuntu 16.04.2 LTS with `CurlHandler` does not exhibit this problem\r\n\r\nUnit Test:\r\n```\r\npublic sealed class WinHttpHandlerTests\r\n{\r\n\t[Theory]\r\n\t[InlineData(\"keep-alive\")]\r\n\t[InlineData(\"KEEP-ALIVE\")]\r\n\t[InlineData(\"Keep-Alive\")] // this one passes\r\n\t[InlineData(\"KEEP_ALIVE\")]\r\n\tpublic async Task ShouldRespectConnectionCaseSensitivity(string expectedHeaderValue)\r\n\t{\r\n\t\tusing (var listener = new EchoingHttpListener())\r\n\t\tusing (var request = new HttpRequestMessage(HttpMethod.Get, $\"http://localhost:{listener.Port}\"))\r\n\t\t{\r\n\t\t\trequest.Headers.TryAddWithoutValidation(\"Connection\", expectedHeaderValue);\r\n\r\n\t\t\tusing (var client = new HttpClient(new WinHttpHandler()))\r\n\t\t\tusing (var response = await client.SendAsync(request))\r\n\t\t\t{\r\n\t\t\t\tvar body = await response.Content.ReadAsStringAsync();\r\n\t\t\t\tvar actualHeaderValue = Regex.Match(body, \"Connection: (.*)\\r\\n\").Groups[1].Value;\r\n\t\t\t\tAssert.Equal(expectedHeaderValue, actualHeaderValue);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\ninternal sealed class EchoingHttpListener : IDisposable\r\n{\r\n\tprivate readonly CancellationTokenSource _cts = new CancellationTokenSource();\r\n\tprivate readonly TcpListener _listener = new TcpListener(IPAddress.Any, 0);\r\n\tprivate readonly Task _listenTask;\r\n\r\n\tpublic EchoingHttpListener()\r\n\t{\r\n\t\t_listener.Start();\r\n\t\tPort = ((IPEndPoint) _listener.LocalEndpoint).Port;\r\n\r\n\t\tvar token = _cts.Token;\r\n\r\n\t\t_listenTask = Task.Run(async () => await Listen(token));\r\n\t}\r\n\r\n\tprivate async Task Listen(CancellationToken token)\r\n\t{\r\n\t\twhile (!token.IsCancellationRequested)\r\n\t\t{\r\n\t\t\tusing (var client = await _listener.AcceptTcpClientAsync())\r\n\t\t\t{\r\n\t\t\t\tvar stream = client.GetStream();\r\n\r\n\t\t\t\tvar encoding = new UTF8Encoding(false);\r\n\r\n\t\t\t\tusing (var reader = new StreamReader(stream, encoding, false, 2048, true))\r\n\t\t\t\tusing (var writer = new StreamWriter(stream, encoding, 2048, true))\r\n\t\t\t\t{\r\n\t\t\t\t\tvar request = await ReadRequestAsync(reader);\r\n\r\n\t\t\t\t\tawait writer.WriteLineAsync(\"HTTP/1.1 200 OK\");\r\n\t\t\t\t\tawait writer.WriteLineAsync(\"Connection: close\");\r\n\t\t\t\t\tawait writer.WriteLineAsync(\"Content-Type: text/plain; charset=utf-8\");\r\n\t\t\t\t\tawait writer.WriteLineAsync($\"Content-Length: {encoding.GetByteCount(request)}\");\r\n\t\t\t\t\tawait writer.WriteLineAsync();\r\n\t\t\t\t\tawait writer.WriteAsync(request);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static async Task<string> ReadRequestAsync(TextReader reader)\r\n\t{\r\n\t\tvar sb = new StringBuilder();\r\n\r\n\t\tstring line;\r\n\r\n\t\tdo\r\n\t\t{\r\n\t\t\tline = await reader.ReadLineAsync();\r\n\t\t\tsb.AppendLine(line);\r\n\t\t} while (line != string.Empty);\r\n\t\t\r\n\t\treturn sb.ToString();\r\n\t}\r\n\r\n\tpublic int Port { get; }\r\n\r\n\tpublic void Dispose()\r\n\t{\r\n\t\t_listener.Stop();\r\n\t\t_cts.Cancel();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t_listenTask.Wait();\r\n\t\t}\r\n\t\tcatch\r\n\t\t{\r\n\t\t\t// ignored\r\n\t\t}\r\n\t\t\r\n\t\t_cts.Dispose();\r\n\t}\r\n}\r\n```"},{"Id":"6658532336","Type":"PullRequestEvent","CreatedAt":"2017-09-30T20:29:55","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24362","RelatedDescription":"Opened pull request \"release/2.0: Fix handling of empty inputs to TakeLast (#24328)\" (#24362) at dotnet/corefx","RelatedBody":"Port https://github.com/dotnet/corefx/pull/24328 to release/2.0.0 branch."},{"Id":"6658383775","Type":"IssuesEvent","CreatedAt":"2017-09-30T18:34:56","Actor":"xrkolovos","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24361","RelatedDescription":"Opened issue \"Problem with HttpClient after updating my project from net461 to netcoreapp2.0\" (#24361) at dotnet/corefx","RelatedBody":"I have a piece of code that makes a httpRequest in a page in a domain www.example.gr\r\ni am redirected in a page (auth.example.gr) to login. \r\nI post some data to login and get the right cookies, so i can use the admin page.\r\n\r\nThis code works fine with .net framework 461. \r\n\r\nWhen i test it with netcore 2.0, when i post the data to Login i get this error.\r\n\r\n> **The operation has been canceled**\r\n\r\n> **The read operation failed, see inner exception.**\r\n>    at System.Net.Http.WinHttpResponseStream.<CopyToAsyncCore>d__18.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Net.Http.HttpContent.<LoadIntoBufferAsyncCore>d__48.MoveNext()\r\n\r\n> **Error while copying content to a stream.**\r\n>    at System.Net.Http.WinHttpResponseStream.<CopyToAsyncCore>d__18.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Net.Http.HttpContent.<LoadIntoBufferAsyncCore>d__48.MoveNext()\r\n\r\n\r\nI don't know what else to provide to help you more. Please inform me. Thank you."},{"Id":"6658276382","Type":"IssuesEvent","CreatedAt":"2017-09-30T17:15:00","Actor":"angelcalvasp","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24360","RelatedDescription":"Opened issue \"XmlDocument The name 'debuggerDisplayProxy' does not exist in the current context\" (#24360) at dotnet/corefx","RelatedBody":"When I create a new XmlDocument the local variable is showing the following error\r\n\r\nerror CS0103: The name 'debuggerDisplayProxy' does not exist in the current context\r\n\r\n![image](https://user-images.githubusercontent.com/7502746/31047927-f6ac56ee-a5d8-11e7-9123-d7342f1a1dcc.png)\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6658981141","Type":"PullRequestEvent","CreatedAt":"2017-10-01T03:48:07","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22414","RelatedDescription":"Merged pull request \"Ensure partial method implementation is completed when needed\" (#22414) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nPlace an attribute on a parameter of a partial implementation, where the attribute is the only thing that causes some using to be required. Then refactor \"remove unnecessary usings\". The bug is that the required using is removed.\r\n\r\n**Bugs this fixes:**\r\n\r\nFixes #18348\r\n\r\n**Workarounds, if any**\r\n\r\nDon't place attributes on partial method implementation parameters.\r\n\r\n**Risk**\r\n\r\nVery low. The change is trivial.\r\n\r\n**Performance impact**\r\n\r\nTiny. A small amount of additional logic is executed for partial methods.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nThis has been a bug in Roslyn since VS2015.\r\n\r\n**How was the bug found?**\r\n\r\nCustomer reported.\r\n\r\n**Test documentation updated?**\r\n\r\nN/A\r\n"},{"Id":"6658981140","Type":"IssuesEvent","CreatedAt":"2017-10-01T03:48:07","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18348","RelatedDescription":"Closed issue \"False positive \"Using directive is unnecessary\" in partial classes\" (#18348) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS 2017 (15.0.26228.10) / Roslyn 2.0.0\r\n\r\n**Steps to Reproduce**:\r\n\r\nPartial class file 1:\r\n```C#\r\nusing RoslynCodeAnalysisTests.Attributes;\r\n\r\nnamespace RoslynCodeAnalysisTests\r\n{\r\n    public partial class PartialClass\r\n    {\r\n        partial void PartialMethod([MyAttr] string a)\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nPartial class file 2:\r\n```C#\r\nusing RoslynCodeAnalysisTests.Attributes;\r\n\r\nnamespace RoslynCodeAnalysisTests\r\n{\r\n    [MyAttr]\r\n    public partial class PartialClass\r\n    {\r\n        partial void PartialMethod(string a);\r\n    }\r\n}\r\n```\r\n\r\n=> Roslyn shows \"Using directive is unnecessary\" in file 1 for `using RoslynCodeAnalysisTests.Attributes` which is wrong.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/388796/24554311/59f8c318-162d-11e7-9ff8-1dfdc1755065.png)\r\n\r\n\r\n**Expected Behavior**:\r\nDo not show \"Using directive is unnecessary\". It makes my compilation failing when doing this.\r\n\r\nBTW: When executing the corresponding quick-fix it doesn't change anything.\r\n"},{"Id":"6658980052","Type":"PullRequestEvent","CreatedAt":"2017-10-01T03:46:58","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22458","RelatedDescription":"Opened pull request \"Report warning (always false) when testing null using pattern-is\" (#22458) at dotnet/roslyn","RelatedBody":"REQUIRES COMPAT COUNCIL SIGNOFF\r\n\r\n**Customer scenario**\r\n\r\nIf you have an expression `e is T`, where the expression `e` ends up being a constant null, the compiler reports that the expression is always false. But if you add an identifier after the type, the warning unexpectedly vanishes.\r\n\r\n**Bugs this fixes:**\r\n\r\nFixes #20103\r\n\r\n**Workarounds, if any**\r\n\r\nN/A\r\n\r\n**Risk**\r\n\r\nVery low. We just add the missing diagnostic.\r\n\r\n**Performance impact**\r\n\r\nOnly a trivial change to the execution path. Unlikely to be any measurable perf impact.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo.\r\n\r\n**Root cause analysis:**\r\n\r\nWe did not attempt to duplicate the warnings from one construct when implementing the other.\r\n\r\n**How was the bug found?**\r\n\r\nCustomer reported.\r\n\r\n**Test documentation updated?**\r\n\r\nN/A\r\n\r\n**Compatibility**\r\n\r\nThis would technically be a breaking change, as it adds a warning where there was none before. The compatibility council will be consulted before this change is integrated.\r\n\r\n@dotnet/roslyn-compiler Please review.\r\n\r\n"},{"Id":"6658707893","Type":"PullRequestEvent","CreatedAt":"2017-09-30T22:59:02","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22407","RelatedDescription":"Merged pull request \"Remove PROTOTYPE markers from \"private protected\" feature\" (#22407) at dotnet/roslyn","RelatedBody":"Fixes #22244\r\nRelated to #22406\r\n\r\nThis is a comment-only change, to remove PROTOTYPE comments and replace by open issues.\r\n\r\n@jcouv Please review and approve for 15.5.\r\n"},{"Id":"6658707885","Type":"IssuesEvent","CreatedAt":"2017-09-30T22:59:01","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22244","RelatedDescription":"Closed issue \"Remove PROTOTYPE markers from \"private protected\" feature\" (#22244) at dotnet/roslyn","RelatedBody":"It looks like some PROTOTYPE markers made it through when the feature was merged.\r\n\r\nhttps://github.com/dotnet/roslyn/blame/9da689b5e705672c050bbac63bccd896ba4aefbb/src/VisualStudio/CSharp/Impl/CodeModel/CSharpCodeModelService.cs#L1041\r\n\r\nhttps://github.com/dotnet/roslyn/blob/9da689b5e705672c050bbac63bccd896ba4aefbb/src/VisualStudio/VisualBasic/Impl/CodeModel/VisualBasicCodeModelService.vb#L1425"},{"Id":"6658707076","Type":"PullRequestEvent","CreatedAt":"2017-09-30T22:58:10","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22414","RelatedDescription":null,"RelatedBody":"**Customer scenario**\r\n\r\nPlace an attribute on a parameter of a partial implementation, where the attribute is the only thing that causes some using to be required. Then refactor \"remove unnecessary usings\". The bug is that the required using is removed.\r\n\r\n**Bugs this fixes:**\r\n\r\nFixes #18348\r\n\r\n**Workarounds, if any**\r\n\r\nDon't place attributes on partial method implementation parameters.\r\n\r\n**Risk**\r\n\r\nVery low. The change is trivial.\r\n\r\n**Performance impact**\r\n\r\nTiny. A small amount of additional logic is executed for partial methods.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nThis has been a bug in Roslyn since VS2015.\r\n\r\n**How was the bug found?**\r\n\r\nCustomer reported.\r\n\r\n**Test documentation updated?**\r\n\r\nN/A\r\n"},{"Id":"6658707005","Type":"PullRequestEvent","CreatedAt":"2017-09-30T22:58:06","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22414","RelatedDescription":"Closed pull request \"Ensure partial method implementation is completed when needed\" (#22414) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nPlace an attribute on a parameter of a partial implementation, where the attribute is the only thing that causes some using to be required. Then refactor \"remove unnecessary usings\". The bug is that the required using is removed.\r\n\r\n**Bugs this fixes:**\r\n\r\nFixes #18348\r\n\r\n**Workarounds, if any**\r\n\r\nDon't place attributes on partial method implementation parameters.\r\n\r\n**Risk**\r\n\r\nVery low. The change is trivial.\r\n\r\n**Performance impact**\r\n\r\nTiny. A small amount of additional logic is executed for partial methods.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nThis has been a bug in Roslyn since VS2015.\r\n\r\n**How was the bug found?**\r\n\r\nCustomer reported.\r\n\r\n**Test documentation updated?**\r\n\r\nN/A\r\n"},{"Id":"6658705877","Type":"IssuesEvent","CreatedAt":"2017-09-30T22:57:00","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18201","RelatedDescription":"Closed issue \"Integrate 'private protected' implementation into a product version\" (#18201) at dotnet/roslyn","RelatedBody":"Tasks:\r\n- [ ] Link the feature to a supported language level\r\n- [ ] Identify (and implement) required testing to be done\r\n\r\nImplementation work is occurring in https://github.com/dotnet/roslyn/tree/features/privateProtected"},{"Id":"6658534560","Type":"PullRequestEvent","CreatedAt":"2017-09-30T20:31:38","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22457","RelatedDescription":"Opened pull request \"Fixes: #22456\" (#22457) at dotnet/roslyn","RelatedBody":"Fixes: #22456"},{"Id":"6658500939","Type":"IssuesEvent","CreatedAt":"2017-09-30T20:05:34","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22456","RelatedDescription":"Opened issue \"When `in` argument matches `in` parameter we forget to record that in escape analysis\" (#22456) at dotnet/roslyn","RelatedBody":"As a result we may report false and misleading escape errors:\r\n\r\n```cs\r\n        static ref readonly int F1(in int x)\r\n        {\r\n            return ref F1(in x); // false eror here\r\n        }\r\n```\r\nSince we did not mark \"x\" parameter as matched by an argument, we think it was supplied optional value and the whole call is not safe to return.\r\n\r\n"},{"Id":"6658458438","Type":"IssuesEvent","CreatedAt":"2017-09-30T19:32:09","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22455","RelatedDescription":"Opened issue \"`in` and `out` arguments should be disallowed in `__arglist`\" (#22455) at dotnet/roslyn","RelatedBody":"varargs should disallow  `out` and `in` arguments. There is no way the calee can express its part of the contract.\r\n\r\nWe currently allow both and `out` was allowed in old compiler versions too. We should disallow both. \r\n\r\nArguably it would be a breaking change for `out`, but it is very unlikely it would affect real code. \r\n\r\n\r\n\r\n"},{"Id":"6658424886","Type":"IssuesEvent","CreatedAt":"2017-09-30T19:06:00","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22454","RelatedDescription":"Opened issue \"Keyword recommender needs adjustments for \"in\" arguments\" (#22454) at dotnet/roslyn","RelatedBody":"![image](https://user-images.githubusercontent.com/8218165/31048699-92bb01f4-a5d7-11e7-984e-72f3d22099c0.png)\r\n\r\nNo \"in\" in the completion list."},{"Id":"6658409282","Type":"IssuesEvent","CreatedAt":"2017-09-30T18:54:48","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22453","RelatedDescription":"Opened issue \"Metadata view should not show wellknown/embedded attributes\" (#22453) at dotnet/roslyn","RelatedBody":"\r\n![image](https://user-images.githubusercontent.com/8218165/31048358-287ddd86-a5d0-11e7-8d9a-5dd0015f3a29.png)\r\n\r\nNone of the attributes are really expected in this view. \r\nThey do exist in metadata, but since we show something that looks like source, they should be mapped to language features.\r\n\r\nThis is not a valid syntax. I'd expect something like\r\n\r\n```cs\r\npublic readonly ref struct ReadOnlySpan<T>\r\n```\r\n\r\nNot sure if this is a matter of symbol display (Compiler) or some higher layer in IDE."},{"Id":"6658367758","Type":"PullRequestEvent","CreatedAt":"2017-09-30T18:22:20","Actor":"AdamSpeight2008","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22452","RelatedDescription":"Opened pull request \"Change to use Shared Collection\" (#22452) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n**Risk**\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n**Performance impact**\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n**Is this a regression from a previous update?**\r\n\r\n**Root cause analysis:**\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n**How was the bug found?**\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n**Test documentation updated?**\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6657342354","Type":"PullRequestEvent","CreatedAt":"2017-09-30T03:55:55","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4620","RelatedDescription":"Merged pull request \"Add placeholder build option for WebAssembly\" (#4620) at dotnet/corert","RelatedBody":"This commit adds a placeholder build target for WebAssembly to the bash and batch build scripts (#4504).\r\n\r\nAt present, an error is displayed advising that the wasm build is not yet implemented before exiting.\r\n\r\nI was hoping to try and take a look at the cmake scripts for #4505, and this seemed like a sensible first step. "},{"Id":"6656625845","Type":"PullRequestEvent","CreatedAt":"2017-09-29T21:27:02","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4639","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4639) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6656429635","Type":"PullRequestEvent","CreatedAt":"2017-09-29T20:33:53","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4638","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#4638) at dotnet/corert","RelatedBody":""},{"Id":"6656429216","Type":"PullRequestEvent","CreatedAt":"2017-09-29T20:33:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4638","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#4638) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"912821941706268673","CreatedAt":"2017-09-26T23:31:24+00:00","UserScreenname":"dotnet","Text":"Build a web service with F# and .NET Core 2.0 https://t.co/2jSgo1gbty","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":112,"FavoriteCount":64,"RawContent":null},{"Id":"912406212238442498","CreatedAt":"2017-09-25T19:59:27+00:00","UserScreenname":"dotnet","Text":".NET Framework September 2017 Preview of Quality Rollup https://t.co/tkuoBxjYHC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":30,"FavoriteCount":19,"RawContent":null},{"Id":"911357565769936896","CreatedAt":"2017-09-22T22:32:30+00:00","UserScreenname":"dotnet","Text":".NET Core September 2017 Update — macOS High Sierra Support https://t.co/k9gJ5jFIN8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":24,"RawContent":null},{"Id":"911015945291919360","CreatedAt":"2017-09-21T23:55:01+00:00","UserScreenname":"dotnet","Text":"Last one! Happening now on .NET Fundamentals Track @ #dotNETConf: Learn how to use #FSharp to write front-end &amp; bac… https://t.co/OH8cMAcq4I","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":26,"FavoriteCount":16,"RawContent":null},{"Id":"911005750410960896","CreatedAt":"2017-09-21T23:14:31+00:00","UserScreenname":"dotnet","Text":"PSA: .NET Framework September Update - known issues published https://t.co/1yk2xwnrvP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":11,"RawContent":null},{"Id":"911000845860458498","CreatedAt":"2017-09-21T22:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Get started w/ #FSharp, .NET Core &amp; #VSCode. Watch… https://t.co/VRkwBvSNPU","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":31,"FavoriteCount":15,"RawContent":null},{"Id":"910988157197344768","CreatedAt":"2017-09-21T22:04:36+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 Accessibility and WPF Improvements https://t.co/eZLFQxhlLj","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":52,"RawContent":null}]}},"RunOn":"2017-10-01T05:30:17.6913997Z","RunDurationInMilliseconds":6513}