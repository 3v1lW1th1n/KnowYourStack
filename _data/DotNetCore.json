{"Data":{"Blog":{"FeedItems":[{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7498453218","Type":"PullRequestEvent","CreatedAt":"2018-04-09T04:44:08","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17477","RelatedDescription":"Opened pull request \"Fix trigger for tier 1 call counting delay\" (#17477) at dotnet/coreclr","RelatedBody":"The trigger was taking into account all non-tier-1 JIT invocations to delay call counting, even for those methods that are not eligible for tiering. In the AllReady benchmark, some dynamic methods were being jitted frequently enough to not allow tier 1 call counting to begin. Fixed to count only eligible methods jitted at tier 0, such that methods not eligible for tiering don't interfere with the tiering heuristics."},{"Id":"7498144733","Type":"PullRequestEvent","CreatedAt":"2018-04-09T02:32:56","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17476","RelatedDescription":"Opened pull request \"Fix x86 steady state tiered compilation performance\" (#17476) at dotnet/coreclr","RelatedBody":"Fixes #17475\r\n\r\nAlso included - a few tiered compilation only test hooks + small logging fix for JitBench\r\n\r\nTiered compilation wasn't correctly implementing the MayHavePrecode and RequiresStableEntryPoint policy functions. On x64 this was a non-issue, but due to compact entrypoints on x86 it lead to methods allocating both FuncPtrStubs and Precodes. The FuncPtrStubs would never get backpatched which caused never ending invocations of the Prestub for some methods. Although such code still runs correctly, it is much slower than it needs to be. On MusicStore x86 I am seeing a 20% improvement in steady state RPS after this fix, bringing us inline with what I've seen on x64.\r\n\r\nAs of now - without tiered compilation:\r\n\r\n```\r\n============= Startup Performance ============\r\n\r\nServer start (ms):   739\r\n1st Request (ms):    688\r\nTotal (ms):         1427\r\n\r\n\r\n\r\n========== Steady State Performance ==========\r\n\r\n  Requests    Aggregate Time(ms)    Req/s   Req Min(ms)   Req Mean(ms)   Req Median(ms)   Req Max(ms)   SEM(%)\r\n-----------   ------------------   ------   -----------   ------------   --------------   -----------   ------\r\n    2-  100                 1820   251.48          3.33           3.98             3.79         16.42     3.31\r\n  101-  250                 2406   256.26          3.16           3.90             3.82         12.43     1.69\r\n  251-  500                 3352   264.10          3.20           3.79             3.72          8.88     0.76\r\n  501-  750                 4293   265.60          3.16           3.77             3.69          7.70     0.70\r\n  751- 1000                 5235   265.42          2.80           3.77             3.71          7.73     0.77\r\n 1001- 1500                 7148   261.38          2.73           3.83             3.70         11.37     0.76\r\n 1501- 2000                 9016   267.76          3.04           3.73             3.69          6.14     0.40\r\n 2001- 3000                12753   267.57          3.08           3.74             3.69          6.68     0.27\r\n 3001- 5000                20281   265.68          3.05           3.76             3.71          6.81     0.20\r\n 5001-10000                39027   266.71          2.88           3.75             3.70          6.40     0.13\r\n```\r\n\r\nWith tiered compilation:\r\n\r\n```\r\n============= Startup Performance ============\r\n\r\nServer start (ms):   671\r\n1st Request (ms):    540\r\nTotal (ms):         1211\r\n\r\n\r\n\r\n========== Steady State Performance ==========\r\n\r\n  Requests    Aggregate Time(ms)    Req/s   Req Min(ms)   Req Mean(ms)   Req Median(ms)   Req Max(ms)   SEM(%)\r\n-----------   ------------------   ------   -----------   ------------   --------------   -----------   ------\r\n    2-  100                 1732   189.77          3.37           5.27             4.33         18.23     4.70\r\n  101-  250                 2345   244.66          3.20           4.09             3.98         13.00     1.81\r\n  251-  500                 3202   291.77          2.43           3.43             3.42          6.07     0.94\r\n  501-  750                 3984   319.69          2.45           3.13             3.02         20.45     2.33\r\n  751- 1000                 4746   328.26          2.48           3.05             2.97          6.79     0.87\r\n 1001- 1500                 6277   326.59          2.42           3.06             3.01          5.17     0.46\r\n 1501- 2000                 7776   333.43          2.42           3.00             2.96          4.93     0.46\r\n 2001- 3000                10759   335.22          2.14           2.98             2.95          5.97     0.31\r\n 3001- 5000                16845   328.62          2.11           3.04             2.99          5.51     0.24\r\n 5001-10000                31859   333.03          2.13           3.00             2.96          5.55     0.14\r\n```\r\n"},{"Id":"7498128178","Type":"IssuesEvent","CreatedAt":"2018-04-09T02:26:19","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17475","RelatedDescription":"Opened issue \"[Tiered Compilation] MusicStore Windows x86 steady state performance doesn't have the win we see on x64\" (#17475) at dotnet/coreclr","RelatedBody":"On Windows X64 MusicStore we typically see a 20% improvement from TC in the perf lab but x86 shows very little improvement. The difference is unexpected and likely a bug."},{"Id":"7498115788","Type":"IssuesEvent","CreatedAt":"2018-04-09T02:21:21","Actor":"roterdam","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17474","RelatedDescription":"Opened issue \"multiple coreclr in single win32 process fails\" (#17474) at dotnet/coreclr","RelatedBody":"I try to load multiple coreclr in a single process on win32 (64-bit) and it failed.\r\n\r\nBasically I tried to load coreclr 2.0 and coreclr 2.1 with different paths and it did not work.\r\n\r\nMy suspicion is that now since GC and JIT are seperate dlls they must be interfering.\r\n\r\nI would love if this scenario is supported as for my scripting engine I need isolation of scripts. I'm willing to rebuild coreclr myself but need to know if there will be more roadblocks ahead."},{"Id":"7497414138","Type":"IssuesEvent","CreatedAt":"2018-04-08T19:29:36","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17473","RelatedDescription":"Opened issue \"JIT: simple benchmark highlights some CQ issues\" (#17473) at dotnet/coreclr","RelatedBody":"Here are some simple methods where codegen could be improved. Original from aspnet/Signalr#1900. \r\n\r\n```C#\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private bool InMethod(in bool? value1, in bool? value2, in bool? value3)\r\n    {\r\n        return value1.HasValue && value2.HasValue && value3.HasValue;\r\n    }\r\n    \r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private bool NormalMethod(bool? value1, bool? value2, bool? value3)\r\n    {\r\n        return value1.HasValue && value2.HasValue && value3.HasValue;\r\n    }\r\n    \r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private bool InMethod(in bool value1, in bool value2, in bool value3)\r\n    {\r\n        return value1 && value2 && value3;\r\n    }\r\n    \r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private bool NormalMethod(bool value1, bool value2, bool value3)\r\n    {\r\n        return value1 && value2 && value3;\r\n    }\r\n```\r\ncurrent codegen below\r\n```asm\r\n; Assembly listing for method P:InMethod(byref,byref,byref):bool:this\r\n; Emitting BLENDED_CODE for X64 CPU with AVX\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;* V00 this         [V00    ] (  0,  0   )     ref  ->  zero-ref    this class-hnd\r\n;  V01 arg1         [V01,T00] (  4,  4   )   byref  ->  rdx\r\n;  V02 arg2         [V02,T01] (  4,  3   )   byref  ->   r8\r\n;  V03 arg3         [V03,T02] (  4,  3   )   byref  ->   r9\r\n;* V04 loc0         [V04    ] (  0,  0   )  struct ( 8) zero-ref    ld-addr-op\r\n;  V05 tmp0         [V05,T03] (  6,  4   )    bool  ->  rax         V04.hasValue(offs=0x00) P-INDEP\r\n;* V06 tmp1         [V06    ] (  0,  0   )    bool  ->  zero-ref    V04.value(offs=0x01) P-INDEP\r\n;# V07 OutArgs      [V07    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M21426_IG01:\r\n\r\nG_M21426_IG02:\r\n       0FB602               movzx    rax, byte  ptr [rdx]\r\n       0FB65201             movzx    rdx, byte  ptr [rdx+1]  // not needed\r\n       84C0                 test     al, al\r\n       741A                 je       SHORT G_M21426_IG04\r\n       410FB600             movzx    rax, byte  ptr [r8]\r\n       410FB65001           movzx    rdx, byte  ptr [r8+1]   // not needed\r\n       84C0                 test     al, al\r\n       740D                 je       SHORT G_M21426_IG04\r\n       410FB601             movzx    rax, byte  ptr [r9]\r\n       410FB65101           movzx    rdx, byte  ptr [r9+1]   // not needed\r\n       0FB6C0               movzx    rax, al\r\n\r\nG_M21426_IG03:\r\n       C3                   ret\r\n\r\nG_M21426_IG04:\r\n       33C0                 xor      eax, eax\r\n\r\nG_M21426_IG05:\r\n       C3                   ret\r\n\r\n; Total bytes of code 40, prolog size 0 for method P:InMethod(byref,byref,byref):bool:this\r\n; ============================================================\r\n; Assembly listing for method P:NormalMethod(struct,struct,struct):bool:this\r\n; Emitting BLENDED_CODE for X64 CPU with AVX\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;* V00 this         [V00    ] (  0,  0   )     ref  ->  zero-ref    this class-hnd\r\n;  V01 arg1         [V01,T00] (  3,  3   )  struct ( 8) [rsp+0x10]   do-not-enreg[SF] ld-addr-op\r\n;  V02 arg2         [V02,T01] (  3,  2.50)  struct ( 8) [rsp+0x18]   do-not-enreg[SF] ld-addr-op\r\n;  V03 arg3         [V03,T02] (  3,  2.50)  struct ( 8) [rsp+0x20]   do-not-enreg[SF] ld-addr-op\r\n;# V04 OutArgs      [V04    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M43454_IG01:\r\n       4889542410           mov      qword ptr [rsp+10H], rdx   // could avoid these stores\r\n       4C89442418           mov      qword ptr [rsp+18H], r8\r\n       4C894C2420           mov      qword ptr [rsp+20H], r9\r\n\r\nG_M43454_IG02:\r\n       807C241000           cmp      byte  ptr [rsp+10H], 0   // could be [rdx]\r\n       740D                 je       SHORT G_M43454_IG04\r\n       807C241800           cmp      byte  ptr [rsp+18H], 0   // could be [r8]\r\n       7406                 je       SHORT G_M43454_IG04\r\n       0FB6442420           movzx    rax, byte  ptr [rsp+20H]   // could be [r9]\r\n\r\nG_M43454_IG03:\r\n       C3                   ret\r\n\r\nG_M43454_IG04:\r\n       33C0                 xor      eax, eax\r\n\r\nG_M43454_IG05:\r\n       C3                   ret\r\n\r\n; Total bytes of code 38, prolog size 0 for method P:NormalMethod(struct,struct,struct):bool:this\r\n; ============================================================\r\n; Assembly listing for method P:InMethod(byref,byref,byref):bool:this\r\n; Emitting BLENDED_CODE for X64 CPU with AVX\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;* V00 this         [V00    ] (  0,  0   )     ref  ->  zero-ref    this class-hnd\r\n;  V01 arg1         [V01,T00] (  3,  3   )   byref  ->  rdx\r\n;  V02 arg2         [V02,T01] (  3,  3   )   byref  ->   r8\r\n;  V03 arg3         [V03,T02] (  3,  3   )   byref  ->   r9\r\n;# V04 OutArgs      [V04    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M21423_IG01:\r\n\r\nG_M21423_IG02:\r\n       0FB602               movzx    rax, byte  ptr [rdx]\r\n       410FB610             movzx    rdx, byte  ptr [r8]\r\n       23C2                 and      eax, edx\r\n       410FB611             movzx    rdx, byte  ptr [r9]\r\n       23C2                 and      eax, edx\r\n\r\nG_M21423_IG03:\r\n       C3                   ret\r\n\r\n; Total bytes of code 16, prolog size 0 for method P:InMethod(byref,byref,byref):bool:this\r\n; ============================================================\r\n; Assembly listing for method P:NormalMethod(bool,bool,bool):bool:this\r\n; Emitting BLENDED_CODE for X64 CPU with AVX\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;* V00 this         [V00    ] (  0,  0   )     ref  ->  zero-ref    this class-hnd\r\n;  V01 arg1         [V01,T00] (  3,  3   )    bool  ->  rdx\r\n;  V02 arg2         [V02,T01] (  3,  3   )    bool  ->   r8\r\n;  V03 arg3         [V03,T02] (  3,  3   )    bool  ->   r9\r\n;# V04 OutArgs      [V04    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M43451_IG01:\r\n\r\nG_M43451_IG02:\r\n       0FB6C2               movzx    rax, dl    // could avoid widening here\r\n       410FB6D0             movzx    rdx, r8b   // and here\r\n       23C2                 and      eax, edx\r\n       410FB6D1             movzx    rdx, r9b   // and here\r\n       23C2                 and      eax, edx\r\n       0FB6C0               movzx    rax, al\r\n\r\nG_M43451_IG03:\r\n       C3                   ret\r\n\r\n; Total bytes of code 19, prolog size 0 for method P:NormalMethod(bool,bool,bool):bool:this\r\n```\r\nThis last methods codegen would ideally be:\r\n```asm\r\nmov al, dl\r\nand al, r8b\r\nand al, r9b\r\nmovzx, rax, al\r\nret\r\n```"},{"Id":"7497357687","Type":"PullRequestEvent","CreatedAt":"2018-04-08T18:56:46","Actor":"mikedn","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17472","RelatedDescription":"Opened pull request \"[WIP] Remove StringBufferObject\" (#17472) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7497361970","Type":"PullRequestEvent","CreatedAt":"2018-04-08T18:59:10","Actor":"mlorbetske","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9019","RelatedDescription":"Opened pull request \"Update test templates to use the 15.7.0 test SDK\" (#9019) at dotnet/cli","RelatedBody":"cc @mayankbansal018"},{"Id":"7493863270","Type":"PullRequestEvent","CreatedAt":"2018-04-07T01:37:59","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9014","RelatedDescription":"Closed pull request \"WIP consume bring your own shim(byos)\" (#9014) at dotnet/cli","RelatedBody":"pending loc. and rebase master. and order commits"},{"Id":"7493862950","Type":"PullRequestEvent","CreatedAt":"2018-04-07T01:37:43","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9018","RelatedDescription":"Opened pull request \"WIP consume bring your own shim(byos)\" (#9018) at dotnet/cli","RelatedBody":"pending loc and order commits"},{"Id":"7493770750","Type":"PullRequestEvent","CreatedAt":"2018-04-07T00:39:59","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8997","RelatedDescription":"Merged pull request \"Add TryGetMostFitRuntimeIdentifier\" (#8997) at dotnet/cli","RelatedBody":"This is the most tricky part of consume bring your own shim. CLI will need to select the most fit RID given the shims folder layout in nupkg. This function is to pick that. \r\n\r\nSay there is folder `win10-x64, win-x64, win, linux`, CLI need to pick the right shim folder to use according to machine RID (say it is windows 10 x64). And this function take these rids as input and return `win10-x64`."},{"Id":"7493586483","Type":"PullRequestEvent","CreatedAt":"2018-04-06T23:11:21","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8982","RelatedDescription":"Closed pull request \"WIP Embed relative path\" (#8982) at dotnet/cli","RelatedBody":"After review I will squash this PR and add to master merge. Since master has no side car apphost already https://github.com/dotnet/cli/pull/9012#issuecomment-379310833"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7494259493","Type":"IssuesEvent","CreatedAt":"2018-04-07T07:16:24","Actor":"voltagex","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/703","RelatedDescription":"Opened issue \"Dependency trees, or: why is System.Drawing.Primitives being deployed in a console app?\" (#703) at dotnet/standard","RelatedBody":"I've got a console app that I've turned on linking and trimming for. A complete standalone version targetting win-x64 is about 40MB, which isn't too bad I guess.\r\n\r\nWhat I can't work out is *why* some of the runtime is being included in a simple app, e.g.\r\n\r\n* System.Security.Claims.dll (unused)\r\n\r\n* System.IO.Compression.dll (unused)\r\n\r\n* System.Drawing.Primitives.dll (System.Drawing is removed by linking/trimming but this one isn't)\r\n\r\nI'd like to be able to see *why* certain assemblies are being pulled in, and if they're not needed, get rid of them completely."},{"Id":"7493163502","Type":"PullRequestEvent","CreatedAt":"2018-04-06T21:02:10","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/701","RelatedDescription":"Merged pull request \"Stabalize 2.0.2 NETStandard.Library package\" (#701) at dotnet/standard","RelatedBody":"cc @ericstj @joperezr \r\n\r\nRelease notes for 2.0.2:\r\n - Issue https://github.com/dotnet/standard/issues/442 Adding .NET Standard/.NET Framework facades assemblies is consuming 11% of build time - fixed in https://github.com/dotnet/standard/pull/510"},{"Id":"7489176150","Type":"IssuesEvent","CreatedAt":"2018-04-06T06:21:59","Actor":"RajeshBalakrishnan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/702","RelatedDescription":"Opened issue \".Net Standard - Directory Services\" (#702) at dotnet/standard","RelatedBody":"Greetings,\r\n\r\nWe are migrating ,net code to ,net standard 2.0. We see \"PrincipalContext\", \"ConnectionOptions\", \"ManagementPath\", \"ObjectQuery\", \"ManagementObjectSearcher\", and \"ManagementObject\" classes are mssing in .Net standard 2.0.\r\n\r\n1. We have used \"PrincipalContext\" class to authenciate Windows user credentials. Can you let us know how to authenciate the user credentials in .Net standard??? Is there any API available???\r\n\r\n2. We have used \"WMI\" query to read the \"Manufacturer\" and \"Model\" details. Can you let us know how to read the same in .Net standard??? Is there any API available???\r\n\r\nThank you"},{"Id":"7487635910","Type":"PullRequestEvent","CreatedAt":"2018-04-05T21:08:50","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/701","RelatedDescription":"Opened pull request \"Stabalize 2.0.2 NETStandard.Library package\" (#701) at dotnet/standard","RelatedBody":"cc @ericstj @joperezr \r\n\r\nRelease notes for 2.0.2:\r\n - Issue https://github.com/dotnet/standard/issues/442 Adding .NET Standard/.NET Framework facades assemblies is consuming 11% of build time - fixed in https://github.com/dotnet/standard/pull/510"},{"Id":"7481565567","Type":"PullRequestEvent","CreatedAt":"2018-04-04T21:05:28","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/700","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02704-01 (master)\" (#700) at dotnet/standard","RelatedBody":""},{"Id":"7481560439","Type":"PullRequestEvent","CreatedAt":"2018-04-04T21:04:25","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/695","RelatedDescription":"Merged pull request \"Update BuildTools to preview3-02703-02 (master)\" (#695) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7498553368","Type":"IssuesEvent","CreatedAt":"2018-04-09T05:27:35","Actor":"Thaina","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28932","RelatedDescription":"Opened issue \"`Linq.Enumerable.Any` should return false on null\" (#28932) at dotnet/corefx","RelatedBody":"For `Any` function on collection, we should treat null collection as empty\r\n\r\nAnd I think `predicate` should be `null` as default parameter\r\n\r\nIt could be another similar name for compatibility catch but please contain it within corefx"},{"Id":"7498543667","Type":"PullRequestEvent","CreatedAt":"2018-04-09T05:23:50","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28931","RelatedDescription":"Opened pull request \"Fix regression on OpenSsl exception message\" (#28931) at dotnet/corefx","RelatedBody":"Managed code relies on SSL error queue to give proper error information. PAL layer was clearing up the error queue and the exception messages were not precise.\r\n\r\nThis changes returns to the state before in which the managed side was in charge of cleaning up the queue (basically we care only about the last error). Perhaps in the future we should look in changing the PAL signature and doing all at once in the same place, but, as it is the fix gets us to where we were before.\r\n\r\nRemoving the error queue clean up is not a concern in light of the investigation of #25676 and as it is the managed will clean up the queue whenever necessary.\r\n\r\nFixes #28365\r\n\r\n(Separating this PR from the one for #25676 since that one can take more time, but it will have the same fix and I've been testing it on the PR already)."},{"Id":"7498519522","Type":"IssuesEvent","CreatedAt":"2018-04-09T05:13:56","Actor":"hozjanmarko","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28504","RelatedDescription":"Closed issue \"System.Security.Cryptography.Pkcs '1.2.840.113549.1.1.5' is not a known hash algorithm.\" (#28504) at dotnet/corefx","RelatedBody":"i'm trying to compute a cms SHA1RSA using the pre release version(4.5.0-preview1-26216-02) of System.Security.Cryptography.Pkcs.\r\n\r\nOid.FromFriendlyName(\"SHA1RSA\",OidGroup.SignatureAlgorithm) returns the corect digest algorithem, but upon calling encode, i get the exception that i,m not using any known hash algorithm.\r\n\r\nIs there any short term plan to incorporate it?\r\n\r\nEncoding snippet:----------\r\nprotected byte[] GenerateSignature(byte[] fileContent)\r\n        {\r\n            CmsSigner signer = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, ClientCert);\r\n            SignedCms signedCms = new SignedCms(new ContentInfo(fileContent), false);\r\n            signer = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, ClientCert);\r\n            signer.DigestAlgorithm = Oid.FromFriendlyName(\"SHA1RSA\",OidGroup.SignatureAlgorithm);\r\n            signedCms.ComputeSignature(signer, false);\r\n            var signature = signedCms.Encode();\r\n            return signature;\r\n        }"},{"Id":"7498409379","Type":"IssuesEvent","CreatedAt":"2018-04-09T04:24:27","Actor":"Thaina","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28930","RelatedDescription":"Reopened issue \"Implicit conversion between KeyValuePair and Tuple\" (#28930) at dotnet/corefx","RelatedBody":"Please add implicit conversion from Tuple to KeyValuePair\r\n\r\nShould be able to\r\n```C#\r\nKeyValuePair<string,int> kvp = (\"\",0);\r\n```"},{"Id":"7498405855","Type":"IssuesEvent","CreatedAt":"2018-04-09T04:22:50","Actor":"Thaina","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28930","RelatedDescription":"Closed issue \"Implicit conversion between KeyValuePair and Tuple\" (#28930) at dotnet/corefx","RelatedBody":"Please add implicit conversion from KeyValuePair and Tuple and vice versa\r\n\r\nShould be deconstruct to `(key,value)`"},{"Id":"7498397726","Type":"IssuesEvent","CreatedAt":"2018-04-09T04:19:09","Actor":"Thaina","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28930","RelatedDescription":"Opened issue \"Implicit conversion between KeyValuePair and Tuple\" (#28930) at dotnet/corefx","RelatedBody":"Please add implicit conversion from KeyValuePair and Tuple and vice versa\r\n\r\nShould be deconstruct to `(key,value)`"},{"Id":"7498041219","Type":"PullRequestEvent","CreatedAt":"2018-04-09T01:50:24","Actor":"ianhays","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28902","RelatedDescription":"Merged pull request \"Disable Tizen CI runs\" (#28902) at dotnet/corefx","RelatedBody":"Still allows them to be run when explicitly requested, but they will no longer be run per-pr or on push\r\n\r\nrelated: https://github.com/dotnet/corefx/issues/28901"},{"Id":"7498001596","Type":"IssuesEvent","CreatedAt":"2018-04-09T01:31:40","Actor":"JamesNK","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28929","RelatedDescription":"Opened issue \"Unbound channel + calling complete with zero items written = poor performance\" (#28929) at dotnet/corefx","RelatedBody":"SignalR is using an unbound channel in a benchmark and we have noticed odd performance.\r\n\r\nWriting one item and then calling complete is significantly faster than writing zero items and calling complete.\r\n\r\n```\r\n                            Method |       Mean |     Error |    StdDev |      Op/s |   Gen 0 |  Gen 1 | Allocated |\r\n---------------------------------- |-----------:|----------:|----------:|----------:|--------:|-------:|----------:|\r\n     StreamChannelReaderCount_Zero |  69.397 us | 2.8020 us | 2.7519 us |  14,409.9 |  0.1221 |      - |    4135 B |\r\n      StreamChannelReaderCount_One |   8.040 us | 0.4524 us | 0.4443 us | 124,384.6 |  0.0153 |      - |    4012 B |\r\n```\r\n\r\nCode:\r\n\r\nhttps://github.com/aspnet/SignalR/blob/bd78785f8d36be6e650ac60813b8d9c1ca9983d3/benchmarks/Microsoft.AspNetCore.SignalR.Microbenchmarks/DefaultHubDispatcherBenchmark.cs#L144-L158\r\n\r\nAdditional investigation:\r\n\r\nhttps://github.com/aspnet/SignalR/issues/1811#issuecomment-379601460"},{"Id":"7497790914","Type":"PullRequestEvent","CreatedAt":"2018-04-08T23:24:06","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28928","RelatedDescription":"Opened pull request \"Aggressive Inline fast-path of BuffersExtensions split methods\" (#28928) at dotnet/corefx","RelatedBody":"Methods are split into a fast-path inline path and a slower non-inline path. Aggressively inline the fast-path.\r\n\r\nfrom https://github.com/aspnet/SignalR/pull/1907#issuecomment-379589824\r\n\r\n/cc @ahsonkhan @pakrym @davidfowl @JamesNK "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7498319043","Type":"IssuesEvent","CreatedAt":"2018-04-09T03:45:05","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/10622","RelatedDescription":"Closed issue \"Does a BoundPropertyPattern always contain BoundPropertyPatternMember?\" (#10622) at dotnet/roslyn","RelatedBody":"Currently, in the bound trees, a `BoundSubPropertyPattern` always contains `BoundPropertyPatternMember`s. But the list is statically typed as a list of expressions.\n\nThe list of expressions would be useful if we want to be more relaxed, for example for error recovery.\n\nIf we don't want to be more relaxed, we should tighten the typing on the list, and then we can stop converting the `Member` field to `BoundPropertyPatternMember` in the code.\n\nWe should make a decision one way or the other, and reflect that decision uniformly in the code. It is currently in an inconsistent state.\n"},{"Id":"7498312551","Type":"IssuesEvent","CreatedAt":"2018-04-09T03:42:15","Actor":"FizzerWL","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26029","RelatedDescription":"Opened issue \"\"No assembly containing System.Object was found\" when using Roslyn to build a class library loaded from csproj\" (#26029) at dotnet/roslyn","RelatedBody":"Hello,\r\n\r\nSince updating my version of VS, I can no longer use Roslyn to build class libraries.  Using MSBuildWorkspace.Create().OpenSolution doesn't seem to load the project references, resulting in the error \"No value for RuntimeMetadataVersion found. No assembly containing System.Object was found\".\r\n\r\nI have created a [repro sample](https://github.com/FizzerWL/ErrorRepro) that demonstrates the problem.  This has two solutions: A simple class library solution with two projects, one that references the other.  The second solution is a roslyn app that loads the first solution with MSBuildWorkspace.Create().OpenSolution and tries to build it.\r\n\r\n**Version Used**: Visual Studio Community 15.6.5 \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Clone minimal repro solution at https://github.com/FizzerWL/ErrorRepro\r\n2. Open Builder/Builder.sln\r\n3. Build+Run\r\n\r\n**Expected Behavior**:  Program runs without errors.\r\n\r\n**Actual Behavior**:  Program fails and outputs tons of errors, caused by references not being loaded:\r\n> Unhandled Exception: System.Exception: Build failed. 47 errors:\r\n> warning CS8021: No value for RuntimeMetadataVersion found. No assembly containing System.Object was found nor was a value for RuntimeMetadataVersion specified through options.\r\n> Class1.cs(1,7):  error CS0246: The type or namespace name 'System' could not be found\r\n\r\nOther references to this error message on Stackoverflow and such suggest manually adding a reference to mscorlib to fix the error.  However, this should not be necessary since all references should be automatically loaded out of the csproj file.\r\n\r\nThank you!"},{"Id":"7497772731","Type":"IssuesEvent","CreatedAt":"2018-04-08T23:10:46","Actor":"Neme12","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26028","RelatedDescription":"Opened issue \"Assertion failure in PreciseAbstractFlowPass: \"last comes before first\"\" (#26028) at dotnet/roslyn","RelatedBody":"1. Checkout master & run a debug build of VisualStudioSetup.Next\r\n2. Paste the following code & put cursor after 'x':\r\n```c#\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        foreach (var x\r\n    }\r\n}\r\n```\r\n\r\nThis is what I get:\r\n![image](https://user-images.githubusercontent.com/11444821/38473592-b270d7c0-3b92-11e8-9c2f-7431cddfb886.png)\r\n"},{"Id":"7497640637","Type":"IssuesEvent","CreatedAt":"2018-04-08T21:41:43","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26027","RelatedDescription":"Opened issue \"QuickInfo shows type for `default` literal, but not `null` literal\" (#26027) at dotnet/roslyn","RelatedBody":"Both `default` and `null` get an inferred type, which the compiler exposes via semantic model.\r\nI think QuickInfo should show the type in both cases.\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/38472834-b55a7318-3b3a-11e8-8bc1-96452c1f90d9.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/38472847-d4489eee-3b3a-11e8-8c8e-eab895c38c0b.png)\r\n"},{"Id":"7497581463","Type":"PullRequestEvent","CreatedAt":"2018-04-08T21:05:29","Actor":"Neme12","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26026","RelatedDescription":"Opened pull request \"Suggested names inside foreach\" (#26026) at dotnet/roslyn","RelatedBody":"fixes #26021"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7495566320","Type":"IssuesEvent","CreatedAt":"2018-04-07T22:18:07","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5662","RelatedDescription":"Opened issue \"Support for building GUI applications on Windows\" (#5662) at dotnet/corert","RelatedBody":"This tracks adding support for `OutputType=Winexe` in projects published with CoreRT. This will help things like MonoGame games, and Avalonia.\r\n\r\nWe currently treat everything that is not `Library` as `Exe`. This means there's an ugly console window open for all programs.\r\n\r\nRough set of workitems:\r\n- [ ] Pipe through `Winexe` as a [command line option](https://github.com/dotnet/corert/blob/7ce5d362dd49aeacf40071b1623181b2a477583a/src/BuildIntegration/Microsoft.NETCore.Native.Windows.props) to the linker. We'll want to set the `/subsystem` option.\r\n\r\nStretch goal:\r\n- [ ] Look at `System.Private.DeveloperExperience.Console` - we won't need the support that prints exception stack traces to the console when the app crashes with an unhandled managed exception."},{"Id":"7495543239","Type":"IssuesEvent","CreatedAt":"2018-04-07T22:01:15","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5661","RelatedDescription":"Opened issue \"Bad codegen in Boolean::TryParse\" (#5661) at dotnet/corert","RelatedBody":"`TryParse(ReadOnlySpan<char> value, out bool result)` accesses two string literals and makes a Span out of them - \"True\" and \"False\".\r\n\r\nRyuJIT with optimizations enabled will reuse the first Span for \"True\" instead of making a new one for \"False\".\r\n\r\nTo repro, simply compile `Console.WriteLine(Boolean.Parse(\"False\"));` with optimizations enabled. It will throw an exception because we don't match \"False\" to \"False\", but try to match \"True\" twice.\r\n\r\nMy guess is there's something wrong with this piece of code in RyuJIT:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/0f0320e58fd006a02cdecf7ae45426f54da333e5/src/jit/gentree.cpp#L6426-L6430"},{"Id":"7494917205","Type":"PullRequestEvent","CreatedAt":"2018-04-07T15:19:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5660","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5660) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7493938989","Type":"IssuesEvent","CreatedAt":"2018-04-07T02:36:10","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5173","RelatedDescription":"Closed issue \"Implement Main return code on WebAssembly\" (#5173) at dotnet/corert","RelatedBody":"Currently, the generated WebAssembly method that calls into Main doesn't handle Main's return code and just returns a hard-coded value. The code that generates it is in ```WebAssemblyObjectWriter.EmitNativeMain```. If Main returns a value, the native caller should ```alloca``` a spot for it to write the return value and pass that as the second parameter to Main and then return the value from that spot."},{"Id":"7493937892","Type":"PullRequestEvent","CreatedAt":"2018-04-07T02:35:18","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5621","RelatedDescription":"Merged pull request \"Initialize modules and run StartupCodeMain in wasm\" (#5621) at dotnet/corert","RelatedBody":"Enables running InitializeModules and StartupCodeMain for WebAssembly. This should be at least most of what we need for runtime/codegen integration (interfaces, reflection, etc). Also includes some miscellaneous bug fixes required to make those work and a workaround for #5614 in ```CreateTypeManagers```.\r\n\r\nFixes #5554  #5173"},{"Id":"7493937885","Type":"IssuesEvent","CreatedAt":"2018-04-07T02:35:18","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5554","RelatedDescription":"Closed issue \"Initialize modules on startup\" (#5554) at dotnet/corert","RelatedBody":"In order to use many runtime features (interface dispatch, reflection, resources, etc), we need to call InitializeModules on startup and call the compiler-generated StartupCodeMain method to initialize those features. \r\n\r\nAn initial attempt at doing that and fixing some of the issues is at https://github.com/morganbr/corert/commit/47fe52829be365a4133ef1d833569d858a8f98d6. There are still (undebugged) failures on startup in that commit."},{"Id":"7491941890","Type":"PullRequestEvent","CreatedAt":"2018-04-06T16:30:06","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5660","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5660) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7491924262","Type":"PullRequestEvent","CreatedAt":"2018-04-06T16:26:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5658","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5658) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7491593092","Type":"PullRequestEvent","CreatedAt":"2018-04-06T15:22:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5659","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5659) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7496618203","Type":"IssuesEvent","CreatedAt":"2018-04-08T11:24:44","Actor":"Xiu-Li","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2119","RelatedDescription":"Opened issue \"Target Multi-TFM net461 and netcoreapp2.1, restore failed.\" (#2119) at dotnet/sdk","RelatedBody":"**## Repro Steps:**\r\n1. In CLI/VS create a new C# .net core console app.\r\n2. Change frameworks to `<TargetFrameworks>net461;netcoreapp2.1</TargetFrameworks>`.\r\n3. Restore failed with the errors as below:\r\n![image](https://user-images.githubusercontent.com/24784908/38466661-23e6b976-3b5f-11e8-959f-64b45ffa9b0b.png)\r\n5. After adding dotnet-core package source: https://dotnet.myget.org/F/dotnet-core/api/v3/index.json , restore still failed with the errors as below:\r\n![image](https://user-images.githubusercontent.com/24784908/38466678-80b1a710-3b5f-11e8-9f26-a5bf57ae0166.png)\r\n\r\n**## Test Environment:**\r\nD15.6/27428.200 + CLI/SDK [2.1.300-preview2-008530](https://dotnetfeed.blob.core.windows.net/orchestrated-release-2-1/20180406-05/final/assets/Sdk/2.1.300-preview2-008530/dotnet-sdk-2.1.300-preview2-008530-win-x64.exe)\r\nor D15.7/27604.00 + CLI/SDK [2.1.300-preview2-008530](https://dotnetfeed.blob.core.windows.net/orchestrated-release-2-1/20180406-05/final/assets/Sdk/2.1.300-preview2-008530/dotnet-sdk-2.1.300-preview2-008530-win-x64.exe)\r\ndotnet --info:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008530\r\n Commit:    822ae6d43a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008530\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26406-04\r\n  Commit:  6833f3026b\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview2-008530 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26406-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n```\r\n\r\n"},{"Id":"7492542805","Type":"IssuesEvent","CreatedAt":"2018-04-06T18:41:06","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1570","RelatedDescription":"Closed issue \"Explicit restore for self-contained app behaves differently than implicit restore\" (#1570) at dotnet/sdk","RelatedBody":"## Steps to reproduce\r\n1. mkdir ExplicitRestore\r\n1. cd ExplicitRestore\r\n1. dotnet new console --no-restore\r\n1. dotnet restore -r debian.8-x64\r\nInspect the obj/project.assets.json to see what version of Microsoft.NETCore.App is used - Microsoft.NETCore.App/2.0.0\r\n\r\n1. mkdir ImplicitRestore\r\n1. cd ImplicitRestore\r\n1. dotnet new console --no-restore\r\n1. dotnet build -r debian.8-x64\r\nThe build step fails - notice the version of Microsoft.NETCore.App being used - \r\n'''\r\n/ImplicitRestore/ImplicitRestore.csproj : error NU1102: Unable to find package Microsoft.NETCore.App with version (>= 2.0.1)\r\n/ImplicitRestore/ImplicitRestore.csproj : error NU1102:   - Found 14 version(s) in nuget.org [ Nearest version: 2.0.0 ]\r\n'''\r\n\r\n## Expected  behavior\r\nI was expecting the two scenarios to behave the same.  Specifically I would expect them to be using the same version of Microsoft.NETCore.App - 2.0.1\r\n\r\n## Actual behavior\r\nExplicit restore uses Microsoft.NETCore.App 2.0.0 while the implicit restore uses 2.0.1.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.1-servicing-006955)\r\n\r\nProduct Information:\r\n Version:            2.0.1-servicing-006955\r\n Commit SHA-1 hash:  6734510020\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  8\r\n OS Platform: Linux\r\n RID:         debian.8-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.1-servicing-006955/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.1\r\n  Build    : 5eb2f9bd659ad2161a8e035ac4bccd8f892caa0a\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"981533325767606273","CreatedAt":"2018-04-04T14:05:55+00:00","UserScreenname":"dotnet","Text":"Jeff (@csharpfritz) is working with @Azure Q &amp; A Maker today to improve his chat-bot for Twitch and Mixer.  Tune in… https://t.co/MLdDPdKPTL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2018-04-09T05:30:21.2196022Z","RunDurationInMilliseconds":8074}