{"Data":{"GitHub":{"Issues":[{"Id":"515781131","IsPullRequest":false,"CreatedAt":"2019-10-31T22:13:50","Actor":"ashbhandare","Number":"4426","RawContent":null,"Title":"[Image Classification] Error running Transfer learning example with InceptionV3 ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\nMicrosoft.ML: 1.4.0-preview3-28230-4\r\nMicrosoft.ML.ImageAnalytics : 1.4.0-preview3-28230-4\r\nMicrosoft.ML.Vision: 1.4.0-preview3-28230-4\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to run the ImageClassification.Train sample at https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/DeepLearning_ImageClassification_Training \r\nwith Architecture InceptionV3\r\n- **What happened?**\r\nException : \r\nTensorflow.TensorflowException\r\n  HResult=0x80131500\r\n  Message=NewRandomAccessFile failed to Create/Open: ./tfhub_modules/d765412e8955a7067e9c0031f60783359e0e5c3f/variables/variables.data-00000-of-00001 : The system cannot find the path specified.\r\n; No such process\r\n\t [[{{node checkpoint_initializer_32}}]]\r\n  Source=Microsoft.ML.TensorFlow\r\n  StackTrace:\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.Runner.Run()\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at ImageClassification.Train.Program.Main() in C:\\Users\\aibhanda\\luis-machinelearning-samples\\samples\\csharp\\getting-started\\DeepLearning_ImageClassification_Training\\ImageClassification.Train\\Program.cs:line 80\r\n\r\n\r\n- **What did you expect?**\r\nSample should run, as other architectures run without exception.\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n[1.4.0_RC-1_InceptionV3.log](https://github.com/dotnet/machinelearning/files/3796015/1.4.0_RC-1_InceptionV3.log)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4426","RelatedDescription":"Open issue \"[Image Classification] Error running Transfer learning example with InceptionV3 \" (#4426)"},{"Id":"514897068","IsPullRequest":false,"CreatedAt":"2019-10-31T20:09:23","Actor":"antoniovs1029","Number":"4418","RawContent":null,"Title":"Stop publishing nightly build nugets to private feed","State":"closed","Body":"Currently there is a[ task](https://github.com/dotnet/machinelearning/blob/36fab9b6806260e64e50992450a219e869c7f74a/build/vsts-ci.yml#L259) that publishes nugets to a private feed whenever there is a change in the master branch of this repo. This private feed is of internal use for the members of the ML.net team.\r\n\r\nAfter [this discussion](https://github.com/dotnet/machinelearning/pull/4406#discussion_r339848534) on PR #4406  , and after discussing it offline with @codemzs , it was decided to stop publishing nugets to the private feed, because it will be unnecessary work now that PR #4406 added a task to publish the nugets to a [public feed](https://dev.azure.com/dnceng/public/_packaging?_a=feed&feed=MachineLearning).","Url":"https://github.com/dotnet/machinelearning/issues/4418","RelatedDescription":"Closed issue \"Stop publishing nightly build nugets to private feed\" (#4418)"},{"Id":"514899119","IsPullRequest":true,"CreatedAt":"2019-10-31T20:09:21","Actor":"antoniovs1029","Number":"4419","RawContent":null,"Title":"Fixes #4418. Removes publishing nugets to private feed and fixes some minor issues in .yml file","State":"closed","Body":"* Removed task that published nugets to a private feed (fixing issue #4418)\r\n* Removed commented task that used to publish to myget feed (fixing [this comment](https://github.com/dotnet/machinelearning/pull/4406#discussion_r339847771))\r\n* Fixed typo in OPTOUT variable (fixing [this comment](https://github.com/dotnet/machinelearning/pull/4406#discussion_r339847110))","Url":"https://github.com/dotnet/machinelearning/pull/4419","RelatedDescription":"Closed or merged PR \"Fixes #4418. Removes publishing nugets to private feed and fixes some minor issues in .yml file\" (#4419)"},{"Id":"515691361","IsPullRequest":false,"CreatedAt":"2019-10-31T19:34:30","Actor":"eerhardt","Number":"4425","RawContent":null,"Title":"CodeGenerator throws a bad error when StablePackageVersion isn't set","State":"open","Body":"With the addition of https://github.com/dotnet/machinelearning/pull/4391, we added two new string properties to `CodeGeneratorSettings`:\r\n\r\n* StablePackageVersion\r\n* UnstablePackageVersion\r\n\r\nThese properties are required to be set, if you don't code gen fails. But even worse, it fails in a way that isn't immediately obvious to what you did wrong.\r\n\r\nWe should make these properties required when creating a `CodeGeneratorSettings` object. That way callers of CodeGen know they need to set it.","Url":"https://github.com/dotnet/machinelearning/issues/4425","RelatedDescription":"Open issue \"CodeGenerator throws a bad error when StablePackageVersion isn't set\" (#4425)"},{"Id":"515647305","IsPullRequest":true,"CreatedAt":"2019-10-31T18:19:48","Actor":"bpstark","Number":"4424","RawContent":null,"Title":"Modified how data is saved to disk","State":"open","Body":"pre-trained meta files are now stored in one location always, this\r\nallows multiple runs to re-use the same meta file without having to\r\nredownload.\r\n\r\nAdditionally added the ability to cleanup the temporary workspace used\r\nto train the model. This should prevent issues of running out of disk\r\nspace when running multiple training session sequentially.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4424","RelatedDescription":"Open PR \"Modified how data is saved to disk\" (#4424)"},{"Id":"515117636","IsPullRequest":false,"CreatedAt":"2019-10-31T02:44:05","Actor":"ashalogic","Number":"4423","RawContent":null,"Title":"UnauthorizedAccessException in UWP App","State":"open","Body":"### Issue\r\nSystem.Net.WebException: 'An exception occurred during a WebClient request.'\r\nwhen trying to create new mlContext.Model.ImageClassification() in **UWP App**\r\n\r\n### Source code / logs\r\n\r\n![image](https://user-images.githubusercontent.com/42332369/67914016-f5940080-fb9f-11e9-8af0-afedf07f6700.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4423","RelatedDescription":"Open issue \"UnauthorizedAccessException in UWP App\" (#4423)"},{"Id":"515068630","IsPullRequest":false,"CreatedAt":"2019-10-31T00:29:57","Actor":"vnarula","Number":"4422","RawContent":null,"Title":"ML.net doesn't exposes useOrderedHashing input parameter for Hash transformation","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nUsing Conversion Hash transform.\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.conversionsextensionscatalog.hash?view=ml-dotnet-1.0.0\r\n\r\n- **What happened?**\r\n\r\nIt doesn't exposes property useOrderedHashing \r\n\r\n- **What did you expect?**\r\n\r\nExpose useOrderedHashing  property as this is blocking us to move to ML.net.\r\n\r\n### Source code / logs\r\nSee link .\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.conversionsextensionscatalog.hash?view=ml-dotnet-1.0.0\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4422","RelatedDescription":"Open issue \"ML.net doesn't exposes useOrderedHashing input parameter for Hash transformation\" (#4422)"},{"Id":"515042844","IsPullRequest":true,"CreatedAt":"2019-10-30T23:18:04","Actor":"maryamariyan","Number":"4421","RawContent":null,"Title":"Cleanup: makes Recommendation sample easier to use","State":"open","Body":"This PR makes the Recommendation sample under docs easier to use, by pointing to an existing sample in machinelearning-samples repo:\r\n\r\nUsing the same datasets under [https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/MatrixFactorization_MovieRecommendation/Data](https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/MatrixFactorization_MovieRecommendation/Data)\r\n\r\nThe model generated using instructions in [here](https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/MatrixFactorization_MovieRecommendation), produces metrics below:\r\n```\r\nMeanAbsoluteError: 0.619940823978848\r\nMeanSquaredError: 0.947787365931922\r\nRootMeanSquaredError: 0.973543715470406\r\nRSquared: 0.43654475860194\r\n```\r\n\r\nWhereas using AutoML for Recommendation task with just 540 seconds training time (as seen in this PR), we can get a little over 100 models generated out of which the best produced has the improved metrics below:\r\n```\r\nMetrics of best model on test data --\r\nMeanAbsoluteError: 0.578644904825423\r\nMeanSquaredError: 0.747918695002957\r\nRootMeanSquaredError: 0.864822926964218\r\nRSquared: 0.555365766640444\r\n```\r\n--- \r\n\r\nAdditionally in this PR I updated the CodeGeneratorTests a bit so that, the code generated in \r\n- CodeGeneratorTests.Recommendation_GenerateConsoleAppProjectContents_VerifyPredictProgram\r\n- CodeGeneratorTests.Recommendation_GenerateConsoleAppProjectContents_VerifyPredictProject\r\n\r\ncan be used to test the model generated from running the Recommendation experiment in the doc\\samples folder.\r\n\r\ncc: @CESARDELATORRE, @eerhardt @LittleLittleCloud ","Url":"https://github.com/dotnet/machinelearning/pull/4421","RelatedDescription":"Open PR \"Cleanup: makes Recommendation sample easier to use\" (#4421)"},{"Id":"514985132","IsPullRequest":false,"CreatedAt":"2019-10-30T22:37:01","Actor":"luisquintanilla","Number":"4420","RawContent":null,"Title":"[Image Classification API] TensorFlow exception triggered while loading model","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 \r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.1 \r\n- **NuGet Packages**\r\n\r\n  - Microsoft.ML (1.4.0-preview3-28230-5)\r\n  - Microsoft.ML.ImageAnalytics (1.4.0-preview3-28230-5)\r\n  - Microsoft.ML.Vision (1.4.0-preview3-28230-5)\r\n\r\n### Issue\r\n\r\nTried to train a model using Image Classification API and ResNetV2101 architecture.\r\n\r\n### Source code / logs\r\n\r\nSource Code: https://github.com/luisquintanilla/machinelearning-samples/blob/testing-1.4.0-samples/samples/csharp/getting-started/DeepLearning_ImageClassification_Binary/DeepLearning_ImageClassification_Binary/Program.cs\r\n\r\nStack Trace:\r\n\r\n```text\r\n   System.FormatException\r\n  HResult=0x80131537\r\n  Message=Tensorflow exception triggered while loading model.\r\n  Source=Microsoft.ML.TensorFlow\r\n  StackTrace:\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.LoadTensorFlowSessionFromMetaGraph(IHostEnvironment env, Architecture arch, String path)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at DLImageClassificationBinary.Program.Main(String[] args) in C:\\Users\\luquinta.REDMOND\\source\\repos\\DLImageClassificationBinary\\DLImageClassificationBinary\\Program.cs:line 60\r\n\r\nInner Exception 1:\r\nDllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies: The specified module could not be found. (Exception from HRESULT: 0x8007007E)\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4420","RelatedDescription":"Closed issue \"[Image Classification API] TensorFlow exception triggered while loading model\" (#4420)"},{"Id":"514883908","IsPullRequest":true,"CreatedAt":"2019-10-30T18:19:04","Actor":"harshithapv","Number":"4417","RawContent":null,"Title":"Added Cyclic LR scheduling","State":"open","Body":"Added functionality for added unit tests for Cyclic LR scheduling with the unit and integration tests. Also added unit tests for LsrDecay and Exponential decay.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4417","RelatedDescription":"Open PR \"Added Cyclic LR scheduling\" (#4417)"},{"Id":"514868848","IsPullRequest":true,"CreatedAt":"2019-10-30T17:54:53","Actor":"harishsk","Number":"4416","RawContent":null,"Title":"Upgraded OnnxRuntime to v1.0 and Google Protobuf to 3.10.1","State":"open","Body":"This PR upgrades the OnnxRuntime to v1.0 and the Google Protobuf version to 3.10.1","Url":"https://github.com/dotnet/machinelearning/pull/4416","RelatedDescription":"Open PR \"Upgraded OnnxRuntime to v1.0 and Google Protobuf to 3.10.1\" (#4416)"},{"Id":"514867575","IsPullRequest":true,"CreatedAt":"2019-10-30T17:52:54","Actor":"harshithapv","Number":"4415","RawContent":null,"Title":"Defaults for ImageClassification API","State":"open","Body":"Changed EarlyStopping to run by default with ExponentialLR Decay for learning rate scheduling.\r\nThis combination seems to give most optimal results with a trade-off balance between the accuracy and training time.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4415","RelatedDescription":"Open PR \"Defaults for ImageClassification API\" (#4415)"},{"Id":"513065150","IsPullRequest":false,"CreatedAt":"2019-10-30T16:22:21","Actor":"MaxAkbar","Number":"4397","RawContent":null,"Title":"TextCatalog.ApplyWordEmbedding to KMeans Trainer generates IndexOutOfRangeException","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 PRO 10.0.18362\r\n- **.NET Version (eg., dotnet --info)**: 3.1.100-preview1-014459\r\n\r\n### Issue\r\nI am trying to cluster a group of documents. For this sample, I used news articles short descriptions. If I run this sample with `FeaturizeText` the sample builds a model. If I try to apply `TextCatalog.ApplyWordEmbedding` I get a `System.IndexOutOfRangeException`.\r\n\r\n- **What did you do?** Applying Wordembedding to KMeans Trainer\r\n- **What happened?** IndexOutOfRangeException\r\n- **What did you expect?** For the ML.NET to build my model\r\n\r\n### Source code / logs\r\nSample code to reproduce the problem can be found [here](https://github.com/MaxAkbar/machinelearning-samples/tree/MachineLearningSampleBench/samples/csharp/getting-started/Clustering_NewsArticles).\r\n\r\nStackTrace: | \r\n------------ | \r\nSystem.AggregateException: One or more errors occurred. (Index was outside the bounds of the array.) (Index was outside the bounds of the array.) (Index was outside the bounds of the array.)\r\n ---> System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at Microsoft.ML.Trainers.KMeansBarBarInitialization.<>c__DisplayClass3_1.<Initialize>b__2(VBuffer`1& point, Int32 pointRowIndex, Single[] weights, Random rand)\r\n   at Microsoft.ML.Trainers.KMeansUtils.<>c__DisplayClass8_1`2.<ParallelMapReduce>b__0()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.WaitAllCore(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.WaitAll(Task[] tasks)\r\n   at System.Threading.Tasks.Parallel.Invoke(ParallelOptions parallelOptions, Action[] actions)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw(Exception source)\r\n   at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)\r\n   at System.Threading.Tasks.Parallel.Invoke(ParallelOptions parallelOptions, Action[] actions)\r\n   at Microsoft.ML.Trainers.KMeansUtils.ParallelMapReduce[TPartitionState,TGlobalState](Int32 numThreads, IHost baseHost, Factory factory, RowIndexGetter rowIndexGetter, InitAction`1 initChunk, MapAction`1 mapper, ReduceAction`2 reducer, TPartitionState[]& buffer, TGlobalState& result)\r\n   at Microsoft.ML.Trainers.KMeansBarBarInitialization.Initialize(IHost host, Int32 numThreads, IChannel ch, Factory cursorFactory, Int32 k, Int32 dimensionality, VBuffer`1[] centroids, Int64 accelMemBudgetMb, Int64& missingFeatureCount, Int64& totalTrainingInstances)\r\n   at Microsoft.ML.Trainers.KMeansTrainer.TrainCore(IChannel ch, RoleMappedData data, Int32 dimensionality)\r\n   at Microsoft.ML.Trainers.KMeansTrainer.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.Fit(IDataView input)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at ClusteringNewsArticles.Train.Program.Main(String[] args) in C:\\Users\\maxim\\Source\\Repos\\machinelearning-samples\\samples\\csharp\\getting-started\\Clustering_NewsArticles\\ClusteringNewsArticles.Train\\Program.cs:line 54\r\n ---> (Inner Exception #1) System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at Microsoft.ML.Trainers.KMeansBarBarInitialization.<>c__DisplayClass3_1.<Initialize>b__2(VBuffer`1& point, Int32 pointRowIndex, Single[] weights, Random rand)\r\n   at Microsoft.ML.Trainers.KMeansUtils.<>c__DisplayClass8_1`2.<ParallelMapReduce>b__0()\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)<---\r\n\r\n ---> (Inner Exception #2) System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at Microsoft.ML.Trainers.KMeansBarBarInitialization.<>c__DisplayClass3_1.<Initialize>b__2(VBuffer`1& point, Int32 pointRowIndex, Single[] weights, Random rand)\r\n   at Microsoft.ML.Trainers.KMeansUtils.<>c__DisplayClass8_1`2.<ParallelMapReduce>b__0()\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)<--- |","Url":"https://github.com/dotnet/machinelearning/issues/4397","RelatedDescription":"Closed issue \"TextCatalog.ApplyWordEmbedding to KMeans Trainer generates IndexOutOfRangeException\" (#4397)"},{"Id":"514763351","IsPullRequest":true,"CreatedAt":"2019-10-30T15:27:45","Actor":"codemzs","Number":"4414","RawContent":null,"Title":"Bump release version to 1.5.0-preview and preview version to 0.17.0-preview.","State":"open","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4414","RelatedDescription":"Open PR \"Bump release version to 1.5.0-preview and preview version to 0.17.0-preview.\" (#4414)"},{"Id":"514227734","IsPullRequest":true,"CreatedAt":"2019-10-30T05:23:44","Actor":"codemzs","Number":"4412","RawContent":null,"Title":"Move Microsoft.ML.Vision to stable package.","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4412","RelatedDescription":"Closed or merged PR \"Move Microsoft.ML.Vision to stable package.\" (#4412)"},{"Id":"514128690","IsPullRequest":true,"CreatedAt":"2019-10-30T05:22:10","Actor":"bpstark","Number":"4410","RawContent":null,"Title":"Modify ImageClassification API to use a workspace for saving data","State":"closed","Body":"Originally this API saved data to the same directory as the DLL, this\r\ncould cause issues if the DLL was in a read only path. Instead moving to\r\ndefault to a temporary workspace path which can be defined in the\r\noptions by the user. This will allow all the data to be saved in one\r\npath.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4410","RelatedDescription":"Closed or merged PR \"Modify ImageClassification API to use a workspace for saving data\" (#4410)"},{"Id":"514294370","IsPullRequest":true,"CreatedAt":"2019-10-29T23:31:10","Actor":"michaelgsharp","Number":"4413","RawContent":null,"Title":"Initial featurizers project","State":"open","Body":"This is the initial featurizers PR to split apart PR #4157 and get all the common code into master.\r\nOnce this code goes in, I will create separate PR's for each of the 5 featurizers.\r\n\r\nThis is the common code for the featurizers. Its mostly changes to project files and solution files. Common.cs is for all the shared code for the featurizers. The change in Utils.cs is to allow `Marshal.Invoke` with multiple type parameters. The RowToRowMapperTransform.cs change has it create a new mapper when possible. This helps with thread safety/local caching of the mappers when run in a multi threaded approach.","Url":"https://github.com/dotnet/machinelearning/pull/4413","RelatedDescription":"Open PR \"Initial featurizers project\" (#4413)"},{"Id":"514001912","IsPullRequest":true,"CreatedAt":"2019-10-29T20:42:29","Actor":"codemzs","Number":"4408","RawContent":null,"Title":"Rename Microsoft.ML.Dnn to Microsoft.ML.Vision and reverse dependency between Microsoft.ML.TensorFlow and Microsoft.ML.Dnn","State":"closed","Body":"- Refactors Microsoft.ML.TensorFlow and Microsoft.ML.Dnn such that Microsoft.ML.Dnn depends on Microsoft.ML.TensorFlow and not vice-versa and fixes #4305.\r\n\r\n- Renames Microsoft.ML.Dnn nuget and namespace to Microsoft.ML.Vision.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4408","RelatedDescription":"Closed or merged PR \"Rename Microsoft.ML.Dnn to Microsoft.ML.Vision and reverse dependency between Microsoft.ML.TensorFlow and Microsoft.ML.Dnn\" (#4408)"},{"Id":"514139113","IsPullRequest":false,"CreatedAt":"2019-10-29T18:40:24","Actor":"ThomasIE","Number":"4411","RawContent":null,"Title":"Getting RegressionTree from ITransformer model","State":"open","Body":"### System information\r\n\r\nWindows 10 & Visual Studio 2019\r\n\r\n### Issue\r\n\r\nHi, I want to know how to get RegressionTree object from a FastTree regression model because the RegressionTree is private and not available to access. (For your information, I have attached my code below. I got it from **https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/predict-prices)**\r\n\r\nAlso, due to the combination of left and right nodes, is it allowed to use binary splits, not multiple splits per node?\r\n\r\nFinally, how can I use the function in \"SaveAsCode\" in FastTree.cs? Is there any example to take a look at?\r\n\r\nThanks in advance.\r\n\r\nSincerely,\r\n\r\n### Source code / logs\r\n        static readonly string _trainDataPath = Path.Combine(Environment.CurrentDirectory, \"Data\", \"taxi-fare-train.csv\");\r\n        static readonly string _testDataPath = Path.Combine(Environment.CurrentDirectory, \"Data\", \"taxi-fare-test.csv\");\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            MLContext mlContext = new MLContext(seed: 0);\r\n            ITransformer model = Train(mlContext, _trainDataPath);\r\n            \r\n            \r\n        }\r\n\r\n        public static ITransformer Train(MLContext mlContext, string dataPath)\r\n        {\r\n            IDataView dataView = mlContext.Data.LoadFromTextFile<TaxiTrip>(dataPath, hasHeader: true, separatorChar: ',');\r\n            var pipeline = mlContext.Transforms.CopyColumns(outputColumnName: \"Label\", inputColumnName: \"FareAmount\")\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(outputColumnName: \"VendorIdEncoded\", inputColumnName: \"VendorId\"))\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(outputColumnName: \"RateCodeEncoded\", inputColumnName: \"RateCode\"))\r\n                .Append(mlContext.Transforms.Categorical.OneHotEncoding(outputColumnName: \"PaymentTypeEncoded\", inputColumnName: \"PaymentType\"))\r\n                .Append(mlContext.Transforms.Concatenate(\"Features\", \"VendorIdEncoded\", \"RateCodeEncoded\", \"PassengerCount\", \"TripTime\", \"TripDistance\", \"PaymentTypeEncoded\"))\r\n                .Append(mlContext.Regression.Trainers.FastTree());\r\n\r\n            var model = pipeline.Fit(dataView);\r\n\r\n\r\n            return model;\r\n        }","Url":"https://github.com/dotnet/machinelearning/issues/4411","RelatedDescription":"Open issue \"Getting RegressionTree from ITransformer model\" (#4411)"},{"Id":"513583649","IsPullRequest":true,"CreatedAt":"2019-10-29T18:24:51","Actor":"tannergooding","Number":"4403","RawContent":null,"Title":"Updating the DatabaseLoader to not force vector for single element columns","State":"closed","Body":"This resolves https://github.com/dotnet/machinelearning-samples/issues/722","Url":"https://github.com/dotnet/machinelearning/pull/4403","RelatedDescription":"Closed or merged PR \"Updating the DatabaseLoader to not force vector for single element columns\" (#4403)"},{"Id":"514093594","IsPullRequest":false,"CreatedAt":"2019-10-29T17:27:52","Actor":"eerhardt","Number":"4409","RawContent":null,"Title":"TensorFlowUtils should add the caught exception as an inner exception","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/4c3be03282db29b65eb8f33888d8cb8c1a8dadac/src/Microsoft.ML.Dnn/DnnUtils.cs#L84-L87\r\n\r\nThis code is catching an exception and throwing a new one, but not using the caught exception as an inner exception. This loses the information of what the original exception was.\r\n\r\nSee https://github.com/dotnet/machinelearning/pull/4408#discussion_r340181047","Url":"https://github.com/dotnet/machinelearning/issues/4409","RelatedDescription":"Open issue \"TensorFlowUtils should add the caught exception as an inner exception\" (#4409)"},{"Id":"513598956","IsPullRequest":true,"CreatedAt":"2019-10-29T15:28:27","Actor":"eerhardt","Number":"4404","RawContent":null,"Title":"Dispose the DataViewRowCursor in CountRows.","State":"closed","Body":"Not disposing this cursor is causing the training file to remain locked even after training is completed.\r\n\r\nFix #4361\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4404","RelatedDescription":"Closed or merged PR \"Dispose the DataViewRowCursor in CountRows.\" (#4404)"},{"Id":"513415393","IsPullRequest":true,"CreatedAt":"2019-10-29T03:12:04","Actor":"maryamariyan","Number":"4401","RawContent":null,"Title":"Add missing linePragmas to ConsumeModel.tt","State":"closed","Body":"Fix for publishing symbols during official build.\r\n\r\nThe other 6 tt files in the `src/Microsoft.ML.CodeGenerator/Templates/Console/` folder already set linePragmas to false.\r\n\r\nFixes #4400\r\ncc: @eerhardt ","Url":"https://github.com/dotnet/machinelearning/pull/4401","RelatedDescription":"Closed or merged PR \"Add missing linePragmas to ConsumeModel.tt\" (#4401)"},{"Id":"513383048","IsPullRequest":false,"CreatedAt":"2019-10-29T03:12:04","Actor":"eerhardt","Number":"4400","RawContent":null,"Title":"Error while publishing symbols during official build","State":"closed","Body":"See the error here: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3186964\r\n\r\n```\r\nE:\\A\\_work\\718\\s\\packages\\microsoft.symboluploader.build.task\\1.0.0-beta-62824-02\\build\\PublishSymbols.targets(29,7): warning : Invalid file type: LICENSE [E:\\A\\_work\\718\\s\\build\\publish.proj]\r\n  Processing input package E:\\A\\_work\\718\\s\\bin\\packages\\Microsoft.ML.CodeGenerator.symbols.0.16.0-preview3-28228-1.nupkg\r\n  Converting portable PDB lib/netstandard2.0/Microsoft.ML.CodeGenerator.pdb to Windows\r\n##[error]packages\\microsoft.symboluploader.build.task\\1.0.0-beta-62824-02\\build\\PublishSymbols.targets(29,7): Error : PDB0021: Document name doesn't match any pattern in Source Link: 'C:\\CodeHub\\machinelearning\\src\\Microsoft.ML.CodeGenerator\\Templates\\Console\\ConsumeModel.tt'\r\nE:\\A\\_work\\718\\s\\packages\\microsoft.symboluploader.build.task\\1.0.0-beta-62824-02\\build\\PublishSymbols.targets(29,7): error : PDB0021: Document name doesn't match any pattern in Source Link: 'C:\\CodeHub\\machinelearning\\src\\Microsoft.ML.CodeGenerator\\Templates\\Console\\ConsumeModel.tt' [E:\\A\\_work\\718\\s\\build\\publish.proj]\r\n##[error]packages\\microsoft.symboluploader.build.task\\1.0.0-beta-62824-02\\build\\PublishSymbols.targets(29,7): Error : PDB0021: Document name doesn't match any pattern in Source Link: 'C:\\CodeHub\\machinelearning\\src\\Microsoft.ML.CodeGenerator\\Templates\\Console\\Annotation.ttinclude'\r\nE:\\A\\_work\\718\\s\\packages\\microsoft.symboluploader.build.task\\1.0.0-beta-62824-02\\build\\PublishSymbols.targets(29,7): error : PDB0021: Document name doesn't match any pattern in Source Link: 'C:\\CodeHub\\machinelearning\\src\\Microsoft.ML.CodeGenerator\\Templates\\Console\\Annotation.ttinclude' [E:\\A\\_work\\718\\s\\build\\publish.proj]\r\n```\r\n\r\nTo fix this, we should be putting `linePragmas=\"false\"` in the .tt files:\r\n\r\n```\r\n<#@ template language=\"C#\" linePragmas=\"false\" #>\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4400","RelatedDescription":"Closed issue \"Error while publishing symbols during official build\" (#4400)"},{"Id":"513623792","IsPullRequest":true,"CreatedAt":"2019-10-29T02:48:50","Actor":"antoniovs1029","Number":"4406","RawContent":null,"Title":"Fixes #4405 About publishing nugets to public feed","State":"closed","Body":"Fixes #4405 about publishing nugets to this public feed:\r\nhttps://dev.azure.com/dnceng/public/_packaging?_a=feed&feed=MachineLearning\r\n\r\nThis will be executed by the AzureDevOps build pipeline whenever a new commit is added to the master branch of this repo. Notice that sometimes there are some problems on the side of Azure DevOps, and it might fail when executing the build pipeline, even in steps that were not modified in this PR, and producing errors that prevent the pipeline to actually publish the nugets to the feed; this unplanned errors already existed before the changes introduced in this PR, and they are somewhat unpredictable. The solution to this is to rerun the build manually until the pipeline succeeds.\r\n\r\nWorked this out following @safern instructions.","Url":"https://github.com/dotnet/machinelearning/pull/4406","RelatedDescription":"Closed or merged PR \"Fixes #4405 About publishing nugets to public feed\" (#4406)"},{"Id":"513620169","IsPullRequest":false,"CreatedAt":"2019-10-29T02:48:49","Actor":"antoniovs1029","Number":"4405","RawContent":null,"Title":"NuGet packages not being published to public feed","State":"closed","Body":"It's desirable to have NuGets being published to a public feed as soon as the master branch of this repo gets updated.\r\n\r\nIn the past, this was tried to be done by publishing them to MyGet, but currently the lines of code that do this are commented out. https://github.com/dotnet/machinelearning/blob/f0fb7203d7597d2779a298662970b1f74b47f4b8/build/vsts-ci.yml#L237-L242\r\n\r\nAs discussed offline with @codemzs it would be better to instead publish them into this other public feed in Azure DevOps:\r\nhttps://dev.azure.com/dnceng/public/_packaging?_a=feed&feed=MachineLearning","Url":"https://github.com/dotnet/machinelearning/issues/4405","RelatedDescription":"Closed issue \"NuGet packages not being published to public feed\" (#4405)"},{"Id":"513642400","IsPullRequest":true,"CreatedAt":"2019-10-29T01:33:00","Actor":"jeremytieman","Number":"4407","RawContent":null,"Title":"SEAL Homomorphic Encryption support","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4407","RelatedDescription":"Open PR \"SEAL Homomorphic Encryption support\" (#4407)"},{"Id":"513474821","IsPullRequest":true,"CreatedAt":"2019-10-28T18:17:06","Actor":"gvashishtha","Number":"4402","RawContent":null,"Title":"Adding release process documentation to README.md","State":"open","Body":"This PR better documents the release process for ML.NET\r\n\r\n- [ x ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [  ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ x ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ x ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4402","RelatedDescription":"Open PR \"Adding release process documentation to README.md\" (#4402)"},{"Id":"513360653","IsPullRequest":false,"CreatedAt":"2019-10-28T15:01:07","Actor":"IgnasZ","Number":"4399","RawContent":null,"Title":"Memory leak in ML.NET 1.3.1 and 1.4.0-preview2","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Microsoft Windows [Version 10.0.18362.418]\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 3.0.100 04339c3a26\r\n\r\n### Issue\r\n\r\n- **What did you do?** Detected potential memory leak in production application, so I wrote simple application to see if problem persists.\r\n- **What happened?** Microsoft.ML 1.3.1 and 1.4.0-preview2 both appear to be leaking memory\r\n\r\n### Source code / logs\r\n\r\nMinimal code that consistently reproduces this problem:\r\n```\r\n    class ModelInput\r\n    {\r\n        [ColumnName(\"TextColumn\"), LoadColumn(0)]\r\n        public string ItemDescription { get; set; }\r\n        [ColumnName(\"Label\"), LoadColumn(1)]\r\n        public int ItemId { get; set; }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Sleeping for 5 seconds. Collect initial memory snapshot...\");\r\n            while(true)\r\n            {\r\n                Thread.Sleep(5000);\r\n                BuildAndTrainModel();\r\n                Console.WriteLine(\"Training done. Collect memory snapshot...\");\r\n            }\r\n        }\r\n\r\n        static void BuildAndTrainModel()\r\n        {\r\n            MLContext context = new MLContext(seed: 1);\r\n\r\n            var dataView = context.Data.LoadFromTextFile<ModelInput>(\"input.csv\", separatorChar: ',');\r\n\r\n            var trainingPipeline = context.Transforms.Conversion.MapValueToKey(new[] { new InputOutputColumnPair(\"Label\", \"Label\") })\r\n                .Append(context.Transforms.Text.FeaturizeText(\"TextColumn\", \"TextColumn\"))\r\n                .Append(context.MulticlassClassification.Trainers.SdcaMaximumEntropy(labelColumnName: \"Label\", featureColumnName: \"TextColumn\", maximumNumberOfIterations: 1));\r\n\r\n            var model = trainingPipeline.Fit(dataView);\r\n        }\r\n    }\r\n```\r\nAfter each call to BuildAndTrainModel following objects appear to leak:\r\n![image](https://user-images.githubusercontent.com/22596768/67688033-de87bf80-f9a1-11e9-9d8b-79fc687e19e5.png)\r\n\r\nAmount of objects leaked appears to correlate with number of iterations (increasing maximumNumberOfIterations increases leaked object count).","Url":"https://github.com/dotnet/machinelearning/issues/4399","RelatedDescription":"Open issue \"Memory leak in ML.NET 1.3.1 and 1.4.0-preview2\" (#4399)"},{"Id":"513347051","IsPullRequest":false,"CreatedAt":"2019-10-28T14:39:39","Actor":"zubr1","Number":"4398","RawContent":null,"Title":"Image recognition rotation invariant","State":"open","Body":"After completing model training, prediction didn't recognize differences between rotated images. Let's assume I have an image of right hand and left hand. I'd like to classify it differently so right hand image should be classified as right hand, and left hand image respectively as left. Unfortunately my current model sees no differences between them and it constantly fluctuates between both labels. \r\nIs there any solution for this like turning off data augmentation, or changing some settings? Or maybe it's problem of insufficient data for training (I use around 33-35 images for one label)?","Url":"https://github.com/dotnet/machinelearning/issues/4398","RelatedDescription":"Open issue \"Image recognition rotation invariant\" (#4398)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-11-01T05:30:41.3214754Z","RunDurationInMilliseconds":920}