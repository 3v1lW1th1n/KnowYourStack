{"Data":{"GitHub":{"Issues":[{"Id":"396684002","IsPullRequest":false,"CreatedAt":"2019-01-07T23:00:39","Actor":"hughbe","Number":"241","RawContent":null,"Title":"Stub CAS/Security in wpf","State":"open","Body":"From https://github.com/dotnet/wpf/pull/214#discussion_r244214372\r\n\r\nI'm guessing cause the source is shared we can't but opening for discussion","Url":"https://github.com/dotnet/wpf/issues/241","RelatedDescription":"Open issue \"Stub CAS/Security in wpf\" (#241)"},{"Id":"396569858","IsPullRequest":false,"CreatedAt":"2019-01-07T17:03:29","Actor":"TorbenLL","Number":"240","RawContent":null,"Title":"Image not shown","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: 1803\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n  **Problem description:**\r\n WPF in .net core does not show an image\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n The code compile and run but the image given is not shown.\r\nIt may be due to the image file is no longer compiled with the \"resource\" switch\r\n \r\n**Expected behavior:**\r\n The image is shown in the window at run time. \r\n \r\n**Minimal repro:**\r\n ```\r\n<Window x:Class=\"MyWPFApp.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:MyWPFApp\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n  <Grid>\r\n    <Image Stretch=\"Fill\" Width=\"50\" Height=\"50\" >\r\n      <Image.Source>\r\n        <BitmapImage UriSource=\"Example.bmp\"/>\r\n      </Image.Source>\r\n    </Image>\r\n  </Grid>\r\n</Window>\r\n```","Url":"https://github.com/dotnet/wpf/issues/240","RelatedDescription":"Open issue \"Image not shown\" (#240)"},{"Id":"396256426","IsPullRequest":true,"CreatedAt":"2019-01-06T13:07:43","Actor":"dotnet-maestro[bot]","Number":"239","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19055.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/239","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#239)"},{"Id":"396163665","IsPullRequest":true,"CreatedAt":"2019-01-05T13:07:44","Actor":"dotnet-maestro[bot]","Number":"238","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19054.13\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/238","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#238)"},{"Id":"396024530","IsPullRequest":true,"CreatedAt":"2019-01-04T18:35:46","Actor":"hughbe","Number":"237","RawContent":null,"Title":"Remove ThreeValuedBool","State":"open","Body":"Fixed https://github.com/dotnet/wpf/issues/218\r\n/cc @stevenbrix","Url":"https://github.com/dotnet/wpf/pull/237","RelatedDescription":"Open PR \"Remove ThreeValuedBool\" (#237)"},{"Id":"395920251","IsPullRequest":false,"CreatedAt":"2019-01-04T13:10:10","Actor":"JohanLarsson","Number":"236","RawContent":null,"Title":"Make TemplatedAdorner public.","State":"open","Body":"It is a useful type.","Url":"https://github.com/dotnet/wpf/issues/236","RelatedDescription":"Open issue \"Make TemplatedAdorner public.\" (#236)"},{"Id":"395918373","IsPullRequest":true,"CreatedAt":"2019-01-04T13:08:04","Actor":"dotnet-maestro[bot]","Number":"235","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19053.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/235","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#235)"},{"Id":"395896559","IsPullRequest":false,"CreatedAt":"2019-01-04T11:37:39","Actor":"JohanLarsson","Number":"234","RawContent":null,"Title":"Check if _child is null in TemplatedAdorner.MeasureOverride","State":"open","Body":"No null check [here](https://referencesource.microsoft.com/#PresentationFramework/src/Framework/MS/Internal/Controls/TemplatedAdorner.cs,143) is weird given that there is a null check [here](https://referencesource.microsoft.com/#PresentationFramework/src/Framework/MS/Internal/Controls/TemplatedAdorner.cs,166)\r\n\r\n\r\nFrom reference source:\r\n```cs\r\n        /// <summary>\r\n        /// Measure adorner.\r\n        /// </summary>\r\n        protected override Size MeasureOverride(Size constraint)\r\n        {\r\n            Debug.Assert(_child != null, \"_child should not be null\");\r\n \r\n            if (ReferenceElement != null && AdornedElement != null &&\r\n                AdornedElement.IsMeasureValid &&\r\n                !DoubleUtil.AreClose(ReferenceElement.DesiredSize, AdornedElement.DesiredSize)\r\n                )\r\n            {\r\n                ReferenceElement.InvalidateMeasure();\r\n            }\r\n \r\n            (_child).Measure(new Size(Double.PositiveInfinity, Double.PositiveInfinity));\r\n \r\n            return (_child).DesiredSize;\r\n        }\r\n \r\n \r\n \r\n        /// <summary>\r\n        ///     Default control arrangement is to only arrange\r\n        ///     the first visual child. No transforms will be applied.\r\n        /// </summary>\r\n        protected override Size ArrangeOverride(Size size)\r\n        {\r\n            Size finalSize;\r\n \r\n            finalSize = base.ArrangeOverride(size);\r\n \r\n            if (_child != null)\r\n            {\r\n                    _child.Arrange(new Rect(new Point(), finalSize));\r\n            }\r\n            return finalSize;\r\n        }\r\n```\r\n\r\nDid a search and did not find `TemplatedAdorner` in the repo.\r\n\r\nRepro:\r\nResize the window with the below markup:\r\n```\r\n<DataGrid ItemsSource=\"{Binding People}\">\r\n    <DataGrid.RowStyle>\r\n        <Style TargetType=\"DataGridRow\">\r\n            <Setter Property=\"adorners:Info.Template\">\r\n                <Setter.Value>\r\n                    <ControlTemplate>\r\n                        <Border BorderBrush=\"HotPink\"\r\n                                BorderThickness=\"3\">\r\n                            <AdornedElementPlaceholder />\r\n                        </Border>\r\n                    </ControlTemplate>\r\n                </Setter.Value>\r\n            </Setter>\r\n        </Style>\r\n    </DataGrid.RowStyle>\r\n</DataGrid>\r\n```","Url":"https://github.com/dotnet/wpf/issues/234","RelatedDescription":"Open issue \"Check if _child is null in TemplatedAdorner.MeasureOverride\" (#234)"},{"Id":"395553958","IsPullRequest":false,"CreatedAt":"2019-01-03T19:04:00","Actor":"anirugu","Number":"232","RawContent":null,"Title":"The property windows for WPF is not as same as Winforms.","State":"closed","Body":"Earlier I used a Winforms a lot, just Go to property and change the name. When you are in Xaml file, you can't change the name in property windows (latest 2017) nor you can make an event by just click on the textbox as you can do same in WinForms.\r\n\r\nAre these improvement coming to WPF. This was the thing that I found missing in WPF for Visual Studio Tooling.","Url":"https://github.com/dotnet/wpf/issues/232","RelatedDescription":"Closed issue \"The property windows for WPF is not as same as Winforms.\" (#232)"},{"Id":"395565503","IsPullRequest":true,"CreatedAt":"2019-01-03T13:08:08","Actor":"dotnet-maestro[bot]","Number":"233","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19052.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/233","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#233)"},{"Id":"395241675","IsPullRequest":true,"CreatedAt":"2019-01-02T13:08:01","Actor":"dotnet-maestro[bot]","Number":"231","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19051.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/231","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#231)"},{"Id":"395081303","IsPullRequest":true,"CreatedAt":"2019-01-01T13:07:42","Actor":"dotnet-maestro[bot]","Number":"230","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18631.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/230","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#230)"},{"Id":"395048075","IsPullRequest":false,"CreatedAt":"2019-01-01T01:36:55","Actor":"stefanolson","Number":"229","RawContent":null,"Title":"ValidationContext missing ServiceContainer","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: 10 1809\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\nThis code compiles fine in WPF for the .net framework. It is using a validation context within a validation context to deal with collection/child classes. therefore it needs to be able to pass the current service container through to the the new validation context. Whilst the validation context has a service container parameter, there seems to be no way to access the service container:\r\n`ValidationContext validationContext;\r\n\r\nvar context = new ValidationContext(val, validationContext.ServiceContainer, null);`\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nCompile time error: 'ValidationContext' does not contain a definition for 'ServiceContainer' and no accessible extension method 'ServiceContainer' accepting a first argument of type 'ValidationContext' could be found\r\n\r\n **Expected behavior:**\r\n no compile time error.\r\n\r\n **Minimal repro:**\r\n See above.","Url":"https://github.com/dotnet/wpf/issues/229","RelatedDescription":"Open issue \"ValidationContext missing ServiceContainer\" (#229)"},{"Id":"394977608","IsPullRequest":true,"CreatedAt":"2018-12-31T13:08:16","Actor":"dotnet-maestro[bot]","Number":"228","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18630.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/228","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#228)"},{"Id":"394789612","IsPullRequest":false,"CreatedAt":"2018-12-31T05:17:13","Actor":"anirugu","Number":"223","RawContent":null,"Title":"Will Visual Studio 2019 will be based on .net core 3 ?","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Windows version: (`winver`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n \r\n **Expected behaviour:**\r\n \r\n **Minimal repro:**\r\n \r\n I hear @coolcsh saying that we have used it internally and it's run quite well. It improves the performance of the overall app. WPF in .net core 3 is not going to Support Linux and Mac so there should not be a lot of trouble. They need to make it work on windows.\r\n\r\nSo upcoming Visual Studio will be based on .net framework or .net core 3.\r\n","Url":"https://github.com/dotnet/wpf/issues/223","RelatedDescription":"Closed issue \"Will Visual Studio 2019 will be based on .net core 3 ?\" (#223)"},{"Id":"394870538","IsPullRequest":true,"CreatedAt":"2018-12-30T13:08:10","Actor":"dotnet-maestro[bot]","Number":"227","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18629.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/227","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#227)"},{"Id":"394863434","IsPullRequest":false,"CreatedAt":"2018-12-30T11:03:44","Actor":"ghost1372","Number":"226","RawContent":null,"Title":"Persian Calendar Support","State":"open","Body":"Hi, I hope to send this request at the right place\r\nIn all previous versions of .NET Framework, if we want to display a Persian calendar (Calendar Control), only the name of some months is translated, It's actually the same as the Gregorian calendar (Only the name of the moon has been translated)\r\nFortunately, in Windows 10, we can fully use the Persian calendar, We can also use it in UWP apps But we can not use in wpf!\r\nso please Supprot Persian Calendar  for WPF\r\ntnx","Url":"https://github.com/dotnet/wpf/issues/226","RelatedDescription":"Open issue \"Persian Calendar Support\" (#226)"},{"Id":"394840153","IsPullRequest":false,"CreatedAt":"2018-12-30T02:15:28","Actor":"AlexeiScherbakov","Number":"225","RawContent":null,"Title":"Visual Studio 2017 .NET Core 3.0 debugger conflict with intellitrace","State":"open","Body":"* .NET Core Version: 3.0.0-preview-27122-01 (SDK 3.0.100-preview-009812) \r\n* Windows version: Windows 10 x64 1803 (17134.472)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\nWhen:\r\n\r\n1. Intellitrace is enabled\r\n2. Debugging of .NET Core 3.0 WPF App\r\n3. Click on button on second window shown as dialog\r\n\r\nVisual Studio 2017 (15.9.4)  debugger process (msvsmon.exe) exits unexpectedly and debug session is terminated with started application.\r\n\r\nWhen application is started via .exe file it works normally.\r\nWhen application is started in Visual Studio version without Intellitrace, or Intellitrace is explicitly disabled - all works normal\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/225","RelatedDescription":"Open issue \"Visual Studio 2017 .NET Core 3.0 debugger conflict with intellitrace\" (#225)"},{"Id":"394794203","IsPullRequest":true,"CreatedAt":"2018-12-29T13:08:04","Actor":"dotnet-maestro[bot]","Number":"224","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18627.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/224","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#224)"},{"Id":"394389520","IsPullRequest":true,"CreatedAt":"2018-12-27T13:08:22","Actor":"dotnet-maestro[bot]","Number":"221","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18621.6\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/221","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#221)"},{"Id":"394496857","IsPullRequest":false,"CreatedAt":"2018-12-27T05:57:53","Actor":"stdcppdev","Number":"222","RawContent":null,"Title":"Default WPF project self-contained application cannot run on a pure windows 7 SP1","State":"open","Body":"\r\n# Default WPF project self-contained application cannot run on a pure windows 7 SP1\r\nHi all,\r\nI am a WPF app developer and I'm trying to deploy the net core 3.0 wpf app to Windows 7 but it failed.\r\n\r\n# Reproduction Steps\r\n1. Install .NET Core v3.0.0-preview-27122-01\r\n2. use the command line \"dotnet new wpf -o C:\\test_wpf\" to create an WPF project.\r\n3. use the command line \"dotnet publish -c Release --self-contained\" to publish.\r\n4. copy the published folder to a new installed pure Windows 7 machine.\r\n5. Install KB2533623 / KB2999226 follow the doc\r\n    https://docs.microsoft.com/en-us/dotnet/core/windows-prerequisites?tabs=netcore2x\r\n6. Run the application and nothing happened. the exe start and then it ends after a few seconds.","Url":"https://github.com/dotnet/wpf/issues/222","RelatedDescription":"Open issue \"Default WPF project self-contained application cannot run on a pure windows 7 SP1\" (#222)"},{"Id":"394224375","IsPullRequest":true,"CreatedAt":"2018-12-26T19:06:21","Actor":"hughbe","Number":"220","RawContent":null,"Title":" Fix NullReferenceException in XamlType.Equals/XamlType.GetHashCode","State":"open","Body":"Fixes https://github.com/dotnet/wpf/issues/217\r\n\r\nThe issue here is that `XamlType._namespaces` can actually be null, for example when a `XamlType` is constructed using the `XamlType(string typeName, IList<XamlType> typeArguments, XamlSchemaContext schemaContext` constructor","Url":"https://github.com/dotnet/wpf/pull/220","RelatedDescription":"Open PR \" Fix NullReferenceException in XamlType.Equals/XamlType.GetHashCode\" (#220)"},{"Id":"394223146","IsPullRequest":false,"CreatedAt":"2018-12-26T18:58:19","Actor":"livarcocc","Number":"219","RawContent":null,"Title":"PresentationFramework.Aero not included by default when compiling against .NET Framework","State":"open","Body":"@twsouthwick commented on [Wed Nov 28 2018](https://github.com/dotnet/sdk/issues/2703)\n\nI'm porting an app that relies on `PresentationFramework.Aero` for `ButtonChrome` and found I need to include the following in the csproj to get it to compile when building for .NET Framework 4.7.1:\r\n\r\n```xml\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net471'\">\r\n    <Reference Include=\"PresentationFramework.Aero\" />\r\n  </ItemGroup\r\n```\r\n\r\nIs there a reason this isn't automatically included when setting `<UseWindowsForms>true</UseWindowsForms>`?\n\n---\n\n@livarcocc commented on [Wed Nov 28 2018](https://github.com/dotnet/sdk/issues/2703#issuecomment-442659308)\n\nFrom talking to @rladuca it seems like this is not added by default for non-sdk based projects either. So, it seems like we are keeping with the current behavior.\r\n\r\nAlso, this is a WPF theme, so I am not sure how it relates to `UseWindowsForms` flag, as that is for WinForms and not WPF.\n\n---\n\n@rladuca commented on [Wed Nov 28 2018](https://github.com/dotnet/sdk/issues/2703#issuecomment-442660748)\n\nThat's correct, the set of binaries that are referenced when you make a new desktop framework WPF application do not include PresentationFramework.Aero.  This is also not referenced from a new Windows Forms application.\r\n\r\nAdding the reference manually seems to be entirely appropriate.\r\n\r\n@twsouthwick Are you saying that compiling for netcoreapp3.0 does automatically reference PresentationFramework.Aero?\n\n---\n\n@twsouthwick commented on [Wed Nov 28 2018](https://github.com/dotnet/sdk/issues/2703#issuecomment-442687337)\n\nSorry for the confusion - I meant `<UseWPF>true</UseWPF>`. The project has both of them and copied the first one I have.\r\n\r\n@rladuca The project compiles fine for netcoreapp3.0, but now that I'm looking at it, it doesn't reference `PresentationFramework.Aero`. The file that references the aero library is here: https://github.com/twsouthwick/HandBrake/blob/netcore/win/CS/HandBrakeWPF/Themes/Generic.xaml.\n\n","Url":"https://github.com/dotnet/wpf/issues/219","RelatedDescription":"Open issue \"PresentationFramework.Aero not included by default when compiling against .NET Framework\" (#219)"},{"Id":"394220960","IsPullRequest":false,"CreatedAt":"2018-12-26T18:43:43","Actor":"hughbe","Number":"218","RawContent":null,"Title":"[Discussion/Cleanup] Can we remove ThreeValuedBool in favor of `bool?`","State":"open","Body":"Simple really!","Url":"https://github.com/dotnet/wpf/issues/218","RelatedDescription":"Open issue \"[Discussion/Cleanup] Can we remove ThreeValuedBool in favor of `bool?`\" (#218)"},{"Id":"394220436","IsPullRequest":false,"CreatedAt":"2018-12-26T18:40:53","Actor":"hughbe","Number":"217","RawContent":null,"Title":"XamlType.Equals/XamlType.GetHashCode throws NullReferenceException for types without namespaces","State":"open","Body":"Example:\r\n```cs\r\n\r\npublic static IEnumerable<object[]> Equals_TestData()\r\n{\r\n    var type = new XamlType(typeof(int), new XamlSchemaContext());\r\n    yield return new object[] { type, type, true };\r\n    yield return new object[] { type, new XamlType(typeof(int), new XamlSchemaContext()), true };\r\n    yield return new object[] { type, new XamlType(typeof(string), new XamlSchemaContext()), false };\r\n    yield return new object[] { type, new XamlType(\"namespace\", \"name\", null, new XamlSchemaContext()), false };\r\n    yield return new object[] { type, new SubXamlType(\"name\", null, new XamlSchemaContext()), false };\r\n\r\n    yield return new object[] { new XamlType(\"namespace\", \"name\", null, new XamlSchemaContext()), new XamlType(\"namespace\", \"name\", null, new XamlSchemaContext()), true };\r\n    yield return new object[] { new XamlType(\"namespace\", \"name\", new XamlType[] { new XamlType(typeof(int), new XamlSchemaContext()) }, new XamlSchemaContext()), new XamlType(\"namespace\", \"name\", new XamlType[] { new XamlType(typeof(int), new XamlSchemaContext()) }, new XamlSchemaContext()), true };\r\n    yield return new object[] { new XamlType(\"namespace\", \"name\", null, new XamlSchemaContext()), new XamlType(\"otherNamespace\", \"name\", null, new XamlSchemaContext()), false };\r\n    yield return new object[] { new XamlType(\"namespace\", \"name\", null, new XamlSchemaContext()), new XamlType(\"namespace\", \"otherName\", null, new XamlSchemaContext()), false };\r\n    yield return new object[] { new XamlType(\"namespace\", \"name\", null, new XamlSchemaContext()), new XamlType(\"namespace\", \"name\", new XamlType[] { new XamlType(typeof(int), new XamlSchemaContext()) }, new XamlSchemaContext()), false };\r\n    yield return new object[] { new XamlType(\"namespace\", \"name\", new XamlType[] { new XamlType(typeof(int), new XamlSchemaContext()) }, new XamlSchemaContext()), new XamlType(\"namespace\", \"name\", null, new XamlSchemaContext()), false };\r\n    yield return new object[] { new XamlType(\"namespace\", \"name\", new XamlType[] { new XamlType(typeof(int), new XamlSchemaContext()) }, new XamlSchemaContext()), new XamlType(\"namespace\", \"name\", new XamlType[] { new XamlType(typeof(string), new XamlSchemaContext()) }, new XamlSchemaContext()), false };\r\n    yield return new object[] { new XamlType(\"namespace\", \"name\", new XamlType[] { new XamlType(typeof(int), new XamlSchemaContext()), new XamlType(typeof(string), new XamlSchemaContext()) }, new XamlSchemaContext()), new XamlType(\"namespace\", \"name\", new XamlType[] { new XamlType(typeof(string), new XamlSchemaContext()) }, new XamlSchemaContext()), false };\r\n    yield return new object[] { new XamlType(\"namespace\", \"name\", new XamlType[] { new XamlType(typeof(int), new XamlSchemaContext()) }, new XamlSchemaContext()), new XamlType(\"namespace\", \"name\", new XamlType[] { new XamlType(typeof(int), new XamlSchemaContext()), new XamlType(typeof(string), new XamlSchemaContext()) }, new XamlSchemaContext()), false };\r\n    yield return new object[] { new XamlType(\"namespace\", \"name\", null, new XamlSchemaContext()), new XamlType(typeof(int), new XamlSchemaContext()), false };\r\n    yield return new object[] { new XamlType(\"namespace\", \"name\", null, new XamlSchemaContext()), new SubXamlType(\"name\", null, new XamlSchemaContext()), false };\r\n\r\n    yield return new object[] { new SubXamlType(\"name\", null, new XamlSchemaContext()), new SubXamlType(\"name\", null, new XamlSchemaContext()), true };\r\n    yield return new object[] { new SubXamlType(\"name\", null, new XamlSchemaContext()), new SubXamlType(\"otherName\", null, new XamlSchemaContext()), false };\r\n    yield return new object[] { new SubXamlType(\"name\", null, new XamlSchemaContext()), new XamlType(typeof(int), new XamlSchemaContext()), false };\r\n    yield return new object[] { new SubXamlType(\"name\", null, new XamlSchemaContext()), new XamlType(\"namespace\", \"name\", null, new XamlSchemaContext()), false };\r\n\r\n    yield return new object[] { type, null, false };\r\n    yield return new object[] { type, new object(), false };\r\n    yield return new object[] { null, type, false };\r\n    yield return new object[] { null, null, true };\r\n}\r\n\r\n[Theory]\r\n[MemberData(nameof(Equals_TestData))]\r\npublic void Equals_Invoke_ReturnsExpected(XamlType type, object obj, bool expected)\r\n{\r\n    XamlType other = obj as XamlType;\r\n    if (type != null)\r\n    {\r\n        Assert.Equal(expected, type.Equals(obj));\r\n        Assert.Equal(expected, type.Equals(other));\r\n    }\r\n\r\n    Assert.Equal(expected, type == other);\r\n    Assert.Equal(!expected, type != other);\r\n}\r\n\r\npublic static IEnumerable<object[]> GetHashCode_TestData()\r\n{\r\n    yield return new object[] { new XamlType(\"name\", \"namespace\", null, new XamlSchemaContext()) };\r\n    yield return new object[] { new XamlType(\"name\", \"namespace\", new XamlType[] { new XamlType(typeof(int), new XamlSchemaContext()) }, new XamlSchemaContext()) };\r\n    yield return new object[] { new XamlType(typeof(int), new XamlSchemaContext()) };\r\n    yield return new object[] { new SubXamlType(\"typeName\", null, new XamlSchemaContext()) };\r\n    yield return new object[] { new NoUnderlyingOrBaseType() };\r\n}\r\n\r\n[Theory]\r\n[MemberData(nameof(GetHashCode_TestData))]\r\npublic void GetHashCode_Invoke_ReturnsExpected(XamlType type)\r\n{\r\n    Assert.Equal(type.GetHashCode(), type.GetHashCode());\r\n}\r\npublic class SubXamlType : XamlType\r\n{\r\n    public SubXamlType(string unknownTypeNamespace, string unknownTypeName, IList<XamlType> typeArguments, XamlSchemaContext schemaContext) : base(unknownTypeNamespace, unknownTypeName, typeArguments, schemaContext) { }\r\n\r\n    public SubXamlType(Type underlyingType, XamlSchemaContext schemaContext) : base(underlyingType, schemaContext) { }\r\n\r\n    public SubXamlType(string typeName, IList<XamlType> typeArguments, XamlSchemaContext schemaContext) : base(typeName, typeArguments, schemaContext) { }\r\n}\r\n```\r\n\r\n- Expected: returns `expected`\r\n- Actual: throws `NullReferenceException` (release) or asserts (debug)","Url":"https://github.com/dotnet/wpf/issues/217","RelatedDescription":"Open issue \"XamlType.Equals/XamlType.GetHashCode throws NullReferenceException for types without namespaces\" (#217)"},{"Id":"394213522","IsPullRequest":false,"CreatedAt":"2018-12-26T17:55:26","Actor":"hughbe","Number":"216","RawContent":null,"Title":"XamlTypeInvoker.UnknownInvoker.GetEnumeratorMethod throws NullReferenceException","State":"open","Body":"Example:\r\n\r\n```cs\r\n[Fact]\r\npublic void GetEnumeratorMethod_Unknown_ThrowsNullReferenceException()\r\n{\r\n    XamlTypeInvoker invoker = XamlTypeInvoker.UnknownInvoker;\r\n    Assert.Throws<NullReferenceException>(() => invoker.GetEnumeratorMethod());\r\n}\r\n```\r\n\r\n- Expected: returns `null`, matching behaviour with `GetAddMethod()`\r\n- Actual: throws `NullReferenceException`","Url":"https://github.com/dotnet/wpf/issues/216","RelatedDescription":"Open issue \"XamlTypeInvoker.UnknownInvoker.GetEnumeratorMethod throws NullReferenceException\" (#216)"},{"Id":"394212258","IsPullRequest":true,"CreatedAt":"2018-12-26T17:46:54","Actor":"hughbe","Number":"215","RawContent":null,"Title":" Fix NullReferenceException in `new ContentWrapperAttribute(null).GetHashCode`","State":"open","Body":"Fixes https://github.com/dotnet/wpf/issues/212","Url":"https://github.com/dotnet/wpf/pull/215","RelatedDescription":"Open PR \" Fix NullReferenceException in `new ContentWrapperAttribute(null).GetHashCode`\" (#215)"},{"Id":"394211747","IsPullRequest":true,"CreatedAt":"2018-12-26T17:43:36","Actor":"hughbe","Number":"214","RawContent":null,"Title":"Fix NRE in XamlLoadPermission.FromXml for element without `class` attribute","State":"open","Body":"Fixes https://github.com/dotnet/wpf/issues/213","Url":"https://github.com/dotnet/wpf/pull/214","RelatedDescription":"Open PR \"Fix NRE in XamlLoadPermission.FromXml for element without `class` attribute\" (#214)"},{"Id":"394209581","IsPullRequest":false,"CreatedAt":"2018-12-26T17:29:33","Actor":"hughbe","Number":"213","RawContent":null,"Title":"XamlLoadPermission.FromXml for element without `class` attribute throws NRE","State":"open","Body":"```cs\r\n[Fact]\r\npublic void FromXml_NoClassAttribute_ThrowsNullReferenceException()\r\n{\r\n    var permission = new XamlLoadPermission(PermissionState.None);\r\n    var elem = new SecurityElement(\"IPermission\");\r\n    permission.FromXml(elem);\r\n}\r\n```\r\n\r\n- Expected: throws `ArgumentException` to match other parse failures\r\n- Actual: throws `NullReferenceException`!\r\n\r\n## Cause\r\n\r\n```cs\r\n\r\npublic override void FromXml(SecurityElement elem)\r\n{\r\n    if (elem == null)\r\n    {\r\n        throw new ArgumentNullException(nameof(elem));\r\n    }\r\n    if (elem.Tag != XmlConstants.IPermission)\r\n    {\r\n        throw new ArgumentException(SR.Get(SRID.SecurityXmlUnexpectedTag, elem.Tag, XmlConstants.IPermission), nameof(elem));\r\n    }\r\n\r\n    string className = elem.Attribute(XmlConstants.Class);\r\n    if (!className.StartsWith(GetType().FullName, false, TypeConverterHelper.InvariantEnglishUS))\r\n    {\r\n        throw new ArgumentException(SR.Get(SRID.SecurityXmlUnexpectedValue, className, XmlConstants.Class, GetType().FullName), nameof(elem));\r\n    }\r\n```\r\n\r\nProblem:\r\n```cs\r\nstring className = elem.Attribute(XmlConstants.Class);\r\nif (!className.StartsWith(GetType().FullName, false, TypeConverterHelper.InvariantEnglishUS))\r\n```\r\nThe `className` can be null! ","Url":"https://github.com/dotnet/wpf/issues/213","RelatedDescription":"Open issue \"XamlLoadPermission.FromXml for element without `class` attribute throws NRE\" (#213)"},{"Id":"394209010","IsPullRequest":false,"CreatedAt":"2018-12-26T17:25:47","Actor":"hughbe","Number":"212","RawContent":null,"Title":"new ContentWrapperAttribute(null).GetHashCode() throws NRE","State":"open","Body":"```cs\r\n[Fact]\r\npublic void GetHashCode_NullContentWrapper_ThrowsNullReferenceException()\r\n{\r\n    var attribute = new ContentWrapperAttribute(null);\r\n    Assert.Throws<NullReferenceException>(() => attribute.GetHashCode());\r\n}\r\n```\r\n\r\nFrom https://blogs.msdn.microsoft.com/ericlippert/2011/02/28/guidelines-and-rules-for-gethashcode/:\r\n> Rule: GetHashCode must never throw an exception, and must return\r\n\r\n> Getting a hash code simply calculates an integer; there's no reason why it should ever fail. An implementation of GetHashCode should be able to handle any legal configuration of the object.\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/212","RelatedDescription":"Open issue \"new ContentWrapperAttribute(null).GetHashCode() throws NRE\" (#212)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-08T05:31:01.621235Z","RunDurationInMilliseconds":816}