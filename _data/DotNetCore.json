{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7353943880","Type":"PullRequestEvent","CreatedAt":"2018-03-09T03:36:40","Actor":"4creators","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16853","RelatedDescription":"Opened pull request \"Fix ConvertScalarToVector128(U)Int64 codegen and improve tests\" (#16853) at dotnet/coreclr","RelatedBody":"Fixes codegen ensuring that:\r\n1.  REX.W prefix is emmitted for UInt64 argument for SSE legacy codegen,\r\n2. VEX.REX.W prefix is emmitted for UInt64 argument for VEX encoding\r\n3. Improves ConvertScalarToVector128(U)Int64 tests to check for missed condition - lack of REX.W for numbers with value < Int32.MaxValue"},{"Id":"7353780761","Type":"PullRequestEvent","CreatedAt":"2018-03-09T02:37:39","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16842","RelatedDescription":"Merged pull request \"Fix incorrect topic title inside UsingYourBuild.md\" (#16842) at dotnet/coreclr","RelatedBody":"This topic is about DotnetCli instead of CoreRun -- CoreRun is next topic"},{"Id":"7353738673","Type":"PullRequestEvent","CreatedAt":"2018-03-09T02:22:56","Actor":"tarekgh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16851","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#16851) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"7353544076","Type":"PullRequestEvent","CreatedAt":"2018-03-09T01:17:32","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16845","RelatedDescription":"Merged pull request \"[RyuJit] Fix DCE in liveness.\" (#16845) at dotnet/coreclr","RelatedBody":"Number of liveness iteration depends on number of DCE itarations, so if during DCE iteration deletes statement then we need to recompute liveness and run another DCE until it doesn't find dead nodes.\r\nIf we delete something, but do not recompute liveness than we can have nodes without last uses, than will trigger asserts later in codegen.\r\nFor example:\r\n\r\n```\r\nexample from\r\nRESOLVING BB BOUNDARIES\r\n\r\nBB03 use def in out\r\n{V01 V03 V05 V06 V13}\r\n{V01 V08 V09 V10 V11 V16 V17 V18 V19}\r\n{V01 V05 V06 V13}\r\n{}\r\nVar=Reg beg of BB03: V13=ebx V06=esi V05=edi V01=mm0\r\nVar=Reg end of BB03: none\r\n```\r\n\r\n\r\n`BB03` doesn't use `V03` and doesn't have it in its live-out set because its last use in this block was deleted, but then we did not recompute liveness.\r\nSo when codegen will allocate `V05` it will hit assert that its target register is used (by `V03`).\r\n\r\n*Note: it would be nice to assert that we can't have such sets when something is alive in live-in and is not presented in uses or live-out sets.*\r\n\r\nFix DevDiv_578214."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7354065989","Type":"IssuesEvent","CreatedAt":"2018-03-09T04:26:00","Actor":"tpitman","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8754","RelatedDescription":"Closed issue \"Visual Studio 2017 for Mac Raspbian libhostpolicy.so wrong ELF class ELFCLASS64 \" (#8754) at dotnet/cli","RelatedBody":"The weird thing is that when I did this the first time it worked fine. I have no idea what changed and how to figure out how to fix it. Can someone help please?\r\n\r\n## Steps to reproduce\r\nCreate, build and deploy asp net core mvc project\r\nDeploy to Raspbian with dotnet installed via github instructions\r\nrun dotnet [app].dll\r\n\r\n## Expected  behavior\r\nShould run\r\n\r\n## Actual behavior\r\nGet error:\r\nFailed to load ?-, error: /home/pi/appdir/libhostpolicy.so: wrong ELF class: ELFCLASS64\r\nAn error occurred while loading required library libhostpolicy.so from [/home/pi/appdir/]\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n"},{"Id":"7354037873","Type":"IssuesEvent","CreatedAt":"2018-03-09T04:13:49","Actor":"tpitman","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8754","RelatedDescription":"Opened issue \"Visual Studio 2017 for Mac Raspbian libhostpolicy.so wrong ELF class ELFCLASS64 \" (#8754) at dotnet/cli","RelatedBody":"The weird thing is that when I did this the first time it worked fine. I have no idea what changed and how to figure out how to fix it. Can someone help please?\r\n\r\n## Steps to reproduce\r\nCreate, build and deploy asp net core mvc project\r\nDeploy to Raspbian with dotnet installed via github instructions\r\nrun dotnet [app].dll\r\n\r\n## Expected  behavior\r\nShould run\r\n\r\n## Actual behavior\r\nGet error:\r\nFailed to load ?-, error: /home/pi/appdir/libhostpolicy.so: wrong ELF class: ELFCLASS64\r\nAn error occurred while loading required library libhostpolicy.so from [/home/pi/appdir/]\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n"},{"Id":"7353328835","Type":"PullRequestEvent","CreatedAt":"2018-03-09T00:06:57","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8753","RelatedDescription":"Opened pull request \"Fix #4139 - escape quoted strings for process start\" (#8753) at dotnet/cli","RelatedBody":"Resolves #4139. I got burned by this again recently. It seems the fix is pretty simple. Don't special case arguments that begin/end in quotes already."},{"Id":"7353313675","Type":"IssuesEvent","CreatedAt":"2018-03-09T00:02:13","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8752","RelatedDescription":"Opened issue \"Questionable scope of catch (KeyNotFoundException)\" (#8752) at dotnet/cli","RelatedBody":"See https://github.com/dotnet/cli/pull/8751#discussion_r173316569\r\n\r\nWe're catching KeyNotFoundException from the entire command execution and assuming it means something very specific\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7353271843","Type":"PullRequestEvent","CreatedAt":"2018-03-08T23:49:17","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8751","RelatedDescription":"Merged pull request \"Convert to graceful exception\" (#8751) at dotnet/cli","RelatedBody":""},{"Id":"7353118524","Type":"PullRequestEvent","CreatedAt":"2018-03-08T23:05:53","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8734","RelatedDescription":"Merged pull request \"Remove temp project path from tool install warnings and errors.\" (#8734) at dotnet/cli","RelatedBody":"This commit attempts to filter the diagnostic messages emitted during tool\r\ninstallation.  The diagnostic messages may be prefixed with the temporary\r\nproject; since this is an implementation detail that only causes confusion and\r\nclutter in the diagnostic messages, the prefix is removed if present.\r\n\r\nFixes #8707.\r\n"},{"Id":"7353118512","Type":"IssuesEvent","CreatedAt":"2018-03-08T23:05:53","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8707","RelatedDescription":"Closed issue \"Tool install with nuget error should not display the temp project in output\" (#8707) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nSee related issue #8698.\r\n\r\n```\r\ndotnet install tool Microsoft.Dotnet.Watcher.Tools -g\r\n```\r\n\r\n## Expected  behavior\r\n\r\nThe temp project path should not appear in the output by default:\r\n\r\n```\r\n$ dotnet install tool Microsoft.Dotnet.Watcher.Tools -g\r\nerror NU1212: Invalid project-package combination for Microsoft.DotNet.Watcher.Tools 2.0.0. DotnetToolReference project style can only contain references of the DotnetTool type\r\nThe tool package could not be restored.\r\nTool 'Microsoft.Dotnet.Watcher.Tools' failed to install.\r\n```\r\n\r\n## Actual behavior\r\n\r\nThe temp project path appears in the output:\r\n\r\n```\r\n$ dotnet install tool Microsoft.Dotnet.Watcher.Tools -g\r\n/var/folders/rl/m1rv1rxd643gpwspqrbxy76r0000gn/T/w1heen5l.wc5/yh505uu5.u4i.csproj : error NU1212: Invalid project-package combination for Microsoft.DotNet.Watcher.Tools 2.0.0. DotnetToolReference project style can only contain references of the DotnetTool type\r\nThe tool package could not be restored.\r\nTool 'Microsoft.Dotnet.Watcher.Tools' failed to install.\r\n```\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Command Line Tools (2.1.300-preview2-008266)\r\n\r\nProduct Information:\r\n Version:            2.1.300-preview2-008266\r\n Commit SHA-1 hash:  6fb919f433\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk/2.1.300-preview2-008266/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-26131-06\r\n  Build    : b13a0d5c331f374afd35ded57b9a4b4ab128864c\r\n```\r\n\r\n\r\n\r\n"},{"Id":"7352992824","Type":"PullRequestEvent","CreatedAt":"2018-03-08T22:35:32","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8751","RelatedDescription":"Opened pull request \"Convert to graceful exception\" (#8751) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7350255559","Type":"IssuesEvent","CreatedAt":"2018-03-08T13:46:54","Actor":"nyctef","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/669","RelatedDescription":"Opened issue \"FileNotFoundException for Microsoft.SqlServer.Types 10.0.0.0 when trying to use SQL Server geography data\" (#669) at dotnet/standard","RelatedBody":"Hopefully this is the right place to post this-\r\n\r\nWe've been hitting an issue using [System.Data.SqlClient](https://www.nuget.org/packages/System.Data.SqlClient/) through a netstandard2.0 project where Microsoft.SqlServer.Types 10.0.0.0 will fail to load when trying to fetch geography data from SQL Server. I think we can work around this problem by [getting the dll from nuget](https://www.nuget.org/packages/Microsoft.SqlServer.Types/), but since the nuget package only has a `net40` version, this means the project we're installing the nuget package into can't be `netstandard2.0` any more.\r\n\r\nI've created an example repo here: https://github.com/nyctef/geography-repro to try and demonstrate the problem - it should crash on machines were Microsoft.SqlServer.Types 10.0.0.0 isn't in the GAC already."},{"Id":"7339905933","Type":"IssuesEvent","CreatedAt":"2018-03-06T19:47:00","Actor":"molinch","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/668","RelatedDescription":"Opened issue \"Adding .NET Standard 2 dll breaks build\" (#668) at dotnet/standard","RelatedBody":"Hi all,\r\n\r\nI know there are a couple of already opened issues with a similar topic, but in my case it looks slightly different. The issue is with a web application.\r\n\r\nI have some projects that use Microsoft.CodeAnalysis.CSharp.Scripting and Ben.Demystify.\r\nSince they need a different System.IO. I ended up with binding redirects, so I use System.IO 4.1.1.0.\r\nThis used to work great, and System.IO used to be copied automatically to the web application bin/ folder. The System.IO comes from the nuget package.\r\n\r\nNow I just added to another project the package SixLabors.ImageSharp, it references .NET Standard 2, 1.3 and 1. For that project System.IO comes from C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\net461\\lib\\System.IO.dll\r\nThe issue is that System.IO and some other dlls are no longer copied to the web application bin/ folder. Because of that the app fails to run, it requires System.IO 4.1.1.0 to be there in the bin\\ since I have a binding redirect for it.\r\n\r\nIt seems somehow related to: https://github.com/dotnet/corefx/issues/25773#issuecomment-350000563\r\n\r\nDo you have any work around?\r\n\r\n"},{"Id":"7339806877","Type":"IssuesEvent","CreatedAt":"2018-03-06T19:27:58","Actor":"JBildstein","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/666","RelatedDescription":"Closed issue \"netstandard.xml is malformed\" (#666) at dotnet/standard","RelatedBody":"I'm trying to do some analysis of xml comments in C# code with roslyn and this works all fine until I try to get a comment from a framework type.\r\n\r\nAfter some searching I found that the netstandard.xml file is malformed and trying to parse it with XElement.Parse throws an exception.\r\nFor example, the first occurrence is at line 652:\r\n```\r\n<returns><p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"2\"><p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"1\">A signed integer that indicates the relative values of <code data-dev-comment-type=\"paramref\">a</code> and <code data-dev-comment-type=\"paramref\">b</code>, as shown in the following table.  </p>\r\n <table><thead><tr><th> Value  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"4\" sourceendlinenumber=\"4\"> </th><th> Meaning  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"6\" sourceendlinenumber=\"6\"> </th></tr></thead><tbody><tr><td> Less than zero  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"8\" sourceendlinenumber=\"8\"> </td><td><code data-dev-comment-type=\"paramref\">a</code> is less than <code data-dev-comment-type=\"paramref\">b</code>, with casing ignored.  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"10\" sourceendlinenumber=\"10\"> </td></tr><tr><td> Zero  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"12\" sourceendlinenumber=\"12\"> </td><td><code data-dev-comment-type=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\">b</code>, with casing ignored.  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"14\"> </td></tr><tr><td> Greater than zero  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"16\" sourceendlinenumber=\"16\"> </td><td><code data-dev-comment-type=\"paramref\">a</code> is greater than <code data-dev-comment-type=\"paramref\">b</code>, with casing ignored.  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"18\" sourceendlinenumber=\"18\"> </td></tr></tbody></table></p>\r\n</returns>\r\n```\r\nand it looks like all of the errors are related to elements containing \"netstandard.yml\"\r\n\r\nAlso, for some reason the root node is \"span\" and not \"doc\" as usual. i.e.\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?><span>\r\n<doc>\r\n...\r\n</doc></span>\r\n```\r\nOnce I fixed those errors by removing them in my local copy, I am able to retrieve the xml comments with roslyn.\r\n\r\nI checked NETStandard.Library version 2.0.0 and 2.0.1 from nuget."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7354156263","Type":"PullRequestEvent","CreatedAt":"2018-03-09T05:05:24","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27886","RelatedDescription":"Opened pull request \"SocketsHttpHandler: fix logic to check for Proxy-support header\" (#27886) at dotnet/corefx","RelatedBody":"Currently we're looking for this header when we do proxy auth.  This is wrong.  We should look for this header when we are trying to do regular auth through a proxy.\r\n\r\n@davidsh @wfurt @stephentoub \r\n\r\nFixes #27872 \r\n\r\n@wfurt can you test and confirm that this fixes #27872?  (Windows only)"},{"Id":"7353982621","Type":"IssuesEvent","CreatedAt":"2018-03-09T03:51:24","Actor":"harvinders","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27885","RelatedDescription":"Opened issue \"Getting error on windows => System.PlatformNotSupportedException: 'System.IO.Ports is currently only supported on Windows.'\" (#27885) at dotnet/corefx","RelatedBody":"I have a .net standard 2.0 dll (Drivers.CommunicationLocal) which is referencing SerialPort class. When I try to use this from a .Net 4.6.1 console app or a xUnit (.net core 2.0) on windows 10, I get the following exception. Using it from UWP app works fine.\r\n\r\nSystem.PlatformNotSupportedException: System.IO.Ports is currently only supported on Windows.\r\n   at System.IO.Ports.SerialPort..ctor(String portName, Int32 baudRate, Parity parity, Int32 dataBits)\r\n   at Drivers.CommunicationLocal.CommunicationLayerSerialPortLocal..ctor(SettingSerialPortLocal settings) in C:\\Users\\abc\\Documents\\Visual Studio 2017\\Projects\\experiment\\senna\\src\\Drivers.CommunicationLocal\\CommunicationLayerSerialPortLocal.cs:line 24"},{"Id":"7353977558","Type":"PullRequestEvent","CreatedAt":"2018-03-09T03:49:27","Actor":"tarekgh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27882","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#27882) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7353885284","Type":"PullRequestEvent","CreatedAt":"2018-03-09T03:14:48","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25364","RelatedDescription":"Opened pull request \" Extract common code to a helper method\" (#25364) at dotnet/roslyn","RelatedBody":""},{"Id":"7353829876","Type":"PullRequestEvent","CreatedAt":"2018-03-09T02:55:12","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25363","RelatedDescription":"Opened pull request \"fix codeFix info bar behavior and fix AutoProperty to only offer refactoring when it is on right context\" (#25363) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nUser gets code fix info bar due to exception thrown from refactoring. even if user selects suppress exception from infobar, it keeps showing same exception from same refactoring when user invokes Lightbulb again.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/568326?src=alerts&src-action=cta\r\n\r\n### Workarounds, if any\r\n\r\nThere is no workaround.\r\n\r\n### Risk\r\n\r\nI don't see any risk.\r\n\r\n### Performance impact\r\n\r\nNo perf impact.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo\r\n\r\n### Root cause analysis\r\n\r\nThis contains 2 issues.\r\n\r\nFirst, the refactoring ran when it shouldn't. like property defined under namespace. at the end, the refactoring couldn't find place where it can generate code so it threw.\r\n\r\nSecond, when exception is thrown and code fix info bar is shown. if user choose to suppress exception, it should never show the info bar again about the exception. but it kept show the info bar because it didn't put itself in the ignore list.\r\n\r\n### How was the bug found?\r\n\r\nFeedback\r\n"},{"Id":"7353718982","Type":"PullRequestEvent","CreatedAt":"2018-03-09T02:16:26","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25297","RelatedDescription":"Merged pull request \"Restore semantic model functionality in tuple comparisons\" (#25297) at dotnet/roslyn","RelatedBody":"Two parts of this change:\r\n- adding `ConvertedLeft` and `ConvertedRight` to the bound node for tuple comparison. Those are only used by the semantic model, but skipped by other visitors. One subtlety: They cannot be made by applying a conversion on the top-level tuple, but rather we try to give each element an converted type if we can (even if the containing tuple remains typeless).\r\n- adding a third kind of `TupleBinaryOperatorKind` to represent `null == null` element-wise comparison while keeping such `null`s typeless.\r\n\r\n"},{"Id":"7353616185","Type":"PullRequestEvent","CreatedAt":"2018-03-09T01:41:47","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25361","RelatedDescription":"Opened pull request \"fixed MEF composition issue cased by waiter change\" (#25361) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nUser tries to use VB snippets and it is missing from snippet list.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/25212\r\n\r\n### Workarounds, if any\r\n\r\nThere is no workaround\r\n\r\n### Risk\r\n\r\nThere is no risk\r\n\r\n### Performance impact\r\n\r\nno performance impact\r\n\r\n### Is this a regression from a previous update?\r\n\r\nYes. #24512 introduces the bug.\r\n\r\n### Root cause analysis\r\n\r\nwhen we changed waiter, <ImportMany> wasn't removed from signature causing MEF import exception to happen. problem was, it didn't crash VS and silently logged the issue and moved on.\r\n\r\n### How was the bug found?\r\n\r\nDogfooding\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7353863130","Type":"PullRequestEvent","CreatedAt":"2018-03-09T03:06:49","Actor":"tarekgh","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5522","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5522) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7353743619","Type":"PullRequestEvent","CreatedAt":"2018-03-09T02:24:40","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5522","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5522) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7353268533","Type":"PullRequestEvent","CreatedAt":"2018-03-08T23:48:15","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5521","RelatedDescription":"Merged pull request \"Remove libuuid usage\" (#5521) at dotnet/corert","RelatedBody":"Related to https://github.com/dotnet/coreclr/pull/16643"},{"Id":"7353137402","Type":"PullRequestEvent","CreatedAt":"2018-03-08T23:10:31","Actor":"danmosemsft","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5520","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5520) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7352890284","Type":"PullRequestEvent","CreatedAt":"2018-03-08T22:12:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5521","RelatedDescription":"Opened pull request \"Remove libuuid usage\" (#5521) at dotnet/corert","RelatedBody":"Related to https://github.com/dotnet/coreclr/pull/16643"},{"Id":"7352867637","Type":"PullRequestEvent","CreatedAt":"2018-03-08T22:07:14","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5520","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5520) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7352852851","Type":"PullRequestEvent","CreatedAt":"2018-03-08T22:04:02","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5517","RelatedDescription":"Merged pull request \"Fix up some alignments\" (#5517) at dotnet/corert","RelatedBody":"* Optional fields is a bunch of bytes without relocs. We don't need a pointer alignment.\r\n* Sealed vtables are a bunch of 32bit relative relocs. They are not pointer sized.\r\n* R2R helpers don't have addresses that are visible from managed code. We don't need to align them at 4 byte boundaries.\r\n\r\nSaves around 10 kB on the size of a Hello world. Won't make a huge difference, but this was an easy thing."},{"Id":"7352852320","Type":"PullRequestEvent","CreatedAt":"2018-03-08T22:03:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5516","RelatedDescription":"Merged pull request \"Fix IL of open instance thunk\" (#5516) at dotnet/corert","RelatedBody":"When we have an open instance thunk for a method on a valuetype (i.e. a delegate whose signature has a `ref` (valuetype) first parameter), we shouldn't push the first argument to `GetActualTargetFunctionPointer` because that method expects a reference type.\r\n\r\nProject N delegate transform already has this fix."},{"Id":"7352851103","Type":"PullRequestEvent","CreatedAt":"2018-03-08T22:03:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5519","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5519) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7352121078","Type":"PullRequestEvent","CreatedAt":"2018-03-08T19:31:12","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5519","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5519) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7353300407","Type":"IssuesEvent","CreatedAt":"2018-03-08T23:58:16","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1265","RelatedDescription":"Closed issue \"System.IO.Compression 4.3 in a .NET Standard assembly, the package is not added to the referring UWP Apps for ARM.\" (#1265) at dotnet/sdk","RelatedBody":"While using System.IO.Compression  4.3 in a .NET Standard assembly, the package is not added to the referring UWP Apps for ARM.\r\n\r\nWhen forcing 4.1 reference in UWP App the lib is there (but failing because of missing entry point). \r\nWhen forcing 4.3 reference in UWP App the lib is not present in the Windows Phone emulator…\r\n\r\nRepro. sample joint: [ReproCompression.zip](https://github.com/dotnet/sdk/files/1036087/ReproCompression.zip)\r\n"},{"Id":"7353134415","Type":"PullRequestEvent","CreatedAt":"2018-03-08T23:09:46","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2029","RelatedDescription":"Opened pull request \"Adding quotes to paths used in crossgen for the runtime store.\" (#2029) at dotnet/sdk","RelatedBody":"Fixes https://github.com/dotnet/cli/issues/8014"},{"Id":"7352795424","Type":"IssuesEvent","CreatedAt":"2018-03-08T21:51:51","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1092","RelatedDescription":"Closed issue \"Resource designer files generated are incompatible with netstandard\" (#1092) at dotnet/sdk","RelatedBody":"Resource designer files generated are incompatible with netstandard if a desktop framework is included first in the ``TargetFrameworks`` list.\r\n\r\n### Steps\r\n1. Create a new netstandard library with VS 2017\r\n1. Add a resource file to the project\r\n1. Change ``$(TargetFramework)=netstandard1.3`` to ``$(TargetFrameworks)=net45;netstandard1.3``\r\n1. Right click on the resource file and select ``Run Custom Tool``\r\n1. Rebuild\r\n\r\n### Expected\r\nThe project will build\r\n\r\n### Actual \r\nThe project fails to build with an error about being unable to find the ``Assembly`` property.\r\n\r\n### Observation\r\n\r\nWhen a desktop framework is first in the list of target frameworks the designer file is generated incorrectly for netstandard.\r\n\r\n``.GetTypeInfo()`` is missing from the designer file:\r\n\r\n```global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"ClassLibrary12.Resource1\", typeof(Resource1).Assembly);```\r\n\r\nUsing netstandard only you would get:\r\n\r\n```global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"ClassLibrary12.Resource1\", typeof(Resource1).GetTypeInfo().Assembly);```\r\n\r\n### Workaround\r\nUsing ``$(TargetFrameworks)=netstandard1.3;net45`` instead of ``$(TargetFrameworks)=net45;netstandard1.3`` generates the correct file.\r\n"},{"Id":"7352759961","Type":"PullRequestEvent","CreatedAt":"2018-03-08T21:44:13","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2027","RelatedDescription":"Merged pull request \"Replaced NetSdkMessage with a ShowPreviewMessage\" (#2027) at dotnet/sdk","RelatedBody":"Replaced NetSdkMessage with a ShowPreviewMessage, that is super specific to the preview message scenario. Changed to this new task because it handles displaying the message only once per build per node, instead of spamming folks with it.\r\n\r\nFixes https://github.com/dotnet/sdk/issues/2018\r\n\r\ncc @rainersigwald "},{"Id":"7352759950","Type":"IssuesEvent","CreatedAt":"2018-03-08T21:44:13","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2018","RelatedDescription":"Closed issue \"New warning about preview SDK is logged a lot in large solution\" (#2018) at dotnet/sdk","RelatedBody":"When I build https://github.com/mikeharder/dotnet-cli-perf/tree/master/scenarios/web/large/core, I get spammed with the message.\r\n\r\nNETSdkMessage even manages to take up 74 ms.\r\n\r\ncc @livarcocc "}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"971915245378715648","CreatedAt":"2018-03-09T01:07:06+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available! https://t.co/OjVLK9nv9f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":15,"RawContent":null}]}},"RunOn":"2018-03-09T05:30:27.5050582Z","RunDurationInMilliseconds":11551}