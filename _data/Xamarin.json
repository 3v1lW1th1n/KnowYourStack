{"Data":{"Blog":{"FeedItems":[{"Title":"The Xamarin Show: Exploring Awesome Xamarin & Visual Studio Features","PublishedOn":"2018-07-05T18:50:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Each week on The Xamarin Show we explore the latest and greatest in Xamarin development by looking at new features built into Visual Studio, build native cross-platform user interfaces with...","Href":"https://blog.xamarin.com/xamarin-show-ux-xamarinforms-apis-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Podcast: What’s New in Visual Studio 2017, Xamarin.Forms, and the Android designer","PublishedOn":"2018-07-02T19:36:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, Pierce Boggan and James Montemagno discuss the latest &#038; greatest in mobile .NET development, including Xamarin.Forms 3.0 and 3.1, Visual Studio 2017...","Href":"https://blog.xamarin.com/xamarin-podcast-vs2017-xamarinforms-android-designer/","RawContent":null},{"Title":"Use MSBuild to Define Advanced Android VersionCode","PublishedOn":"2018-06-28T16:20:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the introduction of Xamarin.Android v7.2, two new MSBuild properties were also introduced in order to make maintaining Android VersionCode for Android apps even easier: AndroidVersionCodePattern...","Href":"https://blog.xamarin.com/advanced-android-versioncode/","RawContent":null},{"Title":"What’s New In the Xamarin Android Designer","PublishedOn":"2018-06-25T20:10:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Backed by your feedback, our team has been able to improve the Xamarin Android Designer significantly since it&#8217;s initial release a few years back. Now, we have a ton of new and exciting work...","Href":"https://blog.xamarin.com/future-xamarin-android-designer/","RawContent":null},{"Title":"Getting Android Apps Ready for Google Play’s Target API Level Requirements","PublishedOn":"2018-06-21T18:46:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Developing Android applications is a unique experience, as it often involves taking advantage of the latest capabilities of Android while still providing backward compatibility to older Android...","Href":"https://blog.xamarin.com/android-apps-google-play-target-api-level-requirements/","RawContent":null},{"Title":"Supporting iOS 11 and iPhone X in Xamarin.iOS Apps","PublishedOn":"2018-06-18T19:18:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Apple has indicated that starting in July 2018 all new apps and app updates submitted to the App Store must be built with the iOS 11 SDK and support the iPhone X Super Retina display. The following...","Href":"https://blog.xamarin.com/supporting-ios-11-iphone-x-xamarin-apps/","RawContent":null},{"Title":"More Cross-Platform APIs with Xamarin.Essentials Latest Preview","PublishedOn":"2018-06-14T19:11:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced Xamarin.Essentials, a core set of cross-platform APIs to help developers build native apps, at Microsoft Build 2018. Xamarin.Essentials gives developers access to over thirty...","Href":"https://blog.xamarin.com/cross-platform-apis-xamarin-essentials-latest-preview/","RawContent":null},{"Title":"Use MongoDB With Your Xamarin Apps","PublishedOn":"2018-06-12T20:01:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important decisions that you&#8217;ll make when designing an app is what type of database to use. Not too long ago, the choice was limited to relational databases like SQL server....","Href":"https://blog.xamarin.com/write-apps-using-mongodb-xamarin/","RawContent":null},{"Title":"Build 2018: Conference Vision Demo App","PublishedOn":"2018-06-07T20:43:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Build 2018 we shipped Xamarin.Forms 3.0. Did you miss the announcement? No worries, you can watch it here to catch up on many of the great new things that will help make you more productive...","Href":"https://blog.xamarin.com/build-2018-conference-vision-demo-app/","RawContent":null},{"Title":"Xamarin.Android Firebase Job Dispatcher: Background Scheduling for all Android Devices","PublishedOn":"2018-06-04T16:00:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Running tasks in the background is important for Android apps. It&#8217;s what helps keep an app responsive to the user and allows work to get done even when the user isn’t actively engaged with the...","Href":"https://blog.xamarin.com/xamarin-android-firebase-job-dispatcher-background-scheduling-android-devices/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7941074677","Type":"PullRequestEvent","CreatedAt":"2018-07-10T02:18:12","Actor":"Aguilex","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1941","RelatedDescription":"Merged pull request \"Updated reference to mono/mono@cae8c54\" (#1941) at xamarin/xamarin-android","RelatedBody":"Updated reference to mono/mono@cae8c54"},{"Id":"7940626734","Type":"PullRequestEvent","CreatedAt":"2018-07-09T23:28:52","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1943","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] build.props can cause ConvertResourceCases to skip\" (#1943) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1933\r\n\r\nThere have been various reports of a scenario such as:\r\n- Open a project in VS 2017, that uses uppercase letters when\r\n  referencing a resource, such as `@drawable/IMALLCAPS`\r\n- A Design-Time Build occurs\r\n- Some future build later, a *regular* build fails with an `APT0000`\r\n  error\r\n\r\n```\r\n    Resources\\layout\\test.axml(3,0): error APT0000: No resource found that matches the given name (at 'src' with value '@drawable/IMALLCAPS')\r\n```\r\n\r\nOnce you are in this state, you are basically hosed until you\r\n`Rebuild` or delete `obj`...\r\n\r\nAfter a lot of digging, I was able to reproduce the issue by\r\ninvalidating `build.props`. This happens in a lot of common\r\nsituations:\r\n- `$(DesignTimeBuild)` changes, such as a DTB or a regular build\r\n- `$(AdbTarget)` changes, such as when you change the device or\r\n  emulator you are deploying to\r\n\r\nI created a `BuildPropsBreaksConvertResourcesCases` test that\r\nreproduces this issue by modifying the timestamp on `build.props`.\r\n\r\nIf `build.props` was invalidated, this was happening:\r\n\r\n    Target Name=_UpdateAndroidResgen Project=UnnamedProject.csproj\r\n    ...\r\n        Target Name=_GenerateAndroidResourceDir Project=UnnamedProject.csproj\r\n            Building target \"_GenerateAndroidResourceDir\" completely.\r\n            Input file \"obj\\Debug\\build.props\" is newer than output file \"obj\\Debug\\res.flag\".\r\n            ...\r\n                CopyIfChanged Task\r\n                  ...\r\n                  ModifiedFiles:\r\n                    C:\\Users\\myuser\\Desktop\\Git\\xamarin-android\\bin\\TestDebug\\temp\\BuildPropsBreaksConvertResourcesCases\\obj\\Debug\\res\\layout\\main.xml\r\n                    C:\\Users\\myuser\\Desktop\\Git\\xamarin-android\\bin\\TestDebug\\temp\\BuildPropsBreaksConvertResourcesCases\\obj\\Debug\\res\\layout\\test.xml\r\n                    C:\\Users\\myuser\\Desktop\\Git\\xamarin-android\\bin\\TestDebug\\temp\\BuildPropsBreaksConvertResourcesCases\\obj\\Debug\\res\\values\\strings.xml\r\n\r\nThe `CopyIfChanged` task is overwriting my `test.xml` layout file with\r\nthe original file contents--which has `IMALLCAPS` in uppercase.\r\n\r\nThis would normally be OK, except `ConvertResourcesCases` skipped\r\nprocessing this file!\r\n\r\n    ConvertResourcesCases\r\n        Parameters\r\n            ResourceDirectories = obj\\Debug\\res\\\r\n            AcwMapFile = obj\\Debug\\acw-map.txt\r\n            AndroidConversionFlagFile = obj\\Debug\\R.cs.flag\r\n        ConvertResourcesCases Task\r\n          ResourceDirectories: obj\\Debug\\res\\\r\n          AcwMapFile: obj\\Debug\\acw-map.txt\r\n          AndroidConversionFlagFile: obj\\Debug\\R.cs.flag\r\n          AndroidConversionFlagFile modified: 7/9/2018 7:57:56 PM\r\n          Skipping: obj\\Debug\\res\\layout\\main.xml  7/9/2018 7:57:53 PM <= 7/9/2018 7:57:56 PM\r\n          Skipping: obj\\Debug\\res\\layout\\test.xml  7/9/2018 7:57:53 PM <= 7/9/2018 7:57:56 PM\r\n          Skipping: obj\\Debug\\res\\values\\strings.xml  7/9/2018 7:57:53 PM <= 7/9/2018 7:57:56 PM\r\n\r\nSince `obj\\Debug\\R.cs.flag` is newer than these files, `IMALLCAPS` is\r\nnot converted to lower case!\r\n\r\nIt appears that the `CopyIfChanged` MSBuild task was not setting the\r\ntimestamps of files it copies...\r\n\r\nAfter fixing this, `CopyIfChanged` does not ovewrite `test.xml` in the\r\nfirst place:\r\n\r\n    CopyIfChanged Task\r\n      ...\r\n      Skipping Resources\\drawable-hdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-mdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-xhdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-xxhdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-xxxhdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable\\IMALLCAPS.png its up to date\r\n      Skipping Resources\\layout\\Main.axml its up to date\r\n      Skipping Resources\\layout\\test.axml its up to date\r\n      Skipping Resources\\values\\Strings.xml its up to date\r\n    ModifiedFiles:\r\n\r\nNote that `ModifiedFiles` is blank, and my unit test now passes."},{"Id":"7940626725","Type":"IssuesEvent","CreatedAt":"2018-07-09T23:28:52","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1933","RelatedDescription":"Closed issue \"DeleteBinObj issue with Resources\" (#1933) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Somehow when testing/building [Xamarin.Forms.ControlGallery.Android](https://github.com/xamarin/Xamarin.Forms/tree/42c07d1ae5aa56eb574b7d169499f1a9af7ec080/Xamarin.Forms.ControlGallery.Android)\r\n2. I randomly get an `APT0000` error\r\n3. `Rebuild` fixes it\r\n\r\nI am not exactly sure what step I did to _cause_ this, the error I get is:\r\n\r\n```\r\n\"C:\\Users\\myuser\\Desktop\\Git\\Xamarin.Forms\\Xamarin.Forms.ControlGallery.Android\\Xamarin.Forms.ControlGallery.Android.csproj\" (default target) (1) ->\r\n(_UpdateAndroidResgen target) ->\r\n  Resources\\layout\\NativeAndroidCell.axml(3): error APT0000: No resource found that matches the given name (at 'background' with value '@drawable/CustomSelector'). [C:\\Users\\myuser\\Desktop\\Git\\Xamarin.Forms\\Xamarin.Forms.ControlGallery.Android\\Xamarin\r\n.Forms.ControlGallery.Android.csproj]\r\n  Resources\\layout\\NativeAndroidListViewCell.axml(3): error APT0000: No resource found that matches the given name (at 'background' with value '@drawable/CustomSelector2'). [C:\\Users\\myuser\\Desktop\\Git\\Xamarin.Forms\\Xamarin.Forms.ControlGallery.Androi\r\nd\\Xamarin.Forms.ControlGallery.Android.csproj]\r\n\r\n    7 Warning(s)\r\n    2 Error(s)\r\n```\r\n\r\nIt could be related to opening the solution in VS for Windows?\r\n\r\nIn `obj\\Debug\\res` I see both `customselector.xml` and `customselector2.xml`.\r\n\r\n### Expected Behavior\r\n\r\nI should not have to `Rebuild` here, this seems to be a DeleteBinObj issue.\r\n\r\n### Actual Behavior\r\n\r\nI have to `Rebuild` for the project to build.\r\n\r\n### Version Information\r\n\r\nI was using xamarin-android/master as of: 3558fd2a5dadf7b6a9eb9750f33196e593359312\r\n\r\n### Log File\r\n\r\nI zipped up the project, `obj`, `bin`, and `msbuild.binlog`: https://www.dropbox.com/s/6l5ak1mlqybw9k5/Xamarin.Forms.ControlGallery.Android.zip?dl=0\r\n\r\n_NOTE: Github had a 10MB limit_\r\n\r\n"},{"Id":"7940096656","Type":"PullRequestEvent","CreatedAt":"2018-07-09T21:05:15","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1942","RelatedDescription":"Merged pull request \"Include soft debugger interface code in libmonodroid\" (#1942) at xamarin/xamarin-android","RelatedBody":"Due to a mistake in `CMakeLists.txt` the `DEBUG` macro wasn't defined and, in\r\neffect, no libmonodroid.so built after the switch to cmake included the soft\r\ndebugger code required for debugging on device or in the emulator.\r\n\r\nThis commit fixes the issue by properly defining `-DDEBUG` whenever necessary.\r\nAdditionally, it now properly adds other native debugging flags which were\r\npreviously mistakenly omitted."},{"Id":"7939972737","Type":"PullRequestEvent","CreatedAt":"2018-07-09T20:40:00","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1943","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] build.props can cause ConvertResourceCases to skip\" (#1943) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1933\r\n\r\nThere have been various reports of a scenario such as:\r\n- Open a project in VS 2017, that uses uppercase letters when\r\n  referencing a resource, such as `@drawable/IMALLCAPS`\r\n- A Design-Time Build occurs\r\n- Some future build later, a *regular* build fails with an `APT0000`\r\n  error\r\n\r\n```\r\n    Resources\\layout\\test.axml(3,0): error APT0000: No resource found that matches the given name (at 'src' with value '@drawable/IMALLCAPS')\r\n```\r\n\r\nOnce you are in this state, you are basically hosed until you\r\n`Rebuild` or delete `obj`...\r\n\r\nAfter a lot of digging, I was able to reproduce the issue by\r\ninvalidating `build.props`. This happens in a lot of common\r\nsituations:\r\n- `$(DesignTimeBuild)` changes, such as a DTB or a regular build\r\n- `$(AdbTarget)` changes, such as when you change the device or\r\n  emulator you are deploying to\r\n\r\nI created a `BuildPropsBreaksConvertResourcesCases` test that\r\nreproduces this issue by modifying the timestamp on `build.props`.\r\n\r\nIf `build.props` was invalidated, this was happening:\r\n\r\n    Target Name=_UpdateAndroidResgen Project=UnnamedProject.csproj\r\n    ...\r\n        Target Name=_GenerateAndroidResourceDir Project=UnnamedProject.csproj\r\n            Building target \"_GenerateAndroidResourceDir\" completely.\r\n            Input file \"obj\\Debug\\build.props\" is newer than output file \"obj\\Debug\\res.flag\".\r\n            ...\r\n                CopyIfChanged Task\r\n                  ...\r\n                  ModifiedFiles:\r\n                    C:\\Users\\myuser\\Desktop\\Git\\xamarin-android\\bin\\TestDebug\\temp\\BuildPropsBreaksConvertResourcesCases\\obj\\Debug\\res\\layout\\main.xml\r\n                    C:\\Users\\myuser\\Desktop\\Git\\xamarin-android\\bin\\TestDebug\\temp\\BuildPropsBreaksConvertResourcesCases\\obj\\Debug\\res\\layout\\test.xml\r\n                    C:\\Users\\myuser\\Desktop\\Git\\xamarin-android\\bin\\TestDebug\\temp\\BuildPropsBreaksConvertResourcesCases\\obj\\Debug\\res\\values\\strings.xml\r\n\r\nThe `CopyIfChanged` task is overwriting my `test.xml` layout file with\r\nthe original file contents--which has `IMALLCAPS` in uppercase.\r\n\r\nThis would normally be OK, except `ConvertResourcesCases` skipped\r\nprocessing this file!\r\n\r\n    ConvertResourcesCases\r\n        Parameters\r\n            ResourceDirectories = obj\\Debug\\res\\\r\n            AcwMapFile = obj\\Debug\\acw-map.txt\r\n            AndroidConversionFlagFile = obj\\Debug\\R.cs.flag\r\n        ConvertResourcesCases Task\r\n          ResourceDirectories: obj\\Debug\\res\\\r\n          AcwMapFile: obj\\Debug\\acw-map.txt\r\n          AndroidConversionFlagFile: obj\\Debug\\R.cs.flag\r\n          AndroidConversionFlagFile modified: 7/9/2018 7:57:56 PM\r\n          Skipping: obj\\Debug\\res\\layout\\main.xml  7/9/2018 7:57:53 PM <= 7/9/2018 7:57:56 PM\r\n          Skipping: obj\\Debug\\res\\layout\\test.xml  7/9/2018 7:57:53 PM <= 7/9/2018 7:57:56 PM\r\n          Skipping: obj\\Debug\\res\\values\\strings.xml  7/9/2018 7:57:53 PM <= 7/9/2018 7:57:56 PM\r\n\r\nSince `obj\\Debug\\R.cs.flag` is newer than these files, `IMALLCAPS` is\r\nnot converted to lower case!\r\n\r\nIt appears that the `CopyIfChanged` MSBuild task was not setting the\r\ntimestamps of files it copies...\r\n\r\nAfter fixing this, `CopyIfChanged` does not ovewrite `test.xml` in the\r\nfirst place:\r\n\r\n    CopyIfChanged Task\r\n      ...\r\n      Skipping Resources\\drawable-hdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-mdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-xhdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-xxhdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable-xxxhdpi\\Icon.png its up to date\r\n      Skipping Resources\\drawable\\IMALLCAPS.png its up to date\r\n      Skipping Resources\\layout\\Main.axml its up to date\r\n      Skipping Resources\\layout\\test.axml its up to date\r\n      Skipping Resources\\values\\Strings.xml its up to date\r\n    ModifiedFiles:\r\n\r\nNote that `ModifiedFiles` is blank, and my unit test now passes."},{"Id":"7939114786","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:44:22","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1942","RelatedDescription":"Opened pull request \"Include soft debugger interface code in libmonodroid\" (#1942) at xamarin/xamarin-android","RelatedBody":"Due to a mistake in `CMakeLists.txt` the `DEBUG` macro wasn't defined and, in\r\neffect, no libmonodroid.so built after the switch to cmake included the soft\r\ndebugger code required for debugging on device or in the emulator.\r\n\r\nThis commit fixes the issue by properly defining `-DDEBUG` whenever necessary.\r\nAdditionally, it now properly adds other native debugging flags which were\r\npreviously mistakenly omitted."},{"Id":"7938623667","Type":"PullRequestEvent","CreatedAt":"2018-07-09T16:07:53","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1941","RelatedDescription":"Opened pull request \"Updated reference to mono/mono@cae8c54\" (#1941) at xamarin/xamarin-android","RelatedBody":"Updated reference to mono/mono@cae8c54"},{"Id":"7938326276","Type":"PullRequestEvent","CreatedAt":"2018-07-09T15:19:35","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1937","RelatedDescription":"Merged pull request \"Ignore <merge> when generating code-behind source\" (#1937) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1929\r\n\r\n`<merge>` is an element used by Android to avoid stacking too many view groups\r\nwhen one layout is included into another. In such cases `<merge>` can be used as\r\na place-holder which is replaced by the enclosing view group of the layout that\r\nincludes another layout with `<merge>` as the root element. However, as much as\r\nyou can call `FindViewById` to find an instance of `<merge>` which was given the\r\n`android:id` attribute, Android will always return `null` in such case, as the\r\nelement has no type counterpart in the `Android.Views` collection of views.\r\nTherefore, we must ignore the element whenever we process a layout that contains\r\nit decorated with `android:id` in order to avoid confusion in generated\r\ncode (i.e. the property generated for the element would be of type `merge` which\r\ndoes not exist). We could instead generate a property of type\r\n`Android.Views.View` and always return `null` from it, but that unnecessarily\r\nincreases code size - we'd be adding effectively dead code."},{"Id":"7938326254","Type":"IssuesEvent","CreatedAt":"2018-07-09T15:19:35","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1929","RelatedDescription":"Closed issue \"[Code Behind] Encountering issues when attempting to add use code behind on an activity layout with a root <Merge> element\" (#1929) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\nI've started updating [Topeka](https://github.com/xamarin/monodroid-samples/tree/master/android5.0/Topeka) to use code behind, and the QuizActivity is throwing an error when I attempt to add a xamarin:classes attribute to the <merge> tag in the corresponding [layout file](https://github.com/xamarin/monodroid-samples/blob/master/android5.0/Topeka/Topeka/Resources/layout/activity_quiz.xml).\r\n\r\n1. Download and attempt to build the attached project. \r\n\r\n[Topeka 2.zip](https://github.com/xamarin/xamarin-android/files/2167881/Topeka.2.zip)\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nCode generation succeeds.\r\n\r\n### Actual Behavior\r\n\r\n```\r\nobj/Debug/generated/Topeka.Activities.QuizActivity.activity_quiz.g.cs(78,10,78,15): error CS0246: The type or namespace name 'merge' could not be found (are you missing a using directive or an assembly reference?)\r\nobj/Debug/generated/Resources/layout/activity_quiz.xml(5,10,5,15): error CS0246: The type or namespace name 'merge' could not be found (are you missing a using directive or an assembly reference?)\r\nobj/Debug/generated/Topeka.Activities.QuizActivity.activity_quiz.g.cs(81,20,81,24): error CS0102: The type 'QuizActivity' already contains a definition for 'icon'\r\nobj/Debug/generated/Resources/layout/activity_quiz.xml(3,3,3,8): error CS0246: The type or namespace name 'merge' could not be found (are you missing a using directive or an assembly reference?)\r\n```\r\n\r\n### Version Information\r\nhttps://gist.github.com/pjcollins/2a51c2c034cac4eec90dc77a2c6277ad\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n[Build-Output-2018-07-05.binlog.zip](https://github.com/xamarin/xamarin-android/files/2167878/Build-Output-2018-07-05.binlog.zip)\r\nhttps://gist.githubusercontent.com/pjcollins/a698a1226e4d73c0a7dc210c69be7060/raw/aff1e084fce339b7e3d64c1a30b8bbc65cfa3725/gistfile1.txt\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7938273009","Type":"PullRequestEvent","CreatedAt":"2018-07-09T15:11:16","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1940","RelatedDescription":"Opened pull request \"[timing] use Release build of xabuild/xamarin-android if possible\" (#1940) at xamarin/xamarin-android","RelatedBody":"When timing builds, and plotting them on Jenkins, we should prefer to\r\nuse the `Release` build output of `xamarin-android` if it exists.\r\n\r\nThis also will fix a problem downstream in `monodroid`, where I'm not\r\nable to profile `Debug` builds because `bin\\Debug` *might* not exist.\r\n`monodroid` seems to mostly use `Release` builds of `xamarin-android`.\r\nWe really need to profile `Debug` Xamarin.Android application builds\r\nso that we can see how `Fast Deployment` is performing."},{"Id":"7938214009","Type":"PullRequestEvent","CreatedAt":"2018-07-09T15:01:55","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1939","RelatedDescription":"Opened pull request \"[WIP] default interface methods support\" (#1939) at xamarin/xamarin-android","RelatedBody":"1) You have to manually provide CscToolPath MSBuild property,\r\n   unless you install xamarin.android.csc.dim package.\r\n2) You have to explicitly specify AndroidEnableDefaultInterfaceMethods\r\n   MSBuild property as True.\r\n3) You have to explicitly specify LangVersion MSBuild property as \"latest\".\r\n\r\nWhen C# 8.0 becomes stable, 1) and 3) will become unnecessary.\r\nThen we should make changes to 2) as default."},{"Id":"7937905222","Type":"PullRequestEvent","CreatedAt":"2018-07-09T14:13:43","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1938","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] cache java -version output\" (#1938) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/Microsoft/msbuild/blob/f147a76a60bf9e516800f65f9614c914df0a4f15/src/Framework/IBuildEngine4.cs#L34-L84\r\nContext: https://github.com/xamarin/Xamarin.Forms/blob/42c07d1ae5aa56eb574b7d169499f1a9af7ec080/Xamarin.Forms.ControlGallery.Android/Xamarin.Forms.ControlGallery.Android.csproj\r\n\r\nThe new `ValidateJavaVersion` MSBuild task gets invoked for *every*\r\nproject on *every* build, regardless if there are changes or not.\r\nUnfortunately, this task also takes around 250ms to run, since it\r\nshells out to `java -version` and `javac -version`.\r\n\r\nWe can use MSBuild's `GetRegisteredTaskObject` and\r\n`RegisterTaskObject` to cache the output of running these command line\r\ntools. If we key with the full path to `java` or `javac`, the cache\r\nshould be properly invalidated if a different `JavaSdkPath` is passed\r\nin. I added a new set of `ValidateJavaVersionTests` to directly test\r\nthis caching functionality, plus a couple smoke tests.\r\n\r\nIn the case of `Xamarin.Forms.ControlGallery.Android`:\r\n- `ValidateJavaVersion` runs 7 times\r\n- A build (with no changes) went from 12.820s to 11.185s, saving\r\n  ~1.635s of build time\r\n- I also tested the changes in VS Windows, and was able to see logs\r\n  indicating the value is cached.\r\n\r\nImprovements to `MockBuildEngine`:\r\n- General code formatting / refactoring\r\n- Added a `Messages` list that can be asserted against\r\n- Refactored the `Task` APIs so that they are fully functional\r\n\r\nOther changes:\r\n- Since `BaseTest` now has a `SetUp` class, we can't have a method\r\n  named `SetUp` or we get a warning. I used a `Setup` method (with\r\n  lowercase u) instead, and modified `KeyToolTests` to fix this\r\n  warning."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7941145343","Type":"PullRequestEvent","CreatedAt":"2018-07-10T02:44:33","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3253","RelatedDescription":"Opened pull request \"Add missing API check in ScrollViewContainer\" (#3253) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n`ScrollViewContainer` was missing an API level check for `IsInLayout`. \r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #3186 \r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests \r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"7940604400","Type":"IssuesEvent","CreatedAt":"2018-07-09T23:21:10","Actor":"kevinrodriguez-io","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3252","RelatedDescription":"Opened issue \"iOS HttpClient GetAsync hangs indefinitely on await\" (#3252) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\niOS Application hangs indefinitely while calling HttpClient.GetAsync(...); if the internet connection dies.\r\nI'm not using wait() or .result to block the methods, everything is being called asynchronously.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a Web Api which returns a Delay for 1m on a GET REST endpoint.\r\n2. Create Xamarin Forms Project (PCL), implement HttpClient.GetAsync to call a REST endpoint.\r\n3. Call the Web Api endpoint.\r\n4. On your physical ios device, disconnect the WIFI\r\n5. Application hangs indefinitely\r\n\r\n### Expected Behavior\r\n\r\nIf the internet connection fails, an error should be raised and the application should continue it's execution.\r\n\r\n### Actual Behavior\r\n\r\nThe application hangs on the await directive indefinetly\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE: Visual Studio Enterprise 2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  8.0\r\n  - Android: N/A\r\n  - UWP:  4.5.1\r\n- Nuget Packages:\r\nMicrosoft.AspNet.WebApi.Client\r\n- Affected Devices:\r\niPad 4 MK9N2CL/A\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"7940197985","Type":"PullRequestEvent","CreatedAt":"2018-07-09T21:27:38","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3251","RelatedDescription":"Opened pull request \"[Android] Improve default Button shadow & size appearance\" (#3251) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nWhen using the `DefaultPadding` and `DefaultShadow` platform specific properties, Button size and shadow now more closely match the default Android size and shadow. Note that this is not intended to be a pixel perfect match.\r\n\r\n#### #2664 Before >> After\r\n<img width=\"1676\" alt=\"2664\" src=\"https://user-images.githubusercontent.com/7827070/42476403-b3ad87cc-8382-11e8-963e-f0d29a84a8ee.png\">\r\n\r\n#### #1436 Before >> After\r\n<img width=\"1125\" alt=\"1436\" src=\"https://user-images.githubusercontent.com/7827070/42476496-fece4ae8-8382-11e8-85aa-2425ea9ba629.png\">\r\n\r\n**WARNING: This is a visual breaking change from 2.5+.**\r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #2664 \r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\n- [Android] Buttons now have a slightly different shadow radius that more closely mimics Android's default Button image. \r\n- [Android] Button shadow color now defaults to a light gray instead of a shade of the Button color. \r\n- [Android] Button border is drawn outside of the Button instead of on top of it and can increase the size of the Button. \r\n- [Android] Button width is slightly increased.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7941307061","Type":"IssuesEvent","CreatedAt":"2018-07-10T03:45:21","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4416","RelatedDescription":"Closed issue \"libxammac.dylib missing when performing dllimport call\" (#4416) at xamarin/xamarin-macios","RelatedBody":"Hello!\r\n\r\nI'm currently attempting to add macOS support to LibVLCSharp (libvlc binding for xamarin). After some issues regarding the packaging/bundling of dylibs, I managed to copy them all in the final .app bundle. My next (and hopefully final) issue to get this working is making the `DllImport` calls work.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Generate package from https://github.com/mfkl/libvlc-nuget/pull/5 (not on nuget yet)\r\n2. Add it to a Xamarin.Mac project\r\n3. Try loading the dylib at runtime and P/Invoking into it (CLI launch for interesting debug logs).\r\n\r\n### Expected Behavior\r\nCan perform P/Invoke calls on a dylib after loading it with `ObjCRuntime.Dlfcn.dlopen`\r\n### Actual Behavior\r\nCalling `dlopen` on them before \r\n```\r\n NSApplication.Init();\r\n NSApplication.Main(args);\r\n```\r\ndoes a return a not null pointer, but dllimport calls fail with\r\n```\r\nUnhandled Exception:\r\nSystem.DllNotFoundException: Could not find the runtime library libxammac.dylib\r\n  at ObjCRuntime.Runtime.LookupInternalFunction[T] (System.String name) [0x0010a] in /Library/Frameworks/Xamarin.Mac.framework/Versions/4.4.1.193/src/Xamarin.Mac/ObjCRuntime/Runtime.mac.cs:107\r\n  at ObjCRuntime.Runtime.EnsureInitialized () [0x00030] in /Library/Frameworks/Xamarin.Mac.framework/Versions/4.4.1.193/src/Xamarin.Mac/ObjCRuntime/Runtime.mac.cs:117\r\n  at AppKit.NSApplication.Init () [0x00016] in /Library/Frameworks/Xamarin.Mac.framework/Versions/4.4.1.193/src/Xamarin.Mac/AppKit/NSApplication.cs:56\r\n``` \r\n\r\nI have a dllMap file if that matters\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n    <dllmap dll=\"libvlc\" target=\"@executable_path/lib/libvlc.5.dylib\"/>\r\n</configuration>\r\n```\r\n### Environment\r\n\r\n```\r\nVisual Studio Community 2017 for Mac\r\nVersion 7.5.3 (build 7)\r\nRuntime:\r\n\tMono 5.10.1.57 (2017-12/ea8a24b1bbf) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 510010057\r\n\r\nXamarin.Mac\r\nVersion: 4.4.1.193 (Visual Studio Community)\r\n```\r\n\r\nI could bundle the `libxammac.dylib` in my .app bundle but... that does not feel right at all (and crashes for another reason, anyway). \r\n\r\nAny help or insights greatly appreciated.\r\n\r\n"},{"Id":"7939813151","Type":"IssuesEvent","CreatedAt":"2018-07-09T20:07:02","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4415","RelatedDescription":"Closed issue \"Problem building a iOS Bindings Library project\" (#4415) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\nhia,\r\n\r\ni am currently working on Xamarin ios project for which i need to connect to NordicID EXA051 rfid reader.  i got the sdk from their website and ran the objective sharpie command to create bindings.\r\n(https://github.com/NordicID/nur_sample_ios)\r\n\r\ni tried creating a bindings library but i was getting thousands of errors. i commented lot of code and made some changes to remove all the compilation errors. however, now when i build it, i am getting errors in file trampolines.g.cs and supportdelegates.g.cs which i have no clue of.\r\n\r\nkindly suggest me what is wrong in my project?\r\n\r\nkind regards,\r\nAtin..\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n\r\n1. clicking build gives 129 errors in Trampolines.g.cs and SupportDelegates.g.cs\r\n2. \r\n3. \r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\n### Environment\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.5.3 (build 7)\r\nInstallation UUID: 8fa535d8-1342-4cf8-8fe2-5c63093228c8\r\nRuntime:\r\n\tMono 5.10.1.57 (2017-12/ea8a24b1bbf) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 510010057\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.1\r\n\t2.0.5\r\nSDK: /usr/local/share/dotnet/sdk/2.1.301/Sdks\r\nSDK Versions:\r\n\t2.1.301\r\n\t2.1.4\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.10.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.2\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.4.1 (14161)\r\nBuild 9F2000\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.4.1.193 (Visual Studio Community)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.12.0.4 (Visual Studio Community)\r\nHash: 64fece5f\r\nBranch: d15-7\r\nBuild date: 2018-05-29 20:00:44-0400\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.3.3.2 (Visual Studio Community)\r\nAndroid SDK: /Users/atinagarwal/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 27.0.1\r\nSDK Build Tools Version: 27.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 705030007\r\nGit revision: 13cecd02aceddf29a1ed57b86f81c02994df1483\r\nBuild date: 2018-06-14 15:48:08-04\r\nXamarin addins: 7065de97cf22c9038fdc39dd627f2c30790fd8af\r\nBuild lane: monodevelop-lion-d15-7\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.5\r\nDarwin 17.6.0 Darwin Kernel Version 17.6.0\r\n    Tue May  8 15:22:16 PDT 2018\r\n    root:xnu-4570.61.1~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.5.3\r\n\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com\r\n/) of the log.\r\n-->\r\n[BuildLogs.txt](https://github.com/xamarin/xamarin-macios/files/2175052/BuildLogs.txt)\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n[BindingsTest.zip](https://github.com/xamarin/xamarin-macios/files/2175137/BindingsTest.zip)\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"7939771369","Type":"IssuesEvent","CreatedAt":"2018-07-09T19:58:25","Actor":"GouriKumari","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4421","RelatedDescription":"Opened issue \"[XI]Two Simulators are launching while deploying an iOS App with Xcode10-beta3\" (#4421) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1.  Install Xamarin.iOS 11.99.1.44, Xcode10-beta3 (10L201y)\r\n2. Create an iOS app \r\n3. Build and deploy it on simulator eg: iPhoneX iOS 12.0\r\n\r\n### Expected Behavior\r\nApp builds, deploys and launch on iPhoneX iOS 12.0\r\n### Actual Behavior\r\nApp builds, deploys and launch on iPhoneX iOS 12.0. But a second simulator also opens iPhone4S 9.3.5\r\n### Environment\r\n\r\n```\r\nhttps://gist.github.com/GouriKumari/eeff3d2252cc2a2baddccacaeb14a76a\r\n```\r\n\r\n### Build Logs\r\n\r\nScreenshot: https://screencast.com/t/aH3UvYDYzI1V\r\n\r\n"},{"Id":"7939255025","Type":"PullRequestEvent","CreatedAt":"2018-07-09T18:11:54","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4420","RelatedDescription":"Opened pull request \"Fix NSViewController to have NSResponder to fix NSCoding 'removal'\" (#4420) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1014949294737186816","CreatedAt":"2018-07-05T19:09:03+00:00","UserScreenname":"xamarinhq","Text":"Cool intros to new goodies in &lt;10 minutes! Explore some of the “Snack Pack” episodes that @JamesMontemagno bundled… https://t.co/80gmo35fb6","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":89,"FavoriteCount":40,"RawContent":null},{"Id":"1014903254034141190","CreatedAt":"2018-07-05T16:06:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/3RaJk3O0xb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":29,"RawContent":null},{"Id":"1014521211970379776","CreatedAt":"2018-07-04T14:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":34,"RawContent":null},{"Id":"1014159326645313537","CreatedAt":"2018-07-03T14:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":25,"RawContent":null},{"Id":"1013873320834445313","CreatedAt":"2018-07-02T19:53:31+00:00","UserScreenname":"xamarinhq","Text":"In today's Xamarin Podcast, @PierceBoggan &amp; @JamesMontemagno talk up latest &amp; greatest in mobile #dotNET dev; Xamar… https://t.co/chy5AhHt86","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":62,"FavoriteCount":43,"RawContent":null},{"Id":"1013805063209455616","CreatedAt":"2018-07-02T15:22:17+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/kdzv9U4084","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":21,"RawContent":null},{"Id":"1013547297437835264","CreatedAt":"2018-07-01T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/JL1SW3MFro","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":27,"RawContent":null},{"Id":"1012399525338595328","CreatedAt":"2018-06-28T18:17:10+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/3QxhuBcUiC v7.2 introduces two new MSBuild properties to make maintaining Android VersionCode for Andr… https://t.co/j469e1DU24","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":84,"FavoriteCount":58,"RawContent":null},{"Id":"1011343460811583489","CreatedAt":"2018-06-25T20:20:45+00:00","UserScreenname":"xamarinhq","Text":"What’s new in the #XamarinAndroid designer: https://t.co/OOHH6tXhia https://t.co/lCAsZQzwls","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":91,"FavoriteCount":39,"RawContent":null},{"Id":"1009871245574332422","CreatedAt":"2018-06-21T18:50:42+00:00","UserScreenname":"xamarinhq","Text":"Get your #Xamarin Android apps ready for Google Play’s target API level requirements: https://t.co/2iFf5ijjj9 https://t.co/iQmylzyQ7o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":34,"RawContent":null},{"Id":"1008802730993967104","CreatedAt":"2018-06-18T20:04:48+00:00","UserScreenname":"xamarinhq","Text":"Get ready for the July 2018 deadline by ensuring your  #Xamarin apps support iOS 11 and iPhone X: https://t.co/1Wx6Bo4TSQ","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":43,"FavoriteCount":18,"RawContent":null},{"Id":"1007343670775963649","CreatedAt":"2018-06-14T19:27:01+00:00","UserScreenname":"xamarinhq","Text":"Get access to more cross-platform APIs with the latest Xamarin.Essentials Preview: https://t.co/WqtCV8OneC https://t.co/FgdScqkpPt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":117,"FavoriteCount":66,"RawContent":null},{"Id":"1007280505820254209","CreatedAt":"2018-06-14T15:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/zLa3RTUgaL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":21,"RawContent":null},{"Id":"1006915501405167616","CreatedAt":"2018-06-13T15:05:37+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/U9huu5DdJW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":22,"RawContent":null},{"Id":"1006682387743461376","CreatedAt":"2018-06-12T23:39:19+00:00","UserScreenname":"xamarinhq","Text":"Create your first #Xamarin app using #MongoDB: https://t.co/Nu6lZzYwYX","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":60,"FavoriteCount":25,"RawContent":null},{"Id":"1006563778471788544","CreatedAt":"2018-06-12T15:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":23,"RawContent":null},{"Id":"1006201893369106433","CreatedAt":"2018-06-11T15:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":23,"RawContent":null},{"Id":"1005923084023582721","CreatedAt":"2018-06-10T21:22:07+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/OPYTFzsQk4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":68,"FavoriteCount":28,"RawContent":null},{"Id":"1005574764382117888","CreatedAt":"2018-06-09T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/kaQCoeUycf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":22,"RawContent":null}]}},"RunOn":"2018-07-10T05:31:03.5008287Z","RunDurationInMilliseconds":4237}