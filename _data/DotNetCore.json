{"Data":{"Blog":{"FeedItems":[{"Title":"Bing.com runs on .NET Core 2.1!","PublishedOn":"2018-08-20T16:00:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Bing.com is a cloud service that runs on thousands of servers spanning many datacenters across the globe. Bing servers handle thousands of users&#8217; queries every second from consumers around the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/20/bing-com-runs-on-net-core-2-1/","RawContent":null},{"Title":".NET Core SDK 2.1.400 Update","PublishedOn":"2018-08-16T01:14:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We released .NET Core 2.1.400-SDK. See .NET Core 2.1.400-SDK release notes for complete details on the release. Quality Updates CLI A full list of the changes in this update can be found in the commit...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/15/net-core-2-1-august-update/","RawContent":null},{"Title":"Announcing F# 4.5","PublishedOn":"2018-08-14T21:30:07+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we’re incredibly pleased to announce general availability of F# 4.5. This post will walk through the changes in F# 4.5 (just like the preview post), then show some updates to F# tooling, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/14/announcing-f-4-5/","RawContent":null},{"Title":"August 2018 .NET Framework Security and Quality Rollup","PublishedOn":"2018-08-14T17:05:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the August 2018 Security and Quality Rollup.  This release also addressed the July issues explained in KB 4345913 and Advisory on July 2018 .NET Framework Updates. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","PublishedOn":"2018-08-13T23:57:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"An issue with serializing/deserializing a CultureAwareComparer was discovered with .NET Framework 4.7.1. This issue was resolved earlier this year, with the May 2018 Preview of Quality Rollup. We...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/13/advisory-serializing-deserializing-a-cultureawarecomparer-with-net-framework-4-6/","RawContent":null},{"Title":"Are your Windows Forms and WPF applications ready for .NET Core 3.0?","PublishedOn":"2018-08-08T17:00:25+00:00","CommentsCount":111,"FacebookCount":0,"Summary":"Download Portability Analyzer (2.37 MB) At Build 2018 we announced that we are enabling Windows desktop applications (Windows Forms and Windows Presentation Framework (WPF)) with .NET Core 3.0. You...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/08/are-your-windows-forms-and-wpf-applications-ready-for-net-core-3-0/","RawContent":null},{"Title":"Announcing ML.NET 0.4","PublishedOn":"2018-08-07T21:23:38+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"A few months ago we released ML.NET 0.1 at //Build 2018., ML.NET is a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/07/announcing-ml-net-0-4/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2018-08-06T17:00:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,018 years. In the Japanese calendar, however, a new era begins...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/06/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":"Tiered Compilation Preview in .NET Core 2.1","PublishedOn":"2018-08-02T22:22:13+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"If you are a fan of .NET performance there has been a lot great news lately such as Performance Improvements in .NET Core 2.1 and Announcing .NET Core 2.1, but we&#8217;ve got more. Tiered compilation...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/02/tiered-compilation-preview-in-net-core-2-1/","RawContent":null},{"Title":".NET Framework July 2018 Update","PublishedOn":"2018-07-30T23:17:45+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Update: 8/14/2018 Guidance has changed. Install the .NET Framework August 2018 Update. It includes the improvement described in this post for all supported Windows versions. Update: 8/03/2018 Guidance...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8131503388","Type":"PullRequestEvent","CreatedAt":"2018-08-17T23:19:54","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Merged pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"8075734624","Type":"IssuesEvent","CreatedAt":"2018-08-07T07:06:40","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7951838452","Type":"IssuesEvent","CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/107","RelatedDescription":"Opened issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107) at dotnet/home","RelatedBody":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS."},{"Id":"7948314683","Type":"IssuesEvent","CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/106","RelatedDescription":"Opened issue \"Updates are not requested from local WSUS\" (#106) at dotnet/home","RelatedBody":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?"},{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8108136093","Type":"IssuesEvent","CreatedAt":"2018-08-13T23:50:58","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Opened issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81) at dotnet/announcements","RelatedBody":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications continue to experience this issue. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions. \r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe intend to release an update for .NET Framework 4.6 and later releases that resolves this issue within the next month. When that happens, **you must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```"},{"Id":"8098941971","Type":"IssuesEvent","CreatedAt":"2018-08-11T01:05:59","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Opened issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80) at dotnet/announcements","RelatedBody":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. The packages will be included in [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n"},{"Id":"8075229337","Type":"IssuesEvent","CreatedAt":"2018-08-07T04:18:02","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Opened issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78) at dotnet/announcements","RelatedBody":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)"},{"Id":"8025565746","Type":"IssuesEvent","CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Opened issue \"https://dot.net now using TLS 1.2-only\" (#77) at dotnet/announcements","RelatedBody":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689"},{"Id":"7999286881","Type":"IssuesEvent","CreatedAt":"2018-07-21T22:29:06","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Opened issue \"July 2018 .NET Updates\" (#76) at dotnet/announcements","RelatedBody":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Documents\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n"},{"Id":"7997769217","Type":"IssuesEvent","CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Opened issue \"Advisory on July 2018 .NET Framework Updates\" (#74) at dotnet/announcements","RelatedBody":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of applications that fail to start or don't run correctly after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\nDiscussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Workaround\r\n\r\nTemporarily uninstall the [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) to restore functionality until a new update has been released to correct this problem. \r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object\r\n"},{"Id":"7945147887","Type":"IssuesEvent","CreatedAt":"2018-07-10T17:00:38","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8141825564","Type":"PullRequestEvent","CreatedAt":"2018-08-21T04:34:29","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19575","RelatedDescription":"Merged pull request \"Backout change to pass -ibcoptimize in official builds\" (#19575) at dotnet/coreclr","RelatedBody":"The change to use the -ibcoptimize flag caused the checked builds and arm builds to fail in the official build. Backing this out until I can get that working properly."},{"Id":"8141747858","Type":"IssuesEvent","CreatedAt":"2018-08-21T04:02:34","Actor":"zero0000zero","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/19529","RelatedDescription":"Closed issue \"Create New Minimal Start From Scratch CoreClr\" (#19529) at dotnet/coreclr","RelatedBody":"How to create new minimal start from scratch CoreClr?"},{"Id":"8141635370","Type":"PullRequestEvent","CreatedAt":"2018-08-21T03:19:09","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19544","RelatedDescription":"Merged pull request \"Use target_ssize_t imm in CodeGen CodeGenInterface\" (#19544) at dotnet/coreclr","RelatedBody":"In order to get rid off compilation warnings in cross-bitness compilation scenario `CodeGen` and `CodeGenInterface` should stop using `size_t` for immediate value argument."},{"Id":"8141553196","Type":"PullRequestEvent","CreatedAt":"2018-08-21T02:49:20","Actor":"acmyu","Repository":"dotnet/","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19577","RelatedDescription":"Opened pull request \"Interweave x64 unwind codes into disasm\" (#19577) at dotnet/","RelatedBody":""},{"Id":"8141553196","Type":"PullRequestEvent","CreatedAt":"2018-08-21T02:49:20","Actor":"acmyu","Repository":"dotnet/","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19577","RelatedDescription":"Opened pull request \"Interweave x64 unwind codes into disasm\" (#19577) at dotnet/","RelatedBody":""},{"Id":"8141536273","Type":"PullRequestEvent","CreatedAt":"2018-08-21T02:43:18","Actor":"acmyu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19528","RelatedDescription":"Merged pull request \"R2RDump - Add image describing R2R format\" (#19528) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8141665526","Type":"PullRequestEvent","CreatedAt":"2018-08-21T03:30:39","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9805","RelatedDescription":"Merged pull request \"Merge release/2.2.1xx to master\" (#9805) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8140410982","Type":"IssuesEvent","CreatedAt":"2018-08-20T20:59:51","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9859","RelatedDescription":"Closed issue \"Ability to search package with dotnet cli\" (#9859) at dotnet/cli","RelatedBody":"Current there are `dotnet add package <package name>`, but there no ability to search the package name .\r\n\r\nsome ideas:\r\n```\r\ndotnet package search newtonsoft.* \r\ndotnet package search *json*\r\ndotnet package search -tag json\r\n-------------\r\n\r\ndotnet package info newtonsoft.json  // show version info\r\n~~dotnet package install  mynugetpackage.nupkg~~\r\n```\r\n\r\nor add thos command to `dotnet nuget`\r\n\r\n----------------------------------------------\r\n\r\nand [another proposal](https://github.com/dotnet/cli/issues/9860#issue-351786550) is to  add a `<PackageFileReference Include=\"../../privatepackags/myapp.nupkg\" />` in project file."},{"Id":"8140148481","Type":"PullRequestEvent","CreatedAt":"2018-08-20T20:06:19","Actor":"jainaashish","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9868","RelatedDescription":"Opened pull request \"Adding NuGet project lock file options for dotnet restore command\" (#9868) at dotnet/cli","RelatedBody":"Since We (NuGet) is working on enabling NuGet project lock file for VS 15.9, this PR is to add lock file options to `dotnet restore` command.\r\n\r\nFeature Spec - https://github.com/NuGet/Home/wiki/Enable-repeatable-package-restore-using-lock-file#extensibility\r\n\r\nLet me know if this isn't the right branch to target 15.9. Also, the feature is already approved for 15.9."},{"Id":"8139690669","Type":"PullRequestEvent","CreatedAt":"2018-08-20T18:32:24","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9863","RelatedDescription":"Merged pull request \"Improve dev cycle\" (#9863) at dotnet/cli","RelatedBody":"Please see commits for detail."},{"Id":"8139633658","Type":"IssuesEvent","CreatedAt":"2018-08-20T18:21:26","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/3521","RelatedDescription":"Closed issue \"Different monikers for old/new project types\" (#3521) at dotnet/cli","RelatedBody":"I am contributing to the Backload project (https://github.com/blackcity/backload). This is highly configurable library that handles web requests and produces a desired result. The component  is usually called from a MVC controller, an ashx handler, etc. In the new project types (project.json) a middleware is available.\n\nThe assembly runs on the full Framework (.NET4.0, .NET4.5+) and on .NET Core. Our NuGet package includes libraries for .NET40 (dependency on Microsoft.Async), NET45 (no dependency), NET451 (dep. on Microsoft.AspNetCore.Http, this is problematic, see below) and .NET Core. \n\nWhen our package is installed in a traditional project type, say MVC5, the component uses `System.Web` and needs no additional NuGet dependencies (4.5 and 4.5 1+). In new project types the HttpContext related types are in the `Microsoft.AspNetCore.Http` package which itself has a whole bunch of dependencies. So, the problem is, when a developer has a traditional .NET4.5.1 MVC project (System.Web.dll) he is pulling the `Microsoft.AspNetCore.Http` package and a lot of its dependency packages in his project.\n\nMaybe I've missing something, but is there a way (e.g. a TFM) where the same framework target (4.5.1 in the sample above) can have different dependencies regarding the old and new project types? In my understanding `net451` and `dnx451` in DNX based projects made this distinction.\n"},{"Id":"8139624892","Type":"IssuesEvent","CreatedAt":"2018-08-20T18:19:44","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/3530","RelatedDescription":"Closed issue \"dotnet restore fails with 'Value cannot be null'\" (#3530) at dotnet/cli","RelatedBody":"## Steps to reproduce\n\n```\nUsng bash on an OSX machine...\ndotnet --version\n1.0.0-preview1-002702\nmkdir hwapp\ncd hwapp\ndotnet new\nunset HOME\ndotnet restore\n```\n## Expected  behavior\n\nEither give a nice error message or calculate settings without falling back to $HOME\\...\n## Actual behavior\n\n```\ndotnet restore\nerror: Value cannot be null\nerror: Parameter name: path1\n```\n## Environment data\n\nSorry I only captured dotnet --version when I had this earlier:\n1.0.0-preview1-002702\n\nIt was running on OSX 10.11\n## Notes\n\nI filed another issue here, but they might be dupes: https://github.com/NuGet/Home/issues/2960\n\nIn PackagesDependencyProvider.cs (175) I can see some code that is using the HOME variable without null checking it first:\n\n```\n        if (string.IsNullOrEmpty(profileDirectory))\n        {\n            profileDirectory = Environment.GetEnvironmentVariable(\"HOME\");\n        }\n\n        return Path.Combine(profileDirectory, \".nuget\", \"packages\");\n```\n\nWhen I experimented setting the HOME environment var for restore, but then removing it before 'dotnet build', the build command also exhibited similar failure behavior.\n"},{"Id":"8139559840","Type":"IssuesEvent","CreatedAt":"2018-08-20T18:06:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/3565","RelatedDescription":"Closed issue \"Move Cli + Core-Setup docker files to common location and using docker hub to build\" (#3565) at dotnet/cli","RelatedBody":"Let's put our docker files in a common location so we stop diverging between repos and use docker hub to build them so we can reduce build times.\n\n@eerhardt @MichaelSimons @ellismg @livarcocc \n"},{"Id":"8139549005","Type":"IssuesEvent","CreatedAt":"2018-08-20T18:04:45","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/3616","RelatedDescription":"Closed issue \"When the dotnet host is run without any arguments, it should display proper help\" (#3616) at dotnet/cli","RelatedBody":"## Steps to reproduce\n\n`dotnet`\n## Expected  behavior\n\nSee something along the lines of the following:\n\n``` console\n.NET Command Line Tools (1.0.0-preview1-002702)\nUsage: dotnet [common-options] [command] [arguments]\nRun your application: dotnet [path to your assembly.dll]\n\nArguments:\n  [command]     The command to execute\n  [arguments]   Arguments to pass to the command\n\nCommon Options (passed before the command):\n  -v|--verbose  Enable verbose output\n  --version     Display .NET CLI Version Number\n  --info        Display .NET CLI Info\n\nCommon Commands:\n  new           Initialize a basic .NET project\n  restore       Restore dependencies specified in the .NET project\n  build         Builds a .NET project\n  publish       Publishes a .NET project for deployment (including the runtime)\n  run           Compiles and immediately executes a .NET project\n  test          Runs unit tests using the test runner specified in the project\n  pack          Creates a NuGet package\n```\n## Actual behavior\n\nSee the following:\n\n```\nUsage: dotnet [--help | app.dll]\n```\n## Environment data\n\n`dotnet --info` output:\n\n```\n.NET Command Line Tools (1.0.0-preview1-002702)\n\nProduct Information:\n Version:     1.0.0-preview1-002702\n Commit Sha:  6cde21225e\n\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.11\n OS Platform: Darwin\n RID:         osx.10.11-x64\n```\n\n/cc @piotrpMSFT @schellap @eerhardt @shanselman @richlander \n"},{"Id":"8139515978","Type":"PullRequestEvent","CreatedAt":"2018-08-20T17:58:20","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9854","RelatedDescription":"Merged pull request \"[release/2.2.1xx] Add --disable-parallel to dotnet-new.Tests\" (#9854) at dotnet/cli","RelatedBody":"Added to a \"restore\" executed via string literal. `--disable-parallel` is present in `RestoreCommand` used by the other tests already.\r\n\r\nThis should fix restore timeouts seem in the official builds (https://github.com/dotnet/core-eng/issues/4076). This is a workaround for a NuGet issue https://github.com/NuGet/Home/issues/6742.\r\n\r\nLet me know if there's a better branch to target this to: I'm using `release/2.2.1xx` because the official build break happened here.\r\n\r\nFYI @mmitche "}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8141464764","Type":"IssuesEvent","CreatedAt":"2018-08-21T02:17:43","Actor":"smsenesac","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/855","RelatedDescription":"Opened issue \"Can no longer build simple netstandard2.0 project after upgrading from 2.1.302 to 2.1.400.\" (#855) at dotnet/standard","RelatedBody":"I have a very simple netstandard2.0 project that has been building in CI for a little while now and a couple of days ago the builds started failing.  I couldn't make heads or tails of it because the project built just fine on my macbook pro.  I eventually noticed that CI was pulling down a microsoft docker container using tag 2.1-sdk that was now running version 2.1.400 of the sdk.  My macbook was running 2.1.302.  I upgraded the macbook and boom, couldn't build locally either.\r\n\r\nThe error that I'm seeing is as follows:\r\n> error CS0012: The type ‘Attribute’ is defined in an assembly that is not referenced. You must add a reference to assembly ‘System.Runtime, Version=4.0.20.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a’.\r\n\r\nThe offending code:\r\n```\r\nusing System;\r\nusing Amazon.DynamoDBv2.DataModel;\r\n\r\nnamespace Foo.Data.Profiles.Models\r\n{\r\n    [DynamoDBTable(\"Profiles\")]\r\n    public class Profile\r\n    {\r\n        [DynamoDBHashKey]\r\n        public string UserId { get; set; }\r\n\r\n        public string FirstName { get; set; }\r\n\r\n        public string LastName { get; set; }\r\n\r\n        public string Bio { get; set; }\r\n\r\n        public string Image { get; set; }\r\n\r\n        public DateTime CreatedAt { get; set; }\r\n\r\n        public DateTime UpdatedAt { get; set; }\r\n    }\r\n}\r\n```\r\n\r\nThe .csproj file:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <NeutralLanguage>en-US</NeutralLanguage>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <PackageVersion>0.1.0.0</PackageVersion>\r\n    <PackageId>Foo.Data.Profiles</PackageId>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"AWSSDK.DynamoDBv2\" Version=\"3.3.12.1\" />\r\n    <PackageReference Include=\"Bar.Library\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThe build script:\r\n```\r\n#!/bin/bash\r\n\r\nset -e\r\n\r\ncd src/Foo\r\n\r\ndotnet build -c Release\r\n```\r\n\r\nThe nuget.config:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageRestore>\r\n    <add key=\"enabled\" value=\"true\" />\r\n    <add key=\"automatic\" value=\"true\" />\r\n  </packageRestore>\r\n\r\n  <packageSources>\r\n    <add key=\"Bar Stuff\" value=\"https://www.myget.org/F/bar/api/v3/index.json\" />\r\n    <add key=\"Foo Stuff\" value=\"https://www.myget.org/F/foo/api/v3/index.json\" />\r\n  </packageSources>\r\n</configuration>\r\n```\r\n\r\nI've been trying a number of things over the past couple of days but no luck. Any direction would be appreciated."},{"Id":"8129254040","Type":"IssuesEvent","CreatedAt":"2018-08-17T14:32:21","Actor":"jmrnilsson","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/854","RelatedDescription":"Opened issue \"Uninstalled NetStandard2.0.3 leaves changes csproj\" (#854) at dotnet/standard","RelatedBody":"After having removed NETStandard Nuget package version 2.0.3 it seems a changed csproj is left behind.\r\n\r\n```\r\ngit grep standard | grep 2.0.3\r\nSomeproj/Someproj.csproj:  <Import Project=\"..\\packages\\NETStandard.Library.2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets\" Condition=\"Exists('..\\packages\\NETStandard.Library.2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets')\" />\r\nSomeproj/Someproj.csproj:    <Error Condition=\"!Exists('..\\packages\\NETStandard.Library.2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets')\" Text=\"$([System.String]::Format('$(ErrorText)', '..\\packages\\NETStandard.Library.2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets'))\" />\r\n```\r\n\r\nNormally the `packages`-folder is left untouched. So the error-condition occurs only when switching to a different machine or clearing out the `packages`-folder explicitly. I'm not sure if there are other preconditions that applies, but this particular project was targeting .NET 4.7.1 and may have had other NetStandard-versions installed before. "},{"Id":"8128816048","Type":"IssuesEvent","CreatedAt":"2018-08-17T13:13:21","Actor":"evgeny-burmakov","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/853","RelatedDescription":"Opened issue \"Dynamic loading of NetStandard 2.0 assembly from .Net 4.6.2\" (#853) at dotnet/standard","RelatedBody":"There aren't facade assemblies when NetStandard 2.0 assembly are compiled and no one  .Net 4.6.2  reference it.\r\nI would need to dynamically load such assembly from .Net 4.6.2 application. As result I got error that netstandard.dll wasn't found.\r\nIs it possible to force MsBuild generate facades even if assembly wasn't referenced directly?\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8141948369","Type":"PullRequestEvent","CreatedAt":"2018-08-21T05:22:39","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31861","RelatedDescription":"Opened pull request \"Include changes that crossed two checkins.\" (#31861) at dotnet/corefx","RelatedBody":"Fixes #31860"},{"Id":"8141909521","Type":"IssuesEvent","CreatedAt":"2018-08-21T05:08:02","Actor":"morganbr","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31860","RelatedDescription":"Opened issue \"NetFX build break in Microsoft.IO.Redist\" (#31860) at dotnet/corefx","RelatedBody":"The NetFX and Packaging All Configurations CI builds are failing with the error below. It looks like it might be related to https://github.com/dotnet/corefx/pull/31763. @JeremyKuhne or @MarcoRossignoli, can you please take a look?\r\n\r\n> 19:08:23 D:\\j\\workspace\\windows-TGrou---2a8f9c29\\src\\Common\\src\\System\\IO\\DriveInfoInternal.Win32.cs(66,52): error CS0117: 'SR' does not contain a definition for 'Arg_MustBeDriveLetterOrRootDir' [D:\\j\\workspace\\windows-TGrou---2a8f9c29\\src\\Microsoft.IO.Redist\\src\\Microsoft.IO.Redist.csproj]\r\n19:08:23 D:\\j\\workspace\\windows-TGrou---2a8f9c29\\src\\Common\\src\\System\\IO\\DriveInfoInternal.Win32.cs(66,84): error CS1503: Argument 2: cannot convert from 'string' to 'System.Exception' [D:\\j\\workspace\\windows-TGrou---2a8f9c29\\src\\Microsoft.IO.Redist\\src\\Microsoft.IO.Redist.csproj]\r\n19:08:23 D:\\j\\workspace\\windows-TGrou---2a8f9c29\\src\\Common\\src\\System\\IO\\DriveInfoInternal.Win32.cs(81,48): error CS0117: 'SR' does not contain a definition for 'Arg_MustBeDriveLetterOrRootDir' [D:\\j\\workspace\\windows-TGrou---2a8f9c29\\src\\Microsoft.IO.Redist\\src\\Microsoft.IO.Redist.csproj]\r\n19:08:23 D:\\j\\workspace\\windows-TGrou---2a8f9c29\\src\\Common\\src\\System\\IO\\DriveInfoInternal.Win32.cs(81,80): error CS1503: Argument 2: cannot convert from 'string' to 'System.Exception' [D:\\j\\workspace\\windows-TGrou---2a8f9c29\\src\\Microsoft.IO.Redist\\src\\Microsoft.IO.Redist.csproj]\r\n19:08:23 D:\\j\\workspace\\windows-TGrou---2a8f9c29\\src\\System.IO.FileSystem\\src\\System\\IO\\File.cs(645,24): error CS0117: 'FileSystem' does not contain a definition for 'Encrypt' [D:\\j\\workspace\\windows-TGrou---2a8f9c29\\src\\Microsoft.IO.Redist\\src\\Microsoft.IO.Redist.csproj]\r\n19:08:23 D:\\j\\workspace\\windows-TGrou---2a8f9c29\\src\\System.IO.FileSystem\\src\\System\\IO\\File.cs(650,24): error CS0117: 'FileSystem' does not contain a definition for 'Decrypt' [D:\\j\\workspace\\windows-TGrou---2a8f9c29\\src\\Microsoft.IO.Redist\\src\\Microsoft.IO.Redist.csproj]"},{"Id":"8141778449","Type":"IssuesEvent","CreatedAt":"2018-08-21T04:15:01","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/31859","RelatedDescription":"Closed issue \"We need System.Windows.Forms \" (#31859) at dotnet/corefx","RelatedBody":"We need System.Windows.Forms in DotNet Core."},{"Id":"8141759120","Type":"IssuesEvent","CreatedAt":"2018-08-21T04:06:59","Actor":"zero0000zero","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31859","RelatedDescription":"Opened issue \"We need System.Windows.Forms \" (#31859) at dotnet/corefx","RelatedBody":"We need System.Windows.Forms in DotNet Core."},{"Id":"8141682086","Type":"IssuesEvent","CreatedAt":"2018-08-21T03:37:04","Actor":"mstum","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31858","RelatedDescription":"Opened issue \"Can we make a System.Net.Http.Headers.NameValueHeaderValue that uses MultipleValueNameValueParser?\" (#31858) at dotnet/corefx","RelatedBody":"I have a string in the form `foo=bar,barman=\"one two three\",charset=utf-8` which would be perfectly parseable using [`System.Net.Http.Headers.GenericHeaderParser.MultipleValueNameValueParser`](https://github.com/dotnet/corefx/blob/05d5e37a0b08a4fd6671385ed123d9ad279d1d70/src/System.Net.Http/src/System/Net/Http/Headers/GenericHeaderParser.cs#L21).\r\n\r\nUnfortunately, that class is internal. There is one public class that uses it, [`System.Net.Http.Headers.CacheControlHeaderValue `](https://github.com/dotnet/corefx/blob/cea9971b75665f0c9d1c3f254c4fa8c58c7d494a/src/System.Net.Http/src/System/Net/Http/Headers/CacheControlHeaderValue.cs). It kinda works, I can get the values from the `Extensions` property or from the regular properties if the name matches.\r\n\r\nBut it feels kinda like a big crutch to do so, when we already have all the pieces - there is [`NameValueHeaderValue`](https://github.com/dotnet/corefx/blob/30f2f877c01940904b85691a09da5f91352ffad9/src/System.Net.Http/src/System/Net/Http/Headers/NameValueHeaderValue.cs) which seems to be meant for generic/custom HTTP Headers, but it uses SingleValueNameValueParser.\r\n\r\nMy API proposal is thus to add a `MultipleNameValueHeaderValue` class that uses `MultipleValueNameValueParser`."},{"Id":"8141621183","Type":"PullRequestEvent","CreatedAt":"2018-08-21T03:13:46","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31857","RelatedDescription":"Opened pull request \"Update CoreClr to alphautf8string-26821-02 (feature/utf8string)\" (#31857) at dotnet/corefx","RelatedBody":""},{"Id":"8141386698","Type":"IssuesEvent","CreatedAt":"2018-08-21T01:50:25","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/31379","RelatedDescription":"Closed issue \"File.SetLastAccessTimeUtc on Ubuntu is only up to seconds\" (#31379) at dotnet/corefx","RelatedBody":"Similar to https://github.com/dotnet/corefx/issues/26024 but for write\r\n\r\nThis blocks using msbuild incremental build. Especially when using MemoryMappedFile, LastWriteTime will not be set automatically\r\n\r\n```c#\r\nusing System;\r\nusing System.IO;\r\n\r\nnamespace testLastAccess\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            File.WriteAllText(\"file_reference\", \"\");\r\n            File.WriteAllText(\"file_change_lastaccess\", \"\");\r\n\r\n            File.SetLastAccessTimeUtc(\"file_change_lastaccess\", DateTime.UtcNow);\r\n\r\n            Console.WriteLine(File.GetLastWriteTimeUtc(\"file_reference\").Ticks + \" file_reference\");\r\n            Console.WriteLine(File.GetLastWriteTimeUtc(\"file_change_lastaccess\").Ticks  + \" file_change_lastaccess\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\non Ubuntu\r\n```\r\nwul@willauzrelinux3:~/test/testSetFileLastAccessTime$ dotnet run\r\n636681614066249674 file_reference\r\n636681614060000000 file_change_lastaccess\r\n```\r\n\r\nfile_change_lastaccess has SetLastAccessTimeUtc after file_reference is created. But end up easier than file_reference. And clearly, the ticks are rounded.\r\n\r\non Windows it is correct\r\n```\r\nλ  dotnet run\r\n636681613739905306 file_reference\r\n636681613739915309 file_change_lastaccess\r\n```"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8141823391","Type":"IssuesEvent","CreatedAt":"2018-08-21T04:33:35","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/28395","RelatedDescription":"Closed issue \"Different roslyn version generating different IL for pointers\" (#28395) at dotnet/roslyn","RelatedBody":"Not sure if this is an known change but with different versions of Roslyn, the IL generated is different.\r\n\r\n**Version Used**: 3.0.0.61717 (09da1925) and 2.9.0.63026 (1c015ea4)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Use the code snippet below:\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\n\r\nunsafe class P\r\n{\r\n    static void Main()\r\n    {\r\n        var p = new P();\r\n        p.F();\r\n    }\r\n\r\n    void F()\r\n    {\r\n        int i = 4;\r\n        byte* ptrNull = null;\r\n        IntPtr intptrNull = IntPtr.Zero;\r\n        fixed (decimal* ptrDecimals = m_decimals)\r\n        {\r\n            fixed (MyEnum* ptrEnums = m_enums)\r\n            {\r\n                Debugger.Break();\r\n            }\r\n        }\r\n    }\r\n\r\n    long GetPtrInt(void* ptr)\r\n    {\r\n        return (long)ptr;\r\n    }\r\n\r\n    enum MyEnum\r\n    {\r\n        VAL_0 = 0,\r\n        VAL_1 = 1,\r\n        VAL_2 = 2\r\n    }\r\n\r\n    decimal[] m_decimals = Enumerable.Range(0, 10).Select(i => (decimal)i).ToArray();\r\n    MyEnum[] m_enums = Enumerable.Range(0, 3).Select(i => (MyEnum)i).ToArray();\r\n    byte* m_ptr1 = null;\r\n}\r\n\r\n\r\n```\r\n2.  Compile with:\r\n```\r\ncsc.exe /nologo /warn:4 /define:DEBUG;TRACE /errorendlocation /nowarn:1998 /debug /unsafe /nostdlib+ /noconfig /platform:x86 /fullpaths /r:\"C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\mscorlib.dll\" /r:\"C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\System.dll\" /r:\"C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\System.Core.dll\" /r:\"C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\Microsoft.CSharp.dll\" /r:\"C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\System.Windows.Forms.dll\" /r:\"C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\System.Xml.dll\" /r:\"C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\System.Xml.Linq.dll\" /r:\"C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\System.Data.dll\" /r:\"C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319\\System.Drawing.dll\" \"program.cs\"\r\n```\r\n3. ildasm program.cs -> P -> F\r\n\r\n**Expected Behavior**: 2.9.0.63026 create P::F : void() IL as  \r\n```\r\n.method private hidebysig instance void  F() cil managed\r\n{\r\n...\r\n           [3] valuetype [mscorlib]System.Decimal* ptrDecimals,\r\n...\r\n} // end of method P::F\r\n\r\n```\r\n\r\n**Actual Behavior**: While  3.0.0.61717 creates P::F : void() IL as\r\n```\r\n.method private hidebysig instance void  F() cil managed\r\n{\r\n...\r\n           [3] valuetype [mscorlib]System.Decimal& pinned ptrDecimals,\r\n...\r\n} // end of method P::F\r\n```\r\n\r\nThe Decimal& broke our test and we were just wondering if this was an expected change or should the IL still be generated as a Decimal* "},{"Id":"8141814171","Type":"IssuesEvent","CreatedAt":"2018-08-21T04:29:50","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/28479","RelatedDescription":"Closed issue \"CS1998 is not suppressed by SuppressMessage when building with MSBuild.exe\" (#28479) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nMSBuild from VS2017 15.7.5\r\n\r\n**Steps to Reproduce**:\r\nWe see this on our build server and I've reproduced it locally.\r\n\r\nUsing the SuppressMessageAttribute successfully suppresses the warning in Visual Studio, but when rebuilding using MSBuild the warning is still reported in the console output.\r\n`[SuppressMessage(\"Compiler\", \"CS1998\")]\r\npublic async Task Foo()\r\n{\r\n}\r\n`\r\n\r\nStill gives the warning:\r\n\r\n`  \r\nProgram.cs(16,27): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider usi\r\nng the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background\r\nthread. [D:\\temp\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj]\r\n`\r\n\r\n1. Run &\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\MSBuild.exe\" .\\\r\nConsoleApp1.sln /t:rebuild\r\n2. Observe console output.\r\n\r\n**Expected Behavior**:\r\nCS1998 is suppressed when building with MSBuild.exe\r\n\r\n**Actual Behavior**:\r\nCS1998 is not suppressed when building with MSBuild.exe\r\n\r\nExample solution that reproduces it:\r\n[ConsoleApp1.zip](https://github.com/dotnet/roslyn/files/2188113/ConsoleApp1.zip)\r\n"},{"Id":"8141770597","Type":"PullRequestEvent","CreatedAt":"2018-08-21T04:11:34","Actor":"etbyrd","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29412","RelatedDescription":"Opened pull request \"15.7.x builds removed from README\" (#29412) at dotnet/roslyn","RelatedBody":""},{"Id":"8141732129","Type":"PullRequestEvent","CreatedAt":"2018-08-21T03:56:32","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29411","RelatedDescription":"Opened pull request \"Add benchmark allocation support and improve Emit table size\" (#29411) at dotnet/roslyn","RelatedBody":"After I added support for measuring allocations in the compiler\r\nbenchmark suite I noticed in a PerfView trace that we were often\r\nresizing the arrays we used for the Emit tables. Looking more closely at\r\nhow we allocate the tables, I found that we were using an approximation\r\nthat was very close to the actual size of the tables needed, but\r\nsystemically undercounted. Ironically, this may be worse than being\r\nfarther off since it meant that we were getting right to the edge of\r\navailable space, before requiring a resize, meaning a new large\r\nallocation, and copies from all of the entries in the old tables to the\r\nnew tables.\r\n\r\nBy applying a multiplier to the table size and allocating more memory\r\nfor the tables, I've actually decreased the total amount of memory\r\nallocated during emit.\r\n\r\nBefore:\r\n\r\n```\r\nBenchmarkDotNet=v0.11.0, OS=Windows 10.0.17134.228 (1803/April2018Update/Redstone4)\r\nAMD Ryzen 7 1800X Eight-Core Processor (Max: 3.60GHz), 1 CPU, 16 logical and 8 physical cores\r\nFrequency=3509032 Hz, Resolution=284.9789 ns, Timer=TSC\r\n.NET Core SDK=2.1.300-rtm-008866\r\n  [Host]     : .NET Core 2.0.9 (CoreCLR 4.6.26614.01, CoreFX 4.6.26614.01), 64bit RyuJIT\r\n  Job-ZXPACQ : .NET Core 2.0.9 (CoreCLR 4.6.26614.01, CoreFX 4.6.26614.01), 64bit RyuJIT\r\n\r\nToolchain=FixedCsProjToolchain\r\n\r\n  Method |     Selection |     Mean |     Error |   StdDev |      Gen 0 |      Gen 1 | Allocated |\r\n-------- |-------------- |---------:|----------:|---------:|-----------:|-----------:|----------:|\r\n RunEmit |      FullEmit | 823.4 ms | 16.046 ms | 21.96 ms | 43000.0000 | 10000.0000 |  40.68 MB |\r\n RunEmit | SerializeOnly | 210.0 ms |  5.215 ms | 15.38 ms |  2000.0000 |  1000.0000 |  18.23 MB |\r\n```\r\n\r\nAfter:\r\n\r\n```\r\nBenchmarkDotNet=v0.11.0, OS=Windows 10.0.17134.228 (1803/April2018Update/Redstone4)\r\nAMD Ryzen 7 1800X Eight-Core Processor (Max: 3.60GHz), 1 CPU, 16 logical and 8 physical cores\r\nFrequency=3509032 Hz, Resolution=284.9789 ns, Timer=TSC\r\n.NET Core SDK=2.1.300-rtm-008866\r\n  [Host]     : .NET Core 2.0.9 (CoreCLR 4.6.26614.01, CoreFX 4.6.26614.01), 64bit RyuJIT\r\n  Job-IELZBC : .NET Core 2.0.9 (CoreCLR 4.6.26614.01, CoreFX 4.6.26614.01), 64bit RyuJIT\r\n\r\nToolchain=FixedCsProjToolchain\r\n\r\n  Method |     Selection |     Mean |     Error |    StdDev |      Gen 0 |     Gen 1 | Allocated |\r\n-------- |-------------- |---------:|----------:|----------:|-----------:|----------:|----------:|\r\n RunEmit |      FullEmit | 852.0 ms | 16.915 ms | 38.864 ms | 43000.0000 | 9000.0000 |  39.54 MB |\r\n RunEmit | SerializeOnly | 193.0 ms |  2.448 ms |  2.044 ms |  2000.0000 | 1000.0000 |  17.08 MB |\r\n```\r\n\r\nYou can ignore the timing differences in the benchmark here, that's just noise on my machine. The\r\nbenchmark won't reflect larger GC costs because usually no collections are done during the\r\nbenchmark runs. (Benchmark.NET calls GC.Collect() after each run)\r\n"},{"Id":"8141661304","Type":"PullRequestEvent","CreatedAt":"2018-08-21T03:29:03","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29323","RelatedDescription":"Merged pull request \"Add a perf benchmark for the compiler Emit phase\" (#29323) at dotnet/roslyn","RelatedBody":"There's also a simple run-perf.ps1 script to run the benchmark."},{"Id":"8141596188","Type":"IssuesEvent","CreatedAt":"2018-08-21T03:04:40","Actor":"ekolis","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29410","RelatedDescription":"Opened issue \"IOException thrown when calling CSharpScript.EvaluateAsync<T>\" (#29410) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n2.9.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a console app\r\n2. Add reference to Roslyn nuget package\r\n3. Add this code to main: `Console.WriteLine(CSharpScript.EvaluateAsync<int>(\"1 + 2\").Result);`\r\n4. Run the console app\r\n\r\n**Expected Behavior**:\r\n\r\nPrints the number 3\r\n\r\n**Actual Behavior**:\r\n\r\nSystem.IO.FileNotFoundException\r\n  HResult=0x80070002\r\n  Message=Could not load file or assembly 'System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n  Source=<Cannot evaluate the exception source>\r\n  StackTrace:\r\n<Cannot evaluate the exception stack trace>\r\n\r\nInner Exception 1:\r\nFileNotFoundException: Could not load file or assembly 'System.Runtime, Version=4.0.20.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n\r\n"},{"Id":"8141435741","Type":"IssuesEvent","CreatedAt":"2018-08-21T02:07:37","Actor":"Pilchie","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29409","RelatedDescription":"Opened issue \"AdditionalText.GetText return null in compiler, empty SourceText in IDE\" (#29409) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n2.10.something\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Add the PublicAPI analyzer to a project via NuGet\r\n2. Configure the PublicApi.txt to be a file that doesn't exist\r\n\r\n**Expected Behavior**:\r\nSame behavior when opening the project as on the command line.\r\n\r\n**Actual Behavior**:\r\nOn the command line, you'll get an AD0001 because `GetText` will return `null` [here](https://github.com/dotnet/roslyn-analyzers/blob/af8c297b65db728debfda84555a515298a3ee9ab/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIAnalyzer.cs#L213).\r\n\r\nIn the IDE, nothing will happen, because the Workspace's [`AdditionalTextDocument.GetText`](http://source.roslyn.io/Microsoft.CodeAnalysis/AdditionalTextFile.cs.html#44) will return a SourceText that is empty."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8140418415","Type":"PullRequestEvent","CreatedAt":"2018-08-20T21:01:19","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6242","RelatedDescription":"Opened pull request \"Enable thread statics\" (#6242) at dotnet/corert","RelatedBody":"This change is in two parts:\r\n\r\n1. Type system work to support CoreCLR style of statics where there are 4 buckets: Gc / non-Gc statics, Gc / non-Gc thread-statics. CoreRT overrides the static layout algorithm to merge both thread-statics into the Gc thread-static block. This commit can ideally be ported to master immediately. I opted to make classifying the statics into 4 tables the default in `MetadataFieldLayoutAlgorithm`, with CoreRT overriding that behavior.\r\n\r\n2. R2R compiler changes to properly categorize the 4 statics kinds."},{"Id":"8139603261","Type":"IssuesEvent","CreatedAt":"2018-08-20T18:15:30","Actor":"EssenRoc","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6238","RelatedDescription":"Closed issue \"Cannot Save System.Drawing.Bitmap about gdiplus\" (#6238) at dotnet/corert","RelatedBody":"nuget package:\r\n```\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-26818-01\" />\r\n    <PackageReference Include=\"System.Drawing.Common\" Version=\"4.6.0-preview1-26818-01\" />\r\n```\r\n\r\nfollowing code is for reproducing this issue.\r\n```\r\nusing System;\r\nusing System.Drawing;\r\nusing System.Drawing.Imaging;\r\n\r\nnamespace test1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var bitmap = new Bitmap(256, 256);\r\n            bitmap.Save(\"bitmap.png\", ImageFormat.Png);\r\n            Console.Read();\r\n        }\r\n    }\r\n}\r\n```\r\nUnhandled Exception: System.Exception:\r\n```\r\n Method'[S.P.CompilerGenerated]Internal.CompilerGenerated.PInvokeDelegateWrapper__GdipCreateBitmapFromScan0_delegate.ForwardNativeFunctionWrapper__GdipCreateBitmapFromScan0_delegate(int32,int32,int32,int32,HandleRef,native int&)' requires non-trivial marshalling that is not yet supported by this compiler.\r\n   at test1!<BaseAddress>+0x1b609f\r\n   at System.Drawing.SafeNativeMethods.Gdip.GdipCreateBitmapFromScan0(Int32, Int32, Int32, Int32, HandleRef, IntPtr&) + 0x89\r\n   at System.Drawing.Bitmap..ctor(Int32, Int32, PixelFormat) + 0x63\r\n   at test1.Program.Main(String[]) + 0x25\r\n   at test1!<BaseAddress>+0x1fa95e\r\n```"},{"Id":"8139043353","Type":"PullRequestEvent","CreatedAt":"2018-08-20T16:24:37","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6241","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6241) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8141600031","Type":"IssuesEvent","CreatedAt":"2018-08-21T03:06:00","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1159","RelatedDescription":"Closed issue \"Can't make a shared-framework targeted package without a reference to NETCore.App\" (#1159) at dotnet/sdk","RelatedBody":"Repro:\r\n\r\n1. Create a netcoreapp1.1 default exe project.\r\n2. Add `<DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>`\r\n3. Add references (System.Runtime, etc) as necessary to get it to compile.\r\n4. Publish.\r\n\r\nThe `runtimeconfig.json` is now empty instead of the expected `netcoreapp1.1`. There should be some way to manually specify the target runtime framework without referencing the NETCore.App package."},{"Id":"8140960420","Type":"IssuesEvent","CreatedAt":"2018-08-20T23:21:13","Actor":"pakrym","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2485","RelatedDescription":"Opened issue \"UseAppHost build puts hostfxr.dll and hostpolicy.dll into build output\" (#2485) at dotnet/sdk","RelatedBody":"1. `dotnet new console`\r\n2. `dotnet build /p:UseAppHost=true /p:RuntimeIdentifier=win7-x64`\r\n\r\n### Expected\r\n\r\nBuild directory with app.exe, app.dll, app.*.json files\r\n\r\n### Actual\r\n\r\n```\r\nbin\\Debug\\netcoreapp2.1\\win7-x64\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----        8/20/2018   4:20 PM          41721 999.deps.json\r\n-a----        8/20/2018   4:13 PM           3584 999.dll\r\n-a----        6/29/2018   1:42 PM         137728 999.exe\r\n-a----        8/20/2018   4:13 PM            400 999.pdb\r\n-a----        8/20/2018   4:20 PM            250 999.runtimeconfig.dev.json\r\n-a----        8/20/2018   4:20 PM             28 999.runtimeconfig.json\r\n-a----        6/29/2018   1:42 PM         399320 hostfxr.dll\r\n-a----        6/29/2018   1:42 PM         585696 hostpolicy.dll\r\n```"},{"Id":"8140923790","Type":"IssuesEvent","CreatedAt":"2018-08-20T23:09:25","Actor":"pakrym","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2484","RelatedDescription":"Opened issue \"UseAppHost from command line publishes standalone\" (#2484) at dotnet/sdk","RelatedBody":"### Repro\r\n\r\n1. `dotnet new console`\r\n2. `dotnet publish /p:UseAppHost=true /p:RuntimeIdentifier=win7-x64`\r\n\r\n### Expected:\r\n\r\nPortable publish with additional `.exe`\r\n\r\n### Actual:\r\n\r\nStandalone publish:\r\n\r\n```\r\n dir .\\bin\\Debug\\netcoreapp2.1\\win7-x64\\publish\\\r\n\r\n\r\n    Directory: D:\\temp\\999\\bin\\Debug\\netcoreapp2.1\\win7-x64\\publish\r\n\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----        8/20/2018   4:05 PM          41721 999.deps.json\r\n-a----        8/20/2018   4:05 PM           3584 999.dll\r\n-a----        6/29/2018   1:42 PM         137728 999.exe\r\n-a----        8/20/2018   4:05 PM            400 999.pdb\r\n-a----        8/20/2018   4:05 PM             28 999.runtimeconfig.json\r\n-a----        6/29/2018   1:36 PM          19208 api-ms-win-core-console-l1-1-0.dll\r\n-a----        6/29/2018   1:36 PM          18696 api-ms-win-core-datetime-l1-1-0.dll\r\n-a----        6/29/2018   1:36 PM          18696 api-ms-win-core-debug-l1-1-0.dll\r\n-a----        6/29/2018   1:36 PM          18696 api-ms-win-core-errorhandling-l1-1-0.dll\r\n-a----        6/29/2018   1:36 PM          22280 api-ms-win-core-file-l1-1-0.dll\r\n-a----        6/29/2018   1:36 PM          18696 api-ms-win-core-file-l1-2-0.dll\r\n-a----        6/29/2018   1:36 PM          18696 api-ms-win-core-file-l2-1-0.dll\r\n-a----        6/29/2018   1:36 PM          18696 api-ms-win-core-handle-l1-1-0.dll\r\n-a----        6/29/2018   1:36 PM          19208 api-ms-win-core-heap-l1-1-0.dll\r\n-a----        6/29/2018   1:36 PM          18696 api-ms-win-core-interlocked-l1-1-0.dll\r\n-a----        6/29/2018   1:36 PM          19720 api-ms-win-core-libraryloader-l1-1-0.dll\r\n-a----        6/29/2018   1:36 PM          21256 api-ms-win-core-localization-l1-2-0.dll\r\n-a----        6/29/2018   1:36 PM          19208 api-ms-win-core-memory-l1-1-0.dll\r\n-a----        6/29/2018   1:36 PM          18696 api-ms-win-core-namedpipe-l1-1-0.dll\r\n-a----        6/29/2018   1:36 PM          19720 api-ms-win-core-processenvironment-l1-1-0.dll\r\n-a----        6/29/2018   1:36 PM          20744 api-ms-win-core-processthreads-l1-1-0.dll\r\n.....\r\n```\r\n\r\n### Workaround:\r\n\r\nPass `/p:SelfContained=false` into publish commandline. "},{"Id":"8140805391","Type":"PullRequestEvent","CreatedAt":"2018-08-20T22:33:50","Actor":"github-john-doe","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2483","RelatedDescription":"Opened pull request \"Typos\" (#2483) at dotnet/sdk","RelatedBody":""},{"Id":"8140635668","Type":"IssuesEvent","CreatedAt":"2018-08-20T21:49:44","Actor":"pakrym","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2482","RelatedDescription":"Opened issue \"UseAppHost fails when publishing exe-exe P2P reference\" (#2482) at dotnet/sdk","RelatedBody":"Repro:\r\n\r\n### lib2/lib2.csproj\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n### lib1/lib1.csproj\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"../lib2/lib2.csproj\" ReferenceOutputAssembly=\"False\" />\r\n  </ItemGroup>\r\n</Project>\r\n\r\n```\r\n\r\n`dotnet publish /p:UseAppHost=true /p:RuntimeIdentifier=win7-x64` in `lib1` directory.\r\n\r\n\r\n### Expected:\r\n\r\nPublish succedes\r\n\r\n### Actual:\r\n\r\n`C:\\Users\\pakrymet\\.dotnet\\x64\\sdk\\2.1.400\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(119,5): error NETSDK1066: A RuntimeIdentifier must be specified to publish a framework-dependent application with an application host. [D:\\temp\\888\\lib2\\lib2.csproj]`\r\n\r\n\r\n### Suspect\r\n`Microsoft.Common.CurrentVersion.targets` includes`TargetFramework;RuntimeIdentifier` in `RemoveProperties` but not `UseAppHost`\r\n``` xml\r\n <!--\r\n       Get reference target framework lists.\r\n       Note: A future optimization could cache the closest match and set the target framework on\r\n       this MSBuild task invocation. This would (optimistically) save an evaluation of the referenced\r\n       project when the answer is the same.\r\n    -->\r\n    <MSBuild\r\n        Projects=\"@(_MSBuildProjectReferenceExistent)\"\r\n        Targets=\"GetTargetFrameworks\"\r\n        BuildInParallel=\"$(BuildInParallel)\"\r\n        Properties=\"%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)\"\r\n        ContinueOnError=\"!$(BuildingProject)\"\r\n        RemoveProperties=\"%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove);TargetFramework;RuntimeIdentifier\"\r\n        Condition=\"'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true'\"\r\n        SkipNonexistentTargets=\"true\">\r\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"_ProjectReferenceTargetFrameworkPossibilities\" />\r\n    </MSBuild>\r\n\r\n```\r\n"},{"Id":"8139574302","Type":"PullRequestEvent","CreatedAt":"2018-08-20T18:09:36","Actor":"github-john-doe","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2480","RelatedDescription":"Closed pull request \"Typos\" (#2480) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1031596031325036544","CreatedAt":"2018-08-20T17:37:14+00:00","UserScreenname":"dotnet","Text":"If @bing can do it, you can too! https://t.co/iNW762FmlA runs on .NET Core 2.1 for major speed improvements:… https://t.co/yfYyWbSwO1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":454,"FavoriteCount":273,"RawContent":null},{"Id":"1029513864390606848","CreatedAt":"2018-08-14T23:43:27+00:00","UserScreenname":"dotnet","Text":"The agenda's out. Hear how we’re taking .NET into the future from the experts who know about #dotNET Core, #ASPNET… https://t.co/XgvObxwhdl","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":141,"FavoriteCount":45,"RawContent":null},{"Id":"1029453724303814656","CreatedAt":"2018-08-14T19:44:28+00:00","UserScreenname":"dotnet","Text":"Advisory on July 2018 .NET Framework Updates has been **resolved** https://t.co/nMiUiov4NS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":7,"RawContent":null},{"Id":"1029428830296055811","CreatedAt":"2018-08-14T18:05:33+00:00","UserScreenname":"dotnet","Text":"Tune in tomorrow for a LIVE .NET Rocks recording on Twitch with @csharpfritz https://t.co/jtycJuPxs1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":10,"RawContent":null},{"Id":"1029417768100061185","CreatedAt":"2018-08-14T17:21:36+00:00","UserScreenname":"dotnet","Text":"Posted: August 2018 Security and Quality Rollup\nhttps://t.co/ax6ptJA1dD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":11,"RawContent":null},{"Id":"1029155267760467968","CreatedAt":"2018-08-13T23:58:31+00:00","UserScreenname":"dotnet","Text":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+ https://t.co/cwsiHdYiPI #PSA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":41,"FavoriteCount":17,"RawContent":null},{"Id":"1026954979620282368","CreatedAt":"2018-08-07T22:15:21+00:00","UserScreenname":"dotnet","Text":"ML .NET 0.4 is now available! Improved support for #NLP scenarios with word embedding transform, improved speed for… https://t.co/K0WAJogGLW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":253,"FavoriteCount":150,"RawContent":null}]}},"RunOn":"2018-08-21T05:30:28.4311113Z","RunDurationInMilliseconds":7964}