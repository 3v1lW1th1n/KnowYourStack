{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T00:00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":23,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":20,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":47,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null},{"Title":"Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance","PublishedOn":"2017-08-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current blog post focuses on &#8220;Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance&#8220;. Just as a reminder, the four introductory blog posts of this series are (or... <a aria-label=\"read more about Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/","RawContent":null},{"Title":"The week in .NET – Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!","PublishedOn":"2017-08-23T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Previous posts: .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore Visual Studio extension of the week: Project File Tools The Project File Tools Visual Studio extension provides package name and version IntelliSense, tooltips for... <a aria-label=\"read more about The week in .NET &#8211; Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/","RawContent":null},{"Title":".NET Framework Update for AppContext","PublishedOn":"2017-08-18T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"A new update for .NET Framework is now available for the AppContext class. The behavior of the AppContext class was recently regressed. The update returns the class to the correct behavior. This update affects the .NET Framework 4.6 and later. The update is not required on Windows 10. The AppContext class was introduced in the... <a aria-label=\"read more about .NET Framework Update for AppContext\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6470589367","Type":"PullRequestEvent","CreatedAt":"2017-08-17T09:24:13","Actor":"stefanov-stefan","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Opened pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6404144202","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:09:52","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/84","RelatedDescription":"Opened issue \"How can we embed images into the .NET foundation website?\" (#84) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding images. I'd prefer to _not to adjust CSP_ policy to add the reactiveui.net and instead have some way to pull-request images into this repository.\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6541935607","Type":"IssuesEvent","CreatedAt":"2017-09-01T22:57:04","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Opened issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https:/github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to [https://github.com/dotnet/standard/issues/481]"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6628889929","Type":"PullRequestEvent","CreatedAt":"2017-09-24T00:31:59","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14158","RelatedDescription":"Opened pull request \"Add CI PR triggers for x86_arm and x64_arm64 testing\" (#14158) at dotnet/coreclr","RelatedBody":""},{"Id":"6628807161","Type":"IssuesEvent","CreatedAt":"2017-09-23T23:06:06","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14157","RelatedDescription":"Opened issue \"Question: Mark tests for conditional disabling\" (#14157) at dotnet/coreclr","RelatedBody":"In dotnet/coreclr tests, it is possible to mark a test with various characteristics (\"traits\"), and then choose which tests NOT to run based on the tests so marked?\r\n\r\nThere is issues.targets, but it appears that is only used at test BUILD time, not test RUN time. I want to be able to (for example) build the x86 release tests once, then run any number of JIT stress modes, or altjit runs, with each type of run disabling some (different) subset of tests. I don't want to have to build the test wrappers again for each run type. I don't want to disable (via the existing issues.targets) the union of all failing tests for all possible modes (this is far too many, especially when considering altjit and platform bring-up).\r\n\r\nIt looks like xunit has a `-notrait` feature, but I don't see if it is currently plumbed through from a dotnet/coreclr test proj file to the auto-generated xunit wrappers, for example.\r\n\r\n@RussKeldorph @dotnet/jit-contrib @wtgodbe "},{"Id":"6628799628","Type":"PullRequestEvent","CreatedAt":"2017-09-23T22:58:58","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14156","RelatedDescription":"Opened pull request \"Moving `Math.Abs(double)` and `Math.Abs(float)` to be implemented in managed code.\" (#14156) at dotnet/coreclr","RelatedBody":"This is part of https://github.com/dotnet/coreclr/issues/14155.\r\n"},{"Id":"6628798361","Type":"IssuesEvent","CreatedAt":"2017-09-23T22:57:39","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14155","RelatedDescription":"Opened issue \"System.Math and System.MathF should be implemented in managed code, rather than as FCALLs to the C runtime\" (#14155) at dotnet/coreclr","RelatedBody":"As per the title, both `System.Math` and `System.MathF` should have most of their extern methods implemented in managed code rather than being FCALLs to the underlying C runtime.\r\n\r\nThis will ensure:\r\n* Consistency across operating systems and architectures\r\n* Implementations can be more readily updated without requiring changes in the runtime proper\r\n\r\nSome of the functions (such as `Abs`, `Ceil`, `Floor`, `Round`, and `Sqrt`) are simple enough that they can be implemented in managed code today and still maintain the performance characteristics.\r\n\r\nOther functions (such as `Cos`, `Sin`, and `Tan`) will need to wait until the hardware intrinsics proposal is more widely available (since maintaining perf numbers will require an implementation to call said intrinsics)."},{"Id":"6628694626","Type":"PullRequestEvent","CreatedAt":"2017-09-23T21:23:25","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14119","RelatedDescription":"Merged pull request \"Moving parts of `System.Math` and `System.MathF` to be shared with CoreRT.\" (#14119) at dotnet/coreclr","RelatedBody":"This splits `System.Math` and `System.MathF` into partial classes so that parts of the code can be shared with CoreRT.\r\n\r\nThe changes on the native side are:\r\n* `COMDouble` and `COMSingle` now export a `FMod` function which wraps `fmod`\r\n* `COMDouble` and `COMSingle` now export a `ModF` function which matches the native signature\r\n* `COMDouble` and `COMSingle` no longer export a `Round` function\r\n\r\nThe changes on the managed side are:\r\n* A few more `AggressiveInlining` attributes, to match CoreRT\r\n* `Round` is now implemented in managed code\r\n* `RoundInternal` is directly inlined now\r\n* `Truncate` calls a new `modf` private function, rather than `InternalTruncate` which itself called `SplitFraction`\r\n* `copysign` is a new private function directly implemented in managed code (this supports `Round`)\r\n\r\nEverything else is just moving the types around between the files or non functional changes such as:\r\n* Adding braces that were previously missing\r\n* Using a ternary expression (instead of if/else) when we are selecting between two return values\r\n* Using the keyword rather than full type name (this seems to be the more common and recommended behavior)\r\n"},{"Id":"6628686055","Type":"IssuesEvent","CreatedAt":"2017-09-23T21:16:16","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14154","RelatedDescription":"Opened issue \"Several of the FileSystemWatcherTests are failing after PR 14043\" (#14154) at dotnet/coreclr","RelatedBody":"It seems that https://github.com/dotnet/coreclr/pull/14043 introduced four failures in the CoreFX baseline tests:\r\n* System.IO.Tests.File_Create_Tests.FileSystemWatcher_File_Create\r\n* System.IO.Tests.FileSystemWatcherTests_netstandard17.EndInit_ResumesPausedEnableRaisingEvents\r\n* System.IO.Tests.FileSystemWatcherTests_netstandard17.EndInit_ResumesPausedEnableRaisingEvents(setBeforeBeginInit: True)\r\n* System.IO.Tests.FileSystemWatcherTests_netstandard17.EndInit_ResumesPausedEnableRaisingEvents(setBeforeBeginInit: False)\r\n\r\nThese were first detected in https://github.com/dotnet/coreclr/pull/14119 (Job: https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_ubuntu_corefx_baseline_prtest/98/). But they also appeared earlier in the daily runs of the job: https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_ubuntu_corefx_baseline/298/.\r\n\r\nNOTE: It wasn't detected earlier due to other build failures in the job that was caused by an unrelated change.\r\n\r\nI did validate that it repro's as of the PR commit (555f436263ed5632443efbcc9b860a7d7c5069a3), but not in the commit prior to that (5d3788573000ed800c5b6851c3c93b59fca3946a)."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6626722521","Type":"IssuesEvent","CreatedAt":"2017-09-22T20:49:48","Actor":"randomizedthinking","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7678","RelatedDescription":"Closed issue \"dotnet: failed to create a F# project on Debian with SDK 2.0.0\" (#7678) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n    dotnet new console -lang F#\r\n\r\n## Expected  behavior\r\n\r\nA F# project is created.\r\n\r\n## Actual behavior\r\n\r\nThe following error is received.\r\n\r\n    The template \"Console Application\" was created successfully.                                                                                                                                                                                  \r\n    \r\n    Processing post-creation actions...\r\n    Running 'dotnet restore' on /home/xxx/fsharp/fsharp.fsproj...\r\n      Restoring packages for /home/xxx/fsharp/fsharp.fsproj...\r\n    \r\n    Restore failed.\r\n    Post action failed.\r\n    Description: Restore NuGet packages required by this project.\r\n    Manual instructions: Run 'dotnet restore'\r\n\r\nAlso, a manual call of `dotnet restore` does nothing. Build and run will fail as well.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n    .NET Command Line Tools (2.0.0)\r\n    \r\n    Product Information:\r\n     Version:            2.0.0\r\n     Commit SHA-1 hash:  cdcd1928c9\r\n    \r\n    Runtime Environment:\r\n     OS Name:     debian\r\n     OS Version:  9\r\n     OS Platform: Linux\r\n     RID:         linux-x64\r\n     Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n    \r\n    Microsoft .NET Core Shared Framework Host\r\n    \r\n      Version  : 2.0.0\r\n      Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d"},{"Id":"6626705457","Type":"IssuesEvent","CreatedAt":"2017-09-22T20:45:13","Actor":"jcouv","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7704","RelatedDescription":"Opened issue \"CLI: namespace error on fresh VB project\" (#7704) at dotnet/cli","RelatedBody":"@jcouv commented on [Fri Sep 22 2017](https://github.com/dotnet/roslyn/issues/22292)\n\nRepro:\r\n\r\n1. `mkdir 22227-cli-vb`\r\n2. `cd 22227-cli-vb`\r\n3. `dotnet new console --language=vb`\r\n4. `dotnet build` produces the namespace error below\r\n\r\n```\r\n> dotnet --version\r\n2.0.2-vspre-006949\r\n```\r\n\r\n```\r\n> dotnet build\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nvbc : error BC30113: '22227-cli-vb' is not a valid name and cannot be used as the root namespace name. [D:\\issues\\22227-cli-vb\\22227-cli-vb.vbproj]\r\n\r\nBuild FAILED.\r\n\r\nvbc : error BC30113: '22227-cli-vb' is not a valid name and cannot be used as the root namespace name. [D:\\issues\\22227-cli-vb\\22227-cli-vb.vbproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\nRelates to https://github.com/dotnet/roslyn/issues/22227\n\n---\n\n@am11 commented on [Fri Sep 22 2017](https://github.com/dotnet/roslyn/issues/22292#issuecomment-331551793)\n\nDoes vb.exe by design considers the directory name to be the root namespace unless we explicitly add normalized name in `<RootNamespace>_22227_cli_vb</RootNamespace>` in vbproj?\r\n\r\ncsc doesn't seem to rely on dirname, even when there is no namespace in the program.cs code, actual dirname has invalid (hyphen) character and `<RootNamespace>` is set to `22227-cli-vb` (with same invalid chars) in csproj.\r\n\r\nIf it's not a breaking change, would be cool if vb.exe and csc.exe behave the same way.\r\n\n\n---\n\n@jcouv commented on [Fri Sep 22 2017](https://github.com/dotnet/roslyn/issues/22292#issuecomment-331556102)\n\nIt looks like the problem is not with `vbc.exe`, but with the arguments it receives. If the `vbproj` file is named A, then there is a `/rootnamespace:A` command-line option.\r\n\r\nI'll move the issue to the CLI repo.\n\n"},{"Id":"6626338219","Type":"PullRequestEvent","CreatedAt":"2017-09-22T19:06:41","Actor":"janvorli","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7702","RelatedDescription":"Merged pull request \"Fix issues caused by adding RHEL6 support\" (#7702) at dotnet/cli","RelatedBody":"There were two issues. One was that additional arguments that are not\r\nrecognized by the build.sh script were incorrectly passed as a single\r\nargument in single-quotes to msbuild.\r\nThe second issue was that when LD_LIBRARY_PATH was not set, the\r\ndotnet-install.sh script was failing due to its using of the \"set -u\"\r\noption that prevents usage of unset variables.\r\n\r\nFix https://github.com/dotnet/cli/issues/7698"},{"Id":"6626338201","Type":"IssuesEvent","CreatedAt":"2017-09-22T19:06:41","Actor":"janvorli","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7698","RelatedDescription":"Closed issue \"dotnet-install.sh fails if LD_LIBRARY_PATH doesn't exist\" (#7698) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n```bash\r\nunset LD_LIBRARY_PATH\r\ncurl -O https://raw.githubusercontent.com/dotnet/cli/master/scripts/obtain/dotnet-install.sh\r\nchmod +x ./dotnet-install.sh\r\n./dotnet-install.sh\r\n```\r\n\r\n## Expected  behavior\r\ndotnet installed\r\n\r\n## Actual behavior\r\n\r\n```bash\r\n./dotnet-install.sh: line 210: LD_LIBRARY_PATH: unbound variable\r\n```\r\n\r\n## Workaround\r\n\r\n```bash\r\nexport LD_LIBRARY_PATH=\r\n```\r\n\r\nIt appears on Ubuntu 16.04, this env var doesn't exist.  Script should check if it exists before using.\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6628336327","Type":"PullRequestEvent","CreatedAt":"2017-09-23T16:39:10","Actor":"eerhardt","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/508","RelatedDescription":"Opened pull request \"Apply source build patches\" (#508) at dotnet/standard","RelatedBody":"Applying the patches from source-build to the dotnet/standard repo using some property names discussed on Friday.\r\n\r\nLet me know what you think of these properties/names.\r\n\r\nI still want to make one change:  on Unix, init-tools.sh will copy the tools from the root directory.  I want to port this change to Windows as well (using the same Environment Variables for now).  But I haven't started on that work.  I can do that separately from this change."},{"Id":"6626339968","Type":"PullRequestEvent","CreatedAt":"2017-09-22T19:07:11","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/507","RelatedDescription":"Opened pull request \"Use a file list rather than globbing NETStandard assemblies\" (#507) at dotnet/standard","RelatedBody":"This change minimizes the amount of work done during project evaluation by directly\r\nsetting the reference items to all the files/paths we know are part of the package.\r\n\r\n/cc @weshaggard @davkean \r\n\r\n#442"},{"Id":"6623847683","Type":"IssuesEvent","CreatedAt":"2017-09-22T09:04:13","Actor":"kiran-bobade","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/506","RelatedDescription":"Opened issue \"Can't use System.Configuration.Configuration manager in a .NET Standard2.0 library on .NET FX4.6\" (#506) at dotnet/standard","RelatedBody":"I have an assembly created in **NetStandard2.0**. It reads AppSettings using **System.Configuration.ConfigurationManager**. I have installed nuget package of **System.Configuration.ConfigurationManager** with version 4.4.X which is suitable for NetStandard2.0.\r\n\r\nWhen I refer this assembly in console app (.Net Core) it is reading AppSettings properly, but when I refer this assembly in old .NetFramework(4.6.X) console app it is not working and throwing an exception.\r\n\r\nPlease see the code below.\r\n\r\n**Assembly 1: NetStandard 2.0**\r\n\r\n**Nuget: System.Configuration.ConfigurationManager 4.4.0**\r\n\r\n     using System.Configuration;\r\n\r\n     namespace Bootstrapper.Lib\r\n     {\r\n         public class Bootstrapper\r\n         {           \r\n             public void LoadAppSettings()\r\n             {\r\n                   string serachPattern = ConfigurationManager.AppSettings[\"AssemblySearchPattern\"];\r\n             }\r\n        }\r\n    }\r\n**Console App: NetFx 4.6.X**\r\n\r\n\tusing System;\r\n\tusing Bootstrapper.Lib;\r\n\tnamespace Bootstrapper.Console\r\n\t{\r\n\t  class Program\r\n\t  {\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tnew Bootstrapper().LoadAppSettings();\r\n\t\t}\r\n\t  }\r\n\t}\r\n\r\n**Exception After Run:**\r\n\r\n\t'Could not load file or assembly 'System.Configuration.ConfigurationManager, \r\n\t Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one \r\n\t of its dependencies. The system cannot find the file specified.'\r\n\r\n**It will work with Console App developed using .NetCore.**\r\n\r\nPlease help!!!"},{"Id":"6623489124","Type":"IssuesEvent","CreatedAt":"2017-09-22T07:27:59","Actor":"dozer75","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/505","RelatedDescription":"Opened issue \"Lots of conflicts when a project references both netstandard1.6 and netstandard2.0 projects\" (#505) at dotnet/standard","RelatedBody":"We have a classic WebApi .NET Framework project that references projects that is either netstandard1.6 and netstandard2.0.\r\n\r\nSome of our core projects uses EF Core 2.0 (which uses netstandard 2.0), while the Microsoft.AspNet.OData library references netstandard1.6. But this genereates lots of conflicts warnings on assemblies within these standards when building like these (there are more warnings than these):\r\n\r\n```\r\n1>          Encountered conflict between 'Reference:C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.0\\build\\netstandard2.0\\\\ref\\System.AppContext.dll' and 'Reference:C:\\Users\\<user>\\.nuget\\packages\\system.appcontext\\4.1.0\\ref\\netstandard1.6\\System.AppContext.dll'.  Choosing 'Reference:C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.0\\build\\netstandard2.0\\\\ref\\System.AppContext.dll' because AssemblyVersion '4.1.2.0' is greater than '4.1.0.0'.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\microsoft.win32.registry\\4.0.0\\runtimes\\unix\\lib\\netstandard1.3\\Microsoft.Win32.Registry.dll' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\microsoft.win32.registry\\4.0.0\\runtimes\\win\\lib\\netstandard1.3\\Microsoft.Win32.Registry.dll'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.fedora.23-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\fedora.23-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.fedora.24-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\fedora.24-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.opensuse.13.2-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\opensuse.13.2-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.opensuse.42.1-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\opensuse.42.1-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.rhel.7-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\rhel.7-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.ubuntu.14.04-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\ubuntu.14.04-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.ubuntu.16.04-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\ubuntu.16.04-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.debian.8-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\debian.8-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\runtime.ubuntu.16.10-x64.runtime.native.system.security.cryptography.openssl\\4.3.0\\runtimes\\ubuntu.16.10-x64\\native\\System.Security.Cryptography.Native.OpenSsl.so'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\system.diagnostics.process\\4.1.0\\runtimes\\linux\\lib\\netstandard1.4\\System.Diagnostics.Process.dll' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\system.diagnostics.process\\4.1.0\\runtimes\\osx\\lib\\netstandard1.4\\System.Diagnostics.Process.dll'.  Could not determine winner due to equal file and assembly versions.\r\n1>          Encountered conflict between 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\system.diagnostics.process\\4.1.0\\runtimes\\linux\\lib\\netstandard1.4\\System.Diagnostics.Process.dll' and 'Runtime:C:\\Users\\<user>\\.nuget\\packages\\system.diagnostics.process\\4.1.0\\runtimes\\win\\lib\\netstandard1.4\\System.Diagnostics.Process.dll'.  Could not determine winner due to equal file and assembly versions.\r\n\r\n```\r\n\r\nWhat impact does these have? \r\n\r\nI thought that the idea with these standards was that they should be backward compatible? There shouldn't be any warnings for this at all. \r\n\r\nI find the whole standard thing very non-standard compatible, this is one of the problems I have mixing projects that uses different standards. So it is quite frustrating now."},{"Id":"6621338567","Type":"IssuesEvent","CreatedAt":"2017-09-21T18:47:05","Actor":"daveh101","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/504","RelatedDescription":"Opened issue \"ASP.NET 4.7.1 - The type 'Enum' is defined in an assembly that is not referenced\" (#504) at dotnet/standard","RelatedBody":"This is likely a very similar issue to #391 & #489.\r\n\r\nThere is a big chance here that I am being an absolute idiot!! But, we are looking at migrating all of our code across to using .NET Standard 2.0 instead of PCL's - this is part of our work with UWP (#489).\r\n\r\nThe issue here is now when looking at one of our websites, I get the follow issue (see image)\r\n![capture](https://user-images.githubusercontent.com/18173195/30712771-0c9b5cfa-9f05-11e7-9bba-2220e9a506db.PNG)\r\n> CS0012: The type 'Enum' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n\r\nThere is an Enum that is in a .NET Standard 2.0 project that is being referenced `this.Links[i].Type` in the `aspx` file.\r\n\r\nThere is no problem with referencing this enum in the .cs file (or other items in the .NET Standard Projects).\r\n\r\nWhat do I need to do to make this work on an ASPX file.\r\n\r\nI have tried all the bits mentioned in the related issues, but none seem to help.\r\n\r\n@weshaggard - I assume this might be one for you again?\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6628709402","Type":"IssuesEvent","CreatedAt":"2017-09-23T21:35:29","Actor":"qmfrederik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24226","RelatedDescription":"Opened issue \"X509Certificate2/CommonCrypto: Exporting a certificate without a private key to a PKCS12 store with a password fails\" (#24226) at dotnet/corefx","RelatedBody":"If you have a `X509Certificate2` object which represents a certificate without a private key, exporting that certificate to a Pkcs12 store will work on Windows and Linux but fails on Mac (which use CommonCrypto).\r\n\r\nThis is a regression on macOS as this worked with .NET Core 1.x (when using OpenSSL) and no longer works with .NET Core 2.0.\r\n\r\nThe following unit test reproduces the behavior:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Security.Cryptography.X509Certificates;\r\nusing Xunit;\r\n\r\nnamespace temp\r\n{\r\n  public class UnitTest1\r\n  {\r\n    [Fact]\r\n    public void Test1()\r\n    {\r\n      var cert = new X509Certificate2(\"my_cert.crt\");\r\n      var data = cert.Export(X509ContentType.Pkcs12, \"password\");\r\n      Assert.NotNull(data);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe test passes on Windows & Linux but fails on macOS with the following error message:\r\n\r\n```\r\nFailed   certs.UnitTest1.Test1\r\nError Message:\r\n Interop+AppleCrypto+AppleCommonCryptoCryptographicException : One or more parameters passed to a function were not valid.\r\nStack Trace:\r\n   at Interop.AppleCrypto.X509Export(X509ContentType contentType, SafeCreateHandle cfPassphrase, IntPtr[] certHandles)\r\n   at Interop.AppleCrypto.X509ExportPfx(IntPtr[] certHandles, SafePasswordHandle exportPassword)\r\n   at Internal.Cryptography.Pal.StorePal.AppleCertificateExporter.ExportPkcs12(SafePasswordHandle password)\r\n   at Internal.Cryptography.Pal.StorePal.AppleCertificateExporter.Export(X509ContentType contentType, SafePasswordHandle password)\r\n   at System.Security.Cryptography.X509Certificates.X509Certificate.Export(X509ContentType contentType, String password)\r\n   at certs.UnitTest1.Test1() in /Users/quamotion/scratch/certs/UnitTest1.cs:line 13\r\n```\r\n\r\nmy_cert.crt can be generated using the following script:\r\n\r\n```\r\nopenssl genrsa -out my_key.key 2048\r\nopenssl req -new -key my_key.key -out my_request.csr\r\nopenssl x509 -req -days 3650 -in my_request.csr -signkey my_key.key -out my_cert.crt\r\n```\r\n"},{"Id":"6628596069","Type":"IssuesEvent","CreatedAt":"2017-09-23T20:01:25","Actor":"qmfrederik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24225","RelatedDescription":"Opened issue \"X509Certificate2/CommonCrypto: Unable to open PKCS#12 files with no password and valid MAC\" (#24225) at dotnet/corefx","RelatedBody":"If you have a PKCS#12 file which is not protected with a password, and which does have a MAC entry, opening the file will work on Windows and Linux but fails on Mac (which use CommonCrypto).\r\n\r\nThis is a regression on macOS as this worked with .NET Core 1.x (when using OpenSSL) and no longer works with .NET Core 2.0.\r\n\r\nThe following unit test reproduces the behavior:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Security.Cryptography.X509Certificates;\r\nusing Xunit;\r\n\r\nnamespace temp\r\n{\r\n  public class UnitTest1\r\n  {\r\n    [Fact]\r\n    public void Test1()\r\n    {\r\n      var cert = new X509Certificate(\"my_pkcs12.pfx\");\r\n      Assert.NotNull(cert);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n`my_pkcs12.pfx` can be generated using the following script, use an empty password when prompted:\r\n\r\n```\r\nopenssl genrsa -out my_key.key 2048\r\nopenssl req -new -key my_key.key -out my_request.csr\r\nopenssl x509 -req -days 3650 -in my_request.csr -signkey my_key.key -out my_cert.crt\r\nopenssl pkcs12 -keypbe PBE-SHA1-3DES -certpbe PBE-SHA1-3DES -export -in my_cert.crt -inkey my_key.key -out my_pkcs12.pfx -name \"my-name\"\r\n```\r\n\r\nThis is not the same as #11046, that one was about p12 stores where the MAC is absent; in this case there is a valid MAC."},{"Id":"6628346750","Type":"PullRequestEvent","CreatedAt":"2017-09-23T16:47:07","Actor":"Drawaes","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24224","RelatedDescription":"Opened pull request \"IPAddress: Change to faster algo to bigendian->litteendian flip of numbers\" (#24224) at dotnet/corefx","RelatedBody":"As per my comment in CoreFXLabs, its also identified there that the IPAddress methods are a lot slower\r\n\r\n(The version I have submitted is the (2) versions of the algo below)\r\n\r\n[Ref Issue from CoreFxLab](https://github.com/dotnet/corefxlab/pull/1779#issuecomment-331647487)\r\n\r\n|Test|AVERAGE | STDEV.S |     MIN |     MAX|\r\n|---|---|---|----|----|\r\n|MeasureReverse|  200.318 |   4.356 |  195.937 |  217.856|\r\n|MeasureReverse2|165.578 |   1.875 |  162.408 |  172.572|\r\nMeasureReverseUsingNtoH| 562.256 |   5.355 |  554.489 |  579.212|\r\n|MeasureReverseLong| 331.710 |   1.982 |  327.835 |  336.525|\r\n|MeasureReverseLong2|264.985 |   1.956 |  260.660 |  270.584|\r\n|MeasureReverseUsingNtoHLong|1241.993 |  59.340 | 1189.954 | 1361.043|\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6628458811","Type":"PullRequestEvent","CreatedAt":"2017-09-23T18:11:39","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22269","RelatedDescription":"Merged pull request \"Support for ref-readonly locals\" (#22269) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nNew feature: ref-readonly local variables. In addition to ref-readonly parameters, in C# 7.2 users will be able to declare local variables as ref readonly.\r\n\r\n**Bugs this fixes:**\r\n\r\nMentioned in https://github.com/dotnet/roslyn/issues/19216\r\n\r\n**Workarounds, if any**\r\n\r\nNew feature!\r\n\r\n**Risk**\r\n\r\nRef readonly locals follow in the footsteps of ref-readonly parameters. Almost everything dangerous with ref readonly locals can be done with ref readonly parameters, and the same checks are applied to ref readonly locals as to ref readonly parameters. The codegen for many of these cases has been manually verified to be safe.\r\n\r\n**Performance impact**\r\n\r\nLow. A few small checks on existing codepaths.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo.\r\n\r\n**Root cause analysis:**\r\n\r\nNew feature!\r\n\r\n**How was the bug found?**\r\n\r\nDuring test plan review it was decided that not supporting ref readonly locals was too painful to ship to users.\r\n\r\n**Test documentation updated?**\r\n\r\nThe following scenarios have been manually tested for the IDE:\r\n\r\nCategory | Feature/Description | C# Signoff\r\n-- | -- | -- \r\nEnable/Disable | Feature Flags To completely enables/disable new compiler features in the compiler & IDE | :white_check_mark:  \r\nTyping | General Typing- Type and paste new constructs- Nothing interferes with verbatim typing | :white_check_mark:   \r\n  | Completion- Typing new keyword/construct names- Dotting off of new constructs- Matching part of the identifier is highlighted (including word prefix matches) [Visual Studio 2015 Update 1]- Target type preselection [Visual Studio 2017]IntelliSense filtering [Visual Studio 2017] | :white_check_mark:  \r\n  | Formatting - Spacing in and around new constructs- Spacing options- Format Document commandTools > Options settings should be respected | :free: \r\n  | Automatic Brace Completion (C# only) - Auto-insert close brace- Shift+Enter commit of IntelliSense and any pending brace completion sessions (Known issue: https://github.com/dotnet/roslyn/issues/18065) | :free: \r\n  | Indentation - Typing Enter in an unfinished statement indents the next line |  :white_check_mark:  \r\nNavigating | Go To Definition - F12 from callsites to definition- Ctrl+click [Visual Studio 2017 version 15.4] | :white_check_mark:  \r\n  | Go To Implementation - Ctrl+F12 to jump from virtual members to their implementations- Jump from inheritable types to their implementations | :free: \r\n  | Find All References - Lists references to a symbol in \"Find Symbol Results\" window- Shows results in hierarchy grouped by definition [Visual Studio 2015]- Results should be groupable/filterable/classified appropriately [Visual Studio 2017] - Find All References on literals [Visual Studio 2017 version 15.3] |  :white_check_mark:   \r\nViewing | Colorization - Keywords, literals, and identifiers colored appropriately in code- Colors should theme appropriately- The \"Blue Theme (Additional Contrast)\" should have sufficiently dark colors |  :white_check_mark:   \r\n  | Error Squiggles - Squiggles appear as expected on reasonable spans | :white_check_mark:  \r\n\r\n\r\n"},{"Id":"6628183254","Type":"IssuesEvent","CreatedAt":"2017-09-23T14:44:37","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21488","RelatedDescription":"Closed issue \"Simple code does not compile in VS2017 Preview\" (#21488) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2017 Preview\r\nVersion 15.3.0 Preview 7.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new Class Library application\r\n2. Set the Target Framework to .NET Framework 4.7\r\n3. Add the following code:\r\n\r\n```\r\nusing System.Collections.Generic;\r\n\r\nnamespace ValueTupleLanguage\r\n{\r\n\tpublic class Class1\r\n\t{\r\n\t\tpublic object A()\r\n\t\t{\r\n\t\t\treturn 5.ToThingy();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class Ext\r\n\t{\r\n\t\tpublic static IEnumerable<(string a, int b)> ToThingy(this int x)\r\n\t\t{\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n4. Compile\r\n\r\n**Expected Behavior**:\r\n```\r\n1>------ Build started: Project: ValueTupleLanguage, Configuration: Debug Any CPU ------\r\n1>  ValueTupleLanguage -> C:\\Temp\\ValueTupleLanguage\\ValueTupleLanguage\\bin\\Debug\\ValueTupleLanguage.dll\r\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n\r\n**Actual Behavior**:\r\n```\r\n1>------ Build started: Project: ValueTupleLanguage, Configuration: Debug Any CPU ------\r\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n\r\n**Additional Notes**:\r\n* This project compiles fine in Visual Studio 2017 15.2.\r\n"},{"Id":"6628138848","Type":"IssuesEvent","CreatedAt":"2017-09-23T14:10:44","Actor":"4creators","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22304","RelatedDescription":"Opened issue \"When merge window for v15.5 will close?\" (#22304) at dotnet/roslyn","RelatedBody":"Couple of weeks ago decision has been taken to implement [Intel hardware intrinsics](). This feature spans several repos and during design review [@jaredpar indicated](https://github.com/dotnet/apireviews/blob/master/2017/08-15-Intel%20Intrinsics/README.md#c-language-feature-requiring-parameters-to-be-literals) that there is a possibility to provide compiler support for enforcing passing compile time constants to method invocations.\r\n\r\nMany members of the community are interested in getting this feature released as soon as possible including me. Therefore I have started some preliminary work on implementation of C# const parameters language feature which currently consists of:\r\n\r\n- [Language proposal](https://github.com/dotnet/csharplang/pull/886)\r\n- [Prototype compiler implementation](https://github.com/dotnetrt/roslyn/tree/features/constparameters)\r\n\r\nI understand that full implementation comprises many parts of the compiler and active participation of Roslyn team member in feature development and that there is a requirement for LDM approval of feature design as a prerequisite to starting actual feature implementation.\r\n\r\nMy question is if there is any chance to get feature shipped in v15.5 of Visual Studio taking into account all above limitations? \r\n\r\n"},{"Id":"6627979114","Type":"PullRequestEvent","CreatedAt":"2017-09-23T11:53:56","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22296","RelatedDescription":"Merged pull request \"ported tests from https://github.com/dotnet/roslyn/pull/21263\" (#22296) at dotnet/roslyn","RelatedBody":"main issue the PR is trying to fix (#18405) is addressed by this (https://github.com/dotnet/roslyn/pull/21857). \r\n\r\nthis mainly port over tests added by this pr (#21263) with some changes.\r\n\r\nin some cases such as params array, argument node get removed while converted to IOperation since compiler generated array replaces the argument.\r\n\r\nfor those, I just made test to dump including statement. for now, the test doesn't show interesting info, but once @jinujoseph finishes the work to show syntax kind/isImplicit/parent in the test, it will show info such as what got injected (param array) and argument got removed.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6629147506","Type":"IssuesEvent","CreatedAt":"2017-09-24T05:15:48","Actor":"bryanar","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4599","RelatedDescription":"Closed issue \"Opening/Building ILCompiler.sln in Visual Studio 2017 CE\" (#4599) at dotnet/corert","RelatedBody":"**Goal**:\r\nI am trying to build ILCompiler.sln in Visual Studio 2017 Community Edition, or at least get intellisense support up and running. \r\n\r\n**Problem**: \r\n\r\nA ton of:\r\n> \"CS0518 C# Predefined type 'System.Object' is not defined or imported\"\r\n\r\nI'm probably missing something trivial, can anyone help?"},{"Id":"6629055907","Type":"PullRequestEvent","CreatedAt":"2017-09-24T03:33:06","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4598","RelatedDescription":"Merged pull request \"Enable x86 build\" (#4598) at dotnet/corert","RelatedBody":"Contributes to #4589."},{"Id":"6628858867","Type":"IssuesEvent","CreatedAt":"2017-09-24T00:00:03","Actor":"bryanar","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/4599","RelatedDescription":"Opened issue \"Opening ILCompiler.sln in Visual Studio 2017\" (#4599) at dotnet/corert","RelatedBody":"**Goal**:\r\nI am trying to build ILCompiler.sln in Visual Studio 2017 Community Edition, or at least get intellisense support up and running. \r\n\r\n**Problem**: \r\n\r\nA ton of:\r\n> \"CS0518 C# Predefined type 'System.Object' is not defined or imported\"\r\n\r\nI'm probably missing something trivial, can anyone help?"},{"Id":"6628137505","Type":"PullRequestEvent","CreatedAt":"2017-09-23T14:09:37","Actor":"am11","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/4598","RelatedDescription":null,"RelatedBody":"Contributes to #4589."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"911357565769936896","CreatedAt":"2017-09-22T22:32:30+00:00","UserScreenname":"dotnet","Text":".NET Core September 2017 Update — macOS High Sierra Support https://t.co/k9gJ5jFIN8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":39,"FavoriteCount":22,"RawContent":null},{"Id":"911015945291919360","CreatedAt":"2017-09-21T23:55:01+00:00","UserScreenname":"dotnet","Text":"Last one! Happening now on .NET Fundamentals Track @ #dotNETConf: Learn how to use #FSharp to write front-end &amp; bac… https://t.co/OH8cMAcq4I","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":25,"FavoriteCount":14,"RawContent":null},{"Id":"911005750410960896","CreatedAt":"2017-09-21T23:14:31+00:00","UserScreenname":"dotnet","Text":"PSA: .NET Framework September Update - known issues published https://t.co/1yk2xwnrvP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":11,"RawContent":null},{"Id":"911000845860458498","CreatedAt":"2017-09-21T22:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Get started w/ #FSharp, .NET Core &amp; #VSCode. Watch… https://t.co/VRkwBvSNPU","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":29,"FavoriteCount":13,"RawContent":null},{"Id":"910988157197344768","CreatedAt":"2017-09-21T22:04:36+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 Accessibility and WPF Improvements https://t.co/eZLFQxhlLj","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":63,"FavoriteCount":52,"RawContent":null},{"Id":"910985746386911237","CreatedAt":"2017-09-21T21:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Introducing Razor Pages - Join the session here:… https://t.co/NTQg6urmhQ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":17,"FavoriteCount":6,"RawContent":null},{"Id":"910970647702065152","CreatedAt":"2017-09-21T20:55:02+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: The #CSharp async await workout - a hands-on coding dem… https://t.co/JDvyBkgvww","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":48,"FavoriteCount":18,"RawContent":null},{"Id":"910955546496335873","CreatedAt":"2017-09-21T19:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: Solid Design Patterns for Mere Mortals - see some… https://t.co/iFgxAVURUP","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":48,"FavoriteCount":11,"RawContent":null},{"Id":"910940451754188801","CreatedAt":"2017-09-21T18:55:02+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: #CSharp Part 2 - What's New. Learn the structure and co… https://t.co/dSPE4e9EUE","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":38,"FavoriteCount":18,"RawContent":null},{"Id":"910925349013348352","CreatedAt":"2017-09-21T17:55:02+00:00","UserScreenname":"dotnet","Text":"Happening now on the .NET Fundamentals Track @ #dotNETConf: C# Part 1 - Introduction to C# - Join us:… https://t.co/af45Jelz1W","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":44,"FavoriteCount":23,"RawContent":null}]}},"RunOn":"2017-09-24T05:30:17.9491235Z","RunDurationInMilliseconds":6952}