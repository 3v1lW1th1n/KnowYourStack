{"Data":{"GitHub":{"Issues":[{"Id":"593360930","IsPullRequest":true,"CreatedAt":"2020-04-03T12:52:55","Actor":"Ryuugamine","Number":"3038","RawContent":null,"Title":"Fixing DataGridView's scrollbars shouldn't include their control type in their accessible names","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2965\r\n\r\n\r\n## Proposed changes\r\n\r\n- Added Accessible objects with a correct accessible name for ScrollBar classes\r\n- Added unit tests\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- With the fix available customer will be able to get correct information about the control using accessibility client apps.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n![image](https://user-images.githubusercontent.com/29531443/78363142-f18f6300-75c3-11ea-830c-60b8c8eaa132.png)\r\n\r\n### Before\r\n\r\n- \"Vertical scroll bar\" scroll bar\r\n\r\n### After\r\n\r\n- \"Vertical\" scroll bar\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit tests\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n- Inspect and Narrator\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- DotNet version: 5.0.0-preview.4.20180.8\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3038)","Url":"https://github.com/dotnet/winforms/pull/3038","RelatedDescription":"Open PR \"Fixing DataGridView's scrollbars shouldn't include their control type in their accessible names\" (#3038)"},{"Id":"593337152","IsPullRequest":true,"CreatedAt":"2020-04-03T12:09:39","Actor":"M-Lipin","Number":"3037","RawContent":null,"Title":"WIP: Fixing Narrator caps navigation to take into account control tab index","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2164 \r\n\r\n\r\n## Proposed changes\r\n\r\n- [x] Adding UIA navigation to the Form control;\r\n- [ ] Adding UIA support for Control;\r\n- [x] Adding UIA previous and next navigation to base Control.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Narrator caps navigation will take into account control tab index.\r\n- There will be no mismatch between common tab navigation accompanied with Narrator announcement and Narrator caps navigation.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Middle risk as requires switching to UIA for all controls. Need to rebase on 5.0.\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/67392238-da762f00-f5a8-11e9-8795-de00368c0cfe.png)\r\n\r\n\r\n### After\r\n\r\n* To be added (work in progress).\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n* To be tested.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n* To be added.\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n* To be added.\r\n\r\n<!-- use `dotnet --info` -->\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\nInitial PR: https://github.com/dotnet/winforms/pull/2167\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3037)","Url":"https://github.com/dotnet/winforms/pull/3037","RelatedDescription":"Open PR \"WIP: Fixing Narrator caps navigation to take into account control tab index\" (#3037)"},{"Id":"593294208","IsPullRequest":false,"CreatedAt":"2020-04-03T10:50:12","Actor":"kirsan31","Number":"3036","RawContent":null,"Title":"Overall thoughts on situation with WinFroms (3.1)","State":"open","Body":"Hi all. I want to present a brief report of migration WinForm project from .net to core. I thought for a long time to write this post or not, and still decided to write, because we spent a time and effort on the migration process. If it's out of place here - I apologize :(\r\nMaybe for someone it will be useful...\r\n\r\nExchange trading app - mix of automation and user mode.\r\nSolution: 3 c# projects and one native c++ project. About 36000 Lines of Executable code.\r\n\r\n**Migration process.**\r\n\r\n- No official automation. Other tools like ([try-convert](https://github.com/dotnet/try-convert) and [CsprojToVs2017](https://github.com/hvanbakel/CsprojToVs2017)) are more interfere than help for real projects.\r\n- Bad documented. Again, all available articles about conversion are about simple (not real) projects. Lack of documentation about things that change/gone in core. For example: `legacyCorruptedStateExceptionsPolicy` support removed from app.config. Replaced by `COMPlus_legacyCorruptedStateExceptionsPolicy` environment variable, that must be set **before** app start, and furthermore behave [differently](https://github.com/dotnet/runtime/issues/13805). [Debug.Listeners](https://github.com/dotnet/runtime/issues/26781#issuecomment-605615442) and so on...\r\n- No designer support in VS, it makes us use multi-targeting which further complicates the migration process.\r\n\r\n**Current (3.1) state of WinForms.**\r\n\r\nThe fact that, in **one day of simple overview after conversion**, we found 4 critical bugs (https://github.com/dotnet/winforms/issues/3022, https://github.com/dotnet/winforms/issues/3032, https://github.com/dotnet/winforms/issues/3033, https://github.com/dotnet/winforms/issues/3034) in **released** version of .net core!  Yes, I think all of them critical, for 15 years using .net, we never saw anything like this. Tells us about 2 things:\r\n\r\n1. WinForms core is not usable, at least at prod :( \r\n2. Nobody seriously uses it. I can not explain in a different way a non-working dataGridView :( This is very  frequently used control in .net, and we have not seen reports that it broken to this point... May be it's due to long and complicated migration process and/or Lack of designer in VS? \r\n\r\nAt the moment, our transition process is stopped until better times :(","Url":"https://github.com/dotnet/winforms/issues/3036","RelatedDescription":"Open issue \"Overall thoughts on situation with WinFroms (3.1)\" (#3036)"},{"Id":"592796235","IsPullRequest":false,"CreatedAt":"2020-04-03T06:38:47","Actor":"kirsan31","Number":"3034","RawContent":null,"Title":"NullReferenceException in monthCalendar after setting MinDate","State":"closed","Body":"* .NET Core Version: 3.1.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: **No**\r\n\r\n**Problem description:**\r\nSet `MinDate` (`monthCalendar1.MinDate = DateTime.Today;`) , then select some date in calendar - \r\nNullReferenceException occur:\r\n<details><summary>NullReferenceException </summary>\r\n\r\n```cs\r\n   at System.Windows.Forms.MonthCalendar.MonthCalendarAccessibleObject.GetCalendarCell(Int32 calendarIndex, AccessibleObject parentAccessibleObject, Int32 columnIndex)\r\n   at System.Windows.Forms.MonthCalendar.MonthCalendarAccessibleObject.GetCalendarChildAccessibleObject(Int32 calendarIndex, CalendarChildType calendarChildType, AccessibleObject parentAccessibleObject, Int32 index)\r\n   at System.Windows.Forms.MonthCalendar.MonthCalendarAccessibleObject.GetCalendarChildAccessibleObject(DateTime selectionStart, DateTime selectionEnd)\r\n   at System.Windows.Forms.MonthCalendar.WmDateChanged(Message& m)\r\n   at System.Windows.Forms.MonthCalendar.WmReflectCommand(Message& m)\r\n   at System.Windows.Forms.MonthCalendar.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.UnsafeNativeMethods.SendMessage(HandleRef hWnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at System.Windows.Forms.Control.SendMessage(Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.Control.ReflectMessage(IntPtr hWnd, Message& m)\r\n   at System.Windows.Forms.Control.WmNotify(Message& m)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.ScrollableControl.WndProc(Message& m)\r\n   at System.Windows.Forms.ContainerControl.WndProc(Message& m)\r\n   at System.Windows.Forms.Form.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.UnsafeNativeMethods.CallWindowProc(IntPtr wndProc, IntPtr hWnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at System.Windows.Forms.NativeWindow.DefWndProc(Message& m)\r\n   at System.Windows.Forms.Control.WmMouseDown(Message& m, MouseButtons button, Int32 clicks)\r\n   at System.Windows.Forms.Control.WndProc(Message& m)\r\n   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)\r\n   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentID, Int32 reason, Int32 pvLoopData)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)\r\n   at System.Windows.Forms.Application.Run(Form mainForm)\r\n   at WinFormsCoreTest1.Program.Main() in d:\\save\\projects\\core tests\\WinFormsCoreTest3\\Program.cs:line 24\r\n```\r\n\r\n</details>\r\n\r\n![mc](https://user-images.githubusercontent.com/17767561/78277443-33b19980-751d-11ea-9c8b-2941f19da488.gif)\r\n\r\n\r\n**Expected behavior:**\r\nNo exception.\r\n\r\nWindows 7 x64.\r\n\r\n**Minimal repro:**\r\n[WinFormsCoreTest4.zip](https://github.com/dotnet/winforms/files/4422459/WinFormsCoreTest4.zip)\r\n\r\n<details><summary>P.s.</summary>\r\n\r\nWe had grate plans about migration our apps to core. A lot of work were done in research, converting old project to new sdk format and then adopting to core... And after brief view on the result (not even testing!!!) I have found **4** problems that make core variant of WinForms unusable :( At least, until version 5.0 I think: ((((\r\n\r\n</details>","Url":"https://github.com/dotnet/winforms/issues/3034","RelatedDescription":"Closed issue \"NullReferenceException in monthCalendar after setting MinDate\" (#3034)"},{"Id":"593096486","IsPullRequest":true,"CreatedAt":"2020-04-03T05:48:06","Actor":"weltkante","Number":"3035","RawContent":null,"Title":"Make NativeWindow.CreateHandle reentrant","State":"open","Body":"Fixes #2979\r\n\r\n## Proposed changes\r\n\r\n- Make `NativeWindow.CreateWindow` reentrant\r\n\r\n## Customer Impact\r\n\r\n- Creating a control may execute user code, if such user code creates additional controls this causes reentrancy which under some conditions can lead to an exception because NativeWindow.CreateWindow isn't prepared for this case.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Fixes a data structure corruption, probably not going to get worse\r\n\r\n## Test methodology\r\n\r\n- Manual testing of the scenario in #2979\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3035)","Url":"https://github.com/dotnet/winforms/pull/3035","RelatedDescription":"Open PR \"Make NativeWindow.CreateHandle reentrant\" (#3035)"},{"Id":"592684302","IsPullRequest":false,"CreatedAt":"2020-04-02T14:39:20","Actor":"kirsan31","Number":"3033","RawContent":null,"Title":"dataGridView doesn't respect font settings","State":"open","Body":"* .NET Core Version: 3.1.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: **No**\r\n\r\n**Problem description:**\r\ndataGridView doesn't respect font settings in Styles (`DefaultCellStyle, ColumnHeadersDefaultCellStyle...`):\r\n![Snipaste_2020-04-02_17-00-10](https://user-images.githubusercontent.com/17767561/78259184-03f69780-7505-11ea-9da1-53ea81d8b5d0.png)\r\n\r\n**Expected behavior:**\r\ndataGridView must respect font settings.\r\n\r\nWindows 7 x64.\r\n\r\n**Minimal repro:**\r\n[WinFormsCoreTest3.zip](https://github.com/dotnet/winforms/files/4421686/WinFormsCoreTest3.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3033","RelatedDescription":"Open issue \"dataGridView doesn't respect font settings\" (#3033)"},{"Id":"592577926","IsPullRequest":true,"CreatedAt":"2020-04-02T12:27:18","Actor":"dotnet-maestro[bot]","Number":"3031","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200401.2\r\n- **Date Produced**: 4/1/2020 4:57 PM\r\n- **Commit**: bce0a98620c1c5a110b2bba9912f3d5929069c6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20201.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20201.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20201.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20201.2\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20201.2\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3031)","Url":"https://github.com/dotnet/winforms/pull/3031","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3031)"},{"Id":"592587017","IsPullRequest":false,"CreatedAt":"2020-04-02T12:18:01","Actor":"kirsan31","Number":"3032","RawContent":null,"Title":"RichTextBox Rtf property wrong converting nonbreaking space","State":"open","Body":"* .NET Core Version: 3.1.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: **No**\r\n\r\n**Problem description:**\r\nAfter assigning to `richTextBox.Rtf` some rtf code with nonbreaking space (160 char code), RichTextBox converts it to `\\'c2\\~` insted of `\\~`.\r\n![Snipaste_2020-04-02_15-01-27](https://user-images.githubusercontent.com/17767561/78247868-4bc0f300-74f4-11ea-9805-b74f9484ebcc.png)\r\n\r\nDue to the fact that, number formatting like `:N` using nonbreaking space for thousand separators (in appropriate cultures) this lead to huge problems :((((\r\n\r\n**Expected behavior:**\r\nNonbreaking space must be properly converted to `\\~`.\r\n\r\nWindows 7 x64.\r\n\r\n**Minimal repro:**\r\n[WinFormsCoreTest2.zip](https://github.com/dotnet/winforms/files/4420952/WinFormsCoreTest2.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3032","RelatedDescription":"Open issue \"RichTextBox Rtf property wrong converting nonbreaking space\" (#3032)"},{"Id":"592554362","IsPullRequest":true,"CreatedAt":"2020-04-02T11:20:15","Actor":"Ryuugamine","Number":"3030","RawContent":null,"Title":"WIP: Fixing `MonthCalendar. Narrator read only first month in container`","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3019\r\n\r\n## Proposed changes\r\n\r\n- Added GetCalendarCount method to MonthCalendar accessible object\r\n- Added unit test for this issue\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\nWork in progress, TODO: add customer impact.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Low\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\nWork in progress, TODO: add before.\r\n\r\n### After\r\n\r\nWork in progress, TODO: add after.\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n-  Added unit test\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\nWork in progress, TODO: add accessibility testing.\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- DotNet version: 5.0.0-preview.4.20180.8\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3030)","Url":"https://github.com/dotnet/winforms/pull/3030","RelatedDescription":"Open PR \"WIP: Fixing `MonthCalendar. Narrator read only first month in container`\" (#3030)"},{"Id":"592389561","IsPullRequest":false,"CreatedAt":"2020-04-02T06:27:39","Actor":"RussKie","Number":"3029","RawContent":null,"Title":"MDI forms lost sub control box","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo \r\n\r\n**Problem description:**\r\n\r\n* .NET 5 current master and Preview2\r\n![image](https://user-images.githubusercontent.com/4403806/78217022-dd396080-7506-11ea-8cfe-d3b17af582c9.png)\r\n\r\n* .NET Core 3.1\r\n![image](https://user-images.githubusercontent.com/4403806/78217036-e4f90500-7506-11ea-8d4b-0f60d20c8b1f.png)\r\n\r\n**Expected behavior:**\r\n\r\n.NET 5 variant must look like .NET Core 3.1 variant.\r\n\r\n**Minimal repro:**\r\n\r\nRun a repro app provided in #2979 ","Url":"https://github.com/dotnet/winforms/issues/3029","RelatedDescription":"Open issue \"MDI forms lost sub control box\" (#3029)"},{"Id":"591049615","IsPullRequest":true,"CreatedAt":"2020-04-02T05:32:54","Actor":"dotnet-maestro[bot]","Number":"3023","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 4d0c844d-0758-4fc5-c1ad-08d6354da8a8\r\n- **Build**: 20200330.5\r\n- **Date Produced**: 3/30/2020 5:56 PM\r\n- **Commit**: 09bb9d929120b402348c9a0e9c8c951e824059aa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20180.5\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3023)\r\n","Url":"https://github.com/dotnet/winforms/pull/3023","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3023)"},{"Id":"592335810","IsPullRequest":false,"CreatedAt":"2020-04-02T03:40:26","Actor":"199621616","Number":"3028","RawContent":null,"Title":"Always pops up the error(run application failure and advise user to install the .NET Core, in fact, .NET Core 3.1 was installed) whether it's win7 or win10","State":"open","Body":"![image](https://user-images.githubusercontent.com/25498672/78208226-713f0400-74d6-11ea-91c1-971bdd937c8f.png)\r\n\r\n从.NetFramework 4.6.1迁移到.Net Core 3.1后，经常有用户反馈出现此问题。而事实上.NetCore3.1已经安装并能正常使用。如何解决此问题？\r\n\r\nAfter migrating from. Netframework 4.6.1 to. Net core 3.1, users often report this problem. In fact. NETCORE 3.1 is installed and working properly. How to solve this problem?","Url":"https://github.com/dotnet/winforms/issues/3028","RelatedDescription":"Open issue \"Always pops up the error(run application failure and advise user to install the .NET Core, in fact, .NET Core 3.1 was installed) whether it's win7 or win10\" (#3028)"},{"Id":"591827952","IsPullRequest":false,"CreatedAt":"2020-04-01T11:03:15","Actor":"Thea-Zhao","Number":"3027","RawContent":null,"Title":"[Inspect]There are no list items displaying under the list tree node in Inspect when expanding the Cursor/Color properties comboBox in PropertyGrid","State":"open","Body":"**.NET Core Version:**\r\n.NET Core SDK 3.1.300-preview-015048 + VS2019 with latest core designer\r\n\r\n**Have you experienced this same bug with .NET Framework?:**\r\nYes\r\n\r\n**Problem description:**\r\nWhen Inspect focus on the dropdown list value, cannot show the list items.\r\n\r\n**More Info:**\r\n\r\n1. This issue can reproduce in the .NET Framework project from .Net Framework 4.7 to latest 4.8.\r\n2. This issue can reproduce in the Core 3.1 and Core 5.0 project.\r\n3. This issue can reproduce in the Anchor, BackColor, Dock, ForeColor properties.\r\n\r\n**Expected behavior:**\r\nThe list node should be expanded and show all list items.\r\n![Expected](https://user-images.githubusercontent.com/53589182/78127836-7012c600-7447-11ea-86b5-51ca94590f5e.png)\r\n\r\n**Actual behavior:**\r\nThe list node cannot be expand in Inspect, there is no any list items shown.\r\n![Actual](https://user-images.githubusercontent.com/53589182/78127991-ba944280-7447-11ea-97c0-85d22cbf9f7e.png)\r\n\r\n\r\n**Minimal repro:**\r\n1. Run attached app.\r\n2. Open the inspect tool.\r\n3. Click the Open button next to the Cursor/Color property on the form\r\n4.  Select one item in the dropdown list.\r\n5. Observer the tree structure in Inspect.\r\n[ComboBoxListIssue.zip](https://github.com/dotnet/winforms/files/4414524/ComboBoxListIssue.zip)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3027","RelatedDescription":"Open issue \"[Inspect]There are no list items displaying under the list tree node in Inspect when expanding the Cursor/Color properties comboBox in PropertyGrid\" (#3027)"},{"Id":"591795818","IsPullRequest":false,"CreatedAt":"2020-04-01T10:11:21","Actor":"asklar","Number":"3026","RawContent":null,"Title":"DataObject.GetData(FileContents) returns null","State":"open","Body":"* .NET Core Version: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.201\r\n Commit:    b1768b4ae7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19041\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.201\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.3\r\n  Commit:  4a9f85e9f8\r\n\r\n.NET Core SDKs installed:\r\n  3.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nIDataObject.GetFormats returns FileContents, but IDataObject.GetData(\"FileContents\") returns null\r\n\r\n**Expected behavior:**\r\nReturns the file contents\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/3026","RelatedDescription":"Open issue \"DataObject.GetData(FileContents) returns null\" (#3026)"},{"Id":"591714535","IsPullRequest":false,"CreatedAt":"2020-04-01T08:12:18","Actor":"asklar","Number":"3025","RawContent":null,"Title":"Fatal error. Internal CLR error. (0x80131506) when DataObject.GetData(EnhancedMetaFile)","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.201\r\n Commit:    b1768b4ae7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19041\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.201\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.3\r\n  Commit:  4a9f85e9f8\r\n\r\n.NET Core SDKs installed:\r\n  3.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nI have a console app that prints out the clipboard contents using System.Windows.Forms.IDataObject.\r\nWhen I do IDataObject.GetData(\"EnhancedMetafile\") (verified that the format is available), the program crashes with this error:\r\n```\r\nFatal error. Internal CLR error. (0x80131506)\r\n   at System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(IntPtr)\r\n   at System.Windows.Forms.DataObject+OleConverter.GetDataFromOleIStream(System.String)\r\n   at System.Windows.Forms.DataObject+OleConverter.GetDataFromBoundOleDataObject(System.String, Boolean ByRef)\r\n   at System.Windows.Forms.DataObject+OleConverter.GetData(System.String, Boolean)\r\n   at System.Windows.Forms.DataObject.GetData(System.String, Boolean)\r\n   at System.Windows.Forms.DataObject.GetData(System.String)\r\n```\r\n\r\n\r\n**Expected behavior:**\r\nNo crash, should be able to access the data in the EMF\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/3025","RelatedDescription":"Open issue \"Fatal error. Internal CLR error. (0x80131506) when DataObject.GetData(EnhancedMetaFile)\" (#3025)"},{"Id":"591283983","IsPullRequest":true,"CreatedAt":"2020-03-31T17:59:52","Actor":"dotnet-maestro[bot]","Number":"3024","RawContent":null,"Title":"[release/5.0-preview3] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6f5b2698-38c7-4d48-1ad3-08d7d0ed185e)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 6f5b2698-38c7-4d48-1ad3-08d7d0ed185e\r\n- **Build**: 20200330.5\r\n- **Date Produced**: 3/30/2020 5:56 PM\r\n- **Commit**: 09bb9d929120b402348c9a0e9c8c951e824059aa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20180.5\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20180.5\r\n\r\n[marker]: <> (End:6f5b2698-38c7-4d48-1ad3-08d7d0ed185e)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3024)","Url":"https://github.com/dotnet/winforms/pull/3024","RelatedDescription":"Closed or merged PR \"[release/5.0-preview3] Update dependencies from dotnet/arcade\" (#3024)"},{"Id":"590979390","IsPullRequest":false,"CreatedAt":"2020-03-31T10:20:51","Actor":"kirsan31","Number":"3022","RawContent":null,"Title":"Form icon can not be (properly) hide.","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: 3.0, 3.1.2\r\n\r\n* Have you experienced this same bug with .NET Framework?: **No**\r\n\r\n**Problem description:**\r\n\r\nIn WinForms core app run `this.ShowIcon = false;` Icon is hiding, but default app. icon appear:\r\n![core](https://user-images.githubusercontent.com/17767561/78015507-2a280600-7352-11ea-82e4-7bfa7be2599d.png)\r\n\r\n\r\n**Expected behavior:**\r\nIcon is hiding:\r\n![net](https://user-images.githubusercontent.com/17767561/78015572-3f049980-7352-11ea-9a4c-dbb83cf8fb66.png)\r\n\r\nWindows 7 x64.\r\n\r\n**Minimal repro:**\r\n[WinFormsCoreTest1.zip](https://github.com/dotnet/winforms/files/4419602/WinFormsCoreTest1.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3022","RelatedDescription":"Open issue \"Form icon can not be (properly) hide.\" (#3022)"},{"Id":"590751859","IsPullRequest":false,"CreatedAt":"2020-03-31T03:07:35","Actor":"Amy-Li02","Number":"3021","RawContent":null,"Title":"When coping data from DataGridView, there should no longer apply blank unselected lines onto the clipboard","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version:  .NET SDK 5.0.100-preview.3.20180.10\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nWhen coping data from DataGridView, blank unselected lines were applied onto the clipboard. \r\n\r\n**Actual behavior:**\r\nUnselected cells in these rows or columns are copied as blank placeholders to the Clipboard.\r\n\r\n**Expected behavior:**\r\nThere should no longer applies blank unselected lines onto the clipboard. \r\n\r\n**Minimal repro:**\r\n1. Create a .NET Core winforms application.\r\n2. Add a DataGridView with some columns to the form designer and run the app.\r\n3. Add some data to the rows of DataGridView.\r\n4. Select and copy the first and third rows, then paste them to a notepad.\r\n\r\n**App:** [SampleApp.zip](https://github.com/dotnet/winforms/files/4406524/SampleApp.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3021","RelatedDescription":"Open issue \"When coping data from DataGridView, there should no longer apply blank unselected lines onto the clipboard\" (#3021)"},{"Id":"589531351","IsPullRequest":true,"CreatedAt":"2020-03-31T00:46:41","Actor":"gpetrou","Number":"3017","RawContent":null,"Title":"Add ICM enum in Interop RichEdit","State":"closed","Body":"## Proposed changes\r\n\r\n- Add ICM enum in Interop RichEdit.\r\n- Remove ICM constants and replace their usages with the above enum values.\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3017)","Url":"https://github.com/dotnet/winforms/pull/3017","RelatedDescription":"Closed or merged PR \"Add ICM enum in Interop RichEdit\" (#3017)"},{"Id":"590579729","IsPullRequest":false,"CreatedAt":"2020-03-30T20:38:33","Actor":"MikeRoz","Number":"3020","RawContent":null,"Title":"Updating Form.MinimumSize causes form activation/focus","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n3.0+\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\n**Problem description:**\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\nChanging `Form.MinimumSize` property if handle is created activates Form (focus). \r\nIt could be reproduced with PerMonitor/WM_DpiChanged or with standard dpi if you update `MinimumSize` property via code.\r\n\r\nCurrent implementation of `Form.MinimumSize` setter uses `SetWindowPos` without `SWP.NOACTIVATE` flag which causes shifting application focus to target form:\r\n`User32.SetWindowPos(new HandleRef(this, Handle), User32.HWND_TOP, Location.X, Location.Y, Size.Width,Size.Height, User32.SWP.NOZORDER);`\r\n\r\n**Expected behavior:**\r\nChanging Form.MinimumSize shouldn't affect active window.\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/3020","RelatedDescription":"Open issue \"Updating Form.MinimumSize causes form activation/focus\" (#3020)"},{"Id":"590443870","IsPullRequest":false,"CreatedAt":"2020-03-30T16:56:39","Actor":"Ryuugamine","Number":"3019","RawContent":null,"Title":"`MonthCalendar`. Narrator read only first month in container","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: 5.0.0-preview.3.20173.2\r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n* Have you experienced this same bug with .NET Framework?:  yes\r\n<!-- Yes / No -->\r\n\r\n**Problem description:**\r\nWhen MontCalendar contains more than one month the Narrator sees only the first month in the container.\r\n\r\n**Expected behavior:**\r\nThe narrator should see all months in a MonthCalendar\r\n\r\n**Minimal repro:**\r\n1. Create a form where MonthCalendar size allows display few months.\r\n2. Enable Windows Narrator\r\n3. Navigate to created form\r\n4. Navigate to second month within control","Url":"https://github.com/dotnet/winforms/issues/3019","RelatedDescription":"Open issue \"`MonthCalendar`. Narrator read only first month in container\" (#3019)"},{"Id":"588812835","IsPullRequest":true,"CreatedAt":"2020-03-30T04:38:35","Actor":"RussKie","Number":"3015","RawContent":null,"Title":"fix incorrect access modifiers","State":"closed","Body":"Resolves #2997\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n## Proposed changes\r\n\r\n- fix incorrect access modifiers\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3015)","Url":"https://github.com/dotnet/winforms/pull/3015","RelatedDescription":"Closed or merged PR \"fix incorrect access modifiers\" (#3015)"},{"Id":"587452214","IsPullRequest":true,"CreatedAt":"2020-03-30T04:29:27","Actor":"JeremyKuhne","Number":"3010","RawContent":null,"Title":"Add a low level window class","State":"closed","Body":"Adds WindowClass for testing windows messages.\r\n\r\nAdds InternalsVisibleTo so we can expose helpers for Interop testing from internal test utility.\r\n\r\nRef to SWF in internal test utility should be removed. This is one step. Tests using AxHost should refactor AxHost helper methods into SWF.Primitives (don't move the whole AxHost down).\r\n\r\nFix a bug in Cursor interop.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3010)","Url":"https://github.com/dotnet/winforms/pull/3010","RelatedDescription":"Closed or merged PR \"Add a low level window class\" (#3010)"},{"Id":"589644070","IsPullRequest":false,"CreatedAt":"2020-03-28T19:35:10","Actor":"SergeyMatsiupa","Number":"3018","RawContent":null,"Title":"build.sh failed with \"Execution Failed: no install script\" message ","State":"open","Body":"* .NET Core Version: 3.0.103 (Commit:  b7ef045669)\r\n* Platform/OS: ubuntu linux 18.04-x64\r\n* Winforms branch version (date): Thu Mar 26 07:37:13 2020 -0700\r\n\r\n**Problem description:**\r\nI cloned the current version of Winforms and tried to build it local, and I got error message (below with the command):\r\n```\r\nmaestro@mmeniac:~/.vscode/extensions/WinForms/winforms$ ./build.sh\r\n/home/maestro/.vscode/extensions/WinForms/winforms/eng/common/native/install-dotnet-api-docs_netcoreapp3.0.sh --baseuri https://netcorenativeassets.blob.core.windows.net/resource-packages/external --installpath /home/maestro/.netcoreeng/native//bin --version 0.0.0.1\r\nExecution Failed: no install script\r\n```\r\nBefore I updated file global.json with my actual dotnet versions in such way:\r\n\r\n_{\r\n  \"tools\": {\r\n    \"dotnet\": \"3.0.103\",\r\n    \"runtimes\": {\r\n      \"dotnet\": [\r\n        \"$(MicrosoftNETCoreAppPackageVersion)\"\r\n      ]\r\n    }\r\n  },\r\n  \"sdk\": {\r\n    \"version\": \"3.0.103\"\r\n  },\r\n  \"msbuild-sdks\": {\r\n    \"Microsoft.DotNet.Arcade.Sdk\": \"5.0.0-beta.20171.1\",\r\n    \"Microsoft.DotNet.Helix.Sdk\": \"5.0.0-beta.20171.1\",\r\n    \"FIX-85B6-MERGE-9C38-CONFLICT\": \"1.0.0\",\r\n    \"Microsoft.NET.Sdk.IL\": \"5.0.0-alpha1.19513.3\"\r\n  },\r\n  \"native-tools\": {\r\n    \"dotnet-api-docs_netcoreapp3.0\": \"0.0.0.1\"\r\n  }\r\n}_\r\n\r\nProbably I should make some other changes in global.json?\r\n(but there is no explanations in corresponding documentation file about its parameters)\r\n","Url":"https://github.com/dotnet/winforms/issues/3018","RelatedDescription":"Open issue \"build.sh failed with \"Execution Failed: no install script\" message \" (#3018)"},{"Id":"588917305","IsPullRequest":false,"CreatedAt":"2020-03-27T06:27:57","Actor":"Marie-Shi","Number":"3016","RawContent":null,"Title":"Memory leak when opening Inspect tool to focus items","State":"open","Body":"* .NET Core Version: \r\n.Net Core 5.0.100-preview.3.20176.4 from master branch + VS2019 with latest core designer\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nYes\r\n\r\n**More Info:**\r\n\r\n1. This issue can repro from .Net 4.5 to .Net 4.8.\r\n2. This issue can also repro if we just open inspect tool, but not focusing items with the Inspect tool.\r\n3. This issue cannot repro without Inspect tool opening.\r\n\r\n**Steps to reproduce:**\r\n1.\tDownload Process Explorer from here: https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer.\r\n2.\tExtract “WindowsForms_Core_Test.zip” and open it in VS.\r\n[WindowsForms_Core_Test.zip](https://github.com/dotnet/winforms/files/4391849/WindowsForms_Core_Test.zip)\r\n3.\tBuild and run this project, then run “procexp64.exe” to launch Process Explorer.\r\n4.\tOpen inspect tool and start to focus items, observe private Bytes changes in Process Explorer.\r\n\r\n**Actual behavior:**\r\nThe private Bytes keep increasing, the change is a bit large. Please see the following Gif:\r\n![Open_Inspect_Core_process](https://user-images.githubusercontent.com/45864017/77727782-0739e100-7036-11ea-984d-dd607f7bde9e.gif)\r\n\r\n**Expected behavior:**\r\nThe private Bytes have no much changes, the change is so little. The behavior should be like without Inspect tool opening. Please see the following Gif:\r\n![Not_open_Inspect_Core_process](https://user-images.githubusercontent.com/45864017/77727810-115bdf80-7036-11ea-8f8b-697f3242f526.gif)\r\n","Url":"https://github.com/dotnet/winforms/issues/3016","RelatedDescription":"Open issue \"Memory leak when opening Inspect tool to focus items\" (#3016)"},{"Id":"587839174","IsPullRequest":true,"CreatedAt":"2020-03-26T14:37:14","Actor":"mmitche","Number":"3011","RawContent":null,"Title":"Feed cleanup","State":"closed","Body":"Move away from blob feeds\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3011)","Url":"https://github.com/dotnet/winforms/pull/3011","RelatedDescription":"Closed or merged PR \"Feed cleanup\" (#3011)"},{"Id":"588241363","IsPullRequest":true,"CreatedAt":"2020-03-26T08:28:42","Actor":"M-Lipin","Number":"3014","RawContent":null,"Title":"Fixing issue 2704: Cannot find the RichEdit control of the \"Text\" property in UIA structure of a PropertyGrid control","State":"open","Body":"Adding PropertyGrid DropDown control holder and its child edit control to the UIA hierarchy of the PropertyGrid.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2704 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Adding accessible object for PropertyGrid's DropDownControlHolder;\r\n- Implementing accessible navigation to find DropDownControlHolder pane and its child edit control in UIA hierarchy in PropertyGrid.\r\n- Adding resource to announce DropDownControlHolder pane accessible name to inform users that the currently edited RichEdit control or another edit control is hosted in PropertyGrid's DropDown control holder.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers will be able to distinguish the dropped down control from another form controls if using Narrator or another screen reader.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/73003863-605b7d80-3e17-11ea-92af-f66d92fec2a1.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/73004026-ae708100-3e17-11ea-845d-448e48585d7d.png)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing;\r\n- Unit tests (to be implemented);\r\n- UI tests.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha1-015763\r\n Commit:    0d0c902b77\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-015763\\\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\nPrevious PR: was closed due to expiration: https://github.com/dotnet/winforms/pull/2758\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3014)","Url":"https://github.com/dotnet/winforms/pull/3014","RelatedDescription":"Open PR \"Fixing issue 2704: Cannot find the RichEdit control of the \"Text\" property in UIA structure of a PropertyGrid control\" (#3014)"},{"Id":"588169678","IsPullRequest":true,"CreatedAt":"2020-03-26T05:38:13","Actor":"RussKie","Number":"3013","RawContent":null,"Title":"Untangle test utils refs","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nPre-req or addendum to #3010\r\n\r\n\r\n## Proposed changes\r\n\r\n- Break up and remove `InternalUtilitiesForTests` project\r\n- Move all low-level general test functionality into `System.Windows.Forms.Primitives.TestUtilities` project. `System.Windows.Forms.Primitives.Tests` is made dependent on this project.\r\n- Move all other test-related functionality into `System.Windows.Forms.TestUtilities` project, dependent on `System.Windows.Forms.Primitives.TestUtilities` project. Update all main test projects to depend on this project.\r\n\r\nNB: some tests in `System.Windows.Forms.Primitives.Tests` have been commented out until necessary low-level abstractions (such as introduced in #3010) are added.\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3013)","Url":"https://github.com/dotnet/winforms/pull/3013","RelatedDescription":"Open PR \"Untangle test utils refs\" (#3013)"},{"Id":"587840819","IsPullRequest":false,"CreatedAt":"2020-03-25T16:51:17","Actor":"JuditRose","Number":"3012","RawContent":null,"Title":"Run API Compat tool for .NET Framework 4.8 and .NET Core 3.1","State":"open","Body":"We need to keep API compatibility documented to be aware of the breaking changes that we implemented over the VS Winforms versions. \r\n\r\nThe aim is to run API compat against .NET Framework 4.8 and the last released version in .NET Core for all PRs and on master and be notified if the backward compatibility changes.\r\n\r\nThe current implementation is running against .NET core 3.0 and .NET Framework 4.7.2: https://github.com/dotnet/winforms/pull/2092\r\nThere is a WIP PR for .NET Core 3.1: https://github.com/dotnet/winforms/pull/2112 \r\n - choice: iterate through the assemblies one by one and run api compat on each of them, or do it in batch. \r\nIf API compat is being run for each assemblies that is good when the assemblies are mostly built separate, so we can see the API compat outcome. Although if someone removes an assembly that could go unnoticed. (This is how it's implemented in the WIP PR, although for us maybe would make more sense to do it in batch.)\r\n\r\nImplementation steps:\r\n1. Create a witness project to download Winforms previous versions from nuget as a contract that we validate against (for both Framework and Core)\r\n - this will also download the dependency assemblies that we also want to compare because if a dependency changes that could also affect Winforms' backward compatibility\r\n2. we possibly don't want to compare all the assemblies, we could define a static list of exclusions like here: https://github.com/dotnet/winforms/blob/master/src/System.Windows.Forms/src/System.Windows.Forms.csproj\r\n3. run api compat tool to compare the contracts (Framework and Core)\r\n - There will be already differences in the contracts, so this will fail on the first run, based on that list we can create the baseline file\r\n - if the baseline file is defined, the api compat should be successful, and when it gets broken in the future it will break the build and log the error\r\n\r\nDocumentation on API Compat usage:\r\nhttps://github.com/dotnet/wpf/blob/master/Documentation/api-compat.md\r\nhttps://github.com/dotnet/arcade/blob/8fed91a4435cae29ab0f0e4f18a291cd38b0f23e/src/Microsoft.DotNet.ApiCompat/README.md\r\n\r\nAPI Compat shim: https://github.com/dotnet/runtime/blob/master/src/libraries/shims/ApiCompat.proj\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3012","RelatedDescription":"Open issue \"Run API Compat tool for .NET Framework 4.8 and .NET Core 3.1\" (#3012)"},{"Id":"586467115","IsPullRequest":false,"CreatedAt":"2020-03-24T01:52:49","Actor":"Jmales","Number":"3009","RawContent":null,"Title":"How to change ActiveWindow","State":"closed","Body":"I have a .NET Framework app where I need to change the active window that is focused. This does the trick:\r\n\r\n```\r\n    public override void SetFocus (IntPtr window) {\r\n        Win32.SetForegroundWindow(window);\r\n    }\r\n```\r\nAnd with this I'm able to select either a Chrome browser or one of my app windows as the active window.\r\n\r\nNow I'm in the process of moving it to .NET Core to work in Mac as well and I can't find any way of changing the selected window.\r\n\r\nIs this possible to do in .NET Core in any way?","Url":"https://github.com/dotnet/winforms/issues/3009","RelatedDescription":"Closed issue \"How to change ActiveWindow\" (#3009)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-04-04T05:30:54.0931139Z","RunDurationInMilliseconds":934}