{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7335639293","Type":"PullRequestEvent","CreatedAt":"2018-03-06T05:19:13","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16771","RelatedDescription":"Opened pull request \"Fix Automatic Loading of Tracepoint Provider\" (#16771) at dotnet/coreclr","RelatedBody":"Fixes #16763.\r\n\r\nIt looks like #15611 broke automatic tracepoint provider loading which results in no events being sent to LTTng.  This change simplifies the CMake logic and simply depends on the ifdef __linux__ pre-processor directive in tracepointprovider.cpp.\r\n\r\n"},{"Id":"7335358776","Type":"PullRequestEvent","CreatedAt":"2018-03-06T03:31:07","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16761","RelatedDescription":"Merged pull request \"Address PR feedback, scrub error messages for missing arguments(throw new)\" (#16761) at dotnet/coreclr","RelatedBody":"Address [PR](https://github.com/dotnet/coreclr/pull/16753#pullrequestreview-101272848) feedback:\r\n\r\n> I think this should be this.ToString(), or just this\r\n\r\ncc: @jkotas "},{"Id":"7335319441","Type":"PullRequestEvent","CreatedAt":"2018-03-06T03:17:27","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16736","RelatedDescription":"Merged pull request \" Implement LoadHigh, LoadLow, and SetScalarVector128 SSE2 HW intrinsics\" (#16736) at dotnet/coreclr","RelatedBody":"Addresses code review feedback from #15777"},{"Id":"7335317920","Type":"PullRequestEvent","CreatedAt":"2018-03-06T03:16:53","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16750","RelatedDescription":"Merged pull request \"Simplify SSE/SSE4.1 intrinsics\" (#16750) at dotnet/coreclr","RelatedBody":"We have updated `numArgsOfHWIntrinsics`, so the intrinsics that have variable number of parameters can be table-driven."},{"Id":"7335109191","Type":"PullRequestEvent","CreatedAt":"2018-03-06T02:08:13","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16770","RelatedDescription":"Opened pull request \"Update BuildTools, CoreClr to preview2-02606-01, preview2-26306-01, respectively (master)\" (#16770) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7335078799","Type":"PullRequestEvent","CreatedAt":"2018-03-06T01:58:44","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16760","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr to preview2-02606-01, preview2-26305-12, respectively (master)\" (#16760) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7334961822","Type":"PullRequestEvent","CreatedAt":"2018-03-06T01:21:10","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16643","RelatedDescription":"Merged pull request \"Remove libuuid usage\" (#16643) at dotnet/coreclr","RelatedBody":"This change removes dependency on the libuuid library that is used for GUID creation only.\r\nIt implements it using a random generator instead.\r\n\r\nIt also modifies return type of PAL_Random to VOID since it was always\r\nreturning TRUE and none of the existing callers were checking it.\r\n\r\nClose #16642"},{"Id":"7334961811","Type":"IssuesEvent","CreatedAt":"2018-03-06T01:21:10","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16642","RelatedDescription":"Closed issue \"Remove dependency on the libuuid\" (#16642) at dotnet/coreclr","RelatedBody":"coreclr runtime now depends on a 3rd party libuuid library that is used just to create a random based GUID in the CoCreateGuid PAL function. We would like to eliminate as much runtime dependencies as we can, so let's replace it by our own implementation."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7335412121","Type":"PullRequestEvent","CreatedAt":"2018-03-06T03:50:44","Actor":"danmosemsft","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8703","RelatedDescription":"Closed pull request \"Update CoreSetup, CoreSetup, CoreSetup, Roslyn to preview2-26228-04, preview2-26228-04, preview2-26228-04, beta1-62628-07, respectively (master)\" (#8703) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7334872710","Type":"PullRequestEvent","CreatedAt":"2018-03-06T00:52:42","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8691","RelatedDescription":"Merged pull request \"Implement the `list tool` command.\" (#8691) at dotnet/cli","RelatedBody":"This PR implements the `list tool` command.\r\n\r\nThe command is responsible for displaying a list of install global tools.\r\n\r\nFixes #8548.\r\n\r\nAlso fixes #8682."},{"Id":"7334872704","Type":"IssuesEvent","CreatedAt":"2018-03-06T00:52:42","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8682","RelatedDescription":"Closed issue \"Failure to install/uninstall tool when package id is not all lower case\" (#8682) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. `dotnet install tool -g <SOME_TOOL_ID_IN_CAPS>`\r\n\r\nor\r\n\r\n1. `dotnet uninstall tool -g <SOME_TOOL_ID_IN_CAPS>`\r\n\r\n## Expected  behavior\r\nThe tool installs/uninstalls successfully, treating the tool package identifier as case-insensitive (like NuGet would when restoring a package).\r\n\r\n## Actual behavior\r\nTool installation fails:\r\n\r\n```\r\n$ dotnet install tool -g GLOBAL.TOOL.CONSOLE.DEMO\r\nPackage 'GLOBAL.TOOL.CONSOLE.DEMO' is missing tool settings file DotnetToolSettings.xml.\r\nTool 'GLOBAL.TOOL.CONSOLE.DEMO' failed to install.\r\n```\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Command Line Tools (2.1.300-preview2-008260)\r\n\r\nProduct Information:\r\n Version:            2.1.300-preview2-008260\r\n Commit SHA-1 hash:  4f2e060ef3\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk/2.1.300-preview2-008260/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-26131-06\r\n  Build    : b13a0d5c331f374afd35ded57b9a4b4ab128864c\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7334872699","Type":"IssuesEvent","CreatedAt":"2018-03-06T00:52:42","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8548","RelatedDescription":"Closed issue \"list, in dotnet install tool -g \" (#8548) at dotnet/cli","RelatedBody":"List should show all global tool installed on the machine along with the version and command name"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7334343447","Type":"IssuesEvent","CreatedAt":"2018-03-05T22:26:53","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/665","RelatedDescription":"Opened issue \"Build Failure: Official master builds failing due to duplicate refName IDs\" (#665) at dotnet/standard","RelatedBody":"These need to be either unique, or removed (so that VSTS can generate them):\r\n\r\nhttps://github.com/dotnet/standard/blob/9675a2eea8d55756780c8e6f4a3215c932a23e63/buildpipeline/dotnet-standard-win.json#L102\r\n\r\nhttps://github.com/dotnet/standard/blob/9675a2eea8d55756780c8e6f4a3215c932a23e63/buildpipeline/dotnet-standard-win.json#L123\r\n\r\n/cc @weshaggard "},{"Id":"7330600055","Type":"IssuesEvent","CreatedAt":"2018-03-05T10:28:54","Actor":"ezra2310","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/664","RelatedDescription":"Opened issue \".Net How to get Table alias name from GetSchemaTable() Executing query \" (#664) at dotnet/standard","RelatedBody":"Hi All,\r\nI have one task to get the table alias name from the sql Query. Im tried with GetSchemaTable().\r\nstring query = \"select A.id as ParentId,B.id as ChildId from Parent A,ChildB\";\r\nsqlCnn.Open();\r\nsqlCmd = new SqlCommand(query, sqlCnn);\r\nsqlReader = sqlCmd.ExecuteReader(CommandBehavior.KeyInfo);\r\nDataTable schemaTable = sqlReader.GetSchemaTable();\r\n\r\nIt's not returning the table alias but it return the Column alias.\r\nCan you please help me how to get the table alias name from executing query .\r\nPlease give me a solution it.\r\n\r\nThanks,\r\nEzra"},{"Id":"7325652191","Type":"IssuesEvent","CreatedAt":"2018-03-03T11:48:55","Actor":"isaac2004","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/544","RelatedDescription":"Closed issue \"DotNet Standard 2.0 Project downgraded to 1.6 and cannot update\" (#544) at dotnet/standard","RelatedBody":"I have a CL that was Standard 2.0 and after installing the 2.1 SDK it got downgraded somehow to 1.6 (.csproj still says 2.0). The application fails on build because of namespaces not available. When I try to upgrade through VS, I get this\r\n\r\n![capture](https://user-images.githubusercontent.com/8878502/31841261-baa2e134-b5b6-11e7-856d-2f8eeac5d88b.PNG)\r\n \r\nI am blocked to upgrade the package. If I try to upgrade via CLI, I get\r\n\r\n````\r\nPS C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper> dotnet add package NETStandard.Library --version 2.0.0\r\n  Writing C:\\Users\\Isaac\\AppData\\Local\\Temp\\tmp5E87.tmp\r\ninfo : Adding PackageReference for package 'NETStandard.Library' into project 'C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj'.\r\nlog  : Restoring packages for C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj...\r\ninfo : Package 'NETStandard.Library' is compatible with all the specified frameworks in project 'C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj'.\r\nerror: Error while performing Update for package 'NETStandard.Library'. Cannot edit items in imported files -\r\nerror:   Item 'PackageReference' for 'NETStandard.Library' in Imported file 'C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.DefaultItems.props'.\r\n````\r\nI imagine this has to do with me upgrading to 2.1, but I am unable to rollback in anyway. Do I need to uninstall 2.1 to have 2.0.0 work?\r\n\r\nHere is version and info output\r\n\r\n````\r\nPS C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper> dotnet --version\r\n2.1.0-preview1-007228\r\nPS C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper> dotnet --info\r\n.NET Command Line Tools (2.1.0-preview1-007228)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007228\r\n Commit SHA-1 hash:  28a1f7e9d6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-25719-04\r\n  Build    : b5c917c0b24171ae27c7cfcfd2617b1088d41c11\r\n````"},{"Id":"7325056263","Type":"IssuesEvent","CreatedAt":"2018-03-03T03:40:33","Actor":"mperdeck","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/663","RelatedDescription":"Opened issue \"When running ASP.NET Core web site targeting net47 in IIS, dotnet.exe does not appear in process list\" (#663) at dotnet/standard","RelatedBody":"I just converted a large legacy site to Net Core. Because of some old code, I have to target net47 instead of netcoreapp2.0 / netstandard2.0.\r\n\r\nProblem is that when I run the site in IIS, it starts up correctly, but then I cannot attach the debugger. The process list (Debug | Attach to process) does not show the dotnet.exe process at all.\r\n\r\nTo investigate this:\r\n* I created a new ASP.NET Core web application in Visual Studio 2017 targeting netcoreapp2.0, \r\n* published it (dotnet publish) and \r\n* pointed my IIS web site to the published directory. \r\n\r\nAfter hitting the site, I was able to attach to the dotnet.exe process ok.\r\n\r\n````\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  \r\n  <!-- dotnet.exe shows up in process list in Visual Studio 2017 -->\r\n  \r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n````\r\n\r\nI then retargeted it to net47 because that is what my site uses. \r\n* Because Microsoft.AspNetCore.All does not support net47, I replaced it with enough individual packages to make the site compile. \r\n* Published it (dotnet publish -f net47). \r\n* Pointed the IIS site to the new net47 published directory. \r\n\r\nI could load the site ok and navigate around. However, dotnet.exe no longer appeared in the process list.\r\n\r\n````\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  \r\n  <!-- dotnet.exe does NOT show up in process list in Visual Studio 2017 -->\r\n  \r\n  <PropertyGroup>\r\n    <TargetFramework>net47</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Hosting\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.0.*\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n````\r\n\r\n\r\nIs there any way I can debug a site running in IIS that targets the Net Framework?\r\n\r\n"},{"Id":"7314708657","Type":"IssuesEvent","CreatedAt":"2018-03-01T08:29:09","Actor":"abdullahsalem","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/662","RelatedDescription":"Opened issue \"Standardizing XLIFF\" (#662) at dotnet/standard","RelatedBody":"I share @valdisiljuconoks this interest: https://github.com/Microsoft/XLIFF2-Object-Model/issues/28, and I think it's a good direction to support this standardized file format for a localization process.\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7335628825","Type":"PullRequestEvent","CreatedAt":"2018-03-06T05:15:08","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27756","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#27756) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7335609524","Type":"IssuesEvent","CreatedAt":"2018-03-06T05:07:52","Actor":"luvhsail","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27761","RelatedDescription":"Opened issue \"Windows Auth Issue from UWP Applications\" (#27761) at dotnet/corefx","RelatedBody":"Hi @rmkerr \r\nAs discussed I have created a sample project, you may download it from the repository path below.\r\nThe code as three projects, a WebAPI with windows Authentication and two consumers that have more or less the same code. The console application is able to make the call while the UWP gets a 500 error. \r\n\r\nAnother thing that I noted is if I remove the Authorize attribute from the API it works fine for both.\r\n\r\nhttps://github.com/luvhsail/Samples.git\r\n"},{"Id":"7335508523","Type":"PullRequestEvent","CreatedAt":"2018-03-06T04:28:10","Actor":"Petermarcu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27614","RelatedDescription":"Merged pull request \"Adding support for ncurses 6.1 TERM format on System.Console (#27109)\" (#27614) at dotnet/corefx","RelatedBody":"Backporting #27109 to release/2.0.0 branch.\r\n\r\nFYI: @stephentoub @danmosemsft @joshfree @Petermarcu "},{"Id":"7335480847","Type":"PullRequestEvent","CreatedAt":"2018-03-06T04:17:14","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27760","RelatedDescription":"Opened pull request \"Fix System.Threading.Tasks.Extensions packaging\" (#27760) at dotnet/corefx","RelatedBody":"cc: @weshaggard, @ericstj \r\nDoes this look right? Is there a better way to test it than checking in and waiting for an official build?\r\nFixes https://github.com/dotnet/corefx/issues/27714"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7335623790","Type":"PullRequestEvent","CreatedAt":"2018-03-06T05:13:11","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24849","RelatedDescription":"Merged pull request \"Fixed cases where 1:1 mapping between Roslyn and editor text buffer/s…\" (#24849) at dotnet/roslyn","RelatedBody":"…napshot are broken.\r\n\r\nFirst case was where the code reused same Roslyn text snapshot to 2 different editor snapshots.\r\nthat can cause getting editor snapshot from roslyn snapshot to fail.\r\n\r\nSecond case was where same editor snapshot can give 2 different roslyn text snapshot breaking\r\ninvariant.\r\n\r\ndidn't do much cleanup except fixing those above two.\r\n\r\n### Customer scenario\r\n\r\nCustomer doing rename and in rare case, some identifier doesn't get renamed correctly.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/7364\r\n\r\n### Workarounds, if any\r\n\r\nNo\r\n\r\n### Risk\r\n\r\nI don't see any risk\r\n\r\n### Performance impact\r\n\r\nI believe this code that broke 1:1 mapping was added long time ago hoping improve typing perf number by reusing same buffer when possible. but we are seeing issue due to it. and not sure whether this optimization still matter now since the optimization was to reduce allocations and current allocation behavior is completely different than when this optimization was added. also we now reuse ITextImage rather than cloning. can't say for sure until we see RPS result, but I bet is we won't see much difference since the optimization was targeting very specific case and we noticed that case only because the perf test we used (not RPS test) at the moment happen to have a case where this gets hit. \r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo\r\n\r\n### Root cause analysis\r\n\r\ninternally we have a bi-directional map between roslyn text buffer and editor text buffer. this map must be 1:1 map each other. otherwise, we can't reliably move between roslyn's world and editor's world. we use this map to move from editor's snapshot to roslyn's snapshot, and move back from roslyn to editor.\r\n\r\nif this 1:1 map got broken, we might move to wrong snapshot from one to the other or failed to move at all which cause issue like (https://github.com/dotnet/roslyn/issues/7364)\r\n\r\n### How was the bug found?\r\n\r\nWatson, feedback\r\n"},{"Id":"7335167921","Type":"IssuesEvent","CreatedAt":"2018-03-06T02:26:43","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25251","RelatedDescription":"Opened issue \"Decompilation should simplify \"type\" usage\" (#25251) at dotnet/roslyn","RelatedBody":"Decompilation isn't apply the simplifier on the result of the decompilation, resulting in more complex code:\r\n\r\nCurrent:\r\n\r\n``` C#\r\n\t\tpublic static object Single(IEnumerable collection)\r\n\t\t{\r\n\t\t\treturn Assert.Single(Enumerable.Cast<object>(collection));\r\n\t\t}\r\n```\r\n\r\nExpected:\r\n\r\n``` C#\r\n\t\tpublic static object Single(IEnumerable collection)\r\n\t\t{\r\n\t\t\treturn Single(Enumerable.Cast<object>(collection));\r\n\t\t}\r\n```"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7334962359","Type":"PullRequestEvent","CreatedAt":"2018-03-06T01:21:20","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5502","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5502) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7334866017","Type":"PullRequestEvent","CreatedAt":"2018-03-06T00:50:29","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5492","RelatedDescription":"Merged pull request \"Automatic WebAssembly test execution\" (#5492) at dotnet/corert","RelatedBody":"Automatically execute WebAssembly tests on Windows by using emrun to launch a headless instance of Firefox (which doesn't interfere with any other Firefox usage). This should cut down on manual testing and help us move toward CI integration. Fixes #4509."},{"Id":"7334866008","Type":"IssuesEvent","CreatedAt":"2018-03-06T00:50:29","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4509","RelatedDescription":"Closed issue \"Automate executing WebAssembly tests\" (#4509) at dotnet/corert","RelatedBody":"There's currently a WebAssembly test in tests/src/Simple/HelloWasm, but it only tests generating WebAssembly without attempting to execute it. We should have a way to run WebAssembly tests (including telling pass and fail apart). It probably shouldn't depend on running browsers since that would be annoying during development and hard to diagnose in CI. Perhaps it's possible to run via node.js or some other command line tooling?"},{"Id":"7334596975","Type":"PullRequestEvent","CreatedAt":"2018-03-05T23:28:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5501","RelatedDescription":"Merged pull request \"Port changes in non-shared CoreLib partition\" (#5501) at dotnet/corert","RelatedBody":"https://github.com/dotnet/coreclr/pull/16753"},{"Id":"7333427184","Type":"PullRequestEvent","CreatedAt":"2018-03-05T19:22:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5501","RelatedDescription":"Opened pull request \"Port changes in non-shared CoreLib partition\" (#5501) at dotnet/corert","RelatedBody":"https://github.com/dotnet/coreclr/pull/16753"},{"Id":"7333381457","Type":"PullRequestEvent","CreatedAt":"2018-03-05T19:13:48","Actor":"ahsonkhan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5500","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5500) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7333065110","Type":"PullRequestEvent","CreatedAt":"2018-03-05T18:11:59","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5500","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5500) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7335380106","Type":"PullRequestEvent","CreatedAt":"2018-03-06T03:38:42","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2025","RelatedDescription":"Opened pull request \"Update stage 0 .NET Core SDK version\" (#2025) at dotnet/sdk","RelatedBody":"I'm having issues with CI failing but tests passing locally in #2008, so in this PR I'm trying to isolate some of the changes and test them separately."},{"Id":"7334847556","Type":"IssuesEvent","CreatedAt":"2018-03-06T00:44:24","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1408","RelatedDescription":"Closed issue \"Cannot target uap10.0 apps with new TargetFrameworks syntax\" (#1408) at dotnet/sdk","RelatedBody":"Forgive me if this is already formally bugged somewhere, but while I've seen lots of references to uap10 targeting issues, I didn't come across an issues that specifically addressed `<targetframeworks>` support.\r\n\r\nWhile in general the documentation for `TargetFrameworks` and the new .csproj format seems to be, shall we say, on the skimpier side; I'm unable to devise whether or not - in theory - targeting UAP10.0 should work in a multi-targeted csproj.\r\n\r\nI know UWP/UAP support is a bit of a thorn in the side of the dotnet sdk and corefx teams, but it's very unclear as to how exactly it fits in to the picture.\r\n\r\nA .NET library created with `<TargetFrameworks>netstandard1.3</TargetFrameworks>` can be consumed by a \"legacy\" UWP/UAP10 project, but there does not seem to be a way of creating a multi-targeted .NET library that includes a dependency on UWP.\r\n\r\nEither UWP is a framework target, in which case `<TargetFrameworks>uap10.0</TargetFrameworks>` should work, or UWP is a .NET Standard target w/ access to Windows-specific and platform-specific libraries (which is what is most-heavily implied in the .NET Standard documentation). However, functionally that does not seem to be the case since a .NET Standard library (`<TargetFrameworks>netstandard1.3</TargetFrameworks>`) cannot install `microsoft.netcore.universalwindowsplatform` as a dependency.\r\n\r\nWe're left in a limbo state where it seems projects targeting UAP/UWP must use the legacy csproj format, because they're neither full-fledged framework targets nor do they have .NET Standard-compliant libraries."},{"Id":"7334418038","Type":"IssuesEvent","CreatedAt":"2018-03-05T22:43:11","Actor":"davkean","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2024","RelatedDescription":"Opened issue \"File.cs.cshtml cannot become EmbeddedResource\" (#2024) at dotnet/sdk","RelatedBody":"_From @abpiskunov on March 2, 2018 6:17_\n\n1. Create a new core Web app\r\n2. in File Explorer find some cshtml page (Error.cshtml and rename it to Error.cs.cshtml.\r\n3. In VS change type of Error.cs.cshtml to EmbeddedResource (notice it will be removed from Content in csproj)\r\n4. Build\r\n5. Open assembly manifest and see - no embedded resources\r\n6. When rename file to Error.cshtml , build, assembly manifest does contain EmbeddedResource.\r\n\r\nSee this issue opened by customer originally : https://github.com/aspnet/Tooling/issues/1066#issuecomment-369131680 \r\n\r\n\r\n\n\n_Copied from original issue: dotnet/project-system#3336_"},{"Id":"7334227212","Type":"PullRequestEvent","CreatedAt":"2018-03-05T22:01:55","Actor":"KevinRansom","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2023","RelatedDescription":"Opened pull request \"Add netsdk overrides\" (#2023) at dotnet/sdk","RelatedBody":"Due to the way F# is integrated into the Net Sdk it is not possible for an F# target file to override SDK targets.\r\n\r\nWe need to be able to do that to enable the Net Sdkmechanism to add AssemblyInfo properties to F# apps and libraries.\r\n\r\nThis PR renames the existing Microsoft.Net.Sdk.FSharp.targets to Microsoft.FSharp.NetSdk.targets, so that we can use the name Microsoft.Net.Sdk.FSharp.targets consistently with C# and VB.\r\nMicrosoft.Net.Sdk.FSharp.targets selects a target file deployed with F# compiler.\r\n\r\n@nguerrera, @livarcocc , @brettfo"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"969672659385700354","CreatedAt":"2018-03-02T20:35:52+00:00","UserScreenname":"dotnet","Text":"It's not too late... Happening now: Miguel de Icaza's Developer Tools Reddit AMA. Ask him anything ab out what we'v… https://t.co/Ct6QA3l0FL","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":20,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-03-06T05:30:21.7211271Z","RunDurationInMilliseconds":10019}