{"Data":{"Blog":{"FeedItems":[{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7445563132","Type":"PullRequestEvent","CreatedAt":"2018-03-28T05:26:42","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17287","RelatedDescription":"Opened pull request \"Root methods used by debugger for IL linker\" (#17287) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/28539"},{"Id":"7445516674","Type":"PullRequestEvent","CreatedAt":"2018-03-28T05:08:04","Actor":"fiigii","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17286","RelatedDescription":"Opened pull request \"Remove tests of unimplemented ISAs\" (#17286) at dotnet/coreclr","RelatedBody":"Fix the failure in https://github.com/dotnet/coreclr/pull/17248\r\n\r\n@ahsonkhan @jkotas @CarolEidt @tannergooding "},{"Id":"7445445859","Type":"PullRequestEvent","CreatedAt":"2018-03-28T04:38:13","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17285","RelatedDescription":"Opened pull request \"Dict cache default comparer for object types\" (#17285) at dotnet/coreclr","RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/28511 \"Dictionary_ContainsValue_String* regressed 112%\"\r\n\r\nIts adds some repetition to the C# with a switch on `default(TValue) != null`\r\n\r\nChanged `ContainsValue`, `FindEntry` and `TryInsert` but didn't change the two `Remove` methods as that would be a lot more code (though can if Removing is `object` keys perf sensitive?)\r\n\r\nAlso added an explicit implementation of `IEquatable<EventRegistrationToken>` to `EventRegistrationToken` as that was being used as a Dictionary key.\r\n\r\nDabbled with adding explicit implementation of  `IEquatable<KeyValuePair<TKey, TValue>>` and overriding `GetHashCode` for `KeyValuePair<TKey, TValue>` as that was also used as a key in `CommonlyUsedGenericInstantiations` for `Microsoft.Expression.DesignModel`, but that caused a code explosion so didn't think it was worthwhile?\r\n\r\n/cc @AndyAyersMS @danmosemsft @ianhays @jkotas "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7445528172","Type":"PullRequestEvent","CreatedAt":"2018-03-28T05:12:48","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8916","RelatedDescription":"Merged pull request \"MSBuild 15.7.127.34537 for 3xx\" (#8916) at dotnet/cli","RelatedBody":"Internal PR (escrow approved): https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/113318"},{"Id":"7445524080","Type":"IssuesEvent","CreatedAt":"2018-03-28T05:11:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8918","RelatedDescription":"Closed issue \"With .zip installer, message is not localized when install global tool succeed\" (#8918) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Prepare a windows 10 OS with language SC\r\n2. Download zip installer and unzip, add this path to system path\r\n3. run dotnet new console -n test-global-tools. \r\n4. edit project file, add line <PackAsTool>true</PackAsTool> in PropertyGroup session. \r\n5. run dotnet pack \r\n6. setup local nuget feed and copy paste result bin/Debug/test-global-tools.1.0.0.nupkg in to it \r\n7. run dotnet install tool -g test-global-tools \r\n8. observe the instruction printed on the screen \r\n\r\n## Expected  behavior\r\n1. Message should be localized normally\r\n\r\n## Actual behavior\r\n1. Message still shows in English\r\n![image](https://user-images.githubusercontent.com/1578239/38005802-f2e1bc1a-3274-11e8-9812-9e345ecad063.png)\r\n\r\n##Note\r\n1. This issue is not reproduced when using .exe installer.\r\n![image](https://user-images.githubusercontent.com/1578239/38005479-5afaa05c-3273-11e8-890a-a68d2e194dff.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008396\r\n Commit:    400e670faa\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.10240\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\dotnet-sdk-2.1.300-preview2-008396-win-x64\\sdk\\2.1.300-preview2-008396\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26325-03\r\n  Commit:  95f1b0b97f\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-preview2-008396 [C:\\dotnet-sdk-2.1.300-preview2-008396-win-x64\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30457 [C:\\dotnet-sdk-2.1.300-preview2-008396-win-x64\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30457 [C:\\dotnet-sdk-2.1.300-preview2-008396-win-x64\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26325-03 [C:\\dotnet-sdk-2.1.300-preview2-008396-win-x64\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download"},{"Id":"7445150452","Type":"IssuesEvent","CreatedAt":"2018-03-28T02:44:36","Actor":"yuki233","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8918","RelatedDescription":"Opened issue \"With .zip installer, message is not localized when install global tool succeed\" (#8918) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Prepare a windows 10 OS with language SC\r\n2. Download zip installer and unzip, add this path to system path\r\n3. run dotnet new console -n test-global-tools. \r\n4. edit project file, add line <PackAsTool>true</PackAsTool> in PropertyGroup session. \r\n5. run dotnet pack \r\n6. setup local nuget feed and copy paste result bin/Debug/test-global-tools.1.0.0.nupkg in to it \r\n7. run dotnet install tool -g test-global-tools \r\n8. observe the instruction printed on the screen \r\n\r\n## Expected  behavior\r\n1. Message should be localized normally\r\n\r\n## Actual behavior\r\n1. Message still shows in English\r\n![image](https://user-images.githubusercontent.com/1578239/38005802-f2e1bc1a-3274-11e8-9812-9e345ecad063.png)\r\n\r\n##Note\r\n1. This issue is not reproduced when using .exe installer.\r\n![image](https://user-images.githubusercontent.com/1578239/38005479-5afaa05c-3273-11e8-890a-a68d2e194dff.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008396\r\n Commit:    400e670faa\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.10240\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\dotnet-sdk-2.1.300-preview2-008396-win-x64\\sdk\\2.1.300-preview2-008396\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26325-03\r\n  Commit:  95f1b0b97f\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-preview2-008396 [C:\\dotnet-sdk-2.1.300-preview2-008396-win-x64\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30457 [C:\\dotnet-sdk-2.1.300-preview2-008396-win-x64\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30457 [C:\\dotnet-sdk-2.1.300-preview2-008396-win-x64\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26325-03 [C:\\dotnet-sdk-2.1.300-preview2-008396-win-x64\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7438650960","Type":"PullRequestEvent","CreatedAt":"2018-03-27T01:42:29","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/692","RelatedDescription":"Merged pull request \"Simplify apiExcludeList.txt for Xamarin platforms\" (#692) at dotnet/standard","RelatedBody":"Now that excluding namespaces is supported (dotnet/buildtools#1962) we can trim down the list.\r\n\r\n/cc @weshaggard "},{"Id":"7438376889","Type":"PullRequestEvent","CreatedAt":"2018-03-27T00:00:51","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/694","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02627-01 (master)\" (#694) at dotnet/standard","RelatedBody":""},{"Id":"7436105403","Type":"IssuesEvent","CreatedAt":"2018-03-26T15:55:19","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/693","RelatedDescription":"Opened issue \"Trimming logging is misleading and insufficient\" (#693) at dotnet/standard","RelatedBody":"For shared framework applications we list out files being trimmed that will never deploy with the application.  We should see if we can more accurately represent the trimmed set, or at least don't make any claims about the size savings for shared framework apps.\r\n\r\nAlso there is a large cliff between the amount of information by default and the DGML.  We should look at something in between that provides normal status info (eg: files trimmed) that isn't quite as overwhelming as the DGML."},{"Id":"7434965031","Type":"PullRequestEvent","CreatedAt":"2018-03-26T12:53:28","Actor":"akoeplinger","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/692","RelatedDescription":"Opened pull request \"Simplify apiExcludeList.txt for Xamarin platforms\" (#692) at dotnet/standard","RelatedBody":"Now that excluding namespaces is supported (dotnet/buildtools#1962) we can trim down the list.\r\n\r\n/cc @weshaggard "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7445408161","Type":"PullRequestEvent","CreatedAt":"2018-03-28T04:21:48","Actor":"pakrym","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28519","RelatedDescription":"Merged pull request \"Fix calling FlushAsync with cancelled token\" (#28519) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/issues/28492\r\n\r\nWe were marking awaitable as completed but never calling the callback because `AttachToken` threw.\r\n\r\nReorder calls to allow it to throw before completing awaitable."},{"Id":"7445380907","Type":"PullRequestEvent","CreatedAt":"2018-03-28T04:10:07","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28529","RelatedDescription":"Merged pull request \"Fixing naming inconsistency between System.Runtime and System.Memory refs\" (#28529) at dotnet/corefx","RelatedBody":"Related to recent changes - https://github.com/dotnet/corefx/pull/28160\r\n\r\nThe subset of types from System.Memory ref that are in System.Runtime ref should be identical:\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Memory/ref/System.Memory.cs\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Runtime/ref/System.Runtime.cs\r\n\r\ncc @weshaggard, @KrzysztofCwalina, @stephentoub, @terrajobst, @davidfowl "},{"Id":"7445179625","Type":"PullRequestEvent","CreatedAt":"2018-03-28T02:54:47","Actor":"tmat","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28493","RelatedDescription":"Merged pull request \"Fix branch distance calculation\" (#28493) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/26621. We incorrectly calculated branch distance when long branch instruction is used with a short distance."},{"Id":"7445179572","Type":"IssuesEvent","CreatedAt":"2018-03-28T02:54:46","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28227","RelatedDescription":"Closed issue \"Add stress tests for Span<T> APIs\" (#28227) at dotnet/corefx","RelatedBody":"From https://github.com/dotnet/corefxlab/issues/1313\r\n\r\n- Tests with multiple threads to confirm that Span<T> APIs are stateless and thread safe\r\n- Tests with lots of GC allocations to confirm that when GC moves addresses around, the use of Span is still correct"},{"Id":"7445115231","Type":"IssuesEvent","CreatedAt":"2018-03-28T02:31:47","Actor":"eerhardt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28499","RelatedDescription":"Closed issue \"System.Numerics.Vector4 calculates incorrect in some inlining situations.\" (#28499) at dotnet/corefx","RelatedBody":"Sample Code\r\n```csharp\r\nusing System;\r\nusing System.Numerics;\r\nnamespace DotNetNumericTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var rect = new Vector4(10, 20, 100, 30);\r\n            var v = Test(rect, new Vector2(100, 100));\r\n            Console.WriteLine(v);\r\n            Console.ReadLine();\r\n        }\r\n        public static Vector4 Test(Vector4 v, Vector2 off)\r\n        {\r\n            v.X += off.X;\r\n            v.Y += off.Y;\r\n            return v;\r\n        }\r\n    }\r\n```\r\nExcepted output: `<110, 120, 100, 30>`\r\nIncorrect output: `<10, 20, 100, 30>` using release build.\r\n\r\nAfter attatching `MethodImplOptions.NoInlining` to the method Test(), it prints right answer.\r\nIt seems like the operator '+=' affects the result.\r\n\r\nTest on .netcore 2.1.103, windows."},{"Id":"7445098941","Type":"IssuesEvent","CreatedAt":"2018-03-28T02:25:51","Actor":"divega","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/23899","RelatedDescription":"Closed issue \"IDbDataParameter.Precision is broken for SqlClient 4.3.0\" (#23899) at dotnet/corefx","RelatedBody":"The implementations of IDbParameter.Precision and IDBParameter.Scale in System.Data.Common.DbParameter got replaced with dummy implementations by commit  7888677b3c53596085c2fa53860d9a0519eeecfd.\r\n\r\nThis demo application reproduces the problem in .NET Core 2.0 but works just fine in .NET Core 1.1. Expected output: 19; got 0.\r\n[Program.zip](https://github.com/dotnet/corefx/files/1289338/Program.zip)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7445537015","Type":"PullRequestEvent","CreatedAt":"2018-03-28T05:16:16","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25776","RelatedDescription":"Merged pull request \"Quick info merge master vs deps\" (#25776) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7445330563","Type":"PullRequestEvent","CreatedAt":"2018-03-28T03:50:12","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25773","RelatedDescription":"Merged pull request \"Added a regression test for #25024\" (#25773) at dotnet/roslyn","RelatedBody":"Test-only change.\r\n\r\nFixes:https://github.com/dotnet/roslyn/issues/25024"},{"Id":"7445264147","Type":"PullRequestEvent","CreatedAt":"2018-03-28T03:25:22","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25484","RelatedDescription":"Merged pull request \"Use modern Tooltips API\" (#25484) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\nhttps://github.com/dotnet/roslyn/issues/24956\r\nhttps://github.com/dotnet/roslyn/issues/24434\r\nhttps://github.com/dotnet/roslyn/issues/24094\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7445208581","Type":"IssuesEvent","CreatedAt":"2018-03-28T03:04:50","Actor":"rynowak","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25784","RelatedDescription":"Opened issue \"Roslyn ignores IVSSymbolicNavigationNotify and IVSRefactorNotify for CPS projects\" (#25784) at dotnet/roslyn","RelatedBody":"**Version Used**: 15.7-preview1 \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Implement `IVSSymbolicNavigationNotify` and `IVSRefactorNotify` for a CPS-based project (like .NET Core) https://github.com/aspnet/Razor/commit/91b3b222d3a3320175d45c432e0c72f994bad80b\r\n2. Open a project with some generated code: https://github.com/rynowak/RazorIdeTesting\r\n3. Try to go to definition on https://github.com/rynowak/RazorIdeTesting/blob/master/DesignTimeBuild/Program.cs#L19\r\nhttps://github.com/rynowak/roslyn/commit/40a1e6e5c2a737bf21183855904f57e719341c13\r\n**Expected Behavior**:\r\nRoslyn calls the implementation of `IVsSymbolicNavigationNotify` so that I can implement go to definition from C# -> Razor\r\n\r\n\r\n**Actual Behavior**:\r\nIt doesn't 😢 \r\n\r\nWhat's going wrong here is that at this location: https://github.com/rynowak/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/VsRefactorNotifyService.cs#L29\r\n\r\n`hierarchy` is the .NET object for `ConfiguredProjectHostObject` and **not** the COM wrapper. This means that the cast is a normal .NET cast, and not a `QueryInterface`.\r\n\r\nThis means that my service (exported through CPS) https://github.com/aspnet/Razor/commit/91b3b222d3a3320175d45c432e0c72f994bad80b#diff-4f1af834b38be73a1ebbffeffbde7bffR40 is not called.\r\n\r\nI'm honestly not sure what the *right fix* is for this, or whether it should come from Roslyn or the project system. I used the power of HAXXX to create a non-production-quality workaround in my local install and then everything functions as desired.\r\n\r\nhttps://github.com/rynowak/roslyn/commit/40a1e6e5c2a737bf21183855904f57e719341c13"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7445250197","Type":"PullRequestEvent","CreatedAt":"2018-03-28T03:20:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5632","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5632) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7444870012","Type":"PullRequestEvent","CreatedAt":"2018-03-28T01:02:11","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5632","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5632) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7444856444","Type":"PullRequestEvent","CreatedAt":"2018-03-28T00:57:14","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5630","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5630) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7444305316","Type":"PullRequestEvent","CreatedAt":"2018-03-27T22:04:03","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5631","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5631) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7444279663","Type":"PullRequestEvent","CreatedAt":"2018-03-27T21:57:55","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5631","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5631) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7443705332","Type":"PullRequestEvent","CreatedAt":"2018-03-27T19:58:54","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5630","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5630) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7443675348","Type":"PullRequestEvent","CreatedAt":"2018-03-27T19:52:53","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5629","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5629) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7443096906","Type":"PullRequestEvent","CreatedAt":"2018-03-27T18:00:40","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5629","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5629) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7443042665","Type":"PullRequestEvent","CreatedAt":"2018-03-27T17:50:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5628","RelatedDescription":"Merged pull request \"Update CoreFX Test Binaries URL\" (#5628) at dotnet/corert","RelatedBody":"Update the URL to point to our own test binary storage account. \r\n"},{"Id":"7442957683","Type":"PullRequestEvent","CreatedAt":"2018-03-27T17:34:40","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5628","RelatedDescription":"Opened pull request \"Update CoreFX Test Binaries URL\" (#5628) at dotnet/corert","RelatedBody":"Update the URL to point to our own test binary storage account. \r\n"},{"Id":"7442725051","Type":"PullRequestEvent","CreatedAt":"2018-03-27T16:50:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5626","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5626) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7445508732","Type":"IssuesEvent","CreatedAt":"2018-03-28T05:04:48","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2093","RelatedDescription":"Opened issue \"dep.json is not regenerated when .csproj changes\" (#2093) at dotnet/sdk","RelatedBody":"**Repro**\r\n1. Create project\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <PreserveCompilationContext>true</PreserveCompilationContext>\r\n    <DebugType>embedded</DebugType>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n2. `dotnet build`\r\n(Look at `test.deps.json`.. Should contain this)\r\n```js\r\n{\r\n  //...\r\n  \"compilationOptions\": {\r\n    // ...\r\n    \"debugType\": \"embedded\"\r\n  },\r\n```\r\n3. Change project to ` <DebugType>portable</DebugType>` and run `dotnet build`\r\n\r\n**Expected**\r\n.deps.json changes to `\"debugType\": \"portable\"`\r\n\r\n**Actual**\r\n.deps.json file is not regenerated. File still contains `\"debugType\": \"embedded\"` until you manually clean and rebuild.\r\n\r\n[msbuild.binlog.zip](https://github.com/dotnet/sdk/files/1854632/msbuild.binlog.zip)\r\n \r\n**Details**\r\nUsing dotnet 2.1.300-preview1-008174"},{"Id":"7444987355","Type":"IssuesEvent","CreatedAt":"2018-03-28T01:45:18","Actor":"eerhardt","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2092","RelatedDescription":"Opened issue \"Setting PreserveCompilationContext=false trims Microsoft.AspNetCore.App shared runtime in deps files\" (#2092) at dotnet/sdk","RelatedBody":"_From @pranavkm on March 26, 2018 17:18_\n\n## Steps to reproduce\r\n1. Create an webapi \\ mvc \\ emptyweb application using preview1 (or preview2) Sdk\r\n2. Build the project\r\n\r\nThe generated deps file will say that the application references both `Microsoft.NETCore.App` and `Microsoft.AspNetCore.App`:\r\n\r\n```json\r\n\"blah/1.0.0\": {\r\n    \"dependencies\": {\r\n      \"Microsoft.AspNetCore.App\": \"2.1.0-preview1-final\",\r\n      \"Microsoft.NETCore.App\": \"2.1.0-preview1-26216-03\"\r\n    },\r\n    \"runtime\": {\r\n      \"blah.dll\": {}\r\n    },\r\n    \"compile\": {\r\n      \"blah.dll\": {}\r\n    }\r\n},\r\n```\r\n\r\n3. Delete the bin directory. Edit the csproj `<PreserveCompilationContext>false</PreserveCompilationContext>`. Rebuild the project\r\n4. The generated deps file will say that the app no longer references `Microsoft.AspNetCore.App`:\r\n\r\n```json\r\n \"blah/1.0.0\": {\r\n   \"dependencies\": {\r\n     \"Microsoft.NETCore.App\": \"2.1.0-preview1-26216-03\"\r\n   },\r\n   \"runtime\": {\r\n     \"blah.dll\": {}\r\n   }\r\n },\r\n```\r\n\r\n## Environment data\r\n```\r\n.NET Command Line Tools (2.1.300-preview1-008174)\r\n\r\nProduct Information:\r\n Version:            2.1.300-preview1-008174\r\n Commit SHA-1 hash:  b8df89a54f\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Users\\Pranav\\Downloads\\dotnet-sdk-2.1.300-preview1-008174-win-x64\\sdk\\2.1.300-preview1-008174\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26216-03\r\n  Build    : f2c3216183d20416568a4bbf5bb7d153e826f153\r\n```\r\n\r\n## More information:\r\nThe bulk of MVC's controller discovery model is based on finding libraries that directly or transitively depend on any one of Mvc's libraries. In 2.1.0-preview2, the Razor.Sdk only sets `PreserveCompilationContext=true` if the app has any files that require runtime compilation. For projects without views, such as webapi or empty web template, the produced deps file claims that the app does not reference `Microsoft.AspNetCore.App` -> `Microsoft.AspNetCore.Mvc`. Consequently no controllers are discovered.\n\n_Copied from original issue: dotnet/core-setup#3902_"},{"Id":"7444737405","Type":"PullRequestEvent","CreatedAt":"2018-03-28T00:14:19","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2091","RelatedDescription":"Opened pull request \"Move DefineConstants where they'll actually apply\" (#2091) at dotnet/sdk","RelatedBody":"We were setting it before Sdk.props / Directory.Build.props, and repo toolset was overwriting it.\r\n\r\nThis caused #if EXTENSIONS to never be taken and a task loading error to occur when NETBuildExtensionsError was used.\r\n\r\nThis is the minimal fix for 2.1.2xx / 15.7. I hope to refactor things in 2.1.3xx so that our project files are more standard and this mistake is harder to make."},{"Id":"7444554828","Type":"PullRequestEvent","CreatedAt":"2018-03-27T23:13:16","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2083","RelatedDescription":"Merged pull request \"Handle asset file reading errors more robustly\" (#2083) at dotnet/sdk","RelatedBody":"The recent episode where an assembly binding conflict resulted in nonsensical \"Missing target in assets file\" errors revealed several holes in how errors in the assets file are handled. This ensures that we never allow a bogus empty lock file to surface to our build logic and that all messages from NuGet or System.IO are preseved in the build output.\r\n\r\nFix #18 "}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"977245582724022272","CreatedAt":"2018-03-23T18:07:57+00:00","UserScreenname":"dotnet","Text":"Calling all Desktop Developers: how should UI development be improved? https://t.co/lKHACsK0Sv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":104,"FavoriteCount":72,"RawContent":null},{"Id":"976910301634465792","CreatedAt":"2018-03-22T19:55:40+00:00","UserScreenname":"dotnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/OokEA8H4Mo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":229,"FavoriteCount":177,"RawContent":null},{"Id":"976141100074373120","CreatedAt":"2018-03-20T16:59:08+00:00","UserScreenname":"dotnet","Text":"Check out this video from @csharpfritz and @jasonbock talking about @roslyn Analyzers and making your code easier t… https://t.co/Nv8pTxt0zP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2018-03-28T05:30:20.8310871Z","RunDurationInMilliseconds":8520}