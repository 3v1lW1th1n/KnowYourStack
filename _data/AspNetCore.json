{"Data":{"Blog":{"FeedItems":[{"Title":"Use Hybrid Connections to Incrementally Migrate Applications to the Cloud","PublishedOn":"2018-10-04T22:57:53+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"As the software industry shifts to running software in the cloud, organizations are looking to migrate existing applications from on-premises to the cloud. Last week at Microsoft’s Ignite conference,...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/10/04/use-hybrid-connections-to-incrementally-migrate-applications-to-the-cloud/","RawContent":null},{"Title":"Announcing ASP.NET SignalR 2.4.0 Preview 1","PublishedOn":"2018-10-04T17:36:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the first preview of the upcoming 2.4.0 release of ASP.NET SignalR. As we mentioned in our previous blog post on the future of ASP.NET SignalR we are releasing a new minor update...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/10/04/announcing-asp-net-signalr-2-4-0-preview-1/","RawContent":null},{"Title":"Blazor 0.6.0 experimental release now available","PublishedOn":"2018-10-02T16:58:03+00:00","CommentsCount":33,"FacebookCount":0,"Summary":"Blazor 0.6.0 is now available! This release includes new features for authoring templated components and enables using server-side Blazor with the Azure SignalR Service. We&#039;re also excited to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/10/02/blazor-0-6-0-experimental-release-now-available/","RawContent":null},{"Title":"ASP.NET Core in Visual Studio for Mac – Help us build the best experience","PublishedOn":"2018-09-17T20:26:30+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are working to improve the experience for ASP.NET Core developers in Visual Studio for Mac. If you are working on ASP.NET Core apps in Visual Studio for Mac, we would love to hear you feedback....","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/17/asp-net-core-in-visual-studio-for-mac-help-us-build-the-best-experience/","RawContent":null},{"Title":"The future of ASP.NET SignalR","PublishedOn":"2018-09-17T18:03:57+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"In ASP.NET Core 2.1, we brought SignalR into the ASP.NET Core family. Many of our users have asked what this means for the previous version of SignalR: ASP.NET SignalR. As a reminder, ASP.NET SignalR...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/17/the-future-of-asp-net-signalr/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview2 now available","PublishedOn":"2018-09-12T16:00:01+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today we’re very happy to announce that the second preview of the next minor release of ASP.NET Core and .NET Core is now available for you to try out. We’ve been working hard on this release over the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/12/asp-net-core-2-2-0-preview2-now-available/","RawContent":null},{"Title":"How to get started with Azure and .NET","PublishedOn":"2018-09-04T19:05:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Note: This content is now available as an official document Azure is a big cloud with lots of services, and for even the most experienced user it can be intimidating to know which service will best...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/04/how-to-get-started-with-azure-and-net/","RawContent":null},{"Title":"Library Manager Released in 15.8","PublishedOn":"2018-08-31T07:47:55+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Microsoft Library Manager (LibMan) is now available in the general release of Visual Studio 2017 as of v15.8. LibMan first previewed earlier this year, and now, after a much-anticipated wait, LibMan...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/31/library-manager-release-in-15-8/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: Endpoint Routing","PublishedOn":"2018-08-27T21:25:25+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Endpoint Routing in 2.2 What is it? We&#8217;re making a big investment in routing starting in 2.2 to make it interoperate more seamlessly with middleware. For 2.2 this will start with us making a few...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/27/asp-net-core-2-2-0-preview1-endpoint-routing/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: SignalR Java Client","PublishedOn":"2018-08-23T20:41:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was authored by Mikael Mengistu. In ASP.NET Core 2.2 we are introducing a Java Client for SignalR. The first preview of this new client is available now. This client supports connecting to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/23/asp-net-core-2-2-0-preview1-signalr-java-client/","RawContent":null}],"ResultType":"Feed"},"Home-Issues":{"Issues":[{"Id":"369590928","IsPullRequest":false,"CreatedAt":"2018-10-17T03:18:17","Actor":"luiarhs","Number":"3620","RawContent":null,"Title":"Is possible have multiple authentication schemes on 2.1?","State":"closed","Body":"My project was built using ASP.NET Core 1.1. Later, updated to 2.1 and the default scheme overrides all.\r\nI has two authentication schemes Auth0 and a custom authentication logic with cookie-based.\r\nIs it possible to continue using this?","Url":"https://github.com/aspnet/AspNetCore/issues/3620","RelatedDescription":"Closed issue \"Is possible have multiple authentication schemes on 2.1?\" (#3620)"},{"Id":"370837892","IsPullRequest":false,"CreatedAt":"2018-10-16T23:20:43","Actor":"aspnet-hello","Number":"3640","RawContent":null,"Title":"Test failure: AppOfflineDroppedWhileSiteStarting_SiteShutsDown_InProcess","State":"open","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](https://dnceng.visualstudio.com/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_build/results?buildId=31316) with the following error:\r\n\r\n```\r\nAssert.Equal() Failure\r\nExpected: 0\r\nActual:   -1073740767\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on release/2.2.\r\n\r\nCC Eilon","Url":"https://github.com/aspnet/AspNetCore/issues/3640","RelatedDescription":"Open issue \"Test failure: AppOfflineDroppedWhileSiteStarting_SiteShutsDown_InProcess\" (#3640)"},{"Id":"370819788","IsPullRequest":true,"CreatedAt":"2018-10-16T22:07:40","Actor":"natemcmaster","Number":"3639","RawContent":null,"Title":"Merge source code from aspnet/Universe into this repository","State":"open","Body":"Part of #3598 \r\n\r\nWe're moving source code from https://github.com/aspnet/Universe into this repository and will archive aspnet/Universe.","Url":"https://github.com/aspnet/AspNetCore/pull/3639","RelatedDescription":"Open PR \"Merge source code from aspnet/Universe into this repository\" (#3639)"},{"Id":"370806103","IsPullRequest":false,"CreatedAt":"2018-10-16T21:24:31","Actor":"TheJayMann","Number":"3638","RawContent":null,"Title":"Dependency Injection for Web Forms support.","State":"open","Body":"I'm not sure where I should start this discussion, but this appears to be the best place I can find.  I have recently created support for being able to use the Microsoft.Extensions.DependencyInjection ([aspnet/DependencyInjection](https://github.com/aspnet/dependencyinjection)) in a ASP.NET Web Forms project using the new HttpRuntime.WebObjectActivator property.  I have it hosted at [TheJayMann/WebFormsDi](https://github.com/TheJaymann/WebFormsDi), and I was hoping that the aspnet organization could take the project itself, either by taking the repository itself, or merging it into the [aspnet/DependencyInjection](https://github.com/aspnet/dependencyinjection) repository.","Url":"https://github.com/aspnet/AspNetCore/issues/3638","RelatedDescription":"Open issue \"Dependency Injection for Web Forms support.\" (#3638)"},{"Id":"370708518","IsPullRequest":false,"CreatedAt":"2018-10-16T19:41:45","Actor":"vankampenp","Number":"3636","RawContent":null,"Title":"Url.Action takes attribute routing in to account, but not clear how","State":"closed","Body":"   1. Description of the problem:\r\n Url.Action(\"index\", \"base\", new { loginid = clientKeep.Login, pwd= pwd}, \"https\");\r\n\r\nReturns\r\n`\r\nhttps://Contoso.com/default.aspx?login=<login>&pwd=<pwd>\r\n`\r\nwhere the action in the BaseController is:\r\n\r\n ```\r\n        [ HttpGet]\r\n        [AllowAnonymous]\r\n        [Route(\"\"), Route(\"default.aspx\"),Route(\"index\")]\r\n        public async Task<IActionResult> Index([FromQuery] string loginid, [FromQuery] string sessionid)\r\n        {\r\n        }\r\n```\r\nwhere I would like to have\r\n\r\n```\r\nhttps://Contoso.com?login=<login>&pwd=<pwd>\r\n```\r\nthe default.aspx is for backward compatibility.  \r\nI tried to change the order of the routing attributes, but this did not change the result. \r\n \r\nI think it should be predicable and controllable which of the routing attributes is used.\r\n\r\nMicrosoft.AspNetCore.App 2.1.1\r\nMicrosoft.NetCore.App 2.1.0\r\n\r\ndotnet --info:\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3636","RelatedDescription":"Closed issue \"Url.Action takes attribute routing in to account, but not clear how\" (#3636)"},{"Id":"370723063","IsPullRequest":false,"CreatedAt":"2018-10-16T17:39:46","Actor":"benjamin-hodgson","Number":"3637","RawContent":null,"Title":"Add an Append(ReadOnlySpan<char>) method to InplaceStringBuilder","State":"open","Body":"I'm implementing a `TextWriter` subclass which uses an [`InplaceStringBuilder`](https://github.com/aspnet/Common/blob/master/src/Microsoft.Extensions.Primitives/InplaceStringBuilder.cs) as its buffer (basically, a faster version of `StringWriter`), and I want to write an efficient override of `Write(ReadOnlySpan<char>)`. For this I need an `Append(ReadOnlySpan<char>)` method on `InplaceStringBuilder`.\r\n\r\n[I've implemented this on a branch](https://github.com/benjamin-hodgson/Common/commit/1cab7ce88a6a0f4442182db446bbbfa516cc5e11), would you accept a pull request to the `Common` repo?","Url":"https://github.com/aspnet/AspNetCore/issues/3637","RelatedDescription":"Open issue \"Add an Append(ReadOnlySpan<char>) method to InplaceStringBuilder\" (#3637)"},{"Id":"370595920","IsPullRequest":false,"CreatedAt":"2018-10-16T16:42:05","Actor":"andreyciocan","Number":"3632","RawContent":null,"Title":"Unexpectly delete data in EF Core","State":"closed","Body":"I have a huge issue with entity framework in Microsoft.AspNetCore.App v 2.1.2. \r\n\r\nI have the following two models:\r\n\r\n```c#\r\npublic class IPJPeriod\r\n    {\r\n        [Key]\r\n        public int IPJPeriodId { get; set; }\r\n        public int UserId { get; set; }\r\n        public DateTime StartDate { get; set; }\r\n        public DateTime EndDate { get; set; }\r\n        public int ImproperDays { get; set; }\r\n        public int ProperDays { get; set; }\r\n        public string Details { get; set; }\r\n        public bool IsDeleted { get; set; }\r\n    }\r\n```\r\n\r\nand \r\n\r\n```c#\r\npublic class AddedSubtractedPeriod\r\n    {\r\n        [Key]\r\n        public int AddedSubtractedPeriodId { get; set; }\r\n        public bool IsAdded { get; set; }\r\n        public DateTime? StartDate { get; set; }\r\n        public DateTime? EndDate { get; set; }\r\n        public System.Int16 AddedSubtractedYears { get; set; }\r\n        public System.Byte AddedSubtractedMonths { get; set; }\r\n        public System.Int16 AddedSubtractedDays { get; set; }\r\n        [StringLength(10)]\r\n        public string DecisionNo { get; set; }\r\n        public DateTime? DecisionDate { get; set; }\r\n        public int? InstanceId { get; set; }\r\n        public int AddedSubtractedPeriodReasonId { get; set; }\r\n        public DateTime RecordingDate { get; set; }\r\n        public int UserId {get; set;}\r\n    }\r\n```\r\n\r\nIn my code I get the list of IPJPeriod then use a foreach to iterate the records. On some math calculations I add or not a AddedSubtractedPeriod into the database. The problem is that when I call await _context.SaveChangesAsync() it deletes my IPJPeriod's without calling any Remove function. \r\n\r\nThis is my Controller code snippet:\r\n\r\n```c#\r\nvar IPJPeriods = _context.IPJPeriod\r\n                .Where(x => x.UserId == id && x.IsDeleted == false)\r\n                .ToList();\r\n            if (IPJPeriods != null && IPJPeriods > 0)\r\n            {\r\n                foreach (var item2 in PrisonerIPJPeriods)\r\n                {\r\n                    if ((item2.ImproperDays / 30) * 6 > 0)\r\n                    {\r\n                        var AddedSubtractedPeriod = new PrisonerFinalConvictionAddedSubtractedPeriod\r\n                        {\r\n                            IsAdded = false,\r\n                            StartDate = item2.StartDate,\r\n                            EndDate = item2.EndDate,\r\n                            AddedSubtractedYears = 0,\r\n                            AddedSubtractedMonths = 0,\r\n                            AddedSubtractedDays = (Int16)((item2.ImproperDays / 30) * 6),\r\n                            AddedSubtractedPeriodReasonId = 11,\r\n                            RecordingDate = DateTime.Now,\r\n                            UserId = id\r\n                        };\r\n                        _prisonerContext.PrisonerFinalConvictionAddedSubtractedPeriod.Add(AddedSubtractedPeriod);\r\n                        await _prisonerContext.SaveChangesAsync(); //huge issue. Before foreach I had for example 4 records in IPJPeriods, but after this call I have none... \r\n[                       more code ....]\r\n            }\r\n```\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3632","RelatedDescription":"Closed issue \"Unexpectly delete data in EF Core\" (#3632)"},{"Id":"370693547","IsPullRequest":false,"CreatedAt":"2018-10-16T16:22:48","Actor":"natemcmaster","Number":"3635","RawContent":null,"Title":"2.2 test failures: unexpected output in self-contained publish","State":"open","Body":"The latest builds of 2.2 preview 3 are failing E2E tests: https://dev.azure.com/dnceng/internal/_build/results?buildId=30511&view=ms.vss-test-web.test-result-details. There appear to be two reasons\r\n\r\n1. IdentityModel upgraded to 5.3 in https://github.com/aspnet/Universe/pull/1482. This introduced a new assembly into the shared framework (cc @HaoK) which means self-contained publish tests have a new, unexpected assembly, Microsoft.IdentityModel.JsonWebTokens.dll.\r\n2. Updates to jquery in templates. The tests assert these files are present, but they are no longer in publish output: wwwroot\\lib\\jquery\\.bower.json and wwwroot\\lib\\jquery-validation\\.bower.json. cc @ryanbrandenburg \r\n\r\nThe test code for this is in https://github.com/aspnet/Universe/tree/release/2.2/test/Cli.FunctionalTests\r\n\r\ncc @Eilon @muratg @mkArtakMSFT ","Url":"https://github.com/aspnet/AspNetCore/issues/3635","RelatedDescription":"Open issue \"2.2 test failures: unexpected output in self-contained publish\" (#3635)"},{"Id":"370691851","IsPullRequest":false,"CreatedAt":"2018-10-16T16:18:19","Actor":"amjrsl","Number":"3634","RawContent":null,"Title":"NullReferenceException thrown by JsonPatchDocument.ApplyTo for Move operation","State":"open","Body":"**1. Description of the problem:**\r\nIn the following example, `JsonPatchDocument.ApplyTo` throws a `NullReferenceException` when the patch to the object wrapper is applied. I would expect it to throw a `JsonPatchException` in this case.  \r\n\r\nWhen a dynamic object is used throughout then a `JsonPatchException` with a meaningful error message is thrown.\r\n\r\nIn both cases, the object that the patch is being applied to has the structure:\r\n```json\r\n{\r\n  Object: {\r\n    hello: \"world\"\r\n  }\r\n}\r\n```\r\n\r\n**2. Steps to reproduce (preferrably a link to a GitHub repo with a repro project)**\r\n```c#\r\nusing System;\r\nusing System.Dynamic;\r\n\r\nusing Microsoft.AspNetCore.JsonPatch;\r\n\r\npublic class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var jsonPatchDocument = new JsonPatchDocument();\r\n        jsonPatchDocument.Move(\"/Object\", \"/Object/goodbye\");\r\n\r\n        dynamic @object = new ExpandoObject();\r\n        @object.hello = \"world\";\r\n\r\n        // throws JsonPatchException\r\n        try\r\n        {\r\n            dynamic objectToApplyTo = new ExpandoObject();\r\n            objectToApplyTo.Object = @object;\r\n            jsonPatchDocument.ApplyTo(objectToApplyTo);\r\n        }\r\n        catch (Exception exception)\r\n        {\r\n            Console.WriteLine(exception);\r\n        }\r\n\r\n        // throws NullReferenceException\r\n        try\r\n        {\r\n            var objectToApplyTo = new ObjectWrapper();\r\n            objectToApplyTo.Object = @object;\r\n            jsonPatchDocument.ApplyTo(objectToApplyTo);\r\n        }\r\n        catch (Exception exception)\r\n        {\r\n            Console.WriteLine(exception);\r\n        }\r\n\r\n        Console.ReadKey();\r\n    }\r\n\r\n    private class ObjectWrapper\r\n    {\r\n        public dynamic Object { get; set; }\r\n    }\r\n}\r\n```\r\n\r\n**3. The version of `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`**\r\nMicrosoft.AspNetCore.JsonPatch 2.1.0.0\r\n\r\n**4. The output of `dotnet --info`**\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/aspnet/AspNetCore/issues/3634","RelatedDescription":"Open issue \"NullReferenceException thrown by JsonPatchDocument.ApplyTo for Move operation\" (#3634)"},{"Id":"369689679","IsPullRequest":false,"CreatedAt":"2018-10-16T15:57:44","Actor":"las3r","Number":"3622","RawContent":null,"Title":"How to inject external startup assemblies in .net core 2.1?","State":"closed","Body":"**What am I trying to do:**\r\nI am trying to load extra hostingstartupassemblies through use of the `ASPNETCORE_HOSTINGSTARTUPASSEMBLIES` environment variable.\r\n\r\n**Previously**\r\nIn .net core 2.0 this worked fine, and the file would be grabbed from the local (implicit) runtime store. On linux this was located in `/usr/share/dotnet/*`. \r\n\r\n**Problem description**\r\nThe current documentation at [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/platform-specific-configuration?view=aspnetcore-2.1&tabs=linux#class-library](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/platform-specific-configuration) shows how this works with .net core 2.0. You add a deps.json file to the `/usr/share/dotnet/additionalDependencies` folder, and the binary to `/usr/share/dotnet/store/x64/etc`, and it will be ready for inclusion. This works exactly as described for .net core 2.0\r\n\r\nThis way when you use the `ASPNETCORE_HOSTINGSTARTUPASSEMBLIES` environment variable, the binary is loaded from disk and injected in the application without any problems.\r\n\r\nWith .net core 2.1+ the runtime store was deprecated and replaced by the shared library. The current instructions don't work with a clean install of the .net core 2.1, so I'm stuck on how to load my assemblies during runtime. Is there any way I can still invoke the runtime store, or is there a better way to inject external startup assemblies during runtime?\r\n\r\nIssues:\r\n- The web app logs \"Cannot find assembly [myname.dll]\"\r\n- There is no runtime package store\r\n- There is no additionalDeps folder\r\n\r\nNote: compile-time is not an option for me, this would have been easy with a NuGet package.\r\n\r\n**dotnet --info**\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.403/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  2.1.403 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]","Url":"https://github.com/aspnet/AspNetCore/issues/3622","RelatedDescription":"Closed issue \"How to inject external startup assemblies in .net core 2.1?\" (#3622)"},{"Id":"370606455","IsPullRequest":false,"CreatedAt":"2018-10-16T13:15:11","Actor":"newbienewbie","Number":"3633","RawContent":null,"Title":"unicode url with DefaultFilesMiddleware","State":"open","Body":"**Version of `Microsoft.AspNetCore.App`** : \r\n\r\n2.1.1\r\n\r\n**Description and How to reproduce**\r\n\r\nLet's say we are serving a static directory whose path string contains unicode codes : \r\n\r\n* url path string = `blog/categories/大道/index.html` \r\n* physical file path string = `blog/categories/大道/index.html`\r\n\r\nWhen there's an incoming request to  `blog/categories/大道/`，the [`DefaultFileMiddlware`](https://github.com/aspnet/StaticFiles/blob/4c8df8e5a4e3abe5e7db51685dbd892d160c1e35/src/Microsoft.AspNetCore.StaticFiles/DefaultFilesMiddleware.cs#L69) gets the directory by  `var dirContents = _fileProvider.GetDirectoryContents(subpath.Value);` . And now the middleware will check whether the directory  exists [as below](\r\nhttps://github.com/aspnet/StaticFiles/blob/4c8df8e5a4e3abe5e7db51685dbd892d160c1e35/src/Microsoft.AspNetCore.StaticFiles/DefaultFilesMiddleware.cs#L69\r\n) :\r\n\r\n```csharp\r\n                var dirContents = _fileProvider.GetDirectoryContents(subpath.Value);\r\n                if (dirContents.Exists)\r\n                {\r\n                    // ...\r\n\r\n```\r\n\r\n\r\nThe result will be true .  \r\n\r\nHowever , when coming into the default `index.html` ,  the `DefaultFileMiddlware` checks the file path by : \r\n```csharp\r\nvar file = _fileProvider.GetFileInfo(subpath + defaultFile);\r\n```\r\n\r\nHere the `subpath` is often urlencoded , so the file path will be something like : \r\n```\r\n\"blog\\\\categories\\\\%E5%A4%A7%E9%81%93\\\\index.html\"\r\n```\r\nAs a result , ` file.Exists` will return `false` .\r\n\r\n\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3633","RelatedDescription":"Open issue \"unicode url with DefaultFilesMiddleware\" (#3633)"},{"Id":"369967495","IsPullRequest":false,"CreatedAt":"2018-10-16T08:04:08","Actor":"clement911","Number":"3627","RawContent":null,"Title":"HttpContext.Request.Method is empty","State":"closed","Body":"I have an app that runs asp.net core 2.1 on the full .net framework.\r\nRecently, while developing locally, I started getting random errors.\r\nUpon investigation, it is due to an empty HttpContext.Request.Method.\r\n\r\nIn the log instead of \r\n> Microsoft.AspNetCore.Hosting.Internal.WebHost: Information: Request starting HTTP/1.1 GET http://...\r\n\r\nWe see \r\n> Microsoft.AspNetCore.Hosting.Internal.WebHost: Information: Request starting HTTP/1.1  http://...\r\n\r\nNotice there is no verb?!\r\n\r\nWe inspect this request inside a middleware `Invoke` method\r\nWhat could cause this property to be empty?\r\nI thought I would try to see the raw request and see the HTTP verb, but I couldn't find a way of seeing the raw request.\r\n\r\nIf the request really has no verb, I would imagine that asp.net core would throw an exception much earlier?","Url":"https://github.com/aspnet/AspNetCore/issues/3627","RelatedDescription":"Closed issue \"HttpContext.Request.Method is empty\" (#3627)"},{"Id":"370368412","IsPullRequest":false,"CreatedAt":"2018-10-15T22:28:47","Actor":"JDGHHou","Number":"3631","RawContent":null,"Title":"SqlException: Login failed for user '{DOMAIN}\\{MACHINE NAME}' instead of what's indicated in web.config and application.json","State":"open","Body":"Using .Net Core 2.1\r\nMy project currently has no authentication on it. When I debug it, it runs fine - connects to the database with the intended login. However when I web deploy to IIS, I get this error (printed in full below).\r\nI've tried various things to fix this, based on articles I've read:\r\n* turned on windows auth and turned off anonymous auth in both my project, and on IIS web site.\r\n* Included windows auth sections in web config and application.json.\r\n* Made sure that the correct web.config application.json was being pushed\r\n* included IISOptions Services calls in my Startup.cs\r\n\r\nNone of this is working. I wish deploying a simple application to IIS were as easy as simply launching it in IIS Express via DEBUG. Why is this so difficult?\r\n\r\nError-----------------------------------------------------------------------\r\nAn unhandled exception occurred while processing the request.\r\nSqlException: Login failed for user '{DOMAIN}\\{MACHINE NAME}'.\r\nSystem.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, object providerInfo, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, bool applyTransientFaultHandling)\r\n•\tStack \r\n•\tQuery \r\n•\tCookies \r\n•\tHeaders\r\n•\tSqlException: Login failed for user '{DOMAIN}\\{MACHINE NAME}'.\r\no\tSystem.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, object providerInfo, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, bool applyTransientFaultHandling)\r\no\tSystem.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\no\tSystem.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\r\no\tSystem.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\no\tSystem.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\no\tSystem.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, uint waitForMultipleObjectsTimeout, bool allowCreate, bool onlyOneCheckConnection, DbConnectionOptions userOptions, out DbConnectionInternal connection)\r\no\tSystem.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource<DbConnectionInternal> retry, DbConnectionOptions userOptions, out DbConnectionInternal connection)\r\no\tSystem.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, out DbConnectionInternal connection)\r\no\tSystem.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource<DbConnectionInternal> retry, DbConnectionOptions userOptions)\r\no\tSystem.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource<DbConnectionInternal> retry)\r\no\tSystem.Data.SqlClient.SqlConnection.Open()\r\no\tMicrosoft.EntityFrameworkCore.Storage.RelationalConnection.OpenDbConnection(bool errorsExpected)\r\no\tMicrosoft.EntityFrameworkCore.Storage.RelationalConnection.Open(bool errorsExpected)\r\no\tMicrosoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable<T>+Enumerator.BufferlessMoveNext(DbContext _, bool buffer)\r\no\tMicrosoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute<TState, TResult>(TState state, Func<DbContext, TState, TResult> operation, Func<DbContext, TState, ExecutionResult<TResult>> verifySucceeded)\r\no\tMicrosoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable<T>+Enumerator.MoveNext()\r\no\tSystem.Linq.Enumerable.TryGetFirst<TSource>(IEnumerable<TSource> source, out bool found)\r\no\tlambda_method(Closure )\r\no\tMicrosoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider+ResultEnumerable<T>.GetEnumerator()\r\no\tMicrosoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities<TOut, TIn>(IEnumerable<TOut> results, QueryContext queryContext, IList<EntityTrackingInfo> entityTrackingInfos, IList<Func<TIn, object>> entityAccessors)+MoveNext()\r\no\tMicrosoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider+ExceptionInterceptor<T>+EnumeratorExceptionInterceptor.MoveNext()\r\no\tSystem.Linq.Enumerable.TryGetFirst<TSource>(IEnumerable<TSource> source, out bool found)\r\no\tSystem.Linq.Enumerable.First<TSource>(IEnumerable<TSource> source)\r\no\tMicrosoft.EntityFrameworkCore.Query.Internal.QueryCompiler+<>c__DisplayClass15_1<TResult>.<CompileQueryCore>b__0(QueryContext qc)\r\no\tSystem.Linq.Queryable.FirstOrDefault<TSource>(IQueryable<TSource> source)\r\no\tDNOW_Core.ViewComponents.ParametersTab.Invoke(Parameters pModel, Nullable<int> orderid) in ParametersTab.cs\r\no\tlambda_method(Closure , object , object[] )\r\no\tMicrosoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentInvoker.InvokeSyncCore(ObjectMethodExecutor executor, ViewComponentContext context)\r\no\tMicrosoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentInvoker.InvokeAsync(ViewComponentContext context)\r\no\tMicrosoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentHelper.InvokeCoreAsync(ViewComponentDescriptor descriptor, object arguments)\r\no\tAspNetCore.Pages_Index.<ExecuteAsync>b__39_1() in Index.cshtml\r\no\tMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.SetOutputContentAsync()\r\no\tAspNetCore.Pages_Index.ExecuteAsync()\r\no\tMicrosoft.AspNetCore.Mvc.Razor.RazorView.RenderPageCoreAsync(IRazorPage page, ViewContext context)\r\no\tMicrosoft.AspNetCore.Mvc.Razor.RazorView.RenderPageAsync(IRazorPage page, ViewContext context, bool invokeViewStarts)\r\no\tMicrosoft.AspNetCore.Mvc.Razor.RazorView.RenderAsync(ViewContext context)\r\no\tMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(ViewContext viewContext, string contentType, Nullable<int> statusCode)\r\no\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)\r\no\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync<TFilter, TFilterAsync>()\r\no\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\no\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext<TFilter, TFilterAsync>(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\no\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()\r\no\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\no\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\no\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\no\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\no\tMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\no\tMicrosoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\no\tMicrosoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\no\tMicrosoft.AspNetCore.Builder.Extensions.UsePathBaseMiddleware.Invoke(HttpContext context)\r\no\tMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n•\t\r\nShow raw exception details\r\nSystem.Data.SqlClient.SqlException (0x80131904): Login failed for user 'DNOW\\USA-2UA8261SMX$'.\r\n   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling)\r\n   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n   at System.Data.SqlClient.SqlConnection.Open()\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenDbConnection(Boolean errorsExpected)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open(Boolean errorsExpected)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.BufferlessMoveNext(DbContext _, Boolean buffer)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryingEnumerable`1.Enumerator.MoveNext()\r\n   at System.Linq.Enumerable.TryGetFirst[TSource](IEnumerable`1 source, Boolean& found)\r\n   at lambda_method(Closure )\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ResultEnumerable`1.GetEnumerator()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider._TrackEntities[TOut,TIn](IEnumerable`1 results, QueryContext queryContext, IList`1 entityTrackingInfos, IList`1 entityAccessors)+MoveNext()\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\r\n   at System.Linq.Enumerable.TryGetFirst[TSource](IEnumerable`1 source, Boolean& found)\r\n   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass15_1`1.<CompileQueryCore>b__0(QueryContext qc)\r\n   at System.Linq.Queryable.FirstOrDefault[TSource](IQueryable`1 source)\r\n   at DNOW_Core.ViewComponents.ParametersTab.Invoke(Parameters pModel, Nullable`1 orderid) in C:\\Users\\Dunnj\\Documents\\DNOW\\App\\DNOW_Core\\DNOW_Core\\ViewComponents\\ParametersTab.cs:line 27\r\n   at lambda_method(Closure , Object , Object[] )\r\n   at Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentInvoker.InvokeSyncCore(ObjectMethodExecutor executor, ViewComponentContext context)\r\n   at Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentInvoker.InvokeAsync(ViewComponentContext context)\r\n   at Microsoft.AspNetCore.Mvc.ViewComponents.DefaultViewComponentHelper.InvokeCoreAsync(ViewComponentDescriptor descriptor, Object arguments)\r\n   at AspNetCore.Pages_Index.<ExecuteAsync>b__39_1() in C:\\Users\\Dunnj\\Documents\\DNOW\\App\\DNOW_Core\\DNOW_Core\\Pages\\Index.cshtml:line 208\r\n   at Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.SetOutputContentAsync()\r\n   at AspNetCore.Pages_Index.ExecuteAsync()\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderPageCoreAsync(IRazorPage page, ViewContext context)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderPageAsync(IRazorPage page, ViewContext context, Boolean invokeViewStarts)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderAsync(ViewContext context)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(ViewContext viewContext, String contentType, Nullable`1 statusCode)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Builder.Extensions.UsePathBaseMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\nClientConnectionId:20931594-081c-4f09-8e54-013fa6c0b414\r\nError Number:18456,State:1,Class:14\r\n\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3631","RelatedDescription":"Open issue \"SqlException: Login failed for user '{DOMAIN}\\{MACHINE NAME}' instead of what's indicated in web.config and application.json\" (#3631)"},{"Id":"369432249","IsPullRequest":false,"CreatedAt":"2018-10-15T20:00:10","Actor":"fanslead","Number":"3618","RawContent":null,"Title":"A problem about model binding in webapi","State":"closed","Body":"Environment: .net core sdk version 2.1.403 and Microsoft.AspNetCore.App version 2.1.5\r\nA model like this\r\n![image](https://user-images.githubusercontent.com/22066473/46852971-5a62a880-ce2f-11e8-873f-9e7573300541.png)\r\nYou have an api need this model parameter from body and Content-Type is application/json.\r\nNormally we will send the json data like \r\n![image](https://user-images.githubusercontent.com/22066473/46853643-46b84180-ce31-11e8-8d52-34d8168934ab.png)\r\nBut if we make a mistake about the type of one of the fields, the model parameter we received in back-end will be null and without throw any exception.\r\n![image](https://user-images.githubusercontent.com/22066473/46854272-ddd1c900-ce32-11e8-8f5a-b61c04fd48bd.png)\r\nI think even if no exception is thrown, the model parameter should not be null, keep the data of correct field  at least.","Url":"https://github.com/aspnet/AspNetCore/issues/3618","RelatedDescription":"Closed issue \"A problem about model binding in webapi\" (#3618)"},{"Id":"369926308","IsPullRequest":false,"CreatedAt":"2018-10-15T19:57:20","Actor":"spottedmahn","Number":"3626","RawContent":null,"Title":"Extensions Package for DataAnnotations: Recursively validating an entire object graph","State":"closed","Body":"Can the code that validates an object graph in ASP.NET Core MVC be moved to a `Microsoft.Extensions` package to allow for re-use outside of MVC?\r\n\r\n---\r\n\r\n### Background\r\n\r\nI wanted to validate an object and I learned of this limitation on the `Validator`:\r\n\r\n>It does not recursively validate the property values of the object.\r\n\r\nSource: [Validator.TryValidateObject Method](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.validator.tryvalidateobject?view=netcore-2.1)\r\n\r\n### MVC Does this, 🤔\r\n\r\nBut I know ASP.NET Core MVC validates the whole object graph.  How can I use it?\r\n\r\nIt seems that [`Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVistor`](https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Validation/ValidationVisitor.cs) seems to do the magic but it seems to be tied to MVC based upon the dependencies:\r\n\r\n```csharp\r\npublic ValidationVisitor(\r\n            ActionContext actionContext,\r\n            IModelValidatorProvider validatorProvider,\r\n            ValidatorCache validatorCache,\r\n            IModelMetadataProvider metadataProvider,\r\n            ValidationStateDictionary validationState)\r\n        { .... }\r\n```\r\n\r\n### Additional Notes\r\n\r\nReference: [StackOverflow post](https://stackoverflow.com/questions/7663501/dataannotations-recursively-validating-an-entire-object-graph/7665862)\r\n\r\nOpen Source Package to validate the object graph: [reustmd/DataAnnotationsValidatorRecursive](https://github.com/reustmd/DataAnnotationsValidatorRecursive)","Url":"https://github.com/aspnet/AspNetCore/issues/3626","RelatedDescription":"Closed issue \"Extensions Package for DataAnnotations: Recursively validating an entire object graph\" (#3626)"},{"Id":"370132944","IsPullRequest":false,"CreatedAt":"2018-10-15T19:34:48","Actor":"TanvirArjel","Number":"3630","RawContent":null,"Title":"Lower kebab case routing url","State":"closed","Body":"In the `ConfigureServices` method of the `startup` class I am configuring as follows:\r\n\r\n`services.AddRouting(option => option.LowercaseUrls = true);`\r\n\r\nAnd it making my routing url `http://localhost:13921/Exception/ExceptionList` as follows:\r\n\r\n`http://localhost:13921/exception/exceptionlist`\r\n\r\nActually it should have been:\r\n\r\n`http://localhost:13921/exception/exception-list`\r\n\r\nfor more readability.\r\n\r\nThank you.\r\n\r\n\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3630","RelatedDescription":"Closed issue \"Lower kebab case routing url\" (#3630)"},{"Id":"370003266","IsPullRequest":false,"CreatedAt":"2018-10-15T16:31:27","Actor":"xyz0822","Number":"3628","RawContent":null,"Title":"Syntax sugar in source code like '?.'","State":"closed","Body":" like snipcode in DependencyInjection:\r\n      var implementationTypeInfo = descriptor.ImplementationType?.GetTypeInfo();\r\n\r\nfor example: \"?.\" Syntax sugar，i do think this Syntax sugar is unnecessary，and sometimes it is poor readability.\r\ncould we reduce such code in source code?","Url":"https://github.com/aspnet/AspNetCore/issues/3628","RelatedDescription":"Closed issue \"Syntax sugar in source code like '?.'\" (#3628)"},{"Id":"370054806","IsPullRequest":false,"CreatedAt":"2018-10-15T08:35:38","Actor":"anlem12","Number":"3629","RawContent":null,"Title":"Problems with aspnetcore clusters","State":"open","Body":"Problems with aspnetcore clusters\r\n\r\nHere are a list of errors and warnings that i'm getting constantly\r\n\r\nThe antiforgery token could not be decrypted. ---> System.Security.Cryptography.CryptographicException: The key {xxxxxxx} was not found in the key ring.\r\nor\r\nthe most exception i get:\r\nAn exception was thrown while deserializing the token.\r\nor\r\nwhich i get the most warning is :\r\nError unprotecting the session cookie.","Url":"https://github.com/aspnet/AspNetCore/issues/3629","RelatedDescription":"Open issue \"Problems with aspnetcore clusters\" (#3629)"},{"Id":"369726503","IsPullRequest":false,"CreatedAt":"2018-10-15T04:51:50","Actor":"mkArtakMSFT","Number":"3623","RawContent":null,"Title":"\"Replace\" operations should remove the existing value before adding the new one","State":"closed","Body":"_From @TAGC on Wednesday, 27 September 2017 15:19:14_\r\n\r\n## Summary\r\n\r\nI'm facing an issue that relates to a subtle technicality of the JSON Patch \"replace\" operation. In one of my model classes, I'm trying to enforce a requirement that a client does not try to register two \"definitions\" (instances of another model class) with the same name.\r\n\r\nHowever, it should be entirely possible for a client to *replace* an existing definition with another one using the same name, and JSON Patch does not currently allow this, at least for properties being handled by DynamicObjects.\r\n\r\n## Expected Behaviour\r\n\r\nI expect that submitting JSON Patch operations to add two values with the same path will result in an error (when trying to enforce uniqueness).\r\n\r\nThis means, for example, that the following is considered invalid, and will cause an error to be returned to the client:\r\n\r\n```json\r\n{\"op\":\"add\", \"path\":\"candb.foo\", \"value\": {\"...\"}}\r\n{\"op\":\"add\", \"path\":\"candb.foo\", \"value\": {\"...\"}}\r\n```\r\n\r\nHowever, I expect that if the client is simply trying to replace an existing definition, that should be considered okay:\r\n\r\n```json\r\n{\"op\":\"add\", \"path\":\"candb.foo\", \"value\": {\"...\"}}\r\n{\"op\":\"replace\", \"path\":\"candb.foo\", \"value\": {\"...\"}}\r\n```\r\n\r\n## Actual Behaviour\r\n\r\nI've noticed that my application doesn't permit this either. An error will occur even if the client is trying to replace the value at a particular path.\r\n\r\n## Further Details\r\n\r\nI created an integration test to isolate this bug. I've narrowed the issue down to the `TryReplace` method in [`DynamicObjectAdapter`](https://github.com/aspnet/JsonPatch/blob/dev/src/Microsoft.AspNetCore.JsonPatch/Internal/DynamicObjectAdapter.cs#L79-L104):\r\n\r\n```cs\r\npublic bool TryReplace(\r\n    object target,\r\n    string segment,\r\n    IContractResolver contractResolver,\r\n    object value,\r\n    out string errorMessage)\r\n{\r\n    if (!TryGetDynamicObjectProperty(target, contractResolver, segment, out var property, out errorMessage))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    if (!TryConvertValue(value, property.GetType(), out var convertedValue))\r\n    {\r\n        errorMessage = Resources.FormatInvalidValueForProperty(value);\r\n        return false;\r\n    }\r\n\r\n    if (!TrySetDynamicObjectProperty(target, contractResolver, segment, convertedValue, out errorMessage))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    errorMessage = null;\r\n    return true;\r\n}\r\n```\r\n\r\nCompare this against the implementation of `TryAdd`:\r\n\r\n```cs\r\npublic bool TryAdd(\r\n    object target,\r\n    string segment,\r\n    IContractResolver contractResolver,\r\n    object value,\r\n    out string errorMessage)\r\n{\r\n    if (!TrySetDynamicObjectProperty(target, contractResolver, segment, value, out errorMessage))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    errorMessage = null;\r\n    return true;\r\n}\r\n```\r\n\r\nIn both cases, the only mutating method that the object adapter invokes is `TrySetDynamicObjectProperty`. This means that there is no way to distinguish between \"add\" operations and \"replace\" operations in the object being adapted itself.\r\n\r\nI use a class called `DynamicDeserializationStore` to handle JSON patch operations relating to adding/removing/changing definitions. This class extends `DynamicObject` and so gets handled by this adapter. Currently, both \"add\" and \"replace\" operations will call into `public void Add(string key, object value)`, which through a small call chain will lead to `AddDefinition`:\r\n\r\n```csharp\r\nprivate void AddDefinition(string name, ICanMessageDefinition definition)\r\n{\r\n    Raise.ArgumentException.If(\r\n        TypedDefinitions.ContainsKey(name),\r\n        nameof(name),\r\n        \"Cannot add definition to CAN database as a definition with that name already exists\");\r\n    // ...\r\n}\r\n```\r\n\r\nThis is where an exception is raised and the problem becomes apparent.\r\n\r\n## Proposed Solution\r\n\r\nAccording to the [JSON Patch specification](https://tools.ietf.org/html/rfc6902#section-4.3) (RFC 6902):\r\n\r\n> The \"replace\" operation replaces the value at the target location\r\n   with a new value.  The operation object MUST contain a \"value\" member\r\n   whose content specifies the replacement value.\r\n> ...\r\n> This operation is **functionally identical to a \"remove\" operation for\r\n   a value, followed immediately by an \"add\" operation at the same\r\n   location with the replacement value.**\r\n\r\nTo be consistent with the specification, I think `TryReplace` should attempt to remove the existing value and then add the new value:\r\n\r\n```csharp\r\npublic bool TryReplace(\r\n    object target,\r\n    string segment,\r\n    IContractResolver contractResolver,\r\n    object value,\r\n    out string errorMessage)\r\n{\r\n    if (!TryRemove(target, segment, contractResolver, out errorMessage))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    if (!TryConvertValue(value, property.GetType(), out var convertedValue))\r\n    {\r\n        errorMessage = Resources.FormatInvalidValueForProperty(value);\r\n        return false;\r\n    }\r\n\r\n    if (!TrySetDynamicObjectProperty(target, contractResolver, segment, convertedValue, out errorMessage))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    errorMessage = null;\r\n    return true;\r\n}\r\n```\r\n\r\nThe way that `TryRemove` is currently implemented, it will try to set the dynamic object property to `null`. This would be great for me, as `DynamicDeserializationStore` will treat this as a request to remove the value:\r\n\r\n```csharp\r\npublic bool TryUpdateValue(string name, object value)\r\n{\r\n    switch (value)\r\n    {\r\n        case JObject jObject:\r\n            _storeValue(name, jObject.ToObject<T>());\r\n            return true;\r\n\r\n        case T tObject:\r\n            _storeValue(name, tObject);\r\n            return true;\r\n\r\n        case null:\r\n            _removeValue(name);\r\n            return true;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n```\r\n\r\nThis should then allow the subsequent operation to add a new definition at the same path to succeed without error.\r\n\r\n_Copied from original issue: aspnet/JsonPatch#110_","Url":"https://github.com/aspnet/AspNetCore/issues/3623","RelatedDescription":"Closed issue \"\"Replace\" operations should remove the existing value before adding the new one\" (#3623)"},{"Id":"369908815","IsPullRequest":false,"CreatedAt":"2018-10-14T17:09:11","Actor":"MartinDawson","Number":"3625","RawContent":null,"Title":"AddDistributedSqlServerCache Expiration not being set","State":"closed","Body":"The SlidingExpirationInSeconds is never been set. It's always 1200 seconds no matter what I do.\r\n\r\n```c#\r\n            services.AddMemoryCache();\r\n            services.AddDistributedSqlServerCache(options =>\r\n            {\r\n                options.ConnectionString = Env.GetString(\"DEFAULT_CONNECTION\");\r\n                options.SchemaName = \"dbo\";\r\n                options.TableName = \"Cache\";\r\n                options.DefaultSlidingExpiration = TimeSpan.FromDays(1);\r\n            });\r\n            services.AddSession();\r\n\r\n            app.UseSession(new SessionOptions {\r\n                Cookie = new CookieBuilder\r\n                {\r\n                    Name = \".AspNetCore.Session\",\r\n                    SameSite = SameSiteMode.None,\r\n                }\r\n            });\r\n\r\n```\r\nI set it by doing this:\r\n```c#\r\n            Session.SetString(\"OAuthToken\", token.AccessToken);\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/15030491/46918222-e01d5a00-cfcf-11e8-801a-8eebdd45bd5b.png)\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3625","RelatedDescription":"Closed issue \"AddDistributedSqlServerCache Expiration not being set\" (#3625)"},{"Id":"369864100","IsPullRequest":false,"CreatedAt":"2018-10-14T03:37:20","Actor":"whizkidwwe1217","Number":"3624","RawContent":null,"Title":" No SDKs were found after installing dotnet-hosting-2.1.5-win.exe","State":"open","Body":"To address your issues more quickly, please open the issue in the most appropriate repository.\r\n\r\nIf you're not sure exactly where to log the bug, please log the issue here and we will redirect it.\r\n\r\nASP.NET Core:\r\n - General issues: https://github.com/aspnet/Home (this repo)\r\n - MVC and Razor Pages: https://github.com/aspnet/Mvc\r\n - SignalR: https://github.com/aspnet/SignalR\r\n - Kestrel HTTP Server: https://github.com/aspnet/KestrelHttpServer\r\n - Docker: https://github.com/aspnet/aspnet-docker\r\n - Documentation: https://github.com/aspnet/Docs\r\n - Microsoft.NET.Sdk.Web: https://github.com/aspnet/websdk\r\n - See a full list here: https://github.com/aspnet\r\n   - Note: Some repos do not have active issue trackers, so if you see such a warning, please log the issue here\r\n\r\nASP.NET 4.x:\r\n - ASP.NET MVC/Web API (not Core): https://github.com/aspnet/AspNetWebStack\r\n - Katana: https://github.com/aspnet/AspNetKatana\r\n\r\nEntity Framework:\r\n - Entity Framework Core: https://github.com/aspnet/EntityFrameworkCore\r\n - Entity Framework 6: https://github.com/aspnet/EntityFramework6\r\n\r\nOther common projects:\r\n - .NET Core CLI and SDK: https://github.com/dotnet/core\r\n - .NET Core runtime: https://github.com/dotnet/coreclr\r\n - .NET Core libraries: https://github.com/dotnet/corefx\r\n - NuGet: https://github.com/NuGet/home\r\n - Visual Studio: https://developercommunity.visualstudio.com\r\n - Visual Studio Code: https://github.com/microsoft/vscode\r\n - Omnisharp (C# support for VS Code): https://github.com/omnisharp/omnisharp-vscode\r\n\r\nIf you believe you have an issue that affects the security of the platform please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://technet.microsoft.com/en-us/mt764065.aspx).\r\n\r\n---\r\n\r\nTips for opening great bugs:\r\n\r\n1. Try enabling logging (in the most verbose level) and see if the details help you in fixing the issue you are seeing. Share the logs too if it helps in diagnosing the issue faster. More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging\r\n2. If you are seeing an exception, include the full exceptions details (message and stack trace). More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling\r\n3. Please try to include as much information as possible:\r\n   1. Description of the problem:\r\n   2. Steps to reproduce (preferrably a link to a GitHub repo with a repro project)\r\n   3. The version of `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`\r\n   4. The output of `dotnet --info`\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3624","RelatedDescription":"Open issue \" No SDKs were found after installing dotnet-hosting-2.1.5-win.exe\" (#3624)"},{"Id":"369608460","IsPullRequest":false,"CreatedAt":"2018-10-12T15:48:43","Actor":"allenh100","Number":"3621","RawContent":null,"Title":"How do I get Microsoft Account to prompt for which account to use","State":"open","Body":"Hi,\r\nI have an ASP.NET Core 2.1 application that is using Microsoft Account for authentication and I would like to be able for the user to select which identity they want to use.\r\n\r\nI am currently logged into a network that supports my AAD identity as part of MSA (allenh@microsoft.com) and I have an external email account (boddah@comcast.net) that I would like to have the option to use.\r\n\r\nThe behavior I see currently is as soon as i click on login, the system automatically uses my AAD identity even though I have established a login previously for my external account.\r\n\r\nWhat I would like to achieve is that after clicking login, the user is presented with a dialog of active login identities to choose from as well as the option to use a different one not already logged in.\r\n\r\nI have tried experimenting with the various options you have access to via the .AddMicrosoftAccount() call, but nothing seems to have the effect I am looking for.\r\n\r\nIs this possible, and if so how?\r\n\r\nThanks,\r\nallen","Url":"https://github.com/aspnet/AspNetCore/issues/3621","RelatedDescription":"Open issue \"How do I get Microsoft Account to prompt for which account to use\" (#3621)"},{"Id":"369155700","IsPullRequest":false,"CreatedAt":"2018-10-12T11:41:13","Actor":"j-hurst","Number":"3615","RawContent":null,"Title":"Correlation Failed Error - Local IIS Redirects back from middleware as HTTP","State":"closed","Body":"I am trying to debug a .NET Core MVC application locally that runs through my local IIS.  I have the ASP.NET Core developer certificate set as my HTTPS certificate in IIS.  However, I continue to get a correlation failed error in the OpenIdConnectHandler.\r\n\r\nI am using IdentityServer with an external provider pointed at Azure AD, and I know the authentication is authenticating the user based on those logs.  It has to be on redirect back to the application.  The only thing I see is in the logs is in Microsoft.AspNetCore.Hosting.Internal.WebHost there is HTTP get, but I am using UseHttpsRedirection.  How would that just HTTP and not HTTPS?\r\n\r\nAny help would be greatly appreaciated.\r\n\r\n**Below are my logs from the web application on starting debugging:**\r\n```\r\n[09:47:06 Debug] Microsoft.AspNetCore.Hosting.Internal.WebHost\r\nHosting starting\r\n\r\n[09:47:06 Warning] Microsoft.AspNetCore.DataProtection.Repositories.EphemeralXmlRepository\r\nUsing an in-memory repository. Keys will not be persisted to storage.\r\n\r\n[09:47:06 Warning] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager\r\nNeither user profile nor HKLM registry available. Using an ephemeral key repository. Protected data will be unavailable when application exits.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver\r\nRepository contains no viable default key. Caller should generate a key with immediate activation.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider\r\nPolicy resolution states that a new key should be added to the key ring.\r\n\r\n[09:47:06 Information] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager\r\nCreating key \"2e0f791a-20df-4017-a060-b4086a666b3a\" with creation date \"2018-10-11T13:47:06.1822019+00:00\", activation date \"2018-10-11T13:47:06.1761673+00:00\", and expiration date \"2019-01-09T13:47:06.1761673+00:00\".\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager\r\nDescriptor deserializer type for key \"2e0f791a-20df-4017-a060-b4086a666b3a\" is 'Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager\r\nNo key escrow sink found. Not writing key \"2e0f791a-20df-4017-a060-b4086a666b3a\" to escrow.\r\n\r\n[09:47:06 Warning] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager\r\nNo XML encryptor configured. Key \"2e0f791a-20df-4017-a060-b4086a666b3a\" may be persisted to storage in unencrypted form.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager\r\nKey cache expiration token triggered by 'CreateNewKey' operation.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager\r\nFound key \"2e0f791a-20df-4017-a060-b4086a666b3a\".\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver\r\nConsidering key \"2e0f791a-20df-4017-a060-b4086a666b3a\" with expiration date \"2019-01-09T13:47:06.1761673+00:00\" as default key.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.DataProtection.TypeForwardingActivator\r\nForwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptorFactory\r\nOpening CNG algorithm 'AES' from provider 'null' with chaining mode CBC.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptorFactory\r\nOpening CNG algorithm 'SHA256' from provider 'null' with HMAC.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider\r\nUsing key \"2e0f791a-20df-4017-a060-b4086a666b3a\" as the default key.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.DataProtection.Internal.DataProtectionStartupFilter\r\nKey ring with default key \"2e0f791a-20df-4017-a060-b4086a666b3a\" was loaded during application startup.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Mvc.MvcJsonOptions\r\nCompatibility switch AllowInputFormatterExceptionMessages in type MvcJsonOptions is using default value false\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Mvc.MvcOptions\r\nCompatibility switch AllowCombiningAuthorizeFilters in type MvcOptions is using default value false\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Mvc.MvcOptions\r\nCompatibility switch AllowBindingHeaderValuesToNonStringModelTypes in type MvcOptions is using default value false\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Mvc.MvcOptions\r\nCompatibility switch AllowValidatingTopLevelNodes in type MvcOptions is using default value false\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Mvc.MvcOptions\r\nCompatibility switch InputFormatterExceptionPolicy in type MvcOptions is using default value \"AllExceptions\"\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Mvc.MvcOptions\r\nCompatibility switch SuppressBindingUndefinedValueToEnumType in type MvcOptions is using default value false\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions\r\nCompatibility switch AllowAreas in type RazorPagesOptions is using default value false\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions\r\nCompatibility switch AllowMappingHeadRequestsToGetHandler in type RazorPagesOptions is using default value false\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Mvc.MvcViewOptions\r\nCompatibility switch SuppressTempDataAttributePrefix in type MvcViewOptions is using default value false\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory\r\nRegistered model binder providers, in the following order: [\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider\",\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider\"]\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer\r\nFailed to locate the development https certificate at 'null'.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Hosting.Internal.WebHost\r\nHosting started\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Hosting.Internal.WebHost\r\nLoaded hosting startup assembly Company.Web.UI.WebApp.vNext\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Hosting.Internal.WebHost\r\nLoaded hosting startup assembly Microsoft.AspNetCore.Server.IISIntegration\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Server.Kestrel\r\nConnection id \"0HLHFG04A8E83\" started.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Server.Kestrel\r\nConnection id \"0HLHFG04A8E84\" started.\r\n\r\n[09:47:06 Information] Microsoft.AspNetCore.Hosting.Internal.WebHost\r\nRequest starting HTTP/1.1 GET http://localhost/WebApp  \r\n\r\n[09:47:06 Information] Microsoft.AspNetCore.Hosting.Internal.WebHost\r\nRequest starting HTTP/1.1 DEBUG http://localhost/WebApp  0\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware\r\nWildcard detected, all requests with hosts will be allowed.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware\r\nWildcard detected, all requests with hosts will be allowed.\r\n\r\n[09:47:06 Verbose] Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware\r\nAll hosts are allowed.\r\n\r\n[09:47:06 Verbose] Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware\r\nAll hosts are allowed.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Server.Kestrel\r\nConnection id \"0HLHFG04A8E83\" completed keep alive response.\r\n\r\n[09:47:06 Information] Microsoft.AspNetCore.Hosting.Internal.WebHost\r\nRequest finished in 43.592ms 200 \r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler\r\nAuthenticationScheme: Cookies was not authenticated.\r\n\r\n[09:47:06 Debug] Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware\r\nThe request path  does not match a supported file type\r\n\r\n[09:47:07 Debug] Microsoft.AspNetCore.Routing.RouteBase\r\nRequest successfully matched the route with name 'default' and template '{controller=Main}/{action=Index}/{id?}'.\r\n\r\n[09:47:07 Information] Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker\r\nRoute matched with {action = \"Index\", controller = \"Main\"}. Executing action Company.Web.UI.WebApp.vNext.Controllers.MainController.Index (Company.Web.UI.WebApp.vNext)\r\n\r\n[09:47:07 Debug] Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker\r\nExecution plan of authorization filters (in the following order): [\"Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter\"]\r\n\r\n[09:47:07 Debug] Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker\r\nExecution plan of resource filters (in the following order): [\"Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter\"]\r\n\r\n[09:47:07 Debug] Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker\r\nExecution plan of action filters (in the following order): [\"Microsoft.AspNetCore.Mvc.Internal.ControllerActionFilter (Order: -2147483648)\",\"Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter\"]\r\n\r\n[09:47:07 Debug] Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker\r\nExecution plan of exception filters (in the following order): [\"None\"]\r\n\r\n[09:47:07 Debug] Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker\r\nExecution plan of result filters (in the following order): [\"Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.SaveTempDataFilter\"]\r\n\r\n[09:47:07 Verbose] Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker\r\nAuthorization Filter: Before executing OnAuthorizationAsync on filter Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.\r\n\r\n[09:47:07 Information] Microsoft.AspNetCore.Authorization.DefaultAuthorizationService\r\nAuthorization failed.\r\n\r\n[09:47:07 Verbose] Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker\r\nAuthorization Filter: After executing OnAuthorizationAsync on filter Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.\r\n\r\n[09:47:07 Information] Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker\r\nAuthorization failed for the request at filter 'Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter'.\r\n\r\n[09:47:07 Verbose] Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker\r\nBefore executing action result Microsoft.AspNetCore.Mvc.ChallengeResult.\r\n\r\n[09:47:07 Information] Microsoft.AspNetCore.Mvc.ChallengeResult\r\nExecuting ChallengeResult with authentication schemes ([]).\r\n\r\n[09:47:07 Verbose] Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler\r\nEntering Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler's HandleUnauthorizedAsync.\r\n\r\n[09:47:07 Verbose] Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler\r\nUsing properties.RedirectUri for 'local redirect' post authentication: 'https://localhost/WebApp'.\r\n\r\n[09:47:07 Verbose] Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector\r\nPerforming protect operation to key \"2e0f791a-20df-4017-a060-b4086a666b3a\" with purposes ('C:\\Repos\\WebApp\\WebAppSolution\\Company.Web.UI.WebApp.vNext', 'Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler', 'System.String', 'OpenIdConnect', 'v1').\r\n\r\n[09:47:07 Verbose] Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware\r\nNeeds consent: false.\r\n\r\n[09:47:07 Debug] Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware\r\nCookie '.AspNetCore.OpenIdConnect.Nonce.CfDJ8Bp5Dy7fIBdAoGC0CGpmazpXcabPCGQ97zDXLtovr0OiyWIHzIh2GLv7i9RmMV2GXZoQypRAMQEusjPR6B273_SAkZTrR7hpCcjujFqb3X3Q-VbGh4zReJyfWSuTLold6azElzraA2EAp3-ITb4svce5fKEmLeciM-k-pBrRpuqYQMe4gir3K2PcjkCZh_a2FkxzyJT9-6fdagJjOb1WoH4m9GYep0P91wNRZJJcKoXmDTvMPujpmwjdsVrJz4tP0_S8iV8KkTdIBjYzjSMoGh4' same site mode upgraded to 'lax'.\r\n\r\n[09:47:07 Debug] Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware\r\nCookie '.AspNetCore.Correlation.OpenIdConnect.jiOTeB1RbzBv3VmkOyAvKzvRmtQjy1vxwgJf1EVYSPE' same site mode upgraded to 'lax'.\r\n\r\n[09:47:07 Verbose] Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector\r\nPerforming protect operation to key \"2e0f791a-20df-4017-a060-b4086a666b3a\" with purposes ('C:\\Repos\\WebApp\\WebAppSolution\\Company.Web.UI.WebApp.vNext', 'Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler', 'OpenIdConnect', 'v1').\r\n\r\n[09:47:07 Information] Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler\r\nAuthenticationScheme: OpenIdConnect was challenged.\r\n\r\n[09:47:07 Verbose] Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker\r\nAfter executing action result Microsoft.AspNetCore.Mvc.ChallengeResult.\r\n\r\n[09:47:07 Information] Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker\r\nExecuted action Company.Web.UI.WebApp.vNext.Controllers.MainController.Index (Company.Web.UI.WebApp.vNext) in 489.1274ms\r\n\r\n[09:47:07 Debug] Microsoft.AspNetCore.Server.Kestrel\r\nConnection id \"0HLHFG04A8E84\" completed keep alive response.\r\n\r\n[09:47:07 Information] Microsoft.AspNetCore.Hosting.Internal.WebHost\r\nRequest finished in 783.5348ms 302 \r\n\r\n[09:47:08 Information] Microsoft.AspNetCore.Hosting.Internal.WebHost\r\nRequest starting HTTP/1.1 POST http://localhost/WebApp/signin-oidc application/x-www-form-urlencoded 2752\r\n\r\n[09:47:08 Verbose] Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware\r\nAll hosts are allowed.\r\n\r\n[09:47:08 Verbose] Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler\r\nEntering Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler's HandleRemoteAuthenticateAsync.\r\n\r\n[09:47:08 Debug] Microsoft.AspNetCore.Server.Kestrel\r\nConnection id \"0HLHFG04A8E83\", Request id \"0HLHFG04A8E83:00000002\": started reading request body.\r\n\r\n[09:47:08 Debug] Microsoft.AspNetCore.Server.Kestrel\r\nConnection id \"0HLHFG04A8E83\", Request id \"0HLHFG04A8E83:00000002\": done reading request body.\r\n\r\n[09:47:08 Verbose] Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector\r\nPerforming unprotect operation to key \"2e0f791a-20df-4017-a060-b4086a666b3a\" with purposes ('C:\\Repos\\WebApp\\WebAppSolution\\Company.Web.UI.WebApp.vNext', 'Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler', 'OpenIdConnect', 'v1').\r\n\r\n[09:47:08 Verbose] Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler\r\nMessageReceived: '?code=**code**&id_token=**idtoken**&access_token=**accesstoken**&token_type=Bearer&expires_in=3600&scope=openid%20profile%20offline_access&session_state=**session**'.\r\n\r\n[09:47:08 Warning] Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler\r\n'.AspNetCore.Correlation.OpenIdConnect.jiOTeB1RbzBv3VmkOyAvKzvRmtQjy1vxwgJf1EVYSPE' cookie not found.\r\n\r\n[09:47:08 Information] Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler\r\nError from RemoteAuthentication: Correlation failed..\r\n\r\n[09:47:08 Error] Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\r\nAn unhandled exception has occurred while executing the request.\r\nSystem.Exception: An error was encountered while handling the remote login. ---> System.Exception: Correlation failed.\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler`1.HandleRequestAsync()\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n\r\n[09:47:08 Debug] Microsoft.AspNetCore.Server.Kestrel\r\nConnection id \"0HLHFG04A8E83\" completed keep alive response.\r\n\r\n[09:47:08 Information] Microsoft.AspNetCore.Hosting.Internal.WebHost\r\nRequest finished in 113.983ms 500 text/html; charset=utf-8\r\n```\r\n\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3615","RelatedDescription":"Closed issue \"Correlation Failed Error - Local IIS Redirects back from middleware as HTTP\" (#3615)"},{"Id":"369497766","IsPullRequest":false,"CreatedAt":"2018-10-12T10:43:15","Actor":"blackrek","Number":"3619","RawContent":null,"Title":"InvalidOperationException in AuthenticationMiddleware while AuthenticationSchemeProvider.RemoveScheme","State":"open","Body":"In case of simultaneous execution `AuthenticationSchemeProvider.RemoveScheme` from background Task and any request, which uses `AuthenticationMiddleware `may get \r\n```\r\nSystem.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\r\n   at System.Collections.Generic.List`1.Enumerator.MoveNextRare()\r\n   at System.Collections.Generic.List`1.Enumerator.MoveNext()\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.<Invoke>d__6.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.<Invoke>d__8.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   at IdentityServer4.Hosting.BaseUrlMiddleware.<Invoke>d__3.MoveNext()\r\n\r\n```\r\n\r\nBy default `AuthenticationMiddleware `using `AuthenticationSchemeProvider.GetRequestHandlerSchemesAsync()` for retrieving all schemes and enumerate results via foreach.\r\n\r\nProblem occurs when removing scheme from `_requestHandlers `at the moment when enumeration in process from foreach (without any locks)\r\n\r\nMicrosoft.AspNetCore.Authentication.dll version 2.1.1\r\nMicrosoft.AspNetCore.Html.Abstractions.dll 2.1.1\r\n\r\ndotnet info:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3619","RelatedDescription":"Open issue \"InvalidOperationException in AuthenticationMiddleware while AuthenticationSchemeProvider.RemoveScheme\" (#3619)"},{"Id":"369049026","IsPullRequest":false,"CreatedAt":"2018-10-12T08:33:18","Actor":"RehanSaeed","Number":"3613","RawContent":null,"Title":"Add application/manifest+json ( .webmanifest) Static File MIME Type","State":"closed","Body":"The `.webmanifest` file extension should return the `application/manifest+json` MIME type. See [sonarwhal documentation](https://sonarwhal.com/docs/user-guide/rules/manifest-file-extension/) and [W3C](https://w3c.github.io/manifest/#media-type-registration) for reference.\r\n\r\nI raised PR https://github.com/aspnet/StaticFiles/pull/221 for this but it was closed without a reason given.","Url":"https://github.com/aspnet/AspNetCore/issues/3613","RelatedDescription":"Closed issue \"Add application/manifest+json ( .webmanifest) Static File MIME Type\" (#3613)"},{"Id":"369371889","IsPullRequest":false,"CreatedAt":"2018-10-12T02:11:48","Actor":"aspnet-hello","Number":"3617","RawContent":null,"Title":"Test failure: AutobahnTestSuite","State":"open","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=576132&buildTypeId=Releases_21Public_UbuntuUniverse) with the following error:\r\n\r\n```\r\nAutobahn results did not meet expectations:\r\nCase Kestrel|SSL|ManagedSockets:3.2. Expected 'NON-STRICT' or 'OK', but got 'FAILED'\r\nExpected: True\r\nActual:   False\r\n   at Microsoft.AspNetCore.WebSockets.ConformanceTest.Autobahn.AutobahnTester.Verify(AutobahnResult result) in /_/test/Microsoft.AspNetCore.WebSockets.ConformanceTest/Autobahn/AutobahnTester.cs:line 128\r\n   at Microsoft.AspNetCore.WebSockets.ConformanceTest.AutobahnTests.<AutobahnTestSuite>d__2.MoveNext() in /_/test/Microsoft.AspNetCore.WebSockets.ConformanceTest/AutobahnTests.cs:line 79\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n------- Stdout: -------\r\n| [2018-10-12T01:15:23] TestLifetime Information: Starting test AutobahnTestSuite\r\n| [2018-10-12T01:15:23] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Deploying [Variation] :: ServerType=Kestrel, Runtime=CoreClr, Arch=x64, BaseUrlHint=http://localhost:0, Publish=False\r\n| [2018-10-12T01:15:23] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Executing dotnet run --no-build -c Release --framework netcoreapp2.0 -- --server.urls http://localhost:43405/  --server Microsoft.AspNetCore.Server.Kestrel\r\n| [2018-10-12T01:15:23] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: SET ASPNETCORE_ENVIRONMENT=ManagedSockets\r\n| [2018-10-12T01:15:23] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: SET ASPNETCORE_DETAILEDERRORS=true\r\n| [2018-10-12T01:15:23] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Started dotnet. Process Id : 12808\r\n| [2018-10-12T01:15:24] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Using launch settings from /mnt/work/33bdfc1cae7b2a38/modules/WebSockets/test/AutobahnTestApp/Properties/launchSettings.json...\r\n| [2018-10-12T01:15:24] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Using Kestrel, URL: http://localhost:43405/\r\n| [2018-10-12T01:15:24] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Starting Server for Scenario: Unknown\r\n| [2018-10-12T01:15:24] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Hosting environment: ManagedSockets\r\n| [2018-10-12T01:15:24] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Content root path: /mnt/work/33bdfc1cae7b2a38/modules/WebSockets/test/AutobahnTestApp\r\n| [2018-10-12T01:15:24] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Now listening on: http://127.0.0.1:43405\r\n| [2018-10-12T01:15:24] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Application started. Press Ctrl+C to shut down.\r\n| [2018-10-12T01:15:24] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Application ready at URL: http://127.0.0.1:43405/\r\n| [2018-10-12T01:15:24] AutobahnTestApp:Kestrel:NoSSL:ManagedSockets Warning: Retry count 1..\r\n| [2018-10-12T01:15:25] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: \\x1b[40m\\x1b[32minfo\\x1b[39m\\x1b[22m\\x1b[49m: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n| [2018-10-12T01:15:25] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout:       Request starting HTTP/1.1 GET http://127.0.0.1:43405/  \r\n| [2018-10-12T01:15:25] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: \\x1b[40m\\x1b[32minfo\\x1b[39m\\x1b[22m\\x1b[49m: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n| [2018-10-12T01:15:25] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout:       Request finished in 108.086ms 200 \r\n| [2018-10-12T01:15:25] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Deploying [Variation] :: ServerType=Kestrel, Runtime=CoreClr, Arch=x64, BaseUrlHint=https://localhost:0, Publish=False\r\n| [2018-10-12T01:15:25] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Executing dotnet run --no-build -c Release --framework netcoreapp2.0 -- --server.urls https://localhost:55219/  --server Microsoft.AspNetCore.Server.Kestrel\r\n| [2018-10-12T01:15:25] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: SET ASPNETCORE_ENVIRONMENT=ManagedSockets\r\n| [2018-10-12T01:15:25] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: SET ASPNETCORE_DETAILEDERRORS=true\r\n| [2018-10-12T01:15:25] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Started dotnet. Process Id : 12861\r\n| [2018-10-12T01:15:25] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Using launch settings from /mnt/work/33bdfc1cae7b2a38/modules/WebSockets/test/AutobahnTestApp/Properties/launchSettings.json...\r\n| [2018-10-12T01:15:26] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Using Kestrel, URL: https://localhost:55219/\r\n| [2018-10-12T01:15:26] Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Starting Server for S\r\n...\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.1.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)","Url":"https://github.com/aspnet/AspNetCore/issues/3617","RelatedDescription":"Open issue \"Test failure: AutobahnTestSuite\" (#3617)"},{"Id":"369188301","IsPullRequest":false,"CreatedAt":"2018-10-11T15:51:33","Actor":"schmitch","Number":"3616","RawContent":null,"Title":"easy way to have a custom AntiforgeryValidationException Error Page","State":"open","Body":"Hello, currently I have a .net core app (some parts are Razor Pages), currently we also share the same cookie with an old webforms app (thanks owin).\r\n\r\nCurrently if I try to Login with the same browser window in two tabs (i.e. same happens inside the old app), I will get an `400` response without a body, which is really really ugly.\r\nI actually tried everything to get rid of it (even disabling AntiForgery for Login, which I guess does not work?!) but what I actually wanted to do is having a nice looking error page.\r\n\r\nCurrently that is what is happening inside my logs:\r\n```\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.Internal.AutoValidateAntiforgeryTokenAuthorizationFilter[1]\r\n      Antiforgery token validation failed. The provided antiforgery token was meant for a different claims-based user than the current user.\r\nMicrosoft.AspNetCore.Antiforgery.AntiforgeryValidationException: The provided antiforgery token was meant for a different claims-based user than the current user.\r\n   at Microsoft.AspNetCore.Antiforgery.Internal.DefaultAntiforgery.ValidateTokens(HttpContext httpContext, AntiforgeryTokenSet antiforgeryTokenSet)\r\n   at Microsoft.AspNetCore.Antiforgery.Internal.DefaultAntiforgery.ValidateRequestAsync(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ValidateAntiforgeryTokenAuthorizationFilter.OnAuthorizationAsync(AuthorizationFilterContext context)\r\ninfo: Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvoker[3]\r\n      Authorization failed for the request at filter 'Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.AutoValidateAntiforgeryTokenAuthorizationFilter'.\r\n```\r\n\r\nit would be great if there was a way to have an event where I can actually handle the exception and post a nice looking error page to the user, i.e. something like \"you probably already logged in inside another tab\" or if it is not login based (do something different).\r\n\r\nhowever the issue is either one of the following:\r\n1. it's not possible in an easy way to show/redirect a razor view view nice looking error details\r\n2. the easy way is not documented in any way\r\n\r\ni.e. and no it's not a programmer error if a user tries to login twice. (https://github.com/aspnet/Mvc/issues/8276)","Url":"https://github.com/aspnet/AspNetCore/issues/3616","RelatedDescription":"Open issue \"easy way to have a custom AntiforgeryValidationException Error Page\" (#3616)"},{"Id":"369049604","IsPullRequest":false,"CreatedAt":"2018-10-11T10:14:07","Actor":"RehanSaeed","Number":"3614","RawContent":null,"Title":"text/javascript is the \"correct\" Static Files MIME Type","State":"open","Body":"I noticed this change when I got a warning while trying out [Sonar](https://github.com/sonarwhal/sonar/issues/568). Apparently the standards bodies have changed their minds:\r\n\r\n- https://github.com/whatwg/html/pull/3096\r\n- https://github.com/bmeck/I-D/issues/2\r\n\r\nThis is a breaking change. I raised PR https://github.com/aspnet/StaticFiles/pull/220 but it was closed without a reason given for why.","Url":"https://github.com/aspnet/AspNetCore/issues/3614","RelatedDescription":"Open issue \"text/javascript is the \"correct\" Static Files MIME Type\" (#3614)"},{"Id":"368916873","IsPullRequest":false,"CreatedAt":"2018-10-11T01:33:58","Actor":"natemcmaster","Number":"3612","RawContent":null,"Title":"Replace PackageReference to Microsoft.AspNetCore.App with FrameworkReference","State":"open","Body":"### Problem\r\n\r\nMost NuGet packages provide both compilation and runtime assets. Microsoft.**NETCore**.App and Microsoft.**AspNetCore**.App effectively only provide the first - compilation references. Users must install other runtime assets to make .NET Core apps work but this is not obvious or intuitive, and not always possible: for example, Azure Web Apps, AWS, Google Cloud, etc. This violates a reasonable expectation of using a NuGet package, and has been a continual source of confusion for users.\r\n\r\nSee https://github.com/aspnet/AspNetCore/issues/3307 for more context. \r\n\r\n### Proposed solution\r\n\r\nChange the item type used to reference the shared framework in a .csproj file.\r\n\r\n```xml\r\n<ItemGroup>\r\n   <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n</ItemGroup>\r\n```\r\n\r\nUnlike PackageReference, a FrameworkReference item:\r\n\r\n* May not actually be a NuGet package. (It might be -- but that's an implementation detail hidden from users.)\r\n* There is no `Version` attribute\r\n* The version of the FrameworkReference is controlled by `TargetFramework`.\r\n\r\nOpen questions:\r\n* How does a user specify the *runtime* patch version? TFMs only include major.minor\r\n* How is `FrameworkReference` preserved when putting a class library in a NuGet package?\r\n* Are `FrameworkReference` items transitive across `ProjectReference`?\r\n\r\n### Requirements\r\n\r\n* Make Microsoft.AspNetCore.App a ref only package (tracked with #3608)\r\n* Update ASP.NET Core project templates to use FrameworkReference items\r\n* Work with the SDK and tooling team to support this new item type (initial work already done in https://github.com/dotnet/sdk/pull/2486)\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3612","RelatedDescription":"Open issue \"Replace PackageReference to Microsoft.AspNetCore.App with FrameworkReference\" (#3612)"},{"Id":"368911029","IsPullRequest":false,"CreatedAt":"2018-10-11T01:01:12","Actor":"natemcmaster","Number":"3611","RawContent":null,"Title":"Move all MSBuild logic from Microsoft.AspNetCore.App (the package) into an MSBuild SDK","State":"open","Body":"### Problem\r\n\r\nFollow-up to https://github.com/aspnet/AspNetCore/issues/3608. In 2.1 and 2.2, there are some MSBuild targets and tooling bundled in the NuGet packages pulled in by Microsoft.AspNetCore.App. As a part of making Microsoft.AspNetCore.App a shared framework in 2.1, we failed to realize that this would impact MSBuild targets and related tooling. The design of shared frameworks calls for the package version of Microsoft.AspNetCore.App to be pinned and not to update in packages. This makes it difficult to service the MSBuild targets and tooling without also impacting compilation references and runtime versions.\r\n\r\nIn 3.0, this will impacts the following\r\n\r\n* Microsoft.AspNetCore.App\r\n* Microsoft.AspNetCore.Razor.Design\r\n* Microsoft.AspNetCore.Mvc.Razor.Extensions\r\n* Microsoft.Extensions.Configuration.UserSecrets\r\n* Microsoft.Extensions.FileProviders.Embedded\r\n\r\n### Proposed solution\r\n\r\nAll packages that are part of Microsoft.AspNetCore.App should move MSBuild targets and tasks out of the package and into an MSBuild SDK.\r\n\r\n* Targets and tools for Razor compilation move into Microsoft.NET.Sdk.Razor.\r\n* Targets for Microsoft.AspNetCore.App move into Microsoft.NET.Sdk (the `<FrameworkReference>` feature)\r\n* Targets and tasks for Microsoft.Extensions.FileProviders.Embedded move into either:\r\n\t* An in-box SDK like Microsoft.NET.Sdk\r\n\t* A separate package named something like Microsoft.Extensions.FileProviders.Embedded.Sdk which provides build-time only assets\r\n* Targets for Microsoft.Extensions.Configuration.UserSecrets move into Microsoft.NET.Sdk","Url":"https://github.com/aspnet/AspNetCore/issues/3611","RelatedDescription":"Open issue \"Move all MSBuild logic from Microsoft.AspNetCore.App (the package) into an MSBuild SDK\" (#3611)"}],"ResultType":"GitHubIssue"},"Mvc-Issues":{"Issues":[{"Id":"369685101","IsPullRequest":false,"CreatedAt":"2018-10-17T01:26:59","Actor":"rynowak","Number":"8595","RawContent":null,"Title":"Add documentation updates for CompatibilityVersion.Version_2_2","State":"closed","Body":"https://github.com/aspnet/Mvc/blob/b156dee4f175406a7cdcaaeb2b2a393f2a6abca0/src/Microsoft.AspNetCore.Mvc.Core/CompatibilityVersion.cs#L72\r\n\r\nWe've added a few switches for 2.2 and no all of them are mentioned here. We should update the docs so that it's easy to navigate from compat version -> these are the things I need to know.\r\n","Url":"https://github.com/aspnet/Mvc/issues/8595","RelatedDescription":"Closed issue \"Add documentation updates for CompatibilityVersion.Version_2_2\" (#8595)"},{"Id":"370371631","IsPullRequest":false,"CreatedAt":"2018-10-16T21:48:54","Actor":"pranavkm","Number":"8609","RawContent":null,"Title":"Difference in method constraint with 2.1 and endpoint routing","State":"closed","Body":"Not necessarily a bug, but a difference in routing behavior between 2.1 and endpoint that needed to be noted:\r\n\r\nConsider:\r\n```C#\r\n[Route(\"/[controller]/[action]\")]\r\n[Test]\r\npublic class HomeController : Controller\r\n{\r\n    [HttpDelete]\r\n    public IActionResult Index() => View(\"/Pages/Index.cshtml\");\r\n\r\n    public IActionResult Index2() => View(\"/Pages/Index.cshtml\");\r\n\r\n}\r\n\r\npublic class Test : Attribute, IActionHttpMethodProvider\r\n{\r\n    public IEnumerable<string> HttpMethods => new[] { \"GET\", \"PUT\" };\r\n}\r\n```\r\n\r\n\r\nWith 2.1 routing, GET, PUT, DELETE on /Home/Index -> 404\r\nWith 2.2 routing, GET, PUT on /Home/Index -> 405. DELETE -> 200\r\n\r\nFiling an issue so we know are aware of this change in behavior","Url":"https://github.com/aspnet/Mvc/issues/8609","RelatedDescription":"Closed issue \"Difference in method constraint with 2.1 and endpoint routing\" (#8609)"},{"Id":"370809336","IsPullRequest":false,"CreatedAt":"2018-10-16T21:33:58","Actor":"Phrohdoh","Number":"8615","RawContent":null,"Title":"Razor view not being compiled","State":"open","Body":"#### Is this a Bug or Feature request?:\r\n\r\n> Bug\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project):\r\n\r\n> https://github.com/Phrohdoh/repro-aspnetcore-razor-missing\r\n\r\n#### Description of the problem:\r\n\r\nI have two Razor views:\r\n- Views/Account/Login.cshtml\r\n- Views/Account/Register.cshtml\r\n\r\nWhen the project is built (I only use `dotnet`, non-Windows so no VS here) the latter is not compiled.\r\n\r\nSee the linked repo for more information.\r\n\r\nAlso note that `Register.cshtml` is not mentioned once in the output of `dotnet build -v d`.\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\n\r\n> 2.1.4","Url":"https://github.com/aspnet/Mvc/issues/8615","RelatedDescription":"Open issue \"Razor view not being compiled\" (#8615)"},{"Id":"370776224","IsPullRequest":true,"CreatedAt":"2018-10-16T21:04:19","Actor":"natemcmaster","Number":"8614","RawContent":null,"Title":"Update package branding for 2.2 RTM","State":"closed","Body":"","Url":"https://github.com/aspnet/Mvc/pull/8614","RelatedDescription":"Closed or merged PR \"Update package branding for 2.2 RTM\" (#8614)"},{"Id":"370390724","IsPullRequest":true,"CreatedAt":"2018-10-16T20:35:47","Actor":"dotnet-maestro-bot","Number":"8610","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @rynowak\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8610","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8610)"},{"Id":"369272186","IsPullRequest":true,"CreatedAt":"2018-10-16T20:33:50","Actor":"dotnet-maestro-bot","Number":"8586","RawContent":null,"Title":"[automated] Merge branch 'maestro/master' => 'master'","State":"closed","Body":"I detected changes in the maestro/master branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on maestro/master by the following committers:\n\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/maestro/master-to-master:merge/maestro/master-to-master\r\ngit merge merge/maestro/master-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/maestro/master-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on maestro/master.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8586","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'maestro/master' => 'master'\" (#8586)"},{"Id":"369274369","IsPullRequest":true,"CreatedAt":"2018-10-16T20:13:14","Actor":"dotnet-maestro-bot","Number":"8588","RawContent":null,"Title":"[automated] Merge branch 'maestro/release/2.2' => 'release/2.2'","State":"closed","Body":"I detected changes in the maestro/release/2.2 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on maestro/release/2.2 by the following committers:\n\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/maestro/release/2.2-to-release/2.2:merge/maestro/release/2.2-to-release/2.2\r\ngit merge merge/maestro/release/2.2-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/maestro/release/2.2-to-release/2.2' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on maestro/release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8588","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'maestro/release/2.2' => 'release/2.2'\" (#8588)"},{"Id":"369759932","IsPullRequest":false,"CreatedAt":"2018-10-16T20:08:10","Actor":"aspnet-hello","Number":"8600","RawContent":null,"Title":"Test failure: OriginMatched_ReturnsHeaders","State":"closed","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=577277&buildTypeId=XPlat_Linux_UbuntuUniverseCoreCLR) with the following error:\r\n\r\n```\r\nAssert.Collection() Failure\r\nCollection: []\r\nExpected item count: 2\r\nActual item count:   0\r\n   at Microsoft.AspNetCore.Mvc.FunctionalTests.CorsTestsBase`1.OriginMatched_ReturnsHeaders(String method) in /_/test/Microsoft.AspNetCore.Mvc.FunctionalTests/CorsTestsBase.cs:line 137\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @mkArtakMSFT","Url":"https://github.com/aspnet/Mvc/issues/8600","RelatedDescription":"Closed issue \"Test failure: OriginMatched_ReturnsHeaders\" (#8600)"},{"Id":"369759946","IsPullRequest":false,"CreatedAt":"2018-10-16T20:07:52","Actor":"aspnet-hello","Number":"8601","RawContent":null,"Title":"Test failure: SuccessfulCorsRequest_AllowsCredentials_IfThePolicyAllowsCredentials","State":"closed","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=577277&buildTypeId=XPlat_Linux_UbuntuUniverseCoreCLR) with the following error:\r\n\r\n```\r\nAssert.Equal() Failure\r\nExpected: String[] [\"*\"]\r\nActual:   String[] [\"http://example.com\"]\r\n   at Microsoft.AspNetCore.Mvc.FunctionalTests.CorsTestsBase`1.SuccessfulCorsRequest_AllowsCredentials_IfThePolicyAllowsCredentials() in /_/test/Microsoft.AspNetCore.Mvc.FunctionalTests/CorsTestsBase.cs:line 162\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @mkArtakMSFT","Url":"https://github.com/aspnet/Mvc/issues/8601","RelatedDescription":"Closed issue \"Test failure: SuccessfulCorsRequest_AllowsCredentials_IfThePolicyAllowsCredentials\" (#8601)"},{"Id":"370774160","IsPullRequest":false,"CreatedAt":"2018-10-16T19:56:18","Actor":"pranavkm","Number":"8613","RawContent":null,"Title":"Link generation with conventional routes is broken with endpoint routing","State":"open","Body":"Title needs tweaking, but here's the gist of it:\r\n\r\n```C#\r\n// Startup:\r\napp.UseMvc(routes =>\r\n{\r\n    routes.MapRoute(\r\n        name: \"default\",\r\n        template: \"{controller=Home}/{action=Index}/{id?}\");\r\n});\r\n\r\n// Controller\r\npublic class HomeController : Controller\r\n{\r\n    public IActionResult Index(int id)\r\n    {\r\n        return View();\r\n    }\r\n}\r\n\r\n// Index.cshtml\r\n<a asp-route-id=\"3\">Link to item 3</a>\r\n```\r\n\r\n**Expected**: (also what I get with 2.1 routing): `/Home/Index/3`\r\n**Actual**: `/?id=3`\r\n\r\n","Url":"https://github.com/aspnet/Mvc/issues/8613","RelatedDescription":"Open issue \"Link generation with conventional routes is broken with endpoint routing\" (#8613)"},{"Id":"370739411","IsPullRequest":false,"CreatedAt":"2018-10-16T18:22:51","Actor":"pranavkm","Number":"8612","RawContent":null,"Title":"API for specifying an IOutboundParameterTransformer needs some polish","State":"open","Body":"I used the code here - https://github.com/aspnet/Mvc/blob/9daf5ff7a4e092b3a84c060c44148d7d5d40b5c3/test/WebSites/RoutingWebSite/Startup.cs#L25-L27 - as a template for configuring a transformer for my application. I would have expected specifying the transformer to be a property on `SelectorModel`. If that's difficult due to the design, maybe it needs a first class extension - `ActionModel.SetOutboundParameterTransformer`. Additionally, I tried setting the property value to a a type:\r\n\r\n`action.Properties[typeof(IOutboundParameterTransformer)] = typeof(UpperCaseTransformer);` \r\n\r\nand it no-oped without an error or any hint on what was incorrect.","Url":"https://github.com/aspnet/Mvc/issues/8612","RelatedDescription":"Open issue \"API for specifying an IOutboundParameterTransformer needs some polish\" (#8612)"},{"Id":"370701720","IsPullRequest":false,"CreatedAt":"2018-10-16T16:44:32","Actor":"mkArtakMSFT","Number":"8611","RawContent":null,"Title":"Unable to map error codes to custom problem details via `ApiBehaviorOptions`","State":"open","Body":"In my controller (`ApiController`) the action returns `BadRequest()`:\r\n\r\n```csharp\r\nreturn BadRequest();\r\n```\r\n\r\nIn the startup I have the following mapping defined:\r\n```csharp\r\nservices.Configure<ApiBehaviorOptions>(options =>\r\n{\r\n    options.ClientErrorMapping.Add(400, new ClientErrorData { Link = \"sample link\", Title = \"fake error customized\" });\r\n});\r\n```\r\nBut this has no effect and client gets the usual `ProblemDetails` error - no matter whether I have that mapping or not:\r\n\r\n```json\r\n{\r\n    \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\r\n    \"title\": \"Bad Request\",\r\n    \"status\": 400,\r\n    \"traceId\": \"0HLHJ0KNGN7K7:00000002\"\r\n}\r\n```\r\n","Url":"https://github.com/aspnet/Mvc/issues/8611","RelatedDescription":"Open issue \"Unable to map error codes to custom problem details via `ApiBehaviorOptions`\" (#8611)"},{"Id":"369720662","IsPullRequest":true,"CreatedAt":"2018-10-16T00:04:17","Actor":"rynowak","Number":"8598","RawContent":null,"Title":"Update docs for compat switch value","State":"closed","Body":"https://github.com/aspnet/Mvc/issues/8595","Url":"https://github.com/aspnet/Mvc/pull/8598","RelatedDescription":"Closed or merged PR \"Update docs for compat switch value\" (#8598)"},{"Id":"370351270","IsPullRequest":false,"CreatedAt":"2018-10-15T21:28:43","Actor":"johnrom","Number":"8608","RawContent":null,"Title":"TagHelpers block on Async code","State":"open","Body":"#### Is this a Bug or Feature request?:\r\n\r\nBug\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project):\r\n\r\nCreate a new Asp.net Core Web Application project, install https://github.com/benaadams/Ben.BlockingDetector\r\n\r\nAdd middleware: `app.UseBlockingDetection();`\r\n\r\n#### Description of the problem:\r\n\r\nTagHelpers use async function (`ProcessAsync`) which then call `GetHashForFile` synchronously (`PartialViewTagHelper`, `ScriptTagHelper`, `LinkTagHelper`). They should instead open a stream asynchronously and then compute hash.\r\n\r\nMaybe related: https://github.com/aspnet/Mvc/issues/6371\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\n\r\n`netcoreapp2.1`, `AspNetCore.Mvc 2.1.1`\r\n","Url":"https://github.com/aspnet/Mvc/issues/8608","RelatedDescription":"Open issue \"TagHelpers block on Async code\" (#8608)"},{"Id":"370320715","IsPullRequest":false,"CreatedAt":"2018-10-15T20:00:08","Actor":"Eilon","Number":"8607","RawContent":null,"Title":"A problem about model binding in webapi","State":"open","Body":"_From @fanslead on Friday, 12 October 2018 07:31:38_\r\n\r\nEnvironment: .net core sdk version 2.1.403 and Microsoft.AspNetCore.App version 2.1.5\r\nA model like this\r\n![image](https://user-images.githubusercontent.com/22066473/46852971-5a62a880-ce2f-11e8-873f-9e7573300541.png)\r\nYou have an api need this model parameter from body and Content-Type is application/json.\r\nNormally we will send the json data like \r\n![image](https://user-images.githubusercontent.com/22066473/46853643-46b84180-ce31-11e8-8d52-34d8168934ab.png)\r\nBut if we make a mistake about the type of one of the fields, the model parameter we received in back-end will be null and without throw any exception.\r\n![image](https://user-images.githubusercontent.com/22066473/46854272-ddd1c900-ce32-11e8-8f5a-b61c04fd48bd.png)\r\nI think even if no exception is thrown, the model parameter should not be null, keep the data of correct field  at least.\r\n\r\n_Copied from original issue: aspnet/AspNetCore#3618_","Url":"https://github.com/aspnet/Mvc/issues/8607","RelatedDescription":"Open issue \"A problem about model binding in webapi\" (#8607)"},{"Id":"370319651","IsPullRequest":false,"CreatedAt":"2018-10-15T19:57:18","Actor":"Eilon","Number":"8606","RawContent":null,"Title":"Extensions Package for DataAnnotations: Recursively validating an entire object graph","State":"open","Body":"_From @spottedmahn on Sunday, 14 October 2018 17:52:02_\r\n\r\nCan the code that validates an object graph in ASP.NET Core MVC be moved to a `Microsoft.Extensions` package to allow for re-use outside of MVC?\r\n\r\n---\r\n\r\n### Background\r\n\r\nI wanted to validate an object and I learned of this limitation on the `Validator`:\r\n\r\n>It does not recursively validate the property values of the object.\r\n\r\nSource: [Validator.TryValidateObject Method](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.validator.tryvalidateobject?view=netcore-2.1)\r\n\r\n### MVC Does this, 🤔\r\n\r\nBut I know ASP.NET Core MVC validates the whole object graph.  How can I use it?\r\n\r\nIt seems that [`Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVistor`](https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Validation/ValidationVisitor.cs) seems to do the magic but it seems to be tied to MVC based upon the dependencies:\r\n\r\n```csharp\r\npublic ValidationVisitor(\r\n            ActionContext actionContext,\r\n            IModelValidatorProvider validatorProvider,\r\n            ValidatorCache validatorCache,\r\n            IModelMetadataProvider metadataProvider,\r\n            ValidationStateDictionary validationState)\r\n        { .... }\r\n```\r\n\r\n### Additional Notes\r\n\r\nReference: [StackOverflow post](https://stackoverflow.com/questions/7663501/dataannotations-recursively-validating-an-entire-object-graph/7665862)\r\n\r\nOpen Source Package to validate the object graph: [reustmd/DataAnnotationsValidatorRecursive](https://github.com/reustmd/DataAnnotationsValidatorRecursive)\r\n\r\n_Copied from original issue: aspnet/AspNetCore#3626_","Url":"https://github.com/aspnet/Mvc/issues/8606","RelatedDescription":"Open issue \"Extensions Package for DataAnnotations: Recursively validating an entire object graph\" (#8606)"},{"Id":"370312105","IsPullRequest":false,"CreatedAt":"2018-10-15T19:35:08","Actor":"pranavkm","Number":"8605","RawContent":null,"Title":"LinkGeneration + PathBase plans","State":"open","Body":"Consider:\r\n\r\n```C#\r\napp.Map(\"/test\", subApp =>\r\n{\r\n    subApp.Run(async context =>\r\n    {\r\n        var linkGenerator = context.RequestServices.GetRequiredService<LinkGenerator>();\r\n        var url = linkGenerator.GetPathByAction(context, \"Index\", \"Home\");\r\n\r\n        await context.Response.WriteAsync($\"<a href=\\\"{url}\\\">Click me</a>\");\r\n    });\r\n});\r\n\r\napp.UseMvc(routes =>\r\n{\r\n    routes.MapRoute(\"default\", \"{controller=Home}/{action}\");\r\n});\r\n```\r\n\r\nThe path generated by `LinkGenerator` uses the `PathBase` of the current request and incorrectly produces `/test/Home/Index`. Are there any plans to try and get link generation to work correctly with middleware branches? Since the branch participates in link generation, I'd expect ~~global~~ routing to be aware of it.","Url":"https://github.com/aspnet/Mvc/issues/8605","RelatedDescription":"Open issue \"LinkGeneration + PathBase plans\" (#8605)"},{"Id":"369800552","IsPullRequest":false,"CreatedAt":"2018-10-15T17:05:30","Actor":"patrickboe","Number":"8602","RawContent":null,"Title":"unsupported content types do not elicit a 415 Media Type Unsupported code","State":"closed","Body":"#### Is this a Bug or Feature request?:\r\nBug\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project):\r\nhttps://github.com/patrickboe/media_type_bug\r\n\r\n#### Description of the problem:\r\nMaking a request to a web api project which specifies an unsupported content type produces a \"400 Bad Request\" instead of \"415 Media Type Unsupported\" response because of the application order of action filters on the default MVC request pipeline. If a content type we can't read is specified, the more specific 415 error should be prioritized and served to the user.\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\nRazor.Design 2.1.2\r\n\r\n<!--\r\n                                    --- NOTE ---\r\n1.  Try enabling logging (in the most verbose level) and see if the details help you in fixing\r\n    the issue you are seeing. Share the logs too if it helps in diagnosing the issue faster.\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging\r\n\r\n2.  If you are seeing an exception, include the full exceptions details (message and stack trace).\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling\r\n\r\n3.  If you believe you have an issue that affects the security of the platform please do\r\n    not create an issue, instead email your issue to 'secure@microsoft.com'. Your report may\r\n    be eligible for our bug bounty. More info: https://technet.microsoft.com/en-us/mt764065.aspx\r\n-->\r\n","Url":"https://github.com/aspnet/Mvc/issues/8602","RelatedDescription":"Closed issue \"unsupported content types do not elicit a 415 Media Type Unsupported code\" (#8602)"},{"Id":"370145213","IsPullRequest":true,"CreatedAt":"2018-10-15T12:43:48","Actor":"poke","Number":"8604","RawContent":null,"Title":"WIP: Allow custom handling of antiforgery failures","State":"open","Body":"This is an attempt to fix the problem highlighted in https://github.com/aspnet/AspNetCore/issues/3616 and adds support to allow custom handling of antiforgery validation failures. Right now, the `ValidateAntiforgeryTokenAuthorizationFilter` simply sets a `BadRequestResult` and there is no way to hook into this behavior and do anything else. Since the filter is an authorization filter, it shortcircuits before you have any chance to change its result after the fact. And even if there was a way for that, the result being a plain `BadRequestResult` would make it impossible to identify it.\r\n\r\nAs briefly suggested in https://github.com/aspnet/AspNetCore/issues/3616, this could be done by a custom `AntiforgeryValidationFailedResult` that offered a way to hook into the result execution. For this purpose, this change would be accompanied by a PR to [aspnet/Antiforgery](https://github.com/aspnet/Antiforgery) with the following diff:\r\n\r\n```diff\r\n--- a/src/Microsoft.AspNetCore.Antiforgery/AntiforgeryOptions.cs\r\n+++ b/src/Microsoft.AspNetCore.Antiforgery/AntiforgeryOptions.cs\r\n@@ -83,6 +84,12 @@ public string FormFieldName\r\n         /// </summary>\r\n         public bool SuppressXFrameOptionsHeader { get; set; }\r\n \r\n+        /// <summary>\r\n+        /// Specifies a custom handler for an antiforgery validation failed result.\r\n+        /// If this property is set, the default behavior will be replaced.\r\n+        /// </summary>\r\n+        public Func<HttpContext, Task> ValidationFailedResultHandler { get; set; }\r\n+\r\n         #region Obsolete API\r\n         /// <summary>\r\n         /// <para>\r\n```\r\n\r\nI haven’t done a PR for that yet, as I would like to gather feedback for this first. So let me know what you think.\r\n\r\nTo be honest, I’m not too happy with the handler just taking the `HttpContext` but since Antiforgery has no dependency on MVC, we cannot use the `ActionContext` there.","Url":"https://github.com/aspnet/Mvc/pull/8604","RelatedDescription":"Open PR \"WIP: Allow custom handling of antiforgery failures\" (#8604)"},{"Id":"369837479","IsPullRequest":false,"CreatedAt":"2018-10-13T20:19:44","Actor":"cortex93","Number":"8603","RawContent":null,"Title":"Mimic CreateXXX methods from TestServer in WebApplicationFactory","State":"open","Body":"Currently, WebApplicationFactory only expose CreateHttpClient.\r\n\r\nI have a use case where I use HttpClient factory to create the client. The IHttpMessageHandlerBuilderFilter allow to configure the PrimaryHandler but the only way to get a test HttpMessageHandler, is to call CreateClient first to initialize the Server property, then use this Server property.\r\nI think the same applies if you want to test websocket calls.\r\n\r\nIt would be easier to have the same set of Create method as TestServer or if we must use the property, having a way to call EnsureServer publicly.\r\n","Url":"https://github.com/aspnet/Mvc/issues/8603","RelatedDescription":"Open issue \"Mimic CreateXXX methods from TestServer in WebApplicationFactory\" (#8603)"},{"Id":"369686820","IsPullRequest":false,"CreatedAt":"2018-10-13T00:26:47","Actor":"aspnet-hello","Number":"8597","RawContent":null,"Title":"Test failure: SuccessfulPreflightRequest_AllowsCredentials_IfThePolicyAllowsCredentials","State":"closed","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=576625&buildTypeId=Releases_22xPublic_UbuntuUniverse) with the following error:\r\n\r\n```\r\nAssert.Equal() Failure\r\nExpected: String[] [\"*\"]\r\nActual:   String[] [\"http://example.com\"]\r\n   at Microsoft.AspNetCore.Mvc.FunctionalTests.CorsTestsBase`1.SuccessfulPreflightRequest_AllowsCredentials_IfThePolicyAllowsCredentials() in /_/test/Microsoft.AspNetCore.Mvc.FunctionalTests/CorsTestsBase.cs:line 195\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @mkArtakMSFT","Url":"https://github.com/aspnet/Mvc/issues/8597","RelatedDescription":"Closed issue \"Test failure: SuccessfulPreflightRequest_AllowsCredentials_IfThePolicyAllowsCredentials\" (#8597)"},{"Id":"369686770","IsPullRequest":false,"CreatedAt":"2018-10-13T00:26:31","Actor":"aspnet-hello","Number":"8596","RawContent":null,"Title":"Test failure: OriginMatched_ReturnsHeaders","State":"closed","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=576625&buildTypeId=Releases_22xPublic_UbuntuUniverse) with the following error:\r\n\r\n```\r\nAssert.Collection() Failure\r\nCollection: []\r\nExpected item count: 2\r\nActual item count:   0\r\n   at Microsoft.AspNetCore.Mvc.FunctionalTests.CorsTestsBase`1.OriginMatched_ReturnsHeaders(String method) in /_/test/Microsoft.AspNetCore.Mvc.FunctionalTests/CorsTestsBase.cs:line 137\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @mkArtakMSFT","Url":"https://github.com/aspnet/Mvc/issues/8596","RelatedDescription":"Closed issue \"Test failure: OriginMatched_ReturnsHeaders\" (#8596)"},{"Id":"369272413","IsPullRequest":true,"CreatedAt":"2018-10-12T22:58:31","Actor":"dotnet-maestro-bot","Number":"8587","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @pranavkm\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8587","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8587)"},{"Id":"369727993","IsPullRequest":true,"CreatedAt":"2018-10-12T22:16:33","Actor":"pranavkm","Number":"8599","RawContent":null,"Title":"Add a switch to allow turning on ValidationVisitor shortcircuiting","State":"open","Body":"","Url":"https://github.com/aspnet/Mvc/pull/8599","RelatedDescription":"Open PR \"Add a switch to allow turning on ValidationVisitor shortcircuiting\" (#8599)"},{"Id":"369392763","IsPullRequest":true,"CreatedAt":"2018-10-12T04:55:00","Actor":"dougbu","Number":"8594","RawContent":null,"Title":"Fix builds that do real signing e.g. UniverseCoherence","State":"closed","Body":"","Url":"https://github.com/aspnet/Mvc/pull/8594","RelatedDescription":"Closed or merged PR \"Fix builds that do real signing e.g. UniverseCoherence\" (#8594)"},{"Id":"369281934","IsPullRequest":true,"CreatedAt":"2018-10-11T22:51:22","Actor":"dougbu","Number":"8589","RawContent":null,"Title":"Add Newtonsoft.Json.dll to Microsoft.Extensions.ApiDescription.Design package","State":"closed","Body":"- also remove dotnet-getdocument.runtimeconfig.dev.json file","Url":"https://github.com/aspnet/Mvc/pull/8589","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json.dll to Microsoft.Extensions.ApiDescription.Design package\" (#8589)"},{"Id":"369327006","IsPullRequest":true,"CreatedAt":"2018-10-11T22:41:15","Actor":"Psypher9","Number":"8591","RawContent":null,"Title":"UrlHelperBase L166-167 declared type of url `out` parameter in TryFastGenerateUrl","State":"closed","Body":"This is a really simple edit, but I was just looking through the `UrlHelperBase` to see where some Ambient Route Values were coming from (like when using  `Url.Action` extension method) when I noticed this line and thought that we weren't getting the full value of using the `out` parameter. \r\n\r\nI couldn't find any other references to the `url` and thought that this might be worth editing to make the line more clear and leverage the use of a typed `out` parameter.","Url":"https://github.com/aspnet/Mvc/pull/8591","RelatedDescription":"Closed or merged PR \"UrlHelperBase L166-167 declared type of url `out` parameter in TryFastGenerateUrl\" (#8591)"},{"Id":"369329850","IsPullRequest":false,"CreatedAt":"2018-10-11T22:27:52","Actor":"dougbu","Number":"8593","RawContent":null,"Title":"Support `IDocumentProvider` methods named `GenerateAsync`","State":"open","Body":"#### Is this a Bug or Feature request?\r\nEnhancement that's part of #7947. Adds support for a different `IDocumentProvider`.\r\n\r\nCould also be considered a bug since the [features/client.code.generation](https://github.com/aspnet/Mvc/tree/feature/client.code.generation) branch is inconsistent with what we're doing in the RSuter/NSwag#1658 PR.\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project)\r\n1. Create new console project\r\n2. Add reference to manually-built NSwag.MSBuild.CodeGeneration package (relying on the Microsoft.Extensions.ApiDescription.Design package -- version `2.2.0-a-preview3-client-code-generation-19114` in my local NSwag build)\r\n3. Add the following to the .csproj file, referring to a server project that uses manually built NSwag.AspNetCore:\r\n  ```\r\n  <ServiceProjectReference Include=\"../TrialNSwag/TrialNSwag.csproj\"\r\n      CodeGenerator=\"NSwagCSharp\"\r\n      DocumentPath=\"TrialNSwag1.json\"\r\n      GenerateNSwagCSharpOptions=\"/GenerateExceptionClasses:false\" />\r\n  ```\r\n4. `dotnet build`\r\n##### Expected\r\nSuccessful build\r\n##### Actual\r\n```\r\nGenerateDefaultDocument:\r\n    dotnet C:\\Users\\dougbu\\.nuget\\packages\\microsoft.extensions.apidescription.design\\2.2.0-preview3-t0071b0e8a\\build\\/../tools/dotnet-getdocument.dll --project C:\\dd\\Projects\\CodeGeneration.II\\TrialNSwag\\TrialNSwag.csproj --framework netcoreapp2.1 --output C:\\dd\\Projects\\CodeGeneration.II\\ClientConsole\\TrialNSwag1.json --configuration Debug\r\n  Using document name 'v1'.\r\n  Using method 'Generate'.\r\n  Using service 'Microsoft.Extensions.ApiDescription.IDocumentProvider'.\r\n  System.NullReferenceException: Object reference not set to an instance of an object.\r\n```\r\n\r\n#### Description of the problem\r\nThe `dotnet-getdocument` tool included in the Microsoft.Extensions.ApiDescription.Design package (actually its inside man) looks only for methods named `Generate` in the `IDocumentProvider` service. This doesn't match what @rynowak did in the RSuter/NSwag#1658 PR. (@RSuter's prefers the `async` pattern here.)\r\n\r\nFix is to try `GenerateAsync` first and `Generate` second. Support `Task` and `Task<bool>` if `GenerateAsync` is found; `void` and `bool` otherwise.\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`\r\nSee the [features/client.code.generation](https://github.com/aspnet/Mvc/tree/feature/client.code.generation) branch. That work is intended for the 2.2 Preview 3 milestone.","Url":"https://github.com/aspnet/Mvc/issues/8593","RelatedDescription":"Open issue \"Support `IDocumentProvider` methods named `GenerateAsync`\" (#8593)"},{"Id":"369327269","IsPullRequest":false,"CreatedAt":"2018-10-11T22:18:32","Actor":"dougbu","Number":"8592","RawContent":null,"Title":"Make `AnsiTextWriter` disposable","State":"open","Body":"#### Is this a Bug or Feature request?\r\nBug that's part of #7947.\r\n\r\n#### Description of the problem\r\nThe `dotnet-getdocument` tool's inside man (`GetDocument.Insider.dll` and `GetDocument.Insider.exe`) included in the Microsoft.Extensions.ApiDescription.Design package includes an `AnsiTextWriter` which wraps a `TextWriter`. Since `TextWriter` is disposable, `AnsiTextWriter` should be disposable. See https://github.com/aspnet/Mvc/pull/8585/files/5cd86977eda1d06e6619e3f75bded8ee40761a2c#diff-5c5b5339e8860132f6ec780706eac317R11 and @mkArtakMSFT's comment [here](https://github.com/aspnet/Mvc/pull/8585/files/5cd86977eda1d06e6619e3f75bded8ee40761a2c#r224618340) in PR #8585.\r\n\r\n`AnsiConsole` wraps an `AnsiTextWriter` instance but is never instantiated (its wrapped  `AnsiTextWriter` instance is `static`). Therefore, `AnsiConsole` doesn't need to be `IDisposable`.\r\n\r\n##### Note\r\n`AnsiTextWriter` should be removed as part of #8566. Should close this issue if we do that one first.\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`\r\nSee the [features/client.code.generation](https://github.com/aspnet/Mvc/tree/feature/client.code.generation) branch. That work is intended for the 2.2 Preview 3 milestone.","Url":"https://github.com/aspnet/Mvc/issues/8592","RelatedDescription":"Open issue \"Make `AnsiTextWriter` disposable\" (#8592)"},{"Id":"369283890","IsPullRequest":true,"CreatedAt":"2018-10-11T20:04:35","Actor":"dougbu","Number":"8590","RawContent":null,"Title":"Find `IDocumentProvider` using a more-laborious process","State":"open","Body":"- `Type.GetType(string)` requires an assembly-qualified name and we don't know the assembly\r\n\r\nnit:\r\n- reflect recent change to `dotnet-getdocument`'s `Resources.resx` file in its designer file","Url":"https://github.com/aspnet/Mvc/pull/8590","RelatedDescription":"Open PR \"Find `IDocumentProvider` using a more-laborious process\" (#8590)"}],"ResultType":"GitHubIssue"},"SignalR-Issues":{"Issues":[{"Id":"370903474","IsPullRequest":false,"CreatedAt":"2018-10-17T05:23:38","Actor":"hannespreishuber","Number":"3145","RawContent":null,"Title":"UWP 504 ","State":"open","Body":"building a prototype\r\n.net core 2.1 MVC -index.html using the chat code sample\r\nSignalR 1.04\r\nstart with iisexpress\r\nseem to work (the message encoding doenst)\r\n\r\n\r\nUWP 16299 min Signalr 1.04\r\n connection = new HubConnectionBuilder()\r\n .WithUrl(\"http://localhost:44350/myhub\")\r\n .Build();\r\n…..\r\nconnection.StartAsync();\r\n\r\n\r\nException (nonsense text)\r\ngetting POST /myhub/negotiate HTTP/1.1 504 with fiddler\r\n\r\n1) reason\r\n2) how to troubleshoot that magic?","Url":"https://github.com/aspnet/SignalR/issues/3145","RelatedDescription":"Open issue \"UWP 504 \" (#3145)"},{"Id":"370850899","IsPullRequest":false,"CreatedAt":"2018-10-17T00:28:45","Actor":"anurse","Number":"3144","RawContent":null,"Title":"Browser tests aren't running in TeamCity CI","State":"open","Body":"Our browser tests aren't running on every build in TeamCity. The tests just silently no-op if there are no suitable browsers, and some agents don't have the right browsers. We should:\r\n\r\n1. Change the tests to fail loudly if no browsers are available when running on the CI\r\n1. Install at least a browser on each TeamCity agent\r\n\r\nNote: The tests **are** running on VSTS so we have some coverage.","Url":"https://github.com/aspnet/SignalR/issues/3144","RelatedDescription":"Open issue \"Browser tests aren't running in TeamCity CI\" (#3144)"},{"Id":"369830331","IsPullRequest":true,"CreatedAt":"2018-10-16T21:44:21","Actor":"dotnet-maestro-bot","Number":"3131","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @davidfowl\n* @mikaelm12\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/3131","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#3131)"},{"Id":"369935834","IsPullRequest":true,"CreatedAt":"2018-10-16T20:12:55","Actor":"dotnet-maestro-bot","Number":"3132","RawContent":null,"Title":"[automated] Merge branch 'maestro/master' => 'master'","State":"closed","Body":"I detected changes in the maestro/master branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on maestro/master by the following committers:\n\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/maestro/master-to-master:merge/maestro/master-to-master\r\ngit merge merge/maestro/master-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/maestro/master-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on maestro/master.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/3132","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'maestro/master' => 'master'\" (#3132)"},{"Id":"370292544","IsPullRequest":true,"CreatedAt":"2018-10-16T19:07:57","Actor":"mikaelm12","Number":"3135","RawContent":null,"Title":"Check if HubConnection stopped normally in Chat sample","State":"closed","Body":"*This isn't a product issue*\r\nThe `OnClosed ` callbacks get an optional exception parameter which gets passed in when the `HubConnection ` stops with an error. If the `HubConnection ` stops normally the exception is null and the chat sample we have null refs as the application closes. ","Url":"https://github.com/aspnet/SignalR/pull/3135","RelatedDescription":"Closed or merged PR \"Check if HubConnection stopped normally in Chat sample\" (#3135)"},{"Id":"369746415","IsPullRequest":false,"CreatedAt":"2018-10-16T17:29:18","Actor":"WesleySSmith","Number":"3126","RawContent":null,"Title":"Frequent 404 error when connecting websocket to Azure SignalR from Safari 11.1 and some mobile browsers","State":"closed","Body":"* Versions of Server-Side NuGet Packages:\r\n1.0.0\r\n* Versions of Client-Side NuGet/NPM Packages:\r\n1.0.3 and 1.0.4\r\n* Are you using the C# client or the JavaScript client:\r\nJavaScript\r\n* The Server you are using (Kestrel/HttpSysServer/IIS/IIS Express/Azure Web App/etc.): \r\nAzure Web App along with Azure SignalR service\r\n* The Operating System on the Server (Windows/Linux/macOS):\r\nAzure\r\n* The Operating System on the Client (Windows/Linux/macOS):\r\nMacOS\r\n* The Browser on the client, if using the JavaScript client (IE/Chrome/Edge/Firefox/etc.):\r\nSafari 11.1\r\n\r\n\r\nI have a Azure SignalR resource using a paid plan. I also have a Azure App Service website that is a ASP.NET Core application that uses this SignalR resource.  On my Windows Chrome or Windows Edge browsers, I can visit my website and SignalR works as expected.  But on Safari 11.1.2 for Mac, as well as some mobile browsers, SignalR does not work as expected.\r\n\r\n1) The browser makes an OPTIONS call to my /negotiate page\r\n\r\n2) The browser POSTs to the /negotiate page on my website, and I see the response come back like this, as expected.\r\n\r\n`{'url':'https://testsignalrservice3.service.signalr.net/client/?hub=signalrhub&asrs.op=%2FSignalRHub','accessToken':'XXX','availableTransports':[]}`\r\n\r\n3) The browser makes an OPTIONS call to the Azure service\r\n\r\n4) The browser makes a POST to the https://testsignalrservice3.service.signalr.net/client/negotiate?hub=signalrhub&asrs.op=%2FSignalRHub  resource of Azure SignalR, and the response is as expected:\r\n\r\n`{'connectionId':'XAram2iUlvfeF0pPjDECyw','availableTransports':[{'transport':'WebSockets','transferFormats':['Text','Binary']},{'transport':'ServerSentEvents','transferFormats':['Text']},{'transport':'LongPolling','transferFormats':['Text','Binary']}]}`\r\n\r\n5) The browser try to establish the web socket connection to:\r\n\r\nwss://testsignalrservice3.service.signalr.net/client/?hub=signalrhub&asrs.op=%2FSignalRHub&id=XAram2iUlvfeF0pPjDECyw&access_token=XXX\r\n\r\nHowever, Azure SignalR's response to this is a 404.  \r\n\r\n\r\n\r\nI have found that if I reload the page over and over, the websocket connects maybe once every 5 times, so there's some element of a race condition or chance involved.\r\n\r\nOne  possible clue that I've found when comparing the network traces between the working (Chrome) and failing (Safari) cases:  when Safari makes the websocket connection (#5 above) , it **doesn't** pass the SIGNALRROUTE cookie that the negotiate call returned (in step #4) , whereas I notice that Chrome on Windows **does** pass that cookie.  \r\n\r\nMy theory is that without that cookie, the Azure SignalR service doesn't properly handle the request and returns a 404.\r\n\r\nAttaching console traces and fiddler .saz traces of the working (chrome) and failing (safari) cases.\r\n\r\n[WorkingSignalR connect.saz.txt](https://github.com/aspnet/SignalR/files/2474878/WorkingSignalR.connect.saz.txt)\r\n[Failed console.txt](https://github.com/aspnet/SignalR/files/2474879/Failed.console.txt)\r\n[FailedSignalR connect.saz.txt](https://github.com/aspnet/SignalR/files/2474880/FailedSignalR.connect.saz.txt)\r\n[Working console.txt](https://github.com/aspnet/SignalR/files/2474881/Working.console.txt)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/3126","RelatedDescription":"Closed issue \"Frequent 404 error when connecting websocket to Azure SignalR from Safari 11.1 and some mobile browsers\" (#3126)"},{"Id":"370696578","IsPullRequest":false,"CreatedAt":"2018-10-16T16:30:38","Actor":"anurse","Number":"3143","RawContent":null,"Title":"Verify and document minimum Android API Level","State":"open","Body":"Currently, because of #3141, the minimum [Android API Level](https://source.android.com/setup/start/build-numbers) we supports is API Level 26 (Android 8.0.0 \"Oreo\").\r\n\r\nWe should try to move this down as far as we reasonably can. If anyone is using the Java Client in an Android app, it would be great to hear from your what your minimum API Level is so we know what level would reach the most users! Please comment on this thread with the minimum API Level you require for your application.\r\n\r\nOnce we've decided on a minimum level, we should investigate options for validating that our library sticks with that API level, and we should publish the minimum level in the [docs for the Java Client](https://docs.microsoft.com/en-us/aspnet/core/signalr/java-client?view=aspnetcore-2.2)","Url":"https://github.com/aspnet/SignalR/issues/3143","RelatedDescription":"Open issue \"Verify and document minimum Android API Level\" (#3143)"},{"Id":"370680409","IsPullRequest":false,"CreatedAt":"2018-10-16T15:51:07","Actor":"anurse","Number":"3142","RawContent":null,"Title":"Ensure subclasses of DefaultHubDispatcher can catch and process exceptions triggered by Hub methods","State":"open","Body":"Right now, if you inherit from DefaultHubDispatcher, you can catch some of the exceptions triggered by Hub methods like `OnConnectedAsync`. This is good! However, if an exception is thrown while invoking a Hub method, it is caught and suppressed within [`ProcessInvocation`](\"https://github.com/aspnet/SignalR/blob/bc148a07244a451e48b7e0efdf16db8f69f788ff/src/Microsoft.AspNetCore.SignalR.Core/Internal/DefaultHubDispatcher.cs#L164\") which is `private` and non-`virtual`. It's good that we suppress the exception, because we abort the connection and don't want it to bubble up, but we should consider doing it higher up the stack (for example, in the method that calls `HubDispatcher.DispatchMessagesAsync`, since that method is overridable so if the exception bubbles through it, derived dispatchers can examine it).","Url":"https://github.com/aspnet/SignalR/issues/3142","RelatedDescription":"Open issue \"Ensure subclasses of DefaultHubDispatcher can catch and process exceptions triggered by Hub methods\" (#3142)"},{"Id":"370460647","IsPullRequest":false,"CreatedAt":"2018-10-16T06:40:18","Actor":"DHosseiny","Number":"3141","RawContent":null,"Title":"Duration requires android api level 26 or higher","State":"open","Body":"Duration class used here added in java 8 and android not support java 8 completely in api level lower than 26. Please use other way to implement duration. here is exception line [HubConnection.java:50](https://github.com/aspnet/SignalR/blob/defbadb26b4224d5025549992fc5ae4e95e0d288/clients/java/signalr/src/main/java/com/microsoft/signalr/HubConnection.java#L50)\r\nHere is first exception lines:\r\n`java.lang.NoClassDefFoundError: Failed resolution of: Ljava/time/Duration;\r\n        at com.microsoft.signalr.HubConnection.<init>(HubConnection.java:50)`\r\nto produce this issue just create a HubConnection in android app with api lower than 26.\r\nversion: 99.99.99-dev","Url":"https://github.com/aspnet/SignalR/issues/3141","RelatedDescription":"Open issue \"Duration requires android api level 26 or higher\" (#3141)"},{"Id":"370427724","IsPullRequest":false,"CreatedAt":"2018-10-16T03:45:04","Actor":"realwanpengli","Number":"3140","RawContent":null,"Title":"Send `IDictionary<string, object>` to server, the server received the dictionary but modify the key: Change the first letter to lower case.","State":"open","Body":"* Versions of Server-Side NuGet Packages: 2.1.2\r\n* Versions of Client-Side NuGet/NPM Packages: 1.1.0-preview2-35157\r\n* Are you using the C# client or the JavaScript client: C# client\r\n* The Server you are using (Kestrel/HttpSysServer/IIS/IIS Express/Azure Web App/etc.): \r\n* The Operating System on the Server (Windows/Linux/macOS): Windows\r\n* The Operating System on the Client (Windows/Linux/macOS): Windows\r\n\r\nThe hub protocol is `json`.\r\n\r\nSend `IDictionary<string, object>` to server, the server received the dictionary but modify the key: Change the first letter to lower case.\r\n\r\nFor example: `Key` => `key`\r\n\r\nHow to keep the key unchanged?","Url":"https://github.com/aspnet/SignalR/issues/3140","RelatedDescription":"Open issue \"Send `IDictionary<string, object>` to server, the server received the dictionary but modify the key: Change the first letter to lower case.\" (#3140)"},{"Id":"370423593","IsPullRequest":false,"CreatedAt":"2018-10-16T03:21:13","Actor":"aspnet-hello","Number":"3139","RawContent":null,"Title":"Test failure: HubConnectionCanSendAndReceiveGroupMessages","State":"open","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=578572&buildTypeId=Releases_22xPublic_UbuntuUniverse) with the following error:\r\n\r\n```\r\nMicrosoft.AspNetCore.SignalR.HubException : An unexpected error occurred invoking 'EchoGroup' on the server. RedisConnectionException: No connection is available to service this operation: PUBLISH Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.EchoHub:group:TestGroup_WebSockets_json_8926ab6f-70cf-49e9-9540-d33337219573; IOCP: (Busy=0,Free=1000,Min=8,Max=1000), WORKER: (Busy=5,Free=32762,Min=8,Max=32767), Local-CPU: n/a\r\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.InvokeCoreAsyncCore(String methodName, Type returnType, Object[] args, CancellationToken cancellationToken) in /_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:line 462\r\n   at System.Threading.Tasks.ForceAsyncAwaiter`1.GetResult() in /_/src/Common/ForceAsyncAwaiter.cs:line 64\r\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.InvokeCoreAsync(String methodName, Type returnType, Object[] args, CancellationToken cancellationToken) in /_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:line 264\r\n   at System.Threading.Tasks.TaskExtensions.OrTimeout(Task task, TimeSpan timeout, String memberName, String filePath, Nullable`1 lineNumber) in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/TaskExtensions.cs:line 40\r\n   at Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.HubConnectionCanSendAndReceiveGroupMessages(HttpTransportType transportType, String protocolName) in /_/test/Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests/RedisEndToEnd.cs:line 88\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.003s] TestLifetime Information: Starting test HubConnectionCanSendAndReceiveGroupMessages-WebSockets-json at 2018-10-16T02:51:59\r\n| [0.000s] TestLifetime Information: Starting test HubConnectionCanSendAndReceiveGroupMessages_WebSockets_json at 2018-10-16T02:51:59\r\n| [0.369s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: SAWpiTG4uDvMXWfbyg2rRQ - Starting transport. Transfer mode: Text. Url: 'ws://127.0.0.1:37537/echo?id=SAWpiTG4uDvMXWfbyg2rRQ'.\r\n| [0.470s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Information: SAWpiTG4uDvMXWfbyg2rRQ - HttpConnection Started.\r\n| [0.478s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: SAWpiTG4uDvMXWfbyg2rRQ - Using HubProtocol 'json v1'.\r\n| [0.572s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: SAWpiTG4uDvMXWfbyg2rRQ - HubConnection started.\r\n| [0.585s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: mrSZOGkNy-aHSAQDkthD2Q - Starting transport. Transfer mode: Text. Url: 'ws://127.0.0.1:46667/echo?id=mrSZOGkNy-aHSAQDkthD2Q'.\r\n| [0.589s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Information: mrSZOGkNy-aHSAQDkthD2Q - HttpConnection Started.\r\n| [0.589s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: mrSZOGkNy-aHSAQDkthD2Q - Using HubProtocol 'json v1'.\r\n| [0.591s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: mrSZOGkNy-aHSAQDkthD2Q - HubConnection started.\r\n| [0.801s] TestLifetime Information: Finished test HubConnectionCanSendAndReceiveGroupMessages_WebSockets_json in 0.7998611s\r\n| [0.832s] TestLifetime Information: Finished test HubConnectionCanSendAndReceiveGroupMessages-WebSockets-json in 0.8303514s\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @muratg","Url":"https://github.com/aspnet/SignalR/issues/3139","RelatedDescription":"Open issue \"Test failure: HubConnectionCanSendAndReceiveGroupMessages\" (#3139)"},{"Id":"370363273","IsPullRequest":true,"CreatedAt":"2018-10-15T22:08:44","Actor":"mikaelm12","Number":"3138","RawContent":null,"Title":"More Java Docs","State":"open","Body":"More Java Docs! Doing a another run of API docs work after the preview 3 changes.\r\nIssue: https://github.com/aspnet/SignalR/issues/2982","Url":"https://github.com/aspnet/SignalR/pull/3138","RelatedDescription":"Open PR \"More Java Docs\" (#3138)"},{"Id":"370340644","IsPullRequest":false,"CreatedAt":"2018-10-15T20:56:59","Actor":"anurse","Number":"3137","RawContent":null,"Title":"Consider introducing a single \"hub pipeline\" abstraction for cross-cutting concerns","State":"open","Body":"We had https://github.com/aspnet/SignalR/issues/871 and https://github.com/aspnet/SignalR/issues/924 tracking some of this, and resolved those by adding HubDispatcher as a user-overridable abstraction. However, there's still value in the simple abstraction Hub Pipeline modules provided in ASP.NET SignalR. We should consider bringing that abstraction back.","Url":"https://github.com/aspnet/SignalR/issues/3137","RelatedDescription":"Open issue \"Consider introducing a single \"hub pipeline\" abstraction for cross-cutting concerns\" (#3137)"},{"Id":"370335409","IsPullRequest":false,"CreatedAt":"2018-10-15T20:42:12","Actor":"bdominguez","Number":"3136","RawContent":null,"Title":"Self host and error handling","State":"open","Body":"I'm integrating a SignalR server inside a WPF application.\r\n\r\nMy problem is that whenever an error occurs on a hub I can't handle it in a global way.\r\n\r\nSee this line:\r\n\r\nhttps://github.com/aspnet/SignalR/blob/defbadb26b4224d5025549992fc5ae4e95e0d288/src/Microsoft.AspNetCore.SignalR.Core/HubConnectionHandler.cs#L113\r\n\r\nAs you can see it's handled internally so I can't handle it myself.","Url":"https://github.com/aspnet/SignalR/issues/3136","RelatedDescription":"Open issue \"Self host and error handling\" (#3136)"},{"Id":"370272085","IsPullRequest":true,"CreatedAt":"2018-10-15T17:46:19","Actor":"mikaelm12","Number":"3134","RawContent":null,"Title":"Enable logging in chat sample","State":"open","Body":"Issue: https://github.com/aspnet/SignalR/issues/3121\r\nUpdating the Chat sample to use java console logging through the SLF4J APIs. We have to take another dependency on the bridging jar between slf4j and java.util.logging","Url":"https://github.com/aspnet/SignalR/pull/3134","RelatedDescription":"Open PR \"Enable logging in chat sample\" (#3134)"},{"Id":"370122146","IsPullRequest":false,"CreatedAt":"2018-10-15T11:38:28","Actor":"Tragetaschen","Number":"3133","RawContent":null,"Title":"Non-serialized hub invocations","State":"open","Body":"I have tried to circumvent the missing stream invocations in the Java client by introducing for each streaming method on my Hub a sibling method that would `await` and return the next value that a ChannelReader would provide. The client would then have to immediately invoke the same method again after receiving a value to simulate continuous values. In my C# design validation client, I try to invoke two methods, run `Task.WhenAny` and then re-issue the finished invocation.\r\n\r\nHowever, the invocation serialization from 1957655653608fa17803308c98153586f6623597 means that any additional incoming message on the connection will only be dispatched when a running (async-blocking) invocation has finished. This includes any second invocation, a new streaming invocation and (which is where it's likely getting interesting) any form of graceful connection abort from the client. As far as I could see in the code for the latter case, all forms of `Abort` (which would trigger the cancellation token) originate from outside the dispatch loop, so only actually reading from the input pipe can close a connection which is blocked by the running invocation.\r\n\r\nSo: Personally, I'd love to see lifting the restriction around non-streaming invocations...","Url":"https://github.com/aspnet/SignalR/issues/3133","RelatedDescription":"Open issue \"Non-serialized hub invocations\" (#3133)"},{"Id":"369827590","IsPullRequest":true,"CreatedAt":"2018-10-13T18:50:57","Actor":"dotnet-maestro-bot","Number":"3130","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @mikaelm12\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/3130","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#3130)"},{"Id":"369784819","IsPullRequest":true,"CreatedAt":"2018-10-13T18:43:21","Actor":"davidfowl","Number":"3129","RawContent":null,"Title":"Various timer cleanup","State":"closed","Body":"This change does 2 things:\r\n- It disables the websocket keep alive since SignalR has its own bidirectional pings. This should remove a significant timer overhead per WebSocket connection that we end up with today. We have a single timer that sends to all connection on an interval.\r\n- Don't pass the CancellationToken to ReadAsync in the handshake since the Pipe implementation holds onto the token for longer than it needs to which keeps Timer objects alive (see https://github.com/dotnet/corefx/issues/32806)\r\n\r\nI found this when reading the source code and looking at dumps of a couple of SignalR applications.\r\n\r\nFixes #3128 ","Url":"https://github.com/aspnet/SignalR/pull/3129","RelatedDescription":"Closed or merged PR \"Various timer cleanup\" (#3129)"},{"Id":"369777027","IsPullRequest":false,"CreatedAt":"2018-10-13T18:43:21","Actor":"davidfowl","Number":"3128","RawContent":null,"Title":"AddSignalR should disable WebSocket keep alives","State":"closed","Body":"SignalR has its own pings so there's no reason to ping from server to client via the websocket protocol. This will also remove the timer allocation per websocket connection that we incur today.\r\n\r\ncc @anurse ","Url":"https://github.com/aspnet/SignalR/issues/3128","RelatedDescription":"Closed issue \"AddSignalR should disable WebSocket keep alives\" (#3128)"},{"Id":"369718446","IsPullRequest":true,"CreatedAt":"2018-10-13T18:11:13","Actor":"mikaelm12","Number":"3124","RawContent":null,"Title":"Update Formatted Log Messages","State":"closed","Body":"SLF4J Has different formatted log messaging logic.\r\nYou can see more here: https://www.slf4j.org/api/org/slf4j/helpers/MessageFormatter.html","Url":"https://github.com/aspnet/SignalR/pull/3124","RelatedDescription":"Closed or merged PR \"Update Formatted Log Messages\" (#3124)"},{"Id":"369774690","IsPullRequest":false,"CreatedAt":"2018-10-13T06:58:05","Actor":"davidfowl","Number":"3127","RawContent":null,"Title":"Dispose the ClientWebSocket if WebSocketTransport.StartAsync throws","State":"open","Body":"https://github.com/aspnet/SignalR/blob/facaa1387aae48933bacd2a45d6620fa1d5c9557/src/Microsoft.AspNetCore.Http.Connections.Client/Internal/WebSocketsTransport.cs#L122\r\n\r\nToday we only dispose in StopAsync. When the HttpConnection calls StartAsync on the transport and that fails, it nulls out the transport reference and bubbles the exception up. We need to make sure the WebSocket is properly disposed if StartAsync fails.\r\n\r\nhttps://github.com/aspnet/SignalR/blob/facaa1387aae48933bacd2a45d6620fa1d5c9557/src/Microsoft.AspNetCore.Http.Connections.Client/HttpConnection.cs#L460-L473","Url":"https://github.com/aspnet/SignalR/issues/3127","RelatedDescription":"Open issue \"Dispose the ClientWebSocket if WebSocketTransport.StartAsync throws\" (#3127)"},{"Id":"369745709","IsPullRequest":false,"CreatedAt":"2018-10-13T00:00:55","Actor":"anurse","Number":"3125","RawContent":null,"Title":"Invoking while in a On response function will cause deadlock (?)","State":"open","Body":"_From @farlock85 on Friday, 12 October 2018 22:59:16_\r\n\r\nConsider this code:\r\n\r\n`\r\n    public class S\r\n    {\r\n        private readonly HubConnection _hubConnection;\r\n\r\n        public S()\r\n        {\r\n            _hubConnection = new HubConnectionBuilder()\r\n                             .WithUrl(\"\")\r\n                             .ConfigureLogging(logging => {\r\n                                 logging.AddConsole();\r\n                                 logging.SetMinimumLevel(LogLevel.Trace);\r\n                             })\r\n                             .Build();\r\n\r\n            _hubConnection.On<DataRequest>(\"DataFetch\", DataFetch);\r\n        }\r\n\r\n\r\n        private void DataFetch(DataRequest dataRequest)\r\n        {\r\n            var response = new DataResponse\r\n            {\r\n                RequestId = dataRequest.RequestId\r\n            };\r\n\r\n            var dataResponse = Send<DataResponseResult>(\"DataResponse\", response)\r\n                .Result;\r\n        }\r\n        \r\n        public async Task<T> Send<T>(String methodName, params Object[] parameters)\r\n        {\r\n            Log.Information(\"Sending {methodName} request\", methodName);\r\n\r\n            try\r\n            {\r\n                var response = await _hubConnection.InvokeCoreAsync<T>(methodName, parameters, new CancellationTokenSource(30000).Token);\r\n\r\n                Log.Information(\"Received {methodName}\", methodName);\r\n\r\n                return response;\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Log.Error(ex, \"Error sending {methodName}\", methodName);\r\n            }\r\n\r\n            return default(T);\r\n        }\r\n    }\r\n`\r\n\r\nthe Send is called from the DataFetch which comes from _hubConnection.On. \r\n\r\nThe trace logger doesn't mention anything special, but you will see that it hangs on InvokeCoreAsync until it times out.\r\n\r\nWhen I wrap the Send method in a Task.Factory.StartNew it works fine.\r\n\r\n_Copied from original issue: SignalR/SignalR#4246_","Url":"https://github.com/aspnet/SignalR/issues/3125","RelatedDescription":"Open issue \"Invoking while in a On response function will cause deadlock (?)\" (#3125)"},{"Id":"369708956","IsPullRequest":true,"CreatedAt":"2018-10-12T21:01:01","Actor":"mikaelm12","Number":"3123","RawContent":null,"Title":"Add package-info file for docs","State":"open","Body":"Adding a package-info file to get the high level class summaries on the docs page. \r\nDoes this look right to you @dend ? ","Url":"https://github.com/aspnet/SignalR/pull/3123","RelatedDescription":"Open PR \"Add package-info file for docs\" (#3123)"},{"Id":"369464695","IsPullRequest":false,"CreatedAt":"2018-10-12T09:10:58","Actor":"dzmitry-lahoda","Number":"3122","RawContent":null,"Title":"Allow default binary protocol run in AOT environment with no code generation (.NET Standard 2.0 with no Emit)","State":"open","Body":"I have tried to use `MessagePackHubProtocol` in Unity 2018.2(.NET Standrad 2.0) iOS and failed. \r\nBecause `MessagePackHubProtocol` type loads `SignalRResolver` which type loads `emit` types which do not exists. Crash. \r\n\r\nI hope to have `MessagePackHubProtocol` to lazy load `emit` related types only if these are configured.\r\n\r\n![img_20181012_120405](https://user-images.githubusercontent.com/757125/46859785-68a4ca80-ce17-11e8-97cb-12ee4e23cd3e.jpg)\r\n\r\n\r\n\r\n```csharp\r\n       public HubConnection Build(string serverPortHub/*, TODO: pass statically generated resolvers here */)\r\n        {\r\n            var transport = new HttpConnectionOptions()\r\n            {\r\n                Url = new Uri(serverPortHub),\r\n                Transports = HttpTransportType.WebSockets\r\n            };\r\n\r\n            var serialization = new MessagePackHubProtocolOptions\r\n            {\r\n                FormatterResolvers = new List<IFormatterResolver>\r\n                {\r\n                    // add generated resolvers for our objects\r\n                    \r\n                    //https://github.com/neuecc/MessagePack-CSharp#pre-code-generationunityxamarin-supports\r\n                    MessagePack.Resolvers.BuiltinResolver.Instance,\r\n                    AttributeFormatterResolver.Instance,\r\n                    MessagePack.Resolvers.PrimitiveObjectResolver.Instance,\r\n                    //MessagePack.Unity.UnityResolver.Instance\r\n                    //MessagePack.Resolvers.UnsafeBinaryResolver.Instances\r\n                }\r\n            };\r\n\r\n            return new HubConnection(\r\n                new HttpConnectionFactory(Options.Create(transport), _loggerFactory),\r\n                new MessagePackHubProtocol(Options.Create(serialization)), _loggerFactory);\r\n        }\r\n```","Url":"https://github.com/aspnet/SignalR/issues/3122","RelatedDescription":"Open issue \"Allow default binary protocol run in AOT environment with no code generation (.NET Standard 2.0 with no Emit)\" (#3122)"},{"Id":"369294288","IsPullRequest":true,"CreatedAt":"2018-10-11T23:23:36","Actor":"dotnet-maestro-bot","Number":"3119","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @mikaelm12\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/3119","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#3119)"},{"Id":"369316624","IsPullRequest":true,"CreatedAt":"2018-10-11T23:01:18","Actor":"mikaelm12","Number":"3120","RawContent":null,"Title":"Logging with Slf4j","State":"closed","Body":"Removing our custom logging implementation in favor of using thew SLF4J APIs. Users will be able to take a dependency on a logging library of their choice, and slf4j will enable them to plug it in to the Java client. \r\nFixes: https://github.com/aspnet/SignalR/issues/3070","Url":"https://github.com/aspnet/SignalR/pull/3120","RelatedDescription":"Closed or merged PR \"Logging with Slf4j\" (#3120)"},{"Id":"369317607","IsPullRequest":false,"CreatedAt":"2018-10-11T21:46:24","Actor":"mikaelm12","Number":"3121","RawContent":null,"Title":"Enable logging in Java client sample","State":"open","Body":"After we move from our custom logging implementation to using SLF4J we should give guidance on how to enable logging by doing it in the chat sample.","Url":"https://github.com/aspnet/SignalR/issues/3121","RelatedDescription":"Open issue \"Enable logging in Java client sample\" (#3121)"},{"Id":"369276966","IsPullRequest":true,"CreatedAt":"2018-10-11T20:26:06","Actor":"dotnet-maestro-bot","Number":"3118","RawContent":null,"Title":"[automated] Merge branch 'maestro/release/2.2' => 'release/2.2'","State":"closed","Body":"I detected changes in the maestro/release/2.2 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on maestro/release/2.2 by the following committers:\n\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/maestro/release/2.2-to-release/2.2:merge/maestro/release/2.2-to-release/2.2\r\ngit merge merge/maestro/release/2.2-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/maestro/release/2.2-to-release/2.2' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on maestro/release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/3118","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'maestro/release/2.2' => 'release/2.2'\" (#3118)"},{"Id":"369274141","IsPullRequest":true,"CreatedAt":"2018-10-11T20:23:12","Actor":"dotnet-maestro-bot","Number":"3117","RawContent":null,"Title":"[automated] Merge branch 'maestro/master' => 'master'","State":"closed","Body":"I detected changes in the maestro/master branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on maestro/master by the following committers:\n\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/maestro/master-to-master:merge/maestro/master-to-master\r\ngit merge merge/maestro/master-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/maestro/master-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on maestro/master.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/3117","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'maestro/master' => 'master'\" (#3117)"},{"Id":"369261404","IsPullRequest":true,"CreatedAt":"2018-10-11T20:07:43","Actor":"dotnet-maestro-bot","Number":"3116","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @mikaelm12\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/3116","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#3116)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"370870776","IsPullRequest":false,"CreatedAt":"2018-10-17T02:20:40","Actor":"soargon","Number":"2017","RawContent":null,"Title":"UserOlnyStore bug not fix in release branch 2.0","State":"open","Body":"there is not matched number of generic arguments \r\nthis bug fixed on commit 85f8a49aef68bf9763cd9854ce1dd4a26a7c5d3c\r\n![3](https://user-images.githubusercontent.com/775878/47058023-cc533d00-d1f5-11e8-829a-61fd0b9e4ff5.png)\r\n","Url":"https://github.com/aspnet/Identity/issues/2017","RelatedDescription":"Open issue \"UserOlnyStore bug not fix in release branch 2.0\" (#2017)"},{"Id":"370853707","IsPullRequest":false,"CreatedAt":"2018-10-17T00:43:46","Actor":"kedzior-io","Number":"2016","RawContent":null,"Title":"TempData doesn't work when scaffolded ","State":"open","Body":"When using scaffolded asp.net core 2.1 identity: \r\n\r\n1. TempData doesn't work when using cookie provider:\r\n\r\n` services.AddMvc()\r\n.SetCompatibilityVersion(CompatibilityVersion.Version_2_1)\r\n.AddCookieTempDataProvider();`\r\n\r\n2. TempData doesn't work when using session provider if \r\n\r\n`services.AddSession();` is placed **AFTER** `services.AddMvc();`\r\n\r\nApparently the order doesn't matter. \r\n\r\n----------------------------------------------\r\n\r\nI have tested it with scaffolded index page of the profile:\r\n\r\n`Areas.Identity.Pages.Account.Manage.Index.cshtml.cs`\r\n\r\nUpdating phone number sets TempData property: \r\n\r\n`StatusMessage = \"Your profile has been updated\";`\r\n\r\nBut it's not rendered in the view:\r\n\r\n`@Html.Partial(\"_StatusMessage\", Model.StatusMessage)`\r\n","Url":"https://github.com/aspnet/Identity/issues/2016","RelatedDescription":"Open issue \"TempData doesn't work when scaffolded \" (#2016)"},{"Id":"369268654","IsPullRequest":true,"CreatedAt":"2018-10-16T20:35:56","Actor":"dotnet-maestro-bot","Number":"2003","RawContent":null,"Title":"[automated] Merge branch 'maestro/master' => 'master'","State":"closed","Body":"I detected changes in the maestro/master branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on maestro/master by the following committers:\n\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/maestro/master-to-master:merge/maestro/master-to-master\r\ngit merge merge/maestro/master-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/maestro/master-to-master' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on maestro/master.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2003","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'maestro/master' => 'master'\" (#2003)"},{"Id":"369270886","IsPullRequest":true,"CreatedAt":"2018-10-16T20:34:11","Actor":"dotnet-maestro-bot","Number":"2004","RawContent":null,"Title":"[automated] Merge branch 'maestro/release/2.2' => 'release/2.2'","State":"closed","Body":"I detected changes in the maestro/release/2.2 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on maestro/release/2.2 by the following committers:\n\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/maestro/release/2.2-to-release/2.2:merge/maestro/release/2.2-to-release/2.2\r\ngit merge merge/maestro/release/2.2-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/maestro/release/2.2-to-release/2.2' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on maestro/release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2004","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'maestro/release/2.2' => 'release/2.2'\" (#2004)"},{"Id":"370775211","IsPullRequest":true,"CreatedAt":"2018-10-16T19:58:54","Actor":"dotnet-maestro-bot","Number":"2015","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"open","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @aspnetci\n* @HaoK\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2015","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2015)"},{"Id":"370557530","IsPullRequest":false,"CreatedAt":"2018-10-16T11:04:55","Actor":"Sigvaard","Number":"2014","RawContent":null,"Title":"HTTP API for Identity","State":"open","Body":"Is there any HTTP API on top of ASP.NET Core identity available? I was looking at  https://github.com/aspnet/Identity/issues/1187 but it's too bloated to understand anything. I'm trying to avoid creating my own HTTP API for user management but I guess there's no other choice.\r\n\r\nI would like to build my own interface for user management but through web API.","Url":"https://github.com/aspnet/Identity/issues/2014","RelatedDescription":"Open issue \"HTTP API for Identity\" (#2014)"},{"Id":"370411937","IsPullRequest":false,"CreatedAt":"2018-10-16T02:18:00","Actor":"soargon","Number":"2013","RawContent":null,"Title":"Microsoft.AspNetCore.Identity.EntityFrameworkCore shunld not reference Microsoft.AspNetCore.Identity","State":"open","Body":"![1](https://user-images.githubusercontent.com/775878/46988744-a7df5e00-d12c-11e8-9455-2dd6c629f0fb.png)\r\n![2](https://user-images.githubusercontent.com/775878/46988745-a9a92180-d12c-11e8-9a9a-6cafc20327c9.png)\r\n","Url":"https://github.com/aspnet/Identity/issues/2013","RelatedDescription":"Open issue \"Microsoft.AspNetCore.Identity.EntityFrameworkCore shunld not reference Microsoft.AspNetCore.Identity\" (#2013)"},{"Id":"370363411","IsPullRequest":false,"CreatedAt":"2018-10-15T22:09:14","Actor":"brainoverflow98","Number":"2012","RawContent":null,"Title":"Same Package On Nuget With Different Names","State":"open","Body":"Are there any difference between Microsoft.AspNetCore.Identity.dll and Microsoft.Extensions.Identity.Core.dll ? If not why there are two of them ?","Url":"https://github.com/aspnet/Identity/issues/2012","RelatedDescription":"Open issue \"Same Package On Nuget With Different Names\" (#2012)"},{"Id":"370325959","IsPullRequest":false,"CreatedAt":"2018-10-15T20:15:19","Actor":"natelaff","Number":"2011","RawContent":null,"Title":"Social auth in infinite loop with cookie consent","State":"open","Body":"I have a 2.1 app that isn't too far outside the standard identity code. \r\n\r\nI configure my cookie like so:\r\n\r\n            services.ConfigureApplicationCookie(options =>\r\n            {\r\n                options.AccessDeniedPath = \"/Account/AccessDenied\";\r\n                options.Cookie.Name = \"sitenameishere\";\r\n                options.Cookie.HttpOnly = true;\r\n                options.ExpireTimeSpan = TimeSpan.FromMinutes(60);\r\n                options.LoginPath = \"/Account/Login\";\r\n                options.LogoutPath = \"/Account/Logout\";\r\n                options.ReturnUrlParameter = CookieAuthenticationDefaults.ReturnUrlParameter;\r\n                options.SlidingExpiration = true;\r\n            });\r\n\r\nOn my iPhone (I can't reproduce this on PC), after I have logged in with facebook, then it logs me out after some expiration time, when I try to log on again I get stuck in a loop with the cookie consent banner popping up. so that banner will popup, I accept, log on with facebook again, then it just takes me right back there. if I clear cookies from the mobile browser (be it safari, edge or chrome), it will work and let me log on... but eventually starts the same thing again.\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2011","RelatedDescription":"Open issue \"Social auth in infinite loop with cookie consent\" (#2011)"},{"Id":"369775514","IsPullRequest":false,"CreatedAt":"2018-10-13T07:11:12","Actor":"xenalite","Number":"2010","RawContent":null,"Title":"OpenID Connect - Sign Out - AADSTS90015: Requested query string is too long.","State":"open","Body":"I am using this sample:\r\nhttps://github.com/Azure-Samples/active-directory-dotnet-webapp-openidconnect-aspnetcore\r\n\r\nI made 1 modification in the code - added `SaveTokens` flag:\r\n```\r\npublic void Configure(string name, OpenIdConnectOptions options)\r\n{\r\n   options.ClientId = _azureOptions.ClientId;\r\n   options.Authority = $\"{_azureOptions.Instance}{_azureOptions.TenantId}\";\r\n   options.UseTokenLifetime = true;\r\n   options.CallbackPath = _azureOptions.CallbackPath;\r\n   options.RequireHttpsMetadata = false;\r\n   options.SaveTokens = true;\r\n}\r\n```\r\n\r\nI also made another modification in the AAD app manifest:\r\n`\"groupMembershipClaims\": \"SecurityGroup\",`\r\n\r\nThis gives me a longer ID token with group claims as I need them, but when I try to sign out, I get this:\r\n![image](https://user-images.githubusercontent.com/4509839/46902540-1fa85100-cebf-11e8-82b2-c9f3f8c8a419.png)\r\n\r\n`Message: AADSTS90015: Requested query string is too long.`\r\n\r\nThe signout URL is:\r\n```\r\nhttps://login.microsoftonline.com/<TenantId>/oauth2/logout?post_logout_redirect_uri=http%3A%2F%2Flocalhost%3A5000%2Fsignout-callback-oidc\r\n&id_token_hint=<Nearly4KilobytesOfCharactersHere>\r\n&state=<Another200CharactersHere>\r\n&x-client-SKU=ID_NET\r\n&x-client-ver=2.1.4.0\r\n```\r\nThe `id_token_hint` is very long. Is it required, or can it be omittted somehow?\r\n\r\nWhat I'm trying to do ultimately:\r\n- I'm creating a wrapper site around some Azure Service Management APIs.\r\n- Log users in and implement group-claim based access control.\r\n- Get their access token to Azure Service Management APIs in my controllers and pass them on.\r\n\r\nTo that end, I modified my app code and manifest even further from the sample:\r\n```\r\npublic void Configure(string name, OpenIdConnectOptions options)\r\n{\r\n\toptions.ClientId = _azureOptions.ClientId;\r\n\toptions.ClientSecret = _azureOptions.ClientSecret;\r\n\toptions.Authority = _azureOptions.AuthorityUri;\r\n\toptions.Resource = _azureOptions.ResourceUri;\r\n\toptions.CallbackPath = _azureOptions.CallbackPath;\r\n\toptions.ResponseType = OpenIdConnectResponseType.IdTokenToken;\r\n\r\n\toptions.UseTokenLifetime = true;\r\n\toptions.RequireHttpsMetadata = false;\r\n\toptions.SaveTokens = true;\r\n}\r\n```\r\n\r\nApp manifest additions:\r\n`\"oauth2AllowImplicitFlow\": true,`\r\n![image](https://user-images.githubusercontent.com/4509839/46902696-51221c00-cec1-11e8-8734-ae7a57a9b7f8.png)\r\n\r\nThis allows me to get an access token for Azure Service Management in my controller like so:\r\n`var accessToken = await httpContext.GetTokenAsync(\"access_token\");`","Url":"https://github.com/aspnet/Identity/issues/2010","RelatedDescription":"Open issue \"OpenID Connect - Sign Out - AADSTS90015: Requested query string is too long.\" (#2010)"},{"Id":"369274510","IsPullRequest":true,"CreatedAt":"2018-10-12T19:47:01","Actor":"dotnet-maestro-bot","Number":"2005","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @ryanbrandenburg\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2005","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2005)"},{"Id":"369650996","IsPullRequest":true,"CreatedAt":"2018-10-12T18:35:09","Actor":"dotnet-maestro-bot","Number":"2008","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @HaoK\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.1-to-release/2.2' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.1.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/2008","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#2008)"},{"Id":"369654659","IsPullRequest":true,"CreatedAt":"2018-10-12T18:34:54","Actor":"HaoK","Number":"2009","RawContent":null,"Title":"Merge 2.1 -> 2.2","State":"closed","Body":"Had to also make the change to the V3 page as well\r\n\r\n@ajcvickers @blowdart @Eilon @javiercn ","Url":"https://github.com/aspnet/Identity/pull/2009","RelatedDescription":"Closed or merged PR \"Merge 2.1 -> 2.2\" (#2009)"},{"Id":"369643490","IsPullRequest":true,"CreatedAt":"2018-10-12T17:52:13","Actor":"HaoK","Number":"2007","RawContent":null,"Title":"Fix login.cshtml","State":"closed","Body":"@ajcvickers @blowdart @Eilon ","Url":"https://github.com/aspnet/Identity/pull/2007","RelatedDescription":"Closed or merged PR \"Fix login.cshtml\" (#2007)"},{"Id":"369289473","IsPullRequest":true,"CreatedAt":"2018-10-11T21:46:58","Actor":"javiercn","Number":"2006","RawContent":null,"Title":"[Fixes #1958] Add and generate docs for the default UI","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/2006","RelatedDescription":"Closed or merged PR \"[Fixes #1958] Add and generate docs for the default UI\" (#2006)"},{"Id":"367967727","IsPullRequest":true,"CreatedAt":"2018-10-11T19:29:53","Actor":"ryanbrandenburg","Number":"1999","RawContent":null,"Title":"Update Jquery.validation.Unobtrusive","State":"closed","Body":"Part of https://github.com/aspnet/Templating/issues/32.\r\n\r\nThings I also did while I was at it:\r\n\r\n- Remove referenced to Bower (same as we're doing in templating).\r\n- Remove site.min.* files (same as we did in templating).\r\n- Move to CDNJS from https://ajax.aspnetcdn.com (same as we did in templating).\r\n\r\n@javiercn let me know if any of this needs to remain unchanged do to legacy. For example, should we just revert all the changes I made in */V3?","Url":"https://github.com/aspnet/Identity/pull/1999","RelatedDescription":"Closed or merged PR \"Update Jquery.validation.Unobtrusive\" (#1999)"},{"Id":"369205137","IsPullRequest":false,"CreatedAt":"2018-10-11T16:32:32","Actor":"StuffOfInterest","Number":"2002","RawContent":null,"Title":"UI package has path error","State":"open","Body":"I was trying to import the Microsoft.AspNetCore.Identity.UI NuGet package into a local package server (using NuGet.Server).  This one package refused to import.  After opening an issue with the NuGet team (https://github.com/NuGet/NuGetGallery/issues/6543) the problem was traced to a bad path in the embedded nuspec file.\r\n\r\n```\r\n<Override ContentType=\"application/octet\" PartName=\"//THIRD-PARTY-NOTICES\"/>\r\n```\r\n\r\nThe server did not like the double slash in front of the name.\r\n\r\nIt appears this path is coming from the csproj file (https://github.com/aspnet/Identity/blob/master/src/UI/Microsoft.AspNetCore.Identity.UI.csproj).\r\n\r\n```\r\n<None Include=\"THIRD-PARTY-NOTICES.txt\" Pack=\"true\" PackagePath=\"/\" />\r\n```\r\n\r\nMy guess is the \"PackagePath\" shouldn't start with \"/\" or it cannot be just a single \"/\".\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/2002","RelatedDescription":"Open issue \"UI package has path error\" (#2002)"},{"Id":"369100712","IsPullRequest":true,"CreatedAt":"2018-10-11T12:37:23","Actor":"zachesposito","Number":"2001","RawContent":null,"Title":"Dispose MemoryStream in DataProtectionTokenProvider for consistency","State":"open","Body":"Addresses #1891 ","Url":"https://github.com/aspnet/Identity/pull/2001","RelatedDescription":"Open PR \"Dispose MemoryStream in DataProtectionTokenProvider for consistency\" (#2001)"},{"Id":"368593675","IsPullRequest":false,"CreatedAt":"2018-10-10T10:14:46","Actor":"LindaLawton","Number":"2000","RawContent":null,"Title":"Show errors in the log from VerifyUserTokenAsync","State":"open","Body":"I am getting a nice warning in my logs when the code is invalid  from [L1712](https://github.com/aspnet/Identity/blob/c7276ce2f76312ddd7fccad6e399da96b9f6fae1/src/Core/UserManager.cs#L1712)\r\n\r\n>warn: Microsoft.AspNetCore.Identity.UserManager[9]\r\n>     VerifyUserTokenAsync() failed with purpose: ResetPassword for user 21248592.\r\n\r\nHowever it does not tell me what the error is in the error message is.   I have had to add this in my own code.\r\n\r\n>dbug:IdentityServer.Controllers.Account.AccountController[2150]\r\n>     User invite failed for [User: 21248592] [error: Invalid token.]\r\n\r\nWhich basically means i have two log entries for the same issue.  It would be nice to get a list of the errors from the result into the warning message.\r\n\r\nCan i suggest something like this?  I would be happy to submit a pull request if you like\r\n\r\n```\r\nif (!result)\r\n            {\r\n               var errors = string.Join(\", \", result.Errors.Select(a => a.Description));\r\n                Logger.LogWarning(9, \"VerifyUserTokenAsync() failed with purpose: {purpose} for user {userId}. \r\n Errors {errors }\", purpose, await GetUserIdAsync(user), errors );\r\n            }\r\n```\r\n","Url":"https://github.com/aspnet/Identity/issues/2000","RelatedDescription":"Open issue \"Show errors in the log from VerifyUserTokenAsync\" (#2000)"},{"Id":"366234056","IsPullRequest":false,"CreatedAt":"2018-10-09T11:47:10","Actor":"flatproject","Number":"1989","RawContent":null,"Title":"Question: Can the cookies be customised to exclude dashes?","State":"closed","Body":"I have two apps on Azure which work great. I recently added an Application Gateway with firewall and IPS/IDS and since then any identity cookies or cookies in general that contain a double dash \"--\" are getting blocked because they match the OWASP rule \"SQL Comment Sequence Detected cookies\". I know according to [RFC6265](https://tools.ietf.org/html/rfc6265#section-4.1.1) that a hyphen is an allowed token but is there any way to customise the cookies not to include any hyphens?\r\n\r\nI have disabled the rule but i would feel more confident if i could actually fix the cookies and re-enable the rule.","Url":"https://github.com/aspnet/Identity/issues/1989","RelatedDescription":"Closed issue \"Question: Can the cookies be customised to exclude dashes?\" (#1989)"},{"Id":"367932504","IsPullRequest":false,"CreatedAt":"2018-10-08T20:00:40","Actor":"ryanbrandenburg","Number":"1998","RawContent":null,"Title":"License headers incorrect","State":"open","Body":"While working on updating Identity to the newest jquery.validation.unobtrusive I noticed that the license headers [on some files](https://github.com/aspnet/Identity/search?l=C%23&q=%22Copyright+%28c%29+Microsoft%22) doesn't match, reporting that the license is held by Microsoft instead of the .NET Foundation.\r\n\r\nCC @Eilon for license issues, @javiercn since we already talked about this a bit.","Url":"https://github.com/aspnet/Identity/issues/1998","RelatedDescription":"Open issue \"License headers incorrect\" (#1998)"},{"Id":"367660742","IsPullRequest":false,"CreatedAt":"2018-10-08T07:51:51","Actor":"cryptotrain","Number":"1997","RawContent":null,"Title":"User Roles not being added as Role Type claims on sign in (Identity Core) (Bug? / User Error?)","State":"closed","Body":"Hello,\r\nI believe I may have found a bug or I simply have a configuration issue, but after trolling through the MSDN Documentation for a couple of days and testing/trying, I cannot seem to figure this out.\r\n\r\nMy StackOverflow Question: https://stackoverflow.com/questions/52686139/asp-net-core-2-1-identitycore-role-claims-not-being-added-on-user-sign-in\r\n\r\nI'm using **ASP.Net Core 2.1** with **IdentityCore Service**, the application is a pure API, no views at all. For authentication I'm purely using **Steam authentication** (No User/Pass login) provided by, https://github.com/aspnet-contrib/AspNet.Security.OpenId.Providers\r\n\r\n**The problem** is that when I add a Role to a user (I've already got roles seeded and I've added my own steam account to the Admin Role), the role type claims are not being added on login, therefore when an admin user attempts to access an API route protected by [Authorize(Roles = \"Admin\") I'm being returned an Unauthorized Redirect.\r\n\r\nBelow I have added all code snippets I think is required (feel free to request more).\r\n\r\nIf I use (I am currently using this as a temporary solution, but it is not ideal for future development);\r\n\r\n    services.AddIdentity<User, Role>()\r\n       .AddEntityFrameworkStores<RSContext>()\r\n       .AddSignInManager<SignInManager<User>>()\r\n       .AddRoleManager<RoleManager<Role>>()\r\n       .AddDefaultTokenProviders();\r\n\r\nThe application correctly adds the role claims on user sign in (and the Authorize attributes work), using all existing code from AuthController.cs, yet using IdentityCore it fails.\r\n\r\n**NOTE:** The API will **correctly authenticate** and set the users cookies on sign in, but does not add the users roles to the users identity claims. Therefore, Authentication is Working, Authorization is not. If I utilise the [Authorize] attribute without specifying a Role it works flawlessly and only allows Authenticated users to access the route whilst denying unAuthenticated users. This can be seen in the Testing Screenshot at the end, identities[0].isAuthenticated = True, but the admin role is not being added to the Identity's Claims. As noted above, if I do not use AddIdentityCore and use AddIdentity, the roles are added to the user's claims correctly and the [Authorize(Role = \"Admin\")] attribute will work as expected, only allowing users that are apart of the Admin role to access it.\r\n\r\nStartup.cs (Omitted irrelevant parts, eg. Database Connection)\r\n\r\n    public void ConfigureServices(IServiceCollection services)\r\n    {\r\n        IdentityBuilder builder = services.AddIdentityCore<User>(opt =>\r\n        {\r\n            opt.Password.RequireDigit = true;\r\n            opt.Password.RequiredLength = 6;\r\n            opt.Password.RequireNonAlphanumeric = true;\r\n            opt.Password.RequireUppercase = true;\r\n            opt.User.AllowedUserNameCharacters += \":/\";\r\n        });\r\n\r\n        builder = new IdentityBuilder(builder.UserType, typeof(Role), builder.Services);\r\n        builder.AddEntityFrameworkStores<RSContext>();\r\n        builder.AddSignInManager<SignInManager<User>>();\r\n        builder.AddRoleValidator<RoleValidator<Role>>();\r\n        builder.AddRoles<Role>();\r\n        builder.AddRoleManager<RoleManager<Role>>();\r\n        builder.AddClaimsPrincipalFactory<UserClaimsPrincipalFactory<User>>();\r\n        builder.AddDefaultTokenProviders();\r\n\r\n        services.AddAuthentication(options =>\r\n        {\r\n            options.DefaultScheme = IdentityConstants.ApplicationScheme;\r\n            options.DefaultChallengeScheme = IdentityConstants.ApplicationScheme;\r\n            options.DefaultAuthenticateScheme = IdentityConstants.ApplicationScheme;\r\n            options.DefaultSignInScheme = IdentityConstants.ApplicationScheme;\r\n            options.DefaultSignOutScheme = IdentityConstants.ApplicationScheme;\r\n            options.DefaultForbidScheme = IdentityConstants.ApplicationScheme;\r\n        })\r\n            .AddSteam(options =>\r\n            {\r\n                options.ApplicationKey = Configuration.GetSection(\"Authentication:Steam:Key\").Value;\r\n                options.CallbackPath = \"/api/auth/steam/callback\";\r\n                options.Events.OnAuthenticated = OnClientAuthenticated;\r\n            })\r\n            .AddIdentityCookies(options =>\r\n            {\r\n                options.ApplicationCookie.Configure(appCookie =>\r\n                {\r\n                    appCookie.Cookie.Name = \"RaidSimulator\";\r\n                    appCookie.LoginPath = \"/api/auth/login\";\r\n                    appCookie.LogoutPath = \"/api/auth/logout\";\r\n                    appCookie.Cookie.HttpOnly = true;\r\n                    appCookie.Cookie.SameSite = SameSiteMode.Lax;\r\n                    appCookie.Cookie.IsEssential = true;\r\n                    appCookie.SlidingExpiration = true;\r\n                    appCookie.Cookie.Expiration = TimeSpan.FromMinutes(1);\r\n                    appCookie.Cookie.MaxAge = TimeSpan.FromDays(7);\r\n                });\r\n                options.ExternalCookie.Configure(extCookie =>\r\n                {\r\n                    extCookie.Cookie.Name = \"ExternalLogin\";\r\n                    extCookie.LoginPath = \"/api/auth/login\";\r\n                    extCookie.LogoutPath = \"/api/auth/logout\";\r\n                    extCookie.Cookie.HttpOnly = true;\r\n                    extCookie.Cookie.SameSite = SameSiteMode.Lax;\r\n                    extCookie.Cookie.IsEssential = true;\r\n                    extCookie.Cookie.Expiration = TimeSpan.FromMinutes(10);\r\n                });\r\n            });\r\n    }\r\n\r\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env, RoleManager<Role> roleManager)\r\n    {\r\n        if (env.IsDevelopment())\r\n        {\r\n            app.UseDeveloperExceptionPage();\r\n        }\r\n\r\n        RolesSeed.Seed(roleManager).Wait();\r\n\r\n        app.UseCors();\r\n        app.UseAuthentication();\r\n        app.UseMvc();\r\n    }\r\n\r\n    // Responsible for storing/updating steam profile in database\r\n    private async Task OnClientAuthenticated(OpenIdAuthenticatedContext context)\r\n    {\r\n        var rsContext = context.HttpContext.RequestServices.GetRequiredService<RSContext>();\r\n        var userManager = context.HttpContext.RequestServices.GetRequiredService<UserManager<User>>();\r\n\r\n        var profile = context.User?.Value<JObject>(SteamAuthenticationConstants.Parameters.Response)\r\n                            ?.Value<JArray>(SteamAuthenticationConstants.Parameters.Players)?[0]?.ToObject<SteamProfile>();\r\n\r\n        // TODO: Handle this better, Redir user to an informative error page or something\r\n        if (profile == null)\r\n            return;\r\n\r\n        var dbProfile = await rsContext.SteamProfiles.FindAsync(profile.SteamId);\r\n        if (dbProfile != null)\r\n        {\r\n            rsContext.Update(dbProfile);\r\n            dbProfile.UpdateProfile(profile);\r\n            await rsContext.SaveChangesAsync();\r\n        }\r\n        else\r\n        {\r\n            await rsContext.SteamProfiles.AddAsync(profile);\r\n            await rsContext.SaveChangesAsync();\r\n        }\r\n    }\r\n\r\nAuthController.cs => The only code responsible for authenticating against the Identity.Application scheme\r\n\r\n    [HttpGet(\"callback\")]\r\n    [Authorize(AuthenticationSchemes = \"Steam\")]\r\n    public async Task<IActionResult> Callback([FromQuery]string ReturnUrl)\r\n    {\r\n        ReturnUrl = ReturnUrl?.Contains(\"api/\") == true ? \"/\" : ReturnUrl;\r\n\r\n        if (HttpContext.User.Claims.Count() > 0)\r\n        {\r\n            var provider = HttpContext.User.Identity.AuthenticationType;\r\n            var nameIdentifier = HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);\r\n            var name = HttpContext.User.FindFirstValue(ClaimTypes.Name);\r\n\r\n            var loginResult = await signInManager.ExternalLoginSignInAsync(provider, nameIdentifier, false);\r\n            if (loginResult.Succeeded)\r\n            {\r\n                return Redirect(ReturnUrl ?? \"/api/auth/claims\");\r\n            }\r\n\r\n            var result = await userManager.CreateAsync(new User { UserName = nameIdentifier, SteamId = nameIdentifier.Split(\"/\").Last() });\r\n            if (result.Succeeded)\r\n            {\r\n                var user = await userManager.FindByNameAsync(nameIdentifier);\r\n                var identity = await userManager.AddLoginAsync(user, new UserLoginInfo(provider, nameIdentifier, name));\r\n\r\n                if (identity.Succeeded)\r\n                {\r\n                    await signInManager.ExternalLoginSignInAsync(provider, nameIdentifier, false);\r\n                    return Redirect(ReturnUrl ?? \"/api/auth/claims\");\r\n                }\r\n            }\r\n        }\r\n\r\n        return BadRequest(new { success = false });\r\n    }\r\n\r\n    [HttpGet(\"claims\")]\r\n    [Authorize]\r\n    public async Task<IActionResult> GetClaims()\r\n    {\r\n        var user = await userManager.GetUserAsync(User);\r\n        var claims =\r\n            User.Claims.Select(c => new\r\n            {\r\n                c.Type,\r\n                c.Value\r\n            });\r\n\r\n        var inAdmin = new string[] {\r\n            \"User.IsInRole(\\\"Admin\\\") = \" + User.IsInRole(\"Admin\"),\r\n            \"User.IsInRole(\\\"ADMIN\\\") = \" + User.IsInRole(\"ADMIN\"),\r\n            \"User.IsInRole(\\\"admin\\\") = \" + User.IsInRole(\"admin\"),\r\n            \"userManager.IsInRoleAsync(user, \\\"admin\\\") = \" + await userManager.IsInRoleAsync(user, \"admin\")\r\n        };\r\n\r\n        return Ok(new { success = true, data = new { claims, inAdmin, User.Identities } });\r\n    }\r\n\r\nRoleSeeder.cs\r\n\r\n    public static async Task Seed(RoleManager<Role> roleManager)\r\n    {\r\n        // Developer Role\r\n        if(!await roleManager.RoleExistsAsync(\"Developer\"))\r\n        {\r\n            var role = new Role(\"Developer\");\r\n            await roleManager.CreateAsync(role);\r\n        }\r\n        // Community Manager Role\r\n        if (!await roleManager.RoleExistsAsync(\"Community Manager\"))\r\n        {\r\n            var role = new Role(\"Community Manager\");\r\n            await roleManager.CreateAsync(role);\r\n        }\r\n        // Admin Role\r\n        if (!await roleManager.RoleExistsAsync(\"Admin\"))\r\n        {\r\n            var role = new Role(\"Admin\");\r\n            await roleManager.CreateAsync(role);\r\n        }\r\n        // Moderator Role\r\n        if (!await roleManager.RoleExistsAsync(\"Moderator\"))\r\n        {\r\n            var role = new Role(\"Moderator\");\r\n            await roleManager.CreateAsync(role);\r\n        }\r\n    }\r\n\r\nTesting Screenshot: https://i.stack.imgur.com/oarHT.png","Url":"https://github.com/aspnet/Identity/issues/1997","RelatedDescription":"Closed issue \"User Roles not being added as Role Type claims on sign in (Identity Core) (Bug? / User Error?)\" (#1997)"},{"Id":"367544074","IsPullRequest":true,"CreatedAt":"2018-10-07T11:09:39","Actor":"huysentruitw","Number":"1996","RawContent":null,"Title":"Use the correct logging category inside RegisterModel","State":"open","Body":"This pull-request fixes the logging category when messages are logged from the ASP.NET Identity UI Register page. Should be a non-breaking change.","Url":"https://github.com/aspnet/Identity/pull/1996","RelatedDescription":"Open PR \"Use the correct logging category inside RegisterModel\" (#1996)"},{"Id":"367334324","IsPullRequest":true,"CreatedAt":"2018-10-05T19:22:59","Actor":"dotnet-maestro-bot","Number":"1995","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @natemcmaster\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.1-to-release/2.2' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.1.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1995","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#1995)"},{"Id":"367312392","IsPullRequest":true,"CreatedAt":"2018-10-05T19:09:41","Actor":"natemcmaster","Number":"1994","RawContent":null,"Title":"Update branding to 2.1.6-servicing","State":"closed","Body":"Per discussion with our team, we want to make the following changes to versioning during servicing updates:\r\n\r\n* The versioning on packages with ship with ASP.NET Core should be consistent\r\n* (No change) on packages with changes in them ship during servicing updates\r\n* Version gaps are okay. For example, this repo is producing a patch for 2.1.6, so packages will be 2.1.6. It did not patch for 2.1.4 or 2.1.3 so those versions will be skipped.\r\n\r\nThis also includes another minor change: for consistency with the rest of the .NET Core teams, pre-release servicing builds will be 2.1.x-servicing-buildnumber.","Url":"https://github.com/aspnet/Identity/pull/1994","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.6-servicing\" (#1994)"},{"Id":"367074207","IsPullRequest":false,"CreatedAt":"2018-10-05T06:17:11","Actor":"yetanotherchris","Number":"1993","RawContent":null,"Title":"Example of an IClaimStore","State":"open","Body":"Hello,\r\n\r\nI'm looking through the source (EF mainly) and can't find an IClaimStore example. Does it implement it? Or is there source repo somewhere else I could find a working example?","Url":"https://github.com/aspnet/Identity/issues/1993","RelatedDescription":"Open issue \"Example of an IClaimStore\" (#1993)"},{"Id":"366874121","IsPullRequest":true,"CreatedAt":"2018-10-04T16:36:56","Actor":"dotnet-maestro-bot","Number":"1992","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @natemcmaster\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.1-to-release/2.2' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.1.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1992","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#1992)"},{"Id":"366753973","IsPullRequest":true,"CreatedAt":"2018-10-04T11:55:28","Actor":"Asesjix","Number":"1991","RawContent":null,"Title":"Make DbSet's virtual (#1868)","State":"open","Body":"This PR sets the virtual modifier for the DbSets in IdentityDbContext and IdentityUserContext.\r\nIssue reference: #1868 ","Url":"https://github.com/aspnet/Identity/pull/1991","RelatedDescription":"Open PR \"Make DbSet's virtual (#1868)\" (#1991)"},{"Id":"366495112","IsPullRequest":true,"CreatedAt":"2018-10-03T19:37:35","Actor":"miroslavpopovic","Number":"1990","RawContent":null,"Title":"Add missing \"private readonly\" modifiers to _userManager and _logger fields","State":"open","Body":"Two small fixes for missing \"private readonly\" modifiers in Identity UI.","Url":"https://github.com/aspnet/Identity/pull/1990","RelatedDescription":"Open PR \"Add missing \"private readonly\" modifiers to _userManager and _logger fields\" (#1990)"},{"Id":"365812687","IsPullRequest":false,"CreatedAt":"2018-10-02T09:26:41","Actor":"Ponant","Number":"1988","RawContent":null,"Title":"What is your opinion on Passwordless auth","State":"open","Body":"Hi,\r\nI understand that Password-less auth à la Medium or Slack is not RFC based standard, but I would like to have some feedback on its advantages and/or disadvantages over password-based flows as we do with asp.net identity. I would exclude from the discussion login via social providers, hence concentrating the discussion feedback around the situation where:\r\n1) User enters Email on the website or app\r\n2) Email is sent to user with a one-time login\r\n3) User checks email and clicks the link and gets logged in the browser or app.\r\n\r\nI tried to think it over and over and I see absolutely no advantage of password-based schema over password-less ones. Hence my question :)","Url":"https://github.com/aspnet/Identity/issues/1988","RelatedDescription":"Open issue \"What is your opinion on Passwordless auth\" (#1988)"}],"ResultType":"GitHubIssue"},"Kestrel-Issues":{"Issues":[{"Id":"370860831","IsPullRequest":true,"CreatedAt":"2018-10-17T01:23:43","Actor":"dotnet-maestro-bot","Number":"3025","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"open","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @halter73\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/3025","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#3025)"},{"Id":"370859830","IsPullRequest":true,"CreatedAt":"2018-10-17T01:17:35","Actor":"halter73","Number":"3024","RawContent":null,"Title":"Fix race in HTTP/2 stream abort drain timeout test","State":"open","Body":"Fixes most recent failure reported in #2897.\r\n\r\n```\r\n[xUnit.net 00:00:47.13]     AbortedStream_ResetsAndDrainsRequest_RefusesFramesAfterCooldownExpires(finalFrameType: DATA) [FAIL]\r\n2018-10-16T18:33:32.8755774Z   Failed   AbortedStream_ResetsAndDrainsRequest_RefusesFramesAfterCooldownExpires(finalFrameType: DATA)\r\n2018-10-16T18:33:32.8813235Z   Error Message:\r\n2018-10-16T18:33:32.8815566Z    System.TimeoutException : The operation at /_/test/shared/TaskTimeoutExtensions.cs:12 timed out after reaching the limit of 30000ms.\r\n2018-10-16T18:33:32.8817542Z   Stack Trace:\r\n2018-10-16T18:33:32.8820211Z      at Microsoft.AspNetCore.Testing.TaskExtensions.<TimeoutAfter>d__0`1.MoveNext()\r\n2018-10-16T18:33:32.8822603Z   --- End of stack trace from previous location where exception was thrown ---\r\n2018-10-16T18:33:32.8824590Z      at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n2018-10-16T18:33:32.8826444Z      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n2018-10-16T18:33:32.8828404Z      at Microsoft.AspNetCore.Server.Kestrel.Core.Tests.Http2TestBase.<ReceiveFrameAsync>d__92.MoveNext() in /_/test/Kestrel.InMemory.FunctionalTests/Http2/Http2TestBase.cs:line 1044\r\n2018-10-16T18:33:32.8830987Z   --- End of stack trace from previous location where exception was thrown ---\r\n2018-10-16T18:33:32.8833656Z      at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n2018-10-16T18:33:32.8836065Z      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n2018-10-16T18:33:32.8837806Z      at Microsoft.AspNetCore.Server.Kestrel.Core.Tests.Http2TestBase.<WaitForConnectionErrorAsync>d__97`1.MoveNext() in /_/test/Kestrel.InMemory.FunctionalTests/Http2/Http2TestBase.cs:line 1113\r\n2018-10-16T18:33:32.8840364Z   --- End of stack trace from previous location where exception was thrown ---\r\n2018-10-16T18:33:32.8842715Z      at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n2018-10-16T18:33:32.8844630Z      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n2018-10-16T18:33:32.8846509Z      at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n2018-10-16T18:33:32.8848498Z      at Microsoft.AspNetCore.Server.Kestrel.Core.Tests.Http2TimeoutTests.<AbortedStream_ResetsAndDrainsRequest_RefusesFramesAfterCooldownExpires>d__5.MoveNext() in /_/test/Kestrel.InMemory.FunctionalTests/Http2/Http2TimeoutTests.cs:line 242\r\n2018-10-16T18:33:32.8948416Z   --- End of stack trace from previous location where exception was thrown ---\r\n2018-10-16T18:33:32.8952714Z      at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n2018-10-16T18:33:32.8954191Z      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n2018-10-16T18:33:32.8956480Z   --- End of stack trace from previous location where exception was thrown ---\r\n2018-10-16T18:33:32.8958385Z      at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n2018-10-16T18:33:32.8961256Z      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n2018-10-16T18:33:32.8963698Z   --- End of stack trace from previous location where exception was thrown ---\r\n2018-10-16T18:33:32.8966296Z      at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n2018-10-16T18:33:32.8968371Z      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n2018-10-16T18:33:32.8970957Z   Standard Output Messages:\r\n2018-10-16T18:33:32.8973301Z    | [0.001s] TestLifetime Information: Starting test AbortedStream_ResetsAndDrainsRequest_RefusesFramesAfterCooldownExpires-DATA at 2018-10-16T18:33:01\r\n2018-10-16T18:33:32.8975806Z    | [0.010s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" sending SETTINGS frame for stream ID 0 with length 18 and flags NONE\r\n2018-10-16T18:33:32.8977595Z    | [0.010s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" sending WINDOW_UPDATE frame for stream ID 0 with length 4 and flags 0x0\r\n2018-10-16T18:33:32.8980259Z    | [0.010s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received SETTINGS frame for stream ID 0 with length 0 and flags NONE\r\n2018-10-16T18:33:32.8982576Z    | [0.011s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" sending SETTINGS frame for stream ID 0 with length 0 and flags ACK\r\n2018-10-16T18:33:32.8985425Z    | [0.012s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received HEADERS frame for stream ID 1 with length 37 and flags END_HEADERS\r\n2018-10-16T18:33:32.8987856Z    | [0.017s] Microsoft.AspNetCore.Server.Kestrel Debug: Trace id \":00000001\": HTTP/2 stream error \"INTERNAL_ERROR\". A Reset is being sent to the stream.\r\n2018-10-16T18:33:32.8991342Z    | Microsoft.AspNetCore.Connections.ConnectionAbortedException: The connection was aborted by the application.\r\n2018-10-16T18:33:32.8994465Z    | [0.019s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" sending RST_STREAM frame for stream ID 1 with length 4 and flags 0x0\r\n2018-10-16T18:33:32.8998169Z    | [0.028s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n2018-10-16T18:33:32.9000701Z    | [0.028s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n2018-10-16T18:33:32.9003177Z    | [0.029s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n2018-10-16T18:33:32.9005034Z    | [0.029s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n2018-10-16T18:33:32.9006909Z    | [0.029s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n2018-10-16T18:33:32.9009256Z    | [0.029s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n2018-10-16T18:33:32.9011494Z    | [0.029s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n2018-10-16T18:33:32.9013619Z    | [0.029s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n2018-10-16T18:33:32.9015458Z    | [0.029s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n2018-10-16T18:33:32.9017129Z    | [0.029s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n2018-10-16T18:33:32.9019458Z    | [0.030s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n2018-10-16T18:33:32.9021485Z    | [0.030s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" received DATA frame for stream ID 1 with length 100 and flags END_STREAM\r\n2018-10-16T18:33:32.9023995Z    | [0.053s] Microsoft.AspNetCore.Server.Kestrel Information: Connection id \"(null)\", Request id \":00000001\": the application completed without reading the entire request body.\r\n2018-10-16T18:33:32.9025747Z    | [30.040s] Microsoft.AspNetCore.Server.Kestrel Trace: Connection id \"(null)\" sending GOAWAY frame for stream ID 0 with length 8 and flags 0x0\r\n2018-10-16T18:33:32.9027912Z    | [30.040s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"(null)\" is closed. The last processed stream ID was 1.\r\n2018-10-16T18:33:32.9030244Z    | [30.040s] TestLifetime Information: Finished test AbortedStream_ResetsAndDrainsRequest_RefusesFramesAfterCooldownExpires-DATA in 30.0399266s\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/pull/3024","RelatedDescription":"Open PR \"Fix race in HTTP/2 stream abort drain timeout test\" (#3024)"},{"Id":"370851497","IsPullRequest":true,"CreatedAt":"2018-10-17T01:15:47","Actor":"halter73","Number":"3023","RawContent":null,"Title":"Fix test flakiness caused by not reading in a loop","State":"closed","Body":"Fixes #3021","Url":"https://github.com/aspnet/KestrelHttpServer/pull/3023","RelatedDescription":"Closed or merged PR \"Fix test flakiness caused by not reading in a loop\" (#3023)"},{"Id":"370807277","IsPullRequest":false,"CreatedAt":"2018-10-17T01:15:47","Actor":"aspnet-hello","Number":"3021","RawContent":null,"Title":"Test failure: RequestBodyReadAsyncCanBeCancelled","State":"closed","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](https://dnceng.visualstudio.com/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_build/results?buildId=31136) with the following error:\r\n\r\n```\r\nAssert.Equal() Failure\n           ↓ (pos 1)\nExpected: Hello \nActual:   H\n           ↑ (pos 1)\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on release/2.2.\r\n\r\nCC muratg","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3021","RelatedDescription":"Closed issue \"Test failure: RequestBodyReadAsyncCanBeCancelled\" (#3021)"},{"Id":"370807411","IsPullRequest":false,"CreatedAt":"2018-10-16T21:28:09","Actor":"aspnet-hello","Number":"3022","RawContent":null,"Title":"Test failure: LargeUpload","State":"open","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](https://dnceng.visualstudio.com/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_build/results?buildId=31046) with the following error:\r\n\r\n```\r\nAssert.Contains() Failure\nNot found: bytesRead: 41943040\nIn value:  \r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on release/2.2.\r\n\r\nCC muratg","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3022","RelatedDescription":"Open issue \"Test failure: LargeUpload\" (#3022)"},{"Id":"370769240","IsPullRequest":false,"CreatedAt":"2018-10-16T21:00:23","Actor":"AceHack","Number":"3020","RawContent":null,"Title":"Perf Questions around HttpClient using Http/2","State":"closed","Body":"I created a multiplexed WebSocket client/server based on Pipelines and David Fowler's example here https://github.com/davidfowl/TcpEcho and compared the performance to HttpClient using Http/2 which has multiplexing as well. I get very different results. Am I doing something wrong with HttpClient? Here are my results.  Why is HttpClient so slow, I threw my MultiplexedWebSocket together very fast and have not really done any optimization to it either.  I'm hoping I'm just somehow using http/2 and the HttpClient incorrectly.  Thanks for your help.\r\n\r\nMultiplexedWebSocket: 115,309 per second\r\nHttpClient: 7,075 per second\r\n\r\nhttps://github.com/AceHack/MultiplexedWebSockets","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3020","RelatedDescription":"Closed issue \"Perf Questions around HttpClient using Http/2\" (#3020)"},{"Id":"370657474","IsPullRequest":false,"CreatedAt":"2018-10-16T18:49:36","Actor":"jakubsvobodacz","Number":"3018","RawContent":null,"Title":"System.InvalidOperationException: Unable to configure HTTPS endpoint. No server certificate was specified, and the default developer certificate could not be found.","State":"closed","Body":"Hey all,\r\n\r\nToday, out of nothing (no changes in project or with anything else) when trying to debug my aspnet core (ver. 2.1.402) project I ran into this: \r\n\r\n`System.InvalidOperationException: Unable to configure HTTPS endpoint. No server certificate was specified, and the default developer certificate could not be found.`\r\n\r\nThe suggestion in the error was to: `System.InvalidOperationException: Unable to configure HTTPS endpoint. No server certificate was specified, and the default developer certificate could not be found.`\r\n\r\nI tried that, and it did not help. Further, I tried to run `dotnet dev-certs https\r\ndotnet dev-certs https --clean` but the clean could not go through and threw this: `There was an error trying to clean HTTPS development certificates on this machine.\r\nSequence contains no matching element`\r\n\r\nAny way how to fix this, so I can debug?","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3018","RelatedDescription":"Closed issue \"System.InvalidOperationException: Unable to configure HTTPS endpoint. No server certificate was specified, and the default developer certificate could not be found.\" (#3018)"},{"Id":"370744019","IsPullRequest":false,"CreatedAt":"2018-10-16T18:35:32","Actor":"JunTaoLuo","Number":"3019","RawContent":null,"Title":"Remove test retries for flaky tests caused by https://github.com/dotnet/corefx/issues/30691 ","State":"open","Body":"We should revert https://github.com/aspnet/KestrelHttpServer/pull/3016 when the corefx issue is resolved.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3019","RelatedDescription":"Open issue \"Remove test retries for flaky tests caused by https://github.com/dotnet/corefx/issues/30691 \" (#3019)"},{"Id":"370406975","IsPullRequest":true,"CreatedAt":"2018-10-16T18:25:45","Actor":"JunTaoLuo","Number":"3016","RawContent":null,"Title":"Skip falky tests caused by https://github.com/dotnet/corefx/issues/30691","State":"closed","Body":"Addresses most of the tests flagged by https://github.com/aspnet/KestrelHttpServer/issues/2777 and https://github.com/aspnet/KestrelHttpServer/issues/2701. We'll start retrying these tests until the corefx issue is fixed.\r\n\r\nSide note: Originally I was planning on adding a feature to the RetryTest attribute to limit this to Win10 since that's the only version of windows these tests are failing on but I ran into implementation issues in https://github.com/aspnet/Logging/tree/johluo/match-os-version where my Win10 machine was being recognized as Win8.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/3016","RelatedDescription":"Closed or merged PR \"Skip falky tests caused by https://github.com/dotnet/corefx/issues/30691\" (#3016)"},{"Id":"370572628","IsPullRequest":false,"CreatedAt":"2018-10-16T11:47:56","Actor":"Praveen-Rai","Number":"3017","RawContent":null,"Title":"Add support for PEM format SSL certificates","State":"open","Body":"Presently, Kestrel configuration supports only the PKCS12 ( *.pfx ) format certificates. Whereas, PEM seems to be much more widely used format ( Public and Private keys are stored in two different files ) and most often one needs to convert the certificate format using OpenSSL before they can be used with Kestrel. \r\n\r\nReferring to : https://github.com/dotnet/corefx/issues/32367#issuecomment-423671246\r\nIt looks like that the core already has api's to load public and private keys from two different files. Can we leverage them and add the support for the PEM certificate formats ?\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3017","RelatedDescription":"Open issue \"Add support for PEM format SSL certificates\" (#3017)"},{"Id":"370404848","IsPullRequest":false,"CreatedAt":"2018-10-16T01:37:39","Actor":"clement911","Number":"3015","RawContent":null,"Title":"BadHttpRequestException: Reading the request body timed out due to data arriving too slowly","State":"open","Body":"We have an asp.net core 2.1 app running on .net 4.7 in azure web app service.\r\n\r\nRecently we started getting A LOT of the following error:\r\n\r\n> Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Reading the request body timed out due to data arriving too slowly. See MinRequestBodyDataRate.\r\n\r\nOur app is under pretty constant heavy load (from incoming webhooks mostly). During big spikes, we tend to see more of these.\r\n\r\nWe used to run on asp.net core 2.0 / .net 4.6.1 for many months and we never saw that error before.\r\nIt seems to have started happening following our recent upgrade to asp.net core 2.1 / .net 4.7.\r\n\r\nWe'd like to get to the bottom of this issue, but we are not even sure where to start.\r\nAny thoughts?","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3015","RelatedDescription":"Open issue \"BadHttpRequestException: Reading the request body timed out due to data arriving too slowly\" (#3015)"},{"Id":"369605720","IsPullRequest":false,"CreatedAt":"2018-10-15T18:35:52","Actor":"aspnet-hello","Number":"3005","RawContent":null,"Title":"Test failure: LargeUpload","State":"closed","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=576419&buildTypeId=Releases_21Public_UbuntuUniverse) with the following error:\r\n\r\n```\r\nSystem.IO.IOException : Unable to write data to the transport connection: Exception of type 'System.Net.InternalException' was thrown..\r\n---- System.Net.InternalException : Exception of type 'System.Net.InternalException' was thrown.\r\n   at System.Net.Sockets.NetworkStream.WriteAsync(Byte[] buffer, Int32 offset, Int32 size, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.MaxRequestBufferSizeTests.<>c__DisplayClass4_2.<<LargeUpload>b__0>d.MoveNext() in /_/test/Kestrel.FunctionalTests/MaxRequestBufferSizeTests.cs:line 111\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.MaxRequestBufferSizeTests.LargeUpload(Nullable`1 maxRequestBufferSize, Boolean connectionAdapter, Boolean expectPause) in /_/test/Kestrel.FunctionalTests/MaxRequestBufferSizeTests.cs:line 155\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Sockets.SocketAsyncContext.Register()\r\n   at System.Net.Sockets.SocketAsyncContext.OperationQueue`1.StartAsyncOperation(SocketAsyncContext context, TOperation operation, Int32 observedSequenceNumber)\r\n   at System.Net.Sockets.SocketAsyncContext.SendToAsync(Memory`1 buffer, Int32 offset, Int32 count, SocketFlags flags, Byte[] socketAddress, Int32& socketAddressLen, Int32& bytesSent, Action`5 callback)\r\n   at System.Net.Sockets.SocketAsyncEventArgs.DoOperationSend(SafeCloseSocket handle)\r\n   at System.Net.Sockets.Socket.SendAsync(SocketAsyncEventArgs e)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.SendAsyncForNetworkStream(Socket socket)\r\n   at System.Net.Sockets.Socket.SendAsyncForNetworkStream(ReadOnlyMemory`1 buffer, SocketFlags socketFlags, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.NetworkStream.WriteAsync(Byte[] buffer, Int32 offset, Int32 size, CancellationToken cancellationToken)\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.1.\r\n\r\nCC @muratg","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3005","RelatedDescription":"Closed issue \"Test failure: LargeUpload\" (#3005)"},{"Id":"369748361","IsPullRequest":true,"CreatedAt":"2018-10-15T18:33:48","Actor":"dotnet-maestro-bot","Number":"3012","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @Tratcher\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/3012","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#3012)"},{"Id":"370264613","IsPullRequest":true,"CreatedAt":"2018-10-15T18:30:19","Actor":"JunTaoLuo","Number":"3014","RawContent":null,"Title":"Use dev certs for samples and update tfms","State":"closed","Body":"Noticed these while I was running samples and benchmarks.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/3014","RelatedDescription":"Closed or merged PR \"Use dev certs for samples and update tfms\" (#3014)"},{"Id":"369742322","IsPullRequest":true,"CreatedAt":"2018-10-15T18:09:26","Actor":"halter73","Number":"3011","RawContent":null,"Title":"Add test to verify HTTP/2 preamble is included in keep-alive timeout","State":"closed","Body":"#2900","Url":"https://github.com/aspnet/KestrelHttpServer/pull/3011","RelatedDescription":"Closed or merged PR \"Add test to verify HTTP/2 preamble is included in keep-alive timeout\" (#3011)"},{"Id":"369683722","IsPullRequest":false,"CreatedAt":"2018-10-15T16:03:03","Actor":"ryanbrandenburg","Number":"3009","RawContent":null,"Title":"Test failure: MaxRequestBodySize_AppCanLowerLimit","State":"closed","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](https://dnceng.visualstudio.com/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_build/results?buildId=30237) with the following error:\n\n```\nAssert.Equal() Failure\nExpected: GOAWAY\nActual:   RST_STREAM\n```\n\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\n\nThis test failed on release/2.2.\n\nCC @muratg","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3009","RelatedDescription":"Closed issue \"Test failure: MaxRequestBodySize_AppCanLowerLimit\" (#3009)"},{"Id":"369778270","IsPullRequest":false,"CreatedAt":"2018-10-13T07:48:45","Actor":"davidfowl","Number":"3013","RawContent":null,"Title":"Potentially revert \"Remove calls to MemoryMarshal.GetReference\"","State":"open","Body":"We may want to revert https://github.com/aspnet/KestrelHttpServer/commit/2999aa54cd7a4b572240378f2318d4b730ca42d8.\r\n\r\nhttps://github.com/dotnet/corefx/pull/32669#issuecomment-429506746\r\n\r\ncc @sebastienros ","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3013","RelatedDescription":"Open issue \"Potentially revert \"Remove calls to MemoryMarshal.GetReference\"\" (#3013)"},{"Id":"368964548","IsPullRequest":true,"CreatedAt":"2018-10-13T07:01:25","Actor":"davidfowl","Number":"2998","RawContent":null,"Title":"Use ValueTask instead of custom awaiter for SocketAwaitableEventArgs","State":"closed","Body":"- This could improve the performance of async operations (reduce the number of allocations)\r\n\r\nTODO: Measure performance, I may combine this with #2974 ","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2998","RelatedDescription":"Closed or merged PR \"Use ValueTask instead of custom awaiter for SocketAwaitableEventArgs\" (#2998)"},{"Id":"369741560","IsPullRequest":true,"CreatedAt":"2018-10-13T00:14:45","Actor":"Tratcher","Number":"3010","RawContent":null,"Title":"HTTP/2 Test stabalization","State":"closed","Body":"#3009 These tests were flaky after we added resets for incomplete request bodies. There's a race between processing the data in the last frame, reacting to the error, and setting the end-of-stream flag. The simplest solution is to force the race by not sending the end-of-stream flag when where testing error conditions.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/3010","RelatedDescription":"Closed or merged PR \"HTTP/2 Test stabalization\" (#3010)"},{"Id":"369300809","IsPullRequest":true,"CreatedAt":"2018-10-12T22:16:15","Actor":"dotnet-maestro-bot","Number":"3002","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/3002","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#3002)"},{"Id":"369332292","IsPullRequest":true,"CreatedAt":"2018-10-12T20:15:46","Actor":"halter73","Number":"3003","RawContent":null,"Title":"Implement MinResponseDataRate for HTTP/2","State":"closed","Body":"#2807","Url":"https://github.com/aspnet/KestrelHttpServer/pull/3003","RelatedDescription":"Closed or merged PR \"Implement MinResponseDataRate for HTTP/2\" (#3003)"},{"Id":"369273137","IsPullRequest":true,"CreatedAt":"2018-10-12T18:43:41","Actor":"dotnet-maestro-bot","Number":"3001","RawContent":null,"Title":"[automated] Merge branch 'maestro/release/2.2' => 'release/2.2'","State":"closed","Body":"I detected changes in the maestro/release/2.2 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on maestro/release/2.2 by the following committers:\n\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/maestro/release/2.2-to-release/2.2:merge/maestro/release/2.2-to-release/2.2\r\ngit merge merge/maestro/release/2.2-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/maestro/release/2.2-to-release/2.2' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on maestro/release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/3001","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'maestro/release/2.2' => 'release/2.2'\" (#3001)"},{"Id":"369270624","IsPullRequest":true,"CreatedAt":"2018-10-12T18:42:06","Actor":"dotnet-maestro-bot","Number":"3000","RawContent":null,"Title":"[automated] Merge branch 'maestro/master' => 'master'","State":"closed","Body":"I detected changes in the maestro/master branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on maestro/master by the following committers:\n\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/maestro/master-to-master:merge/maestro/master-to-master\r\ngit merge merge/maestro/master-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/maestro/master-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on maestro/master.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/3000","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'maestro/master' => 'master'\" (#3000)"},{"Id":"369661604","IsPullRequest":false,"CreatedAt":"2018-10-12T18:27:24","Actor":"halter73","Number":"3008","RawContent":null,"Title":"Don't log ConnectionAbortedExceptions in HttpProtocol/Http2Connection as warning","State":"open","Body":"ConnectionAbortedExceptions are already logged by the transport. If these are logged at all by the input processing loop, these shouldn't be logged as warning. Examples:\r\n\r\n```\r\n[0.002s] [TestLifetime] [Information] Starting test ResponseBodyWriteAsyncCanBeCancelled at 2018-10-12T17:51:42\r\n[0.009s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting starting\r\n[0.009s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting started\r\n[0.009s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Loaded hosting startup assembly testhost\r\n[0.010s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"0HLHGDDCK10TF\" started.\r\n[0.011s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Information] Request starting HTTP/1.1 GET http:///  \r\n[0.025s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"0HLHGDDCK10TF\" closing because: \"The connection or stream was aborted because a write operation was aborted with a CancellationToken.\"\r\n[0.025s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"0HLHGDDCK10TF\" disconnecting.\r\n[0.026s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"0HLHGDDCK10TF\" completed keep alive response.\r\n[0.026s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Information] Request finished in 14.8892ms 200 \r\n[0.028s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting shutdown\r\n[0.046s] [Microsoft.AspNetCore.Server.Kestrel] [Warning] Connection processing ended abnormally.\r\nMicrosoft.AspNetCore.Connections.ConnectionAbortedException: The connection or stream was aborted because a write operation was aborted with a CancellationToken. ---> System.OperationCanceledException: The operation was canceled.\r\n   at System.Threading.CancellationToken.ThrowOperationCanceledException()\r\n   at System.IO.Pipelines.Pipe.GetFlushResult(FlushResult& result)\r\n   at System.IO.Pipelines.Pipe.GetFlushAsyncResult()\r\n   at System.IO.Pipelines.Pipe.DefaultPipeWriter.GetResult(Int16 token)\r\n   at System.Threading.Tasks.ValueTask`1.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.TimingPipeFlusher.TimeFlushAsync(MinDataRate minRate, Int64 count, IHttpOutputAborter outputAborter, CancellationToken cancellationToken) in G:\\dev\\aspnet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Infrastructure\\TimingPipeFlusher.cs:line 82\r\n   --- End of inner exception stack trace ---\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1Connection.BeginRead(ValueTask`1& awaitable) in G:\\dev\\aspnet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http\\Http1Connection.cs:line 454\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application) in G:\\dev\\aspnet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http\\HttpProtocol.cs:line 523\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequestsAsync[TContext](IHttpApplication`1 application) in G:\\dev\\aspnet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http\\HttpProtocol.cs:line 472\r\n[0.048s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"0HLHGDDCK10TF\" stopped.\r\n[0.055s] [TestLifetime] [Information] Finished test ResponseBodyWriteAsyncCanBeCancelled in 0.0533177s\r\n```\r\n\r\n```\r\n[0.002s] [TestLifetime] [Information] Starting test HEADERS_ReceivedWithoutAllCONTINUATIONs_WithinRequestHeadersTimeout_AbortsConnection at 2018-10-12T17:51:34\r\n[0.039s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" sending SETTINGS frame for stream ID 0 with length 18 and flags NONE\r\n[0.040s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" sending WINDOW_UPDATE frame for stream ID 0 with length 4 and flags 0x0\r\n[0.062s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received SETTINGS frame for stream ID 0 with length 0 and flags NONE\r\n[0.062s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" sending SETTINGS frame for stream ID 0 with length 0 and flags ACK\r\n[0.067s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received HEADERS frame for stream ID 1 with length 318 and flags NONE\r\n[0.071s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received CONTINUATION frame for stream ID 1 with length 0 and flags NONE\r\n[0.079s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received CONTINUATION frame for stream ID 1 with length 0 and flags NONE\r\n[0.081s] [Microsoft.AspNetCore.Server.Kestrel] [Information] Connection id \"null\" bad request data: \"Reading the request headers timed out.\"\r\nMicrosoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Reading the request headers timed out.\r\n[0.083s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" sending GOAWAY frame for stream ID 0 with length 8 and flags 0x0\r\n[0.083s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"null\" is closed. The last processed stream ID was 1.\r\n[0.090s] [Microsoft.AspNetCore.Server.Kestrel] [Warning] Connection processing ended abnormally.\r\nMicrosoft.AspNetCore.Connections.ConnectionAbortedException: Reading the request headers timed out.\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.PipeCompletion.IsCompletedOrThrow()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection.ProcessRequestsAsync[TContext](IHttpApplication`1 application) in G:\\dev\\aspnet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http2\\Http2Connection.cs:line 209\r\n[0.093s] [TestLifetime] [Information] Finished test HEADERS_ReceivedWithoutAllCONTINUATIONs_WithinRequestHeadersTimeout_AbortsConnection in 0.0912812s\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3008","RelatedDescription":"Open issue \"Don't log ConnectionAbortedExceptions in HttpProtocol/Http2Connection as warning\" (#3008)"},{"Id":"369659248","IsPullRequest":false,"CreatedAt":"2018-10-12T18:20:36","Actor":"halter73","Number":"3007","RawContent":null,"Title":"RST HTTP/2 stream when a CancellationToken fires mid-write","State":"open","Body":"See https://github.com/aspnet/KestrelHttpServer/pull/3003/files#r224629533","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3007","RelatedDescription":"Open issue \"RST HTTP/2 stream when a CancellationToken fires mid-write\" (#3007)"},{"Id":"369657771","IsPullRequest":false,"CreatedAt":"2018-10-12T18:16:26","Actor":"halter73","Number":"3006","RawContent":null,"Title":"Both reader and writer has to be completed to be able to reset the pipe","State":"open","Body":"I'm seeing \"Both reader and writer has to be completed to be able to reset the pipe\" in some HTTP/2 tests where app doesn't fully consume request body. I've noticed this in AppDoesNotReadRequestBody_ResetsAndDrainsRequest and DATA_Received_ButNotConsumedByApp_CountsTowardsInputFlowControl.\r\n\r\n```\r\n[0.003s] [TestLifetime] [Information] Starting test AppDoesNotReadRequestBody_ResetsAndDrainsRequest-CONTINUATION at 2018-10-12T17:51:38\r\n[0.015s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" sending SETTINGS frame for stream ID 0 with length 18 and flags NONE\r\n[0.015s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" sending WINDOW_UPDATE frame for stream ID 0 with length 4 and flags 0x0\r\n[0.016s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received SETTINGS frame for stream ID 0 with length 0 and flags NONE\r\n[0.053s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" sending SETTINGS frame for stream ID 0 with length 0 and flags ACK\r\n[0.054s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received HEADERS frame for stream ID 1 with length 37 and flags END_HEADERS\r\n[0.056s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" sending HEADERS frame for stream ID 1 with length 55 and flags END_HEADERS\r\n[0.056s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" sending DATA frame for stream ID 1 with length 0 and flags END_STREAM\r\n[0.072s] [Microsoft.AspNetCore.Server.Kestrel] [Warning] Connection processing ended abnormally.\r\nSystem.InvalidOperationException: Both reader and writer has to be completed to be able to reset the pipe.\r\n   at System.IO.Pipelines.ThrowHelper.ThrowInvalidOperationException_ResetIncompleteReaderWriter()\r\n   at System.IO.Pipelines.Pipe.Reset()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application) in G:\\dev\\aspnet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http\\HttpProtocol.cs:line 635\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequestsAsync[TContext](IHttpApplication`1 application) in G:\\dev\\aspnet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http\\HttpProtocol.cs:line 472\r\n[0.073s] [Microsoft.AspNetCore.Server.Kestrel] [Information] Connection id \"null\", Request id \":00000001\": the application completed without reading the entire request body.\r\n[0.073s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" sending RST_STREAM frame for stream ID 1 with length 4 and flags 0x0\r\n[0.144s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n[0.144s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n[0.144s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n[0.145s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n[0.145s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n[0.145s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n[0.145s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n[0.146s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n[0.146s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n[0.146s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received DATA frame for stream ID 1 with length 100 and flags NONE\r\n[0.147s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received HEADERS frame for stream ID 1 with length 30 and flags END_STREAM\r\n[0.147s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" received CONTINUATION frame for stream ID 1 with length 30 and flags END_HEADERS\r\n[0.147s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"null\" sending GOAWAY frame for stream ID 0 with length 8 and flags 0x0\r\n[0.147s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"null\" is closed. The last processed stream ID was 1.\r\n[0.291s] [TestLifetime] [Information] Finished test AppDoesNotReadRequestBody_ResetsAndDrainsRequest-CONTINUATION in 0.2488673s\r\n```\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3006","RelatedDescription":"Open issue \"Both reader and writer has to be completed to be able to reset the pipe\" (#3006)"},{"Id":"369401035","IsPullRequest":false,"CreatedAt":"2018-10-12T05:16:25","Actor":"huanbd","Number":"3004","RawContent":null,"Title":"Malformed request: invalid headers cause endpoints to give status code 400","State":"closed","Body":"This is log error, that I have caught in my website:\r\n`2018-10-12 10:30:40.3584||Microsoft.AspNetCore.Server.Kestrel|INFO|Connection id \"0HLHFUBTL1KAH\" bad request data: \"Malformed request: invalid headers.\" Malformed request: invalid headers.`\r\n\r\nI found the root of error is cookie, my site embed some vendor advertising, and they add cookie with content: `[{\"a\":\"194_ChÃºc táº¿t\",\"d\":25315269}]`\r\n\r\nI have followed [#issue 311](https://github.com/aspnet/Announcements/issues/311) in my local but It still can't resolve\r\n\r\nI have attached fiddler log bellow\r\n[fiddler_request.zip](https://github.com/aspnet/KestrelHttpServer/files/2471686/fiddler_request.zip)\r\n\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/3004","RelatedDescription":"Closed issue \"Malformed request: invalid headers cause endpoints to give status code 400\" (#3004)"},{"Id":"368434568","IsPullRequest":true,"CreatedAt":"2018-10-11T20:45:10","Actor":"Tratcher","Number":"2997","RawContent":null,"Title":"Track aborted streams for a given grace period","State":"closed","Body":" #2832 Aborted streams are given a 5 second non-configurable grace period for the client to react to the abort and stop sending frames. Data and trailers received after the grace period will be considered a connection error as before.\r\n\r\nI've also pulled in #2756 (Send a RST if the request body is not read) which is directly related to draining.\r\n\r\nWe were also missing a lock around the closing the request body pipe reader.\r\n\r\nPlease review by Wed EoD so we can get this in for Preview3.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2997","RelatedDescription":"Closed or merged PR \"Track aborted streams for a given grace period\" (#2997)"},{"Id":"369244151","IsPullRequest":false,"CreatedAt":"2018-10-11T18:15:19","Actor":"halter73","Number":"2999","RawContent":null,"Title":"h2spec test hangs during local functional test run","State":"open","Body":"This is the second time I've observed this. I didn't catch which test was hanging the first time. This time it is `http2/4.2/3` during the netcoreap2.2 libuv functional tests. Here are the command line arguments for then hanging run. This is particularly odd because there's supposed to be a 15 second timeout but than hang lasted for at least 10 minutes.\r\n\r\n> G:\\dev\\aspnet\\KestrelHttpServer\\test\\Kestrel.Transport.Libuv.FunctionalTests\\bin\\Debug\\netcoreapp2.2\\h2spec\\windows\\h2spec.exe\" http2/4.2/3 -p 52487 --strict -j C:\\Users\\shalter\\AppData\\Local\\Temp\\a7c18c2e-83ad-4ab8-8f57-05f105ed1b90.xml --timeout 15 --tls --insecure","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2999","RelatedDescription":"Open issue \"h2spec test hangs during local functional test run\" (#2999)"},{"Id":"367995627","IsPullRequest":true,"CreatedAt":"2018-10-09T00:17:24","Actor":"dotnet-maestro-bot","Number":"2996","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @halter73\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2996","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2996)"}],"ResultType":"GitHubIssue"},"Razor-Issues":{"Issues":[{"Id":"368464550","IsPullRequest":true,"CreatedAt":"2018-10-17T00:58:05","Actor":"rynowak","Number":"2640","RawContent":null,"Title":"Update VS dependencies","State":"closed","Body":"Updating all of our VS dependencies to the newest public/shipped version. This is precursor for using some 16.0 bits in the near future. \r\n\r\nDoesn't include Roslyn because @NTaylorMullen is doing that separately.","Url":"https://github.com/aspnet/Razor/pull/2640","RelatedDescription":"Closed or merged PR \"Update VS dependencies\" (#2640)"},{"Id":"370827467","IsPullRequest":true,"CreatedAt":"2018-10-16T23:09:18","Actor":"NTaylorMullen","Number":"2649","RawContent":null,"Title":"Allow identical DocumentSnapshot sources to trigger output changes.","State":"closed","Body":"- Prior to this project changes would trigger re-parses which would then be thrown away because source versions were identical.\r\n- Added test to verify new SetOutput behavior.\r\n\r\naspnet/Razor.VSCode#184","Url":"https://github.com/aspnet/Razor/pull/2649","RelatedDescription":"Closed or merged PR \"Allow identical DocumentSnapshot sources to trigger output changes.\" (#2649)"},{"Id":"370829783","IsPullRequest":false,"CreatedAt":"2018-10-16T22:46:32","Actor":"NTaylorMullen","Number":"2650","RawContent":null,"Title":"Have a better way to determine generated outputs version","State":"open","Body":"Today we can only use a document snapshots version to differentiate it from other documents. @rynowak had some ideas on how to build a versioning scheme that properly encompasses all the inputs the correspond to a given output. \r\n\r\n@rynowak mentioned he'll be working on this so assigning to him.","Url":"https://github.com/aspnet/Razor/issues/2650","RelatedDescription":"Open issue \"Have a better way to determine generated outputs version\" (#2650)"},{"Id":"370776359","IsPullRequest":true,"CreatedAt":"2018-10-16T21:04:41","Actor":"natemcmaster","Number":"2648","RawContent":null,"Title":"Update package branding for 2.2 RTM","State":"closed","Body":"","Url":"https://github.com/aspnet/Razor/pull/2648","RelatedDescription":"Closed or merged PR \"Update package branding for 2.2 RTM\" (#2648)"},{"Id":"369272541","IsPullRequest":true,"CreatedAt":"2018-10-16T20:33:45","Actor":"dotnet-maestro-bot","Number":"2642","RawContent":null,"Title":"[automated] Merge branch 'maestro/master' => 'master'","State":"closed","Body":"I detected changes in the maestro/master branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on maestro/master by the following committers:\n\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Razor merge/maestro/master-to-master:merge/maestro/master-to-master\r\ngit merge merge/maestro/master-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/maestro/master-to-master' on https://github.com/dotnet-maestro-bot/Razor.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on maestro/master.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Razor/pull/2642","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'maestro/master' => 'master'\" (#2642)"},{"Id":"369275124","IsPullRequest":true,"CreatedAt":"2018-10-16T20:09:56","Actor":"dotnet-maestro-bot","Number":"2643","RawContent":null,"Title":"[automated] Merge branch 'maestro/release/2.2' => 'release/2.2'","State":"closed","Body":"I detected changes in the maestro/release/2.2 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on maestro/release/2.2 by the following committers:\n\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Razor merge/maestro/release/2.2-to-release/2.2:merge/maestro/release/2.2-to-release/2.2\r\ngit merge merge/maestro/release/2.2-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/maestro/release/2.2-to-release/2.2' on https://github.com/dotnet-maestro-bot/Razor.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on maestro/release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Razor/pull/2643","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'maestro/release/2.2' => 'release/2.2'\" (#2643)"},{"Id":"370715601","IsPullRequest":false,"CreatedAt":"2018-10-16T17:18:43","Actor":"pranavkm","Number":"2647","RawContent":null,"Title":"using TModel = global::System.Object defined during design time results in weird editor completion","State":"open","Body":"![image](https://user-images.githubusercontent.com/174281/47034461-461ef400-d12c-11e8-8682-a1935d12bfc2.png)\r\n\r\nIn this case, the extension method is defined as `public static string Action(this IUrlHelper helper, string action, object values);` but the editor shows a `TModel` instance instead.\r\n\r\nI'm also able to write odd things `new TModel` which looks correct in the IDE, but doesn't compile at runtime.\r\n\r\n![image](https://user-images.githubusercontent.com/174281/47034629-c80f1d00-d12c-11e8-9414-5537fbe69472.png)\r\n","Url":"https://github.com/aspnet/Razor/issues/2647","RelatedDescription":"Open issue \"using TModel = global::System.Object defined during design time results in weird editor completion\" (#2647)"},{"Id":"368522803","IsPullRequest":false,"CreatedAt":"2018-10-15T01:33:16","Actor":"cryeshiren","Number":"2641","RawContent":null,"Title":"'ERR_INCOMPLETE_CHUNKED_ENCODING' error on chrome console","State":"closed","Body":"I have a razor page \r\n```\r\n@using Microsoft.AspNetCore.Mvc.Localization\r\n@inject IViewLocalizer Localizer\r\n@{\r\n    Layout = \"~/Views/Shared/_ForgetPasswordLayout.cshtml\";\r\n    var redirectUrl = ViewBag.RedirectUrl ?? Url.Content(\"~/Account/Login\");\r\n}\r\n\r\n<title>@Localizer[\"ConfirmEmail_Confirmation_Title\"]</title>\r\n<div class=\"site-body container-left\">\r\n    <div class=\"form-container\">\r\n        <h2>@Localizer[\"ConfirmEmail_Confirmation_Title\"]</h2>\r\n        <p>\r\n            @Localizer[\"ConfirmEmail_Confirmation_Hint_1\"] <a href=\"@redirectUrl\">@Localizer[\"ConfirmEmail_Confirmation_Hint_2\"]</a>\r\n        </p>\r\n    </div>\r\n</div>\r\n\r\n```\r\n**when i request it ,an error 'ERR_INCOMPLETE_CHUNKED_ENCODING'  occurred on the Google console，\r\nthis error does not occur every time**\r\n\r\n**my errorhandlingmiddleware get a error message:**\r\n```\r\nInput string was not in a correct format.: System.FormatException: Input string was not in a correct format.\r\n   at System.Text.StringBuilder.FormatError()\r\n   at System.Text.StringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n   at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n   at System.String.Format(IFormatProvider provider, String format, Object[] args)\r\n   at Microsoft.AspNetCore.Html.HtmlFormattableString.WriteTo(TextWriter writer, HtmlEncoder encoder)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewBuffer.WriteToAsync(TextWriter writer, HtmlEncoder encoder)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderLayoutAsync(ViewContext context, ViewBufferTextWriter bodyWriter)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderAsync(ViewContext context)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(ViewContext viewContext, String contentType, Nullable`1 statusCode)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(ActionContext actionContext, IView view, ViewDataDictionary viewData, ITempDataDictionary tempData, String contentType, Nullable`1 statusCode)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.ExecuteAsync(ActionContext context, ViewResult result)\r\n   at Microsoft.AspNetCore.Mvc.ViewResult.ExecuteResultAsync(ActionContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.Session.SessionMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Session.SessionMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIIndexMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext)\r\n   at IdentityServer4.Hosting.IdentityServerMiddleware.Invoke(HttpContext context, IEndpointRouter router, IUserSession session, IEventService events)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)\r\n   at IdentityServer4.Hosting.BaseUrlMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Localization.RequestLocalizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Localization.RequestLocalizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)\r\n   at GrapeLEAF.GLAS.ErrorHandlingMiddleware.Invoke(HttpContext context) in xxxMiddleware.cs:line 46\r\n```\r\n\r\nhow can I resolve it?\r\n\r\nlib -> .net core 2.1","Url":"https://github.com/aspnet/Razor/issues/2641","RelatedDescription":"Closed issue \"'ERR_INCOMPLETE_CHUNKED_ENCODING' error on chrome console\" (#2641)"},{"Id":"369741083","IsPullRequest":true,"CreatedAt":"2018-10-12T23:27:06","Actor":"ajaybhargavb","Number":"2646","RawContent":null,"Title":"New baselines for TagHelperBlockRewriterTest","State":"open","Body":"Part of #2584\r\n\r\nConverted all of the TagHelperBlockRewriter tests. \r\nOnly including the test changes. If curious, the source is here ([ParseTreeRewriter](https://github.com/aspnet/Razor/blob/ajbaaska/taghelper-parser/src/Microsoft.AspNetCore.Razor.Language/Legacy/TagHelperParseTreeRewriter.cs), [BlockRewriter](https://github.com/aspnet/Razor/blob/ajbaaska/taghelper-parser/src/Microsoft.AspNetCore.Razor.Language/Legacy/TagHelperBlockRewriter.cs)).\r\n\r\nHere is the syntax for tag helpers,\r\n``` XML\r\n  <Node Name=\"MarkupTagHelperElementSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupTagHelperElement\" />\r\n    <Field Name=\"StartTag\" Type=\"MarkupTagHelperStartTagSyntax\" />\r\n    <Field Name=\"Body\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" Optional=\"true\" />\r\n    <Field Name=\"EndTag\" Type=\"MarkupTagHelperEndTagSyntax\" Optional=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupTagHelperStartTagSyntax\" Base=\"RazorBlockSyntax\">\r\n    <Kind Name=\"MarkupTagHelperStartTag\" />\r\n    <Field Name=\"Children\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" Override=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupTagHelperEndTagSyntax\" Base=\"RazorBlockSyntax\">\r\n    <Kind Name=\"MarkupTagHelperEndTag\" />\r\n    <Field Name=\"Children\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" Override=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupTagHelperAttributeSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupTagHelperAttribute\" />\r\n    <Field Name=\"NamePrefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Name\" Type=\"MarkupTextLiteralSyntax\" />\r\n    <Field Name=\"NameSuffix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"EqualsToken\" Type=\"SyntaxToken\">\r\n      <Kind Name=\"Equals\" />\r\n    </Field>\r\n    <Field Name=\"ValuePrefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Value\" Type=\"MarkupTagHelperAttributeValueSyntax\" />\r\n    <Field Name=\"ValueSuffix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupMinimizedTagHelperAttributeSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupMinimizedTagHelperAttribute\" />\r\n    <Field Name=\"NamePrefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Name\" Type=\"MarkupTextLiteralSyntax\" />\r\n  </Node>\r\n  <Node Name=\"MarkupTagHelperAttributeValueSyntax\" Base=\"RazorBlockSyntax\">\r\n    <Kind Name=\"MarkupTagHelperAttributeValue\" />\r\n    <Field Name=\"Children\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" Override=\"true\" />\r\n  </Node>\r\n```","Url":"https://github.com/aspnet/Razor/pull/2646","RelatedDescription":"Open PR \"New baselines for TagHelperBlockRewriterTest\" (#2646)"},{"Id":"369500335","IsPullRequest":false,"CreatedAt":"2018-10-12T10:51:30","Actor":"aspnet-hello","Number":"2645","RawContent":null,"Title":"Test failure: GetCopyToOutputDirectoryItems_WhenNoFileIsPresent_ReturnsEmptySequence","State":"open","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=576328&buildTypeId=Releases_21Public_HighSierraOsxUniverse) with the following error:\r\n\r\n```\r\nSystem.TimeoutException : command '$dotnet msbuild /restore /p:_RazorBuildServerPipeName=\"dafb7556-fc3c-4533-8e3a-243c708d43b7\" /p:_RazorSuppressCurrentUserOnlyPipeOptions=true /p:Configuration=Release ' timed out after 00:01:00.\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.MSBuildProcessManager.<>c__DisplayClass0_0.<RunProcessAsync>b__0(Task t) in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/MSBuildProcessManager.cs:line 79\r\n   at System.Threading.Tasks.ContinuationResultTaskFromTask`1.InnerInvoke()\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.BuildIntrospectionTest.<GetCopyToOutputDirectoryItems_WhenNoFileIsPresent_ReturnsEmptySequence>d__4.MoveNext() in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/BuildIntrospectionTest.cs:line 54\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.1.\r\n\r\nCC @mkArtakMSFT","Url":"https://github.com/aspnet/Razor/issues/2645","RelatedDescription":"Open issue \"Test failure: GetCopyToOutputDirectoryItems_WhenNoFileIsPresent_ReturnsEmptySequence\" (#2645)"},{"Id":"369327986","IsPullRequest":true,"CreatedAt":"2018-10-11T22:53:01","Actor":"ajaybhargavb","Number":"2644","RawContent":null,"Title":"Change malformed tag handling logic","State":"closed","Body":"For malformed cases like,\r\n```HTML\r\n<p><strong>Hello</p>\r\n```\r\n`Hello` needs to be a child of `strong` and not `p`. I had the wrong assumption when writing this logic at first.","Url":"https://github.com/aspnet/Razor/pull/2644","RelatedDescription":"Closed or merged PR \"Change malformed tag handling logic\" (#2644)"},{"Id":"368213511","IsPullRequest":false,"CreatedAt":"2018-10-10T17:21:19","Actor":"hez2010","Number":"2638","RawContent":null,"Title":"[Feature Request] Support pulgins in razor pages for rendering","State":"closed","Body":"Currently the content in a node will be rendered as what it has been written in cshtml files. I hope that you can provide the ability to use plugins.\r\n\r\nFor example, assuming we have a script compiler babel-loader and a UI library material-design:\r\n```html\r\n@{\r\n    var babeloption = new {\r\n        Options = new { \r\n            presets = new [] {\"babel-presets-env\" },\r\n            option = new [] { targets = new { ie = \"11\" } } \r\n        }\r\n    };\r\n}\r\n<script asp-plugin-babel-loader=\"@babeloption\">\r\n.... // The scripts in this node will be preprocessed by plugin babel-loader with option babeloption.Options before final rendering. \r\n</script>\r\n\r\n@{\r\n    var mdoption = new {\r\n        RenderAs = \"md\" // then we can use components defined in the library with prefix \"md:\"\r\n    };\r\n}\r\n\r\n<div asp-plugin-material-design=\"@mdoption\">\r\n   <md:button> ... </md:button>\r\n</div>\r\n\r\n<xxx asp-plugin-[plugin name]=\"[options]\">\r\n</xxx>\r\n```\r\n\r\nThe plugins can be installed from nuget or referenced from other .net standard assemblies. \r\n\r\nThis feature will brings a lot of features such as js minimize, browser polyfill, UI libraries and so on in the future (it needs supports both from official and community) and also razor will be a great solution for server rendering. ","Url":"https://github.com/aspnet/Razor/issues/2638","RelatedDescription":"Closed issue \"[Feature Request] Support pulgins in razor pages for rendering\" (#2638)"},{"Id":"368364571","IsPullRequest":true,"CreatedAt":"2018-10-09T22:46:30","Actor":"ajaybhargavb","Number":"2639","RawContent":null,"Title":"New baselines for TagHelperParseTreeRewriterTest","State":"closed","Body":"Part of #2584 \r\n\r\nConverted all of the TagHelperParseTreeRewriter tests. I understand it is impossible to look through each and every test. I suggest looking at as many different types of test as possible.\r\n\r\nI'm only including the test changes here because the source may change a lot and it isn't worth reviewing at this point. If anyone is interested the source is [here](https://github.com/aspnet/Razor/commit/67bc5eb22e0e98a30f5db25e70bcb1dba1de9d57).\r\n\r\nHere is the syntax for tag helpers,\r\n``` XML\r\n  <Node Name=\"MarkupTagHelperElementSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupTagHelperElement\" />\r\n    <Field Name=\"StartTag\" Type=\"MarkupTagHelperStartTagSyntax\" />\r\n    <Field Name=\"Body\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" Optional=\"true\" />\r\n    <Field Name=\"EndTag\" Type=\"MarkupTagHelperEndTagSyntax\" Optional=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupTagHelperStartTagSyntax\" Base=\"RazorBlockSyntax\">\r\n    <Kind Name=\"MarkupTagHelperStartTag\" />\r\n    <Field Name=\"Children\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" Override=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupTagHelperEndTagSyntax\" Base=\"RazorBlockSyntax\">\r\n    <Kind Name=\"MarkupTagHelperEndTag\" />\r\n    <Field Name=\"Children\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" Override=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupTagHelperAttributeSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupTagHelperAttribute\" />\r\n    <Field Name=\"NamePrefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Name\" Type=\"MarkupTextLiteralSyntax\" />\r\n    <Field Name=\"NameSuffix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"EqualsToken\" Type=\"SyntaxToken\">\r\n      <Kind Name=\"Equals\" />\r\n    </Field>\r\n    <Field Name=\"ValuePrefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Value\" Type=\"MarkupTagHelperAttributeValueSyntax\" />\r\n    <Field Name=\"ValueSuffix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupMinimizedTagHelperAttributeSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupMinimizedTagHelperAttribute\" />\r\n    <Field Name=\"NamePrefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Name\" Type=\"MarkupTextLiteralSyntax\" />\r\n  </Node>\r\n  <Node Name=\"MarkupTagHelperAttributeValueSyntax\" Base=\"RazorBlockSyntax\">\r\n    <Kind Name=\"MarkupTagHelperAttributeValue\" />\r\n    <Field Name=\"Children\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" Override=\"true\" />\r\n  </Node>\r\n```","Url":"https://github.com/aspnet/Razor/pull/2639","RelatedDescription":"Closed or merged PR \"New baselines for TagHelperParseTreeRewriterTest\" (#2639)"},{"Id":"367995048","IsPullRequest":true,"CreatedAt":"2018-10-09T00:11:39","Actor":"NTaylorMullen","Number":"2637","RawContent":null,"Title":"Update Roslyn version to 2.9","State":"open","Body":"- Also disabled a failing test due to version bump.\r\n\r\n#2634","Url":"https://github.com/aspnet/Razor/pull/2637","RelatedDescription":"Open PR \"Update Roslyn version to 2.9\" (#2637)"},{"Id":"367991375","IsPullRequest":false,"CreatedAt":"2018-10-08T23:51:22","Actor":"NTaylorMullen","Number":"2636","RawContent":null,"Title":"Re-enable ManualServerShutdown_NoPipeName_ShutsDownServer with different pipe name choosing mechanism","State":"open","Body":"When updating Roslyn to 2.9.0 I ran into an issue with this test where the test would try to launch a non-published variant of rzc resulting in mismatched dependencies at runtime (explosions).\r\n\r\nWe need to change the test to use a published version of rzc and use a specific pipe name instead of relying on location.","Url":"https://github.com/aspnet/Razor/issues/2636","RelatedDescription":"Open issue \"Re-enable ManualServerShutdown_NoPipeName_ShutsDownServer with different pipe name choosing mechanism\" (#2636)"},{"Id":"367856826","IsPullRequest":false,"CreatedAt":"2018-10-08T17:06:56","Actor":"HamidTheGeek","Number":"2635","RawContent":null,"Title":"Razor changes the attribute's value to the attribute's name if the value was true.","State":"closed","Body":"#### Is this a Bug or Feature request?: \r\nI am not sure that whether is it a bug or meant to be like that.\r\n\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project):\r\nYou just need to add the following tag to any view file and check the result.\r\n``` html\r\n<input type=\"hidden\" value=\"@true\" />\r\n<input type=\"text\" value=\"@true\" />\r\n```\r\n\r\n#### Description of the problem:\r\nIf you pass the `true` as the value of a value attribute in input tag, it generates `value=\"value\"`. So if you have this tags in a form tag and try to bind them the boolean property value would be considered as false and the string would be change to value instead of true.","Url":"https://github.com/aspnet/Razor/issues/2635","RelatedDescription":"Closed issue \"Razor changes the attribute's value to the attribute's name if the value was true.\" (#2635)"},{"Id":"367418130","IsPullRequest":false,"CreatedAt":"2018-10-06T03:13:32","Actor":"rynowak","Number":"2634","RawContent":null,"Title":"Update to Microsoft.CodeAnalysis 2.9.0 for Microsoft.CodeAnalysis.Razor","State":"open","Body":"We need to update the version of Roslyn that we reference for 2.2 to pick up C# 7.3 - currently build-time compilation can use C# 7.3 but it won't be supported during runtime compilation.\r\n\r\nThis is something we generally do each release near the end because we're usually aligning with a Roslyn release. In this case the relevant bits have been available publicly for a few months. ","Url":"https://github.com/aspnet/Razor/issues/2634","RelatedDescription":"Open issue \"Update to Microsoft.CodeAnalysis 2.9.0 for Microsoft.CodeAnalysis.Razor\" (#2634)"},{"Id":"367385188","IsPullRequest":false,"CreatedAt":"2018-10-05T22:15:05","Actor":"NTaylorMullen","Number":"2633","RawContent":null,"Title":"DocumentSnapshot system needs to understands imports better","State":"open","Body":"tl;dr; Getting imports today isn't guaranteed to be correct in the DocumentSnapshot world.\r\n\r\nWhen you go through the process of adding documents to the project system you can get into an invalid state where documents you pull from the project system may generate invalid output. Basically, adding all .cshtml files => generating their output and then adding a _ViewImports.cshtml to the project system results in all of the previous files not seeing the _ViewImports.cshtml file.\r\n\r\nSo we need to design some mechanism when every time an important import file enters the system the ProjectSnapshotManager needs to update all documents in the project to be aware.\r\n\r\nThis isn't an issue in VS windows today because we don't rely on the DocumentSnapshot system for import updates.\r\n\r\n/cc @rynowak @ajaybhargavb ","Url":"https://github.com/aspnet/Razor/issues/2633","RelatedDescription":"Open issue \"DocumentSnapshot system needs to understands imports better\" (#2633)"},{"Id":"367305852","IsPullRequest":false,"CreatedAt":"2018-10-05T18:00:22","Actor":"dehghani-mehdi","Number":"2632","RawContent":null,"Title":"Add option to disable encoding","State":"closed","Body":"Hello,\r\n\r\nSeems like Razor encode string by default, it's good for English, but not for Non-English content. it can be fixed using `@Html.Raw`, but it's not great option I think.\r\n\r\nSo would you add an option to disable encoding?\r\n\r\nThanks.","Url":"https://github.com/aspnet/Razor/issues/2632","RelatedDescription":"Closed issue \"Add option to disable encoding\" (#2632)"},{"Id":"366993151","IsPullRequest":true,"CreatedAt":"2018-10-04T23:05:51","Actor":"dotnet-maestro-bot","Number":"2631","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @natemcmaster\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Razor merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Razor.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Razor/pull/2631","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2631)"},{"Id":"365620970","IsPullRequest":true,"CreatedAt":"2018-10-04T22:15:52","Actor":"ajaybhargavb","Number":"2624","RawContent":null,"Title":"Added MarkupElementRewriter","State":"closed","Body":"#2584 \r\n\r\nThis is going to be run before and after the tag helper phase. I am currently not adding any errors at this level. All errors will be added during the tag helper phase. Sending this as a separate PR just to make sure everyone is on the same page.\r\nAdded tests","Url":"https://github.com/aspnet/Razor/pull/2624","RelatedDescription":"Closed or merged PR \"Added MarkupElementRewriter\" (#2624)"},{"Id":"366828758","IsPullRequest":false,"CreatedAt":"2018-10-04T14:51:00","Actor":"AyoubHaggui","Number":"2630","RawContent":null,"Title":"Error rzc generate exited with code -2147450749","State":"open","Body":"I didn't find the matching error code anywhere, I'm a running a net core app 2.1 I use VS2017 Enterprise.  This is the error message I get:\r\n`\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\trzc generate exited with code -2147450749.\tBotFlow.Portal\tC:\\Users\\SP-Ayoub\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.2\\build\\netstandard2.0\\Microsoft.AspNetCore.Razor.Design.CodeGeneration.targets\t103\t\r\n`\r\nThis is the my .csproj:\r\n\r\n```xml\r\n<PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>\r\n    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <DocumentationFile>bin\\Debug\\netcoreapp2.0\\BotFlow.Portal.xml</DocumentationFile>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"FluentValidation\" Version=\"8.0.100\" />\r\n    <PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"8.0.100\" />\r\n    <PackageReference Include=\"FluentValidation.ValidatorAttribute\" Version=\"8.0.100\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"2.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.SpaServices\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.1.5\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"3.0.0\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- Files not to publish (note that the 'dist' subfolders are re-added below) -->\r\n    <Compile Remove=\"ClientApp\\dist\\**\" />\r\n    <Compile Remove=\"ClientApp\\environments\\**\" />\r\n    <Content Remove=\"ClientApp\\**\" />\r\n    <EmbeddedResource Remove=\"ClientApp\\dist\\**\" />\r\n    <EmbeddedResource Remove=\"ClientApp\\environments\\**\" />\r\n    <None Remove=\"ClientApp\\dist\\**\" />\r\n    <None Remove=\"ClientApp\\environments\\**\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Content Include=\"ClientApp\\angular.json\" />\r\n    <Content Include=\"ClientApp\\package-lock.json\" />\r\n    <Content Include=\"ClientApp\\package.json\" />\r\n    <Content Include=\"ClientApp\\src\\tsconfig.app.json\" />\r\n    <Content Include=\"ClientApp\\src\\tsconfig.spec.json\" />\r\n    <Content Include=\"ClientApp\\src\\tslint.json\" />\r\n    <Content Include=\"ClientApp\\tsconfig.json\" />\r\n    <Content Include=\"ClientApp\\tslint.json\" />\r\n  </ItemGroup>\r\n```","Url":"https://github.com/aspnet/Razor/issues/2630","RelatedDescription":"Open issue \"Error rzc generate exited with code -2147450749\" (#2630)"},{"Id":"366593851","IsPullRequest":false,"CreatedAt":"2018-10-04T03:21:19","Actor":"Jehoel","Number":"2629","RawContent":null,"Title":"How can I configure the Razor Language Service in Visual Studio 2017?","State":"closed","Body":"(Alternative title: \"Bug report: No documentation available regarding configuring Razor Language Services in Visual Studio 2017\".)\r\n\r\nSteps:\r\n1. Open Visual Studio 2017 (I'm running Enterprise 15.8.5)\r\n1. Create a new C# .NET Framework 4.7.2 Class Library project (not .NET Core or .NET Standard)\r\n1. Open the Project Properties and specify C# language version 7.3.\r\n1. Create a new `.cshtml` file in the project root.\r\n    * As there isn't an item-template for Razor files I used the HTML Page template and renamed the file extension to `.cshtml`.\r\n1. Open the file and the Text Editor with the Razor Language Service runs.\r\n1. Observe that IntelliSense and design-time build errors indicate  and with no custom assembly references, not even `System.Core.dll` so Linq isn't available.\r\n1. Add a new C# class `MyProject.TestClass` to the project in its own `.cs` file.\r\n\r\nObservations:\r\n1. The Razor Language Service is using the C# 4.0 compiler, not the C# 7.0 compiler.\r\n1. Classes in my project like `TestClass` are acessible in the Razor file, but not types defined in other assemblies referenced by my project (e.g. `System.Linq.Enumerable` in `System.Core.dll`)\r\n1. There doesn't seem to be any way to configure the Razor Language Service.\r\n\r\n","Url":"https://github.com/aspnet/Razor/issues/2629","RelatedDescription":"Closed issue \"How can I configure the Razor Language Service in Visual Studio 2017?\" (#2629)"},{"Id":"366436987","IsPullRequest":false,"CreatedAt":"2018-10-03T17:02:16","Actor":"Eilon","Number":"2628","RawContent":null,"Title":"Debugging Razor Class library VS 2017","State":"open","Body":"_From @olegsavelos on Wednesday, 03 October 2018 11:49:34_\r\n\r\nI am trying to debug a razor class library hosted by external process.\r\nI have set the configuration to a Launch: Executable this indeed start the executable but it don't seem that Visual Studio attaches to the process as i don't see no modules to be loaded and cant break.\r\n\r\nIn contradiction with a normal .NET class library when using the same approach Visual Studio attaches correctly to the launched process and debugging/breaking is possible.\r\n\r\nHere is example of launchSettings.json\r\n\r\n  \"profiles\": {\r\n    \"SampleModule\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Programs\\\\executable.exe\",\r\n      \"workingDirectory\": \"C:\\\\Programs\\\\\"\r\n    },\r\n\r\n_Copied from original issue: aspnet/Home#3579_","Url":"https://github.com/aspnet/Razor/issues/2628","RelatedDescription":"Open issue \"Debugging Razor Class library VS 2017\" (#2628)"},{"Id":"365905929","IsPullRequest":false,"CreatedAt":"2018-10-02T21:52:19","Actor":"FlukeFan","Number":"2626","RawContent":null,"Title":"How to use pre-compiled razor views with the same name, but  in different assemblies?","State":"closed","Body":"When using `<Project Sdk=\"Microsoft.NET.Sdk.Razor\">`, razor views are compiled into a `.Views.dll` assembly.  Each of the compiled views is decorated with a `IRazorSourceChecksumMetadata` that contains an `Identifier` that is unique to the assembly.\r\n\r\nIf you have a project where multiple independent libraries have views with the same `Identifier`, is there a way to reference the correct view?\r\n\r\nFor example, consider the projects:\r\n\r\n---- Web (references lib1 & lib2)\r\n¦\r\n---- Lib1 (contains precompiled `/Index.cshtml`)\r\n¦\r\n---- Lib2 (contains precompiled `/Index.cshtml`)\r\n\r\nIf a controller returns a `ViewResult` for `/Index.cshtml`, it will always return the view from Lib1.  I think the second view is (silently) ignored.\r\n\r\nAn example project can be found here:  https://github.com/FlukeFan/MultipleRazorLib\r\n","Url":"https://github.com/aspnet/Razor/issues/2626","RelatedDescription":"Closed issue \"How to use pre-compiled razor views with the same name, but  in different assemblies?\" (#2626)"},{"Id":"365995732","IsPullRequest":true,"CreatedAt":"2018-10-02T17:18:29","Actor":"NTaylorMullen","Number":"2627","RawContent":null,"Title":"Update Razor to use the latest completion API.","State":"closed","Body":"@Eilon @rynowak this has the goods for the completion changes.\r\n\r\n@AmadeusW everything look good here?","Url":"https://github.com/aspnet/Razor/pull/2627","RelatedDescription":"Closed or merged PR \"Update Razor to use the latest completion API.\" (#2627)"},{"Id":"365631683","IsPullRequest":true,"CreatedAt":"2018-10-02T00:28:42","Actor":"dotnet-maestro-bot","Number":"2625","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @rynowak\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Razor merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Razor.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Razor/pull/2625","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2625)"},{"Id":"364942828","IsPullRequest":false,"CreatedAt":"2018-09-28T18:05:25","Actor":"Ryujose","Number":"2622","RawContent":null,"Title":"Razor view compilation in standalone app for emails","State":"closed","Body":"Hello community.\r\n\r\nI want to compile razor views in an standalone app that contains those views.\r\n\r\nWhat I need to compile those views like when we're working with MVC to see if there's is any issue and prompt it (The use of MvcBuildViews to be more precise), to ensure there isn't any surprise on the email templates?\r\n\r\nRegards.","Url":"https://github.com/aspnet/Razor/issues/2622","RelatedDescription":"Closed issue \"Razor view compilation in standalone app for emails\" (#2622)"},{"Id":"364969083","IsPullRequest":false,"CreatedAt":"2018-09-28T17:02:03","Actor":"rynowak","Number":"2623","RawContent":null,"Title":"Review and update dependencies in vsixmanifest","State":"open","Body":"https://github.com/aspnet/Razor/blob/master/tooling/Microsoft.VisualStudio.RazorExtension/source.extension.vsixmanifest#L16\r\n\r\nMany of these still say 15.0 even though we're targeting 16. The MPF one in particular may cause issues. ","Url":"https://github.com/aspnet/Razor/issues/2623","RelatedDescription":"Open issue \"Review and update dependencies in vsixmanifest\" (#2623)"},{"Id":"364691620","IsPullRequest":true,"CreatedAt":"2018-09-27T23:45:33","Actor":"ajaybhargavb","Number":"2621","RawContent":null,"Title":"New baselines for RazorDirectivesTest","State":"open","Body":"Another file with lots of tests","Url":"https://github.com/aspnet/Razor/pull/2621","RelatedDescription":"Open PR \"New baselines for RazorDirectivesTest\" (#2621)"}],"ResultType":"GitHubIssue"},"Templates-Issues":{"Issues":[{"Id":"233959214","IsPullRequest":false,"CreatedAt":"2018-09-20T20:23:28","Actor":"mlorbetske","Number":"850","RawContent":null,"Title":"File new default names inconsistency.","State":"closed","Body":"_From @Bartmax on July 24, 2015 2:48_\n\nAll items in the file new dialog (client side) default names kind of follows a pattern but it's not consistent:\n\nStyleSheet.css\nJavaScript.js\nhtmlpage.html (all lowercase)\nCoffeeScript.coffee\njson-schema.json\npackage.json\netc.\n\nSome must have a specific name (like package.json) while others just reflect the file type. \n\nI see 2 inconsistencies here:\n\n1) casing is inconsistent.\n2) TypeScript it suggest file.ts instead of TypeScript.ts\n\n\n_Copied from original issue: aspnet/Tooling#118_","Url":"https://github.com/aspnet/Templates/issues/850","RelatedDescription":"Closed issue \"File new default names inconsistency.\" (#850)"},{"Id":"255851740","IsPullRequest":false,"CreatedAt":"2018-09-20T20:23:20","Actor":"marcusien","Number":"867","RawContent":null,"Title":"Cannot force version of the template to install","State":"closed","Body":"Hi,\r\n\r\nMaybe there's something not documented but I'd like to install a version of my own template in a specific version.\r\n\r\nWe are creating our own template for our project and we create prerelease packages for our template using semver. The problem is with \"dotnet new -i\" command, we cannot specify a specific version","Url":"https://github.com/aspnet/Templates/issues/867","RelatedDescription":"Closed issue \"Cannot force version of the template to install\" (#867)"},{"Id":"264318035","IsPullRequest":true,"CreatedAt":"2018-09-20T20:23:13","Actor":"scottsauber","Number":"870","RawContent":null,"Title":"Change Lockout wording of comment","State":"closed","Body":"The Razor Pages Identity template turns on Lockout by default, unlike the MVC one.  This comment is left over from the MVC one and it no longer lines up with what is configured in the template.  I've reworded it to be accurate.  I can change it to just remove the comment all together if you want.","Url":"https://github.com/aspnet/Templates/pull/870","RelatedDescription":"Closed or merged PR \"Change Lockout wording of comment\" (#870)"},{"Id":"266880667","IsPullRequest":true,"CreatedAt":"2017-10-24T21:42:12","Actor":"s-whaley","Number":"873","RawContent":null,"Title":"Account AccessDenied View Razor Syntax Bug Fix","State":"closed","Body":"views/account/accessdenied ViewData[title] missing @ symbol","Url":"https://github.com/aspnet/Templates/pull/873","RelatedDescription":"Closed or merged PR \"Account AccessDenied View Razor Syntax Bug Fix\" (#873)"},{"Id":"267855162","IsPullRequest":false,"CreatedAt":"2017-10-24T19:00:48","Actor":"ezeasharma","Number":"874","RawContent":null,"Title":"The project file could not be loaded for csproj","State":"closed","Body":"I migrated my .netcore 1.1 proj to 2.0 using this link https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/\r\n\r\nbut when i perform \"dotnet restore -v d\" i get the following error:\r\n\r\n```\r\nBuild started 10/23/2017 19:57:01.\r\n     1>Project \"someproj.csproj\" on node 1 (Restore target(s)).\r\n     1>Building with tools version \"15.0\".\r\n     1>someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n     1>Done Building Project \"someproj.csproj\" (Restore target(s)) -- FAILED.\r\n\r\nBuild FAILED.\r\n\r\n       \"/someproj/someproj.csproj\" (Restore target) (1) ->\r\n         /someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\nHere is the output for dotnet --info\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nThis is my csproj file\r\n```\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\\" />\r\n    <Folder Include=\"swagger_static\\\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Serilog\" Version=\"2.4.0\" />\r\n    <PackageReference Include=\"Serilog.Extensions.Logging\" Version=\"1.4.0\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Console\" Version=\"2.1.0\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"Dapper\" Version=\"1.50.2\" />\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"System.Threading\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n  <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n</ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.common\\recon.curator.common.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.service\\recon.curator.service.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/aspnet/Templates/issues/874","RelatedDescription":"Closed issue \"The project file could not be loaded for csproj\" (#874)"},{"Id":"232879172","IsPullRequest":false,"CreatedAt":"2017-10-24T16:37:14","Actor":"a-elnajjar","Number":"847","RawContent":null,"Title":"Post test ","State":"closed","Body":"Hi asp.net Team;\r\nI see your Templates/test/Microsoft.Web.Templates.Web.Tests/WebAPITests.cs only have tow test methods for testing and verify GET Web API is working. I want to ask can I add testing and verify methods for POST Web API?","Url":"https://github.com/aspnet/Templates/issues/847","RelatedDescription":"Closed issue \"Post test \" (#847)"},{"Id":"252192148","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:47","Actor":"Dave3of5","Number":"864","RawContent":null,"Title":"Authentication on SPA apps","State":"closed","Body":"There seems to be no template for authentication on the SPA templates.\r\n\r\nI've been looking up various blog post and third party articles on how to add Jwt Authentication but they are scattered and most are for dotnet core 1.1. It would be nice if there was a template that showed the \"correct\" way to do this in dotnet core 2.0.","Url":"https://github.com/aspnet/Templates/issues/864","RelatedDescription":"Closed issue \"Authentication on SPA apps\" (#864)"},{"Id":"252376700","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:23","Actor":"pejta2207","Number":"865","RawContent":null,"Title":"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token","State":"closed","Body":"**Description**\r\nThe issue is related to Individual Accounts Authentication template. It seems that providing incorrect authentication code for ConfirmEmail action in AccountController (e.g. token which already expired) should result in displaying error page. However, Razor throws an exception while generating the default error view:\r\n\r\n```\r\nNullReferenceException: Object reference not set to an instance of an object.\r\nAspNetCore._Views_Shared_Error_cshtml+<ExecuteAsync>d__0.MoveNext() in Error.cshtml, line 9\r\n```\r\n\r\n**Steps to reproduce**\r\n1. Create new project with Individual Accounts Authentication template.\r\n2. Run the application.\r\n3. Register any user via the registration form.\r\n4. Retrieve UserId of the registered user.\r\n5. Try to confirm email with incorrect token, e.g. http://localhost:PORT/Account/ConfirmEmail?UserId={UserId}&Code=INVALID_CODE\r\n\r\n**Further technical details**\r\nIt's probably caused by the last line in ConfirmEmail action in AccountController:\r\n```\r\nvar result = await _userManager.ConfirmEmailAsync(user, code);\r\nreturn View(result.Succeeded ? \"ConfirmEmail\" : \"Error\");\r\n```\r\n\r\nWhen invalid token is passed, Error view is not provided with `ErrorViewModel`. When `Model` is accessed in 9th line of Error.cshtml (`@if (Model.ShowRequestId)`), it throws NullReferenceException.","Url":"https://github.com/aspnet/Templates/issues/865","RelatedDescription":"Closed issue \"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token\" (#865)"},{"Id":"260997320","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:05","Actor":"joeaudette","Number":"868","RawContent":null,"Title":"IEmailSender should have explicitly named parameters for html vs plain text","State":"closed","Body":"There have been a number of people reporting bugs about the email confirmation link in the StarterWeb template not working.\r\n\r\nThis is happening because people implement IEmailSender and don't realize that the message being passed in is html. When they send the email as plain text the confirmation link does not work because of the url encoding.\r\n\r\nI think the \"message\" parameter of SendEmailAsync should be renamed to htmlMessage and possibly should have an additional parameter for \"plainTextMessage\" and both should be passed in from AccountController.\r\n\r\nThis would make it more clear to implementors of IEmailSender what kind of string(s) they are dealing with and how to correctly implement it.\r\n\r\nrelated issues:\r\nhttps://github.com/aspnet/Home/issues/2152\r\nhttps://github.com/aspnet/Home/issues/2217","Url":"https://github.com/aspnet/Templates/issues/868","RelatedDescription":"Closed issue \"IEmailSender should have explicitly named parameters for html vs plain text\" (#868)"},{"Id":"268102418","IsPullRequest":false,"CreatedAt":"2017-10-24T16:35:17","Actor":"Eilon","Number":"875","RawContent":null,"Title":"This repo is OBSOLETE - please see the README file for information","State":"open","Body":"Please refer to the README at https://github.com/aspnet/Templates for information.","Url":"https://github.com/aspnet/Templates/issues/875","RelatedDescription":"Open issue \"This repo is OBSOLETE - please see the README file for information\" (#875)"},{"Id":"266114525","IsPullRequest":false,"CreatedAt":"2017-10-21T00:03:24","Actor":"tverboon","Number":"872","RawContent":null,"Title":"Unnecessary User.Id provided in password reset link?","State":"closed","Body":"The user Id is provided in the callback link:\r\n\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L424\r\n\r\nBut in the controller action only code is used:\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L443\r\n\r\nIn my opinion it's better not to provide more information than necessary.","Url":"https://github.com/aspnet/Templates/issues/872","RelatedDescription":"Closed issue \"Unnecessary User.Id provided in password reset link?\" (#872)"},{"Id":"265394026","IsPullRequest":false,"CreatedAt":"2017-10-13T20:09:16","Actor":"jkotalik","Number":"871","RawContent":null,"Title":"Add HttpsRedirection and HSTS middleware template","State":"closed","Body":"With https://github.com/aspnet/BasicMiddleware/pull/264 being added, @Eilon asked me to write templates for this feature.\r\ncc/ @javiercn @Tratcher ","Url":"https://github.com/aspnet/Templates/issues/871","RelatedDescription":"Closed issue \"Add HttpsRedirection and HSTS middleware template\" (#871)"},{"Id":"262627101","IsPullRequest":false,"CreatedAt":"2017-10-04T00:00:30","Actor":"Rick-Anderson","Number":"869","RawContent":null,"Title":"QR Codes should be supported in templates","State":"closed","Body":"[Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes)\r\n\r\nThat should be supported in the templates like [SMS 2FA](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/2fa) used to be. \r\n\r\nrequested by customer in [Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes) comments","Url":"https://github.com/aspnet/Templates/issues/869","RelatedDescription":"Closed issue \"QR Codes should be supported in templates\" (#869)"},{"Id":"254163608","IsPullRequest":false,"CreatedAt":"2017-09-07T12:16:42","Actor":"elAndyG","Number":"866","RawContent":null,"Title":"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)","State":"closed","Body":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n","Url":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Closed issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866)"},{"Id":"251697737","IsPullRequest":true,"CreatedAt":"2017-08-22T14:57:33","Actor":"phenning","Number":"862","RawContent":null,"Title":"Use template engine templates","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/862","RelatedDescription":"Closed or merged PR \"Use template engine templates\" (#862)"},{"Id":"251783689","IsPullRequest":false,"CreatedAt":"2017-08-21T22:59:07","Actor":"GoshaFighten","Number":"863","RawContent":null,"Title":"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template","State":"closed","Body":"This issue relates to the [one](https://github.com/DevExpress/devextreme-angular/issues/534). I've created an Angular application using .NET Core 2.0. The issue is reproducible regardless if I use Visual Studio 2017 15.3 or `dotnet new angular`. Everything works fine in the Development mode. But, once I publish my application with the [DevExtreme Angular](https://github.com/DevExpress/devextreme-angular) package using `dotnet publish -c Release`, I'm getting the following error:\r\n\r\n```\r\n      ERROR in ./$$_gendir/~/devextreme-angular/ui/data-grid.ngfactory.ts\r\n      Module parse failed: D:\\FromCustomers\\GH534\\NGCore\\NGCore\\$$_gendir\\node_modules\\devextreme-angular\\ui\\data-grid.ngfactory.ts Unexpected token (63:38)\r\n      You may need an appropriate loader to handle this file type.\r\n      | import * as i52 from 'devextreme-angular/core/iterable-differ-helper';\r\n      | import * as i53 from 'devextreme-angular/core/nested-option';\r\n      | export const DxDataGridModuleNgFactory:i0.NgModuleFactory<i1.DxDataGridModule> = i0.╔╡cmf(i1.DxDataGridModule,\r\n      |     ([] as any[]),(_l:any) => {\r\n      |       return i0.╔╡mod([i0.╔╡mpd(512,i0.ComponentFactoryResolver,i0.╔╡CodegenComponentFactoryResolver,\r\n       @ ./$$_gendir/ClientApp/app/components/fetchdata/fetchdata.component.ngfactory.ts 8:0-102\r\n       @ ./$$_gendir/ClientApp/app/app.module.server.ngfactory.ts\r\n       @ ./ClientApp/boot.server.ts\r\nD:\\FromCustomers\\GH534\\NGCore\\NGCore\\NGCore.csproj(41,5): error MSB3073: The command \"node node_modules/webpack/bin/webpack.js --env.prod\" exited with code 2.\r\n```\r\n\r\nI added\r\n\r\n```\r\n\"devextreme\": \"^17.1.5\",\r\n\"devextreme-angular\": \"^17.1.5\",\r\n```\r\n\r\nto the `package.json` file. Then, I added DevExtreme CSS files to the `webpack.config.vendor.js` as\r\n\r\n```\r\nconst nonTreeShakableModules = [\r\n    'bootstrap',\r\n    'bootstrap/dist/css/bootstrap.css',\r\n    'es6-promise',\r\n    'es6-shim',\r\n    'event-source-polyfill',\r\n    'jquery',\r\n    'devextreme/dist/css/dx.common.css',\r\n    'devextreme/dist/css/dx.light.css'\r\n];\r\n```\r\n\r\nIf instead of the following line in the webpack.config.js file\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nI use\r\n\r\n```\r\n{ test: /\\.ts$/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nor\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] },\r\n```\r\n\r\neverything works fine. A similar configuration in a project created using Angular CLI works fine as well.\r\n\r\nThe attached `NGCore` project illustrates the issue and `test-app` created with Angular CLI illustrates that this works in a standard Angular CLI project after I call `ng eject`.\r\n\r\nWhat can be the problem here? Is it in DevExtreme modules or in your webpack configuration?\r\n[test-app.zip](https://github.com/aspnet/Templates/files/1240256/test-app.zip)\r\n[NGCore.zip](https://github.com/aspnet/Templates/files/1240259/NGCore.zip)\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/863","RelatedDescription":"Closed issue \"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template\" (#863)"},{"Id":"248880384","IsPullRequest":false,"CreatedAt":"2017-08-09T00:05:00","Actor":"Rick-Anderson","Number":"861","RawContent":null,"Title":"Razor Page scaffolder should add `@page \"{id:int}\"` directive","State":"closed","Body":"The RP scaffolder should add `@page \"{id:int}\"` directive so generated links pass the ID as route data, not query strings.\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/861","RelatedDescription":"Closed issue \"Razor Page scaffolder should add `@page \"{id:int}\"` directive\" (#861)"},{"Id":"248842171","IsPullRequest":false,"CreatedAt":"2017-08-08T20:59:26","Actor":"Rick-Anderson","Number":"860","RawContent":null,"Title":"Razor Pages scaffolder eats    DbUpdateConcurrencyException","State":"closed","Body":"Expected behavior:\r\nScaffolder should correctly handle `DbUpdateConcurrencyException`\r\n\r\nActual behavior:\r\n`DbUpdateConcurrencyException` is caught and ignored.\r\n\r\nTo repro: \r\n\r\n* Create a RP project and add a model.\r\n* [Scaffold the model](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model#add-scaffold-tooling-and-perform-initial-migration)\r\n\r\nThe *Edit.cshtml.cs* file contains the following code:\r\n\r\n```cs\r\npublic async Task<IActionResult> OnPostAsync()\r\n{\r\n    if (!ModelState.IsValid)\r\n    {\r\n        return Page();\r\n    }\r\n\r\n    _context.Attach(Movie).State = EntityState.Modified;\r\n\r\n    try\r\n    {\r\n        await _context.SaveChangesAsync();\r\n    }\r\n    catch (DbUpdateConcurrencyException)\r\n    {\r\n        \r\n    }\r\n\r\n    return RedirectToPage(\"./Index\");\r\n}\r\n```\r\nIt should be\r\n\r\n```cs\r\ncatch (DbUpdateConcurrencyException)\r\n        {\r\n            if (!MovieExists(movie.ID))\r\n            {\r\n                return NotFound();\r\n            }\r\n            else\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/aspnet/Templates/issues/860","RelatedDescription":"Closed issue \"Razor Pages scaffolder eats    DbUpdateConcurrencyException\" (#860)"},{"Id":"248139089","IsPullRequest":false,"CreatedAt":"2017-08-08T04:05:18","Actor":"alexavrutin","Number":"859","RawContent":null,"Title":"r1","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/issues/859","RelatedDescription":"Closed issue \"r1\" (#859)"},{"Id":"238353055","IsPullRequest":false,"CreatedAt":"2017-08-03T18:01:57","Actor":"stevedesmond-ca","Number":"851","RawContent":null,"Title":"Why do non-sentence headers end in a period?","State":"closed","Body":"See https://github.com/aspnet/Templates/blob/dev/src/Rules/StarterWeb/IndividualAuth/Views/Account/ResetPasswordConfirmation.cshtml as an example -- almost all the `<h1>`s have periods after them, when they should more likely be Title Case with no period.","Url":"https://github.com/aspnet/Templates/issues/851","RelatedDescription":"Closed issue \"Why do non-sentence headers end in a period?\" (#851)"},{"Id":"247185643","IsPullRequest":false,"CreatedAt":"2017-08-03T17:58:29","Actor":"Rick-Anderson","Number":"858","RawContent":null,"Title":"Razor Page templates use fully qualified name ","State":"closed","Body":"The constructor uses the FQN when it's not necessary. For example:\r\n\r\nSee [Pages/Movie/Index.cshtml.cs](https://github.com/aspnet/Docs/blob/master/aspnetcore/tutorials/razor-pages/razor-pages-start/sample/RazorPagesMovie/Pages/Movie/Index.cshtml.cs#L14-L16)\r\n\r\n`using RazorPagesMovie.Models;` is in the template.\r\n\r\nTo repro - follow the [Razor Pages tutorial](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model)\r\n","Url":"https://github.com/aspnet/Templates/issues/858","RelatedDescription":"Closed issue \"Razor Page templates use fully qualified name \" (#858)"},{"Id":"246217674","IsPullRequest":false,"CreatedAt":"2017-08-03T17:56:43","Actor":"Rick-Anderson","Number":"857","RawContent":null,"Title":"Templates should use app.UseMvcWithDefaultRoute();","State":"closed","Body":"I recommend the templates use `app.UseMvcWithDefaultRoute();` rather than\r\n\r\n```csharp\r\napp.UseMvc(routes =>\r\n{\r\n    routes.MapRoute(\r\n        name: \"default\",\r\n        template: \"{controller}/{action=Index}/{id?}\");\r\n});\r\n```\r\n\r\nThe more complex code is a barrier to entry for new users who don't need this flexibility. Advanced users will have no problem adding the above code when they need it. The code above doesn't make much sense to Razor Pages developers. Recommend this change for all templates but especially for the Razor Pages template.\r\n\r\ncc @DamianEdwards  - part of the lower the barrier to entry effort.","Url":"https://github.com/aspnet/Templates/issues/857","RelatedDescription":"Closed issue \"Templates should use app.UseMvcWithDefaultRoute();\" (#857)"},{"Id":"244917331","IsPullRequest":false,"CreatedAt":"2017-08-03T17:55:35","Actor":"RehanSaeed","Number":"856","RawContent":null,"Title":"Sharing Common Files Between Templates","State":"closed","Body":"I have a ReadMe.html file which I'd like to share between my project templates. The file is mostly the same for all three templates, except that it contains a few symbols common to all my templates. I'd like to keep one copy of this file and use symbols to define template specific sections.\r\n```\r\n<html>\r\n<p>Common paragraph...</p>\r\n<!--#if MyTemplate1-->\r\n<p>MyTemplate1 paragraph...</p>\r\n<!--#endif-->\r\n<!--#if MyTemplate2-->\r\n<p>MyTemplate2 paragraph...</p>\r\n<!--#endif-->\r\n</html>\r\n```\r\n\r\nI can think of a way this might work without any help from the templating engine: Keep a common copy of the file, then copy the file into the template folders as a pre-packaging step in my build script. The disadvantage is that now I have three copies of my file unless I use a .gitignores file but then I have the extra step of having to remove the .gitignores file from the template output.\r\n\r\nI propose that you should be able to add a file as a link, then mark that file as common in your template.json file. Finally, when generating the project, the file is converted from a linked file, into a real one.\r\n","Url":"https://github.com/aspnet/Templates/issues/856","RelatedDescription":"Closed issue \"Sharing Common Files Between Templates\" (#856)"},{"Id":"244134597","IsPullRequest":false,"CreatedAt":"2017-08-03T17:30:02","Actor":"jkotalik","Number":"855","RawContent":null,"Title":"File new template error for Windows 8.1 32 bit for individual auth.","State":"closed","Body":"Steps:\r\n\r\n1. Download VS2017 Int Preview and dotnet preview3 on Windows 8.1 32 bit.\r\n2. File new... ASP.NET Core app, Web Application with Individual User Accounts Authorization\r\n3. Run application, try to register a new user\r\n\r\nExpected Results: A page would show up saying to apply migrations to the database or the user is registered.\r\nActual Results: SqlException on the SQL Server not being found. \r\n![4fce5f97](https://user-images.githubusercontent.com/8302101/28383504-3b7bf12c-6c76-11e7-91d0-5fe2675924a2.PNG)\r\n\r\n\r\nThe fix I had to do was change the ConnectionStrings' DefaultConnection from mssqllocaldb to ProjectsV12. \r\n\r\nMost likely, we would need to change https://github.com/aspnet/Templates/blob/a594b47c417593d43141d3b4eb2bc41d6ad85f20/src/Rules/StarterWeb/IndividualAuth/appsettings.json#L3 to use a variable for the database.","Url":"https://github.com/aspnet/Templates/issues/855","RelatedDescription":"Closed issue \"File new template error for Windows 8.1 32 bit for individual auth.\" (#855)"},{"Id":"244047453","IsPullRequest":false,"CreatedAt":"2017-07-20T08:45:31","Actor":"dazinator","Number":"854","RawContent":null,"Title":"typescript confiugration file item template","State":"closed","Body":"When the typescript configuration file is added to a project, by default it is \"content\" which also by default means it ends up being included in the nuget package when you do a `dotnet pack`. Given that the typescript configuration file is used primarily at build time, I don't think it should be included in a resulting nuget pack by default. Can it be changed to create this in the `csproj`:\r\n\r\n```\r\n <ItemGroup>\r\n    <Content Update=\"Scripts\\tsconfig.json\">\r\n      <Pack>false</Pack>\r\n    </Content>\r\n  </ItemGroup>\r\n```\r\n\r\nWithout this, if another project takes a dependency on this nuget package, you get build errors like this:\r\n\r\n```\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tTS18003\tBuild:No inputs were found in config file 'C:/Users/darrell.tunnell/.nuget/packages/gluon.module.themeswitcher/2.0.0/contentFiles/any/net452/Scripts/tsconfig.json'. Specified 'include' paths were '[\"**/*\"]' and 'exclude' paths were '[\"node_modules\",\"wwwroot\"]'.\tReach.GCv3.Mvc.Module.CompanyLogo\tC:\\Users\\darrell.tunnell\\Source\\Repos\\gc3-website\\src\\Reach.GCv3.Mvc.Module.CompanyLogo\\tsc\t1\t\r\n\r\n\r\n```\r\n\r\ni.e VS is doscovering the typescript configuration files within referenced nuget packages!","Url":"https://github.com/aspnet/Templates/issues/854","RelatedDescription":"Closed issue \"typescript confiugration file item template\" (#854)"},{"Id":"240276652","IsPullRequest":true,"CreatedAt":"2017-07-05T16:50:58","Actor":"ryanbrandenburg","Number":"853","RawContent":null,"Title":"Remove PackageTargetFallback","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/853","RelatedDescription":"Closed or merged PR \"Remove PackageTargetFallback\" (#853)"},{"Id":"239518221","IsPullRequest":true,"CreatedAt":"2017-07-05T14:09:36","Actor":"scottaddie","Number":"852","RawContent":null,"Title":"Clarify password reset sentence in ForgotPassword view","State":"closed","Body":"The `ForgotPassword.cshtml` view includes a sentence which was missing a comma and reversed the words \"reset\" and \"password\".\r\n\r\n/cc: @phenning @mlorbetske ","Url":"https://github.com/aspnet/Templates/pull/852","RelatedDescription":"Closed or merged PR \"Clarify password reset sentence in ForgotPassword view\" (#852)"},{"Id":"233568569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:14:20","Actor":"neman","Number":"849","RawContent":null,"Title":"Unable to install nuget template","State":"closed","Body":"I created nuget template. When I try to install it, I got the following error at the end\r\n\r\n```C:\\Program Files\\dotnet\\sdk\\1.0.4\\NuGet.targets(97,5): error : Unable to resolve 'Test.Templates' for '.NETCoreApp,Version=v1.0'. [C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj]\r\n\r\nGenerating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.targets.\r\n  Writing lock file to disk. Path: C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\project.assets.json\r\n  Restore failed in 13,16 sec for C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj.\r\n\r\n  Errors in C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj\r\n      Unable to resolve 'BIB.Templates' for '.NETCoreApp,Version=v1.0'.\r\n\r\n  NuGet Config files used:\r\n      C:\\Users\\nemke\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n      C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n\r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\n      C:\\local-nuget\r\n      C:\\Users\\nemke\\.dotnet\\NuGetFallbackFolder\r\n      C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n```\r\n\r\n#### dotnetinfo\r\n\r\n```\r\nC:\\Temp> dotnet --info\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002111-00\r\n  Build    : 1ff021936263d492539399688f46fd3827169983\r\n``` \r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/849","RelatedDescription":"Closed issue \"Unable to install nuget template\" (#849)"},{"Id":"233555569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:13:42","Actor":"neman","Number":"848","RawContent":null,"Title":"Wrong CLI command for template installation at nuget.org","State":"closed","Body":"When I go tu nuget.org to search for some template I got the following page for link https://www.nuget.org/packages/NetEscapades.Templates/\r\n\r\n![image](https://cloud.githubusercontent.com/assets/350314/26781234/bf4cc98c-49ed-11e7-9e4a-08bb168b6c62.png)\r\n\r\nThe command instruct to use `Install-Package NetEscapades.Templates` which does not work. \r\n\r\n```\r\nInstall-Package NetEscapades.Templates\r\nInstall-Package : No match was found for the specified search criteria and package name 'NetEscapades.Templates'. Try Get-PackageSource to see all available registered p ackage sources.\r\nAt line:1 char:1\r\n+ Install-Package NetEscapades.Templates\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n```\r\nThe correct command is `dotnet new --install \"NetEscapades.Templates::*\"`\r\n\r\nWill this be fixed in future release?  Which will be the correct CLI command?\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/848","RelatedDescription":"Closed issue \"Wrong CLI command for template installation at nuget.org\" (#848)"},{"Id":"226082169","IsPullRequest":true,"CreatedAt":"2017-05-03T18:58:53","Actor":"phenning","Number":"846","RawContent":null,"Title":"Revert \"Add MVC precompilation package for 1.1\"","State":"closed","Body":"This reverts commit 461cd822646505fb53c6b0ac416af3780e32578f.\r\n\r\n# Conflicts:\r\n#\tsrc/BaseTemplates/StarterWeb/StarterWeb.csproj\r\n#\tsrc/Templates.xml","Url":"https://github.com/aspnet/Templates/pull/846","RelatedDescription":"Closed or merged PR \"Revert \"Add MVC precompilation package for 1.1\"\" (#846)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"349649932","IsPullRequest":true,"CreatedAt":"2018-08-10T20:38:21","Actor":"Andrew-MSFT","Number":"1077","RawContent":null,"Title":"Adding a .net core -> vs mapping table","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1077","RelatedDescription":"Closed or merged PR \"Adding a .net core -> vs mapping table\" (#1077)"},{"Id":"333613195","IsPullRequest":false,"CreatedAt":"2018-06-27T12:59:29","Actor":"Liero","Number":"1076","RawContent":null,"Title":"Unable to publish when using Microsoft.NET.Sdk.Razor","State":"closed","Body":"After I upgraded my solution from asp.net core 2.0 to 2.1, I'm not able to publish my web app from Visual Studio, although it can build.\r\n\r\nDuring the upgrade I've changed SDK in one of my class libraries to **Microsoft.NET.Sdk.Razor**, but now I'm getting a lot of errors and if project references were not recognized in this library when publishing.\r\n\r\n```\r\nConnecting to C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\publish\\...\r\nMyProject.Web -> C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\MyProject.Web.dll\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;RELEASE;NETCOREAPP;NETCOREAPP2_1 /errorendlocation /preferreduilang:en-US /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization.policy\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.Policy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.Internal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Html.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.JsonPatch.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Language.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebUtilities.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.CodeAnalysis.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.1.0\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netcoreapp2.0\\Microsoft.Extensions.DependencyInjection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.1.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Composite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileSystemGlobbing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.ObjectPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.WebEncoders.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.1.0\\lib\\netstandard2.0\\Microsoft.Net.Http.Headers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.VisualBasic.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.Win32.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.win32.registry\\4.5.0\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\netstandard.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.2.0\\lib\\netstandard1.0\\Remotion.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.AppContext.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Buffers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Concurrent.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Immutable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.NonGeneric.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Specialized.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Annotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.EventBasedAsync.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.TypeConverter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.Common.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.data.sqlclient\\4.5.0\\ref\\netcoreapp2.1\\System.Data.SqlClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Contracts.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.DiagnosticSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.FileVersionInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Process.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.StackTrace.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TextWriterTraceListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tools.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tracing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Dynamic.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Calendars.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.Brotli.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.ZipFile.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.DriveInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Watcher.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.IsolatedStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.MemoryMappedFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Pipes.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.UnmanagedMemoryStream.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Expressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Queryable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.HttpListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Mail.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NameResolution.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NetworkInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Ping.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Requests.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.ServicePoint.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Sockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebHeaderCollection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.Client.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.Vectors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ObjectModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.DispatchProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.ILGeneration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.Lightweight.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.TypeExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Reader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.ResourceManager.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Writer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.CompilerServices.VisualC.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Handles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.RuntimeInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.WindowsRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Loader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Formatters.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\ref\\netstandard2.0\\System.Security.AccessControl.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Claims.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Algorithms.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Csp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.X509Certificates.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.cryptography.xml\\4.5.0\\ref\\netstandard2.0\\System.Security.Cryptography.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\ref\\netstandard2.0\\System.Security.Permissions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Principal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.SecureString.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceModel.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceProcess.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encodings.web\\4.5.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.RegularExpressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Overlapped.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Dataflow.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Thread.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.ThreadPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Timer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.Local.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ValueTuple.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.HttpUtility.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.ReaderWriter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlSerializer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\WindowsBase.dll\" /debug- /debug:portable /filealign:512 /optimize+ /out:obj\\Release\\netcoreapp2.1\\MyProject.Mail.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:library /warnaserror- /utf8output /deterministic+ /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.CSharp.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.analyzers\\2.1.0\\analyzers\\dotnet\\cs\\Microsoft.EntityFrameworkCore.Analyzers.dll\" EmailDefaults.cs EmailOptions.cs MailSender.cs NotificationService.cs RazorViewToStringRenderer.cs \"C:\\Users\\daniel.turan\\AppData\\Local\\Temp\\.NETCoreApp,Version=v2.1.AssemblyAttributes.cs\" obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Release\\netcoreapp2.1\\\\Tem\tporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.RazorAssemblyInfo.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.AssemblyInfo.cs /warnaserror+:NU1605\r\nNotificationService.cs(15,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\nNotificationService.cs(16,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\n...\r\n```\r\n\r\nAlso, see https://stackoverflow.com/questions/50926116/publish-failed-when-using-microsoft-net-sdk-razor-if-reference-was-not-recognize for more details","Url":"https://github.com/aspnet/Tooling/issues/1076","RelatedDescription":"Closed issue \"Unable to publish when using Microsoft.NET.Sdk.Razor\" (#1076)"},{"Id":"257171895","IsPullRequest":false,"CreatedAt":"2018-06-25T20:46:49","Actor":"shirhatti","Number":"1057","RawContent":null,"Title":"Support for multi-line string values","State":"closed","Body":"_From @alexvy86 on August 3, 2017 21:11_\n\nI'm using Akka.NET in a project and the way they do configuration is not-quite-JSON, but still a hierarchical structure, which I haven't been able to successfully integrate into `appsettings.json`. The only way I've been able to do it is to collapse all of their hierarchy into a single-line string value, which makes it a bit of a pain to work with.\r\n\r\nFor now I just put the whole thing as CDATA in an XML file and use the `AddXmlFile()` extension from `Microsoft.Extensions.Configuration.Xml` to read it, but it'd be preferable to have it in `appsetings.json`.\n\n_Copied from original issue: aspnet/Configuration#703_","Url":"https://github.com/aspnet/Tooling/issues/1057","RelatedDescription":"Closed issue \"Support for multi-line string values\" (#1057)"},{"Id":"329605262","IsPullRequest":false,"CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Number":"1075","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"open","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","Url":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Open issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#1075)"},{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"268293817","IsPullRequest":false,"CreatedAt":"2018-05-17T02:25:02","Actor":"Pichasepong","Number":"1060","RawContent":null,"Title":"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. ","State":"closed","Body":"Problems installing on Server 2012 R2 ,Dot net core 1.0.1 vs 2015 tooling preview 2 error logs file.\r\n\r\n![product_dotnetcoreerror](https://user-images.githubusercontent.com/12063904/31985990-040a5f72-b991-11e7-9356-ddd06160a87c.jpg)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1060","RelatedDescription":"Closed issue \"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. \" (#1060)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"TheConservativeCoder","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"},{"Id":"273994049","IsPullRequest":true,"CreatedAt":"2018-01-07T03:48:49","Actor":"cartermp","Number":"1062","RawContent":null,"Title":"Update migrate-sql-server.md","State":"closed","Body":"Removed product links in favor of all docs links, changed wording slightly, and moved Get Started to be at the top.","Url":"https://github.com/aspnet/Tooling/pull/1062","RelatedDescription":"Closed or merged PR \"Update migrate-sql-server.md\" (#1062)"},{"Id":"274003770","IsPullRequest":true,"CreatedAt":"2017-11-15T02:15:11","Actor":"cristy","Number":"1064","RawContent":null,"Title":"Re adding","State":"closed","Body":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end...","Url":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Closed or merged PR \"Re adding\" (#1064)"},{"Id":"273996633","IsPullRequest":true,"CreatedAt":"2017-11-15T01:03:12","Actor":"cristy","Number":"1063","RawContent":null,"Title":"Webapp landing page","State":"closed","Body":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make.","Url":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Closed or merged PR \"Webapp landing page\" (#1063)"},{"Id":"273873058","IsPullRequest":true,"CreatedAt":"2017-11-14T17:26:42","Actor":"cartermp","Number":"1061","RawContent":null,"Title":"Create migrate-sql-server.md","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1061","RelatedDescription":"Closed or merged PR \"Create migrate-sql-server.md\" (#1061)"},{"Id":"258233429","IsPullRequest":false,"CreatedAt":"2017-09-16T14:09:00","Actor":"ctopher31","Number":"1059","RawContent":null,"Title":"Turn off file nesting in Visual Studio 2017","State":"closed","Body":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n","Url":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Closed issue \"Turn off file nesting in Visual Studio 2017\" (#1059)"},{"Id":"257312054","IsPullRequest":false,"CreatedAt":"2017-09-14T00:50:29","Actor":"svallis","Number":"1058","RawContent":null,"Title":"Views in class libraries removed from embedded resources under certain circumstances","State":"closed","Body":"I have a test repo which should hopefully demonstrate this problem, and I hope this is the correct repo for the issue.\r\n\r\nhttps://github.com/svallis/precompilation-classlib\r\n\r\nIf you clone and open this solution and perform the following, the issue should be clear. First, the expected results is what happens when adding views to `app`:\r\n\r\n- Go to `app1\\Views\\Home` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `app1` remains unchanged\r\n\r\nNow perform the same process on `lib1`:\r\n\r\n- Go to `lib1\\Views\\Shared` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `lib1` has the following added to it\r\n\r\n```\r\n<ItemGroup>\r\n    <EmbeddedResource Remove=\"Views\\Shared\\Test - Copy.cshtml\" />\r\n</ItemGroup>\r\n```\r\n\r\nAs you can imagine this is highly frustrating during development, and we're constantly running into it while developing features within a library. I don't know if it's an outright bug, or whether we could improve the existing rules in the `.csproj` for the library. Whatever changes are made to the library project file need to preserve existing functionality though, so that views are not included in the publish output and are embedded in the assembly. This allows everything to work both during development and after publishing with precompiled views.","Url":"https://github.com/aspnet/Tooling/issues/1058","RelatedDescription":"Closed issue \"Views in class libraries removed from embedded resources under certain circumstances\" (#1058)"},{"Id":"254062749","IsPullRequest":false,"CreatedAt":"2017-08-31T04:38:52","Actor":"matthewDDennis","Number":"1056","RawContent":null,"Title":"Docker tools fail if multiple TFMs in project file","State":"closed","Body":"If you modify your projects to have multiple frameworks with the `<TargetFrameworks>` tag, then the Docker tools does not know which framework to use as there is no `<TargetFramework>` tag.\r\n\r\nAdding the `<TargetFramework>`netcoreapp1.1`<...>` fixes the problem in Visual Studio and all the frameworks build and can debug with Docker.\r\n\r\nHowever, if you try and build a framework other than the netcoreapp1.1 with the DotNet CLI, it fails as it, as the documentation states, will ignore the `<TargetFrameworks>` tag if the `<TargetFramework>` tag is present \r\n","Url":"https://github.com/aspnet/Tooling/issues/1056","RelatedDescription":"Closed issue \"Docker tools fail if multiple TFMs in project file\" (#1056)"},{"Id":"249781859","IsPullRequest":true,"CreatedAt":"2017-08-14T15:57:44","Actor":"balachir","Number":"1055","RawContent":null,"Title":"Update known-issues-vs2017.md for VS 15.3 RTW","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1055","RelatedDescription":"Closed or merged PR \"Update known-issues-vs2017.md for VS 15.3 RTW\" (#1055)"},{"Id":"247941709","IsPullRequest":false,"CreatedAt":"2017-08-05T03:07:41","Actor":"snebjorn","Number":"1054","RawContent":null,"Title":"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime","State":"closed","Body":"Hi, I'm curious about how you made Browser Link inject a custom script into the page body at runtime.\r\nI have to do something similar (ritterim/stuntman#158) so wondering if you've willing to share the implementation :)\r\n\r\nI also made a [stackoverflow post](https://stackoverflow.com/questions/45501245/programmatically-inject-custom-script-into-page-body-at-runtime-like-browser-l)\r\n\r\nThanks","Url":"https://github.com/aspnet/Tooling/issues/1054","RelatedDescription":"Closed issue \"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime\" (#1054)"},{"Id":"247229183","IsPullRequest":false,"CreatedAt":"2017-08-02T06:18:35","Actor":"halter73","Number":"1053","RawContent":null,"Title":"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly","State":"closed","Body":"Given the launchSettings.json and Program.cs below, it seems that the ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly when launching both the \"IIS Express\" or \"WebApplication1\" profiles from VS 2017 26730.0.d15rel and dotnet sdk 2.0.0-preview3-006889.\r\n\r\n\r\n#### Expected output for \"IIS Express\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"IIS Express\" profile launched from VS (App Insights is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration'\r\n```\r\n\r\n#### Expected output for \"WebApplication1\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched from VS (HostingStartup1 is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched using \"dotnet run\" (Behaves as expected)\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1'\r\n```\r\n\r\n#### launchSettings.json\r\n```json\r\n{\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:61008/\",\r\n      \"sslPort\": 0\r\n    }\r\n  },\r\n  \"profiles\": {\r\n    \"IIS Express\": {\r\n      \"commandName\": \"IISExpress\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      }\r\n    },\r\n    \"WebApplication1\": {\r\n      \"commandName\": \"Project\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      },\r\n      \"applicationUrl\": \"http://localhost:61010/\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Program.cs\r\n```C#\r\nusing Microsoft.AspNetCore;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing System;\r\n\r\nnamespace WebApplication1\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            BuildWebHost(args).Run();\r\n        }\r\n\r\n        public static IWebHost BuildWebHost(string[] args)\r\n        {\r\n            Console.WriteLine(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES: '{0}'\", Environment.GetEnvironmentVariable(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\"));\r\n\r\n            return WebHost.CreateDefaultBuilder(args)\r\n                .UseStartup<Startup>()\r\n                .Build();\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1053","RelatedDescription":"Closed issue \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly\" (#1053)"},{"Id":"245422589","IsPullRequest":false,"CreatedAt":"2017-07-28T17:44:59","Actor":"varora1406","Number":"1052","RawContent":null,"Title":"Add-Migration command not working.","State":"closed","Body":"IDE : visual studio 15.3 preview 5.0\r\n.net core 2.0\r\nProject : .Net core web application (Angular template) including (Angular v4)\r\n\r\nSteps to reproduce:\r\n* Create a new project and all required nuget packages.\r\n![image](https://user-images.githubusercontent.com/24986539/28577409-559354a8-7174-11e7-9dfb-26cc7efc1228.png)\r\n\r\n* Try to use Add-Migration command. (Don't worry, context classes and rest have been done)\r\n- Result : The term 'Add-Migration' is not recognized as the name of a cmdlet, function, script file, or operable program. \r\n![image](https://user-images.githubusercontent.com/24986539/28577463-81e914c0-7174-11e7-97eb-5cd2a5fb3e28.png)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1052","RelatedDescription":"Closed issue \"Add-Migration command not working.\" (#1052)"},{"Id":"241453336","IsPullRequest":false,"CreatedAt":"2017-07-08T14:19:58","Actor":"RandyBuchholz","Number":"1051","RawContent":null,"Title":"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"","State":"open","Body":"There was a compatibility error with Microsoft.Composition. This is being addressed https://github.com/dotnet/corefx/issues/18452.\r\n\r\nCodeGeneration.Design is still referencing the old version and gives:\r\nPackage 'Microsoft.Composition 1.0.27' was restored using '.NETFramework,Version=v4.6.1' instead the project target framework...\r\n\r\nThe correct version is 1.0.31.\r\n\r\n![image](https://user-images.githubusercontent.com/13967891/27986052-85abdeee-63be-11e7-9b53-ec7a6199d628.png)\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1051","RelatedDescription":"Open issue \"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"\" (#1051)"},{"Id":"238392758","IsPullRequest":false,"CreatedAt":"2017-07-04T19:13:11","Actor":"miloush","Number":"1048","RawContent":null,"Title":"Adding application manifest ","State":"closed","Body":"The project properties designer asks me to add manifest to the project first before it can be selected:\r\n![untitled](https://user-images.githubusercontent.com/10546952/27518138-8a52e322-59d0-11e7-99b8-78a31d72e1a3.png)\r\n\r\nHowever, there does not seem to be a manifest template in the Add New Item list for ASP.NET Core projects.\r\n\r\nEither add the manifest template, or let the properties designer generate it, or change the \"default settings\" to declare newer OS support.","Url":"https://github.com/aspnet/Tooling/issues/1048","RelatedDescription":"Closed issue \"Adding application manifest \" (#1048)"},{"Id":"239635705","IsPullRequest":true,"CreatedAt":"2017-06-29T23:09:22","Actor":"anangaur","Number":"1050","RawContent":null,"Title":"Update known-issues-vs2017-preview.md","State":"open","Body":"Removed \"No workaround...\" as there is a workaround","Url":"https://github.com/aspnet/Tooling/pull/1050","RelatedDescription":"Open PR \"Update known-issues-vs2017-preview.md\" (#1050)"},{"Id":"239016783","IsPullRequest":true,"CreatedAt":"2017-06-28T20:04:41","Actor":"balachir","Number":"1049","RawContent":null,"Title":"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1049","RelatedDescription":"Closed or merged PR \"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2\" (#1049)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"368897417","IsPullRequest":false,"CreatedAt":"2018-10-10T23:45:50","Actor":"BrennanConroy","Number":"322","RawContent":null,"Title":"React to StackExchange.Redis v2.0","State":"open","Body":"We are introducing two new packages to use [StackExchange.Redis](https://www.nuget.org/packages/StackExchange.Redis/) 2.0 with ASP.NET Core Caching and SignalR. We are also introducing support for using Redis to store DataProtection key material using StackExchange.Redis 2.0.\r\n\r\nFor ASP.NET Core 2.2 we will continue to ship our existing packages which use StackExchange.Redis 1.0, to preserve compatibility for existing users. However, we suggest you update to the new package as soon as possible. These packages are now considered deprecated and will be removed in ASP.NET Core 3.0.\r\n\r\n### Caching ###\r\nWe are releasing a new package \"Microsoft.Extensions.Caching.StackExchangeRedis\" which will depend on StackExchange.Redis 2.0. \"Microsoft.Extensions.Caching.Redis\" will continue to ship in ASP.NET Core 2.2 with the StackExchange.Redis 1.0 dependency and will be removed in 3.0.\r\n\r\nTo use the new package, remove your dependency on [Microsoft.Extensions.Caching.Redis](https://www.nuget.org/packages/Microsoft.Extensions.Caching.Redis) (if present), and add a dependency to \"Microsoft.Extensions.Caching.StackExchangeRedis\". Next, change your `AddDistributedRedisCache` invocation in `ConfigureServices` to `AddStackExchangeRedisCache`. No further changes should be necessary.\r\n\r\n### DataProtection ###\r\nThe \"Microsoft.AspNetCore.DataProtection.Redis\" package is new in ASP.NET Core 2.2 and depends on StackExchange.Redis 1.0 in Preview 2. In Preview 3, this package has been renamed to \"Microsoft.AspNetCore.DataProtection.StackExchangeRedis\" and has been updated to use StackExchange.Redis 2.0.\r\n\r\nTo use the new package, remove your dependency on [Microsoft.AspNetCore.DataProtection.Redis](https://www.nuget.org/packages/Microsoft.AspNetCore.DataProtection.Redis) (if present), and add a dependency to \"Microsoft.AspNetCore.DataProtection.StackExchangeRedis\". Next, change your `PersistKeysToRedis` invocation in `ConfigureServices` to `PersistKeysToStackExchangeRedis`. No further changes should be necessary.\r\n\r\n### SignalR ###\r\nWe are releasing a new package \"Microsoft.AspNetCore.SignalR.StackExchangeRedis\" which will depend on StackExchange.Redis 2.0. \"Microsoft.AspNetCore.SignalR.Redis\" will continue to ship in ASP.NET Core 2.2 with the StackExchange.Redis 1.0 dependency and will be removed in 3.0.\r\n\r\nTo use the new package, remove your dependency on [Microsoft.AspNetCore.SignalR.Redis](https://www.nuget.org/packages/Microsoft.AspNetCore.SignalR.Redis) (if present), and add a dependency to \"Microsoft.AspNetCore.SignalR.StackExchangeRedis\". Next, change your `AddRedis` invocation in `ConfigureServices` to `AddStackExchangeRedis`. No further changes should be necessary.\r\n\r\n---\r\nFor questions or further discussions about the changes, please use https://github.com/aspnet/AspNetCore/issues/3606.","Url":"https://github.com/aspnet/Announcements/issues/322","RelatedDescription":"Open issue \"React to StackExchange.Redis v2.0\" (#322)"},{"Id":"368431099","IsPullRequest":false,"CreatedAt":"2018-10-09T23:00:09","Actor":"mikaelm12","Number":"321","RawContent":null,"Title":"SignalR Java Client Package Name Change","State":"open","Body":"_Please use [this issue](https://github.com/aspnet/SignalR/issues/3105) for discussion._\r\n\r\nThe SignalR java client which is currently in preview, was previously under the package name `com.microsoft.aspnet.signalr`. This was the case for the first and second previews of the Java client. Starting in preview 3 the package name will change to `com.microsoft.signalr`. This means that our groupid through maven central will change and that consuming the package through maven or gradle will be slightly different. \r\n\r\nHere's what bringing in the Java client after preview 3 releases without the actual build numbers should look similar to\r\n```xml\r\n<dependency>\r\n  <groupId>com.microsoft.signalr</groupId>\r\n  <artifactId>signalr</artifactId>\r\n  <version>PREVIEW 3 VERSION NUMBER</version>\r\n</dependency>\r\n```\r\n\r\n```gradle\r\nimplementation 'com.microsoft.signalr:signalr:PREVIEW 3 VERSION NUMBER'\r\n```","Url":"https://github.com/aspnet/Announcements/issues/321","RelatedDescription":"Open issue \"SignalR Java Client Package Name Change\" (#321)"},{"Id":"367932540","IsPullRequest":false,"CreatedAt":"2018-10-08T20:00:47","Actor":"natemcmaster","Number":"320","RawContent":null,"Title":"For contributors: unifying to fewer GitHub repos","State":"open","Body":"_Please use [this issue](https://github.com/aspnet/Home/issues/3598) for discussion._\r\n\r\nOver the next few months, we will reduce the number of repos in active development in the @aspnet organization by merging them together. We plan to condense about 53 repos into 5. Repos which merge with another will be archived on GitHub, which makes them read-only. We will also rename a few repositories. GitHub will automatically redirect URLs to issues and commits on renamed repositories. We will update the README and repo descriptions to help you navigate from archived repos to the new repo.\r\n\r\nAfter the merging is complete, the final set of repos will be as follows:\r\n\r\nRepo                            | Primary purpose\r\n--------------------------------|-----------------------------------------------\r\naspnet/AspNetCore               | ASP.NET Core runtime\r\naspnet/Extensions               | Microsoft.Extensions.* APIs\r\naspnet/EntityFrameworkCore      | Entity Framework Core\r\naspnet/Tooling                  | Visual Studio extensions, command-line tools, and MSBuild SDKs\r\naspnet/AspLabs                  | Experiments not ready for production releases\r\n\r\nTo preserve as much history as possible, we will rename aspnet/Home to aspnet/AspNetCore, and aspnet/Common to aspnet/Extensions instead of creating new repos. We will preserve commit history by merging unrelated histories into the unified repos. We will also review open issues and move them when necessary to keep them aligned with the relevant code.\r\n\r\n### Motivation\r\n\r\nOur primary motivation is simplifying both our engineering systems and our GitHub interactions with all of you. We know there are some drawbacks to working in larger repos, but we find the benefits compelling enough to move forward with this change. The new set of repos more closely aligns with the layering of the products they ship.\r\n\r\n### Timeframe\r\n\r\nWe'll be starting the first round of changes soon. We expect the entire unification effort will take us several weeks. We'll migrate repositories in phases and adjust the plan along the way, as necessary.\r\n\r\n### Archived repos\r\n\r\nThe following repos will be merged into the main repos above. They will not be used any more for active development on 2.1 LTS and new releases. The source code for the projects will move to the new project with any issues we intend to keep working on. Remaining issues and pull requests will be closed. We do not plan to delete the repos or remove tagged commits, but the projects will become read-only.\r\n\r\n* AADIntegration           \r\n* Antiforgery              \r\n* AuthSamples              \r\n* AzureIntegration         \r\n* BasicMiddleware          \r\n* BrowserLink              \r\n* Caching                  \r\n* Common                   \r\n* Configuration            \r\n* CORS                     \r\n* DataProtection           \r\n* DependencyInjection      \r\n* Diagnostics              \r\n* DotNetTools              \r\n* EventNotification        \r\n* FileSystem               \r\n* Hosting                  \r\n* HtmlAbstractions         \r\n* HttpAbstractions         \r\n* HttpClientFactory        \r\n* HttpSysServer            \r\n* Identity                 \r\n* IISIntegration           \r\n* JavaScriptServices       \r\n* JsonPatch                \r\n* KestrelHttpServer        \r\n* Localization             \r\n* Logging                  \r\n* MetaPackages             \r\n* Microsoft.Data.Sqlite    \r\n* MusicStore               \r\n* Mvc                      \r\n* MvcPrecompilation        \r\n* Options                  \r\n* Proxy                    \r\n* Razor                    \r\n* ResponseCaching          \r\n* Routing                  \r\n* Scaffolding              \r\n* Security                 \r\n* ServerTests              \r\n* Session                  \r\n* SignalR                  \r\n* StaticFiles              \r\n* Templating               \r\n* Testing                  \r\n* Universe                 \r\n* WebHooks                 \r\n* WebSockets\r\n\r\n\r\n_Please use https://github.com/aspnet/Home/issues/3598 for discussion._  ","Url":"https://github.com/aspnet/Announcements/issues/320","RelatedDescription":"Open issue \"For contributors: unifying to fewer GitHub repos\" (#320)"},{"Id":"367922912","IsPullRequest":false,"CreatedAt":"2018-10-08T19:29:02","Actor":"pranavkm","Number":"319","RawContent":null,"Title":"3.0 - Removing Microsoft.AspNetCore.Mvc.WebApiCompatShim","State":"open","Body":"The Microsoft.AspNetCore.Mvc.WebApiCompatShim (WebApiCompatShim) package provides partial compatibility in ASP.NET Core with ASP.NET Web API 2 to simplify migrating existing Web API implementations to ASP.NET Core. However, apps using the WebApiCompatShim do not benefit from the API related features shipping in recent ASP.NET Core releases, such as improved Open API Spec genertaion, standardized error handling, and client code generation. To better focus our API efforts in 3.0, we plan to remove WebApiCompatShim. We recommend that existing applications using the WebApiCompatShim migrate to the newer `[ApiController]` model.\r\n\r\nFor questions or further discussions, please use https://github.com/aspnet/Mvc/issues/8570.","Url":"https://github.com/aspnet/Announcements/issues/319","RelatedDescription":"Open issue \"3.0 - Removing Microsoft.AspNetCore.Mvc.WebApiCompatShim\" (#319)"},{"Id":"365011293","IsPullRequest":false,"CreatedAt":"2018-09-28T19:23:51","Actor":"blowdart","Number":"318","RawContent":null,"Title":"Microsoft Security Advisory: iOS12 breaks social, WSFed and OIDC logins","State":"open","Body":"# Microsoft Security Advisory:  iOS12 breaks social, WSFed and OIDC logins\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about an incompatibly between iOS12 and some types of authentication. This advisory also provides guidance on what developers can do to remove current security restrictions added by ASP.NET to their applications to become compatible with iOS12.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1984 for ASP.NET Core Identity\r\nDiscussion for this issue can be found at https://github.com/aspnet/Security/issues/1864 for ASP.NET Core Cookie Authentication\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>What has changed\r\n\r\nThe recent iOS12 update has changed Safari's handling of [SameSite](https://tools.ietf.org/html/rfc6265) cookies. The SameSite attribute allows a developer to control when cookies are sent to a web site, enabling the flow to only occur when requests are from the same site. This standard was introduced to reduce exposure to Cross Site Request Forgery (CSRF) attacks. By default ASP.NET Core 2.0 and later protects its authentication cookies using the SameSite property. The change on Apple's part is not limited to ASP.NET Core applications, it is affecting multiple frameworks and authentication software which relay on HTTP forms in a browser, for example authenticating to a third party via Facebook, Twitter or browser based Open ID Connect (OIDC) mechanism.\r\n\r\nApple have stated they believe [their change is correct behavior](https://bugs.webkit.org/show_bug.cgi?id=188165), and that the fault lies in every other browser's implementation.\r\n\r\nWhile we take no stance on the correctness of browser behavior we feel that removing the SameSite protections would expose our customers, and their customers to a wider risk, as it would remove the protection provided everywhere, for all users, in any browser.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf your users can no longer login to your web application on iOS12 using Safari then you are affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix this?\r\n\r\nDevelopers can allow iOS12 Safari users to log into their applications by turn off SameSite protection in `ConfigureServices()`.\r\n\r\nIf you are using ASP.NET Core Identity you disable the protection by configuring cookies with the following code\r\n\r\n```c#\r\nservices.ConfigureExternalCookie(options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = SameSiteMode.None;\r\n});\r\nservices.ConfigureApplicationCookie(options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = SameSiteMode.None;\r\n});\r\n```\r\n\r\nIf you are using cookie authentication without ASP.NET Core identity you can turn off the protection with the following code\r\n\r\n```c#\r\nservices.AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = Microsoft.AspNetCore.Http.SameSiteMode.None;\r\n})\r\n```\r\n\r\nIf you are using external OIDC providers you may be able to avoid the issue by changing the response mode your provider uses from a POST to a GET request, using the following code. Not all providers may support this.\r\n\r\n```c#\r\n.AddOpenIdConnect(\"myOIDProvider\", options => {\r\n    // Other options\r\n    options.ResponseType = \"code\";\r\n    options.ResponseMode = \"query\";\r\n};\r\n```\r\n\r\n_Note that in making these changes protection is removed for all users and all browsers. You should ensure that all your actions that make state changes are protected with [CSRF anti-forgery mechanisms](https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery) built into ASP.NET Core.\r\n\r\n#### Rebuilding your application\r\n\r\nAfter making these configuration changes you rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[Bug 188165 - iOS 12 Safari breaks ASP.NET Core 2.1 OIDC authentication](https://bugs.webkit.org/show_bug.cgi?id=188165)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 28, 2018): Advisory published.\r\n","Url":"https://github.com/aspnet/Announcements/issues/318","RelatedDescription":"Open issue \"Microsoft Security Advisory: iOS12 breaks social, WSFed and OIDC logins\" (#318)"},{"Id":"361087870","IsPullRequest":false,"CreatedAt":"2018-09-18T00:05:36","Actor":"halter73","Number":"317","RawContent":null,"Title":"Kestrel Connection Adapter Logging Namespace Changes","State":"open","Body":"The logging namespaces for Kestrel's HttpsConnectionAdapter and LoggingConnectionAdapter are changing in 2.2.0.\r\n\r\n1. The `HttpsConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter`.\r\n2. The `LoggingConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.LoggingConnectionAdapter`.\r\n\r\nHere's an example HttpsConnectionAdapter log prior to the change:\r\n\r\n```\r\ndbug: HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```\r\n\r\nAnd after:\r\n\r\n```\r\ndbug: Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```","Url":"https://github.com/aspnet/Announcements/issues/317","RelatedDescription":"Open issue \"Kestrel Connection Adapter Logging Namespace Changes\" (#317)"},{"Id":"359136062","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:10","Actor":"blowdart","Number":"316","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when ASP.NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an ASP.NET Core web application. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing a specially crafted web requests to the ASP.NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles parsing web requests.\r\n\r\nThe underlying problem exists in the `System.IO.Pipelines` package. If you have other software which uses this package please follow the instructions in the [.NET Core bulletin](https://github.com/dotnet/announcements/issues/83).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2914\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses either of the packages with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nASP.NET Core 2.1 is distributed as part of the .NET Core runtime. To check the current installed runtimes open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed you will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf the highest .NET Core SDK version is less that 2.1.402 or the highest `Microsoft.AspNetCore.App` runtime version is less that 2.1.4 you are vulnerable to this issue. You may not see any SDK versions if you have only installed the runtime.\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.402 on your development machines and build servers, and the .NET Core Runtime 2.1.4 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n#### Applications not using Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/aspnet/Announcements/issues/316","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\" (#316)"},{"Id":"353145143","IsPullRequest":false,"CreatedAt":"2018-08-22T22:11:39","Actor":"pranavkm","Number":"315","RawContent":null,"Title":"3.0: Deprecating MvcPrecompilation tool ","State":"open","Body":"In ASP.NET Core 1.1, we introduced the `Microsoft.AspNetCore.Mvc.Razor.ViewCompilation` (MVC precompilation tool) package that added support for publish time compilation of Razor files (.cshtml files). Starting in ASP.NET Core 2.1, we introduced the [Razor SDK](https://docs.microsoft.com/en-us/aspnet/core/razor-pages/sdk?view=aspnetcore-2.1) that expanded on the features of the precompilation tool by adding support for build and publish time of Razor files. The SDK allows for verifying the correctness of cshtml files at build time while also improving on startup time for applications. The Razor SDK is on by default and no gesture is required to start using it.\r\n\r\nIn 3.0, we plan to remove the earlier MVC precompilation tool. Earlier versions of the package will continue receiving important bug and security fixes as part of our patch release. \r\n\r\nFor users of ASP.NET Core 2.1 or later, we recommend migrating to the Razor SDK if you haven't already. If you're currently using the precompilation tool and are unable to migrate to the Razor SDK due to bugs or missing features, please file an issue at https://github.com/aspnet/Razor/issues.\r\n\r\nPlease use https://github.com/aspnet/Mvc/issues/8313 for discussions.","Url":"https://github.com/aspnet/Announcements/issues/315","RelatedDescription":"Open issue \"3.0: Deprecating MvcPrecompilation tool \" (#315)"},{"Id":"349340221","IsPullRequest":false,"CreatedAt":"2018-08-10T00:56:39","Actor":"natemcmaster","Number":"314","RawContent":null,"Title":"3.0: deprecating Microsoft.AspNetCore.All","State":"open","Body":"Earlier this year, we announced the Microsoft.AspNetCore.App metapackage (see https://github.com/aspnet/Announcements/issues/287). That announcement said:\r\n\r\n> The existing Microsoft.AspNetCore.All meta-package will continue to be made available throughout the 2.x lifecycle, but **we recommend customers move to the new Microsoft.AspNetCore.App meta-package** and then add individual references to any of the removed packages if their app requires it.\r\n\r\nSee [our documentation for details](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage?view=aspnetcore-2.1#migrating-from-microsoftaspnetcoreall-to-microsoftaspnetcoreapp) on how to migrate from Microsoft.AspNetCore.All to .App.\r\n\r\nWe have begun working on ASP.NET Core 3.0, and as a part of that, we will stop producing the Microsoft.AspNetCore.All metapackage and the matching Microsoft.AspNetCore.All shared framework in the 3.0 nightly builds.\r\n\r\nThis package will still be available in ASP.NET Core 2.2 and will continue to receive servicing updates in ASP.NET Core 2.1.\r\n\r\nPlease use https://github.com/aspnet/Home/issues/3418 for questions or comments.\r\n","Url":"https://github.com/aspnet/Announcements/issues/314","RelatedDescription":"Open issue \"3.0: deprecating Microsoft.AspNetCore.All\" (#314)"},{"Id":"346800428","IsPullRequest":false,"CreatedAt":"2018-08-01T23:00:38","Actor":"pranavkm","Number":"313","RawContent":null,"Title":"CorsMiddleware must be explicitly configured to specify all allowed headers","State":"open","Body":"In versions of ASP.NET Core 2.1.0 and earlier, the CorsMiddleware always allowed certain headers in the `Access-Control-Request-Headers` to be sent regardless of the values configured in `CorsPolicy.Headers`. This list of headers includes:\r\n\r\n* `Accept`\r\n* `Accept-Language`\r\n* `Content-Language`\r\n* `Origin`\r\n\r\nFor instance, consider an application configured as follows:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\"));\r\n```\r\n\r\nIn 2.1 and earlier, the CORS middleware would respond successfully to a preflight request with the following request header:\r\n\r\n`Access-Control-Request-Headers: Cache-Control, Content-Language`\r\n\r\nFor 2.2.0, the CORS middleware would no longer treat this as a policy match. The server must explicitly configure policy to allow the `Content-Language` header:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\", \"Content-Language\"));\r\n```\r\n\r\nFor more information on CORS, please refer to [the documentation](https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1).","Url":"https://github.com/aspnet/Announcements/issues/313","RelatedDescription":"Open issue \"CorsMiddleware must be explicitly configured to specify all allowed headers\" (#313)"},{"Id":"345927303","IsPullRequest":false,"CreatedAt":"2018-07-30T20:44:14","Actor":"danroth27","Number":"312","RawContent":null,"Title":"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0","State":"open","Body":"As part of the 2.1.0 release, ASP.NET Core added support for build time compilation of cshtml files (Razor Views & Razor Pages). This feature is on by default and allows build time verification of the correctness of Razor files, and also faster startup performance. Additionally, MVC watches for changes to cshtml files and seamlessly updates build-time compiled views with runtime compiled views. This allows editing cshtml files and then refreshing the browser to see the changes.\r\n\r\nMVC uses the app's compilation context, details about the references and settings that were used to compile the source code (.cs) in the app, to compile views at runtime. In addition to the compilation context, MVC exposes options such as [RazorViewEngineOptions.CompilationCallback](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.compilationcallback?view=aspnetcore-2.1) and [AdditionalCompilationReferences](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.additionalcompilationreferences?view=aspnetcore-2.1) that allow configuring compilation specifically for runtime. \r\n\r\nRuntime specific customizations are unavailable at build time and consequently the two outputs could be different.\r\n\r\nTo address this inconsistency, we plan on removing APIs in MVC that change or modify runtime compilation. For 2.2.0, we're marking these APIs obsolete with the intent to remove them in 3.0.0. This is the list of affected APIs:\r\n\r\n* Properties on `Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions`\r\n    * `AdditionalCompilationReferences`\r\n    * `CompilationCallback`\r\n\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeature`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorReferenceManager`\r\n\r\nNo changes are required to your application if it does not use these APIs.\r\n\r\nApps using these APIs to add assembly references to the compilation context for runtime compilation should instead use [`ApplicationPartManager.AddApplicationPart`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.mvccoremvccorebuilderextensions.addapplicationpart) to add application parts for each assembly reference, or switch to a built-time compilation model (see [Create reusable UI using the Razor Class Library project](https://docs.microsoft.com/aspnet/core/razor-pages/ui-class)).\r\n\r\nOther scenarios blocked by the removal of these APIs and not covered by alternative MVC features should raised in the linked discussion issue.\r\n\r\nFor discussion, use https://github.com/aspnet/Mvc/issues/8177","Url":"https://github.com/aspnet/Announcements/issues/312","RelatedDescription":"Open issue \"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0\" (#312)"},{"Id":"339929062","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:26","Actor":"blowdart","Number":"311","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0 and 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in ASP.NET Core when a malformed request is terminated. An attacker who successfully exploited this vulnerability could cause a denial of service attack.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles such requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2708\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application is behind a forwarding proxy such is Internet Information Server, Azure Application Gateway or nginx you will not be affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Server.Kestrel.Core with a vulnerable version listed below and not hosted behind a forwarding proxy.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 2.0.4 <br /> 2.1.2\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8 <br /> 2.1.0, 2.1.1  | 2.0.9 <br /> 2.1.2\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1 | 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Server.Kestrel.Core` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET 2.0 & 2.1 not targeting the meta-packages\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects.\r\n\r\nThe `project.assets.json`files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.All` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.9\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) .\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Server.Kestrel.Core/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Server.Kestrel.Core`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.34 />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.1 (July 10, 2018): Added .App meta-package details.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/311","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\" (#311)"},{"Id":"339928979","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:13","Actor":"blowdart","Number":"310","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass in ASP.NET Core when the number of incorrect login attempts is not validated. An attacker who successfully exploited this vulnerability could try an infinite number of authentication attempts.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core validates the number of incorrect login attempts.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1870\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application does not use ASP.NET Core's implementation of multi-factor authentication you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Identity with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Identity | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5 <br /> 1.1.0, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5 <br /> 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 1.0.6 <br /> 1.1.6 <br /> 2.0.4 <br /> 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Identity` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET Core 1.0, 1.1 or 2.0 not targeting the metapackage.\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Identity` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Identity` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"Microsoft.AspNetCore.Identity\" : \"1.0.5\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `Microsoft.AspNetCore.Identity`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `Microsoft.AspNetCore.Identity` version 1.0.5.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Identity` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Identity \": \"1.0.6\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Identity/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Identity`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Identity` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Identity/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Identity`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Identity` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Identity` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Identity\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Martin Knafve](https://www.linkedin.com/in/martin-knafve-99187a2/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8171](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8171)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/310","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\" (#310)"},{"Id":"336797507","IsPullRequest":false,"CreatedAt":"2018-06-28T22:10:48","Actor":"natemcmaster","Number":"309","RawContent":null,"Title":"For contributors: branch name changes in ASP.NET Core repos","State":"open","Body":"Over the coming weeks, we are planning on making the following changes to most projects in https://github.com/aspnet that are used to build ASP.NET Core.\r\n\r\n* We will create a branch named \"release/2.2\". Work on this branch will be part of [ASP.NET Core 2.2](https://github.com/aspnet/Announcements/issues/307)\r\n* We will rename the \"dev\" branch to \"master\". This is part of aligning aspnet repos with the branch naming used by other Microsoft teams.\r\n* We will change the default branch to \"master\" on GitHub.\r\n* Update the product branding on \"master\" to 3.0. Work on this branch will eventually become part of [ASP.NET Core 3.0](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/)\r\n\r\nTo help us prevent too much drift between release/2.2 and master, we will enable some automation to merge all changes from release/2.2 into master (3.0).\r\n\r\n## FAQ\r\nThis change may affect the way you help contribute to ASP.NET Core. As a result of this change and dicussion within our team, we've anticipated at least two questions you may have.\r\n\r\n#### Which branch should I use for my work?\r\n<img src=\"https://user-images.githubusercontent.com/2696087/42063035-b5fc9e42-7ae4-11e8-9916-a708fcc8e0e6.png\" width=\"500\" />\r\n\r\n#### I opened my PR to the wrong branch. What should I do?\r\n \r\nYou can edit a PR’s target branch.\r\n\r\n<img width=\"700\" alt=\"one\" src=\"https://user-images.githubusercontent.com/2696087/42063074-eb3060a8-7ae4-11e8-8ec2-d569f8e07f78.png\">\r\n<img width=\"700\" alt=\"two\" src=\"https://user-images.githubusercontent.com/2696087/42063083-f8a9564a-7ae4-11e8-91f0-f57e039085f8.png\">\r\n\r\n\r\n## Questions? Comments?\r\n\r\nThis issue is locked to reduce noise on this repo. Please use https://github.com/aspnet/Home/issues/3278 for questions and comments.\r\n\r\nThanks,\r\nNate","Url":"https://github.com/aspnet/Announcements/issues/309","RelatedDescription":"Open issue \"For contributors: branch name changes in ASP.NET Core repos\" (#309)"},{"Id":"335579239","IsPullRequest":false,"CreatedAt":"2018-06-25T21:44:22","Actor":"divega","Number":"308","RawContent":null,"Title":"EF Core 2.2 Roadmap","State":"open","Body":"## EF Core 2.2 is a small release\r\n\r\nUnlike EF Core 2.1, the 2.2 release will include a small number of new features. We are concentrating most of our efforts to add new functionality on the 3.0 release. Still, you can expect 2.2 to include lots of bugs fixes, community contributions and small improvements.\r\n\r\nYou can access the list of issues currently assigned to the 2.2 milestone using [this query](https://github.com/aspnet/EntityFrameworkCore/issues?q=is%3Aopen+is%3Aissue+milestone%3A2.2.0+sort%3Areactions-%2B1-desc) on our issue tracking system.  \r\n\r\n## Schedule\r\nThe schedule of EF Core 2.2 will align with the schedule of .NET Core and ASP.NET Core 2.2. See [the ASP.NET Core 2.2 Roadmap announcement](https://github.com/aspnet/Announcements/issues/307).\r\n\r\nOur current plan is to have three previews before we ship RTM near the end of 2018:\r\n\r\n- August – Preview 1\r\n- September - Preview 2\r\n- October - Preview 3\r\n- Before end-of-year – RTM\r\n\r\n As usual, this post reflects our current plan, but things may change as we make progress. \r\n\r\n## New features\r\n\r\n### Reverse engineering of database views into query types\r\n\r\nIn EF Core 2.1 we added query types, which allow mapping .NET objects to views and tables without keys. In 2.2, we plan to leverage this new capability to automatically map existing database views to query types. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/1679.\r\n\r\n###  Support for collections of owned entities\r\n\r\nIn EF Core 2.0 we added the concept of owned entity types, which allows modeling ownership relationship that are common between entities that are part of the same document in document-oriented databases or the same aggregate if you use Domain-Driven Design concepts in your model.\r\n\r\nUntil now, we only support reference navigation properties to owned entities. In EF Core 2.2, we plan to enhance this functionality to map collection navigation properties to owned entities. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/8172.\r\n\r\n## Other work\r\n\r\nThere are some additional work items that are not strictly EF Core 2.2 features, but we still track as part of the 2.2 milestone because we are doing the work in the same timeframe:\r\n\r\n### Cosmos DB provider\r\n\r\nA lot of our efforts are going into productizing an EF Core provider for the SQL API in Cosmos DB.\r\nWe have already created a prototype, which we have shown in demos such as in this [this EF Core 2.1 talk](https://www.youtube.com/watch?v=k55kDH_ixrQ) we did at the Microsoft Build conference.\r\n\r\nDue to competing priorities, releasing a preview of this provider has taken more than what we originally planned, but we are working on it now, and the current plan is to release a stable version by the end of this calendar year.\r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/12086. \r\n\r\n### Preview of spatial support for SQL Server\r\n\r\nWe are also focusing on adding spatial support as an extension to the SQL Server provider for EF Core.\r\nNote that the PostgreSQL provider (Npgsql) already added support in EF Core 2.1. Beside implementing this functionality for SQL Server, we are working closely with the developers of Npgsql to try to achieve a consistent and hopefully improved experience across providers.\r\n\r\nNote that we aren't committing to having a final version of the spatial support for the end of the current calendar year. But we are actively working on this now, and as we make progress, we should be able to provide a more precise estimate.   \r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/1100.\r\n\r\n### Improve test coverage for LINQ and reduce query regressions in future releases\r\n\r\nIn the last few releases, we have seen that when we commit improvements to our LINQ implementation, we often break queries that were previously working. The main challenge is that LINQ defines a huge space of possible queries to test, and it is very complex to measure what level of test coverage we have, even for a specific query operator. In the 2.2 timeframe, we will be investing on improving test coverage for this huge space. We also plan to experiment with new approaches to add appropriate coverage, and to reduce the likelihood of introducing regressions in future releases.\r\n\r\nYou can track our progress on this at https://github.com/aspnet/EntityFrameworkCore/issues/12046. \r\n\r\nFor discussion on this roadmap, please use https://github.com/aspnet/EntityFrameworkCore/issues/12465. ","Url":"https://github.com/aspnet/Announcements/issues/308","RelatedDescription":"Open issue \"EF Core 2.2 Roadmap\" (#308)"},{"Id":"335571873","IsPullRequest":false,"CreatedAt":"2018-06-25T21:19:36","Actor":"glennc","Number":"307","RawContent":null,"Title":"ASP.NET Core 2.2 Roadmap","State":"open","Body":"We have grouped the ASP.NET Core 2.2 release into a few themes:\r\n\r\n- APIs & Services\r\n- Server improvements\r\n- SignalR\r\n\r\n## Rough Schedule\r\nWe are currently planning to have 3 previews before RTM:\r\n - August – Preview 1\r\n - September - Preview 2\r\n - October - Preview 3\r\n - Before End-of-year – RTM\r\n\r\nAs with our previous roadmap posts this is what we intend right now, but it's subject to change as we continue development.\r\n\r\n## APIs and Services\r\n\r\nThe 'north star' for this version is to generate better metadata about your app and use that data to make your dev experience better and more productive. This is the main focus for 2.2.\r\n\r\n### API Controller conventions\r\nIn 2.1 we added controller specific conventions that make Web API development more convenient with the [ApiController attribute](https://docs.microsoft.com/en-us/aspnet/core/web-api/index?view=aspnetcore-2.1#annotate-class-with-apicontrollerattribute). In 2.2 we want to expand on this concept to provide metadata for API Explorer and provide a better end-to-end API documentation experience.\r\n\r\nWe want to make it possible for all MVC Core applications to have a good Swagger/OpenAPI definition by default. By following common patterns, your actions will produce rich metadata without falling into 'attribute soup' where you list every possible status code that every action in your app could return. We will include a default set of conventions that match what ASP.NET Core scaffolding generations. It will also be possible to write and share your own conventions to reflect your desired contracts. \r\n\r\nWe will include a set of analyzers that will help you find cases where code that doesn't match the API Explorer metadata, and a code-fix that provides options to explicitly specify the response type metadata, create a new convention with a different pattern, or just let you write code to satisfy the convention.\r\n\r\nAs a concrete example, you could write a convention that says \"every action method that starts with 'Create' will return an HTTP 201\". If you wrote the following code, then you would receive a warning.\r\n\r\n```csharp\r\n[HttpPost(\"/orders\")]\r\npublic ActionResult<Order> CreateOrder(OrderData orderData)\r\n{\r\n    ....\r\n    return Ok(new Order() {...});\r\n}\r\n```\r\n\r\nThis code doesn't match your Swagger/OpenAPI metadata (from the convention) - which says that this action returns a 201. Once you see this, you could `ctrl + .` to add the attributes for what we do know about this method, opting out of conventions, or you could change the code.\r\n\r\nThe analyzer will also be able to 'check your work' if you are being explicit about status codes and results using the existing attributes - it does not require you to use the conventions. Details for how this will all work can be discussed here: https://github.com/aspnet/Mvc/issues/7802\r\n\r\nLet's look at a more fleshed-out out example. The following code snippet is what is required to generate a reasonable Open API document for an action method that will get an item by ID or return a 404:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    [ProducesResponseType((int)HttpStatusCode.NotFound)]\r\n    [ProducesResponseType(typeof(CatalogItem),(int)HttpStatusCode.OK)]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nIn 2.2 with the default conventions the following code should generate the same Open API document that the above code sample does, and this shipped analyzers will give you hints when you do something that doesn't match so you know to go and add attributes or change the conventions:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### OpenAPI generation\r\nWith the conventions described above it will be possible for code that uses the API Explorer to generate Open API documents to be better by default, since the code you write will either follow the conventions or have attributes allowing generators to create better documents.\r\n\r\n### Dispatcher\r\nIn 2.2 we will introduce a new routing system that will expand the set of scenarios where routing is useful – tentatively called Dispatcher. \r\n\r\nThe current routing system was designed to support MVC’s historical scenarios without much thought to how routing and the composable middleware pipeline will work together. The Dispatcher is designed to run the URL matching step very early in the pipeline so that middleware can see the Endpoint that was selected as well as metadata that is associated with that endpoint. Like existing routing, the dispatcher will branch and call the actual endpoint at the end of the pipeline.\r\n\r\nA concrete example of how this helps us is with CORS. Today there is both a CORS middleware AND a CORS feature of MVC (https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1). Because routing information is deeply integrated with MVC we can't apply CORS policies that only apply to specific controllers until after we know what controller has been selected. However, if you also want CORS policies to apply to other parts of your pipeline then you need the middleware. This has been a source of confusion for many and we can simplify it if all of the middleware pipeline can have as much information about routing as MVC does today.\r\n\r\nWe’re also using this opportunity to make improvements to the performance of routing and dispatching for MVC and other scenarios.\r\n\r\n### HTTP API REPL tooling\r\nToday there are no tools built into Visual Studio or the dotnet CLI to help you execute HTTP verbs against your API. We have a great language, debugger, and framework but they are somewhat limited when it's difficult to send a POST to my app to see what happens. In 2.2 we want to build a CLI experience for exploring HTTP APIs to imcrease your API inner loop productivity. The CLI builds on all the features we've talked about above as some of its advanced features, like listing all routes in your app, are enabled by consuming the metadata we have about your app via Open API documents. That means the CLI should be useful for executing any HTTP verb, but really shines when you feed it more data like Open API docs. We intend to start by shipping this as a standalone global tool while we explore its feature set and potential.\r\n\r\nYou can see a demo and description of this in Scott Hunter and Scott Hanselman's BUILD talk here: https://youtu.be/KAIJ3ezQb3c?t=18m\r\n\r\n### API client generation (C# & TypeScript)\r\nOnce you have an API with rich metadata and done exploring and testing it, then you need to go and write some client code to call and make use of your API. We are going to build an experience for generating this code based on the same data and documentation described above. We envision a few pieces for this story, one part is a dotnet tool that can generate code from an Open API document, the other is MSBuild SDK work to allow a `ServiceReference` to another project in a solution. That reference will cause build time client code generation to happen via the tool that can generate code. We expect this to work in a similar way to the EF Core tooling experience, where your application is built and most of your startup code executed but instead of running it we use the data we have about your code to generate a client.\r\n\r\n### Authorization Server\r\nOne of the largest gaps we’ve had has been around authorization for applications beyond a simple forms based login. We plan to fill that gap with a simple to use OpenID Connect based authorization server, which will allow your ASP.NET application to act as an authentication point for your projects, be they web site to API, SPA to API, native application to an API or, for distributed applications API to API. As we are concentrating on first party applications we can make the code you need to plumb in trivial, getting as close to zero configuration as you can,  we’re not aiming to replace the excellent third-party solutions out there which enable richer scenarios like third-party applications or which provide a flexibility in configuration and authentication flow.\r\n\r\n## Server Improvements\r\n\r\n### Health Checks\r\nThis feature is a way to trivially setup an endpoint in your application that can be used to check the health of your application, potentially taking into account things like memory consumption or database availability as well as just \"can I accept a HTTP request\".\r\n\r\n### HTTP/2 in Kestrel & HttpClient\r\nThe title says it all in this case. HTTP/2 support for all. We started this work some time ago, and have had the protocol mostly implemented for a while but not compiled into the product since it wasn't ready. This version we will finish that work and implement the missing features.\r\n\r\n### In-proc ANCM\r\nRunning ASP.NET Core applications in-process in IIS, giving a significant performance boost.\r\n\r\n## SignalR\r\n\r\n### Add Java & C++ clients\r\nAllow customers using Java or C++ to connect to SignalR servers, and the [Azure SignalR Service](https://azure.microsoft.com/en-us/blog/azure-signalr-service-a-fully-managed-service-to-add-real-time-functionality/).\r\n\r\n## Other\r\nAs with all releases there is a large tail of bug fixes, performance improvements, small features, and community PRs that we will also work on. You can see the full list of work by browsing the 2.2 milestones on the various [repositories](https://github.com/aspnet/).\r\n\r\nFor discussion on the roadmap in general, use https://github.com/aspnet/Home/issues/3265","Url":"https://github.com/aspnet/Announcements/issues/307","RelatedDescription":"Open issue \"ASP.NET Core 2.2 Roadmap\" (#307)"},{"Id":"333804954","IsPullRequest":false,"CreatedAt":"2018-06-19T19:21:13","Actor":"anurse","Number":"306","RawContent":null,"Title":"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR Client from UWP applications where the minimum version is set to \"Windows 10, version 1803\". However, these fixes also require some additional dependencies.\r\n\r\n**NOTE**: UWP Applcations with a minimum version set **below** \"Windows 10, version 1803\" (for example, if the minimum version is set to \"Fall Creators Update\") are **not** affected by this issue and **do not require** these steps.\r\n\r\nIn order to use the SignalR Client in UWP applications where the minimum version is set to \"Windows 10, version 1803\" you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Add the following **additional** package references to your project. These are referenced transitively by the SignalR Client, but newer versions are required to resolve this issue. We are planning to improve this in a future patch.\r\n    * `System.Threading.Tasks.Extensions` version `4.5.1`\r\n    * `System.Runtime.CompilerServices.Unsafe` version `4.5.1`\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/2406","Url":"https://github.com/aspnet/Announcements/issues/306","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803\" (#306)"},{"Id":"333802959","IsPullRequest":false,"CreatedAt":"2018-06-19T19:15:05","Actor":"anurse","Number":"305","RawContent":null,"Title":"SignalR Client 2.1.1 in Xamarin","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR **Client** from Xamarin. However, these fixes also require an updated build of Xamarin.iOS and Xamarin.Android, as well as some additional dependencies.\r\n\r\nIn order to use the SignalR Client in Xamarin applications you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Upgrade Xamarin to the appropriate version:\r\n    * Xamarin.Android `8.4.0.1`\r\n    * Xamarin.iOS `11.14.0.4`\r\n    * These will be included in:\r\n      * Visual Studio 15.8 **Preview 3** (not released at the time of publishing, but coming soon)\r\n      * Visual Studio for Mac 7.6 **Preview 3** (not released at the time of publishing, but coming soon)\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/1886","Url":"https://github.com/aspnet/Announcements/issues/305","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in Xamarin\" (#305)"},{"Id":"329851587","IsPullRequest":false,"CreatedAt":"2018-06-06T13:30:30","Actor":"ToLearnMoe","Number":"304","RawContent":null,"Title":"怎么找工作啊","State":"closed","Body":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n","Url":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Closed issue \"怎么找工作啊\" (#304)"},{"Id":"329603099","IsPullRequest":false,"CreatedAt":"2018-06-05T20:11:55","Actor":"AngelosP","Number":"303","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"closed","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\r\n\r\nFor discussion, use https://github.com/aspnet/Tooling/issues/1075","Url":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Closed issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303)"},{"Id":"327435771","IsPullRequest":false,"CreatedAt":"2018-05-29T18:26:40","Actor":"shirhatti","Number":"302","RawContent":null,"Title":"IIS in-process hosting moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving IIS in-process hosting out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will ship IIS in-process hosting as part of the ASP.NET Core 2.2 release.\r\n\r\n### Why?\r\n\r\nIIS in-process hosting  is a brand new server implementation and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/IISIntegration/issues/878","Url":"https://github.com/aspnet/Announcements/issues/302","RelatedDescription":"Open issue \"IIS in-process hosting moved out of ASP.NET Core 2.1\" (#302)"},{"Id":"322891671","IsPullRequest":false,"CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Number":"301","RawContent":null,"Title":"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available","State":"open","Body":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Open issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301)"},{"Id":"321270218","IsPullRequest":false,"CreatedAt":"2018-05-08T17:07:04","Actor":"blowdart","Number":"300","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2553\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_","Url":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300)"},{"Id":"320441265","IsPullRequest":false,"CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Number":"299","RawContent":null,"Title":"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/WebHooks/issues/296","Url":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Open issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299)"},{"Id":"309862672","IsPullRequest":false,"CreatedAt":"2018-03-29T18:44:48","Actor":"glennc","Number":"298","RawContent":null,"Title":"Migrating from aspnetcore docker repos to dotnet","State":"open","Body":"Starting with .NET Core 2.1-preview2, we intend to migrate from using the microsoft/aspnetcore-build and microsoft/aspnetcore Docker repos to the microsoft/dotnet Docker repo.  We will continue to ship patches and security fixes for the existing aspnetcore images but any new images for 2.1 and higher will be pushed to microsoft/dotnet.\r\n\r\nDockerfiles using `microsoft/aspnetcore:<version>` should change to `microsoft/dotnet:<version>-aspnetcore-runtime`.\r\n\r\nDockerfiles using `microsoft/aspnetcore-build` that do not require Node should just change to `microsoft/dotnet:<version>-sdk`.\r\n\r\nDockerfiles using Node from the `microsoft/aspnetcore-build` image will either need to install Node into their own image or use mult-stage builds as described in the Dockerfile examples at the end of this announcement.\r\n\r\nThe `ASPNETCORE_URLS` env var that allows ASP.NET Core apps to accept traffic from outside the container will be set in all the `dotnet` images, which was a common early stumbling block for people getting started with ASP.NET Core and Docker. PR is [here](https://github.com/dotnet/dotnet-docker/pull/450)\r\n\r\n### Why the merge?\r\n\r\nFor some time we have been seeing people search for and find the `microsoft/dotnet` images and never realise that there are aspnetcore ones. This could be problematic in the past as the dotnet images were not optimised for ASP.NET Core, making things a little harder or slower. But with changes in the way ASP.NET Core works in 2.1 it was going to be much more impactful, in that ASP.NET Core applications were not likely to run on the base dotnet image. Given that we also thought it made more sense to have a single repository for all images, as ASP.NET is just part of .NET, we are taking this opportunity to remove the potential source of confusion and wasted time for our customers.\r\n\r\n### Why no Node?\r\nThere are two main reasons for this:\r\n\r\n  1. Multi-stage build now makes it easier to pull in the Node image for purely build concerns.\r\n  2. The ASP.NET Core templates no longer have a hard dependency on Node.\r\n\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n\r\n### Dockerfile examples\r\n\r\nIf you need Node then you will need to add it in your own Dockerfile, like this:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n#setup node\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\n# copy everything else and build\r\nCOPY . ./\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n#setup node, this is only needed if you use Node both at runtime and build time. Some people may only need the build part.\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nIf you only need Node at build then you may also be able to take advantage of multi-stage build like the following:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\nFROM node as clientBuild\r\n#Do npm restore and other Node stuff.\r\n\r\n#Merge the contents of your .NET build env and your clientBuild and publish.\r\nFROM build-env as publish\r\n# copy everything else and build\r\nCOPY --from=clientBuild . .\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n\r\nCOPY --from=publish /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n","Url":"https://github.com/aspnet/Announcements/issues/298","RelatedDescription":"Open issue \"Migrating from aspnetcore docker repos to dotnet\" (#298)"},{"Id":"305936138","IsPullRequest":false,"CreatedAt":"2018-03-16T14:09:54","Actor":"mnmr","Number":"297","RawContent":null,"Title":"Model binding accesses read-only properties in post-back","State":"closed","Body":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355.","Url":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297)"},{"Id":"305310538","IsPullRequest":false,"CreatedAt":"2018-03-14T20:08:36","Actor":"halter73","Number":"296","RawContent":null,"Title":"Managed sockets will replace libuv as Kestrel's default transport","State":"open","Body":"Starting in ASP.NET Core 2.1.0, managed sockets will be replacing libuv as Kestrel's default transport.\r\n\r\nThis change should only break applications that bind to non-TCP endpoints or explicitly call `IWebHostBuilder.UseLibuv()` and reference the libuv transport transitively through the Microsoft.AspNetCore.App and/or Microsoft.AspNetCore.Server.Kestrel NuGet packages.\r\n\r\nTo fix the break simply add a reference to Microsoft.AspNetCore.All and/or Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nWhile switching to the managed socket transport should be seamless<sup>1</sup>, if you want to continue using the libuv transport in 2.1.0 you will need to explicitly call `UseLibuv()` and reference the libuv transport either directly or through the \"All\" metapackage.\r\n\r\n<sup>1</sup> Unless you are trying to bind to a Unix domain socket or use systemd socket activation. As of 2.1, only the libuv transport supports binding to these kinds of endpoints.\r\n\r\n---\r\n\r\n*Please use aspnet/KestrelHttpServer#2360 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/296","RelatedDescription":"Open issue \"Managed sockets will replace libuv as Kestrel's default transport\" (#296)"},{"Id":"304854672","IsPullRequest":false,"CreatedAt":"2018-03-13T17:07:23","Actor":"blowdart","Number":"295","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\r\n\r\n## Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core versions 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where an elevation of privilege vulnerability exists when a ASP.NET Core web application fails to validate web requests correctly.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Home/issues/2954\r\n\r\n### Mitigation factors\r\n\r\nSites are not vulnerable to this elevation of privilege when:\r\n\r\n* The site is hosted behind a proxy, such as Internet Information Services (IIS), NGINX, or Apache, where:\r\n\r\n  * The proxy validates the host header, and\r\n  * The proxy is configured to listen on fully qualified domain names or\r\n  * The proxy is configured with a wildcard subdomain where the root domain is fully controlled by the site owner.\r\n\r\nFor example, if IIS is configured to respond to requests for `contoso.com` or `*.contoso.com` hosts, the application is protected.\r\n\r\nIf IIS is configured to respond to any request from any host, the application is vulnerable.\r\n\r\nKestrel does not have the capability to validate host headers and is vulnerable if not placed behind a proxy that performs the host header validation.\r\n\r\nApps hosted in Azure Web Apps are not susceptible to this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core hosted application which is directly exposed to the internet, or hosted behind a proxy which does not validate or restict host headers to known good values.\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.HttpOverrides | 2.0.0, 2.0.1 |  2.0.2 and later\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1 |  2.0.2 and later\r\n\r\n*No patches are available for ASP.NET Core 1.0.x or ASP.NET Core 1.1.x. Microsoft requires that you place your 1.x ASP.NET Core application behind a proxy.\r\nYou must address the configuration of your proxy to protect your application. If you're not running ASP.NET Core 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0.\r\nand add the host validating middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/.*\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected?\r\n\r\nReview the server and proxy configuration [instructions](#configuration) below to see if your system is configured correctly, and adjust the configuration if necessary.\r\n\r\n### How do I fix the issue?\r\n\r\nYou must address the [configuration](#configuration) of your server or proxy to protect your application to limit requests to known hosts.\r\n\r\nIf you're not running Kestrel 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0 and follow the 2.0 instructions below.\r\n\r\nASP.NET Core 2.0.x applications must [update your code](#app-update) to fully protect your application.\r\n\r\n#### <a name=\"configuration\"></a> Server and Proxy configuration\r\n\r\nYou must examine your externally facing server or proxy configuration and ensure it requires host headers with fully qualified domain names, or known sub-domains if you are using sub-domain wild cards.\r\n\r\n##### ASP.NET Core applications behind [IIS](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/)\r\n\r\nTo configure IIS to only respond to know hosts:\r\n\r\n* Open IIS Manager.\r\n* Expand the **Sites** node for the machine you want to configure.\r\n* Select the site by clicking on the site.\r\n* In the **Actions** list on the right-hand side of IIS Manager, click **Bindings**.\r\n* Edit any bindings that do not have a host name to specify one. Do not use a `*` wildcard unless it's against a domain under your control. For example, `*.contoso.com` is safe, `*.com` is not.\r\n\r\n##### ASP.NET Core applications running publicly on [Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel)\r\n\r\nKestrel does not have the capability to validate host headers. It must either be placed behind a proxy that performs the host header validation or the validation must be performed within the application by adding  host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/. You must also [update your dependencies](#app-update) to fully protect your application.\r\n\r\n##### ASP.NET Core applications running on [HTTP.SYS](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys)\r\n\r\nTo configure URL prefixes and ports, you can use the `UseUrls` extension method, the `urls` command-line argument, the ASPNETCORE_URLS environment variable, or the `UrlPrefixes` property on [HttpSysOptions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.httpsys.httpsysoptions). The following code example uses `UrlPrefixes`.\r\n\r\n```c#\r\npublic static IWebHost BuildWebHost(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n        .UseStartup<Startup>()\r\n        .UseHttpSys(options =>\r\n        {\r\n            // The following options are set to default values.\r\n            options.Authentication.Schemes = AuthenticationSchemes.None;\r\n            options.Authentication.AllowAnonymous = true;\r\n            options.MaxConnections = null;\r\n            options.MaxRequestBodySize = 30000000;\r\n            options.UrlPrefixes.Add(\"http://localhost:5000\");\r\n        })\r\n        .Build();\r\n```\r\n\r\n##### ASP.NET Core applications behind [NGINX](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx)\r\n\r\nTo configure NGINX as a reverse proxy to forward requests to your ASP.NET Core app, replace the contents */etc/nginx/sites-available/default* with the following:\r\n\r\n```NGINX\r\nserver {\r\n    listen        80;\r\n    server_name   example.com *.example.com;\r\n    location / {\r\n        proxy_pass         http://localhost:5000;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header   Upgrade $http_upgrade;\r\n        proxy_set_header   Connection keep-alive;\r\n        proxy_set_header   Host $host;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n}\r\n```\r\n\r\nNote that with NGINX, when there is no match for `server_name`, NGINX will pick the default server. If no default server has been defined, the first server in the conf file is the default server. Best practice is to add a specific default server which returns a status code of 444 in the conf file. An example default server configuration would be as follows:\r\n\r\n```NGINX\r\nserver {\r\n    listen   80 default_server;\r\n    # listen [::]:80 default_server deferred;\r\n    return   444;\r\n}\r\n```\r\n\r\nWith the preceding configuration file and default server, NGINX accepts public traffic on port 80 with host header `example.com` or `*.example.com`. Requests not matching these hosts won't get forwarded to Kestrel. NGINX forwards the matching requests to Kestrel at `http://localhost:5000`. See [How nginx processes a request](https://nginx.org/docs/http/request_processing.html) for more information.\r\n\r\nOnce the NGINX configuration is established, run `sudo nginx -t` to verify the syntax of the configuration files. If the configuration file test is successful, force NGINX to pick up the changes by running `sudo nginx -s reload`.\r\n\r\n##### ASP.NET Core applications behind [Apache](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache)\r\n\r\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the `*.conf*` extension:\r\n\r\n* Is processed in alphabetical order, and\r\n* The module configuration files in `/etc/httpd/conf.modules.d/` are processed. The module configuration files in `/etc/httpd/conf.modules.d/` contain any configuration files necessary to load modules.\r\n\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyPass / http://127.0.0.1:5000/\r\n    ProxyPassReverse / http://127.0.0.1:5000/\r\n    ServerName www.example.com\r\n    ServerAlias *.example.com\r\n</VirtualHost>\r\n```\r\n\r\nThe `VirtualHost` block can appear multiple times, in one or more files on a server. In the preceding configuration file, Apache accepts public traffic on port 80. The domain `www.example.com` is being served, and the `*.example.com` alias resolves to the same website. See [Name-based virtual host support](https://httpd.apache.org/docs/current/vhosts/name-based.html) for more information. Requests are proxied at the root to port 5000 of the server at 127.0.0.1. For bi-directional communication, `ProxyPass` and `ProxyPassReverse` are required.\r\n\r\nSave the file and test the configuration. If everything passes, the response is `Syntax [OK]`.\r\n\r\n```bash\r\nsudo service httpd configtest\r\n```\r\n\r\nRestart Apache:\r\n\r\n```bash\r\nsudo systemctl restart httpd\r\nsudo systemctl enable httpd\r\n```\r\n\r\n\r\n#### <a name=\"app-update\"></a> ASP.NET Core 2.0 application code updates\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.6 or later.\r\n* Updating will pull in the fixed packages listed above.\r\n\r\nIf you're targeting .NET Framework, update the packages listed above to their safe version or later.\r\n\r\nIf your application is using Kestrel without a proxy or the HttpOverrides functionality (UseForwardedHeaders with ForwardedHost) you must also add the host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/tree/release/2.0/samples/HostFilteringSample/.\r\n\r\n---\r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. You must follow the update instructions below to address both types of dependency.\r\n\r\n### Direct dependencies\r\n\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on `Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file.\r\n\r\n### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Core\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the vulnerable metapackage, as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.5.\r\n\r\nTo update the version to the secure package, change the version number to a secure package version. In this example, update `Microsoft.AspNetCore.All` to 2.0.6 or later. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Framework\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a reference to a single package, as seen by the `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.HttpOverrides` version 2.0.1.\r\n\r\nTo update to the secure package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.HttpOverrides` to 2.0.2 and later. Save the *csproj* file. The updated and secure *csproj* look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependency version.\r\n\r\n##### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to a compatible version. \r\n\r\nFor example if your project refers directly to `Microsoft.AspNetCore.Mvc.Cors` with a version number of `2.0.0`, when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your *project.json* in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n###### Reviewing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review the *project.assets.json* file.\r\n\r\n###### Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names above and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example, the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n###### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file. Visual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the vulnerable versions table above.\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your *project.assets.json* file includes references to any of the vulnerable packages shown above, then you need to fix the transitive dependencies.\r\n\r\n###### Overriding transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages this means:\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned, you must add a direct dependency to the updated version by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referring the fixed version.\r\nFor example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.HttpOverrides` version 2.0.0 you would add a reference to the fixed version, that is, 2.0.2 or later.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverride\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n###### Rebuilding your application\r\n\r\nRebuild your application. Test and deploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0787)\r\n\r\n### Revisions\r\n\r\nV1.1 (Mar 15, 2018): NGINX configuration instructions updated, thanks to @buglloc\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-03-15_","Url":"https://github.com/aspnet/Announcements/issues/295","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\" (#295)"},{"Id":"304853568","IsPullRequest":false,"CreatedAt":"2018-03-13T17:04:23","Actor":"blowdart","Number":"294","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_","Url":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294)"},{"Id":"303604146","IsPullRequest":false,"CreatedAt":"2018-03-08T19:36:01","Actor":"natemcmaster","Number":"293","RawContent":null,"Title":"Moving official daily builds to the dotnet-core MyGet feed ","State":"open","Body":"As part of ongoing infrastructural changes, we will be moving official daily of ASP.NET Core to the dotnet-core myget feed. This transition will happen over the next few weeks.\r\n\r\n**Old feed:** https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\n**New feed:** https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\nWe recommend updating to use the dotnet-core feed to continue getting the latest daily builds of ASP.NET Core.\r\n\r\nWe are making this change to make it easier for you to pull daily builds that align with the .NET Core CLI and .NET Core runtime. Some of our existing MyGet feeds will continue to exist, but will not be used for official daily builds. Instead, those feeds will only be used for builds of experimental branches of aspnetcore.\r\n\r\nOther useful links:\r\nGallery: https://dotnet.myget.org/gallery/dotnet-core\r\nNuGet v2 source: https://dotnet.myget.org/F/dotnet-core/api/v2\r\nNPM feed: https://dotnet.myget.org/F/dotnet-core/npm/\r\n\r\nPlease use https://github.com/aspnet/Home/issues/2937 for discussion.","Url":"https://github.com/aspnet/Announcements/issues/293","RelatedDescription":"Open issue \"Moving official daily builds to the dotnet-core MyGet feed \" (#293)"}],"ResultType":"GitHubIssue"},"Announcements":{"Issues":[{"Id":"368897417","IsPullRequest":false,"CreatedAt":"2018-10-10T23:45:50","Actor":"BrennanConroy","Number":"322","RawContent":null,"Title":"React to StackExchange.Redis v2.0","State":"open","Body":"We are introducing two new packages to use [StackExchange.Redis](https://www.nuget.org/packages/StackExchange.Redis/) 2.0 with ASP.NET Core Caching and SignalR. We are also introducing support for using Redis to store DataProtection key material using StackExchange.Redis 2.0.\r\n\r\nFor ASP.NET Core 2.2 we will continue to ship our existing packages which use StackExchange.Redis 1.0, to preserve compatibility for existing users. However, we suggest you update to the new package as soon as possible. These packages are now considered deprecated and will be removed in ASP.NET Core 3.0.\r\n\r\n### Caching ###\r\nWe are releasing a new package \"Microsoft.Extensions.Caching.StackExchangeRedis\" which will depend on StackExchange.Redis 2.0. \"Microsoft.Extensions.Caching.Redis\" will continue to ship in ASP.NET Core 2.2 with the StackExchange.Redis 1.0 dependency and will be removed in 3.0.\r\n\r\nTo use the new package, remove your dependency on [Microsoft.Extensions.Caching.Redis](https://www.nuget.org/packages/Microsoft.Extensions.Caching.Redis) (if present), and add a dependency to \"Microsoft.Extensions.Caching.StackExchangeRedis\". Next, change your `AddDistributedRedisCache` invocation in `ConfigureServices` to `AddStackExchangeRedisCache`. No further changes should be necessary.\r\n\r\n### DataProtection ###\r\nThe \"Microsoft.AspNetCore.DataProtection.Redis\" package is new in ASP.NET Core 2.2 and depends on StackExchange.Redis 1.0 in Preview 2. In Preview 3, this package has been renamed to \"Microsoft.AspNetCore.DataProtection.StackExchangeRedis\" and has been updated to use StackExchange.Redis 2.0.\r\n\r\nTo use the new package, remove your dependency on [Microsoft.AspNetCore.DataProtection.Redis](https://www.nuget.org/packages/Microsoft.AspNetCore.DataProtection.Redis) (if present), and add a dependency to \"Microsoft.AspNetCore.DataProtection.StackExchangeRedis\". Next, change your `PersistKeysToRedis` invocation in `ConfigureServices` to `PersistKeysToStackExchangeRedis`. No further changes should be necessary.\r\n\r\n### SignalR ###\r\nWe are releasing a new package \"Microsoft.AspNetCore.SignalR.StackExchangeRedis\" which will depend on StackExchange.Redis 2.0. \"Microsoft.AspNetCore.SignalR.Redis\" will continue to ship in ASP.NET Core 2.2 with the StackExchange.Redis 1.0 dependency and will be removed in 3.0.\r\n\r\nTo use the new package, remove your dependency on [Microsoft.AspNetCore.SignalR.Redis](https://www.nuget.org/packages/Microsoft.AspNetCore.SignalR.Redis) (if present), and add a dependency to \"Microsoft.AspNetCore.SignalR.StackExchangeRedis\". Next, change your `AddRedis` invocation in `ConfigureServices` to `AddStackExchangeRedis`. No further changes should be necessary.\r\n\r\n---\r\nFor questions or further discussions about the changes, please use https://github.com/aspnet/AspNetCore/issues/3606.","Url":"https://github.com/aspnet/Announcements/issues/322","RelatedDescription":"Open issue \"React to StackExchange.Redis v2.0\" (#322)"},{"Id":"368431099","IsPullRequest":false,"CreatedAt":"2018-10-09T23:00:09","Actor":"mikaelm12","Number":"321","RawContent":null,"Title":"SignalR Java Client Package Name Change","State":"open","Body":"_Please use [this issue](https://github.com/aspnet/SignalR/issues/3105) for discussion._\r\n\r\nThe SignalR java client which is currently in preview, was previously under the package name `com.microsoft.aspnet.signalr`. This was the case for the first and second previews of the Java client. Starting in preview 3 the package name will change to `com.microsoft.signalr`. This means that our groupid through maven central will change and that consuming the package through maven or gradle will be slightly different. \r\n\r\nHere's what bringing in the Java client after preview 3 releases without the actual build numbers should look similar to\r\n```xml\r\n<dependency>\r\n  <groupId>com.microsoft.signalr</groupId>\r\n  <artifactId>signalr</artifactId>\r\n  <version>PREVIEW 3 VERSION NUMBER</version>\r\n</dependency>\r\n```\r\n\r\n```gradle\r\nimplementation 'com.microsoft.signalr:signalr:PREVIEW 3 VERSION NUMBER'\r\n```","Url":"https://github.com/aspnet/Announcements/issues/321","RelatedDescription":"Open issue \"SignalR Java Client Package Name Change\" (#321)"},{"Id":"367932540","IsPullRequest":false,"CreatedAt":"2018-10-08T20:00:47","Actor":"natemcmaster","Number":"320","RawContent":null,"Title":"For contributors: unifying to fewer GitHub repos","State":"open","Body":"_Please use [this issue](https://github.com/aspnet/Home/issues/3598) for discussion._\r\n\r\nOver the next few months, we will reduce the number of repos in active development in the @aspnet organization by merging them together. We plan to condense about 53 repos into 5. Repos which merge with another will be archived on GitHub, which makes them read-only. We will also rename a few repositories. GitHub will automatically redirect URLs to issues and commits on renamed repositories. We will update the README and repo descriptions to help you navigate from archived repos to the new repo.\r\n\r\nAfter the merging is complete, the final set of repos will be as follows:\r\n\r\nRepo                            | Primary purpose\r\n--------------------------------|-----------------------------------------------\r\naspnet/AspNetCore               | ASP.NET Core runtime\r\naspnet/Extensions               | Microsoft.Extensions.* APIs\r\naspnet/EntityFrameworkCore      | Entity Framework Core\r\naspnet/Tooling                  | Visual Studio extensions, command-line tools, and MSBuild SDKs\r\naspnet/AspLabs                  | Experiments not ready for production releases\r\n\r\nTo preserve as much history as possible, we will rename aspnet/Home to aspnet/AspNetCore, and aspnet/Common to aspnet/Extensions instead of creating new repos. We will preserve commit history by merging unrelated histories into the unified repos. We will also review open issues and move them when necessary to keep them aligned with the relevant code.\r\n\r\n### Motivation\r\n\r\nOur primary motivation is simplifying both our engineering systems and our GitHub interactions with all of you. We know there are some drawbacks to working in larger repos, but we find the benefits compelling enough to move forward with this change. The new set of repos more closely aligns with the layering of the products they ship.\r\n\r\n### Timeframe\r\n\r\nWe'll be starting the first round of changes soon. We expect the entire unification effort will take us several weeks. We'll migrate repositories in phases and adjust the plan along the way, as necessary.\r\n\r\n### Archived repos\r\n\r\nThe following repos will be merged into the main repos above. They will not be used any more for active development on 2.1 LTS and new releases. The source code for the projects will move to the new project with any issues we intend to keep working on. Remaining issues and pull requests will be closed. We do not plan to delete the repos or remove tagged commits, but the projects will become read-only.\r\n\r\n* AADIntegration           \r\n* Antiforgery              \r\n* AuthSamples              \r\n* AzureIntegration         \r\n* BasicMiddleware          \r\n* BrowserLink              \r\n* Caching                  \r\n* Common                   \r\n* Configuration            \r\n* CORS                     \r\n* DataProtection           \r\n* DependencyInjection      \r\n* Diagnostics              \r\n* DotNetTools              \r\n* EventNotification        \r\n* FileSystem               \r\n* Hosting                  \r\n* HtmlAbstractions         \r\n* HttpAbstractions         \r\n* HttpClientFactory        \r\n* HttpSysServer            \r\n* Identity                 \r\n* IISIntegration           \r\n* JavaScriptServices       \r\n* JsonPatch                \r\n* KestrelHttpServer        \r\n* Localization             \r\n* Logging                  \r\n* MetaPackages             \r\n* Microsoft.Data.Sqlite    \r\n* MusicStore               \r\n* Mvc                      \r\n* MvcPrecompilation        \r\n* Options                  \r\n* Proxy                    \r\n* Razor                    \r\n* ResponseCaching          \r\n* Routing                  \r\n* Scaffolding              \r\n* Security                 \r\n* ServerTests              \r\n* Session                  \r\n* SignalR                  \r\n* StaticFiles              \r\n* Templating               \r\n* Testing                  \r\n* Universe                 \r\n* WebHooks                 \r\n* WebSockets\r\n\r\n\r\n_Please use https://github.com/aspnet/Home/issues/3598 for discussion._  ","Url":"https://github.com/aspnet/Announcements/issues/320","RelatedDescription":"Open issue \"For contributors: unifying to fewer GitHub repos\" (#320)"},{"Id":"367922912","IsPullRequest":false,"CreatedAt":"2018-10-08T19:29:02","Actor":"pranavkm","Number":"319","RawContent":null,"Title":"3.0 - Removing Microsoft.AspNetCore.Mvc.WebApiCompatShim","State":"open","Body":"The Microsoft.AspNetCore.Mvc.WebApiCompatShim (WebApiCompatShim) package provides partial compatibility in ASP.NET Core with ASP.NET Web API 2 to simplify migrating existing Web API implementations to ASP.NET Core. However, apps using the WebApiCompatShim do not benefit from the API related features shipping in recent ASP.NET Core releases, such as improved Open API Spec genertaion, standardized error handling, and client code generation. To better focus our API efforts in 3.0, we plan to remove WebApiCompatShim. We recommend that existing applications using the WebApiCompatShim migrate to the newer `[ApiController]` model.\r\n\r\nFor questions or further discussions, please use https://github.com/aspnet/Mvc/issues/8570.","Url":"https://github.com/aspnet/Announcements/issues/319","RelatedDescription":"Open issue \"3.0 - Removing Microsoft.AspNetCore.Mvc.WebApiCompatShim\" (#319)"},{"Id":"365011293","IsPullRequest":false,"CreatedAt":"2018-09-28T19:23:51","Actor":"blowdart","Number":"318","RawContent":null,"Title":"Microsoft Security Advisory: iOS12 breaks social, WSFed and OIDC logins","State":"open","Body":"# Microsoft Security Advisory:  iOS12 breaks social, WSFed and OIDC logins\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about an incompatibly between iOS12 and some types of authentication. This advisory also provides guidance on what developers can do to remove current security restrictions added by ASP.NET to their applications to become compatible with iOS12.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1984 for ASP.NET Core Identity\r\nDiscussion for this issue can be found at https://github.com/aspnet/Security/issues/1864 for ASP.NET Core Cookie Authentication\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>What has changed\r\n\r\nThe recent iOS12 update has changed Safari's handling of [SameSite](https://tools.ietf.org/html/rfc6265) cookies. The SameSite attribute allows a developer to control when cookies are sent to a web site, enabling the flow to only occur when requests are from the same site. This standard was introduced to reduce exposure to Cross Site Request Forgery (CSRF) attacks. By default ASP.NET Core 2.0 and later protects its authentication cookies using the SameSite property. The change on Apple's part is not limited to ASP.NET Core applications, it is affecting multiple frameworks and authentication software which relay on HTTP forms in a browser, for example authenticating to a third party via Facebook, Twitter or browser based Open ID Connect (OIDC) mechanism.\r\n\r\nApple have stated they believe [their change is correct behavior](https://bugs.webkit.org/show_bug.cgi?id=188165), and that the fault lies in every other browser's implementation.\r\n\r\nWhile we take no stance on the correctness of browser behavior we feel that removing the SameSite protections would expose our customers, and their customers to a wider risk, as it would remove the protection provided everywhere, for all users, in any browser.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf your users can no longer login to your web application on iOS12 using Safari then you are affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix this?\r\n\r\nDevelopers can allow iOS12 Safari users to log into their applications by turn off SameSite protection in `ConfigureServices()`.\r\n\r\nIf you are using ASP.NET Core Identity you disable the protection by configuring cookies with the following code\r\n\r\n```c#\r\nservices.ConfigureExternalCookie(options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = SameSiteMode.None;\r\n});\r\nservices.ConfigureApplicationCookie(options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = SameSiteMode.None;\r\n});\r\n```\r\n\r\nIf you are using cookie authentication without ASP.NET Core identity you can turn off the protection with the following code\r\n\r\n```c#\r\nservices.AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = Microsoft.AspNetCore.Http.SameSiteMode.None;\r\n})\r\n```\r\n\r\nIf you are using external OIDC providers you may be able to avoid the issue by changing the response mode your provider uses from a POST to a GET request, using the following code. Not all providers may support this.\r\n\r\n```c#\r\n.AddOpenIdConnect(\"myOIDProvider\", options => {\r\n    // Other options\r\n    options.ResponseType = \"code\";\r\n    options.ResponseMode = \"query\";\r\n};\r\n```\r\n\r\n_Note that in making these changes protection is removed for all users and all browsers. You should ensure that all your actions that make state changes are protected with [CSRF anti-forgery mechanisms](https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery) built into ASP.NET Core.\r\n\r\n#### Rebuilding your application\r\n\r\nAfter making these configuration changes you rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[Bug 188165 - iOS 12 Safari breaks ASP.NET Core 2.1 OIDC authentication](https://bugs.webkit.org/show_bug.cgi?id=188165)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 28, 2018): Advisory published.\r\n","Url":"https://github.com/aspnet/Announcements/issues/318","RelatedDescription":"Open issue \"Microsoft Security Advisory: iOS12 breaks social, WSFed and OIDC logins\" (#318)"},{"Id":"361087870","IsPullRequest":false,"CreatedAt":"2018-09-18T00:05:36","Actor":"halter73","Number":"317","RawContent":null,"Title":"Kestrel Connection Adapter Logging Namespace Changes","State":"open","Body":"The logging namespaces for Kestrel's HttpsConnectionAdapter and LoggingConnectionAdapter are changing in 2.2.0.\r\n\r\n1. The `HttpsConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter`.\r\n2. The `LoggingConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.LoggingConnectionAdapter`.\r\n\r\nHere's an example HttpsConnectionAdapter log prior to the change:\r\n\r\n```\r\ndbug: HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```\r\n\r\nAnd after:\r\n\r\n```\r\ndbug: Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```","Url":"https://github.com/aspnet/Announcements/issues/317","RelatedDescription":"Open issue \"Kestrel Connection Adapter Logging Namespace Changes\" (#317)"},{"Id":"359136062","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:10","Actor":"blowdart","Number":"316","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when ASP.NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an ASP.NET Core web application. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing a specially crafted web requests to the ASP.NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles parsing web requests.\r\n\r\nThe underlying problem exists in the `System.IO.Pipelines` package. If you have other software which uses this package please follow the instructions in the [.NET Core bulletin](https://github.com/dotnet/announcements/issues/83).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2914\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses either of the packages with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nASP.NET Core 2.1 is distributed as part of the .NET Core runtime. To check the current installed runtimes open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed you will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf the highest .NET Core SDK version is less that 2.1.402 or the highest `Microsoft.AspNetCore.App` runtime version is less that 2.1.4 you are vulnerable to this issue. You may not see any SDK versions if you have only installed the runtime.\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.402 on your development machines and build servers, and the .NET Core Runtime 2.1.4 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n#### Applications not using Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/aspnet/Announcements/issues/316","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\" (#316)"},{"Id":"353145143","IsPullRequest":false,"CreatedAt":"2018-08-22T22:11:39","Actor":"pranavkm","Number":"315","RawContent":null,"Title":"3.0: Deprecating MvcPrecompilation tool ","State":"open","Body":"In ASP.NET Core 1.1, we introduced the `Microsoft.AspNetCore.Mvc.Razor.ViewCompilation` (MVC precompilation tool) package that added support for publish time compilation of Razor files (.cshtml files). Starting in ASP.NET Core 2.1, we introduced the [Razor SDK](https://docs.microsoft.com/en-us/aspnet/core/razor-pages/sdk?view=aspnetcore-2.1) that expanded on the features of the precompilation tool by adding support for build and publish time of Razor files. The SDK allows for verifying the correctness of cshtml files at build time while also improving on startup time for applications. The Razor SDK is on by default and no gesture is required to start using it.\r\n\r\nIn 3.0, we plan to remove the earlier MVC precompilation tool. Earlier versions of the package will continue receiving important bug and security fixes as part of our patch release. \r\n\r\nFor users of ASP.NET Core 2.1 or later, we recommend migrating to the Razor SDK if you haven't already. If you're currently using the precompilation tool and are unable to migrate to the Razor SDK due to bugs or missing features, please file an issue at https://github.com/aspnet/Razor/issues.\r\n\r\nPlease use https://github.com/aspnet/Mvc/issues/8313 for discussions.","Url":"https://github.com/aspnet/Announcements/issues/315","RelatedDescription":"Open issue \"3.0: Deprecating MvcPrecompilation tool \" (#315)"},{"Id":"349340221","IsPullRequest":false,"CreatedAt":"2018-08-10T00:56:39","Actor":"natemcmaster","Number":"314","RawContent":null,"Title":"3.0: deprecating Microsoft.AspNetCore.All","State":"open","Body":"Earlier this year, we announced the Microsoft.AspNetCore.App metapackage (see https://github.com/aspnet/Announcements/issues/287). That announcement said:\r\n\r\n> The existing Microsoft.AspNetCore.All meta-package will continue to be made available throughout the 2.x lifecycle, but **we recommend customers move to the new Microsoft.AspNetCore.App meta-package** and then add individual references to any of the removed packages if their app requires it.\r\n\r\nSee [our documentation for details](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage?view=aspnetcore-2.1#migrating-from-microsoftaspnetcoreall-to-microsoftaspnetcoreapp) on how to migrate from Microsoft.AspNetCore.All to .App.\r\n\r\nWe have begun working on ASP.NET Core 3.0, and as a part of that, we will stop producing the Microsoft.AspNetCore.All metapackage and the matching Microsoft.AspNetCore.All shared framework in the 3.0 nightly builds.\r\n\r\nThis package will still be available in ASP.NET Core 2.2 and will continue to receive servicing updates in ASP.NET Core 2.1.\r\n\r\nPlease use https://github.com/aspnet/Home/issues/3418 for questions or comments.\r\n","Url":"https://github.com/aspnet/Announcements/issues/314","RelatedDescription":"Open issue \"3.0: deprecating Microsoft.AspNetCore.All\" (#314)"},{"Id":"346800428","IsPullRequest":false,"CreatedAt":"2018-08-01T23:00:38","Actor":"pranavkm","Number":"313","RawContent":null,"Title":"CorsMiddleware must be explicitly configured to specify all allowed headers","State":"open","Body":"In versions of ASP.NET Core 2.1.0 and earlier, the CorsMiddleware always allowed certain headers in the `Access-Control-Request-Headers` to be sent regardless of the values configured in `CorsPolicy.Headers`. This list of headers includes:\r\n\r\n* `Accept`\r\n* `Accept-Language`\r\n* `Content-Language`\r\n* `Origin`\r\n\r\nFor instance, consider an application configured as follows:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\"));\r\n```\r\n\r\nIn 2.1 and earlier, the CORS middleware would respond successfully to a preflight request with the following request header:\r\n\r\n`Access-Control-Request-Headers: Cache-Control, Content-Language`\r\n\r\nFor 2.2.0, the CORS middleware would no longer treat this as a policy match. The server must explicitly configure policy to allow the `Content-Language` header:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\", \"Content-Language\"));\r\n```\r\n\r\nFor more information on CORS, please refer to [the documentation](https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1).","Url":"https://github.com/aspnet/Announcements/issues/313","RelatedDescription":"Open issue \"CorsMiddleware must be explicitly configured to specify all allowed headers\" (#313)"},{"Id":"345927303","IsPullRequest":false,"CreatedAt":"2018-07-30T20:44:14","Actor":"danroth27","Number":"312","RawContent":null,"Title":"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0","State":"open","Body":"As part of the 2.1.0 release, ASP.NET Core added support for build time compilation of cshtml files (Razor Views & Razor Pages). This feature is on by default and allows build time verification of the correctness of Razor files, and also faster startup performance. Additionally, MVC watches for changes to cshtml files and seamlessly updates build-time compiled views with runtime compiled views. This allows editing cshtml files and then refreshing the browser to see the changes.\r\n\r\nMVC uses the app's compilation context, details about the references and settings that were used to compile the source code (.cs) in the app, to compile views at runtime. In addition to the compilation context, MVC exposes options such as [RazorViewEngineOptions.CompilationCallback](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.compilationcallback?view=aspnetcore-2.1) and [AdditionalCompilationReferences](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.additionalcompilationreferences?view=aspnetcore-2.1) that allow configuring compilation specifically for runtime. \r\n\r\nRuntime specific customizations are unavailable at build time and consequently the two outputs could be different.\r\n\r\nTo address this inconsistency, we plan on removing APIs in MVC that change or modify runtime compilation. For 2.2.0, we're marking these APIs obsolete with the intent to remove them in 3.0.0. This is the list of affected APIs:\r\n\r\n* Properties on `Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions`\r\n    * `AdditionalCompilationReferences`\r\n    * `CompilationCallback`\r\n\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeature`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorReferenceManager`\r\n\r\nNo changes are required to your application if it does not use these APIs.\r\n\r\nApps using these APIs to add assembly references to the compilation context for runtime compilation should instead use [`ApplicationPartManager.AddApplicationPart`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.mvccoremvccorebuilderextensions.addapplicationpart) to add application parts for each assembly reference, or switch to a built-time compilation model (see [Create reusable UI using the Razor Class Library project](https://docs.microsoft.com/aspnet/core/razor-pages/ui-class)).\r\n\r\nOther scenarios blocked by the removal of these APIs and not covered by alternative MVC features should raised in the linked discussion issue.\r\n\r\nFor discussion, use https://github.com/aspnet/Mvc/issues/8177","Url":"https://github.com/aspnet/Announcements/issues/312","RelatedDescription":"Open issue \"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0\" (#312)"},{"Id":"339929062","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:26","Actor":"blowdart","Number":"311","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0 and 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in ASP.NET Core when a malformed request is terminated. An attacker who successfully exploited this vulnerability could cause a denial of service attack.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles such requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2708\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application is behind a forwarding proxy such is Internet Information Server, Azure Application Gateway or nginx you will not be affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Server.Kestrel.Core with a vulnerable version listed below and not hosted behind a forwarding proxy.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 2.0.4 <br /> 2.1.2\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8 <br /> 2.1.0, 2.1.1  | 2.0.9 <br /> 2.1.2\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1 | 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Server.Kestrel.Core` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET 2.0 & 2.1 not targeting the meta-packages\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects.\r\n\r\nThe `project.assets.json`files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.All` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.9\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) .\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Server.Kestrel.Core/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Server.Kestrel.Core`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.34 />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.1 (July 10, 2018): Added .App meta-package details.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/311","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\" (#311)"},{"Id":"339928979","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:13","Actor":"blowdart","Number":"310","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass in ASP.NET Core when the number of incorrect login attempts is not validated. An attacker who successfully exploited this vulnerability could try an infinite number of authentication attempts.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core validates the number of incorrect login attempts.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1870\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application does not use ASP.NET Core's implementation of multi-factor authentication you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Identity with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Identity | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5 <br /> 1.1.0, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5 <br /> 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 1.0.6 <br /> 1.1.6 <br /> 2.0.4 <br /> 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Identity` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET Core 1.0, 1.1 or 2.0 not targeting the metapackage.\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Identity` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Identity` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"Microsoft.AspNetCore.Identity\" : \"1.0.5\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `Microsoft.AspNetCore.Identity`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `Microsoft.AspNetCore.Identity` version 1.0.5.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Identity` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Identity \": \"1.0.6\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Identity/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Identity`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Identity` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Identity/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Identity`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Identity` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Identity` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Identity\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Martin Knafve](https://www.linkedin.com/in/martin-knafve-99187a2/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8171](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8171)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/310","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\" (#310)"},{"Id":"336797507","IsPullRequest":false,"CreatedAt":"2018-06-28T22:10:48","Actor":"natemcmaster","Number":"309","RawContent":null,"Title":"For contributors: branch name changes in ASP.NET Core repos","State":"open","Body":"Over the coming weeks, we are planning on making the following changes to most projects in https://github.com/aspnet that are used to build ASP.NET Core.\r\n\r\n* We will create a branch named \"release/2.2\". Work on this branch will be part of [ASP.NET Core 2.2](https://github.com/aspnet/Announcements/issues/307)\r\n* We will rename the \"dev\" branch to \"master\". This is part of aligning aspnet repos with the branch naming used by other Microsoft teams.\r\n* We will change the default branch to \"master\" on GitHub.\r\n* Update the product branding on \"master\" to 3.0. Work on this branch will eventually become part of [ASP.NET Core 3.0](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/)\r\n\r\nTo help us prevent too much drift between release/2.2 and master, we will enable some automation to merge all changes from release/2.2 into master (3.0).\r\n\r\n## FAQ\r\nThis change may affect the way you help contribute to ASP.NET Core. As a result of this change and dicussion within our team, we've anticipated at least two questions you may have.\r\n\r\n#### Which branch should I use for my work?\r\n<img src=\"https://user-images.githubusercontent.com/2696087/42063035-b5fc9e42-7ae4-11e8-9916-a708fcc8e0e6.png\" width=\"500\" />\r\n\r\n#### I opened my PR to the wrong branch. What should I do?\r\n \r\nYou can edit a PR’s target branch.\r\n\r\n<img width=\"700\" alt=\"one\" src=\"https://user-images.githubusercontent.com/2696087/42063074-eb3060a8-7ae4-11e8-8ec2-d569f8e07f78.png\">\r\n<img width=\"700\" alt=\"two\" src=\"https://user-images.githubusercontent.com/2696087/42063083-f8a9564a-7ae4-11e8-91f0-f57e039085f8.png\">\r\n\r\n\r\n## Questions? Comments?\r\n\r\nThis issue is locked to reduce noise on this repo. Please use https://github.com/aspnet/Home/issues/3278 for questions and comments.\r\n\r\nThanks,\r\nNate","Url":"https://github.com/aspnet/Announcements/issues/309","RelatedDescription":"Open issue \"For contributors: branch name changes in ASP.NET Core repos\" (#309)"},{"Id":"335579239","IsPullRequest":false,"CreatedAt":"2018-06-25T21:44:22","Actor":"divega","Number":"308","RawContent":null,"Title":"EF Core 2.2 Roadmap","State":"open","Body":"## EF Core 2.2 is a small release\r\n\r\nUnlike EF Core 2.1, the 2.2 release will include a small number of new features. We are concentrating most of our efforts to add new functionality on the 3.0 release. Still, you can expect 2.2 to include lots of bugs fixes, community contributions and small improvements.\r\n\r\nYou can access the list of issues currently assigned to the 2.2 milestone using [this query](https://github.com/aspnet/EntityFrameworkCore/issues?q=is%3Aopen+is%3Aissue+milestone%3A2.2.0+sort%3Areactions-%2B1-desc) on our issue tracking system.  \r\n\r\n## Schedule\r\nThe schedule of EF Core 2.2 will align with the schedule of .NET Core and ASP.NET Core 2.2. See [the ASP.NET Core 2.2 Roadmap announcement](https://github.com/aspnet/Announcements/issues/307).\r\n\r\nOur current plan is to have three previews before we ship RTM near the end of 2018:\r\n\r\n- August – Preview 1\r\n- September - Preview 2\r\n- October - Preview 3\r\n- Before end-of-year – RTM\r\n\r\n As usual, this post reflects our current plan, but things may change as we make progress. \r\n\r\n## New features\r\n\r\n### Reverse engineering of database views into query types\r\n\r\nIn EF Core 2.1 we added query types, which allow mapping .NET objects to views and tables without keys. In 2.2, we plan to leverage this new capability to automatically map existing database views to query types. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/1679.\r\n\r\n###  Support for collections of owned entities\r\n\r\nIn EF Core 2.0 we added the concept of owned entity types, which allows modeling ownership relationship that are common between entities that are part of the same document in document-oriented databases or the same aggregate if you use Domain-Driven Design concepts in your model.\r\n\r\nUntil now, we only support reference navigation properties to owned entities. In EF Core 2.2, we plan to enhance this functionality to map collection navigation properties to owned entities. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/8172.\r\n\r\n## Other work\r\n\r\nThere are some additional work items that are not strictly EF Core 2.2 features, but we still track as part of the 2.2 milestone because we are doing the work in the same timeframe:\r\n\r\n### Cosmos DB provider\r\n\r\nA lot of our efforts are going into productizing an EF Core provider for the SQL API in Cosmos DB.\r\nWe have already created a prototype, which we have shown in demos such as in this [this EF Core 2.1 talk](https://www.youtube.com/watch?v=k55kDH_ixrQ) we did at the Microsoft Build conference.\r\n\r\nDue to competing priorities, releasing a preview of this provider has taken more than what we originally planned, but we are working on it now, and the current plan is to release a stable version by the end of this calendar year.\r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/12086. \r\n\r\n### Preview of spatial support for SQL Server\r\n\r\nWe are also focusing on adding spatial support as an extension to the SQL Server provider for EF Core.\r\nNote that the PostgreSQL provider (Npgsql) already added support in EF Core 2.1. Beside implementing this functionality for SQL Server, we are working closely with the developers of Npgsql to try to achieve a consistent and hopefully improved experience across providers.\r\n\r\nNote that we aren't committing to having a final version of the spatial support for the end of the current calendar year. But we are actively working on this now, and as we make progress, we should be able to provide a more precise estimate.   \r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/1100.\r\n\r\n### Improve test coverage for LINQ and reduce query regressions in future releases\r\n\r\nIn the last few releases, we have seen that when we commit improvements to our LINQ implementation, we often break queries that were previously working. The main challenge is that LINQ defines a huge space of possible queries to test, and it is very complex to measure what level of test coverage we have, even for a specific query operator. In the 2.2 timeframe, we will be investing on improving test coverage for this huge space. We also plan to experiment with new approaches to add appropriate coverage, and to reduce the likelihood of introducing regressions in future releases.\r\n\r\nYou can track our progress on this at https://github.com/aspnet/EntityFrameworkCore/issues/12046. \r\n\r\nFor discussion on this roadmap, please use https://github.com/aspnet/EntityFrameworkCore/issues/12465. ","Url":"https://github.com/aspnet/Announcements/issues/308","RelatedDescription":"Open issue \"EF Core 2.2 Roadmap\" (#308)"},{"Id":"335571873","IsPullRequest":false,"CreatedAt":"2018-06-25T21:19:36","Actor":"glennc","Number":"307","RawContent":null,"Title":"ASP.NET Core 2.2 Roadmap","State":"open","Body":"We have grouped the ASP.NET Core 2.2 release into a few themes:\r\n\r\n- APIs & Services\r\n- Server improvements\r\n- SignalR\r\n\r\n## Rough Schedule\r\nWe are currently planning to have 3 previews before RTM:\r\n - August – Preview 1\r\n - September - Preview 2\r\n - October - Preview 3\r\n - Before End-of-year – RTM\r\n\r\nAs with our previous roadmap posts this is what we intend right now, but it's subject to change as we continue development.\r\n\r\n## APIs and Services\r\n\r\nThe 'north star' for this version is to generate better metadata about your app and use that data to make your dev experience better and more productive. This is the main focus for 2.2.\r\n\r\n### API Controller conventions\r\nIn 2.1 we added controller specific conventions that make Web API development more convenient with the [ApiController attribute](https://docs.microsoft.com/en-us/aspnet/core/web-api/index?view=aspnetcore-2.1#annotate-class-with-apicontrollerattribute). In 2.2 we want to expand on this concept to provide metadata for API Explorer and provide a better end-to-end API documentation experience.\r\n\r\nWe want to make it possible for all MVC Core applications to have a good Swagger/OpenAPI definition by default. By following common patterns, your actions will produce rich metadata without falling into 'attribute soup' where you list every possible status code that every action in your app could return. We will include a default set of conventions that match what ASP.NET Core scaffolding generations. It will also be possible to write and share your own conventions to reflect your desired contracts. \r\n\r\nWe will include a set of analyzers that will help you find cases where code that doesn't match the API Explorer metadata, and a code-fix that provides options to explicitly specify the response type metadata, create a new convention with a different pattern, or just let you write code to satisfy the convention.\r\n\r\nAs a concrete example, you could write a convention that says \"every action method that starts with 'Create' will return an HTTP 201\". If you wrote the following code, then you would receive a warning.\r\n\r\n```csharp\r\n[HttpPost(\"/orders\")]\r\npublic ActionResult<Order> CreateOrder(OrderData orderData)\r\n{\r\n    ....\r\n    return Ok(new Order() {...});\r\n}\r\n```\r\n\r\nThis code doesn't match your Swagger/OpenAPI metadata (from the convention) - which says that this action returns a 201. Once you see this, you could `ctrl + .` to add the attributes for what we do know about this method, opting out of conventions, or you could change the code.\r\n\r\nThe analyzer will also be able to 'check your work' if you are being explicit about status codes and results using the existing attributes - it does not require you to use the conventions. Details for how this will all work can be discussed here: https://github.com/aspnet/Mvc/issues/7802\r\n\r\nLet's look at a more fleshed-out out example. The following code snippet is what is required to generate a reasonable Open API document for an action method that will get an item by ID or return a 404:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    [ProducesResponseType((int)HttpStatusCode.NotFound)]\r\n    [ProducesResponseType(typeof(CatalogItem),(int)HttpStatusCode.OK)]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nIn 2.2 with the default conventions the following code should generate the same Open API document that the above code sample does, and this shipped analyzers will give you hints when you do something that doesn't match so you know to go and add attributes or change the conventions:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### OpenAPI generation\r\nWith the conventions described above it will be possible for code that uses the API Explorer to generate Open API documents to be better by default, since the code you write will either follow the conventions or have attributes allowing generators to create better documents.\r\n\r\n### Dispatcher\r\nIn 2.2 we will introduce a new routing system that will expand the set of scenarios where routing is useful – tentatively called Dispatcher. \r\n\r\nThe current routing system was designed to support MVC’s historical scenarios without much thought to how routing and the composable middleware pipeline will work together. The Dispatcher is designed to run the URL matching step very early in the pipeline so that middleware can see the Endpoint that was selected as well as metadata that is associated with that endpoint. Like existing routing, the dispatcher will branch and call the actual endpoint at the end of the pipeline.\r\n\r\nA concrete example of how this helps us is with CORS. Today there is both a CORS middleware AND a CORS feature of MVC (https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1). Because routing information is deeply integrated with MVC we can't apply CORS policies that only apply to specific controllers until after we know what controller has been selected. However, if you also want CORS policies to apply to other parts of your pipeline then you need the middleware. This has been a source of confusion for many and we can simplify it if all of the middleware pipeline can have as much information about routing as MVC does today.\r\n\r\nWe’re also using this opportunity to make improvements to the performance of routing and dispatching for MVC and other scenarios.\r\n\r\n### HTTP API REPL tooling\r\nToday there are no tools built into Visual Studio or the dotnet CLI to help you execute HTTP verbs against your API. We have a great language, debugger, and framework but they are somewhat limited when it's difficult to send a POST to my app to see what happens. In 2.2 we want to build a CLI experience for exploring HTTP APIs to imcrease your API inner loop productivity. The CLI builds on all the features we've talked about above as some of its advanced features, like listing all routes in your app, are enabled by consuming the metadata we have about your app via Open API documents. That means the CLI should be useful for executing any HTTP verb, but really shines when you feed it more data like Open API docs. We intend to start by shipping this as a standalone global tool while we explore its feature set and potential.\r\n\r\nYou can see a demo and description of this in Scott Hunter and Scott Hanselman's BUILD talk here: https://youtu.be/KAIJ3ezQb3c?t=18m\r\n\r\n### API client generation (C# & TypeScript)\r\nOnce you have an API with rich metadata and done exploring and testing it, then you need to go and write some client code to call and make use of your API. We are going to build an experience for generating this code based on the same data and documentation described above. We envision a few pieces for this story, one part is a dotnet tool that can generate code from an Open API document, the other is MSBuild SDK work to allow a `ServiceReference` to another project in a solution. That reference will cause build time client code generation to happen via the tool that can generate code. We expect this to work in a similar way to the EF Core tooling experience, where your application is built and most of your startup code executed but instead of running it we use the data we have about your code to generate a client.\r\n\r\n### Authorization Server\r\nOne of the largest gaps we’ve had has been around authorization for applications beyond a simple forms based login. We plan to fill that gap with a simple to use OpenID Connect based authorization server, which will allow your ASP.NET application to act as an authentication point for your projects, be they web site to API, SPA to API, native application to an API or, for distributed applications API to API. As we are concentrating on first party applications we can make the code you need to plumb in trivial, getting as close to zero configuration as you can,  we’re not aiming to replace the excellent third-party solutions out there which enable richer scenarios like third-party applications or which provide a flexibility in configuration and authentication flow.\r\n\r\n## Server Improvements\r\n\r\n### Health Checks\r\nThis feature is a way to trivially setup an endpoint in your application that can be used to check the health of your application, potentially taking into account things like memory consumption or database availability as well as just \"can I accept a HTTP request\".\r\n\r\n### HTTP/2 in Kestrel & HttpClient\r\nThe title says it all in this case. HTTP/2 support for all. We started this work some time ago, and have had the protocol mostly implemented for a while but not compiled into the product since it wasn't ready. This version we will finish that work and implement the missing features.\r\n\r\n### In-proc ANCM\r\nRunning ASP.NET Core applications in-process in IIS, giving a significant performance boost.\r\n\r\n## SignalR\r\n\r\n### Add Java & C++ clients\r\nAllow customers using Java or C++ to connect to SignalR servers, and the [Azure SignalR Service](https://azure.microsoft.com/en-us/blog/azure-signalr-service-a-fully-managed-service-to-add-real-time-functionality/).\r\n\r\n## Other\r\nAs with all releases there is a large tail of bug fixes, performance improvements, small features, and community PRs that we will also work on. You can see the full list of work by browsing the 2.2 milestones on the various [repositories](https://github.com/aspnet/).\r\n\r\nFor discussion on the roadmap in general, use https://github.com/aspnet/Home/issues/3265","Url":"https://github.com/aspnet/Announcements/issues/307","RelatedDescription":"Open issue \"ASP.NET Core 2.2 Roadmap\" (#307)"},{"Id":"333804954","IsPullRequest":false,"CreatedAt":"2018-06-19T19:21:13","Actor":"anurse","Number":"306","RawContent":null,"Title":"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR Client from UWP applications where the minimum version is set to \"Windows 10, version 1803\". However, these fixes also require some additional dependencies.\r\n\r\n**NOTE**: UWP Applcations with a minimum version set **below** \"Windows 10, version 1803\" (for example, if the minimum version is set to \"Fall Creators Update\") are **not** affected by this issue and **do not require** these steps.\r\n\r\nIn order to use the SignalR Client in UWP applications where the minimum version is set to \"Windows 10, version 1803\" you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Add the following **additional** package references to your project. These are referenced transitively by the SignalR Client, but newer versions are required to resolve this issue. We are planning to improve this in a future patch.\r\n    * `System.Threading.Tasks.Extensions` version `4.5.1`\r\n    * `System.Runtime.CompilerServices.Unsafe` version `4.5.1`\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/2406","Url":"https://github.com/aspnet/Announcements/issues/306","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803\" (#306)"},{"Id":"333802959","IsPullRequest":false,"CreatedAt":"2018-06-19T19:15:05","Actor":"anurse","Number":"305","RawContent":null,"Title":"SignalR Client 2.1.1 in Xamarin","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR **Client** from Xamarin. However, these fixes also require an updated build of Xamarin.iOS and Xamarin.Android, as well as some additional dependencies.\r\n\r\nIn order to use the SignalR Client in Xamarin applications you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Upgrade Xamarin to the appropriate version:\r\n    * Xamarin.Android `8.4.0.1`\r\n    * Xamarin.iOS `11.14.0.4`\r\n    * These will be included in:\r\n      * Visual Studio 15.8 **Preview 3** (not released at the time of publishing, but coming soon)\r\n      * Visual Studio for Mac 7.6 **Preview 3** (not released at the time of publishing, but coming soon)\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/1886","Url":"https://github.com/aspnet/Announcements/issues/305","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in Xamarin\" (#305)"},{"Id":"329851587","IsPullRequest":false,"CreatedAt":"2018-06-06T13:30:30","Actor":"ToLearnMoe","Number":"304","RawContent":null,"Title":"怎么找工作啊","State":"closed","Body":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n","Url":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Closed issue \"怎么找工作啊\" (#304)"},{"Id":"329603099","IsPullRequest":false,"CreatedAt":"2018-06-05T20:11:55","Actor":"AngelosP","Number":"303","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"closed","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\r\n\r\nFor discussion, use https://github.com/aspnet/Tooling/issues/1075","Url":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Closed issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303)"},{"Id":"327435771","IsPullRequest":false,"CreatedAt":"2018-05-29T18:26:40","Actor":"shirhatti","Number":"302","RawContent":null,"Title":"IIS in-process hosting moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving IIS in-process hosting out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will ship IIS in-process hosting as part of the ASP.NET Core 2.2 release.\r\n\r\n### Why?\r\n\r\nIIS in-process hosting  is a brand new server implementation and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/IISIntegration/issues/878","Url":"https://github.com/aspnet/Announcements/issues/302","RelatedDescription":"Open issue \"IIS in-process hosting moved out of ASP.NET Core 2.1\" (#302)"},{"Id":"322891671","IsPullRequest":false,"CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Number":"301","RawContent":null,"Title":"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available","State":"open","Body":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Open issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301)"},{"Id":"321270218","IsPullRequest":false,"CreatedAt":"2018-05-08T17:07:04","Actor":"blowdart","Number":"300","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2553\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_","Url":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300)"},{"Id":"320441265","IsPullRequest":false,"CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Number":"299","RawContent":null,"Title":"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/WebHooks/issues/296","Url":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Open issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299)"},{"Id":"309862672","IsPullRequest":false,"CreatedAt":"2018-03-29T18:44:48","Actor":"glennc","Number":"298","RawContent":null,"Title":"Migrating from aspnetcore docker repos to dotnet","State":"open","Body":"Starting with .NET Core 2.1-preview2, we intend to migrate from using the microsoft/aspnetcore-build and microsoft/aspnetcore Docker repos to the microsoft/dotnet Docker repo.  We will continue to ship patches and security fixes for the existing aspnetcore images but any new images for 2.1 and higher will be pushed to microsoft/dotnet.\r\n\r\nDockerfiles using `microsoft/aspnetcore:<version>` should change to `microsoft/dotnet:<version>-aspnetcore-runtime`.\r\n\r\nDockerfiles using `microsoft/aspnetcore-build` that do not require Node should just change to `microsoft/dotnet:<version>-sdk`.\r\n\r\nDockerfiles using Node from the `microsoft/aspnetcore-build` image will either need to install Node into their own image or use mult-stage builds as described in the Dockerfile examples at the end of this announcement.\r\n\r\nThe `ASPNETCORE_URLS` env var that allows ASP.NET Core apps to accept traffic from outside the container will be set in all the `dotnet` images, which was a common early stumbling block for people getting started with ASP.NET Core and Docker. PR is [here](https://github.com/dotnet/dotnet-docker/pull/450)\r\n\r\n### Why the merge?\r\n\r\nFor some time we have been seeing people search for and find the `microsoft/dotnet` images and never realise that there are aspnetcore ones. This could be problematic in the past as the dotnet images were not optimised for ASP.NET Core, making things a little harder or slower. But with changes in the way ASP.NET Core works in 2.1 it was going to be much more impactful, in that ASP.NET Core applications were not likely to run on the base dotnet image. Given that we also thought it made more sense to have a single repository for all images, as ASP.NET is just part of .NET, we are taking this opportunity to remove the potential source of confusion and wasted time for our customers.\r\n\r\n### Why no Node?\r\nThere are two main reasons for this:\r\n\r\n  1. Multi-stage build now makes it easier to pull in the Node image for purely build concerns.\r\n  2. The ASP.NET Core templates no longer have a hard dependency on Node.\r\n\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n\r\n### Dockerfile examples\r\n\r\nIf you need Node then you will need to add it in your own Dockerfile, like this:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n#setup node\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\n# copy everything else and build\r\nCOPY . ./\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n#setup node, this is only needed if you use Node both at runtime and build time. Some people may only need the build part.\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nIf you only need Node at build then you may also be able to take advantage of multi-stage build like the following:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\nFROM node as clientBuild\r\n#Do npm restore and other Node stuff.\r\n\r\n#Merge the contents of your .NET build env and your clientBuild and publish.\r\nFROM build-env as publish\r\n# copy everything else and build\r\nCOPY --from=clientBuild . .\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n\r\nCOPY --from=publish /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n","Url":"https://github.com/aspnet/Announcements/issues/298","RelatedDescription":"Open issue \"Migrating from aspnetcore docker repos to dotnet\" (#298)"},{"Id":"305936138","IsPullRequest":false,"CreatedAt":"2018-03-16T14:09:54","Actor":"mnmr","Number":"297","RawContent":null,"Title":"Model binding accesses read-only properties in post-back","State":"closed","Body":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355.","Url":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297)"},{"Id":"305310538","IsPullRequest":false,"CreatedAt":"2018-03-14T20:08:36","Actor":"halter73","Number":"296","RawContent":null,"Title":"Managed sockets will replace libuv as Kestrel's default transport","State":"open","Body":"Starting in ASP.NET Core 2.1.0, managed sockets will be replacing libuv as Kestrel's default transport.\r\n\r\nThis change should only break applications that bind to non-TCP endpoints or explicitly call `IWebHostBuilder.UseLibuv()` and reference the libuv transport transitively through the Microsoft.AspNetCore.App and/or Microsoft.AspNetCore.Server.Kestrel NuGet packages.\r\n\r\nTo fix the break simply add a reference to Microsoft.AspNetCore.All and/or Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nWhile switching to the managed socket transport should be seamless<sup>1</sup>, if you want to continue using the libuv transport in 2.1.0 you will need to explicitly call `UseLibuv()` and reference the libuv transport either directly or through the \"All\" metapackage.\r\n\r\n<sup>1</sup> Unless you are trying to bind to a Unix domain socket or use systemd socket activation. As of 2.1, only the libuv transport supports binding to these kinds of endpoints.\r\n\r\n---\r\n\r\n*Please use aspnet/KestrelHttpServer#2360 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/296","RelatedDescription":"Open issue \"Managed sockets will replace libuv as Kestrel's default transport\" (#296)"},{"Id":"304854672","IsPullRequest":false,"CreatedAt":"2018-03-13T17:07:23","Actor":"blowdart","Number":"295","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\r\n\r\n## Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core versions 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where an elevation of privilege vulnerability exists when a ASP.NET Core web application fails to validate web requests correctly.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Home/issues/2954\r\n\r\n### Mitigation factors\r\n\r\nSites are not vulnerable to this elevation of privilege when:\r\n\r\n* The site is hosted behind a proxy, such as Internet Information Services (IIS), NGINX, or Apache, where:\r\n\r\n  * The proxy validates the host header, and\r\n  * The proxy is configured to listen on fully qualified domain names or\r\n  * The proxy is configured with a wildcard subdomain where the root domain is fully controlled by the site owner.\r\n\r\nFor example, if IIS is configured to respond to requests for `contoso.com` or `*.contoso.com` hosts, the application is protected.\r\n\r\nIf IIS is configured to respond to any request from any host, the application is vulnerable.\r\n\r\nKestrel does not have the capability to validate host headers and is vulnerable if not placed behind a proxy that performs the host header validation.\r\n\r\nApps hosted in Azure Web Apps are not susceptible to this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core hosted application which is directly exposed to the internet, or hosted behind a proxy which does not validate or restict host headers to known good values.\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.HttpOverrides | 2.0.0, 2.0.1 |  2.0.2 and later\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1 |  2.0.2 and later\r\n\r\n*No patches are available for ASP.NET Core 1.0.x or ASP.NET Core 1.1.x. Microsoft requires that you place your 1.x ASP.NET Core application behind a proxy.\r\nYou must address the configuration of your proxy to protect your application. If you're not running ASP.NET Core 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0.\r\nand add the host validating middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/.*\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected?\r\n\r\nReview the server and proxy configuration [instructions](#configuration) below to see if your system is configured correctly, and adjust the configuration if necessary.\r\n\r\n### How do I fix the issue?\r\n\r\nYou must address the [configuration](#configuration) of your server or proxy to protect your application to limit requests to known hosts.\r\n\r\nIf you're not running Kestrel 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0 and follow the 2.0 instructions below.\r\n\r\nASP.NET Core 2.0.x applications must [update your code](#app-update) to fully protect your application.\r\n\r\n#### <a name=\"configuration\"></a> Server and Proxy configuration\r\n\r\nYou must examine your externally facing server or proxy configuration and ensure it requires host headers with fully qualified domain names, or known sub-domains if you are using sub-domain wild cards.\r\n\r\n##### ASP.NET Core applications behind [IIS](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/)\r\n\r\nTo configure IIS to only respond to know hosts:\r\n\r\n* Open IIS Manager.\r\n* Expand the **Sites** node for the machine you want to configure.\r\n* Select the site by clicking on the site.\r\n* In the **Actions** list on the right-hand side of IIS Manager, click **Bindings**.\r\n* Edit any bindings that do not have a host name to specify one. Do not use a `*` wildcard unless it's against a domain under your control. For example, `*.contoso.com` is safe, `*.com` is not.\r\n\r\n##### ASP.NET Core applications running publicly on [Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel)\r\n\r\nKestrel does not have the capability to validate host headers. It must either be placed behind a proxy that performs the host header validation or the validation must be performed within the application by adding  host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/. You must also [update your dependencies](#app-update) to fully protect your application.\r\n\r\n##### ASP.NET Core applications running on [HTTP.SYS](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys)\r\n\r\nTo configure URL prefixes and ports, you can use the `UseUrls` extension method, the `urls` command-line argument, the ASPNETCORE_URLS environment variable, or the `UrlPrefixes` property on [HttpSysOptions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.httpsys.httpsysoptions). The following code example uses `UrlPrefixes`.\r\n\r\n```c#\r\npublic static IWebHost BuildWebHost(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n        .UseStartup<Startup>()\r\n        .UseHttpSys(options =>\r\n        {\r\n            // The following options are set to default values.\r\n            options.Authentication.Schemes = AuthenticationSchemes.None;\r\n            options.Authentication.AllowAnonymous = true;\r\n            options.MaxConnections = null;\r\n            options.MaxRequestBodySize = 30000000;\r\n            options.UrlPrefixes.Add(\"http://localhost:5000\");\r\n        })\r\n        .Build();\r\n```\r\n\r\n##### ASP.NET Core applications behind [NGINX](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx)\r\n\r\nTo configure NGINX as a reverse proxy to forward requests to your ASP.NET Core app, replace the contents */etc/nginx/sites-available/default* with the following:\r\n\r\n```NGINX\r\nserver {\r\n    listen        80;\r\n    server_name   example.com *.example.com;\r\n    location / {\r\n        proxy_pass         http://localhost:5000;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header   Upgrade $http_upgrade;\r\n        proxy_set_header   Connection keep-alive;\r\n        proxy_set_header   Host $host;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n}\r\n```\r\n\r\nNote that with NGINX, when there is no match for `server_name`, NGINX will pick the default server. If no default server has been defined, the first server in the conf file is the default server. Best practice is to add a specific default server which returns a status code of 444 in the conf file. An example default server configuration would be as follows:\r\n\r\n```NGINX\r\nserver {\r\n    listen   80 default_server;\r\n    # listen [::]:80 default_server deferred;\r\n    return   444;\r\n}\r\n```\r\n\r\nWith the preceding configuration file and default server, NGINX accepts public traffic on port 80 with host header `example.com` or `*.example.com`. Requests not matching these hosts won't get forwarded to Kestrel. NGINX forwards the matching requests to Kestrel at `http://localhost:5000`. See [How nginx processes a request](https://nginx.org/docs/http/request_processing.html) for more information.\r\n\r\nOnce the NGINX configuration is established, run `sudo nginx -t` to verify the syntax of the configuration files. If the configuration file test is successful, force NGINX to pick up the changes by running `sudo nginx -s reload`.\r\n\r\n##### ASP.NET Core applications behind [Apache](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache)\r\n\r\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the `*.conf*` extension:\r\n\r\n* Is processed in alphabetical order, and\r\n* The module configuration files in `/etc/httpd/conf.modules.d/` are processed. The module configuration files in `/etc/httpd/conf.modules.d/` contain any configuration files necessary to load modules.\r\n\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyPass / http://127.0.0.1:5000/\r\n    ProxyPassReverse / http://127.0.0.1:5000/\r\n    ServerName www.example.com\r\n    ServerAlias *.example.com\r\n</VirtualHost>\r\n```\r\n\r\nThe `VirtualHost` block can appear multiple times, in one or more files on a server. In the preceding configuration file, Apache accepts public traffic on port 80. The domain `www.example.com` is being served, and the `*.example.com` alias resolves to the same website. See [Name-based virtual host support](https://httpd.apache.org/docs/current/vhosts/name-based.html) for more information. Requests are proxied at the root to port 5000 of the server at 127.0.0.1. For bi-directional communication, `ProxyPass` and `ProxyPassReverse` are required.\r\n\r\nSave the file and test the configuration. If everything passes, the response is `Syntax [OK]`.\r\n\r\n```bash\r\nsudo service httpd configtest\r\n```\r\n\r\nRestart Apache:\r\n\r\n```bash\r\nsudo systemctl restart httpd\r\nsudo systemctl enable httpd\r\n```\r\n\r\n\r\n#### <a name=\"app-update\"></a> ASP.NET Core 2.0 application code updates\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.6 or later.\r\n* Updating will pull in the fixed packages listed above.\r\n\r\nIf you're targeting .NET Framework, update the packages listed above to their safe version or later.\r\n\r\nIf your application is using Kestrel without a proxy or the HttpOverrides functionality (UseForwardedHeaders with ForwardedHost) you must also add the host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/tree/release/2.0/samples/HostFilteringSample/.\r\n\r\n---\r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. You must follow the update instructions below to address both types of dependency.\r\n\r\n### Direct dependencies\r\n\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on `Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file.\r\n\r\n### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Core\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the vulnerable metapackage, as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.5.\r\n\r\nTo update the version to the secure package, change the version number to a secure package version. In this example, update `Microsoft.AspNetCore.All` to 2.0.6 or later. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Framework\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a reference to a single package, as seen by the `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.HttpOverrides` version 2.0.1.\r\n\r\nTo update to the secure package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.HttpOverrides` to 2.0.2 and later. Save the *csproj* file. The updated and secure *csproj* look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependency version.\r\n\r\n##### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to a compatible version. \r\n\r\nFor example if your project refers directly to `Microsoft.AspNetCore.Mvc.Cors` with a version number of `2.0.0`, when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your *project.json* in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n###### Reviewing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review the *project.assets.json* file.\r\n\r\n###### Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names above and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example, the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n###### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file. Visual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the vulnerable versions table above.\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your *project.assets.json* file includes references to any of the vulnerable packages shown above, then you need to fix the transitive dependencies.\r\n\r\n###### Overriding transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages this means:\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned, you must add a direct dependency to the updated version by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referring the fixed version.\r\nFor example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.HttpOverrides` version 2.0.0 you would add a reference to the fixed version, that is, 2.0.2 or later.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverride\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n###### Rebuilding your application\r\n\r\nRebuild your application. Test and deploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0787)\r\n\r\n### Revisions\r\n\r\nV1.1 (Mar 15, 2018): NGINX configuration instructions updated, thanks to @buglloc\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-03-15_","Url":"https://github.com/aspnet/Announcements/issues/295","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\" (#295)"},{"Id":"304853568","IsPullRequest":false,"CreatedAt":"2018-03-13T17:04:23","Actor":"blowdart","Number":"294","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_","Url":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294)"},{"Id":"303604146","IsPullRequest":false,"CreatedAt":"2018-03-08T19:36:01","Actor":"natemcmaster","Number":"293","RawContent":null,"Title":"Moving official daily builds to the dotnet-core MyGet feed ","State":"open","Body":"As part of ongoing infrastructural changes, we will be moving official daily of ASP.NET Core to the dotnet-core myget feed. This transition will happen over the next few weeks.\r\n\r\n**Old feed:** https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\n**New feed:** https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\nWe recommend updating to use the dotnet-core feed to continue getting the latest daily builds of ASP.NET Core.\r\n\r\nWe are making this change to make it easier for you to pull daily builds that align with the .NET Core CLI and .NET Core runtime. Some of our existing MyGet feeds will continue to exist, but will not be used for official daily builds. Instead, those feeds will only be used for builds of experimental branches of aspnetcore.\r\n\r\nOther useful links:\r\nGallery: https://dotnet.myget.org/gallery/dotnet-core\r\nNuGet v2 source: https://dotnet.myget.org/F/dotnet-core/api/v2\r\nNPM feed: https://dotnet.myget.org/F/dotnet-core/npm/\r\n\r\nPlease use https://github.com/aspnet/Home/issues/2937 for discussion.","Url":"https://github.com/aspnet/Announcements/issues/293","RelatedDescription":"Open issue \"Moving official daily builds to the dotnet-core MyGet feed \" (#293)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1052190001897844736","CreatedAt":"2018-10-16T13:30:19+00:00","UserScreenname":"aspnet","Text":"Check out Jeff's show this morning and learn about .NET, Visual Studio Code, and Linux-based development with .NET… https://t.co/Y7qbD2aQvP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"1049792996743372800","CreatedAt":"2018-10-09T22:45:29+00:00","UserScreenname":"aspnet","Text":"#ASPNET Community Standup starting now!\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"1049789526162300928","CreatedAt":"2018-10-09T22:31:41+00:00","UserScreenname":"aspnet","Text":"Starting soon! #Blazor update with @aVerySpicyBoi @stevensanderson  @danroth27 @DamianEdwards @jongalloway at 3:45… https://t.co/qvemHwct7z","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":8,"RawContent":null},{"Id":"1049387182836789248","CreatedAt":"2018-10-08T19:52:55+00:00","UserScreenname":"aspnet","Text":"Don't miss this week's #ASPNET Community Standup this Tuesday at 3:45 Pacific / 22:45 UTC\n\nThis week: #Blazor updat… https://t.co/ldqMQw90HU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":56,"FavoriteCount":36,"RawContent":null},{"Id":"1047175421974831104","CreatedAt":"2018-10-02T17:24:10+00:00","UserScreenname":"aspnet","Text":"Blazor 0.6.0 experimental release now available\n\nhttps://t.co/PLXAt1u6Ha","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":263,"FavoriteCount":169,"RawContent":null},{"Id":"1044720517997973505","CreatedAt":"2018-09-25T22:49:16+00:00","UserScreenname":"aspnet","Text":"Starting now! Join us!\n\nhttps://t.co/4Ioo9jNSN2 https://t.co/SGEJxKemkG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":5,"RawContent":null},{"Id":"1044348748783005696","CreatedAt":"2018-09-24T22:11:59+00:00","UserScreenname":"aspnet","Text":"Get ready for this week's #ASPNET Community Standup - Tuesday at 3:45 PM Pacific / 22:45 UTC\n\nEndpoint Routing with… https://t.co/N6iBaMV8C0","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":8,"RawContent":null},{"Id":"1039600318093217792","CreatedAt":"2018-09-11T19:43:25+00:00","UserScreenname":"aspnet","Text":"Join us for today's #ASPNET Community Standup at 3:45 PM Pacific time with @shanselman, @DamianEdwards and… https://t.co/AADsNXNw0L","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":9,"RawContent":null},{"Id":"1034573477620006913","CreatedAt":"2018-08-28T22:48:33+00:00","UserScreenname":"aspnet","Text":"We're live on https://t.co/4Ioo9jNSN2! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1034222603685179392","CreatedAt":"2018-08-27T23:34:18+00:00","UserScreenname":"aspnet","Text":"Get ready for this week's #ASPNET Community Standup - Tuesday at 3:45 PM Pacific / 10 UTC\n\nBenchmarks and Performan… https://t.co/0SJ32oq3iG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":9,"RawContent":null},{"Id":"1033133567704875008","CreatedAt":"2018-08-24T23:26:51+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.2.0-preview1: HTTP/2 in Kestrel\nhttps://t.co/II7wNqYPgG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":104,"FavoriteCount":57,"RawContent":null},{"Id":"1032696620142419968","CreatedAt":"2018-08-23T18:30:35+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.20-preview1: Open API Analyzers &amp; Conventions\nhttps://t.co/17azOu2fw6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":32,"RawContent":null},{"Id":"1032668796392095745","CreatedAt":"2018-08-23T16:40:01+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.2.0-preview1: Healthchecks\nhttps://t.co/sgOqbrv2pW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":24,"RawContent":null}]}},"RunOn":"2018-10-17T05:30:20.2908246Z","RunDurationInMilliseconds":12799}