{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core March 2019 Updates – 1.0.15, 1.1.12, 2.1.9 and 2.2.3","PublishedOn":"2019-03-12T22:59:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core March 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes.\n\n.NET Core...","Href":"https://devblogs.microsoft.com/dotnet/net-core-march-2019/","RawContent":null},{"Title":"Announcing ML.NET 0.11 – Machine Learning for .NET","PublishedOn":"2019-03-09T01:03:28+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-0-11-machine-learning-for-net/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 3","PublishedOn":"2019-03-06T19:10:42+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 3. We would like to update you on the .NET Core 3.0 schedule and introduce you to improvements in .NET Core SDK installers, Docker containers, Range, and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/","RawContent":null},{"Title":"Floating-Point Parsing and Formatting improvements in .NET Core 3.0","PublishedOn":"2019-03-05T22:14:48+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Starting back with the .NET Core 2.1 release, we were making iterative improvements to the floating-point parsing and formatting code in .NET Core. Now, in .NET Core 3.0 Preview 3, we are nearing...","Href":"https://devblogs.microsoft.com/dotnet/floating-point-parsing-and-formatting-improvements-in-net-core-3-0/","RawContent":null},{"Title":"Collecting .NET Core Linux Container CPU Traces from a Sidecar Container","PublishedOn":"2019-03-05T19:31:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Introduction\nIn recent years, containerization has gained popularity in DevOps due to its valuable capacities, including more efficient resource utilization and better agility. Microsoft and Docker...","Href":"https://devblogs.microsoft.com/dotnet/collecting-net-core-linux-container-cpu-traces-from-a-sidecar-container/","RawContent":null},{"Title":".NET Framework March 1, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-03-01T18:25:39+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, March 1, we released the February 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-1-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"An update to C# versions and C# tooling","PublishedOn":"2019-02-27T18:59:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Starting with Visual Studio 2019 Preview 4 and RC, we&#8217;ll be adjusting how C# versions are treated in .NET tooling.\nSummary of changes\nFirstly, we&#8217;re adding two new Language Version...","Href":"https://devblogs.microsoft.com/dotnet/an-update-to-c-versions-and-c-tooling/","RawContent":null},{"Title":"How to port desktop applications to .NET Core 3.0","PublishedOn":"2019-02-26T18:00:30+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"In this post, I will describe how to port a desktop application from .NET Framework to .NET Core. I picked a WinForms application as an example. Steps for WPF application are similar and I&#8217;ll...","Href":"https://devblogs.microsoft.com/dotnet/how-to-port-desktop-applications-to-net-core-3-0/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3745","PublishedOn":"2019-02-21T19:27:54+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As we get closer to the final version, our efforts are focused on stabilizing the release over the coming weeks. Please keep up the support by trying out our latest preview 3745 and provide any...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-framework-4-8-early-access-build-3745/","RawContent":null},{"Title":".NET Framework February 2019 Preview of Quality Rollup","PublishedOn":"2019-02-19T15:19:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the February 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-february-2019-preview-of-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9225246598","Type":"PullRequestEvent","CreatedAt":"2019-03-12T10:03:37","Actor":"devlead","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Opened pull request \"Add Dave to cake.md\" (#138) at dotnet/foundation","RelatedBody":""},{"Id":"9214022828","Type":"PullRequestEvent","CreatedAt":"2019-03-10T16:40:38","Actor":"MikeWilliams-UK","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Opened pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""},{"Id":"9208392766","Type":"IssuesEvent","CreatedAt":"2019-03-08T19:00:06","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123) at dotnet/foundation","RelatedBody":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130"},{"Id":"9208389675","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:59:32","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Merged pull request \"Fix logo and update team contributors\" (#136) at dotnet/foundation","RelatedBody":""},{"Id":"9208386555","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:59:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Merged pull request \"adds Umbraco logo\" (#135) at dotnet/foundation","RelatedBody":"fixes #124 "},{"Id":"9208386542","Type":"IssuesEvent","CreatedAt":"2019-03-08T18:59:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124) at dotnet/foundation","RelatedBody":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151"},{"Id":"9208384997","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:58:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Merged pull request \"adds the prism logo\" (#134) at dotnet/foundation","RelatedBody":"fixes #126 "},{"Id":"9208384964","Type":"IssuesEvent","CreatedAt":"2019-03-08T18:58:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126) at dotnet/foundation","RelatedBody":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157"},{"Id":"9208383052","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:58:27","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Merged pull request \"Add additional ReactiveUI organization projects.\" (#133) at dotnet/foundation","RelatedBody":""},{"Id":"9178188648","Type":"PullRequestEvent","CreatedAt":"2019-03-04T22:18:31","Actor":"jkonicki","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Opened pull request \"Fix logo and update team contributors\" (#136) at dotnet/foundation","RelatedBody":""},{"Id":"9168056662","Type":"PullRequestEvent","CreatedAt":"2019-03-02T18:57:28","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Opened pull request \"adds Umbraco logo\" (#135) at dotnet/foundation","RelatedBody":"fixes #124 "},{"Id":"9168030118","Type":"PullRequestEvent","CreatedAt":"2019-03-02T18:43:42","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Opened pull request \"adds the prism logo\" (#134) at dotnet/foundation","RelatedBody":"fixes #126 "},{"Id":"9163318579","Type":"PullRequestEvent","CreatedAt":"2019-03-01T15:37:52","Actor":"glennawatson","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Opened pull request \"Add additional ReactiveUI organization projects.\" (#133) at dotnet/foundation","RelatedBody":""},{"Id":"9142546450","Type":"IssuesEvent","CreatedAt":"2019-02-26T23:12:20","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/75","RelatedDescription":"Closed issue \"Fix mailto link on Team page\" (#75) at dotnet/foundation","RelatedBody":"When visiting [https://dotnetfoundation.org/team](https://dotnetfoundation.org/team), I noticed that the email icon under **Miklos Barkoczi**'s name has `mailto:` referenced twice. It may be obvious to some, but not to others.\r\n\r\n```\r\n<a href=\"mailto:mailto:contact@dotnetfoundation.org\">\r\n    <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n</a>\r\n```\r\nshould be\r\n```\r\n<a href=\"mailto:contact@dotnetfoundation.org\">\r\n    <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n</a>\r\n```"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9228689700","Type":"IssuesEvent","CreatedAt":"2019-03-12T17:35:17","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Opened issue \"March 2019 .NET Updates\" (#103) at dotnet/announcements","RelatedBody":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0))\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9150531193","Type":"IssuesEvent","CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Opened issue \"SDK Installers will remove previous patch versions\" (#102) at dotnet/announcements","RelatedBody":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions)."},{"Id":"9078417647","Type":"IssuesEvent","CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Opened issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101) at dotnet/announcements","RelatedBody":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition."},{"Id":"9075495754","Type":"IssuesEvent","CreatedAt":"2019-02-15T14:06:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Opened issue \"Advisory on February 2019 Security update for Windows 10 update 1809\" (#100) at dotnet/announcements","RelatedBody":"<span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.\r\n\r\nWe are actively working on fixing and re-shipping a correction for this issue. If you installed the February 2019 security update and have not yet seen any negative behavior, we recommend that you leave your system as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We are working to improve our testing infrastructure to prevent these type of issues in the future. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this <a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/\" rel=\"nofollow\">post</a> as we have new information.\r\n<h2>Guidance</h2>\r\nWe are working on guidance and will update this pose and as we have new information.\r\n<h2>Workaround</h2>\r\nThere are no known workarounds at this time.\r\n<h2>Symptoms</h2>\r\nAfter installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:\r\n<p class=\"xxxxxmsonormal\"><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></p>\r\n"},{"Id":"9070407129","Type":"IssuesEvent","CreatedAt":"2019-02-14T19:28:26","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Opened issue \"Supporting new Alpine versions (for containers)\" (#99) at dotnet/announcements","RelatedBody":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread."},{"Id":"9060710562","Type":"IssuesEvent","CreatedAt":"2019-02-13T14:48:22","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Opened issue \"February 2019 .NET Updates\" (#98) at dotnet/announcements","RelatedBody":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework January 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9240176474","Type":"PullRequestEvent","CreatedAt":"2019-03-14T05:09:42","Actor":"mjsabby","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23251","RelatedDescription":"Opened pull request \"[WIP] Add Large pages support in GC\" (#23251) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/coreclr/issues/18371.\r\n\r\n@Maoni0 adding [WIP] as I'll get to this in a day or so, but thought I'd start a PR so you can take a look. Not tested yet."},{"Id":"9239695248","Type":"PullRequestEvent","CreatedAt":"2019-03-14T02:42:29","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23240","RelatedDescription":"Merged pull request \"Disable tracing/inducedgc test on all Unix platforms\" (#23240) at dotnet/coreclr","RelatedBody":"Addressing https://github.com/dotnet/coreclr/issues/23124#issuecomment-472479678\r\n\r\ncc @cshung @jorive "},{"Id":"9239540509","Type":"PullRequestEvent","CreatedAt":"2019-03-14T01:59:31","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23250","RelatedDescription":"Opened pull request \"Add Rune.{Try}Encode{AsUtf8}\" (#23250) at dotnet/coreclr","RelatedBody":"Implementation of API review at https://github.com/dotnet/corefx/issues/35530.\r\n\r\nApproved APIs:\r\n\r\n`Rune.TryEncode` (already exists)\r\n`Rune.TryEncodeAsUtf8` (already exists, but under a different name)\r\n\r\nSuggested during review that we also add these (/cc @bartonjs):\r\n\r\n`Rune.Encode` (new API, throws if destination too small)\r\n`Rune.EncodeAsUtf8` (new API, throws if destination too small)\r\n\r\nSince corefx currently exposes the old name of `TryEncodeAsUtf8`, I'm leaving both names temporarily until this syncs over to corefx, after which point we can clean it up."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9237045469","Type":"IssuesEvent","CreatedAt":"2019-03-13T17:55:54","Actor":"vellozzi","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10969","RelatedDescription":"Closed issue \"v2.1.505+dependencies tag is wrong\" (#10969) at dotnet/cli","RelatedBody":"If you look at the [v2.1.505+dependencies](https://github.com/dotnet/cli/commits/v2.1.505%2Bdependencies) tag the tagged commit is [ad523ce44af2876afb3eddbf5a71fdf294ac2bd7](https://github.com/dotnet/cli/commit/ad523ce44af2876afb3eddbf5a71fdf294ac2bd7).\r\n\r\nBut if you look at the [Release/2.1.5xx branch](https://github.com/dotnet/cli/commits/release/2.1.5xx) commit [35fbd6d033612a55ab4a1fcdfbd3ab4c36e8b49e](https://github.com/dotnet/cli/commit/35fbd6d033612a55ab4a1fcdfbd3ab4c36e8b49e) looks like it's the one that should be tagged as v2.1.505+dependencies.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9239201944","Type":"IssuesEvent","CreatedAt":"2019-03-14T00:20:27","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/675","RelatedDescription":"Closed issue \"Trimming task footprint is too large\" (#675) at dotnet/standard","RelatedBody":"There's probably a perf issue here too.  We're using the NuGet ProjectModel OM for loading the project.assets.json when we only need to read out package ID relationships.  We could do this with much smaller JSON-based reader.  Ideally it wouldn't parse the entire file (which can be huge) when we only need the package relationships."},{"Id":"9239198047","Type":"IssuesEvent","CreatedAt":"2019-03-14T00:19:22","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/688","RelatedDescription":"Closed issue \"Flesh out \"multi-packages\"\" (#688) at dotnet/standard","RelatedBody":"In the fix for https://github.com/dotnet/standard/issues/680 I added special behavior for \"multi-packages\" where they can be treated as trimmable until all assets are included.\r\n\r\nThis works well in the case of a package that's multiple dlls, but what about:\r\n1. Single DLL + content\r\n2. Single DLL + native dll(s)\r\n3. Many DLL + content\r\n\r\nFor 1 I don't think we should consider it a multi-package: nothing will typically root content and we don't want to trim it.\r\nFor 2 I don't think we should consider it a multi-package, though in the common case we'll probably still identify roots to the native DLLs through DllImport probing.\r\nFor 3 we almost need a special case where we will root the content but not the other DLLs.  Alternatively we could punt on this and force folks to root the packages."},{"Id":"9239196442","Type":"IssuesEvent","CreatedAt":"2019-03-14T00:18:53","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/689","RelatedDescription":"Closed issue \"Fix DllImport probing\" (#689) at dotnet/standard","RelatedBody":"CoreCLR allows for more variations of DllImport probing:\r\nhttps://github.com/dotnet/coreclr/blob/430331c011a0460670e2743ab08caa36f914f52d/src/vm/dllimport.cpp#L6066-L6084\r\nhttps://github.com/dotnet/coreclr/blob/e7bb40f52d46671f5001012284a2f54eaa658e35/src/pal/inc/pal.h#L5259-L5265\r\nAs a result we should update our list:\r\nhttps://github.com/dotnet/standard/blob/2bb3279f4adc6da02ee8a191904828f7e024226e/Microsoft.Packaging.Tools.Trimming/tasks/FileNode.cs#L272\r\n\r\nToday it's missing the prefixes.\r\n"},{"Id":"9239191509","Type":"IssuesEvent","CreatedAt":"2019-03-14T00:17:37","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/693","RelatedDescription":"Closed issue \"Trimming logging is misleading and insufficient\" (#693) at dotnet/standard","RelatedBody":"For shared framework applications we list out files being trimmed that will never deploy with the application.  We should see if we can more accurately represent the trimmed set, or at least don't make any claims about the size savings for shared framework apps.\r\n\r\nAlso there is a large cliff between the amount of information by default and the DGML.  We should look at something in between that provides normal status info (eg: files trimmed) that isn't quite as overwhelming as the DGML."},{"Id":"9239191113","Type":"IssuesEvent","CreatedAt":"2019-03-14T00:17:30","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/789","RelatedDescription":"Closed issue \"Add release notes for the trimming package\" (#789) at dotnet/standard","RelatedBody":"We need to have our own link for release notes for the trimming package.\r\n\r\nIt should be a FWLink that points to a github issue / document of some sort that lists out the details of the release, bugs fixed, etc."},{"Id":"9239075550","Type":"IssuesEvent","CreatedAt":"2019-03-13T23:46:35","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/679","RelatedDescription":"Closed issue \"Update standard build definitions to not use deprecated nuget publisher\" (#679) at dotnet/standard","RelatedBody":"The nuget publisher vsts task is deprecated and we need to use the newer one. As part of that we also need to be pulling the api-key from key vault instead of the vsts connection pool. "},{"Id":"9239003905","Type":"IssuesEvent","CreatedAt":"2019-03-13T23:28:22","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/85","RelatedDescription":"Closed issue \"[Packaging] Specify placeholders for lib folders\" (#85) at dotnet/standard","RelatedBody":"From [the packaging spec](https://github.com/dotnet/standard/blob/fb1ae5d9c522ac63fbea9e8a788babeafcba9882/docs/netstandard-20/packaging.md#layout-of-net-standard-netstandardlibrary):\n\n> - `tools/net461`\n>   - Contains a single `netstandard.targets` file that provides reference items\n>     to all the facades\n>   - Contains `netstandard` facade, type forwarding to `mscorlib.dll`\n>   - Contains `System.Runtime`-based facades, type forwarding to `mscorlib.dll`  \n\n@weshaggard said:\n\n> We should call out what is going in the lib folders as well, which are mostly just placeholders.\n\n@ericstj, can you help with that?\n"},{"Id":"9239001493","Type":"IssuesEvent","CreatedAt":"2019-03-13T23:27:46","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/87","RelatedDescription":"Closed issue \"[Packaging] Clarify how RID-specific packages for Microsoft.NetCore.App are expressed\" (#87) at dotnet/standard","RelatedBody":"From [the packaging spec](https://github.com/dotnet/standard/blob/fb1ae5d9c522ac63fbea9e8a788babeafcba9882/docs/netstandard-20/packaging.md#layout-of-microsoftnetcoreapp):\n\n> - No implementations\n>   - All implementation pieces are in RID-specific packages\n\n@weshaggard asked:\n\n> Do we expect these to be coming in via a runtime.json file in the identity package?\n\n@ericstj, could you make a proposal?\n"},{"Id":"9238996802","Type":"IssuesEvent","CreatedAt":"2019-03-13T23:26:38","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/342","RelatedDescription":"Closed issue \"Add documentation explicity stating that a console app that refrences a net standard library needs to pull NETStandard.Library\" (#342) at dotnet/standard","RelatedBody":"Hello,\r\n\r\nI am new to using Visual Studio 2017.  I have one console application and three class libraries.  I am using Net standard 1.4 on the class libraries and net framework 4.6.1.\r\n\r\nI would appreciate it if there was an easy way to see that, in order to get my project to work, I had to use nuget to install NETStandard.Library in the documentation.  Or at least make the solution easy to find on google."},{"Id":"9238984037","Type":"IssuesEvent","CreatedAt":"2019-03-13T23:23:24","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/472","RelatedDescription":"Closed issue \"Can't create a simple Xamarin.Forms app with .NET Standard 2.0 -- ???\" (#472) at dotnet/standard","RelatedBody":"Am I missing something?\r\n\r\nI see that we can create a class library from this new platform, but not much else.  So how do we create a Xamarin.Forms app?  The solution template default is to create either an \"old\" PCL or a Shared project.  Neither of these meshes well with a solution that contains all .NET Standard 2.0 projects.  \r\n\r\nAre you releasing a new solution template to allow us to create a solution whose root project is, as expected, a .NET Standard 2.0 project?  This is essential for us app developers."},{"Id":"9238968555","Type":"IssuesEvent","CreatedAt":"2019-03-13T23:19:40","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/529","RelatedDescription":"Closed issue \"Issues with .NET Standard and Click Once\" (#529) at dotnet/standard","RelatedBody":"## Summary\r\n\r\nThere is currently a bug that prevents ClickOnce setups from correctly deploying all the necessary .NET Standard support files. But you can work this around by editing your project file.\r\n\r\n## Symptoms and root cause\r\n\r\nRunning the application from inside of Visual Studio succeeds, so does publishing and installing. But when the application is launched, it crashes with with an exception [like this one](https://github.com/dotnet/core/issues/1010):\r\n\r\n> Unable to initialize the application (Could not load file or assembly 'System.Runtime, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The System cannot find the file specified.\r\n\r\nThe root cause is bug in the way ClickOnce discovers and packages dependencies from the application project.\r\n\r\n## Workaround\r\n\r\nIn order to make sure the right files are added to your installer, you need to add a custom target to your project file:\r\n\r\n1. Right click your project and select **Unload Project**.\r\n2. Then, right click your project again and select **Edit \\<your project\\>**.\r\n3. Locate the first `<Import>` element and copy & paste the code from below before the `<Import>` element.\r\n4. Right click your project and select **Reload Project**\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <PublishFile Include=\"netfx.force.conflicts\">\r\n      <Visible>False</Visible>\r\n      <PublishState>Exclude</PublishState>\r\n      <IncludeHash>True</IncludeHash>\r\n      <FileType>Assembly</FileType>\r\n    </PublishFile>\r\n  </ItemGroup>\r\n  <Target Name=\"FixClickOnceDependencies\" BeforeTargets=\"_DeploymentComputeClickOnceManifestInfo\">\r\n    <ItemGroup>\r\n      <_noCopyRefs Include=\"@(ReferencePath)\" Condition=\"'%(ReferencePath.Private)' == 'false'\" />\r\n      <_noCopyRefsByFileName Include=\"@(_noCopyRefs->'%(FileName)')\">\r\n        <OriginalItem>%(Identity)</OriginalItem>\r\n      </_noCopyRefsByFileName>\r\n      <_libByFileName Include=\"@(ReferenceCopyLocalPaths->'%(FileName)')\">\r\n        <OriginalItem>%(Identity)</OriginalItem>\r\n      </_libByFileName>\r\n      <_overlappingRefByFileName Include=\"@(_noCopyRefsByFileName)\" Condition=\"'@(_noCopyRefsByFileName)' == '@(_libByFileName)' AND '%(Identity)' != ''\" />\r\n      <_overlappingLibByFileName Include=\"@(_libByFileName)\" Condition=\"'@(_noCopyRefsByFileName)' == '@(_libByFileName)' AND '%(Identity)' != ''\" />\r\n      <_overlappingRef Include=\"@(_overlappingRefByFileName->'%(OriginalItem)')\" />\r\n      <_overlappingLib Include=\"@(_overlappingLibByFileName->'%(OriginalItem)')\" />\r\n    </ItemGroup>\r\n    <ItemGroup Condition=\"'@(_overlappingRef)' != ''\">\r\n      <ReferencePath Remove=\"@(_overlappingRef)\" />\r\n      <ReferencePath Include=\"@(_overlappingLib)\">\r\n        <Private>True</Private>\r\n      </ReferencePath>\r\n    </ItemGroup>\r\n  </Target>\r\n```"},{"Id":"9238968125","Type":"IssuesEvent","CreatedAt":"2019-03-13T23:19:34","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/567","RelatedDescription":"Closed issue \".NET Standard issues on .NET Framework 4.7.1\" (#567) at dotnet/standard","RelatedBody":"## Summary\r\n\r\nApplications that target the .NET Framework 4.6.1 and use .NET Standard libraries may experience System.TypeLoadException exceptions when running on the .NET Framework 4.7.1\r\n\r\n## Symptoms and root cause\r\n\r\nThe .NET Framework 4.7.1 adds support for .NET Standard in-box. As part of this change, a few assemblies that used to ship independently from the .NET Framework have now been added to the .NET Framework. As these .NET Standard assemblies were not part of the .NET Framework prior to .NET 4.7.1, they were deployed with the application, and a binding redirect was added to the application's app.config file.\r\n\r\nWhen running on the .NET Framework 4.7.1, where the assemblies are now part of the Framework, the application now has two types with different identities, and that leads to a TypeLoadException. One type comes from the app-local assembly, and the other one comes from the .NET Framework assembly.\r\n\r\nAlso reported here: https://github.com/Microsoft/dotnet-framework-early-access/issues/9\r\n\r\nThe following types are potentially impacted by this issue.\r\n\r\n- System.Data.Common.DbColumn\r\n- System.Data.Common.DbDataReaderExtensions\r\n- System.Data.Common.IDbColumnSchemaGenerator\r\n- System.Diagnostics.StackFrameExtensions\r\n- System.Globalization.GlobalizationExtensions\r\n- System.Net.Sockets.SocketReceiveFromResult\r\n- System.Net.Sockets.SocketReceiveMessageFromResult\r\n- System.Net.Sockets.SocketTaskExtensions\r\n- System.Runtime.CompilerServices.TupleElementNamesAttribute\r\n- System.Runtime.InteropServices.Architecture\r\n- System.Runtime.InteropServices.OSPlatform\r\n- System.Runtime.InteropServices.RuntimeInformation\r\n- System.Runtime.Serialization.DataContractSerializerExtensions\r\n- System.Runtime.Serialization.ISerializationSurrogateProvider\r\n- System.Security.Cryptography.ECCurve\r\n- System.Security.Cryptography.ECParameters\r\n- System.Security.Cryptography.ECPoint\r\n- System.Security.Cryptography.IncrementalHash\r\n- System.Security.SecureStringMarshal\r\n- System.StringNormalizationExtensions\r\n- System.Threading.PreAllocatedOverlapped\r\n- System.Threading.ThreadPoolBoundHandle\r\n- System.TupleExtensions\r\n- System.ValueTuple\r\n- System.ValueTuple`1\r\n- System.ValueTuple`2\r\n- System.ValueTuple`3\r\n- System.ValueTuple`4\r\n- System.ValueTuple`5\r\n- System.ValueTuple`6\r\n- System.ValueTuple`7\r\n- System.ValueTuple`8\r\n- System.Xml.XPath.XDocumentExtensions\r\n\r\n### Plan\r\n\r\nWe have identified the problem and we will ship a fix for .NET Framework 4.7.1 in the next few months and in the next version of .NET Framework.\r\n\r\n## Workarounds\r\n\r\nThere are two ways to work around this issue:\r\n - When running on .NET Framework 4.7.1, remove the binding redirects from the app.config file for the assemblies that are now part of the .NET Framework.\r\n - Re-target your application to target the .NET Framwork 4.7 or .NET Framework 4.7.1.\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9240024256","Type":"PullRequestEvent","CreatedAt":"2019-03-14T04:19:28","Actor":"ericstj","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/36038","RelatedDescription":"Opened pull request \"Use ILResourceReference\" (#36038) at dotnet/corefx","RelatedBody":"Delete our custom target and use the one we've moved to IL sdk."},{"Id":"9240019186","Type":"PullRequestEvent","CreatedAt":"2019-03-14T04:17:49","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/36037","RelatedDescription":"Opened pull request \"Disable some proxy tests\" (#36037) at dotnet/corefx","RelatedBody":"Disable some problematic proxy related tests.\r\n\r\nContributes to issue #32809"},{"Id":"9240002249","Type":"IssuesEvent","CreatedAt":"2019-03-14T04:12:10","Actor":"bgrainger","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/36036","RelatedDescription":"Opened issue \"Add ADO.NET support for Utf8String\" (#36036) at dotnet/corefx","RelatedBody":"`Utf8String` is being added to .NET: #30503 #35989 \r\n\r\nThere may be opportunities to use this type in the ADO.NET API, particularly for database protocols/providers that use UTF-8 on the wire.\r\n\r\nThe most obvious enhancement seems like:\r\n\r\n```csharp\r\npublic abstract class DbDataReader\r\n{\r\n    public virtual Utf8String GetUtf8String(int ordinal) => new Utf8String(GetString(ordinal));\r\n    public virtual Utf8String GetUtf8String(string name) => GetUtf8String(GetOrdinal(name));\r\n}\r\n```\r\n\r\nPerhaps less realistically, a new `DbCommand.CommandTextUtf8` property could be added, which would be preferred over `DbCommand.CommandText` if it were set.\r\n\r\n```csharp\r\npublic abstract class DbCommand\r\n{\r\n    public virtual Utf8String CommandTextUtf8\r\n    {\r\n        get => CommandText is null ? null : new Utf8String(CommandText);\r\n        set => CommandText = value?.ToString();\r\n    }\r\n}\r\n```\r\n\r\nFinally, implementations should be encouraged to support an `Utf8String` as the value of `DbParameter.Value`.\r\n\r\nAre there any other opportunities or easy wins?\r\n\r\nRelated: #33978, https://github.com/mysql-net/MySqlConnector/issues/618"},{"Id":"9239957705","Type":"PullRequestEvent","CreatedAt":"2019-03-14T03:57:56","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36018","RelatedDescription":"Merged pull request \"Clean up some tests and move to new Azure endpoint\" (#36018) at dotnet/corefx","RelatedBody":"This PR changes the Azure test endpoint for HTTP/1.1 and WebSocket tests to use\r\nAzure App Service instead of the classic Azure Cloud Service endpoint. This now\r\nmatches the HTTP/2.0 endpoint architecture.\r\n\r\nWe are deprecating the use of Azure Cloud Service endpoints because they are hard\r\nto deploy and maintain. Azure App Service, on the other hand, provides a lot of benefits\r\nincluding built in production/staging slots, TLS certificate handling and easier\r\nintegration with Azure DevOps deployment models.\r\n\r\nThere are a few downsides to Azure App Service which are known feature limitations.\r\nSince it uses ARR (reverse proxy), it causes websocket connections to be proxied.\r\nThis results in some behavior changes for some edge condition tests we have. For example,\r\nwhen a websocket handshake fails (due to subprotocol mismatch for example), the client\r\nside doesn't see a TCP disconnect. Instead, due to the reverse proxy, we end up getting\r\nan HTTP status code (like 500). Either way, it is a websocket handshake failure. So, I've\r\nupdated a few tests to be less brittle for that. I also opened another issue #36016 to\r\ntrack moving a few websocket tests to the loopback websocket server which doesn't yet\r\nhave full capability.\r\n\r\nI also converted an HTTP statusline test to use the loopback server."},{"Id":"9239624202","Type":"PullRequestEvent","CreatedAt":"2019-03-14T02:23:08","Actor":"GrabYourPitchforks","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/36035","RelatedDescription":"Opened pull request \"Add ref asms and unit tests for Rune.Encode APIs\" (#36035) at dotnet/corefx","RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/35530.\r\n\r\nThese are the reference APIs and unit tests for the implementation at https://github.com/dotnet/coreclr/pull/23250. This PR will not pass CI until that PR has been merged into coreclr and the new binaries make their way over here to corefx."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9240220070","Type":"PullRequestEvent","CreatedAt":"2019-03-14T05:23:34","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34109","RelatedDescription":"Opened pull request \"Conditional access and null coalescing operator affect both branches\" (#34109) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/33526\r\n\r\nRemaining pure test scenarios are in `switch` constructs, which are tracked by https://github.com/dotnet/roslyn/issues/32414 (switch expressions) and https://github.com/dotnet/roslyn/issues/23944 (switch statements)"},{"Id":"9240181425","Type":"PullRequestEvent","CreatedAt":"2019-03-14T05:11:19","Actor":"chsienki","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34080","RelatedDescription":null,"RelatedBody":"- Change type comparison to ignore nullable\r\n- Add a test\r\n- Fix an existing test\r\n\r\nFixed #32934 "},{"Id":"9240181212","Type":"PullRequestEvent","CreatedAt":"2019-03-14T05:11:15","Actor":"chsienki","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34080","RelatedDescription":"Closed pull request \"Fix struct layout error when nullable enabled:\" (#34080) at dotnet/roslyn","RelatedBody":"- Change type comparison to ignore nullable\r\n- Add a test\r\n- Fix an existing test\r\n\r\nFixed #32934 "},{"Id":"9239914740","Type":"IssuesEvent","CreatedAt":"2019-03-14T03:44:55","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34108","RelatedDescription":"Opened issue \"[Regression] Usages are not highlighted is next character is an operator\" (#34108) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVersion 16.0.0 Preview 4.2 [28711.60.d16.0]\r\n\r\n**Steps to Reproduce**:\r\n\r\n``` C#\r\n        static void Main(string[] args)\r\n        {\r\n            int count = 0;\r\n\r\n            count++;    // 1\r\n            count--;    // 2\r\n            count&= 1;  // 3\r\n\r\n            Console.WriteLine(count);\r\n        }\r\n```\r\n\r\nTwo ways to reproduce this, one is a regression from 15.9 and one is not.\r\n\r\n1. Give above, put caret inside `count` in line marked with 1, 2 or 3 and then double-click `count` [Regression]\r\n\r\n-or-\r\n\r\n2. Double-click `count` in the line marked with 1, 2 or 3 [No regression - repros in 15.9]\r\n\r\n``` C#\r\n        static void Main(string[] args)\r\n        {\r\n            int count = 0;\r\n\r\n            count++;    // 1\r\n            count--;    // 2\r\n            count&= 1;  // 3\r\n\r\n            Console.WriteLine(count);\r\n        }\r\n```\r\n\r\n**Expected Behavior**:\r\nAll usages of count to be highlighted\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/54329734-09b5dc80-4667-11e9-9c55-d0fb6246f871.png)\r\n\r\n**Actual Behavior**:\r\nNo usages are highlighted\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/54329760-310ca980-4667-11e9-8a90-706b4b9ca8f1.png)\r\n\r\n\r\n"},{"Id":"9239876961","Type":"IssuesEvent","CreatedAt":"2019-03-14T03:33:37","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34107","RelatedDescription":"Opened issue \"Find all references does not support using statements\" (#34107) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio 2019 Preview 4\r\n\r\n:link: http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/522786\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nclass Example : System.IDisposable\r\n{\r\n    public void Dispose() { }\r\n    void Method()\r\n    {\r\n        using (new Example())\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n1. Place the caret on `Dispose` (the method definition)\r\n2. Place the caret on `using` (the keyword)\r\n\r\n**Expected Behavior**:\r\n\r\n1. Both `Dispose` and `using` are highlighted\r\n2. Both `Dispose` and `using` are highlighted\r\n\r\n**Actual Behavior**:\r\n\r\n1. Only `Dispose` is highlighted\r\n2. Only `using` is highlighted"},{"Id":"9239840083","Type":"IssuesEvent","CreatedAt":"2019-03-14T03:23:12","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34106","RelatedDescription":"Opened issue \"Find All References does not support LINQ\" (#34106) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio 2019 Preview 4\r\n\r\n🔗 http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/634818\r\n\r\n**Steps to Reproduce**:\r\n\r\n⚠️ The tests are written with the following form, but the syntax is not correct. The extension methods need to be updated to use a form recognized by the compiler as part of this work.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nclass C\r\n{\r\n    public IEnumerable<int> Where(Func<int, bool> pred) { return null; }\r\n    public IEnumerable<int> Select(Func<int, int> func) { return null; }\r\n    void Zap()\r\n    {\r\n        var q = from v in this\r\n                where v > 21\r\n                select v;\r\n    }\r\n}\r\n```\r\n\r\n1. Click `Where` (the method definition)\r\n2. Click `where` (the query keyword)\r\n3. Click `Select` (the method definition)\r\n4. Click `select` (the query keyword)\r\n\r\n**Expected Behavior**:\r\n\r\n1. Both `Where` and `where` are highlighted\r\n2. Both `Where` and `where` are highlighted\r\n3. Both `Select` and `select` are highlighted\r\n4. Both `Select` and `select` are highlighted\r\n\r\n**Actual Behavior**:\r\n\r\n1. Only `Where` is highlighted\r\n2. Only `Where` is highlighted\r\n3. Only `Select` is highlighted\r\n4. Only `Select` is highlighted"},{"Id":"9239795750","Type":"IssuesEvent","CreatedAt":"2019-03-14T03:10:30","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34105","RelatedDescription":"Opened issue \"'lock' statement fails to report implicit references to Monitor.Enter and Monitor.Exit\" (#34105) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio 2019 Preview 4\r\n\r\n:link: http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/528936\r\n\r\n**Steps to Reproduce**:\r\n\r\nUse the following code, with `$$` indicating the caret placement for two scenarios.\r\n\r\n```csharp\r\nusing System.Threading;\r\nusing System.Collections.Generic;\r\nclass C\r\n{\r\n    void Zap()\r\n    {\r\n        bool lockTaken = false;\r\n        Monitor.TryEn$$ter(null, ref lockTaken); // Scenario 1\r\n        Monitor.Ex$$it(null); // Scenario 2\r\n        lock (new C())\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n1. The **Highlight References** feature highlights the `lock` keyword\r\n2. **Find All References** finds the `lock` keyword\r\n\r\n**Actual Behavior**:\r\n\r\nThe `lock` keyword is not identified as a reference to `Monitor.TryEnter(object, ref bool)` or `Monitor.Exit(object)`."},{"Id":"9239660209","Type":"IssuesEvent","CreatedAt":"2019-03-14T02:32:48","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34104","RelatedDescription":"Opened issue \"Cref: constructor overload parameter list differences are disregarded in VB\" (#34104) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n🔗 http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/769477\r\n🔗 https://devdiv.visualstudio.com/defaultcollection/DevDiv/_workitems/edit/93772\r\n\r\n**Steps to Reproduce**:\r\n\r\nRoslyn as of 8/26/13.\r\n \r\n\r\n1. Open ETA, paste the following VB snippet:\r\n\r\n```vb\r\nClass A\r\n    Public Sub New()\r\n    End Sub\r\n    Public Sub New(x As Integer)\r\n    End Sub\r\nEnd Class\r\nClass Program\r\n    ''' <summary>\r\n    ''' <see cref=\"A.New()\"/>\r\n    ''' <see cref=\"A.New(Integer)\"/>\r\n    ''' </summary>\r\n    ''' <param name=\"args\"></param>\r\n    Shared Sub Main(args As String())\r\n        Dim a As A = New A()\r\n    End Sub\r\nEnd Class\r\n```\r\n\r\nPlace cursor on \"New\" inside cref=\"A.New(Integer)\" - observe both constructor overloads to become highlighted, regardless of parameter list differences (FAR also returns both of them) \r\n \r\n2. Paste the analogous C# snippet:\r\n\r\n```csharp\r\nclass A\r\n{\r\n    public A() { }\r\n    public A(int x) { }\r\n}\r\nclass Program\r\n{\r\n    /// <summary>\r\n    /// <see cref=\"A.A()\"/>\r\n    /// <see cref=\"A.A(int)\"/>\r\n    /// </summary>\r\n    /// <param name=\"args\"></param>\r\n    static void Main(string[] args)\r\n    {\r\n        A a = new A();\r\n    }\r\n}\r\n```\r\n\r\nPlace cursor on last A in cref=\"A.A(int)\" - observe only A(int x) overload becomes highlighted\r\n"},{"Id":"9239516088","Type":"PullRequestEvent","CreatedAt":"2019-03-14T01:52:23","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34103","RelatedDescription":"Opened pull request \"Workaround a deadlock caused by watching .editorconfigs\" (#34103) at dotnet/roslyn","RelatedBody":"We use the CodingConventions library from Visual Studio that parses and processes .editorconfig files for us. This library under the covers uses the Visual Studio file watching service for watching files. In Visual Studio 2017 the file watching service made the guarantee that watching files could be done in a free-threaded manner in the background and wouldn't marshal. The .editorconfig library then passed this guarantee along to us.\r\n\r\nIn Dev16, the file watching service was rewritten, and accidentally lost that guarantee in specific cases. Much of our interactions with the file change service also changed so it doesn't matter, but the .editorconfig library's use of the file watching service is causing deadlocks in some scenarios. This change is a workaround to ensure we don't start watching .editorconfig files on the background thread\r\nin places where we need to ensure we don't touch the UI thread. Ideally we'd be fixing the file change service itself to restore the guarantee, but that's too risky of a change for our current needs and\r\nisn't something we can do quickly enough to avoid customer issues.\r\n\r\nSince we're rewriting our .editorconfig handling entirely which will cause us to stop using the .editorconfig library (and by extension, it's use of this problematic file change service path), we can do\r\nthis workaround now and let the problem go away on it's own soon when we simply delete all of this.\r\n\r\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/810494"},{"Id":"9239455382","Type":"PullRequestEvent","CreatedAt":"2019-03-14T01:34:19","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34102","RelatedDescription":"Opened pull request \"Mitigation for GetTypeInfo on suppressed expression\" (#34102) at dotnet/roslyn","RelatedBody":"Completion in the IDE doesn't work because `GetTypeInfo` returns nothing for suppressed expressions. This PR mitigates this and provides the result from binding (while the deeper public API work is making progress).\r\n\r\nFYI @ivanbasov @CyrusNajmabadi "},{"Id":"9239418138","Type":"PullRequestEvent","CreatedAt":"2019-03-14T01:23:40","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33976","RelatedDescription":null,"RelatedBody":"- Rename `TypeSymbolWithAnnotations` to `TypeWithAnnotations`\r\n- Rename its type field from `TypeSymbol` to `Type`\r\n- Fields of Symbols that are of type `TypeWithAnnotations` that are currently named `Type` would be renamed `TypeWithAnnotations`\r\n- Add corresponding properties named `Type` that are of type `TypeSymbol`.\r\nFixes #33736"},{"Id":"9239417874","Type":"PullRequestEvent","CreatedAt":"2019-03-14T01:23:35","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33976","RelatedDescription":"Closed pull request \"Simplify some names in the nullable reference types feature\" (#33976) at dotnet/roslyn","RelatedBody":"- Rename `TypeSymbolWithAnnotations` to `TypeWithAnnotations`\r\n- Rename its type field from `TypeSymbol` to `Type`\r\n- Fields of Symbols that are of type `TypeWithAnnotations` that are currently named `Type` would be renamed `TypeWithAnnotations`\r\n- Add corresponding properties named `Type` that are of type `TypeSymbol`.\r\nFixes #33736"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9239843641","Type":"PullRequestEvent","CreatedAt":"2019-03-14T03:24:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7163","RelatedDescription":"Merged pull request \"Fix Auto field layout\" (#7163) at dotnet/corert","RelatedBody":"CLR doesn't actually use the largest alignment required to align size of the resulting type."},{"Id":"9239841432","Type":"PullRequestEvent","CreatedAt":"2019-03-14T03:23:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7163","RelatedDescription":null,"RelatedBody":"CLR doesn't actually use the largest alignment required to align size of the resulting type."},{"Id":"9239841288","Type":"PullRequestEvent","CreatedAt":"2019-03-14T03:23:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7163","RelatedDescription":"Closed pull request \"Fix Auto field layout\" (#7163) at dotnet/corert","RelatedBody":"CLR doesn't actually use the largest alignment required to align size of the resulting type."},{"Id":"9239833883","Type":"PullRequestEvent","CreatedAt":"2019-03-14T03:21:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7139","RelatedDescription":"Merged pull request \"Add task to dump Win32 resources\" (#7139) at dotnet/corert","RelatedBody":"This task extracts Win32 resources from the main managed assembly into a RES file that we subsequently pass as input to the platform linker.\r\n\r\nFixes #5095."},{"Id":"9239833870","Type":"IssuesEvent","CreatedAt":"2019-03-14T03:21:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5095","RelatedDescription":"Closed issue \"No app icon when set over ApplicationIcon in csproj file\" (#5095) at dotnet/corert","RelatedBody":"Right now there is no application icon when building a native binary on windows.\r\n\r\nI set it with:\r\n\r\n>   <PropertyGroup>\r\n    <AssemblyName>ArctiumWoWClientLauncher</AssemblyName>\r\n    <OutputType>Exe</OutputType>\r\n    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>\r\n    <ApplicationIcon>arctium.ico</ApplicationIcon>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <Platforms>x64</Platforms>\r\n    <PlatformTarget>x64</PlatformTarget>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\nAnd run it with \r\n`dotnet publish /t:LinkNative -r win-x64 /p:Configuration=Release /p:platform=\"x64\"`\r\n\r\nThe file `arctium.ico` is placed in the same directory than the csproj file."},{"Id":"9239831905","Type":"PullRequestEvent","CreatedAt":"2019-03-14T03:20:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7164","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7164) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks"},{"Id":"9239830648","Type":"PullRequestEvent","CreatedAt":"2019-03-14T03:20:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7159","RelatedDescription":"Closed pull request \"Test\" (#7159) at dotnet/corert","RelatedBody":""},{"Id":"9238809516","Type":"PullRequestEvent","CreatedAt":"2019-03-13T22:43:44","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7164","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7164) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9237191696","Type":"PullRequestEvent","CreatedAt":"2019-03-13T18:16:40","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7139","RelatedDescription":null,"RelatedBody":"This task extracts Win32 resources from the main managed assembly into a RES file that we subsequently pass as input to the platform linker.\r\n\r\nFixes #5095."},{"Id":"9237191464","Type":"PullRequestEvent","CreatedAt":"2019-03-13T18:16:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7139","RelatedDescription":"Closed pull request \"Add task to dump Win32 resources\" (#7139) at dotnet/corert","RelatedBody":"This task extracts Win32 resources from the main managed assembly into a RES file that we subsequently pass as input to the platform linker.\r\n\r\nFixes #5095."},{"Id":"9236993410","Type":"PullRequestEvent","CreatedAt":"2019-03-13T17:48:48","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7163","RelatedDescription":"Opened pull request \"Fix Auto field layout\" (#7163) at dotnet/corert","RelatedBody":"CLR doesn't actually use the largest alignment required to align size of the resulting type."},{"Id":"9236477417","Type":"PullRequestEvent","CreatedAt":"2019-03-13T16:41:16","Actor":"sergiy-k","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7159","RelatedDescription":null,"RelatedBody":""},{"Id":"9236476406","Type":"PullRequestEvent","CreatedAt":"2019-03-13T16:41:09","Actor":"sergiy-k","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7159","RelatedDescription":"Closed pull request \"Test\" (#7159) at dotnet/corert","RelatedBody":""},{"Id":"9235530729","Type":"PullRequestEvent","CreatedAt":"2019-03-13T14:52:37","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7162","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#7162) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9239360565","Type":"PullRequestEvent","CreatedAt":"2019-03-14T01:07:19","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3021","RelatedDescription":"Opened pull request \"Remove duplicates items from resolved publish assets.\" (#3021) at dotnet/sdk","RelatedBody":"When `CopyLocalLockFileAssemblies` was true, `ReferenceCopyLocalPaths`\r\ncontained the set of `RuntimePackAsset` items.\r\n\r\nWhen resolving assets to copy local for publish, the `RuntimePackAsset` items\r\nwere added twice: once explicitly and again via `ReferenceCopyLocalPaths`.\r\n\r\nThis commit fixes this by only adding to the resolved copy local assets for\r\npublish when `CopyLocalLockFileAssemblies` is false.\r\n\r\nFixes #3007."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-12T10:03:36","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Open PR \"Add Dave to cake.md\" (#138)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-10T16:40:38","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Open PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"420834314","IsPullRequest":true,"CreatedAt":"2019-03-14T05:09:41","Actor":"mjsabby","Number":"23251","RawContent":null,"Title":"[WIP] Add Large pages support in GC","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/18371.\r\n\r\n@Maoni0 adding [WIP] as I'll get to this in a day or so, but thought I'd start a PR so you can take a look. Not tested yet.","Url":"https://github.com/dotnet/coreclr/pull/23251","RelatedDescription":"Open PR \"[WIP] Add Large pages support in GC\" (#23251)"},{"Id":"420717733","IsPullRequest":true,"CreatedAt":"2019-03-14T02:42:29","Actor":"sywhang","Number":"23240","RawContent":null,"Title":"Disable tracing/inducedgc test on all Unix platforms","State":"closed","Body":"Addressing https://github.com/dotnet/coreclr/issues/23124#issuecomment-472479678\r\n\r\ncc @cshung @jorive ","Url":"https://github.com/dotnet/coreclr/pull/23240","RelatedDescription":"Closed or merged PR \"Disable tracing/inducedgc test on all Unix platforms\" (#23240)"},{"Id":"420797181","IsPullRequest":true,"CreatedAt":"2019-03-14T01:59:30","Actor":"GrabYourPitchforks","Number":"23250","RawContent":null,"Title":"Add Rune.{Try}Encode{AsUtf8}","State":"open","Body":"Implementation of API review at https://github.com/dotnet/corefx/issues/35530.\r\n\r\nApproved APIs:\r\n\r\n`Rune.TryEncode` (already exists)\r\n`Rune.TryEncodeAsUtf8` (already exists, but under a different name)\r\n\r\nSuggested during review that we also add these (/cc @bartonjs):\r\n\r\n`Rune.Encode` (new API, throws if destination too small)\r\n`Rune.EncodeAsUtf8` (new API, throws if destination too small)\r\n\r\nSince corefx currently exposes the old name of `TryEncodeAsUtf8`, I'm leaving both names temporarily until this syncs over to corefx, after which point we can clean it up.","Url":"https://github.com/dotnet/coreclr/pull/23250","RelatedDescription":"Open PR \"Add Rune.{Try}Encode{AsUtf8}\" (#23250)"},{"Id":"420794893","IsPullRequest":true,"CreatedAt":"2019-03-14T01:47:16","Actor":"AaronRobinsonMSFT","Number":"23249","RawContent":null,"Title":" Fix the calling convention for P/Invokes and delegates to hostpolicy","State":"open","Body":"When building the x86 in core-setup the default calling convention is defined to be `__cdecl` - since that is the default for Visual Studio projects. In the coreclr repo, the default calling convention for x86 is defined to be `__stdcall`. This has caused an issue between the API contracts for testing and has created a rather big mess. It isn't possible to change the calling convention for these APIs so we must accept them to be `__cdecl` and update the coreclr testing and product to match the API.\r\n\r\nThis issue was found when running an official SDK scenario on x86. This issue only impacts x86.\r\n\r\nThis is another issue that could have been caught with https://github.com/dotnet/core-setup/issues/5379.\r\n\r\ncc @vitek-karas @jkoritzinsky @jeffschwMSFT ","Url":"https://github.com/dotnet/coreclr/pull/23249","RelatedDescription":"Open PR \" Fix the calling convention for P/Invokes and delegates to hostpolicy\" (#23249)"},{"Id":"420791801","IsPullRequest":false,"CreatedAt":"2019-03-14T01:31:05","Actor":"VincentBu","Number":"23248","RawContent":null,"Title":"[arm] java.io.EOFException","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/arm_cross_checked_ubuntu/3276/\r\n\r\n**Log:**\r\n```\r\nFATAL: command execution failed\r\njava.io.EOFException\r\n\tat java.io.ObjectInputStream$PeekInputStream.readFully(ObjectInputStream.java:2681)\r\n\tat java.io.ObjectInputStream$BlockDataInputStream.readShort(ObjectInputStream.java:3156)\r\n\tat java.io.ObjectInputStream.readStreamHeader(ObjectInputStream.java:862)\r\n\tat java.io.ObjectInputStream.<init>(ObjectInputStream.java:358)\r\n\tat hudson.remoting.ObjectInputStreamEx.<init>(ObjectInputStreamEx.java:48)\r\n\tat hudson.remoting.AbstractSynchronousByteArrayCommandTransport.read(AbstractSynchronousByteArrayCommandTransport.java:35)\r\n\tat hudson.remoting.SynchronousCommandTransport$ReaderThread.run(SynchronousCommandTransport.java:63)\r\nCaused: java.io.IOException: Unexpected termination of the channel\r\n\tat hudson.remoting.SynchronousCommandTransport$ReaderThread.run(SynchronousCommandTransport.java:77)\r\nCaused: java.io.IOException: Backing channel 'ubuntu1604-20170925-1-c72ee0' is disconnected.\r\n\tat hudson.remoting.RemoteInvocationHandler.channelOrFail(RemoteInvocationHandler.java:212)\r\n\tat hudson.remoting.RemoteInvocationHandler.invoke(RemoteInvocationHandler.java:281)\r\n\tat com.sun.proxy.$Proxy185.isAlive(Unknown Source)\r\n\tat hudson.Launcher$RemoteLauncher$ProcImpl.isAlive(Launcher.java:1138)\r\n\tat hudson.Launcher$RemoteLauncher$ProcImpl.join(Launcher.java:1130)\r\n\tat hudson.tasks.CommandInterpreter.join(CommandInterpreter.java:155)\r\n\tat hudson.tasks.CommandInterpreter.perform(CommandInterpreter.java:109)\r\n\tat hudson.tasks.CommandInterpreter.perform(CommandInterpreter.java:66)\r\n\tat hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java:20)\r\n\tat hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:744)\r\n\tat hudson.model.Build$BuildExecution.build(Build.java:206)\r\n\tat hudson.model.Build$BuildExecution.doRun(Build.java:163)\r\n\tat hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:504)\r\n\tat hudson.model.Run.execute(Run.java:1724)\r\n\tat hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)\r\n\tat hudson.model.ResourceController.execute(ResourceController.java:97)\r\n\tat hudson.model.Executor.run(Executor.java:429)\r\nBuild step 'Execute shell' marked build as failure\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23248","RelatedDescription":"Open issue \"[arm] java.io.EOFException\" (#23248)"},{"Id":"420788968","IsPullRequest":true,"CreatedAt":"2019-03-14T01:17:48","Actor":"janvorli","Number":"23247","RawContent":null,"Title":"Fix GetProcessAffinityMask","State":"open","Body":"The function was returning mask not expected by runtime for coreclr\r\nbuilt with NUMA enabled on machines with multiple NUMA nodes.\r\nThe mask was 0 in case the current process was affinitized to CPUs\r\nfrom multiple NUMA nodes. It was following MSDN doc, however the\r\ndoc turned out to be ambiguous. Moreover, the runtime depended\r\non the fact that on Windows, a process is never run on multiple\r\nNUMA nodes unless is explicitly calls APIs to set ideal processor\r\nfor threads. But on Unix, there is no such case and by default, a\r\nprocess is affinitized to all existing processors over all NUMA\r\nnodes.\r\n\r\nAnd there was one more issue. The GetProcessAffinityMask was returning\r\na mask within a single CPU group, which is a transformed view of\r\nNUMA node on Windows. So the CPU indices in the mask didn't necessarily\r\ncorrespond to the native Unix CPU indices. But, the SetThreadAffinityMask\r\nwas using the native Unix CPU indices.\r\n\r\nTo fix the problem, the GetProcessAffinityMask is changed so that\r\nit always returns a mask corresponding to the native Unix CPU indices\r\n(reporting upto 64 processors as the mask is 64 bit wide). Thus it\r\ncorresponds to what the SetThreadAffinityMask expects. And it also exactly\r\nmatches the behavior when NUMA support is not compiled in.\r\nMoreover, the COMPlus_GCHeapAffinitizeMask bits now correspond to\r\nthe native Unix CPU indices.\r\n\r\nThe GetProcessAffinityMask is used by GC and thread pool only when\r\nNUMA is not enabled using the COMPlus_GCCpuGroup env variable.\r\n\r\nClose #22961","Url":"https://github.com/dotnet/coreclr/pull/23247","RelatedDescription":"Open PR \"Fix GetProcessAffinityMask\" (#23247)"},{"Id":"420784121","IsPullRequest":true,"CreatedAt":"2019-03-14T00:54:02","Actor":"sandreenko","Number":"23246","RawContent":null,"Title":"Disable EnableNgenOptimization to disable copying of IBC data.","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23246","RelatedDescription":"Open PR \"Disable EnableNgenOptimization to disable copying of IBC data.\" (#23246)"},{"Id":"420464662","IsPullRequest":true,"CreatedAt":"2019-03-14T00:27:23","Actor":"dotnet-maestro[bot]","Number":"23227","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview4.19162.12\r\n- Microsoft.Private.CoreFx.NETCoreApp - 4.6.0-preview4.19162.12\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/23227","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#23227)"},{"Id":"420776302","IsPullRequest":true,"CreatedAt":"2019-03-14T00:14:40","Actor":"sandreenko","Number":"23245","RawContent":null,"Title":"Fix Linux public pool.","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23245","RelatedDescription":"Open PR \"Fix Linux public pool.\" (#23245)"},{"Id":"420772408","IsPullRequest":true,"CreatedAt":"2019-03-13T23:57:29","Actor":"BruceForstall","Number":"23244","RawContent":null,"Title":"Introduce COMPlus arm64 HW intrinsics knobs","State":"open","Body":"Adds variables to disable each HW intrinsics class.\r\n\r\nFixes #20708","Url":"https://github.com/dotnet/coreclr/pull/23244","RelatedDescription":"Open PR \"Introduce COMPlus arm64 HW intrinsics knobs\" (#23244)"},{"Id":"420645142","IsPullRequest":true,"CreatedAt":"2019-03-13T23:43:07","Actor":"jorive","Number":"23232","RawContent":null,"Title":"Test failure: TwoKeywords: Time Out: Issue #23224","State":"closed","Body":"Fixes #23224","Url":"https://github.com/dotnet/coreclr/pull/23232","RelatedDescription":"Closed or merged PR \"Test failure: TwoKeywords: Time Out: Issue #23224\" (#23232)"},{"Id":"420729932","IsPullRequest":true,"CreatedAt":"2019-03-13T21:38:42","Actor":"hoyosjs","Number":"23243","RawContent":null,"Title":"Update images in documentation for docker builds to point to registry","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23243","RelatedDescription":"Closed or merged PR \"Update images in documentation for docker builds to point to registry\" (#23243)"},{"Id":"420723940","IsPullRequest":false,"CreatedAt":"2019-03-13T21:17:51","Actor":"sandreenko","Number":"23242","RawContent":null,"Title":"[Ubuntu][arm64] CoreFX RunRegionSpecificStandardFormatToStringTests timeout.","State":"open","Body":"The test fails in Jenkins with timeout:\r\n```\r\n~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst_prtest/_/fx/artifacts/bin/tests/System.Runtime.Numerics.Tests/netcoreapp-Linux-Release-arm64\r\n  Discovering: System.Runtime.Numerics.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Runtime.Numerics.Tests (found 220 of 236 test cases)\r\n  Starting:    System.Runtime.Numerics.Tests (parallel test collections = on, max threads = 46)\r\n    System.Numerics.Tests.ToStringTest.RunRegionSpecificStandardFormatToStringTests [FAIL]\r\n      Timed out after 60000ms waiting for remote process 18359\r\n   System.Runtime.Numerics.Tests  Total: 2087, Errors: 0, Failed: 1, Skipped: 0, Time: 116.938s\r\n\r\n```\r\n\r\nIt passes in CoreFX arm64 Linux Release testing ([example](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F35919~2Fmerge/test~2Ffunctional~2Fcli~2F/20190309.19/workItem/System.Runtime.Numerics.Tests/wilogs)) and takes ~10 seconds:\r\n~/dotnetbuild/work/01450a41-3792-437e-b769-26dd789bf68f/Work/8c89a9aa-a6fe-4a55-897f-d0468967ecae/Exec ~/dotnetbuild/work/01450a41-3792-437e-b769-26dd789bf68f/Work/8c89a9aa-a6fe-4a55-897f-d0468967ecae/Exec\r\n```\r\n  Discovering: System.Runtime.Numerics.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Runtime.Numerics.Tests (found 220 of 236 test cases)\r\n  Starting:    System.Runtime.Numerics.Tests (parallel test collections = on, max threads = 2)\r\n  Finished:    System.Runtime.Numerics.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Runtime.Numerics.Tests  Total: 2087, Errors: 0, Failed: 0, Skipped: 0, Time: 10.599s\r\n```\r\n\r\n[Jenkins example.](https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_baseline_flow/169/)\r\n\r\nCan be a bad Jit throughput in checked. \r\n[Test source code](https://github.com/dotnet/corefx/blob/3c127cf75ae1915b2b2cd7e898ac9f57524a9c79/src/System.Runtime.Numerics/tests/BigInteger/BigIntegerToStringTests.cs#L189).","Url":"https://github.com/dotnet/coreclr/issues/23242","RelatedDescription":"Open issue \"[Ubuntu][arm64] CoreFX RunRegionSpecificStandardFormatToStringTests timeout.\" (#23242)"},{"Id":"420723898","IsPullRequest":false,"CreatedAt":"2019-03-13T21:17:45","Actor":"gafter","Number":"23241","RawContent":null,"Title":"New IL instruction for typeswich","State":"open","Body":"It would be very convenient to have a CLR instruction for switching on the type of an object.  The C# compiler could use this to generate code for a pattern-matching switch statement.  The IL instruction would be followed by a series of *(type, label)* pairs.  At runtime it would consume its operand, determine the first type in the list that the object inherits from, and jump to the corresponding label.\r\n\r\nWe currently generate a series of type tests and branches for this case.","Url":"https://github.com/dotnet/coreclr/issues/23241","RelatedDescription":"Open issue \"New IL instruction for typeswich\" (#23241)"},{"Id":"420708110","IsPullRequest":true,"CreatedAt":"2019-03-13T20:37:53","Actor":"gfoidl","Number":"23239","RawContent":null,"Title":"Fewer instructions for check if either start or length != 0","State":"open","Body":"Cf. https://github.com/dotnet/coreclr/pull/23209#discussion_r265271039\r\n\r\n/CC: @GrabYourPitchforks ","Url":"https://github.com/dotnet/coreclr/pull/23239","RelatedDescription":"Open PR \"Fewer instructions for check if either start or length != 0\" (#23239)"},{"Id":"420707697","IsPullRequest":true,"CreatedAt":"2019-03-13T20:36:50","Actor":"EgorBo","Number":"23238","RawContent":null,"Title":"Move TypeLoadException to shared","State":"open","Body":"Or it's better to if-def CoreCLR specific code for changes like this?","Url":"https://github.com/dotnet/coreclr/pull/23238","RelatedDescription":"Open PR \"Move TypeLoadException to shared\" (#23238)"},{"Id":"420687246","IsPullRequest":false,"CreatedAt":"2019-03-13T20:12:54","Actor":"sandreenko","Number":"23235","RawContent":null,"Title":"tracing\\keyword\\TwoKeywords often fails with timeout","State":"closed","Body":"This test often fails on x86 release with \"Timed Out\".\r\n\r\nThe test was added in #23094. \r\n\r\n[An example from x86 release scheduled job. ](https://ci.dot.net/job/dotnet_coreclr/job/master/job/x86_release_windows_nt/6462/)\r\n[\r\nexample from a PR triggered job](https://ci.dot.net/job/dotnet_coreclr/job/master/job/x86_release_windows_nt_innerloop_prtest/13430/).\r\n\r\nLooks like it happens only on x86 release.","Url":"https://github.com/dotnet/coreclr/issues/23235","RelatedDescription":"Closed issue \"tracing\\keyword\\TwoKeywords often fails with timeout\" (#23235)"},{"Id":"420691863","IsPullRequest":true,"CreatedAt":"2019-03-13T20:08:39","Actor":"sandreenko","Number":"23237","RawContent":null,"Title":"exclude tracing/keyword/TwoKeywords/TwoKeywords on WIndows x86.","State":"closed","Body":"Revert when #23235 get fixed.","Url":"https://github.com/dotnet/coreclr/pull/23237","RelatedDescription":"Closed or merged PR \"exclude tracing/keyword/TwoKeywords/TwoKeywords on WIndows x86.\" (#23237)"},{"Id":"420690247","IsPullRequest":true,"CreatedAt":"2019-03-13T19:59:47","Actor":"jcagme","Number":"23236","RawContent":null,"Title":"Update optimization repo url","State":"closed","Body":"We did some work in arcade to normalize repo URLs since we found various types. While existing URLs which are not normalized will continue to work we want to keep all existing things in a \"clean\" and normalized way.","Url":"https://github.com/dotnet/coreclr/pull/23236","RelatedDescription":"Closed or merged PR \"Update optimization repo url\" (#23236)"},{"Id":"420668523","IsPullRequest":true,"CreatedAt":"2019-03-13T19:01:21","Actor":"mikedn","Number":"23234","RawContent":null,"Title":"Improve LclVar sorting throughput","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23234","RelatedDescription":"Open PR \"Improve LclVar sorting throughput\" (#23234)"},{"Id":"420548366","IsPullRequest":true,"CreatedAt":"2019-03-13T18:50:54","Actor":"Dotnet-GitSync-Bot","Number":"23229","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/coreclr/pull/23229","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#23229)"},{"Id":"420427038","IsPullRequest":true,"CreatedAt":"2019-03-13T18:50:14","Actor":"MichalStrehovsky","Number":"23225","RawContent":null,"Title":"Enable FeatureDefaultInterfaces unconditionally","State":"closed","Body":"Fixes #22940.","Url":"https://github.com/dotnet/coreclr/pull/23225","RelatedDescription":"Closed or merged PR \"Enable FeatureDefaultInterfaces unconditionally\" (#23225)"},{"Id":"420658779","IsPullRequest":true,"CreatedAt":"2019-03-13T18:38:39","Actor":"BruceForstall","Number":"23233","RawContent":null,"Title":"Enable function unwind data splitting stress","State":"open","Body":"This applies to arm32 and arm64.\r\n\r\nAdd new stress mode STRESS_UNWIND. Under this switch, force creating\r\nmultiple unwind fragments. This is most interesting in conjunction\r\nwith GCStress, which does more stack walks.\r\n\r\nFixes #22169 ","Url":"https://github.com/dotnet/coreclr/pull/23233","RelatedDescription":"Open PR \"Enable function unwind data splitting stress\" (#23233)"},{"Id":"420637822","IsPullRequest":true,"CreatedAt":"2019-03-13T17:51:50","Actor":"elinor-fung","Number":"23231","RawContent":null,"Title":"Port AMSI scanning for assembly loads","State":"open","Body":"Pass all assemblies loaded from byte arrays to AmsiScanBuffer on Windows.\r\nPort from .NET Framework 4.8\r\n\r\nFixes #21370","Url":"https://github.com/dotnet/coreclr/pull/23231","RelatedDescription":"Open PR \"Port AMSI scanning for assembly loads\" (#23231)"},{"Id":"420597515","IsPullRequest":false,"CreatedAt":"2019-03-13T16:28:36","Actor":"tannergooding","Number":"23230","RawContent":null,"Title":"Marshal.SizeOf throws for enum types","State":"open","Body":"Attempting to call `Marshal.SizeOf` for an enum type currently results in the following:\r\n```csharp\r\nType '*' cannot be marshaled as an unmanaged structure; no meaningful size or offset can be computed.\r\n  + System.Runtime.InteropServices.Marshal.SizeOfHelper(System.Type, bool)\r\n```\r\n\r\nAs far as I am aware, enums are considered to be blittable as they are internally just a value type that contains a single field of a blittable type (generally this is `int32`). However, there isn't anything explicit about enum marshalling in https://docs.microsoft.com/en-us/dotnet/framework/interop/blittable-and-non-blittable-types.\r\n\r\nI would expect the above call to succeed and for there to be documentation on the blittability of enum types.","Url":"https://github.com/dotnet/coreclr/issues/23230","RelatedDescription":"Open issue \"Marshal.SizeOf throws for enum types\" (#23230)"},{"Id":"420528413","IsPullRequest":false,"CreatedAt":"2019-03-13T14:24:30","Actor":"thewilsonator","Number":"23228","RawContent":null,"Title":"Stack Overflow with PAL in coreclr_initialize","State":"open","Body":"OS: OSX\r\nUsing the latest release.\r\n\r\nTrace looks like:\r\n```\r\n    frame #6210: 0x0000000101105b31 libcoreclr.dylib`::PAL_atexit(function=0x00000001063aa400)()) + 952961 at thread.cpp:47\r\n    frame #6211: 0x00000001011063f9 libcoreclr.dylib`CorUnix::CreateThreadData(CorUnix::CPalThread**) + 185 at thread.cpp:35\r\n    frame #6212: 0x0000000101050740 libcoreclr.dylib`AllocatePalThread(ppThread=0x0000700000f415e8) + 32 at sxs.cpp:112\r\n    frame #6213: 0x0000000101050817 libcoreclr.dylib`::CreateCurrentThreadData() + 39 at sxs.cpp:95\r\n    frame #6214: 0x0000000101003191 libcoreclr.dylib`CorUnix::InternalGetCurrentThread() + 33 at thread.hpp:752\r\n    frame #6215: 0x000000010110b8d7 libcoreclr.dylib`CorUnix::CThreadTLSInfo::InitializePostCreate(this=0x00000001063a9f00, pThread=0x00000001063a9800, threadId=7432014, dwLwpId=0) + 87 at tls.cpp:220\r\n```\r\nit only crashes under a debugger, it simply hangs on further API calls when not.\r\n\r\nI note [the source](https://github.com/dotnet/coreclr/blob/fcfc3baa491b0ac7eb6a9cb73e3b2d46cb5929a0/src/dlls/mscoree/unixinterface.cpp#L179) says to return early to avoid more errors with PAL. Passing completely bogus values for every parameter seems to make no difference, the HRESULT is always 8007001f (when not debugging).\r\n\r\nI have a couple of questions: what is PAL? do I need it? Assuming no, how do I build without it? \r\n\r\nThanks","Url":"https://github.com/dotnet/coreclr/issues/23228","RelatedDescription":"Open issue \"Stack Overflow with PAL in coreclr_initialize\" (#23228)"},{"Id":"420464636","IsPullRequest":true,"CreatedAt":"2019-03-13T12:06:40","Actor":"dotnet-maestro[bot]","Number":"23226","RawContent":null,"Title":"[master] Update dependencies from  1 repositories","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://dnceng@dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n\r\n- optimization.IBC.CoreCLR - 99.99.99-master-20190312.5\r\n- optimization.PGO.CoreCLR - 99.99.99-master-20190312.5\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/23226","RelatedDescription":"Open PR \"[master] Update dependencies from  1 repositories\" (#23226)"},{"Id":"420334546","IsPullRequest":false,"CreatedAt":"2019-03-13T06:17:08","Actor":"dotnet-mc-bot","Number":"23224","RawContent":null,"Title":"Test failure: tracing_keyword._TwoKeywords_TwoKeywords_TwoKeywords_/_TwoKeywords_TwoKeywords_TwoKeywords_cmd","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `tracing_keyword._TwoKeywords_TwoKeywords_TwoKeywords_/_TwoKeywords_TwoKeywords_TwoKeywords_cmd` has failed.\n\nFailure Message:\n```\n\ncmdLine:C:\\\\dotnetbuild\\\\work\\\\594f9a96-809a-4e18-9bd6-6d37ed8c15a9\\\\Work\\\\6f602446-99d4-46b8-b5dd-f9b3792db854\\\\Exec\\\\TwoKeywords\\\\TwoKeywords\\\\TwoKeywords.cmd Timed Out\\r\n\n\nReturn code:      -100\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\594f9a96-809a-4e18-9bd6-6d37ed8c15a9\\\\Work\\\\6f602446-99d4-46b8-b5dd-f9b3792db854\\\\Exec\\\\Reports\\\\tracing.keyword\\\\TwoKeywords\\\\TwoKeywords\\\\TwoKeywords.output.txt\nRaw output:\nBEGIN EXECUTION\\r\n        1 file(s) copied.\\r\n\\\" C:\\\\dotnetbuild\\\\work\\\\594f9a96-809a-4e18-9bd6-6d37ed8c15a9\\\\Payload\\\\crossgen.exe\\\"  /Platform_Assemblies_Paths C:\\\\dotnetbuild\\\\work\\\\594f9a96-809a-4e18-9bd6-6d37ed8c15a9\\\\Payload;C:\\\\dotnetbuild\\\\work\\\\594f9a96-809a-4e18-9bd6-6d37ed8c15a9\\\\Work\\\\6f602446-99d4-46b8-b5dd-f9b3792db854\\\\Exec\\\\TwoKeywords\\\\TwoKeywords\\\\IL;C:\\\\dotnetbuild\\\\work\\\\594f9a96-809a-4e18-9bd6-6d37ed8c15a9\\\\Work\\\\6f602446-99d4-46b8-b5dd-f9b3792db854\\\\Exec\\\\TwoKeywords\\\\TwoKeywords /in TwoKeywords.org /out TwoKeywords.exe\\r\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\\r\n\\r\nNative image TwoKeywords.exe generated successfully.\\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\594f9a96-809a-4e18-9bd6-6d37ed8c15a9\\\\Payload\\\\corerun.exe\\\" TwoKeywords.exe \\r\nCalculated config file path: C:\\\\dotnetbuild\\\\work\\\\594f9a96-809a-4e18-9bd6-6d37ed8c15a9\\\\Work\\\\6f602446-99d4-46b8-b5dd-f9b3792db854\\\\Exec\\\\TwoKeywords\\\\TwoKeywords\\\\TwoKeywords.eventpipeconfig\\r\nWrote contents of config file.\\r\nWaiting 25 seconds for the config file to be picked up by the next poll operation.\\r\nDo some work that will be captured by the trace.\\r\nDone with the work.\\r\nDeleted the config file.\\r\n\ncmdLine:C:\\\\dotnetbuild\\\\work\\\\594f9a96-809a-4e18-9bd6-6d37ed8c15a9\\\\Work\\\\6f602446-99d4-46b8-b5dd-f9b3792db854\\\\Exec\\\\TwoKeywords\\\\TwoKeywords\\\\TwoKeywords.cmd Timed Out\\r\nTest Harness Exitcode is : -100\\r\n\nTo run the test:\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\594f9a96-809a-4e18-9bd6-6d37ed8c15a9\\\\Payload\n> C:\\\\dotnetbuild\\\\work\\\\594f9a96-809a-4e18-9bd6-6d37ed8c15a9\\\\Work\\\\6f602446-99d4-46b8-b5dd-f9b3792db854\\\\Exec\\\\TwoKeywords\\\\TwoKeywords\\\\TwoKeywords.cmd\n\\r\nExpected: True\\r\nActual:   False\n```\n\nStack Trace:\n```\n   at tracing_keyword._TwoKeywords_TwoKeywords_TwoKeywords_._TwoKeywords_TwoKeywords_TwoKeywords_cmd() in F:\\vsagent\\6\\s\\bin\\tests\\Windows_NT.arm64.Release\\TestWrappers\\tracing.keyword\\tracing.keyword.XUnitWrapper.cs:line 109\n```\n\nBuild : 3.0 - 20190312.77 (Ready-To-Run Tests)\nFailing configurations:\n- Windows.10.Arm64\n  - arm64\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20190312.77/workItem/tracing.keyword/analysis/xunit/tracing_keyword._TwoKeywords_TwoKeywords_TwoKeywords_~2F_TwoKeywords_TwoKeywords_TwoKeywords_cmd","Url":"https://github.com/dotnet/coreclr/issues/23224","RelatedDescription":"Open issue \"Test failure: tracing_keyword._TwoKeywords_TwoKeywords_TwoKeywords_/_TwoKeywords_TwoKeywords_TwoKeywords_cmd\" (#23224)"},{"Id":"420294980","IsPullRequest":false,"CreatedAt":"2019-03-13T03:01:13","Actor":"kouvel","Number":"23222","RawContent":null,"Title":"Update PerfView to separate tiers with a switch","State":"open","Body":"To be able to tell how much time is being spent in tier 0 vs tier 1","Url":"https://github.com/dotnet/coreclr/issues/23222","RelatedDescription":"Open issue \"Update PerfView to separate tiers with a switch\" (#23222)"},{"Id":"420304430","IsPullRequest":false,"CreatedAt":"2017-05-15T07:38:45","Actor":"kpreisser","Number":"23223","RawContent":null,"Title":"ConditionalWeakTable causes a memory leak if one of their values references the table","State":"open","Body":"Hi,\r\n\r\nI found an odd behavior of `System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>` in both .NET Core and .NET Framework which looks like a bug to me: If you create multiple instances of the `ConditionalWeakTable` and store a key-value pairs in them, where the key stays alive and the value contains a reference to the `ConditionalWeakTable`, the values are not garbage-collected after they (and the `ConditionalWeakTable`s) are no longer referenced.\r\n\r\nFor example, create a .NET Core Console application with the following code:\r\n```c#\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nnamespace ConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            object key = new object();\r\n            while (true) {\r\n                var table = new ConditionalWeakTable<object, Tuple<object, byte[]>>();\r\n                table.Add(key, new Tuple<object, byte[]>(table, new byte[1000000]));\r\n\r\n                GC.Collect();\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nExpected behavior: The memory consumption of the program should stay in the same area, because when a new `ConditionalWeakTable` instance is created, there are no more references to the previous `ConditionalWeakTable` and its `Tuple` value, so they should be able to be reclaimed by the Garbage Collector.\r\n\r\nActual behavior: The memory consumption rises rapidly (4 GB after some seconds) until an `OutOfMemoryException` is thrown, as the byte arrays are not reclaimed by the garbage collector.\r\n\r\nHowever, if you remove the reference to the table by replacing `table.Add(...)` with `table.Add(key, new Tuple<object, byte[]>(null, new byte[1000000]))`, the problem disappears.\r\n\r\nIf the algorithm cannot be implemented such that it can detect that there are no more references to the table and its values, I think the `ConditionalWeakTable` should implement a `Dispose()` method that allows to clear all key-value-pairs.\r\n\r\nThe behavior is the same for .NET Core (.NETCoreAPP 1.1) and .NET Framework 4.6.2.\r\n\r\nThanks!","Url":"https://github.com/dotnet/coreclr/issues/23223","RelatedDescription":"Open issue \"ConditionalWeakTable causes a memory leak if one of their values references the table\" (#23223)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"420246664","IsPullRequest":false,"CreatedAt":"2019-03-13T17:55:53","Actor":"vellozzi","Number":"10969","RawContent":null,"Title":"v2.1.505+dependencies tag is wrong","State":"closed","Body":"If you look at the [v2.1.505+dependencies](https://github.com/dotnet/cli/commits/v2.1.505%2Bdependencies) tag the tagged commit is [ad523ce44af2876afb3eddbf5a71fdf294ac2bd7](https://github.com/dotnet/cli/commit/ad523ce44af2876afb3eddbf5a71fdf294ac2bd7).\r\n\r\nBut if you look at the [Release/2.1.5xx branch](https://github.com/dotnet/cli/commits/release/2.1.5xx) commit [35fbd6d033612a55ab4a1fcdfbd3ab4c36e8b49e](https://github.com/dotnet/cli/commit/35fbd6d033612a55ab4a1fcdfbd3ab4c36e8b49e) looks like it's the one that should be tagged as v2.1.505+dependencies.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10969","RelatedDescription":"Closed issue \"v2.1.505+dependencies tag is wrong\" (#10969)"},{"Id":"420462402","IsPullRequest":true,"CreatedAt":"2019-03-13T14:32:01","Actor":"dotnet-bot","Number":"10973","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10973","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10973)"},{"Id":"420328208","IsPullRequest":true,"CreatedAt":"2019-03-13T14:32:00","Actor":"livarcocc","Number":"10972","RawContent":null,"Title":"Merges/release/2.1.6xx to release/2.2.2xx (manual)","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10972","RelatedDescription":"Closed or merged PR \"Merges/release/2.1.6xx to release/2.2.2xx (manual)\" (#10972)"},{"Id":"420462559","IsPullRequest":true,"CreatedAt":"2019-03-13T12:36:42","Actor":"dotnet-maestro[bot]","Number":"10975","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10975","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10975)"},{"Id":"420462579","IsPullRequest":true,"CreatedAt":"2019-03-13T12:31:44","Actor":"dotnet-maestro[bot]","Number":"10976","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19162.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10976","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10976)"},{"Id":"420462429","IsPullRequest":true,"CreatedAt":"2019-03-13T12:01:10","Actor":"dotnet-bot","Number":"10974","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10974","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#10974)"},{"Id":"420320448","IsPullRequest":true,"CreatedAt":"2019-03-13T05:51:06","Actor":"livarcocc","Number":"10971","RawContent":null,"Title":"Update branding to 2.2.202","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10971","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.202\" (#10971)"},{"Id":"420313665","IsPullRequest":true,"CreatedAt":"2019-03-13T05:42:17","Actor":"livarcocc","Number":"10970","RawContent":null,"Title":"Fix branding and implicit versions for 2.1.6xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10970","RelatedDescription":"Closed or merged PR \"Fix branding and implicit versions for 2.1.6xx\" (#10970)"},{"Id":"419064509","IsPullRequest":true,"CreatedAt":"2019-03-13T05:08:48","Actor":"dotnet-bot","Number":"10955","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10955","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10955)"},{"Id":"419064506","IsPullRequest":true,"CreatedAt":"2019-03-13T04:33:18","Actor":"dotnet-bot","Number":"10954","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10954","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#10954)"},{"Id":"419088891","IsPullRequest":false,"CreatedAt":"2019-03-13T04:22:51","Actor":"mika-s","Number":"10957","RawContent":null,"Title":"Metadata not shown for F# dlls when using dotnet cli to build","State":"closed","Body":"This is similar to [this](https://github.com/Microsoft/visualfsharp/issues/5657) issue, but for the dotnet cli tool rather than when compiling with Visual Studio 2017.\r\n\r\nVersion 2.2.104 is the latest stable version as of this date, so this issue is filed for that particular version.\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a folder and make a file called global.json in it. Add the following content to it and save:\r\n\r\n```json\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.2.104\"\r\n  }\r\n}\r\n```\r\n\r\nThis forces dotnet to use version 2.2.104 in case the preview version (3.0) is installed. Run `dotnet --version` to verify.\r\n\r\n2. In the created folder, create a new solution with `dotnet new sln -o FSharpMetadata`.\r\n\r\n3. `cd FSharpMetadata`\r\n\r\n4. `dotnet new console -lang F# -o testproj`\r\n\r\n5. `dotnet sln add testproj`\r\n\r\n6. Open testproj.fsproj with an editor and add the following to the `PropertyGroup` element.\r\n\r\n```xml\r\n    <Authors>My author</Authors>\r\n    <AssemblyName>testproj</AssemblyName>\r\n    <RunPostBuildEvent>0</RunPostBuildEvent>\r\n    <Version>1.0.0</Version>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n```\r\n\r\n7. `dotnet build`\r\n\r\n8. `dotnet run --project testproj`\r\n\r\n9. Go to `FSharpMetadata\\testproj\\bin\\Debug\\netcoreapp2.2`, right click on testproj.dll and choose Properties. Go to the Details tab.\r\n\r\n## Expected  behavior\r\n\r\n1. *2.2.104* is shown in the console.\r\n\r\n2. FSharpMetadata folder created, with FSharpMetadata.sln in it.\r\n\r\n3. New working folder is *FSharpMetadata*.\r\n\r\n4. testproj folder created, with testproj.fsproj in it, as well as a few other files.\r\n\r\n5. testproj is added to the sln file.\r\n\r\n6. testproj.fsproj should look like this:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <Authors>My author</Authors>\r\n    <AssemblyName>testproj</AssemblyName>\r\n    <RunPostBuildEvent>0</RunPostBuildEvent>\r\n    <Version>1.0.0</Version>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"Program.fs\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n7. The project is build. testproj.dll is created.\r\n\r\n8.  *Hello World from F#!* is shown in the console. This is to test that building works.\r\n\r\n9. File description has content (e.g. testproj), File version has content (e.g. 1.0.0.0), Product name has content (e.g. testproj), Product version has content (1.0.0), Original filename has content (e.g. testproj.dll).\r\n\r\n## Actual behavior\r\n\r\nAs expected, except for 9). Only Type, Size and Date modified have values. It looks like the screenshots that I posted when I made VS issue. See [here](https://developercommunity.visualstudio.com/content/problem/336722/metadata-not-shown-for-f-dlls-for-net-core.html).\r\n\r\nIf you try to run the repro, but change language to C#, you will get proper metadata for the dll.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n## For searchability\r\n\r\nAttributeInfo","Url":"https://github.com/dotnet/cli/issues/10957","RelatedDescription":"Closed issue \"Metadata not shown for F# dlls when using dotnet cli to build\" (#10957)"},{"Id":"419394583","IsPullRequest":false,"CreatedAt":"2019-03-12T17:05:29","Actor":"baruchiro","Number":"10963","RawContent":null,"Title":"dotnet SDK 2.2.104 don't compile .NET Core 2.2","State":"closed","Body":"## Steps to reproduce\r\nI have a .NET Sdk version 2.1 and lower.\r\nI installed sdk2.2 and sdk3.\r\nI removed sdk3\r\n\r\n## Expected  behavior\r\n`dotnet build` build my project.\r\n\r\n## Actual behavior\r\n`dotnet build`:\r\n```\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 2.2.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2. [C:\\Users\\.......\\WebApi.csproj]\r\n\r\nBuild FAILED.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 2.2.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2. [C:\\Users\\.......\\WebApi.csproj]\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.17\r\n```\r\n\r\n## Environment data\r\n`dotnet --info`:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n`WebApi.csproj`:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\r\n    <NoWarn>1701;1702;CS1591</NoWarn>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.Bot.Builder.Integration.AspNet.Core\" Version=\"4.3.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.2.2\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.2.2\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"4.0.1\" />\r\n  </ItemGroup>\r\n\r\n\r\n</Project>\r\n```","Url":"https://github.com/dotnet/cli/issues/10963","RelatedDescription":"Closed issue \"dotnet SDK 2.2.104 don't compile .NET Core 2.2\" (#10963)"},{"Id":"419948397","IsPullRequest":true,"CreatedAt":"2019-03-12T12:31:36","Actor":"dotnet-maestro[bot]","Number":"10968","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19161.14\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10968","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10968)"},{"Id":"419948215","IsPullRequest":true,"CreatedAt":"2019-03-12T12:31:14","Actor":"dotnet-maestro[bot]","Number":"10967","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19161.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10967","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10967)"},{"Id":"419658240","IsPullRequest":false,"CreatedAt":"2019-03-11T22:55:43","Actor":"fubar-coder","Number":"10966","RawContent":null,"Title":"dotnet --info shows runtimes and sdks twice","State":"closed","Body":"Reopened issue (was: #10479)\r\n\r\n## Steps to reproduce\r\n\r\n1. Ensure that the \"Path\" environment variable contains \"c:\\program files\\dotnet\" (with the same casing)\r\n2. dotnet --info\r\n\r\n## Expected  behavior\r\n\r\nShow every SDK and runtime once.\r\n\r\n## Actual behavior\r\n\r\nShows every SDK and runtime twice.\r\n\r\n## What I found out\r\n\r\nWhen I change the \"Path\" environment variable to use \"C:\\Program Files\\dotnet\", then everything works as expected. It seems that there is a case-sensitive `Distinct` list of SDK paths even though it should be case-insensitive on Windows.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```text\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   c:\\program files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [c:\\program files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [c:\\program files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [c:\\program files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [c:\\program files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [c:\\program files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [c:\\program files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n","Url":"https://github.com/dotnet/cli/issues/10966","RelatedDescription":"Closed issue \"dotnet --info shows runtimes and sdks twice\" (#10966)"},{"Id":"418615934","IsPullRequest":true,"CreatedAt":"2019-03-11T19:54:50","Actor":"swaroop-sridhar","Number":"10951","RawContent":null,"Title":"Small updates to runtime.config documentation","State":"closed","Body":"Update some external document references, and other minor corrections.","Url":"https://github.com/dotnet/cli/pull/10951","RelatedDescription":"Closed or merged PR \"Small updates to runtime.config documentation\" (#10951)"},{"Id":"419549884","IsPullRequest":false,"CreatedAt":"2019-03-11T17:03:11","Actor":"JanEggers","Number":"10965","RawContent":null,"Title":"dotnet pack does not support RepositoryCommit","State":"closed","Body":"## Expected  behavior\r\n\r\ndotnet pack --RepositoryCommit 123 \r\n\r\nnuget seems to support it\r\n\r\nhttps://github.com/NuGet/docs.microsoft.com-nuget/pull/708\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10965","RelatedDescription":"Closed issue \"dotnet pack does not support RepositoryCommit\" (#10965)"},{"Id":"419249660","IsPullRequest":true,"CreatedAt":"2019-03-11T16:17:50","Actor":"dotnet-maestro[bot]","Number":"10959","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19160.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19160.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10959","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10959)"},{"Id":"419525464","IsPullRequest":false,"CreatedAt":"2019-03-11T15:46:03","Actor":"rjgotten","Number":"10964","RawContent":null,"Title":"dotnet pack does not support owners property","State":"closed","Body":"## Steps to reproduce\r\nTry to create a package with `dotnet pack` based on `csproj` metadata properties.\r\nTry to define owners separate from authors. E.g. where a package has a wide group of contributors but a limited set of core maintainers (or a company or other entity) that have full ownership.\r\n\r\n## Expected  behavior\r\nThere should be an `<Owners>` metadata property in the `csproj` format which maps to the `<owners>` node in the `nuspec` format.\r\n\r\n## Actual behavior\r\nThere is no way to set owners separate from authors without resorting to using an external `nuspec` file.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.504\r\n Commit:    91e160c7f0\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.504\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.8\r\n  Commit:  209f8aa25c\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10964","RelatedDescription":"Closed issue \"dotnet pack does not support owners property\" (#10964)"},{"Id":"419382563","IsPullRequest":false,"CreatedAt":"2019-03-11T15:41:29","Actor":"hpbieker","Number":"10962","RawContent":null,"Title":"dotnet test does not respect LogFileName -- adds date","State":"closed","Body":"## Steps to reproduce\r\n* Install .NET Core 3.0 preview3\r\n* Create a test project\r\n* Run `dotnet test --logger 'trx;LogFileName=somename.trx'`\r\n\r\n## Expected  behavior\r\nA file named `somename.trx` should be created. In .NET Core 2.2 / Test Execution Command Line Tool Version 15.9.0 I get this behaviour.\r\n\r\n## Actual behavior\r\nA file named `somename_2019-03-11_10-38-36-764.trx` was created.\r\n\r\n```\r\n$ dotnet test --logger 'trx;LogFileName=somename.trx'\r\nTest run for C:\\Users\\nohabie\\AppData\\Local\\Temp\\test\\bin\\Debug\\netcoreapp3.0\\test.dll(.NETCoreApp,Version=v3.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.0.0-preview-20190124-02\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nResults File: C:\\Users\\XXX\\AppData\\Local\\Temp\\test\\TestResults\\somename_2019-03-11_10-38-36-764.trx\r\n\r\nTotal tests: 1. Passed: 1. Failed: 0. Skipped: 0.\r\nTest Run Successful.\r\nTest execution time: 1,1557 Seconds\r\n```\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10962","RelatedDescription":"Closed issue \"dotnet test does not respect LogFileName -- adds date\" (#10962)"},{"Id":"419251359","IsPullRequest":false,"CreatedAt":"2019-03-11T15:39:30","Actor":"flcdrg","Number":"10960","RawContent":null,"Title":"dotnet add package ignores nuget.config <clear /> directive","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. Create new project - eg. `dotnet new console`\r\n2. Add nuget.config\r\n3. Add `<clear />` directive but remove other package sources. eg.\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n <packageSources>\r\n    <clear />\r\n </packageSources>\r\n</configuration>\r\n```\r\n4. Add a new package - eg. `dotnet add .\\dotnetadd-bug.csproj package NewtonSoft.JSON`\r\n\r\n## Expected  behavior\r\n\r\nAdding package should fail because there are no package sources configured\r\n\r\n## Actual behavior\r\n\r\nPackage is added successfully because it appears to use other package sources. \r\n\r\nNote that this is a minimal repo - obviously you wouldn't usually just have a 'clear'! The original problem I saw was where a project was configured to just use an Azure Artifacts repository, but because of the apparent ignoring of the clear directive, packages were being resolved via these other sources rather than through the Artifacts repository (which meant that that repository wasn't using its own upstream sources as expected)\r\n\r\neg.\r\n\r\n<pre>\r\n dotnet add .\\dotnetadd-bug.csproj package NewtonSoft.JSON\r\n  Writing C:\\Users\\David\\AppData\\Local\\Temp\\tmpC8AE.tmp\r\ninfo : Adding PackageReference for package 'NewtonSoft.JSON' into project '.\\dotnetadd-bug.csproj'.\r\nlog  : Restoring packages for C:\\dev\\sandbox\\dotnetadd-bug\\dotnetadd-bug.csproj...\r\nndex.json\r\ninfo :   GET https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/newtonsoft.json/index.json\r\ninfo :   GET https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/flatcontainer/newtonsoft.json/index.json\r\ninfo :   OK https://dotnetmyget.blob.core.windows.net/artifacts/aspnetcore-dev/nuget/v3/flatcontainer/newtonsoft.json/in\r\ninfo :   OK https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/newtonsoft.json/index.json 1486ms\r\ninfo :   NotFound https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/flatcontainer/newtonsoft.json/index.jso\r\nn 1534ms\r\ninfo : Package 'NewtonSoft.JSON' is compatible with all the specified frameworks in project '.\\dotnetadd-bug.csproj'.\r\ninfo : PackageReference for package 'NewtonSoft.JSON' version '9.0.1' added to file 'C:\\dev\\sandbox\\dotnetadd-bug\\dotnet\r\nadd-bug.csproj'.\r\ninfo : Committing restore...\r\nlog  : Generating MSBuild file C:\\dev\\sandbox\\dotnetadd-bug\\obj\\dotnetadd-bug.csproj.nuget.g.props.\r\ninfo : Writing lock file to disk. Path: C:\\dev\\sandbox\\dotnetadd-bug\\obj\\project.assets.json\r\nlog  : Restore completed in 2.89 sec for C:\\dev\\sandbox\\dotnetadd-bug\\dotnetadd-bug.csproj.\r\n</pre>\r\n\r\n## Environment data\r\n<pre>\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010184\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100-preview-007326 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100-preview-007354 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100-preview-007363 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007474 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007517 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007576 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007597 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009063 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009171 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009297 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009404 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009748 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009804 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n</pre>\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10960","RelatedDescription":"Closed issue \"dotnet add package ignores nuget.config <clear /> directive\" (#10960)"},{"Id":"419340559","IsPullRequest":false,"CreatedAt":"2019-03-11T15:19:01","Actor":"yuki233","Number":"10961","RawContent":null,"Title":"With SDK 3.0 Preview4, it will return CSC warning AD0001 when run dotnet build for webapi project at first time","State":"closed","Body":"## Steps to reproduce\r\n1. Install SDK 3.0.100-preview4-010703\r\n\r\n## Expected  behavior\r\n1. Run below command\r\n_dotnet new webapi\r\ndotnet build_\r\n\r\n## Actual behavior\r\nDotnet build succeeded with CSC warning AD0001\r\n![image](https://user-images.githubusercontent.com/1578239/54108642-7a66ba00-4417-11e9-8545-7f2f40516ab1.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010703\r\n Commit:    4ccc726730\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010703\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27510-12\r\n  Commit:  cf9d52e1f0\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview4-010703 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19158-05 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27510-12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27508-60 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10961","RelatedDescription":"Closed issue \"With SDK 3.0 Preview4, it will return CSC warning AD0001 when run dotnet build for webapi project at first time\" (#10961)"},{"Id":"419177727","IsPullRequest":true,"CreatedAt":"2019-03-11T12:37:04","Actor":"dotnet-maestro[bot]","Number":"10958","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19159.2\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10958","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10958)"},{"Id":"419069407","IsPullRequest":true,"CreatedAt":"2019-03-10T12:29:35","Actor":"dotnet-maestro[bot]","Number":"10956","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19158.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19159.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10956","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10956)"},{"Id":"418777854","IsPullRequest":true,"CreatedAt":"2019-03-09T13:35:49","Actor":"dotnet-maestro[bot]","Number":"10953","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.23\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10953","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10953)"},{"Id":"418601539","IsPullRequest":false,"CreatedAt":"2019-03-08T22:52:22","Actor":"NicolasDorier","Number":"10950","RawContent":null,"Title":"Compilation error \"csc.dll\" exited with code 139 on ARMv7l","State":"closed","Body":"## Steps to reproduce\r\n\r\nOn\r\n```\r\nuname -a\r\nLinux odroid 4.14.5-92 #1 SMP PREEMPT Mon Dec 11 15:48:15 UTC 2017 armv7l armv7l armv7l GNU/Linux\r\n```\r\n\r\n\r\n```\r\ngit clone https://github.com/btcpayserver/btcpayserver\r\ncd btcpayserver/btcpayserver\r\ndotnet build -c Release\r\n```\r\n\r\n## Expected  behavior\r\n\r\nBuild succeed.\r\n\r\n## Actual behavior\r\n\r\nUser reported compilation error \"csc.dll\" exited with code 134 on ARM.\r\nThe msbuild seems show error 139 from csc.dll.\r\n\r\n## Environment data\r\n\r\n@enorrmann can you provide precise `dotnet --version` here?\r\n\r\nHe tried with SDK `2.1.504` and `2.2.104` with same error it seems.\r\n\r\n![image](https://user-images.githubusercontent.com/3020646/54002883-7dea0f00-4193-11e9-88bd-03c161406535.png)\r\n\r\n\r\n[msbuild.binlog](https://www.dropbox.com/s/4ic7z1j7qnh72iv/msbuild.binlog?dl=1)\r\n\r\nOrignally reported on https://github.com/btcpayserver/btcpayserver/issues/600\r\n\r\nIt seems same issue as https://github.com/dotnet/roslyn/issues/28038 . I opened a new issue because this one happen on ARM32v7.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10950","RelatedDescription":"Closed issue \"Compilation error \"csc.dll\" exited with code 139 on ARMv7l\" (#10950)"},{"Id":"418654619","IsPullRequest":true,"CreatedAt":"2019-03-08T19:57:15","Actor":"wli3","Number":"10952","RawContent":null,"Title":"Better no executable found message","State":"closed","Body":"Fix https://github.com/dotnet/cli/issues/10911\r\n\r\n```\r\n> dotnet non-exist-tool\r\nCould not run anything - file not found.\r\n        If you passed path 'non-exist-tool' it was not found.\r\n        If you intended to call a dotnet command, you may have misspelled it.\r\n        If you were calling a global tool, 'dotnet-non-exist-tool' was not found.\r\n\r\n> dotnet c:\\non\\exist\\executable.dll\r\nCould not run anything - file not found.\r\n        If you passed path 'c:\\non\\exist\\executable.dll' it was not found.\r\n        If you intended to call a dotnet command, you may have misspelled it.\r\n        If you were calling a global tool, 'executable' was not found.\r\n```\r\n\r\n- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/10952","RelatedDescription":"Closed or merged PR \"Better no executable found message\" (#10952)"},{"Id":"418580587","IsPullRequest":true,"CreatedAt":"2019-03-08T01:40:02","Actor":"peterhuene","Number":"10949","RawContent":null,"Title":"Limit job object usage to Windows 8/2012 or later.","State":"closed","Body":"The ASP.NET Core team has a test that runs on Windows 7/2008 which spawns IIS\r\nExpress.  The test is running under `dotnet test` and thus the child\r\nprocess gets assigned to dotnet's job object for process reaping.  However, IIS\r\nExpress maintains its own job object for the process it spawns and the dotnet\r\njob object assignment interferes with IIS Express' use of its job objects.\r\n\r\nThis occurs on Windows 7 and Windows Server 2008 because those versions of\r\nWindows do not support nested jobs.\r\n\r\nThe fix taken here is to limit the use of job objects for process reaping to\r\nWindows 8 / Windows Server 2012 or later.  This is done with an explicit OS\r\nversion check because there is no change to the Job Objects API to enable\r\nsupport for nested jobs and thus no other way to determine if the feature is\r\navailable to us.\r\n\r\nFixes #10947.","Url":"https://github.com/dotnet/cli/pull/10949","RelatedDescription":"Closed or merged PR \"Limit job object usage to Windows 8/2012 or later.\" (#10949)"},{"Id":"418558161","IsPullRequest":false,"CreatedAt":"2019-03-08T01:40:01","Actor":"pakrym","Number":"10947","RawContent":null,"Title":"Adding child processes to job objects prevents them from creating job objects of their own","State":"closed","Body":"We are hitting an issue while trying to test AspNetCore Module for IIS Express on Windows 7/2008R2 after taking and SDK with https://github.com/dotnet/cli/pull/10720 change.\r\n\r\nIn the test, we start IIS Express process that spawns new indstance of dotnet.exe, tries to attach it to a job object and fails because the entire process tree is already attached to the job object that CLI has created.\r\n\r\nI see couple possible solutions:\r\n1. Disable process tracking using job objects on Windows 7\r\n2. Set `JOB_OBJECT_LIMIT_BREAKAWAY_OK` flag set on the job object.\r\n\r\ncc @peterhuene @danmosemsft \r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10947","RelatedDescription":"Closed issue \"Adding child processes to job objects prevents them from creating job objects of their own\" (#10947)"},{"Id":"418576994","IsPullRequest":false,"CreatedAt":"2019-03-08T00:26:44","Actor":"jaredpar","Number":"10948","RawContent":null,"Title":"SDK should use Microsoft.Net.Compilers.Toolset package","State":"open","Body":"The Roslyn team is deprecating the Microsoft.NETCore.Compilers package which contained only CoreCLR binaries and moving to Microsoft.Net.Compilers.Toolset which contains desktop and CoreCLR binaries. The SDK should switch to using this package when taking new Roslyn drops. \r\n\r\n\r\n@nguerrera is aware of this change. ","Url":"https://github.com/dotnet/cli/issues/10948","RelatedDescription":"Open issue \"SDK should use Microsoft.Net.Compilers.Toolset package\" (#10948)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"420728685","IsPullRequest":false,"CreatedAt":"2019-03-13T21:30:55","Actor":"OpenSpacesAndPlaces","Number":"1100","RawContent":null,"Title":"Question....On .Net Framework 4.7 without any SDKs...","State":"open","Body":"I'm currently running into an issue with a hosting company that only has .Net Framework 4.7 installed and no supporting SDKS for netstandard 2.0.\r\n\r\nThe netstandard 2.0. library is needed for EntityFramework Core and SignalR Core.\r\n\r\nThe problem is:\r\nCould not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n\r\n- Simply trying to add the 4.7.1. dll results in:\r\nCould not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context\r\n\r\n- Pre-compiling/Publish has not helped.\r\n- Attempting to include the required base libraries (the ones .Net Standard would be used to pull in) has not helped.\r\n- Various combinations of assembly rules/config settings has not helped.\r\n\r\n---\r\n\r\nI'm totally fine with hand adding every last nuget package needed if there is a way to redirect the netstandard bindings to the base libraries.\r\n\r\nUnfortunately there is no RDP access to the server - so any fix has to be within the confines of bin folder drops or web.config values.\r\n\r\n---\r\n\r\nAny help appreciated!\r\nAny other details I can provide - let me know!","Url":"https://github.com/dotnet/standard/issues/1100","RelatedDescription":"Open issue \"Question....On .Net Framework 4.7 without any SDKs...\" (#1100)"},{"Id":"419180568","IsPullRequest":false,"CreatedAt":"2019-03-10T17:28:29","Actor":"jinyuttt","Number":"1099","RawContent":null,"Title":"Elliptic Curve Cryptography","State":"closed","Body":"Provide elliptic curve cryptography? ","Url":"https://github.com/dotnet/standard/issues/1099","RelatedDescription":"Closed issue \"Elliptic Curve Cryptography\" (#1099)"},{"Id":"418668244","IsPullRequest":true,"CreatedAt":"2019-03-09T00:32:27","Actor":"stephentoub","Number":"1098","RawContent":null,"Title":"Add dummy field to TypedReference","State":"closed","Body":"cc: @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1098","RelatedDescription":"Closed or merged PR \"Add dummy field to TypedReference\" (#1098)"},{"Id":"418474274","IsPullRequest":false,"CreatedAt":"2019-03-07T22:27:38","Actor":"MgSam","Number":"1097","RawContent":null,"Title":"Change .NET Standard 2.1 version number","State":"closed","Body":"It was just [announced ](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/#) that the next version of .NET Standard will be 2.1, which will be implemented by .NET Core 3.0 and incompatible with .NET Core 2.1 and incompatible with any version of .NET Framework. Got all that?\r\n\r\nI implore you to please change the version number of Standard 2.1 before it's too late. It is extremely confusing to have it be Standard 2.1 which is incompatible with Core 2.1. I strongly feel that Standard should version alongside of Core (given that Core is the lead implementation of .NET) and should be Standard 3.0\r\n\r\nIn lieu of that, at the very least it should get a version number which doesn't actively lead to confusion by aligning with the version number of an incompatible version of Core. Standard 2.5?\r\n\r\nI know Microsoft has a reputation to uphold at being horrible at naming things, but this is a bridge too far :)","Url":"https://github.com/dotnet/standard/issues/1097","RelatedDescription":"Closed issue \"Change .NET Standard 2.1 version number\" (#1097)"},{"Id":"417603266","IsPullRequest":true,"CreatedAt":"2019-03-06T03:17:38","Actor":"terrajobst","Number":"1096","RawContent":null,"Title":"Update information for .NET Standard 2.1","State":"closed","Body":"This updates the version table for .NET Standard 2.1 as well as the API diff.\r\n\r\n/cc @mairaw ","Url":"https://github.com/dotnet/standard/pull/1096","RelatedDescription":"Closed or merged PR \"Update information for .NET Standard 2.1\" (#1096)"},{"Id":"417601953","IsPullRequest":true,"CreatedAt":"2019-03-06T03:11:36","Actor":"terrajobst","Number":"1095","RawContent":null,"Title":"Add footnote regarding .NET Framework 4.6.1 support","State":"closed","Body":"This mirrors what's already in the docs","Url":"https://github.com/dotnet/standard/pull/1095","RelatedDescription":"Closed or merged PR \"Add footnote regarding .NET Framework 4.6.1 support\" (#1095)"},{"Id":"416990675","IsPullRequest":false,"CreatedAt":"2019-03-04T21:01:09","Actor":"tannergooding","Number":"1094","RawContent":null,"Title":"Consider the HWIntrinsic APIs for NS2.1","State":"open","Body":"### Summary\r\n\r\nWe should consider including the Harware Intrinsic APIs as part of `netstandard2.1` given that they are trivial to \"support\" (you just expose the APIs and return `false` for all the `IsSupported` checks, as the shared framework code is already doing), were designed in a way that the feature can be incrementally enabled by a given runtime, are already finding use in the shared framework code, and will allow users to more readily write cross-runtime libraries.\r\n\r\n### Rationale\r\n\r\n`netcoreapp3.0` is adding ~1500 APIs in order to support the new \"Hardware Intrinsics\" feature. These APIs provide support for writing more efficient algorithms that can take advantage of hardware specific functionality.\r\n\r\nWhile the number of APIs exposed may seem daunting, the APIs are hardware specific and were designed such that you must perform the appropriate checks before attempting to use a given API or they will result in a `PlatformNotSupportedException` at runtime. For example, `System.Runtime.Intrinsics.X86.Sse` is a class that exposes the SSE ISA for the x86 and x64 architectures. Before using any of the methods on that class, you must emit an `if (Sse.IsSupported)` check to validate that both the current hardware and the current runtime support this ISA.\r\n\r\nThese API declarations are also part of the existing shared framework code and have a default implementation of returning `false` for the `IsSupported` checks and throwing `PlatformNotSupportedException` from any of the other exposed hardware-specific APIs. This has allowed us to already take a cross-runtime dependency on these intrinsics in places like `SpanHelpers`, `Decimal`, `BitOperations`, `BitArray`, and more.\r\n\r\nGiven the above, I propose that these APIs be included as part of `netstandard2.1` as it will allow general library and application developers to share in the same benefits we have already seen. That is, it will light-up on .NET Core 3.0 and will do nothing on other runtimes. This will avoid the need for them to cross-compile their code in a number of cases.\r\n\r\nFor the runtimes that don't support this functionality yet, they should require somewhere between no and minimal changes. For the most part, they should already be internally compiling these APIs and hitting the `IsSupported=false` paths. So they will ultimately just be exposing these APIs to the end-user and would require no changes. The work that may be required is to ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types have the appropriate ABI dependent type layouts. That is, these types should have the appropriate packing (e.g. `16` for `Vector128<T>` on x86/x64 since it maps to the `__m128` ABI primitive defined by the Windows and System V calling convention specifications).\r\n\r\nExposing this will also allow the various runtimes to have incremental \"light-up\" of these APIs. That is, rather than waiting for the next release to both expose and implement the APIs, they can expose the the APIs as part of `netstandard2.1` and the corresponding version of their runtime (e.g `x.0`). They can then light up individual ISAs and make them available to their users as they see fit (e.g. They could enable just `SSE` in `x.1` and could enable SSE2/SSE3 in `x.2`, etc).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1094","RelatedDescription":"Open issue \"Consider the HWIntrinsic APIs for NS2.1\" (#1094)"},{"Id":"416499863","IsPullRequest":false,"CreatedAt":"2019-03-03T18:13:53","Actor":"proof85","Number":"1093","RawContent":null,"Title":"HashCode to standard","State":"closed","Body":"Hi,\r\n\r\nis it possible to add the HashCode-\"Helper\" struct to the .net standard? Including the Combine method? it is covered by the .net corefx since v2.1 and it looks like there is no os or platform specific usecase","Url":"https://github.com/dotnet/standard/issues/1093","RelatedDescription":"Closed issue \"HashCode to standard\" (#1093)"},{"Id":"414920447","IsPullRequest":false,"CreatedAt":"2019-02-27T02:53:49","Actor":"divega","Number":"1092","RawContent":null,"Title":"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1","State":"open","Body":"This is mainly about adding the API from https://github.com/dotnet/corefx/issues/31595 (commit https://github.com/dotnet/corefx/commit/b30fc2b4ee302e449e3580ae39cb083a76b813c9), plus possibly two additional async method possibly coming from https://github.com/dotnet/corefx/issues/35611, to .NET Standard 2.1.\r\n\r\ncc @roji @ajcvickers @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1092","RelatedDescription":"Open issue \"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1\" (#1092)"},{"Id":"414887877","IsPullRequest":false,"CreatedAt":"2019-02-27T00:35:13","Actor":"ChaseFlorell","Number":"1091","RawContent":null,"Title":"Collection<T> and ObservableCollection<T> do not support ranges","State":"open","Body":"This is taken directly from https://github.com/dotnet/corefx/issues/10752 [by @robertmclaws]\r\n\r\nThis API change is already approved in .netcore (tentatively scheduled for 3.0), and I think it's equally as important to be available in .netstandard\r\n\r\n```csharp\r\n    // Adds a range to the end of the collection.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void AddRange(IEnumerable<T> collection) => InsertItemsRange(0, collection);\r\n\r\n    // Inserts a range\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void InsertRange(int index, IEnumerable<T> collection) => InsertItemsRange(index, collection);\r\n\r\n    // Removes a range.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Remove)\r\n    public void RemoveRange(int index, int count) => RemoveItemsRange(index, count);\r\n\r\n    // Will allow to replace a range with fewer, equal, or more items.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Replace)\r\n    public void ReplaceRange(int index, int count, IEnumerable<T> collection)\r\n    {\r\n         RemoveItemsRange(index, count);\r\n         InsertItemsRange(index, collection);\r\n    }\r\n\r\n    #region virtual methods\r\n    protected virtual void InsertItemsRange(int index, IEnumerable<T> collection);\r\n    protected virtual void RemoveItemsRange(int index, int count);\r\n    #endregion\r\n```\r\n\r\nPlease see the linked issue for the full discussion.\r\n\r\nI'm assuming it would land [here](https://github.com/dotnet/standard/blob/master/src/netstandard/ref/System.Collections.ObjectModel.cs) and the appropriate shims would be created, however I don't know enough about netstandard to actually draw up the PR.\r\n","Url":"https://github.com/dotnet/standard/issues/1091","RelatedDescription":"Open issue \"Collection<T> and ObservableCollection<T> do not support ranges\" (#1091)"},{"Id":"414879247","IsPullRequest":false,"CreatedAt":"2019-02-27T00:01:34","Actor":"wtgodbe","Number":"1090","RawContent":null,"Title":"Sort out baseline between netstandard & netcoreapp","State":"open","Body":"We should sit down & go over the diff between netstandard & netcoreapp, and decide what we need to fix/how we need to fix it.\r\n\r\nCC @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1090","RelatedDescription":"Open issue \"Sort out baseline between netstandard & netcoreapp\" (#1090)"},{"Id":"414599564","IsPullRequest":true,"CreatedAt":"2019-02-26T13:10:54","Actor":"dotnet-maestro[bot]","Number":"1089","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19125.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1089","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1089)"},{"Id":"414366560","IsPullRequest":true,"CreatedAt":"2019-02-26T02:10:06","Actor":"terrajobst","Number":"1087","RawContent":null,"Title":"Remove windows row","State":"closed","Body":"After talking to @ptorr-msft it seems we can update this table and simplify the confusing Windows rows by combining *Windows* with *UWP* and removing *Windows Phone* and *Windows Phone Silverlight* entirely.\r\n\r\n/cc @mairaw @richlander ","Url":"https://github.com/dotnet/standard/pull/1087","RelatedDescription":"Closed or merged PR \"Remove windows row\" (#1087)"},{"Id":"414395637","IsPullRequest":true,"CreatedAt":"2019-02-26T02:09:06","Actor":"terrajobst","Number":"1088","RawContent":null,"Title":"Update .NET Standard 2.1 API delta","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1088","RelatedDescription":"Closed or merged PR \"Update .NET Standard 2.1 API delta\" (#1088)"},{"Id":"414093373","IsPullRequest":true,"CreatedAt":"2019-02-25T13:10:50","Actor":"dotnet-maestro[bot]","Number":"1086","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19124.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1086","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1086)"},{"Id":"413818940","IsPullRequest":true,"CreatedAt":"2019-02-24T13:10:46","Actor":"dotnet-maestro[bot]","Number":"1085","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19123.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1085","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1085)"},{"Id":"413693365","IsPullRequest":true,"CreatedAt":"2019-02-23T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1084","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19122.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1084","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1084)"},{"Id":"413628435","IsPullRequest":true,"CreatedAt":"2019-02-23T00:53:44","Actor":"terrajobst","Number":"1083","RawContent":null,"Title":"Add \"generated by a tool\"-header","State":"closed","Body":"This adds a header to all the Markdown files provided in the docs folder that\r\nshow the API set of .NET Standard. The header indicates that these are\r\ngenerated by a tool and PRs are generally not accepted.\r\n\r\nFixes #1053.","Url":"https://github.com/dotnet/standard/pull/1083","RelatedDescription":"Closed or merged PR \"Add \"generated by a tool\"-header\" (#1083)"},{"Id":"413393938","IsPullRequest":true,"CreatedAt":"2019-02-22T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1082","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1082","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1082)"},{"Id":"413086694","IsPullRequest":true,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1080","RawContent":null,"Title":"Add SwitchExpressionException","State":"closed","Body":"Fixes #1077\r\n\r\nThis adds `SwitchExpressionException` that was added for supporting C#'s [`switch` expression construct](https://github.com/dotnet/csharplang/blob/master/proposals/patterns.md#switch-expression). The exception type was discussed in CoreFX in [this API request](https://github.com/dotnet/corefx/issues/33284).","Url":"https://github.com/dotnet/standard/pull/1080","RelatedDescription":"Closed or merged PR \"Add SwitchExpressionException\" (#1080)"},{"Id":"412707494","IsPullRequest":false,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1077","RawContent":null,"Title":"Include SwitchExpression added for C# 8","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1077","RelatedDescription":"Closed issue \"Include SwitchExpression added for C# 8\" (#1077)"},{"Id":"413148623","IsPullRequest":false,"CreatedAt":"2019-02-21T22:14:20","Actor":"wtgodbe","Number":"1081","RawContent":null,"Title":"Use Arcade defaults for DebugType, etc","State":"open","Body":"https://github.com/dotnet/standard/blob/4a006e962fc5c5651b7712028e0e352b1e011a58/Directory.Build.props#L86-L104\r\n\r\nCC @tmat ","Url":"https://github.com/dotnet/standard/issues/1081","RelatedDescription":"Open issue \"Use Arcade defaults for DebugType, etc\" (#1081)"},{"Id":"412718646","IsPullRequest":true,"CreatedAt":"2019-02-21T22:12:16","Actor":"tmat","Number":"1078","RawContent":null,"Title":"Set copyright and package license","State":"closed","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/standard/pull/1078","RelatedDescription":"Closed or merged PR \"Set copyright and package license\" (#1078)"},{"Id":"411583193","IsPullRequest":true,"CreatedAt":"2019-02-21T19:39:58","Actor":"akoeplinger","Number":"1074","RawContent":null,"Title":"Fix link to build logs in build status badge","State":"closed","Body":"The PR which added the build status badges used the status from the public project but linked to the internal project: https://github.com/dotnet/standard/pull/1062\r\nUpdated to link to point to the public project.\r\n\r\nFixes https://github.com/dotnet/standard/issues/1065\r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1074","RelatedDescription":"Closed or merged PR \"Fix link to build logs in build status badge\" (#1074)"},{"Id":"412912955","IsPullRequest":true,"CreatedAt":"2019-02-21T13:10:49","Actor":"dotnet-maestro[bot]","Number":"1079","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1079","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1079)"},{"Id":"410901729","IsPullRequest":false,"CreatedAt":"2019-02-20T21:32:22","Actor":"mpetrinidev","Number":"1071","RawContent":null,"Title":"Cannot use linq in MatchCollection regex with .NET Standard 2.0","State":"closed","Body":"Hi everyone,\r\n\r\nI have the following problem with a .NET Standard 2.0 class library\r\n\r\n'MatchCollection' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type 'MatchCollection' could be found (are you missing a using directive or an assembly reference?)\r\n\r\n**Code**\r\n\r\n`IEnumerable<string> words = Regex.Matches(text, @\"([\\w]+\\.)+[\\w]+(?=[\\s]|$)\").Select(p => p.Value);`\r\n\r\nI had to move this code from a project that is develope with .NET Core 2.1.\r\n\r\nHow do I solve this problem? I read [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.matchcollection?view=netstandard-2.0](url) but I cannot find what the problem is\r\n\r\nThanks in advance","Url":"https://github.com/dotnet/standard/issues/1071","RelatedDescription":"Closed issue \"Cannot use linq in MatchCollection regex with .NET Standard 2.0\" (#1071)"},{"Id":"412413302","IsPullRequest":true,"CreatedAt":"2019-02-20T13:10:57","Actor":"dotnet-maestro[bot]","Number":"1076","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19119.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1076","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1076)"},{"Id":"412032685","IsPullRequest":false,"CreatedAt":"2019-02-19T17:11:56","Actor":"YairHalberstadt","Number":"1075","RawContent":null,"Title":"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit","State":"closed","Body":"I'm currently looking into targeting .Net Standard for Iron Python: https://github.com/IronLanguages/dlr/issues/175\r\n\r\nSome of the required Reflection.Emit APIs are missing from the System.Reflection.Emit nuget package when targeting .Net Standard 2.0, such as `DynamicMethod` and `TypeBuilder.CreateType()`. However they exist in both .Net Core and .Net Framework, and I believe it was decided in https://github.com/dotnet/corefx/issues/29365 (specifically from https://github.com/dotnet/corefx/issues/29365#issuecomment-398256162  and onwards) that such APIs should be included in the Nuget Package, and should throw when used from an AOT runtime.\r\n\r\nThe work to do that was completed in https://github.com/dotnet/corefx/pull/30741.\r\n\r\nIs there any reason why the Nuget package doesn't seem to reflect this?\r\n\r\nThanks","Url":"https://github.com/dotnet/standard/issues/1075","RelatedDescription":"Closed issue \"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit\" (#1075)"},{"Id":"411518831","IsPullRequest":false,"CreatedAt":"2019-02-18T15:04:17","Actor":"kjpou1","Number":"1073","RawContent":null,"Title":".NET Standard for WebAssembly","State":"open","Body":"### Rationale and Usage\r\n\r\nAs WebAssembly support in Mono is being worked on there is a need to consider it as a platform for NS2.1.  `PlatformID.WebAssembly`\r\n \r\n### Proposed API\r\n\r\n#### PlatformID\r\n\r\nThis adds WebAssembly enum to `PlatformID`\r\n\r\n```\r\n    public enum PlatformID\r\n    {\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32S = 0,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32Windows = 1,\r\n        Win32NT = 2,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WinCE = 3,\r\n        Unix = 4,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Xbox = 5,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] MacOSX = 6\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WebAssembly = 7\r\n    }\r\n```\r\n\r\n#### OSPlatform\r\n\r\nThis adds `OSPlatform.WebAssembly`.\r\n\r\n```\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    public readonly struct OSPlatform : IEquatable<OSPlatform>\r\n    {\r\n        private readonly string _osPlatform;\r\n\r\n        public static OSPlatform WebAssembly { get; } = new OSPlatform(\"WEBASSEMBLY\");\r\n\r\n        public static OSPlatform FreeBSD { get; } = new OSPlatform(\"FREEBSD\");\r\n\r\n        public static OSPlatform Linux { get; } = new OSPlatform(\"LINUX\");\r\n\r\n        public static OSPlatform OSX { get; } = new OSPlatform(\"OSX\");\r\n\r\n        public static OSPlatform Windows { get; } = new OSPlatform(\"WINDOWS\");\r\n\r\n```\r\n\r\nIssue from Blazor: https://github.com/mono/mono/issues/13002\r\n\r\n@terrajobst @marek-safar @lewing\r\n","Url":"https://github.com/dotnet/standard/issues/1073","RelatedDescription":"Open issue \".NET Standard for WebAssembly\" (#1073)"},{"Id":"411070793","IsPullRequest":true,"CreatedAt":"2019-02-16T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1072","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19115.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1072","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1072)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"420825005","IsPullRequest":true,"CreatedAt":"2019-03-14T04:19:27","Actor":"ericstj","Number":"36038","RawContent":null,"Title":"Use ILResourceReference","State":"open","Body":"Delete our custom target and use the one we've moved to IL sdk.","Url":"https://github.com/dotnet/corefx/pull/36038","RelatedDescription":"Open PR \"Use ILResourceReference\" (#36038)"},{"Id":"420824683","IsPullRequest":true,"CreatedAt":"2019-03-14T04:17:48","Actor":"davidsh","Number":"36037","RawContent":null,"Title":"Disable some proxy tests","State":"open","Body":"Disable some problematic proxy related tests.\r\n\r\nContributes to issue #32809","Url":"https://github.com/dotnet/corefx/pull/36037","RelatedDescription":"Open PR \"Disable some proxy tests\" (#36037)"},{"Id":"420823597","IsPullRequest":false,"CreatedAt":"2019-03-14T04:12:10","Actor":"bgrainger","Number":"36036","RawContent":null,"Title":"Add ADO.NET support for Utf8String","State":"open","Body":"`Utf8String` is being added to .NET: #30503 #35989 \r\n\r\nThere may be opportunities to use this type in the ADO.NET API, particularly for database protocols/providers that use UTF-8 on the wire.\r\n\r\nThe most obvious enhancement seems like:\r\n\r\n```csharp\r\npublic abstract class DbDataReader\r\n{\r\n    public virtual Utf8String GetUtf8String(int ordinal) => new Utf8String(GetString(ordinal));\r\n    public virtual Utf8String GetUtf8String(string name) => GetUtf8String(GetOrdinal(name));\r\n}\r\n```\r\n\r\nPerhaps less realistically, a new `DbCommand.CommandTextUtf8` property could be added, which would be preferred over `DbCommand.CommandText` if it were set.\r\n\r\n```csharp\r\npublic abstract class DbCommand\r\n{\r\n    public virtual Utf8String CommandTextUtf8\r\n    {\r\n        get => CommandText is null ? null : new Utf8String(CommandText);\r\n        set => CommandText = value?.ToString();\r\n    }\r\n}\r\n```\r\n\r\nFinally, implementations should be encouraged to support an `Utf8String` as the value of `DbParameter.Value`.\r\n\r\nAre there any other opportunities or easy wins?\r\n\r\nRelated: #33978, https://github.com/mysql-net/MySqlConnector/issues/618","Url":"https://github.com/dotnet/corefx/issues/36036","RelatedDescription":"Open issue \"Add ADO.NET support for Utf8String\" (#36036)"},{"Id":"420650102","IsPullRequest":true,"CreatedAt":"2019-03-14T03:57:56","Actor":"davidsh","Number":"36018","RawContent":null,"Title":"Clean up some tests and move to new Azure endpoint","State":"closed","Body":"This PR changes the Azure test endpoint for HTTP/1.1 and WebSocket tests to use\r\nAzure App Service instead of the classic Azure Cloud Service endpoint. This now\r\nmatches the HTTP/2.0 endpoint architecture.\r\n\r\nWe are deprecating the use of Azure Cloud Service endpoints because they are hard\r\nto deploy and maintain. Azure App Service, on the other hand, provides a lot of benefits\r\nincluding built in production/staging slots, TLS certificate handling and easier\r\nintegration with Azure DevOps deployment models.\r\n\r\nThere are a few downsides to Azure App Service which are known feature limitations.\r\nSince it uses ARR (reverse proxy), it causes websocket connections to be proxied.\r\nThis results in some behavior changes for some edge condition tests we have. For example,\r\nwhen a websocket handshake fails (due to subprotocol mismatch for example), the client\r\nside doesn't see a TCP disconnect. Instead, due to the reverse proxy, we end up getting\r\nan HTTP status code (like 500). Either way, it is a websocket handshake failure. So, I've\r\nupdated a few tests to be less brittle for that. I also opened another issue #36016 to\r\ntrack moving a few websocket tests to the loopback websocket server which doesn't yet\r\nhave full capability.\r\n\r\nI also converted an HTTP statusline test to use the loopback server.","Url":"https://github.com/dotnet/corefx/pull/36018","RelatedDescription":"Closed or merged PR \"Clean up some tests and move to new Azure endpoint\" (#36018)"},{"Id":"420801893","IsPullRequest":true,"CreatedAt":"2019-03-14T02:23:08","Actor":"GrabYourPitchforks","Number":"36035","RawContent":null,"Title":"Add ref asms and unit tests for Rune.Encode APIs","State":"open","Body":"Resolves https://github.com/dotnet/corefx/issues/35530.\r\n\r\nThese are the reference APIs and unit tests for the implementation at https://github.com/dotnet/coreclr/pull/23250. This PR will not pass CI until that PR has been merged into coreclr and the new binaries make their way over here to corefx.","Url":"https://github.com/dotnet/corefx/pull/36035","RelatedDescription":"Open PR \"Add ref asms and unit tests for Rune.Encode APIs\" (#36035)"},{"Id":"420739590","IsPullRequest":false,"CreatedAt":"2019-03-14T01:41:03","Actor":"davidsh","Number":"36028","RawContent":null,"Title":"CertificateValidationRemoteServer_EndToEnd_Ok failing on Windows 7","State":"closed","Body":"Found during CI test of PR #36018\r\n\r\nTest:  System.Net.Security.Tests.CertificateValidationRemoteServer/CertificateValidationRemoteServer_EndToEnd_Ok\r\n\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F36018~2Fmerge/test~2Ffunctional~2Fcli~2F/20190313.35/workItem/System.Net.Security.Tests/analysis/xunit/System.Net.Security.Tests.CertificateValidationRemoteServer~2FCertificateValidationRemoteServer_EndToEnd_Ok\r\n\r\n>System.IO.IOException : Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host..\r\n---- System.Net.Sockets.SocketException : An existing connection was forcibly closed by the remote host.\r\n\r\n>   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.Tasks.cs:line 1085\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.GetResult(Int16 token) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.Tasks.cs:line 1059\r\n   at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request) in D:\\a\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\FixedSizeReader.cs:line 57\r\n   at System.Net.Security.SslState.ThrowIfExceptional() in D:\\a\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslState.cs:line 96\r\n   at System.Net.Security.SslState.InternalEndProcessAuthentication(LazyAsyncResult lazyResult) in D:\\a\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslState.cs:line 735\r\n   at System.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result) in D:\\a\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslState.cs:line 705\r\n   at System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult asyncResult) in D:\\a\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslStream.cs:line 220\r\n   at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__45_1(IAsyncResult iar) in D:\\a\\1\\s\\src\\System.Net.Security\\src\\System\\Net\\Security\\SslStream.cs:line 367\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization) in F:\\vsagent\\44\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\FutureFactory.cs:line 520\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Net.Security.Tests.CertificateValidationRemoteServer.CertificateValidationRemoteServer_EndToEnd_Ok() in D:\\a\\1\\s\\src\\System.Net.Security\\tests\\FunctionalTests\\CertificateValidationRemoteServer.cs:line 27\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----","Url":"https://github.com/dotnet/corefx/issues/36028","RelatedDescription":"Closed issue \"CertificateValidationRemoteServer_EndToEnd_Ok failing on Windows 7\" (#36028)"},{"Id":"420787904","IsPullRequest":true,"CreatedAt":"2019-03-14T01:35:34","Actor":"Dotnet-GitSync-Bot","Number":"36033","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky @GrabYourPitchforks","Url":"https://github.com/dotnet/corefx/pull/36033","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,coreclr\" (#36033)"},{"Id":"420792438","IsPullRequest":false,"CreatedAt":"2019-03-14T01:34:11","Actor":"stephentoub","Number":"36034","RawContent":null,"Title":"PipeWriter.AsStream().Dispose should complete the writer?","State":"open","Body":"When you call Stream.Dispose{Async} on the Stream returned from PipeWriter.AsStream(), it seems like it should call PipeWriter.Complete (after calling Flush{Async}).  If you were, for example, using a writer stream in one concurrent operation and the associated reader stream in another, with a pipe in between to handle the buffering and hand-off, you'd want the writer to be able to signal to the reader of completion, and with streams that's generally done by closing one end, e.g. closing a Socket (NetworkStream) or anonymous pipe (PipeStream) to indicate to the other end of the connection that no more data will be coming.\r\n\r\nI noticed this because we have a VirtualNetwork in our test libraries... I was looking at replacing it with Pipe, and it has this semantic, as it's used as a stand-in for actually communicating over the network.\r\n\r\nAre there scenarios where we wouldn't want this complete behavior?\r\n\r\ncc: @davidfowl, @pakrym ","Url":"https://github.com/dotnet/corefx/issues/36034","RelatedDescription":"Open issue \"PipeWriter.AsStream().Dispose should complete the writer?\" (#36034)"},{"Id":"420464267","IsPullRequest":true,"CreatedAt":"2019-03-14T01:11:45","Actor":"dotnet-maestro[bot]","Number":"36009","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27512-77\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27512-77\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27512-77\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36009","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#36009)"},{"Id":"420643758","IsPullRequest":true,"CreatedAt":"2019-03-14T01:09:43","Actor":"stephentoub","Number":"36017","RawContent":null,"Title":"Disable tests failing on WSL","State":"closed","Body":"With this, `./build.sh -test` passes for me locally with Ubuntu on WSL on Windows 10 Version 10.0.17763.\r\n\r\nContributes to https://github.com/dotnet/corefx/issues/11057\r\ncc: @danmosemsft, @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/36017","RelatedDescription":"Closed or merged PR \"Disable tests failing on WSL\" (#36017)"},{"Id":"420766799","IsPullRequest":true,"CreatedAt":"2019-03-13T23:33:46","Actor":"StephenBonikowsky","Number":"36032","RawContent":null,"Title":"Updating to latest WCF version.","State":"open","Body":"Cherry-picked from master with minor conflicts.","Url":"https://github.com/dotnet/corefx/pull/36032","RelatedDescription":"Open PR \"Updating to latest WCF version.\" (#36032)"},{"Id":"420763054","IsPullRequest":true,"CreatedAt":"2019-03-13T23:20:06","Actor":"wfurt","Number":"36031","RawContent":null,"Title":"Update cross build-rootfs for modern world","State":"open","Body":"fixes #28140\r\n\r\nremove old distros, update default and add option to specify destination via parameter ","Url":"https://github.com/dotnet/corefx/pull/36031","RelatedDescription":"Open PR \"Update cross build-rootfs for modern world\" (#36031)"},{"Id":"420757659","IsPullRequest":false,"CreatedAt":"2019-03-13T23:01:21","Actor":"HumanEquivalentUnit","Number":"36030","RawContent":null,"Title":"System.Net.IPAddress - open to adding more features?","State":"open","Body":"`IPAddress` is quite basic, particularly trying to use it from high level scripting PowerShell world, it would be useful if it had more features. Could it have?\r\n\r\ne.g. the address 255.255.255.255 has four bytes all the same, so reversing the byte order should be a no-op. But NetworkToHostOrder and HostToNetworkOrder static methods return a `long` which can go negative, and then the constructor won't accept negative numbers, so you get this transform path which should work and change nothing, but actually breaks:\r\n\r\n(PowerShell syntax, please excuse the use of .Address which is 'obsolete', just here for demonstration):\r\n\r\n```powershell\r\nPS D:\\> [ipaddress]::Parse('255.255.255.255').Address\r\n4294967295\r\n\r\n# Here, reversing the bytes does change the number, when it shouldn't\r\n# but at least it's consistent both ways, which is good:\r\n\r\nPS D:\\> [ipaddress]::NetworkToHostOrder(4294967295)\r\n-4294967296\r\nPS D:\\> [ipaddress]::HostToNetworkOrder(4294967295)\r\n-4294967296\r\n\r\n# but you can't feed that \"long\" output back into \r\n# the constructor which takes a \"long\"\r\n# because it has a no-negative check:\r\n\r\nPS D:\\> [ipaddress]::new(-4294967296)\r\nException calling \".ctor\" with \"1\" argument(s): \"Specified argument was out of the range of valid values.\r\n```\r\n\r\n## uint32 overloads?\r\n\r\nThe first feature I'd request is overloads which take `[uint32]` for IPv4 addresses. For the ctor and the HostToNetworkOrder and NetworkToHostOrder static methods, and request that if used, those overloads would return `uint32` as well.\r\n\r\n## IComparable\r\n\r\nThere is a defined network order of Big-Endian bytes, and they can represent a number. Therefore one IP address can be bigger than another, and it is often useful at a high level to step through / count through a few addresses, it would be useful if this following code worked and returned $true. (PowerShell syntax again):\r\n\r\n```powershell\r\nPS C:\\> [ipaddress]::parse('10.0.0.1') -lt [ipaddress]::parse('10.0.0.5')\r\nCannot compare \"10.0.0.1\" because it is not IComparable.\r\n```\r\nComparing IPv4 to IPv6 could be an error. (NB. that Python's IPAddress objects [are comparable](https://docs.python.org/3/library/ipaddress.html#operators)).\r\n\r\n## Subnet tests\r\n\r\nEven without comprehensive subnet handling, a method for\r\n\r\n```powershell\r\nPS C:\\> [ipaddress]::parse('10.0.0.130').IsInSubnet('10.0.0.128/25')\r\n```\r\n\r\nwould be useful. \r\n\r\n## Addition\r\n\r\nStepping through the IPs in a subnet is useful (the fact that IPv6 subnets are huge doesn't render it a useless operation). Without full and general subnet handling, a `.PlusOne()` instance method which returned this IP + 1, combined with the above IComparable would allow an easy \"walk to a cutoff IP\".\r\n\r\n## everything else Python does\r\n\r\nhttps://docs.python.org/3/library/ipaddress.html\r\n\r\nFull subnet support with enumeration of hosts (at least for smaller subnets), overlap testing, all kinds of convenience methods, etc.\r\n\r\nIs any of that open to consideration / implementation? (Is .Net open to be as comprehensive as Python's \"batteries included\" libraries or is that explicitly not an approach it wants to go for?)","Url":"https://github.com/dotnet/corefx/issues/36030","RelatedDescription":"Open issue \"System.Net.IPAddress - open to adding more features?\" (#36030)"},{"Id":"420637519","IsPullRequest":true,"CreatedAt":"2019-03-13T22:32:17","Actor":"tarikulsabbir","Number":"36015","RawContent":null,"Title":"Porting XEvent Delay BugFix from .Net Framework ","State":"closed","Body":"The bug description is given below-\r\nThe issues is that the XEvents are arriving as expected, but with 1 XEvent delay. It means that to receive the most recent XEvent, the app has to wait for another XEvent to be generated.\r\nFor example, when listening for XEvents that fires on every query that the clients are running:\r\n•       At startup, if the client is running for example, “select 1”, and then the client doesn't get any XEvent.\r\n•       If the client is running “select 2”, then the client receives the “select 1” event.\r\n•       If the client is running “select 3”, then the client receives “select 2” event. And so on…\r\n \r\nIt seems like the server is sending the most recent XEvent on the wire, but the client holds it inside up until the next XEvent is arrived .\r\n\r\nThis fix already exists in the .Net Framework. This PR merges this fix into .Net Core.","Url":"https://github.com/dotnet/corefx/pull/36015","RelatedDescription":"Closed or merged PR \"Porting XEvent Delay BugFix from .Net Framework \" (#36015)"},{"Id":"420723151","IsPullRequest":true,"CreatedAt":"2019-03-13T21:15:52","Actor":"ericstj","Number":"36027","RawContent":null,"Title":"Fix local zip entry header for large files","State":"open","Body":"When opened for Write ZipArchiveEntry needs to write the local header\r\ninformation to the archive stream upon the first call to write since the\r\ncompressed content comes after that and we write directly to the backing stream\r\nrather than buffering in memory.\r\n\r\nBy default header information only accommodates 32-bit sizes since this is much\r\nmore likely and saves space in archives with lots of files and at the first\r\nwrite we don’t know how big the entry is going to be.\r\n\r\nOnce the entry is disposed we know the final length and may find it cannot be\r\nrepresented in 32-bit fields.  It can’t insert the extra bytes it would need\r\nin the header region since it’s already written the compressed data and\r\nstreams/files don’t have insertion operations, so instead it sets a bit that\r\nsays the entry's size information is in a descriptor at the end of the entry.\r\n\r\nThe entry was setting the bit that indicated the descriptor existed but didn't\r\nset the version in the header to ZIP64 to indicate wether that descriptor had\r\n64-bit fields.  Additionally we were writing the central-directory header for\r\nthe file with a version of ZIP64 so our local header and central header didn't\r\nmatch.\r\n\r\nMany ZIP implementations were OK with this, but not all.  Specifically\r\nWindowsBase.dll's implementation of the System.IO.Packaging APIs has a\r\nZipArchive that insists the local header version must be ZIP64 to have a\r\n64-bit descriptor.  Moreover it also insists that the local-header version must\r\nmatch the central header version.\r\n\r\nTo ensure zips created with .NETCore's System.IO.Packaging APIs work with\r\ndesktop we should set this version field in the local header.\r\n\r\nThere's not a great way to test this in CI since the scenario is produce a zip \r\nwith file over 4GB on .NETCore and read it on desktop and we don't have\r\ntest scenarios that cross frameworks like that.   We do cover this codepath\r\nin the System.IO.Packaging outerloop test I added recently.  Feel free to \r\nchime in if you have any suggestions here.\r\n\r\nFixes #36013 \r\n\r\n/cc @pensivebrian ","Url":"https://github.com/dotnet/corefx/pull/36027","RelatedDescription":"Open PR \"Fix local zip entry header for large files\" (#36027)"},{"Id":"420715200","IsPullRequest":false,"CreatedAt":"2019-03-13T20:55:19","Actor":"pranavkm","Number":"36026","RawContent":null,"Title":"JsonSerializer does not support substituting collection interfaces when parsing","State":"open","Body":"**Runtime version:** 3.0.0-preview4-27513-05\r\n\r\nConsider:\r\n\r\n```C#\r\nvar content = \"[ 1, 2, 3]\";\r\nConsole.WriteLine(JsonSerializer.Parse(content, typeof(List<int>))); // works\r\nConsole.WriteLine(JsonSerializer.Parse(content, typeof(IList<int>))); // throws\r\n```\r\n\r\nHere's the resulting `JsonReaderException`:\r\n\r\n```C#\r\nThe JSON value from [System.Collections.Generic.IList`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]] could not be converted to System.Collections.Generic.IList`1[System.Int32].\r\n```\r\n\r\nIt's fairly common to have collection properties on serialized types be interfaces rather than concrete implementations. MVC's model binding and JSON.NET support a variety of interface types including `IEnumerable<T>`, `ICollection<T>`, `IReadOnlyCollection<T>`, `IList<T>` (basically stuff that `List<T>` implements)\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/36026","RelatedDescription":"Open issue \"JsonSerializer does not support substituting collection interfaces when parsing\" (#36026)"},{"Id":"420706696","IsPullRequest":false,"CreatedAt":"2019-03-13T20:34:19","Actor":"pranavkm","Number":"36025","RawContent":null,"Title":"Consider exposing path information as part of JsonReaderException","State":"open","Body":"**Runtime version:** 3.0.0-preview4-27513-05\r\n\r\nConsider:\r\n\r\n```C#\r\npublic class Person\r\n{\r\n    public string Name { get; set; }\r\n    public Address Address { get; set; }\r\n}\r\n\r\npublic class Address\r\n{\r\n    public int ZipCode { get; set; }\r\n}\r\n\r\nvar content = \"{ \\\"Name\\\":  \\\"Test\\\", \\\"Address\\\": { \\\"ZipCode\\\": \\\"not-an-int\\\" } }\";\r\nvar result = JsonSerializer.Parse(content, typeof(TestModel));\r\n```\r\n\r\nThis throws an `JsonReaderException`, as expected:\r\n\r\n```C#\r\nUnhandled Exception: System.Text.Json.JsonReaderException: The JSON value from [test2.Person].Address.ZipCode could not be converted to System.Int32.\r\n```\r\n\r\nThe exception includes the path as part of the error message, but there isn't a way to retrieve it as a property from the exception instance. It would be useful to additionally exposed the ath as a property along with the line and column information that `JsonReaderException` includes.\r\n","Url":"https://github.com/dotnet/corefx/issues/36025","RelatedDescription":"Open issue \"Consider exposing path information as part of JsonReaderException\" (#36025)"},{"Id":"420697108","IsPullRequest":false,"CreatedAt":"2019-03-13T20:11:09","Actor":"pranavkm","Number":"36024","RawContent":null,"Title":"JsonSerializer does not support parsing Dictionary<TKey, TValue>","State":"open","Body":"**Runtime version:** 3.0.0-preview4-27513-05\r\n\r\nConsider:\r\n\r\n```C#\r\nvar content = \"{ \\\"key\\\": \\\"value\\\" }\";\r\nvar result = JsonSerializer.Parse(content, typeof(Dictionary<string, string>));\r\n```\r\n\r\nThis results in the following exception:\r\n\r\n```C#\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Text.Json.Serialization.JsonSerializer.HandleStartObject(JsonSerializerOptions options, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.ReadCore(Type returnType, JsonSerializerOptions options, Utf8JsonReader& reader)\r\n   at System.Text.Json.Serialization.JsonSerializer.ParseCore(String json, Type returnType, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.Parse(String json, Type returnType, JsonSerializerOptions options)\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/36024","RelatedDescription":"Open issue \"JsonSerializer does not support parsing Dictionary<TKey, TValue>\" (#36024)"},{"Id":"420695060","IsPullRequest":false,"CreatedAt":"2019-03-13T20:06:01","Actor":"pranavkm","Number":"36023","RawContent":null,"Title":"JsonSerializer does not support parsing DateTime values","State":"open","Body":"**Runtime version:** 3.0.0-preview4-27513-05\r\n\r\nConsider:\r\n\r\n```C#\r\nvar content = $\"\\\"{DateTime.UtcNow.ToString()}\\\"\";\r\nvar result = JsonSerializer.Parse(content, typeof(DateTime));\r\n```\r\n\r\nThis results in the following exception:\r\n\r\n```\r\nUnhandled Exception: System.Text.Json.JsonReaderException: The JSON value from [System.DateTime] could not be converted to System.DateTime.\r\n   at System.Text.Json.ThrowHelper.ThrowJsonReaderException_DeserializeUnableToConvertValue(Type propertyType, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonPropertyInfo`2.Read(JsonTokenType tokenType, JsonSerializerOptions options, ReadStack& state, Utf8JsonReader& reader)\r\n   at System.Text.Json.Serialization.JsonSerializer.HandleValue(JsonTokenType tokenType, JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.Serialization.JsonSerializer.ReadCore(Type returnType, JsonSerializerOptions options, Utf8JsonReader& reader)\r\n   at System.Text.Json.Serialization.JsonSerializer.ParseCore(String json, Type returnType, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.Parse(String json, Type returnType, JsonSerializerOptions options)\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/36023","RelatedDescription":"Open issue \"JsonSerializer does not support parsing DateTime values\" (#36023)"},{"Id":"420667970","IsPullRequest":true,"CreatedAt":"2019-03-13T19:53:23","Actor":"jcagme","Number":"36020","RawContent":null,"Title":"Update optimization repo url","State":"closed","Body":"We did some work in arcade to normalize repo URLs since we found various types. While existing URLs which are not normalized will continue to work we want to keep all existing things in a \"clean\" and normalized way.","Url":"https://github.com/dotnet/corefx/pull/36020","RelatedDescription":"Closed or merged PR \"Update optimization repo url\" (#36020)"},{"Id":"420681961","IsPullRequest":true,"CreatedAt":"2019-03-13T19:33:29","Actor":"krwq","Number":"36022","RawContent":null,"Title":"Fix: System.IO.Ports runtime package signing","State":"open","Body":"cc: @leecow \r\n\r\nThis moves signing step from Windows leg to the publish step after the packages from all legs are already downloaded.\r\n\r\nSuccessful build (with stripped out physical publish) can be seen here\r\nhttps://dnceng.visualstudio.com/internal/_build/results?buildId=122585\r\n\r\nI've checked couple of packages from that build with `nuget verify -Signature`\r\n\r\nCurrently running final test build:\r\nhttps://dnceng.visualstudio.com/internal/_build/results?buildId=123609","Url":"https://github.com/dotnet/corefx/pull/36022","RelatedDescription":"Open PR \"Fix: System.IO.Ports runtime package signing\" (#36022)"},{"Id":"420678787","IsPullRequest":true,"CreatedAt":"2019-03-13T19:25:48","Actor":"stephentoub","Number":"36021","RawContent":null,"Title":"Tweak SslApplicationProtocol","State":"open","Body":"- It currently stores a `ReadOnlyMemory<byte>` but only ever takes in a `byte[]`.  That just adds unnecessary expense: we can instead just store a `byte[]`.\r\n- The most common values are those exposed statically: Http2 and Http11, but ToString on those results in creating a new string each time.  Special-case them.\r\n- Constructing an SslApplicationProtocol with a null string results in an ArgumentNullException being thrown with the wrong parameter name.  Fix it.\r\n- Miscellaneous cleanup on the file.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/25432\r\ncc: @davidfowl, @davidsh, @krwq ","Url":"https://github.com/dotnet/corefx/pull/36021","RelatedDescription":"Open PR \"Tweak SslApplicationProtocol\" (#36021)"},{"Id":"420529169","IsPullRequest":false,"CreatedAt":"2019-03-13T18:44:12","Actor":"fen","Number":"36010","RawContent":null,"Title":"ConcurrentQueueSegment<T> prevents GC of items.","State":"closed","Body":"```C#\r\n        static void Main(string[] args)\r\n        {\r\n            var queue = new ConcurrentQueue<object>();\r\n            queue.Enqueue(new object());\r\n            queue.Enqueue(new object());\r\n\r\n            queue.TryPeek(out _);\r\n            \r\n            queue.TryDequeue(out _);\r\n            queue.TryDequeue(out _);\r\n        }\r\n```\r\n\r\nWhen I use `TryPeek` `ConcurrentQueueSegment<T>._preservedForObservation` is set to true, this will prevent the `TryDequeue` method from doing a `slots[slotsIndex].Item = default(T);`, keeping my items alive.\r\n\r\nIs this expected behaviour when using `TryPeek`?","Url":"https://github.com/dotnet/corefx/issues/36010","RelatedDescription":"Closed issue \"ConcurrentQueueSegment<T> prevents GC of items.\" (#36010)"},{"Id":"420655122","IsPullRequest":true,"CreatedAt":"2019-03-13T18:30:13","Actor":"tannergooding","Number":"36019","RawContent":null,"Title":"Adding the ITensor interfaces SxS with the existing types","State":"open","Body":"As per the API review of https://github.com/dotnet/corefx/issues/35765, we are going to check these interfaces in SxS with the existing types so that we can continue prototyping and experimenting with them to determine the ultimate shape that the exposed APIs will take.\r\n\r\nThis exposes the APIs as proposed and with some of the fixups suggested during the API review meeting. Namely:\r\n* Exposing a concept of a `read only` tensor\r\n* Using `long` (rather than `int`) for the various lengths and indices\r\n* Allowing data (such as strides or dimension lengths) to be stored and retrieved in a non-linear fashion\r\n\r\nCC. @eerhardt, @terrajobst, @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/36019","RelatedDescription":"Open PR \"Adding the ITensor interfaces SxS with the existing types\" (#36019)"},{"Id":"420640746","IsPullRequest":false,"CreatedAt":"2019-03-13T17:58:07","Actor":"davidsh","Number":"36016","RawContent":null,"Title":"Renable WebSocket Client tests with ServerInitiatedClose semantics","State":"open","Body":"These tests were disabled when we moved the external Azure test endpoint to Azure App Service:\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Net.WebSockets.Client/tests/CloseTest.cs\r\n\r\n* CloseAsync_ServerInitiatedClose_Success\r\n* CloseOutputAsync_ServerInitiated_CanSend\r\n\r\nAzure App Service (unlike VMs or Cloud Service) uses a reverse proxy on the front-end which causes some problems with our testing of WebSocket client close scenarios with server initiated close frames.\r\n\r\nThese tests can be re-enabled once they are moved to a loopback based WebSocket server.","Url":"https://github.com/dotnet/corefx/issues/36016","RelatedDescription":"Open issue \"Renable WebSocket Client tests with ServerInitiatedClose semantics\" (#36016)"},{"Id":"420586082","IsPullRequest":false,"CreatedAt":"2019-03-13T16:06:46","Actor":"couven92","Number":"36014","RawContent":null,"Title":"Span/ReadOnlySpan constructors throw with wrong parameter name","State":"open","Body":"# Problem\r\n\r\nBoth `Span<T>` and `ReadOnlySpan<T>` have constructors that take either a pointer or array together with a `length` argument. If a negative value for `length` is passed, the constructor throws an `ArgumentOutOfRangeException`, but the `ParamName` property of the thrown exception is `start` instead of `length`.\r\n\r\n``` csharp\r\nnamespace System\r\n{\r\n    partial struct Span<T>\r\n    {\r\n        public unsafe Span(void* pointer, int length) { throw null; }\r\n        public Span(T[] array, int start, int length)  { throw null; }\r\n    }\r\n    partial struct ReadOnlySpan<T>\r\n    {\r\n        public unsafe ReadOnlySpan(void* pointer, int length) { throw null; }\r\n        public ReadOnlySpan(T[] array, int start, int length)  { throw null; }\r\n    }\r\n}\r\n```\r\n\r\nReceiving an exception that tells me that the value for `start` is confusing and misleading, as `start` is not the offending parameter in the array-case, while the pointer constructor does not even have a `start` parameter.\r\n\r\n## Code locations\r\n\r\nBy examining the source code for the four constructors, it easy to the see that issue comes from calling `ThrowHelper.ThrowArgumentOutOfRangeException()` in all cases, regardless of which parameter is invalid.\r\n\r\nhttps://github.com/dotnet/corefx/blob/4acf7e78385e673798c4aad33cdf7fe9b2971cfe/src/Common/src/CoreLib/System/Span.Fast.cs#L82-L89\r\nhttps://github.com/dotnet/corefx/blob/4acf7e78385e673798c4aad33cdf7fe9b2971cfe/src/Common/src/CoreLib/System/Span.Fast.cs#L115-L116\r\nhttps://github.com/dotnet/corefx/blob/4acf7e78385e673798c4aad33cdf7fe9b2971cfe/src/Common/src/CoreLib/System/ReadOnlySpan.Fast.cs#L76-L83\r\nhttps://github.com/dotnet/corefx/blob/4acf7e78385e673798c4aad33cdf7fe9b2971cfe/src/Common/src/CoreLib/System/ReadOnlySpan.Fast.cs#L109-L110\r\n\r\n## Expected Behaviour\r\n\r\nThe Span/ReadOnlySpan constructor throws `ArgumentOutOfRangeException` with a `ParamName` equal to `length` when called with a negative value for `length` (and otherwise legal argument values).\r\n\r\n## Actual Behaviour\r\n\r\nThe Span/ReadOnlySpan constructor throws `ArgumentOutOfRangeException` with a `ParamName` equal to `start` when called with a negative value for `length` (and otherwise legal argument values).\r\n\r\n## Test Code\r\n\r\n``` csharp\r\nusing Xunit;\r\n\r\nnamespace System.Test\r\n{\r\n    public static class SpanConstructorTest\r\n    {\r\n        [Fact]\r\n        public static void Span_ctor_with_array_and_negative_length_throws()\r\n        {\r\n            var bytes = new byte[10];\r\n\r\n            var argExcept = Assert.ThrowsAny<ArgumentOutOfRangeException>(() =>\r\n            {\r\n                _ = new Span<byte>(bytes, start: 0, length: -1);\r\n            });\r\n            Assert.Equal(\"length\", argExcept.ParamName);\r\n        }\r\n\r\n        [Fact]\r\n        public static unsafe void Span_ctor_with_pointer_and_negative_length_throws()\r\n        {\r\n            var bytes = stackalloc byte[10];\r\n\r\n            var argExcept = Assert.ThrowsAny<ArgumentOutOfRangeException>(() =>\r\n            {\r\n                _ = new Span<byte>(bytes, length: -1);\r\n            });\r\n            Assert.Equal(\"length\", argExcept.ParamName);\r\n        }\r\n    }\r\n    public static class ReadOnlySpanConstructorTest\r\n    {\r\n        [Fact]\r\n        public static void Span_ctor_with_array_and_negative_length_throws()\r\n        {\r\n            var bytes = new byte[10];\r\n\r\n            var argExcept = Assert.ThrowsAny<ArgumentOutOfRangeException>(() =>\r\n            {\r\n                _ = new ReadOnlySpan<byte>(bytes, start: 0, length: -1);\r\n            });\r\n            Assert.Equal(\"length\", argExcept.ParamName);\r\n        }\r\n\r\n        [Fact]\r\n        public static unsafe void Span_ctor_with_pointer_and_negative_length_throws()\r\n        {\r\n            var bytes = stackalloc byte[10];\r\n\r\n            var argExcept = Assert.ThrowsAny<ArgumentOutOfRangeException>(() =>\r\n            {\r\n                _ = new ReadOnlySpan<byte>(bytes, length: -1);\r\n            });\r\n            Assert.Equal(\"length\", argExcept.ParamName);\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/36014","RelatedDescription":"Open issue \"Span/ReadOnlySpan constructors throw with wrong parameter name\" (#36014)"},{"Id":"420584222","IsPullRequest":false,"CreatedAt":"2019-03-13T16:03:16","Actor":"ericstj","Number":"36013","RawContent":null,"Title":"FileFormatException when opening a Package with over 4GB file on desktop","State":"open","Body":"In order to compress a file over 2GB one must use a write-only ZipArchive, due to https://github.com/dotnet/corefx/issues/11669.  When an entry is open for Write-only, the entry will never allocate space for the Zip64 extended information extra field in the local file header, since it doesn't know at the time the file is opened if it will need 64-bit lengths.  As a result, files over 4GB written to ZipArchives will always use the DataDescriptor at the end of the entry to record their size.\r\n\r\nWhen using this DataDescriptor we were failing to set the version needed to extract to indicate Zip64 was required, but this should have been done since we were using 64-bit lengths in the data descriptor which were defined in the ZIP64 version of the AppNote.txt.\r\n\r\nNot setting the Zip64 version in the local header was causing WindowsBase.dll's ZipArchive implementation to reject our Zips.  https://referencesource.microsoft.com/#WindowsBase/Base/MS/Internal/IO/Zip/ZipIOLocalFileDataDescriptor.cs,106\r\n\r\nWe should fix this in ZipArchiveEntry.\r\n","Url":"https://github.com/dotnet/corefx/issues/36013","RelatedDescription":"Open issue \"FileFormatException when opening a Package with over 4GB file on desktop\" (#36013)"},{"Id":"420570850","IsPullRequest":true,"CreatedAt":"2019-03-13T15:39:19","Actor":"MichalStrehovsky","Number":"36012","RawContent":null,"Title":"Enable default interfaces unconditionally","State":"open","Body":"Corresponds to dotnet/coreclr#23225.","Url":"https://github.com/dotnet/corefx/pull/36012","RelatedDescription":"Open PR \"Enable default interfaces unconditionally\" (#36012)"},{"Id":"420539626","IsPullRequest":false,"CreatedAt":"2019-03-13T14:57:07","Actor":"xxbiohazrdxx","Number":"36011","RawContent":null,"Title":"String interpolation should use the implicit string cast before resorting to ToString","State":"closed","Body":"Let's say we have a class, TestObject. That object has an implicit string operator to cast the object to a string.\r\n\r\n```\r\npublic class TestObject\r\n{\r\n\tprivate string Value;\r\n\r\n\tpublic TestObject(string TestValue)\r\n\t{\r\n\t\tValue = TestValue;\r\n\t}\r\n\r\n\tpublic static implicit operator string(TestObject object)\r\n\t{\r\n\t\treturn Value;\r\n\t}\r\n}\r\n```\r\n\r\nIf I were to call an method that expects a string, let's say\r\n\r\n```\r\nvar Test = new TestObject(\"Hello World!\");\r\nFile.WriteAllLines(\"output.txt\", Test);\r\n```\r\n\r\nAnd open output.txt, I would see the expected output:\r\n`Hello World!`\r\n\r\nHowever. If I use string interpolation:\r\n\r\n```\r\nvar Test = new TestObject(\"Hello World!\");\r\nFile.WriteAllLines(\"output.txt\", $\"Interpolated {Test}\");\r\n```\r\n\r\nI would expect the text in output.txt to be the following:\r\n`Interpolated Hello World!`\r\n\r\nInstead, what happens is the string interpolation uses the `ToString` method. Since I have not overridden `ToString` on `TestObject`, it is called on the base class `Object` which returns the name of the class. Opening output.txt you will see:\r\n`Interpolated TestObject`","Url":"https://github.com/dotnet/corefx/issues/36011","RelatedDescription":"Closed issue \"String interpolation should use the implicit string cast before resorting to ToString\" (#36011)"},{"Id":"420752041","IsPullRequest":false,"CreatedAt":"2018-10-20T02:18:40","Actor":"bluetianx","Number":"36029","RawContent":null,"Title":"ContentLength of HttpWebRequest should be set by  HttpWebRequest.ContentLength On NetCore","State":"open","Body":"I have a nuget package that it send web request base on Net Standard2.0 . I set ContentLength of HttpWebRequest by `request.Headers.Add(\"Content-Length\", \"0\");` . It can work when I run it on net core (v2.1) ,but It throws a exception ,when I run it on Net Framwork(V4.6.1).  I suggest Net core  throw same exception.   The exception info is `System.ArgumentException\r\n  HResult=0x80070057\r\n  Message=必须使用适当的属性或方法修改“Content-Length”标头。\r\nParameter name: name\r\n  Source=System\r\n  StackTrace:\r\n   在 System.Net.WebHeaderCollection.ThrowOnRestrictedHeader(String headerName)\r\n   在 System.Net.WebHeaderCollection.Add(String name, String value)\r\n   在 BirdMessenger.Core.Uploader.Create() 在 D:\\浏览器下载\\BirdMessenger-master\\BirdMessenger-master\\src\\BirdMessenger\\Core\\Uploader.cs 中: 第 28 行\r\n   在 BirdMessenger.TusClient.Create() 在 D:\\浏览器下载\\BirdMessenger-master\\BirdMessenger-master\\src\\BirdMessenger\\TusClient.cs 中: 第 22 行\r\n   在 ConsoleApp1.Program.Main(String[] args) 在 D:\\浏览器下载\\BirdMessenger-master\\BirdMessenger-master\\src\\ConsoleApp1\\Program.cs 中: 第 28 行\r\n` . ","Url":"https://github.com/dotnet/corefx/issues/36029","RelatedDescription":"Open issue \"ContentLength of HttpWebRequest should be set by  HttpWebRequest.ContentLength On NetCore\" (#36029)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"420837003","IsPullRequest":true,"CreatedAt":"2019-03-14T05:23:33","Actor":"jcouv","Number":"34109","RawContent":null,"Title":"Conditional access and null coalescing operator affect both branches","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/33526\r\n\r\nRemaining pure test scenarios are in `switch` constructs, which are tracked by https://github.com/dotnet/roslyn/issues/32414 (switch expressions) and https://github.com/dotnet/roslyn/issues/23944 (switch statements)","Url":"https://github.com/dotnet/roslyn/pull/34109","RelatedDescription":"Open PR \"Conditional access and null coalescing operator affect both branches\" (#34109)"},{"Id":"420818520","IsPullRequest":false,"CreatedAt":"2019-03-14T03:44:55","Actor":"davkean","Number":"34108","RawContent":null,"Title":"[Regression] Usages are not highlighted is next character is an operator","State":"open","Body":"**Version Used**: \r\nVersion 16.0.0 Preview 4.2 [28711.60.d16.0]\r\n\r\n**Steps to Reproduce**:\r\n\r\n``` C#\r\n        static void Main(string[] args)\r\n        {\r\n            int count = 0;\r\n\r\n            count++;    // 1\r\n            count--;    // 2\r\n            count&= 1;  // 3\r\n\r\n            Console.WriteLine(count);\r\n        }\r\n```\r\n\r\nTwo ways to reproduce this, one is a regression from 15.9 and one is not.\r\n\r\n1. Give above, put caret inside `count` in line marked with 1, 2 or 3 and then double-click `count` in same line [Regression]\r\n\r\n-or-\r\n\r\n2. Double-click `count` in the line marked with 1, 2 or 3 [No regression - repros in 15.9]\r\n\r\n``` C#\r\n        static void Main(string[] args)\r\n        {\r\n            int count = 0;\r\n\r\n            count++;    // 1\r\n            count--;    // 2\r\n            count&= 1;  // 3\r\n\r\n            Console.WriteLine(count);\r\n        }\r\n```\r\n\r\n**Expected Behavior**:\r\nAll usages of count to be highlighted\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/54329734-09b5dc80-4667-11e9-9c55-d0fb6246f871.png)\r\n\r\n**Actual Behavior**:\r\nNo usages are highlighted\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/54329760-310ca980-4667-11e9-8a90-706b4b9ca8f1.png)\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/34108","RelatedDescription":"Open issue \"[Regression] Usages are not highlighted is next character is an operator\" (#34108)"},{"Id":"420816324","IsPullRequest":false,"CreatedAt":"2019-03-14T03:33:37","Actor":"sharwell","Number":"34107","RawContent":null,"Title":"Find All References does not support using statements","State":"open","Body":"**Version Used**: Visual Studio 2019 Preview 4\r\n\r\n:link: http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/522786\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nclass Example : System.IDisposable\r\n{\r\n    public void Dispose() { }\r\n    void Method()\r\n    {\r\n        using (new Example())\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n1. Place the caret on `Dispose` (the method definition)\r\n2. Place the caret on `using` (the keyword)\r\n\r\n**Expected Behavior**:\r\n\r\n1. Both `Dispose` and `using` are highlighted\r\n2. Both `Dispose` and `using` are highlighted\r\n\r\n**Actual Behavior**:\r\n\r\n1. Only `Dispose` is highlighted\r\n2. Only `using` is highlighted","Url":"https://github.com/dotnet/roslyn/issues/34107","RelatedDescription":"Open issue \"Find All References does not support using statements\" (#34107)"},{"Id":"420814277","IsPullRequest":false,"CreatedAt":"2019-03-14T03:23:11","Actor":"sharwell","Number":"34106","RawContent":null,"Title":"Find All References does not support LINQ","State":"open","Body":"**Version Used**: Visual Studio 2019 Preview 4\r\n\r\n🔗 http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/634818\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nclass C : List<int>\r\n{\r\n    void Zap()\r\n    {\r\n        var q = from v in this\r\n                where v > 1\r\n                select v + 1;\r\n    }\r\n}\r\n\r\nstatic class Extensions\r\n{\r\n    public static IEnumerable<int> Where(this IEnumerable<int> source, Func<int, bool> predicate) => throw null;\r\n    public static IEnumerable<int> Select(this IEnumerable<int> source, Func<int, int> func) => throw null;\r\n}\r\n```\r\n\r\n1. Click `Where` (the method definition)\r\n2. Click `where` (the query keyword)\r\n3. Click `Select` (the method definition)\r\n4. Click `select` (the query keyword)\r\n\r\n**Expected Behavior**:\r\n\r\n1. Both `Where` and `where` are highlighted\r\n2. Both `Where` and `where` are highlighted\r\n3. Both `Select` and `select` are highlighted\r\n4. Both `Select` and `select` are highlighted\r\n\r\n**Actual Behavior**:\r\n\r\n1. Only `Where` is highlighted\r\n2. Only `Where` is highlighted\r\n3. Only `Select` is highlighted\r\n4. Only `Select` is highlighted","Url":"https://github.com/dotnet/roslyn/issues/34106","RelatedDescription":"Open issue \"Find All References does not support LINQ\" (#34106)"},{"Id":"420811646","IsPullRequest":false,"CreatedAt":"2019-03-14T03:10:30","Actor":"sharwell","Number":"34105","RawContent":null,"Title":"'lock' statement fails to report implicit references to Monitor.Enter and Monitor.Exit","State":"open","Body":"**Version Used**: Visual Studio 2019 Preview 4\r\n\r\n:link: http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/528936\r\n\r\n**Steps to Reproduce**:\r\n\r\nUse the following code, with `$$` indicating the caret placement for two scenarios.\r\n\r\n```csharp\r\nusing System.Threading;\r\nusing System.Collections.Generic;\r\nclass C\r\n{\r\n    void Zap()\r\n    {\r\n        bool lockTaken = false;\r\n        Monitor.TryEn$$ter(null, ref lockTaken); // Scenario 1\r\n        Monitor.Ex$$it(null); // Scenario 2\r\n        lock (new C())\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n1. The **Highlight References** feature highlights the `lock` keyword\r\n2. **Find All References** finds the `lock` keyword\r\n\r\n**Actual Behavior**:\r\n\r\nThe `lock` keyword is not identified as a reference to `Monitor.TryEnter(object, ref bool)` or `Monitor.Exit(object)`.","Url":"https://github.com/dotnet/roslyn/issues/34105","RelatedDescription":"Open issue \"'lock' statement fails to report implicit references to Monitor.Enter and Monitor.Exit\" (#34105)"},{"Id":"420803952","IsPullRequest":false,"CreatedAt":"2019-03-14T02:32:47","Actor":"sharwell","Number":"34104","RawContent":null,"Title":"Cref: constructor overload parameter list differences are disregarded in VB","State":"open","Body":"**Version Used**: \r\n\r\n🔗 http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/769477\r\n🔗 https://devdiv.visualstudio.com/defaultcollection/DevDiv/_workitems/edit/93772\r\n\r\n**Steps to Reproduce**:\r\n\r\nRoslyn as of 8/26/13.\r\n \r\n\r\n1. Open ETA, paste the following VB snippet:\r\n\r\n```vb\r\nClass A\r\n    Public Sub New()\r\n    End Sub\r\n    Public Sub New(x As Integer)\r\n    End Sub\r\nEnd Class\r\nClass Program\r\n    ''' <summary>\r\n    ''' <see cref=\"A.New()\"/>\r\n    ''' <see cref=\"A.New(Integer)\"/>\r\n    ''' </summary>\r\n    ''' <param name=\"args\"></param>\r\n    Shared Sub Main(args As String())\r\n        Dim a As A = New A()\r\n    End Sub\r\nEnd Class\r\n```\r\n\r\nPlace cursor on \"New\" inside cref=\"A.New(Integer)\" - observe both constructor overloads to become highlighted, regardless of parameter list differences (FAR also returns both of them) \r\n \r\n2. Paste the analogous C# snippet:\r\n\r\n```csharp\r\nclass A\r\n{\r\n    public A() { }\r\n    public A(int x) { }\r\n}\r\nclass Program\r\n{\r\n    /// <summary>\r\n    /// <see cref=\"A.A()\"/>\r\n    /// <see cref=\"A.A(int)\"/>\r\n    /// </summary>\r\n    /// <param name=\"args\"></param>\r\n    static void Main(string[] args)\r\n    {\r\n        A a = new A();\r\n    }\r\n}\r\n```\r\n\r\nPlace cursor on last A in cref=\"A.A(int)\" - observe only A(int x) overload becomes highlighted\r\n","Url":"https://github.com/dotnet/roslyn/issues/34104","RelatedDescription":"Open issue \"Cref: constructor overload parameter list differences are disregarded in VB\" (#34104)"},{"Id":"420795863","IsPullRequest":true,"CreatedAt":"2019-03-14T01:52:23","Actor":"jasonmalinowski","Number":"34103","RawContent":null,"Title":"Workaround a deadlock caused by watching .editorconfigs","State":"open","Body":"We use the CodingConventions library from Visual Studio that parses and processes .editorconfig files for us. This library under the covers uses the Visual Studio file watching service for watching files. In Visual Studio 2017 the file watching service made the guarantee that watching files could be done in a free-threaded manner in the background and wouldn't marshal. The .editorconfig library then passed this guarantee along to us.\r\n\r\nIn Dev16, the file watching service was rewritten, and accidentally lost that guarantee in specific cases. Much of our interactions with the file change service also changed so it doesn't matter, but the .editorconfig library's use of the file watching service is causing deadlocks in some scenarios. This change is a workaround to ensure we don't start watching .editorconfig files on the background thread in places where we need to ensure we don't touch the UI thread.\r\n\r\nIdeally we'd be fixing the file change service itself to restore the guarantee, but that's too risky of a change for our current needs and isn't something we can do quickly enough to avoid customer issues. Since we're rewriting our .editorconfig handling entirely which will cause us to stop using the .editorconfig library (and by extension, it's use of this problematic file change service path), we can do this workaround now and let the problem go away on it's own soon when we simply delete all of this.\r\n\r\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/810494\r\n","Url":"https://github.com/dotnet/roslyn/pull/34103","RelatedDescription":"Open PR \"Workaround a deadlock caused by watching .editorconfigs\" (#34103)"},{"Id":"420792463","IsPullRequest":true,"CreatedAt":"2019-03-14T01:34:19","Actor":"jcouv","Number":"34102","RawContent":null,"Title":"Mitigation for GetTypeInfo on suppressed expression","State":"open","Body":"Completion in the IDE doesn't work because `GetTypeInfo` returns nothing for suppressed expressions. This PR mitigates this and provides the result from binding (while the deeper public API work is making progress).\r\n\r\nFYI @ivanbasov @CyrusNajmabadi ","Url":"https://github.com/dotnet/roslyn/pull/34102","RelatedDescription":"Open PR \"Mitigation for GetTypeInfo on suppressed expression\" (#34102)"},{"Id":"420774823","IsPullRequest":false,"CreatedAt":"2019-03-14T00:08:07","Actor":"nguerrera","Number":"34101","RawContent":null,"Title":"Suppressed warning + errorlog + warnaserror -> Silent failed compilation with zero exit code","State":"open","Body":"**Version Used**: 3.0.19.15604 (7d31dd6e)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create test.cs\r\n``` C#\r\n#pragma warning disable 1591\r\n\r\npublic class P {\r\n    public static void Main() {}\r\n}\r\n```\r\n2. `csc.exe test.cs -doc:doc.xml -errorlog:errors.json -warnaserror`\r\n\r\n**Expected Behavior**:\r\n\r\nCompilation succeeds, test.exe is generated.\r\n\r\n**Actual Behavior**:\r\n\r\nCsc.exe returns 0, but test.exe is not generated","Url":"https://github.com/dotnet/roslyn/issues/34101","RelatedDescription":"Open issue \"Suppressed warning + errorlog + warnaserror -> Silent failed compilation with zero exit code\" (#34101)"},{"Id":"420773101","IsPullRequest":true,"CreatedAt":"2019-03-14T00:00:48","Actor":"dotnet-bot","Number":"34100","RawContent":null,"Title":"Merge master to demos/records","State":"open","Body":"\nThis is an automatically generated pull request from master into demos/records.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-demos/records\ngit reset --hard upstream/demos/records\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-demos/records --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34100","RelatedDescription":"Open PR \"Merge master to demos/records\" (#34100)"},{"Id":"420773081","IsPullRequest":true,"CreatedAt":"2019-03-14T00:00:43","Actor":"dotnet-bot","Number":"34099","RawContent":null,"Title":"Merge master to features/readonly-members","State":"open","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34099","RelatedDescription":"Open PR \"Merge master to features/readonly-members\" (#34099)"},{"Id":"420773061","IsPullRequest":true,"CreatedAt":"2019-03-14T00:00:37","Actor":"dotnet-bot","Number":"34098","RawContent":null,"Title":"Merge master to features/lspSupport","State":"open","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34098","RelatedDescription":"Open PR \"Merge master to features/lspSupport\" (#34098)"},{"Id":"420773046","IsPullRequest":true,"CreatedAt":"2019-03-14T00:00:34","Actor":"dotnet-bot","Number":"34097","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34097","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#34097)"},{"Id":"420771550","IsPullRequest":true,"CreatedAt":"2019-03-13T23:53:33","Actor":"jcouv","Number":"34096","RawContent":null,"Title":"Remove IgnoreInsignificantNullableModifiersDifference","State":"open","Body":"Now that `NullableAnnotation` has three states, there is no longer a concept of \"insignificant nullable difference\". Removing that `TypeCompareKind`.","Url":"https://github.com/dotnet/roslyn/pull/34096","RelatedDescription":"Open PR \"Remove IgnoreInsignificantNullableModifiersDifference\" (#34096)"},{"Id":"420768857","IsPullRequest":true,"CreatedAt":"2019-03-13T23:41:50","Actor":"ivanbasov","Number":"34095","RawContent":null,"Title":"Roslyn should not depend on IAsyncCompletionSource to provide completion trigger reason","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/34089\r\nRequired by LiveShare","Url":"https://github.com/dotnet/roslyn/pull/34095","RelatedDescription":"Open PR \"Roslyn should not depend on IAsyncCompletionSource to provide completion trigger reason\" (#34095)"},{"Id":"420766911","IsPullRequest":false,"CreatedAt":"2019-03-13T23:34:10","Actor":"jcouv","Number":"34094","RawContent":null,"Title":"`#nullable restore` in generated file should restore nullable context from project ","State":"open","Body":"Currently, this directive behaves like `#nullable disable` in generated files, because the default context of generated files is \"disabled\".\r\n\r\nBut in the context of a Razor generated file, which mixes user code with generated code, `#nullable restore` would be much more useful and intuitive if it restored the context from the project.\r\n\r\nAlso, this would allow Razor to produce a `#nullable restore`/`#nullable disable` pair around blocks of user code and get the behavior that users would expect (ie. their project setting is effective). Razor would then also add `@nullable ...` directive in its own syntax and modulate the code it generates.\r\n\r\nFYI @rynowak @NTaylorMullen @chsienki @cston @AlekseyTs @gafter ","Url":"https://github.com/dotnet/roslyn/issues/34094","RelatedDescription":"Open issue \"`#nullable restore` in generated file should restore nullable context from project \" (#34094)"},{"Id":"420761290","IsPullRequest":true,"CreatedAt":"2019-03-13T23:13:58","Actor":"jaredpar","Number":"34093","RawContent":null,"Title":"Move to .NET Core 3.0 SDK","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34093","RelatedDescription":"Open PR \"Move to .NET Core 3.0 SDK\" (#34093)"},{"Id":"420760091","IsPullRequest":false,"CreatedAt":"2019-03-13T23:09:51","Actor":"JoeRobich","Number":"34092","RawContent":null,"Title":"CSharpAddMissingReference.VerifyAvailableCodeActions Fails","State":"open","Body":"[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=121983&view=ms.vss-test-web.build-test-results-tab)\r\n\r\n```\r\nSystem.Exception : Marker 'y.goo' not found in text: using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApplication1\r\n{\r\n class Program\r\n {\r\n static void Main(string[] args)\r\n {\r\n }\r\n }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/34092","RelatedDescription":"Open issue \"CSharpAddMissingReference.VerifyAvailableCodeActions Fails\" (#34092)"},{"Id":"420759426","IsPullRequest":false,"CreatedAt":"2019-03-13T23:07:27","Actor":"JoeRobich","Number":"34091","RawContent":null,"Title":"CSharpAddMissingReference.InvokeSomeFixesInCSharpThenVerifyReferences Fails","State":"open","Body":"[Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=121983&view=ms.vss-test-web.build-test-results-tab)\r\n\r\n```\r\nSystem.Exception : Marker 'y.goo' not found in text: using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApplication1\r\n{\r\n class Program\r\n {\r\n static void Main(string[] args)\r\n {\r\n }\r\n }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/34091","RelatedDescription":"Open issue \"CSharpAddMissingReference.InvokeSomeFixesInCSharpThenVerifyReferences Fails\" (#34091)"},{"Id":"420686427","IsPullRequest":true,"CreatedAt":"2019-03-13T22:35:33","Actor":"jaredpar","Number":"34081","RawContent":null,"Title":"Move to MSBuild 16.0","State":"closed","Body":"This is a necessary pre-req to us adotping the 3.0 .NET Core SDK.\r\n\r\nAs a part of this we're also merging master-vs-deps as it's necessary to keep integration tests running. Also it's the logical step once Dev16 becomes our base development environment.\r\n\r\nThis is a parallel attempt at getting MSBuild 16.0 turned on to PR #34010","Url":"https://github.com/dotnet/roslyn/pull/34081","RelatedDescription":"Closed or merged PR \"Move to MSBuild 16.0\" (#34081)"},{"Id":"420748717","IsPullRequest":true,"CreatedAt":"2019-03-13T22:30:14","Actor":"JoeRobich","Number":"34090","RawContent":null,"Title":"Allow file banner comments to be documentation comments","State":"open","Body":"This PR fixes a bad merge from master to master-vs-deps.","Url":"https://github.com/dotnet/roslyn/pull/34090","RelatedDescription":"Open PR \"Allow file banner comments to be documentation comments\" (#34090)"},{"Id":"420748356","IsPullRequest":false,"CreatedAt":"2019-03-13T22:29:01","Actor":"tinaschrepfer","Number":"34089","RawContent":null,"Title":"Roslyn should not depend on IAsyncCompletionSource to provide completion trigger reason","State":"open","Body":"Currently, Roslyn sets the completion reason in a property bag when Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.CompletionSource.GetCompletionContextAsync is called:\r\n\r\n`            session.Properties.AddProperty(InitialTriggerKind, roslynTrigger.Kind);\r\n`\r\nIt later attempts to retrieve it in Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.AsyncCompletion.ItemManager.UpdateCompletionList() method to determine if filtering should be done.\r\n\r\nThis doesn't work when Roslyn is not the one providing completion source.  \r\n\r\nInstead, Roslyn should get completion reason through editor through IAsyncCompletionManager.SortCompletionListAsync.","Url":"https://github.com/dotnet/roslyn/issues/34089","RelatedDescription":"Open issue \"Roslyn should not depend on IAsyncCompletionSource to provide completion trigger reason\" (#34089)"},{"Id":"420741235","IsPullRequest":false,"CreatedAt":"2019-03-13T22:06:14","Actor":"heejaechang","Number":"34088","RawContent":null,"Title":"Adding semicolon at end of generic statement in Razor within @{...} can result in a broken experience","State":"open","Body":"this is port of vso issue filed\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/819598/\r\n\r\n...\r\n\r\n![image](https://user-images.githubusercontent.com/1333179/54317826-88e0dd00-45a1-11e9-9f7e-39bfa768d12f.png)\r\n\r\nSteps to reproduce:\r\nhttps://i.imgur.com/vOJ39F4.gifv\r\n\r\nThis also ends up being an issue in C# but of course less common given the presence of XML tags:\r\nhttps://i.imgur.com/yceCKxG.gifv","Url":"https://github.com/dotnet/roslyn/issues/34088","RelatedDescription":"Open issue \"Adding semicolon at end of generic statement in Razor within @{...} can result in a broken experience\" (#34088)"},{"Id":"420739012","IsPullRequest":true,"CreatedAt":"2019-03-13T21:59:37","Actor":"cston","Number":"34087","RawContent":null,"Title":"Track nullable state across boxing conversions","State":"open","Body":"Fixes #33387 \r\nSee also #32599","Url":"https://github.com/dotnet/roslyn/pull/34087","RelatedDescription":"Open PR \"Track nullable state across boxing conversions\" (#34087)"},{"Id":"420733943","IsPullRequest":false,"CreatedAt":"2019-03-13T21:45:19","Actor":"cston","Number":"34086","RawContent":null,"Title":"Track nullability state across Nullable<T> conversions with nested conversions","State":"open","Body":"A warning should not be reported for `Item1.F.ToString()`.\r\n```C#\r\nclass C\r\n{\r\n    internal object? F;\r\n}\r\n\r\nclass Program\r\n{\r\n    static void F()\r\n    {\r\n        (object, object)? t;\r\n        t = (new C() { F = 1 }, new C());\r\n        (((C, C))t).Item1.F.ToString(); // warning\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/34086","RelatedDescription":"Open issue \"Track nullability state across Nullable<T> conversions with nested conversions\" (#34086)"},{"Id":"420728930","IsPullRequest":false,"CreatedAt":"2019-03-13T21:31:35","Actor":"canton7","Number":"34085","RawContent":null,"Title":"Inconsistent and non-compliant behaviour when ToString returns null, and is concatted with emptystring","State":"open","Body":"**Version Used**: 2.9.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\npublic class C\r\n{\r\n    public override string ToString() => null;\r\n}\r\n\r\nConsole.WriteLine((\"\" + new C()) == null);\r\nConsole.WriteLine((new C() + \"\") == null);\r\nConsole.WriteLine((\"\" + new C() + \"\") == null);\r\nConsole.WriteLine((new C() + \"\" + \"\") == null);\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nAccording to section 7.8.4 \"Addition Operator\" of the C# Language Specification:\r\n\r\n> String concatenation:\r\n>        `string operator +(string x, string y);`\r\n>        `string operator +(string x, object y);`\r\n>        `string operator +(object x, string y);`\r\n> These overloads of the binary + operator perform string concatenation. If an operand of string concatenation is null, an empty string is substituted. Otherwise, any non-string argument is converted to its string representation by invoking the virtual ToString method inherited from type object. **If ToString returns null, an empty string is substituted.**\r\n> ...\r\n> **The string concatenation operator never returns a null value**\r\n\r\nTherefore I'd expect the code above to print\r\n\r\n```\r\nFalse\r\nFalse\r\nFalse\r\nFalse\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nTrue\r\nTrue\r\nFalse\r\nFalse\r\n```\r\n\r\nThe compiler folds the \"\" constant in all three cases, reducing them all to a call to `string.Concat(new C())`. However in the third and fourth cases, it appends a test to see if `string.Concat` returns `null`, and if so it substitutes \"\". `string.Concat` tests whether its argument is null (and substitutes \"\" if so), but doesn't test whether calling `.ToString()` on its argument results in null.\r\n\r\nUsing `null` instead of \"\" seems to exhibit the same behaviour.\r\n\r\nInterestingly this behaviour was different pre-Roslyn - in that case, you get\r\n\r\n```\r\nTrue\r\nTrue\r\nTrue\r\nTrue\r\n```\r\n\r\n[Repro on SharpLab](https://sharplab.io/#v2:EYLgHgbALANALiATgVwHYB8ACAGABJgRgG4BYAKHMwGZ8CJ8AmWgdnIG9zcv8bD7MouALIBDAJaoAFAEpO3DmW5LaATkmSARBtwBqXKgCmAd1wBhGdNwBeK/uQAbe9NKLlXQmsmGT5y3q2WNnaOznJuHupauvrGZjLRAda2qA5OLm7uBJ7ecX64Uf4agcmpoa5cAL7kVRRk1Ixm7GE8uAD2AG4GiIhiACYGtHgAKq0AynA9qADm8VYAfMH2LhVAA)","Url":"https://github.com/dotnet/roslyn/issues/34085","RelatedDescription":"Open issue \"Inconsistent and non-compliant behaviour when ToString returns null, and is concatted with emptystring\" (#34085)"},{"Id":"420723670","IsPullRequest":true,"CreatedAt":"2019-03-13T21:17:11","Actor":"VSadov","Number":"34084","RawContent":null,"Title":"Report nullness warnings for nullable collections in foreach.","State":"open","Body":"Fixes:#31503","Url":"https://github.com/dotnet/roslyn/pull/34084","RelatedDescription":"Open PR \"Report nullness warnings for nullable collections in foreach.\" (#34084)"},{"Id":"420721487","IsPullRequest":true,"CreatedAt":"2019-03-13T21:11:37","Actor":"dibarbet","Number":"34083","RawContent":null,"Title":"Remove unused ICommentUncommentService.","State":"open","Body":"PR for typescript to test against.  Removes obsolete service.","Url":"https://github.com/dotnet/roslyn/pull/34083","RelatedDescription":"Open PR \"Remove unused ICommentUncommentService.\" (#34083)"},{"Id":"420688159","IsPullRequest":false,"CreatedAt":"2019-03-13T19:48:45","Actor":"mavasani","Number":"34082","RawContent":null,"Title":"Operation node missing in control flow graph for IMethodReferenceOperation.Instance","State":"open","Body":"**Version Used**: \r\nLatest master sources\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Execute the following C# IOperation unit test:\r\n```csharp\r\n        [Fact]\r\n        public void ExtensionMethod_MethodReference()\r\n        {\r\n            string source = @\"\r\nusing System;\r\n\r\ninternal delegate bool MyPredicate<in T>(T obj);\r\n\r\ninternal class P\r\n{\r\n    static void M1(P p)\r\n    /*<bind>*/ {\r\n        M2(p.E1);\r\n    }/*</bind>*/\r\n\r\n    static void M2(MyPredicate<int> predicate) { }\r\n}\r\n\r\ninternal static class Extensions\r\n{\r\n    public static bool E1(this P p, int x) => x != 0;\r\n}\r\n\";\r\n            string expectedOperationTree = @\"\r\nIBlockOperation (1 statements) (OperationKind.Block, Type: null) (Syntax: '{ ... }')\r\n  IExpressionStatementOperation (OperationKind.ExpressionStatement, Type: null) (Syntax: 'M2(p.E1);')\r\n    Expression: \r\n      IInvocationOperation (void P.M2(MyPredicate<System.Int32> predicate)) (OperationKind.Invocation, Type: System.Void) (Syntax: 'M2(p.E1)')\r\n        Instance Receiver: \r\n          null\r\n        Arguments(1):\r\n            IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: predicate) (OperationKind.Argument, Type: null) (Syntax: 'p.E1')\r\n              IDelegateCreationOperation (OperationKind.DelegateCreation, Type: MyPredicate<System.Int32>, IsImplicit) (Syntax: 'p.E1')\r\n                Target: \r\n                  IMethodReferenceOperation: System.Boolean Extensions.E1(this P p, System.Int32 x) (Static) (OperationKind.MethodReference, Type: null) (Syntax: 'p.E1')\r\n                    Instance Receiver: \r\n                      IParameterReferenceOperation: p (OperationKind.ParameterReference, Type: P) (Syntax: 'p')\r\n              InConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)\r\n              OutConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)\r\n\";\r\n\r\n            var expectedDiagnostics = DiagnosticDescription.None;\r\n\r\n            VerifyOperationTreeAndDiagnosticsForTest<BlockSyntax>(source, expectedOperationTree, expectedDiagnostics);\r\n\r\n            string expectedFlowGraph = @\"\r\nBlock[B0] - Entry\r\n    Statements (0)\r\n    Next (Regular) Block[B1]\r\nBlock[B1] - Block\r\n    Predecessors: [B0]\r\n    Statements (1)\r\n        IExpressionStatementOperation (OperationKind.ExpressionStatement, Type: null) (Syntax: 'M2(p.E1);')\r\n          Expression: \r\n            IInvocationOperation (void P.M2(MyPredicate<System.Int32> predicate)) (OperationKind.Invocation, Type: System.Void) (Syntax: 'M2(p.E1)')\r\n              Instance Receiver: \r\n                null\r\n              Arguments(1):\r\n                  IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: predicate) (OperationKind.Argument, Type: null) (Syntax: 'p.E1')\r\n                    IDelegateCreationOperation (OperationKind.DelegateCreation, Type: MyPredicate<System.Int32>, IsImplicit) (Syntax: 'p.E1')\r\n                      Target: \r\n                        IMethodReferenceOperation: System.Boolean Extensions.E1(this P p, System.Int32 x) (Static) (OperationKind.MethodReference, Type: null) (Syntax: 'p.E1')\r\n                          Instance Receiver: \r\n                            IParameterReferenceOperation: p (OperationKind.ParameterReference, Type: P) (Syntax: 'p')\r\n                    InConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)\r\n                    OutConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)\r\n    Next (Regular) Block[B2]\r\nBlock[B2] - Exit\r\n    Predecessors: [B1]\r\n    Statements (0)\r\n\";\r\n\r\n            VerifyFlowGraphAndDiagnosticsForTest<BlockSyntax>(source, expectedFlowGraph, expectedDiagnostics);\r\n        }\r\n```\r\n\r\n**Expected Behavior**:\r\nTest passes\r\n\r\n**Actual Behavior**:\r\nTest fails as `IMethodReferenceOperation` for syntax `p.E1` in the actual flow graph has null receiver, but it should have an `IParameterReferenceOperation: p (OperationKind.ParameterReference, Type: P) (Syntax: 'p')` as the receiver. There is no IOperation node in the CFG for the explicit parameter reference. The high level IOperation tree has this parameter reference operation as expected, which seems to get lost while generating the control flow graph.\r\n\r\n```\r\nDifferences:\r\n    Block[B0] - Entry\r\n        Statements (0)\r\n        Next (Regular) Block[B1]\r\n    Block[B1] - Block\r\n        Predecessors: [B0]\r\n        Statements (1)\r\n            IExpressionStatementOperation (OperationKind.ExpressionStatement, Type: null) (Syntax: 'M2(p.E1);')\r\n              Expression: \r\n                IInvocationOperation (void P.M2(MyPredicate<System.Int32> predicate)) (OperationKind.Invocation, Type: System.Void) (Syntax: 'M2(p.E1)')\r\n                  Instance Receiver: \r\n                    null\r\n                  Arguments(1):\r\n                      IArgumentOperation (ArgumentKind.Explicit, Matching Parameter: predicate) (OperationKind.Argument, Type: null) (Syntax: 'p.E1')\r\n                        IDelegateCreationOperation (OperationKind.DelegateCreation, Type: MyPredicate<System.Int32>, IsImplicit) (Syntax: 'p.E1')\r\n                          Target: \r\n                            IMethodReferenceOperation: System.Boolean Extensions.E1(this P p, System.Int32 x) (Static) (OperationKind.MethodReference, Type: null) (Syntax: 'p.E1')\r\n                              Instance Receiver: \r\n++>                             null\r\n-->                             IParameterReferenceOperation: p (OperationKind.ParameterReference, Type: P) (Syntax: 'p')\r\n                        InConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)\r\n                        OutConversion: CommonConversion (Exists: True, IsIdentity: True, IsNumeric: False, IsReference: False, IsUserDefined: False) (MethodSymbol: null)\r\n        Next (Regular) Block[B2]\r\n    Block[B2] - Exit\r\n        Predecessors: [B1]\r\n        Statements (0)\r\n\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/roslyn/issues/34082","RelatedDescription":"Open issue \"Operation node missing in control flow graph for IMethodReferenceOperation.Instance\" (#34082)"},{"Id":"420681381","IsPullRequest":true,"CreatedAt":"2019-03-13T19:32:03","Actor":"chsienki","Number":"34080","RawContent":null,"Title":"Fix struct layout error when nullable enabled:","State":"open","Body":"- Change type comparison to ignore nullable\r\n- Add a test\r\n- Fix an existing test\r\n\r\nFixed #32934 ","Url":"https://github.com/dotnet/roslyn/pull/34080","RelatedDescription":"Open PR \"Fix struct layout error when nullable enabled:\" (#34080)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"420636421","IsPullRequest":true,"CreatedAt":"2019-03-14T03:24:11","Actor":"MichalStrehovsky","Number":"7163","RawContent":null,"Title":"Fix Auto field layout","State":"closed","Body":"CLR doesn't actually use the largest alignment required to align size of the resulting type.","Url":"https://github.com/dotnet/corert/pull/7163","RelatedDescription":"Closed or merged PR \"Fix Auto field layout\" (#7163)"},{"Id":"419097286","IsPullRequest":true,"CreatedAt":"2019-03-14T03:21:27","Actor":"MichalStrehovsky","Number":"7139","RawContent":null,"Title":"Add task to dump Win32 resources","State":"closed","Body":"This task extracts Win32 resources from the main managed assembly into a RES file that we subsequently pass as input to the platform linker.\r\n\r\nFixes #5095.","Url":"https://github.com/dotnet/corert/pull/7139","RelatedDescription":"Closed or merged PR \"Add task to dump Win32 resources\" (#7139)"},{"Id":"420752557","IsPullRequest":true,"CreatedAt":"2019-03-14T03:20:54","Actor":"Dotnet-GitSync-Bot","Number":"7164","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7164","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7164)"},{"Id":"420292734","IsPullRequest":true,"CreatedAt":"2019-03-14T03:20:33","Actor":"jkotas","Number":"7159","RawContent":null,"Title":"Test","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7159","RelatedDescription":"Closed or merged PR \"Test\" (#7159)"},{"Id":"420490913","IsPullRequest":true,"CreatedAt":"2019-03-13T14:52:37","Actor":"MichalStrehovsky","Number":"7162","RawContent":null,"Title":"Merge nmirror to master","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7162","RelatedDescription":"Closed or merged PR \"Merge nmirror to master\" (#7162)"},{"Id":"420366690","IsPullRequest":true,"CreatedAt":"2019-03-13T14:13:07","Actor":"Dotnet-GitSync-Bot","Number":"7160","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corert/pull/7160","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7160)"},{"Id":"420477915","IsPullRequest":true,"CreatedAt":"2019-03-13T13:09:47","Actor":"dotnet-bot","Number":"7161","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7161","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7161)"},{"Id":"420282368","IsPullRequest":true,"CreatedAt":"2019-03-13T03:52:31","Actor":"sergiy-k","Number":"7156","RawContent":null,"Title":"Temporary disable running the KnownGood set of CoreCLR tests","State":"closed","Body":"These tests currently take too long to finish and, as a result,\r\ntest jobs just time out. In addition, we do not have (and never had)\r\nan extended known good set of CoreCLR tests for Linux and OSX.","Url":"https://github.com/dotnet/corert/pull/7156","RelatedDescription":"Closed or merged PR \"Temporary disable running the KnownGood set of CoreCLR tests\" (#7156)"},{"Id":"420292293","IsPullRequest":true,"CreatedAt":"2019-03-13T02:53:05","Actor":"jkotas","Number":"7158","RawContent":null,"Title":"Add task to dump Win32 resources","State":"closed","Body":"This task extracts Win32 resources from the main managed assembly into a RES file that we subsequently pass as input to the platform linker.\r\n\r\nFixes #5095.","Url":"https://github.com/dotnet/corert/pull/7158","RelatedDescription":"Closed or merged PR \"Add task to dump Win32 resources\" (#7158)"},{"Id":"420245753","IsPullRequest":true,"CreatedAt":"2019-03-13T02:45:57","Actor":"sergiy-k","Number":"7155","RawContent":null,"Title":"Disable all non-Wasm related test jobs in Jenkins CI","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7155","RelatedDescription":"Closed or merged PR \"Disable all non-Wasm related test jobs in Jenkins CI\" (#7155)"},{"Id":"420284094","IsPullRequest":true,"CreatedAt":"2019-03-13T02:09:10","Actor":"sergiy-k","Number":"7157","RawContent":null,"Title":"[WIP] Temporary increase time out for the KnownGood set of CoreCLR tests","State":"open","Body":"Check how long it takes to run the KnowGood set of tests on Windows and\r\nLinux. In addition, find a list of all failing tests.","Url":"https://github.com/dotnet/corert/pull/7157","RelatedDescription":"Open PR \"[WIP] Temporary increase time out for the KnownGood set of CoreCLR tests\" (#7157)"},{"Id":"420215673","IsPullRequest":true,"CreatedAt":"2019-03-12T23:14:52","Actor":"Dotnet-GitSync-Bot","Number":"7153","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7153","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7153)"},{"Id":"420226148","IsPullRequest":true,"CreatedAt":"2019-03-12T22:03:20","Actor":"trylek","Number":"7154","RawContent":null,"Title":"Enable CPAOT build of S.P.Corelib; improve field access","State":"open","Body":"Based on JanK's suggestion I have temporarily commented out the\r\nCoreLib-specific optimization in getCallInfo; re-enabling this\r\noptimization would require either replicating CoreCLR method table\r\nconstruction or not yet existing support for persisting method\r\ntable layout info in R2R PE files. I have dared swap the \"default\"\r\nvs. \"conditional\" case, thus slightly diverging from the CoreCLR\r\noriginal, for the sole purpose of easier readability.\r\n\r\nTo reduce the remaining codegen differences between CPAOT and\r\nCrossgen I have ported an extra bit of code from ZapInfo::getFieldInfo\r\nregarding the different field access methods. Without this change,\r\nwe fail at runtime in various assemblies where CPAOT calculated\r\na different field layout than Crossgen. With the change, we still\r\nfail in a couple of places due to\r\n\r\nhttps://github.com/dotnet/corert/issues/6665\r\n\r\nTo further fix S.P.Corelib build, I also had to add a small hack\r\nto remove the \"ni\" part of the filename extension, otherwise the\r\nCPAOT-built S.P.Corelib gets tracked by ILC under the simple name\r\n\"System.Private.CoreLib.ni\" and fails to match the hard-coded BCL name.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7154","RelatedDescription":"Open PR \"Enable CPAOT build of S.P.Corelib; improve field access\" (#7154)"},{"Id":"419252307","IsPullRequest":true,"CreatedAt":"2019-03-12T20:30:38","Actor":"sergiy-k","Number":"7144","RawContent":null,"Title":"Enable running CoreFX tests and Post Checkin validation with Azure Pipelines","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7144","RelatedDescription":"Closed or merged PR \"Enable running CoreFX tests and Post Checkin validation with Azure Pipelines\" (#7144)"},{"Id":"420034056","IsPullRequest":true,"CreatedAt":"2019-03-12T18:03:28","Actor":"MichalStrehovsky","Number":"7152","RawContent":null,"Title":"Delete build status badges","State":"closed","Body":"Jenkins rolling builds stopped working in January.\r\n\r\nEventually, we should replace this with either the rolling build status badge (https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/corert/corert-ci?branchName=master) or the official build status.\r\n\r\n@dotnet-bot skip ci please","Url":"https://github.com/dotnet/corert/pull/7152","RelatedDescription":"Closed or merged PR \"Delete build status badges\" (#7152)"},{"Id":"419940675","IsPullRequest":true,"CreatedAt":"2019-03-12T14:54:29","Actor":"MichalStrehovsky","Number":"7150","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"Picks up JitInterface changes.","Url":"https://github.com/dotnet/corert/pull/7150","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#7150)"},{"Id":"419942373","IsPullRequest":true,"CreatedAt":"2019-03-12T11:46:33","Actor":"MichalStrehovsky","Number":"7151","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7151","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7151)"},{"Id":"419683481","IsPullRequest":true,"CreatedAt":"2019-03-11T23:37:06","Actor":"Dotnet-GitSync-Bot","Number":"7149","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe","Url":"https://github.com/dotnet/corert/pull/7149","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7149)"},{"Id":"419523272","IsPullRequest":true,"CreatedAt":"2019-03-11T20:57:30","Actor":"MichalStrehovsky","Number":"7147","RawContent":null,"Title":"Replace Delegate.CreateDelegate","State":"closed","Body":"Replacing this with a pattern that is easier to statically analyze. We use the GetType/GetMethod/CreateDelegate pattern in several places already.","Url":"https://github.com/dotnet/corert/pull/7147","RelatedDescription":"Closed or merged PR \"Replace Delegate.CreateDelegate\" (#7147)"},{"Id":"419526684","IsPullRequest":true,"CreatedAt":"2019-03-11T20:56:43","Actor":"Dotnet-GitSync-Bot","Number":"7148","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7148","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7148)"},{"Id":"419120028","IsPullRequest":true,"CreatedAt":"2019-03-11T15:14:04","Actor":"Dotnet-GitSync-Bot","Number":"7140","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @danmosemsft @EgorBo","Url":"https://github.com/dotnet/corert/pull/7140","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7140)"},{"Id":"419198424","IsPullRequest":true,"CreatedAt":"2019-03-11T13:25:46","Actor":"MichalStrehovsky","Number":"7143","RawContent":null,"Title":"Add reflection IL scanner","State":"closed","Body":"Adds an option to scan IL of compiled methods for common reflection patterns so that we can compile more code needed by reflection.\r\n\r\nThe algorithm here is really primitive: we scan the IL forward in a single pass, remembering the last type/string/token we saw.\r\n\r\nWe then intrinsically recognize a couple methods that consume this information.\r\n\r\nThis has obvious problems since we don't have exact knowledge of the parameters passed (something being in front of a call doesn't mean it's a parameter to the call). But since this is a heuristic, it's okay. We want this to be as fast as possible.\r\n\r\nThe main purposes of this scanner is to make following patterns work:\r\n* `Enum.GetValues(typeof(Foo))` - this is very common and we need to make sure Foo[] is compiled.\r\n* `Type.GetType(\"Foo, Bar\").GetMethod(\"Blah\")` - framework uses this to work around layering problems.\r\n* `typeof(Foo<>).MakeGenericType(arg).GetMethod(\"Blah\")` - used in e.g. LINQ expressions implementation\r\n\r\nWith this, ASP.Net WebApi sample no longer needs RD.XML at all. The only sample that needs RD.XML (and has instructions on what it is and how it's used) is the MonoGame sample.","Url":"https://github.com/dotnet/corert/pull/7143","RelatedDescription":"Closed or merged PR \"Add reflection IL scanner\" (#7143)"},{"Id":"419275503","IsPullRequest":true,"CreatedAt":"2019-03-11T09:21:14","Actor":"jkotas","Number":"7145","RawContent":null,"Title":"Update corefx version","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7145","RelatedDescription":"Closed or merged PR \"Update corefx version\" (#7145)"},{"Id":"419285054","IsPullRequest":true,"CreatedAt":"2019-03-11T09:19:31","Actor":"jkotas","Number":"7146","RawContent":null,"Title":"Binplace ILCompiler build task into separate directory","State":"closed","Body":"This allows the build task to carry own copy of its dependencies that are not AOT compiled and work on both .NET Framework and .NET Core\r\n\r\nContributes to #6773","Url":"https://github.com/dotnet/corert/pull/7146","RelatedDescription":"Closed or merged PR \"Binplace ILCompiler build task into separate directory\" (#7146)"},{"Id":"419023654","IsPullRequest":true,"CreatedAt":"2019-03-10T07:09:09","Actor":"nattress","Number":"7135","RawContent":null,"Title":"Fix up metadata RVAs for R2R images","State":"closed","Body":"IL metadata contains RVAs (to method entry points and field initial values). If the managed .text section is shifted in the output image with respect to the input image, we cannot copy it verbatim and must update the RVAs.\r\n\r\nWhen copying the input .text section to the output image, fix up RVAs in the metadata. This is done in a targetted manner to avoid having to fully deserialize the metadata and re-encode it.\r\n\r\nThe impetus for this fix is to allow CPAOT to re-compile ready-to-run images produced by Crossgen. Crossgen switches section ordering and puts .data before .text which invalidates all the metadata RVAs.","Url":"https://github.com/dotnet/corert/pull/7135","RelatedDescription":"Closed or merged PR \"Fix up metadata RVAs for R2R images\" (#7135)"},{"Id":"419129421","IsPullRequest":true,"CreatedAt":"2019-03-10T06:03:14","Actor":"jkotas","Number":"7142","RawContent":null,"Title":"Use latest servicing patch of .NET Core 2.1","State":"closed","Body":"Fixes #7141","Url":"https://github.com/dotnet/corert/pull/7142","RelatedDescription":"Closed or merged PR \"Use latest servicing patch of .NET Core 2.1\" (#7142)"},{"Id":"419120131","IsPullRequest":false,"CreatedAt":"2019-03-10T06:03:14","Actor":"dhcgn","Number":"7141","RawContent":null,"Title":"Simple Console App fails to publish with ubuntu 19.04 (No usable version of the libssl was found)","State":"closed","Body":"I installed a fresh ubuntu 19.04 in hyper-v and tried the [console sample](https://github.com/dotnet/corert/tree/master/samples/HelloWorld).\r\n\r\nBut I get the error:\r\n\r\n> No usable version of the libssl was found\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Create project\r\n    1. `sudo snap install dotnet-sdk --classic`\r\n    2. `sudo snap alias dotnet-sdk.dotnet dotnet`\r\n    3. `dotnet new console -o HelloWorld`\r\n    4. `cd HelloWorld`\r\n    5. `dotnet run` **Works!**\r\n2. Add ILCompiler \r\n    6. `dotnet new nuget`\r\n    7. `nuget.config` add packageSources\r\n    8. `dotnet add package Microsoft.DotNet.ILCompiler -v 1.0.0-alpha-*`\r\n3. Install pre-requisites \r\n    9. `echo \"deb http://llvm.org/apt/xenial/ llvm-toolchain-xenial-3.9 main\" | sudo tee /etc/apt/sources.list.d/llvm.list`\r\n    10. `wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -`\r\n    11. `sudo apt-get update`\r\n    12. `sudo apt-get install cmake clang-3.9 uuid-dev libcurl4-openssl-dev zlib1g-dev libkrb5-dev`\r\n13. Install libicu55\r\n    1. `sudo add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\"`\r\n    2. `sudo apt-get update`\r\n    3. `sudo apt-get install libicu55`\r\n13. `dotnet publish -r linux-x64 -c release` Error \"No usable version of the libssl was found\"\r\n\r\n**Logging:**\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for /home/daniel/HelloWorld/HelloWorld.csproj...\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.2.2.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.2.2.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.2.2.\r\n  Installing Microsoft.NETCore.App 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetAppHost 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostResolver 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostPolicy 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.DotNet.ILCompiler 1.0.0-alpha-27509-01.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.App 2.2.2.\r\n  Generating MSBuild file /home/daniel/HelloWorld/obj/HelloWorld.csproj.nuget.g.props.\r\n  Generating MSBuild file /home/daniel/HelloWorld/obj/HelloWorld.csproj.nuget.g.targets.\r\n  Restore completed in 1.25 min for /home/daniel/HelloWorld/HelloWorld.csproj.\r\n  HelloWorld -> /home/daniel/HelloWorld/bin/release/netcoreapp2.2/linux-x64/HelloWorld.dll\r\n  /bin/clang-3.9\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\n  No usable version of the libssl was found\r\n  Aborted (core dumped)\r\n/home/daniel/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27509-01/build/Microsoft.NETCore.Native.targets(235,5): error MSB3073: The command \"\"/home/daniel/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27509-01/tools/ilc\" @\"obj/release/netcoreapp2.2/linux-x64/native/HelloWorld.ilc.rsp\"\" exited with code 134. [/home/daniel/HelloWorld/HelloWorld.csproj]\r\n```\r\n\r\n**Ubuntu**\r\n\r\n```\r\ndaniel@vm:~/HelloWorld$ uname -a\r\nLinux vm 4.19.0-13-generic #14-Ubuntu SMP Thu Feb 7 21:51:25 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\ndaniel@vm:~/HelloWorld$  lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu Disco Dingo (development branch)\r\nRelease:\t19.04\r\nCodename:\tdisco\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7141","RelatedDescription":"Closed issue \"Simple Console App fails to publish with ubuntu 19.04 (No usable version of the libssl was found)\" (#7141)"},{"Id":"419091230","IsPullRequest":true,"CreatedAt":"2019-03-09T21:54:58","Actor":"Dotnet-GitSync-Bot","Number":"7138","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7138","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7138)"},{"Id":"419036630","IsPullRequest":true,"CreatedAt":"2019-03-09T16:31:58","Actor":"Dotnet-GitSync-Bot","Number":"7136","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/7136","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7136)"},{"Id":"419080411","IsPullRequest":true,"CreatedAt":"2019-03-09T15:02:34","Actor":"yowl","Number":"7137","RawContent":null,"Title":"WIP: WASM: Add exception handling - emit EHInfo data","State":"open","Body":"These changes include @morganbr's Exception handling work for wasm and emit the EHInfo data that will be used in the landing pads.  This follows the ideas set out at https://github.com/dotnet/corert/issues/4655#issuecomment-361201665.  The EHInfo is copied from `src\\ILCompiler.RyuJit\\src\\JitInterface\\CorInfoImpl.RyuJit.cs` and there are quite a few comments and debug code to be cleared up later.  For now a review of the throwing of the exception and the emission of the EHInfo would be useful to ensure that the direction is ok.\r\n\r\nThe LLVM output of the code so far will include (as well as the incomplete landing pads), the EHInfo written out as global blob symbols :\r\n```\r\n@HelloWasm_Program__TestDispose___EHInfo = global [2 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 -1055971326) to i32*), i32* bitcast (i8* getelementptr (i8, i8* null, i32 822083583) to i32*)]\r\n@HelloWasm_Program__TestTryCatchNoException___EHInfo = global [3 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 -267445246) to i32*), i32* bitcast (i8* getelementptr (i8, i8* null, i32 822083583) to i32*), i32* null]\r\n@HelloWasm_Program__TestTryCatchThrowException___EHInfo = global [3 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 -737207294) to i32*), i32* bitcast (i8* getelementptr (i8, i8* null, i32 587202559) to i32*), i32* null]\r\n@HelloWasm_Program__TryFinallyInner___EHInfo = global [1 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 405931522) to i32*)]\r\n```","Url":"https://github.com/dotnet/corert/pull/7137","RelatedDescription":"Open PR \"WIP: WASM: Add exception handling - emit EHInfo data\" (#7137)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"420786755","IsPullRequest":true,"CreatedAt":"2019-03-14T01:07:16","Actor":"peterhuene","Number":"3021","RawContent":null,"Title":"Remove duplicates items from resolved publish assets.","State":"open","Body":"When `CopyLocalLockFileAssemblies` was true, `ReferenceCopyLocalPaths`\r\ncontained the set of `RuntimePackAsset` items.\r\n\r\nWhen resolving assets to copy local for publish, the `RuntimePackAsset` items\r\nwere added twice: once explicitly and again via `ReferenceCopyLocalPaths`.\r\n\r\nThis commit fixes this by only adding to the resolved copy local assets for\r\npublish when `CopyLocalLockFileAssemblies` is false.\r\n\r\nFixes #3007.","Url":"https://github.com/dotnet/sdk/pull/3021","RelatedDescription":"Open PR \"Remove duplicates items from resolved publish assets.\" (#3021)"},{"Id":"420462297","IsPullRequest":true,"CreatedAt":"2019-03-13T12:00:48","Actor":"dotnet-maestro[bot]","Number":"3020","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19162.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3020","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3020)"},{"Id":"419948212","IsPullRequest":true,"CreatedAt":"2019-03-13T12:00:14","Actor":"dotnet-maestro[bot]","Number":"3018","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19161.14\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19161.14\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3018","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3018)"},{"Id":"420065077","IsPullRequest":true,"CreatedAt":"2019-03-12T23:01:18","Actor":"dsplaisted","Number":"3019","RawContent":null,"Title":"Don't set \"platform library\" for .NET Core 3.0 and higher","State":"closed","Body":"Don't try to exclude files from the platform library on .NET Core 3.0 and higher, which uses runtime and targeting packs instead\r\n\r\nFixes #3004\r\n\r\nTo help verify whether this is safe, I looked at the places where `MicrosoftNETPlatformLibrary` is used:\r\n\r\n- It's used by the `GenerateDepsFile`, `GenerateRuntimeConfigurationFiles`, and `ResolveCopyLocalAssets` tasks.  These all simply pass it to `LockFileExtensions.CreateProjectContext`.  In that method, it's used as part of the check to determine if the app is framework dependent:\r\n    ```C#\r\n    bool isFrameworkDependent = (platformLibrary != null || runtimeFrameworks?.Any() == true) &&\r\n        (!isSelfContained || string.IsNullOrEmpty(lockFileTarget.RuntimeIdentifier));\r\n    ```\r\n    Note that for .NET Core 3.0 and higher, the `ResolveFrameworkReferences` should add `RuntimeFramework` items, so the `isFrameworkDependent` calculation should still work.\r\n- In the created `ProjectContext`, the `GetRuntimeLibraries` method excludes assets from the platform library for framework dependent apps.\r\n- The `GenerateRuntimeConfigurationFiles` task also uses the platform library from the `ProjectContext` in order to write the runtimeconfig file, but only if there aren't any `RuntimeFrameworks`.\r\n- The `ResolvePackageAssets` task excludes assets from the platform library in `GetPlatformPackageExclusions`.  (It also excludes assets from libraries matching names of `RuntimeFrameworks`, which I believe we should now remove, as those assets will come from runtime packs and won't be in the assets file anyway now).\r\n- The `_RestoreCrossgen` and `PrepforRestoreForComposeStore` use the platform library name.  These are both part of support for `dotnet store`, which we are [considering dropping](https://github.com/dotnet/sdk/issues/2914), and which will need a lot of work in any case if we want it to work when targeting .NET Core 3","Url":"https://github.com/dotnet/sdk/pull/3019","RelatedDescription":"Closed or merged PR \"Don't set \"platform library\" for .NET Core 3.0 and higher\" (#3019)"},{"Id":"416793797","IsPullRequest":false,"CreatedAt":"2019-03-12T23:01:18","Actor":"SomeAnon42","Number":"3004","RawContent":null,"Title":"ResolvePackageAssets fails when targeting Core 3.0","State":"closed","Body":"```\r\nError\tMSB4018\tThe \"ResolvePackageAssets\" task failed unexpectedly.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.CollectDependencies(IDictionary`2 libraryLookup, IEnumerable`1 dependencies, HashSet`1 exclusionList) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 193\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.CollectDependencies(IDictionary`2 libraryLookup, IEnumerable`1 dependencies, HashSet`1 exclusionList) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 180\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.GetPlatformExclusionList(LockFileTarget lockFileTarget, LockFileTargetLibrary platformLibrary, IDictionary`2 libraryLookup) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 153\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.GetPlatformPackageExclusions() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 1191\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter..ctor(ResolvePackageAssets task, Stream stream) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 610\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 483\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 434\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 279\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 271\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tNitroSharpDbg\tC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010582\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets\t228\t\r\n```\r\n\r\nSteps to reproduce:\r\n1. Create a new console netcoreapp3.0 project\r\n2. Clone https://github.com/mellinoe/veldrid.git\r\n3. Add a reference Veldrid.ImGui.csproj\r\n```xml\r\n<ItemGroup>\r\n  <ProjectReference Include=\"..\\veldrid\\src\\Veldrid.ImGui\\Veldrid.ImGui.csproj\" />\r\n</ItemGroup>\r\n```\r\n4. Build the project. \r\n\r\nThe build should fail. However, there's no issues when targeting netcoreapp2.2 or when using [the NuGet package](https://www.nuget.org/packages/ImGui.NET) instead of referencing the project.\r\n\r\n``dotnet --info`` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010582\r\n Commit:    a643588b29\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010582\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27502-7\r\n  Commit:  12aa3da961\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-010582 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n","Url":"https://github.com/dotnet/sdk/issues/3004","RelatedDescription":"Closed issue \"ResolvePackageAssets fails when targeting Core 3.0\" (#3004)"},{"Id":"419043286","IsPullRequest":false,"CreatedAt":"2019-03-11T15:36:04","Actor":"saxenark","Number":"3014","RawContent":null,"Title":"Installing JRE in microsoft/dotnet:sdk container","State":"closed","Body":"Hi,\r\n\r\nI need JRE to run dependencies for my .NET core sdk 2.2 unit tests in Visual Studio 2017. I would like to know how to install JRE into my windows docker container. Through the docker environment, I tried to run java.exe but it does not run.\r\n\r\nSo, my question is how do I install JRE on my container?\r\n\r\n```\r\nFROM microsoft/dotnet:sdk\r\n\r\nWORKDIR C:/Temp\r\nCOPY jre-8u202-windows-x64.exe ./Java.exe\r\n\r\nWORKDIR C:/P4Source\r\n\r\nI am using Windows Server 2016 1607 with Docker basic EE\r\n\r\nThanks,\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3014","RelatedDescription":"Closed issue \"Installing JRE in microsoft/dotnet:sdk container\" (#3014)"},{"Id":"419249712","IsPullRequest":true,"CreatedAt":"2019-03-11T13:32:19","Actor":"dotnet-maestro[bot]","Number":"3017","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19160.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19160.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3017","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3017)"},{"Id":"419177642","IsPullRequest":true,"CreatedAt":"2019-03-10T13:16:08","Actor":"dotnet-maestro[bot]","Number":"3016","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19159.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19159.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3016","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3016)"},{"Id":"419069291","IsPullRequest":true,"CreatedAt":"2019-03-09T14:16:04","Actor":"dotnet-maestro[bot]","Number":"3015","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19158.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3015","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3015)"},{"Id":"417286822","IsPullRequest":true,"CreatedAt":"2019-03-08T14:43:34","Actor":"dotnet-maestro[bot]","Number":"3008","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19154.14\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19154.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19155.29\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19155.29\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19156.20\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19156.20\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.23\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.23\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3008","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3008)"},{"Id":"418571115","IsPullRequest":true,"CreatedAt":"2019-03-08T00:01:52","Actor":"dotnet-bot","Number":"3013","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3013","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3013)"},{"Id":"418539657","IsPullRequest":true,"CreatedAt":"2019-03-07T23:28:08","Actor":"dotnet-maestro[bot]","Number":"3012","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3012","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3012)"},{"Id":"418538996","IsPullRequest":false,"CreatedAt":"2019-03-07T22:15:49","Actor":"nkolev92","Number":"3011","RawContent":null,"Title":"The SDK should error if a FrameworkReference is not supported for a certain TFM","State":"open","Body":"Came up during the design discussion for FrameworkReference + NuGet. \r\nhttps://github.com/NuGet/Home/issues/7342\r\n\r\nThe SDK should error if a FrameworkReference is not supported for a certain TFM. \r\n\r\n* In the project author case, clearly call out that this is an authoring mistake. \r\n* In the transitive (project/package) case, clearly blame the package/project. \r\n\r\nIt's worth considering how we handle bad framework assemblies. \r\n\r\n//cc @nguerrera","Url":"https://github.com/dotnet/sdk/issues/3011","RelatedDescription":"Open issue \"The SDK should error if a FrameworkReference is not supported for a certain TFM\" (#3011)"},{"Id":"417443376","IsPullRequest":false,"CreatedAt":"2019-03-06T16:38:50","Actor":"nguerrera","Number":"3009","RawContent":null,"Title":"Trouble moving bin/ and obj/ to .bin/ and .obj/","State":"closed","Body":"*Moved from https://github.com/dotnet/project-system/issues/1437#issuecomment-469568035*\r\n\r\n@dzmitry-lahoda wrote:\r\n\r\nNot sure if right thread - but some tooling is wrong...\r\n\r\nSee the line with `ProjectAssetsFile`? If I remove it - my `csproj` fails to build. \r\nWhy I ever need it? My task for to build from VS 2017 and VS Code and from `dotnet` command line into `.bin` and `.obj` because of Unity:(. So I did it. But when VS 2017 opens solution - it generates `obj`. So I did fix which kinda should work.  But got issues - I followed the path, and got into `C:\\Program Files\\dotnet\\sdk\\2.2.102\\Sdks\\Microsoft.NET.Sdk\\targets\\` folder and into `ProjectAssetsFile`. So here is fix:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <!-- fixing VS 2017 bug which makes it output directory which is not requested -->\r\n  <PropertyGroup>\r\n    <ProjectAssetsFile>$(MSBuildProjectDirectory)\\.obj\\project.assets.json</ProjectAssetsFile>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n      <PreBuildEvent>\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\.obj\\obj\" (\r\n         rmdir \"$(MSBuildProjectDirectory)\\.obj\\obj\" /s /q\r\n       )\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\obj\" (\r\n         move  \"$(MSBuildProjectDirectory)\\obj\" \"$(MSBuildProjectDirectory)\\.obj\"\r\n       )\r\n      </PreBuildEvent>\r\n      \r\n      <PostBuildEvent>\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\.obj\\obj\" (\r\n         rmdir \"$(MSBuildProjectDirectory)\\.obj\\obj\" /s /q\r\n       )\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\obj\" (\r\n         move  \"$(MSBuildProjectDirectory)\\obj\" \"$(MSBuildProjectDirectory)\\.obj\"\r\n       )\r\n      </PostBuildEvent>      \r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>.bin\\Debug\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Debug\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Debug\\</IntermediateOutputPath>\r\n    <BaseOutputPath>.bin\\Debug\\</BaseOutputPath>\r\n    <UseCommonOutputDirectory>true</UseCommonOutputDirectory>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <OutputPath>.bin\\Release\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Release\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Release\\</IntermediateOutputPath>\r\n    <BaseOutputPath>.bin\\Release\\</BaseOutputPath>\r\n    <UseCommonOutputDirectory>true</UseCommonOutputDirectory>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.9.0\" />\r\n    <PackageReference Include=\"xunit\" Version=\"$(xUnitVersion)\" />\r\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"$(xUnitVersion)\" />\r\n  </ItemGroup>\r\n  </ItemGroup>  \r\n</Project>\r\n````\r\n\r\n\r\nThere is other workaround. Very weird - depends on order of and some hacky `Import` declarations, but it breaks `xunit` runner and VS Code. Ssee lines with `Microsoft.NET.Sdk`:\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>.bin\\Debug\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Debug\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Debug\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <OutputPath>.bin\\Release\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Release\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Release\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n  <ItemGroup>\r\n    <None Remove=\".gitignore\" />\r\n\r\n    <None Remove=\"**/*.meta\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Buffers\" Version=\"4.5.0\" />\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.3\" />\r\n    <PackageReference Include=\"System.Memory\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"4.5.2\" />\r\n  </ItemGroup>\r\n\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\nDoes next relates dotnet/project-system#1438? \r\n\r\nI was not able to find solution on SO. \r\n\r\nShould I create separate issue with that with steps:\r\n1. Build into `.bin` and `.obj`\r\n2. Ensure there are no `bin` and `obj` created.\r\n3. Check VS Code, VS 2017, dotnet.exe\r\n\r\nOr my case is relevant for `respecting`?","Url":"https://github.com/dotnet/sdk/issues/3009","RelatedDescription":"Closed issue \"Trouble moving bin/ and obj/ to .bin/ and .obj/\" (#3009)"},{"Id":"416305439","IsPullRequest":false,"CreatedAt":"2019-03-06T16:13:21","Actor":"JoeRobich","Number":"3001","RawContent":null,"Title":"error NETSDK1085 during Roslyn builds with 3.0.100 preview 4 sdk","State":"closed","Body":"When building Roslyn with 3.0.100-preview4-010381 installed, I get the following error on every solution build.\r\n\r\n```\r\n8>------ Build started: Project: VS.Tools.Roslyn.Package, Configuration: Debug Any CPU ------\r\n2>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010381\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(112,5): error NETSDK1085: The 'NoBuild' property was set to true but the 'Build' target was invoked.\r\n2>Done building project \"IlAsmDeploy.csproj\" -- FAILED.\r\n```","Url":"https://github.com/dotnet/sdk/issues/3001","RelatedDescription":"Closed issue \"error NETSDK1085 during Roslyn builds with 3.0.100 preview 4 sdk\" (#3001)"},{"Id":"417548547","IsPullRequest":false,"CreatedAt":"2019-03-05T23:22:40","Actor":"sbomer","Number":"3010","RawContent":null,"Title":"GenerateDepsFile no longer respects FilesToSkip from runtime packs","State":"open","Body":"- Runtime pack dependencies in deps.json and in the DependencyContext model have a \"runtimepack.\" prefix prependend to the nuget package id (see https://github.com/dotnet/sdk/commit/16eddf3d635133c35f42974dcd491c8263066b37#diff-0723634e548f98293eebe3970b71e0ddR328).\r\n- The heuristic in `GetPackageParts` gets the package id from the name of a nuspec in a parent directory:\r\n https://github.com/dotnet/sdk/blob/ab2176b3447e3e7820b5a340408110b6d498f907/src/Tasks/Common/NuGetUtils.cs#L48-L52\r\n\r\n`GenerateDepsFile` uses `GetPackageParts` to build the list of packages with dependencies to remove. When it looks for files to trim from the dependency model, it doesn't match any of the dependencies that have the \"runtimepack.\" prefix, so those files don't get skipped.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3010","RelatedDescription":"Open issue \"GenerateDepsFile no longer respects FilesToSkip from runtime packs\" (#3010)"},{"Id":"416947669","IsPullRequest":true,"CreatedAt":"2019-03-05T20:41:11","Actor":"nugetlurker","Number":"3006","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5867 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5867 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3006","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5867 into sdk\" (#3006)"},{"Id":"416947647","IsPullRequest":true,"CreatedAt":"2019-03-05T00:27:04","Actor":"nugetlurker","Number":"3005","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5867 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5867 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3005","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5867 into sdk\" (#3005)"},{"Id":"417040414","IsPullRequest":false,"CreatedAt":"2019-03-04T23:24:46","Actor":"sbomer","Number":"3007","RawContent":null,"Title":"Duplicate items in _ResolvedCopyLocalPublishAssets","State":"open","Body":"- When `ResolveCopyLocalAssets` runs during self-contained publish (`_UseBuildDependencyFile` is false), it outputs `_ResolvedCopyLocalPublishAssets`.\r\n- When `_ComputeResolvedCopyLocalPublishAssets` runs, it adds to `_ResolvedCopyLocalPublishAssets` the contents of (`ReferenceCopyLocalPaths` \\ `_ResolvedCopyLocalBuildAssets`):\r\nhttps://github.com/dotnet/sdk/blob/c60af5f303fa67d25550ecfa54975caef0f5c828/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L398-L399\r\n\r\n`_ResolvedCopyLocalBuildAssets` is empty, so it gets a duplicate copy of items in `ReferenceCopyLocalPaths` (which comes from `RuntimePackAsset`), for example `System.Private.CoreLib.dll`.\r\n\r\nBefore https://github.com/dotnet/sdk/pull/2646, `ResolvedAssembliesToPublish` only had one Item for System.Private.CoreLib.dll. I noticed this while trying to update https://github.com/mono/linker/blob/master/src/ILLink.Tasks/ILLink.Tasks.targets#L451 to work with the newest SDK. `_ManagedAssembliesToLink` was computed from `ResolvedAssembliesToPublish`, but that line breaks when there are multiple files with the same Filename in the input:\r\n```\r\nC:\\Users\\svbomer\\.nuget\\packages\\illink.tasks\\0.1.6\\build\\ILLink.Tasks.targets(451,34): error MSB4094: \"C:\\Users\\svbomer\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\3.0.0-preview-27324-5\\runtimes\\win-x64\\native\\System.Private.CoreLib.dll;C:\\Users\\svbomer\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\3.0.0-preview-27324-5\\runtimes\\win-x64\\native\\System.Private.CoreLib.dll\" is an invalid value for the \"AssemblyPath\" parameter of the \"CheckEmbeddedRootDescriptor\" task. Multiple items cannot be passed into a parameter of type \"Microsoft.Build.Framework.ITaskItem\". [D:\\linker\\test\\ILLink.Tasks.Tests\\bin\\debug\\netcoreapp3.0\\helloworld\\helloworld.csproj]\r\n```\r\n\r\nhttps://github.com/dotnet/sdk/pull/2666 may be relevant.\r\n\r\n/cc @peterhuene @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/3007","RelatedDescription":"Open issue \"Duplicate items in _ResolvedCopyLocalPublishAssets\" (#3007)"},{"Id":"416329826","IsPullRequest":true,"CreatedAt":"2019-03-03T18:14:52","Actor":"dsplaisted","Number":"3002","RawContent":null,"Title":"Fix publishing self-contained ASP.NET apps","State":"closed","Body":"- Ignore .json files in runtime packs.  Fixes self-contained ASP.NET apps failing to launch with new runtime packs. @pakrym \r\n- Remove UseRefTargetingPacks property.  Fixes #2962","Url":"https://github.com/dotnet/sdk/pull/3002","RelatedDescription":"Closed or merged PR \"Fix publishing self-contained ASP.NET apps\" (#3002)"},{"Id":"416394963","IsPullRequest":true,"CreatedAt":"2019-03-02T14:26:05","Actor":"dotnet-maestro[bot]","Number":"3003","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19151.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19151.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3003","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3003)"},{"Id":"416214091","IsPullRequest":true,"CreatedAt":"2019-03-01T17:55:17","Actor":"JoeRobich","Number":"3000","RawContent":null,"Title":"Update the json manifest for the Dotfuscator Vsix","State":"closed","Body":"@livarcocc This is to update the dotfuscator manifest for a new build (in dotfuscator branch, which unfortunately still exists in this repo...)","Url":"https://github.com/dotnet/sdk/pull/3000","RelatedDescription":"Closed or merged PR \"Update the json manifest for the Dotfuscator Vsix\" (#3000)"},{"Id":"416092757","IsPullRequest":true,"CreatedAt":"2019-03-01T14:21:16","Actor":"dotnet-maestro[bot]","Number":"2999","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19128.3\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19128.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2999","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2999)"},{"Id":"415919082","IsPullRequest":false,"CreatedAt":"2019-03-01T03:00:55","Actor":"sayedihashimi","Number":"2998","RawContent":null,"Title":"Unable to run global tools in PowerShell running on macOS","State":"open","Body":"I tried to execute a global tool from PowerShell running on macOS and the tool was not located. When I run `dotnet tool list --global` it does show up. When I exit out of PowerShell, and get back into a normal bash prompt, the global tool works fine.\r\n\r\nmacOS version = 10.14.2\r\n\r\n![global-tool](https://user-images.githubusercontent.com/1283154/53613386-f3f2e280-3ba3-11e9-90de-4669536bc35e.jpg)\r\n\r\nHere are the runtime/sdks that I have installed.\r\n![image](https://user-images.githubusercontent.com/1283154/53613512-2e5c7f80-3ba4-11e9-9073-9f4d0a32e6c1.png)\r\n","Url":"https://github.com/dotnet/sdk/issues/2998","RelatedDescription":"Open issue \"Unable to run global tools in PowerShell running on macOS\" (#2998)"},{"Id":"415882721","IsPullRequest":true,"CreatedAt":"2019-03-01T00:15:02","Actor":"fadimounir","Number":"2997","RawContent":null,"Title":"Crossgen Task","State":"open","Body":"Intitial implementation of the crossgen task, and plumbing in the SDK targets to invoke the task. The crossgen task invokes crossgen from the runtime pack.\r\n\r\n- Task triggered when <ReadyToRun> is set to true in the main app's project file (opt-in feature)\r\n- Added new condition to download runtime packs: when the ReadyToRun property is set.\r\n- Adding R2R exclusion list capability\r\n- Symbol emission is optional (opt-in, when ReadyToRunEmitSymbols is set to true)","Url":"https://github.com/dotnet/sdk/pull/2997","RelatedDescription":"Open PR \"Crossgen Task\" (#2997)"},{"Id":"415838644","IsPullRequest":false,"CreatedAt":"2019-02-28T21:47:43","Actor":"nguerrera","Number":"2996","RawContent":null,"Title":"ReferenceManagerAssemblies is hidden from .NETCoreApp but not .NETStandard","State":"open","Body":"See https://github.com/dotnet/sdk/pull/2994#discussion_r261372831\r\n\r\nIs this by design? ","Url":"https://github.com/dotnet/sdk/issues/2996","RelatedDescription":"Open issue \"ReferenceManagerAssemblies is hidden from .NETCoreApp but not .NETStandard\" (#2996)"},{"Id":"415612168","IsPullRequest":true,"CreatedAt":"2019-02-28T14:26:25","Actor":"dotnet-maestro[bot]","Number":"2995","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19127.8\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19127.8\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2995","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2995)"},{"Id":"415365956","IsPullRequest":true,"CreatedAt":"2019-02-27T22:56:37","Actor":"etbyrd","Number":"2994","RawContent":null,"Title":"Remove opt-out of COM Reference Manager Tab","State":"open","Body":"This is a fix for: https://github.com/dotnet/project-system/issues/4355\r\nI tested this locally and ensured that projects built with COM references but I am not sure if anything is blocking this on the SDK side. ","Url":"https://github.com/dotnet/sdk/pull/2994","RelatedDescription":"Open PR \"Remove opt-out of COM Reference Manager Tab\" (#2994)"},{"Id":"415112893","IsPullRequest":true,"CreatedAt":"2019-02-27T14:21:22","Actor":"dotnet-maestro[bot]","Number":"2993","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19126.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19126.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2993","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2993)"},{"Id":"415027102","IsPullRequest":false,"CreatedAt":"2019-02-27T09:35:47","Actor":"Lily721","Number":"2992","RawContent":null,"Title":"issues occurred when .Net core console project reference .net framework class library","State":"closed","Body":"I got a .NET Core console project which use .NET Core 3.0 preview, and other class library with .NET Framework 4 Client Profile, and this framework class library got a reference from System.Security which using PermissionSet like following:\r\n\r\n`using System.Security;`\r\n`......................................`\r\n`new PermissionSet(PermissionState.Unrestricted).Demand();`\r\n\r\nWhen I add this class library to NetCore console project, everything is fine when build, but got an issue during debug:\r\n`System.TypeLoadException: 'Could not load type 'System.Security.PermissionSet' from assembly 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.'`\r\n\r\nThen I checked the mscorlib.dll in local folder:(C:\\Users\\*****\\.nuget\\packages\\microsoft.netcore.app\\3.0.0-preview-27117-01\\ref\\netcoreapp3.0)\r\nand reflector it but without any system.Security namespace in it.\r\n\r\nSwitch to net core 2.0, got same issue.\r\n\r\nAnyone can help? thanks a lot.","Url":"https://github.com/dotnet/sdk/issues/2992","RelatedDescription":"Closed issue \"issues occurred when .Net core console project reference .net framework class library\" (#2992)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1105555943285288961","CreatedAt":"2019-03-12T19:47:31+00:00","UserScreenname":"dotnet","Text":"Tune in to the @VisualStudio channel on Thursday for a virtual workshop for Windows Application Developers\n\nMore de… https://t.co/6IsLRLIz6N","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":4,"RawContent":null},{"Id":"1105063819985014785","CreatedAt":"2019-03-11T11:12:00+00:00","UserScreenname":"dotnet","Text":"In this episode of #OnDotNet, Brady Gaster (@bradygaster) joins Cecil (@cecilphillip) to show how easy it is to add… https://t.co/qBrPW5zgnp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":21,"RawContent":null},{"Id":"1103473660508160001","CreatedAt":"2019-03-07T01:53:16+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3 Preview 3 https://t.co/sXYAjLR9Wb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":357,"FavoriteCount":217,"RawContent":null},{"Id":"1103058093301149696","CreatedAt":"2019-03-05T22:21:57+00:00","UserScreenname":"dotnet","Text":"Floating-Point Parsing and Formatting improvements in .NET Core 3.0 https://t.co/oYZK5AK8h6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":84,"FavoriteCount":50,"RawContent":null},{"Id":"1103021890837262337","CreatedAt":"2019-03-05T19:58:06+00:00","UserScreenname":"dotnet","Text":"Collecting .NET Core Linux Container CPU Traces from a Sidecar Container https://t.co/XH05KR4HVv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":23,"RawContent":null},{"Id":"1102725890788667394","CreatedAt":"2019-03-05T00:21:54+00:00","UserScreenname":"dotnet","Text":".NET Framework March 1, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019\n\nhttps://t.co/QdpE4oYqOM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2019-03-14T05:30:31.2146365Z","RunDurationInMilliseconds":9479}