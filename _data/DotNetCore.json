{"Data":{"Blog":{"FeedItems":[{"Title":"We made Windows Server Core container images >40% smaller","PublishedOn":"2019-12-09T21:50:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the past year, we&#8217;ve been working with the Windows Server team to make Windows Server Core container images a lot smaller. They are now 40% smaller! The Windows Server team has already...","Href":"https://devblogs.microsoft.com/dotnet/we-made-windows-server-core-container-images-40-smaller/","RawContent":null},{"Title":"GC Perf Infrastructure – Part 1","PublishedOn":"2019-12-09T09:33:32+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We open sourced our new GC Perf Infrastructure! It’s now part of the dotnet performance repo. I’ve been meaning to write about it ‘cause some curious minds had been asking when they could use it after...","Href":"https://devblogs.microsoft.com/dotnet/gc-perf-infrastructure-part-1/","RawContent":null},{"Title":".NET Core 2.2 will reach End of Life on December 23, 2019","PublishedOn":"2019-12-05T19:55:57+00:00","CommentsCount":5,"FacebookCount":0,"Summary":".NET Core 2.2 was released on December 4, 2018. As a non-LTS (&#8220;Current&#8221;) release, it is supported for three months after the next release. .NET Core 3.0 was released on September 23, 2019....","Href":"https://devblogs.microsoft.com/dotnet/net-core-2-2-will-reach-end-of-life-on-december-23-2019/","RawContent":null},{"Title":"Updates to .NET Core Windows Forms designer in Visual Studio 16.5 Preview 1","PublishedOn":"2019-12-05T18:56:40+00:00","CommentsCount":41,"FacebookCount":0,"Summary":"We are happy to announce the new preview version of the .NET Core Windows Forms designer, which is available with the Visual Studio 16.5 Preview 1.\nThe big news is that the designer is now part of...","Href":"https://devblogs.microsoft.com/dotnet/updates-to-net-core-windows-forms-designer-in-visual-studio-16-5-preview-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.1 and Entity Framework 6.4","PublishedOn":"2019-12-03T20:32:00+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Announcing Entity Framework Core 3.1 and Entity Framework 6.4\nWe are excited to announce the general availability of EF Core 3.1 and EF 6.4 on nuget.org.\nThe final versions of .NET Core 3.1 and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-1-and-entity-framework-6-4/","RawContent":null},{"Title":"Announcing .NET Core 3.1","PublishedOn":"2019-12-03T17:32:24+00:00","CommentsCount":70,"FacebookCount":0,"Summary":"Announcing .NET Core 3.1\nWe’re excited to announce the release of .NET Core 3.1. It&#8217;s really just a small set of fixes and refinements over .NET Core 3.0, which we released just over two months...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/","RawContent":null},{"Title":"Embracing nullable reference types","PublishedOn":"2019-11-27T20:55:06+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"Probably the most impactful feature of C# 8.0 is Nullable Reference Types (NRTs). It lets you make the flow of nulls explicit in your code, and warns you when you don&#8217;t act according to...","Href":"https://devblogs.microsoft.com/dotnet/embracing-nullable-reference-types/","RawContent":null},{"Title":".NET Framework November 2019 Preview of Quality Rollup","PublishedOn":"2019-11-20T05:28:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the November 2019 Preview of Quality Rollup\nQuality and Reliability\nThis release contains the following quality and reliability improvements for .NET Framework for Windows 8.1,...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-november-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core November 2019 Updates – 2.1.14, 2.2.8, and 3.0.1","PublishedOn":"2019-11-19T20:11:16+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November 2019 Update. These updates only contain non-security fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a Visual...","Href":"https://devblogs.microsoft.com/dotnet/net-core-november-2019/","RawContent":null},{"Title":"Announcing .NET Core 3.1 Preview 3","PublishedOn":"2019-11-14T17:16:36+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.1 Preview 3. .NET Core 3.1 is a small and short release focused on key improvements in Blazor and Windows desktop, the two big additions in .NET Core 3.0.. It...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-3/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10879854793","Type":"IssuesEvent","CreatedAt":"2019-11-17T05:53:48","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/155","RelatedDescription":"Opened issue \"Typos in CLA bot profile\" (#155) at dotnet/foundation","RelatedBody":"https://github.com/dnfclas\r\n\r\n## Expected\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003693-983ed400-0941-11ea-91d9-18c29e752b81.png)\r\n\r\n## Actual\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003652-ec958400-0940-11ea-8239-f9b19a7dc957.png)\r\n\r\nAlways capitalized, never .Net or dot NET. \r\n\r\n[.NET Glossary](https://github.com/dotnet/docs/blob/master/docs/standard/glossary.md#net)\r\n\r\n[Microsoft Style Guide](https://github.com/MicrosoftDocs/microsoft-style-guide/blob/master/styleguide/a-z-word-list-term-collections/n/net.md)"},{"Id":"10878192098","Type":"PullRequestEvent","CreatedAt":"2019-11-16T15:59:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/154","RelatedDescription":"Opened pull request \"Fix broken links\" (#154) at dotnet/foundation","RelatedBody":""},{"Id":"10864162405","Type":"PullRequestEvent","CreatedAt":"2019-11-14T16:22:28","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/153","RelatedDescription":"Opened pull request \"Fix broken links\" (#153) at dotnet/foundation","RelatedBody":""},{"Id":"10863953091","Type":"PullRequestEvent","CreatedAt":"2019-11-14T16:00:24","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/152","RelatedDescription":"Opened pull request \"Fix broken links\" (#152) at dotnet/foundation","RelatedBody":""},{"Id":"10823146740","Type":"PullRequestEvent","CreatedAt":"2019-11-08T23:32:03","Actor":"onovotny","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Merged pull request \"Update RxUI license to reflect repo\" (#151) at dotnet/foundation","RelatedBody":"Fixes https://github.com/dotnet-foundation/dotnetfoundation-website/issues/68"},{"Id":"10822052136","Type":"PullRequestEvent","CreatedAt":"2019-11-08T20:13:07","Actor":"onovotny","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Opened pull request \"Update RxUI license to reflect repo\" (#151) at dotnet/foundation","RelatedBody":""},{"Id":"10806560653","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:43:05","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Merged pull request \"(GH-111) Update Source Link location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"10806557022","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:42:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Merged pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10806555226","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:41:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Merged pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""},{"Id":"10537155256","Type":"PullRequestEvent","CreatedAt":"2019-10-01T20:30:21","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Opened pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10530380699","Type":"PullRequestEvent","CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Opened pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11050403011","Type":"IssuesEvent","CreatedAt":"2019-12-10T03:08:33","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/144","RelatedDescription":"Opened issue \"Removal of read-collaborator access\" (#144) at dotnet/announcements","RelatedBody":"***TL;DR**: We’ll remove collaborators with read-only access from our public repos on December 16th. This means some folks will lose their Collaborator badge and the ability to interact with the CI system.*\r\n\r\nOver the years, we’ve added a bunch of folks as collaborators with read permissions to our public repos. The rationale was that we wanted to be able to assign issues to community members because GitHub only allowed assigning issues to users with an explicit permission grant for the repository. However, they changed this in [June 2019](https://github.blog/2019-06-25-assign-issues-to-issue-commenters/). Now, we can assign issues to all users with explicit permissions as well as to users that have commented on the specific issue.\r\n\r\nAlso, we recently started to audit and tighten the permissions for our organizations. As a result, it became clear that large number of repo-specific permission grants are hard to review and audit. Internally, our goal is to grant all permissions via teams instead.\r\n\r\nHence, we plan to remove all collaborators from public repos that only have read permissions (folks with triage permissions will remain). The full list of affected repos is listed below.\r\n\r\nThis shouldn’t impact your ability to work with us, but losing explicit read-only has the following implications:\r\n\r\n-   **You’ll lose the contributor badge**. We understand that this is visually appealing and for some people it might have been a badge of honor. But given that GitHub also shows a Contributor bade for folks whose PRs got merged, we don’t think it this will be a major take back.    \r\n    ![image](https://user-images.githubusercontent.com/5169960/70491508-43acf580-1ab6-11ea-94df-74ea2dde98b4.png)\r\n\r\n\r\n-   **You lose the ability to interact with the CI system**. As a collaborator, you can use comments to [send commands to the CI system](https://github.com/dotnet/runtime/blob/master/docs/project/pullrequest-builds.md). While this can be useful at times, we generally don’t expect (or desire) contributors to do that. Of course, anyone can still access the CI logs.\r\n\r\n| Public Repo                | \\#collaborators with read |\r\n|----------------------------|---------------------------|\r\n| arcade                     | 1                         |\r\n| BenchmarkDotNet            | 11                        |\r\n| cli                        | 2                         |\r\n| command-line-api           | 14                        |\r\n| coreclr                    | 18                        |\r\n| corefx                     | 180                       |\r\n| corefxlab                  | 4                         |\r\n| corert                     | 7                         |\r\n| core-sdk                   | 1                         |\r\n| docs                       | 3                         |\r\n| interactive-window         | 1                         |\r\n| machinelearning            | 1                         |\r\n| machinelearning-samples    | 1                         |\r\n| msbuild-language-service   | 1                         |\r\n| runtime                    | 128                       |\r\n| spark                      | 5                         |\r\n| standard                   | 1                         |\r\n| windowsdesktop             | 1                         |\r\n| winforms-datavisualization | 1                         |\r\n| Grand Total                | 381                       |\r\n\r\n### Discussion\r\n\r\nTo discuss this, please comment on the corresponding issue at https://github.com/dotnet/runtime/issues/718."},{"Id":"11003471296","Type":"IssuesEvent","CreatedAt":"2019-12-03T20:36:30","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/143","RelatedDescription":"Opened issue \".NET Core `latest` Docker tags updated to 3.1\" (#143) at dotnet/announcements","RelatedBody":"# .NET Core `latest` Docker tags updated to 3.1\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.1](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/).\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1511)\r\n\r\n## Details\r\n\r\n* [dotnet-docker#1509](https://github.com/dotnet/dotnet-docker/pull/1509)\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.1. This version of .NET Core is also a [long-term supported (LTS) release](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n\r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.1`."},{"Id":"11002231262","Type":"IssuesEvent","CreatedAt":"2019-12-03T18:00:28","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/142","RelatedDescription":"Opened issue \".NET Core 3.1.0\" (#142) at dotnet/announcements","RelatedBody":".NET Core 3.1.0 is available and https://github.com/dotnet/core/issues/3950 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.0.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 , either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"},{"Id":"10873564628","Type":"IssuesEvent","CreatedAt":"2019-11-15T16:51:28","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/141","RelatedDescription":"Opened issue \"Windows Server, version 1803 no longer supported by .NET Framework\" (#141) at dotnet/announcements","RelatedBody":"# Windows Server, version 1803 no longer supported by .NET Framework\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #451](https://github.com/microsoft/dotnet-framework-docker/issues/451)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.8`. These are tags that are supported on multiple operating systems and versions, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1803 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-1803` or `mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-1803`."},{"Id":"10873546016","Type":"IssuesEvent","CreatedAt":"2019-11-15T16:49:05","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/140","RelatedDescription":"Opened issue \"Windows Server, version 1803 no longer supported by .NET Core\" (#140) at dotnet/announcements","RelatedBody":"# Windows Server, version 1803 no longer supported by .NET Core\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Core container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1469](https://github.com/dotnet/dotnet-docker/issues/1469)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `3.0`, `3.0.0`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server, version 1803 images (even though it is no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:3.0-nanoserver-1803`."},{"Id":"10864634140","Type":"IssuesEvent","CreatedAt":"2019-11-14T17:15:09","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/139","RelatedDescription":"Opened issue \".NET Core 3.1.0 Preview 3\" (#139) at dotnet/announcements","RelatedBody":".NET Core 3.1.0 Preview 3 is available and https://github.com/dotnet/core/issues/3809 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview3.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-3/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-3/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 3, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n"},{"Id":"10862597044","Type":"IssuesEvent","CreatedAt":"2019-11-14T13:37:29","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/138","RelatedDescription":"Opened issue \"November 2019 .NET Updates\" (#138) at dotnet/announcements","RelatedBody":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework November 13, 2019, Update for .NET Framework 4.8](https://devblogs.microsoft.com/dotnet/net-framework-november-13-2019-update-for-net-framework-4-8/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"10856924757","Type":"IssuesEvent","CreatedAt":"2019-11-13T21:41:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/137","RelatedDescription":"Opened issue \".NET Framework Docker images support for Windows Server, version 1909\" (#137) at dotnet/announcements","RelatedBody":"# .NET Framework Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Framework Docker images have been published for Server Core, version 1909.  \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-framework-docker#448](https://github.com/microsoft/dotnet-framework-docker/issues/448)\r\n\r\n## Details \r\n\r\n* [dotnet-framework-docker#447](https://github.com/microsoft/dotnet-framework-docker/pull/447) \r\n\r\n.NET Framework tags containing the substring `windowsservercore-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-framework). \r\n\r\n.NET Framework multi-arch tags, such as `4.8`, have been updated to use `windowsservercore-1909` images if your host is Windows Server 1909 or higher. \r\n\r\n### Impacted Repos \r\n\r\n* [dotnet/framework/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk/): .NET Framework SDK \r\n* [dotnet/framework/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): ASP.NET Runtime  \r\n* [dotnet/framework/wcf](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): Windows Communication Foundation \r\n* [dotnet/framework/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime/): .NET Framework Runtime\r\n* [dotnet/framework/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples/): .NET Framework Samples\r\n\r\n"},{"Id":"10847180825","Type":"IssuesEvent","CreatedAt":"2019-11-12T22:05:52","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/136","RelatedDescription":"Opened issue \".NET Core Docker images support for Windows Server, version 1909\" (#136) at dotnet/announcements","RelatedBody":"# .NET Core Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Core Docker images have been published for Nano Server, version 1909. \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-docker#1460](https://github.com/dotnet/dotnet-docker/issues/1460)\r\n## Details\r\n\r\n* [dotnet-docker#1457](https://github.com/dotnet/dotnet-docker/pull/1457)\r\n\r\n.NET Core tags containing the substring `nanoserver-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-core).\r\n\r\n.NET Core multi-arch tags, such as `3.0`, have been updated to use `nanoserver-1909` images if your host is Windows Server 1909 or higher.\r\n\r\n### Impacted Repos\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk/): .NET Core SDK\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): ASP.NET Core Runtime\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime/): .NET Core Runtime\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples/): .NET Core Samples\r\n\r\n"},{"Id":"10822538366","Type":"IssuesEvent","CreatedAt":"2019-11-08T21:33:13","Actor":"CESARDELATORRE","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/135","RelatedDescription":"Opened issue \"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)\" (#135) at dotnet/announcements","RelatedBody":"This week (coinciding with Microsoft Ignite 2019) we announced the release of **ML.NET 1.4 GA**. \r\nThere are many new features such as:\r\n\r\n**- New Deep Learning Image Classifier (GA):** GPU support for training and inference Image Classifier ML models.\r\n\r\n**- Database Loader  (GA):** You can train your model with data directly from any relational database supported by System.Data.\r\n\r\n**- Enhanced for .NET Core 3.0  (GA):** Performance improvements thanks to hardware intrinsics feature in .NET Core 3.0.\r\n\r\n**- PredictionEnginePool for scalable deployments (GA):** Recommended approach for multi-threaded scalable apps such as ASP.NET Core apps/services and Azure Functions\r\n\r\n**- ML.NET and .NET support in Jupyter notebooks:**  You can now run any .NET code (C# / F#) in Jupyter notebooks and therefore run ML.NET code in it as well. Great for exploring and documenting model training experiments, data distribution exploration, data cleaning, plotting data charts, learning scenarios such as ML.NET courses, hands-on-labs and quizzes, etc.\r\n\r\nSee details in the following **Blog Posts**:\r\n\r\n- [Announcing ML.NET 1.4 general availability (Machine Learning for .NET)](https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-global-availability-machine-learning-for-net/)\r\n\r\n- [Using ML.NET in Jupyter notebooks](https://devblogs.microsoft.com/cesardelatorre/using-ml-net-in-jupyter-notebooks/)\r\n\r\n- [.NET Core with Jupyter Notebooks](https://devblogs.microsoft.com/dotnet/net-core-with-juypter-notebooks-is-here-preview-1/)\r\n"},{"Id":"10780907118","Type":"IssuesEvent","CreatedAt":"2019-11-04T13:57:09","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/134","RelatedDescription":"Opened issue \".NET Core 3.1.0 Preview 2\" (#134) at dotnet/announcements","RelatedBody":".NET Core 3.1.0 Preview 1 is available and https://github.com/dotnet/core/issues/XXXX has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview2.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-2/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-2/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 1, either responding to https://github.com/dotnet/core/issues/XXXX, creating a new issue or creating a new issue in one of the following repos:\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"},{"Id":"10748742804","Type":"IssuesEvent","CreatedAt":"2019-10-30T15:14:54","Actor":"jaredpar","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/133","RelatedDescription":"Opened issue \"Repository Consolidation Timeline\" (#133) at dotnet/announcements","RelatedBody":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27549.*\r\n\r\nAs we [announced](https://github.com/dotnet/announcements/issues/119) [earlier](https://github.com/dotnet/announcements/issues/127) we are planning on consolidating some of the repositories in the dotnet org. Our planning has reached a point where we have a schedule for the coreclr, corefx and core-setupmoves into dotnet/runtime that we want to share out with the community.\r\n\r\n### November 13th\r\nWe’ll move all changes from the original repositories into dotnet/runtime up to 5PM PST on November 13th. We’ll try to help as many pull requests as possible get merged by then. At that point, if there’s any pull requests still open we’ll have to close them. If you’d still like to continue those pull requests, we’d encourage you to bring them to dotnet/runtime in a new pull request.\r\n\r\nThe repositories themselves will be effectively archived at this point. The state of the “master” branch will be recorded with a tag, named “master-archive”, but the branch itself will be deleted. The default branch for the repositories will be named “archive” and it will be a single commit with a README.md and CONTRIBUTING.md file pointing to our dotnet/runtime repository.\r\n\r\nThe repositories will remain active for servicing changes to .NET Core 3.1 and earlier hence we will not be using the GitHub archive capability. \r\n\r\n### November 22nd\r\nThe dotnet/runtime repository will be made public and available for community contribution. Even though the repository will be created on November 13th it will take several days to get it back into a working order: fixing up our build scripts, recreating our Azure Dev Ops build definitions, etc … Until those tasks are completed it will not be possible to accept pull request and hence the repository will remain private. Once we are in a state that pull requests can be merged again the repository will be made public.\r\n\r\nOur expectation is that will occur on November 22nd. If it is ready sooner it will be made public sooner. If the work takes longer than we planned then we will add an update to this announcement with a new expected date.\r\n\r\n### December 1st-2nd\r\nAll issues, open and closed, will be migrated from corefx, coreclr and core-setup into dotnet/runtime. This will be using GitHub’s existing issue transfer feature in a bulk migration. This means all of the existing issue links will continue to function via redirects.\r\n\r\nThis does mean though that labels will not transfer with the issues. Labels will be re-applied as a post processing step by our engineering team once the issue migration completes.\r\n\r\nEven though our issues won’t be fully migrated until this time we’d like the community to begin filing issues on dotnet/runtime as soon as it’s public rather than continuing to file issues on the original repositories.\r\n\r\n### Migrating Commits\r\nThe dotnet/runtime repository will be a new commit history from the original repositories. We are using this consolidation as an opportunity to clean up our history with the goal of having a cleaner, smaller history as a starting point. This means commits will be rewritten in the following ways as they are migrated to dotnet/runtime:\r\n\r\n1. Author information, contributor information, changed file list and time stamps from the original commit will be preserved.\r\n1. Links to issues, pull requests or commits in the repository using GitHub short links will be rewritten so they continue to point the original repository. \r\n1. Every commit will be appended with a link to the original commit it was mapped from.\r\n\r\nThe actual contents of the commit though will be updated to match the new directory layout of the dotnet/runtime repository."},{"Id":"10738283611","Type":"IssuesEvent","CreatedAt":"2019-10-29T14:32:57","Actor":"mthalman","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/132","RelatedDescription":"Opened issue \"Release of Alpine 3.10 Docker images\" (#132) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Docker images updated to Alpine 3.10\r\n\r\nDocker images for .NET Core have been released that support Alpine 3.10.  Included with this release, the floating tags for Alpine-based images have been moved from Alpine 3.9 to 3.10.  \r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n[dotnet/dotnet-docker#1418](https://github.com/dotnet/dotnet-docker/issues/1418)\r\n\r\n## Details\r\n* [dotnet/dotnet-docker#1415](https://github.com/dotnet/dotnet-docker/pull/1415)\r\n\r\nIf you made use of a floating tag for Alpine, such as `3.0-alpine`, `2.2-alpine`, and `2.1-alpine`, these have been changed to now reference Alpine 3.10 instead of Alpine 3.9.  Be sure to pull this tag on your Docker machine to get the latest image.\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"11043641439","Type":"PullRequestEvent","CreatedAt":"2019-12-09T11:37:48","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27967","RelatedDescription":"Opened pull request \"Port to 2.1 - Fix VirtualMemoryLogging::logRecords overflow\" (#27967) at dotnet/coreclr","RelatedBody":"Issue: https://github.com/dotnet/coreclr/issues/27547\r\n\r\nCustomer impact\r\n---\r\n\r\nCrash or hang in long running (days) processes on Linux, triggered by runtime executing 2 billion of  virtual memory operations.\r\n\r\nRegression?\r\n---\r\n\r\nNot a regression - the bug is present since .NET Core 1.0. Windows/Linux reliability gap.\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n----\r\n\r\nwhen VirtualMemoryLogging::recordNumber increments from LONG_MAX,\r\nit became negative number, and the result of i % MaxRecords became\r\na number from -127 to 0.\r\n\r\nWhen that happens we will ovewrite CRITICAL_SECTION virtual_critsec\r\nwhich are stored in bss right before logRecords with garbage data.\r\nThen most likely the process will have a GC hang with one or more\r\nGC threads stuck trying to enter or leave critical section.\r\n\r\nThe fix is to ensure ULONG value are passed to modulo operation."},{"Id":"11036768799","Type":"IssuesEvent","CreatedAt":"2019-12-07T23:20:57","Actor":"EgorBo","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27966","RelatedDescription":"Opened issue \"JIT: Optimize simple arithmetic with GT_NEG\" (#27966) at dotnet/coreclr","RelatedBody":"E.g. `-a + b` => `b - a`.\r\n```csharp\r\nint M1(int a, int b) => -a +  b; // optimize to  \"b - a\"\r\nint M2(int a, int b) =>  a + -b; // optimize to  \"a - b\"\r\nint M3(int a, int b) =>  a - -b; // optimize to  \"a + b\"\r\nint M4(int a, int b) => -a - -b; // optimize to  \"b - a\"\r\n```\r\nCurrent codegen:\r\n```asm\r\n; Method CC:M1(int,int):int:this\r\nG_M48868_IG02:\r\n       mov      eax, edx\r\n       neg      eax\r\n       add      eax, r8d\r\n\r\n; Method CC:M2(int,int):int:this\r\nG_M15271_IG02:\r\n       mov      eax, r8d\r\n       neg      eax\r\n       add      eax, edx\r\n\r\n; Method CC:M3(int,int):int:this\r\nG_M13857_IG02:\r\n       mov      eax, r8d\r\n       neg      eax\r\n       sub      edx, eax\r\n       mov      eax, edx\r\n\r\n; Method CC:M4(int,int):int:this\r\nG_M28384_IG02:\r\n       mov      eax, edx\r\n       neg      eax\r\n       mov      edx, r8d\r\n       neg      edx\r\n       sub      eax, edx\r\n```\r\nExpected codegen: https://godbolt.org/z/nmZxv8"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"11050863574","Type":"PullRequestEvent","CreatedAt":"2019-12-10T04:58:40","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13106","RelatedDescription":"Merged pull request \"[automated] Merge branch 'release/3.0.1xx' => 'release/3.1.1xx'\" (#13106) at dotnet/cli","RelatedBody":"I detected changes in the release/3.0.1xx branch which have not been merged yet to release/3.1.1xx. I'm a robot and am configured to help you automatically keep release/3.1.1xx up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0.1xx by the following committers:\n\n* dotnet-maestro[bot]\n* mmitche\n* wli3\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0.1xx\r\ngit pull --ff-only\r\ngit checkout release/3.1.1xx\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0.1xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/cli HEAD:merge/release/3.0.1xx-to-release/3.1.1xx\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/cli HEAD:merge/release/3.0.1xx-to-release/3.1.1xx\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0.1xx-to-release/3.1.1xx'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0.1xx-to-release/3.1.1xx release/3.1.1xx\r\ngit pull https://github.com/dotnet-maestro-bot/cli merge/release/3.0.1xx-to-release/3.1.1xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/cli HEAD:merge/release/3.0.1xx-to-release/3.1.1xx\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0.1xx-to-release/3.1.1xx release/3.1.1xx\r\ngit pull git@github.com:dotnet-maestro-bot/cli merge/release/3.0.1xx-to-release/3.1.1xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/cli HEAD:merge/release/3.0.1xx-to-release/3.1.1xx\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"11047161287","Type":"PullRequestEvent","CreatedAt":"2019-12-09T18:21:56","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13143","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update to 3.1.100 rtm sdk\" (#13143) at dotnet/cli","RelatedBody":""},{"Id":"11046542741","Type":"PullRequestEvent","CreatedAt":"2019-12-09T17:03:20","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/13144","RelatedDescription":"Closed pull request \"[release/3.1.2xx] Update to 3.1.100 rtm sdk\" (#13144) at dotnet/cli","RelatedBody":""},{"Id":"11041127600","Type":"PullRequestEvent","CreatedAt":"2019-12-09T05:23:18","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13148","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#13148) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n"},{"Id":"11040456334","Type":"PullRequestEvent","CreatedAt":"2019-12-09T02:28:16","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/13153","RelatedDescription":"Closed pull request \"Update stage 0\" (#13153) at dotnet/cli","RelatedBody":""},{"Id":"11040349571","Type":"PullRequestEvent","CreatedAt":"2019-12-09T01:59:06","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13153","RelatedDescription":"Opened pull request \"Update stage 0\" (#13153) at dotnet/cli","RelatedBody":""},{"Id":"11039999709","Type":"PullRequestEvent","CreatedAt":"2019-12-09T00:00:50","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13152","RelatedDescription":"Opened pull request \"Update stage0\" (#13152) at dotnet/cli","RelatedBody":""},{"Id":"11036897025","Type":"PullRequestEvent","CreatedAt":"2019-12-08T00:30:22","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13151","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Enable official builds on internal branches\" (#13151) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"11043699347","Type":"IssuesEvent","CreatedAt":"2019-12-09T11:45:47","Actor":"IanKemp","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1661","RelatedDescription":"Opened issue \"2.1 release timeline?\" (#1661) at dotnet/standard","RelatedBody":"It's been more than 2 years since Standard 2.0. We're already on Core 3.1 that's LTS, when can we expect the next version of Standard? Or is Standard dead and we should just use Core for everything going forward?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"11050920469","Type":"IssuesEvent","CreatedAt":"2019-12-10T05:11:59","Actor":"dehghani-mehdi","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/42765","RelatedDescription":"Opened issue \"Why `System.Runtime.Caching` has dependency to `System.Security.Principal.Windows`?\" (#42765) at dotnet/corefx","RelatedBody":"Why `System.Runtime.Caching` has dependency to `System.Security.Principal.Windows`?"},{"Id":"11050907733","Type":"IssuesEvent","CreatedAt":"2019-12-10T05:08:58","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/42592","RelatedDescription":"Closed issue \"Why `System.Runtime.Caching` has dependency to `System.Security.Principal.Windows`?\" (#42592) at dotnet/corefx","RelatedBody":"I think this 2 are completely different things.\r\nI like to know why and also what happens in other OS, e.g Linux? would you explain.\r\n\r\nThank you"},{"Id":"11050023956","Type":"IssuesEvent","CreatedAt":"2019-12-10T01:47:31","Actor":"dngur807","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/42764","RelatedDescription":"Opened issue \"Windows and Linux results are different when using the Process.GetCurrentProcess function.\" (#42764) at dotnet/corefx","RelatedBody":"The result of GetCurrentProcess for each os.\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/14495376/70487711-9c71a200-1b39-11ea-8d95-babf3ff2c96d.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/14495376/70487725-aa272780-1b39-11ea-98b9-7d81bd4e4fa2.png)\r\n\r\ncentos7 some information is missing.\r\n\r\n\r\nI've been told that this issue is fixed in dotnet core 3.1.\r\nHowever, the issue also occurs after applying dotnet core 3.1.\r\n\r\nIf you know the reason for that, please share it.\r\n\r\n"},{"Id":"11049638431","Type":"IssuesEvent","CreatedAt":"2019-12-10T00:24:44","Actor":"vatsan-madhavan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/42763","RelatedDescription":"Opened issue \"Add System.Reflection.PathAssemblyResolver support for 'retargetable' assemblies\" (#42763) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/issues/40523#issue-484261911\r\n\r\n> .assembly extern retargetable mscorlib\r\n> {\r\n> .publickeytoken = (7C EC 85 D7 BE A7 79 8E ) // |.....y.\r\n> .ver 2:0:5:0\r\n> }\r\n> \r\n> If any assemblies loaded by `MetadataLoadContext` were built against some older versions of mscorlib, `PathAssemblyResolver` will fail to match any newer versions of mscorlib present in `assemblyPaths`, due to a public key token mismatch. `PathAssemblyResolver` already supports taking the most recent version for target assemblies with an empty public key token.\r\n> \r\n> https://github.com/dotnet/corefx/blob/master/src/System.Reflection.MetadataLoadContext/src/System/Reflection/PathAssemblyResolver.cs#L80\r\n> \r\n> Add support for most-recent assembly match when assembly being resolved is 'retargetable'.\r\n\r\nThis was fixed in .NET 5 - https://github.com/dotnet/corefx/pull/40581.  We did not take this change into .NET Core 3.1 since the evidence was not clear at that time that this would be a big problem. \r\n \r\nSince the release of .NET Core 3.1, several WPF customers have reported that this is a blocking problem. \r\n\r\n- https://developercommunity.visualstudio.com/content/problem/806211/wpf-apps-fail-to-compile-after-updating-to.html\r\n- https://developercommunity.visualstudio.com/content/problem/845412/vs2019-164-fails-to-build-windowsdesktop-project-t.html\r\n- https://github.com/dotnet/wpf/issues/2274\r\n- https://github.com/dotnet/wpf/issues/2277\r\n\r\nWe would like this fix backported to .NET Core 3.1 as part of an upcoming servicing update. \r\n\r\n/cc @ericstj, @nguerrera, @rladuca, @steveharter "},{"Id":"11049530344","Type":"IssuesEvent","CreatedAt":"2019-12-10T00:02:38","Actor":"StephenBonikowsky","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/13532","RelatedDescription":"Closed issue \"Implement distributed/promoted transactions in System.Transactions.\" (#13532) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"11050703263","Type":"PullRequestEvent","CreatedAt":"2019-12-10T04:19:28","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/40207","RelatedDescription":"Merged pull request \"Nullable warning for iteration variables is W-warning\" (#40207) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/40164"},{"Id":"11050703251","Type":"IssuesEvent","CreatedAt":"2019-12-10T04:19:28","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/40164","RelatedDescription":"Closed issue \"Should report CS8600 rather than CS8606 assigning to an iteration variable\" (#40164) at dotnet/roslyn","RelatedBody":"Non-safety nullable warnings should use a single warning (CS8600) to allow those warnings to be suppressed easily (`#pragma warning disable 8600`). Currently, assigning to an iteration variable uses a distinct warning.\r\n```C#\r\n#nullable enable\r\nclass Program\r\n{\r\n    static void F(object?[] x)\r\n    {\r\n         foreach (object y in x)\r\n         {\r\n         }\r\n    }\r\n}\r\n```\r\n```\r\n(6,26): warning CS8606: Possible null reference assignment to iteration variable\r\n```"},{"Id":"11050614839","Type":"PullRequestEvent","CreatedAt":"2019-12-10T03:57:20","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/40271","RelatedDescription":"Opened pull request \"Correct lowering of conversions between decimal and nint/nuint\" (#40271) at dotnet/roslyn","RelatedBody":""},{"Id":"11050586842","Type":"IssuesEvent","CreatedAt":"2019-12-10T03:50:28","Actor":"RussKie","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/40270","RelatedDescription":"Opened issue \"Indexer resolution for subclasses of `KeyedCollection<TKey, TItem>`\" (#40270) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n```\r\nMicrosoft Visual Studio Enterprise 2019 Int Preview\r\nVersion 16.5.0 Preview 2.0 [29601.14.master]\r\nVisualStudio.16.IntPreview/16.5.0-pre.2.0+29601.14.master\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\n\r\n\r\n```cs\r\nusing System;\r\nusing System.Collections.ObjectModel;\r\n\r\nnamespace SimpleWinForms\r\n{\r\n    static class Program\r\n    {\r\n        [STAThread]\r\n        static void Main()\r\n        {\r\n            var collection = new CustomCollection();\r\n            collection.Add(TaskDialogResult.OK);\r\n            collection.Add(TaskDialogResult.Cancel);\r\n\r\n            var button = collection[0];\r\n        }\r\n    }\r\n    public enum TaskDialogResult : int\r\n    {\r\n        None = 0,\r\n        OK = 1,\r\n        Cancel = 2,\r\n    }\r\n\r\n    public class Container\r\n    {\r\n        public Container(TaskDialogResult result)\r\n        {\r\n            Result = result;\r\n        }\r\n\r\n        public TaskDialogResult Result { get; }\r\n    }\r\n\r\n    public class CustomCollection : KeyedCollection<TaskDialogResult, Container>\r\n    {\r\n        public Container Add(TaskDialogResult result)\r\n        {\r\n            var button = new Container(result);\r\n            Add(button);\r\n\r\n            return button;\r\n        }\r\n\r\n        protected override TaskDialogResult GetKeyForItem(Container item) => item.Result;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n**Expected Behavior**:\r\n\r\n1. No `System.Collections.Generic.KeyNotFoundException` without the indexer overloads\r\n2. No inherited indexers shown once there is an overload in place\r\n\r\n**Actual Behavior**:\r\n\r\n1. The intellisense shows 2 overloads for the indexer:\r\n![overloads](https://user-images.githubusercontent.com/4403806/70492895-05691200-1b5a-11ea-984a-8dbf1ff79ced.gif)\r\nOne for `KeyedCollection<TKey, TItem>` and one `Collection<T>`.\r\n\r\n1. If the above code is executed it fails with `System.Collections.Generic.KeyNotFoundException`:\r\n```\r\nSystem.Collections.Generic.KeyNotFoundException\r\n  HResult=0x80131577\r\n  Message=The given key 'None' was not present in the dictionary.\r\n  Source=System.ObjectModel\r\n  StackTrace:\r\n   at System.Collections.ObjectModel.KeyedCollection`2.get_Item(TKey key)\r\n   at SimpleWinForms.Program.Main() in C:\\Development\\!Repro\\SimpleWinForms\\SimpleWinForms\\Program.cs:line 19\r\n```\r\nThe `0` is treated not as an index but as `(TaskDialogResult)0`. I guess it can be argued that it makes sense, given that `KeyedCollection<TKey, TItem>` defines its indexer as `TItem this[TKey key] { get; set; }`. However However `Collection<T>`, which `KeyedCollection<TKey, TItem>` inherits from, defines its indexer as `T this[int index] { get; set; }`. \r\nAnd (❗️) `Collection<T>.this[int index]` indexer is shown by the intellisense.\r\nFrom a consumer point of view this behaviour is unexpected.\r\n\r\n2. To overcome the `KeyNotFoundException` we can introduce a new indexer overload:\r\n```cs\r\n    public class CustomCollection : KeyedCollection<TaskDialogResult, Container>\r\n    {\r\n        public new Container this[int index]\r\n        {\r\n            get => base[index];\r\n            set => base[index] = value;\r\n        }\r\n\r\n\t\t// ... existing\r\n\t}\r\n```\r\n\r\nNow the call `var button = collection[0];` works as expected, but the intellisense shows 3 overloads!\r\n![overloads1](https://user-images.githubusercontent.com/4403806/70493320-5d544880-1b5b-11ea-93e0-3904d6fbd407.gif)\r\n\r\n\r\n----\r\n\r\nOriginally reported in https://github.com/dotnet/winforms/pull/1133#issuecomment-562930731\r\n"},{"Id":"11050569271","Type":"PullRequestEvent","CreatedAt":"2019-12-10T03:46:20","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/40260","RelatedDescription":"Merged pull request \"Merge master to features/NativeInt\" (#40260) at dotnet/roslyn","RelatedBody":""},{"Id":"11050442499","Type":"IssuesEvent","CreatedAt":"2019-12-10T03:17:18","Actor":"yyjdelete","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/40269","RelatedDescription":"Opened issue \"InvalidProgramException: Common Language Runtime detected an invalid program.\" (#40269) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS2019 16.5.0 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\nCompile and run the below code with `<AllowUnsafeBlocks>true</AllowUnsafeBlocks>`\r\n```cs\r\n#define GENERIC\r\n#define WITHDEC\r\n\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nnamespace ConsoleApp6\r\n{\r\n    class Program\r\n    {\r\n        public struct ZZZ\r\n#if GENERIC\r\n            <T> where T : unmanaged\r\n#endif\r\n        {\r\n#if WITHDEC\r\n            public decimal z1;\r\n#endif\r\n            public unsafe fixed ushort _blocks[2];\r\n        }\r\n        public static unsafe void M2<T>() where T : unmanaged\r\n        {\r\n#if GENERIC\r\n            ZZZ<T> zzz = default;\r\n#else\r\n            ZZZ zzz = default;\r\n#endif\r\n#if WITHDEC\r\n            zzz.z1 = default;\r\n#endif\r\n            zzz._blocks[0] = 1;\r\n            zzz._blocks[1] = 2;\r\n#if WITHDEC\r\n            Console.WriteLine(AsDec(ref zzz));\r\n            Console.WriteLine(AsU16(ref Unsafe.AddByteOffset(ref zzz, new IntPtr(sizeof(decimal)))));\r\n            Console.WriteLine(AsU16(ref Unsafe.AddByteOffset(ref zzz, new IntPtr(sizeof(decimal) + sizeof(ushort)))));\r\n#else\r\n            Console.WriteLine(AsU16(ref zzz));\r\n            Console.WriteLine(AsU16(ref Unsafe.AddByteOffset(ref zzz, new IntPtr(sizeof(ushort)))));\r\n#endif\r\n        }\r\n\r\n        static ref decimal AsDec<T1>(ref T1 t1) => ref Unsafe.As<T1, decimal>(ref t1);\r\n        static ref ushort AsU16<T1>(ref T1 t1) => ref Unsafe.As<T1, ushort>(ref t1);\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                M2<int>();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.Error.WriteLine(ex);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nIt should work and get 0, 1, 2 as it does for non-generic version, or get an compile error if runtime never support that.\r\n\r\n**Actual Behavior**:\r\nGet 0,0,0 in netcoreapp2.1, and `InvalidProgramException` in netcoreapp3.1, and NullReferenceException without `WITHDEC` defined \r\n"},{"Id":"11050366032","Type":"PullRequestEvent","CreatedAt":"2019-12-10T03:00:19","Actor":"msftbot[bot]","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/40195","RelatedDescription":"Merged pull request \"Disallow pointer types to be used as top-level constraints on generic parameters\" (#40195) at dotnet/roslyn","RelatedBody":"Fixes #40182\r\n\r\nTagging @dotnet/roslyn-compiler @jaredpar for review."},{"Id":"11050366004","Type":"IssuesEvent","CreatedAt":"2019-12-10T03:00:19","Actor":"msftbot[bot]","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/40182","RelatedDescription":"Closed issue \"Compiler incorrectly compiling pointer constraints\" (#40182) at dotnet/roslyn","RelatedBody":"Consider this code\r\n\r\n```cs\r\nunsafe class Generic<T> where T : byte*\r\n{\r\n}\r\n```\r\n\r\nThis should issue the following error:\r\n\r\n> Program.cs(10,39): error CS0706: Invalid constraint type. A type used as a constraint must be an interface, a non-sealed class or        a type parameter.\r\n\r\nHowever the code is instead compiling. \r\n\r\nChecked with the native csc compiler and it does issue this error."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"11037252208","Type":"IssuesEvent","CreatedAt":"2019-12-08T04:00:31","Actor":"s-m-k","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7907","RelatedDescription":"Opened issue \"[Linux] crash upon generating debug symbols\" (#7907) at dotnet/corert","RelatedBody":"**Software version:**\r\nILCompiler 1.0.0-alpha-28407-01\r\n.NET Core 3.1\r\nUbuntu 18.04 x64\r\n\r\n**Symptoms:**\r\nSegmentation fault upon generating the debug symbols.\r\n```\r\nCompiling [S.P.TypeLoader]Internal.Runtime.TypeLoader.ConstrainedCallSupport+GenericConstrainedCallDesc+<>c..ctor()...\r\nCompiling [S.P.TypeLoader]Internal.Runtime.TypeLoader.ConstrainedCallSupport+NonGenericConstrainedCallDesc+<>c..ctor()...\r\nCompiling [S.P.TypeLoader]Internal.Runtime.TypeLoader.ConstrainedCallSupport.GetThunkThatDereferencesThisPointerAndTailCallsTarget(native int)...\r\nSegmentation fault (core dumped)\r\n```\r\n\r\ngdb output:\r\n```\r\nThread 1 \"ilc\" received signal SIGSEGV, Segmentation fault.\r\nDwarfMemberFunctionIdTypeInfo::DumpTypes (this=<optimized out>, TypeBuilder=<optimized out>, Streamer=<optimized out>, TypeSection=<optimized out>, StrSection=<optimized out>)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:559\r\n559     in /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp\r\n```\r\n\r\n**Expected behavior:**\r\nThe compiler succeeds and the executable with proper debug symbols is generated.\r\n\r\n**Workaround:**\r\nSpecify `<DebugSymbols>false</DebugSymbols>` and `<DebugType>none</DebugType>` in your project configuration file to avoid executing the problematic path, e.g.:\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <DebugSymbols>false</DebugSymbols>\r\n    <DebugType>none</DebugType>\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n  </PropertyGroup>\r\n```"},{"Id":"11034126461","Type":"PullRequestEvent","CreatedAt":"2019-12-07T02:38:21","Actor":"davidwrighton","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7906","RelatedDescription":"Opened pull request \"Fix LockFreeReaderHashtable\" (#7906) at dotnet/corert","RelatedBody":"- Communication of the presence of an expanding hashtable was very close to not safe\r\n  - Changed to aggressively use Interlocked operations instead\r\n- If there were 3 threads, 1 which was expanding (thread A), 1 which failed an insert and was waiting on an expand(thread B), and a third which did a lookup for the item in process of insert on thread B, the table would find the item in process of insertion\r\n  - Fixed by moving to a scheme where insertion didn't actually write in the value until it was confirmed that that spot was the right place to insert, and the value would be preserved into an expansion\r\n  - In order to acquire a sentinel for scenarios without requiring the explicit definition of one, the first item inserted is used as the sentinel. It simply exists outside of the hashtable in a side variable"},{"Id":"11033827265","Type":"PullRequestEvent","CreatedAt":"2019-12-07T00:41:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7905","RelatedDescription":"Merged pull request \"Option added to ignore specific errors\" (#7905) at dotnet/corert","RelatedBody":"- Option added to ignore specific errors\r\n\r\nThis option can be useful when verifying large sets of dlls which contain lots of the same errors (like InitOnly https://github.com/dotnet/roslyn/issues/22485).\r\n\r\n- App returns error code when verification errors exist\r\n\r\nUseful in automation scenarios\r\n\r\n- Print error code\r\n\r\nUseful to know the error code if you want to ignore it.\r\n\r\n- Continue verification when printing method fails\r\n\r\nOtherwise it will stop any further output of the app\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"11049763277","Type":"IssuesEvent","CreatedAt":"2019-12-10T00:51:19","Actor":"GregYankovoy","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/4034","RelatedDescription":"Opened issue \"dotnet new -i templates --nuget-source does not support --interactive auth\" (#4034) at dotnet/sdk","RelatedBody":"Hi,\r\n\r\ndotnet sdk version 3.1.100\r\n\r\nAttempting to install dotnet CLI templates from a secured Azure Artifacts NuGet repository does not seem to be working.  The command correctly outputs that an --interactive authentication flow may be required.  However, the dotnet new -i command does not actually support the --interactive flag.  \r\n\r\nUsing the same repository, csproj dependencies can be restored via the CLI.  See below for command output.\r\n\r\n```\r\ndotnet new -i Test.Templates --nuget-source https://privatesource.pkgs.visualstudio.com/_packaging/Test/nuget/v3/index.json\r\n\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100\\NuGet.targets(123,5): warning : The plugin credential provider could not acquire credentials. Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive=\"true\" for MSBuild or removing the -NonInteractive switch for `NuGet` [C:\\Users\\Greg\\.templateengine\\dotnetcli\\v3.1.100\\scratch\\restore.csproj]\r\n\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100\\NuGet.targets(123,5): error : Unable to load the service index for source https://privatesource.pkgs.visualstudio.com/_packaging/Test/nuget/v3/index.json. [C:\\Users\\Greg\\.templateengine\\dotnetcli\\v3.1.100\\scratch\\restore.csproj]\r\n\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100\\NuGet.targets(123,5): error :   Response status code does not indicate success: 401 (Unauthorized). [C:\\Users\\Greg\\.templateengine\\dotnetcli\\v3.1.100\\scratch\\restore.csproj]\r\n```"},{"Id":"11047962456","Type":"PullRequestEvent","CreatedAt":"2019-12-09T20:06:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4027","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#4027) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19607.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n"},{"Id":"11047754069","Type":"PullRequestEvent","CreatedAt":"2019-12-09T19:39:37","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4028","RelatedDescription":"Merged pull request \"Update stage0\" (#4028) at dotnet/sdk","RelatedBody":""},{"Id":"11046304927","Type":"IssuesEvent","CreatedAt":"2019-12-09T16:37:13","Actor":"Pilchie","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/4033","RelatedDescription":"Opened issue \"Shared resources (resx) does not work in .net core 3.1 and VS 16.4\" (#4033) at dotnet/sdk","RelatedBody":"_From @Weboholics on Monday, December 9, 2019 12:31:19 PM_\r\n\r\n\r\n### Describe the bug\r\nShared resources has stopped working since .net core 3.1 / vs.16.4.\r\nWorks with vs 16.3.4 and .net core 3.0\r\n\r\n### To Reproduce\r\nexamplecode: https://github.com/Weboholics/ResourceTest\r\n\r\nRun this code in vs.16.4  and notice that the shared resources does not work. View resources does work. This is on the /home/index page.\r\nChanging to 3.0 under vs 16.4 does not work either.\r\n\r\nIf you change visual studio to 16.3.4 and runtime to 3.0 it will work.\r\n\r\n\r\n\r\n- ASP.NET Core version: 3.1\r\n- The IDE (VS / VS Code/ VS4Mac) you're running on, and it's version: vs 16.4.0\r\n\r\n\r\n_Copied from original issue: aspnet/AspNetCore#17701_"},{"Id":"11045721889","Type":"IssuesEvent","CreatedAt":"2019-12-09T15:36:11","Actor":"Pilchie","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/4032","RelatedDescription":"Opened issue \"Building resources file needs netfx sdk?\" (#4032) at dotnet/sdk","RelatedBody":"_From @liuliang-wt on Sunday, December 8, 2019 4:01:15 PM_\r\n\r\nWhen I build a .netcore app with resource files in VS on windows, it requires me to install netfxsdk 4.7.2 to use al.exe command. It is weird that .netcore depands on netfxsdk.\r\n\r\nAnd when I try to publish a .netcore app with resource files on my mac, it failed with this error:\r\n\r\n/usr/local/share/dotnet/sdk/3.0.100/Microsoft.Common.CurrentVersion.targets(3056,5): error MSB3552: Resource file \"**/*.resx\" cannot be found. \r\n\r\n\r\n_Copied from original issue: aspnet/AspNetCore#17688_"},{"Id":"11045438194","Type":"PullRequestEvent","CreatedAt":"2019-12-09T15:07:06","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4031","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#4031) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191208.1\r\n- **Date Produced**: 12/8/2019 2:06 PM\r\n- **Commit**: 71ce4c736b882e6112b395a0e92313be5dcb4328\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19608.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19608.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19608.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n"},{"Id":"11044276294","Type":"PullRequestEvent","CreatedAt":"2019-12-09T13:01:13","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/4031","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#4031) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191208.1\r\n- **Date Produced**: 12/8/2019 2:06 PM\r\n- **Commit**: 71ce4c736b882e6112b395a0e92313be5dcb4328\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19608.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19608.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19608.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n"},{"Id":"11042804369","Type":"IssuesEvent","CreatedAt":"2019-12-09T09:54:33","Actor":"wangkanai","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/4030","RelatedDescription":"Opened issue \".NET Core Installer\" (#4030) at dotnet/sdk","RelatedBody":"Please make a .NET Core Installer that you can install multiple version of the SDK and/or runtimes like the same way you manage with Visual Studio Installer.\r\n\r\nI have create a markup concept.\r\n![image](https://user-images.githubusercontent.com/10666633/70425824-7948e300-1aa4-11ea-9466-eeac9d575a49.png)\r\n\r\n\r\nReference to Visual Studio Installer\r\n![image](https://user-images.githubusercontent.com/10666633/70420167-a9d74f80-1a99-11ea-8f52-5a759a552144.png)\r\n\r\n"},{"Id":"11040655511","Type":"IssuesEvent","CreatedAt":"2019-12-09T03:19:39","Actor":"eat-sleep-code","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/4029","RelatedDescription":"Opened issue \".NET 3.1 Installer Questions\" (#4029) at dotnet/sdk","RelatedBody":"Installing this:  https://dotnet.microsoft.com/download/dotnet-core/thank-you/runtime-aspnetcore-3.1.0-windows-x64-installer    appears to install _Microsoft.NET Core Runtime - 3.1.0 Preview 3 (x86)_\r\n\r\n**Also dotnet --info is unable to see that Microsoft .NET Core SDK 3.1.100 (x64) is installed.**\r\n\r\n> PS C:\\Windows\\system32> . \"C:\\Program Files\\dotnet\\dotnet.exe\" --info\r\n>   It was not possible to find any installed .NET Core SDKs\r\n>   Did you mean to run .NET Core SDK commands? Install a .NET Core SDK from:\r\n>       https://aka.ms/dotnet-download\r\n> \r\n> Host (useful for support):\r\n>   Version: 3.1.0\r\n>   Commit:  157910edee\r\n> \r\n> .NET Core SDKs installed:\r\n>   No SDKs were found.\r\n> \r\n> .NET Core runtimes installed:\r\n>   Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n> \r\n> To install additional .NET Core runtimes or SDKs:\r\n>   https://aka.ms/dotnet-download\r\n> PS C:\\Windows\\system32>"},{"Id":"11039991938","Type":"PullRequestEvent","CreatedAt":"2019-12-08T23:57:59","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/4028","RelatedDescription":"Opened pull request \"Update global.json\" (#4028) at dotnet/sdk","RelatedBody":""},{"Id":"11039253947","Type":"PullRequestEvent","CreatedAt":"2019-12-08T19:17:16","Actor":"mmitche","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4026","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Enable CI on internal branches\" (#4026) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"523940971","IsPullRequest":false,"CreatedAt":"2019-11-17T05:53:47","Actor":"NextTurn","Number":"155","RawContent":null,"Title":"Typos in CLA bot profile","State":"open","Body":"https://github.com/dnfclas\r\n\r\n## Expected\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003693-983ed400-0941-11ea-91d9-18c29e752b81.png)\r\n\r\n## Actual\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003652-ec958400-0940-11ea-8239-f9b19a7dc957.png)\r\n\r\nAlways capitalized, never .Net or dot NET. \r\n\r\n[.NET Glossary](https://github.com/dotnet/docs/blob/master/docs/standard/glossary.md#net)\r\n\r\n[Microsoft Style Guide](https://github.com/MicrosoftDocs/microsoft-style-guide/blob/master/styleguide/a-z-word-list-term-collections/n/net.md)","Url":"https://github.com/dotnet/foundation/issues/155","RelatedDescription":"Open issue \"Typos in CLA bot profile\" (#155)"},{"Id":"523861891","IsPullRequest":true,"CreatedAt":"2019-11-16T15:59:11","Actor":"NextTurn","Number":"154","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/154","RelatedDescription":"Open PR \"Fix broken links\" (#154)"},{"Id":"522965180","IsPullRequest":true,"CreatedAt":"2019-11-14T16:22:27","Actor":"NextTurn","Number":"153","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/153","RelatedDescription":"Open PR \"Fix broken links\" (#153)"},{"Id":"522951789","IsPullRequest":true,"CreatedAt":"2019-11-14T16:00:23","Actor":"NextTurn","Number":"152","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/152","RelatedDescription":"Open PR \"Fix broken links\" (#152)"},{"Id":"520212668","IsPullRequest":true,"CreatedAt":"2019-11-08T23:32:02","Actor":"onovotny","Number":"151","RawContent":null,"Title":"Update RxUI license to reflect repo","State":"closed","Body":"Fixes https://github.com/dotnet-foundation/dotnetfoundation-website/issues/68","Url":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Closed or merged PR \"Update RxUI license to reflect repo\" (#151)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-11-07T05:43:04","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Closed or merged PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"501128777","IsPullRequest":true,"CreatedAt":"2019-11-07T05:42:14","Actor":"gep13","Number":"150","RawContent":null,"Title":"Add new Cake Maintainer","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Closed or merged PR \"Add new Cake Maintainer\" (#150)"},{"Id":"500670461","IsPullRequest":true,"CreatedAt":"2019-11-07T05:41:48","Actor":"JimBobSquarePants","Number":"149","RawContent":null,"Title":"Add ImageSharp","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Closed or merged PR \"Add ImageSharp\" (#149)"},{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"534871799","IsPullRequest":true,"CreatedAt":"2019-12-09T11:37:47","Actor":"janvorli","Number":"27967","RawContent":null,"Title":"Port to 2.1 - Fix VirtualMemoryLogging::logRecords overflow","State":"open","Body":"Issue: https://github.com/dotnet/coreclr/issues/27547\r\n\r\nCustomer impact\r\n---\r\n\r\nCrash or hang in long running (days) processes on Linux, triggered by runtime executing 2 billion of  virtual memory operations.\r\n\r\nRegression?\r\n---\r\n\r\nNot a regression - the bug is present since .NET Core 1.0. Windows/Linux reliability gap.\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n----\r\n\r\nwhen VirtualMemoryLogging::recordNumber increments from LONG_MAX,\r\nit became negative number, and the result of i % MaxRecords became\r\na number from -127 to 0.\r\n\r\nWhen that happens we will ovewrite CRITICAL_SECTION virtual_critsec\r\nwhich are stored in bss right before logRecords with garbage data.\r\nThen most likely the process will have a GC hang with one or more\r\nGC threads stuck trying to enter or leave critical section.\r\n\r\nThe fix is to ensure ULONG value are passed to modulo operation.","Url":"https://github.com/dotnet/coreclr/pull/27967","RelatedDescription":"Open PR \"Port to 2.1 - Fix VirtualMemoryLogging::logRecords overflow\" (#27967)"},{"Id":"534465706","IsPullRequest":false,"CreatedAt":"2019-12-07T23:20:56","Actor":"EgorBo","Number":"27966","RawContent":null,"Title":"JIT: Optimize simple arithmetic with GT_NEG","State":"open","Body":"I was surprised it's not handled in `morph`, e.g. `-a + b` => `b - a`.\r\n```csharp\r\nint M1(int a, int b) => -a +  b; // optimize to  \"b - a\"\r\nint M2(int a, int b) =>  a + -b; // optimize to  \"a - b\"\r\nint M3(int a, int b) =>  a - -b; // optimize to  \"a + b\"\r\nint M4(int a, int b) => -a - -b; // optimize to  \"b - a\"\r\n```\r\nCurrent codegen:\r\n```asm\r\n; Method CC:M1(int,int):int:this\r\nG_M48868_IG02:\r\n       mov      eax, edx\r\n       neg      eax\r\n       add      eax, r8d\r\n\r\n; Method CC:M2(int,int):int:this\r\nG_M15271_IG02:\r\n       mov      eax, r8d\r\n       neg      eax\r\n       add      eax, edx\r\n\r\n; Method CC:M3(int,int):int:this\r\nG_M13857_IG02:\r\n       mov      eax, r8d\r\n       neg      eax\r\n       sub      edx, eax\r\n       mov      eax, edx\r\n\r\n; Method CC:M4(int,int):int:this\r\nG_M28384_IG02:\r\n       mov      eax, edx\r\n       neg      eax\r\n       mov      edx, r8d\r\n       neg      edx\r\n       sub      eax, edx\r\n```\r\nExpected codegen: https://godbolt.org/z/nmZxv8\r\n\r\nAlso:\r\n```csharp\r\n\r\nint M5(int a) =>  -a / 10;  // optimize to  \"a / -10\"\r\nint M6(int a) => -(a / 10); // optimize to  \"a / -10\"\r\nint M7(int a) =>  -a * 10;  // optimize to  \"a * -10\"\r\nint M8(int a) => -(a * 10); // optimize to  \"a * -10\"\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27966","RelatedDescription":"Open issue \"JIT: Optimize simple arithmetic with GT_NEG\" (#27966)"},{"Id":"533549794","IsPullRequest":true,"CreatedAt":"2019-12-05T23:18:06","Actor":"mmitche","Number":"27965","RawContent":null,"Title":"[release/3.1] Use 3.1.100 SDK in 3.1 build","State":"closed","Body":"To ensure that the 3.1 stack uses a consistent SDK.  The upper portions of the stack require the 3.1 SDK because for TFM purposes.","Url":"https://github.com/dotnet/coreclr/pull/27965","RelatedDescription":"Closed or merged PR \"[release/3.1] Use 3.1.100 SDK in 3.1 build\" (#27965)"},{"Id":"533008488","IsPullRequest":true,"CreatedAt":"2019-12-04T23:38:14","Actor":"jashook","Number":"27964","RawContent":null,"Title":"Disable formatting job in 3.0","State":"open","Body":"@hoyosjs ","Url":"https://github.com/dotnet/coreclr/pull/27964","RelatedDescription":"Open PR \"Disable formatting job in 3.0\" (#27964)"},{"Id":"532845984","IsPullRequest":true,"CreatedAt":"2019-12-04T18:01:14","Actor":"jashook","Number":"27963","RawContent":null,"Title":"This is a point fix for not allowing fast tail calls on windows arm64 for vararg methods","State":"open","Body":"This only affects windows arm and arm64.\r\n\r\n/cc @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/pull/27963","RelatedDescription":"Open PR \"This is a point fix for not allowing fast tail calls on windows arm64 for vararg methods\" (#27963)"},{"Id":"532816885","IsPullRequest":false,"CreatedAt":"2019-12-04T17:04:35","Actor":"yashwanthreddyg","Number":"27962","RawContent":null,"Title":"dotnet 2.1.12 : Segmentation fault on NullReferenceException","State":"open","Body":"Dotnet version:\r\n2.1.12 aspnetcore\r\n2.1.5 aspnetcore\r\n2.1.13 aspnetcore\r\n\r\nOS:\r\n```\r\nLinux version 3.10.0-1062.4.3.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) ) #1 SMP Wed Nov 13 23:58:53 UTC 2019\r\n```\r\n\r\nOur application is a web app and a certain code path leads to a null reference exception. lt causes the runtime to crash with segmentation fault despite there being a catch around the exception. I see the same behavior on all the above mentioned runtimes but I have backtrace from version 2.1.12.\r\n\r\n```\r\nProcess 3204 stopped\r\n\r\n* thread #11: tid = 3222, 0x00007f7a9dcd4669, name = 'dotnet', stop reason = invalid address (fault address: 0x0)\r\n    frame #0: 0x00007f7a9dcd4669\r\n-> 0x7f7a9dcd4669:  cmpl   %edi, (%rdi)\r\n   0x7f7a9dcd466b:  callq  *(%rax)\r\n   0x7f7a9dcd466d:  testq  %rax, %rax\r\n   0x7f7a9dcd4670:  jne    0x7f7a9dcd46c8\r\nbt\r\n* thread #11: tid = 3222, 0x00007f7a9dcd4669, name = 'dotnet', stop reason = invalid address (fault address: 0x0)\r\n  * frame #0: 0x00007f7a9dcd4669\r\n    frame #1: 0x00007f7a9dcd35b9\r\n    frame #2: 0x00007f7a9dcce664\r\n    frame #3: 0x00007f7a9dcca87d\r\n    frame #4: 0x00007f7a9dc8eee5\r\n    frame #5: 0x00007f7a9b1842ad\r\n    frame #6: 0x00007f7a9d5267c2\r\n    frame #7: 0x00007f7a9d525a4e\r\n    frame #8: 0x00007f7a9d5257bb\r\n    frame #9: 0x00007f7a9d525749\r\n    frame #10: 0x00007f7a9d51e6f7\r\n    frame #11: 0x00007f7a9d521482\r\n    frame #12: 0x00007f7a9d5212ab\r\n    frame #13: 0x00007f7a9d521239\r\n    frame #14: 0x00007f7a9d520f93\r\n    frame #15: 0x00007f7a9d520e2b\r\n    frame #16: 0x00007f7a9d520da9\r\n    frame #17: 0x00007f7a9d521f5b\r\n    frame #18: 0x00007f7a9d521dbb\r\n    frame #19: 0x00007f7a9d521d41\r\n    frame #20: 0x00007f7a9d51e3e3\r\n    frame #21: 0x00007f7a9d521482\r\n    frame #22: 0x00007f7a9d5212ab\r\n    frame #23: 0x00007f7a9d521239\r\n    frame #24: 0x00007f7a9d520f93\r\n    frame #25: 0x00007f7a9d520e2b\r\n    frame #26: 0x00007f7a9d520da9\r\n    frame #27: 0x00007f7a9d521f5b\r\n    frame #28: 0x00007f7a9d521dbb\r\n    frame #29: 0x00007f7a9d521d41\r\n    frame #30: 0x00007f7a9d51e3e3\r\n    frame #31: 0x00007f7a9d521482\r\n    frame #32: 0x00007f7a9d5212ab\r\n    frame #33: 0x00007f7a9d521239\r\n    frame #34: 0x00007f7a9d520f93\r\n    frame #35: 0x00007f7a9d520e2b\r\n    frame #36: 0x00007f7a9d520da9\r\n    frame #37: 0x00007f7a9d521f5b\r\n    frame #38: 0x00007f7a9d521dbb\r\n    frame #39: 0x00007f7a9d521d41\r\n    frame #40: 0x00007f7a9d51e3e3\r\n    frame #41: 0x00007f7a9d521482\r\n    frame #42: 0x00007f7a9d5212ab\r\n    frame #43: 0x00007f7a9d521239\r\n    frame #44: 0x00007f7a9d51e626\r\n    frame #45: 0x00007f7a9d521482\r\n    frame #46: 0x00007f7a9d5212ab\r\n    frame #47: 0x00007f7a9d521239\r\n    frame #48: 0x00007f7a9d520f93\r\n    frame #49: 0x00007f7a9d520e2b\r\n    frame #50: 0x00007f7a9d520da9\r\n    frame #51: 0x00007f7a9d52074f\r\n    frame #52: 0x00007f7a9d5205ab\r\n    frame #53: 0x00007f7a9d520531\r\n    frame #54: 0x00007f7a9d51e3e3\r\n    frame #55: 0x00007f7a9d51df87\r\n    frame #56: 0x00007f7a9d51ddbb\r\n    frame #57: 0x00007f7a9d51dd49\r\n    frame #58: 0x00007f7a9d51be68\r\n    frame #59: 0x00007f7a9d51dad2\r\n    frame #60: 0x00007f7a9d51d8fb\r\n    frame #61: 0x00007f7a9d51d889\r\n    frame #62: 0x00007f7a9d51ba24\r\n    frame #63: 0x00007f7a9d51d612\r\n    frame #64: 0x00007f7a9d51d43b\r\n    frame #65: 0x00007f7a9d51d3c9\r\n    frame #66: 0x00007f7a9d51b873\r\n    frame #67: 0x00007f7a9d51aaf7\r\n    frame #68: 0x00007f7a9d51a92b\r\n    frame #69: 0x00007f7a9d51a8b9\r\n    frame #70: 0x00007f7a9d5186f2\r\n    frame #71: 0x00007f7a9d51809b\r\n    frame #72: 0x00007f7a9d518029\r\n    frame #73: 0x00007f7a9c904810\r\n    frame #74: 0x00007f7a9c903a8b\r\n    frame #75: 0x00007f7a9c90393d\r\n    frame #76: 0x00007f7a9c901e1a\r\n    frame #77: 0x00007f7a9c900acb\r\n    frame #78: 0x00007f7a9c900a51\r\n    frame #79: 0x00007f7a9c8f8789\r\n    frame #80: 0x00007f7a9c8f861b\r\n    frame #81: 0x00007f7a9c8f85ad\r\n    frame #82: 0x00007f7a9c8f3605\r\n    frame #83: 0x00007f7a9c8f2b1b\r\n    frame #84: 0x00007f7a9c8f2aad\r\n    frame #85: 0x00007f7a9c8f28a3\r\n    frame #86: 0x00007f7a9c8f226b\r\n    frame #87: 0x00007f7a9c8f21fd\r\n    frame #88: 0x00007f7a9c8f0245\r\n    frame #89: 0x00007f7a9c8efe74\r\n    frame #90: 0x00007f7a996bdcfd\r\n    frame #91: 0x00007f7a9c8db8b0\r\n    frame #92: 0x00007f7a996bdcfd\r\n    frame #93: 0x00007f7a9974e268\r\n    frame #94: 0x00007f7b12df3edf libcoreclr.so`CallDescrWorkerInternal + 124\r\n    frame #95: 0x00007f7b12d1460c libcoreclr.so`MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 83 at callhelpers.cpp:78\r\n    frame #96: 0x00007f7b12d145b9 libcoreclr.so`MethodDescCallSite::CallTargetWorker(this=<unavailable>, pArguments=<unavailable>, pReturnValue=0x00007f783aeedb28, cbReturnValue=8) + 857 at callhelpers.cpp:620\r\n    frame #97: 0x00007f7b12e948b5 libcoreclr.so`QueueUserWorkItemManagedCallback(void*) [inlined] MethodDescCallSite::Call_RetBool(this=0x00007f783aeedb30, pArguments=<unavailable>) + 15 at callhelpers.h:433\r\n    frame #98: 0x00007f7b12e948a6 libcoreclr.so`QueueUserWorkItemManagedCallback(pArg=0x00007f783aeedebe) + 166 at comthreadpool.cpp:451\r\n    frame #99: 0x00007f7b12ce5f3d libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchInner(pCallState=0x00007f783aeedd68) + 413 at threads.cpp:8850\r\n    frame #100: 0x00007f7b12ce5eeb libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchMiddle(pCallState=0x00007f783aeedd68) + 83 at threads.cpp:8901\r\n    frame #101: 0x00007f7b12ce5e98 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::$_8::operator()(ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::TryArgs*) const::{lambda(Param*)#1}::operator()(Param*) const at threads.cpp:9139\r\n    frame #102: 0x00007f7b12ce5e98 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at threads.cpp:9141\r\n    frame #103: 0x00007f7b12ce5e98 libcoreclr.so`ManagedThreadBase_DispatchOuter(pCallState=<unavailable>) + 248 at threads.cpp:9178\r\n    frame #104: 0x00007f7b12ce66a0 libcoreclr.so`ManagedThreadBase::ThreadPool(ADID, void (*)(void*), void*) [inlined] ManagedThreadBase_FullTransitionWithAD(pAppDomain=<unavailable>, pTarget=<unavailable>, args=<unavailable>, filterType=<unavailable>)(void*), void*, UnhandledExceptionLocation) + 43 at threads.cpp:9199\r\n    frame #105: 0x00007f7b12ce6675 libcoreclr.so`ManagedThreadBase::ThreadPool(pAppDomain=<unavailable>, pTarget=<unavailable>, args=<unavailable>)(void*), void*) + 21 at threads.cpp:9241\r\n    frame #106: 0x00007f7b12e78ab7 libcoreclr.so`ManagedPerAppDomainTPCount::DispatchWorkItem(this=0x0000000001d0bf60, foundWork=0x00007f783aeedebf, wasNotRecalled=0x00007f783aeedebe) + 295 at threadpoolrequest.cpp:754\r\n    frame #107: 0x00007f7b12d04d33 libcoreclr.so`ThreadpoolMgr::WorkerThreadStart(void*) [inlined] ThreadpoolMgr::ExecuteWorkRequest(bool*, bool*) + 1267 at win32threadpool.cpp:1560\r\n    frame #108: 0x00007f7b12d04d12 libcoreclr.so`ThreadpoolMgr::WorkerThreadStart(lpArgs=<unavailable>) + 1234 at win32threadpool.cpp:2024\r\n    frame #109: 0x00007f7b1307a712 libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x00007f7834002260) + 306 at thread.cpp:1682\r\n    frame #110: 0x00007f7b1456ee65 libpthread.so.0`start_thread + 197\r\n(lldb)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27962","RelatedDescription":"Open issue \"dotnet 2.1.12 : Segmentation fault on NullReferenceException\" (#27962)"},{"Id":"531827281","IsPullRequest":false,"CreatedAt":"2019-12-04T01:51:24","Actor":"MiyamuraMiyako","Number":"27961","RawContent":null,"Title":"AssemblyLoadContext.Default.LoadFromAssemblyPath throw FileLoadException","State":"closed","Body":"Main program and module program is `.net core3.1` program.\r\n\r\nModule program just one class with out any content:\r\n```C#\r\npublic class Module {}\r\n```\r\nMainProgram have below logic:\r\n```C#\r\nAssemblyLoadContext.Default.LoadFromAssemblyPath($@\"{myPath}\\Module.dll\");\r\n```\r\n\r\nthen MainProgram throw `System.IO.FileLoadException`.\r\n```\r\nCould not load file or assembly 'Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.\r\n\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String niPath, ObjectHandleOnStack retAssembly)\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n   at ZZJ.Hospital.Plugin.MEF.Operate.FindSubModule() in D:\\ZZJ.Hospital\\ZZJ.Hospital\\Plugin\\MEF\\Operate.cs:line 24\r\n   at ZZJ.Hospital.Plugin.MEF.SubModule.FindInitSubModule() in D:\\ZZJ.Hospital\\ZZJ.Hospital\\Plugin\\MEF\\SubModule.cs:line 18\r\n   at ZZJ.Hospital.MainWindow.FindSubModule() in D:\\ZZJ.Hospital\\ZZJ.Hospital\\StartWindow.xaml.cs:line 33\r\n   at ZZJ.Hospital.MainWindow..ctor() in D:\\ZZJ.Hospital\\ZZJ.Hospital\\StartWindow.xaml.cs:line 28\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27961","RelatedDescription":"Closed issue \"AssemblyLoadContext.Default.LoadFromAssemblyPath throw FileLoadException\" (#27961)"},{"Id":"530233832","IsPullRequest":true,"CreatedAt":"2019-12-02T19:36:42","Actor":"alpencolt","Number":"27956","RawContent":null,"Title":"[armel/Linux] Fix armel build","State":"closed","Body":"Option '-DARM_SOFTFP' not passed after #27077 which required for armel build.\r\nThis commit fix it.\r\n\r\nHaven't checked dotnet/runtime, but think it should be ported.\r\ncc @jkotas @y-yamshchikov @o-piskunov","Url":"https://github.com/dotnet/coreclr/pull/27956","RelatedDescription":"Closed or merged PR \"[armel/Linux] Fix armel build\" (#27956)"},{"Id":"529195568","IsPullRequest":true,"CreatedAt":"2019-12-02T15:53:15","Actor":"hoyosjs","Number":"27952","RawContent":null,"Title":"Change non_virtual_calls_to_instance_methods test to non-il-sdk format","State":"closed","Body":"Branch 3.1 doesn't have the changes necessary to build ilproj using the SDK. PR #27868 ported a bug fix and added this test, so just use the old format.","Url":"https://github.com/dotnet/coreclr/pull/27952","RelatedDescription":"Closed or merged PR \"Change non_virtual_calls_to_instance_methods test to non-il-sdk format\" (#27952)"},{"Id":"530797589","IsPullRequest":false,"CreatedAt":"2019-12-01T21:19:33","Actor":"cup","Number":"27960","RawContent":null,"Title":"Print array","State":"open","Body":"I can create a program like this:\r\n\r\n~~~cs\r\nusing System;\r\nclass App {\r\n   static void Main() {\r\n      int[] a1 = {10, 20};\r\n      Console.WriteLine(a1);\r\n   }\r\n}\r\n~~~\r\n\r\nbut it doesnt give expected output:\r\n\r\n~~~\r\nSystem.Int32[]\r\n~~~\r\n\r\nI checked online:\r\n\r\nhttps://stackoverflow.com/questions/16265247\r\n\r\nand people suggest to loop through the array. Is that really necessary? Many\r\nother languages dont require that, like Go:\r\n\r\n~~~go\r\npackage main\r\nimport \"fmt\"\r\nfunc main() {\r\n   a1 := []int{10, 20}\r\n   fmt.Println(a1)\r\n}\r\n~~~\r\n\r\nNim:\r\n\r\n~~~nim\r\nvar a1 = [10, 20]\r\necho a1\r\n~~~\r\n\r\nD:\r\n\r\n~~~d\r\nimport std.stdio;\r\nvoid main() {\r\n   auto a1 = [10, 20];\r\n   a1.writeln;\r\n}\r\n~~~\r\n\r\nJavaScript:\r\n\r\n~~~js\r\nlet a1 = [10, 20];\r\nconsole.log(a1);\r\n~~~\r\n\r\nPython:\r\n\r\n~~~py\r\na1 = [10, 20]\r\nprint(a1)\r\n~~~\r\n","Url":"https://github.com/dotnet/coreclr/issues/27960","RelatedDescription":"Open issue \"Print array\" (#27960)"},{"Id":"530496346","IsPullRequest":true,"CreatedAt":"2019-11-29T22:01:19","Actor":"janvorli","Number":"27959","RawContent":null,"Title":"Port to 3.1 - Fix out of range access in GetRecycleMemoryInfo","State":"open","Body":"Customer impact\r\n---\r\n\r\nRuntime crash or hang within a few seconds in certain types of Linux virtualized environments (e.g. OpenVZ)\r\n\r\nRegression?\r\n---\r\nRegression from 2.1, introduced by https://github.com/dotnet/coreclr/pull/23824\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n---\r\n\r\nPorts change #26873 to release 3.1 branch.\r\n\r\nOn OpenVZ virtualized linux, GetCurrentProcessorNumber which uses sched_getcpu()\r\ncan return a value greater than the number of processors reported by\r\nsched_getaffinity with CPU_COUNT or sysconf(_SC_NPROCESSORS_ONLN).\r\nFor example, taskset -c 2,3 ./MyApp will make CPU_COUNT be 2 but\r\nsched_getcpu() can return 2 or 3, and OpenVZ kernel can make\r\nsysconf(_SC_NPROCESSORS_ONLN) return a limited cpu count but\r\nsched_getcpu() still report the real processor number.\r\n\r\nExample of affinity vs current CPU id on OpenVZ:\r\nnproc: 8\r\nnprocOnline: 1\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 5\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 5","Url":"https://github.com/dotnet/coreclr/pull/27959","RelatedDescription":"Open PR \"Port to 3.1 - Fix out of range access in GetRecycleMemoryInfo\" (#27959)"},{"Id":"530496338","IsPullRequest":true,"CreatedAt":"2019-11-29T22:01:15","Actor":"janvorli","Number":"27958","RawContent":null,"Title":"Port to 3.1 - Fix VirtualMemoryLogging::logRecords overflow","State":"open","Body":"Issue: https://github.com/dotnet/coreclr/issues/27547\r\n\r\nCustomer impact\r\n---\r\n\r\nCrash or hang in long running (days) processes on Linux, triggered by runtime executing 2 billion of  virtual memory operations.\r\n\r\nRegression?\r\n---\r\n\r\nNot a regression - the bug is present since .NET Core 1.0. Windows/Linux reliability gap.\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n----\r\n\r\nwhen VirtualMemoryLogging::recordNumber increments from LONG_MAX,\r\nit became negative number, and the result of i % MaxRecords became\r\na number from -127 to 0.\r\n\r\nWhen that happens we will ovewrite CRITICAL_SECTION virtual_critsec\r\nwhich are stored in bss right before logRecords with garbage data.\r\nThen most likely the process will have a GC hang with one or more\r\nGC threads stuck trying to enter or leave critical section.\r\n\r\nThe fix is to ensure ULONG value are passed to modulo operation.","Url":"https://github.com/dotnet/coreclr/pull/27958","RelatedDescription":"Open PR \"Port to 3.1 - Fix VirtualMemoryLogging::logRecords overflow\" (#27958)"},{"Id":"530496332","IsPullRequest":true,"CreatedAt":"2019-11-29T22:01:12","Actor":"janvorli","Number":"27957","RawContent":null,"Title":"Port to 3.1 - Fix getting affinity set on MUSL on Jetson TX2","State":"open","Body":"Customer impact\r\n---\r\n\r\nPrevents running Linux Alpine tests on checked runtime on Jetson TX2 ARM boards used by our lab. This bug causes the checked runtime to assert and crash during startup on this board.\r\n\r\nCustomers may see degraded GC performance on Jetson TX2 and similar devices.\r\n\r\nRegression?\r\n---\r\n\r\nRegression from 2.1, introduced by the docker/cgroup changes.\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n----\r\nPorts https://github.com/dotnet/runtime/pull/206 to release/3.1.\r\n\r\nThe code in PAL_GetCurrentThreadAffinitySet relied on the fact that the\r\nnumber of processors reported as configured in the system is always\r\nlarger than the maximum CPU index. However, it turns out that it is not\r\ntrue on some devices / distros. The Jetson TX2 reports CPUs 0, 3, 4 and\r\n5 in the affinity mask and the 1 and 2 are never reported. GLIBC reports\r\n6 as the number of configured CPUs, however MUSL reports just 4. The\r\nPAL_GetCurrentThreadAffinitySet was using the number of CPUs reported as\r\nconfigured as the upper bound for scanning affinity set, so on Jetson\r\nTX2, the affinity mask returned had just two bits set while there were\r\n4 CPUs. That triggered an assert in the GCToOSInterface::Initialize.\r\n\r\nThis change fixes that by reading the maximum CPU index from the\r\n/proc/cpuinfo. It falls back to using the number of processors\r\nconfigured when the /proc/cpuinfo is not available (on macOS, FreeBSD, ...)\r\n\r\nFixes https://github.com/dotnet/runtime/issues/170","Url":"https://github.com/dotnet/coreclr/pull/27957","RelatedDescription":"Open PR \"Port to 3.1 - Fix getting affinity set on MUSL on Jetson TX2\" (#27957)"},{"Id":"530130188","IsPullRequest":false,"CreatedAt":"2019-11-29T02:44:51","Actor":"Daniel15","Number":"27955","RawContent":null,"Title":"Segmentation fault when running .NET Core 3.0 app on OpenVZ","State":"open","Body":"I have a .NET Core app that's a fairly basic gRPC service (unfortunately not open source yet, so I can't link to the source at the moment). On one particular server, it's throwing a segmentation fault as soon as I run it:\r\n```\r\nASPNETCORE_ENVIRONMENT=Production ASPNETCORE_URLS=http://*:54561 ./TestApp\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Now listening on: http://[::]:54561\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Production\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: /opt/exampleapp-worker\r\nSegmentation fault\r\n```\r\n\r\nIn fact, I'm seeing this for a very basic ASP.NET website too (just one custom middleware using `app.Run`).\r\n\r\nBacktrace from lldb + SOS:\r\n```\r\n* thread #7, name = 'TestApp', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n  * frame #0: 0x00007ffff7019b3d libcoreclr.so`ThreadpoolMgr::GetRecycledMemory(ThreadpoolMgr::MemType) [inlined] ThreadpoolMgr::RecycledListInfo::Remove() at win32threadpool.h:655\r\n    frame #1: 0x00007ffff7019aa5 libcoreclr.so`ThreadpoolMgr::GetRecycledMemory(memType=<unavailable>) at win32threadpool.cpp:1674\r\n    frame #2: 0x00007ffff715e464 libcoreclr.so`UnManagedPerAppDomainTPCount::QueueUnmanagedWorkRequest(unsigned int (*)(void*), void*) [inlined] ThreadpoolMgr::MakeWorkRequest(unsigned int (*)(void*), void*) at win32threadpool.h:367\r\n    frame #3: 0x00007ffff715e45a libcoreclr.so`UnManagedPerAppDomainTPCount::QueueUnmanagedWorkRequest(this=0x00007ffff75dd640, function=(libcoreclr.so`ThreadpoolMgr::AsyncTimerCallbackCompletion(void*) at win32threadpool.cpp:4765), context=0x0000000000738290)(void*), void*) at threadpoolrequest.cpp:356\r\n    frame #4: 0x00007ffff701d100 libcoreclr.so`ThreadpoolMgr::FireTimers() at win32threadpool.cpp:855\r\n    frame #5: 0x00007ffff701d088 libcoreclr.so`ThreadpoolMgr::FireTimers() at win32threadpool.cpp:4710\r\n    frame #6: 0x00007ffff701cd41 libcoreclr.so`ThreadpoolMgr::TimerThreadFire() at win32threadpool.cpp:4598\r\n    frame #7: 0x00007ffff701cc15 libcoreclr.so`ThreadpoolMgr::TimerThreadStart(p=<unavailable>) at win32threadpool.cpp:4569\r\n    frame #8: 0x00007ffff732c86d libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x0000000000737530) at thread.cpp:1807\r\n    frame #9: 0x00007ffff7fb1fa3 libpthread.so.0`start_thread(arg=<unavailable>) at pthread_create.c:486\r\n    frame #10: 0x00007ffff7bbc4cf libc.so.6`__GI___clone at clone.S:95\r\n```\r\n\r\nDebian stable (buster)\r\n\r\n```\r\n$ apt list --installed | grep dotnet\r\n\r\nWARNING: apt does not have a stable CLI interface. Use with caution in scripts.\r\n\r\ndotnet-host/buster,now 3.0.1-1 amd64 [installed,automatic]\r\ndotnet-hostfxr-3.0/buster,now 3.0.1-1 amd64 [installed,automatic]\r\ndotnet-runtime-3.0/buster,now 3.0.1-1 amd64 [installed]\r\ndotnet-runtime-deps-3.0/buster,now 3.0.1-1 amd64 [installed,automatic]\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27955","RelatedDescription":"Open issue \"Segmentation fault when running .NET Core 3.0 app on OpenVZ\" (#27955)"},{"Id":"529602760","IsPullRequest":true,"CreatedAt":"2019-11-28T15:39:53","Actor":"jashook","Number":"27954","RawContent":null,"Title":"Disable formatting jobs in release/3.1","State":"closed","Body":"/cc @hoyosjs ","Url":"https://github.com/dotnet/coreclr/pull/27954","RelatedDescription":"Closed or merged PR \"Disable formatting jobs in release/3.1\" (#27954)"},{"Id":"529572120","IsPullRequest":false,"CreatedAt":"2019-11-28T02:57:12","Actor":"mikernet","Number":"27953","RawContent":null,"Title":"RuntimeBinderException when dynamically casting private enum type","State":"closed","Body":"It took me way too long to figure out what the heck was going on here and isolate the problem because the code where this is happening is fairly complex and anytime I would try to simplify it to write a simple repro it would infuriatingly start working again...but I finally got it, and here it is:\r\n\r\n```c#\r\nvoid Main()\r\n{\t\r\n        // Works fine\r\n\tSomeClass.Method1().Dump(); \r\n\r\n        // RuntimeBinderException: Cannot convert type 'System.Enum' to 'decimal'\r\n\tSomeClass.Method2().Dump();\r\n}\r\n\r\npublic static class SomeClass {\r\n\tpublic static bool Method1()\r\n\t{\r\n\t\treturn (decimal)(dynamic)Test.A == (decimal)(dynamic)Test.A;\r\n\t}\r\n\t\r\n\tpublic static bool Method2()\r\n\t{\r\n\t\treturn CompareDecimalValues(Test.A, Test.A);\r\n\t}\r\n\r\n\tprivate enum Test\r\n\t{\r\n\t\tA = -100,\r\n\t}\r\n}\r\n\r\npublic static bool CompareDecimalValues<T>(T value1, T value2) where T : unmanaged, Enum\r\n{\r\n\treturn (decimal)(dynamic)value1 == (decimal)(dynamic)value2;\r\n}\r\n```\r\n\r\nIf `CompareDecimalValues()` is inside the same assembly then changing the enum to internal or public makes `Method2` work. If `CompareDecimalValues` is outside the assembly then the enum must be changed to public for it to work. \r\n\r\nBasically, it seems like the method doing the dynamic cast must have visibility of the enum type otherwise it fails.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27953","RelatedDescription":"Closed issue \"RuntimeBinderException when dynamically casting private enum type\" (#27953)"},{"Id":"528330168","IsPullRequest":false,"CreatedAt":"2019-11-27T02:01:43","Actor":"erozenfeld","Number":"27941","RawContent":null,"Title":"Remove PAL_RegisterModule jit export","State":"closed","Body":"This issue is a follow-up from https://github.com/dotnet/runtime/pull/167#discussion_r349868608\r\n\r\nThe work that's done inside PAL_RegisterModule should be done in jitStartup.\r\n\r\nCorInfoImpl  (in src\\coreclr\\src\\tools\\Common\\JitInterface\\CorInfoImpl.cs) currently calls PAL_RegisterModule followed by jitStartup but it only needs the PAL_InitializeDLL part of PAL_RegisterModule. Because of that it can't properly check the return code from PAL_RegisterModule.\r\n","Url":"https://github.com/dotnet/coreclr/issues/27941","RelatedDescription":"Closed issue \"Remove PAL_RegisterModule jit export\" (#27941)"},{"Id":"529055217","IsPullRequest":false,"CreatedAt":"2019-11-27T01:08:06","Actor":"VSadov","Number":"27951","RawContent":null,"Title":"[Pinned Object Heap] Need to generalize GC notification API","State":"open","Body":"The `GC.RegisterForFullGCNotification` API takes a separate parameter for LOH. Most likely need another overload for POH","Url":"https://github.com/dotnet/coreclr/issues/27951","RelatedDescription":"Open issue \"[Pinned Object Heap] Need to generalize GC notification API\" (#27951)"},{"Id":"528917611","IsPullRequest":true,"CreatedAt":"2019-11-26T21:20:05","Actor":"jashook","Number":"27947","RawContent":null,"Title":"Disable test with warning","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27947","RelatedDescription":"Closed or merged PR \"Disable test with warning\" (#27947)"},{"Id":"528951170","IsPullRequest":true,"CreatedAt":"2019-11-26T20:19:50","Actor":"dotnet-maestro-bot","Number":"27950","RawContent":null,"Title":"Update BuildTools to preview1-04626-03 (release/2.2)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/27950","RelatedDescription":"Open PR \"Update BuildTools to preview1-04626-03 (release/2.2)\" (#27950)"},{"Id":"528950486","IsPullRequest":true,"CreatedAt":"2019-11-26T20:18:10","Actor":"stephentoub","Number":"27949","RawContent":null,"Title":"Fix CancellationTokenRegistration.Unregister race condition","State":"open","Body":"Port https://github.com/dotnet/runtime/pull/309 to release/3.1\r\nFixes https://github.com/dotnet/coreclr/issues/22946\r\n\r\n## Description\r\n\r\nIf multiple threads race to Unregister and zero out a CancellationTokenRegistration field, we can end up null ref'ing due to a torn read/write on a struct resulting in passing around some inconsistent state.  This pattern is possible as part of clean up in Task.Delay(timeout, cancellationToken), with the null ref then happening on a thread pool thread that results in the app crashing.\r\n\r\n## Customer Impact\r\n\r\nValid coding patterns, both in customer code and in our framework implementation, resulting in NullReferenceExceptions that may not be catchable.  Back in March a customer reported this, and just recently @rynowak hit up against it in ASP.NET.\r\n\r\n## Regression?\r\n\r\nYes, from .NET Framework 4.8 and .NET Core 2.0.  This was introduced in https://github.com/dotnet/coreclr/pull/12819 in 2.1 as part of overhauling the CancellationToken implementation.\r\n\r\n## Testing\r\n\r\nIsolated a repro that quickly fails (within a second) prior to the fix and successfully runs for a long time after.\r\n\r\n## Risk\r\n\r\nMinimal.\r\n\r\ncc: @tarekgh, @kouvel, @rynowak \r\n\r\n@danmosemsft ","Url":"https://github.com/dotnet/coreclr/pull/27949","RelatedDescription":"Open PR \"Fix CancellationTokenRegistration.Unregister race condition\" (#27949)"},{"Id":"528397569","IsPullRequest":true,"CreatedAt":"2019-11-26T19:30:17","Actor":"brianrob","Number":"27942","RawContent":null,"Title":"Emit an Event for Every Tiered Compilation Call Counter Operation","State":"closed","Body":"Adds a new verbose event that when enabled via the CompilationDiagnostic keyword will emit an event each time a tiered compilation method call counter increment operation occurs.\r\n\r\nThis is expected to be very verbose, but can help with understanding call counter behavior and verifying tiered compilation behavior in real workloads.","Url":"https://github.com/dotnet/coreclr/pull/27942","RelatedDescription":"Closed or merged PR \"Emit an Event for Every Tiered Compilation Call Counter Operation\" (#27942)"},{"Id":"528926512","IsPullRequest":true,"CreatedAt":"2019-11-26T19:26:20","Actor":"dotnet-maestro-bot","Number":"27948","RawContent":null,"Title":"Update BuildTools to rc1-04626-02 (release/2.1)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/27948","RelatedDescription":"Open PR \"Update BuildTools to rc1-04626-02 (release/2.1)\" (#27948)"},{"Id":"528886486","IsPullRequest":true,"CreatedAt":"2019-11-26T18:44:02","Actor":"dotnet-maestro-bot","Number":"27946","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @Anipik\n* @mmitche\n* @davmason\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/27946","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#27946)"},{"Id":"528078084","IsPullRequest":false,"CreatedAt":"2019-11-26T18:16:43","Actor":"saucecontrol","Number":"27937","RawContent":null,"Title":"RyuJIT: Access violation when calling IsLclVarUpdateTree on GenTreeHWIntrinsic","State":"closed","Body":"When compiling the `crash` method below, RyuJIT throws an AV when `GenTree::IsLclVarUpdateTree` is called from `Compiler::optExtractInitTestIncr`.  The rhs arg in this case is a `GenTreeHWIntrinsic`  (NI_Vector128_Zero), which causes a nullptr dereference.\r\n\r\n```C#\r\nusing System.Runtime.Intrinsics;\r\n\r\nclass Program\r\n{\r\n    static unsafe void crash(float* fa, float* fb)\r\n    {\r\n        float* pb = fb;\r\n        float* eb = pb + 16;\r\n\r\n        do\r\n        {\r\n            float* pa = fa;\r\n            float* ea = pa + 16;\r\n            var va = Vector128<float>.Zero;\r\n\r\n            do\r\n            {\r\n                *pa = va.ToScalar();\r\n\r\n                pa += Vector128<float>.Count;\r\n                pb += Vector128<float>.Count;\r\n            } while (pa < ea);\r\n\r\n        } while (pb < eb);\r\n    }\r\n\r\n    static unsafe void Main()\r\n    {\r\n        float* a = stackalloc float[16];\r\n        float* b = stackalloc float[16];\r\n\r\n        crash(a, b);\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27937","RelatedDescription":"Closed issue \"RyuJIT: Access violation when calling IsLclVarUpdateTree on GenTreeHWIntrinsic\" (#27937)"},{"Id":"528835856","IsPullRequest":false,"CreatedAt":"2019-11-26T17:53:40","Actor":"znakeeye","Number":"27945","RawContent":null,"Title":"ArrayPool's Return() and Rent() have the wrong signature","State":"closed","Body":"[ConfigurableArrayPool.Return()](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Buffers/ConfigurableArrayPool.cs#L123) should return a `bool`, indicating if the buffer was indeed returned. Similarly, there should be a `Rent(int minimumLength, out bool rented)` so that you can quickly determine if the returned buffer is indeed from the pool.\r\n\r\n**Important for unit tests**\r\nThe current implementation makes it impossible to determine if you are working with a pooled array or temporary array. Distinguishing between the two can be critical for e.g. unit tests. In our use case, we traverse a tree structure and it's important that we don't reach a point where the array pool has been exhausted. Here, fine-tuning the size of the pool (impossible due to the above) would allow us to get a deterministic GC behavior.","Url":"https://github.com/dotnet/coreclr/issues/27945","RelatedDescription":"Closed issue \"ArrayPool's Return() and Rent() have the wrong signature\" (#27945)"},{"Id":"528401202","IsPullRequest":false,"CreatedAt":"2019-11-25T23:40:45","Actor":"ViktorHofer","Number":"27943","RawContent":null,"Title":"🎉🎉🎉 dotnet/runtime welcomes you 🎉🎉🎉","State":"open","Body":"We are excited to announce that we just opened the [dotnet/runtime](https://github.com/dotnet/runtime) repository for community members: https://github.com/dotnet/runtime/issues/253. Issues will be ported over early December and this master branch will be recycled soon after. Please open Issues and Pull Requests in the new repository.\r\n\r\ncc @MeiChin-Tsai ","Url":"https://github.com/dotnet/coreclr/issues/27943","RelatedDescription":"Open issue \"🎉🎉🎉 dotnet/runtime welcomes you 🎉🎉🎉\" (#27943)"},{"Id":"528249356","IsPullRequest":false,"CreatedAt":"2019-11-25T18:05:47","Actor":"EgorBo","Number":"27940","RawContent":null,"Title":"JIT: use `test` for Nullable == null","State":"open","Body":"```csharp\r\npublic static bool MyTest(int? a)\r\n{\r\n    return a == null;\r\n}\r\n```\r\nCodegen:\r\n```asm\r\nG_M41936_IG01:\r\n       mov      qword ptr [rsp+08H], rcx\r\nG_M41936_IG02:\r\n       cmp      byte  ptr [rsp+08H], 0\r\n       sete     al\r\n       movzx    rax, al\r\nG_M41936_IG03:\r\n       ret      \r\n; Total bytes of code: 17\r\n```\r\nShould use a slightly cheaper `test` instead of `cmp 0`.\r\nPS: Mono-LLVM's cogegen for this case:\r\n```asm\r\n       test     dil,dil\r\n       sete     al\r\n       ret\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27940","RelatedDescription":"Open issue \"JIT: use `test` for Nullable == null\" (#27940)"},{"Id":"528187837","IsPullRequest":false,"CreatedAt":"2019-11-25T16:12:40","Actor":"jkotas","Number":"27939","RawContent":null,"Title":"Move ILVerify tool to dotnet/runtime repo","State":"open","Body":"https://github.com/dotnet/coreclr/issues/27934#issuecomment-558193025","Url":"https://github.com/dotnet/coreclr/issues/27939","RelatedDescription":"Open issue \"Move ILVerify tool to dotnet/runtime repo\" (#27939)"},{"Id":"528154820","IsPullRequest":true,"CreatedAt":"2019-11-25T15:40:36","Actor":"dotnet-maestro-bot","Number":"27938","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @mmitche\n* @davmason\n* @Anipik\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/27938","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#27938)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"533589968","IsPullRequest":true,"CreatedAt":"2019-12-09T18:21:55","Actor":"mmitche","Number":"13143","RawContent":null,"Title":"[release/3.1.1xx] Update to 3.1.100 rtm sdk","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13143","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update to 3.1.100 rtm sdk\" (#13143)"},{"Id":"533591152","IsPullRequest":true,"CreatedAt":"2019-12-09T17:03:19","Actor":"mmitche","Number":"13144","RawContent":null,"Title":"[release/3.1.2xx] Update to 3.1.100 rtm sdk","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13144","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update to 3.1.100 rtm sdk\" (#13144)"},{"Id":"534466510","IsPullRequest":true,"CreatedAt":"2019-12-09T05:23:18","Actor":"dotnet-maestro[bot]","Number":"13148","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13148","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#13148)"},{"Id":"534646792","IsPullRequest":true,"CreatedAt":"2019-12-09T02:28:15","Actor":"wli3","Number":"13153","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13153","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#13153)"},{"Id":"534626066","IsPullRequest":true,"CreatedAt":"2019-12-09T00:00:49","Actor":"wli3","Number":"13152","RawContent":null,"Title":"Update stage0","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/13152","RelatedDescription":"Open PR \"Update stage0\" (#13152)"},{"Id":"534466950","IsPullRequest":true,"CreatedAt":"2019-12-08T00:30:21","Actor":"mmitche","Number":"13151","RawContent":null,"Title":"[release/3.0.1xx] Enable official builds on internal branches","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13151","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Enable official builds on internal branches\" (#13151)"},{"Id":"534466590","IsPullRequest":true,"CreatedAt":"2019-12-08T00:06:50","Actor":"dotnet-maestro[bot]","Number":"13150","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13150","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/arcade\" (#13150)"},{"Id":"534466539","IsPullRequest":true,"CreatedAt":"2019-12-08T00:06:23","Actor":"dotnet-maestro[bot]","Number":"13149","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13149","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#13149)"},{"Id":"534221922","IsPullRequest":true,"CreatedAt":"2019-12-06T19:35:49","Actor":"mmitche","Number":"13147","RawContent":null,"Title":"[release/3.0.1xx] Change to name/value variables and remove unused","State":"open","Body":"- Remove old legacy PB_ values that are no longer used\r\n- Change to the name, value pair approach for variables.\r\nThis will allow internal builds to add variable groups required for accessing internal runtimes","Url":"https://github.com/dotnet/cli/pull/13147","RelatedDescription":"Open PR \"[release/3.0.1xx] Change to name/value variables and remove unused\" (#13147)"},{"Id":"533540123","IsPullRequest":true,"CreatedAt":"2019-12-06T18:06:21","Actor":"wli3","Number":"13142","RawContent":null,"Title":"Update branding to \"preview\"","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13142","RelatedDescription":"Closed or merged PR \"Update branding to \"preview\"\" (#13142)"},{"Id":"533696470","IsPullRequest":true,"CreatedAt":"2019-12-06T02:25:32","Actor":"dotnet-maestro[bot]","Number":"13146","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2edc82a1-19d9-431c-901b-08d76d41c6c3)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191205.2\r\n- **Date Produced**: 12/6/2019 1:04 AM\r\n- **Commit**: 13abe7e2749d95337e8d72efdc5b71611815fd43\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.1-servicing.19605.2\r\n\r\n[marker]: <> (End:2edc82a1-19d9-431c-901b-08d76d41c6c3)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13146","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/templating\" (#13146)"},{"Id":"533696469","IsPullRequest":true,"CreatedAt":"2019-12-06T02:20:30","Actor":"dotnet-maestro[bot]","Number":"13145","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191205.2\r\n- **Date Produced**: 12/6/2019 1:04 AM\r\n- **Commit**: 13abe7e2749d95337e8d72efdc5b71611815fd43\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.1-servicing.19605.2\r\n\r\n[marker]: <> (End:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13145","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/templating\" (#13145)"},{"Id":"533009789","IsPullRequest":true,"CreatedAt":"2019-12-05T19:18:59","Actor":"dotnet-maestro[bot]","Number":"13139","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191203.16\r\n- **Date Produced**: 12/3/2019 9:25 PM\r\n- **Commit**: 8e47254f93b276c974968aff83222f89ec3931ed\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19603.16\r\n\r\n[marker]: <> (End:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13139","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/arcade\" (#13139)"},{"Id":"533009481","IsPullRequest":true,"CreatedAt":"2019-12-05T19:18:18","Actor":"dotnet-maestro[bot]","Number":"13138","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191203.16\r\n- **Date Produced**: 12/3/2019 9:25 PM\r\n- **Commit**: 8e47254f93b276c974968aff83222f89ec3931ed\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19603.16\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13138","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#13138)"},{"Id":"533505361","IsPullRequest":true,"CreatedAt":"2019-12-05T19:16:24","Actor":"mmitche","Number":"13141","RawContent":null,"Title":"Use Microsoft.NETCore.App.Internal for runtime version","State":"closed","Body":"The final non-suffixed build is not written to a non-suffixed directory. \r\n\r\nAlso reorder a pinned dependency to work around potential https://github.com/dotnet/arcade/issues/4067","Url":"https://github.com/dotnet/cli/pull/13141","RelatedDescription":"Closed or merged PR \"Use Microsoft.NETCore.App.Internal for runtime version\" (#13141)"},{"Id":"533010316","IsPullRequest":true,"CreatedAt":"2019-12-05T19:10:00","Actor":"dotnet-maestro[bot]","Number":"13140","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191203.16\r\n- **Date Produced**: 12/3/2019 9:25 PM\r\n- **Commit**: 8e47254f93b276c974968aff83222f89ec3931ed\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19603.16\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13140","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#13140)"},{"Id":"529075631","IsPullRequest":true,"CreatedAt":"2019-12-04T23:33:51","Actor":"dotnet-maestro[bot]","Number":"13128","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191126.08\r\n- **Date Produced**: 11/27/2019 1:35 AM\r\n- **Commit**: 547ae1f5f072d130b32ec3089876711070b2dc4f\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.0.2-servicing-19576-08\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.2-servicing-19576-08\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.2-servicing-19576-08\r\n  - **Microsoft.NET.HostModel** -> 3.0.2-servicing-19576-08\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.2-servicing-19576-08\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13128","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#13128)"},{"Id":"528487412","IsPullRequest":true,"CreatedAt":"2019-12-04T23:33:43","Actor":"dotnet-maestro[bot]","Number":"13124","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191125.14\r\n- **Date Produced**: 11/26/2019 4:11 AM\r\n- **Commit**: 7db696998c6ae4852fbf01827efdb10634e22668\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-rtm.19575.14\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13124","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#13124)"},{"Id":"529644622","IsPullRequest":true,"CreatedAt":"2019-12-04T23:28:42","Actor":"dotnet-maestro[bot]","Number":"13134","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191127.2\r\n- **Date Produced**: 11/28/2019 1:08 AM\r\n- **Commit**: ea3020cd0422107d6f982b363aa16c59fe2e846e\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.1-servicing.19577.2\r\n\r\n[marker]: <> (End:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13134","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/templating\" (#13134)"},{"Id":"529651007","IsPullRequest":true,"CreatedAt":"2019-12-04T23:28:28","Actor":"dotnet-maestro[bot]","Number":"13135","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191127.4\r\n- **Date Produced**: 11/28/2019 1:42 AM\r\n- **Commit**: 15b6aee2f5702a8d38bf9063e52f34d8e689ab72\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.0.1-servicing.19577.4\r\n\r\n[marker]: <> (End:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13135","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/templating\" (#13135)"},{"Id":"529079605","IsPullRequest":true,"CreatedAt":"2019-12-04T23:02:32","Actor":"dotnet-maestro[bot]","Number":"13129","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191126.9\r\n- **Date Produced**: 11/27/2019 1:52 AM\r\n- **Commit**: f3f2dd583fffa254015fc21ff0e45784b333256d\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.1-servicing.19576.9\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.1-servicing.19576.9\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.1-servicing.19576.9\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.1-servicing.19576.9\r\n  - **Microsoft.NET.HostModel** -> 3.1.1-servicing.19576.9\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.1-servicing.19576.9\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13129","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#13129)"},{"Id":"532356783","IsPullRequest":true,"CreatedAt":"2019-12-04T19:00:10","Actor":"wli3","Number":"13137","RawContent":null,"Title":"Merge release/2.1.6xx release/2.1.8xx ","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13137","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx release/2.1.8xx \" (#13137)"},{"Id":"529602649","IsPullRequest":true,"CreatedAt":"2019-12-02T18:58:08","Actor":"wtgodbe","Number":"13131","RawContent":null,"Title":"Pin dependency on Microsoft.Netcore.App refpack to 3.1.0","State":"closed","Body":"@nguerrera @mmitche PTAL","Url":"https://github.com/dotnet/cli/pull/13131","RelatedDescription":"Closed or merged PR \"Pin dependency on Microsoft.Netcore.App refpack to 3.1.0\" (#13131)"},{"Id":"529633633","IsPullRequest":true,"CreatedAt":"2019-12-02T18:41:01","Actor":"dotnet-maestro[bot]","Number":"13132","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13132","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#13132)"},{"Id":"531378595","IsPullRequest":true,"CreatedAt":"2019-12-02T18:37:48","Actor":"dotnet-maestro[bot]","Number":"13136","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13136","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/arcade\" (#13136)"},{"Id":"529412032","IsPullRequest":true,"CreatedAt":"2019-12-02T17:26:42","Actor":"dotnet-maestro[bot]","Number":"13130","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from nuget/nuget.client","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3c9d65bb-d2bc-4c69-c5d7-08d76fa9c820)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Build**: 5.5.0.6319\r\n- **Date Produced**: 11/21/2019 2:19 AM\r\n- **Commit**: ba2a72ac9afd9e7260798a6ad14088297570b350\r\n- **Branch**: refs/heads/dev\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.5.0-preview.1.6319\r\n\r\n[marker]: <> (End:3c9d65bb-d2bc-4c69-c5d7-08d76fa9c820)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13130","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from nuget/nuget.client\" (#13130)"},{"Id":"529636031","IsPullRequest":true,"CreatedAt":"2019-11-29T17:32:16","Actor":"dotnet-maestro[bot]","Number":"13133","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13133","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#13133)"},{"Id":"529047920","IsPullRequest":true,"CreatedAt":"2019-11-27T01:15:29","Actor":"dotnet-maestro[bot]","Number":"13127","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191126.7\r\n- **Date Produced**: 11/26/2019 11:48 PM\r\n- **Commit**: 3175a035df26e4082ad5513be661400ce722d0f5\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.1-servicing.19576.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.1-servicing.19576.7\r\n  - **Microsoft.NETCore.App.Ref** -> 3.1.1-servicing.19576.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.1-servicing.19576.7\r\n  - **Microsoft.NET.HostModel** -> 3.1.1-servicing.19576.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.1-servicing.19576.7\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13127","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#13127)"},{"Id":"529036669","IsPullRequest":true,"CreatedAt":"2019-11-27T01:05:44","Actor":"dotnet-maestro[bot]","Number":"13126","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191126.05\r\n- **Date Produced**: 11/26/2019 11:00 PM\r\n- **Commit**: bf4c7b66bc5aea96c8569384aa11fa88a8966cf8\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.0.2-servicing-19576-05\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.2-servicing-19576-05\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.2-servicing-19576-05\r\n  - **Microsoft.NET.HostModel** -> 3.0.2-servicing-19576-05\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.2-servicing-19576-05\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13126","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#13126)"},{"Id":"528993213","IsPullRequest":true,"CreatedAt":"2019-11-26T22:25:32","Actor":"dotnet-maestro[bot]","Number":"13125","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191126.03\r\n- **Date Produced**: 11/26/2019 9:04 PM\r\n- **Commit**: 62e9d13376ca698367b5f7682cce8a2bf4666f42\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.0.2-servicing-19576-03\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.2-servicing-19576-03\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.2-servicing-19576-03\r\n  - **Microsoft.NET.HostModel** -> 3.0.2-servicing-19576-03\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.2-servicing-19576-03\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13125","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#13125)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"534875855","IsPullRequest":false,"CreatedAt":"2019-12-09T11:45:47","Actor":"IanKemp","Number":"1661","RawContent":null,"Title":"2.1 release timeline?","State":"open","Body":"It's been more than 2 years since Standard 2.0. We're already on Core 3.1 that's LTS, when can we expect the next version of Standard? Or is Standard dead and we should just use Core for everything going forward?","Url":"https://github.com/dotnet/standard/issues/1661","RelatedDescription":"Open issue \"2.1 release timeline?\" (#1661)"},{"Id":"529638047","IsPullRequest":true,"CreatedAt":"2019-11-28T01:14:42","Actor":"dotnet-maestro[bot]","Number":"1660","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1660","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1660)"},{"Id":"529573719","IsPullRequest":false,"CreatedAt":"2019-11-27T21:33:26","Actor":"timdoke","Number":"1659","RawContent":null,"Title":"Generic class operators derived from interface seems broken","State":"closed","Body":"Let's say I have a CaseInsensitiveConcurrentDictionary.  The intention of it is to be interchangeable with regular Dictionary implementations -- where, we always use the interface IDictionary<T, T> to interact with either.  Both Dictionary and ConcurrentDictionary implement IDictionary interface members.\r\n\r\nThe class looks like this:\r\n\r\n\r\n    public class CaseInsensitiveDictionary<TValue>\r\n        : ConcurrentDictionary<string, TValue>\r\n    {\r\n        public CaseInsensitiveDictionary()\r\n            : base(StringComparer.InvariantCultureIgnoreCase)\r\n        {\r\n        }\r\n\r\n        private CaseInsensitiveDictionary(IDictionary<string, TValue> attributes)\r\n            : this()\r\n        {\r\n            AddRange(attributes);\r\n        }\r\n\r\n        public void Add(string key, TValue value)\r\n        {\r\n            this.TryAdd(key, value);\r\n        }\r\n\r\n        public void AddRange(IDictionary<string, TValue> entries)\r\n        {\r\n            foreach (var item in entries)\r\n            {\r\n                this.TryAdd(item.Key, item.Value);\r\n            }\r\n        }\r\n\r\n        public static CaseInsensitiveDictionary<TValue> Create(IDictionary<string, TValue> attributes = null)\r\n        {\r\n            if (attributes == null)\r\n            {\r\n                return new CaseInsensitiveDictionary<TValue>();\r\n            }\r\n            return new CaseInsensitiveDictionary<TValue>(attributes);\r\n        }\r\n\r\n        public static implicit operator Dictionary<string, TValue>(CaseInsensitiveDictionary<TValue> data)\r\n        {\r\n            return new Dictionary<string, TValue>(data);\r\n        }\r\n\r\n        public static implicit operator CaseInsensitiveDictionary<TValue>(Dictionary<string, TValue> data)\r\n        {\r\n            return Create(data);\r\n        }\r\n\r\n    }\r\n\r\n\r\n`  \r\n\r\n\r\nLet's say then that we are trying to implicitly convert the ConcurrentDictionary to and from a dictionary.  To test, I wrote these methods:\r\n\r\n\r\n\r\n        public void FromDictionaryToCaseInsensitiveDictionaryTest()\r\n        {\r\n\r\n            Dictionary<string, string> dc2 = new Dictionary<string, string>();\r\n            dc2.Add(\"test1\", \"test1 value\");\r\n\r\n            var dc3 = (CaseInsensitiveDictionary<string>)dc2;\r\n            Console.WriteLine(\"FromDictionaryToCaseInsensitiveDictionaryTest success\");\r\n        }\r\n\r\n        public void FromIDictionaryToCaseInsensitiveDictionaryTest()\r\n        {\r\n            IDictionary<string, string> dc2 = new Dictionary<string, string>();\r\n            dc2.Add(\"test1\", \"test1 value\");\r\n\r\n            var dc3 = (CaseInsensitiveDictionary<string>)dc2;\r\n\r\n            Console.WriteLine(\"FromIDictionaryToCaseInsensitiveDictionaryTest success\");\r\n        }\r\n\r\n\r\n        public void FromCaseInsensitiveDictionaryToDictionaryTest()\r\n        {\r\n\r\n            var dc2 = new CaseInsensitiveDictionary<string>();\r\n            dc2.Add(\"test1\", \"test1 value\");\r\n\r\n            var dc3 = (Dictionary<string, string>)dc2;\r\n\r\n            Console.WriteLine(\"FromCaseInsensitiveDictionaryToDictionaryTest success\");\r\n\r\n        }\r\n\r\n\r\n\r\nThe first (FromDictionaryToCaseInsensitiveDictionaryTest) and third methods (FromCaseInsensitiveDictionaryToDictionaryTest) work fine and correctly use the operators.\r\n\r\nThe second one fails with this exception: System.InvalidCastException: 'Unable to cast object of type 'System.Collections.Generic.Dictionary`2[System.String,System.String]' to type 'OpenToken.CaseInsensitiveDictionary`1[System.String]'.'\r\n.  In my opinion, FromIDictionaryToCaseInsensitiveDictionaryTest should work because the type is CaseInsensitiveDictionary and implements IDictionary.  If I do NOT have the first conversion operator, the first test method fails with this exact same error message, \r\n\r\nWith this evidence, it seems to me that something is missing when the runtime is looking for the appropriate operator.  FromIDictionaryToCaseInsensitiveDictionaryTest should work either from the Dictionary operator or automatically work because it implements the IDictionary interface.  (I cannot create an operator for IDictionary conversion because that is illegal).  \r\n\r\nPlease let me know if this is expected behavior and if there is some workaround for it.  This issue seems to be present in all versions of C#.\r\n\r\nThanks!\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1659","RelatedDescription":"Closed issue \"Generic class operators derived from interface seems broken\" (#1659)"},{"Id":"526765953","IsPullRequest":false,"CreatedAt":"2019-11-25T02:23:45","Actor":"arizvisa","Number":"1657","RawContent":null,"Title":"packages.microsoft.com: signature check for netstandard-targeting-pack-2.1.0 failed","State":"closed","Body":"Hey guys, the signature check for this package seems to be failing. Not sure what that actually means, but here's the checksum as of 2019/11/21 12:23 (CST).\r\n\r\n```\r\n# fetch https://packages.microsoft.com/fedora/30/prod/netstandard-targeting-pack-2.1.0-x64.rpm\r\nnetstandard-targeting-pack-2.1.0-x64.rpm 100% 2201944 2201944\r\n# openssl dgst -sha256 netstandard-targeting-pack-2.1.0-x64.rpm \r\nSHA256(netstandard-targeting-pack-2.1.0-x64.rpm)= 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480\r\n```\r\n\r\nThen with dnf actually complaining about it.\r\n```\r\n# dnf repository-packages packages-microsoft-com-prod install netstandard-targeting-pack-2.1                                                                                 \r\nenabling fedora-modular-debuginfo repository                                                                  \r\nenabling updates-modular-debuginfo repository       \r\nenabling updates-debuginfo repository                                                                         \r\nenabling fedora-debuginfo repository\r\nenabling rpmfusion-free-updates-debuginfo repository\r\nenabling rpmfusion-free-debuginfo repository                                                                  \r\nLast metadata expiration check: 0:13:30 ago on Thu 21 Nov 2019 12:03:15 PM CST.\r\nDependencies resolved.     \r\n==============================================================================================================\r\n Package                               Architecture  Version         Repository                          Size \r\n==============================================================================================================\r\nInstalling:\r\n netstandard-targeting-pack-2.1        x86_64        2.1.0-1         packages-microsoft-com-prod        2.1 M\r\n\r\nTransaction Summary\r\n==============================================================================================================\r\nInstall  1 Package\r\n\r\nTotal download size: 2.1 M\r\nInstalled size: 2.1 M\r\nIs this ok [y/N]: y\r\nDownloading Packages:\r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[FAILED] netstandard-targeting-pack-2.1.0-x64.rpm: No more mirrors to try - All mirrors were already tried without success\r\n```\r\n\r\nHopefully this doesn't entail the need for ir. Heh.","Url":"https://github.com/dotnet/standard/issues/1657","RelatedDescription":"Closed issue \"packages.microsoft.com: signature check for netstandard-targeting-pack-2.1.0 failed\" (#1657)"},{"Id":"527469491","IsPullRequest":true,"CreatedAt":"2019-11-23T01:19:55","Actor":"dotnet-maestro[bot]","Number":"1658","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191122.3\r\n- **Date Produced**: 11/22/2019 7:14 PM\r\n- **Commit**: 0e0d227c57e69c03427d6e668716d62cf4ceb36e\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19572.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1658","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1658)"},{"Id":"526119676","IsPullRequest":true,"CreatedAt":"2019-11-20T20:02:50","Actor":"dotnet-maestro[bot]","Number":"1656","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191119.2\r\n- **Date Produced**: 11/19/2019 6:14 PM\r\n- **Commit**: e34d933e18ba1cd393bbafcb6018e0f858d3e89e\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19569.2\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1656","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1656)"},{"Id":"523456559","IsPullRequest":false,"CreatedAt":"2019-11-19T23:58:30","Actor":"SetTrend","Number":"1655","RawContent":null,"Title":"Change .NET Framework in version table from 4.6.1 to 4.7.1","State":"closed","Body":"Currently, the [.NET Standard version table](/dotnet/standard/blob/master/docs/versions.md) shows `.NET Framework 4.6.1` to be compatible with `.NET Standard >= 1.5`.\r\n\r\nHowever, a footnote clarifies that `.NET Framework 4.6.1` is **_not_** fully compatible with `.NET Standard >= 1.5`.\r\n\r\nMoreover, many issues on [StackOverflow.com](https://stackoverflow.com/questions/49925484/you-must-add-a-reference-to-assembly-netstandard-version-2-0-0-0) and [GitHub](542) give evidence that `.NET Framework 4.6.1` is **_not_** fully compatible with `.NET Standard >= 1.5`.\r\n\r\nWouldn't it be wise then to update above version table to provide **_true_** information than just spout some wannabe information?","Url":"https://github.com/dotnet/standard/issues/1655","RelatedDescription":"Closed issue \"Change .NET Framework in version table from 4.6.1 to 4.7.1\" (#1655)"},{"Id":"523175041","IsPullRequest":false,"CreatedAt":"2019-11-15T00:02:51","Actor":"replaysMike","Number":"1654","RawContent":null,"Title":"HttpClient error 'Could not create SSL/TLS secure channel' when not Administrator","State":"open","Body":"I'm trying to use certificate based authentication using HttpClient in .Net Standard 2.0. However, I've noticed TLS negotiation doesn't succeed unless running the application in Administrator mode.\r\n\r\n```\r\nvar requestMessage = new HttpRequestMessage() {\r\n    RequestUri = new Uri(new Uri(_configuration.Endpoint), \"someendpoint\"),\r\n    Method = HttpMethod.Get\r\n};\r\nvar handler = new HttpClientHandler {\r\n    ClientCertificateOptions = ClientCertificateOption.Manual,\r\n    SslProtocols = SslProtocols.Tls12,\r\n};          \r\nhandler.ClientCertificates.Add(certificate);\r\nhandler.CheckCertificateRevocationList = false;\r\n// this is required to get around untrusted self-signed certs\r\nhandler.ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) => true;\r\nvar client = new HttpClient(handler);\r\nrequestMessage.Headers.Add(\"X-ARR-ClientCert\", certificate.GetRawCertDataString());\r\nvar response = await client.SendAsync(requestMessage);\r\n```\r\nThe client certificate is valid and installed in the local computer `My` store.\r\n\r\nWithout Administrator privileges a generic error is thrown: `The request was aborted: Could not create SSL/TLS secure channel` when not Administrator.\r\n\r\nAnyone have a clue as to why?","Url":"https://github.com/dotnet/standard/issues/1654","RelatedDescription":"Open issue \"HttpClient error 'Could not create SSL/TLS secure channel' when not Administrator\" (#1654)"},{"Id":"522886300","IsPullRequest":false,"CreatedAt":"2019-11-14T14:14:42","Actor":"tndata","Number":"1653","RawContent":null,"Title":"Broken link","State":"open","Body":"\r\nI found a broken link in this sentence:\r\n\r\nThe plan for handling .NET Framework 4.6.1 and .NET Standard 2.0 is outlined in the **spec**.\r\n\r\nOn this page \r\nhttps://github.com/dotnet/standard/blob/master/docs/faq.md\r\n","Url":"https://github.com/dotnet/standard/issues/1653","RelatedDescription":"Open issue \"Broken link\" (#1653)"},{"Id":"522854157","IsPullRequest":true,"CreatedAt":"2019-11-14T13:46:23","Actor":"dotnet-maestro[bot]","Number":"1652","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191113.6\r\n- **Date Produced**: 11/14/2019 7:13 AM\r\n- **Commit**: 5cee7c97d602f294e27c582d4dab81ec388f1d7b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19563.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1652","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1652)"},{"Id":"522220691","IsPullRequest":true,"CreatedAt":"2019-11-13T13:59:11","Actor":"dotnet-maestro[bot]","Number":"1651","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191112.8\r\n- **Date Produced**: 11/13/2019 9:07 AM\r\n- **Commit**: a528006b4536e5b73227285b57d2a56116532506\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19562.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19562.8\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19562.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1651","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1651)"},{"Id":"522208590","IsPullRequest":true,"CreatedAt":"2019-11-13T13:01:39","Actor":"dotnet-maestro[bot]","Number":"1650","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191208.1\r\n- **Date Produced**: 12/8/2019 2:06 PM\r\n- **Commit**: 71ce4c736b882e6112b395a0e92313be5dcb4328\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19608.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19608.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19608.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19608.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19608.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19608.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1650","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1650)"},{"Id":"521547575","IsPullRequest":true,"CreatedAt":"2019-11-12T14:07:43","Actor":"dotnet-maestro[bot]","Number":"1649","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191112.1\r\n- **Date Produced**: 11/12/2019 10:06 AM\r\n- **Commit**: 21278249c6b417469737b20445a0dd045cd1b16e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19562.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19562.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19562.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1649","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1649)"},{"Id":"520598776","IsPullRequest":true,"CreatedAt":"2019-11-10T13:31:00","Actor":"dotnet-maestro[bot]","Number":"1648","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191109.6\r\n- **Date Produced**: 11/10/2019 6:07 AM\r\n- **Commit**: bc115700c3ece60acd6b8dbe4b0bdb8f6f80c756\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19559.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19559.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19559.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1648","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1648)"},{"Id":"520424908","IsPullRequest":true,"CreatedAt":"2019-11-09T14:01:26","Actor":"dotnet-maestro[bot]","Number":"1647","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191109.1\r\n- **Date Produced**: 11/9/2019 9:20 AM\r\n- **Commit**: f546aa9e76c776f2c27e30dfb91c50d8f62da2f8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19559.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19559.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19559.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1647","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1647)"},{"Id":"520010128","IsPullRequest":true,"CreatedAt":"2019-11-08T13:28:42","Actor":"dotnet-maestro[bot]","Number":"1646","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191107.22\r\n- **Date Produced**: 11/8/2019 8:30 AM\r\n- **Commit**: 7a318879f787e9feee9266fe9e876ee2411b548f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19557.22\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19557.22\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19557.22\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1646","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1646)"},{"Id":"519262813","IsPullRequest":true,"CreatedAt":"2019-11-07T13:26:42","Actor":"dotnet-maestro[bot]","Number":"1645","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191106.12\r\n- **Date Produced**: 11/7/2019 8:14 AM\r\n- **Commit**: a4f04476ea74c61a52168cf0b31c0281822ecad3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19556.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19556.12\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19556.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1645","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1645)"},{"Id":"518467413","IsPullRequest":true,"CreatedAt":"2019-11-06T13:31:10","Actor":"dotnet-maestro[bot]","Number":"1644","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191105.8\r\n- **Date Produced**: 11/6/2019 9:54 AM\r\n- **Commit**: 9e94e2552ad869005f30f6a59eb638c544d3efdd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19555.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19555.8\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19555.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1644","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1644)"},{"Id":"518175351","IsPullRequest":false,"CreatedAt":"2019-11-06T01:11:51","Actor":"tchitnis","Number":"1643","RawContent":null,"Title":"Debug.Assert causing entire test run to be aborted","State":"open","Body":"Similar to the issues reported here:\r\n\r\nhttps://github.com/Microsoft/vstest/issues/1022\r\nhttps://github.com/dotnet/coreclr/issues/22569\r\n\r\nI still see the same error/issue on .net standard 2.0 with MSTest. Sounds like it was fixed with .Net Core 3.0, can someone comment on whether a similar fix was applied to .Net Standard as well?","Url":"https://github.com/dotnet/standard/issues/1643","RelatedDescription":"Open issue \"Debug.Assert causing entire test run to be aborted\" (#1643)"},{"Id":"517769508","IsPullRequest":true,"CreatedAt":"2019-11-05T13:42:32","Actor":"dotnet-maestro[bot]","Number":"1642","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191104.10\r\n- **Date Produced**: 11/5/2019 7:44 AM\r\n- **Commit**: ee038925bde85c1c45c52f235ab09ea03b9c126c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19554.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19554.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19554.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1642","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1642)"},{"Id":"517192004","IsPullRequest":false,"CreatedAt":"2019-11-04T14:33:56","Actor":"peni4142","Number":"1641","RawContent":null,"Title":"Regex Bug","State":"open","Body":"Hi guys,\r\nI have a test for you\r\n\r\n[x] Bug Report\r\n\r\nThe following regex test will return an empty string in the group[0], which in my opinion can't be true.\r\n\r\n\r\n```C#\r\n        [TestMethod()]\r\n        public void BugTest()\r\n        {\r\n            Match matchEnsureObject = new Regex(\"^\\\\[MERGE-CMD: ENSURE OBJECT\\\\(([^)]+)\\\\)\\\\]$\").Match(\"[MERGE-CMD: ENSURE OBJECT(aLong) AT 1]\");\r\n            if(matchEnsureObject.Groups[0].Value == \"\")\r\n            {\r\n                throw new Exception(\"Match can't be an empty value\");\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/standard/issues/1641","RelatedDescription":"Open issue \"Regex Bug\" (#1641)"},{"Id":"517142571","IsPullRequest":true,"CreatedAt":"2019-11-04T13:21:47","Actor":"dotnet-maestro[bot]","Number":"1640","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191103.8\r\n- **Date Produced**: 11/4/2019 8:18 AM\r\n- **Commit**: 15e7e1569a8c3a5502c476c31b60e06d633b3efa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19553.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19553.8\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19553.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1640","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1640)"},{"Id":"516826733","IsPullRequest":true,"CreatedAt":"2019-11-03T13:44:18","Actor":"dotnet-maestro[bot]","Number":"1639","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191102.6\r\n- **Date Produced**: 11/3/2019 4:48 AM\r\n- **Commit**: bfaed4d48a921a339f9691c74425bec9d2f760a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19552.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19552.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19552.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1639","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1639)"},{"Id":"516615712","IsPullRequest":false,"CreatedAt":"2019-11-02T14:52:31","Actor":"bernd5","Number":"1638","RawContent":null,"Title":"_dummy and _dummyPrimitive in System.Span","State":"closed","Body":"Why is it required that all net standard compliant implementations need a private field _dummy and _dummyPrimitive to provide a standard Span<T>?\r\n\r\nShould it be really part of the standard? Isn't it just an implementation detail?","Url":"https://github.com/dotnet/standard/issues/1638","RelatedDescription":"Closed issue \"_dummy and _dummyPrimitive in System.Span\" (#1638)"},{"Id":"516573954","IsPullRequest":true,"CreatedAt":"2019-11-02T12:25:00","Actor":"dotnet-maestro[bot]","Number":"1637","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191101.24\r\n- **Date Produced**: 11/2/2019 4:59 AM\r\n- **Commit**: eb41b7841f1d8edc499a8c0fbaec5e4d53187fa0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19551.24\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19551.24\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19551.24\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1637","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1637)"},{"Id":"516079198","IsPullRequest":true,"CreatedAt":"2019-11-01T12:30:54","Actor":"dotnet-maestro[bot]","Number":"1636","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191031.13\r\n- **Date Produced**: 11/1/2019 5:06 AM\r\n- **Commit**: a24db0ba5666f46f50649810fe698ad267b60331\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19531.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19531.13\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19531.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1636","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1636)"},{"Id":"515387745","IsPullRequest":true,"CreatedAt":"2019-10-31T12:31:11","Actor":"dotnet-maestro[bot]","Number":"1635","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191031.1\r\n- **Date Produced**: 10/31/2019 9:35 AM\r\n- **Commit**: 18e82cabc1d2cddad8ff07ae96edb7296d9fad9d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19531.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19531.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19531.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1635","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1635)"},{"Id":"514625134","IsPullRequest":true,"CreatedAt":"2019-10-30T12:31:21","Actor":"dotnet-maestro[bot]","Number":"1634","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191029.15\r\n- **Date Produced**: 10/30/2019 3:37 AM\r\n- **Commit**: 8ee61dd103ff55445f8baf3137bb768ed86370d9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19529.15\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19529.15\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19529.15\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1634","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1634)"},{"Id":"513879230","IsPullRequest":true,"CreatedAt":"2019-10-29T12:32:35","Actor":"dotnet-maestro[bot]","Number":"1633","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191028.12\r\n- **Date Produced**: 10/29/2019 2:19 AM\r\n- **Commit**: 15e1ea023d2818b6083a61c7447a720ff3779482\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19528.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19528.12\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19528.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1633","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1633)"},{"Id":"513668220","IsPullRequest":false,"CreatedAt":"2019-10-29T03:17:07","Actor":"2300070","Number":"1632","RawContent":null,"Title":"A bug while the 'TypeBuilder' class processing the value type generic argument for generic definition.","State":"open","Body":"I define a class to inherit existen generic type definition, however, the base type has one generic argument, the type I processing has two generic argument, and I want the second generic as the generic argument of base type, so I write the code below, but the strange thing is: if the first generic argument is class type(though it is not used by any place), it works fine, but if I change it to a value type, an exception will thrown('Unable to read memory'), is there any problem while the 'TypeBuilder' class processing the generic arguments?\r\n\r\n\t[TestClass]\r\n\tpublic class GeneralTest\r\n\t{\r\n\t\t[TestMethod]\r\n\t\tpublic void TestDefineGenericType()\r\n\t\t{\r\n\t\t\tAssemblyBuilder assembly = AssemblyBuilder.DefineDynamicAssembly(new AssemblyName(\"GeneralTest\"), AssemblyBuilderAccess.RunAndCollect);\r\n\t\t\tModuleBuilder module = assembly.DefineDynamicModule(\"GeneralTest.dll\");\r\n\r\n\t\t\t//define type\r\n\t\t\tTypeBuilder builder = module.DefineType(\"TestGenericClass\");\r\n\t\t\tGenericTypeParameterBuilder[] arguments = builder.DefineGenericParameters(\"TValue1\", \"TValue2\");\r\n\t\t\t\r\n\t\t\tbuilder.SetParent(typeof(TestClass<>).MakeGenericType(arguments[1]));\r\n\r\n\t\t\t//define constructor that invoke base constructor\r\n\t\t\tConstructorBuilder constructor = builder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, new Type[] {arguments[1] });\r\n\t\t\tILGenerator generator = constructor.GetILGenerator();\r\n\t\t\tgenerator.Emit(OpCodes.Ldarg_0);\r\n\t\t\tgenerator.Emit(OpCodes.Ldarg_1);\r\n\t\t\tgenerator.Emit(OpCodes.Call, typeof(TestClass<>).GetConstructors(BindingFlags.Public | BindingFlags.Instance)[0]);\r\n\t\t\tgenerator.Emit(OpCodes.Ret);\r\n\t\t\t\r\n\t\t\tType builtType = builder.CreateType();\r\n\t\t\tType testType;\r\n\t\t\tTestClass<string> test;\r\n\r\n\t\t\t//this test is okay.\r\n\t\t\ttestType = builtType.MakeGenericType(typeof(object), typeof(string));\r\n\t\t\ttest = Activator.CreateInstance(testType, string.Empty) as TestClass<string>;\r\n\t\t\tAssert.AreEqual(typeof(string), test.ValueType);\r\n\t\t\tAssert.AreEqual(string.Empty, test.Value);//OK\r\n\r\n\t\t\t//change the first generic argument to value type, exception will be thrown.\r\n\t\t\ttestType = builtType.MakeGenericType(typeof(int), typeof(string));\r\n\t\t\ttest = Activator.CreateInstance(testType, string.Empty) as TestClass<string>;\r\n\t\t\tAssert.AreEqual(typeof(string), test.ValueType);\r\n\t\t\t//Assert.AreEqual(string.Empty, test.Value);//ERROR WHILE READ THE FIELD OF 'test'\r\n\r\n\t\t\t\r\n\t\t\t//change the first generic argument to class type back, exception disapear.\r\n\t\t\ttestType = builtType.MakeGenericType(typeof(string), typeof(string));\r\n\t\t\ttest = Activator.CreateInstance(testType, string.Empty) as TestClass<string>;\r\n\t\t\tAssert.AreEqual(typeof(string), test.ValueType);\r\n\t\t\tAssert.AreEqual(string.Empty, test.Value);//OK\r\n\t\t}\r\n\r\n\t\tpublic class TestClass<TValue>\r\n\t\t{\r\n\t\t\tpublic readonly TValue Value;\r\n\r\n\t\t\tpublic Type ValueType => typeof(TValue);\r\n\r\n\t\t\tpublic TestClass(TValue value)\r\n\t\t\t{\r\n\t\t\t\tthis.Value = value;\r\n\t\t\t}\r\n\t\t}\r\n\t}","Url":"https://github.com/dotnet/standard/issues/1632","RelatedDescription":"Open issue \"A bug while the 'TypeBuilder' class processing the value type generic argument for generic definition.\" (#1632)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"535498144","IsPullRequest":false,"CreatedAt":"2019-12-10T05:11:58","Actor":"dehghani-mehdi","Number":"42765","RawContent":null,"Title":"Why `System.Runtime.Caching` has dependency to `System.Security.Principal.Windows`?","State":"open","Body":"Why `System.Runtime.Caching` has dependency to `System.Security.Principal.Windows`?","Url":"https://github.com/dotnet/corefx/issues/42765","RelatedDescription":"Open issue \"Why `System.Runtime.Caching` has dependency to `System.Security.Principal.Windows`?\" (#42765)"},{"Id":"535440738","IsPullRequest":false,"CreatedAt":"2019-12-10T01:47:31","Actor":"dngur807","Number":"42764","RawContent":null,"Title":"Windows and Linux results are different when using the Process.GetCurrentProcess function.","State":"open","Body":"The result of GetCurrentProcess for each os.\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/14495376/70487711-9c71a200-1b39-11ea-8d95-babf3ff2c96d.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/14495376/70487725-aa272780-1b39-11ea-98b9-7d81bd4e4fa2.png)\r\n\r\ncentos7 some information is missing.\r\n\r\n\r\nI've been told that this issue is fixed in dotnet core 3.1.\r\nHowever, the issue also occurs after applying dotnet core 3.1.\r\n\r\nIf you know the reason for that, please share it.\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42764","RelatedDescription":"Open issue \"Windows and Linux results are different when using the Process.GetCurrentProcess function.\" (#42764)"},{"Id":"535416556","IsPullRequest":false,"CreatedAt":"2019-12-10T00:24:43","Actor":"vatsan-madhavan","Number":"42763","RawContent":null,"Title":"Add System.Reflection.PathAssemblyResolver support for 'retargetable' assemblies","State":"open","Body":"https://github.com/dotnet/corefx/issues/40523#issue-484261911\r\n\r\n> .assembly extern retargetable mscorlib\r\n> {\r\n> .publickeytoken = (7C EC 85 D7 BE A7 79 8E ) // |.....y.\r\n> .ver 2:0:5:0\r\n> }\r\n> \r\n> If any assemblies loaded by `MetadataLoadContext` were built against some older versions of mscorlib, `PathAssemblyResolver` will fail to match any newer versions of mscorlib present in `assemblyPaths`, due to a public key token mismatch. `PathAssemblyResolver` already supports taking the most recent version for target assemblies with an empty public key token.\r\n> \r\n> https://github.com/dotnet/corefx/blob/master/src/System.Reflection.MetadataLoadContext/src/System/Reflection/PathAssemblyResolver.cs#L80\r\n> \r\n> Add support for most-recent assembly match when assembly being resolved is 'retargetable'.\r\n\r\nThis was fixed in .NET 5 - https://github.com/dotnet/corefx/pull/40581.  We did not take this change into .NET Core 3.1 since the evidence was not clear at that time that this would be a big problem. \r\n \r\nSince the release of .NET Core 3.1, several WPF customers have reported that this is a blocking problem. \r\n\r\n- https://developercommunity.visualstudio.com/content/problem/806211/wpf-apps-fail-to-compile-after-updating-to.html\r\n- https://developercommunity.visualstudio.com/content/problem/845412/vs2019-164-fails-to-build-windowsdesktop-project-t.html\r\n- https://github.com/dotnet/wpf/issues/2274\r\n- https://github.com/dotnet/wpf/issues/2277\r\n\r\nWe would like this fix backported to .NET Core 3.1 as part of an upcoming servicing update. \r\n\r\n/cc @ericstj, @nguerrera, @rladuca, @steveharter ","Url":"https://github.com/dotnet/corefx/issues/42763","RelatedDescription":"Open issue \"Add System.Reflection.PathAssemblyResolver support for 'retargetable' assemblies\" (#42763)"},{"Id":"534556922","IsPullRequest":true,"CreatedAt":"2019-12-08T16:18:55","Actor":"dotnet-maestro[bot]","Number":"42762","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191207.1\r\n- **Date Produced**: 12/7/2019 4:52 PM\r\n- **Commit**: 5558d18aafc84ecac3630ca6a31f52699cde0b66\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.1-servicing.19607.1\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.1-servicing.19607.1\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.1-servicing.19607.1\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42762","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#42762)"},{"Id":"533572448","IsPullRequest":true,"CreatedAt":"2019-12-07T00:10:52","Actor":"mmitche","Number":"42757","RawContent":null,"Title":"[release/3.1] Switch to using 3.1100 SDK to build 3.1","State":"closed","Body":"Required for upstack components, so this is for consistency.","Url":"https://github.com/dotnet/corefx/pull/42757","RelatedDescription":"Closed or merged PR \"[release/3.1] Switch to using 3.1100 SDK to build 3.1\" (#42757)"},{"Id":"533852278","IsPullRequest":false,"CreatedAt":"2019-12-06T09:42:49","Actor":"freesix","Number":"42761","RawContent":null,"Title":"Want to contribute to the Project but don't know where to start","State":"open","Body":"Hi,\r\n\r\nCan I contribute to the Project? \r\n\r\nI'd like to improve my .Net skills.\r\n\r\nI running VS 2017.\r\n\r\nWhere do I start? do I need to clone this repo to my PC?","Url":"https://github.com/dotnet/corefx/issues/42761","RelatedDescription":"Open issue \"Want to contribute to the Project but don't know where to start\" (#42761)"},{"Id":"533687089","IsPullRequest":true,"CreatedAt":"2019-12-06T02:30:55","Actor":"dotnet-maestro[bot]","Number":"42760","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191202.2\r\n- **Date Produced**: 12/2/2019 9:49 PM\r\n- **Commit**: 53826cad1db670d13c424f1afe048b3aad92f7ba\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.1-servicing.19602.2\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.1-servicing.19602.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.1-servicing.19602.2\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42760","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#42760)"},{"Id":"533685254","IsPullRequest":false,"CreatedAt":"2019-12-06T01:03:54","Actor":"chenyj796","Number":"42759","RawContent":null,"Title":"System.Threading.Channels.Channel<T>: After Complete with exception, the ReadAsync and ReadAllAsync method throws different exception","State":"open","Body":"I have some codes as below:\r\n```csharp\r\n\tclass Program\r\n\t{\r\n\t\tclass TestException : Exception\r\n\t\t{\r\n\t\t\tpublic TestException()\r\n\t\t\t\t: base(\"This is for test channel complete method with exception\")\r\n\t\t\t{\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tstatic async Task Main(string[] args)\r\n\t\t{\r\n\t\t\tvar channel = Channel.CreateUnbounded<string>();\r\n\t\t\tchannel.Writer.Complete(new TestException());\r\n\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tawait channel.Reader.ReadAsync();\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"ReadAsync throws {ex.GetType().Name}: {ex.Message}\");\r\n\t\t\t}\r\n\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tawait foreach (var item in channel.Reader.ReadAllAsync())\r\n\t\t\t\t{\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"ReadAllAsync throws {ex.GetType().Name}: {ex.Message}\");\r\n\t\t\t}\r\n\r\n\t\t\tConsole.ReadLine();\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n```\r\n\r\nAfter run it, I get the following output:\r\n```\r\nReadAsync throws ChannelClosedException: The channel has been closed.\r\nReadAllAsync throws TestException: This is for test channel complete method with exception\r\n```\r\n\r\nI hope the ReadAsync also throws TestException just as ReadAllAsync does.","Url":"https://github.com/dotnet/corefx/issues/42759","RelatedDescription":"Open issue \"System.Threading.Channels.Channel<T>: After Complete with exception, the ReadAsync and ReadAllAsync method throws different exception\" (#42759)"},{"Id":"533603733","IsPullRequest":true,"CreatedAt":"2019-12-05T22:44:11","Actor":"carlossanlop","Number":"42758","RawContent":null,"Title":"[release/3.1] .NET Core 3.1.1 Intellisense bump (English)","State":"closed","Body":"@mmitche \r\n\r\nCreated the package with these changes:\r\nhttps://github.com/dotnet/corefxlab/pull/2799\r\n\r\nPushed the package using these instructions:\r\nhttps://github.com/dotnet/core-eng/tree/master/Documentation/Tools/dotnet-core-push-oneoff-package\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42758","RelatedDescription":"Closed or merged PR \"[release/3.1] .NET Core 3.1.1 Intellisense bump (English)\" (#42758)"},{"Id":"532647597","IsPullRequest":false,"CreatedAt":"2019-12-04T19:43:41","Actor":"mshobohm","Number":"42755","RawContent":null,"Title":"FileNotFoundException with FileInfo.Length on Linux if binary filename contains a 0xDF-Byte ","State":"closed","Body":"Special characters in Linux filenames can confuse the FileInfo.Length property, resulting in FileNotFoundException as shown in the attached test case , see also readme.txt.\r\n\r\n[SSharpException.zip](https://github.com/dotnet/corefx/files/3921699/SSharpException.zip)\r\n","Url":"https://github.com/dotnet/corefx/issues/42755","RelatedDescription":"Closed issue \"FileNotFoundException with FileInfo.Length on Linux if binary filename contains a 0xDF-Byte \" (#42755)"},{"Id":"532322237","IsPullRequest":true,"CreatedAt":"2019-12-03T23:25:20","Actor":"mmitche","Number":"42754","RawContent":null,"Title":"[release/3.1] Stabilize package versions","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/42754","RelatedDescription":"Closed or merged PR \"[release/3.1] Stabilize package versions\" (#42754)"},{"Id":"529559765","IsPullRequest":true,"CreatedAt":"2019-12-02T19:42:54","Actor":"wfurt","Number":"42743","RawContent":null,"Title":"WIP: test some ideas","State":"closed","Body":"this is only to run test. I will close after. ","Url":"https://github.com/dotnet/corefx/pull/42743","RelatedDescription":"Closed or merged PR \"WIP: test some ideas\" (#42743)"},{"Id":"529885496","IsPullRequest":true,"CreatedAt":"2019-12-02T19:42:53","Actor":"Gnbrkm41","Number":"42747","RawContent":null,"Title":"Add issue / pull request template explaining repo consolidation","State":"closed","Body":"Related: https://github.com/dotnet/corefx/issues/42733\r\n\r\nI left the PR template commented out, since I heard the repo will still be used for servicing fixes (so PRs would be opened here for legitimate reasons in future)\r\n\r\nNits welcome, I'm terrible when it comes to my English skills 😄. Also wanted to give a go at modifying README.md but I guess someone else could do it better, and repo descriptions... well, I don't have the perms!\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/42747","RelatedDescription":"Closed or merged PR \"Add issue / pull request template explaining repo consolidation\" (#42747)"},{"Id":"531353533","IsPullRequest":true,"CreatedAt":"2019-12-02T18:44:52","Actor":"dotnet-maestro[bot]","Number":"42753","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191128.1\r\n- **Date Produced**: 11/28/2019 5:05 PM\r\n- **Commit**: 1423ad5f3155362303ad9453c5604776040f9bbd\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-servicing.19578.1\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-servicing.19578.1\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-servicing.19578.1\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42753","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#42753)"},{"Id":"531306663","IsPullRequest":false,"CreatedAt":"2019-12-02T18:04:26","Actor":"LeroyK","Number":"42752","RawContent":null,"Title":"Allow (de)serialization of abstract types with JsonSerializer when there is a JsonConverter for that type","State":"closed","Body":"# Issue Title\r\n\r\nAllow (de)serialization of abstract types with ``JsonSerializer`` when there is a ``JsonConverter`` for that type\r\n\r\n# General\r\n\r\nWhen you try to serialize or deserialize a type that is abstract, ``System.Text.Json.JsonSerializer`` currently throws a ``NotSupportedException`` with the message:\r\n\r\n> Deserialization of reference types without parameterless constructor is not supported.\r\n\r\nJsonSerializer should first check if the list of JsonConverters supports the abstract type and throw this exception only when there is no JsonConverter capable of converting the type.\r\n\r\nWe currently have a JsonConverter that supports polymorphism and because of this issue we cannot make the base type abstract.\r\n\r\n# Additional info\r\n.NET Core version: 3.0.1","Url":"https://github.com/dotnet/corefx/issues/42752","RelatedDescription":"Closed issue \"Allow (de)serialization of abstract types with JsonSerializer when there is a JsonConverter for that type\" (#42752)"},{"Id":"530466840","IsPullRequest":false,"CreatedAt":"2019-11-30T21:01:40","Actor":"kevin-montrose","Number":"42751","RawContent":null,"Title":"Calling Latin1 / iso-8859-1 Encoder Convert method iteratively produces different results than Encoding GetBytes on \"naughty\" string","State":"closed","Body":"Another bit of odd behavior with [`Encoder`](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoder?view=netcore-3.0), this time with the Latin1 encoding.\r\n\r\nFor the [\"naughty\" string ](https://github.com/minimaxir/big-list-of-naughty-strings)`@\"0️⃣ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟\"` calling `Encoding.GetBytes(...)` produces a different result than iteratively calling `Encoder.Convert(...)`.  I have a [repository with a reproduction](https://github.com/kevin-montrose/Latin1Repro/blob/master/Latin1Repro/Program.cs#L20) (also shows off issue #42750 , but I suspect these are unrelated issues - I just happened to find them at the same time).\r\n\r\nFor that string, the issue seems to be that `Encoder` doesn't write the final byte during flushing.\r\n\r\nLatin1 is sufficiently weird of an encoding that this may be expected?\r\n\r\nA smaller reproduction:\r\n\r\n```csharp\r\nvar encoding = Encoding.GetEncoding(\"iso-8859-1\");\r\nvar text = @\"0️⃣ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟\";\r\nvar destBufferSize = 2;\r\n\r\nvar encodingBytes = encoding.GetBytes(text);\r\nvar encoder = encoding.GetEncoder();\r\n\r\nvar chars = text.ToCharArray();\r\n\r\nvar sourceSpan = chars.AsSpan();\r\nvar destSpan = new byte[destBufferSize].AsSpan();\r\nvar encoderBytes = new List<byte>();\r\n\r\nvar completed = false;\r\n\r\n// write everything in sourceSpan\r\nwhile (!completed)\r\n{\r\n    var flush = sourceSpan.Length == 0;\r\n    encoder.Convert(sourceSpan, destSpan, flush, out var charsConsumed, out var bytesProduced, out completed);\r\n    encoderBytes.AddRange(destSpan.Slice(0, bytesProduced).ToArray());\r\n\r\n    sourceSpan = sourceSpan.Slice(charsConsumed);\r\n}\r\n\r\nvar eq = encodingBytes.SequenceEqual(encoderBytes);\r\n\r\nif (eq)\r\n{\r\n    return;\r\n}\r\n\r\nvar encodingAsStr = encoding.GetString(encodingBytes);\r\nvar encoderAsStr = encoding.GetString(encoderBytes.ToArray());\r\n\r\nConsole.WriteLine($@\"Encoding Convert failure for destBufferSize={destBufferSize} - {encodingBytes.Length}:\"\"{encodingAsStr}\"\" vs {encoderBytes.Count}:\"\"{encoderAsStr}\"\"\");\r\n```\r\n\r\nThis prints when it (probably) shouldn't.\r\n\r\nThis behavior is quite sensitive to the value of `destBufferSize`, happening for this particular string at values 2, 4, 5, 8, 10, 20, 40 ,& 41 (note that 42 is the size the destination buffer needs to be for a single `Convert` call to be sufficient).","Url":"https://github.com/dotnet/corefx/issues/42751","RelatedDescription":"Closed issue \"Calling Latin1 / iso-8859-1 Encoder Convert method iteratively produces different results than Encoding GetBytes on \"naughty\" string\" (#42751)"},{"Id":"530463719","IsPullRequest":false,"CreatedAt":"2019-11-30T20:58:46","Actor":"kevin-montrose","Number":"42750","RawContent":null,"Title":"UTF7 Encoder Convert method fails to make progress on \"naughty\" string","State":"closed","Body":"I noticed some odd behavior with UTF7's [`Encoder`](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoder?view=netcore-3.0), and failing to make progress on a [\"naughty\" string](https://github.com/minimaxir/big-list-of-naughty-strings).\r\n\r\nNamely, adapting the example code provided for [`Convert`](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoder.convert?view=netcore-3.0) will spin forever (failing to set `completed == true`) on `@\"00˙Ɩ$-\"`.\r\n\r\nUTF7 is sufficiently weird that maybe this is expected, and I just don't understand it?\r\n\r\nI have a [repository with a repro](https://github.com/kevin-montrose/Latin1Repro/blob/master/Latin1Repro/Program.cs#L19) (it also has some Latin1 stuff that I'll report in a separate issue, as it's probably unrelated).\r\n\r\nA smaller version of what's in the repo:\r\n\r\n```csharp\r\nvar destBufferSize = 16;\r\nvar encoding = System.Text.Encoding.UTF7;\r\nvar text = @\"00˙Ɩ$-\";\r\n\r\nvar encoder = encoding.GetEncoder();\r\n\r\nvar chars = text.ToCharArray();\r\n\r\nvar sourceSpan = chars.AsSpan();\r\nvar destSpan = new byte[destBufferSize].AsSpan();\r\nvar encoderBytes = new List<byte>();\r\n\r\nvar completed = false;\r\n\r\nwhile (!completed)\r\n{\r\n    var flush = sourceSpan.Length == 0;\r\n    encoder.Convert(sourceSpan, destSpan, flush, out var charsConsumed, out var bytesProduced, out completed);\r\n    encoderBytes.AddRange(destSpan.Slice(0, bytesProduced).ToArray());\r\n\r\n    sourceSpan = sourceSpan.Slice(charsConsumed);\r\n\r\n    if (charsConsumed == 0 && bytesProduced == 0 && flush)\r\n    {\r\n        Console.WriteLine($@\"Encoding Convert failure for destBufferSize={destBufferSize}, stopped making progress\");\r\n        return;\r\n    }\r\n}\r\n```\r\n\r\nWill print, when it (probably) shouldn't.","Url":"https://github.com/dotnet/corefx/issues/42750","RelatedDescription":"Closed issue \"UTF7 Encoder Convert method fails to make progress on \"naughty\" string\" (#42750)"},{"Id":"530147717","IsPullRequest":false,"CreatedAt":"2019-11-29T04:14:37","Actor":"oliverjanik","Number":"42749","RawContent":null,"Title":"Include System.Linq.Async from https://github.com/dotnet/reactive into corefx","State":"open","Body":"I am very happy we have the new `IAsyncEnumerable` and some c# sugar to go with it in .net core 3.\r\n\r\nI think it would be even better if it had batteries included just like `IEnumerable`.\r\n\r\n👍 ","Url":"https://github.com/dotnet/corefx/issues/42749","RelatedDescription":"Open issue \"Include System.Linq.Async from https://github.com/dotnet/reactive into corefx\" (#42749)"},{"Id":"529960264","IsPullRequest":false,"CreatedAt":"2019-11-28T19:06:35","Actor":"sulemanb","Number":"42748","RawContent":null,"Title":"Error: GSSAPI operation failed with error - An unsupported mechanism was requested. NTLM authentication requires the GSSAPI plugin 'gss-ntlmssp'","State":"closed","Body":"Hi All,\r\n\r\nI am facing this error message when my api (dotnet core 3) tries to call another api endpoint.\r\nI am packaging my apis as docker images on the on-prem k8s docker enterprise cluster.\r\n\r\nMy docker file is as follows:\r\n\r\n`\r\n#FROM microsoft/dotnet:2.2-aspnetcore-runtime-alpine AS runtime\r\nFROM ddcdtr.bayer.cnb/microsoft/dotnet-core-aspnet:3.0 AS runtime\r\n\r\nWORKDIR /app\r\n# Only Metadata\r\n#EXPOSE 80\r\nENV PORT=8080\r\nENV ASPNETCORE_URLS=http://+:${PORT}\r\n\r\nENV HTTP_PROXY=${http_proxy}\r\nENV HTTPS_PROXY=${https_proxy}\r\n\r\n\r\nEXPOSE $PORT\r\n\r\n\r\n#ARG ASPNETCORE_ENVIRONMENT\r\n#ENV ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}\r\n# https://rehansaeed.com/securing-asp-net-core-in-docker/\r\nENV COMPlus_EnableDiagnostics=0\r\n\r\n#FROM microsoft/dotnet:2.2-sdk AS build\r\nFROM ddcdtr.bayer.cnb/microsoft/dotnet-core-sdk:3.0 AS build\r\n\r\nRUN apt-get update\r\n#RUN apt-get -y install gss-ntlmssp\r\nRUN apt-get update && apt-get install -y --no-install-recommends gss-ntlmssp\r\n\r\n\r\n\r\nWORKDIR /src\r\n#ARG NUGET_CONFIG\r\n#RUN echo $NUGET_CONFIG > NuGet.config\r\n\r\nCOPY Bardo.Data/Bardo.Data.csproj Bardo.Data/\r\nCOPY GBoxApi/GBoxApi.csproj GBoxApi/\r\nCOPY GBoxApi.IntegrationTests/GBoxApi.IntegrationTests.csproj GBoxApi.IntegrationTests/\r\nCOPY GBoxData/GBoxData.csproj GBoxData/\r\n\r\n\r\nRUN dotnet restore GBoxApi/GBoxApi.csproj\r\n\r\nCOPY . .\r\nWORKDIR /src/GBoxApi\r\n\r\nRUN dotnet build -c Release -o /app\r\n\r\nFROM build AS publish\r\n\r\nRUN dotnet publish -c Release -o /app\r\n\r\nFROM runtime AS final\r\n\r\n###\r\n\r\n# Create a group and user\r\n#RUN addgroup -S -g 1000 appgroup \\\r\n#&& adduser -S -u 1000 -G appgroup -s /bin/sh appuser\r\n\r\n###\r\n\r\n\r\nWORKDIR /app\r\n\r\nRUN mkdir -p /local/\r\n\r\nCOPY --from=publish /app .\r\n\r\nCOPY --from=build /src/GBoxApi/GBoxApi.xml .\r\n#COPY --from=build . .\r\n\r\n#RUN chown appuser:appgroup /local\r\n#RUN chown appuser:appgroup /app\r\n\r\n\r\n\r\nUSER root:root\r\n\r\n# Tell docker that all future commands should run as the appuser user\r\n#USER appuser\r\n\r\n\r\nENTRYPOINT [\"dotnet\", \"GBoxApi.dll\"]\r\n\r\n`\r\n\r\nbuild and deployment is all fine, but at runtime, my application throws this error after (log entry 4) at client.SendAsync(request);\r\n\r\n`\r\npublic async Task<Permission> GetPermissionsAsync(string identity, string context)\r\n        {\r\n            string log = \"/n Start: \";\r\n            try\r\n            {\r\n                Permission result = null;\r\n                var permissionUri = $\"{ _config[\"PermissionAPI:BaseUrl\"] }?digitalIdentity={identity}&apiContext={context}\";\r\n                log += \"1 \";\r\n                var request = new HttpRequestMessage(HttpMethod.Get, permissionUri);\r\n                log += \"2 \";\r\n                request.Headers.Add(\"Accept\", \"application/json\");\r\n                log += \"3 \";\r\n\r\n                var client = _clientFactory.CreateClient();\r\n                log += \"4 PermissionUri: \" + permissionUri;\r\n\r\n                var response = await client.SendAsync(request);\r\n\r\n`\r\n\r\ni have also tried other base images for (sdk, runtime) like dotnet-core-aspnet:3.0-alpine and dotnet-core-sdk:3.0-alpine, but still same problem.\r\n","Url":"https://github.com/dotnet/corefx/issues/42748","RelatedDescription":"Closed issue \"Error: GSSAPI operation failed with error - An unsupported mechanism was requested. NTLM authentication requires the GSSAPI plugin 'gss-ntlmssp'\" (#42748)"},{"Id":"529660113","IsPullRequest":false,"CreatedAt":"2019-11-28T11:33:13","Actor":"DaRosenberg","Number":"42746","RawContent":null,"Title":"InvariantCulture string comparison is inconsistent between Windows and macOS","State":"closed","Body":"Verified in .NET Core 3.0 on Windows 10 1909 and macOS 10.15.1.\r\n\r\nThis expression:\r\n\r\n```cs\r\nSystem.StringComparer.InvariantCulture.Compare(\".\", \"_\")\r\n```\r\n\r\nReturns `-1` on Windows, but `1` on macOS.\r\n\r\nSince the invariant culture is being used, expected result is for string comparison to behave the same.\r\n\r\nThis is a blocking issue for us, because we are building a cross-platform tool whose output goes into shared data storage, and contains sorted strings. Currently, Windows users and Mac users overwrite each others' data with changes in sorting.","Url":"https://github.com/dotnet/corefx/issues/42746","RelatedDescription":"Closed issue \"InvariantCulture string comparison is inconsistent between Windows and macOS\" (#42746)"},{"Id":"529636218","IsPullRequest":true,"CreatedAt":"2019-11-28T02:02:44","Actor":"dotnet-maestro[bot]","Number":"42745","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:a5bda823-89f1-4ce6-0d43-08d6910cd73b)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19577.5\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19577.5\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19577.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:a5bda823-89f1-4ce6-0d43-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42745","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#42745)"},{"Id":"529634564","IsPullRequest":true,"CreatedAt":"2019-11-28T01:46:00","Actor":"dotnet-maestro[bot]","Number":"42744","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8e91fa34-ea12-4ebd-d4c2-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19577.5\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19577.5\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19577.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:8e91fa34-ea12-4ebd-d4c2-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/42744","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#42744)"},{"Id":"529449217","IsPullRequest":true,"CreatedAt":"2019-11-27T18:00:49","Actor":"mmitche","Number":"42741","RawContent":null,"Title":"[release/3.0] Stabilize package versions","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/42741","RelatedDescription":"Closed or merged PR \"[release/3.0] Stabilize package versions\" (#42741)"},{"Id":"529195231","IsPullRequest":false,"CreatedAt":"2019-11-27T12:05:29","Actor":"KamranShahid","Number":"42738","RawContent":null,"Title":".net core 3.0 getting System.Threading.Tasks.TaskCanceledException: The operation was canceled.","State":"closed","Body":"I have .net core 3.0 web api project where i am calling my .net core 3.0 service (systemd in linux) httplistener calls.\r\nI am getting error\r\n\r\n```\r\nawait client.PostAsync(url, content).ConfigureAwait(false)\r\nSystem.Threading.Tasks.TaskCanceledException: The operation was canceled.\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n```\r\n\r\nMy calling method is \r\n\r\n```\r\n\t\tpublic static async Task<GenerricApiResponsewithResult> ProcessWebRequestWithResponsetype<T>(string url, string friendlyName, T req)\r\n        {\r\n            var obj = new GenerricApiResponsewithResult();\r\n            try\r\n            {\r\n                using (var client = new HttpClient())\r\n                {\r\n                    var jsonRequest = JsonSerializer.Serialize(req);\r\n                    client.DefaultRequestHeaders.ExpectContinue = false;\r\n                    var content = new StringContent(jsonRequest);\r\n                    content.Headers.Clear();\r\n                    content.Headers.ContentType = new MediaTypeHeaderValue(\"application/json\");\r\n                    \r\n                    var response = await client.PostAsync(url, content).ConfigureAwait(false);\r\n                    obj.HttpResponseCode = response.StatusCode;\r\n                    if (response.StatusCode == HttpStatusCode.OK)\r\n                    {\r\n                        obj.Response = await response.Content.ReadAsStringAsync();\r\n                        if (obj.Response != null && IsValidJson(obj.Response))\r\n                        {\r\n                            obj = JsonSerializer.Deserialize<GenerricApiResponsewithResult>(obj.Response);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n\r\n                        obj.IsError = true;\r\n                        obj.Response = response.StatusCode.ToString();\r\n                    }\r\n                    client.Dispose();\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                obj.IsError = true;\r\n                obj.Exception = ex;\r\n\r\n                obj.Response = $\"Error Processing a call to {friendlyName}. Please see logs\";\r\n                Logger.Fatal(obj.Response + \" \" + ex.Message, ex);\r\n            }\r\n            return obj;\r\n        }\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42738","RelatedDescription":"Closed issue \".net core 3.0 getting System.Threading.Tasks.TaskCanceledException: The operation was canceled.\" (#42738)"},{"Id":"529121223","IsPullRequest":false,"CreatedAt":"2019-11-27T05:17:34","Actor":"kamaruddin-desai","Number":"42737","RawContent":null,"Title":"Support for reading the windows events from the  Linux host","State":"open","Body":"I was happy that when I heard the .NET Core can be used to build apps onto the across the platforms.\r\nSpecifically the Linux one. I've code snippet which reads the windows event from the windows localhost or the remote windows host. For that purpose, I've created the below issue and the code snippet that I am using can be seen here[https://github.com/dotnet/corefx/issues/40925](https://github.com/dotnet/corefx/issues/40925).\r\n\r\nThi issue focus on the milestone to \r\n\r\n> **Support for reading the windows events from the  Linux host**\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42737","RelatedDescription":"Open issue \"Support for reading the windows events from the  Linux host\" (#42737)"},{"Id":"529052742","IsPullRequest":true,"CreatedAt":"2019-11-27T03:28:09","Actor":"Anipik","Number":"42735","RawContent":null,"Title":"disabling publishing of stable packages on 3.1","State":"closed","Body":"I missed to disable the packages build in branding due to which internal build was failing","Url":"https://github.com/dotnet/corefx/pull/42735","RelatedDescription":"Closed or merged PR \"disabling publishing of stable packages on 3.1\" (#42735)"},{"Id":"529082915","IsPullRequest":false,"CreatedAt":"2019-11-27T03:03:40","Actor":"Dogwei","Number":"42736","RawContent":null,"Title":"What is the difference between '_methodPtrAux' and '_methodPtr' in The private fields for 'System.Delegate'?","State":"closed","Body":"As title.\r\nI need this knowledge.\r\nPlease.","Url":"https://github.com/dotnet/corefx/issues/42736","RelatedDescription":"Closed issue \"What is the difference between '_methodPtrAux' and '_methodPtr' in The private fields for 'System.Delegate'?\" (#42736)"},{"Id":"529045950","IsPullRequest":false,"CreatedAt":"2019-11-27T00:32:52","Actor":"replaysMike","Number":"42734","RawContent":null,"Title":"PublishTrimmed=true issue - TypeInitializationException in System.Runtime.Serialization.Formatters","State":"open","Body":"When using PublishTrimmed=true for publishing single file applications in .net core, I get a runtime error when performing binary serialization/deserialization in System.Runtime.Serialization.Formatters library.\r\n\r\n```\r\n<PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <PublishTrimmed>true</PublishTrimmed>\r\n    <PublishReadyToRun>true</PublishReadyToRun>\r\n    <PublishReadyToRunShowWarnings>true</PublishReadyToRunShowWarnings>\r\n    <PublishSingleFile>true</PublishSingleFile>\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n    <RuntimeIdentifiers>win-x64;linux-x64</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n```\r\nThe error during runtime received is:\r\n\r\n```\r\nSystem.TypeInitializationException: The type initializer for 'System.Runtime.Serialization.Formatters.Binary.Converter' threw an exception.\r\n ---> System.IO.FileNotFoundException: Could not load file or assembly 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.\r\nFile name: 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\r\n   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, RuntimeAssembly assemblyContext, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, AssemblyLoadContext assemblyLoadContext)\r\n   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, StackCrawlMark& stackMark, AssemblyLoadContext assemblyLoadContext)\r\n   at System.Reflection.Assembly.Load(String assemblyString)\r\n   at System.Runtime.Serialization.Formatters.Binary.Converter..cctor()\r\n\r\n\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryParser.get_SystemAssemblyInfo()\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryParser.ReadObjectWithMapTyped(BinaryObjectWithMapTyped record)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryParser.ReadObjectWithMapTyped(BinaryHeaderEnum binaryHeaderEnum)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryParser.Run()\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize(BinaryParser serParser, Boolean fCheck)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream, Boolean check)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream)\r\n```\r\n\r\nI also tried adding the following to address this error:\r\n```\r\n<ItemGroup>\r\n    <TrimmerRootAssembly Include=\"System.Runtime.Serialization.Formatters.Binary.Converter\" />\r\n</ItemGroup>\r\n```\r\nbut that prevents it from publishing as it returns an error: `C:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ILLink.targets(87,5): error MSB6006: \"dotnet.exe\" exited with code -1073741819.`\r\n\r\nI can disable PublishTrimmed=true for now, but I would think there's a way to address this.\r\n\r\nThe application is a .Net Core 3 app, which references two multi-target libraries which are `netstandard2.0;net462`","Url":"https://github.com/dotnet/corefx/issues/42734","RelatedDescription":"Open issue \"PublishTrimmed=true issue - TypeInitializationException in System.Runtime.Serialization.Formatters\" (#42734)"},{"Id":"529044580","IsPullRequest":false,"CreatedAt":"2019-11-27T00:27:57","Actor":"danmosemsft","Number":"42733","RawContent":null,"Title":"⛔ Please do not open new PR's and issues in this repo ⛔","State":"open","Body":"We have moved! All new issues and PR's now should be opened in https://github.com/dotnet/runtime.\r\n\r\nIn a little bit, all existing PR's in this repo will be closed, and all existing issues will be migrated. Meantime, new ones should go over there.\r\n\r\nMore details here.\r\n\r\n(Pinning this so everyone sees it.)","Url":"https://github.com/dotnet/corefx/issues/42733","RelatedDescription":"Open issue \"⛔ Please do not open new PR's and issues in this repo ⛔\" (#42733)"},{"Id":"529035602","IsPullRequest":true,"CreatedAt":"2019-11-27T00:22:54","Actor":"martynasapanavicius","Number":"42732","RawContent":null,"Title":"update missing docs for System.IO.UnmanagedMemoryStream","State":"closed","Body":"Was looking into System.IO.UnmanagedMemoryStream.ReadByte() return documentation because apparently it has some encoded meaning to it. Updated that one + some other docs while looking around.","Url":"https://github.com/dotnet/corefx/pull/42732","RelatedDescription":"Closed or merged PR \"update missing docs for System.IO.UnmanagedMemoryStream\" (#42732)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"535476853","IsPullRequest":true,"CreatedAt":"2019-12-10T03:57:19","Actor":"cston","Number":"40271","RawContent":null,"Title":"Correct lowering of conversions between decimal and nint/nuint","State":"open","Body":"Include missing conversions to/from 64-bit values when lowering conversions between `decimal` and `nint` / `nuint`.\r\n\r\nConversions within expression lambdas will be handled later.","Url":"https://github.com/dotnet/roslyn/pull/40271","RelatedDescription":"Open PR \"Correct lowering of conversions between decimal and nint/nuint\" (#40271)"},{"Id":"535475122","IsPullRequest":false,"CreatedAt":"2019-12-10T03:50:27","Actor":"RussKie","Number":"40270","RawContent":null,"Title":"Indexer resolution for subclasses of `KeyedCollection<TKey, TItem>`","State":"open","Body":"**Version Used**: \r\n\r\n```\r\nMicrosoft Visual Studio Enterprise 2019 Int Preview\r\nVersion 16.5.0 Preview 2.0 [29601.14.master]\r\nVisualStudio.16.IntPreview/16.5.0-pre.2.0+29601.14.master\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\n\r\n\r\n```cs\r\nusing System;\r\nusing System.Collections.ObjectModel;\r\n\r\nnamespace SimpleWinForms\r\n{\r\n    static class Program\r\n    {\r\n        [STAThread]\r\n        static void Main()\r\n        {\r\n            var collection = new CustomCollection();\r\n            collection.Add(TaskDialogResult.OK);\r\n            collection.Add(TaskDialogResult.Cancel);\r\n\r\n            var button = collection[0];\r\n        }\r\n    }\r\n    public enum TaskDialogResult : int\r\n    {\r\n        None = 0,\r\n        OK = 1,\r\n        Cancel = 2,\r\n    }\r\n\r\n    public class Container\r\n    {\r\n        public Container(TaskDialogResult result)\r\n        {\r\n            Result = result;\r\n        }\r\n\r\n        public TaskDialogResult Result { get; }\r\n    }\r\n\r\n    public class CustomCollection : KeyedCollection<TaskDialogResult, Container>\r\n    {\r\n        public Container Add(TaskDialogResult result)\r\n        {\r\n            var button = new Container(result);\r\n            Add(button);\r\n\r\n            return button;\r\n        }\r\n\r\n        protected override TaskDialogResult GetKeyForItem(Container item) => item.Result;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n**Expected Behavior**:\r\n\r\n1. No `System.Collections.Generic.KeyNotFoundException` without the indexer overloads\r\n2. No inherited indexers shown once there is an overload in place\r\n\r\n**Actual Behavior**:\r\n\r\n1. The intellisense shows 2 overloads for the indexer:\r\n![overloads](https://user-images.githubusercontent.com/4403806/70492895-05691200-1b5a-11ea-984a-8dbf1ff79ced.gif)\r\nOne for `KeyedCollection<TKey, TItem>` and one `Collection<T>`.\r\n\r\n1. If the above code is executed it fails with `System.Collections.Generic.KeyNotFoundException`:\r\n```\r\nSystem.Collections.Generic.KeyNotFoundException\r\n  HResult=0x80131577\r\n  Message=The given key 'None' was not present in the dictionary.\r\n  Source=System.ObjectModel\r\n  StackTrace:\r\n   at System.Collections.ObjectModel.KeyedCollection`2.get_Item(TKey key)\r\n   at SimpleWinForms.Program.Main() in C:\\Development\\!Repro\\SimpleWinForms\\SimpleWinForms\\Program.cs:line 19\r\n```\r\nThe `0` is treated not as an index but as `(TaskDialogResult)0`. I guess it can be argued that it makes sense, given that `KeyedCollection<TKey, TItem>` defines its indexer as `TItem this[TKey key] { get; set; }`. However However `Collection<T>`, which `KeyedCollection<TKey, TItem>` inherits from, defines its indexer as `T this[int index] { get; set; }`. \r\nAnd (❗️) `Collection<T>.this[int index]` indexer is shown by the intellisense.\r\nFrom a consumer point of view this behaviour is unexpected.\r\n\r\n2. To overcome the `KeyNotFoundException` we can introduce a new indexer overload:\r\n```cs\r\n    public class CustomCollection : KeyedCollection<TaskDialogResult, Container>\r\n    {\r\n        public new Container this[int index]\r\n        {\r\n            get => base[index];\r\n            set => base[index] = value;\r\n        }\r\n\r\n\t\t// ... existing\r\n\t}\r\n```\r\n\r\nNow the call `var button = collection[0];` works as expected, but the intellisense shows 3 overloads!\r\n![overloads1](https://user-images.githubusercontent.com/4403806/70493320-5d544880-1b5b-11ea-93e0-3904d6fbd407.gif)\r\n\r\n\r\n----\r\n\r\nOriginally reported in https://github.com/dotnet/winforms/pull/1133#issuecomment-562930731\r\n","Url":"https://github.com/dotnet/roslyn/issues/40270","RelatedDescription":"Open issue \"Indexer resolution for subclasses of `KeyedCollection<TKey, TItem>`\" (#40270)"},{"Id":"535296807","IsPullRequest":true,"CreatedAt":"2019-12-10T03:46:20","Actor":"cston","Number":"40260","RawContent":null,"Title":"Merge master to features/NativeInt","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/40260","RelatedDescription":"Closed or merged PR \"Merge master to features/NativeInt\" (#40260)"},{"Id":"535465829","IsPullRequest":false,"CreatedAt":"2019-12-10T03:17:17","Actor":"yyjdelete","Number":"40269","RawContent":null,"Title":"InvalidProgramException: Common Language Runtime detected an invalid program. when Fixed size buffers is used in generic struct","State":"open","Body":"**Version Used**: \r\nVS2019 16.5.0 Preview 1.0, not tested but maybe also for old versions\r\n\r\n**Steps to Reproduce**:\r\nCompile and run the below code with `<AllowUnsafeBlocks>true</AllowUnsafeBlocks>`\r\n```cs\r\n#define GENERIC\r\n#define WITHDEC\r\n\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nnamespace ConsoleApp6\r\n{\r\n    class Program\r\n    {\r\n        public struct ZZZ\r\n#if GENERIC\r\n            <T> where T : unmanaged\r\n#endif\r\n        {\r\n#if WITHDEC\r\n            public decimal z1;\r\n#endif\r\n            public unsafe fixed ushort _blocks[2];\r\n        }\r\n        public static unsafe void M2<T>() where T : unmanaged\r\n        {\r\n#if GENERIC\r\n            ZZZ<T> zzz = default;\r\n#else\r\n            ZZZ zzz = default;\r\n#endif\r\n#if WITHDEC\r\n            zzz.z1 = default;\r\n#endif\r\n            zzz._blocks[0] = 1;\r\n            zzz._blocks[1] = 2;\r\n#if WITHDEC\r\n            Console.WriteLine(AsDec(ref zzz));\r\n            Console.WriteLine(AsU16(ref Unsafe.AddByteOffset(ref zzz, new IntPtr(sizeof(decimal)))));\r\n            Console.WriteLine(AsU16(ref Unsafe.AddByteOffset(ref zzz, new IntPtr(sizeof(decimal) + sizeof(ushort)))));\r\n#else\r\n            Console.WriteLine(AsU16(ref zzz));\r\n            Console.WriteLine(AsU16(ref Unsafe.AddByteOffset(ref zzz, new IntPtr(sizeof(ushort)))));\r\n#endif\r\n        }\r\n\r\n        static ref decimal AsDec<T1>(ref T1 t1) => ref Unsafe.As<T1, decimal>(ref t1);\r\n        static ref ushort AsU16<T1>(ref T1 t1) => ref Unsafe.As<T1, ushort>(ref t1);\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                M2<int>();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.Error.WriteLine(ex);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nIt should work and get 0, 1, 2 as it does for non-generic version, or get an compile error if runtime never support that.\r\n\r\n**Actual Behavior**:\r\nGet 0,0,0 in netcoreapp2.1, and `InvalidProgramException` in netcoreapp3.1, and NullReferenceException without `WITHDEC` defined \r\n","Url":"https://github.com/dotnet/roslyn/issues/40269","RelatedDescription":"Open issue \"InvalidProgramException: Common Language Runtime detected an invalid program. when Fixed size buffers is used in generic struct\" (#40269)"},{"Id":"535438610","IsPullRequest":true,"CreatedAt":"2019-12-10T01:40:10","Actor":"jaredpar","Number":"40268","RawContent":null,"Title":"Nullable progress: InternalUtilities and Diagnostics","State":"open","Body":"This change can be read commit by commit for easier reviewing. Each commit is limited to a single directory of files that changed. In the future I will try and divide up my pull requests better. Didn't realize it had grown to 80+ files.\r\n\r\nThis enables nullability for Microsoft.CodeAnalysis inside the Diagnostics and InternalUtilities directories. \r\n","Url":"https://github.com/dotnet/roslyn/pull/40268","RelatedDescription":"Open PR \"Nullable progress: InternalUtilities and Diagnostics\" (#40268)"},{"Id":"535415593","IsPullRequest":false,"CreatedAt":"2019-12-10T00:21:24","Actor":"CyrusNajmabadi","Number":"40267","RawContent":null,"Title":"Tests not running on latest VS","State":"open","Body":"When i try, they just crash with:\r\n\r\n```\r\nLog level is set to Informational (Default).\r\nTest data store opened in 63.006 sec.\r\nStreamJsonRpc.RemoteInvocationException: The following TestContainer was not found 'C:\\github\\roslyn\\artifacts\\bin\\Microsoft.CodeAnalysis.UnitTests\\Debug\\net472\\Microsoft.CodeAnalysis.UnitTests.dll'\r\n   at StreamJsonRpc.JsonRpc.<InvokeCoreAsync>d__96`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.TestWindow.Host.TestStoreHandler.<AddSourceBasedTestsAsync>d__23.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.TestWindow.Extensibility.ILoggerExtensions.<CallWithCatchAsync>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n[12/9/2019 4:18:36.190 PM] ---------- Discovery started ----------\r\n```\r\n\r\nNote: in the past i've been told i can fix this by deleting the .vs folder.  But this is *not* a real solution.  It's a workaround for the product either storing bogus data, or not being able to handle the state of the world and the cached data being out of sync.  Such resilience must be designed in, and users should not have to fixup busted features because they were written haphazardly.","Url":"https://github.com/dotnet/roslyn/issues/40267","RelatedDescription":"Open issue \"Tests not running on latest VS\" (#40267)"},{"Id":"535413387","IsPullRequest":false,"CreatedAt":"2019-12-10T00:14:25","Actor":"tmat","Number":"40266","RawContent":null,"Title":"Unexpected possible null reference warning on MaybeNullWhen out parameter","State":"open","Body":"**Version Used**: \r\n16.5.0 Preview 2.0 [29529.20.master]\r\n\r\n**Steps to Reproduce**:\r\n\r\n```C#\r\n#nullable enable\r\n\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nabstract class C<T>\r\n{\r\n    public abstract bool TryGetValue([MaybeNullWhen(false)]out T value);\r\n}\r\n\r\nclass D<T> : C<T>\r\n    where T : class\r\n{\r\n    private readonly C<T> _source;\r\n\r\n    public D(C<T> source)\r\n    {\r\n        _source = source;\r\n    }\r\n\r\n    public override bool TryGetValue([MaybeNullWhen(false)]out T value)\r\n    {\r\n        return _source.TryGetValue(out value); // warning on out value\r\n    }\r\n}\r\n\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nNo warnings.\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nD.cs(22,40,22,45): warning CS8601: Possible null reference assignment.\r\n```\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/40266","RelatedDescription":"Open issue \"Unexpected possible null reference warning on MaybeNullWhen out parameter\" (#40266)"},{"Id":"535409050","IsPullRequest":true,"CreatedAt":"2019-12-10T00:01:03","Actor":"allisonchou","Number":"40265","RawContent":null,"Title":"Fix for extract method does not respect .editorconfig settings","State":"open","Body":"Fixes #40188 and adds applicable tests.\r\n\r\nSpecifically, ```csharp_prefer_static_local_function```, ```csharp_style_expression_bodied_methods```, and ```csharp_style_expression_bodied_local_functions``` should all now be properly respected when extracting a method or local function.\r\n\r\nThere were also some leftover instances in the code where local function was referred to as local method, so I went ahead and changed those as well.","Url":"https://github.com/dotnet/roslyn/pull/40265","RelatedDescription":"Open PR \"Fix for extract method does not respect .editorconfig settings\" (#40265)"},{"Id":"535408050","IsPullRequest":false,"CreatedAt":"2019-12-09T23:57:56","Actor":"CyrusNajmabadi","Number":"40264","RawContent":null,"Title":"Hangs for long periods of time in latest preview","State":"open","Body":"Capturing dump.  UI eventually comes back.  But hangs come and go constantly.  Experience is quite poor.\r\n\r\nI'm on: \r\n\r\n![image](https://user-images.githubusercontent.com/4564579/70483205-a1ccdf00-1a9c-11ea-84a5-edd2fca62af7.png)\r\n\r\nProduct has very serious perf regressions, seemingly across the board.","Url":"https://github.com/dotnet/roslyn/issues/40264","RelatedDescription":"Open issue \"Hangs for long periods of time in latest preview\" (#40264)"},{"Id":"535395424","IsPullRequest":false,"CreatedAt":"2019-12-09T23:17:54","Actor":"kendrahavens","Number":"40263","RawContent":null,"Title":"Allow any built-in or 3rd party fixer in code cleanup profiles","State":"open","Body":"Currently fixers included in a code cleanup profile are added by the product team on a case-by-case basis. Only then can they be included by users. Since all fixers, (including 3rd party fixers) can be specified in EditorConfig it'd be natural to be able to include any of those in a code cleanup profile.\r\n\r\nInspired by [comment](https://github.com/dotnet/roslyn/issues/37129#issuecomment-559702988).\r\n\r\n> Also editorconfig could be useful for storing cleanup profiles for whole team so every dev will not have to construct same cleanup profile. Currently fixes which are not listed in cleanup list have to be used manually line by line, rule by rule which is time consuming process and could save a lot of time to every dev team.","Url":"https://github.com/dotnet/roslyn/issues/40263","RelatedDescription":"Open issue \"Allow any built-in or 3rd party fixer in code cleanup profiles\" (#40263)"},{"Id":"535386677","IsPullRequest":true,"CreatedAt":"2019-12-09T22:54:38","Actor":"dpoeschl","Number":"40262","RawContent":null,"Title":"Fix for lambda parameter type inference in completion","State":"open","Body":"Fixes #40216\r\n\r\nCompletion was incorrectly inferring lambda parameter types when the lambda was passed as a named argument in a different position than the corresponding parameter. We now use the name of the named argument as a first lookup to find the matching parameter, followed by a positional match.","Url":"https://github.com/dotnet/roslyn/pull/40262","RelatedDescription":"Open PR \"Fix for lambda parameter type inference in completion\" (#40262)"},{"Id":"535385097","IsPullRequest":true,"CreatedAt":"2019-12-09T22:50:38","Actor":"RikkiGibson","Number":"40261","RawContent":null,"Title":"Run nullable analysis unconditionally in debug compilers","State":"open","Body":"In triaging #40136 I wondered if we ran nullable analysis on all our tests. It seems that in DefiniteAssignment there is a `#if DEBUG` block that makes us always run `NullableWalker.Analyze` on a given method. `AnalyzeIfNeeded` was still conditional, though, and this resulted in different behavior than when we manually add `#nullable enable` to the top of the test.\r\n\r\n/cc @333fred. If you have any ideas about where other behavioral inconsistencies could arise (i.e. scenarios where nullable analysis only crashes if `#nullable enable` is added to the top of the file), please let me know.","Url":"https://github.com/dotnet/roslyn/pull/40261","RelatedDescription":"Open PR \"Run nullable analysis unconditionally in debug compilers\" (#40261)"},{"Id":"535092212","IsPullRequest":false,"CreatedAt":"2019-12-09T22:45:07","Actor":"scalablecory","Number":"40256","RawContent":null,"Title":"Enum implicit cast to string fails when element is named \"ToString\"","State":"closed","Body":"_From @agustins on Tuesday, November 19, 2019 10:05:16 PM_\r\n\r\nWhen you have an enum with an element named \"ToString\" compiler fails with\r\n\r\n`\"csc.exe\" exited with code -2146232797. ...Bin\\Roslyn\\Microsoft.CSharp.Core.targets\t59`\r\n\r\n# Environment\r\n * .NET Core 3.0 and SDK Version 3.0.100\r\n * Visual Studio Enterprise 2019 Version 16.3.9\r\n\r\n# Reproduce\r\n\r\n``` csharp\r\nusing System;\r\n\r\nnamespace ConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        public enum Foo\r\n        {\r\n            ToString\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(Foo.ToString + \"\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n_Copied from original issue: dotnet/core#3850_","Url":"https://github.com/dotnet/roslyn/issues/40256","RelatedDescription":"Closed issue \"Enum implicit cast to string fails when element is named \"ToString\"\" (#40256)"},{"Id":"535290013","IsPullRequest":false,"CreatedAt":"2019-12-09T20:39:30","Actor":"jnm2","Number":"40259","RawContent":null,"Title":"Invalid \"IDE0062 Local function can be made static\" when local function calls a local function that captures a struct parameter","State":"open","Body":"**Version Used**: 16.4.0\r\n\r\n```cs\r\nusing System;\r\n\r\nclass C\r\n{\r\n    struct S\r\n    {\r\n        int f;\r\n    }\r\n\r\n    void M(S p)\r\n    {\r\n        LocalFunction2();\r\n\r\n        void LocalFunction1() => Console.WriteLine(p);\r\n\r\n        // IDE0062 Local function can be made static\r\n        //   ↓\r\n        void LocalFunction2() => LocalFunction1();\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/40259","RelatedDescription":"Open issue \"Invalid \"IDE0062 Local function can be made static\" when local function calls a local function that captures a struct parameter\" (#40259)"},{"Id":"535157651","IsPullRequest":true,"CreatedAt":"2019-12-09T19:01:59","Actor":"dpoeschl","Number":"40258","RawContent":null,"Title":"Remove \"Usage: await x();\" help text in QuickInfo and SigHelp","State":"open","Body":"Fixes #39779","Url":"https://github.com/dotnet/roslyn/pull/40258","RelatedDescription":"Open PR \"Remove \"Usage: await x();\" help text in QuickInfo and SigHelp\" (#40258)"},{"Id":"535154082","IsPullRequest":true,"CreatedAt":"2019-12-09T18:59:16","Actor":"dibarbet","Number":"40257","RawContent":null,"Title":"Activate language client during workspace load.","State":"open","Body":"pending RPS validation + RPS exception for new DLLs being loaded","Url":"https://github.com/dotnet/roslyn/pull/40257","RelatedDescription":"Open PR \"Activate language client during workspace load.\" (#40257)"},{"Id":"534919053","IsPullRequest":true,"CreatedAt":"2019-12-09T15:13:40","Actor":"dotnet-maestro[bot]","Number":"40255","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191208.1\r\n- **Date Produced**: 12/8/2019 2:06 PM\r\n- **Commit**: 71ce4c736b882e6112b395a0e92313be5dcb4328\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19608.1\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/40255","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#40255)"},{"Id":"534885060","IsPullRequest":true,"CreatedAt":"2019-12-09T12:03:17","Actor":"dotnet-bot","Number":"40254","RawContent":null,"Title":"Merge master to features/static-lambdas","State":"open","Body":"\nThis is an automatically generated pull request from master into features/static-lambdas.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/static-lambdas\ngit reset --hard upstream/features/static-lambdas\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/static-lambdas --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40254","RelatedDescription":"Open PR \"Merge master to features/static-lambdas\" (#40254)"},{"Id":"534884992","IsPullRequest":true,"CreatedAt":"2019-12-09T12:03:10","Actor":"dotnet-bot","Number":"40253","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"open","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40253","RelatedDescription":"Open PR \"Merge master to features/local-function-attributes\" (#40253)"},{"Id":"534884936","IsPullRequest":true,"CreatedAt":"2019-12-09T12:03:02","Actor":"dotnet-bot","Number":"40252","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40252","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#40252)"},{"Id":"534752096","IsPullRequest":false,"CreatedAt":"2019-12-09T07:48:01","Actor":"chuckries","Number":"40251","RawContent":null,"Title":"error MSB6006: \"csc.exe\" exited with code -2146232797.","State":"open","Body":"Came across this crashing issue while working on Advent of Code 2019. I am using a few C# 8 features in this file, including switch expressions and ref returns. Stacktrace from https://sharplab.io is pasted below.\r\n\r\n**Version Used**: \r\n```\r\nC:\\Microsoft Visual Studio\\2019\\dogfood\\Enterprise>csc\r\nMicrosoft (R) Visual C# Compiler version 3.5.0-beta2-19606-01 (e8ab1541)\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n```\r\n**Steps to Reproduce**:\r\n\r\n1. Compile the following code\r\n```cs\r\nusing System;\r\nusing System.Buffers;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace AdventOfCode._2019\r\n{\r\n    class IntCode\r\n    {\r\n        enum Op : long\r\n        {\r\n            Add = 1,\r\n            Mul = 2,\r\n            In = 3,\r\n            Out = 4,\r\n            JumpTrue = 5,\r\n            JumpFalse = 6,\r\n            LessThan = 7,\r\n            Equals = 8,\r\n            Base = 9,\r\n            Halt = 99,\r\n        }\r\n\r\n        enum Mode : long\r\n        {\r\n            Pos = 0,\r\n            Imm = 1,\r\n            Relative = 2\r\n        }\r\n\r\n        public delegate Task<long> ReadInput();\r\n        public delegate void WriteOutput(long value);\r\n\r\n        public long PC { get; set; } = 0;\r\n\r\n        public long RelativeBase { get; set; } = 0;\r\n\r\n        public bool IsHalt { get; private set; } = false;\r\n\r\n        public long this[int index]\r\n        {\r\n            get => ReadMemory(index);\r\n            set => ReadMemory(index) = value;\r\n        }\r\n\r\n        public ReadInput Reader { get; set; }\r\n        public WriteOutput Writer { get; set; }\r\n\r\n        public IntCode(IEnumerable<int> memory)\r\n            : this(memory, null, null)\r\n        { \r\n        }\r\n\r\n        public IntCode(IEnumerable<int> program, ReadInput reader, WriteOutput writer)\r\n            : this(program.Select(i => (long)i), reader, writer)\r\n        {\r\n        }\r\n\r\n        public IntCode(IEnumerable<long> memory, ReadInput reader, WriteOutput writer)\r\n        {\r\n            _memory = memory.ToArray();\r\n            Reader = reader;\r\n            Writer = writer;\r\n        }\r\n\r\n        public async Task Step()\r\n        {\r\n            if (!IsHalt)\r\n            {\r\n                (Op op, Mode[] modes) = Decode();\r\n\r\n                if (op == Op.Halt)\r\n                    IsHalt = true;\r\n                else if (op == Op.In)\r\n                    ReadMemory(ReadPC()) = await Reader();\r\n                else if (op == Op.Out)\r\n                    Writer(ReadArg(modes[0]));\r\n                else if (op == Op.Base)\r\n                    RelativeBase += ReadArg(modes[0]);\r\n                else\r\n                {\r\n                    long val1 = ReadArg(modes[0]);\r\n                    long val2 = ReadArg(modes[1]);\r\n\r\n                    if (op == Op.JumpTrue || op == Op.JumpFalse)\r\n                    {\r\n                        if ((op == Op.JumpTrue && val1 != 0) || (op == Op.JumpFalse && val1 == 0))\r\n                            PC = val2;\r\n                    }\r\n                    else\r\n                    {\r\n                        ReadMemory(ReadPC()) = op switch\r\n                        {\r\n                            Op.Add => val1 + val2,\r\n                            Op.Mul => val1 * val2,\r\n                            Op.LessThan => val1 < val2 ? 1 : 0,\r\n                            Op.Equals => val1 == val2 ? 1 : 0,\r\n                            _ => throw new InvalidOperationException()\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public async Task Run()\r\n        {\r\n            while (!IsHalt)\r\n            {\r\n                await Step();\r\n            }\r\n        }\r\n\r\n        (Op, Mode[]) Decode()\r\n        {\r\n            long instr = ReadPC();\r\n            \r\n            Op op = (Op)(instr % 100);\r\n            instr /= 100;\r\n\r\n            Mode[] modes = new Mode[3];\r\n            modes[0] = (Mode)(instr % 10);\r\n            instr /= 10;\r\n            modes[1] = (Mode)(instr % 10);\r\n            instr /= 10;\r\n            modes[2] = (Mode)(instr % 10);\r\n\r\n            return (op, modes);\r\n        }\r\n\r\n        private long ReadArg(Mode mode) => mode switch\r\n        {\r\n            Mode.Imm => ReadPC(),\r\n            Mode.Pos => ReadMemory(ReadPC()),\r\n            Mode.Relative => ReadMemory(ReadPC() + RelativeBase),\r\n            _ => throw new InvalidOperationException()\r\n        };\r\n\r\n        private long ReadPC()\r\n        {\r\n            return ReadMemory(PC++);\r\n        }\r\n\r\n        private ref long ReadMemory(long address)\r\n        {\r\n            if (address >= _memory.Length)\r\n            {\r\n                long[] newMemory = new long[_memory.Length * 2];\r\n                for (int i = 0; i < _memory.Length; i++)\r\n                    newMemory[i] = _memory[i];\r\n\r\n                _memory = newMemory;\r\n            }\r\n            return ref _memory[address];\r\n        }\r\n\r\n        private long[] _memory;\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\ncsc.exe does not crash\r\n\r\n**Actual Behavior**:\r\ncsc.exe crashes\r\n\r\nhttps://sharplab.io/ show's an interesting stacktrace for this issue:\r\n```\r\nSystem.InvalidCastException: Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.SwitchExpressionSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax'.\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.HoistRefInitialization(SynthesizedLocal local, BoundAssignmentOperator node)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.VisitAssignmentOperator(BoundAssignmentOperator node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.VisitExpressionWithoutStackGuard(BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32& recursionDepth, BoundExpression node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitExpressionStatement(BoundExpressionStatement node)\r\n...\r\n```","Url":"https://github.com/dotnet/roslyn/issues/40251","RelatedDescription":"Open issue \"error MSB6006: \"csc.exe\" exited with code -2146232797.\" (#40251)"},{"Id":"534707960","IsPullRequest":false,"CreatedAt":"2019-12-09T05:54:48","Actor":"TheDestinyGroup","Number":"40250","RawContent":null,"Title":"Issue with upgrading to Microsoft.Net.Compilers to 3.4.0","State":"open","Body":"Hi,\r\n\r\nI'm experiencing issues updating a ASP.Net MVC projects with Microsoft.Net.Compilers 3.3.1 to either Microsoft.Net.Compilers or Microsoft.Net.Compilers.Toolset 3.4.0.\r\n\r\nI'm using VS 2017 15.9.17 for my ASP.Net MVC and .Net Core 2.x projects.\r\n\r\nI also have VS 2019 16.4.0 installed on the same PC which I use for some newer .Net Core 3.x projects.\r\n\r\nWhen attempting to update Microsoft.Net.Compilers 3.4.0 via the NuGet Package Manager the install would constantly fail.\r\n\r\nI then removed Microsoft.Net.Compilers 3.3.1 from the project.\r\n\r\nWhen attempting to install either Microsoft.Net.Compilers or Microsoft.Net.Compilers.Toolset 3.4.0 via the NuGet Package Manager or via the NuGet Package Manager Console the install would constantly fail.\r\n\r\nI also tried Microsoft.Net.Compilers.Toolset 3.4.0 in another of my ASP.Net MVC projects with the same result.\r\n\r\nExample output from the NuGet Package Manager is:-\r\n```\r\nAttempting to gather dependency information for package 'Microsoft.Net.Compilers.Toolset.3.4.0' with respect to project 'DestinyWebcast', targeting '.NETFramework,Version=v4.7.2'\r\nGathering dependency information took 725.89 ms\r\nAttempting to resolve dependencies for package 'Microsoft.Net.Compilers.Toolset.3.4.0' with DependencyBehavior 'Lowest'\r\nResolving dependency information took 0 ms\r\nResolving actions to install package 'Microsoft.Net.Compilers.Toolset.3.4.0'\r\nResolved actions to install package 'Microsoft.Net.Compilers.Toolset.3.4.0'\r\nRetrieving package 'Microsoft.Net.Compilers.Toolset 3.4.0' from 'nuget.org'.\r\nAdding package 'Microsoft.Net.Compilers.Toolset.3.4.0' to folder 'D:\\Data\\Documents\\Visual Studio 2017\\Projects\\DestinyWebcast\\packages'\r\nAdded package 'Microsoft.Net.Compilers.Toolset.3.4.0' to folder 'D:\\Data\\Documents\\Visual Studio 2017\\Projects\\DestinyWebcast\\packages'\r\nInstall failed. Rolling back...\r\nPackage 'Microsoft.Net.Compilers.Toolset.3.4.0' does not exist in project 'DestinyWebcast'\r\nRemoving package 'Microsoft.Net.Compilers.Toolset.3.4.0' from folder 'D:\\Data\\Documents\\Visual Studio 2017\\Projects\\DestinyWebcast\\packages'\r\nRemoved package 'Microsoft.Net.Compilers.Toolset.3.4.0' from folder 'D:\\Data\\Documents\\Visual Studio 2017\\Projects\\DestinyWebcast\\packages'\r\nExecuting nuget actions took 3.04 sec\r\n```\r\nExample output from the NuGet Package Manager Console is:-\r\n```\r\nAttempting to gather dependency information for package 'Microsoft.Net.Compilers.Toolset.3.4.0' with respect to project 'DestinyWebcast', targeting '.NETFramework,Version=v4.7.2'\r\nGathering dependency information took 35.99 ms\r\nAttempting to resolve dependencies for package 'Microsoft.Net.Compilers.Toolset.3.4.0' with DependencyBehavior 'Lowest'\r\nResolving dependency information took 0 ms\r\nResolving actions to install package 'Microsoft.Net.Compilers.Toolset.3.4.0'\r\nResolved actions to install package 'Microsoft.Net.Compilers.Toolset.3.4.0'\r\nRetrieving package 'Microsoft.Net.Compilers.Toolset 3.4.0' from 'nuget.org'.\r\nAdding package 'Microsoft.Net.Compilers.Toolset.3.4.0' to folder 'D:\\Data\\Documents\\Visual Studio 2017\\Projects\\DestinyWebcast\\packages'\r\nAdded package 'Microsoft.Net.Compilers.Toolset.3.4.0' to folder 'D:\\Data\\Documents\\Visual Studio 2017\\Projects\\DestinyWebcast\\packages'\r\nInstall failed. Rolling back...\r\nPackage 'Microsoft.Net.Compilers.Toolset.3.4.0' does not exist in project 'DestinyWebcast'\r\nRemoving package 'Microsoft.Net.Compilers.Toolset.3.4.0' from folder 'D:\\Data\\Documents\\Visual Studio 2017\\Projects\\DestinyWebcast\\packages'\r\nRemoved package 'Microsoft.Net.Compilers.Toolset.3.4.0' from folder 'D:\\Data\\Documents\\Visual Studio 2017\\Projects\\DestinyWebcast\\packages'\r\nExecuting nuget actions took 2.67 sec\r\n```\r\nI was able to successfully re-add Microsoft.Net.Compilers 3.3.1 to the project.\r\n\r\nI'm not sure what I'm missing. Is the package no longer compatible with VS 2017, is there an issue with installation of the package when the latest version of VS 2019 is already installed on the PC?\r\n\r\nIs the issue related to the build issues that the .Net Core team had with release of .Net Core 3.1 and the VS 2019 16.4 update whereby the MSI installers included a different version of the .Net Core 3.1 runtime then the expected version as documented at https://github.com/dotnet/core/issues/3950 and  https://github.com/dotnet/runtime/issues/492\r\n\r\nLes\r\n","Url":"https://github.com/dotnet/roslyn/issues/40250","RelatedDescription":"Open issue \"Issue with upgrading to Microsoft.Net.Compilers to 3.4.0\" (#40250)"},{"Id":"534626439","IsPullRequest":true,"CreatedAt":"2019-12-09T05:29:12","Actor":"dotnet-bot","Number":"40247","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40247","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#40247)"},{"Id":"534609500","IsPullRequest":true,"CreatedAt":"2019-12-09T05:25:36","Actor":"Youssef1313","Number":"40246","RawContent":null,"Title":"Remove unused variable","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/40246","RelatedDescription":"Closed or merged PR \"Remove unused variable\" (#40246)"},{"Id":"534626471","IsPullRequest":true,"CreatedAt":"2019-12-09T01:46:59","Actor":"dotnet-bot","Number":"40249","RawContent":null,"Title":"Merge master to features/static-lambdas","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/static-lambdas.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/static-lambdas\ngit reset --hard upstream/features/static-lambdas\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/static-lambdas --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40249","RelatedDescription":"Closed or merged PR \"Merge master to features/static-lambdas\" (#40249)"},{"Id":"534626452","IsPullRequest":true,"CreatedAt":"2019-12-09T01:46:59","Actor":"dotnet-bot","Number":"40248","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40248","RelatedDescription":"Closed or merged PR \"Merge master to features/local-function-attributes\" (#40248)"},{"Id":"534608949","IsPullRequest":true,"CreatedAt":"2019-12-08T21:57:20","Actor":"Youssef1313","Number":"40245","RawContent":null,"Title":"typo: explictNodeMap -> explicitNodeMap","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/40245","RelatedDescription":"Open PR \"typo: explictNodeMap -> explicitNodeMap\" (#40245)"},{"Id":"534560576","IsPullRequest":false,"CreatedAt":"2019-12-08T15:50:14","Actor":"NextTurn","Number":"40244","RawContent":null,"Title":"Convert to conditional expression refactoring introduces incorrect cast to non-nullable type","State":"open","Body":"**Version Used**: Visual Studio 2019 version 16.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n#nullable enable\r\n\r\nusing System;\r\n\r\nclass Class\r\n{\r\n    private static T? GetValueOrDefault<T>() where T : unmanaged\r\n    {\r\n        return null;\r\n    }\r\n\r\n    public static void Method()\r\n    {\r\n        IConvertible? nullableInterface;\r\n\r\n        if (Environment.Is64BitProcess)\r\n        {\r\n            nullableInterface = GetValueOrDefault<long>();\r\n        }\r\n        else\r\n        {\r\n            nullableInterface = GetValueOrDefault<int>();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n```cs\r\n    public static void Method()\r\n    {\r\n        IConvertible? nullableInterface = Environment.Is64BitProcess ? GetValueOrDefault<long>() : (IConvertible?)GetValueOrDefault<int>();\r\n    }\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```cs\r\n    public static void Method()\r\n    {\r\n        IConvertible? nullableInterface = Environment.Is64BitProcess ? GetValueOrDefault<long>() : (IConvertible)GetValueOrDefault<int>();\r\n    }\r\n```","Url":"https://github.com/dotnet/roslyn/issues/40244","RelatedDescription":"Open issue \"Convert to conditional expression refactoring introduces incorrect cast to non-nullable type\" (#40244)"},{"Id":"534539345","IsPullRequest":true,"CreatedAt":"2019-12-08T14:38:13","Actor":"dotnet-maestro[bot]","Number":"40243","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.1\r\n- **Date Produced**: 12/7/2019 1:54 PM\r\n- **Commit**: 97cce7cb41de117e849d42a2eb7c99065dd1602f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19607.1\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/40243","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#40243)"},{"Id":"534519032","IsPullRequest":false,"CreatedAt":"2019-12-08T10:06:21","Actor":"JohanLarsson","Number":"40242","RawContent":null,"Title":"CSharpQualifyMemberAccessCodeFixProvider encountered an error","State":"open","Body":"Repro code:\r\n\r\n```cs\r\nprotected override void OnStartup(StartupEventArgs? e)\r\n{\r\n               ↓ ctrl + . here \r\n    if (e is { Args: { Length: 1 } args })\r\n    {\r\n        var window = args[0];\r\n        this.StartupUri = new Uri($\"Windows/{window}.xaml\", UriKind.Relative);\r\n    }\r\n\r\n    base.OnStartup(e);\r\n}\r\n```\r\n\r\n\r\n\r\n```\r\nSystem.InvalidCastException : Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax'.\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNameColon(NameColonSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitSubpattern(SubpatternSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitPropertyPatternClause(PropertyPatternClauseSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.PropertyPatternClauseSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitRecursivePattern(RecursivePatternSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.RecursivePatternSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIsPatternExpression(IsPatternExpressionSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIfStatement(IfStatementSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(BlockSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMethodDeclaration(MethodDeclarationSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitClassDeclaration(ClassDeclarationSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCompilationUnit(CompilationUnitSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replace[TNode](SyntaxNode root,IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceCore[TNode](IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)\r\n   at Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode[TRoot](TRoot root,SyntaxNode oldNode,SyntaxNode newNode)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.ReplaceNode(SyntaxNode root,SyntaxNode declaration,SyntaxNode newDeclaration)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxGenerator generator)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()\r\n   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.<>c__DisplayClass11_0.<GetPreviewAsync>b__0(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/40242","RelatedDescription":"Open issue \"CSharpQualifyMemberAccessCodeFixProvider encountered an error\" (#40242)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"534488631","IsPullRequest":false,"CreatedAt":"2019-12-08T04:00:31","Actor":"s-m-k","Number":"7907","RawContent":null,"Title":"[Linux] crash upon generating debug symbols","State":"open","Body":"**Software version:**\r\nILCompiler 1.0.0-alpha-28407-01\r\n.NET Core 3.1\r\nUbuntu 18.04 x64 (native/VirtualBox)\r\n\r\n**Symptoms:**\r\nSegmentation fault upon generating debug symbols.\r\n```\r\nCompiling [S.P.TypeLoader]Internal.Runtime.TypeLoader.ConstrainedCallSupport+GenericConstrainedCallDesc+<>c..ctor()...\r\nCompiling [S.P.TypeLoader]Internal.Runtime.TypeLoader.ConstrainedCallSupport+NonGenericConstrainedCallDesc+<>c..ctor()...\r\nCompiling [S.P.TypeLoader]Internal.Runtime.TypeLoader.ConstrainedCallSupport.GetThunkThatDereferencesThisPointerAndTailCallsTarget(native int)...\r\nSegmentation fault (core dumped)\r\n```\r\n\r\ngdb output:\r\n```\r\nThread 1 \"ilc\" received signal SIGSEGV, Segmentation fault.\r\nDwarfMemberFunctionIdTypeInfo::DumpTypes (this=<optimized out>, TypeBuilder=<optimized out>, Streamer=<optimized out>, TypeSection=<optimized out>, StrSection=<optimized out>)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:559\r\n559     in /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp\r\n(gdb) where\r\n#0  DwarfMemberFunctionIdTypeInfo::DumpTypes (this=<optimized out>, TypeBuilder=<optimized out>, Streamer=<optimized out>, TypeSection=<optimized out>, StrSection=<optimized out>)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:559\r\n#1  0x00007fff5e289a76 in DwarfClassTypeInfo::DumpTypes (this=<optimized out>, TypeBuilder=<optimized out>, Streamer=<optimized out>, TypeSection=<optimized out>, StrSection=<optimized out>)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:375\r\n#2  0x00007fff5e288c2b in DwarfInfo::Dump (this=0x83d2870, TypeBuilder=<optimized out>, Streamer=0x1a0dd30, TypeSection=0x18ffb18, StrSection=0x1901ee0)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:34\r\n#3  0x00007fff5e289ac5 in DwarfClassTypeInfo::Dump (this=0x83d2870, TypeBuilder=0x1a0cb00, Streamer=0x1a0dd30, TypeSection=0x18ffb18, StrSection=0x1901ee0)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:384\r\n#4  0x00007fff5e28a287 in UserDefinedDwarfTypesBuilder::EmitTypeInformation (this=<optimized out>, TypeSection=<optimized out>, StrSection=<optimized out>)\r\n    at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfTypeBuilder.cpp:641\r\n#5  0x00007fff5e28fc38 in DwarfGen::Finish (this=0x1a2bf10) at /root/corert_3112221/bin/obj/Native/Linux.x64.Release/ObjWriter/llvmCap/LLVM-prefix/src/LLVM/tools/ObjWriter/debugInfo/dwarf/dwarfGen.cpp:1038\r\n```\r\n\r\n**Expected behavior:**\r\nThe compiler succeeds and the executable with proper debug symbols is generated.\r\n\r\n**Workaround:**\r\nSpecify `<DebugSymbols>false</DebugSymbols>` and `<DebugType>none</DebugType>` in your project configuration file to avoid executing the problematic code path, e.g.:\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <DebugSymbols>false</DebugSymbols>\r\n    <DebugType>none</DebugType>\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n  </PropertyGroup>\r\n```","Url":"https://github.com/dotnet/corert/issues/7907","RelatedDescription":"Open issue \"[Linux] crash upon generating debug symbols\" (#7907)"},{"Id":"534342316","IsPullRequest":true,"CreatedAt":"2019-12-07T02:38:20","Actor":"davidwrighton","Number":"7906","RawContent":null,"Title":"Fix LockFreeReaderHashtable","State":"open","Body":"- Communication of the presence of an expanding hashtable was very close to not safe\r\n  - Changed to aggressively use Interlocked operations instead\r\n- If there were 3 threads, 1 which was expanding (thread A), 1 which failed an insert and was waiting on an expand(thread B), and a third which did a lookup for the item in process of insert on thread B, the table would find the item in process of insertion\r\n  - Fixed by moving to a scheme where insertion didn't actually write in the value until it was confirmed that that spot was the right place to insert, and the value would be preserved into an expansion\r\n  - In order to acquire a sentinel for scenarios without requiring the explicit definition of one, the first item inserted is used as the sentinel. It simply exists outside of the hashtable in a side variable","Url":"https://github.com/dotnet/corert/pull/7906","RelatedDescription":"Open PR \"Fix LockFreeReaderHashtable\" (#7906)"},{"Id":"534281516","IsPullRequest":true,"CreatedAt":"2019-12-07T00:41:43","Actor":"LTruijens","Number":"7905","RawContent":null,"Title":"Option added to ignore specific errors","State":"closed","Body":"- Option added to ignore specific errors\r\n\r\nThis option can be useful when verifying large sets of dlls which contain lots of the same errors (like InitOnly https://github.com/dotnet/roslyn/issues/22485).\r\n\r\n- App returns error code when verification errors exist\r\n\r\nUseful in automation scenarios\r\n\r\n- Print error code\r\n\r\nUseful to know the error code if you want to ignore it.\r\n\r\n- Continue verification when printing method fails\r\n\r\nOtherwise it will stop any further output of the app\r\n","Url":"https://github.com/dotnet/corert/pull/7905","RelatedDescription":"Closed or merged PR \"Option added to ignore specific errors\" (#7905)"},{"Id":"533755092","IsPullRequest":true,"CreatedAt":"2019-12-06T20:14:57","Actor":"jkotas","Number":"7903","RawContent":null,"Title":"Delete some unused code, add TODO","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7903","RelatedDescription":"Closed or merged PR \"Delete some unused code, add TODO\" (#7903)"},{"Id":"534163948","IsPullRequest":false,"CreatedAt":"2019-12-06T17:28:59","Actor":"SasukeK93","Number":"7904","RawContent":null,"Title":"Not Working for WPF","State":"open","Body":"CoreRT Native Build for C# WPF Aplication .NetCore 3.0 isn't propertly working:\r\n\r\ndotnet new wpf\r\ndotnet new nuget\r\n// Add the nuget References to nuget.config\r\ndotnet add package Microsoft.DotNet.ILCompiler -v 1.0.0-alpha-* \r\ndotnet publish -r win-x64 -c release\r\n\r\nBuild Output:\r\n\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 5.89 min for C:\\Users\\SasukeK93\\wpf\\wpf.csproj.\r\n  wpf -> C:\\Users\\SasukeK93\\wpf\\bin\\release\\netcoreapp3.0\\win-x64\\wpf.dll\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: System.Windows.Threading.DispatcherObject, WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 [C:\\Users\\SasukeK93\\wpf\\wpf.csproj]\r\n  Internal.TypeSystem.TypeSystemException+TypeLoadException: [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: System.Windows.Threading.DispatcherObject, WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\r\n     at Internal.TypeSystem.ThrowHelper.ThrowTypeLoadException(ExceptionStringID id, String typeName, String assemblyName)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(String nameSpace, String name, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaType.InitializeBaseType()\r\n     at Internal.TypeSystem.TypeDesc.get_IsDelegate()\r\n     at ILCompiler.CompilerTypeSystemContext.GetAllMethods(TypeDesc type)\r\n     at Internal.TypeSystem.MetadataVirtualMethodAlgorithm.FindMatchingVirtualMethodOnTypeByNameAndSig(MethodDesc targetMethod, DefType currentType, Boolean reverseMethodSearch, Func`3 nameSigMatchMethodIsValidCandidate)\r\n     at Internal.TypeSystem.MetadataVirtualMethodAlgorithm.FindBaseUnificationGroup(MetadataType currentType, UnificationGroup unificationGroup)\r\n     at Internal.TypeSystem.MetadataVirtualMethodAlgorithm.FindBaseUnificationGroup(MetadataType currentType, UnificationGroup unificationGroup)\r\n     at Internal.TypeSystem.MetadataVirtualMethodAlgorithm.FindVirtualFunctionTargetMethodOnObjectType(MethodDesc targetMethod, MetadataType objectType)\r\n     at Internal.TypeSystem.Ecma.EcmaType.GetFinalizer()\r\n     at Internal.TypeSystem.Ecma.EcmaType.ComputeTypeFlags(TypeFlags mask)\r\n     at Internal.TypeSystem.TypeDesc.InitializeTypeFlags(TypeFlags mask)\r\n     at Internal.TypeSystem.TypeDesc.get_HasFinalizer()\r\n     at Internal.TypeSystem.MethodDesc.get_IsFinalizer()\r\n     at ILCompiler.MetadataManager.IsMethodSupportedInReflectionInvoke(MethodDesc method)\r\n     at ILCompiler.MetadataManager.GetDependenciesDueToReflectability(DependencyList& dependencies, NodeFactory factory, MethodDesc method)\r\n     at ILCompiler.DependencyAnalysis.CodeBasedDependencyAlgorithm.AddDependenciesDueToMethodCodePresence(DependencyList& dependencies, NodeFactory factory, MethodDesc method)\r\n     at ILCompiler.DependencyAnalysis.ScannedMethodNode.InitializeDependencies(NodeFactory factory, IEnumerable`1 dependencies)\r\n     at ILCompiler.ILScanner.CompileSingleMethod(ScannedMethodNode methodCodeNodeNeedingCode)\r\n     at ILCompiler.ILScanner.CompileSingleThreaded(List`1 methodsToCompile)\r\n     at ILCompiler.ILScanner.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.ILScanner.ILCompiler.IILScanner.Scan()\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\SasukeK93\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-28406-02\\build\\Microsoft.NETCore.Native.targets(226,5): error MSB3073: The command \"\"C:\\Users\\SasukeK93\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-28406-02\\tools\\ilc\" @\"obj\\release\\netcoreapp3.0\\win-x64\\native\\wpf.ilc.rsp\"\" exited with code 1. [C:\\Users\\SasukeK93\\wpf\\wpf.csproj]","Url":"https://github.com/dotnet/corert/issues/7904","RelatedDescription":"Open issue \"Not Working for WPF\" (#7904)"},{"Id":"531504052","IsPullRequest":true,"CreatedAt":"2019-12-03T16:35:41","Actor":"am11","Number":"7899","RawContent":null,"Title":"Fix x86 Native build on Unix","State":"closed","Body":"x86 Native build (initially enabled in #4637 and #4598) is broken with the inclusion of (LLVM) libunwind, object writer and `src/Native/Runtime/i386/MiscStubs.S`.\r\n\r\nThis patch attempts to fill the gaps to make the Native components compile (including object writer):  `./build.sh objwriter skiptests x86` (tested on Debian Stretch i386, cmake 3.13.2)\r\n\r\nManaged components are still failing due to the lack of .NET SDK on Linux x86.\r\n\r\n```\r\nInstalling dotnet cli...\r\ntar: This does not look like a tar archive\r\ntar: Exiting with failure status due to previous errors\r\nERROR: Could not download dotnet cli.\r\nPlease check the detailed log that follows.\r\nRunning: /home/admin/projects/corert/init-tools.sh\r\nInstalling 'https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.504/dotnet-sdk-2.1.504-linux-x86.tar.gz' to '/home/admin/projects/corert/Tools/dotnetcli/dotnet.tar'\r\nUsing CLI tools version:\r\nls: cannot access '/home/admin/projects/corert/buildscripts/../Tools/dotnetcli/sdk': No such file or directory\r\n./buildscripts/build-managed.sh: line 33: /home/admin/projects/corert/buildscripts/../Tools/dotnetcli/dotnet: No such file or directory\r\n```\r\n\r\nContributes to: #4589","Url":"https://github.com/dotnet/corert/pull/7899","RelatedDescription":"Closed or merged PR \"Fix x86 Native build on Unix\" (#7899)"},{"Id":"531921880","IsPullRequest":true,"CreatedAt":"2019-12-03T16:24:51","Actor":"MichalStrehovsky","Number":"7902","RawContent":null,"Title":"Add one more CoreRT debugging trick","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7902","RelatedDescription":"Closed or merged PR \"Add one more CoreRT debugging trick\" (#7902)"},{"Id":"531695482","IsPullRequest":true,"CreatedAt":"2019-12-03T04:51:05","Actor":"jkotas","Number":"7901","RawContent":null,"Title":"Fix marshaling for structs with pointers","State":"closed","Body":"Fixes #7900","Url":"https://github.com/dotnet/corert/pull/7901","RelatedDescription":"Closed or merged PR \"Fix marshaling for structs with pointers\" (#7901)"},{"Id":"531675548","IsPullRequest":false,"CreatedAt":"2019-12-03T04:51:05","Actor":"Spongman","Number":"7900","RawContent":null,"Title":"regression: System.Net.Dns.GetHostAddresses crashes","State":"closed","Body":"1.0.0-alpha-28402-01\r\n\r\nI'm seeing a failure where `HttpClient` is crashing trying to make a connection, i have narrowed it down to DNS resolution.\r\n\r\nhere's a zip containing a repro project:\r\n[wslbug.zip](https://github.com/dotnet/corert/files/3914244/wslbug.zip)\r\n\r\n````c#\r\nclass Foo\r\n{\r\n\tstatic void Main(string[] args)\r\n\t{\r\n\t\tSystem.Net.Dns.GetHostAddresses(\"microsoft.com\");\r\n\t}\r\n}\r\n````\r\n\r\non windows:\r\n````\r\nc:\\play\\wslbug\\>dotnet publish -r win-x64 -c Debug && bin\\Debug\\netcoreapp3.0\\win-x64\\publish\\wslbug.exe\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 26.93 ms for C:\\play\\wslbug\\wslbug.csproj.\r\n  wslbug -> C:\\play\\wslbug\\bin\\Debug\\netcoreapp3.0\\win-x64\\wslbug.dll\r\n  Generating native code\r\nEXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [C:\\play\\wslbug\\wslbug.csproj]\r\n  wslbug -> C:\\play\\wslbug\\bin\\Debug\\netcoreapp3.0\\win-x64\\publish\\\r\nUnhandled Exception: System.Exception: Method '[System.Net.NameResolution]Interop+Winsock.GetAddrInfoW(string,string,AddressInfo*,AddressInfo**)' requires marshalling that is not yet supported by this compiler.\r\n   at Interop.Winsock.GetAddrInfoW(String, String, Interop.Winsock.AddressInfo*, Interop.Winsock.AddressInfo**) + 0x49\r\n   at System.Net.NameResolutionPal.TryGetAddrInfo(String, Boolean, String&, String[]&, IPAddress[]&, Int32&) + 0xd4\r\n   at System.Net.Dns.GetHostEntryOrAddressesCore(String, Boolean) + 0x61\r\n   at System.Net.Dns.GetHostAddressesCore(String) + 0x22\r\n   at System.Net.Dns.GetHostAddresses(String) + 0x23f\r\n   at Foo.Main(String[]) + 0x21\r\n   at wslbug!<BaseAddress>+0x364d47\r\n   at wslbug!<BaseAddress>+0x364dcd\r\n````\r\n\r\non Ubuntu 18.04:\r\n````\r\n/mnt/c/play/wslbug$ dotnet publish -r linux-x64 -c Debug && bin/Debug/netcoreapp3.0/linux-x64/publish/wslbug\r\nMicrosoft (R) Build Engine version 16.3.2+e481bbf88 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 157.92 ms for /mnt/c/play/wslbug/wslbug.csproj.\r\n  wslbug -> /mnt/c/play/wslbug/bin/Debug/netcoreapp3.0/linux-x64/wslbug.dll\r\n  /usr/lib/llvm-7/bin/clang\r\n  Generating native code\r\nEXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [/mnt/c/play/wslbug/wslbug.csproj]\r\n  wslbug -> /mnt/c/play/wslbug/bin/Debug/netcoreapp3.0/linux-x64/publish/\r\nUnhandled Exception: System.Exception: Method '[System.Net.NameResolution]Interop+Sys.GetHostEntryForName(string,HostEntry*)' requires marshalling that is not yet supported by this compiler.\r\n   at Interop.Sys.GetHostEntryForName(String, Interop.Sys.HostEntry*) + 0x41\r\n   at System.Net.NameResolutionPal.TryGetAddrInfo(String, Boolean, String&, String[]&, IPAddress[]&, Int32&) + 0x87\r\n   at System.Net.Dns.GetHostEntryOrAddressesCore(String, Boolean) + 0x58\r\n   at System.Net.Dns.GetHostAddressesCore(String) + 0x22\r\n   at System.Net.Dns.GetHostAddresses(String) + 0x23e\r\n   at Foo.Main(String[]) + 0x21\r\n   at wslbug!<BaseAddress>+0x33c8d7\r\n   at wslbug!<BaseAddress>+0x33c95d\r\nAborted (core dumped)\r\n````\r\n\r\nof course, if i run `.exe.`/`.dll` version with the core runtime, it work fine.","Url":"https://github.com/dotnet/corert/issues/7900","RelatedDescription":"Closed issue \"regression: System.Net.Dns.GetHostAddresses crashes\" (#7900)"},{"Id":"530757774","IsPullRequest":true,"CreatedAt":"2019-12-01T16:33:46","Actor":"ryuukk","Number":"7898","RawContent":null,"Title":"Update how-to-build-and-run-ilcompiler-in-visual-studio.md","State":"open","Body":"Add mention to use the x64 Native Tools Command Prompt for VS 2019","Url":"https://github.com/dotnet/corert/pull/7898","RelatedDescription":"Open PR \"Update how-to-build-and-run-ilcompiler-in-visual-studio.md\" (#7898)"},{"Id":"530658843","IsPullRequest":true,"CreatedAt":"2019-12-01T02:30:48","Actor":"yowl","Number":"7897","RawContent":null,"Title":"WIP: Wasm enable shared generics and generic virtual methods","State":"open","Body":"Mostly taken from the cpp backend, this enables shared generics and generic virtual methods for the Wasm backend.  Have tried to keep the logic as clean as I could, but maybe there's some obvious enhancements/reductions in code that I missed.  \r\n\r\nSize of HelloWasm LLVM bc before, and after, .  <- To be completed.  HelloWasm before this change didn't have much in the way of generics so this mostly reflects the framework and runtime generics.\r\n\r\nEnables the Simple/Generics tests for wasm which have the almost same coverage as cpp (Wasm includes an additional test) in terms of what is #if'ed out.\r\n\r\nWIP as depends on #7893  and #7891 \r\n\r\nFixes https://github.com/dotnet/corert/issues/7248","Url":"https://github.com/dotnet/corert/pull/7897","RelatedDescription":"Open PR \"WIP: Wasm enable shared generics and generic virtual methods\" (#7897)"},{"Id":"530647761","IsPullRequest":true,"CreatedAt":"2019-12-01T01:29:32","Actor":"jkotas","Number":"7896","RawContent":null,"Title":"Update dependencies","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7896","RelatedDescription":"Closed or merged PR \"Update dependencies\" (#7896)"},{"Id":"530250427","IsPullRequest":false,"CreatedAt":"2019-11-29T09:46:57","Actor":"DardoTheMaster","Number":"7895","RawContent":null,"Title":"RavenDB : rd.xml editing","State":"open","Body":"Hello, i'm trying to build a basic application which is basically a custom client for handling requests to RavenDB.\r\n\r\nUnfortunately while trying to run the compiled application, i get the following errors:\r\n\r\n> Unhandled Exception: System.AggregateException: Failed to retrieve database topology from all known nodes.\r\nhttp://127.0.0.1:8080 -> Could not build json parser for Raven.Client.Http.ServerNode -> MakeGenericMethod() cannot create this generic method instantiation because the instantiation was not metadata-enabled: 'Sparrow.Json.BlittableJsonReaderObject.TryGet<Raven.Client.Http.ServerNode.Role>(System.String,out Raven.Client.Http.ServerNode.Role&)' For more information, please visit http://go.microsoft.com/fwlink/?LinkID=616868 (Could not build json parser for Raven.Client.Http.ServerNode)\r\n ---> System.InvalidOperationException: Could not build json parser for Raven.Client.Http.ServerNode\r\n ---> EETypeRva:0x01BDCA98(System.Reflection.MissingRuntimeArtifactException): MakeGenericMethod() cannot create this generic method instantiation because the instantiation was not metadata-enabled: 'Sparrow.Json.BlittableJsonReaderObject.TryGet<Raven.Client.Http.ServerNode.Role>(System.String,out Raven.Client.Http.ServerNode.Role&)' For more information, please visit http://go.microsoft.com/fwlink/?LinkID=616868\r\n   at Internal.Reflection.Core.Execution.ExecutionEnvironment.GetMethodInvoker(RuntimeTypeInfo, QMethodDefinition, RuntimeTypeInfo[], MemberInfo) + 0x273\r\n   at System.Reflection.Runtime.MethodInfos.NativeFormat.NativeFormatMethodCommon.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0xb6\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x37\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeConstructedGenericMethodInfo.get_UncachedMethodInvoker() + 0x3b\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.get_MethodInvoker() + 0x19c\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.MakeGenericMethod(Type[]) + 0x3ec\r\n   at System.Linq.Expressions.Expression.ApplyTypeArgs(MethodInfo, Type[]) + 0xc7\r\n   at System.Linq.Expressions.Expression.FindMethod(Type, String, Type[], Expression[], BindingFlags) + 0xe0\r\n   at System.Linq.Expressions.Expression.Call(Expression, String, Type[], Expression[]) + 0xb4\r\n   at Sparrow.Json.JsonDeserializationBase.GetValue(String, Type, ParameterExpression, Dictionary`2) + 0x757\r\n   at Sparrow.Json.JsonDeserializationBase.GenerateJsonDeserializationRoutine[T]() + 0x7d7\r\n\r\n\r\n\r\nI tried to mess with rd.xml, but really couldn't understand how to properly configure them. \r\nBut i'm always getting errors on compiling or runtime\r\n\r\nThank you.","Url":"https://github.com/dotnet/corert/issues/7895","RelatedDescription":"Open issue \"RavenDB : rd.xml editing\" (#7895)"},{"Id":"529587467","IsPullRequest":false,"CreatedAt":"2019-11-28T17:23:49","Actor":"yowl","Number":"7893","RawContent":null,"Title":"Wasm: question: boxing to Single","State":"closed","Body":"Hi, in the Wasm backend it loads float32s into float64s and adds the extends/truncs as necessary.  This has worked ok up till now, but there is a problem I think with `FieldInfo.SetValue`.  This takes an object so boxes the float32.  Currently this fails as the address passed to `SetValue` is an address to a float64 and RhBox does not expect that and the value is corrupted (a 64bit float is interpreted as a 32 bit float I think).  In other words the following test fails\r\n```\r\n    internal static void TestBoxSingle()\r\n    {\r\n        StartTest(\"Test box single\");\r\n        var fi = typeof(ClassWithFloat).GetField(\"F\");\r\n        fi.SetValue(null, 1.1f);\r\n\r\n        PrintLine(ClassWithFloat.F.ToString());\r\n        EndTest(1.1f == ClassWithFloat.F);\r\n    }\r\n}\r\n\r\npublic class ClassWithFloat\r\n{\r\n    public static float F;\r\n}\r\n``` \r\nAnd it prints -1.0842022E-19.   In the Wasm backend the evaluation stack can have a `StackEntry` type of `FloatConstantEntry`, but this I'm not sure is sufficient to solve this problem as the enum for StackValueKind is \r\n```\r\n    internal enum StackValueKind\r\n    {\r\n        /// <summary>An unknow type.</summary>\r\n        Unknown,\r\n        /// <summary>Any signed or unsigned integer values that can be represented as a 32-bit entity.</summary>\r\n        Int32,\r\n        /// <summary>Any signed or unsigned integer values that can be represented as a 64-bit entity.</summary>\r\n        Int64,\r\n        /// <summary>Underlying platform pointer type represented as an integer of the appropriate size.</summary>\r\n        NativeInt,\r\n        /// <summary>Any float value.</summary>\r\n        Float,\r\n        /// <summary>A managed pointer.</summary>\r\n        ByRef,\r\n        /// <summary>An object reference.</summary>\r\n        ObjRef,\r\n        /// <summary>A value type which is not any of the primitive one.</summary>\r\n        ValueType\r\n    }\r\n```\r\nIt does not distinguish between 32 and 64 bit floats, so its impossible, I think, to load the constant correctly from\r\n```\r\n  IL_0023:  ldc.r4     1.1\r\n  IL_0028:  box        [System.Runtime]System.Single\r\n```\r\nThe 1.1 is loaded with the `FloatConstantEntry` and it can't be passed correctly to the box/RhBox as its unknown whether to trunc the float or not.  \r\n\r\nMy question is, is my thinking correct and I need to add a new `StackEntry` type so that its known if the value was 32 or 64 bits?  This would not be a bad thing presumably from a performance point of view anyway,\r\n","Url":"https://github.com/dotnet/corert/issues/7893","RelatedDescription":"Closed issue \"Wasm: question: boxing to Single\" (#7893)"},{"Id":"529624715","IsPullRequest":true,"CreatedAt":"2019-11-28T00:04:32","Actor":"yowl","Number":"7894","RawContent":null,"Title":"WIP: Wasm: fix for boxing a float32 into Single","State":"open","Body":"Add a test and the fix for :\r\n```\r\n  IL_0023:  ldc.r4     1.1\r\n  IL_0028:  box        [System.Runtime]System.Single\r\n```\r\nWhich was failing due to using a float64 and not trunking the float64 into a float32 before calling RhBox.  Also added code to ensure that type used in the reflection has its type symbol add to the dependencies to prevent missing metadata exception.  WIP as contains changes from #7891 so will wait for that before releasing.","Url":"https://github.com/dotnet/corert/pull/7894","RelatedDescription":"Open PR \"WIP: Wasm: fix for boxing a float32 into Single\" (#7894)"},{"Id":"529491585","IsPullRequest":true,"CreatedAt":"2019-11-27T19:36:17","Actor":"MichalStrehovsky","Number":"7892","RawContent":null,"Title":"Fix `out string` arguments in reverse p/invoke","State":"closed","Body":"`EmitMarshalArgumentNativeToManaged` bypasses `AllocAndTransformManagedToNative` and calls `Alloc/TransformManagedToNative` directly. Those are no-ops for the string marshallers, leading to bad marshalling code.\r\n\r\nI think doing allocation+transform in the \"transform\" part is what CoreCLR does as well (`EmitConvertContentsCLRToNative` is where allocation+transform happens for string marshallers in CoreCLR, as opposed to `EmitConvertSpaceAndContentsCLRToNative` which would be the right place based on its name).","Url":"https://github.com/dotnet/corert/pull/7892","RelatedDescription":"Closed or merged PR \"Fix `out string` arguments in reverse p/invoke\" (#7892)"},{"Id":"528780780","IsPullRequest":true,"CreatedAt":"2019-11-27T17:30:09","Actor":"MichalStrehovsky","Number":"7890","RawContent":null,"Title":"Port p/invoke marshalling changes from CoreCLR","State":"closed","Body":"* First commit takes shared files from CoreCLR verbatim.\r\n* Second commit adjusts non-shared files.\r\n* Third commit fixes what appears to be a CppCodegen bug.\r\n","Url":"https://github.com/dotnet/corert/pull/7890","RelatedDescription":"Closed or merged PR \"Port p/invoke marshalling changes from CoreCLR\" (#7890)"},{"Id":"529428997","IsPullRequest":true,"CreatedAt":"2019-11-27T15:46:15","Actor":"yowl","Number":"7891","RawContent":null,"Title":"Wasm: fix unsigned extend to uint64 and add test","State":"open","Body":"This widening cast was failing, particular causing a problem in https://github.com/dotnet/corert/blob/8d81b96c2561fe00a0ac95a40e2dd19642971a5a/src/System.Private.CoreLib/shared/System/Number.DiyFp.cs#L77-L103.  \r\n\r\nAdded a test that failed previously and zext instead of sext for unsigned widening.  There is a parameter that I thought to use, but it is passed false here: https://github.com/dotnet/corert/blob/master/src/Common/src/TypeSystem/IL/ILImporter.cs#L574-L578.  Maybe that is wrong?\r\n\r\nAlso I updated emscripten, this wasn't necessary to fix this, but I got sidetracked with a build error and upgraded.  Its not a bad idea anyway as they changed the build tooling to allow for either the fastcomp or llvm backend and we will need to upgrade at some point.  If you just `git pull` emscripten you will hit a problem with the current scripts due to these changes.  Changed a bit of documentation to fit today's reality.","Url":"https://github.com/dotnet/corert/pull/7891","RelatedDescription":"Open PR \"Wasm: fix unsigned extend to uint64 and add test\" (#7891)"},{"Id":"528779520","IsPullRequest":true,"CreatedAt":"2019-11-26T18:12:44","Actor":"MichalStrehovsky","Number":"7889","RawContent":null,"Title":"Get System.Text.Json to work","State":"closed","Body":"The System.Text.Json that ships with the .NET Core 3.0+ uses Reflection.Emit - we should grab the NetStandard 2.0 version instead.","Url":"https://github.com/dotnet/corert/pull/7889","RelatedDescription":"Closed or merged PR \"Get System.Text.Json to work\" (#7889)"},{"Id":"528703148","IsPullRequest":false,"CreatedAt":"2019-11-26T12:48:11","Actor":"s-m-k","Number":"7888","RawContent":null,"Title":"[macOS] System.Globalization.Native not linking properly when building with InvariantCulture","State":"open","Body":"**Software version:**\r\n.NET Core SDK 2.1.300\r\nILCompiler 1.0.0-alpha-28229-02\r\nmacOS 10.14.4, Darwin Kernel Version 18.5.0\r\n\r\n**Repro steps:**\r\n1. create a MonoGame project (the framework is likely unrelated to the issue, but my project uses it and I haven't isolated the case yet)\r\n2. set `IlcInvariantGlobalization` to `true` in the project file\r\n3. make sure `System.Globalization` is included in the build (e.g. try additionally setting up `CultureInfo.InvariantCulture` at startup in the code)\r\n4. build on macOS\r\n\r\n**Results:**\r\nBuild fails during the linking stage yielding the following errors:\r\n```\r\nld : warning : can't parse dwarf compilation unit info in obj/Release/netcoreapp2.1/osx-x64/native/Carrion.o [/Users/phobia/Carrion/Carrion/Carrion.csproj]\r\n  Undefined symbols for architecture x86_64:\r\n    \"_u_charsToUChars_ptr\", referenced from:\r\n        _u_charsToUChars_safe in System.Globalization.Native.a(pal_locale.c.o)\r\n        _GlobalizationNative_GetLocaleName in System.Globalization.Native.a(pal_locale.c.o)\r\n        _GlobalizationNative_GetDefaultLocaleName in System.Globalization.Native.a(pal_locale.c.o)\r\n    \"_u_strlen_ptr\", referenced from:\r\n        _GetNumericPattern in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n    \"_u_strncpy_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_u_toupper_ptr\", referenced from:\r\n        _GlobalizationNative_IndexOfOrdinalIgnoreCase in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_CompareStringOrdinalIgnoreCase in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucal_close_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoInt in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n    \"_ucal_getAttribute_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoInt in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n    \"_ucal_open_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoInt in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n    \"_ucol_closeElements_ptr\", referenced from:\r\n        _SimpleAffix in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexStartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_StartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexEndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_EndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_close_ptr\", referenced from:\r\n        _GlobalizationNative_CloseSortHandle in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GetCollatorFromSortHandle in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_CompareString in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_IndexOf in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_LastIndexOf in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_StartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_EndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        ...\r\n    \"_ucol_getRules_ptr\", referenced from:\r\n        _CloneCollatorWithOptions in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_getSortKey_ptr\", referenced from:\r\n        _GlobalizationNative_GetSortKey in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_getStrength_ptr\", referenced from:\r\n        _CloneCollatorWithOptions in System.Globalization.Native.a(pal_collation.c.o)\r\n        _SimpleAffix in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_getVersion_ptr\", referenced from:\r\n        _GlobalizationNative_GetSortVersion in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_next_ptr\", referenced from:\r\n        _SimpleAffix in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexStartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_StartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexEndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_EndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_openElements_ptr\", referenced from:\r\n        _SimpleAffix in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexStartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_StartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexEndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_EndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_openRules_ptr\", referenced from:\r\n        _CloneCollatorWithOptions in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_open_ptr\", referenced from:\r\n        _GlobalizationNative_GetSortHandle in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_previous_ptr\", referenced from:\r\n        _SimpleAffix in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_safeClone_ptr\", referenced from:\r\n        _CloneCollatorWithOptions in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_setAttribute_ptr\", referenced from:\r\n        _CloneCollatorWithOptions in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_setMaxVariable_ptr\", referenced from:\r\n        _CloneCollatorWithOptions in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucol_strcoll_ptr\", referenced from:\r\n        _GlobalizationNative_CompareString in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_ucurr_forLocale_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_ucurr_getName_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_udat_close_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n        _GlobalizationNative_GetLocaleTimeFormat in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_udat_getSymbols_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_udat_open_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n        _GlobalizationNative_GetLocaleTimeFormat in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_udat_toPattern_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleTimeFormat in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_uloc_canonicalize_ptr\", referenced from:\r\n        _GetLocale in System.Globalization.Native.a(pal_locale.c.o)\r\n        _GlobalizationNative_GetLocaleName in System.Globalization.Native.a(pal_locale.c.o)\r\n    \"_uloc_countAvailable_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocales in System.Globalization.Native.a(pal_locale.c.o)\r\n    \"_uloc_getAvailable_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocales in System.Globalization.Native.a(pal_locale.c.o)\r\n    \"_uloc_getBaseName_ptr\", referenced from:\r\n        _GlobalizationNative_GetDefaultLocaleName in System.Globalization.Native.a(pal_locale.c.o)\r\n    \"_uloc_getCharacterOrientation_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoInt in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n    \"_uloc_getCountry_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_uloc_getDefault_ptr\", referenced from:\r\n        _DetectDefaultLocaleName in System.Globalization.Native.a(pal_locale.c.o)\r\n        _GlobalizationNative_GetDefaultLocaleName in System.Globalization.Native.a(pal_locale.c.o)\r\n    \"_uloc_getDisplayCountry_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_uloc_getDisplayLanguage_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_uloc_getDisplayName_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_uloc_getISO3Country_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_uloc_getISO3Language_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_uloc_getKeywordValue_ptr\", referenced from:\r\n        _GlobalizationNative_GetDefaultLocaleName in System.Globalization.Native.a(pal_locale.c.o)\r\n    \"_uloc_getLCID_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoInt in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n    \"_uloc_getLanguage_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n        _GetLocale in System.Globalization.Native.a(pal_locale.c.o)\r\n        _GlobalizationNative_GetLocaleName in System.Globalization.Native.a(pal_locale.c.o)\r\n    \"_uloc_getName_ptr\", referenced from:\r\n        _GetLocale in System.Globalization.Native.a(pal_locale.c.o)\r\n    \"_uloc_getParent_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_ulocdata_getMeasurementSystem_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoInt in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n    \"_unum_close_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoInt in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n        _GlobalizationNative_GetLocaleInfoGroupingSizes in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_unum_getAttribute_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoInt in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n        _GlobalizationNative_GetLocaleInfoGroupingSizes in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n    \"_unum_getSymbol_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_unum_open_ptr\", referenced from:\r\n        _GlobalizationNative_GetLocaleInfoInt in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n        _GlobalizationNative_GetLocaleInfoGroupingSizes in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n        _GlobalizationNative_GetLocaleInfoString in System.Globalization.Native.a(pal_localeStringData.c.o)\r\n    \"_unum_toPattern_ptr\", referenced from:\r\n        _GetNumericPattern in System.Globalization.Native.a(pal_localeNumberData.c.o)\r\n    \"_usearch_close_ptr\", referenced from:\r\n        _GlobalizationNative_IndexOf in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_LastIndexOf in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexStartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_StartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexEndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_EndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_usearch_first_ptr\", referenced from:\r\n        _GlobalizationNative_IndexOf in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexStartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_StartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_usearch_getMatchedLength_ptr\", referenced from:\r\n        _GlobalizationNative_IndexOf in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexEndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_EndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_usearch_last_ptr\", referenced from:\r\n        _GlobalizationNative_LastIndexOf in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexEndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_EndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n    \"_usearch_openFromCollator_ptr\", referenced from:\r\n        _GlobalizationNative_IndexOf in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_LastIndexOf in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexStartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_StartsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _ComplexEndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n        _GlobalizationNative_EndsWith in System.Globalization.Native.a(pal_collation.c.o)\r\n  ld: symbol(s) not found for architecture x86_64\r\nclang : error : linker command failed with exit code 1 (use -v to see invocation) [/Users/phobia/Carrion/Carrion/Carrion.csproj]\r\n/Users/phobia/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-28229-02/build/Microsoft.NETCore.Native.targets(295,5): error MSB3073: The command \"clang \"obj/Release/netcoreapp2.1/osx-x64/native/Carrion.o\" -o \"bin/Release/netcoreapp2.1/osx-x64/native/Carrion\" /Users/phobia/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28229-02/sdk/libbootstrapper.a /Users/phobia/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28229-02/sdk/libRuntime.a /Users/phobia/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28229-02/sdk/libSystem.Private.CoreLib.Native.a /Users/phobia/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28229-02/sdk/libSystem.Private.TypeLoader.Native.a /Users/phobia/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28229-02/framework/System.Native.a /Users/phobia/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28229-02/framework/System.Globalization.Native.a /Users/phobia/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28229-02/framework/System.IO.Compression.Native.a /Users/phobia/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28229-02/framework/System.Net.Security.Native.a /Users/phobia/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28229-02/framework/System.Security.Cryptography.Native.Apple.a -g -Wl,-rpath,'$ORIGIN' -lstdc++ -ldl -lm -lz -licucore -framework CoreFoundation -framework Security -framework GSS\" exited with code 1. [/Users/phobia/Carrion/Carrion/Carrion.csproj]\r\n```\r\n**Expected behavior:**\r\nBuild succeeds, the binary is created.\r\n\r\n**Workaround:**\r\nWhen you build on macOS, don't set `IlcInvariantGlobalization` to `true`.","Url":"https://github.com/dotnet/corert/issues/7888","RelatedDescription":"Open issue \"[macOS] System.Globalization.Native not linking properly when building with InvariantCulture\" (#7888)"},{"Id":"526893131","IsPullRequest":true,"CreatedAt":"2019-11-25T14:33:40","Actor":"yowl","Number":"7885","RawContent":null,"Title":"Wasm: Adds a test and a box for callvirt on value types where TryResolveCon…","State":"closed","Body":"…straintMethodApprox does not return a method.\r\n\r\nConstrained calls on value types to methods like ToString were not boxing the struct and hence failing.","Url":"https://github.com/dotnet/corert/pull/7885","RelatedDescription":"Closed or merged PR \"Wasm: Adds a test and a box for callvirt on value types where TryResolveCon…\" (#7885)"},{"Id":"527558607","IsPullRequest":false,"CreatedAt":"2019-11-23T13:39:33","Actor":"gimpest","Number":"7887","RawContent":null,"Title":"[SharedLibrary] SIGSEGV on unload","State":"open","Body":"on exit process\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00007ffff6770d58 in CloseHandle (handle=0x60d0c0) at /root/corert_3253263/src/Native/Runtime/unix/PalRedhawkUnix.cpp:583\r\n583     /root/corert_3253263/src/Native/Runtime/unix/PalRedhawkUnix.cpp: No such file or directory.\r\n(gdb) bt\r\n#0  0x00007ffff6770d58 in CloseHandle (handle=0x60d0c0) at /root/corert_3253263/src/Native/Runtime/unix/PalRedhawkUnix.cpp:583\r\n#1  0x00007ffff672fd25 in PalCloseHandle (arg1=0x60d0c0) at /root/corert_3253263/src/Native/Runtime/Full/../PalRedhawkFunctions.h:14\r\n#2  Thread::Destroy (this=0x6046d0) at /root/corert_3253263/src/Native/Runtime/thread.cpp:375\r\n#3  0x00007ffff6730e23 in ThreadStore::DetachCurrentThread () at /root/corert_3253263/src/Native/Runtime/threadstore.cpp:181\r\n#4  0x00007ffff677196e in TlsDestructionMonitor::~TlsDestructionMonitor (this=<optimized out>) at /root/corert_3253263/src/Native/Runtime/unix/PalRedhawkUnix.cpp:468\r\n#5  0x00007ffff792cb19 in (anonymous namespace)::run (p=<optimized out>) at ../../../../libstdc++-v3/libsupc++/atexit_thread.cc:64\r\n#6  0x00007ffff7024b69 in __run_exit_handlers (status=0, listp=0x7ffff73b16c8 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true) at exit.c:77\r\n#7  0x00007ffff7024bb7 in __GI_exit (status=<optimized out>) at exit.c:99\r\n#8  0x00007ffff700d3dc in __libc_start_main (main=0x400abd <main>, argc=1, argv=0x7fffffffe528, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, \r\n    stack_end=0x7fffffffe518) at ../csu/libc-start.c:300\r\n#9  0x00000000004009f9 in _start ()\r\n```\r\n\r\nshared library\r\n-------------------------------------------\r\n```\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace SharedLibrary\r\n{\r\n        public class Class1\r\n        {\r\n                [NativeCallable(EntryPoint = \"add\", CallingConvention = CallingConvention.StdCall)]\r\n                public static int Add(int a, int b)\r\n                {\r\n                        return a + b;\r\n                }\r\n        }\r\n}\r\n```\r\n\r\nsample(c++) code\r\n-------------------------------------------\r\n```\r\n#include <stdio.h>\r\n#include <dlfcn.h>\r\n\r\ntypedef int(*f_add)(int, int);\r\n\r\nint main(int argc, char* argv[]) {\r\n\tvoid* handle = dlopen (\"SharedLibrary.so\", RTLD_LAZY);\r\n        f_add add = (f_add)dlsym(handle, \"add\");\r\n        printf(\"%d\\r\\n\", add(5, 10));\r\n\tdlclose(handle);\r\n        return 0;\r\n}\r\n```","Url":"https://github.com/dotnet/corert/issues/7887","RelatedDescription":"Open issue \"[SharedLibrary] SIGSEGV on unload\" (#7887)"},{"Id":"526898250","IsPullRequest":true,"CreatedAt":"2019-11-22T04:31:51","Actor":"cshung","Number":"7886","RawContent":null,"Title":"Revert \"Support custom modifier for method signature\"","State":"closed","Body":"This reverts commit 5575cc060201ad462809f48db25a56c35e4eaca0.","Url":"https://github.com/dotnet/corert/pull/7886","RelatedDescription":"Closed or merged PR \"Revert \"Support custom modifier for method signature\"\" (#7886)"},{"Id":"526275945","IsPullRequest":true,"CreatedAt":"2019-11-21T23:19:25","Actor":"cshung","Number":"7884","RawContent":null,"Title":"[WIP] Porting changes from CoreCLR","State":"closed","Body":"WIP - this port minimal changes from CoreCLR to allow `EcmaSignatureParser.cs` to have identical content with the CoreCLR (now dotnet/runtime) copy.","Url":"https://github.com/dotnet/corert/pull/7884","RelatedDescription":"Closed or merged PR \"[WIP] Porting changes from CoreCLR\" (#7884)"},{"Id":"523136354","IsPullRequest":true,"CreatedAt":"2019-11-15T00:35:44","Actor":"Dotnet-GitSync-Bot","Number":"7883","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @elinor-fung @john-h-k @manandre @tannergooding @carlossanlop","Url":"https://github.com/dotnet/corert/pull/7883","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7883)"},{"Id":"522914006","IsPullRequest":false,"CreatedAt":"2019-11-14T15:00:12","Actor":"AArnott","Number":"7882","RawContent":null,"Title":"UWP .NET Native compilation fails when nutc_driver.exe returns exit code -2147483645","State":"open","Body":"**Repro steps**\r\n\r\n1. Create a new UWP Test project in VS 2019\r\n1. Switch to the Release|x86 solution configuration\r\n1. Build (which succeeds, but with many warnings about a missing assembly)\r\n1. Install the `System.Xml.XPath.XmlDocument` package. Build again. No warnings this time. ❓ Why is this package necessary in the default proejct yet somehow not included in the default project?\r\n1. Set the `AllowUnsafeBlocks=true` msbuild property.\r\n1. Add this method to the UWP test project (or any dependency project/package):\r\n\r\n    ```cs\r\n        private static IntPtr GetAddress(object value)\r\n        {\r\n            unsafe\r\n            {\r\n                TypedReference tr = __makeref(value);\r\n                return **(IntPtr**)(&tr);\r\n            }\r\n        }\r\n    ```\r\n\r\n1. Build again.\r\n\r\n**Expected**\r\n\r\nBuild succeeds.\r\n\r\n**Actual**\r\n\r\nBuild fails with:\r\n\r\n> C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.2.7-rel-27913-00\\tools\\Microsoft.NetNative.targets(801,5): error : ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.7-rel-27913-00\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"D:\\Users\\andarno\\source\\repos\\UWPUnitTestProject2\\UWPUnitTestProject2\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\UWPUnitTestProject2.rsp\"' returned exit code -2147483645\r\n\r\n\r\nFull log follows\r\n\r\n```\r\n1>------ Build started: Project: UWPUnitTestProject2, Configuration: Release x86 ------\r\n1>  UWPUnitTestProject2 -> D:\\Users\\andarno\\source\\repos\\UWPUnitTestProject2\\UWPUnitTestProject2\\bin\\x86\\Release\\UWPUnitTestProject2.exe\r\n1>  Processing application code\r\n1>  Computing application closure and generating interop code\r\n1>    Loading 139 modules...\r\n1>    Generating code...\r\n1>    Interop code generated.\r\n1>  Generating serialization code\r\n1>  Compiling interop code\r\n1>  Generating System.Reflection.DispatchProxy proxy code.\r\n1>  Cleaning up unreferenced code\r\n1>  Generating native code\r\n1>C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.2.7-rel-27913-00\\tools\\Microsoft.NetNative.targets(801,5): error : ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.7-rel-27913-00\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"D:\\Users\\andarno\\source\\repos\\UWPUnitTestProject2\\UWPUnitTestProject2\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\UWPUnitTestProject2.rsp\"' returned exit code -2147483645\r\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```","Url":"https://github.com/dotnet/corert/issues/7882","RelatedDescription":"Open issue \"UWP .NET Native compilation fails when nutc_driver.exe returns exit code -2147483645\" (#7882)"},{"Id":"522521151","IsPullRequest":true,"CreatedAt":"2019-11-14T02:41:52","Actor":"jkotas","Number":"7881","RawContent":null,"Title":"Delete dead files","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7881","RelatedDescription":"Closed or merged PR \"Delete dead files\" (#7881)"},{"Id":"522441624","IsPullRequest":false,"CreatedAt":"2019-11-13T20:02:05","Actor":"Shadow4walker","Number":"7880","RawContent":null,"Title":"HttpWebRequest/HttpWebResponse Not Working!","State":"open","Body":"HttpWebRequest request= with Headers ....etc\r\nvar httpWebResponse = (HttpWebResponse) await request.GetResponseAsync()\r\nnever passed this code >fail fast!! idk what to put in the rd.xml or if event i should put anything there!","Url":"https://github.com/dotnet/corert/issues/7880","RelatedDescription":"Open issue \"HttpWebRequest/HttpWebResponse Not Working!\" (#7880)"},{"Id":"521355526","IsPullRequest":true,"CreatedAt":"2019-11-12T08:01:33","Actor":"Dotnet-GitSync-Bot","Number":"7879","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @ts2do @elinor-fung","Url":"https://github.com/dotnet/corert/pull/7879","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7879)"},{"Id":"521113889","IsPullRequest":true,"CreatedAt":"2019-11-12T06:24:24","Actor":"Dotnet-GitSync-Bot","Number":"7878","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7878","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7878)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"535424527","IsPullRequest":false,"CreatedAt":"2019-12-10T00:51:19","Actor":"GregYankovoy","Number":"4034","RawContent":null,"Title":"dotnet new -i templates --nuget-source does not support --interactive auth","State":"open","Body":"Hi,\r\n\r\ndotnet sdk version 3.1.100\r\n\r\nAttempting to install dotnet CLI templates from a secured Azure Artifacts NuGet repository does not seem to be working.  The command correctly outputs that an --interactive authentication flow may be required.  However, the dotnet new -i command does not actually support the --interactive flag.  \r\n\r\nUsing the same repository, csproj dependencies can be restored via the CLI.  See below for command output.\r\n\r\n```\r\ndotnet new -i Test.Templates --nuget-source https://privatesource.pkgs.visualstudio.com/_packaging/Test/nuget/v3/index.json\r\n\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100\\NuGet.targets(123,5): warning : The plugin credential provider could not acquire credentials. Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive=\"true\" for MSBuild or removing the -NonInteractive switch for `NuGet` [C:\\Users\\Greg\\.templateengine\\dotnetcli\\v3.1.100\\scratch\\restore.csproj]\r\n\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100\\NuGet.targets(123,5): error : Unable to load the service index for source https://privatesource.pkgs.visualstudio.com/_packaging/Test/nuget/v3/index.json. [C:\\Users\\Greg\\.templateengine\\dotnetcli\\v3.1.100\\scratch\\restore.csproj]\r\n\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100\\NuGet.targets(123,5): error :   Response status code does not indicate success: 401 (Unauthorized). [C:\\Users\\Greg\\.templateengine\\dotnetcli\\v3.1.100\\scratch\\restore.csproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/4034","RelatedDescription":"Open issue \"dotnet new -i templates --nuget-source does not support --interactive auth\" (#4034)"},{"Id":"534574501","IsPullRequest":true,"CreatedAt":"2019-12-09T20:06:45","Actor":"dotnet-maestro[bot]","Number":"4027","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19607.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4027","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#4027)"},{"Id":"534625647","IsPullRequest":true,"CreatedAt":"2019-12-09T19:39:36","Actor":"wli3","Number":"4028","RawContent":null,"Title":"Update stage0","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4028","RelatedDescription":"Closed or merged PR \"Update stage0\" (#4028)"},{"Id":"535047733","IsPullRequest":false,"CreatedAt":"2019-12-09T16:37:11","Actor":"Pilchie","Number":"4033","RawContent":null,"Title":"Shared resources (resx) does not work in .net core 3.1 and VS 16.4","State":"open","Body":"_From @Weboholics on Monday, December 9, 2019 12:31:19 PM_\r\n\r\n\r\n### Describe the bug\r\nShared resources has stopped working since .net core 3.1 / vs.16.4.\r\nWorks with vs 16.3.4 and .net core 3.0\r\n\r\n### To Reproduce\r\nexamplecode: https://github.com/Weboholics/ResourceTest\r\n\r\nRun this code in vs.16.4  and notice that the shared resources does not work. View resources does work. This is on the /home/index page.\r\nChanging to 3.0 under vs 16.4 does not work either.\r\n\r\nIf you change visual studio to 16.3.4 and runtime to 3.0 it will work.\r\n\r\n\r\n\r\n- ASP.NET Core version: 3.1\r\n- The IDE (VS / VS Code/ VS4Mac) you're running on, and it's version: vs 16.4.0\r\n\r\n\r\n_Copied from original issue: aspnet/AspNetCore#17701_","Url":"https://github.com/dotnet/sdk/issues/4033","RelatedDescription":"Open issue \"Shared resources (resx) does not work in .net core 3.1 and VS 16.4\" (#4033)"},{"Id":"535010617","IsPullRequest":false,"CreatedAt":"2019-12-09T15:36:10","Actor":"Pilchie","Number":"4032","RawContent":null,"Title":"Building resources file needs netfx sdk?","State":"open","Body":"_From @liuliang-wt on Sunday, December 8, 2019 4:01:15 PM_\r\n\r\nWhen I build a .netcore app with resource files in VS on windows, it requires me to install netfxsdk 4.7.2 to use al.exe command. It is weird that .netcore depands on netfxsdk.\r\n\r\nAnd when I try to publish a .netcore app with resource files on my mac, it failed with this error:\r\n\r\n/usr/local/share/dotnet/sdk/3.0.100/Microsoft.Common.CurrentVersion.targets(3056,5): error MSB3552: Resource file \"**/*.resx\" cannot be found. \r\n\r\n\r\n_Copied from original issue: aspnet/AspNetCore#17688_","Url":"https://github.com/dotnet/sdk/issues/4032","RelatedDescription":"Open issue \"Building resources file needs netfx sdk?\" (#4032)"},{"Id":"534915491","IsPullRequest":true,"CreatedAt":"2019-12-09T15:07:05","Actor":"dotnet-maestro[bot]","Number":"4031","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191208.1\r\n- **Date Produced**: 12/8/2019 2:06 PM\r\n- **Commit**: 71ce4c736b882e6112b395a0e92313be5dcb4328\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19608.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19608.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19608.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4031","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4031)"},{"Id":"534812832","IsPullRequest":false,"CreatedAt":"2019-12-09T09:54:33","Actor":"wangkanai","Number":"4030","RawContent":null,"Title":".NET Core Installer","State":"open","Body":"Please make a .NET Core Installer that you can install multiple version of the SDK and/or runtimes like the same way you manage with Visual Studio Installer.\r\n\r\nI have create a markup concept.\r\n![image](https://user-images.githubusercontent.com/10666633/70425824-7948e300-1aa4-11ea-9466-eeac9d575a49.png)\r\n\r\n\r\nReference to Visual Studio Installer\r\n![image](https://user-images.githubusercontent.com/10666633/70420167-a9d74f80-1a99-11ea-8f52-5a759a552144.png)\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/4030","RelatedDescription":"Open issue \".NET Core Installer\" (#4030)"},{"Id":"534666083","IsPullRequest":false,"CreatedAt":"2019-12-09T03:19:38","Actor":"eat-sleep-code","Number":"4029","RawContent":null,"Title":".NET 3.1 Installer Questions","State":"open","Body":"Installing this:  https://dotnet.microsoft.com/download/dotnet-core/thank-you/runtime-aspnetcore-3.1.0-windows-x64-installer    appears to install _Microsoft.NET Core Runtime - 3.1.0 Preview 3 (x86)_\r\n\r\n**Also executing dotnet --info on Windows is unable to see that Microsoft .NET Core SDK 3.1.100 (x64) is installed.**\r\n\r\n> PS C:\\Windows\\system32> . \"C:\\Program Files\\dotnet\\dotnet.exe\" --info\r\n>   It was not possible to find any installed .NET Core SDKs\r\n>   Did you mean to run .NET Core SDK commands? Install a .NET Core SDK from:\r\n>       https://aka.ms/dotnet-download\r\n> \r\n> Host (useful for support):\r\n>   Version: 3.1.0\r\n>   Commit:  157910edee\r\n> \r\n> .NET Core SDKs installed:\r\n>   No SDKs were found.\r\n> \r\n> .NET Core runtimes installed:\r\n>   Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n> \r\n> To install additional .NET Core runtimes or SDKs:\r\n>   https://aka.ms/dotnet-download\r\n> PS C:\\Windows\\system32>","Url":"https://github.com/dotnet/sdk/issues/4029","RelatedDescription":"Open issue \".NET 3.1 Installer Questions\" (#4029)"},{"Id":"534574471","IsPullRequest":true,"CreatedAt":"2019-12-08T19:17:16","Actor":"mmitche","Number":"4026","RawContent":null,"Title":"[release/3.0.1xx] Enable CI on internal branches","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4026","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Enable CI on internal branches\" (#4026)"},{"Id":"534574393","IsPullRequest":true,"CreatedAt":"2019-12-08T19:10:16","Actor":"dotnet-maestro[bot]","Number":"4024","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fdee9669-2308-4505-9018-08d76d41c6c3)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19607.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:fdee9669-2308-4505-9018-08d76d41c6c3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4024","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/arcade\" (#4024)"},{"Id":"534574439","IsPullRequest":true,"CreatedAt":"2019-12-08T18:55:34","Actor":"dotnet-maestro[bot]","Number":"4025","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:df8a2755-bec9-40dc-b710-08d7368af630)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:df8a2755-bec9-40dc-b710-08d7368af630)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4025","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#4025)"},{"Id":"534538437","IsPullRequest":true,"CreatedAt":"2019-12-08T14:41:46","Actor":"dotnet-maestro[bot]","Number":"4023","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.1\r\n- **Date Produced**: 12/7/2019 1:54 PM\r\n- **Commit**: 97cce7cb41de117e849d42a2eb7c99065dd1602f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19607.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19607.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19607.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4023","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4023)"},{"Id":"534446488","IsPullRequest":false,"CreatedAt":"2019-12-07T20:08:46","Actor":"JustArchi","Number":"4022","RawContent":null,"Title":"Weird binary file lock with PublishSingleFile=true","State":"open","Body":"### Background\r\n\r\nHello.\r\n\r\nI have a quite unusual scenario where my application would like to move its own binary while running. On linux, I'm free to do anything I want with currently running binary, including moving it. On Windows, at least usually, I'm not able to delete the running binary, but I'm still able to move it, which satisfies my usage.\r\n\r\n### Issue\r\n\r\nI've noticed inconsistency in regards to this when using `PublishSingleFile=true`. Ideally I'd like to keep being able to move the binary away, which I use right now with no further issues.\r\n\r\nIn particular, this is what happens (only on Windows):\r\n\r\n- When you launch a `PublishSingleFile=true` project for the first time, or after you've manually cleaned `%TEMP%\\.net`, the app unpacks itself and you're free to rename/move the binary as you please.\r\n- However, when you launch that project again, with the content already extracted, you're no longer able to do anything with the original binary, including moving/renaming it. The binary now holds exclusive file lock to itself.\r\n\r\nIf anything, I'd expect this behaviour to be consistent, or logically, more restrictive when we unpack for the first time, rather than when re-using existing structure. Instead, it's entirely different, to the point that makes me believe it's something worth reporting or getting more details about.\r\n\r\nOf course, judging by the above, the \"workaround\" for my use case is manually cleaning `%TEMP%\\.net` after each program run, which is a very weird solution, but a working one. I'm not entirely sure why the application would hold exclusive file access when re-using the existing structure but not when unpacking for the first time, which is exactly why I've decided to create this issue.\r\n\r\nIdeally it'd be nice if that lock wasn't needed (so I could keep using my planned use case), but in case you actually have reasoning for it, you'd likely want to keep it up for both cases and not only one that is effectively a subset of operations (run) in another one (unpack and run). In any case, at least in my opinion, it's something worth investigating and deciding whether that exclusive file lock could be released (like when run for the first time), or if it's actually needed in both cases (in which case you might want to add it to first run as well).\r\n\r\nThank you in advance for your time in regards to this isssue.","Url":"https://github.com/dotnet/sdk/issues/4022","RelatedDescription":"Open issue \"Weird binary file lock with PublishSingleFile=true\" (#4022)"},{"Id":"534434264","IsPullRequest":true,"CreatedAt":"2019-12-07T18:26:05","Actor":"wli3","Number":"4021","RawContent":null,"Title":"test","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4021","RelatedDescription":"Closed or merged PR \"test\" (#4021)"},{"Id":"534399320","IsPullRequest":true,"CreatedAt":"2019-12-07T14:16:51","Actor":"dotnet-maestro[bot]","Number":"4020","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191206.1\r\n- **Date Produced**: 12/6/2019 2:00 PM\r\n- **Commit**: 4c050b4705ee1743665e7ad721dfafdc9b82a4b7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19606.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19606.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19606.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4020","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4020)"},{"Id":"534322485","IsPullRequest":true,"CreatedAt":"2019-12-07T00:38:37","Actor":"wli3","Number":"4019","RawContent":null,"Title":"disable useapphost on mac by default","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/4019","RelatedDescription":"Open PR \"disable useapphost on mac by default\" (#4019)"},{"Id":"533677769","IsPullRequest":true,"CreatedAt":"2019-12-06T20:12:16","Actor":"dotnet-maestro-bot","Number":"4013","RawContent":null,"Title":"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'","State":"closed","Body":"I detected changes in the release/3.1.1xx branch which have not been merged yet to release/3.1.2xx. I'm a robot and am configured to help you automatically keep release/3.1.2xx up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.1xx by the following committers:\n\n* mmitche\n* dotnet-maestro[bot]\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.1xx\r\ngit pull --ff-only\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.1xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.1xx-to-release/3.1.2xx'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull https://github.com/dotnet-maestro-bot/sdk merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull git@github.com:dotnet-maestro-bot/sdk merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/sdk/pull/4013","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'\" (#4013)"},{"Id":"533539566","IsPullRequest":true,"CreatedAt":"2019-12-06T18:05:58","Actor":"wli3","Number":"4005","RawContent":null,"Title":"Update branding to \"preview\"","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4005","RelatedDescription":"Closed or merged PR \"Update branding to \"preview\"\" (#4005)"},{"Id":"534145328","IsPullRequest":false,"CreatedAt":"2019-12-06T17:02:11","Actor":"JerryJoyce","Number":"4018","RawContent":null,"Title":"dotnet clean fails if NuGet package references have never been restored","State":"open","Body":"**Environment**\r\nUbuntu 18.04\r\n\r\n**Dotnet --info**\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.101\r\n Commit:    bc5f8df0f5\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.101/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.1\r\n  Commit:  19942e7199\r\n\r\n.NET Core SDKs installed:\r\n  3.0.101 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n**Details**\r\nI'm using an Ubuntu 18.04 container to build.  In a clean container, I get the following error when trying to clean my projects (if they have not been built before):\r\n\r\n```/usr/share/dotnet/sdk/3.0.101/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(234,5): error NETSDK1064: Package Google.Protobuf, version 3.9.1 was not found. It might have been deleted since NuGet restore. Otherwise, NuGet restore might have only partially completed, which might have been due to maximum path length restrictions.```\r\n\r\nThe error itself seems benign, but the problem is that this project is being built as part of a larger mixed language project that uses bash scripts to build.  The scripts exit on error which fails the build.  I can work around this by wrapping the \"dotnet clean\" calls with +e/-e but this still results with errors in the logs.\r\n\r\nIs there perhaps some additional step I can do prior to cleaning to prevent this?  I don't want to \"dotnet restore\" prior to every clean, and trying to find some pre-condition to check before doing the clean seems fragile.","Url":"https://github.com/dotnet/sdk/issues/4018","RelatedDescription":"Open issue \"dotnet clean fails if NuGet package references have never been restored\" (#4018)"},{"Id":"534066932","IsPullRequest":false,"CreatedAt":"2019-12-06T15:18:10","Actor":"dmorrison42","Number":"4017","RawContent":null,"Title":"Cannot make trimmed single executable with debugging symbols","State":"open","Body":"Unfortunately, I am unsure if this is a feature request, bug report, or my failure to properly read the documentation, but I am unable to make a trimmed single executable with debugging symbols. I have a simple code example here : https://github.com/dmorrison42/CrashTestDummy\r\n\r\nThe following line will create a single executable that will print a line number of an exception, but is fairly large (~67M).\r\n\r\n~~~bash\r\ndotnet publish -c release -r win7-x64 -p:PublishSingleFile=true -p:IncludeSymbolsInSingleFile=true -o .\r\n~~~\r\n\r\nThe following line with create a single executable that will print no line number, but is *relatively* small (~25M).\r\n\r\n~~~bash\r\ndotnet publish -c release -r win7-x64 -p:PublishSingleFile=true -p:IncludeSymbolsInSingleFile=true -p:PublishTrimmed=true -o .\r\n~~~\r\n\r\nI would like something that will give me the best of both worlds, but I haven't found it yet.\r\n\r\nI am using dotnet core 3.1.100.","Url":"https://github.com/dotnet/sdk/issues/4017","RelatedDescription":"Open issue \"Cannot make trimmed single executable with debugging symbols\" (#4017)"},{"Id":"533961299","IsPullRequest":true,"CreatedAt":"2019-12-06T14:31:49","Actor":"dotnet-maestro[bot]","Number":"4016","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191205.6\r\n- **Date Produced**: 12/5/2019 9:49 PM\r\n- **Commit**: 45bfe0972a7354356daf799aae88533dcd0f071a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19605.6\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19605.6\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19605.6\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4016","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4016)"},{"Id":"533839841","IsPullRequest":false,"CreatedAt":"2019-12-06T09:18:20","Actor":"eriawan","Number":"4015","RawContent":null,"Title":"Updating VS 2019 from 16.3.x to 16.14.0 uninstall existing .NET Core SDK 3.0.100","State":"open","Body":"I have 2 different machines that has VS 2019 16.3.10 and VS 2019 16.3.7 on Windows 10 1909. \r\nBoth of them have .NET Core SDK v3.0.100 installed.\r\n\r\nAfter I update to VS 2019 16.4.0, the .NET Core SDK v3.0.100 got uninstalled and .NET Core 3.1.100 is installed. I don't mind having .NET Core 3.1.100 SDK installed. \r\n\r\nMy problem is why .NET Core 3.0.100 is uninstalled on every time I update VS 2019 from v16.3.x to v16.4.0?\r\n","Url":"https://github.com/dotnet/sdk/issues/4015","RelatedDescription":"Open issue \"Updating VS 2019 from 16.3.x to 16.14.0 uninstall existing .NET Core SDK 3.0.100\" (#4015)"},{"Id":"533804186","IsPullRequest":false,"CreatedAt":"2019-12-06T07:53:19","Actor":"Eznoka","Number":"4014","RawContent":null,"Title":"[dotnet 3.1] dotnet new: error on Fedora 31","State":"open","Body":"Hi,\r\n\r\nSteps to reproduce:\r\n\r\n1. On Fedora 31, up to date ('dnf distrosync --refresh'), with dotnet repo enabled.\r\n2. Remove dotnet-sdk (3.0) and its dependencies\r\n3. Install dotnet-sdk-3.1 (dnf)\r\n4. Run dotnet new ...\r\nI got the following error message, same with different 'dotnet' new options.\r\n\r\n```\r\n`[eznoka@fedora-fpe-home ~]$ dotnet new\r\nGetting ready...\r\nObject reference not set to an instance of an object.\r\n   at Microsoft.TemplateEngine.Edge.Settings.SettingsLoader.Save(TemplateCache cacheToSave)\r\n   at Microsoft.TemplateEngine.Edge.Settings.SettingsLoader.Save()\r\n   at Microsoft.TemplateEngine.Cli.Installer.InstallPackages(IEnumerable`1 installationRequests, IList`1 nuGetSources, Boolean debugAllowDevInstall)\r\n   at Microsoft.TemplateEngine.Cli.Installer.InstallPackages(IEnumerable`1 installationRequests)\r\n   at Microsoft.DotNet.Tools.New.NewCommandShim.FirstRun(IEngineEnvironmentSettings environmentSettings, IInstaller installer)\r\n   at Microsoft.TemplateEngine.Cli.New3Command.ConfigureEnvironment()\r\n   at Microsoft.TemplateEngine.Cli.New3Command.Initialize()\r\n   at Microsoft.TemplateEngine.Cli.New3Command.ExecuteAsync()\r\n   at Microsoft.TemplateEngine.Cli.CommandParsing.NewCommandInputCli.<>c__DisplayClass19_0.<<OnExecute>b__0>d.MoveNext()\r\n`\r\n```\r\n\r\nResult of dotnet --info:\r\n```\r\n[eznoka@fedora-fpe-home ~]$ dotnet --info\r\nSDK .NET Core (reflétant tous les global.json) :\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nEnvironnement d'exécution :\r\n OS Name:     fedora\r\n OS Version:  31\r\n OS Platform: Linux\r\n RID:         fedora.31-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.1.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  157910edee\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n`\r\n```\r\n","Url":"https://github.com/dotnet/sdk/issues/4014","RelatedDescription":"Open issue \"[dotnet 3.1] dotnet new: error on Fedora 31\" (#4014)"},{"Id":"533566600","IsPullRequest":false,"CreatedAt":"2019-12-06T05:11:37","Actor":"dehghani-mehdi","Number":"4008","RawContent":null,"Title":"Some tests failed, but ERRORLEVEL is 0","State":"closed","Body":"Hi,\r\n\r\nI'm using `xUnit`, after running `dotnet test MyApp.Tests.csproj`, I got:\r\n\r\n```\r\nTest Run Failed.\r\nTotal tests: 8\r\n     Passed: 5\r\n     Failed: 3\r\n Total time: 1.3661 Seconds\r\n```\r\n\r\nBut the value of `%ERRORLEVEL%` is 0.\r\n\r\n`dotnet --version` -> `3.0.100`\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/4008","RelatedDescription":"Closed issue \"Some tests failed, but ERRORLEVEL is 0\" (#4008)"},{"Id":"533616557","IsPullRequest":true,"CreatedAt":"2019-12-06T00:32:15","Actor":"mmitche","Number":"4011","RawContent":null,"Title":"[release/3.1.2xx] Update to 3.1.100 rtm SDK","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4011","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update to 3.1.100 rtm SDK\" (#4011)"},{"Id":"533616221","IsPullRequest":true,"CreatedAt":"2019-12-06T00:32:07","Actor":"mmitche","Number":"4010","RawContent":null,"Title":"[release/3.1.1xx] Update to 3.1.100 rtm SDK","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4010","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update to 3.1.100 rtm SDK\" (#4010)"},{"Id":"533622558","IsPullRequest":false,"CreatedAt":"2019-12-05T21:58:28","Actor":"wli3","Number":"4012","RawContent":null,"Title":"Change default UseApphost=false when macOS","State":"open","Body":"Workaround for osx 10.13 notarization issue for 3.x","Url":"https://github.com/dotnet/sdk/issues/4012","RelatedDescription":"Open issue \"Change default UseApphost=false when macOS\" (#4012)"},{"Id":"533594317","IsPullRequest":false,"CreatedAt":"2019-12-05T20:56:11","Actor":"dsplaisted","Number":"4009","RawContent":null,"Title":"Automatically reference .NET Framework reference assembly packages if needed","State":"open","Body":"We've recently released [Microsoft.NETFramework.ReferenceAssemblies packages](https://www.nuget.org/packages/Microsoft.NETFramework.ReferenceAssemblies/) which support building projects targeting .NET Framework on systems without the corresponding reference assembly packages installed globally (for example on a non-Windows machine).\r\n\r\nNow that the packages are available, we should update the SDK to automatically include the reference when needed.\r\n\r\nRelated: #335, dotnet/designs#33","Url":"https://github.com/dotnet/sdk/issues/4009","RelatedDescription":"Open issue \"Automatically reference .NET Framework reference assembly packages if needed\" (#4009)"},{"Id":"533563607","IsPullRequest":false,"CreatedAt":"2019-12-05T19:53:26","Actor":"anurse","Number":"4007","RawContent":null,"Title":"UserSecretsId attribute not generated when M.E.C.UserSecrets reference transitively","State":"open","Body":"## Overview\r\n\r\nThe logic that injects the `UserSecretsIdAttribute` appears to only work if the `Microsoft.Extensions.Configuration.UserSecrets` package is reference directly (or through the ASP.NET Core runtime). The worker template references it transitively through `Microsoft.Extensions.Hosting` and the attribute is never generated and user secrets are not loaded.\r\n\r\nThis was originally reported by customers: https://github.com/aspnet/Extensions/issues/2743 https://github.com/aspnet/AspNetCore.Docs/issues/14315\r\n\r\n## Repro Steps\r\n\r\nRepro repo (just clone and skip to step 3): https://github.com/anurse/UserSecretsInWorkerRepro\r\n\r\n1. `dotnet new worker`\r\n2. Edit `ExecuteAsync` in `Worker.cs` to the following\r\n\r\n```csharp\r\nprotected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n{\r\n    while (!stoppingToken.IsCancellationRequested)\r\n    {\r\n        _logger.LogInformation(\"Worker running at: {time}\", DateTimeOffset.Now);\r\n        _logger.LogInformation(\"The secret is: {Secret}\", _config[\"SecretName\"]);\r\n        await Task.Delay(1000, stoppingToken);\r\n    }\r\n}\r\n```\r\n\r\n3. Set a user secret value: `dotnet user-secrets set \"SecretName\" \"SecretValue\"`\r\n4. Run with `dotnet run`\r\n\r\n## Expected Results\r\n\r\nThe secret value is written in a log message like:\r\n\r\n```\r\ninfo: UserSecretsInWorkerRepro.Worker[0]\r\n      Worker running at: 12/05/2019 11:51:07 -08:00\r\ninfo: UserSecretsInWorkerRepro.Worker[0]\r\n      The secret is: SecretValue\r\n```\r\n\r\n## Actual Results\r\n\r\nThe secret value is not present\r\n\r\n```\r\ninfo: UserSecretsInWorkerRepro.Worker[0]\r\n      Worker running at: 12/05/2019 11:51:07 -08:00\r\ninfo: UserSecretsInWorkerRepro.Worker[0]\r\n      The secret is: (null)\r\n```","Url":"https://github.com/dotnet/sdk/issues/4007","RelatedDescription":"Open issue \"UserSecretsId attribute not generated when M.E.C.UserSecrets reference transitively\" (#4007)"},{"Id":"533559315","IsPullRequest":false,"CreatedAt":"2019-12-05T19:46:52","Actor":"dehghani-mehdi","Number":"4006","RawContent":null,"Title":"Why `dotnet clean` prints `Build succeeded.` instead of `Clean succeeded.`","State":"open","Body":"Hi,\r\n\r\nI think the _success_ message should be `Clean succeeded.` after running `dotnet clean`. ","Url":"https://github.com/dotnet/sdk/issues/4006","RelatedDescription":"Open issue \"Why `dotnet clean` prints `Build succeeded.` instead of `Clean succeeded.`\" (#4006)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"535463424","IsPullRequest":false,"CreatedAt":"2019-12-10T03:08:33","Actor":"terrajobst","Number":"144","RawContent":null,"Title":"Removal of read-collaborator access","State":"open","Body":"***TL;DR**: We’ll remove collaborators with read-only access from our public repos on December 16th. This means some folks will lose their Collaborator badge and the ability to interact with the CI system.*\r\n\r\nOver the years, we’ve added a bunch of folks as collaborators with read permissions to our public repos. The rationale was that we wanted to be able to assign issues to community members because GitHub only allowed assigning issues to users with an explicit permission grant for the repository. However, they changed this in [June 2019](https://github.blog/2019-06-25-assign-issues-to-issue-commenters/). Now, we can assign issues to all users with explicit permissions as well as to users that have commented on the specific issue.\r\n\r\nAlso, we recently started to audit and tighten the permissions for our organizations. As a result, it became clear that large number of repo-specific permission grants are hard to review and audit. Internally, our goal is to grant all permissions via teams instead.\r\n\r\nHence, we plan to remove all collaborators from public repos that only have read permissions (folks with triage permissions will remain). The full list of affected repos is listed below.\r\n\r\nThis shouldn’t impact your ability to work with us, but losing explicit read-only has the following implications:\r\n\r\n-   **You’ll lose the collaborator badge**. We understand that this is visually appealing and for some people it might have been a badge of honor. But given that GitHub also shows a Contributor bade for folks whose PRs got merged, we don’t think it this will be a major take back.    \r\n    ![image](https://user-images.githubusercontent.com/5169960/70491508-43acf580-1ab6-11ea-94df-74ea2dde98b4.png)\r\n\r\n\r\n-   **You lose the ability to interact with the CI system**. As a collaborator, you can use comments to [send commands to the CI system](https://github.com/dotnet/runtime/blob/master/docs/project/pullrequest-builds.md). While this can be useful at times, we generally don’t expect (or desire) contributors to do that. Of course, anyone can still access the CI logs.\r\n\r\n| Public Repo                | \\#collaborators with read |\r\n|----------------------------|---------------------------|\r\n| arcade                     | 1                         |\r\n| BenchmarkDotNet            | 11                        |\r\n| cli                        | 2                         |\r\n| command-line-api           | 14                        |\r\n| coreclr                    | 18                        |\r\n| corefx                     | 180                       |\r\n| corefxlab                  | 4                         |\r\n| corert                     | 7                         |\r\n| core-sdk                   | 1                         |\r\n| docs                       | 3                         |\r\n| interactive-window         | 1                         |\r\n| machinelearning            | 1                         |\r\n| machinelearning-samples    | 1                         |\r\n| msbuild-language-service   | 1                         |\r\n| runtime                    | 128                       |\r\n| spark                      | 5                         |\r\n| standard                   | 1                         |\r\n| windowsdesktop             | 1                         |\r\n| winforms-datavisualization | 1                         |\r\n| Grand Total                | 381                       |\r\n\r\n### Discussion\r\n\r\nTo discuss this, please comment on the corresponding issue at https://github.com/dotnet/runtime/issues/718.","Url":"https://github.com/dotnet/announcements/issues/144","RelatedDescription":"Open issue \"Removal of read-collaborator access\" (#144)"},{"Id":"532249858","IsPullRequest":false,"CreatedAt":"2019-12-03T20:36:29","Actor":"MichaelSimons","Number":"143","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.1","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.1\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.1](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/).\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1511)\r\n\r\n## Details\r\n\r\n* [dotnet-docker#1509](https://github.com/dotnet/dotnet-docker/pull/1509)\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.1. This version of .NET Core is also a [long-term supported (LTS) release](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n\r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.1`.","Url":"https://github.com/dotnet/announcements/issues/143","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.1\" (#143)"},{"Id":"532163408","IsPullRequest":false,"CreatedAt":"2019-12-03T18:00:27","Actor":"leecow","Number":"142","RawContent":null,"Title":".NET Core 3.1.0","State":"open","Body":".NET Core 3.1.0 is available and https://github.com/dotnet/core/issues/3950 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.0/3.1.0.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 , either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/142","RelatedDescription":"Open issue \".NET Core 3.1.0\" (#142)"},{"Id":"523579400","IsPullRequest":false,"CreatedAt":"2019-11-15T16:51:27","Actor":"MichaelSimons","Number":"141","RawContent":null,"Title":"Windows Server, version 1803 no longer supported by .NET Framework","State":"open","Body":"# Windows Server, version 1803 no longer supported by .NET Framework\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #451](https://github.com/microsoft/dotnet-framework-docker/issues/451)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.8`. These are tags that are supported on multiple operating systems and versions, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1803 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-1803` or `mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-1803`.","Url":"https://github.com/dotnet/announcements/issues/141","RelatedDescription":"Open issue \"Windows Server, version 1803 no longer supported by .NET Framework\" (#141)"},{"Id":"523578215","IsPullRequest":false,"CreatedAt":"2019-11-15T16:49:04","Actor":"MichaelSimons","Number":"140","RawContent":null,"Title":"Windows Server, version 1803 no longer supported by .NET Core","State":"open","Body":"# Windows Server, version 1803 no longer supported by .NET Core\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Core container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1469](https://github.com/dotnet/dotnet-docker/issues/1469)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `3.0`, `3.0.0`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server, version 1803 images (even though it is no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:3.0-nanoserver-1803`.","Url":"https://github.com/dotnet/announcements/issues/140","RelatedDescription":"Open issue \"Windows Server, version 1803 no longer supported by .NET Core\" (#140)"},{"Id":"522994983","IsPullRequest":false,"CreatedAt":"2019-11-14T17:15:08","Actor":"leecow","Number":"139","RawContent":null,"Title":".NET Core 3.1.0 Preview 3","State":"open","Body":".NET Core 3.1.0 Preview 3 is available and https://github.com/dotnet/core/issues/3809 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview3.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-3/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-3/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 3, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n","Url":"https://github.com/dotnet/announcements/issues/139","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 3\" (#139)"},{"Id":"522864668","IsPullRequest":false,"CreatedAt":"2019-11-14T13:37:28","Actor":"TaraOverfield","Number":"138","RawContent":null,"Title":"November 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on November 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework November 13, 2019, Update for .NET Framework 4.8](https://devblogs.microsoft.com/dotnet/net-framework-november-13-2019-update-for-net-framework-4-8/)\r\n* [.NET Framework November 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-november-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.14 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.14/2.1.14.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.8/2.2.8.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\n* .NET Core 3.0.1 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/3.0.1/3.0.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/3.0) )\r\n\r\nA discussion issue is available at [core/3848](https://github.com/dotnet/core/issues/3848)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/138","RelatedDescription":"Open issue \"November 2019 .NET Updates\" (#138)"},{"Id":"522488807","IsPullRequest":false,"CreatedAt":"2019-11-13T21:41:06","Actor":"MichaelSimons","Number":"137","RawContent":null,"Title":".NET Framework Docker images support for Windows Server, version 1909","State":"open","Body":"# .NET Framework Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Framework Docker images have been published for Server Core, version 1909.  \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-framework-docker#448](https://github.com/microsoft/dotnet-framework-docker/issues/448)\r\n\r\n## Details \r\n\r\n* [dotnet-framework-docker#447](https://github.com/microsoft/dotnet-framework-docker/pull/447) \r\n\r\n.NET Framework tags containing the substring `windowsservercore-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-framework). \r\n\r\n.NET Framework multi-arch tags, such as `4.8`, have been updated to use `windowsservercore-1909` images if your host is Windows Server 1909 or higher. \r\n\r\n### Impacted Repos \r\n\r\n* [dotnet/framework/sdk](https://hub.docker.com/_/microsoft-dotnet-framework-sdk/): .NET Framework SDK \r\n* [dotnet/framework/aspnet](https://hub.docker.com/_/microsoft-dotnet-framework-aspnet/): ASP.NET Runtime  \r\n* [dotnet/framework/wcf](https://hub.docker.com/_/microsoft-dotnet-framework-aspnet/): Windows Communication Foundation \r\n* [dotnet/framework/runtime](https://hub.docker.com/_/microsoft-dotnet-framework-runtime/): .NET Framework Runtime\r\n* [dotnet/framework/samples](https://hub.docker.com/_/microsoft-dotnet-framework-samples/): .NET Framework Samples\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/137","RelatedDescription":"Open issue \".NET Framework Docker images support for Windows Server, version 1909\" (#137)"},{"Id":"521830642","IsPullRequest":false,"CreatedAt":"2019-11-12T22:05:51","Actor":"MichaelSimons","Number":"136","RawContent":null,"Title":".NET Core Docker images support for Windows Server, version 1909","State":"open","Body":"# .NET Core Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Core Docker images have been published for Nano Server, version 1909. \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-docker#1460](https://github.com/dotnet/dotnet-docker/issues/1460)\r\n## Details\r\n\r\n* [dotnet-docker#1457](https://github.com/dotnet/dotnet-docker/pull/1457)\r\n\r\n.NET Core tags containing the substring `nanoserver-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-core).\r\n\r\n.NET Core multi-arch tags, such as `3.0`, have been updated to use `nanoserver-1909` images if your host is Windows Server 1909 or higher.\r\n\r\n### Impacted Repos\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk/): .NET Core SDK\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): ASP.NET Core Runtime\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime/): .NET Core Runtime\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples/): .NET Core Samples\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/136","RelatedDescription":"Open issue \".NET Core Docker images support for Windows Server, version 1909\" (#136)"},{"Id":"520243813","IsPullRequest":false,"CreatedAt":"2019-11-08T21:33:12","Actor":"CESARDELATORRE","Number":"135","RawContent":null,"Title":"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)","State":"open","Body":"This week (coinciding with Microsoft Ignite 2019) we announced the release of **ML.NET 1.4 GA**. \r\nThere are many new features such as:\r\n\r\n- **New Deep Learning Image Classifier (GA):** GPU support for training and inference Image Classifier ML models.\r\n\r\n- **Database Loader  (GA):** You can train your model with data directly from any relational database supported by System.Data.\r\n\r\n- **Enhanced for .NET Core 3.0  (GA):** Performance improvements thanks to hardware intrinsics feature in .NET Core 3.0.\r\n\r\n- **PredictionEnginePool for scalable deployments (GA):** Recommended approach for multi-threaded scalable apps such as ASP.NET Core apps/services and Azure Functions\r\n\r\n- **ML.NET and .NET support in Jupyter notebooks:**  You can now run any .NET code (C# / F#) in Jupyter notebooks and therefore run ML.NET code in it as well. Great for exploring and documenting model training experiments, data distribution exploration, data cleaning, plotting data charts, learning scenarios such as ML.NET courses, hands-on-labs and quizzes, etc.\r\n\r\nSee details in the following **Blog Posts**:\r\n\r\n- [Announcing ML.NET 1.4 general availability (Machine Learning for .NET)](https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-global-availability-machine-learning-for-net/)\r\n\r\n- [Using ML.NET in Jupyter notebooks](https://devblogs.microsoft.com/cesardelatorre/using-ml-net-in-jupyter-notebooks/)\r\n\r\n- [.NET Core with Jupyter Notebooks](https://devblogs.microsoft.com/dotnet/net-core-with-juypter-notebooks-is-here-preview-1/)\r\n","Url":"https://github.com/dotnet/announcements/issues/135","RelatedDescription":"Open issue \"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)\" (#135)"},{"Id":"517169249","IsPullRequest":false,"CreatedAt":"2019-11-04T13:57:09","Actor":"leecow","Number":"134","RawContent":null,"Title":".NET Core 3.1.0 Preview 2","State":"open","Body":".NET Core 3.1.0 Preview 2 is available and https://github.com/dotnet/core/issues/3744 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview2.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-2/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-2/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 2, either responding to https://github.com/dotnet/core/issues/3744, creating a new issue or creating a new issue in one of the following repos:\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/134","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 2\" (#134)"},{"Id":"514753283","IsPullRequest":false,"CreatedAt":"2019-10-30T15:14:43","Actor":"jaredpar","Number":"133","RawContent":null,"Title":"Repository Consolidation Timeline","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27549.*\r\n\r\nAs we [announced](https://github.com/dotnet/announcements/issues/119) [earlier](https://github.com/dotnet/announcements/issues/127) we are planning on consolidating some of the repositories in the dotnet org. Our planning has reached a point where we have a schedule for the coreclr, corefx and core-setupmoves into dotnet/runtime that we want to share out with the community.\r\n\r\n### November 13th\r\nWe’ll move all changes from the original repositories into dotnet/runtime up to 5PM PST on November 13th. We’ll try to help as many pull requests as possible get merged by then. At that point, if there’s any pull requests still open we’ll have to close them. If you’d still like to continue those pull requests, we’d encourage you to bring them to dotnet/runtime in a new pull request.\r\n\r\nThe repositories themselves will be effectively archived at this point. The state of the “master” branch will be recorded with a tag, named “master-archive”, but the branch itself will be deleted. The default branch for the repositories will be named “archive” and it will be a single commit with a README.md and CONTRIBUTING.md file pointing to our dotnet/runtime repository.\r\n\r\nThe repositories will remain active for servicing changes to .NET Core 3.1 and earlier hence we will not be using the GitHub archive capability. \r\n\r\n### November 22nd\r\nThe dotnet/runtime repository will be made public and available for community contribution. Even though the repository will be created on November 13th it will take several days to get it back into a working order: fixing up our build scripts, recreating our Azure Dev Ops build definitions, etc … Until those tasks are completed it will not be possible to accept pull request and hence the repository will remain private. Once we are in a state that pull requests can be merged again the repository will be made public.\r\n\r\nOur expectation is that will occur on November 22nd. If it is ready sooner it will be made public sooner. If the work takes longer than we planned then we will add an update to this announcement with a new expected date.\r\n\r\n### December 1st-2nd\r\nAll issues, open and closed, will be migrated from corefx, coreclr and core-setup into dotnet/runtime. This will be using GitHub’s existing issue transfer feature in a bulk migration. This means all of the existing issue links will continue to function via redirects.\r\n\r\nThis does mean though that labels will not transfer with the issues. Labels will be re-applied as a post processing step by our engineering team once the issue migration completes.\r\n\r\nEven though our issues won’t be fully migrated until this time we’d like the community to begin filing issues on dotnet/runtime as soon as it’s public rather than continuing to file issues on the original repositories.\r\n\r\n### Migrating Commits\r\nThe dotnet/runtime repository will be a new commit history from the original repositories. We are using this consolidation as an opportunity to clean up our history with the goal of having a cleaner, smaller history as a starting point. This means commits will be rewritten in the following ways as they are migrated to dotnet/runtime:\r\n\r\n1. Author information, contributor information, changed file list and time stamps from the original commit will be preserved.\r\n1. Links to issues, pull requests or commits in the repository using GitHub short links will be rewritten so they continue to point the original repository. \r\n1. Every commit will be appended with a link to the original commit it was mapped from.\r\n\r\nThe actual contents of the commit though will be updated to match the new directory layout of the dotnet/runtime repository.","Url":"https://github.com/dotnet/announcements/issues/133","RelatedDescription":"Open issue \"Repository Consolidation Timeline\" (#133)"},{"Id":"513963125","IsPullRequest":false,"CreatedAt":"2019-10-29T14:32:55","Actor":"mthalman","Number":"132","RawContent":null,"Title":"Release of Alpine 3.10 Docker images","State":"open","Body":"# .NET Core Alpine Docker images updated to Alpine 3.10\r\n\r\nDocker images for .NET Core have been released that support Alpine 3.10.  Included with this release, the floating tags for Alpine-based images have been moved from Alpine 3.9 to 3.10.  \r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n[dotnet/dotnet-docker#1418](https://github.com/dotnet/dotnet-docker/issues/1418)\r\n\r\n## Details\r\n* [dotnet/dotnet-docker#1415](https://github.com/dotnet/dotnet-docker/pull/1415)\r\n\r\nIf you made use of a floating tag for Alpine, such as `3.0-alpine`, `2.2-alpine`, and `2.1-alpine`, these have been changed to now reference Alpine 3.10 instead of Alpine 3.9.  Be sure to pull this tag on your Docker machine to get the latest image.\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)","Url":"https://github.com/dotnet/announcements/issues/132","RelatedDescription":"Open issue \"Release of Alpine 3.10 Docker images\" (#132)"},{"Id":"508132491","IsPullRequest":false,"CreatedAt":"2019-10-16T22:28:29","Actor":"leecow","Number":"131","RawContent":null,"Title":".NET Core 3.1.0 Preview 1","State":"open","Body":".NET Core 3.1.0 Preview 1 is available and https://github.com/dotnet/core/issues/3634 has been opened for discussion.\r\n\r\n**Blog round up**\r\n* [.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-1/)\r\n* [ASP.NET Core and Blazor](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-1/)\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview1.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 1, either responding to https://github.com/dotnet/core/issues/3634, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n","Url":"https://github.com/dotnet/announcements/issues/131","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 1\" (#131)"},{"Id":"506832844","IsPullRequest":false,"CreatedAt":"2019-10-14T19:26:10","Actor":"terrajobst","Number":"130","RawContent":null,"Title":".NET Core 3.0 concludes the .NET Framework API porting project","State":"open","Body":"We started in .NET Core 1.0 with a very minimal API set that only included \\~18K of the .NET Framework APIs. With [.NET Standard 2.0](https://devblogs.microsoft.com/dotnet/announcing-net-standard-2-0/), we tried to make it much more viable to share code between .NET Framework, .NET Core, and Xamarin which resulted in approximately 38K .NET Frameworks APIs being available in .NET Core 2.0. We also built the [Windows Compatibility Pack](https://devblogs.microsoft.com/dotnet/announcing-the-windows-compatibility-pack-for-net-core/) which made another 21K .NET Framework APIs available to .NET Core, resulting in almost 60K additional APIs. And in .NET Core 3.0 we added WPF and WinForms, which increased the number of .NET Framework APIs ported to .NET Core to over 120k, which is more than half of all .NET Framework APIs.\r\n\r\nIt’s also worth pointing out that we added about 62K APIs to .NET Core that don’t exist in .NET Framework. If we compare their total number of APIs, .NET Core has about 80% of the API surface of .NET Framework.\r\n\r\n<p align=\"center\">\r\n<img src=\"https://user-images.githubusercontent.com/5169960/66777114-f8db7c80-ee7c-11e9-9161-acfe1c491586.png\" width=\"600\" align=\"center\">\r\n</p>\r\n\r\nWe announced that the [future of .NET](https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/) will be based on .NET Core. And at Build 2019, [Scott Hunter stated](https://www.youtube.com/watch?v=ZlO1utbB2GQ&t=54m20s) that AppDomains, remoting, Web Forms, WCF server, and Windows Workflow won’t be ported to .NET Core.\r\n\r\nWith .NET Core 3.0, we’re at the point where we’ve ported all technologies that are required for modern workloads, be that desktop apps, mobile apps, console apps, web sites, or cloud services. That’s not to say that we don’t have any gaps or opportunities for new technologies, but we generally believe we won’t be finding them in the .NET Framework code base anymore. Moving forward, we’re focusing our resources on incorporating new technologies.\r\n\r\nSimultaneously, we’re looking into releasing more of the [.NET Framework code base under the MIT license](https://github.com/microsoft/referencesource) on GitHub to allow the community to create OSS projects for technologies we’re not intending to bring to .NET Core. For example, there already are community projects for [CoreWF](https://github.com/UiPath/corewf) and [CoreWCF](https://github.com/CoreWCF/CoreWCF).\r\n\r\nWe’d like to thank everyone who filed issues with requests for APIs being ported. Those issues allowed us to prioritize and close the gaps that prevented people from porting to .NET Core.\r\n\r\nBut since we generally no longer plan to bring existing technologies from .NET Framework to .NET Core we’ll be closing all issues that are [labeled with port-to-core](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Aport-to-core).\r\n\r\n### Discussion\r\n\r\nTo discuss this issue, please comment on the corresponding issue at https://github.com/dotnet/corefx/issues/41769.","Url":"https://github.com/dotnet/announcements/issues/130","RelatedDescription":"Open issue \".NET Core 3.0 concludes the .NET Framework API porting project\" (#130)"},{"Id":"505445666","IsPullRequest":false,"CreatedAt":"2019-10-10T18:45:56","Actor":"TaraOverfield","Number":"129","RawContent":null,"Title":"October 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework October 2019 Cumulative Update for Windows 10 version 1903 and version 1909](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-cumulative-updates-windows-10-version-1903-and-windows-10-version-1909/)\r\n* [.NET Framework October 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-preview-of-quality-rollup/)\r\n* [.NET Framework October 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/129","RelatedDescription":"Open issue \"October 2019 .NET Updates\" (#129)"},{"Id":"505328689","IsPullRequest":false,"CreatedAt":"2019-10-10T15:19:53","Actor":"carloreggiani","Number":"128","RawContent":null,"Title":"Docker Stop return status Exited \"(3221225786)\"","State":"closed","Body":"Hi\r\nI'm investigating a issue regarding official MCR images on a Win2019 server with Docker EE engine 19.03.2.\r\n\r\nThe images that I'm unsing are:\r\nmcr.microsoft.com/windows/servercore:1809\r\nmcr.microsoft.com/dotnet/framework/aspnet:4.8\r\n\r\nStopping containers based on these images (\"docker stop\" command) I'm getting: \r\n\"Exited (3221225786)\"\r\n\r\nOn linux a stop command normally return: \"Exited (137)\"\r\n\r\nIs it a normal behaviour? What's means 3221225786?\r\n\r\nThanks for any support\r\n\r\nCarlo","Url":"https://github.com/dotnet/announcements/issues/128","RelatedDescription":"Closed issue \"Docker Stop return status Exited \"(3221225786)\"\" (#128)"},{"Id":"504325600","IsPullRequest":false,"CreatedAt":"2019-10-08T23:14:11","Actor":"terrajobst","Number":"127","RawContent":null,"Title":"Consolidated repo names","State":"open","Body":"[ann]: https://github.com/dotnet/announcements/issues/119\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions), and some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarity \r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarity\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!\r\n\r\n### Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27096.","Url":"https://github.com/dotnet/announcements/issues/127","RelatedDescription":"Open issue \"Consolidated repo names\" (#127)"},{"Id":"504304108","IsPullRequest":false,"CreatedAt":"2019-10-08T22:06:07","Actor":"MichaelSimons","Number":"126","RawContent":null,"Title":"4.7.x .NET Framework SDK Docker images no longer published","State":"open","Body":"# 4.7.x .NET Framework SDK Docker images no longer published\r\n\r\nThe [4.7.x .NET Framework SDK Docker images](https://hub.docker.com/_/microsoft-dotnet-framework-sdk) will no longer be published after Oct. 8, 2019.  The 4.8 image tags should be used as a replacement.\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [microsoft/dotnet-framework-docker#428](https://github.com/microsoft/dotnet-framework-docker/issues/428)\r\n\r\n## Details\r\n\r\nAny references to the following SDK tags should be updated to reference `4.8` instead:\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2019`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2019`\r\n\r\nIf you haven't migrated to using images from [MCR](https://github.com/dotnet/announcements/issues/101) and are still using the .NET Framework repos on Docker Hub, you will need to update your tag references to MCR.  This is because the 4.8 images only exist on MCR.  These are the following Docker Hub tags that are affected and should be updated to reference the [4.8 tags at the MCR location](https://hub.docker.com/_/microsoft-dotnet-framework-sdk):\r\n* `microsoft/dotnet-framework:4.7.1-sdk`\r\n* `microsoft/dotnet-framework:4.7.1-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-1803`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019`","Url":"https://github.com/dotnet/announcements/issues/126","RelatedDescription":"Open issue \"4.7.x .NET Framework SDK Docker images no longer published\" (#126)"},{"Id":"502102886","IsPullRequest":false,"CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Number":"125","RawContent":null,"Title":"Alpine Docker images no longer include the tzdata package in 3.0","State":"open","Body":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Open issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125)"},{"Id":"497868605","IsPullRequest":false,"CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Number":"124","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.0","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n","Url":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.0\" (#124)"},{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework September 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-security-and-quality-rollup/)\r\n* [.NET Framework September 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1204172743760965633","CreatedAt":"2019-12-09T22:55:29+00:00","UserScreenname":"dotnet","Text":"We made Windows Server Core container images &gt;40% smaller https://t.co/jNNDqjdxai","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":107,"FavoriteCount":43,"RawContent":null},{"Id":"1204144947089289216","CreatedAt":"2019-12-09T21:05:01+00:00","UserScreenname":"dotnet","Text":"Hey! #dotNET Devs! Are you thinking about trying out #VS4Mac? This will help you get started with @VisualStudioMac… https://t.co/y8KLQbz1Te","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":15,"FavoriteCount":8,"RawContent":null},{"Id":"1204075997118828546","CreatedAt":"2019-12-09T16:31:03+00:00","UserScreenname":"dotnet","Text":"Get the latest #Blazor updates c/o Daniel Roth from the latest #ASPNET Community Standup. Watch, learn, and join us… https://t.co/1LQRVqeaAX","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":49,"FavoriteCount":21,"RawContent":null},{"Id":"1203984130083414017","CreatedAt":"2019-12-09T10:26:00+00:00","UserScreenname":"dotnet","Text":"Have you heard about the new @Azure SDKs for .NET? Learn about them in this episode of On .NET\n\n🚀Exploring the new… https://t.co/JZsvPXgS8t","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":37,"FavoriteCount":18,"RawContent":null},{"Id":"1203060298682437634","CreatedAt":"2019-12-06T21:15:01+00:00","UserScreenname":"dotnet","Text":"This post has a really good summary of all the new goodies we get with the new #ASPNET Core update in #dotNET Core… https://t.co/r9HOw6XwuI","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":107,"FavoriteCount":71,"RawContent":null},{"Id":"1202989101215100935","CreatedAt":"2019-12-06T16:32:06+00:00","UserScreenname":"dotnet","Text":".NET Core 3.1 has just been released and now has a small set of fixes and refinements. But better still, is that it… https://t.co/uc9oL3D9Mo","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":176,"FavoriteCount":89,"RawContent":null},{"Id":"1202854424793640965","CreatedAt":"2019-12-06T07:36:57+00:00","UserScreenname":"dotnet","Text":"Updates to .NET Core Windows Forms designer in Visual Studio 16.5 Preview 1 https://t.co/FjgjvnYVyR","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":12,"RawContent":null},{"Id":"1202854328781770752","CreatedAt":"2019-12-06T07:36:34+00:00","UserScreenname":"dotnet","Text":".NET Core 2.2 will reach End of Life on December 23, 2019 https://t.co/OzbuhSEOW1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":142,"FavoriteCount":109,"RawContent":null},{"Id":"1202628706289831937","CreatedAt":"2019-12-05T16:40:01+00:00","UserScreenname":"dotnet","Text":"Close out the year with a new set of @VisualStudioMac skills: https://t.co/J4j33DzKol\n✅ Get started on a new app us… https://t.co/SYPetluzdr","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":15,"FavoriteCount":8,"RawContent":null},{"Id":"1202626182270734336","CreatedAt":"2019-12-05T16:30:00+00:00","UserScreenname":"dotnet","Text":"Check out @jeffhollan on #OnDotNet talking about \n\nBuilding Serverless web applications with Blazor and Azure Funct… https://t.co/8ZbwpmTnHI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":30,"FavoriteCount":19,"RawContent":null},{"Id":"1202348106504908800","CreatedAt":"2019-12-04T22:05:01+00:00","UserScreenname":"dotnet","Text":"#OnDotNET talks to the Azure SDK team 😎 about the new iteration of Azure SDKs.\n\nThey discuss things like what's dif… https://t.co/CCgmWqxXWc","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":22,"FavoriteCount":11,"RawContent":null},{"Id":"1202276886145052672","CreatedAt":"2019-12-04T17:22:01+00:00","UserScreenname":"dotnet","Text":"Are you coding for globalization? Consider benchmarking your code to see what works best for your project and futur… https://t.co/WvqGWjUviL","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":44,"FavoriteCount":16,"RawContent":null}]}},"RunOn":"2019-12-10T05:30:40.1558662Z","RunDurationInMilliseconds":16741}