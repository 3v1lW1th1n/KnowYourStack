{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-19T00:44:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11998881006","Type":"PullRequestEvent","CreatedAt":"2020-04-08T21:18:01","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7939","RelatedDescription":"Merged pull request \"[A11y]Accessibility fixes 2\" (#7939) at NuGet/NuGetGallery","RelatedBody":"Follow-up to https://github.com/NuGet/NuGetGallery/pull/7927\r\nAddresses the following issues:\r\n[A11y]Narrator is not reading the labels for \"Select Version(s)\" drop-down and \"Select reason(s)\" check-box group #7888\r\n - Update the descriptions on these to indicate context.\r\n\r\n[A11y]The narrator announces same name for all 3 actionable images present under Owner section #7883\r\n - Updated gravatar image alt text to include username\r\n\r\n[A11y]Incorrect name property provided for the \"Custom\" tab item. #7884\r\n - Updated descriptions to include proper title."},{"Id":"11989192406","Type":"PullRequestEvent","CreatedAt":"2020-04-08T02:10:52","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7939","RelatedDescription":"Opened pull request \"[A11y]Accessibility fixes 2\" (#7939) at NuGet/NuGetGallery","RelatedBody":"Follow-up to https://github.com/NuGet/NuGetGallery/pull/7927\r\nAddresses the following issues:\r\n[A11y]Narrator is not reading the labels for \"Select Version(s)\" drop-down and \"Select reason(s)\" check-box group #7888\r\n - Update the descriptions on these to indicate context.\r\n\r\n[A11y]The narrator announces same name for all 3 actionable images present under Owner section #7883\r\n - Updated gravatar image alt text to include username\r\n\r\n[A11y]Incorrect name property provided for the \"Custom\" tab item. #7884\r\n - Updated descriptions to include proper title."},{"Id":"11988545256","Type":"IssuesEvent","CreatedAt":"2020-04-08T00:04:57","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7892","RelatedDescription":"Closed issue \"[A11y]On 'T' key press in scan mode, Narrator is reading out every row in the same table\" (#7892) at NuGet/NuGetGallery","RelatedBody":"Copied from https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1069968\r\nScreen Reader: \r\nNarrator\r\n​\r\nRepro Steps:​\r\n1.Start Screen Reader. Hit the URL \"https://www.nuget.org\"\r\n2.Tab till \"Packages\" link in the top navigation and press enter​\r\n3.Tab till any existing package and press enter​\r\n4.Tab till \"GitHub Usage\" section and press enter​ to expand it\r\n5.Turn on scan mode for Narrator using Caps Lock+ Space bar\r\n6.Using 'T' key, navigate to different tables on the page\r\n7.Check if the Narrator is navigating to different rows of the same table on 'T' key press\r\n​\r\nActual Result:​\r\nOn 'T' key press in scan mode, Narrator is reading out every row in the same table\r\n\r\nNOTE: NVDA is working as expected(added attachment for reference)\r\n\r\nExpected Result:​\r\nOn 'T' key press in scan mode, Narrator focus should navigate to different tables of the page and not to different rows in same table\r\n\r\nNotes:\r\nThis seems related to https://github.com/NuGet/NuGetGallery/issues/7891 in the narrator is seeing tables where there are not any.\r\nI suspect that the rows in the GitHub usage section are being read as tables, either from layout or explicit tags. We should modify this section to look more like the version table below it."},{"Id":"11988235523","Type":"PullRequestEvent","CreatedAt":"2020-04-07T23:08:25","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7938","RelatedDescription":"Opened pull request \"[ReleasePrep][2020-04-07] RI dev to master\" (#7938) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11988178123","Type":"IssuesEvent","CreatedAt":"2020-04-07T22:58:44","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7937","RelatedDescription":"Opened issue \"[2020-04-06] Deployment\" (#7937) at NuGet/NuGetGallery","RelatedBody":"### Gallery\r\n#### Changes\r\nConfiguration update with new auto-scale changes. No code changes so far.\r\n#### Build/release.\r\nin progress.\r\n#### Progress\r\n - [ ] DEV\r\n - [ ] INT \r\n - [ ] PROD\r\n\r\n### Search\r\n#### Changes\r\nConfiguration update to disable TLS 1.0/1.1 in INT only (DEV already has it out, PROD still has those enabled).\r\n#### Release\r\nhttps://dev.azure.com/devdiv/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=636889\r\n#### Progress\r\n - [ ] INT (only!!!)"},{"Id":"11988080679","Type":"PullRequestEvent","CreatedAt":"2020-04-07T22:42:22","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7936","RelatedDescription":"Merged pull request \"Add CustomerResourceId to enrich push metrics with tenant ID\" (#7936) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/3106\r\n"},{"Id":"11986879365","Type":"PullRequestEvent","CreatedAt":"2020-04-07T20:08:22","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7936","RelatedDescription":"Opened pull request \"Add CustomerResourceId to enrich push metrics with tenant ID\" (#7936) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/3106\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12001228049","Type":"IssuesEvent","CreatedAt":"2020-04-09T04:25:43","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9126","RelatedDescription":"Closed issue \"Docker dotnet restore file already exists\" (#9126) at NuGet/Home","RelatedBody":"## Details about Problem\r\n/usr/share/dotnet/sdk/2.2.207/NuGet.targets(119,5): error : The file '/app/.nupkg/system.numerics.vectors/4.4.0/system.numerics.vectors.nuspec' already exists.\r\n\r\nNuGet product used: dotnet restore\r\nNuGet version (x.x.x.xxx): not sure how to check nuget version\r\ndotnet.exe --version: 2.2.207\r\nOS version (i.e. win10 v1607 (14393.321)): win10 19551 pro\r\nSDK Docker image: mcr.microsoft.com/dotnet/core/sdk:2.2-alpine\r\nDocker version 19.03.5, build 633a0ea\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nMount app in docker image mcr.microsoft.com/dotnet/core/sdk:2.2-alpine and run restore\r\n```bash\r\ndotnet restore ./MyApp --packages .nupkg --runtime linux-musl-x64\r\n```\r\n\r\nRunning the dotnet from windows directly does not cause issues.\r\nTested with dotnet sdk image 3.1 as well, same results.\r\nNuget package does not matter, it can happen with any package.\r\n\r\n### Verbose Logs\r\nhttps://filebin.net/p2csdej08vp8ln1b/logs.txt?t=suthfyn8\r\n"},{"Id":"11999485244","Type":"IssuesEvent","CreatedAt":"2020-04-08T22:43:52","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7714","RelatedDescription":"Closed issue \"No documentation for 'bring your own access token' with NuGet client libraries\" (#7714) at NuGet/Home","RelatedBody":"I am trying to use the NuGet client SDK to access a protected feed (hosted on Azure DevOps). I need to perform some operations that aren't directly supported by existing NuGet apps or ADO build pipeline tasks, which is why I'm programming directly against the SDK. The relevant code will be running as part of a build pipeline. It's not entirely clear how NuGet clients are supposed to authenticate in this scenario, but having asked some ALM MVPs, they've pointed me at the `system.accesstoken` build variable.\r\n\r\nIf I program directly against the NuGet REST API with HTTP requests, this works fine—I'm able to get the token from that build variable, and it works just fine for accessing the protected feed. I just need to put the token into the HTTP request's `Authorization` header, prefixed with `Bearer `, and the ADO package feed is happy to talk to me.\r\n\r\nBut I don't want to work directly at the HTTP level. I was hoping to use the NuGet client SDK, because it has a whole load of well thought out and extensively tested support for working with NuGet feeds.\r\n\r\nUnfortunately, the [NuGet Client SDK docs](https://docs.microsoft.com/en-us/nuget/reference/nuget-client-sdk) appear to consist entirely of \"Go read these three blog entries, and then because those were written in 2016 and there have been important changes since then, meaning that what you've just read is out of date, now read this fourth blog entry.\"\r\n\r\nHere's my starting point:\r\n\r\n```csharp\r\nSourceRepository source = Repository.Factory.GetCoreV3(\"https://api.nuget.org/v3/index.json\");\r\nListResource listResource = source.GetResource<ListResource>();\r\nIEnumerableAsync<IPackageSearchMetadata> x = await listResource.ListAsync(\r\n    \"Endjin.Retry\",\r\n    prerelease: false,\r\n    allVersions: true,\r\n    includeDelisted: false,\r\n    log: new NullLogger(),\r\n    token: CancellationToken.None);\r\n\r\nIEnumeratorAsync<IPackageSearchMetadata> e = x.GetEnumeratorAsync();\r\nwhile (await e.MoveNextAsync())\r\n{\r\n    IPackageSearchMetadata c = e.Current;\r\n    Console.WriteLine(c.Identity);\r\n}\r\n```\r\n\r\nThis works well enough against the public NuGet.org feed (although given the state of the documentation I've no idea whether this is the best way to do this). It searches for the publicly listed `Endjin.Retry` package. It finds it. This is good.\r\n\r\nHowever, if I replace the URL there with the one for my private feed: \"https://pkgs.dev.azure.com/IanGriffiths/_packaging/Ian.LibraryVersioningExperiment/nuget/v3/index.json\" I get this error:\r\n\r\n`System.AggregateException: One or more errors occurred. (Unable to load the service index for source https://pkgs.dev.azure.com/IanGriffiths/_packaging/Ian.LibraryVersioningExperiment/nuget/v3/index.json.) ---> NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source https://pkgs.dev.azure.com/IanGriffiths/_packaging/Ian.LibraryVersioningExperiment/nuget/v3/index.json. ---> System.Net.Http.HttpRequestException: Response status code does not indicate success: 401 (Unauthorized).`\r\n\r\nThis seems to occur inside the call to `source.GetResource<ListResource>()`.\r\n\r\nThis is unsurprising of course—this is a protected feed, and my code has not yet made any attempt to supply credentials, so you'd expect it to fail.\r\n\r\nBut the question is: how am I supposed to supply a token?\r\n\r\nIt looks like `HttpHandlerResourceV3Provider.cs` is where it sets up the `HttpClientHandler` and `HttpMessageHandler`. In particular, I found at https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Protocol/HttpSource/HttpHandlerResourceV3Provider.cs#L62 this code:\r\n\r\n```csharp\r\nmessageHandler = new StsAuthenticationHandler(packageSource, TokenStore.Instance)\r\n{\r\n    InnerHandler = messageHandler\r\n};\r\n```\r\n\r\nThis made me wonder if I needed to supply the token store with my token. So I tried adding this line before doing anything else with the client libraries:\r\n\r\n```csharp\r\nTokenStore.Instance.AddToken(new Uri(FeedUrl), token);\r\n```\r\nBut it made no difference. And although I can't claim to have understood how 'STS Authentication' fits into this code, it appears it sets the `X-NuGet-STS-Token` header. But the token I've got is for use as an HTTP Authorization Bearer header. In case it's relevant, here's the decoded body of the JWT that I've got:\r\n\r\n```json\r\n{\r\n  \"nameid\": \"fb6c9195-1108-490b-a5a2-1d36f69972af\",\r\n  \"scp\": \"app_token\",\r\n  \"aui\": \"1e7bc101-05e3-4396-8ae2-481fd28eed86\",\r\n  \"sid\": \"f3614a90-e4df-4cf5-ad12-f2f3f0c14fa8\",\r\n  \"iss\": \"app.vstoken.visualstudio.com\",\r\n  \"aud\": \"app.vstoken.visualstudio.com|vso:49ebc6d2-c78c-4aa6-96af-1a4273e6143b\",\r\n  \"nbf\": 1548066236,\r\n  \"exp\": 1548071036\r\n}\r\n```\r\n\r\nTo reiterate, this works just fine against the package feed when I hit it manually from Postman. (Obviously I need to get a new token every now and then because they expire, but I've manually verified that the token I'm trying to use with the NuGet Client SDK is still valid even after seeing 401 failures in my app by using it again directly against the HTTP API.)\r\n\r\nI've cloned the `NuGet/NuGet.Client` repo and searched it for use of the `Authorization` header, and the only place it shows up directly is in unit tests, all of which appear to be looking for basic auth. So it appears that the client doesn't set the Authorization header directly. As far as I can tell, instead it sets the `HttpClientHandler.Credentials` property with an `HttpSourceCredentials`. This seems to end up providing a `NetworkCredential`, and it's not clear whether it's even possible to set the `Authorization` header to a `Bearer` token with one of those. Pretty much every example out there showing how to use bearer tokens in .NET does it by setting the `Headers.Authorization` property on the `HttpRequestMessage`.\r\n\r\nSo the 'obvious' mechanisms for that would be either to use the `HttpClient.DefaultRequestHeaders`, or to insert an `HttpMessageHandler`, but it looks like the creation of the client and handler chain is all locked up inside `HttpHandlerResourceV3Provider` and is not open to extension.\r\n\r\nI took a look at https://github.com/Microsoft/artifacts-credprovider too, and from that I get the impression that it doesn't actually set a Bearer token either.\r\n\r\nAt this point I dredged up a dim memory that with ADO APIs, you can also use basic auth, with anything you like as the username and a PAT as the password, so I tried this:\r\n\r\n```csharp\r\nprivate class Creds : ICredentialProvider\r\n{\r\n    private readonly string token;\r\n\r\n    public Creds(string token)\r\n    {\r\n        this.token = token;\r\n    }\r\n\r\n    public string Id { get; }\r\n\r\n    public Task<CredentialResponse> GetAsync(Uri uri, IWebProxy proxy, CredentialRequestType type, string message, bool isRetry, bool nonInteractive, CancellationToken cancellationToken)\r\n    {\r\n        return Task.FromResult(new CredentialResponse(new NetworkCredential(\"x\", this.token)));\r\n    }\r\n}\r\n```\r\n\r\nand also this:\r\n\r\n```csharp\r\nvar ps = new AsyncLazy<IEnumerable<ICredentialProvider>>(() => Task.FromResult<IEnumerable<ICredentialProvider>>(new ICredentialProvider[] { new Creds(token) }));\r\nHttpHandlerResourceV3.CredentialService = new Lazy<ICredentialService>(() => new CredentialService(ps, true, true));\r\n```\r\n\r\nThis has in fact enabled me to move forwards. But I'm left with a feeling of \"Surely this isn't what we're actually expected to do?\"\r\n\r\n\r\n## Details about Problem\r\n\r\nNuGet product used: NuGet Client SDK (`NuGet.Credentials`, `NuGet.Protocol`) \r\n\r\nPackage versions: 4.9.2\r\n\r\nOS version: Windows 10 v1809 (17763.253)\r\n\r\n\r\nTagging @rrelyea since he offered to help with this on Twitter"},{"Id":"11999474359","Type":"IssuesEvent","CreatedAt":"2020-04-08T22:42:04","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9233","RelatedDescription":"Closed issue \"document valid-authentication-types better\" (#9233) at NuGet/Home","RelatedBody":"from PR comment:\r\nhttps://github.com/NuGet/NuGet.Client/pull/3253#discussion_r382891553\r\n\r\nWhat are all the available authentication types? Should we give a quick synopsis on what basic and negotiate means? Are there additional docs on these types that we can link? I would recommend wrapping the example in a code block: basic,negotiate"},{"Id":"11999428550","Type":"IssuesEvent","CreatedAt":"2020-04-08T22:34:27","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9178","RelatedDescription":"Closed issue \"[Directory.Build.props] Using PackageReferences with Nuget packages from custom nuget feed\" (#9178) at NuGet/Home","RelatedBody":"_From @ceregador on Friday, February 14, 2020 3:07:17 PM_\r\n\r\nWe use Directory.Build.props in several solutions to inject common PackageReference (StyleCop.Analyzers) to solution's projects to enable linting:\r\n\r\n`<PackageReference Include=\"StyleCop.Analyzers\" Version=\"1.1.118\" PrivateAssets=\"all\" />`\r\n\r\nEvery solution contains its own ruleset but the rules are the same.\r\nSo we decided to create one common ruleset and provide it with all necessary files via Nuget package.\r\nThis Nuget package is hosted by our company's Nuget server and it has StyleCop.Analyzers as dependency.\r\n\r\nWe also use other Nuget packages from this server so Visual Studio Nuget package sources contain the url.\r\n\r\nBut if I add PackageReference with this package to Directory.Build.props, Visual Studio (2019) will not restore this package.\r\n`<PackageReference Include=\"NugetPackage.FromInternalFeed\" Version=\"1.0.0\" PrivateAssets=\"all\" />`\r\n\r\nI tried Restore Nuget Packages and Build/Rebuild commands from the ui.\r\n\r\nIt seems Nuget packages from custom feeds are ignored and not restored.\r\n\r\nDoes Directory.Build.props ignore Nuget packages from custom feeds?\r\nShould I do some additional actions to enable this process?\r\n\r\n_Copied from original issue: microsoft/msbuild#5128_"},{"Id":"11999424364","Type":"IssuesEvent","CreatedAt":"2020-04-08T22:33:48","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9156","RelatedDescription":"Closed issue \"non-SDK style project with PackageReference with no version has bad error in Visual Studio\" (#9156) at NuGet/Home","RelatedBody":"See this Developer Community issue: https://developercommunity.visualstudio.com/content/problem/905757/nuget-restore-fails-with-error-systemargumentexcep.html\r\n\r\nSteps to reproduce:\r\n\r\n1. Create .NET Framework project (console app or class lib, it doesn't matter. Just needs to be not SDK style project).\r\n2. Add a package to the project, using `PackageReference`\r\n3. Unload the project\r\n4. Edit the `PackageReference` and set the version to an empty string\r\n5. Reload the project\r\n6. Restore\r\n\r\nExpected: error message saying which project and which package has a bad version\r\n\r\nActual:\r\n> Error occurred while restoring NuGet packages: '' is not a valid version string."},{"Id":"11998266640","Type":"IssuesEvent","CreatedAt":"2020-04-08T20:07:37","Actor":"wli3","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9412","RelatedDescription":"Opened issue \"Add multiple packages to existing project\" (#9412) at NuGet/Home","RelatedBody":"_From @akshaybabloo on Monday, March 23, 2020 10:27:33 PM_\r\n\r\nIs it possible to add multiple packages to existing project using the CLI?\r\n\r\n_Copied from original issue: dotnet/sdk#10970_"},{"Id":"11998126904","Type":"IssuesEvent","CreatedAt":"2020-04-08T19:51:35","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9411","RelatedDescription":"Closed issue \"WARNING: Error reading msbuild project information, ensure that your input solution or project file is valid. NETCore and UAP projects will be skipped, only packages.config files will be restored.\" (#9411) at NuGet/Home","RelatedBody":"In NuGet 4.7 and later, we started loading msbuild project files in a faster way. This faster way had the side effect of not being forgiving when loading msbuild project files that have includes to .props/.targets files that don't exist when being evaluated.\r\n\r\nwhen running \"nuget.exe restore foo.sln\"\r\nyou may see: WARNING: Error reading msbuild project information, ensure that your input solution or project file is valid. NETCore and UAP projects will be skipped, only packages.config files will be restored.\r\n\r\nThe best way to fix this is to hunt down the problems in your projects.\r\n\r\nmy technique in command prompt if you are in the solution directory:\r\n\r\n> dir *.csproj /s/b > projects.txt\r\n> for /f %1 in (projects.txt) do nuget restore %1\r\n\r\nread through the output to see which project have restore errors and fix those projects.\r\n\r\na workaround to this, which you shouldn't use long term (!!!!):\r\nset RestoreUseSkipNonexistentTargets to false in a project or via envvar:\r\nsee https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#restore-target"},{"Id":"11998116983","Type":"IssuesEvent","CreatedAt":"2020-04-08T19:50:27","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9411","RelatedDescription":"Opened issue \"WARNING: Error reading msbuild project information, ensure that your input solution or project file is valid. NETCore and UAP projects will be skipped, only packages.config files will be restored.\" (#9411) at NuGet/Home","RelatedBody":"In NuGet 4.7 and later, we started loading msbuild project files in a faster way. This faster way had the side effect of not being forgiving when loading msbuild project files that have includes to .props/.targets files that don't exist when being evaluated.\r\n\r\nwhen running \"nuget.exe restore foo.sln\"\r\nyou may see: WARNING: Error reading msbuild project information, ensure that your input solution or project file is valid. NETCore and UAP projects will be skipped, only packages.config files will be restored.\r\n\r\nThe best way to fix this is to hunt down the problems in your projects.\r\n\r\nmy technique in command prompt if you are in the solution directory:\r\n\r\n> dir *.csproj /s/b > projects.txt\r\n> for /f %1 in (projects.txt) do nuget restore %1\r\n\r\nread through the output to see which project have restore errors and fix those projects.\r\n\r\na workaround to this, which you shouldn't use long term (!!!!):\r\nset RestoreUseSkipNonexistentTargets to false in a project or via envvar:\r\nsee https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#restore-target"},{"Id":"11998050965","Type":"IssuesEvent","CreatedAt":"2020-04-08T19:42:46","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9407","RelatedDescription":"Closed issue \"Source link missing symbols\" (#9407) at NuGet/Home","RelatedBody":"Hi,\r\n\r\nAm new to Nuget Package Explorer. i tried to package my dll using utube videos but am getting some error as missing symbols at Health. please advise what i done wrong here\r\n\r\nattached the Screenshot for your reference\r\n\r\nThanks.\r\n![Nuget Error](https://user-images.githubusercontent.com/62982614/78778049-3d714c00-79b8-11ea-8a62-1046684f2b05.PNG)\r\n"},{"Id":"11997958041","Type":"IssuesEvent","CreatedAt":"2020-04-08T19:32:00","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9146","RelatedDescription":"Closed issue \"Docs & SDK code for: add `dotnet nuget <add|remove|update|disable|enable|list> source` command\" (#9146) at NuGet/Home","RelatedBody":"Still needed to finish [NuGet/Home#4126] add `dotnet nuget <add|remove|update|disable|enable|list> source` command:\r\n- [ ] docs.tt \r\n- [x] docs into dotnet docs repo\r\n- [ ] sdk checkin\r\n- [ ] anything else"},{"Id":"11997623066","Type":"IssuesEvent","CreatedAt":"2020-04-08T18:54:44","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9408","RelatedDescription":"Closed issue \"PoM/BoM Project/Bill of Materials\" (#9408) at NuGet/Home","RelatedBody":"_From @peni4142 on Wednesday, April 8, 2020 10:50:25 AM_\r\n\r\nI am missing a Project of Materials!\r\n\r\nWhat I expect that to be.\r\n\r\nIf you include that thing(can even be one file), you are only allowed to include NugetPackages from that List, but you don't have to.\r\n\r\nThe benefit I expect from that is nothing less than to solve the DLL-hell.\r\n\r\nYou can define one in your company, including that in every project and you all have the same DLLs/NugetPackages.\r\n\r\n### case studies:\r\n- **Update/add/delete a Package** Maybe you have it in a git project. You make a Pull-Request, your buddies can agree or disagree. On agree, everyone has to update.\r\n\r\n- **You get to know a Package is corrupt** Just delete it and you are sure, no one is using that anymore\r\n\r\n\r\n\r\n\r\n\r\n_Copied from original issue: microsoft/msbuild#5251_"},{"Id":"11997068510","Type":"IssuesEvent","CreatedAt":"2020-04-08T17:53:06","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/2545","RelatedDescription":"Closed issue \"Make errors easier to spot errors in restore output\" (#2545) at NuGet/Home","RelatedBody":"It would be nice if errors were easier to visually spot in the restore output.  Often there is a tremendous amount of output while restoring.  The first thing that comes to mind is to color errors red just like what is typically done with build errors.\n\n```\nroot@4f5d809bb35f:/app2# dotnet restore\nlog  : Restoring packages for /app2/project.json...\ninfo :   GET https://api.nuget.org/v3-flatcontainer/microsoft.netcore.app/index.json\ninfo :   NotFound https://api.nuget.org/v3-flatcontainer/microsoft.netcore.app/index.json 452ms\nerror: Unable to resolve 'Microsoft.NETCore.App (>= 1.0.0-rc2-3002374)' for '.NETCoreApp,Version=v1.0'.\ninfo : Committing restore...\nlog  : Writing lock file to disk. Path: /app2/project.lock.json\nlog  : /app2/project.json\nlog  : Restore failed in 977ms.\n\nErrors in /app2/project.json\n    Unable to resolve 'Microsoft.NETCore.App (>= 1.0.0-rc2-3002374)' for '.NETCoreApp,Version=v1.0'.\n\nNuGet Config files used:\n    /root/.nuget/NuGet/NuGet.Config\n\nFeeds used:\n    https://api.nuget.org/v3/index.json\n```\n"},{"Id":"11997029098","Type":"IssuesEvent","CreatedAt":"2020-04-08T17:48:46","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/3786","RelatedDescription":"Closed issue \"Use the same time format for all logs\" (#3786) at NuGet/Home","RelatedBody":"The below example has three different formats for the time, these should all be the same if possible.\n\n```\nRestoring packages for c:\\users\\user\\documents\\visual studio 2017\\Projects\\ConsoleApp2\\ConsoleApp2\\ConsoleApp2.csproj...\nRestoring packages for c:\\users\\user\\documents\\visual studio 2017\\Projects\\ConsoleApp2\\ConsoleApp2\\ConsoleApp2.csproj...\nInstalling System.Runtime.Serialization.Primitives 4.1.1.\nInstalling Newtonsoft.Json 9.0.1.\nInstalling NuGet package Newtonsoft.Json.9.0.1.\nCommitting restore...\nWriting lock file to disk. Path: c:\\users\\juste\\documents\\visual studio 2017\\Projects\\ConsoleApp2\\ConsoleApp2\\obj\\project.assets.json\nGenerating MSBuild file c:\\users\\juste\\documents\\visual studio 2017\\Projects\\ConsoleApp2\\ConsoleApp2\\obj\\ConsoleApp2.csproj.nuget.g.targets.\nGenerating MSBuild file c:\\users\\juste\\documents\\visual studio 2017\\Projects\\ConsoleApp2\\ConsoleApp2\\obj\\ConsoleApp2.csproj.nuget.g.props.\nRestore completed in 1936.8211ms for c:\\users\\juste\\documents\\visual studio 2017\\Projects\\ConsoleApp2\\ConsoleApp2\\ConsoleApp2.csproj.\nSuccessfully installed 'Newtonsoft.Json 9.0.1' to ConsoleApp2\nSuccessfully installed 'System.Runtime.Serialization.Primitives 4.1.1' to ConsoleApp2\nExecuting nuget actions took 6.37 sec\n========== Finished ==========\nTime Elapsed: 00:00:11.4389288\n```\n"},{"Id":"11997011610","Type":"IssuesEvent","CreatedAt":"2020-04-08T17:46:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5420","RelatedDescription":"Closed issue \"Branding: VS 2017 15.3 update should start using the latest NuGet logo\" (#5420) at NuGet/Home","RelatedBody":"1. Ensure the logo is accessibility compliant\r\n2. Replace the NuGet logo everywhere in VS 2017\r\n3. When the package does not have any logo, the default logo should also be updated"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"},{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-04-09T05:30:39.2494356Z","RunDurationInMilliseconds":2645}