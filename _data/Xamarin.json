{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin and Azure Office Hours Recap from December 2018 and January 2019","PublishedOn":"2019-02-21T18:11:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"That&#8217;s right, I ❤️ every single one of you(!) and I want to know more about your stories building mobile apps. I want to hear stories of your successes and also, the not-so-successful...","Href":"https://blog.xamarin.com/xamarin-azure-office-hours-recap-december-january/","RawContent":null},{"Title":"Persisting Settings and Preferences in Mobile Apps with Xamarin.Essentials","PublishedOn":"2019-02-19T19:56:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"An essential part of any mobile application is the ability to persist data. Sometimes that is a large amount of data that requires a database, but often it is smaller pieces of data such as settings...","Href":"https://blog.xamarin.com/persisting-settings-preferences-mobile-apps-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Developer Blog is Getting an Update!","PublishedOn":"2019-02-15T18:56:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Next week, the Xamarin Developer Blog will be migrating to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great content. Starting...","Href":"https://blog.xamarin.com/xamarin-developer-blog-is-getting-an-update/","RawContent":null},{"Title":"Visual Studio Mobile Developer Podcast: Releases, Previews, and Roadmaps!","PublishedOn":"2019-02-13T19:56:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. In this episode, we discuss the best of...","Href":"https://blog.xamarin.com/podcast-releases-previews-roadmaps/","RawContent":null},{"Title":"Easily Check Mobile Device Connectivity with Xamarin.Essentials","PublishedOn":"2019-02-12T19:06:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the best parts of a mobile device is their instant access to the internet. As a mobile app developer, it&#8217;s great to be able to pull data from the server to our apps to provide users with...","Href":"https://blog.xamarin.com/easily-check-mobile-device-connectivity-with-xamarin-essentials/","RawContent":null},{"Title":"5 Things You’ll Love in Xamarin.Forms 3.5","PublishedOn":"2019-02-06T17:22:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Although Valentine&#8217;s Day isn&#8217;t for a few more days, we just couldn&#8217;t wait to celebrate the love by sharing a new stable release of Xamarin.Forms &#8211; 3.5. Your engagement and...","Href":"https://blog.xamarin.com/5-things-youll-love-xamarin-forms-3-5/","RawContent":null},{"Title":"Using Existing C++ Libraries in Cross-Platform Xamarin.Forms Applications","PublishedOn":"2019-02-04T18:52:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are many libraries developed using C or C++ which can be brought to bear when creating Xamarin-based mobile apps such as those leveraged by Microsoft’s Hyperlapse Mobile and Pix Camera in order...","Href":"https://blog.xamarin.com/using-c-libraries-xamarin-forms-apps/","RawContent":null},{"Title":"Mobile & .NET Developer Community Events in February","PublishedOn":"2019-02-01T17:31:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Fall in love with building your next mobile application by networking with local user groups to learn about new and exciting releases, tooling, or updates with Xamarin and .NET related technologies!...","Href":"https://blog.xamarin.com/mobile-net-developer-community-events-in-february/","RawContent":null},{"Title":"Complex UI with FastGrid for Xamarin.Forms","PublishedOn":"2019-01-30T17:56:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Slava Chernikoff (Principal Engineer at Binwell,  Microsoft MVP, Xamarin Certified Mobile Developer), Artem Tischenko (Xamarin developer at Binwell) and Kirill...","Href":"https://blog.xamarin.com/complex-ui-with-fastgrid-for-xamarin-forms/","RawContent":null},{"Title":"Android’s D8 dexer and R8 shrinker","PublishedOn":"2019-01-28T18:10:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There is quite a bit of complexity to packaging an Android application. Xamarin.Android has to run through the same build pipeline as Android apps built in Android Studio&#8211;with the addition of...","Href":"https://blog.xamarin.com/androids-d8-dexer-and-r8-shrinker/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9115484198","Type":"PullRequestEvent","CreatedAt":"2019-02-22T05:14:11","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2760","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] support F# 4.5 Windows path\" (#2760) at xamarin/xamarin-android","RelatedBody":"Context: https://devblogs.microsoft.com/dotnet/announcing-f-4-5/\r\n\r\nSince VS 15.8 on Windows, F# 4.5 is now installed along with Visual\r\nStudio to support side-by-side installations. Previously F# was\r\ninstalled in a system-wide location specified by `%FSHARPINSTALLDIR%`:\r\n\r\n    C:\\Program Files (x86)\\Microsoft SDKs\\F#\\10.1\\Framework\\v4.0\\\r\n\r\nThe new locations are, for example:\r\n\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\FSharp\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\CommonExtensions\\Microsoft\\FSharp\r\n\r\nI have also seen a few instances where our F#-related MSBuild tests\r\nfailed on Windows, failing to import `Microsoft.FSharp.targets`:\r\n\r\n    bin\\TestRelease\\temp\\BuildBasicApplicationFSharp\\UnnamedProject.fsproj error MSB4057:\r\n        The target \"Build\" does not exist in the project.\r\n\r\nIn this case, *all* of our probing for `Microsoft.FSharp.targets`\r\nfailed:\r\n\r\n    NoImport: $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets at (44;5) Not imported due to false condition; ('$(Language)' != 'F#' And Exists('$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets')) was evaluated as ('' != 'F#' And Exists('E:\\A\\_work\\382\\s\\bin\\Release\\lib\\xamarin.android\\xbuild\\Microsoft\\VisualStudio\\v15.0\\FSharp\\Microsoft.FSharp.Targets')).\r\n    NoImport: $(FSharpInstallDir)Microsoft.FSharp.Targets at (47;5) Not imported due to false condition; ('$(Language)' != 'F#' And Exists('$(FSharpInstallDir)Microsoft.FSharp.Targets')) was evaluated as ('' != 'F#' And Exists('Microsoft.FSharp.Targets')).\r\n    NoImport: $(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\4.1\\Framework\\v4.0\\Microsoft.FSharp.Targets at (50;5) Not imported due to false condition; ('$(Language)' != 'F#' And Exists('$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\4.1\\Framework\\v4.0\\Microsoft.FSharp.Targets')) was evaluated as ('' != 'F#' And Exists('E:\\A\\_work\\382\\s\\bin\\Release\\lib\\xamarin.android\\xbuild\\..\\Microsoft SDKs\\F#\\4.1\\Framework\\v4.0\\Microsoft.FSharp.Targets')).\r\n    NoImport: $(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\4.0\\Framework\\v4.0\\Microsoft.FSharp.Targets at (53;5) Not imported due to false condition; ('$(Language)' != 'F#' And Exists('$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\4.0\\Framework\\v4.0\\Microsoft.FSharp.Targets')) was evaluated as ('' != 'F#' And Exists('E:\\A\\_work\\382\\s\\bin\\Release\\lib\\xamarin.android\\xbuild\\..\\Microsoft SDKs\\F#\\4.0\\Framework\\v4.0\\Microsoft.FSharp.Targets')).\r\n    NoImport: $(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.1\\Framework\\v4.0\\Microsoft.FSharp.Targets at (56;5) Not imported due to false condition; ('$(Language)' != 'F#' And Exists('$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.1\\Framework\\v4.0\\Microsoft.FSharp.Targets')) was evaluated as ('' != 'F#' And Exists('E:\\A\\_work\\382\\s\\bin\\Release\\lib\\xamarin.android\\xbuild\\..\\Microsoft SDKs\\F#\\3.1\\Framework\\v4.0\\Microsoft.FSharp.Targets')).\r\n\r\nSo the fix here is to add an extra `<Import/>` for:\r\n\r\n    $(MSBuildToolsPath32)\\..\\..\\..\\Common7\\IDE\\CommonExtensions\\Microsoft\\FSharp\\Microsoft.FSharp.Targets\r\n\r\nI found this path when digging through binlogs, which is how NuGet's\r\nMSBuild targets are imported:\r\n\r\n    <PropertyGroup>\r\n      <NuGetRestoreTargets Condition=\"'$(NuGetRestoreTargets)'==''\">$(MSBuildToolsPath32)\\..\\..\\..\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets</NuGetRestoreTargets>\r\n      ...\r\n      </PropertyGroup>\r\n    <Import Condition=\"Exists('$(NuGetRestoreTargets)')\" Project=\"$(NuGetRestoreTargets)\" />\r\n\r\nCurrently, I think you would have to modify `%FSHARPINSTALLDIR%` to\r\nuse F# 4.5 with Xamarin.Android on Windows."},{"Id":"9113603383","Type":"PullRequestEvent","CreatedAt":"2019-02-21T21:29:50","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2759","RelatedDescription":"Opened pull request \"Don't strip some Windows DLLs\" (#2759) at xamarin/xamarin-android","RelatedBody":"32-bit Windows DLLs cannot be stripped (`strip` from mxe fails when attempting\r\nto do that). This commit adds a metadata item to the `_MonoRuntime` items which\r\ntells the build whether it's ok to strip the DLL for particular instance of\r\nthe runtime build."},{"Id":"9113081002","Type":"PullRequestEvent","CreatedAt":"2019-02-21T20:02:13","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2757","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tests] Dont auto clean up tests.\" (#2757) at xamarin/xamarin-android","RelatedBody":"We have a problem in our tests when the build passes,\r\nbut the unit test fails. In this case the `ProjectBuilder`\r\nis auto cleaning up the failed test build directory along\r\nwith ALL the logs.\r\n\r\nSo Lets NOT clean up by default. This does not mean that\r\nwe will leave files on disk for passed tests since the\r\n`BaseTest.CleanupTest` [1] method is an nunit `TearDown` method.\r\nSo it runs at the end of the test and will clean up the\r\ndirectory if the test passed.\r\n\r\n[1] https://github.com/xamarin/xamarin-android/blob/master/src/Xamarin.Android.Build.Tasks/Tests/Xamarin.Android.Build.Tests/Utilities/BaseTest.cs#L376"},{"Id":"9112586486","Type":"PullRequestEvent","CreatedAt":"2019-02-21T18:43:56","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2758","RelatedDescription":"Opened pull request \"[build] Drop requirement for MXE\" (#2758) at xamarin/xamarin-android","RelatedBody":"MXE is a source-only distribution to build the MinGW Windows cross-compiler\r\non Unix systems, along with a number of libraries and tools. We use it to\r\nbuild both Mono and Xamarin.Android for Windows.\r\n\r\nThe problem with MXE is that its build process is very fragile and also takes\r\na lot of time to complete. Additional issue is that the version of GCC it\r\nbuilds is quite ancient (5.4 as opposed to the current 8.2) and does not support\r\nthe latest C and C++ standards which prevents us from using C++17 features in XA.\r\n\r\nHowever, [Homebrew][0] now has a formula to install the latest MinGW toolchain with\r\nGCC 8.2 which allows us to drop MXE. The downside of using this pre-packaged MinGW\r\n(a very insignificant one) is that it does not come with any extra libraries or\r\nsoftware prebuilt for Windows and our build requires `zlib` which was previously built\r\nas part of MXE. That downside is easily worked around, however - we simply use our\r\nown Homebrew tap which has a formula that installs the Win32/Win64 zlib binary.\r\n\r\nThis commit drops MXE dependency in Xamarin.Android *only* - it does *not* remove this\r\ndependency from Mono. Mono will now provision its own copy of MXE and use it to build.\r\nThis will change at some point when [this PR][1] makes its way into Mono and, subsequently,\r\nto Xamarin.Android.\r\n\r\nAll the libraries we build for Windows that require zlib will link a *static* version\r\nof the library instead of using the dynamic one. This is safer than using the DLL because\r\nwe control what version of zlib is used and we leave no potential for breakage should a\r\n3rd party replace/remove/etc zlib1.dll from the target system.\r\n\r\n[0]: https://brew.sh\r\n[1]: https://github.com/mono/mono/pull/12434"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9114693403","Type":"IssuesEvent","CreatedAt":"2019-02-22T01:24:08","Actor":"SergejDK","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5344","RelatedDescription":"Opened issue \"[MacOs] Menu not shown\" (#5344) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen I call the `SetMenu(BindableObject object, Menu menu)` in the App.cs file nothing is shown. Is there a need to still have the storyboard in it?\r\nSeems like this: https://github.com/xamarin/Xamarin.Forms/issues/2659\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a Xamarin.Forms.MacOs project\r\n2. Create a Menu var in App.cs\r\n3. Call SetMenu like this: `SetMenu(this, menu)`\r\n\r\n### Expected Behavior\r\nMenubar is shown.\r\n\r\n### Actual Behavior\r\nMenubar is not shown\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms 3.5\r\n- Last known good version: not known\r\n- IDE: Visual Studio for Mac Community (7.7.4)\r\n- Affected Devices: Mac (MacOs Mojave 10.14.3)\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/SergejDK/XFMenuReproduction\r\n"},{"Id":"9114633473","Type":"PullRequestEvent","CreatedAt":"2019-02-22T01:08:33","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5174","RelatedDescription":"Merged pull request \"Added UI test to B41600\" (#5174) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdded UI test to B41600.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #2359\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ### \r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nRun UI test.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9114633456","Type":"IssuesEvent","CreatedAt":"2019-02-22T01:08:32","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2359","RelatedDescription":"Closed issue \"UI test B41600 needs to be automated\" (#2359) at xamarin/Xamarin.Forms","RelatedBody":"- [ ] Test needs to be automated"},{"Id":"9114626059","Type":"PullRequestEvent","CreatedAt":"2019-02-22T01:06:39","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4932","RelatedDescription":"Closed pull request \"Update VisualElementTracker.cs\" (#4932) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n.ToList() operation on _batchedProperties IList in HandleRedrawNeeded method. Used to prevent 'Collection was modified' error seen in issue #4917\r\n\r\n### Issues Resolved ### \r\n- fixes #4917\r\n\r\n### API Changes ###\r\nNone\r\n\r\nChanged:\r\n- Added reference to System.Linq\r\n - running .ToList() on _batchedProperties object\r\n\r\n### Platforms Affected ### \r\n- Android\r\n\r\n- [ ] Has automated tests\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9114600592","Type":"PullRequestEvent","CreatedAt":"2019-02-22T00:59:49","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5275","RelatedDescription":"Merged pull request \"[CSS] fix mapping for vertical-align\" (#5275) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n<!-- Describe your changes here. -->\r\nremove `vertical-align` that wasn't working, add `-xf-vertical-text-alignment`\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9114589614","Type":"PullRequestEvent","CreatedAt":"2019-02-22T00:56:43","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5309","RelatedDescription":"Merged pull request \"[XamlC] Identify generic instance types correctly when importing ctor\" (#5309) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThe old implementation fails to identify generic instance types for typed binding getter, whose type is:\r\nSystem.Func`2<TSource, ValueTuple<TProperty, bool>>\r\n\r\nThis fixes the issue by taking generic arguments into account.\r\n\r\n### Issues Resolved ### \r\n\r\nNone\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\nRun the automated test.\r\n\r\n### PR Checklist ###\r\n\r\n- [X] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [X] Changes adhere to coding standard\r\n"},{"Id":"9114467224","Type":"PullRequestEvent","CreatedAt":"2019-02-22T00:23:33","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5329","RelatedDescription":"Merged pull request \"[Android] Fix SearchBar renderer height on API24\" (#5329) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFor some crazy reason Android isn't measuring the SearchBar widget height correctly on API24, when we pass a HeightRequest of 0 (so the item provides its own size.  So we give it a default height based on running on the same device on API27.\r\n\r\nThis should fix UITests on API24\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #5328 \r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\n![screenshot_1550687566](https://user-images.githubusercontent.com/1235097/53121334-e908d400-354b-11e9-9df3-89af985860b8.png)\r\n![screenshot_1550687314](https://user-images.githubusercontent.com/1235097/53121335-e908d400-354b-11e9-88d6-827428440ea6.png)\r\n\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard"},{"Id":"9114380463","Type":"PullRequestEvent","CreatedAt":"2019-02-22T00:01:28","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5171","RelatedDescription":"Closed pull request \"Add a test for when we want to silently ignore\" (#5171) at xamarin/Xamarin.Forms","RelatedBody":"Sometimes we cannot replace a type with a placeholder, and in this\r\nscenario we wish to silently ignore the xaml we can't handle.\r\n\r\n### Description of Change ###\r\n\r\n<!-- Describe your changes here. -->\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\n\n> VS bug [#790713](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/790713)"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9114100671","Type":"IssuesEvent","CreatedAt":"2019-02-21T22:58:08","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5656","RelatedDescription":"Opened issue \"[RFC] msbuild test project templating\" (#5656) at xamarin/xamarin-macios","RelatedBody":"This was previously discussed under: \r\n\r\nhttps://github.com/xamarin/xamarin-macios/pull/5071\r\n\r\nbut the diffs were large (since I was updating existing tests to use the new tech) and stale.\r\n\r\nI've now moved things to this repro\r\n\r\nhttps://github.com/chamons/macios-test-template\r\n\r\nand would like some thoughts.\r\n\r\nGiven our current testing investment, I don't think moving to a system like XA, where every single property needs reflecting in the test code, will go well (they will diverge), and what I have is better than what we have today.\r\n\r\nI'd like some thoughts."},{"Id":"9113901769","Type":"PullRequestEvent","CreatedAt":"2019-02-21T22:20:40","Actor":"lewurm","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5655","RelatedDescription":"Opened pull request \"[mtouch] use \"--aot=interp,full,[...]\" for every assembly if interpreter mixed mode is enabled\" (#5655) at xamarin/xamarin-macios","RelatedBody":"The Mono AOT compiler maintains a set of signatures of compiled methods.\r\nThose signatures are necessary to emit wrappers to enable the transition\r\nfrom interpreter->AOT code. Thus, they must be collected for each\r\nassembly.\r\n\r\nContributes to https://github.com/xamarin/xamarin-macios/issues/5618"},{"Id":"9113454213","Type":"PullRequestEvent","CreatedAt":"2019-02-21T21:04:52","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5071","RelatedDescription":"Closed pull request \"[RFC] MSBuild\\MMP Test Template Rework\" (#5071) at xamarin/xamarin-macios","RelatedBody":"I decided to burn a day and prototype how I'd rewrite ProjectTestHelpers in a less organic\\terrible way. My goals were:\r\n\r\n- Not tied to XM concepts, so we could share it with XI.\r\n- Shim into ProjectTestHelpers API for now, we can bite off reworking the tests later\r\n   - This means there is some ugly conversion code that will go away in time\r\n- Simple API, as we're just really just doing a fancy copy + sed\r\n- Support a subset of what MMP\\msbuild-mac does today. If people 👍 then easy to extend:\r\n        - Project Flavor: Full, Modern, NetStandard, etc\r\n        - Project Type: App, Lib, Binding Project\r\n        - Language: C#, F#\r\n\r\nThis is what I came up with.\r\n\r\nThe PR line diff count is large because I also refactored out RunCommand from Driver.cs so we could stop duplicating it in test code. It may be useful to review the commits separately because of this.\r\n\r\nThe test template API works like this:\r\n\r\n- If you wants custom template files, create a TemplateInfo describing what you need\r\n- You instance a TemplateEngine subclass either with a TemplateInfo or your flavor\\language\r\n    - MacAppTemplateEngine\r\n    - MacBindingTemplateEngine\r\n    - MacLibraryTemplateEngine\r\n    - NetStandardTemplateEngine\r\n- Create a number of Substitutions classes (FileSubstitutions, PListSubstitutions, ProjectSubstitutions) which describe how you want to fill in the \"holes\" in the templates\r\n- You call a Generate method passing in those substitutions and any additional options.\r\n\r\n\r\nIf we want to move forward with this, my plan would go as follows:\r\n\r\n- Flesh out test-template with new components that contain the rest of the functionality ProjectTestHelpers has (Building projects, Frameworks, etc)\r\n- Create an initial PR that makes ProjectTestHelpers use the new API and land it\r\n- Create a second PR that updates the mmp/msbuild-mac tests to use the new API directly and remove the shim layer\r\n- Create a third PR that moves\\renames the template files to be in a more consistent location, in prep for iOS additional files\r\n- Create one last PR that checked in one iOS template, the infrastructure to spin it up, and a test using it."},{"Id":"9113371486","Type":"PullRequestEvent","CreatedAt":"2019-02-21T20:51:18","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5654","RelatedDescription":"Opened pull request \"[mac][msbuild] Add MigrateToNewXMTFI to convert TFI to new Xamarin.Ma…\" (#5654) at xamarin/xamarin-macios","RelatedBody":"…c.NET (opt-in)\r\n\r\n- https://github.com/xamarin/xamarin-macios/issues/5480\r\n- Related: https://github.com/NuGet/NuGet.Client/pull/2572\r\n\r\nTo allow nuget to target XM Full we need to have a unique TFI (TargetFrameworkIdentifier).\r\n\r\nHowever, that's a really scary change to force, so let's opt-in for now. You can set\r\n\r\n```\r\n<MigrateToNewXMTFI>true</MigrateToNewXMTFI>\r\n```\r\nin your project or\r\n\r\n```MigrateToNewXMTFI=true msbuild project.csproj```\r\n\r\nto try it out. \r\n\r\nWe can convert the opt-in to an opt-out with sufficient validation \\ releases."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1097993381496700935","CreatedAt":"2019-02-19T22:56:36+00:00","UserScreenname":"xamarinhq","Text":"With only a few lines of code, today's #Xamarin.Essentials API of the week helps you persist settings and preferenc… https://t.co/izkl5pGL6m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":47,"FavoriteCount":19,"RawContent":null},{"Id":"1097939132532310018","CreatedAt":"2019-02-19T19:21:02+00:00","UserScreenname":"xamarinhq","Text":"On this week's #XamarinShow Essential API of the week, we take a look at Secure Storage, which enables you to easil… https://t.co/OwQSZ1QRlI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null},{"Id":"1097603017375993857","CreatedAt":"2019-02-18T21:05:26+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 101: Command Parameters: https://t.co/rwzzq9yQib\n\n.@JamesMontemagno takes us through a new mini-serie… https://t.co/ZFInvKFhSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":108,"FavoriteCount":47,"RawContent":null},{"Id":"1096561048562384898","CreatedAt":"2019-02-16T00:05:01+00:00","UserScreenname":"xamarinhq","Text":"The #Xamarin Developer Blog is migrating to a new platform with a modern, clean design and powerful features that m… https://t.co/nJUxXItfe8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":35,"RawContent":null},{"Id":"1095804816121581570","CreatedAt":"2019-02-13T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio Mobile Dev Podcast is out. In this episode, @CodeMillMatt &amp; @JamesMontemagno discuss the latest &amp;… https://t.co/SPEvfxFuLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":57,"FavoriteCount":14,"RawContent":null},{"Id":"1095445655076700162","CreatedAt":"2019-02-12T22:12:51+00:00","UserScreenname":"xamarinhq","Text":"To provide the best user experience we need access to the current network state of our users’ devices.\n\n...new from… https://t.co/w2ZGMgKqli","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null},{"Id":"1093221405917937670","CreatedAt":"2019-02-06T18:54:28+00:00","UserScreenname":"xamarinhq","Text":"Every month we survey &amp; interview our Xamarin devs, listening to your firsthand stories. Why? To make #Xamarin bett… https://t.co/Gwc32YD8qG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":42,"RawContent":null},{"Id":"1093196382901547008","CreatedAt":"2019-02-06T17:15:02+00:00","UserScreenname":"xamarinhq","Text":"On a recent #XamarinShow, Mike Parker from the Microsoft Mobile Customer Advisory Team that shows us how to easily… https://t.co/jdjf2oZXwI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":48,"FavoriteCount":16,"RawContent":null},{"Id":"1092542167078326279","CreatedAt":"2019-02-04T21:55:25+00:00","UserScreenname":"xamarinhq","Text":"Walk through some techniques for separating the concerns of dev'ing a C/C++ library, a C# wrapper, &amp; a mobile app s… https://t.co/W1RmRSHzXZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":71,"FavoriteCount":35,"RawContent":null},{"Id":"1091455153868296201","CreatedAt":"2019-02-01T21:56:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing .NET Foundation Open Membership. We're making some big changes to expand the #dotNET Foundation. We’re i… https://t.co/iePYJUdean","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":69,"FavoriteCount":39,"RawContent":null},{"Id":"1091387761297362944","CreatedAt":"2019-02-01T17:28:13+00:00","UserScreenname":"xamarinhq","Text":"There's a new Xamarin.Essentials out. Today, @JamesMontemagno highlights API of the Week, App Information; which gi… https://t.co/WlU6hQHbNl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":66,"FavoriteCount":22,"RawContent":null},{"Id":"1090678537491808256","CreatedAt":"2019-01-30T18:30:01+00:00","UserScreenname":"xamarinhq","Text":"Check out this super-interesting use-case for creating complex UI using FastGrid for Xamarin.Forms with many cell v… https://t.co/SNff8XhdJ3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":99,"FavoriteCount":42,"RawContent":null},{"Id":"1089964090339049472","CreatedAt":"2019-01-28T19:11:04+00:00","UserScreenname":"xamarinhq","Text":"Finding it a bit complex packaging your Xamarin. Android application? Here's some excellent info about Android’s D8… https://t.co/1qhLDuX3m6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":71,"FavoriteCount":28,"RawContent":null},{"Id":"1088179823762161664","CreatedAt":"2019-01-23T21:01:02+00:00","UserScreenname":"xamarinhq","Text":"Just released: #VS2019 Preview 2 which includes tons of improvements for mobile devs to make you more productive wh… https://t.co/j4LgiuYkgc","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":156,"FavoriteCount":74,"RawContent":null},{"Id":"1086352280604065792","CreatedAt":"2019-01-18T19:59:01+00:00","UserScreenname":"xamarinhq","Text":"New Year – New podcast. Now on the Visual Studio Mobile Developer Podcast: Office Hours, Hockey App moving to… https://t.co/QtObsRI6av","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":20,"RawContent":null},{"Id":"1085961073902129152","CreatedAt":"2019-01-17T18:04:30+00:00","UserScreenname":"xamarinhq","Text":"As the .NET community expands so should the community standups... We are pleased to introduce the expansion of the… https://t.co/EDO0vChQlR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":22,"RawContent":null},{"Id":"1083829954515750923","CreatedAt":"2019-01-11T20:56:12+00:00","UserScreenname":"xamarinhq","Text":"...just posted on the Xamarin Blog, Andrei Nitescu shares one of his contributions to Xamarin.Forms, the bindable l… https://t.co/rp3eVPLbYl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":105,"FavoriteCount":45,"RawContent":null},{"Id":"1083399709526503424","CreatedAt":"2019-01-10T16:26:34+00:00","UserScreenname":"xamarinhq","Text":"Our very first Mobile .NET #CommunityStandup will be live in about 30 minutes at 9am Pacific! @maddyleger1,… https://t.co/vmFHIKZTIt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":59,"FavoriteCount":19,"RawContent":null}]}},"RunOn":"2019-02-22T05:31:20.043497Z","RunDurationInMilliseconds":2761}