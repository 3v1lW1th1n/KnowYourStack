{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10556032041","Type":"IssuesEvent","CreatedAt":"2019-10-03T23:59:26","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7547","RelatedDescription":"Closed issue \"[HOTFIX] Fix statistics page\" (#7547) at NuGet/NuGetGallery","RelatedBody":"Build: https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3045222\r\nRelease: https://dev.azure.com/devdiv/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=445555\r\n\r\nFixed by https://github.com/NuGet/NuGetGallery/pull/7545\r\nAddresses: https://github.com/NuGet/NuGetGallery/issues/7543\r\n\r\nDeployment plan:\r\n* [x] Deploy hotfix INT\r\n* [x] Load PROD stats report into INT storage\r\n* [x] Restart a single INT Gallery instance, verify statistics page works (USSC without fix fails to load PROD stats blob)\r\n* [x] Deploy hotfix PROD\r\n* [x] Rename affected statistic blob\r\n* [x] Restart a single PROD Gallery instance, verify statistics page works\r\n* [x] Reenable CreateCdnWarehouseReports job on PROD\r\n* [x] Ensure outdated report alerts are mitigated\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146688498/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146689066/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146689071/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146573161/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146578744/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146567609/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146562311/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146551651/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146540176/home\r\n    * [x] https://icm.ad.msft.net/imp/v3/incidents/details/146688498/home\r\n* [x] Deploy USSC"},{"Id":"10555944042","Type":"IssuesEvent","CreatedAt":"2019-10-03T23:38:02","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6622","RelatedDescription":"Closed issue \"Preview of new nuget package. Incorrect display of multiline description and release note\" (#6622) at NuGet/NuGetGallery","RelatedBody":"Preview page displays a multiline text (description and release note of new package) in single line.\r\n\r\nThe page of published package displays a multiline text without problems.\r\n\r\nIt is creates some inconvenience.\r\n\r\nSee screenshots.\r\n![2018_11_04--nuget-01-preview_page](https://user-images.githubusercontent.com/4594554/47965093-92869100-e053-11e8-8756-72e9c2b750ce.PNG)\r\n![2018_11_04--nuget-02-package_page](https://user-images.githubusercontent.com/4594554/47965094-92869100-e053-11e8-8d56-674c19f5b190.PNG)\r\n"},{"Id":"10555935651","Type":"IssuesEvent","CreatedAt":"2019-10-03T23:36:00","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/5216","RelatedDescription":"Closed issue \"Show dotnet install command for template packages\" (#5216) at NuGet/NuGetGallery","RelatedBody":"It would be nice if the site shows the `dotnet new -i PackageName` when the nuget package is a dotnet cli template, for example [Giraffe](https://www.nuget.org/packages/giraffe-template/).\r\n\r\n![image](https://user-images.githubusercontent.com/2621499/34246832-7d9912ea-e630-11e7-8121-eb7f024bc3d7.png)\r\n"},{"Id":"10549272574","Type":"PullRequestEvent","CreatedAt":"2019-10-03T08:20:27","Actor":"xavierdecoster","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7604","RelatedDescription":"Merged pull request \"Merge master into dev\" (#7604) at NuGet/NuGetGallery","RelatedBody":"Realign dev with hotfixes from master branch."},{"Id":"10549149231","Type":"PullRequestEvent","CreatedAt":"2019-10-03T08:01:47","Actor":"xavierdecoster","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7604","RelatedDescription":"Opened pull request \"Merge master into dev\" (#7604) at NuGet/NuGetGallery","RelatedBody":"Realign dev with hotfixes from master branch."},{"Id":"10549113940","Type":"PullRequestEvent","CreatedAt":"2019-10-03T07:56:36","Actor":"xavierdecoster","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7603","RelatedDescription":"Merged pull request \"Handle RequestTelemetry.Url == null (AI intermediate requests)\" (#7603) at NuGet/NuGetGallery","RelatedBody":"Fixes `NullReferenceException` introduced by AI's new intermediate request support that causes `RequestTelemetry.Url` to be `null`.\r\n\r\n```\r\nValue cannot be null. Parameter name: uri \r\nSystem.ArgumentNullExceptionValue cannot be null. Parameter name: uri\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: uri\r\n   at NuGetGallery.RouteExtensions.ObfuscateUrlQuery(Uri uri, ObfuscatedQueryMetadata[] metadata) in E:\\A\\_work\\2455\\s\\src\\Gallery\\submodules\\Gallery\\src\\NuGetGallery\\Extensions\\RouteExtensions.cs:line 105\r\n   at NuGetGallery.ClientTelemetryPIIProcessor.ModifyItem(ITelemetry item) in E:\\A\\_work\\2455\\s\\src\\Gallery\\submodules\\Gallery\\src\\NuGetGallery\\Telemetry\\ClientTelemetryPIIProcessor.cs:line 52\r\n   at NuGetGallery.ClientTelemetryPIIProcessor.Process(ITelemetry item) in E:\\A\\_work\\2455\\s\\src\\Gallery\\submodules\\Gallery\\src\\NuGetGallery\\Telemetry\\ClientTelemetryPIIProcessor.cs:line 24\r\n   at NuGet.Services.Logging.RequestTelemetryProcessor.Process(ITelemetry item)\r\n   at Microsoft.ApplicationInsights.TelemetryClient.Track(ITelemetry telemetry)\r\n   at Microsoft.ApplicationInsights.Web.RequestTrackingTelemetryModule.OnEndRequest(HttpContext context)\r\n   at Microsoft.ApplicationInsights.Web.AspNetDiagnosticTelemetryModule.AspNetEventObserver.OnNext(KeyValuePair`2 value)\r\n   at System.Diagnostics.DiagnosticListener.Write(String name, Object value)\r\n   at Microsoft.AspNet.TelemetryCorrelation.ActivityHelper.StopLostActivity(Activity activity, HttpContext context)\r\n   at Microsoft.AspNet.TelemetryCorrelation.TelemetryCorrelationHttpModule.Application_EndRequest(Object sender, EventArgs e)\r\n   at System.Web.HttpApplication.SyncEventExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()\r\n   at System.Web.HttpApplication.<>c__DisplayClass285_0.<ExecuteStepImpl>b__0()\r\n   at System.Web.HttpApplication.ExecuteStepImpl(IExecutionStep step)\r\n   at System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)\r\n```"},{"Id":"10548917292","Type":"PullRequestEvent","CreatedAt":"2019-10-03T07:24:56","Actor":"xavierdecoster","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7603","RelatedDescription":"Opened pull request \"Handle RequestTelemetry.Url == null (AI intermediate requests)\" (#7603) at NuGet/NuGetGallery","RelatedBody":"Fixes `NullReferenceException` introduced by AI's new intermediate request support that causes `RequestTelemetry.Url` to be `null`.\r\n\r\n```\r\nValue cannot be null. Parameter name: uri \r\nSystem.ArgumentNullExceptionValue cannot be null. Parameter name: uri\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: uri\r\n   at NuGetGallery.RouteExtensions.ObfuscateUrlQuery(Uri uri, ObfuscatedQueryMetadata[] metadata) in E:\\A\\_work\\2455\\s\\src\\Gallery\\submodules\\Gallery\\src\\NuGetGallery\\Extensions\\RouteExtensions.cs:line 105\r\n   at NuGetGallery.ClientTelemetryPIIProcessor.ModifyItem(ITelemetry item) in E:\\A\\_work\\2455\\s\\src\\Gallery\\submodules\\Gallery\\src\\NuGetGallery\\Telemetry\\ClientTelemetryPIIProcessor.cs:line 52\r\n   at NuGetGallery.ClientTelemetryPIIProcessor.Process(ITelemetry item) in E:\\A\\_work\\2455\\s\\src\\Gallery\\submodules\\Gallery\\src\\NuGetGallery\\Telemetry\\ClientTelemetryPIIProcessor.cs:line 24\r\n   at NuGet.Services.Logging.RequestTelemetryProcessor.Process(ITelemetry item)\r\n   at Microsoft.ApplicationInsights.TelemetryClient.Track(ITelemetry telemetry)\r\n   at Microsoft.ApplicationInsights.Web.RequestTrackingTelemetryModule.OnEndRequest(HttpContext context)\r\n   at Microsoft.ApplicationInsights.Web.AspNetDiagnosticTelemetryModule.AspNetEventObserver.OnNext(KeyValuePair`2 value)\r\n   at System.Diagnostics.DiagnosticListener.Write(String name, Object value)\r\n   at Microsoft.AspNet.TelemetryCorrelation.ActivityHelper.StopLostActivity(Activity activity, HttpContext context)\r\n   at Microsoft.AspNet.TelemetryCorrelation.TelemetryCorrelationHttpModule.Application_EndRequest(Object sender, EventArgs e)\r\n   at System.Web.HttpApplication.SyncEventExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()\r\n   at System.Web.HttpApplication.<>c__DisplayClass285_0.<ExecuteStepImpl>b__0()\r\n   at System.Web.HttpApplication.ExecuteStepImpl(IExecutionStep step)\r\n   at System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)\r\n```"},{"Id":"10547305876","Type":"IssuesEvent","CreatedAt":"2019-10-03T00:30:53","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7597","RelatedDescription":"Closed issue \"Fix gallery nightly deployments\" (#7597) at NuGet/NuGetGallery","RelatedBody":"Update this: https://nuget.visualstudio.com/NuGetBuild/_git/NuGetBuild?path=%2FGalleryFunctionalConfig%2FDev.json&version=GBmaster&line=2&lineStyle=plain&lineEnd=3&lineStartColumn=1&lineEndColumn=1\r\n\r\nUsed by: https://github.com/NuGet/NuGetGallery/blob/23d3aeb8cc96f8038df5473f8392e543fb840a0b/tests/NuGetGallery.LoadTests/LoadTests.cs#L123\r\n\r\nFunctional tests will need to use the latest NuGetBuild commit\r\n\r\nFix: https://nuget.visualstudio.com/_git/NuGetBuild/pullrequest/1150?_a=overview"},{"Id":"10546869446","Type":"PullRequestEvent","CreatedAt":"2019-10-02T22:48:09","Actor":"babakontheweb","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7602","RelatedDescription":"Opened pull request \"Replacing enum StorageType with static class of constants by the sameâ€¦\" (#7602) at NuGet/NuGetGallery","RelatedBody":"* Replacing enum StorageType with static class of constants by the same name.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/7601"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10556217298","Type":"IssuesEvent","CreatedAt":"2019-10-04T00:48:39","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8659","RelatedDescription":"Opened issue \"Package Analysis Warnings: Packages' assembly level dependencies should match the declared dependencies\" (#8659) at NuGet/Home","RelatedBody":"Today it's possible that a package unwittingly takes an API dependency on transitive package and doesn't account for that when expressing it's dependencies. \r\n\r\nhttps://github.com/dotnet/core/issues/2571 is such an example. \r\n\r\n@ericstj commented\r\n\r\n> So the problem here is that the ClassLibrary1 is relying on the transitive dependency from ClassLibrary2 to deliver SQL client.\r\n> \r\n> ClassLibrary2 is actually malformed to remove compile-time dependencies from a compatible target framework. A library need to consider both the API it exposes, and any packages it depends on as part of its public contract. This is the reason why we are very careful in CoreFx to choose which packages we expose to the compiler vs just reference for runtime consumption.\r\n> \r\n> We had a similar problem in CoreFx years back and specifically made our packaging infra catch this and promote those dependencies. Here's that commit: [dotnet/buildtools@98119a0](https://github.com/dotnet/buildtools/commit/98119a01a69bc3fd7438a5cccbb0f9153ab2f7b0). Now the code lives in [arcade](https://github.com/dotnet/arcade/tree/master/src/Microsoft.DotNet.Build.Tasks.Packaging/src) and has gone through a few iterations to handle other cases but it still addresses this type of issue.\r\n> \r\n> NuGet could do a couple things here:\r\n> \r\n> 1. Add validation whenever you create a dependency group that is compatible with some other dependency group and isn't a super set of that compatible depedendency group (perhaps only considering dependencies that are not `Exclude=\"Compile\"`.  This would fix ClassLibrary2 by making the author change their PakcageReference conditions.\r\n> 2. Add validation for a package that directly references some library: it's resultant assembly has an assembly reference to library X that came from package X but it didn't directly reference package X.  This would fix ClassLibrary1 by making the author change the project to directy reference all packages he directly uses in his assembly, effectively insulating him from cases like ClassLibrary2,\r\n\r\n@nkolev92 commented\r\n\r\n> So the problem here is that the ClassLibrary1 is relying on the transitive dependency from ClassLibrary2 to deliver SQL client.\r\n> \r\n> ClassLibrary2 is actually malformed to remove compile-time dependencies from a compatible target framework. A library need to consider both the API it exposes, and any packages it depends on as part of its public contract. This is the reason why we are very careful in CoreFx to choose which packages we expose to the compiler vs just reference for runtime consumption.\r\n> \r\n> We had a similar problem in CoreFx years back and specifically made our packaging infra catch this and promote those dependencies. Here's that commit: [dotnet/buildtools@98119a0](https://github.com/dotnet/buildtools/commit/98119a01a69bc3fd7438a5cccbb0f9153ab2f7b0). Now the code lives in [arcade](https://github.com/dotnet/arcade/tree/master/src/Microsoft.DotNet.Build.Tasks.Packaging/src) and has gone through a few iterations to handle other cases but it still addresses this type of issue.\r\n> \r\n> NuGet could do a couple things here:\r\n> \r\n> 1. Add validation whenever you create a dependency group that is compatible with some other dependency group and isn't a super set of that compatible depedendency group (perhaps only considering dependencies that are not `Exclude=\"Compile\"`.  This would fix ClassLibrary2 by making the author change their PakcageReference conditions.\r\n> 2. Add validation for a package that directly references some library: it's resultant assembly has an assembly reference to library X that came from package X but it didn't directly reference package X.  This would fix ClassLibrary1 by making the author change the project to directy reference all packages he directly uses in his assembly, effectively insulating him from cases like ClassLibrary2,\r\n\r\n\r\n\r\n> > A library need to consider both the API it exposes, and any packages it depends on as part of its public contract\r\n> \r\n> I've seen issues like this quite often, and there are some related asks from customers wanting to avoid taking compile time dependencies on transitively delivered libraries.\r\n> \r\n> Related issue: [https://github.com/NuGet/Home/issues/6720|](https://github.com/NuGet/Home/issues/6720%7C)\r\n> \r\n> > 1. Add validation whenever you create a dependency group that is compatible with some other dependency group and isn't a super set of that compatible depedendency group (perhaps only considering dependencies that are not Exclude=\"Compile\". This would fix ClassLibrary2 by making the author change their PakcageReference conditions.\r\n> \r\n> I like this but it might raise too many warnings. Especially in the .NET Framework/.NET Standard2.0 multi targeting worlds.\r\n> See https://www.nuget.org/packages/NuGet.Protocol/5.3.0 for example.\r\n> \r\n> > 1. Add validation for a package that directly references some library: it's resultant assembly has an assembly reference to library X that came from package X but it didn't directly reference package X. This would fix ClassLibrary1 by making the author change the project to directy reference all packages he directly uses in his assembly, effectively insulating him from cases like ClassLibrary2,\r\n> \r\n> NuGet doesn't spy on the assemblies today, but I'd be excited to explore what we can do here.\r\n> It'll frustrate devs initially but it can do wonders for the eco-system.\r\n> \r\n> I'll move some of this ideas to NuGet/Home and we can continue the discussion there.\r\n\r\n"},{"Id":"10556048289","Type":"IssuesEvent","CreatedAt":"2019-10-04T00:03:14","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8034","RelatedDescription":"Closed issue \"Replace Icon URL for Icon File Dialog in Project Properties (VS)\" (#8034) at NuGet/Home","RelatedBody":"When we opt for package icon files instead of icon URLs, we will need to update the VS Project Properties dialog to reflect this change. "},{"Id":"10555383264","Type":"IssuesEvent","CreatedAt":"2019-10-03T21:44:04","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8595","RelatedDescription":"Closed issue \"NuGet.Client Release should use updated InsertVSPayload task\" (#8595) at NuGet/Home","RelatedBody":"https://devdiv.visualstudio.com/DevDiv/_releaseDefinition?definitionId=257&_a=definition-tasks&environmentId=1022\r\n\r\nThere will be a breaking chnage in the InsertVSPayload task on 9/18/19\r\n\r\nSee internal e-mail for more details. \r\n\r\n//cc @rrelyea \r\n\r\nThis needs to happen before the next insertion. \r\nPotentially @zkat's insertion is not affected if the PR is created. \r\n"},{"Id":"10555104672","Type":"IssuesEvent","CreatedAt":"2019-10-03T21:01:33","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8658","RelatedDescription":"Closed issue \"Nuget Download Count for Template Type Not Updating when Installing via .NET CLI\" (#8658) at NuGet/Home","RelatedBody":"Hi,\r\n\r\nI apologize if this has been asked before. I tried to look for an existing issue related to this here but I can't seem to find any. I've also searched the web but to no avail.\r\n\r\nI have uploaded a new Nuget Template package 4 days ago, and when I install it via .NET CLI, the downloads isn't counting even if the template was successfully installed. I've tried it may times and tried using different machines to install and still I see 0 downloads to date. \r\n\r\n## Details about Problem\r\n\r\nNuGet product used (`dotnet.exe`):\r\n\r\nNuGet version (`5.3.0`):\r\n\r\ndotnet.exe --version (`.NET Core 3.0.100`):\r\n\r\nVS version (if appropriate): `Visual Studio Pro 2019`\r\n\r\nOS version (`Windows 10.0.17763.737`):\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Run `dotnet new -i apiboilerplate.aspnetcore` This will install the latest template in your machine.\r\n2. Run `dotnet new apiboilerplate --name \"myapi\" -o samples`. This will generate the project template within the samples directory.\r\n\r\nNote that the template was installed successfully, it's just that the count wont reflect on the site. Here's my nuget template: https://www.nuget.org/packages/ApiBoilerPlate.AspNetCore\r\n\r\nPerhaps I may have just missed something here?\r\n\r\nThank you,\r\nVince\r\n\r\n"},{"Id":"10554396020","Type":"IssuesEvent","CreatedAt":"2019-10-03T19:22:24","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8633","RelatedDescription":"Closed issue \"Reference latest version of a prelease tag or metadata pattern\" (#8633) at NuGet/Home","RelatedBody":"Is there any possibility to reference the latest version with a specific prerelease or metadata tag?\r\n\r\nI tried:\r\n\r\n```xml \r\n<PackageReference Include=\"MyPackage\" Version=\"*+myTag\" /> -> invalid package version string\r\n<PackageReference Include=\"MyPackage\" Version=\"*-myPrerelaseTag\" />  -> invalid package version string\r\n\r\n<PackageReference Include=\"MyPackage\" Version=\"[1.0.0+myTag, 9999.0.0+myTag]\" /> -> does not resolve to the latest package with the given tag\r\n \r\n<PackageReference Include=\"MyPackage\" Version=\"[1.0.0-myPrerelaseTag, 9999.0.0-myPrerelaseTag]\" /> -> does not resolve to the latest version with the given prerelease tag\r\n\r\n```\r\n\r\nAny other option? I need to categorize the packages based on branch names. I want to be able to get the latest version for one specific branch.\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"âš  Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Folloâ€¦ https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?â€¦ https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-10-04T05:30:45.5903389Z","RunDurationInMilliseconds":2553}