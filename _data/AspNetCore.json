{"Data":{"Blog":{"FeedItems":[{"Title":"Blazor 0.4.0 experimental release now available","PublishedOn":"2018-06-07T21:28:56+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Blazor 0.4.0 is now available! This release includes important bug fixes and several new feature enhancements. New features in Blazor 0.4.0 (details below): Add event payloads for common event types...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/06/07/blazor-0-4-0-experimental-release-now-available/","RawContent":null},{"Title":"Use Dependency Injection In WebForms Application","PublishedOn":"2018-06-05T18:13:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Dependency Injection design pattern is widely used in modern applications.  It decouples objects to the extent that no client code needs to be changed simply because an object it depends changes to a...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/06/05/use-dependency-injection-in-webforms-application/","RawContent":null},{"Title":"ASP.NET Core 2.1.0 now available","PublishedOn":"2018-05-30T17:20:27+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today we&#039;re thrilled to announce the release of ASP.NET Core 2.1.0! This is the latest release of our open-source and cross-platform web framework for .NET and it&#039;s now ready for production...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/30/asp-net-core-2-1-0-now-available/","RawContent":null},{"Title":"Troubleshooting ASP.NET Core Performance Problems","PublishedOn":"2018-05-23T14:26:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post by Mike Rousos I recently had an opportunity to help a developer with an ASP.NET Core app that was functionally correct but slow when under a heavy user load. We found a few...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/23/asp-net-core-performance-improvements/","RawContent":null},{"Title":"Announcing ASP.NET Providers Connected Service Visual Studio Extension","PublishedOn":"2018-05-22T17:43:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Provider pattern was introduced in ASP.NET 2.0 and it gives the developers the flexibility of where to store the state of ASP.NET features (e.g. Session State, Membership, Output Cache etc.). In...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/22/announcing-asp-net-providers-connected-service-visual-studio-extension/","RawContent":null},{"Title":"A Penny Saved is a Ton of Serverless Compute Earned","PublishedOn":"2018-05-21T20:08:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Scott Guthrie recently shared one of my favorite anecdotes on his Azure Red Shirt Tour. A Microsoft customer regularly invokes 1 billion (yes, that’s with a “B”) Azure Functions per day. The customer...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/21/a-penny-saved-is-a-ton-of-serverless-compute-earned/","RawContent":null},{"Title":"Exploring Azure App Service – Web Apps and SQL Azure","PublishedOn":"2018-05-18T19:40:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There is a good chance that your web app uses a database. In my previous post introducing Azure App Service, I showed some of the benefits of hosting apps in Azure App Service, and how easy it is to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/18/exploring-azure-app-service-web-apps-and-sql-azure/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-rc1 now available","PublishedOn":"2018-05-07T18:00:55+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today we’re happy to announce the first release candidate of ASP.NET Core 2.1! This release should be very close to the final stable release of ASP.NET Core 2.1 and includes primarily bug fixes and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/07/asp-net-core-2-1-0-rc1-now-available/","RawContent":null},{"Title":"Exploring Azure App Service – Introduction","PublishedOn":"2018-05-02T23:01:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you ever needed to quickly stand up a web site, or web API app that was publicly available? Is your team or organization thinking about moving to the cloud but aren’t sure the best place to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/exploring-azure-app-service-introduction/","RawContent":null},{"Title":"Blazor 0.3.0 experimental release now available","PublishedOn":"2018-05-02T19:50:50+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Blazor 0.3.0 is now available! This release includes important bug fixes and many new feature enhancements. New features in this release (details below): Project templates updated to use Bootstrap 4...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/blazor-0-3-0-experimental-release-now-available/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7807725821","Type":"IssuesEvent","CreatedAt":"2018-06-11T17:49:39","Actor":"ge0rgi","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3217","RelatedDescription":"Closed issue \"SafeHandle has been closed when using WindowsIdentity.RunImpersonated\" (#3217) at aspnet/Home","RelatedBody":"Hello everyone.\r\n\r\nI am having trouble using Impersonation in asp.net core. I have an .NET core web API and .NET web application both running .NET core 2.1 and  using Windows Authentication.\r\n\r\nI am trying to access the web service from the web application like this:\r\n\r\n`\r\n           var identity = User.Identity as WindowsIdentity;\r\n            \r\n            var test = WindowsIdentity.RunImpersonated(identity.AccessToken, () =>\r\n            {\r\n               var client = new HttpClient(new HttpClientHandler() { UseDefaultCredentials = true }) { BaseAddress = new Uri(MY_URL) };\r\n                try\r\n                {\r\n                    var rq = new HttpRequestMessage(HttpMethod.Get, \"mymethod\");\r\n                    var response = client.SendAsync(rq).Result;\r\n                    var responseString = response.Content.ReadAsStringAsync().Result;\r\n                    return responseString;\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    return null;\r\n                }\r\n            });`\r\n\r\n\r\nI am getting the following Error on the production server and occasionally on my local machine \r\n\r\n> The process was terminated due to an unhandled exception.System.ObjectDisposedException: Safe handle has been closed\r\n \r\nFull stack trace:\r\n\r\n> Application: dotnet.exe\r\nCoreCLR Version: 4.6.26515.7\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: An exception was not handled in an AsyncLocal<T> notification callback.\r\nDescription: The process was terminated due to an unhandled exception.System.ObjectDisposedException: Safe handle has been closed\r\n   at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)\r\n   at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)\r\n   at Interop.Advapi32.ImpersonateLoggedOnUser(SafeAccessTokenHandle userToken)\r\n   at System.Security.Principal.WindowsIdentity.CurrentImpersonatedTokenChanged(AsyncLocalValueChangedArgs`1 args)\r\n   at System.Threading.AsyncLocal`1.System.Threading.IAsyncLocal.OnValueChanged(Object previousValueObj, Object currentValueObj, Boolean contextChanged)\r\n   at System.Threading.ExecutionContext.OnValuesChanged(ExecutionContext previousExecutionCtx, ExecutionContext nextExecutionCtx)\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at System.Threading.ExecutionContext.OnValuesChanged(System.Threading.ExecutionContext, System.Threading.ExecutionContext)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncFailure(System.Exception, Int32, System.Net.Sockets.SocketFlags)\r\n   at System.Net.Sockets.MultipleConnectAsync.AsyncFail(System.Exception)\r\n   at System.Net.Sockets.MultipleConnectAsync.Fail(Boolean, System.Exception)\r\n   at System.Net.Sockets.MultipleConnectAsync.DoDnsCallback(System.IAsyncResult, Boolean)\r\n   at System.Net.Sockets.MultipleConnectAsync.DnsCallback(System.IAsyncResult)\r\n   at System.Net.LazyAsyncResult.Complete(IntPtr)\r\n   at System.Net.ContextAwareResult.CompleteCallback()\r\n   at System.Net.ContextAwareResult+<>c.<Complete>b__15_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Net.ContextAwareResult.Complete(IntPtr)\r\n   at System.Net.LazyAsyncResult.ProtectedInvokeCallback(System.Object, IntPtr)\r\n   at System.Net.NameResolutionPal+GetAddrInfoExState+<>c.<CompleteAsyncResult>b__5_0(System.Object)\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task+<>c.<.cctor>b__278_1(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe()\r\n   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n\r\nAm I misusing the the access token somehow and how do I prevent the handle from being disposed. I tried wrapping my code inside a using block, however this did not help.\r\n\r\n\r\n"},{"Id":"7806946079","Type":"IssuesEvent","CreatedAt":"2018-06-11T15:24:19","Actor":"ge0rgi","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3217","RelatedDescription":"Opened issue \"SafeHandle has been closed when using WindowsIdentity.RunImpersonated\" (#3217) at aspnet/Home","RelatedBody":"Hello everyone.\r\n\r\nI am having trouble using Impersonation in asp.net core. I have an .NET core web API and .NET web application both running .NET core 2.1 and  using Windows Authentication.\r\n\r\nI am trying to access the web service from the web application like this:\r\n\r\n`\r\n           var identity = User.Identity as WindowsIdentity;\r\n            \r\n            var test = WindowsIdentity.RunImpersonated(identity.AccessToken, () =>\r\n            {\r\n               var client = new HttpClient(new HttpClientHandler() { UseDefaultCredentials = true }) { BaseAddress = new Uri(MY_URL) };\r\n                try\r\n                {\r\n                    var rq = new HttpRequestMessage(HttpMethod.Get, \"mymethod\");\r\n                    var response = client.SendAsync(rq).Result;\r\n                    var responseString = response.Content.ReadAsStringAsync().Result;\r\n                    return responseString;\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    return null;\r\n                }\r\n            });`\r\n\r\n\r\nI am getting the following Error on the production server and occasionally on my local machine \r\n\r\n> The process was terminated due to an unhandled exception.System.ObjectDisposedException: Safe handle has been closed\r\n \r\nFull stack trace:\r\n\r\n> Application: dotnet.exe\r\nCoreCLR Version: 4.6.26515.7\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: An exception was not handled in an AsyncLocal<T> notification callback.\r\nDescription: The process was terminated due to an unhandled exception.System.ObjectDisposedException: Safe handle has been closed\r\n   at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)\r\n   at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)\r\n   at Interop.Advapi32.ImpersonateLoggedOnUser(SafeAccessTokenHandle userToken)\r\n   at System.Security.Principal.WindowsIdentity.CurrentImpersonatedTokenChanged(AsyncLocalValueChangedArgs`1 args)\r\n   at System.Threading.AsyncLocal`1.System.Threading.IAsyncLocal.OnValueChanged(Object previousValueObj, Object currentValueObj, Boolean contextChanged)\r\n   at System.Threading.ExecutionContext.OnValuesChanged(ExecutionContext previousExecutionCtx, ExecutionContext nextExecutionCtx)\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at System.Threading.ExecutionContext.OnValuesChanged(System.Threading.ExecutionContext, System.Threading.ExecutionContext)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncFailure(System.Exception, Int32, System.Net.Sockets.SocketFlags)\r\n   at System.Net.Sockets.MultipleConnectAsync.AsyncFail(System.Exception)\r\n   at System.Net.Sockets.MultipleConnectAsync.Fail(Boolean, System.Exception)\r\n   at System.Net.Sockets.MultipleConnectAsync.DoDnsCallback(System.IAsyncResult, Boolean)\r\n   at System.Net.Sockets.MultipleConnectAsync.DnsCallback(System.IAsyncResult)\r\n   at System.Net.LazyAsyncResult.Complete(IntPtr)\r\n   at System.Net.ContextAwareResult.CompleteCallback()\r\n   at System.Net.ContextAwareResult+<>c.<Complete>b__15_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Net.ContextAwareResult.Complete(IntPtr)\r\n   at System.Net.LazyAsyncResult.ProtectedInvokeCallback(System.Object, IntPtr)\r\n   at System.Net.NameResolutionPal+GetAddrInfoExState+<>c.<CompleteAsyncResult>b__5_0(System.Object)\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task+<>c.<.cctor>b__278_1(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe()\r\n   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n\r\nAm I misusing the the access token somehow and how do I prevent the handle from being disposed. I tried wrapping my code inside a using block, however this did not help.\r\n\r\n\r\n"},{"Id":"7804841801","Type":"IssuesEvent","CreatedAt":"2018-06-11T08:53:30","Actor":"RonnyRen","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3216","RelatedDescription":"Opened issue \"How to make proxy library work as nginx proxy which can preserver original request URL? Does it support?\" (#3216) at aspnet/Home","RelatedBody":"Example:\r\nThe Application Server: Name \"VMApp\", ASPNET Core API project\r\nThe access URL is http://VMApp:8011/api/values\r\n\r\nThe ASPNET Core Proxy Server: Name \"VMAppProxy\", ASPNET Core Web Application project\r\nThe access URL is http://VMAppProxy:8090\r\n\r\nThe Nginx Proxy Server: Name \"VMNginx\", listen 8090 port and proxy_pass is http://apinginx.com;\r\n upstream apinginx.com{\r\n        ip_hash;\r\n        server VMApp:8011;\r\n}\r\n\r\nAccess API through ASPNET Core Proxy Server:\r\nURL: http://VMAppProxy:8090/api/values\r\nLog in Application Server: The request URL is http://VMApp:8011/api/values\r\nNote: The URL is the URL accessed from Proxy Server, How to preserver the Original request URL like Nginx?\r\n\r\nAccess API from Nginx Proxy Server:\r\nURL: http://apinginx.com:8090/api/values\r\nLog in Application Server: The request URL is http://apinginx.com:8090/api/values\r\nNote: The URL is Original request URL"},{"Id":"7802791470","Type":"IssuesEvent","CreatedAt":"2018-06-10T16:26:23","Actor":"jesaremi","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Home/issues/3215","RelatedDescription":"Reopened issue \"An assembly specified in the application dependencies manifest (appname.deps.json) was not found:     package: 'Microsoft.ApplicationInsights.AspNetCore', version: '2.1.1'\" (#3215) at aspnet/Home","RelatedBody":"I'm trying to run this brand new aspnet 2.1 app -- that I built -- on WIndows bash using .netcore 2.1. And I get the following error:\r\n\r\nAn assembly specified in the application dependencies manifest (AutoFaqRestApi.deps.json) was not found:\r\n    package: 'Microsoft.ApplicationInsights.AspNetCore', version: '2.1.1'\r\n    path: 'lib/netstandard1.6/Microsoft.ApplicationInsights.AspNetCore.dll'\r\n\r\nI do not have anything to do with ApplicationInsights. And I have not explicitly added it anywhere to my project. How can I get rid of it? Or is this references by the aspnet itself?\r\n"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7810046671","Type":"IssuesEvent","CreatedAt":"2018-06-12T04:29:23","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2473","RelatedDescription":"Opened issue \"Universe CI warning from SignalR\" (#2473) at aspnet/SignalR","RelatedBody":"```\r\nC:\\projects\\universe\\modules\\SignalR\\src\\Microsoft.AspNetCore.SignalR.Specification.Tests\\Microsoft.AspNetCore.SignalR.Specification.Tests.csproj : warning KRB2003: Found a duplicate PackageReference for Internal.AspNetCore.Sdk. Restore results may be unpredictable. [C:\\Users\\appveyor\\.dotnet\\buildtools\\korebuild\\2.2.0-preview1-17089\\KoreBuild.proj]\r\nC:\\projects\\universe\\modules\\SignalR\\src\\Microsoft.AspNetCore.SignalR.Specification.Tests\\Microsoft.AspNetCore.SignalR.Specification.Tests.csproj : warning KRB2003: Found a duplicate PackageReference for Internal.AspNetCore.Sdk. Restore results may be unpredictable. [C:\\Users\\appveyor\\.dotnet\\buildtools\\korebuild\\2.2.0-preview1-17089\\KoreBuild.proj]\r\n    2 Warning(s)\r\n    0 Error(s)\r\n```\r\nhttps://ci.appveyor.com/project/aspnetci/universe/build/1.0.2341"},{"Id":"7809139425","Type":"PullRequestEvent","CreatedAt":"2018-06-11T22:52:12","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2472","RelatedDescription":"Opened pull request \"Add VerifyLogger to JS tests\" (#2472) at aspnet/SignalR","RelatedBody":"Opening PR early to get feedback on the test pattern.\r\n\r\nWill add to other tests once we review the pattern a bit."},{"Id":"7808889806","Type":"IssuesEvent","CreatedAt":"2018-06-11T21:44:53","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2460","RelatedDescription":"Closed issue \"How does signalR maps ConnectionId to connection for specyfic client?\" (#2460) at aspnet/SignalR","RelatedBody":"One more question:\r\nLet's assume that there are two servers with signalR, I will connect to first server, will second server be able to invoke methods on client if it knows ConnectionId?"},{"Id":"7808777093","Type":"IssuesEvent","CreatedAt":"2018-06-11T21:19:36","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2407","RelatedDescription":"Closed issue \"Enable TSLint for tests\" (#2407) at aspnet/SignalR","RelatedBody":"We should run TSLint over our unit tests. Particularly rules like [no-floating-promises](https://palantir.github.io/tslint/rules/no-floating-promises/) which ensure you properly `await` a promise. It's easy to mess that up and get weird behavior in a test.\r\n\r\nI'd suggest doing this by adding a new script to each of `clients\\ts\\signalr\\package.json` and `clients\\ts\\signalr-protocol-msgpack\\package.json` that lints the tests, and then have the `test` script in `clients\\ts\\package.json` run those commands before running `jest`."},{"Id":"7808776966","Type":"PullRequestEvent","CreatedAt":"2018-06-11T21:19:34","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2459","RelatedDescription":"Merged pull request \"fix #2407 by tslinting tests before running\" (#2459) at aspnet/SignalR","RelatedBody":"I also saw some extra logging that we intend to suppress and ~~noticed a weird compilation error (might not be happening on CI because of a compiler version difference or something, but it's benign to fix)~~ nothing else. [Everything is fine. We're all fine here. How are you?](https://www.youtube.com/watch?v=KYAbFqkvzQA)"},{"Id":"7808739484","Type":"IssuesEvent","CreatedAt":"2018-06-11T21:11:27","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2403","RelatedDescription":"Closed issue \"Automatically publish test applications on each commit\" (#2403) at aspnet/SignalR","RelatedBody":"We have the scripts, but now we want to deploy the test applications to Azure on each commit."}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7809224527","Type":"PullRequestEvent","CreatedAt":"2018-06-11T23:19:25","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7905","RelatedDescription":"Closed pull request \"Throw exception if filter factory types are provided to either TypeFi…\" (#7905) at aspnet/Mvc","RelatedBody":"…lterAttribute or ServiceFilterAttribute\r\n\r\n[Fixes #7855] AutoValidateAntiforgeryTokenAttribute does not validate requests when registered globally by type"},{"Id":"7809187422","Type":"PullRequestEvent","CreatedAt":"2018-06-11T23:07:11","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7889","RelatedDescription":"Merged pull request \"Add support for conventions in DefaultApiDescriptionProvider\" (#7889) at aspnet/Mvc","RelatedBody":"Fixes #7895 "},{"Id":"7809187410","Type":"IssuesEvent","CreatedAt":"2018-06-11T23:07:10","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7895","RelatedDescription":"Closed issue \"Add runtime support for ApiConventions\" (#7895) at aspnet/Mvc","RelatedBody":"* [ ] Have a way to associate a type or an assembly with one or more API convention\r\n* [ ] Discover a convention match and apply it during ApiDocument creation\r\n\r\nSee #7802 for further details"},{"Id":"7808987260","Type":"IssuesEvent","CreatedAt":"2018-06-11T22:08:40","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7906","RelatedDescription":"Opened issue \"Consider a way to allow custom API convention selection\" (#7906) at aspnet/Mvc","RelatedBody":"The current implementation does not allow for the API convention selection behavior to be customized. It's tied strictly to the implementation of analyzers with no way to choose an alternate algorithm for setting this. We should revisit this prior to 2.2.0-RC and see if we have had any feedback on if there's a need to customize this. I'd like to avoid building an extensibility behavior that makes it difficult for us to evolve the design of this feature."},{"Id":"7808797370","Type":"PullRequestEvent","CreatedAt":"2018-06-11T21:24:01","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7905","RelatedDescription":"Opened pull request \"Throw exception if filter factory types are provided to either TypeFi…\" (#7905) at aspnet/Mvc","RelatedBody":"…lterAttribute or ServiceFilterAttribute\r\n\r\n[Fixes #7855] AutoValidateAntiforgeryTokenAttribute does not validate requests when registered globally by type"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7809353530","Type":"IssuesEvent","CreatedAt":"2018-06-12T00:04:02","Actor":"kofifus","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1828","RelatedDescription":"Opened issue \"connect to .NET Core 2.1 \"Identity as UI\" from a .NET Core 2.1 console app client\" (#1828) at aspnet/Identity","RelatedBody":"I create a simple .NET Core 2.1 server using \"Identity as UI\" with the default template, and then add some methods with [Authorize]\r\n\r\nI now need to create  .NET Core 2.1 console app client but I can find nothing on how to authenticate that client with the server. In particular I want to authenticate and then get the authentication cookie so that I can later feed it to ie SignalR.\r\n\r\nHow do I do that ? is there any sample code anywhere ?\r\n\r\nThanks!\r\n"},{"Id":"7808667007","Type":"PullRequestEvent","CreatedAt":"2018-06-11T20:56:44","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1827","RelatedDescription":"Merged pull request \"Fix /// comments\" (#1827) at aspnet/Identity","RelatedBody":"The returns tag incorrectly states that AddDefaultIdentity<T>\r\nreturns IServiceCollection when it actually returns IdentityBuilder."},{"Id":"7808599017","Type":"PullRequestEvent","CreatedAt":"2018-06-11T20:43:23","Actor":"tstivers1990","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1827","RelatedDescription":"Opened pull request \"Fix /// comments\" (#1827) at aspnet/Identity","RelatedBody":"The returns tag incorrectly states that AddDefaultIdentity<T>\r\nreturns IServiceCollection when it actually returns IdentityBuilder."},{"Id":"7808370179","Type":"IssuesEvent","CreatedAt":"2018-06-11T19:57:29","Actor":"ATylerYarnott","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1826","RelatedDescription":"Opened issue \"Configuirability of QR code site name in UI library\" (#1826) at aspnet/Identity","RelatedBody":"In playing with the new Identity UI as a Razor Class Library, I came across the issue of how to configure the site's QR code. Previously, it was suggested to change the value in the EnableAuthenticator.chtml.cs file (the default value would be taken from the solution name). It looks like this value is hard-coded to \"Microsoft.AspNetCore.Identity.UI\". Thus, every website would need to scaffold and override that file in order to customize this.\r\n\r\nShould there perhaps be an AuthenticationTokenProviderOptions class available in ConfigureServices that would allow this to be specified, perhaps defaulting to the solution name? Perhaps something like:\r\n\r\nservices.Configure<AuthenticationTokenProviderOptions>(options =>\r\n{\r\n    options.AuthenticatorSiteName = \"MyWebsiteName\";\r\n}\r\n\r\nThis would follow current conventions, allow changing this value without scaffolding/overriding the UI RCL, and would provide a simpler method to configure that behavior even if that file is overridden.\r\n\r\nThoughts or alternate proposals?"},{"Id":"7807841021","Type":"IssuesEvent","CreatedAt":"2018-06-11T18:12:12","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1824","RelatedDescription":"Closed issue \"Securely disable asp.net core 2.1 identity user registration\" (#1824) at aspnet/Identity","RelatedBody":"In asp.net core 2.1 identity projects with authentication for users the default UI contains user registration functionality. In the past to avoid a potential security risk (particularly for enterprise apps without open user registration) you could simply delete the relevant controller and view code for registration.\r\n\r\nWhat is the proper process for disabling user registration with this new razor library? \r\nScaffold the Account\\Register section and then comment out the code within Register.cshtml and Register.cshtml.cs? I assume you cannot simply comment out the files entirely but instead essentially comment out the specific functions like OnGet, OnPost and so on? \r\nCan you just delete these file[s] completely or will that then revert to the built-in razor library code?\r\n\r\nSecondarily how does one disable the default identity razor class library all together so that there is no potential for attack surface creep in future updates or changes to said library? E.g. My authentication UI/Controllers are only what I have explicitly coded them to be. thank you!"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7809294770","Type":"PullRequestEvent","CreatedAt":"2018-06-11T23:43:34","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2660","RelatedDescription":"Merged pull request \"React to aspnet/BuildTools#684\" (#2660) at aspnet/KestrelHttpServer","RelatedBody":"This should fix the travis linux builds.\r\n\r\naspnet/BuildTools#684"},{"Id":"7808911554","Type":"IssuesEvent","CreatedAt":"2018-06-11T21:49:56","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2282","RelatedDescription":"Closed issue \"Flaky test: ConnectionCountingReturnsToZero\" (#2282) at aspnet/KestrelHttpServer","RelatedBody":"I set `ConnectionCountingReturnsToZero` to ignore for now because it [fails](http://aspnetci/viewLog.html?buildId=397052&tab=buildResultsDiv&buildTypeId=XPlat_HighSierraOsxUniverse) on OSX sometimes. It should be investigated and re-enabled once fixed."},{"Id":"7808843619","Type":"IssuesEvent","CreatedAt":"2018-06-11T21:34:22","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2651","RelatedDescription":"Closed issue \"H2Spec ArgumentOutOfRangeException \" (#2651) at aspnet/KestrelHttpServer","RelatedBody":"This happens on h2spec (v2.1) test http2/4.2 and the test hangs afterwards. Repros with and without TLS.\r\n```\r\ncrit: Microsoft.AspNetCore.Server.Kestrel[0]\r\n      Unexpected exception in HttpConnection.ProcessRequestsAsync.\r\nSystem.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\r\n   at System.Span`1..ctor(T[] array, Int32 start, Int32 length)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Frame.get_Raw() in D:\\github\\AspNet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http2\\Http2Frame.cs:line 22\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2FrameReader.ReadFrame(ReadOnlySequence`1 readableBuffer, Http2Frame frame, SequencePosition& consumed, SequencePosition& examined) in D:\\github\\AspNet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http2\\Http2FrameReader.cs:line 23\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection.ProcessRequestsAsync[TContext](IHttpApplication`1 application) in D:\\github\\AspNet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http2\\Http2Connection.cs:line 160\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection.ProcessRequestsAsync[TContext](IHttpApplication`1 application) in D:\\github\\AspNet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http2\\Http2Connection.cs:line 221\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection.ProcessRequestsAsync[TContext](IHttpApplication`1 httpApplication) in D:\\github\\AspNet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\HttpConnection.cs:line 185\r\ndbug: Microsoft.AspNetCore.Server.Kestrel[2]\r\n      Connection id \"0HLEB1F2PS7B8\" stopped.\r\n```\r\n\r\nNote this is most visible when running the full h2spec test suite from the command line against the http/2 sample app. Running the individual test cases from VS does not hang."},{"Id":"7808842012","Type":"PullRequestEvent","CreatedAt":"2018-06-11T21:33:59","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2656","RelatedDescription":"Merged pull request \"Enforce max frame size \" (#2656) at aspnet/KestrelHttpServer","RelatedBody":"#2651 The MaxFrameSize setting wasn't being enforced so instead you'd get an ArgumentOutOfRangeException for frames larger than the buffer. The h2spec test 4.2 found this, but it wasn't actually failing because the exception was still handled and terminated the connection, only with the wrong http2 error."},{"Id":"7808642520","Type":"PullRequestEvent","CreatedAt":"2018-06-11T20:51:57","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2650","RelatedDescription":"Merged pull request \"Disable AllowRenegotiation for HTTP/2\" (#2650) at aspnet/KestrelHttpServer","RelatedBody":"#2251 This is a spec requirement.\r\n\r\nI can't directly test it because SslStream doesn't have a client API to trigger a renegotiate. I added a test to ensure this didn't regress 1.1 client certs since renegotiation is often used to request optional client certs. We'll have to figure out http2 functional tests before I can write a http2 client cert test."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7808907675","Type":"IssuesEvent","CreatedAt":"2018-06-11T21:49:02","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2299","RelatedDescription":"Closed issue \"Completing C# inside single line @{} doesn't complete\" (#2299) at aspnet/Razor","RelatedBody":"When doing: `@{th}` and completing `this` the `is` is never inserted.\r\n\r\nhttps://i.imgur.com/QrgltyC.gifv\r\n\r\n![image](https://i.imgur.com/QrgltyC.gif)\r\n\r\nThis seems to be because we don't generate C# place holders in the middle of a single line `@{}`\r\n\r\nVSTS Issue: https://devdiv.visualstudio.com/DevDiv/Project%20Cascade/_workitems/edit/602933 \r\n\r\n/cc @ToddGrun "},{"Id":"7808906186","Type":"PullRequestEvent","CreatedAt":"2018-06-11T21:48:40","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2392","RelatedDescription":"Merged pull request \"Generate line pragmas even for whitespace.\" (#2392) at aspnet/Razor","RelatedBody":"- We need to pre-emptively generate line pragmas to handle C# scenarios which are session based. For instance, if a C# completion session starts at a location without a pragma they capture the origination point; at which point if a user keeps typing we generate a line pragma drastically changing where the copmletion started resulting in a broken C# completion experience.\r\n- Updated test files to reflect new behavior.\r\n\r\nThis is what this PR enables:\r\n![image](https://i.imgur.com/fnplPhA.gif)\r\n\r\n\r\n#2299"},{"Id":"7807650816","Type":"IssuesEvent","CreatedAt":"2018-06-11T17:34:46","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2297","RelatedDescription":"Closed issue \"At design time Razor's SmartIndenter interferes with JavaScript function blocks.\" (#2297) at aspnet/Razor","RelatedBody":"When typing:\r\n```HTML\r\n<script>\r\n    function foo() {|\r\n</script>\r\n```\r\nAnd pressing enter at the `|` you get:\r\n```HTML\r\n<script>\r\n    function foo() {\r\n        |\r\n\r\n    }\r\n</script>\r\n```\r\n\r\nOur brace smart indenter should be smarter about where it indents extra newlines to not interfere with other auto-complete language services.\r\n\r\nVSTS Issue: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/605105\r\n\r\n/cc @ToddGrun \r\n"},{"Id":"7807649261","Type":"PullRequestEvent","CreatedAt":"2018-06-11T17:34:27","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2394","RelatedDescription":"Merged pull request \"Make brace indenter smarter about making edits to non-valid content kinds.\" (#2394) at aspnet/Razor","RelatedBody":"- Prior to this change our brace smart indenter would indent JavaScript blocks incorrectly because it didn't take into account where in a Razor file the brace that it was indenting existed.\r\n- Made it so the brace smart indenter only functions in code/metacode locations within the SyntaxTree.\r\n- Updated and added tests to account for new behavior.\r\n\r\n#2297"},{"Id":"7807346009","Type":"IssuesEvent","CreatedAt":"2018-06-11T16:33:27","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2398","RelatedDescription":"Opened issue \"ASP.NET Core 2.1 gives error CS2017: Cannot specify /main if building a module or library\" (#2398) at aspnet/Razor","RelatedBody":"Original issue: https://github.com/aspnet/websdk/issues/350\r\n\r\nSteps to reproduce:\r\n\r\n- Install .NET Core SDK 2.1\r\n- Create a new project with dotnet new \"asp.net core web app\"\r\n- The project compiles OK\r\n- Add element `<StartupObject>foo.Program</StartupObject>` to the csproj\r\n\r\nBuild fails with:\r\n\r\n1>CSC : error CS2017: Cannot specify /main if building a module or library\r\n\r\nThis error did not occur with 2.0. Also a plain .NET core console app initialized with dotnet new \"console application\" does not have this problem.\r\n"},{"Id":"7807151169","Type":"IssuesEvent","CreatedAt":"2018-06-11T15:57:46","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2353","RelatedDescription":"Closed issue \"DocumentClassifier should assign a class name when filepath is null\" (#2353) at aspnet/Razor","RelatedBody":"https://github.com/aspnet/Razor/blob/dev/src/Microsoft.AspNetCore.Mvc.Razor.Extensions/MvcViewDocumentClassifierPass.cs#L28\r\n\r\nIn the above line, when the file path is null, we set the generated class name to null. This makes the CodeWriter throw an exception when generating the code. I think we should fix this as not all Razor documents have file path, for example, default imports.\r\n\r\n@NTaylorMullen @rynowak thoughts?"},{"Id":"7807128119","Type":"PullRequestEvent","CreatedAt":"2018-06-11T15:53:52","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/pull/2389","RelatedDescription":"Closed pull request \"Use checksum for classname if filepath is null\" (#2389) at aspnet/Razor","RelatedBody":"https://github.com/aspnet/Razor/issues/2353\r\n\r\n"},{"Id":"7805938246","Type":"IssuesEvent","CreatedAt":"2018-06-11T12:37:49","Actor":"andoband","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2397","RelatedDescription":"Opened issue \"Vue-like directives\" (#2397) at aspnet/Razor","RelatedBody":"I've grown to enjoy Vue's `v-if`, `v-show`, and `v-for` directives.  Maybe it's because I've gotten used to Vue, but it feels cleaner than the `@if` and `@foreach` blocks used by Razor and Blazor.  Specifically, it's easier for me to visualize the document structure when the code expressions are inlined with the elements versus external to them.  I also like how well it jells with declarative and reactive client-side development.\r\n\r\nCould Razor/Blazor add a similar syntax?\r\n\r\nI realize this is a personal preference and that there are folks that dislike this declarative style, so I'm not asking to replace the current syntax but rather to add to it in a Blazor-compatible way.\r\n\r\nFor example:\r\n\r\n**Razor/Blazor** (today)\r\n```html\r\n@if (bar != null)\r\n{\r\n    <ul>\r\n        @foreach (var foo in bar) \r\n        {\r\n            <li>@foo.Name</li>\r\n        }\r\n    </ul>\r\n}\r\n```\r\n\r\n**Vue-like** (suggested, or something similar)\r\n```html\r\n<ul @if=\"bar != null\">\r\n    <li @foreach=\"var foo in bar\">@foo.Name</li>\r\n</ul>\r\n```"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7780449586","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Opened issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#1075) at aspnet/Tooling","RelatedBody":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/"},{"Id":"7773593004","Type":"IssuesEvent","CreatedAt":"2018-06-04T18:29:24","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Reopened issue \"Docker in launchSettings.json\" (#1074) at aspnet/Tooling","RelatedBody":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image."},{"Id":"7766446851","Type":"IssuesEvent","CreatedAt":"2018-06-02T16:19:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Closed issue \"Docker in launchSettings.json\" (#1074) at aspnet/Tooling","RelatedBody":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image."},{"Id":"7766245633","Type":"IssuesEvent","CreatedAt":"2018-06-02T14:10:14","Actor":"AceHack","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Opened issue \"Docker in launchSettings.json\" (#1074) at aspnet/Tooling","RelatedBody":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image."},{"Id":"7763744014","Type":"PullRequestEvent","CreatedAt":"2018-06-01T17:41:05","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Merged pull request \"Update dotnet-core-2.1.md\" (#1073) at aspnet/Tooling","RelatedBody":"Visual Studio 2017 15.7 has been released now so this document is outdated"},{"Id":"7755515411","Type":"PullRequestEvent","CreatedAt":"2018-05-31T10:25:30","Actor":"federicorinaldi","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Opened pull request \"Update dotnet-core-2.1.md\" (#1073) at aspnet/Tooling","RelatedBody":"Visual Studio 2017 15.7 has been released now so this document is outdated"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7784515869","Type":"IssuesEvent","CreatedAt":"2018-06-06T13:30:31","Actor":"Tratcher","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Closed issue \"怎么找工作啊\" (#304) at aspnet/Announcements","RelatedBody":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n"},{"Id":"7784252237","Type":"IssuesEvent","CreatedAt":"2018-06-06T12:44:46","Actor":"ToLearnMoe","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Opened issue \"怎么找工作啊\" (#304) at aspnet/Announcements","RelatedBody":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n"},{"Id":"7780482734","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:11:55","Actor":"AngelosP","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Closed issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303) at aspnet/Announcements","RelatedBody":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\r\n\r\nFor discussion, use https://github.com/aspnet/Tooling/issues/1075"},{"Id":"7780413898","Type":"IssuesEvent","CreatedAt":"2018-06-05T19:58:25","Actor":"AngelosP","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Opened issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303) at aspnet/Announcements","RelatedBody":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"331236724","IsPullRequest":false,"CreatedAt":"2018-06-11T17:49:39","Actor":"ge0rgi","Number":"3217","RawContent":null,"Title":"SafeHandle has been closed when using WindowsIdentity.RunImpersonated","State":"closed","Body":"Hello everyone.\r\n\r\nI am having trouble using Impersonation in asp.net core. I have an .NET core web API and .NET web application both running .NET core 2.1 and  using Windows Authentication.\r\n\r\nI am trying to access the web service from the web application like this:\r\n\r\n`\r\n           var identity = User.Identity as WindowsIdentity;\r\n            \r\n            var test = WindowsIdentity.RunImpersonated(identity.AccessToken, () =>\r\n            {\r\n               var client = new HttpClient(new HttpClientHandler() { UseDefaultCredentials = true }) { BaseAddress = new Uri(MY_URL) };\r\n                try\r\n                {\r\n                    var rq = new HttpRequestMessage(HttpMethod.Get, \"mymethod\");\r\n                    var response = client.SendAsync(rq).Result;\r\n                    var responseString = response.Content.ReadAsStringAsync().Result;\r\n                    return responseString;\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    return null;\r\n                }\r\n            });`\r\n\r\n\r\nI am getting the following Error on the production server and occasionally on my local machine \r\n\r\n> The process was terminated due to an unhandled exception.System.ObjectDisposedException: Safe handle has been closed\r\n \r\nFull stack trace:\r\n\r\n> Application: dotnet.exe\r\nCoreCLR Version: 4.6.26515.7\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: An exception was not handled in an AsyncLocal<T> notification callback.\r\nDescription: The process was terminated due to an unhandled exception.System.ObjectDisposedException: Safe handle has been closed\r\n   at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)\r\n   at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)\r\n   at Interop.Advapi32.ImpersonateLoggedOnUser(SafeAccessTokenHandle userToken)\r\n   at System.Security.Principal.WindowsIdentity.CurrentImpersonatedTokenChanged(AsyncLocalValueChangedArgs`1 args)\r\n   at System.Threading.AsyncLocal`1.System.Threading.IAsyncLocal.OnValueChanged(Object previousValueObj, Object currentValueObj, Boolean contextChanged)\r\n   at System.Threading.ExecutionContext.OnValuesChanged(ExecutionContext previousExecutionCtx, ExecutionContext nextExecutionCtx)\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at System.Threading.ExecutionContext.OnValuesChanged(System.Threading.ExecutionContext, System.Threading.ExecutionContext)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncFailure(System.Exception, Int32, System.Net.Sockets.SocketFlags)\r\n   at System.Net.Sockets.MultipleConnectAsync.AsyncFail(System.Exception)\r\n   at System.Net.Sockets.MultipleConnectAsync.Fail(Boolean, System.Exception)\r\n   at System.Net.Sockets.MultipleConnectAsync.DoDnsCallback(System.IAsyncResult, Boolean)\r\n   at System.Net.Sockets.MultipleConnectAsync.DnsCallback(System.IAsyncResult)\r\n   at System.Net.LazyAsyncResult.Complete(IntPtr)\r\n   at System.Net.ContextAwareResult.CompleteCallback()\r\n   at System.Net.ContextAwareResult+<>c.<Complete>b__15_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Net.ContextAwareResult.Complete(IntPtr)\r\n   at System.Net.LazyAsyncResult.ProtectedInvokeCallback(System.Object, IntPtr)\r\n   at System.Net.NameResolutionPal+GetAddrInfoExState+<>c.<CompleteAsyncResult>b__5_0(System.Object)\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task+<>c.<.cctor>b__278_1(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe()\r\n   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n\r\nAm I misusing the the access token somehow and how do I prevent the handle from being disposed. I tried wrapping my code inside a using block, however this did not help.\r\n\r\n\r\n","Url":"https://github.com/aspnet/Home/issues/3217","RelatedDescription":"Closed issue \"SafeHandle has been closed when using WindowsIdentity.RunImpersonated\" (#3217)"},{"Id":"331099080","IsPullRequest":false,"CreatedAt":"2018-06-11T08:53:30","Actor":"RonnyRen","Number":"3216","RawContent":null,"Title":"How to make proxy library work as nginx proxy which can preserver original request URL? Does it support?","State":"open","Body":"Example:\r\nThe Application Server: Name \"VMApp\", ASPNET Core API project\r\nThe access URL is http://VMApp:8011/api/values\r\n\r\nThe ASPNET Core Proxy Server: Name \"VMAppProxy\", ASPNET Core Web Application project\r\nThe access URL is http://VMAppProxy:8090\r\n\r\nThe Nginx Proxy Server: Name \"VMNginx\", listen 8090 port and proxy_pass is http://apinginx.com;\r\n upstream apinginx.com{\r\n        ip_hash;\r\n        server VMApp:8011;\r\n}\r\n\r\nAccess API through ASPNET Core Proxy Server:\r\nURL: http://VMAppProxy:8090/api/values\r\nLog in Application Server: The request URL is http://VMApp:8011/api/values\r\nNote: The URL is the URL accessed from Proxy Server, How to preserver the Original request URL like Nginx?\r\n\r\nAccess API from Nginx Proxy Server:\r\nURL: http://apinginx.com:8090/api/values\r\nLog in Application Server: The request URL is http://apinginx.com:8090/api/values\r\nNote: The URL is Original request URL","Url":"https://github.com/aspnet/Home/issues/3216","RelatedDescription":"Open issue \"How to make proxy library work as nginx proxy which can preserver original request URL? Does it support?\" (#3216)"},{"Id":"330934341","IsPullRequest":false,"CreatedAt":"2018-06-10T02:23:28","Actor":"jesaremi","Number":"3215","RawContent":null,"Title":"An assembly specified in the application dependencies manifest (appname.deps.json) was not found:     package: 'Microsoft.ApplicationInsights.AspNetCore', version: '2.1.1'","State":"open","Body":"I'm trying to run this brand new aspnet 2.1 app -- that I built -- on WIndows bash using .netcore 2.1. And I get the following error:\r\n\r\nAn assembly specified in the application dependencies manifest (AutoFaqRestApi.deps.json) was not found:\r\n    package: 'Microsoft.ApplicationInsights.AspNetCore', version: '2.1.1'\r\n    path: 'lib/netstandard1.6/Microsoft.ApplicationInsights.AspNetCore.dll'\r\n\r\nI do not have anything to do with ApplicationInsights. And I have not explicitly added it anywhere to my project. How can I get rid of it? Or is this references by the aspnet itself?\r\n","Url":"https://github.com/aspnet/Home/issues/3215","RelatedDescription":"Open issue \"An assembly specified in the application dependencies manifest (appname.deps.json) was not found:     package: 'Microsoft.ApplicationInsights.AspNetCore', version: '2.1.1'\" (#3215)"},{"Id":"330885405","IsPullRequest":false,"CreatedAt":"2018-06-09T13:17:39","Actor":"Deegava","Number":"3214","RawContent":null,"Title":"Nuget package feed seems broken","State":"closed","Body":"Trying to update to lastest version but instead it has wiped all  references to AspNetCore and won't install. I have 4000 broken references because the packages won't come down. Why is it trying to pull from nightly builds?\r\n\r\n```\r\nPM> Install-Package Microsoft.AspNetCore.Mvc -Version 2.1.0\r\n  GET https://www.nuget.org/api/v2/Packages(Id='Microsoft.AspNetCore.Mvc',Version='2.1.0')\r\n  OK https://www.nuget.org/api/v2/Packages(Id='Microsoft.AspNetCore.Mvc',Version='2.1.0') 358ms\r\n  GET _**https://www.myget.org/F/aspnetwebstacknightly/Packages(Id='Microsoft.AspNetCore.Mvc',Version='2.1.0')\r\nError finding repository for 'http://www.myget.org/F/aspnetwebstacknightly/': An error occurred while retrieving package metadata for 'Microsoft.AspNetCore.Mvc.2.1.0' from source 'Nightly Builds'.\r\n  Failed to fetch results from V2 feed at 'https://www.myget.org/F/aspnetwebstacknightly/Packages(Id='Microsoft.AspNetCore.Mvc',Version='2.1.0')' with following message : A task was canceled.\r\n  A task was canceled.**_\r\n```","Url":"https://github.com/aspnet/Home/issues/3214","RelatedDescription":"Closed issue \"Nuget package feed seems broken\" (#3214)"},{"Id":"330819641","IsPullRequest":false,"CreatedAt":"2018-06-08T22:23:08","Actor":"Korporal","Number":"3213","RawContent":null,"Title":"Question: Why does the 'Startup' class not have to implement some basic interface?","State":"open","Body":"I'm rather curious about what I see in a new ASP.NET Core Web App project when I create one from the VS 2017 template.\r\n\r\nThe program class (akin to a Console app) passes the type `Startup `when it invokes the generic `UseStartup<T>() `method.\r\n\r\nIn Startup.cs I see methods `ConfigureServices `and `Configure `- both of which are called by \"the runtime\".\r\n\r\nThis strikes me as a perfect and pretty obvious example of where an interface would be used, Yet the generic `UseStartup `method has a contraint that is nothing more than `where TStartup : class`.\r\n\r\nIf I create a deliberately dumb class I get no compile time messages, just this runtime message:\r\n\r\n`InvalidOperationException: A public method named 'ConfigureDevelopment' or 'Configure' could not be found in the 'CoreWeb1.DumbStartup' type.`\r\n\r\nSo what's the reasoning behind this when the C# language provides a host of capabilities? Surely this isn't something you'd address through a pull request, for example by altering [this file](https://github.com/aspnet/Hosting/blob/dev/src/Microsoft.AspNetCore.Hosting/WebHostBuilderExtensions.cs)?\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Home/issues/3213","RelatedDescription":"Open issue \"Question: Why does the 'Startup' class not have to implement some basic interface?\" (#3213)"},{"Id":"330445144","IsPullRequest":false,"CreatedAt":"2018-06-08T18:37:00","Actor":"hvaidya1","Number":"3211","RawContent":null,"Title":"Upgrading to .net core 2.1 breaks routing","State":"closed","Body":"We recently upgraded from .net core 2.0 to .net core 2.1 and mvc routing stopped working for all my projects. The error says \"route not matched\". The same code works with .net core 2.0\r\nAll my projects are console application. Self-hosted.\r\nWhat is the breaking change and the reason behind this?","Url":"https://github.com/aspnet/Home/issues/3211","RelatedDescription":"Closed issue \"Upgrading to .net core 2.1 breaks routing\" (#3211)"},{"Id":"330752446","IsPullRequest":false,"CreatedAt":"2018-06-08T18:05:21","Actor":"ryanbrandenburg","Number":"3212","RawContent":null,"Title":"Flaky test: CloseFromCloseReceived_Success","State":"open","Body":"This test [fails occasionally](https://dotnet.visualstudio.com/public/public%20Team/_build/results?buildId=1044&view=ms.vss-test-web.test-result-details) with the following error:\r\n\r\n```\r\n2018-06-07T23:37:11.5519533Z   Failed   Microsoft.AspNetCore.WebSockets.Test.WebSocketMiddlewareTests.CloseFromCloseReceived_Success\r\n2018-06-07T23:37:11.6164023Z RUNDOTNET : error Message:  [/root/.dotnet/buildtools/korebuild/2.2.0-preview1-17081/KoreBuild.proj]\r\n2018-06-07T23:37:11.6182635Z    Assert.Equal() Failure\r\n2018-06-07T23:37:11.6199204Z   Expected: Closed\r\n2018-06-07T23:37:11.6216280Z   Actual:   Aborted\r\n2018-06-07T23:37:11.6238272Z   Stack Trace:\r\n2018-06-07T23:37:11.6269835Z      at Microsoft.AspNetCore.WebSockets.Test.WebSocketMiddlewareTests.CloseFromCloseReceived_Success() in /_/test/Microsoft.AspNetCore.WebSockets.Test/WebSocketMiddlewareTests.cs:line 554\r\n2018-06-07T23:37:11.6289709Z   --- End of stack trace from previous location where exception was thrown ---\r\n2018-06-07T23:37:11.6305935Z   Standard Output Messages:\r\n2018-06-07T23:37:11.6324665Z    | [0.017s] TestLifetime Information: Starting test CloseFromCloseReceived_Success at 2018-06-07T23:37:08\r\n2018-06-07T23:37:11.6340380Z    | [0.001s] TestLifetime Information: Starting test CloseFromCloseReceived_Success at 2018-06-07T23:37:08\r\n2018-06-07T23:37:11.6364649Z RUNDOTNET : | [0.182s] Microsoft.AspNetCore.Server.Kestrel warning : Unable to bind to http://localhost:54321 on the IPv6 loopback interface: 'Cannot assign requested address'. [/root/.dotnet/buildtools/korebuild/2.2.0-preview1-17081/KoreBuild.proj]\r\n2018-06-07T23:37:11.6382410Z    | [0.525s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 GET http://localhost:54321/  \r\n2018-06-07T23:37:11.6399211Z    | [1.771s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 1245.38ms 101 \r\n2018-06-07T23:37:11.6415897Z    | [2.490s] TestLifetime Information: Finished test CloseFromCloseReceived_Success in 2.4891025s\r\n2018-06-07T23:37:11.6434292Z    | [2.533s] TestLifetime Information: Finished test CloseFromCloseReceived_Success in 2.5263162s\r\n```","Url":"https://github.com/aspnet/Home/issues/3212","RelatedDescription":"Open issue \"Flaky test: CloseFromCloseReceived_Success\" (#3212)"},{"Id":"330227063","IsPullRequest":false,"CreatedAt":"2018-06-08T07:42:45","Actor":"EldinZenderink","Number":"3206","RawContent":null,"Title":"Core 2.0 WebSocket ReceiveBufferSize being ignored.","State":"closed","Body":"I am not exactly sure if this is an issue or that I am doing something wrong, but I can't seem to find a solution for something that should be quit easy.\r\n\r\n[https://stackoverflow.com/questions/50739391/asp-net-core-2-0-websocketoptions-ignores-receive-buffer-size](https://stackoverflow.com/questions/50739391/asp-net-core-2-0-websocketoptions-ignores-receive-buffer-size)\r\n","Url":"https://github.com/aspnet/Home/issues/3206","RelatedDescription":"Closed issue \"Core 2.0 WebSocket ReceiveBufferSize being ignored.\" (#3206)"},{"Id":"330427004","IsPullRequest":false,"CreatedAt":"2018-06-07T20:38:40","Actor":"xs2bharat","Number":"3210","RawContent":null,"Title":"Unable to debug asp.net core api (.net core 2.1 / VS 2017)","State":"open","Body":"I am unable to debug sample asp.net core web api application created through https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-2.1. \r\n\r\nI am using windows 10 / iis express / .net core 2.1 / latest vs 2017\r\n\r\nGetting error: An error occurred attempting to determine the process id of dotnet.exe which is hosting your application. A task was canceled.\r\n\r\nThere was warning in event log: The directory specified for caching compressed content C:\\inetpub\\temp\\IIS Temporary Compressed Files\\xxxxx AppPool is invalid.  Static compression is being disabled.\r\n\r\nEven though above path is wrong as i am using iis express, After creating above path, nothing get logged in event log but still getting error.","Url":"https://github.com/aspnet/Home/issues/3210","RelatedDescription":"Open issue \"Unable to debug asp.net core api (.net core 2.1 / VS 2017)\" (#3210)"},{"Id":"330346870","IsPullRequest":false,"CreatedAt":"2018-06-07T17:04:28","Actor":"groogiam","Number":"3208","RawContent":null,"Title":"Cannot Upgrade Package Microsoft.AspNetCore.All to version 2.1.0","State":"closed","Body":"When creating a new Asp.Net core app in visual studio it is impossible to update the Microsoft.AspNetCore.All package to version 2.1.0.\r\n\r\nThe project was created referencing 2.0.8 of this package. When attempting to upgrade I get the following error.\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\tPackage Microsoft.AspNetCore.All 2.1.0 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0) / win7-x64. Package Microsoft.AspNetCore.All 2.1.0 supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1)\t\t\t0\t\r\n\r\nI have the latest version of visual studio installed 15.7.3 and Nuget 4.6\r\n\r\nThere is no option in Visual studio to select netcoreapp2.1.\r\n","Url":"https://github.com/aspnet/Home/issues/3208","RelatedDescription":"Closed issue \"Cannot Upgrade Package Microsoft.AspNetCore.All to version 2.1.0\" (#3208)"},{"Id":"330069408","IsPullRequest":false,"CreatedAt":"2018-06-07T16:40:28","Actor":"anorborg","Number":"3205","RawContent":null,"Title":"ASP.NET Core 2.1 UseHttpsRedirection on macOS/kestrel not working ","State":"closed","Body":"I was working on a fairly empty project (made from the dotnet new webapi template. Attempted to use app.UseHttpsRedirection. While the page loads with https, if I use an http://localhost:5001 directly, I don't get redirected, just no response. Am I configuring something incorrectly?\r\n\r\nI attempted to configure per docs here:\r\nhttps://docs.microsoft.com/en-us/aspnet/core/security/enforcing-ssl?view=aspnetcore-2.1&tabs=visual-studio#http-strict-transport-security-protocol-hsts\r\n\r\nadding:\r\n\r\n```\r\nservices.AddHttpsRedirection(options =>\r\n{\r\n      options.RedirectStatusCode = StatusCodes.Status301MovedPermanently;\r\n      options.HttpsPort = 5001;\r\n})\r\n```\r\n\r\nand\r\n\r\n```\r\napp.UseHttpsRedirection();\r\n```\r\n\r\ncurl output is:\r\n```\r\ncurl -I http://localhost:5001\r\ncurl: (52) Empty reply from server\r\n```\r\n\r\nAny thoughts on my config?\r\n\r\n\r\n","Url":"https://github.com/aspnet/Home/issues/3205","RelatedDescription":"Closed issue \"ASP.NET Core 2.1 UseHttpsRedirection on macOS/kestrel not working \" (#3205)"},{"Id":"330350567","IsPullRequest":false,"CreatedAt":"2018-06-07T16:36:54","Actor":"Korporal","Number":"3209","RawContent":null,"Title":"This is killing me","State":"open","Body":"I'm reading that I can create an ASP.NET Core wb app project that targets .Net Framework. However there have been numerous articles published over the past year that are either out of date or simply flat wrong.\r\n\r\nOne article said to edit the project.json file - then a little later I discover this is no longer used and we're back to good old *.csproj.\r\n\r\nAnyway when I create a new ASP.NET Core web app I get no option to select a target framework (I've installed 2.1 too by the way).\r\n\r\nEven after the project is created if I go to project properties then the Application pane the only options in Target framework dropdown list are .Net Core 1.0, 1.1, 2.0 and 2.1 - No sign anywhere of .Net Framework.\r\n\r\nSo perhaps one must manually edit the *.csproj file which is inexcusably sloppy if true.\r\n\r\nI've said this before and so have others - this is a mess...\r\n","Url":"https://github.com/aspnet/Home/issues/3209","RelatedDescription":"Open issue \"This is killing me\" (#3209)"},{"Id":"330321632","IsPullRequest":false,"CreatedAt":"2018-06-07T16:07:20","Actor":"svallis","Number":"3207","RawContent":null,"Title":"Site being served over HTTP on IIS despite HSTS and redirects enabled","State":"closed","Body":"I hope I'm not missing something simple here, but if I deploy a brand new `dotnet new razor` site using 2.1.0 to our IIS hosting platform, pages can still be requested over HTTP. I have verified that the hosting environment is `Production`, and yet despite the `app.UseHsts();` and `app.UseHttpsRedirection();` insecure requests seem to still work under some circumstances.\r\n\r\nUsing Chrome, if I open a new tab and type the bare host/domain, I see a `307 Internal Redirect` in the logs that gives a non-authoritative reason of HSTS, which is what I expect to see. However, if I open a new incognito tab and prefix the host/domain with `http://` then the site loads with a `200 OK` on an insecure connection.\r\n\r\nAm I missing something obvious here and this is working as intended? I expected that it would be impossible to request an unencrypted version of any pages. I should note that in a development environment I cannot reproduce this behaviour, even though `app.UseHsts();` is not called all insecure requests seem to be redirected.","Url":"https://github.com/aspnet/Home/issues/3207","RelatedDescription":"Closed issue \"Site being served over HTTP on IIS despite HSTS and redirects enabled\" (#3207)"},{"Id":"330000130","IsPullRequest":false,"CreatedAt":"2018-06-06T19:24:30","Actor":"leecow","Number":"3204","RawContent":null,"Title":"Run ASP.Net Core on Android+iOs Fully as if its a normal PC","State":"open","Body":"Opened by @reader-man\r\n\r\n> It would be great to have ASP.Net Core run fully on an android device or iPhone mobile, both the front end and the back end, as a normal app, this will bring the web development to the mobile area.\r\n> \r\n> So, i suggest to make ASP.Net Core as a first class citizen in these devices, not just the .net core, but also the ASP.Net core, so when we download an app from the android store or iOS store, it will run like normal app, but its created above ASP.Net Core that is running fully on the device, and this will ease connecting to other online services as .net core has all these hooks made up.\r\n\r\nre https://github.com/dotnet/core/issues/1658\r\n","Url":"https://github.com/aspnet/Home/issues/3204","RelatedDescription":"Open issue \"Run ASP.Net Core on Android+iOs Fully as if its a normal PC\" (#3204)"},{"Id":"329974026","IsPullRequest":false,"CreatedAt":"2018-06-06T18:04:05","Actor":"evil-shrike","Number":"3203","RawContent":null,"Title":"Add HttpRequest.GetUri method","State":"open","Body":"There's a helpful extension method: `Microsoft.ApplicationInsights.AspNetCore.Extensions.HttpRequestExtensions.GetUri` that returns full uri for a given HttpRequest. For some reason these's no such a method in base classes. \r\n\r\nBut the method is in Microsoft.ApplicationInsights.AspNetCore which starting 2.1 isn't included in metapackage anymore. So usage of the method became not very convenient.\r\n\r\nIt'd be nice to have such a method somewhere in \"Microsoft.AspNetCore.App\".","Url":"https://github.com/aspnet/Home/issues/3203","RelatedDescription":"Open issue \"Add HttpRequest.GetUri method\" (#3203)"},{"Id":"329869994","IsPullRequest":false,"CreatedAt":"2018-06-06T13:34:05","Actor":"seroche","Number":"3202","RawContent":null,"Title":"Binding GUID to query string does not work when adding ApiController attribute","State":"open","Body":"After adding the `[ApiController]` attribute to my controller, parameters passed through the query string cannot be bound to `GUIDs`.\r\n\r\nFor example:  \r\n`public async Task<IActionResult> Get(Guid id, CancellationToken token) { (...) }` always returns:\r\n```\r\n{\r\n    \"\": [\r\n        \"The input was not valid.\"\r\n    ]\r\n}\r\n```\r\n\r\nAny idea why? Did I miss something obvious?","Url":"https://github.com/aspnet/Home/issues/3202","RelatedDescription":"Open issue \"Binding GUID to query string does not work when adding ApiController attribute\" (#3202)"},{"Id":"329838859","IsPullRequest":false,"CreatedAt":"2018-06-06T12:05:50","Actor":"alireza-salemian","Number":"3201","RawContent":null,"Title":"Embedded file resource corrupted in windows server IIS.","State":"open","Body":"After publish my site to windows server IIS, i get a error as:\r\n\r\n> Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: The system cannot find the file specified\r\n\r\nMy code to read X509Certificate2 from embedded file is:\r\n```\r\nX509Certificate2 certificate = null;\r\nusing (var certStream = typeof(T).Assembly.GetManifestResourceStream(resourceName))\r\n{\r\n    using (var memory = new MemoryStream((int)certStream.Length))\r\n    {\r\n        certStream.CopyTo(memory);\r\n        certificate = new X509Certificate2(memory.ToArray(), password);\r\n    }\r\n}\r\n```\r\n\r\nthis error only occurred in windows server IIS, but if run Kestrel directly and in IIS Express and in windows10 IIS no problem find.","Url":"https://github.com/aspnet/Home/issues/3201","RelatedDescription":"Open issue \"Embedded file resource corrupted in windows server IIS.\" (#3201)"},{"Id":"329549167","IsPullRequest":false,"CreatedAt":"2018-06-05T17:47:49","Actor":"minhtaimc","Number":"3200","RawContent":null,"Title":".Net Core 2.1 Identity don't load Roles","State":"closed","Body":"User.IsInRole always false.\r\n[Authorize (Roles = \"Admin\")] always returns access is denied. \r\nUser.Identities.First().Claims have no roles claims.","Url":"https://github.com/aspnet/Home/issues/3200","RelatedDescription":"Closed issue \".Net Core 2.1 Identity don't load Roles\" (#3200)"},{"Id":"329539262","IsPullRequest":false,"CreatedAt":"2018-06-05T16:45:54","Actor":"barrettg","Number":"3199","RawContent":null,"Title":"Slow Razor Build Times","State":"open","Body":"I am experiencing very slow build times after installing the 2.1 SDK on my Windows machine.  I'm creating a new project with `dotnet new mvc -au Individual` and then building with `dotnet build /clp:performancesummary`.  It seems the Razor build engine is the source of the problem:\r\n```Microsoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 47.36 ms for C:\\GitHub\\test\\test.csproj.\r\n  test -> C:\\GitHub\\test\\bin\\Debug\\netcoreapp2.1\\test.dll\r\n  test -> C:\\GitHub\\test\\bin\\Debug\\netcoreapp2.1\\test.Views.dll\r\n\r\nProject Evaluation Performance Summary:\r\n      294 ms  C:\\GitHub\\test\\test.csproj                 3 calls\r\n\r\nProject Performance Summary:\r\n    43474 ms  C:\\GitHub\\test\\test.csproj                 7 calls\r\n                260 ms  Restore                                    1 calls\r\n                  0 ms  _IsProjectRestoreSupported                 2 calls\r\n                  1 ms  _GenerateRestoreProjectPathWalk            1 calls\r\n                 21 ms  _GenerateRestoreGraphProjectEntry          1 calls\r\n                  4 ms  _GenerateProjectRestoreGraph               1 calls\r\n              43187 ms  Build                                      1 calls\r\n\r\nTarget Performance Summary:\r\n        0 ms  ResGen                                     1 calls\r\n        0 ms  _RazorPrepareForRun                        1 calls\r\n        0 ms  PrepareResourceNames                       1 calls\r\n        0 ms  PrepareForRazorCompile                     1 calls\r\n        0 ms  Compile                                    1 calls\r\n        0 ms  PrepareResources                           1 calls\r\n        0 ms  GetReferenceAssemblyPaths                  1 calls\r\n        0 ms  ResolvePackageDependenciesForBuild         1 calls\r\n        0 ms  ResolveRazorCompileInputs                  1 calls\r\n        0 ms  PrepareProjectReferences                   1 calls\r\n        0 ms  BeforeBuild                                1 calls\r\n        0 ms  AfterBuild                                 1 calls\r\n        0 ms  _GenerateRazorAssemblyInfo                 1 calls\r\n        0 ms  _CopySourceItemsToOutputDirectory          1 calls\r\n        0 ms  GenerateRazorTargetAssemblyInfo            1 calls\r\n        0 ms  CreateSatelliteAssemblies                  1 calls\r\n        0 ms  GetFrameworkPaths                          1 calls\r\n        0 ms  BeforeResGen                               1 calls\r\n        0 ms  InitializeSourceControlInformation         1 calls\r\n        0 ms  SetWin32ManifestProperties                 1 calls\r\n        0 ms  GenerateUserSecretsAttribute               1 calls\r\n        0 ms  CreateCustomManifestResourceNames          1 calls\r\n        0 ms  PrepareForRun                              1 calls\r\n        0 ms  BeforeCompile                              1 calls\r\n        0 ms  BeforeResolveReferences                    1 calls\r\n        0 ms  GenerateAssemblyInfo                       1 calls\r\n        0 ms  CoreBuild                                  1 calls\r\n        0 ms  AfterCompile                               1 calls\r\n        0 ms  AfterResGen                                1 calls\r\n        0 ms  RazorCompile                               1 calls\r\n        0 ms  AfterResolveReferences                     1 calls\r\n        0 ms  AddSourceRevisionToInformationalVersion    1 calls\r\n        0 ms  RazorGenerate                              1 calls\r\n        0 ms  _GetRestoreSettingsCurrentProject          1 calls\r\n        0 ms  _GenerateRestoreProjectPathItemsCurrentProject   1 calls\r\n        0 ms  PrepareForRazorGenerate                    1 calls\r\n        0 ms  GetTargetPath                              1 calls\r\n        0 ms  _GenerateProjectRestoreGraph               1 calls\r\n        0 ms  _DefaultMicrosoftNETPlatformLibrary        1 calls\r\n        0 ms  _GenerateRestoreGraphProjectEntry          1 calls\r\n        0 ms  _GenerateRestoreDependencies               1 calls\r\n        0 ms  _GenerateProjectRestoreGraphCurrentProject   1 calls\r\n        0 ms  BuildOnlySettings                          1 calls\r\n        0 ms  EnableIntermediateOutputPathMismatchWarning   1 calls\r\n        0 ms  EnsureTFMCompatibility                     1 calls\r\n        0 ms  _CheckForUnsupportedSelfContained          1 calls\r\n        0 ms  IncludeTransitiveProjectReferences         1 calls\r\n        0 ms  Build                                      1 calls\r\n        0 ms  _SetTargetFrameworkMonikerAttribute        1 calls\r\n        0 ms  ExpandSDKReferences                        1 calls\r\n        0 ms  ResolveSDKReferences                       1 calls\r\n        0 ms  ResolveLockFileAnalyzers                   1 calls\r\n        0 ms  _ResolveGeneratedRazorCompileInputs        1 calls\r\n        0 ms  _BeforeVBCSCoreCompile                     1 calls\r\n        0 ms  CollectPackageReferences                   2 calls\r\n        0 ms  _GetRestoreSettingsOverrides               1 calls\r\n        0 ms  ComputeDependencyFileCompilerOptions       1 calls\r\n        0 ms  _GetRestoreSettingsPerFramework            1 calls\r\n        0 ms  _CheckForObsoleteDotNetCliToolReferences   2 calls\r\n        0 ms  _CopyReferenceOnlyAssembliesForBuild       1 calls\r\n        0 ms  _SplitProjectReferencesByFileExistence     1 calls\r\n        0 ms  RazorGetAssemblyAttributes                 1 calls\r\n        0 ms  _CheckForUnsupportedNETCoreVersion         3 calls\r\n        0 ms  _GetRestoreProjectStyle                    2 calls\r\n        0 ms  _IsProjectRestoreSupported                 1 calls\r\n        0 ms  _GetProjectJsonPath                        2 calls\r\n        0 ms  GetAssemblyAttributes                      1 calls\r\n        0 ms  _GenerateRestoreProjectPathItems           1 calls\r\n        0 ms  _GenerateCompileInputs                     1 calls\r\n        0 ms  _ResolveRazorTargetPath                    1 calls\r\n        0 ms  GetRazorTargetAssemblyAttributes           1 calls\r\n        0 ms  GetTargetPathWithTargetPlatformMoniker     1 calls\r\n        0 ms  _RazorGetCopyToOutputDirectoryItems        1 calls\r\n        0 ms  _GenerateSatelliteAssemblyInputs           1 calls\r\n        0 ms  _ComputeNETCoreBuildOutputFiles            1 calls\r\n        0 ms  _CheckForCompileOutputs                    1 calls\r\n        0 ms  CoreResGen                                 1 calls\r\n        0 ms  GetAssemblyVersion                         1 calls\r\n        0 ms  _GenerateRestoreSpecs                      1 calls\r\n        0 ms  _GenerateRestoreProjectPathWalk            1 calls\r\n        0 ms  _ResolveRazorGenerateOutputs               1 calls\r\n        0 ms  _CheckForInvalidConfigurationAndPlatform   1 calls\r\n        0 ms  ResolveReferences                          1 calls\r\n        0 ms  _GenerateRestoreProjectSpec                1 calls\r\n        0 ms  _GenerateRestoreProjectPathItemsPerFramework   1 calls\r\n        0 ms  _GetProjectReferenceTargetFrameworkProperties   1 calls\r\n        0 ms  SplitResourcesByCulture                    1 calls\r\n        0 ms  AssignRazorGenerateTargetPaths             1 calls\r\n        1 ms  ResolveAssemblyReferenceRazorGenerateInputs   1 calls\r\n        1 ms  _CollectTargetFrameworkForTelemetry        1 calls\r\n        1 ms  CoreGenerateAssemblyInfo                   1 calls\r\n        1 ms  GenerateTargetFrameworkMonikerAttribute    1 calls\r\n        1 ms  ResolveRazorConfiguration                  1 calls\r\n        1 ms  CoreGenerateRazorTargetAssemblyInfo        1 calls\r\n        1 ms  _CreateRazorAssemblyInfoInputsCacheFile    1 calls\r\n        1 ms  CreateGeneratedAssemblyInfoInputsCacheFile   1 calls\r\n        1 ms  CheckForDuplicateItems                     1 calls\r\n        1 ms  CoreGenerateUserSecretsAttribute           1 calls\r\n        1 ms  GetCopyToOutputDirectoryItems              1 calls\r\n        1 ms  _GetRestoreTargetFrameworksOutput          1 calls\r\n        1 ms  _HashRazorGenerateInputs                   1 calls\r\n        1 ms  _CreateRazorTargetAssemblyInfoInputsCacheFile   1 calls\r\n        1 ms  ResolveRazorGenerateInputs                 1 calls\r\n        1 ms  _SetEmbeddedWin32ManifestProperties        1 calls\r\n        1 ms  _ComputeReferenceAssemblies                1 calls\r\n        1 ms  AssignTargetPaths                          1 calls\r\n        1 ms  IncrementalClean                           1 calls\r\n        1 ms  _CoreGenerateRazorAssemblyInfo             1 calls\r\n        1 ms  ResolveLockFileReferences                  1 calls\r\n        2 ms  CopyFilesToOutputDirectory                 1 calls\r\n        2 ms  _GenerateCompileDependencyCache            1 calls\r\n        2 ms  _GetAllRestoreProjectPathItems             1 calls\r\n        3 ms  CheckForImplicitPackageReferenceOverrides   2 calls\r\n        3 ms  _RazorCopyFilesToOutputDirectory           1 calls\r\n        3 ms  _CopyOutOfDateSourceItemsToOutputDirectory   1 calls\r\n        3 ms  _GenerateProjectRestoreGraphPerFramework   1 calls\r\n        3 ms  _CleanGetCurrentAndPriorFileWrites         1 calls\r\n        4 ms  PrepareForBuild                            1 calls\r\n        5 ms  _GenerateDotnetCliToolReferenceSpecs       1 calls\r\n        5 ms  RunProduceContentAssets                    1 calls\r\n        6 ms  _LoadRestoreGraphEntryPoints               1 calls\r\n       13 ms  _GetRestoreSettings                        1 calls\r\n       25 ms  _HandlePackageFileConflicts                1 calls\r\n       27 ms  _GenerateRestoreGraph                      1 calls\r\n       28 ms  FindReferenceAssembliesForReferences       1 calls\r\n       28 ms  ResolveProjectReferences                   1 calls\r\n       36 ms  GenerateBuildRuntimeConfigurationFiles     1 calls\r\n       74 ms  GenerateBuildDependencyFile                1 calls\r\n       75 ms  _FilterRestoreGraphProjectInputItems       1 calls\r\n       86 ms  ResolvePackageAssets                       1 calls\r\n      109 ms  ResolveAssemblyReferences                  1 calls\r\n      141 ms  Restore                                    1 calls\r\n      270 ms  RazorCoreCompile                           1 calls\r\n      995 ms  CoreCompile                                1 calls\r\n    20568 ms  RazorCoreGenerate                          1 calls\r\n    20920 ms  ResolveTagHelperRazorGenerateInputs        1 calls\r\n\r\nTask Performance Summary:\r\n        0 ms  GetAssemblyVersion                         1 calls\r\n        0 ms  AssignCulture                              1 calls\r\n        0 ms  ReadLinesFromFile                          1 calls\r\n        0 ms  Delete                                     1 calls\r\n        0 ms  GetRestoreProjectReferencesTask            1 calls\r\n        0 ms  FindAppConfigFile                          1 calls\r\n        0 ms  Telemetry                                  1 calls\r\n        0 ms  GetFrameworkPath                           1 calls\r\n        0 ms  Message                                    7 calls\r\n        0 ms  FindInList                                 1 calls\r\n        1 ms  JoinItems                                  1 calls\r\n        1 ms  CheckForDuplicateItems                     3 calls\r\n        1 ms  GetProjectTargetFrameworksTask             1 calls\r\n        1 ms  FindUnderPath                              5 calls\r\n        1 ms  ConvertToAbsolutePath                      3 calls\r\n        1 ms  AssignTargetPath                           6 calls\r\n        1 ms  Hash                                       5 calls\r\n        1 ms  CheckForImplicitPackageReferenceOverrides   2 calls\r\n        2 ms  WriteCodeFragment                          4 calls\r\n        2 ms  Touch                                      2 calls\r\n        2 ms  GetRestorePackageReferencesTask            1 calls\r\n        3 ms  RemoveDuplicates                           7 calls\r\n        3 ms  WriteLinesToFile                           6 calls\r\n        4 ms  GetRestoreDotnetCliToolsTask               1 calls\r\n        5 ms  ProduceContentAssets                       1 calls\r\n        5 ms  WarnForInvalidProjectsTask                 1 calls\r\n        5 ms  Copy                                       6 calls\r\n        5 ms  MakeDir                                    4 calls\r\n       13 ms  GetRestoreSettingsTask                     1 calls\r\n       20 ms  ResolvePackageFileConflicts                1 calls\r\n       36 ms  GenerateRuntimeConfigurationFiles          1 calls\r\n       74 ms  GenerateDepsFile                           1 calls\r\n       86 ms  ResolvePackageAssets                       1 calls\r\n       87 ms  MsBuild                                    7 calls\r\n      108 ms  ResolveAssemblyReference                   1 calls\r\n      141 ms  RestoreTask                                1 calls\r\n     1262 ms  Csc                                        2 calls\r\n    20566 ms  RazorGenerate                              1 calls\r\n    20917 ms  RazorTagHelper                             1 calls\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:43.74","Url":"https://github.com/aspnet/Home/issues/3199","RelatedDescription":"Open issue \"Slow Razor Build Times\" (#3199)"},{"Id":"329538520","IsPullRequest":false,"CreatedAt":"2018-06-05T16:43:40","Actor":"livarcocc","Number":"3198","RawContent":null,"Title":"Centos7 yum Install asp.net core runtime issue","State":"open","Body":"_From @suylem on June 5, 2018 6:44_\n\nDear:\r\n\r\n i meet one issue for install dotnet core sdk on centos 7 via yum command  . i had try use to command \"yum install aspnetcore-runtime-2.1\", it reports  \"https://packages.microsoft.com/rhel/7/prod/dotnet-runtime-deps-2.1.0-rc1-rhel.7-x64.rpm: [Errno 14] HTTPS Error 404 - Not Found\"\r\nError downloading packages:\r\n  dotnet-host-2.1.0_rc1-1.x86_64: [Errno 256] No more mirrors to try.\r\n  dotnet-runtime-deps-2.1.0-rc1-2.1.0_rc1-1.x86_64: [Errno 256] No more mirrors to try.\r\n\r\n\n\n_Copied from original issue: dotnet/sdk#2308_","Url":"https://github.com/aspnet/Home/issues/3198","RelatedDescription":"Open issue \"Centos7 yum Install asp.net core runtime issue\" (#3198)"},{"Id":"329497371","IsPullRequest":false,"CreatedAt":"2018-06-05T15:00:24","Actor":"ndreisg","Number":"3197","RawContent":null,"Title":"WebSocket requests with high response time trigger recycle too frequently","State":"open","Body":"Hi there,\r\n\r\nI have an ASP.net Core WebSocket Server hosted as Azure Web App.\r\nIn Azure Portal I have very high response times. It seems like the complete time a WebSocket connection is opened, counts as response time.\r\n\r\nDue to these high request times, the Web App is recycled more frequently.\r\nToday I got three events with ID 2299 (Worker Process requested recycle due to 'Percent Slow Requests' limit.) in \"Application Events\".\r\n\r\nIs it possible to tell Azure, that it shouldn't count the response times of WebSocket requests to these limits?\r\nOr is it possible to deactivate this limit completely?\r\n\r\nBest regards.\r\nAlex","Url":"https://github.com/aspnet/Home/issues/3197","RelatedDescription":"Open issue \"WebSocket requests with high response time trigger recycle too frequently\" (#3197)"},{"Id":"329432848","IsPullRequest":false,"CreatedAt":"2018-06-05T12:26:05","Actor":"TPIvan","Number":"3196","RawContent":null,"Title":"Razor Class Library is not routed properly when referenced from a WebForms project","State":"open","Body":"When I create a _Razor Class Library_ (Visual Studio 2017 + Core 2.1 Template) and reference it from an _ASP.NET Core Web Application_ Project the `Page1 `created by the template is available on the address `/MyFeature/Page1` .  When I do the same with an _ASP.NET Web Application (.NET Framework)_ the page is not available on the address (HTTP 404). \r\n\r\n","Url":"https://github.com/aspnet/Home/issues/3196","RelatedDescription":"Open issue \"Razor Class Library is not routed properly when referenced from a WebForms project\" (#3196)"},{"Id":"329390892","IsPullRequest":false,"CreatedAt":"2018-06-05T10:15:26","Actor":"rachelappel","Number":"3195","RawContent":null,"Title":"Host shuts down immediately ","State":"open","Body":"Moved from the docs repo to here. Originally filed by @srininz77 at  https://github.com/aspnet/Docs/issues/6862\r\n\r\n\"I'm trying to run a long running background task in a console application inside docker container.\r\n\r\nMy code is as follows:\r\n```\r\n public static async Task Main(string[] args)\r\n {\r\n            var hostBuilder = new HostBuilder()\r\n                .ConfigureAppConfiguration\r\n                (\r\n                    (hostBuilderContext, configurationBuilder) =>\r\n                    {\r\n                        configurationBuilder.SetBasePath(Directory.GetCurrentDirectory());\r\n                        configurationBuilder.AddEnvironmentVariables();\r\n                        configurationBuilder.AddJsonFile(\"appsettings.json\", optional: true);\r\n                    }\r\n                )\r\n                .ConfigureServices\r\n                (\r\n                    (hostBuilderContext, services) =>\r\n                    {\r\n                        services.AddHostedService<HostedService>();\r\n                        services.AddSingleton<ISocketImplementation, SocketImplementation>();\r\n                        services.AddSingleton<IMessageHandler, MessageHandler>();\r\n                    }\r\n                );               \r\n\r\n            await hostBuilder.RunConsoleAsync();\r\n   }\r\n```\r\n**When I use Docker run -d to create the container, the container stops immediately. It doesn't look like RunConsoleAsync() is waiting for ctrl+c or SIGTERM.\r\n\r\nI tried GenericHostSample and it behaves the same as well**\"\r\n\r\n\r\n","Url":"https://github.com/aspnet/Home/issues/3195","RelatedDescription":"Open issue \"Host shuts down immediately \" (#3195)"},{"Id":"329277494","IsPullRequest":false,"CreatedAt":"2018-06-05T02:14:32","Actor":"Tratcher","Number":"3194","RawContent":null,"Title":"Http Post not recognized on Linux (ASP .NET Core 2.0)","State":"open","Body":"_From @rezvanf on June 4, 2018 20:46_\n\nThe below is my class and web method signature (note all these web methods work perfectly on Windows 👍 )\r\n\r\n```\r\n[Route(\"api/[controller]\")]\r\npublic partial class TestController \r\n\r\n```\r\n\r\n```\r\n[HttpGet(\"{id}\")]\r\npublic async Task<IActionResult> Get(string id)\r\n```\r\n\r\n```\r\n[HttpPost]\r\npublic async Task<IActionResult> Post([FromBody]ProductInventory item)\r\n```\r\n\r\n```\r\n[HttpPost(\"bulk/BulkPost\")]\r\npublic async Task<IActionResult> BulkPost([FromBody]List<ProductInventory> data)\r\n\r\n```\r\n```\r\n[HttpPatch(\"{id}/attest/{attest}\")]\r\npublic async Task<IActionResult> Attest(string id, string attest, [FromBody]IDictionary<string, object> data)\r\n\r\n```\r\n```\r\n[HttpGet(\"view/{role}\")]\r\npublic IActionResult GetView(string role)\r\n```\r\n```\r\n\r\n[HttpGet(\"workflow/wording/{wording}\")]\r\npublic IActionResult GetWording(string wording)\r\n```\r\n\r\n```\r\n[HttpDelete(\"{id}\")]\r\npublic async Task<IActionResult> Delete(string id)\r\n```\r\n\r\n```\r\n[HttpPatch]\r\npublic async Task<IActionResult> Patch([FromBody]IDictionary<string, object> data)\r\n```\r\n\r\n```\r\n[HttpPatch(\"{id}\")]\r\npublic async Task<IActionResult> Patch(string id, [FromBody]IDictionary<string, object> data)\r\n```\r\n\r\n```\r\n[HttpGet(\"entitlements/{objectId}\")]\r\npublic IActionResult GetEntitlements(string objectId)\r\n```\r\n```\r\n\r\n[HttpGet(\"chorus/{dummy}\")]\r\npublic IActionResult GetChorus(string dummy)\r\n```\r\n\r\n```\r\n[HttpPatch(\"{id}/review/{review}\")]\r\npublic async Task<IActionResult> Review(string id, string review, [FromBody]IDictionary<string, object> data)\r\n```\r\n\r\nWhen I do a post on the API with the following \r\n\r\nhttp://servername/api/test\r\n\r\nI get a 404\r\n\r\nWhen I include the following method in the API and do a POST it gets called.\r\n\r\n```\r\n[HttpGet]\r\nPublic async Task<IActionResult> Get([FromQuery]int page = 1, [FromQuery]int pageSize = 100, [FromQuery]bool isCsvExport = false)\r\n\r\n```\r\nIs there a reason why the routing is different to windows and Linux and what is the solution to this problem please as it is not clear the reason for the behaviour?\r\n\r\nThanks\n\n_Copied from original issue: aspnet/KestrelHttpServer#2645_","Url":"https://github.com/aspnet/Home/issues/3194","RelatedDescription":"Open issue \"Http Post not recognized on Linux (ASP .NET Core 2.0)\" (#3194)"},{"Id":"329225105","IsPullRequest":false,"CreatedAt":"2018-06-04T21:33:28","Actor":"isaksky","Number":"3193","RawContent":null,"Title":"Razor pages - textarea asp-for binding problem","State":"open","Body":"For razor pages, when one modifies a bound model property in an `OnPost` method on a page with a `asp-for=\"MyProperty\"` property, the new value is shown for `input` controls, but not for `textarea` controls. For `textarea`, when the page is rendered, it stays the same as the `AttemptedValue`.\r\n\r\nTo be clear:\r\n\r\n`<input asp-for=\"MyProperty\">` shows the new value when it is updated in `OnPost`, but `<textarea asp-for=\"MyProperty\"></textarea>` does not.\r\n\r\nI would expect that the behavior (whether `asp-for` is bidirectional) should be consistent across input types, like `input`, `textarea`, `select`, etc.\r\n\r\nWorkaround:\r\n\r\n```csharp\r\npublic void OnPost() {\r\n   // MyProperty = \"Something\"; // Updating this way does not work for `textarea`, but does for `input`\r\n\r\n   // But this does:\r\n   ModelState[\"MyProperty\"].AttemptedValue = \"My new value\"`\r\n}\r\n```\r\n\r\nSame as this issue, but this is for Razor Pages:\r\n\r\nhttps://github.com/aspnet/Mvc/issues/6799","Url":"https://github.com/aspnet/Home/issues/3193","RelatedDescription":"Open issue \"Razor pages - textarea asp-for binding problem\" (#3193)"},{"Id":"329007920","IsPullRequest":false,"CreatedAt":"2018-06-04T17:10:55","Actor":"svallis","Number":"3190","RawContent":null,"Title":"Razor class library referencing another razor class library can't publish","State":"closed","Body":"I'm experiencing issues publishing applications from Visual Studio where one razor class library references another razor class library. Everything works perfectly from the command line, the issue is just with VS, so apologies if this is the wrong place for it.\r\n\r\nI've created a reproduction repo for the issue below:\r\n\r\nhttps://github.com/svallis/PublishTest.git\r\n\r\nThis demonstrates a solution with two class libraries, one of which (`Shared`) references another (`Framework`). Publishing this solution from the command line works exactly as expected:\r\n\r\n```\r\nPS C:\\Development\\PublishTest\\Website> dotnet publish -c Release\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 76.59 ms for C:\\Development\\PublishTest\\Website\\Website.csproj.\r\n  Restore completed in 76.59 ms for C:\\Development\\PublishTest\\Framework\\Framework.csproj.\r\n  Restore completed in 76.59 ms for C:\\Development\\PublishTest\\Shared\\Shared.csproj.\r\n  Framework -> C:\\Development\\PublishTest\\Framework\\bin\\Release\\netcoreapp2.1\\Framework.dll\r\n  Framework -> C:\\Development\\PublishTest\\Framework\\bin\\Release\\netcoreapp2.1\\Framework.Views.dll\r\n  Shared -> C:\\Development\\PublishTest\\Shared\\bin\\Release\\netcoreapp2.1\\Shared.dll\r\n  Shared -> C:\\Development\\PublishTest\\Shared\\bin\\Release\\netcoreapp2.1\\Shared.Views.dll\r\n  Website -> C:\\Development\\PublishTest\\Website\\bin\\Release\\netcoreapp2.1\\Website.dll\r\n  Website -> C:\\Development\\PublishTest\\Website\\bin\\Release\\netcoreapp2.1\\Website.Views.dll\r\n  Website -> C:\\Development\\PublishTest\\Website\\bin\\Release\\netcoreapp2.1\\publish\\\r\n```\r\n\r\nBut publishing from within Visual Studio acts as if `Shared` has no knowledge of `Framework`, despite an explicit project reference:\r\n\r\n```\r\nSharedClass.cs(9,13): Error CS0103: The name 'Framework' does not exist in the current context\r\nSharedClass.cs(11,28): Error CS0246: The type or namespace name 'Framework' could not be found (are you missing a using directive or an assembly reference?)\r\n```\r\n\r\nThe repository has a file system publish profile set up which demonstrates the failure. Building and running the solution works as you would expect it to.\r\n\r\nThis seems to be related to the new `Microsoft.NET.Sdk.Razor` project SDK, as reverting `Shared` and `Framework` to the old `Microsoft.NET.Sdk` SDK resolves the publishing issue, but obviously breaks the embedded razor views. Am I missing something obvious?","Url":"https://github.com/aspnet/Home/issues/3190","RelatedDescription":"Closed issue \"Razor class library referencing another razor class library can't publish\" (#3190)"},{"Id":"329140606","IsPullRequest":false,"CreatedAt":"2018-06-04T17:03:04","Actor":"slubowsky","Number":"3192","RawContent":null,"Title":"JsonPatch including a move doesnt update data as expected","State":"open","Body":"A JsonPatch that includes both a move and updating data fails to update the data as expected - presumably due to the move.\r\nFor example, after executing the following patch:\r\n```\r\n[{\"op\":\"replace\",\"path\":\"/myArray/0/index\",\"value\":1},{\"op\":\"move\",\"from\":\"/myArray/1\",\"path\":\"/myArray/0\"},\r\n{\"op\":\"replace\",\"path\":\"/myArray/1/index\",\"value\":0}]\r\n```\r\nI see only the second value actually being changed. The object that was initially at index 0 remains with its original value","Url":"https://github.com/aspnet/Home/issues/3192","RelatedDescription":"Open issue \"JsonPatch including a move doesnt update data as expected\" (#3192)"},{"Id":"329044238","IsPullRequest":false,"CreatedAt":"2018-06-04T12:57:46","Actor":"primenum","Number":"3191","RawContent":null,"Title":"ASP.Net core 2.x IIS Hosted VS Self-hosted performance issues","State":"open","Body":"Hi guys.\r\nWe are developing ASP.NET core application and having performance issues hosting application under IIS. Application hosted under IIS working 14 times **slower** than self-hosted using IIS as reverse proxy with URL rewrite module\r\nAsp.net core 2.1\r\n\r\nLoad test performed with VS 2017\r\nAspNetCoreModule - aspnetcore.dll  file version  -  8.2.1991.0\r\nThe result are: \r\nIIS hosted AVG Response Time:  0.06 sec\r\nSelf-Hosted with IIS as reverse proxy: 0.0042\r\n\r\n## **Code:**\r\n\r\n**Program.cs**\r\n\r\n```\r\npublic class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            CreateWebHostBuilder(args).Build().Run();\r\n        }\r\n\r\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\r\n            WebHost.CreateDefaultBuilder(args)\r\n            .UseKestrel()\r\n            .UseIISIntegration()\r\n            .ConfigureAppConfiguration((hostingContext, config) =>\r\n            {\r\n                ConfigureApplicationSettings(hostingContext, config);\r\n            })\r\n            .ConfigureLogging((context, logging) =>\r\n            {\r\n                //logging controlled from config file\r\n\r\n                logging.AddConfiguration(context.Configuration.GetSection(\"Logging\"));\r\n                logging.SetMinimumLevel(LogLevel.None);\r\n\r\n            })\r\n                .UseStartup<Startup>();\r\n\r\n        private static void ConfigureApplicationSettings(WebHostBuilderContext hostingContext, IConfigurationBuilder config)\r\n        {\r\n            var env = hostingContext.HostingEnvironment;\r\n\r\n            //set base path\r\n            config.SetBasePath(Directory.GetCurrentDirectory());\r\n\r\n            //set configuration files\r\n            config.AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\r\n                  .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: false, reloadOnChange: true);\r\n\r\n            config.AddEnvironmentVariables();\r\n            config.Build();\r\n        }\r\n    }\r\n\r\n```\r\n**Startup**\r\n```\r\npublic class Startup\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddMvc();\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n\r\n            app.UseMvc();\r\n        }\r\n    }\r\n```\r\n\r\n**API** \r\n```\r\n[Route(\"core/plain\")]\r\n    [ApiController]\r\n    public class PlainController : ControllerBase\r\n    {\r\n        [HttpGet]\r\n        public IActionResult GetServerTime()\r\n        {\r\n            string sHtml = $\"Asp.Net core 2.1,  server time: {DateTime.Now.ToString(\"yyyy-MM-dd, HH:mm:ss\")}\";\r\n            return Ok(sHtml);\r\n        }\r\n    }\r\n\r\n```\r\n\r\nWhat are we doing wrong? \r\nWe found out this issue in 2.0 and waited for 2.1 in hope this well be solved, but....","Url":"https://github.com/aspnet/Home/issues/3191","RelatedDescription":"Open issue \"ASP.Net core 2.x IIS Hosted VS Self-hosted performance issues\" (#3191)"},{"Id":"328915700","IsPullRequest":false,"CreatedAt":"2018-06-04T05:46:03","Actor":"NandhiniKaruppusamy","Number":"3189","RawContent":null,"Title":"Download prerequisite from local path is not working","State":"open","Body":"\r\n![image](https://user-images.githubusercontent.com/39897016/40900162-dcd524e0-67e7-11e8-8c12-e860dbf8c346.png)\r\n\r\n![image](https://user-images.githubusercontent.com/39897016/40900188-fd4b085c-67e7-11e8-86a7-70515d3c06e8.png)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Home/issues/3189","RelatedDescription":"Open issue \"Download prerequisite from local path is not working\" (#3189)"},{"Id":"328878180","IsPullRequest":false,"CreatedAt":"2018-06-04T00:48:24","Actor":"Tratcher","Number":"3188","RawContent":null,"Title":"Kestrel works very slow when it is operating under IIS","State":"open","Body":"_From @san-sei on June 3, 2018 11:6_\n\nWe are facing a strange problem with using Kestrel under IIS in which some operations (e.g. getting access CA- [CertEnrolllib ](https://msdn.microsoft.com/en-us/library/windows/desktop/aa374850(v=vs.85).aspx)) take about 100 sec processing time to be complete.\r\nPlease note that everything works well with using IIS Express and also [http.sys](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys?view=aspnetcore-2.1) (instead of IIS) where every operation takes maximum 5 seconds to be complete.\n\n_Copied from original issue: aspnet/KestrelHttpServer#2642_","Url":"https://github.com/aspnet/Home/issues/3188","RelatedDescription":"Open issue \"Kestrel works very slow when it is operating under IIS\" (#3188)"}],"ResultType":"GitHubIssue"},"SignalR-Issues":{"Issues":[{"Id":"331433232","IsPullRequest":false,"CreatedAt":"2018-06-12T04:29:23","Actor":"JamesNK","Number":"2473","RawContent":null,"Title":"Universe CI warning from SignalR","State":"open","Body":"```\r\nC:\\projects\\universe\\modules\\SignalR\\src\\Microsoft.AspNetCore.SignalR.Specification.Tests\\Microsoft.AspNetCore.SignalR.Specification.Tests.csproj : warning KRB2003: Found a duplicate PackageReference for Internal.AspNetCore.Sdk. Restore results may be unpredictable. [C:\\Users\\appveyor\\.dotnet\\buildtools\\korebuild\\2.2.0-preview1-17089\\KoreBuild.proj]\r\nC:\\projects\\universe\\modules\\SignalR\\src\\Microsoft.AspNetCore.SignalR.Specification.Tests\\Microsoft.AspNetCore.SignalR.Specification.Tests.csproj : warning KRB2003: Found a duplicate PackageReference for Internal.AspNetCore.Sdk. Restore results may be unpredictable. [C:\\Users\\appveyor\\.dotnet\\buildtools\\korebuild\\2.2.0-preview1-17089\\KoreBuild.proj]\r\n    2 Warning(s)\r\n    0 Error(s)\r\n```\r\nhttps://ci.appveyor.com/project/aspnetci/universe/build/1.0.2341","Url":"https://github.com/aspnet/SignalR/issues/2473","RelatedDescription":"Open issue \"Universe CI warning from SignalR\" (#2473)"},{"Id":"331378133","IsPullRequest":true,"CreatedAt":"2018-06-11T22:52:12","Actor":"BrennanConroy","Number":"2472","RawContent":null,"Title":"Add VerifyLogger to JS tests","State":"open","Body":"#2344\r\nOpening PR early to get feedback on the test pattern.\r\n\r\nWill add to other tests once we review the pattern a bit.","Url":"https://github.com/aspnet/SignalR/pull/2472","RelatedDescription":"Open PR \"Add VerifyLogger to JS tests\" (#2472)"},{"Id":"330824832","IsPullRequest":false,"CreatedAt":"2018-06-11T21:44:52","Actor":"AwanesowArtem","Number":"2460","RawContent":null,"Title":"How does signalR maps ConnectionId to connection for specyfic client?","State":"closed","Body":"One more question:\r\nLet's assume that there are two servers with signalR, I will connect to first server, will second server be able to invoke methods on client if it knows ConnectionId?","Url":"https://github.com/aspnet/SignalR/issues/2460","RelatedDescription":"Closed issue \"How does signalR maps ConnectionId to connection for specyfic client?\" (#2460)"},{"Id":"330807810","IsPullRequest":true,"CreatedAt":"2018-06-11T21:19:34","Actor":"anurse","Number":"2459","RawContent":null,"Title":"fix #2407 by tslinting tests before running","State":"closed","Body":"I also saw some extra logging that we intend to suppress and ~~noticed a weird compilation error (might not be happening on CI because of a compiler version difference or something, but it's benign to fix)~~ nothing else. [Everything is fine. We're all fine here. How are you?](https://www.youtube.com/watch?v=KYAbFqkvzQA)","Url":"https://github.com/aspnet/SignalR/pull/2459","RelatedDescription":"Closed or merged PR \"fix #2407 by tslinting tests before running\" (#2459)"},{"Id":"330922555","IsPullRequest":true,"CreatedAt":"2018-06-11T20:55:48","Actor":"mikaelm12","Number":"2461","RawContent":null,"Title":"Show detailed error message if exception is of type HubException","State":"closed","Body":"This PR  enables showing a detailed error message on the client regardless of the state of the `EnabledDetailedErrors `flag  if a `HubException `was thrown on the server side. \r\nThis is the functionality in ASP.NET SignalR.\r\n\r\nIssue: https://github.com/aspnet/SignalR/issues/2439","Url":"https://github.com/aspnet/SignalR/pull/2461","RelatedDescription":"Closed or merged PR \"Show detailed error message if exception is of type HubException\" (#2461)"},{"Id":"330366063","IsPullRequest":false,"CreatedAt":"2018-06-11T19:50:47","Actor":"BrennanConroy","Number":"2447","RawContent":null,"Title":"Flaky Test: CanStartConnectionFromClosedEvent","State":"closed","Body":"```\r\nFailed   Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.CanStartConnectionFromClosedEvent(protocolName: \"json\", transportType: WebSockets, path: \"/default\")\r\nRUNDOTNET : error Message:  [/home/travis/.dotnet/buildtools/korebuild/2.2.0-preview1-17067/KoreBuild.proj]\r\n   System.Exception : 2 error(s) logged.\r\n  Microsoft.AspNetCore.SignalR.Client.HubConnection - ErrorDuringClosedEvent - An exception was thrown in the handler for the Closed event.\r\n  ===================\r\n  System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\r\n  Parameter name: index\r\n     at Microsoft.AspNetCore.SignalR.Client.Internal.ConnectionLogScope.get_Item(Int32 index) in /_/src/Microsoft.AspNetCore.SignalR.Client.Core/Internal/ConnectionLogScope.cs:line 38\r\n     at Microsoft.AspNetCore.SignalR.Client.Internal.ConnectionLogScope.GetEnumerator()+MoveNext() in /_/src/Microsoft.AspNetCore.SignalR.Client.Core/Internal/ConnectionLogScope.cs:line 46\r\n     at System.Linq.Enumerable.TryGetFirst[TSource](IEnumerable`1 source, Func`2 predicate, Boolean& found)\r\n     at Microsoft.AspNetCore.SignalR.Tests.WrappingLoggerFactory.WrappingLogger.<>c__DisplayClass6_0.<GetConnectionId>b__0(Object scope, Object s) in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/WrappingLoggerFactory.cs:line 107\r\n     at Microsoft.Extensions.Logging.LoggerExternalScopeProvider.ForEachScope[TState](Action`2 callback, TState state)\r\n     at Microsoft.AspNetCore.SignalR.Tests.WrappingLoggerFactory.WrappingLogger.GetConnectionId() in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/WrappingLoggerFactory.cs:line 113\r\n     at Microsoft.AspNetCore.SignalR.Tests.WrappingLoggerFactory.WrappingLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter) in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/WrappingLoggerFactory.cs:line 77\r\n     at Microsoft.Extensions.Logging.Logger`1.Microsoft.Extensions.Logging.ILogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n     at Microsoft.Extensions.Logging.LoggerMessage.<>c__DisplayClass4_0.<Define>b__0(ILogger logger, Exception exception)\r\n     at Microsoft.AspNetCore.SignalR.Client.HubConnection.RunClosedEvent(Func`2 closed, Exception closeException) in /_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:line 959\r\n  ===================\r\n  Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests - 0 - System.TimeoutException from test\r\n  ===================\r\n  System.TimeoutException: Operation in CanStartConnectionFromClosedEvent timed out at /_/test/Microsoft.AspNetCore.SignalR.Client.FunctionalTests/HubConnectionTests.cs:206\r\n     at System.Threading.Tasks.TaskExtensions.OrTimeout[T](Task`1 task, TimeSpan timeout, String memberName, String filePath, Nullable`1 lineNumber)\r\n     at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.CanStartConnectionFromClosedEvent(String protocolName, HttpTransportType transportType, String path) in /_/test/Microsoft.AspNetCore.SignalR.Client.FunctionalTests/HubConnectionTests.cs:line 206\r\n     at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.CanStartConnectionFromClosedEvent(String protocolName, HttpTransportType transportType, String path) in /_/test/Microsoft.AspNetCore.SignalR.Client.FunctionalTests/HubConnectionTests.cs:line 220\r\n  ===================\r\n  Stack Trace:\r\n     at Microsoft.AspNetCore.SignalR.Tests.VerifyNoErrorsScope.Dispose() in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/VerifyNoErrorsScope.cs:line 63\r\n     at Microsoft.AspNetCore.SignalR.Tests.ServerLogScope.Dispose() in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/ServerLogScope.cs:line 66\r\n     at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.CanStartConnectionFromClosedEvent(String protocolName, HttpTransportType transportType, String path) in /_/test/Microsoft.AspNetCore.SignalR.Client.FunctionalTests/HubConnectionTests.cs:line 222\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n  Standard Output Messages:\r\n   | [0.001s] TestLifetime Information: Starting test CanStartConnectionFromClosedEvent-json-WebSockets-/default at 2018-06-07T16:27:10\r\n   | [0.000s] TestLifetime Information: Starting test CanStartConnectionFromClosedEvent_json_WebSockets_default at 2018-06-07T16:27:10\r\n   | [0.000s] ServerLogScope Information: Server log scope started.\r\n   | [0.001s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: Waiting on Connection Lock in StartAsyncCore (/_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:288).\r\n   | [0.001s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Starting HubConnection.\r\n   | [0.001s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Starting HttpConnection.\r\n   | [0.001s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Establishing connection with server at 'http://127.0.0.1:43836/default'.\r\n   | [0.001s] Microsoft.AspNetCore.Http.Connections.Client.Internal.LoggingHttpMessageHandler Trace: Sending HTTP request POST 'http://127.0.0.1:43836/default/negotiate'.\r\n   | [0.002s] SERVER Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLECIDK7FVDF\" started.\r\n   | [0.002s] SERVER Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 POST http://127.0.0.1:43836/default/negotiate  0\r\n   | [0.002s] SERVER Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler Debug: AuthenticationScheme: Bearer was not authenticated.\r\n   | [0.002s] SERVER Microsoft.AspNetCore.Routing.RouteBase Debug: Request successfully matched the route with name '(null)' and template '/default/negotiate'.\r\n   | [0.002s] SERVER Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager Debug: New connection axzVbyqgsM6MEAs-yf7x2A created.\r\n   | [0.003s] SERVER Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher Debug: axzVbyqgsM6MEAs-yf7x2A - Sending negotiation response.\r\n   | [0.003s] SERVER Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLECIDK7FVDF\" completed keep alive response.\r\n   | [0.003s] SERVER Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 1.0031ms 200 application/json\r\n   | [0.008s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Established connection 'axzVbyqgsM6MEAs-yf7x2A' with the server.\r\n   | [0.008s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Starting transport 'WebSockets' with Url: http://127.0.0.1:43836/default?id=axzVbyqgsM6MEAs-yf7x2A.\r\n   | [0.008s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: axzVbyqgsM6MEAs-yf7x2A - Starting transport. Transfer mode: Text. Url: 'ws://127.0.0.1:43836/default?id=axzVbyqgsM6MEAs-yf7x2A'.\r\n   | [0.009s] SERVER Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLECIDK7FVDG\" started.\r\n   | [0.009s] SERVER Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 GET http://127.0.0.1:43836/default?id=axzVbyqgsM6MEAs-yf7x2A  \r\n   | [0.009s] SERVER Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler Debug: AuthenticationScheme: Bearer was not authenticated.\r\n   | [0.009s] SERVER Microsoft.AspNetCore.Routing.RouteBase Debug: Request successfully matched the route with name '(null)' and template '/default'.\r\n   | [0.010s] SERVER Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher Debug: axzVbyqgsM6MEAs-yf7x2A - Establishing new connection.\r\n   | [0.010s] SERVER Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: axzVbyqgsM6MEAs-yf7x2A - Socket opened using Sub-Protocol: '(null)'.\r\n   | [0.010s] SERVER Microsoft.AspNetCore.SignalR.HubConnectionHandler Debug: axzVbyqgsM6MEAs-yf7x2A - OnConnectedAsync started.\r\n   | [0.010s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Transport 'WebSockets' started.\r\n   | [0.010s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Information: axzVbyqgsM6MEAs-yf7x2A - HttpConnection Started.\r\n   | [0.011s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: axzVbyqgsM6MEAs-yf7x2A - Using HubProtocol 'json v1'.\r\n   | [0.011s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Sending Hub Handshake.\r\n   | [0.011s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: axzVbyqgsM6MEAs-yf7x2A - Received message from application. Payload size: 32.\r\n   | [0.011s] SERVER Microsoft.AspNetCore.SignalR.Internal.DefaultHubProtocolResolver Debug: axzVbyqgsM6MEAs-yf7x2A - Found protocol implementation for requested protocol: json.\r\n   | [0.011s] SERVER Microsoft.AspNetCore.SignalR.HubConnectionContext Information: axzVbyqgsM6MEAs-yf7x2A - Completed connection handshake. Using HubProtocol 'json'.\r\n   | [0.012s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: axzVbyqgsM6MEAs-yf7x2A - Message received. Type: Text, size: 3, EndOfMessage: True.\r\n   | [0.012s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Handshake with server complete.\r\n   | [0.012s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Receive loop starting.\r\n   | [0.012s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Sending PingMessage message.\r\n   | [0.012s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Sending PingMessage message completed.\r\n   | [0.012s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: axzVbyqgsM6MEAs-yf7x2A - HubConnection started.\r\n   | [0.012s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: axzVbyqgsM6MEAs-yf7x2A - Releasing Connection Lock in StartAsyncCore (/_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:331).\r\n   | [0.012s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: axzVbyqgsM6MEAs-yf7x2A - Received message from application. Payload size: 11.\r\n   | [0.013s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: axzVbyqgsM6MEAs-yf7x2A - Waiting on Connection Lock in InvokeCoreAsyncCore (/_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:442).\r\n   | [0.013s] Microsoft.AspNetCore.SignalR.Client.Internal.InvocationRequest.NonStreaming Trace: axzVbyqgsM6MEAs-yf7x2A - Invocation 1 created.\r\n   | [0.013s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: axzVbyqgsM6MEAs-yf7x2A - Preparing blocking invocation '1' of 'Echo', with return type 'System.String' and 1 argument(s).\r\n   | [0.013s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Registering Invocation ID '1' for tracking.\r\n   | [0.013s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: axzVbyqgsM6MEAs-yf7x2A - Issuing Invocation '1': System.String Echo(System.String).\r\n   | [0.013s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Sending InvocationMessage message '1'.\r\n   | [0.013s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Sending InvocationMessage message '1' completed.\r\n   | [0.013s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: axzVbyqgsM6MEAs-yf7x2A - Releasing Connection Lock in InvokeCoreAsyncCore (/_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:455).\r\n   | [0.013s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: axzVbyqgsM6MEAs-yf7x2A - Received message from application. Payload size: 70.\r\n   | [0.014s] SERVER Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher Debug: axzVbyqgsM6MEAs-yf7x2A - Received hub invocation: InvocationMessage { InvocationId: \"1\", Target: \"Echo\", Arguments: [ SignalR ] }.\r\n   | [0.014s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: axzVbyqgsM6MEAs-yf7x2A - Message received. Type: Text, size: 49, EndOfMessage: True.\r\n   | [0.014s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: axzVbyqgsM6MEAs-yf7x2A - Resetting keep-alive timer, received a message from the server.\r\n   | [0.014s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Processing 49 byte message from server.\r\n   | [0.014s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: axzVbyqgsM6MEAs-yf7x2A - Received Completion for Invocation 1.\r\n   | [0.014s] Microsoft.AspNetCore.SignalR.Client.Internal.InvocationRequest.NonStreaming Trace: axzVbyqgsM6MEAs-yf7x2A - Invocation 1 marked as completed.\r\n   | [0.014s] Microsoft.AspNetCore.SignalR.Client.Internal.InvocationRequest.NonStreaming Trace: axzVbyqgsM6MEAs-yf7x2A - Invocation 1 disposed.\r\n   | [0.014s] Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests Information: Stopping connection\r\n   | [0.014s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: axzVbyqgsM6MEAs-yf7x2A - Waiting on Connection Lock in StopAsyncCore (/_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:347).\r\n   | [0.014s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: axzVbyqgsM6MEAs-yf7x2A - Releasing Connection Lock in StopAsyncCore (/_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:374).\r\n   | [0.015s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Stopping HubConnection.\r\n   | [0.015s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Terminating receive loop.\r\n   | [0.015s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Waiting for the receive loop to terminate.\r\n   | [0.015s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: axzVbyqgsM6MEAs-yf7x2A - Waiting on Connection Lock in ReceiveLoop (/_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:837).\r\n   | [0.015s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: axzVbyqgsM6MEAs-yf7x2A - Releasing Connection Lock in ReceiveLoop (/_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:846).\r\n   | [0.015s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Disposing HttpConnection.\r\n   | [0.015s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: axzVbyqgsM6MEAs-yf7x2A - Transport is stopping.\r\n   | [0.015s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: axzVbyqgsM6MEAs-yf7x2A - Send loop stopped.\r\n   | [0.015s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: axzVbyqgsM6MEAs-yf7x2A - Transport stopped.\r\n   | [0.015s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Information: axzVbyqgsM6MEAs-yf7x2A - HttpConnection Disposed.\r\n   | [0.015s] SERVER Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: axzVbyqgsM6MEAs-yf7x2A - Waiting for the application to finish sending data.\r\n   | [0.016s] SERVER Microsoft.AspNetCore.SignalR.HubConnectionHandler Debug: axzVbyqgsM6MEAs-yf7x2A - OnConnectedAsync ending.\r\n   | [0.016s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: axzVbyqgsM6MEAs-yf7x2A - Receive loop canceled.\r\n   | [0.016s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - Canceling all outstanding invocations.\r\n   | [0.016s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: axzVbyqgsM6MEAs-yf7x2A - Receive loop stopped.\r\n   | [0.016s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: axzVbyqgsM6MEAs-yf7x2A - Shutting down connection.\r\n   | [0.016s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: axzVbyqgsM6MEAs-yf7x2A - HubConnection stopped.\r\n   | [0.016s] Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests Information: Waiting for reconnect\r\n   | [0.016s] SERVER Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: axzVbyqgsM6MEAs-yf7x2A - Socket closed.\r\n   | [0.017s] SERVER Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLECIDK7FVDG\" reset.\r\n   | [0.017s] SERVER Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLECIDK7FVDG\" sending FIN.\r\n   | [0.017s] SERVER Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLECIDK7FVDG\" disconnecting.\r\n   | [0.017s] SERVER Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager Debug: axzVbyqgsM6MEAs-yf7x2A - Removing connection axzVbyqgsM6MEAs-yf7x2A from the list of connections.\r\n   | [0.017s] SERVER Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 8.0455ms 101 \r\nRUNDOTNET : | [0.016s] Microsoft.AspNetCore.SignalR.Client.HubConnection error : An exception was thrown in the handler for the Closed event. [/home/travis/.dotnet/buildtools/korebuild/2.2.0-preview1-17067/KoreBuild.proj]\r\n   | System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\r\n   | Parameter name: index\r\n   |    at Microsoft.AspNetCore.SignalR.Client.Internal.ConnectionLogScope.get_Item(Int32 index) in /_/src/Microsoft.AspNetCore.SignalR.Client.Core/Internal/ConnectionLogScope.cs:line 38\r\n   |    at Microsoft.AspNetCore.SignalR.Client.Internal.ConnectionLogScope.GetEnumerator()+MoveNext() in /_/src/Microsoft.AspNetCore.SignalR.Client.Core/Internal/ConnectionLogScope.cs:line 46\r\n   |    at System.Linq.Enumerable.TryGetFirst[TSource](IEnumerable`1 source, Func`2 predicate, Boolean& found)\r\n   |    at Microsoft.AspNetCore.SignalR.Tests.WrappingLoggerFactory.WrappingLogger.<>c__DisplayClass6_0.<GetConnectionId>b__0(Object scope, Object s) in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/WrappingLoggerFactory.cs:line 107\r\n   |    at Microsoft.Extensions.Logging.LoggerExternalScopeProvider.ForEachScope[TState](Action`2 callback, TState state)\r\n   |    at Microsoft.AspNetCore.SignalR.Tests.WrappingLoggerFactory.WrappingLogger.GetConnectionId() in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/WrappingLoggerFactory.cs:line 113\r\n   |    at Microsoft.AspNetCore.SignalR.Tests.WrappingLoggerFactory.WrappingLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter) in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/WrappingLoggerFactory.cs:line 77\r\n   |    at Microsoft.Extensions.Logging.Logger`1.Microsoft.Extensions.Logging.ILogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n   |    at Microsoft.Extensions.Logging.LoggerMessage.<>c__DisplayClass4_0.<Define>b__0(ILogger logger, Exception exception)\r\n   |    at Microsoft.AspNetCore.SignalR.Client.HubConnection.RunClosedEvent(Func`2 closed, Exception closeException) in /_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:line 959\r\n   | [0.015s] SERVER Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLECIDK7FVDG\" received FIN.\r\n   | [0.019s] SERVER Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLECIDK7FVDF\" received FIN.\r\n   | [0.019s] SERVER Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLECIDK7FVDG\" stopped.\r\n   | [0.019s] SERVER Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLECIDK7FVDF\" disconnecting.\r\n   | [0.019s] SERVER Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLECIDK7FVDF\" sending FIN.\r\n   | [0.019s] SERVER Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLECIDK7FVDF\" stopped.\r\nRUNDOTNET : | [5.020s] Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests error : System.TimeoutException from test [/home/travis/.dotnet/buildtools/korebuild/2.2.0-preview1-17067/KoreBuild.proj]\r\n   | System.TimeoutException: Operation in CanStartConnectionFromClosedEvent timed out at /_/test/Microsoft.AspNetCore.SignalR.Client.FunctionalTests/HubConnectionTests.cs:206\r\n   |    at System.Threading.Tasks.TaskExtensions.OrTimeout[T](Task`1 task, TimeSpan timeout, String memberName, String filePath, Nullable`1 lineNumber)\r\n   |    at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.CanStartConnectionFromClosedEvent(String protocolName, HttpTransportType transportType, String path) in /_/test/Microsoft.AspNetCore.SignalR.Client.FunctionalTests/HubConnectionTests.cs:line 206\r\n   | [5.021s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: Waiting on Connection Lock in StopAsyncCore (/_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:347).\r\n   | [5.021s] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: Releasing Connection Lock in StopAsyncCore (/_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:374).\r\n   | [5.021s] ServerLogScope Information: Server log scope stopped.\r\n   | [5.022s] TestLifetime Information: Finished test CanStartConnectionFromClosedEvent_json_WebSockets_default in 5.0212337s\r\n   | [5.126s] TestLifetime Information: Finished test CanStartConnectionFromClosedEvent-json-WebSockets-/default in 5.1254671s\r\n```","Url":"https://github.com/aspnet/SignalR/issues/2447","RelatedDescription":"Closed issue \"Flaky Test: CanStartConnectionFromClosedEvent\" (#2447)"},{"Id":"331283972","IsPullRequest":true,"CreatedAt":"2018-06-11T19:50:35","Actor":"BrennanConroy","Number":"2470","RawContent":null,"Title":"Return empty string for connectionId in some cases","State":"closed","Body":"#2447 ","Url":"https://github.com/aspnet/SignalR/pull/2470","RelatedDescription":"Closed or merged PR \"Return empty string for connectionId in some cases\" (#2470)"},{"Id":"331323380","IsPullRequest":true,"CreatedAt":"2018-06-11T19:42:42","Actor":"BrennanConroy","Number":"2471","RawContent":null,"Title":"Try OSX","State":"open","Body":"","Url":"https://github.com/aspnet/SignalR/pull/2471","RelatedDescription":"Open PR \"Try OSX\" (#2471)"},{"Id":"331264545","IsPullRequest":true,"CreatedAt":"2018-06-11T19:29:32","Actor":"anurse","Number":"2469","RawContent":null,"Title":"Add build definition for deploying samples","State":"closed","Body":"Adds a build script that deploys the samples and functional tests to an\r\nAzure App Service. The specific App Service name is parameterized and\r\nkept internal.\r\n\r\nThis is also where some of our Browser Functional Test automation (via SauceLabs) and Xamarin automation will live, but that's not ready yet.","Url":"https://github.com/aspnet/SignalR/pull/2469","RelatedDescription":"Closed or merged PR \"Add build definition for deploying samples\" (#2469)"},{"Id":"331240360","IsPullRequest":false,"CreatedAt":"2018-06-11T15:33:27","Actor":"josemaia","Number":"2468","RawContent":null,"Title":"How to ensure the application fails if it can't establish a connection to Redis?","State":"open","Body":"Hello,\r\n\r\nI added Redis usage to my application, for backplane purposes. However, after passing an invalid connection string, nothing happened. Ideally, I would prefer it to crash outright, but it's not even getting logged with my default logging settings (Warning or higher for System/Microsoft DLLs), so it makes it really hard to use!\r\n\r\n```\r\nservices.AddSignalR()\r\n  .AddRedis(servicesEndpointsConfiguration.RedisConnectionString);\r\n```\r\n\r\nWith this scenario, if I pass an invalid connection string (i.e. add the password in the wrong place, such as pass@server:port instead of server:port,password=pass=, it'll fail. I set my log to Debug to capture this, and the chunk below is the final message:\r\n\r\n```\r\n2018-06-11 16:12:16.811 +01:00 [Debug] [] password123@redis-fakeServer.example.com:1234 did not respond\r\n2018-06-11 16:12:16.872 +01:00 [Debug] [] password123@redis-fakeServer.example.com:1234 failed to nominate (WaitingForActivation)\r\n2018-06-11 16:12:16.877 +01:00 [Debug] [] No masters detected\r\n2018-06-11 16:12:16.881 +01:00 [Debug] [] password123@redis-fakeServer.example.com:1234: Standalone v2.0.0, master; keep-alive: 00:01:00; int: Disconnected; sub: Disconnected; not in use: DidNotRespond\r\n2018-06-11 16:12:16.886 +01:00 [Debug] [] password123@redis-fakeServer.example.com:1234: int ops=0, qu=2, qs=0, qc=0, wr=0, sync=2, async=2, socks=4; sub ops=0, qu=0, qs=0, qc=0, wr=0, socks=4\r\n```\r\n\r\nMy question is:\r\n- Is there a way to guarantee that, if a connection string is passed, we crash if the connection isn't possible to establish?\r\n\r\n- If not, how else can I protect my customers? Manually 'ping' the connection somehow?\r\n\r\nThank you.\r\n\r\n### Please include as much of the following as you can in your bug report\r\n\r\n* Versions of Server-Side NuGet Packages: 1.0.0\r\n* Are you using the C# client or the JavaScript client: n/a\r\n* The Server you are using (Kestrel/HttpSysServer/IIS/IIS Express/Azure Web App/etc.): Kestrel\r\n* The Operating System on the Server (Windows/Linux/macOS): Windows\r\n* The Operating System on the Client (Windows/Linux/macOS): Windows","Url":"https://github.com/aspnet/SignalR/issues/2468","RelatedDescription":"Open issue \"How to ensure the application fails if it can't establish a connection to Redis?\" (#2468)"},{"Id":"331199688","IsPullRequest":false,"CreatedAt":"2018-06-11T15:08:15","Actor":"alexiordan","Number":"2466","RawContent":null,"Title":"Equivalent for HubConnectionBuilder WithConsoleLogger()","State":"closed","Body":"What is the equivalent in SignalR 1.0.0 for the WithConsoleLogger() found in preview1?","Url":"https://github.com/aspnet/SignalR/issues/2466","RelatedDescription":"Closed issue \"Equivalent for HubConnectionBuilder WithConsoleLogger()\" (#2466)"},{"Id":"331201670","IsPullRequest":false,"CreatedAt":"2018-06-11T15:05:11","Actor":"alexiordan","Number":"2467","RawContent":null,"Title":"Setting ClientWebSocketOptions","State":"closed","Body":"Trying to set KeepAliveInterval, I am using 3rd parameter to WithUrl() like this:\r\n`a => a.WebSocketConfiguration(new ClientWebSocketOptions().KeepAliveInterval = TimeSpan.FromSeconds(3))`\r\n\r\nAnd I get\r\n'ClientWebSocketOptions' does not contain a constructor that takes 0 arguments\t\r\n\r\nTaking a look at its referred definition, wich in my case is \r\n> Assembly System.Net.WebSockets.Client, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n\r\nI see it has only the default contructor (i.e. no constructor defined)\r\nSo I would say it should work...\r\n\r\nCan you please, help me?\r\n\r\nUPDATE:\r\nWhen hitting F12 to see the definition of the ClientWebSocketOptions class I also see that System.Net.WebSockets.Client assembly comes from a weird path \r\n\r\n> xxx.nuget\\packages\\microsoft.netcore.universalwindowsplatform\\6.0.8\\ref\\uap10.0.15138\\System.Net.WebSockets.Client.dll \r\n\r\nespecially since I am targeting the 16299 Fall CreatorsUpdate Windows version...\r\n\r\nIf that is the issue than how can I set VS to look in the proper place?","Url":"https://github.com/aspnet/SignalR/issues/2467","RelatedDescription":"Closed issue \"Setting ClientWebSocketOptions\" (#2467)"},{"Id":"331018540","IsPullRequest":true,"CreatedAt":"2018-06-11T01:06:21","Actor":"BrennanConroy","Number":"2465","RawContent":null,"Title":"Fix Cpp builds","State":"open","Body":"Some configurations weren't getting dll's and includes correctly. Think I got them all working now.","Url":"https://github.com/aspnet/SignalR/pull/2465","RelatedDescription":"Open PR \"Fix Cpp builds\" (#2465)"},{"Id":"330991665","IsPullRequest":false,"CreatedAt":"2018-06-10T22:28:58","Actor":"alexiordan","Number":"2462","RawContent":null,"Title":"Different configuration methods in 1.0.0 vs 1.0.0-preview1-final ?","State":"closed","Body":"I have update SignalR to 1.0.0 and using the .Net Client \r\nHubConnectionBuilder no longer has\r\nmethods like:\r\n.WithJsonProtocol\r\n.WithTransport\r\n\r\nWhat is weird is that on msdn page\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.signalr.client.hubconnectionbuilderextensions?view=aspnetcore-2.1\r\n\r\nseems to have them.\r\n\r\nAm I doing something wrong?\r\n","Url":"https://github.com/aspnet/SignalR/issues/2462","RelatedDescription":"Closed issue \"Different configuration methods in 1.0.0 vs 1.0.0-preview1-final ?\" (#2462)"},{"Id":"330992044","IsPullRequest":false,"CreatedAt":"2018-06-10T22:26:36","Actor":"alexiordan","Number":"2463","RawContent":null,"Title":"FileNotFoundException System.Memory, Version=4.0.1.0","State":"closed","Body":"On a Universal Windows App for Windows Iot Core, when trying to use the SignalR (.Net Client) library at runtime I get \r\n>Exception thrown: 'System.IO.FileNotFoundException' in Microsoft.AspNetCore.SignalR.Protocols.Json.dll\r\nCould not load file or assembly 'System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.\r\n\r\n>Exception thrown: 'System.IO.FileNotFoundException' in System.Private.CoreLib.dll\r\nCould not load file or assembly 'System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.\r\n\r\nFollowing package versions are referenced:\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.8\r\nMicrosoft.AspNetCore.SignalR.Client 1.0.0\r\nMicrosoft.AspNetCore.SignalR.Client.Core 1.0.0\r\n\r\nWindows 10, version 1803 (10.0; Build 17134)\r\n\r\nUPDATE\r\nThe exact same setup except Windows version works well.\r\nSo when using Windows 10 Fall Creators Update(Buld 16299) that exception is no longer thrown\r\n","Url":"https://github.com/aspnet/SignalR/issues/2463","RelatedDescription":"Closed issue \"FileNotFoundException System.Memory, Version=4.0.1.0\" (#2463)"},{"Id":"330994607","IsPullRequest":false,"CreatedAt":"2018-06-10T19:16:10","Actor":"ZainElDeen","Number":"2464","RawContent":null,"Title":"Failed to start the connection: Error: Unable to initialize any of the available transports.","State":"open","Body":"I'm facing this error while trying to make a demo using \r\nSignalR :  * @version 1.0.0.\r\nASPNetCore 2.1\r\nVue.js\r\n\r\n![untitled](https://user-images.githubusercontent.com/40148176/41205423-6ecb2d9e-6cf3-11e8-8a4c-7a48a5f2fbc2.jpg)\r\n This is the error at the console window\r\nanyone can help?","Url":"https://github.com/aspnet/SignalR/issues/2464","RelatedDescription":"Open issue \"Failed to start the connection: Error: Unable to initialize any of the available transports.\" (#2464)"},{"Id":"330502566","IsPullRequest":false,"CreatedAt":"2018-06-08T23:53:03","Actor":"kofifus","Number":"2455","RawContent":null,"Title":"Authenticate a .NET Core 2.1 SignalR console to web app using \"Identity as UI\"","State":"closed","Body":"Using .NET Core 2.1 & VS2017 preview 2 I created a simple web server with \"Identity as UI\" as explained [here][2] and then added a SignalR chat following [this][1]. \r\n\r\n  [1]: https://docs.microsoft.com/en-us/aspnet/core/signalr/hubs?view=aspnetcore-2.1\r\n  [2]: http://www.talkingdotnet.com/how-to-scaffold-identity-ui-in-asp-net-core-2-1/\r\n\r\nIn particular I have:\r\n\r\n```\r\napp.UseAuthentication();\r\napp.UseSignalR((options) => {\r\n\toptions.MapHub<MyHub>(\"/hubs/myhub\");\r\n});\r\n\r\n..\r\n\r\n[Authorize]\r\npublic class MyHub : Hub\r\n\r\n..\r\n\r\n\"iisSettings\": {\r\n  \"windowsAuthentication\": false,\r\n  \"anonymousAuthentication\": true,\r\n     \"iisExpress\": {\r\n     \"applicationUrl\": \"http://localhost:5000\",\r\n     \"sslPort\": 0\r\n```\r\n\r\nI start the debugger which brings the browser, register a user and log in, then go to http://localhost:5000/SignalRtest (my razor page that uses signalr.js) and verify the chat works fine.\r\n\r\nI now try to create a .NET Core console app chat client:\r\n\r\n```\r\nclass Program\r\n{\r\n\tpublic static async Task SetupSignalRHubAsync()\r\n\t{\r\n\t\tvar hubConnection = new HubConnectionBuilder()\r\n\t\t\t\t\t.WithUrl(\"http://localhost:5000/hubs/myhub\")\r\n\t\t\t\t\t.Build();\r\n\r\n\t\tawait hubConnection.StartAsync();\r\n\t\tawait hubConnection.SendAsync(\"Send\", \"consoleapp\");\r\n\t}\r\n\r\n\tpublic static void Main(string[] args)\r\n\t{\r\n\t\tSetupSignalRHubAsync().Wait();\r\n\t}\r\n}\r\n```\r\n\r\nMy issue is I don't know how to authenticate this client ?\r\n\r\nLooking at some posts I tried:\r\n\r\n```\r\nprivate static async Task<string> GetAccessTokenViaOwnerPasswordAsync()\r\n{\r\n\ttry\r\n\t{\r\n\t\t// discover endpoints from metadata\r\n\t\tvar discoveryClient = new DiscoveryClient(\"http://localhost:5000\");\r\n\t\tdiscoveryClient.Policy.RequireHttps = false;\r\n\t\tvar discoveryClientTask = await discoveryClient.GetAsync();\r\n\t\tif (discoveryClientTask.IsError) throw new Exception(discoveryClientTask.Error);\r\n\r\n\t\t// request token\r\n\t\tvar tokenClient = new TokenClient(discoveryClientTask.TokenEndpoint, \"client\", \"secret\");\r\n\t\tvar tokenResponse = await tokenClient.RequestClientCredentialsAsync(\"api1\");\r\n\t\tif (tokenResponse.IsError) throw new Exception(tokenResponse.Error);\r\n\r\n\t\t// call api\r\n\t\tvar client = new HttpClient();\r\n\t\tclient.SetBearerToken(tokenResponse.AccessToken);\r\n\r\n\t\tvar response = await client.GetAsync(\"http://localhost:5000/identity\");\r\n\t\tif (!response.IsSuccessStatusCode) throw new Exception(response.ReasonPhrase);\r\n\r\n\t\tvar content = await response.Content.ReadAsStringAsync();\r\n\t\treturn tokenResponse.AccessToken;\r\n\t}\r\n\tcatch (Exception e)\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n}\r\n```\r\nbut at the very beginning `discoveryClientTask.IsError` is true and `discoveryClientTask.Error` is: \"Error connecting to http://localhost:5000/.well-known/openid-configuration: Not Found\"\r\n\r\n\r\nIf I use Postman on the browser to try a GET to http://localhost:5000/.well-known/openid-configuration it fails with 404 so this seems to be wrong.\r\n\r\nHow do I authenticate a .NET Core 2.1 SignalR console client with a .NET Core 2.1 web app SignalR server that uses \"Identity as UI\" ?\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/2455","RelatedDescription":"Closed issue \"Authenticate a .NET Core 2.1 SignalR console to web app using \"Identity as UI\"\" (#2455)"},{"Id":"330462202","IsPullRequest":true,"CreatedAt":"2018-06-08T22:28:24","Actor":"mikaelm12","Number":"2451","RawContent":null,"Title":"Clean up Spec Test dependencies","State":"closed","Body":"Updated the dependencies of the Specification Tests package. \r\n - Removed AspNetCore.Testing\r\n - Used the Xunit extensibility packages\r\n\r\nThis still depends on Moq because of  `HubConnectionContextUtils`","Url":"https://github.com/aspnet/SignalR/pull/2451","RelatedDescription":"Closed or merged PR \"Clean up Spec Test dependencies\" (#2451)"},{"Id":"330798971","IsPullRequest":false,"CreatedAt":"2018-06-08T20:51:47","Actor":"dogwith1eye","Number":"2458","RawContent":null,"Title":"Always falls back to 'ServerSentEvents'","State":"open","Body":"I'm a little puzzled why i can't get a websocket connection to work as the connection always falls back to 'ServerSentEvents' after printing the following error in the console.\r\n\r\n```\r\nWebSocket connection to 'wss://localhost:8001/hubs/notify?id=uNXrY7kf44Uj3f_MsqjSNg' failed: Error during WebSocket handshake: Unexpected response code: 500\r\n(anonymous) @ WebSocketTransport.js:35\r\n\r\nUtils.js:148 Error: Failed to start the transport 'WebSockets': undefined\r\n```\r\n\r\nI'm debugging in Visual Studio on Kestret which should support web sockets. Here is how i'm building the connection.\r\n\r\n```\r\nvar notifyHubConnection = new HubConnectionBuilder()\r\n                .withUrl(\"/hubs/notify\")\r\n                .configureLogging(LogLevel.Debug)\r\n                .build();\r\n\r\n```","Url":"https://github.com/aspnet/SignalR/issues/2458","RelatedDescription":"Open issue \"Always falls back to 'ServerSentEvents'\" (#2458)"},{"Id":"330649442","IsPullRequest":false,"CreatedAt":"2018-06-08T15:57:23","Actor":"kevinvella","Number":"2457","RawContent":null,"Title":"Exception when connecting to server from Xamarin iOS and Android - Xamarin forms","State":"closed","Body":"Server Side version\r\n- Microsoft.AspNetCore.All (2.0.0)\r\n- Microsoft.AspNetCore.SignalR (1.0.0)\r\n- Microsoft.AspNetCore.SignalR.Core (1.0.0)\r\n\r\nClient Side version\r\n- Microsoft.AspNetCore.SignalR.Client (1.0.0)\r\n- Microsoft.AspNetCore.SignalR.Client.Core (1.0.0)\r\n\r\nServer\r\n- LocalHost - Kestrel\r\n- Cloud - Azure Web App\r\n\r\nOS on Server - Windows (Azure web app)\r\nOS on LocalHost - macOS\r\n\r\nOS on client\r\nXamarin forms (Android and iOS)\r\n\r\nClient Side Code:\r\n```\r\n        try\r\n            {\r\n                _hub = new HubConnectionBuilder()\r\n                    .WithUrl(\"http://127.0.0.1:47964/messanger\")\r\n                .Build();\r\n\r\n                _hub.On<string>(\"Message\",\r\n                (value) => {\r\n                    Message?.Invoke(this, new MessageEventArgs(value, string.Empty));\r\n                });\r\n\r\n                await _hub.StartAsync();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Debug.WriteLine($\"SignalR Error...{ex.Message}\");\r\n            }\r\n```\r\n\r\nException\r\n```\r\n{System.TypeLoadException: Could not resolve the signature of a virtual method\r\n  at System.Reflection.MonoCMethod.InternalInvoke (System.Object obj, System.Object[] parameters) [0x0001b] in /Library/Frameworks/Xamarin.iOS.framework/Versions/11.12.0.4/src/Xamarin.iOS/mcs/class/corlib/System.Reflection/MonoMethod.cs:671 \r\n  at System.Reflection.MonoCMethod.DoInvoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0007a] in /Library/Frameworks/Xamarin.iOS.framework/Versions/11.12.0.4/src/Xamarin.iOS/mcs/class/corlib/System.Reflection/MonoMethod.cs:652 \r\n  at System.Reflection.MonoCMethod.Invoke (System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] in /Library/Frameworks/Xamarin.iOS.framework/Versions/11.12.0.4/src/Xamarin.iOS/mcs/class/corlib/System.Reflection/MonoMethod.cs:680 \r\n  at System.Reflection.ConstructorInfo.Invoke (System.Object[] parameters) [0x00000] in /Library/Frameworks/Xamarin.iOS.framework/Versions/11.12.0.4/src/Xamarin.iOS/mcs/class/corlib/System.Reflection/ConstructorInfo.cs:62 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope scope) [0x00035] in <15b87bbf30da4bf4b95652066811831b>:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceCallSite callSite, TArgument argument) [0x00056] in <15b87bbf30da4bf4b95652066811831b>:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped (Microsoft.Extensions.DependencyInjection.ServiceLookup.ScopedCallSite scopedCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope scope) [0x0002d] in <15b87bbf30da4bf4b95652066811831b>:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton (Microsoft.Extensions.DependencyInjection.ServiceLookup.SingletonCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope scope) [0x0000d] in <15b87bbf30da4bf4b95652066811831b>:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceCallSite callSite, TArgument argument) [0x00072] in <15b87bbf30da4bf4b95652066811831b>:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor (Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite constructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope scope) [0x0001b] in <15b87bbf30da4bf4b95652066811831b>:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceCallSite callSite, TArgument argument) [0x00056] in <15b87bbf30da4bf4b95652066811831b>:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped (Microsoft.Extensions.DependencyInjection.ServiceLookup.ScopedCallSite scopedCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope scope) [0x0002d] in <15b87bbf30da4bf4b95652066811831b>:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton (Microsoft.Extensions.DependencyInjection.ServiceLookup.SingletonCallSite singletonCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope scope) [0x0000d] in <15b87bbf30da4bf4b95652066811831b>:0 \r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[TArgument,TResult].VisitCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceCallSite callSite, TArgument argument) \r\n…\r\n```\r\n\r\nSample project\r\n[https://github.com/kevinvella/SignalRTest](https://github.com/kevinvella/SignalRTest)\r\n\r\nLog File on client\r\n[SignalR_Log.txt](https://github.com/aspnet/SignalR/files/2084423/SignalR_Log.txt)\r\n\r\nOn console it works with the same code","Url":"https://github.com/aspnet/SignalR/issues/2457","RelatedDescription":"Closed issue \"Exception when connecting to server from Xamarin iOS and Android - Xamarin forms\" (#2457)"},{"Id":"330646480","IsPullRequest":false,"CreatedAt":"2018-06-08T12:52:46","Actor":"Tragetaschen","Number":"2456","RawContent":null,"Title":"ChannelReader<T> doesn't complete when the connection is closed","State":"open","Body":"I'm using the Git 1.0.0 tag, run build.cmd and then run the `samples\\SignalRSamples` application.\r\n\r\nIn a Browser, I choose the streaming examples, `Connect` and then choose `From Observable`.\r\n\r\nWhen the observable completes, the channel properly completes and the observable's subscription is disposed. However, when I `Disconnect` before the observable completes, the channel in turn doesn't ever complete and the subscription remains active. Unbounded channels then effectively become a memory leak.\r\n\r\nThe latter is what I'm seeing in my application, where the observables don't ever complete by design and browsers just connect and disconnect to a Hub.\r\n","Url":"https://github.com/aspnet/SignalR/issues/2456","RelatedDescription":"Open issue \"ChannelReader<T> doesn't complete when the connection is closed\" (#2456)"},{"Id":"330498613","IsPullRequest":false,"CreatedAt":"2018-06-08T02:32:46","Actor":"myrup","Number":"2454","RawContent":null,"Title":"Missing HubConnectionBuilderHttpExtensions methods","State":"open","Body":"After switching from 2.1 rc1 to release (.Net Core and SignalR C# client) some `HubConnectionBuilderHttpExtensions` methods (like `WithHeader`) are missing.\r\n\r\nTo reproduce create a 2.1 Console Project and add NuGet package `Microsoft.AspNetCore.SignalR.Client`:\r\n![screen shot 2018-06-08 at 04 28 46](https://user-images.githubusercontent.com/1935820/41136004-774cb454-6ad4-11e8-802e-55587d8a9e26.png)\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/2454","RelatedDescription":"Open issue \"Missing HubConnectionBuilderHttpExtensions methods\" (#2454)"},{"Id":"330465626","IsPullRequest":false,"CreatedAt":"2018-06-07T23:04:52","Actor":"seriouz","Number":"2453","RawContent":null,"Title":"Howto set Authorization header in the Typescript client?","State":"open","Body":"I wonder how is it still possible to set the `Authorization` header with my JwtBearer in the 1.0.0.0 Typescript client.\r\n\r\n![image](https://user-images.githubusercontent.com/4722613/41130749-61090b28-6ab8-11e8-94d0-8d669d3403e0.png)\r\n\r\nThis was the old method (1.0.0-preview1-update1)\r\n```typescript\r\nthis.MainHub = new HubConnection(\"/chatHub\", {\r\n      accessTokenFactory: () => {\r\n        return window.localStorage.getItem('access_token'); },\r\n    } as IHubConnectionOptions);\r\n```\r\n\r\nBut how is it now possible (1.0.0)?\r\n```typescript\r\nthis.MainHub = new HubConnectionBuilder()\r\n    .withUrl(\"/chatHub\")\r\n    .configureLogging(LogLevel.Information)\r\n    .build();\r\n```","Url":"https://github.com/aspnet/SignalR/issues/2453","RelatedDescription":"Open issue \"Howto set Authorization header in the Typescript client?\" (#2453)"},{"Id":"330462783","IsPullRequest":false,"CreatedAt":"2018-06-07T22:50:56","Actor":"kofifus","Number":"2452","RawContent":null,"Title":"Force all Hubs to require authentication","State":"open","Body":"In older versions I would do:\r\n\t`Microsoft.AspNetCore.SignalR. GlobalHost.HubPipeline.RequireAuthentication();`\r\nto force all hubs to require authentication even if they do not have [Authorize] \r\n\r\nBut with latest Core 2.1 this does not compile anymore.\r\nWhat is the current way to do this ?","Url":"https://github.com/aspnet/SignalR/issues/2452","RelatedDescription":"Open issue \"Force all Hubs to require authentication\" (#2452)"},{"Id":"330442960","IsPullRequest":true,"CreatedAt":"2018-06-07T21:30:31","Actor":"anurse","Number":"2450","RawContent":null,"Title":"change to use Karma for Functional Tests","State":"open","Body":"This removes a bunch of our custom logic and makes it easier to use\r\nSauceLabs. The core difference is that we server the Functional Test\r\nJavaScript from a **different** server than the SignalR Hub. This means\r\nthe test are always running cross-origin, but that's OK. This only\r\nhappens in the command-line and SauceLabs build. You can still run the\r\nFunctional Tests in the browser on the same origin.","Url":"https://github.com/aspnet/SignalR/pull/2450","RelatedDescription":"Open PR \"change to use Karma for Functional Tests\" (#2450)"},{"Id":"330396882","IsPullRequest":true,"CreatedAt":"2018-06-07T19:26:10","Actor":"natemcmaster","Number":"2449","RawContent":null,"Title":"Disable packing Microsoft.AspNetCore.SignalR.Specification.Tests","State":"closed","Body":"To unblock CI, let's disable this project from packing until we can address https://github.com/aspnet/SignalR/pull/2353#pullrequestreview-126915153","Url":"https://github.com/aspnet/SignalR/pull/2449","RelatedDescription":"Closed or merged PR \"Disable packing Microsoft.AspNetCore.SignalR.Specification.Tests\" (#2449)"},{"Id":"330275209","IsPullRequest":false,"CreatedAt":"2018-06-07T17:57:22","Actor":"Kriegthor23","Number":"2446","RawContent":null,"Title":"Clients.All.myJsfunction cannot trigger the function in js file","State":"closed","Body":"so Here is my issue \r\n\r\ni might be doing something wrong but what i basicly try is im trying to connect two peers with a video chat \r\nand while i try that in text chat part i use \r\n\r\nin ChatHub.cs part \r\n        public void Send(string name, string message)\r\n        {\r\n            // Call the broadcastMessage method to update clients.\r\n            Clients.All.broadcastMessage(name, message);\r\n        }\r\nand corresponding JS part of it\r\n\r\n chat.client.broadcastMessage = function (name, message) { //my function does is job }\r\n\r\nand this works very well \r\n\r\nbut for video call \r\nin ChatHub.cs \r\n\r\nsome function in ChatHub calls \r\n\r\n        public void GetConnectionIDandSet()\r\n        {\r\n            var users = JsonConvert.SerializeObject(ConnectedUsers);\r\n            Clients.All.getConnectionIDandSet(users);\r\n        }\r\n\r\nand corresponding JS part of it\r\n\r\nchat.client.getConnectionIDandSet = function (users) { // do the job }\r\n\r\nand when i try to debug it on console \r\nClients.All.getConnectionIDandSet(users); does not trigger \r\n\r\nchat.client.getConnectionIDandSet = function (users) { // do the job }\r\n\r\nso what am i doing wrong at here \r\n\r\n* Versions of Server-Side NuGet Packages: SignalR 2.2.3\r\n* Versions of Client-Side NuGet/NPM Packages: SignalR 2.2.3\r\n* Are you using the C# client or the JavaScript client: \r\n* The Server you are using (Kestrel/HttpSysServer/IIS/IIS Express/Azure Web App/etc.):  IIS Express\r\n* The Operating System on the Server (Windows/Linux/macOS): Windows\r\n* The Operating System on the Client (Windows/Linux/macOS): Windows\r\n* The Browser on the client, if using the JavaScript client (IE/Chrome/Edge/Firefox/etc.): Chrome 66.0.3359.181 (official) (64 bit)\r\n\r\nThe gist for full project \r\nhttps://gist.github.com/Kriegthor23/54c1a246cba6e9fb9096c161edc99a59\r\n\r\nThanks for helps in advance \r\nAnd if this is a dupp of an issue maybe i missed in closed sections i appologize from the members in advance \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/2446","RelatedDescription":"Closed issue \"Clients.All.myJsfunction cannot trigger the function in js file\" (#2446)"},{"Id":"330374472","IsPullRequest":false,"CreatedAt":"2018-06-07T17:53:18","Actor":"anurse","Number":"2448","RawContent":null,"Title":"Change UMD build of SignalR to use WebPack","State":"open","Body":"Today we use [rollup](https://github.com/rollup/rollup/) to package our CommonJS compiler output into a [UMD](https://github.com/umdjs/umd) file that can be embedded via a `<script>` tag. Well, rollup has a [regression](https://github.com/rollup/rollup/issues/1782) on Node 9+. I think it's going to be easiest to just switch to use WebPack's [library output](https://webpack.js.org/guides/author-libraries/).\r\n\r\nThis is blocking #1967 because the new Jenkins images (and the VSTS images that will likely follow it) are running the latest Node. We also just want our developers (internal and external) to be able to use the latest Node.","Url":"https://github.com/aspnet/SignalR/issues/2448","RelatedDescription":"Open issue \"Change UMD build of SignalR to use WebPack\" (#2448)"},{"Id":"330206179","IsPullRequest":false,"CreatedAt":"2018-06-07T10:12:44","Actor":"IonutArhire","Number":"2445","RawContent":null,"Title":"Typescript client efficient handling of error messages from server.","State":"open","Body":"As per issue #2437 I enabled EnableDetailedErrors flag:\r\n\r\n```\r\nservices.AddSignalR().AddHubOptions<MatchHub>(options => {\r\n                options.EnableDetailedErrors = true;\r\n});\r\n```\r\n\r\nI throw HubException the same way:\r\n\r\n```\r\npublic async Task SendResources(string gameKey) {\r\n      throw new HubException(\"oops\");\r\n      ...\r\n}\r\n```\r\nAnd my typescript client handles the error the same:\r\n\r\n```\r\npublic connected(data): void {    \r\n  this._hubConnection.invoke('SendResources', this._gameKey).catch(this.errorHandler);\r\n}\r\n\r\npublic errorHandler(err): void {\r\n  console.log(err);\r\n}\r\n```\r\nI get the HubException message on the client, but the problem is I can't easily get the message out without parsing:\r\n\r\n![capture](https://user-images.githubusercontent.com/26301880/41093188-5313b168-6a53-11e8-968a-1041a5abacd7.PNG)\r\n\r\n![1](https://user-images.githubusercontent.com/26301880/41093243-83ab4e8a-6a53-11e8-9265-899cd40a48bd.PNG)\r\n\r\nI've tried throwing using an InnerException like this:\r\n\r\n`throw new HubException(\"oops\", new Exception(\"oops\"));`\r\n\r\nbut I can't even access the inner exception on the client.\r\n\r\nDo I need to parse it or is there another way provided by signalR? Isn't there a specialized signalR object for errors?\r\n\r\nVersions:\r\n.net core: 2.1\r\nangular: 5\r\n@aspnet/signalr: 1.0.0","Url":"https://github.com/aspnet/SignalR/issues/2445","RelatedDescription":"Open issue \"Typescript client efficient handling of error messages from server.\" (#2445)"},{"Id":"330096584","IsPullRequest":false,"CreatedAt":"2018-06-07T02:40:48","Actor":"LGinC","Number":"2444","RawContent":null,"Title":"HandShake was canceled","State":"open","Body":"Server-Side: Microsoft.AspNetCore.SignalR 1.0.0\r\nClient-Side: @aspnet/signalr@1.0.0\r\nIIS: 8.0\r\nOS Server: Windows Server 2012\r\nClient: WeChatMiniProgram\r\n\r\n\r\nI use WebSocekt running in MobilePhone(WeChatMiniProgram) connect my signalr server but handshake failed. \r\n![image](https://user-images.githubusercontent.com/15363011/41075007-46009132-6a3d-11e8-9dca-8e3c01968173.png)\r\n\r\nbut it work in simulator (WeChatMiniProgram IDE)\r\n![image](https://user-images.githubusercontent.com/15363011/41075118-bec9ab9e-6a3d-11e8-8796-37aa2c15e763.png)\r\n\r\nand this is log when simulator connect success \r\n![tim 20180607103257](https://user-images.githubusercontent.com/15363011/41075493-71dfb998-6a3f-11e8-9953-afb970a78c01.png)\r\n\r\n\r\n\r\nthis is log when mobile phone connect failed\r\n![image](https://user-images.githubusercontent.com/15363011/41075548-aaeb5ae4-6a3f-11e8-8524-547c3b743881.png)\r\n\r\nI noticed that difference is port 443 between two request url , and failed request spend 20s.\r\n\r\n\r\nthis is my server code\r\n![image](https://user-images.githubusercontent.com/15363011/41091382-fcc6a6c8-6a78-11e8-989a-3f6362924c62.png)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/2444","RelatedDescription":"Open issue \"HandShake was canceled\" (#2444)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"331391677","IsPullRequest":false,"CreatedAt":"2018-06-12T00:04:02","Actor":"kofifus","Number":"1828","RawContent":null,"Title":"connect to .NET Core 2.1 \"Identity as UI\" from a .NET Core 2.1 console app client","State":"open","Body":"I create a simple .NET Core 2.1 server using \"Identity as UI\" with the default template, and then add some methods \r\n\r\nI now need to create  .NET Core 2.1 console app client but I can't find anything on how to authenticate that client with the server (with an email & password). In particular I want to authenticate and then get the authentication cookie so that I can later feed it to ie SignalR.\r\n\r\nAs far as I understand this should be possible without an external framework like IdentityServer.\r\n\r\nHow do I do that ? is there any sample code anywhere ?\r\n\r\nThanks!\r\n","Url":"https://github.com/aspnet/Identity/issues/1828","RelatedDescription":"Open issue \"connect to .NET Core 2.1 \"Identity as UI\" from a .NET Core 2.1 console app client\" (#1828)"},{"Id":"331342607","IsPullRequest":true,"CreatedAt":"2018-06-11T20:56:44","Actor":"tstivers1990","Number":"1827","RawContent":null,"Title":"Fix /// comments","State":"closed","Body":"The returns tag incorrectly states that AddDefaultIdentity<T>\r\nreturns IServiceCollection when it actually returns IdentityBuilder.","Url":"https://github.com/aspnet/Identity/pull/1827","RelatedDescription":"Closed or merged PR \"Fix /// comments\" (#1827)"},{"Id":"331328122","IsPullRequest":false,"CreatedAt":"2018-06-11T19:57:29","Actor":"ATylerYarnott","Number":"1826","RawContent":null,"Title":"Configuirability of QR code site name in UI library","State":"open","Body":"In playing with the new Identity UI as a Razor Class Library, I came across the issue of how to configure the site's QR code. Previously, it was suggested to change the value in the EnableAuthenticator.chtml.cs file (the default value would be taken from the solution name). It looks like this value is hard-coded to \"Microsoft.AspNetCore.Identity.UI\". Thus, every website would need to scaffold and override that file in order to customize this.\r\n\r\nShould there perhaps be an AuthenticationTokenProviderOptions class available in ConfigureServices that would allow this to be specified, perhaps defaulting to the solution name? Perhaps something like:\r\n```c#\r\nservices.Configure<AuthenticationTokenProviderOptions>(options =>\r\n{\r\n    options.AuthenticatorSiteName = \"MyWebsiteName\";\r\n});\r\n```\r\nThis would follow current conventions, allow changing this value without scaffolding/overriding the UI RCL, and would provide a simpler method to configure that behavior even if that file is overridden.\r\n\r\nThoughts or alternate proposals?","Url":"https://github.com/aspnet/Identity/issues/1826","RelatedDescription":"Open issue \"Configuirability of QR code site name in UI library\" (#1826)"},{"Id":"330786198","IsPullRequest":false,"CreatedAt":"2018-06-11T18:12:11","Actor":"pwen090","Number":"1824","RawContent":null,"Title":"Securely disable asp.net core 2.1 identity user registration","State":"closed","Body":"In asp.net core 2.1 identity projects with authentication for users the default UI contains user registration functionality. In the past to avoid a potential security risk (particularly for enterprise apps without open user registration) you could simply delete the relevant controller and view code for registration.\r\n\r\nWhat is the proper process for disabling user registration with this new razor library? \r\nScaffold the Account\\Register section and then comment out the code within Register.cshtml and Register.cshtml.cs? I assume you cannot simply comment out the files entirely but instead essentially comment out the specific functions like OnGet, OnPost and so on? \r\nCan you just delete these file[s] completely or will that then revert to the built-in razor library code?\r\n\r\nSecondarily how does one disable the default identity razor class library all together so that there is no potential for attack surface creep in future updates or changes to said library? E.g. My authentication UI/Controllers are only what I have explicitly coded them to be. thank you!","Url":"https://github.com/aspnet/Identity/issues/1824","RelatedDescription":"Closed issue \"Securely disable asp.net core 2.1 identity user registration\" (#1824)"},{"Id":"331135567","IsPullRequest":false,"CreatedAt":"2018-06-11T10:40:50","Actor":"tstivers1990","Number":"1825","RawContent":null,"Title":"Identity UI Unsuitable","State":"open","Body":"The new `Identity UI` library system introduced with 2.1 is unacceptable, in my eyes. There is too much background magic going on that isn't clear even after scaffolding all the pages. Not all users want to have an entire `Areas` folder with nothing but `Identity` in it while the rest of their project lives in the project root.\r\n\r\nAfter scaffolding all the pages, I've noticed some pages have `[AllowAnonymous]` yet no pages have `[Authorize]`, implying requiring authorization is the default. Yet, nowhere in the code is this made clear. Not in the `Startup` configuration. Not in `Program.cs`. Not in any files under the `Identity` folder. Nowhere. Leaving me to believe there's just some background magic going on that is being deliberately hidden from us.\r\n\r\nThe only current option also seems to be using `Razor Pages` for the `Identity UI`. Some of us want full control over how we use `Identity` so that we can customize it to our needs. The current setup is simply unacceptable. If my entire project is using `MVC`, I don't want `Identity` living in its own folder off in la-la land as `Razor Pages`. It makes the project structure a mess, and there's just no reason for it.\r\n\r\nPlease either fix the options so that those who want it can take full control of `Identity` and use it as they wish, whether that's the `MVC` approach or the `Razor Pages` approach. Or provide us with sufficient documentation so that we may add `Identity` to a blank project without using the `Identity UI` library or some magic scaffolding voodoo. As it stands now, there doesn't appear to be any documentation on `Identity` that doesn't rely on the new scaffolding system and `Identity UI`.","Url":"https://github.com/aspnet/Identity/issues/1825","RelatedDescription":"Open issue \"Identity UI Unsuitable\" (#1825)"},{"Id":"330461631","IsPullRequest":true,"CreatedAt":"2018-06-08T18:00:54","Actor":"ryanbrandenburg","Number":"1820","RawContent":null,"Title":"Adding VSTS file","State":"closed","Body":null,"Url":"https://github.com/aspnet/Identity/pull/1820","RelatedDescription":"Closed or merged PR \"Adding VSTS file\" (#1820)"},{"Id":"330751019","IsPullRequest":false,"CreatedAt":"2018-06-08T18:00:18","Actor":"ryanbrandenburg","Number":"1823","RawContent":null,"Title":"Flaky tests: CanChainRoleValidators et all","State":"open","Body":"We see this message popping up a lot in failing identity builds on [VSTS](https://dotnet.visualstudio.com/public/public%20Team/_build/results?buildId=1053&view=logs) and [appveyor](https://ci.appveyor.com/project/aspnetci/identity/build/1.0.1587):\r\n```\r\nSystem.Data.SqlClient.SqlException : Connection Timeout Expired.  The timeout period elapsed while attempting to consume the pre-login handshake acknowledgement.  This could be because the pre-login handshake failed or the server was unable to respond back in time.  The duration spent while attempting to connect to this server was - [Pre-Login] initialization=45447; handshake=27; \r\n---- System.ComponentModel.Win32Exception : The wait operation timed out.\r\n```\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1823","RelatedDescription":"Open issue \"Flaky tests: CanChainRoleValidators et all\" (#1823)"},{"Id":"330705079","IsPullRequest":false,"CreatedAt":"2018-06-08T15:31:45","Actor":"summoncse","Number":"1822","RawContent":null,"Title":"Customize Identity User ","State":"open","Body":"How can use my AppUser without having properties of IdentityUser properties in AppUser, for example, I only want AppUser table will be created on database according to my AppUser class properties, not with IdentityUser properties.","Url":"https://github.com/aspnet/Identity/issues/1822","RelatedDescription":"Open issue \"Customize Identity User \" (#1822)"},{"Id":"330585142","IsPullRequest":false,"CreatedAt":"2018-06-08T09:27:38","Actor":"konraddysput","Number":"1821","RawContent":null,"Title":"Cannot override IdentityUserClaim keys and similar key tables","State":"open","Body":"Hello,\r\n\r\nIn our company we decide to use Guid as a key instead of int. When we override default keys in Identity I recognize that I still have int in tables: `AspNetRoleClaims`, `AspNetUserClaims` ... \r\n\r\nIs there anyway to use in these tables Guid instead of int? Its not a bug in our code, but I cannot stop thinking about bad database design because we have two types of keys, not one. \r\n\r\nThanks !","Url":"https://github.com/aspnet/Identity/issues/1821","RelatedDescription":"Open issue \"Cannot override IdentityUserClaim keys and similar key tables\" (#1821)"},{"Id":"330450753","IsPullRequest":false,"CreatedAt":"2018-06-07T21:59:05","Actor":"sbersey","Number":"1819","RawContent":null,"Title":"Can Identity be used in a WinForm App?","State":"open","Body":"I am using Identity in a APS.NET WebForm app and would like to log in users using the same identity database for my Desktop app (WinForms) that is currently using membership? Can this be done? Are their examples? \r\n\r\n(sorry if this is not the correct format for a Q: if it is not, please inform how to post a identity Q properly)\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1819","RelatedDescription":"Open issue \"Can Identity be used in a WinForm App?\" (#1819)"},{"Id":"329057583","IsPullRequest":false,"CreatedAt":"2018-06-06T21:27:26","Actor":"mprevot","Number":"1814","RawContent":null,"Title":"Cannot retarget \"package\" to dotnet core 2.1","State":"closed","Body":"I couldn't find out how to make Identity projects work with dotnet  core 2.1 instead of 2.2-preview.\r\nI don't have 2.2 preview, build succeeds but tests do not.\r\nHow do we do this ?\r\n\r\n[SO](https://stackoverflow.com/questions/50680422/how-to-setup-dotnetcore-target-for-build-and-tests)\r\n\r\nThanks.\r\n","Url":"https://github.com/aspnet/Identity/issues/1814","RelatedDescription":"Closed issue \"Cannot retarget \"package\" to dotnet core 2.1\" (#1814)"},{"Id":"330021838","IsPullRequest":false,"CreatedAt":"2018-06-06T20:32:58","Actor":"wcvollmar","Number":"1818","RawContent":null,"Title":"Nuget Package URI Error","State":"open","Body":"Upon downloading the Microsoft.AspNetCore.Identity.UI 2.1.0 package, there appears to be an error in the package structure.  When opening the package I get a \"Part URI cannot start with two forward slashes\" error.  I'm not actually sure where this is occurring, as the metadata appears correct.\r\n\r\nHere's a screenshot of the error:\r\n![nugeterror](https://user-images.githubusercontent.com/40006478/41063609-a52b9532-69c8-11e8-91d0-546c1ac4b667.png)\r\n","Url":"https://github.com/aspnet/Identity/issues/1818","RelatedDescription":"Open issue \"Nuget Package URI Error\" (#1818)"},{"Id":"328383497","IsPullRequest":false,"CreatedAt":"2018-06-06T01:39:33","Actor":"dotnetshadow","Number":"1809","RawContent":null,"Title":"Scaffolding 2.1 RTM in existing MVC application 404 for non overridden pages","State":"closed","Body":"I recently upgraded my ASP.NET Core application 2.1. I used the identity scaffolder to override Login and Register pages. Upon doing this I noticed that routes to logout and manage were incorrect\r\n\r\n`?page=Account/Manage` rather than `/Identity/Account/Manage`\r\n\r\nI then rescaffolded and this time and chose to override all files. This seemed to work. \r\nIn my particular case there seems to be an issue with scaffolding just a handful of pages and not being able to find the remaining pages that aren't scaffolded\r\n\r\nJust wondering if I'm missing something?\r\n\r\n**update**\r\nI think the issue i have is that i was using AddIdentity instead of AddDefaultIdentity. Unfortunately i am unable to try this yet ","Url":"https://github.com/aspnet/Identity/issues/1809","RelatedDescription":"Closed issue \"Scaffolding 2.1 RTM in existing MVC application 404 for non overridden pages\" (#1809)"},{"Id":"329314068","IsPullRequest":false,"CreatedAt":"2018-06-05T06:10:36","Actor":"aneequrrehman","Number":"1817","RawContent":null,"Title":"Alternative to AuthenticationResponseGrant?","State":"open","Body":"Is there any alternative to the following code in AspNet Core 2?\r\n\r\n```\r\nvar identity = HttpContext.User.Identity as ClaimsIdentity;\r\nidentity.RemoveClaim(Identity.FindFirst(\"AnnounceCount\"));\r\nidentity.AddClaim(new Claim(\"AnnounceCount\", \"Updated Value\"));\r\nvar authenticationManager = System.Web.HttpContext.Current.GetOwinContext().Authentication;\r\nauthenticationManager.AuthenticationResponseGrant = new AuthenticationResponseGrant(new ClaimsPrincipal(identity), new AuthenticationProperties() { IsPersistent = true });\r\n```\r\n\r\nI would like to change some User Principal values inside the cookie and I do not intend to persist those in the database. Is something like the above code possible in the Asp Net Core version 2? I looked into `OnValidatePrincipal`, `IClaimsTransformation` implementations, but both of those don't fit my needs. Am I missing something here?\r\n\r\nThanks","Url":"https://github.com/aspnet/Identity/issues/1817","RelatedDescription":"Open issue \"Alternative to AuthenticationResponseGrant?\" (#1817)"},{"Id":"329261618","IsPullRequest":true,"CreatedAt":"2018-06-05T00:32:43","Actor":"HaoK","Number":"1816","RawContent":null,"Title":"Don't hook cancellation tokens by default","State":"open","Body":"Fixes https://github.com/aspnet/Identity/issues/1811\r\n\r\ncc @davidfowl @ajcvickers ","Url":"https://github.com/aspnet/Identity/pull/1816","RelatedDescription":"Open PR \"Don't hook cancellation tokens by default\" (#1816)"},{"Id":"328809133","IsPullRequest":false,"CreatedAt":"2018-06-04T18:09:50","Actor":"BrendanRidenour","Number":"1812","RawContent":null,"Title":"Identity UI's embedded static files will return 404s if app.UseStaticFiles() is passed a StaticFileOptions object.","State":"closed","Body":"**Is this a Bug or Feature request?**\r\n\r\nBug\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Create a new ASP.NET Core Web Application (2.1).\r\n2. Be sure Authentication is set to \"Individual User Accounts\".\r\n3. Run the app and navigate to the Register and Login pages. Everything works as expected so far.\r\n4. Stop the app.\r\n5. Delete the file at \"Areas/Identity/Pages/_ViewStart.cshtml\". This will force Identity to use its default layout page (with links to embedded static files).\r\n6. Now open Startup.cs and change `app.UseStaticFiles();` to `app.UseStaticFiles(new StaticFileOptions());`.\r\n7. Run the app again (**with browser cache disabled**) and navigate back to the Register and Login pages. All the embedded static files from Identity’s Default UI now return 404s.\r\n\r\n**Description of the problem:**\r\n\r\nAfter digging through the source code, I found the problem. Calling `app.UseStaticFiles()` in Startup.cs with no options parameter works as expected because the registered `IPostConfigureOptions<StaticFileOptions>` instances get called correctly.\r\n\r\nHowever, if you call `app.UseStaticFiles(staticFileOptions);` with an options argument, that instance gets passed into the `StaticFileMiddleware` directly (which is obviously by design). Unfortunately, that also means that any registered `IPostConfigureOptions<StaticFileOptions>` will NOT be called, including Identity UI’s `IdentityDefaultUIConfigureOptions` class.\r\n\r\n`IdentityDefaultUIConfigureOptions` is the class that adds the `ManifestEmbeddedFileProvider` and `CompositeFileProvider` to the StaticFileOptions object. But if its `PostConfigure(name, staticFileOptions)` method is never called, those embedded files are not found and everything 404s at runtime.","Url":"https://github.com/aspnet/Identity/issues/1812","RelatedDescription":"Closed issue \"Identity UI's embedded static files will return 404s if app.UseStaticFiles() is passed a StaticFileOptions object.\" (#1812)"},{"Id":"329074459","IsPullRequest":false,"CreatedAt":"2018-06-04T14:15:27","Actor":"serpent5","Number":"1815","RawContent":null,"Title":"Customise/Disable the Default UI's Area Name","State":"open","Body":"Before the Default UI was introduced (pre 2.1), generated projects that included ASP.NET Core Identity were configured to serve Identity-specific endpoints at e.g. /Account/Login. With the new Default UI, this is now e.g. /Identity/Account/Login. Both the existence of an Area and its default name appear to be hardcoded (as `IdentityUIDefaultAreaName` in the source code) with no option to override.","Url":"https://github.com/aspnet/Identity/issues/1815","RelatedDescription":"Open issue \"Customise/Disable the Default UI's Area Name\" (#1815)"},{"Id":"328876330","IsPullRequest":false,"CreatedAt":"2018-06-04T00:26:21","Actor":"natelaff","Number":"1813","RawContent":null,"Title":"UserRoles in DefaultIdentity","State":"open","Body":"Surely I'm missing something easy? Or was it really made this complicated?\r\n\r\nIf you use AddDefaultIdentity no UserRoleStore gets created? So you can't use roles at all. Why? If you switch back to AddIdentity then you have to deal reintegrating everything such as login paths, razor page authentication, etc..\r\n","Url":"https://github.com/aspnet/Identity/issues/1813","RelatedDescription":"Open issue \"UserRoles in DefaultIdentity\" (#1813)"},{"Id":"328695398","IsPullRequest":false,"CreatedAt":"2018-06-02T00:21:51","Actor":"HaoK","Number":"1811","RawContent":null,"Title":"Remove cancellation token hookup for RequestAborted","State":"open","Body":"Per @davidfowl request, we should remove the logic in the managers that hook up the cancellation tokens for 2.2\r\n\r\nhttps://github.com/aspnet/Identity/blob/dev/src/Identity/AspNetUserManager.cs#L45\r\n\r\nany objects @ajcvickers @blowdart ?","Url":"https://github.com/aspnet/Identity/issues/1811","RelatedDescription":"Open issue \"Remove cancellation token hookup for RequestAborted\" (#1811)"},{"Id":"328571273","IsPullRequest":false,"CreatedAt":"2018-06-01T15:49:59","Actor":"kinosang","Number":"1810","RawContent":null,"Title":"[feature request] user activity","State":"open","Body":"I saw #106, #650, #1278, and #1281\r\n\r\nOne year passed, is there any plan for the account activity feature?\r\n\r\nOr if the schema changes have been done and the project is ready for the activity feature with a pull request?","Url":"https://github.com/aspnet/Identity/issues/1810","RelatedDescription":"Open issue \"[feature request] user activity\" (#1810)"},{"Id":"325905373","IsPullRequest":false,"CreatedAt":"2018-06-01T12:39:03","Actor":"MetalBreaker","Number":"1804","RawContent":null,"Title":"Role being cached for too long","State":"closed","Body":"### Roles are cached for too long\r\nSo, I wanted to create an admin-only panel. That's all fine and dandy, and the mechanism ended up working. However, ASP.NET Core caches the role for too long (at first I thought it was my code), and if I add or remove the role, I have to either log out and then log back in or wait around ~10 minutes (don't quote me on that) for the admin-only panel to appear/disappear. It's very annoying.\r\n\r\n### Functional impact\r\nIf an admin gets demoted for abusing their powers, they will still have admin powers on the website until the cached role resets.\r\n\r\n### Minimal repro steps\r\n1. I'm using the current code:\r\n```\r\n@page\r\n@model App.Pages.Account.Manage.AdminPanelModel\r\n@{\r\n    ViewData[\"Title\"] = \"AdminPanel\";\r\n    var isAdmin = User.IsInRole(\"Admin\");\r\n}\r\n\r\n@if (isAdmin)\r\n{\r\n    <h2>Hello, fellow administrator.</h2>\r\n     //WIP\r\n}\r\nelse\r\n{\r\n    Response.StatusCode = (int)Microsoft.AspNetCore.Http.StatusCodes.Status401Unauthorized;\r\n    <h2>You are not authorized.</h2>\r\n}\r\n``` \r\nand creating the Admin role in Startup using RoleManager.\r\n2. Try adding/removing the role to/from the user.\r\nIf it's added to the user, the admin panel should pop up immediately.\r\nIf it's removed from the user, the admin panel should disappear.\r\n\r\n### Expected result\r\nChanges should be effective almost immediately.\r\n\r\n### Actual result\r\nChanges take a lot of time to go into effect.","Url":"https://github.com/aspnet/Identity/issues/1804","RelatedDescription":"Closed issue \"Role being cached for too long\" (#1804)"},{"Id":"327472080","IsPullRequest":false,"CreatedAt":"2018-05-30T18:16:12","Actor":"krijnm","Number":"1806","RawContent":null,"Title":"FindByIdAsync vs FindByNameAsync","State":"closed","Body":"I have noticed a difference in implementation between FindByIdAsync and FindByNameAsync.\r\n\r\nFindByIdAsync executes UsersSet.FindAsync(new object[] { id },.. which will attach and track the user, if found. FindByNameAsync uses the DbSet IQueryable method Users.FirstOrDefaultAsync(u => u.NormalizedUserName == normalizedUserName, .. which does not track the user.\r\n\r\nThe flow UserManager => FindById + Update could  result in a crash -cannot be tracked because another instance with the same key value for {'ApplicationUserId'} is already being tracked ...\r\n\r\nThis is because the UserManager.UpdateAsync executes Context.Attach(user) without testing if the user is already present in the local storage: this.UsersSet.Local.Contains(user)\r\n\r\nNot because of above but issues with EF OwnsProperty property on ApplicationUser.","Url":"https://github.com/aspnet/Identity/issues/1806","RelatedDescription":"Closed issue \"FindByIdAsync vs FindByNameAsync\" (#1806)"},{"Id":"327814448","IsPullRequest":true,"CreatedAt":"2018-05-30T17:57:01","Actor":"natemcmaster","Number":"1808","RawContent":null,"Title":"[2.1.1] Update package versions","State":"closed","Body":null,"Url":"https://github.com/aspnet/Identity/pull/1808","RelatedDescription":"Closed or merged PR \"[2.1.1] Update package versions\" (#1808)"},{"Id":"327734711","IsPullRequest":false,"CreatedAt":"2018-05-30T13:37:23","Actor":"tatarincev","Number":"1807","RawContent":null,"Title":"RoleManager.UpdateRole caused  EF ChangeTracker already being tracked exception","State":"open","Body":"## Steps to reproduce:\r\n```\r\nvar trackedRole = await RoleManager.FindByNameAsync(\"admin\");\r\nvar nonTrackedRole = new Role { Id = trackedRole .Id, Name = trackedRole .Name };\r\nawait RoleManager.UpdateAsync(nonTrackedRole );\r\n```\r\nGot the exception\r\n`value for {'Id'} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.'`\r\n\r\n## Assumption \r\nI understand the main reason for this issue but have just wanted to clarify whether the team is going to do something about this?\r\n","Url":"https://github.com/aspnet/Identity/issues/1807","RelatedDescription":"Open issue \"RoleManager.UpdateRole caused  EF ChangeTracker already being tracked exception\" (#1807)"},{"Id":"325077519","IsPullRequest":true,"CreatedAt":"2018-05-29T20:53:59","Actor":"HaoK","Number":"1801","RawContent":null,"Title":"Add additional test assertions","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/1801","RelatedDescription":"Closed or merged PR \"Add additional test assertions\" (#1801)"},{"Id":"326860514","IsPullRequest":true,"CreatedAt":"2018-05-27T23:26:19","Actor":"hikalkan","Number":"1805","RawContent":null,"Title":"Allow to access internal methods of SignInManager from a derived class","State":"open","Body":"For a multi-tenant application, I need to override these methods.","Url":"https://github.com/aspnet/Identity/pull/1805","RelatedDescription":"Open PR \"Allow to access internal methods of SignInManager from a derived class\" (#1805)"},{"Id":"325394581","IsPullRequest":false,"CreatedAt":"2018-05-22T17:34:34","Actor":"kichalla","Number":"1803","RawContent":null,"Title":"Upgrade Identity UI to use 3.2.10 version of jquery unobtrusive scripts","State":"open","Body":"","Url":"https://github.com/aspnet/Identity/issues/1803","RelatedDescription":"Open issue \"Upgrade Identity UI to use 3.2.10 version of jquery unobtrusive scripts\" (#1803)"},{"Id":"325257254","IsPullRequest":false,"CreatedAt":"2018-05-22T11:44:33","Actor":"TETYYS","Number":"1802","RawContent":null,"Title":"Cannot create a DbSet for 'IdentityUserClaim<string>' because this type is not included in the model for the context","State":"open","Body":"`2.1.0-rc1-final` version throws `Cannot create a DbSet for 'IdentityUserClaim<string>' because this type is not included in the model for the context` exeption on `SignInManager<TUser>.PasswordSignInAsync`:\r\n\r\n```\r\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet<TEntity>.get_EntityType()\r\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet<TEntity>.get_EntityQueryable()\r\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet<TEntity>.System.Linq.IQueryable.get_Provider()\r\nSystem.Linq.Queryable.Where<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)\r\nMicrosoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim>.GetClaimsAsync(TUser user, CancellationToken cancellationToken)\r\nMicrosoft.AspNetCore.Identity.UserManager<TUser>.GetClaimsAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser>.GenerateClaimsAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>.GenerateClaimsAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser>.CreateAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.CreateUserPrincipalAsync(TUser user)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.SignInAsync(TUser user, AuthenticationProperties authenticationProperties, string authenticationMethod)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.SignInOrTwoFactorAsync(TUser user, bool isPersistent, string loginProvider, bool bypassTwoFactor)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.PasswordSignInAsync(TUser user, string password, bool isPersistent, bool lockoutOnFailure)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.PasswordSignInAsync(string userName, string password, bool isPersistent, bool lockoutOnFailure)\r\nProject.Controllers.AccountController.Login(LoginViewModel model, string returnUrl) in AccountController.cs\r\n+ var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, lockoutOnFailure: false);\r\nMicrosoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+TaskOfIActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, object controller, object[] arguments)\r\nSystem.Threading.Tasks.ValueTask<TResult>.get_Result()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Localization.RequestLocalizationMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n```\r\n\r\nIssue does not occur on Windows, but occurs on Linux (both using Kestrel), downgrading to current stable version solves the issue.\r\n\r\nFailing:\r\n```\r\n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.1.0-rc1-final\" />\r\n<PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.1.0-rc1-final\" />\r\n```\r\nPassing:\r\n```\r\n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n<PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.3\" />\r\n```","Url":"https://github.com/aspnet/Identity/issues/1802","RelatedDescription":"Open issue \"Cannot create a DbSet for 'IdentityUserClaim<string>' because this type is not included in the model for the context\" (#1802)"},{"Id":"324858121","IsPullRequest":false,"CreatedAt":"2018-05-21T22:17:43","Actor":"kamilwattoo","Number":"1799","RawContent":null,"Title":"Unusual behavior when implementing IUserSecurityStampStore","State":"closed","Body":"I am implementing Custom Stores without Entity Framework. But there seems to be a problem because `UserManager` always changes `SecurityStamp` prior to calling `IUserStore.Update`. Which results in failing of `IUserStore.Update` because persisted `SecurityStamp` and Current Security Stamp do not match. This behavior forces implementation of Custom Stores to use Entity Framework or some other equivalent ORM. Setting new `SecurityStamp` should be responsibility of `IUserStore.Update` and `IUserStore.Create`. Is this behavior by design?\r\n","Url":"https://github.com/aspnet/Identity/issues/1799","RelatedDescription":"Closed issue \"Unusual behavior when implementing IUserSecurityStampStore\" (#1799)"},{"Id":"324961314","IsPullRequest":false,"CreatedAt":"2018-05-21T15:36:19","Actor":"adams-hub","Number":"1800","RawContent":null,"Title":"Identity errors not displayed properly when using UseStatusCodePagesWithReExecute","State":"open","Body":"When using UseStatusCodePagesWithReExecute, custom error StatusCodes like those found in GenerateRecoveryCodes.cshtml.cs do not display using the route as defined by UseStatusCodePagesWithReExecute  in the startup config.\r\n\r\nEg. `return NotFound($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");` \r\n\r\nRetuning a `StatusCode(404)` without an object displays fine in the custom error layout, but when returned with an object like `StatusCode(404, \"Custom message...\")`, it's returned as a string result.","Url":"https://github.com/aspnet/Identity/issues/1800","RelatedDescription":"Open issue \"Identity errors not displayed properly when using UseStatusCodePagesWithReExecute\" (#1800)"}],"ResultType":"GitHubIssue"},"Kestrel-Issues":{"Issues":[{"Id":"331324804","IsPullRequest":true,"CreatedAt":"2018-06-11T23:43:34","Actor":"halter73","Number":"2660","RawContent":null,"Title":"React to aspnet/BuildTools#684","State":"closed","Body":"This should fix the travis linux builds.\r\n\r\naspnet/BuildTools#684","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2660","RelatedDescription":"Closed or merged PR \"React to aspnet/BuildTools#684\" (#2660)"},{"Id":"331379392","IsPullRequest":false,"CreatedAt":"2018-06-11T22:58:16","Actor":"Tratcher","Number":"2661","RawContent":null,"Title":"Surface TLS handshake results as IFeature","State":"open","Body":"Related: https://github.com/aspnet/HttpSysServer/issues/83\r\n\r\nWhen the handshake completes it can be interesting to see what was agreed to. E.g. What algorithms were negotiated, what's their strength, etc..  SslStream exposes these as properties that are populated after the handshake.\r\n\r\nSee https://msdn.microsoft.com/en-us/library/system.net.security.sslstream(v=vs.110).aspx\r\n\r\nNeeded for https://github.com/aspnet/KestrelHttpServer/issues/2251","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2661","RelatedDescription":"Open issue \"Surface TLS handshake results as IFeature\" (#2661)"},{"Id":"329560884","IsPullRequest":false,"CreatedAt":"2018-06-11T21:34:22","Actor":"Tratcher","Number":"2651","RawContent":null,"Title":"H2Spec ArgumentOutOfRangeException ","State":"closed","Body":"This happens on h2spec (v2.1) test http2/4.2 and the test hangs afterwards. Repros with and without TLS.\r\n```\r\ncrit: Microsoft.AspNetCore.Server.Kestrel[0]\r\n      Unexpected exception in HttpConnection.ProcessRequestsAsync.\r\nSystem.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\r\n   at System.Span`1..ctor(T[] array, Int32 start, Int32 length)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Frame.get_Raw() in D:\\github\\AspNet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http2\\Http2Frame.cs:line 22\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2FrameReader.ReadFrame(ReadOnlySequence`1 readableBuffer, Http2Frame frame, SequencePosition& consumed, SequencePosition& examined) in D:\\github\\AspNet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http2\\Http2FrameReader.cs:line 23\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection.ProcessRequestsAsync[TContext](IHttpApplication`1 application) in D:\\github\\AspNet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http2\\Http2Connection.cs:line 160\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection.ProcessRequestsAsync[TContext](IHttpApplication`1 application) in D:\\github\\AspNet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\Http2\\Http2Connection.cs:line 221\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection.ProcessRequestsAsync[TContext](IHttpApplication`1 httpApplication) in D:\\github\\AspNet\\KestrelHttpServer\\src\\Kestrel.Core\\Internal\\HttpConnection.cs:line 185\r\ndbug: Microsoft.AspNetCore.Server.Kestrel[2]\r\n      Connection id \"0HLEB1F2PS7B8\" stopped.\r\n```\r\n\r\nNote this is most visible when running the full h2spec test suite from the command line against the http/2 sample app. Running the individual test cases from VS does not hang.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2651","RelatedDescription":"Closed issue \"H2Spec ArgumentOutOfRangeException \" (#2651)"},{"Id":"330491888","IsPullRequest":true,"CreatedAt":"2018-06-11T21:33:59","Actor":"Tratcher","Number":"2656","RawContent":null,"Title":"Enforce max frame size ","State":"closed","Body":"#2651 The MaxFrameSize setting wasn't being enforced so instead you'd get an ArgumentOutOfRangeException for frames larger than the buffer. The h2spec test 4.2 found this, but it wasn't actually failing because the exception was still handled and terminated the connection, only with the wrong http2 error.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2656","RelatedDescription":"Closed or merged PR \"Enforce max frame size \" (#2656)"},{"Id":"329542022","IsPullRequest":true,"CreatedAt":"2018-06-11T20:51:56","Actor":"Tratcher","Number":"2650","RawContent":null,"Title":"Disable AllowRenegotiation for HTTP/2","State":"closed","Body":"#2251 This is a spec requirement.\r\n\r\nI can't directly test it because SslStream doesn't have a client API to trigger a renegotiate. I added a test to ensure this didn't regress 1.1 client certs since renegotiation is often used to request optional client certs. We'll have to figure out http2 functional tests before I can write a http2 client cert test.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2650","RelatedDescription":"Closed or merged PR \"Disable AllowRenegotiation for HTTP/2\" (#2650)"},{"Id":"330461750","IsPullRequest":true,"CreatedAt":"2018-06-11T18:02:42","Actor":"ryanbrandenburg","Number":"2655","RawContent":null,"Title":"Adding VSTS file","State":"closed","Body":null,"Url":"https://github.com/aspnet/KestrelHttpServer/pull/2655","RelatedDescription":"Closed or merged PR \"Adding VSTS file\" (#2655)"},{"Id":"331267177","IsPullRequest":false,"CreatedAt":"2018-06-11T16:47:38","Actor":"Tratcher","Number":"2659","RawContent":null,"Title":"Http2Stream.TryParseRequest needs to be able to respond with stream errors","State":"open","Body":"Http2Stream.TryParseRequest is where the basic request fields like method, scheme, path, etc. are validated. Per https://tools.ietf.org/html/rfc7540#section-8.1.2.6 and https://tools.ietf.org/html/rfc7540#section-5.4.2 if anythings wrong then the server should send back a RST_STREAM frame with PROTOCOL_ERROR.\r\n\r\nCurrent failures are reported via BadHttpRequestException, which HttpProtocol.ProcessRequestsAsync catches and turns into a 400 response. This is allowed: \"server MAY send an HTTP response prior to\r\n   closing or resetting the stream\", but this doesn't result in the expected RST_STREAM frame that would tell the client not to send the body.\r\n\r\nRelated:\r\n- https://github.com/aspnet/KestrelHttpServer/issues/2154 h2spec failure http2/8.1.2.3/1\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2659","RelatedDescription":"Open issue \"Http2Stream.TryParseRequest needs to be able to respond with stream errors\" (#2659)"},{"Id":"331035724","IsPullRequest":false,"CreatedAt":"2018-06-11T03:37:47","Actor":"zuosc","Number":"2658","RawContent":null,"Title":" Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException: Error -107 ENOTCONN socket is not connected","State":"open","Body":"Error stack：\r\n\r\n```\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException: Error -107 ENOTCONN socket is not connected\r\nat Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.LibuvFunctions.ThrowError(Int32 statusCode)\r\nat Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.LibuvFunctions.tcp_getpeername(UvTcpHandle handle, SockAddr& addr, Int32& namelen)\r\nat Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvTcpHandle.GetPeerIPEndPoint()\r\nat Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvConnection..ctor(ListenerContext context, UvStreamHandle socket)\r\nat Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Listener.DispatchConnection(UvStreamHandle socket)\r\nat Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Listener.OnConnection(UvStreamHandle listenSocket, Int32 status)\r\n\r\n```\r\n\r\ndotnet --info:\r\n```\r\n.NET Command Line Tools (2.1.200)\r\n\r\nProduct Information:\r\n Version:            2.1.200\r\n Commit SHA-1 hash:  2edba8d7f1\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.200/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n```\r\n\r\n\r\nHow it works:\r\n\r\nIt's run with nginx.the nginx conf is:\r\n\r\n```\r\nserver {\r\n        listen 80;\r\n        server_name tmp.12**56.c**ud;\r\n\r\n    location / {\r\n        proxy_set_header   X-Real-IP $remote_addr;\r\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header   Host      $http_host;\r\n        proxy_pass         http://1**.1**.2**.3*:12758/;\r\n    }\r\n}\r\n\r\n\r\nserver {\r\n        # SSL configuration\r\n\r\n        listen 443 ssl;\r\n        listen [::]:443 ssl;\r\n        ssl on;\r\n\r\n        server_name t*p.12***6.c****d;\r\n\r\n\r\n        ssl_certificate   /etc/nginx/***/fullchain.pem;\r\n        ssl_certificate_key  /etc/nginx/***/wildcard_123456cloud.pem;\r\n        ssl_session_timeout 5m;\r\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\r\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\r\n        ssl_prefer_server_ciphers on;\r\n\r\n        location / {\r\n                proxy_set_header   X-Real-IP $remote_addr;\r\n                proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\r\n                proxy_set_header   Host      $http_host;\r\n                proxy_pass         http://1**.1**.2**.3*:12758/;\r\n    }\r\n\r\n}\r\n\r\n```\r\n#Important#\r\n\r\nif I deploy the web  on local,then  the nginx conf:[proxy_pass] use  http://127.0.0.1:12758/: ,  everything is ok!\r\n\r\nbut if i deploy the web on remote server,and  the nginx conf:[proxy_pass] use http://1**.1**.2**.3*:12758/;  it's wrong with 'Error -107 ENOTCONN socket is not connected'\r\n\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2658","RelatedDescription":"Open issue \" Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException: Error -107 ENOTCONN socket is not connected\" (#2658)"},{"Id":"329269829","IsPullRequest":false,"CreatedAt":"2018-06-08T19:25:31","Actor":"smokedog2","Number":"2647","RawContent":null,"Title":"BadHttpRequestException: Invalid request target: '/?key=\\xD6\\xD0\\xCE\\xC4'","State":"closed","Body":"`[09:10:02 INF] Connection id \"0HLEAFUMLUVR5\" bad request data: \"Invalid request target: '/?key=\\xD6\\xD0\\xCE\\xC4'\"\r\nMicrosoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Invalid request target: '/?key=\\xD6\\xD0\\xCE\\xC4'\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.ThrowRequestTargetRejected(Span`1 target)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.OnOriginFormTarget(HttpMethod method, HttpVersion version, Span`1 target, Span`1 path, Span`1 query, Span`1 customMethod, Boolean pathEncoded)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.OnStartLine(HttpMethod method, HttpVersion version, Span`1 target, Span`1 path, Span`1 query, Span`1 customMethod, Boolean pathEncoded)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1.ParseRequestLine(TRequestHandler handler, Byte* data, Int32 length)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1.ParseRequestLine(TRequestHandler handler, ReadableBuffer buffer, ReadCursor& consumed, ReadCursor& examined)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.TakeStartLine(ReadableBuffer buffer, ReadCursor& consumed, ReadCursor& examined)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame.ParseRequest(ReadableBuffer buffer, ReadCursor& consumed, ReadCursor& examined)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()`\r\n\r\nAn error occurred If the url contains Chinese in IE\r\n\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2647","RelatedDescription":"Closed issue \"BadHttpRequestException: Invalid request target: '/?key=\\xD6\\xD0\\xCE\\xC4'\" (#2647)"},{"Id":"330760115","IsPullRequest":false,"CreatedAt":"2018-06-08T18:31:30","Actor":"Tratcher","Number":"2657","RawContent":null,"Title":"Application code can block http2 frame processing loop","State":"open","Body":"Http2 connections support multiplexing with multiple parallel streams. There's one central loop per connection that reads incoming frames and dispatches them to the correct stream. However that dispatch does not force a thread hop, so if the app code blocks synchronously then the frame loop won't continue.\r\n\r\nThis is what happens when you put a break point in Run in the sample app:\r\n\r\n```\r\n \tHttp2SampleApp.dll!Http2SampleApp.Startup.Configure.AnonymousMethod__1_0(Microsoft.AspNetCore.Http.HttpContext context) Line 19\tC#\r\n \tMicrosoft.AspNetCore.Hosting.dll!Microsoft.AspNetCore.Hosting.Internal.HostingApplication.ProcessRequestAsync(Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context context)\tUnknown\r\n \tMicrosoft.AspNetCore.Server.Kestrel.Core.dll!Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context>(Microsoft.AspNetCore.Hosting.Server.IHttpApplication<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context> application) Line 553\tC#\r\n \tMicrosoft.AspNetCore.Server.Kestrel.Core.dll!Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequestsAsync<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context>(Microsoft.AspNetCore.Hosting.Server.IHttpApplication<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context> application) Line 464\tC#\r\n \tMicrosoft.AspNetCore.Server.Kestrel.Core.dll!Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection.StartStream<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context>(Microsoft.AspNetCore.Hosting.Server.IHttpApplication<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context> application) Line 674\tC#\r\n \tMicrosoft.AspNetCore.Server.Kestrel.Core.dll!Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection.DecodeHeadersAsync<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context>(Microsoft.AspNetCore.Hosting.Server.IHttpApplication<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context> application, bool endHeaders, System.Span<byte> payload) Line 635\tC#\r\n \tMicrosoft.AspNetCore.Server.Kestrel.Core.dll!Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection.ProcessHeadersFrameAsync<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context>(Microsoft.AspNetCore.Hosting.Server.IHttpApplication<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context> application) Line 423\tC#\r\n \tMicrosoft.AspNetCore.Server.Kestrel.Core.dll!Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection.ProcessFrameAsync<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context>(Microsoft.AspNetCore.Hosting.Server.IHttpApplication<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context> application) Line 266\tC#\r\n>\tMicrosoft.AspNetCore.Server.Kestrel.Core.dll!Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection.ProcessRequestsAsync<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context>(Microsoft.AspNetCore.Hosting.Server.IHttpApplication<Microsoft.AspNetCore.Hosting.Internal.HostingApplication.Context> application) Line 163\tC#\r\n```\r\n\r\nData frames likely don't have this issue because they're shunted through a Pipe which should force offloads between writer and reader (?).","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2657","RelatedDescription":"Open issue \"Application code can block http2 frame processing loop\" (#2657)"},{"Id":"330450502","IsPullRequest":true,"CreatedAt":"2018-06-08T01:51:46","Actor":"Tratcher","Number":"2654","RawContent":null,"Title":"Harden TFM checks","State":"closed","Body":"#2624 This avoids regressions when the project TFMs change.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2654","RelatedDescription":"Closed or merged PR \"Harden TFM checks\" (#2654)"},{"Id":"330410502","IsPullRequest":true,"CreatedAt":"2018-06-07T19:46:27","Actor":"Tratcher","Number":"2653","RawContent":null,"Title":"[WIIP] Automation for h2spec functional tests ","State":"open","Body":"#2640 These won't pass on the CI yet because we still need to work out the acquisition mechanism for the h2spec binaries. The test code should be reviewable though.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2653","RelatedDescription":"Open PR \"[WIIP] Automation for h2spec functional tests \" (#2653)"},{"Id":"330178125","IsPullRequest":false,"CreatedAt":"2018-06-07T16:13:29","Actor":"qqbuby","Number":"2652","RawContent":null,"Title":"System.ObjectDisposedException: Cannot access a disposed object. Object name: 'MemoryPoolBlock'","State":"closed","Body":"```txt\r\n2018/06/07 04:47:53 +00:00 [Error].[Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets].[].[]\r\nUnexpected exception in SocketConnection.StartAsync. System.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'MemoryPoolBlock'.\r\n   at System.Buffers.ThrowHelper.ThrowObjectDisposedException(ExceptionArgument argument)\r\n   at System.Buffers.MemoryPoolBlock.Dispose()\r\n   at System.IO.Pipelines.BufferSegment.ResetMemory()\r\n   at System.IO.Pipelines.Pipe.CompletePipe()\r\n   at System.IO.Pipelines.Pipe.CompleteWriter(Exception exception)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeWriter.Complete(Exception exception)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoReceive()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.StartAsync(IConnectionDispatcher connectionDispatcher)\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2652","RelatedDescription":"Closed issue \"System.ObjectDisposedException: Cannot access a disposed object. Object name: 'MemoryPoolBlock'\" (#2652)"},{"Id":"329523704","IsPullRequest":false,"CreatedAt":"2018-06-05T16:02:24","Actor":"Tratcher","Number":"2649","RawContent":null,"Title":"Http/2 support for HTTP_1_1_REQUIRED","State":"open","Body":"https://tools.ietf.org/html/rfc7540#section-7\r\n   HTTP_1_1_REQUIRED (0xd):  The endpoint requires that HTTP/1.1 be use instead of HTTP/2.\r\n\r\nThis may require a public API for the application to request a downgrade. E.g. If you go to a websocket endpoint over http/2. Windows auth is another scenario. Any other use cases? \r\n\r\nSending a 400 Bad Request is the workaround. ","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2649","RelatedDescription":"Open issue \"Http/2 support for HTTP_1_1_REQUIRED\" (#2649)"},{"Id":"329444450","IsPullRequest":false,"CreatedAt":"2018-06-05T12:57:57","Actor":"baal2000","Number":"2648","RawContent":null,"Title":"Server unexpectedly returns http status 200 (OK) with empty content in release 2.1.0","State":"open","Body":"@halter73 \r\nAfter upgrading from AspNetCore NuGet package **2.1.0-rc1-final** to **2.1.0-rtm-30787** that [differ](https://github.com/aspnet/KestrelHttpServer/compare/2.1.0-rc1-final...da21fc8) slightly with #2533 and #2562 we noticed instances of 200 server responses containing empty content. This behavior messes with JSON-RPC client functionality. The behavior is intermittent in our production environment. We can not reliably reproduce (i.e. trigger in a controllable manner). \r\n\r\nIn our view the change to optional `_streams?.Abort` in https://github.com/aspnet/KestrelHttpServer/pull/2533/commits/6e003d8847040c2c64cb41f0d87bf6c825548ccf\r\n\r\n```\r\n            if (error != null)\r\n            {\r\n                 _streams?.Abort(error);\t             \r\n            }\r\n```\r\ncould have had wider effect than for WebSocket connections only.\r\n\r\nThe issue #2530 mentions #2533 may or may not be similar and we are not sure about the timing wither it preceded or followed the change.\r\n\r\nNote that HttpProtocol.Abort in [dev branch](https://github.com/aspnet/KestrelHttpServer/blob/dev/src/Kestrel.Core/Internal/Http/HttpProtocol.cs) has remained untouched v.s. [release/2.1](https://github.com/aspnet/KestrelHttpServer/blob/release/2.1/src/Kestrel.Core/Internal/Http/HttpProtocol.cs) leaving `_streams?.Abort` non-optional. It has been changed in #2612 but essentially remained intact.\r\n\r\nIs this (the empty response symptom and the differences between the branches) something that you can give some insight or there is a duplicate issue I missed? \r\n\r\nThanks.  ","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2648","RelatedDescription":"Open issue \"Server unexpectedly returns http status 200 (OK) with empty content in release 2.1.0\" (#2648)"},{"Id":"329161253","IsPullRequest":true,"CreatedAt":"2018-06-05T03:10:41","Actor":"Tratcher","Number":"2644","RawContent":null,"Title":"React to Uri scope break","State":"closed","Body":"Followup to https://github.com/aspnet/Common/pull/369\r\nSystem.Uri.ToString now includes the scope id which these tests did not want. Filter it out.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2644","RelatedDescription":"Closed or merged PR \"React to Uri scope break\" (#2644)"},{"Id":"329210617","IsPullRequest":false,"CreatedAt":"2018-06-05T02:14:33","Actor":"rezvanf","Number":"2645","RawContent":null,"Title":"Http Post not recognized on Linux (ASP .NET Core 2.0)","State":"closed","Body":"The below is my class and web method signature (note all these web methods work perfectly on Windows 👍 )\r\n\r\n```\r\n[Route(\"api/[controller]\")]\r\npublic partial class TestController \r\n\r\n```\r\n\r\n```\r\n[HttpGet(\"{id}\")]\r\npublic async Task<IActionResult> Get(string id)\r\n```\r\n\r\n```\r\n[HttpPost]\r\npublic async Task<IActionResult> Post([FromBody]ProductInventory item)\r\n```\r\n\r\n```\r\n[HttpPost(\"bulk/BulkPost\")]\r\npublic async Task<IActionResult> BulkPost([FromBody]List<ProductInventory> data)\r\n\r\n```\r\n```\r\n[HttpPatch(\"{id}/attest/{attest}\")]\r\npublic async Task<IActionResult> Attest(string id, string attest, [FromBody]IDictionary<string, object> data)\r\n\r\n```\r\n```\r\n[HttpGet(\"view/{role}\")]\r\npublic IActionResult GetView(string role)\r\n```\r\n```\r\n\r\n[HttpGet(\"workflow/wording/{wording}\")]\r\npublic IActionResult GetWording(string wording)\r\n```\r\n\r\n```\r\n[HttpDelete(\"{id}\")]\r\npublic async Task<IActionResult> Delete(string id)\r\n```\r\n\r\n```\r\n[HttpPatch]\r\npublic async Task<IActionResult> Patch([FromBody]IDictionary<string, object> data)\r\n```\r\n\r\n```\r\n[HttpPatch(\"{id}\")]\r\npublic async Task<IActionResult> Patch(string id, [FromBody]IDictionary<string, object> data)\r\n```\r\n\r\n```\r\n[HttpGet(\"entitlements/{objectId}\")]\r\npublic IActionResult GetEntitlements(string objectId)\r\n```\r\n```\r\n\r\n[HttpGet(\"chorus/{dummy}\")]\r\npublic IActionResult GetChorus(string dummy)\r\n```\r\n\r\n```\r\n[HttpPatch(\"{id}/review/{review}\")]\r\npublic async Task<IActionResult> Review(string id, string review, [FromBody]IDictionary<string, object> data)\r\n```\r\n\r\nWhen I do a post on the API with the following \r\n\r\nhttp://servername/api/test\r\n\r\nI get a 404\r\n\r\nWhen I include the following method in the API and do a POST it gets called.\r\n\r\n```\r\n[HttpGet]\r\nPublic async Task<IActionResult> Get([FromQuery]int page = 1, [FromQuery]int pageSize = 100, [FromQuery]bool isCsvExport = false)\r\n\r\n```\r\nIs there a reason why the routing is different to windows and Linux and what is the solution to this problem please as it is not clear the reason for the behaviour?\r\n\r\nThanks","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2645","RelatedDescription":"Closed issue \"Http Post not recognized on Linux (ASP .NET Core 2.0)\" (#2645)"},{"Id":"329258467","IsPullRequest":true,"CreatedAt":"2018-06-05T00:12:14","Actor":"halter73","Number":"2646","RawContent":null,"Title":"Improve tracking of connection lifetime","State":"open","Body":"I haven't seen this cause any issues in practice, but the following sample shows why the way we're currently tracking connection lifetimes is at least theoretically bad. I know we also want to start tracking non-HTTP connections. This PR doesn't do that, but I think we should still take this change in the meantime.\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Concurrent;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConnectionManagerRace\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var manager = new ConnectionManager();\r\n            Task.Run(() => StartConnections(100, manager));\r\n            Thread.Sleep(500);\r\n            manager.CloseAllConnectionsAsync().Wait();\r\n        }\r\n\r\n        public static void StartConnections(int count, ConnectionManager manager)\r\n        {\r\n            for (var i = 0; i < count; i++)\r\n            {\r\n                var conn = new Connection(manager);\r\n                conn.StartRequestProcessing();\r\n            }\r\n        }\r\n    }\r\n\r\n    public class ConnectionManager\r\n    {\r\n        private readonly ConcurrentDictionary<long, Connection> _connections = new ConcurrentDictionary<long, Connection>();\r\n        private long _lastId = 0;\r\n\r\n        public void Add(Connection conn)\r\n        {\r\n            _connections.TryAdd(Interlocked.Increment(ref _lastId), conn);\r\n        }\r\n\r\n        public async Task CloseAllConnectionsAsync()\r\n        {\r\n            var closeTasks = new List<Task>();\r\n\r\n            foreach (var pair in _connections)\r\n            {\r\n                closeTasks.Add(pair.Value.StopProcessingNextRequestAsync());\r\n            }\r\n\r\n            await Task.WhenAll(closeTasks);\r\n        }\r\n    }\r\n\r\n    public class Connection\r\n    {\r\n        private readonly ConnectionManager _manager;\r\n        private Task _lifetimeTask;\r\n\r\n        public Connection(ConnectionManager manager)\r\n        {\r\n            _manager = manager;\r\n        }\r\n\r\n        public Task StartRequestProcessing()\r\n        {\r\n            return _lifetimeTask = ProcessRequestsAsync();\r\n        }\r\n\r\n        public async Task ProcessRequestsAsync()\r\n        {\r\n            _manager.Add(this);\r\n            Thread.Sleep(1000);\r\n            await Task.Delay(1000);\r\n        }\r\n\r\n        public Task StopProcessingNextRequestAsync()\r\n        {\r\n            return _lifetimeTask;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhich results in:\r\n\r\n```\r\nConnectionManagerRace> dotnet run\r\n\r\nUnhandled Exception: System.AggregateException: One or more errors occurred. (The tasks argument included a null value.\r\nParameter name: tasks) ---> System.ArgumentException: The tasks argument included a null value.\r\nParameter name: tasks\r\n   at System.Threading.Tasks.Task.WhenAll(IEnumerable`1 tasks)\r\n   at ConnectionManagerRace.ConnectionManager.CloseAllConnectionsAsync() in G:\\dev\\halter73\\ConnectionManagerRace\\Program.cs:line 48\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait()\r\n   at ConnectionManagerRace.Program.Main(String[] args) in G:\\dev\\halter73\\ConnectionManagerRace\\Program.cs:line 16\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2646","RelatedDescription":"Open PR \"Improve tracking of connection lifetime\" (#2646)"},{"Id":"328632113","IsPullRequest":false,"CreatedAt":"2018-06-04T22:06:56","Actor":"shirhatti","Number":"2639","RawContent":null,"Title":"http/2: Add support for prior knowledge http/2 connections","State":"closed","Body":"","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2639","RelatedDescription":"Closed issue \"http/2: Add support for prior knowledge http/2 connections\" (#2639)"},{"Id":"329003445","IsPullRequest":false,"CreatedAt":"2018-06-04T10:46:47","Actor":"smartcodinghub","Number":"2643","RawContent":null,"Title":"BadHttpRequestException: Request body too large causes an ERR_CONNECTION_RESET","State":"open","Body":"Hi all,\r\n\r\nWhen I try to upload a file bigger than my [RequestSizeLimit(10_000_000)] it goes through all the pipeline but it wasn't being redirected by the ExceptionHandler middleware. After a bit of investigation, the Exception Handler goes well but the connection gets reset.\r\n\r\nI'm using .Net Core 2.1. Pipeline:\r\n\r\n```\r\nif(env.IsDevelopment())\r\n{\r\n    app.UseDeveloperExceptionPage();\r\n    app.UseExceptionHandler(\"/Home/Error\");\r\n}\r\nelse\r\n{\r\n    app.UseExceptionHandler(\"/Home/Error\");\r\n}\r\n\r\n/* Caching */\r\napp.UseResponseCompression();\r\n\r\n/* Static files and resource */\r\napp.UseDefaultFiles();\r\napp.UseStaticFiles(new StaticFileOptions\r\n{\r\n    OnPrepareResponse = ctx =>\r\n    {\r\n        const string header = \"public,max-age=3600\";// An hour\r\n        ctx.Context.Response.Headers[HeaderNames.CacheControl] = header;\r\n    }\r\n});\r\n\r\n/* Authentication */\r\napp.UseAuthentication();\r\n\r\napp.UseSession();\r\n\r\n/* Mvc */\r\napp.UseMvcWithDefaultRoute();\r\n```\r\n\r\nMy method is decorated with:\r\n\r\n```\r\n[HttpPost]\r\n[ValidateAntiForgeryToken]\r\n[RequestSizeLimit(10_000_000)]\r\n```\r\n\r\nAm I doing something wrong or is it a bug?","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2643","RelatedDescription":"Open issue \"BadHttpRequestException: Request body too large causes an ERR_CONNECTION_RESET\" (#2643)"},{"Id":"328819326","IsPullRequest":false,"CreatedAt":"2018-06-04T00:48:25","Actor":"san-sei","Number":"2642","RawContent":null,"Title":"Kestrel works very slow when it is operating under IIS","State":"closed","Body":"We are facing a strange problem with using Kestrel under IIS in which some operations (e.g. getting access CA- [CertEnrolllib ](https://msdn.microsoft.com/en-us/library/windows/desktop/aa374850(v=vs.85).aspx)) take about 100 sec processing time to be complete.\r\nPlease note that everything works well with using IIS Express and also [http.sys](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys?view=aspnetcore-2.1) (instead of IIS) where every operation takes maximum 5 seconds to be complete.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2642","RelatedDescription":"Closed issue \"Kestrel works very slow when it is operating under IIS\" (#2642)"},{"Id":"328589464","IsPullRequest":false,"CreatedAt":"2018-06-01T21:41:23","Actor":"Tratcher","Number":"2637","RawContent":null,"Title":"Failing test AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success","State":"closed","Body":"http://aspnetci/viewLog.html?buildId=479149&tab=buildResultsDiv&buildTypeId=Lite_KestrelStressTest#testNameId3749291059822545939\r\n\r\nThis is a recent regression on netcoreapp2.2. net461 is not affected. .NET Core likely changed something with System.URI and IPv6 ScopeIds\r\n\r\nPossibly picked up by https://github.com/aspnet/Universe/pull/1184#issuecomment-393931025.\r\n\r\n```\r\n======= Failed test run #1 ==========\r\nSystem.Net.Http.HttpRequestException : Response status code does not indicate success: 400 (Bad Request).\r\n   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.ReadResponse(Stream stream)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetStringAsync(Uri requestUri, Boolean validateCertificate)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetStringAsync(String requestUri, Boolean validateCertificate)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_Success(String addressInput, String[] testUrls, Int32 testPort) in /_/test/Kestrel.FunctionalTests/AddressRegistrationTests.cs:line 170\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success(String addressInput, String testUrl) in /_/test/Kestrel.FunctionalTests/AddressRegistrationTests.cs:line 139\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test RegisterAddresses_IPv6ScopeId_Success-http://[fe80::9dee:e4c1:f54b:bf7f%14]:0/-http://[fe80::9dee:e4c1:f54b:bf7f%14] at 2018-06-01T05:13:25\r\n| [0.004s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.005s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [0.005s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Sockets.FunctionalTests\r\n| [0.006s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLE7FPI6L76O\" started.\r\n| [0.007s] Microsoft.AspNetCore.Server.Kestrel Information: Connection id \"0HLE7FPI6L76O\" bad request data: \"Invalid Host header: '[fe80::9dee:e4c1:f54b:bf7f%14]:58197'\"\r\n| Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Invalid Host header: '[fe80::9dee:e4c1:f54b:bf7f%14]:58197'\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException.Throw(RequestRejectionReason reason, String detail) in /_/src/Kestrel.Core/BadHttpRequestException.cs:line 129\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.ValidateIPv6Host(String hostText) in /_/src/Kestrel.Core/Internal/Infrastructure/HttpUtilities.cs:line 488\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1Connection.EnsureHostHeaderExists() in /_/src/Kestrel.Core/Internal/Http/Http1Connection.cs:line 394\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1Connection.TryParseRequest(ReadResult result, Boolean& endConnection) in /_/src/Kestrel.Core/Internal/Http/Http1Connection.cs:line 520\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application) in /_/src/Kestrel.Core/Internal/Http/HttpProtocol.cs:line 519\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequestsAsync[TContext](IHttpApplication`1 application) in /_/src/Kestrel.Core/Internal/Http/HttpProtocol.cs:line 455\r\n| [0.011s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLE7FPI6L76O\" disconnecting.\r\n| [0.011s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLE7FPI6L76O\" sending FIN.\r\n| [0.012s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLE7FPI6L76O\" stopped.\r\n| [0.012s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n| [0.016s] TestLifetime Information: Finished test RegisterAddresses_IPv6ScopeId_Success-http://[fe80::9dee:e4c1:f54b:bf7f%14]:0/-http://[fe80::9dee:e4c1:f54b:bf7f%14] in 0.0147831s\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2637","RelatedDescription":"Closed issue \"Failing test AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success\" (#2637)"},{"Id":"328646533","IsPullRequest":false,"CreatedAt":"2018-06-01T20:13:09","Actor":"wasabii","Number":"2641","RawContent":null,"Title":"BadHttpRequestException (encoding?)","State":"open","Body":"```\r\ninfo: Microsoft.AspNetCore.Server.Kestrel[17]\r\n      Connection id \"0HLE7VFNTA097\" bad request data: \"Invalid request line: 'PUT %2fLM%2fW3SVC%2f2%2fROOT(oXvpnxcuEWqKAgOETha32JavYZ6eCqrpTN5%2fHxWS854%3d)%2fk1im0mymglivv5rttkwn4fle HTTP/1.1\\x0D\\x0A'\"\r\nMicrosoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Invalid request line: 'PUT %2fLM%2fW3SVC%2f2%2fROOT(oXvpnxcuEWqKAgOETha32JavYZ6eCqrpTN5%2fHxWS854%3d)%2fk1im0mymglivv5rttkwn4fle HTTP/1.1\\x0D\\x0A'\r\n```\r\n\r\nDon't even ask me what I'm trying to get connecting. Weird old project that does a lot of stuff by hand.\r\n\r\nWhat's the deal with this though? The best I have is the encoding is odd. Maybe the `%2f` on the front?","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2641","RelatedDescription":"Open issue \"BadHttpRequestException (encoding?)\" (#2641)"},{"Id":"328634387","IsPullRequest":false,"CreatedAt":"2018-06-01T19:28:21","Actor":"shirhatti","Number":"2640","RawContent":null,"Title":"http/2: Create automation to run h2spec","State":"open","Body":"Initial goal is to create baseline automation and disable it on the CI.\r\nLook at what Websockets has done with Autobahn tests","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2640","RelatedDescription":"Open issue \"http/2: Create automation to run h2spec\" (#2640)"},{"Id":"328619140","IsPullRequest":false,"CreatedAt":"2018-06-01T18:33:20","Actor":"halter73","Number":"2638","RawContent":null,"Title":"MemoryPoolBlock.Dispose can throw and ODE during server shutdown leading to an error log from the Socket Transport ","State":"open","Body":"MemoryPoolBlock.Dispose() can throw and ODE (ironic I know) during server shutdown leading to an error log from the Socket Transport. Maybe we should to backport https://github.com/aspnet/Common/pull/344/files#diff-708aafde37872ea09e25cfadd4d95f0eL56\r\n\r\nThis was originally reported by @seanmars in https://github.com/aspnet/KestrelHttpServer/issues/2254#issuecomment-393830106:\r\n\r\n> When i ctrl+c to close the server it will get exception about \"Unexpected exception in SocketConnection.StartAsync\"\r\n\r\n> ```\r\n> Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets|Unexpected exception in SocketConnection.StartAsync\r\n> System.ObjectDisposedException: Cannot access a disposed object.\r\n> Object name: 'MemoryPoolBlock'.\r\n>    at System.Buffers.ThrowHelper.ThrowObjectDisposedException(ExceptionArgument argument)\r\n>    at System.Buffers.MemoryPoolBlock.Dispose()\r\n>    at System.IO.Pipelines.BufferSegment.ResetMemory()\r\n>    at System.IO.Pipelines.Pipe.CompletePipe()\r\n>    at System.IO.Pipelines.Pipe.CompleteWriter(Exception exception)\r\n>    at System.IO.Pipelines.Pipe.DefaultPipeWriter.Complete(Exception exception)\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoReceive()\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.StartAsync(IConnectionDispatcher connectionDispatcher)\r\n> ```\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2638","RelatedDescription":"Open issue \"MemoryPoolBlock.Dispose can throw and ODE during server shutdown leading to an error log from the Socket Transport \" (#2638)"},{"Id":"328324222","IsPullRequest":false,"CreatedAt":"2018-05-31T22:53:07","Actor":"halter73","Number":"2636","RawContent":null,"Title":"[2.1.3] Consistently handle connection aborts","State":"open","Body":"We should backport backport of graceful server shutdown fixes which improve functional test reliability, and followup PRs that normalize the exceptions thrown by the libuv and socket transports while providing better logs and error messages.\r\n\r\nHere are the dev PRs that should backported to 2.1 release branch:\r\n\r\n#2566\r\n#2574\r\n#2547\r\n#2612","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2636","RelatedDescription":"Open issue \"[2.1.3] Consistently handle connection aborts\" (#2636)"},{"Id":"327946385","IsPullRequest":true,"CreatedAt":"2018-05-31T22:39:26","Actor":"halter73","Number":"2632","RawContent":null,"Title":"Unskip and fix race in ConnectionClosedEvenIfAppSwallowsException","State":"closed","Body":"#2464\r\n\r\nThis is the same fix @mikeharder made for RequestTimesOutWhenRequestBodyNotReceivedAtSpecifiedMinimumRate with #2589.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2632","RelatedDescription":"Closed or merged PR \"Unskip and fix race in ConnectionClosedEvenIfAppSwallowsException\" (#2632)"},{"Id":"328319479","IsPullRequest":false,"CreatedAt":"2018-05-31T22:30:25","Actor":"halter73","Number":"2635","RawContent":null,"Title":"Flaky Test: macOS libuv functional tests","State":"open","Body":"There's a a problem we see a lot in our macOS libuv functional tests. It's not consistent at all which test fails, but it always surfaces as an empty response.\r\n\r\nThe test ran twice with the libuv transport. You can see that in the [log for the successful test run](https://ci3.dot.net/job/aspnet_KestrelHttpServer/job/dev/job/osx-Configuration_Release_prtest/323/artifact/netci-archived-logs/Libuv.FunctionalTests/netcoreapp2.2/RequestTests/Expect100ContinueHonored-http_127.0.0.1_0.0.log), the request is handled, a response is written, and only after that does the server close the connection as indicated by the \"disconnecting\" and \"sending FIN\" logs.\r\n\r\n```\r\n[0.001s] [TestLifetime] [Information] Starting test \"Expect100ContinueHonored-http://127.0.0.1:0\" at \"2018-05-31T00:28:54\"\r\n[0.002s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting starting\r\n[0.014s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting started\r\n[0.014s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Loaded hosting startup assembly \"Libuv.FunctionalTests, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"\r\n[0.016s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K6\"\" started.\r\n[0.017s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Information] Request starting HTTP/1.1 POST http:///  11\r\n[0.017s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K6\"\", Request id \"\"0HLE6HK9PG7K6:00000001\"\": started reading request body.\r\n[0.018s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K6\"\", Request id \"\"0HLE6HK9PG7K6:00000001\"\": done reading request body.\r\n[0.021s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Information] Request finished in 3.967ms 200 \r\n[0.021s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K6\"\" disconnecting.\r\n[0.021s] [Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv] [Debug] Connection id \"\"0HLE6HK9PG7K6\"\" sending FIN.\r\n[0.022s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting shutdown\r\n[0.022s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K6\"\" stopped.\r\n[0.023s] [TestLifetime] [Information] Finished test \"Expect100ContinueHonored-http://127.0.0.1:0\" in 0.021416s\r\n```\r\n\r\nIn the [log for the failed test run](https://ci3.dot.net/job/aspnet_KestrelHttpServer/job/dev/job/osx-Configuration_Release_prtest/323/artifact/netci-archived-logs/Libuv.FunctionalTests/netcoreapp2.2/RequestTests/Expect100ContinueHonored-http_127.0.0.1_0.log) the client sends a FIN immediately after opening connection prior to ever sending a request, so the server appropriately closes the connection immediately. This is indicated by the \"received FIN\" log by the server. This can *only* be logged if a -4095 status is observed by the libuv transport's read callback. Not only is the client not supposed to send a FIN prior to sending the request (which is obvious) it's also supposed to wait to send a FIN until after it receives a complete response, so there's no way this should be happening.\r\n\r\n```\r\n[0.001s] [TestLifetime] [Information] Starting test \"Expect100ContinueHonored-http://127.0.0.1:0\" at \"2018-05-31T00:28:54\"\r\n[0.008s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting starting\r\n[0.010s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting started\r\n[0.010s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Loaded hosting startup assembly \"Libuv.FunctionalTests, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\"\r\n[0.011s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K5\"\" started.\r\n[0.011s] [Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv] [Debug] Connection id \"\"0HLE6HK9PG7K5\"\" received FIN.\r\n[0.011s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K5\"\" disconnecting.\r\n[0.011s] [Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv] [Debug] Connection id \"\"0HLE6HK9PG7K5\"\" sending FIN.\r\n[0.011s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"\"0HLE6HK9PG7K5\"\" stopped.\r\n[0.016s] [Microsoft.AspNetCore.Hosting.Internal.WebHost] [Debug] Hosting shutdown\r\n[0.018s] [TestLifetime] [Information] Finished test \"Expect100ContinueHonored-http://127.0.0.1:0\" in 0.016812s\r\n```\r\n\r\nI would say it has to be a client bug except the client in this case is Kestrel's `TestConnection` which is written directly on top of a managed Socket. The Socket isn't shutdown or disposed until the failing assertion completes. More evidence that this isn't a client bug comes from the fact that the same tests run with the Socket transport never fail this way, and these tests also don't fail in this way on Windows.\r\n\r\nSee https://github.com/aspnet/KestrelHttpServer/pull/2632#issuecomment-393702116","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2635","RelatedDescription":"Open issue \"Flaky Test: macOS libuv functional tests\" (#2635)"},{"Id":"328179894","IsPullRequest":false,"CreatedAt":"2018-05-31T15:16:49","Actor":"samsosa","Number":"2634","RawContent":null,"Title":"Kestrel 2.1 ListenUnixSocket() throws 'Only ListenType.IPEndPoint is supported'","State":"closed","Body":"The old version works just fine but after update 2.1 an exception is thrown when setting `ListenUnixSocket`.\r\n\r\nUsing the following config:\r\n`ListenUnixSocket(\"/var/sockets/kestrel.sock\")`\r\n\r\nLeads to:\r\n```\r\nSystem.ArgumentException: Only ListenType.IPEndPoint is supported.\r\nParameter name: endPointInformation\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransportFactory.Create(IEndPointInformation endPointInformation, IConnectionDispatcher dispatcher)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.<>c__DisplayClass22_0`1.<<StartAsync>g__OnBind|0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindEndpointAsync(ListenOptions endpoint, AddressBindContext context)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions.BindAsync(AddressBindContext context)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.EndpointsStrategy.BindAsync(AddressBindContext context)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindAsync(IServerAddressesFeature addresses, KestrelServerOptions serverOptions, ILogger logger, Func`2 createBinding)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StartAsync[TContext](IHttpApplication`1 application, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.StartAsync(CancellationToken cancellationToken)\r\n   at HttpServer.StartAsync() in C:\\RefSource\\Base\\HttpServer\\HttpServer.cs:line 266\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2634","RelatedDescription":"Closed issue \"Kestrel 2.1 ListenUnixSocket() throws 'Only ListenType.IPEndPoint is supported'\" (#2634)"},{"Id":"328153321","IsPullRequest":false,"CreatedAt":"2018-05-31T14:06:39","Actor":"hismichael","Number":"2633","RawContent":null,"Title":"Kestrel 2.1 refuses to respond after doing several requests","State":"open","Body":"My working code is to create an embedded kestrel instance. While when I upgraded it to based on v2.1 (and from LibUv to Sockets transport), it only serves first several requests once running, and then doesn't respond to subsequent requests (no more calls to `ProcessRequestAsync`() happen), my Chrome browser reports \"xxxx refused to connect\".\r\n\"\r\n\r\nThe server creation code is as below:\r\n\r\n    ```\r\n    SocketTransportFactory transportFactory= new SocketTransportFactory(Options.Create(new SocketTransportOptions()), Lifetime, NullLoggerFactory.Instance);\r\n    ```\r\n    LoggerFactory loggerFactory = new LoggerFactory();\r\n    ```\r\n    // init the embedded server\r\n    KestrelServerOptions options = new KestrelServerOptions();\r\n    server = new KestrelServer(Options.Create(options), transportFactory, loggerFactory );\r\n    ICollection<string> addrs = server.Features.Get<IServerAddressesFeature>().Addresses;\r\n    addrs.Add(someAddr.Trim());\r\n    ```\r\n\r\nI guess there should be some incompatible changes that I don't know. Please help me out.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2633","RelatedDescription":"Open issue \"Kestrel 2.1 refuses to respond after doing several requests\" (#2633)"}],"ResultType":"GitHubIssue"},"Razor-Issues":{"Issues":[{"Id":"330386081","IsPullRequest":true,"CreatedAt":"2018-06-11T21:48:40","Actor":"NTaylorMullen","Number":"2392","RawContent":null,"Title":"Generate line pragmas even for whitespace.","State":"closed","Body":"- We need to pre-emptively generate line pragmas to handle C# scenarios which are session based. For instance, if a C# completion session starts at a location without a pragma they capture the origination point; at which point if a user keeps typing we generate a line pragma drastically changing where the copmletion started resulting in a broken C# completion experience.\r\n- Updated test files to reflect new behavior.\r\n\r\nThis is what this PR enables:\r\n![image](https://i.imgur.com/fnplPhA.gif)\r\n\r\n\r\n#2299","Url":"https://github.com/aspnet/Razor/pull/2392","RelatedDescription":"Closed or merged PR \"Generate line pragmas even for whitespace.\" (#2392)"},{"Id":"330460832","IsPullRequest":true,"CreatedAt":"2018-06-11T17:34:27","Actor":"NTaylorMullen","Number":"2394","RawContent":null,"Title":"Make brace indenter smarter about making edits to non-valid content kinds.","State":"closed","Body":"- Prior to this change our brace smart indenter would indent JavaScript blocks incorrectly because it didn't take into account where in a Razor file the brace that it was indenting existed.\r\n- Made it so the brace smart indenter only functions in code/metacode locations within the SyntaxTree.\r\n- Updated and added tests to account for new behavior.\r\n\r\n#2297","Url":"https://github.com/aspnet/Razor/pull/2394","RelatedDescription":"Closed or merged PR \"Make brace indenter smarter about making edits to non-valid content kinds.\" (#2394)"},{"Id":"331262362","IsPullRequest":false,"CreatedAt":"2018-06-11T16:33:27","Actor":"pranavkm","Number":"2398","RawContent":null,"Title":"ASP.NET Core 2.1 gives error CS2017: Cannot specify /main if building a module or library","State":"open","Body":"Original issue: https://github.com/aspnet/websdk/issues/350\r\n\r\nSteps to reproduce:\r\n\r\n- Install .NET Core SDK 2.1\r\n- Create a new project with dotnet new \"asp.net core web app\"\r\n- The project compiles OK\r\n- Add element `<StartupObject>foo.Program</StartupObject>` to the csproj\r\n\r\nBuild fails with:\r\n\r\n1>CSC : error CS2017: Cannot specify /main if building a module or library\r\n\r\nThis error did not occur with 2.0. Also a plain .NET core console app initialized with dotnet new \"console application\" does not have this problem.\r\n","Url":"https://github.com/aspnet/Razor/issues/2398","RelatedDescription":"Open issue \"ASP.NET Core 2.1 gives error CS2017: Cannot specify /main if building a module or library\" (#2398)"},{"Id":"329942496","IsPullRequest":true,"CreatedAt":"2018-06-11T15:53:52","Actor":"ajaybhargavb","Number":"2389","RawContent":null,"Title":"Use checksum for classname if filepath is null","State":"closed","Body":"https://github.com/aspnet/Razor/issues/2353\r\n\r\n","Url":"https://github.com/aspnet/Razor/pull/2389","RelatedDescription":"Closed or merged PR \"Use checksum for classname if filepath is null\" (#2389)"},{"Id":"331171242","IsPullRequest":false,"CreatedAt":"2018-06-11T12:37:49","Actor":"andoband","Number":"2397","RawContent":null,"Title":"Vue-like directives","State":"open","Body":"I've grown to enjoy Vue's `v-if`, `v-show`, and `v-for` directives.  Maybe it's because I've gotten used to Vue, but it feels cleaner than the `@if` and `@foreach` blocks used by Razor and Blazor.  Specifically, it's easier for me to visualize the document structure when the code expressions are inlined with the elements versus external to them.  I also like how well it jells with declarative and reactive client-side development.\r\n\r\nCould Razor/Blazor add a similar syntax?\r\n\r\nI realize this is a personal preference and that there are folks that dislike this declarative style, so I'm not asking to replace the current syntax but rather to add to it in a Blazor-compatible way.\r\n\r\nFor example:\r\n\r\n**Razor/Blazor** (today)\r\n```html\r\n@if (bar != null)\r\n{\r\n    <ul>\r\n        @foreach (var foo in bar) \r\n        {\r\n            <li>@foo.Name</li>\r\n        }\r\n    </ul>\r\n}\r\n```\r\n\r\n**Vue-like** (suggested, or something similar)\r\n```html\r\n<ul @if=\"bar != null\">\r\n    <li @foreach=\"var foo in bar\">@foo.Name</li>\r\n</ul>\r\n```","Url":"https://github.com/aspnet/Razor/issues/2397","RelatedDescription":"Open issue \"Vue-like directives\" (#2397)"},{"Id":"330631186","IsPullRequest":false,"CreatedAt":"2018-06-08T17:01:34","Actor":"evil-shrike","Number":"2396","RawContent":null,"Title":"Razor SDK produces two assemblies for a Razor Class Library project","State":"closed","Body":"#1809\r\n\r\nHi.\r\nI'm trying to migrate my solution from 2.0 (see https://github.com/aspnet/Razor/issues/1809#issue-281111990) to the new 2.1 Razon SDK. \r\nI have moved all my views (\"Views\" folder) from a project into a new RazorSDK-project \"Views\". It references the main back (to have Model classes) and package Microsoft.AspNetCore.Mvc, that's all.\r\nCompiling these two projects produces two \"Views\" assemblies! \r\n\r\nHere's the most simpified demo. \r\n* Create a new empty Web .net core project\r\n* Create a new empty Razor Class Library project\r\n* Reference the first project from razor project\r\n* change razor' TargetFramework  from netstandard to netcoreapp2.1 (why do you generate it as netstandard btw? it makes it fail to compile in almost all cases as referenced web-project won't be netstandard).\r\n\r\nHere're two csproj:\r\n\r\n### RazorSdkTest.Views.csproj:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Razor\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.1.0\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\RazorSdkTest\\RazorSdkTest.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n### RazorSdkTest.csproj:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nNow build and get the following assemblies in RazorSdkTest.Views\\bin\\Debug\\netcoreapp2.1: \r\n```\r\nRazorSdkTest.Views.dll\r\nRazorSdkTest.Views.pdb\r\nRazorSdkTest.Views.deps.json\r\nRazorSdkTest.Views.Views.dll\r\nRazorSdkTest.Views.Views.pdb\r\n```\r\n\r\nRazorSdkTest.Views.dll is empty, while RazorSdkTest.Views.Views.dll contains all views.\r\n\r\n","Url":"https://github.com/aspnet/Razor/issues/2396","RelatedDescription":"Closed issue \"Razor SDK produces two assemblies for a Razor Class Library project\" (#2396)"},{"Id":"330462049","IsPullRequest":true,"CreatedAt":"2018-06-07T22:47:33","Actor":"ryanbrandenburg","Number":"2395","RawContent":null,"Title":"Adding VSTS file","State":"open","Body":null,"Url":"https://github.com/aspnet/Razor/pull/2395","RelatedDescription":"Open PR \"Adding VSTS file\" (#2395)"},{"Id":"330438569","IsPullRequest":false,"CreatedAt":"2018-06-07T21:23:49","Actor":"sadjadbp","Number":"2393","RawContent":null,"Title":"Upgraded a project to asp.net core 2.1 and now every new page will add IncludeRazorContentInPack in csproj file","State":"closed","Body":"After upgrading to asp.net core 2.1, now for any new cshtml file I add to the project, it will add a code like below in the csproj file\r\n\r\n\r\n```xml\r\n    <ItemGroup>\r\n      <Content Update=\"Views\\{view name}.cshtml\">\r\n        <Pack>$(IncludeRazorContentInPack)</Pack>\r\n      </Content>\r\n    </ItemGroup>\r\n```","Url":"https://github.com/aspnet/Razor/issues/2393","RelatedDescription":"Closed issue \"Upgraded a project to asp.net core 2.1 and now every new page will add IncludeRazorContentInPack in csproj file\" (#2393)"},{"Id":"330267155","IsPullRequest":false,"CreatedAt":"2018-06-07T18:00:33","Actor":"joeaudette","Number":"2391","RawContent":null,"Title":"using RCL partial views from outside the RCL","State":"closed","Body":"I left a comment in the documentation https://github.com/aspnet/Docs/issues/6918, but thought it would be better to ask about it here.\r\n\r\nFrom the documentation:\r\n\r\n> For content outside the RCL, the ASP.NET Core runtime does not search for partial files in the RCL.\r\n\r\nTo me that is a big limitation. I have a library of commonly used things, one example is Alerts, and the view for Alerts is naturally a partial view. Consumers of my library should be able to use that view without having to copy it local to their project.\r\n\r\nI also have some other views that bundle commonly used scripts and css for things like datepickers and wysiwyg editors. The static resources are served as embedded resources from my RCL but the partials cannot be used outside my RCL as I want them to be.\r\n\r\nIs there a way around that limitation such as an interface or view location expander I could implement to change that? \r\nWhat is the rationale for this limitation?","Url":"https://github.com/aspnet/Razor/issues/2391","RelatedDescription":"Closed issue \"using RCL partial views from outside the RCL\" (#2391)"},{"Id":"330066850","IsPullRequest":false,"CreatedAt":"2018-06-07T00:47:42","Actor":"streepteaze","Number":"2390","RawContent":null,"Title":"[Bug] Razor SDK project publishing fails when contains external assembly references.","State":"closed","Body":"Hi!\r\n\r\nAfter updating to AspNetCore 2.1 I experiencing the problem with publishing my MVC project:\r\n\r\n### Sample project structure:\r\n![image](https://user-images.githubusercontent.com/772082/41069360-375a2612-69f6-11e8-8f86-cf98cbe6c6cc.png)\r\n\r\n1. Sample class library.\r\n2. Razor class library with a project reference to sample class library and using it's class from inside the view.\r\n3. Mvc project contains reference to Razor class library.\r\n\r\nProject is building and running as expected in Visual Studio, however I'm getting an error when try to publish it:\r\n\r\n` Areas\\MyFeature\\Pages\\Page1.cshtml(5,24): Error CS0234: The type or namespace name 'ClassLib' does not exist in the namespace 'Sample' (are you missing an assembly reference?)`\r\n\r\nHere is repo with sample project: https://github.com/streepteaze/razorbug","Url":"https://github.com/aspnet/Razor/issues/2390","RelatedDescription":"Closed issue \"[Bug] Razor SDK project publishing fails when contains external assembly references.\" (#2390)"},{"Id":"329002006","IsPullRequest":false,"CreatedAt":"2018-06-06T17:49:14","Actor":"ViperGTI007","Number":"2379","RawContent":null,"Title":"Taghelpers intellisense broken after last update","State":"closed","Body":"Hi\r\n\r\nI updated my Visual Studio on Friday together with the Microsoft.AspNetCore packages (from 2.0.4 to 2.1.0) for my project.  It seems that the upgrade of Microsoft.AspNetCore to 2.1.0 essentially broke my intellisense for TagHelpers.  The behaviour is basically the same as the issue in the link below, except this seems to be related to the Nuget package version for the project rather than Visual Studio itself.\r\nhttps://github.com/aspnet/Razor/issues/1628\r\n\r\nI followed the advice in the link above (when I thought the issue was VS related):  Tried disabling and enabling the Razor services, did a full repair and still nothing.  Both custom developed tag helpers and the standard tag helpers doesn't work with intellisense, although when running the project, they do what they're meant to do.  Everything was working fine on Thursday.\r\n\r\nTo reproduce, simply open an existing project that uses the Microsoft.AspNetCore v2.0.4 packages, open Nuget and update all packages to the latest versions.  Open any page that uses a TagHelper or try start typing a taghelper on any view.\r\n------------------------------------\r\n\r\nAttached are the sample projects to reproduce the issue.  The only difference between the Before and After projects is that I went into Nuget under the Updates tab and chose to update all packages to latest version.\r\n[AspNetCore_TagHelpers_Upgrade.zip](https://github.com/aspnet/Razor/files/2071145/AspNetCore_TagHelpers_Upgrade.zip)","Url":"https://github.com/aspnet/Razor/issues/2379","RelatedDescription":"Closed issue \"Taghelpers intellisense broken after last update\" (#2379)"},{"Id":"329429114","IsPullRequest":false,"CreatedAt":"2018-06-06T17:06:55","Actor":"inputfalken","Number":"2382","RawContent":null,"Title":"Cannot run dotnet build with .NET core 2.1","State":"closed","Body":"#### The steps i do in powershell core to create the error. \r\n\r\n*  `mkdir aspnetcore21`\r\n*  `dotnet new razor`\r\n*  `dotnet build`\r\n\r\n#### I get the following error after the build step.\r\n\r\n```\r\nC:\\Users\\user\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0\\build\\netstandard2.0\\Microsoft.AspNetCore.Razor.Design.CodeGeneration.targets(69,5): error : The project C:\\Users\\user\\source\\repos\\aspnetcore21 must provide a value for Configuration. [C:\\Users\\user\\source\\repos\\aspnetcore21\\aspnetcore21.csproj]\r\n```","Url":"https://github.com/aspnet/Razor/issues/2382","RelatedDescription":"Closed issue \"Cannot run dotnet build with .NET core 2.1\" (#2382)"},{"Id":"329940553","IsPullRequest":true,"CreatedAt":"2018-06-06T16:30:25","Actor":"rynowak","Number":"2388","RawContent":null,"Title":"Rename a file","State":"closed","Body":"","Url":"https://github.com/aspnet/Razor/pull/2388","RelatedDescription":"Closed or merged PR \"Rename a file\" (#2388)"},{"Id":"329666727","IsPullRequest":true,"CreatedAt":"2018-06-06T04:18:07","Actor":"pranavkm","Number":"2387","RawContent":null,"Title":"Add more diagnostics to FileThumbPrint","State":"closed","Body":"","Url":"https://github.com/aspnet/Razor/pull/2387","RelatedDescription":"Closed or merged PR \"Add more diagnostics to FileThumbPrint\" (#2387)"},{"Id":"329657201","IsPullRequest":true,"CreatedAt":"2018-06-06T00:04:54","Actor":"NTaylorMullen","Number":"2385","RawContent":null,"Title":"Update windows image to one that has VSIX compatible workloads.","State":"closed","Body":"","Url":"https://github.com/aspnet/Razor/pull/2385","RelatedDescription":"Closed or merged PR \"Update windows image to one that has VSIX compatible workloads.\" (#2385)"},{"Id":"329658427","IsPullRequest":true,"CreatedAt":"2018-06-05T23:21:40","Actor":"NTaylorMullen","Number":"2386","RawContent":null,"Title":"[Design] Allow document tracker to be created without a project.","State":"open","Body":"- Part of this work involved moving our Project lookup logic to use a `ProjectId`. The caveat to this approach is there were some scenarios when all we had was a file path so we needed to maintain both ways to lookup a project (with and without a file path).\r\n- Updated `DefaultProjectSnapshotManager` to track projects by a dual key of projectids and file paths.\r\n- Updated project system bits to properly create host projects with unchanging `ProjectId`s.\r\n- Added a miscellaneous project for cases when a document tracker did not have a project path.\r\n- Updated serializers to properly serialize project ids as part of a project handle.\r\n\r\n#2350","Url":"https://github.com/aspnet/Razor/pull/2386","RelatedDescription":"Open PR \"[Design] Allow document tracker to be created without a project.\" (#2386)"},{"Id":"329613368","IsPullRequest":false,"CreatedAt":"2018-06-05T20:30:42","Actor":"pranavkm","Number":"2384","RawContent":null,"Title":"[Patch] Copy-pasting an item in an RCL project adds junk to the project file","State":"open","Body":"Issue tracking possibly porting this fix for 2.1.x.","Url":"https://github.com/aspnet/Razor/issues/2384","RelatedDescription":"Open issue \"[Patch] Copy-pasting an item in an RCL project adds junk to the project file\" (#2384)"},{"Id":"329562272","IsPullRequest":true,"CreatedAt":"2018-06-05T18:33:48","Actor":"pranavkm","Number":"2383","RawContent":null,"Title":"Pass versions using MSBuild template instead of importing dependencie…","State":"closed","Body":"…s.props\r\n\r\nFixes #2309","Url":"https://github.com/aspnet/Razor/pull/2383","RelatedDescription":"Closed or merged PR \"Pass versions using MSBuild template instead of importing dependencie…\" (#2383)"},{"Id":"329172976","IsPullRequest":false,"CreatedAt":"2018-06-04T20:32:46","Actor":"Tadimsky","Number":"2380","RawContent":null,"Title":"Disable creation of new *.Views.dll?","State":"closed","Body":"I'm upgrading to .NET Core 2.1 and ran into an issue during compilation because of an FxCop violation (https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1016-mark-assemblies-with-assemblyversionattribute).\r\nIt turned out that the `*.Views.dll` was not compiled with a DLL version. I'm using [GitVersioning](https://github.com/AArnott/Nerdbank.GitVersioning) to do versioning of my application DLLs but that seems to not pick up the new `*.Views.dll` output and so it ends up without a version stamp.\r\n\r\nIs there some way to disable the generation of this DLL (and keep it part of my ASP.Net Core application)? ","Url":"https://github.com/aspnet/Razor/issues/2380","RelatedDescription":"Closed issue \"Disable creation of new *.Views.dll?\" (#2380)"},{"Id":"329179333","IsPullRequest":false,"CreatedAt":"2018-06-04T19:07:13","Actor":"NTaylorMullen","Number":"2381","RawContent":null,"Title":"Use document snapshots when parsing Razor files.","State":"open","Body":"Today the parser is highly coupled to the idea of a background parser that requires in-depth knowledge of what makes up a documents context (project file path, its project engine etc.) and to idea of a background queue of changes pumping through the system.\r\n\r\nA major cost in this issue is testing.","Url":"https://github.com/aspnet/Razor/issues/2381","RelatedDescription":"Open issue \"Use document snapshots when parsing Razor files.\" (#2381)"},{"Id":"328363380","IsPullRequest":false,"CreatedAt":"2018-06-01T02:58:07","Actor":"rynowak","Number":"2378","RawContent":null,"Title":"Copy-pasting an item in an RCL project adds junk to the project file","State":"open","Body":"1. Create a new RCL project in VS (2.1 RTM)\r\n2. Copy the `Page1.cshtml` file in solution explorer\r\n3. Paste\r\n\r\nYou get this.\r\n\r\n```\r\n  <ItemGroup>\r\n    <Content Update=\"Areas\\MyFeature\\Pages\\Page1 - Copy.cshtml\">\r\n      <Pack>$(IncludeRazorContentInPack)</Pack>\r\n    </Content>\r\n  </ItemGroup>\r\n```","Url":"https://github.com/aspnet/Razor/issues/2378","RelatedDescription":"Open issue \"Copy-pasting an item in an RCL project adds junk to the project file\" (#2378)"},{"Id":"326515003","IsPullRequest":false,"CreatedAt":"2018-05-31T18:14:58","Actor":"BachynskyiBohdan","Number":"2371","RawContent":null,"Title":"Razor can't understand @ symbol (even @@) in pattern attribute","State":"closed","Body":"Example:\r\n`<input pattern=\"\\w+(@)\\w+(.)\\w\"/>` or `<input pattern=\"\\w+(@@)\\w+(.)\\w\"/>`\r\n\r\nThis approach trigger parser error:\r\n\r\n> Description: An error occurred during the parsing of a resource required to service this request. Please review the following specific parse error details and modify your source file appropriately. \r\n\r\n> Parser Error Message: \")\" is not valid at the start of a code block.  Only identifiers, keywords, comments, \"(\" and \"{\" are valid.\r\n","Url":"https://github.com/aspnet/Razor/issues/2371","RelatedDescription":"Closed issue \"Razor can't understand @ symbol (even @@) in pattern attribute\" (#2371)"},{"Id":"327472580","IsPullRequest":true,"CreatedAt":"2018-05-30T22:34:29","Actor":"AmadeusW","Number":"2376","RawContent":null,"Title":"Updates the Editor Nuget packages","State":"closed","Body":"","Url":"https://github.com/aspnet/Razor/pull/2376","RelatedDescription":"Closed or merged PR \"Updates the Editor Nuget packages\" (#2376)"},{"Id":"327458846","IsPullRequest":false,"CreatedAt":"2018-05-30T18:58:40","Actor":"NTaylorMullen","Number":"2373","RawContent":null,"Title":"Track DocumentState information for fallback projects.","State":"closed","Body":"Today our default project host consumes Razor SDK information (only present in 2.1) to identify Razor files and their if they've been added or remove to the world. This way our project system can track document information despite being >= 2.1","Url":"https://github.com/aspnet/Razor/issues/2373","RelatedDescription":"Closed issue \"Track DocumentState information for fallback projects.\" (#2373)"},{"Id":"327540488","IsPullRequest":true,"CreatedAt":"2018-05-30T18:15:27","Actor":"NTaylorMullen","Number":"2377","RawContent":null,"Title":"Add Razor document tracking to FallbackRazorProjectHost.","State":"closed","Body":"- VisualStudio defaults to adding a `<none>` link item when right click -> add existing item for Razor files; therefore, this also includes the knowledge of the \"None\" item group when finding Razor files.\r\n- Added unit and functional tests to verify the new `FallbackRazorProjectHost` behavior.\r\n- Added new schema items to represent the `Content` and `None` item type information (pulled from the project system repo).\r\n\r\n#2373","Url":"https://github.com/aspnet/Razor/pull/2377","RelatedDescription":"Closed or merged PR \"Add Razor document tracking to FallbackRazorProjectHost.\" (#2377)"},{"Id":"325912912","IsPullRequest":false,"CreatedAt":"2018-05-29T22:21:31","Actor":"pranavkm","Number":"2369","RawContent":null,"Title":"Port https://github.com/aspnet/Razor/issues/2363 to 2.1.1","State":"closed","Body":"Issue: https://github.com/aspnet/Razor/issues/2363\r\n\r\nPR: https://github.com/aspnet/Razor/pull/2368","Url":"https://github.com/aspnet/Razor/issues/2369","RelatedDescription":"Closed issue \"Port https://github.com/aspnet/Razor/issues/2363 to 2.1.1\" (#2369)"},{"Id":"327466476","IsPullRequest":true,"CreatedAt":"2018-05-29T22:17:02","Actor":"pranavkm","Number":"2375","RawContent":null,"Title":"Allow publish to work when BuildProjectReferences=false","State":"closed","Body":"Fixes #2363","Url":"https://github.com/aspnet/Razor/pull/2375","RelatedDescription":"Closed or merged PR \"Allow publish to work when BuildProjectReferences=false\" (#2375)"},{"Id":"327459285","IsPullRequest":false,"CreatedAt":"2018-05-29T19:39:15","Actor":"NTaylorMullen","Number":"2374","RawContent":null,"Title":"Implement DocumentSnapshot tracking in VS 4 Mac","State":"open","Body":"When we eventually move all of our internal parsing infrastructure to use DocumentSnapshots we'll need to  have the correct information flowing through the VS4Mac side of the world.","Url":"https://github.com/aspnet/Razor/issues/2374","RelatedDescription":"Open issue \"Implement DocumentSnapshot tracking in VS 4 Mac\" (#2374)"},{"Id":"326688946","IsPullRequest":true,"CreatedAt":"2018-05-29T16:35:56","Actor":"ryanbrandenburg","Number":"2372","RawContent":null,"Title":"Override MicrosoftNETCoreApp22PackageVersion","State":"closed","Body":"In Universe, when the versions of MicrosoftNETCoreApp22PackageVersion are different between Universe and Razor, the samples get passed the Razor one, which is wrong. Here I'm attempting to prevent that from happening.\r\n\r\n@NTaylorMullen is my understanding of this correct?","Url":"https://github.com/aspnet/Razor/pull/2372","RelatedDescription":"Closed or merged PR \"Override MicrosoftNETCoreApp22PackageVersion\" (#2372)"},{"Id":"326251633","IsPullRequest":true,"CreatedAt":"2018-05-24T19:20:59","Actor":"ryanbrandenburg","Number":"2370","RawContent":null,"Title":"Don't police netcoreapp version","State":"closed","Body":"Some of the tests in this repo fail when we move to the new netcoreapp due to a new check, let's disable the check.","Url":"https://github.com/aspnet/Razor/pull/2370","RelatedDescription":"Closed or merged PR \"Don't police netcoreapp version\" (#2370)"}],"ResultType":"GitHubIssue"},"Templates-Issues":{"Issues":[{"Id":"266880667","IsPullRequest":true,"CreatedAt":"2017-10-24T21:42:12","Actor":"s-whaley","Number":"873","RawContent":null,"Title":"Account AccessDenied View Razor Syntax Bug Fix","State":"closed","Body":"views/account/accessdenied ViewData[title] missing @ symbol","Url":"https://github.com/aspnet/Templates/pull/873","RelatedDescription":"Closed or merged PR \"Account AccessDenied View Razor Syntax Bug Fix\" (#873)"},{"Id":"267855162","IsPullRequest":false,"CreatedAt":"2017-10-24T19:00:48","Actor":"ezeasharma","Number":"874","RawContent":null,"Title":"The project file could not be loaded for csproj","State":"closed","Body":"I migrated my .netcore 1.1 proj to 2.0 using this link https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/\r\n\r\nbut when i perform \"dotnet restore -v d\" i get the following error:\r\n\r\n```\r\nBuild started 10/23/2017 19:57:01.\r\n     1>Project \"someproj.csproj\" on node 1 (Restore target(s)).\r\n     1>Building with tools version \"15.0\".\r\n     1>someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n     1>Done Building Project \"someproj.csproj\" (Restore target(s)) -- FAILED.\r\n\r\nBuild FAILED.\r\n\r\n       \"/someproj/someproj.csproj\" (Restore target) (1) ->\r\n         /someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\nHere is the output for dotnet --info\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nThis is my csproj file\r\n```\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\\" />\r\n    <Folder Include=\"swagger_static\\\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Serilog\" Version=\"2.4.0\" />\r\n    <PackageReference Include=\"Serilog.Extensions.Logging\" Version=\"1.4.0\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Console\" Version=\"2.1.0\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"Dapper\" Version=\"1.50.2\" />\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"System.Threading\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n  <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n</ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.common\\recon.curator.common.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.service\\recon.curator.service.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/aspnet/Templates/issues/874","RelatedDescription":"Closed issue \"The project file could not be loaded for csproj\" (#874)"},{"Id":"232879172","IsPullRequest":false,"CreatedAt":"2017-10-24T16:37:14","Actor":"a-elnajjar","Number":"847","RawContent":null,"Title":"Post test ","State":"closed","Body":"Hi asp.net Team;\r\nI see your Templates/test/Microsoft.Web.Templates.Web.Tests/WebAPITests.cs only have tow test methods for testing and verify GET Web API is working. I want to ask can I add testing and verify methods for POST Web API?","Url":"https://github.com/aspnet/Templates/issues/847","RelatedDescription":"Closed issue \"Post test \" (#847)"},{"Id":"252192148","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:47","Actor":"Dave3of5","Number":"864","RawContent":null,"Title":"Authentication on SPA apps","State":"closed","Body":"There seems to be no template for authentication on the SPA templates.\r\n\r\nI've been looking up various blog post and third party articles on how to add Jwt Authentication but they are scattered and most are for dotnet core 1.1. It would be nice if there was a template that showed the \"correct\" way to do this in dotnet core 2.0.","Url":"https://github.com/aspnet/Templates/issues/864","RelatedDescription":"Closed issue \"Authentication on SPA apps\" (#864)"},{"Id":"252376700","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:23","Actor":"pejta2207","Number":"865","RawContent":null,"Title":"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token","State":"closed","Body":"**Description**\r\nThe issue is related to Individual Accounts Authentication template. It seems that providing incorrect authentication code for ConfirmEmail action in AccountController (e.g. token which already expired) should result in displaying error page. However, Razor throws an exception while generating the default error view:\r\n\r\n```\r\nNullReferenceException: Object reference not set to an instance of an object.\r\nAspNetCore._Views_Shared_Error_cshtml+<ExecuteAsync>d__0.MoveNext() in Error.cshtml, line 9\r\n```\r\n\r\n**Steps to reproduce**\r\n1. Create new project with Individual Accounts Authentication template.\r\n2. Run the application.\r\n3. Register any user via the registration form.\r\n4. Retrieve UserId of the registered user.\r\n5. Try to confirm email with incorrect token, e.g. http://localhost:PORT/Account/ConfirmEmail?UserId={UserId}&Code=INVALID_CODE\r\n\r\n**Further technical details**\r\nIt's probably caused by the last line in ConfirmEmail action in AccountController:\r\n```\r\nvar result = await _userManager.ConfirmEmailAsync(user, code);\r\nreturn View(result.Succeeded ? \"ConfirmEmail\" : \"Error\");\r\n```\r\n\r\nWhen invalid token is passed, Error view is not provided with `ErrorViewModel`. When `Model` is accessed in 9th line of Error.cshtml (`@if (Model.ShowRequestId)`), it throws NullReferenceException.","Url":"https://github.com/aspnet/Templates/issues/865","RelatedDescription":"Closed issue \"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token\" (#865)"},{"Id":"260997320","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:05","Actor":"joeaudette","Number":"868","RawContent":null,"Title":"IEmailSender should have explicitly named parameters for html vs plain text","State":"closed","Body":"There have been a number of people reporting bugs about the email confirmation link in the StarterWeb template not working.\r\n\r\nThis is happening because people implement IEmailSender and don't realize that the message being passed in is html. When they send the email as plain text the confirmation link does not work because of the url encoding.\r\n\r\nI think the \"message\" parameter of SendEmailAsync should be renamed to htmlMessage and possibly should have an additional parameter for \"plainTextMessage\" and both should be passed in from AccountController.\r\n\r\nThis would make it more clear to implementors of IEmailSender what kind of string(s) they are dealing with and how to correctly implement it.\r\n\r\nrelated issues:\r\nhttps://github.com/aspnet/Home/issues/2152\r\nhttps://github.com/aspnet/Home/issues/2217","Url":"https://github.com/aspnet/Templates/issues/868","RelatedDescription":"Closed issue \"IEmailSender should have explicitly named parameters for html vs plain text\" (#868)"},{"Id":"268102418","IsPullRequest":false,"CreatedAt":"2017-10-24T16:35:17","Actor":"Eilon","Number":"875","RawContent":null,"Title":"This repo is OBSOLETE - please see the README file for information","State":"open","Body":"Please refer to the README at https://github.com/aspnet/Templates for information.","Url":"https://github.com/aspnet/Templates/issues/875","RelatedDescription":"Open issue \"This repo is OBSOLETE - please see the README file for information\" (#875)"},{"Id":"266114525","IsPullRequest":false,"CreatedAt":"2017-10-21T00:03:24","Actor":"tverboon","Number":"872","RawContent":null,"Title":"Unnecessary User.Id provided in password reset link?","State":"closed","Body":"The user Id is provided in the callback link:\r\n\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L424\r\n\r\nBut in the controller action only code is used:\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L443\r\n\r\nIn my opinion it's better not to provide more information than necessary.","Url":"https://github.com/aspnet/Templates/issues/872","RelatedDescription":"Closed issue \"Unnecessary User.Id provided in password reset link?\" (#872)"},{"Id":"265394026","IsPullRequest":false,"CreatedAt":"2017-10-13T20:09:16","Actor":"jkotalik","Number":"871","RawContent":null,"Title":"Add HttpsRedirection and HSTS middleware template","State":"closed","Body":"With https://github.com/aspnet/BasicMiddleware/pull/264 being added, @Eilon asked me to write templates for this feature.\r\ncc/ @javiercn @Tratcher ","Url":"https://github.com/aspnet/Templates/issues/871","RelatedDescription":"Closed issue \"Add HttpsRedirection and HSTS middleware template\" (#871)"},{"Id":"264318035","IsPullRequest":true,"CreatedAt":"2017-10-10T17:47:02","Actor":"scottsauber","Number":"870","RawContent":null,"Title":"Change Lockout wording of comment","State":"open","Body":"The Razor Pages Identity template turns on Lockout by default, unlike the MVC one.  This comment is left over from the MVC one and it no longer lines up with what is configured in the template.  I've reworded it to be accurate.  I can change it to just remove the comment all together if you want.","Url":"https://github.com/aspnet/Templates/pull/870","RelatedDescription":"Open PR \"Change Lockout wording of comment\" (#870)"},{"Id":"262627101","IsPullRequest":false,"CreatedAt":"2017-10-04T00:00:30","Actor":"Rick-Anderson","Number":"869","RawContent":null,"Title":"QR Codes should be supported in templates","State":"closed","Body":"[Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes)\r\n\r\nThat should be supported in the templates like [SMS 2FA](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/2fa) used to be. \r\n\r\nrequested by customer in [Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes) comments","Url":"https://github.com/aspnet/Templates/issues/869","RelatedDescription":"Closed issue \"QR Codes should be supported in templates\" (#869)"},{"Id":"254163608","IsPullRequest":false,"CreatedAt":"2017-09-07T12:16:42","Actor":"elAndyG","Number":"866","RawContent":null,"Title":"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)","State":"closed","Body":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n","Url":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Closed issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866)"},{"Id":"255851740","IsPullRequest":false,"CreatedAt":"2017-09-07T08:13:18","Actor":"marcusien","Number":"867","RawContent":null,"Title":"Cannot force version of the template to install","State":"open","Body":"Hi,\r\n\r\nMaybe there's something not documented but I'd like to install a version of my own template in a specific version.\r\n\r\nWe are creating our own template for our project and we create prerelease packages for our template using semver. The problem is with \"dotnet new -i\" command, we cannot specify a specific version","Url":"https://github.com/aspnet/Templates/issues/867","RelatedDescription":"Open issue \"Cannot force version of the template to install\" (#867)"},{"Id":"251697737","IsPullRequest":true,"CreatedAt":"2017-08-22T14:57:33","Actor":"phenning","Number":"862","RawContent":null,"Title":"Use template engine templates","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/862","RelatedDescription":"Closed or merged PR \"Use template engine templates\" (#862)"},{"Id":"251783689","IsPullRequest":false,"CreatedAt":"2017-08-21T22:59:07","Actor":"GoshaFighten","Number":"863","RawContent":null,"Title":"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template","State":"closed","Body":"This issue relates to the [one](https://github.com/DevExpress/devextreme-angular/issues/534). I've created an Angular application using .NET Core 2.0. The issue is reproducible regardless if I use Visual Studio 2017 15.3 or `dotnet new angular`. Everything works fine in the Development mode. But, once I publish my application with the [DevExtreme Angular](https://github.com/DevExpress/devextreme-angular) package using `dotnet publish -c Release`, I'm getting the following error:\r\n\r\n```\r\n      ERROR in ./$$_gendir/~/devextreme-angular/ui/data-grid.ngfactory.ts\r\n      Module parse failed: D:\\FromCustomers\\GH534\\NGCore\\NGCore\\$$_gendir\\node_modules\\devextreme-angular\\ui\\data-grid.ngfactory.ts Unexpected token (63:38)\r\n      You may need an appropriate loader to handle this file type.\r\n      | import * as i52 from 'devextreme-angular/core/iterable-differ-helper';\r\n      | import * as i53 from 'devextreme-angular/core/nested-option';\r\n      | export const DxDataGridModuleNgFactory:i0.NgModuleFactory<i1.DxDataGridModule> = i0.╔╡cmf(i1.DxDataGridModule,\r\n      |     ([] as any[]),(_l:any) => {\r\n      |       return i0.╔╡mod([i0.╔╡mpd(512,i0.ComponentFactoryResolver,i0.╔╡CodegenComponentFactoryResolver,\r\n       @ ./$$_gendir/ClientApp/app/components/fetchdata/fetchdata.component.ngfactory.ts 8:0-102\r\n       @ ./$$_gendir/ClientApp/app/app.module.server.ngfactory.ts\r\n       @ ./ClientApp/boot.server.ts\r\nD:\\FromCustomers\\GH534\\NGCore\\NGCore\\NGCore.csproj(41,5): error MSB3073: The command \"node node_modules/webpack/bin/webpack.js --env.prod\" exited with code 2.\r\n```\r\n\r\nI added\r\n\r\n```\r\n\"devextreme\": \"^17.1.5\",\r\n\"devextreme-angular\": \"^17.1.5\",\r\n```\r\n\r\nto the `package.json` file. Then, I added DevExtreme CSS files to the `webpack.config.vendor.js` as\r\n\r\n```\r\nconst nonTreeShakableModules = [\r\n    'bootstrap',\r\n    'bootstrap/dist/css/bootstrap.css',\r\n    'es6-promise',\r\n    'es6-shim',\r\n    'event-source-polyfill',\r\n    'jquery',\r\n    'devextreme/dist/css/dx.common.css',\r\n    'devextreme/dist/css/dx.light.css'\r\n];\r\n```\r\n\r\nIf instead of the following line in the webpack.config.js file\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nI use\r\n\r\n```\r\n{ test: /\\.ts$/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nor\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] },\r\n```\r\n\r\neverything works fine. A similar configuration in a project created using Angular CLI works fine as well.\r\n\r\nThe attached `NGCore` project illustrates the issue and `test-app` created with Angular CLI illustrates that this works in a standard Angular CLI project after I call `ng eject`.\r\n\r\nWhat can be the problem here? Is it in DevExtreme modules or in your webpack configuration?\r\n[test-app.zip](https://github.com/aspnet/Templates/files/1240256/test-app.zip)\r\n[NGCore.zip](https://github.com/aspnet/Templates/files/1240259/NGCore.zip)\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/863","RelatedDescription":"Closed issue \"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template\" (#863)"},{"Id":"248880384","IsPullRequest":false,"CreatedAt":"2017-08-09T00:05:00","Actor":"Rick-Anderson","Number":"861","RawContent":null,"Title":"Razor Page scaffolder should add `@page \"{id:int}\"` directive","State":"closed","Body":"The RP scaffolder should add `@page \"{id:int}\"` directive so generated links pass the ID as route data, not query strings.\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/861","RelatedDescription":"Closed issue \"Razor Page scaffolder should add `@page \"{id:int}\"` directive\" (#861)"},{"Id":"248842171","IsPullRequest":false,"CreatedAt":"2017-08-08T20:59:26","Actor":"Rick-Anderson","Number":"860","RawContent":null,"Title":"Razor Pages scaffolder eats    DbUpdateConcurrencyException","State":"closed","Body":"Expected behavior:\r\nScaffolder should correctly handle `DbUpdateConcurrencyException`\r\n\r\nActual behavior:\r\n`DbUpdateConcurrencyException` is caught and ignored.\r\n\r\nTo repro: \r\n\r\n* Create a RP project and add a model.\r\n* [Scaffold the model](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model#add-scaffold-tooling-and-perform-initial-migration)\r\n\r\nThe *Edit.cshtml.cs* file contains the following code:\r\n\r\n```cs\r\npublic async Task<IActionResult> OnPostAsync()\r\n{\r\n    if (!ModelState.IsValid)\r\n    {\r\n        return Page();\r\n    }\r\n\r\n    _context.Attach(Movie).State = EntityState.Modified;\r\n\r\n    try\r\n    {\r\n        await _context.SaveChangesAsync();\r\n    }\r\n    catch (DbUpdateConcurrencyException)\r\n    {\r\n        \r\n    }\r\n\r\n    return RedirectToPage(\"./Index\");\r\n}\r\n```\r\nIt should be\r\n\r\n```cs\r\ncatch (DbUpdateConcurrencyException)\r\n        {\r\n            if (!MovieExists(movie.ID))\r\n            {\r\n                return NotFound();\r\n            }\r\n            else\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/aspnet/Templates/issues/860","RelatedDescription":"Closed issue \"Razor Pages scaffolder eats    DbUpdateConcurrencyException\" (#860)"},{"Id":"248139089","IsPullRequest":false,"CreatedAt":"2017-08-08T04:05:18","Actor":"alexavrutin","Number":"859","RawContent":null,"Title":"r1","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/issues/859","RelatedDescription":"Closed issue \"r1\" (#859)"},{"Id":"238353055","IsPullRequest":false,"CreatedAt":"2017-08-03T18:01:57","Actor":"stevedesmond-ca","Number":"851","RawContent":null,"Title":"Why do non-sentence headers end in a period?","State":"closed","Body":"See https://github.com/aspnet/Templates/blob/dev/src/Rules/StarterWeb/IndividualAuth/Views/Account/ResetPasswordConfirmation.cshtml as an example -- almost all the `<h1>`s have periods after them, when they should more likely be Title Case with no period.","Url":"https://github.com/aspnet/Templates/issues/851","RelatedDescription":"Closed issue \"Why do non-sentence headers end in a period?\" (#851)"},{"Id":"247185643","IsPullRequest":false,"CreatedAt":"2017-08-03T17:58:29","Actor":"Rick-Anderson","Number":"858","RawContent":null,"Title":"Razor Page templates use fully qualified name ","State":"closed","Body":"The constructor uses the FQN when it's not necessary. For example:\r\n\r\nSee [Pages/Movie/Index.cshtml.cs](https://github.com/aspnet/Docs/blob/master/aspnetcore/tutorials/razor-pages/razor-pages-start/sample/RazorPagesMovie/Pages/Movie/Index.cshtml.cs#L14-L16)\r\n\r\n`using RazorPagesMovie.Models;` is in the template.\r\n\r\nTo repro - follow the [Razor Pages tutorial](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model)\r\n","Url":"https://github.com/aspnet/Templates/issues/858","RelatedDescription":"Closed issue \"Razor Page templates use fully qualified name \" (#858)"},{"Id":"246217674","IsPullRequest":false,"CreatedAt":"2017-08-03T17:56:43","Actor":"Rick-Anderson","Number":"857","RawContent":null,"Title":"Templates should use app.UseMvcWithDefaultRoute();","State":"closed","Body":"I recommend the templates use `app.UseMvcWithDefaultRoute();` rather than\r\n\r\n```csharp\r\napp.UseMvc(routes =>\r\n{\r\n    routes.MapRoute(\r\n        name: \"default\",\r\n        template: \"{controller}/{action=Index}/{id?}\");\r\n});\r\n```\r\n\r\nThe more complex code is a barrier to entry for new users who don't need this flexibility. Advanced users will have no problem adding the above code when they need it. The code above doesn't make much sense to Razor Pages developers. Recommend this change for all templates but especially for the Razor Pages template.\r\n\r\ncc @DamianEdwards  - part of the lower the barrier to entry effort.","Url":"https://github.com/aspnet/Templates/issues/857","RelatedDescription":"Closed issue \"Templates should use app.UseMvcWithDefaultRoute();\" (#857)"},{"Id":"244917331","IsPullRequest":false,"CreatedAt":"2017-08-03T17:55:35","Actor":"RehanSaeed","Number":"856","RawContent":null,"Title":"Sharing Common Files Between Templates","State":"closed","Body":"I have a ReadMe.html file which I'd like to share between my project templates. The file is mostly the same for all three templates, except that it contains a few symbols common to all my templates. I'd like to keep one copy of this file and use symbols to define template specific sections.\r\n```\r\n<html>\r\n<p>Common paragraph...</p>\r\n<!--#if MyTemplate1-->\r\n<p>MyTemplate1 paragraph...</p>\r\n<!--#endif-->\r\n<!--#if MyTemplate2-->\r\n<p>MyTemplate2 paragraph...</p>\r\n<!--#endif-->\r\n</html>\r\n```\r\n\r\nI can think of a way this might work without any help from the templating engine: Keep a common copy of the file, then copy the file into the template folders as a pre-packaging step in my build script. The disadvantage is that now I have three copies of my file unless I use a .gitignores file but then I have the extra step of having to remove the .gitignores file from the template output.\r\n\r\nI propose that you should be able to add a file as a link, then mark that file as common in your template.json file. Finally, when generating the project, the file is converted from a linked file, into a real one.\r\n","Url":"https://github.com/aspnet/Templates/issues/856","RelatedDescription":"Closed issue \"Sharing Common Files Between Templates\" (#856)"},{"Id":"244134597","IsPullRequest":false,"CreatedAt":"2017-08-03T17:30:02","Actor":"jkotalik","Number":"855","RawContent":null,"Title":"File new template error for Windows 8.1 32 bit for individual auth.","State":"closed","Body":"Steps:\r\n\r\n1. Download VS2017 Int Preview and dotnet preview3 on Windows 8.1 32 bit.\r\n2. File new... ASP.NET Core app, Web Application with Individual User Accounts Authorization\r\n3. Run application, try to register a new user\r\n\r\nExpected Results: A page would show up saying to apply migrations to the database or the user is registered.\r\nActual Results: SqlException on the SQL Server not being found. \r\n![4fce5f97](https://user-images.githubusercontent.com/8302101/28383504-3b7bf12c-6c76-11e7-91d0-5fe2675924a2.PNG)\r\n\r\n\r\nThe fix I had to do was change the ConnectionStrings' DefaultConnection from mssqllocaldb to ProjectsV12. \r\n\r\nMost likely, we would need to change https://github.com/aspnet/Templates/blob/a594b47c417593d43141d3b4eb2bc41d6ad85f20/src/Rules/StarterWeb/IndividualAuth/appsettings.json#L3 to use a variable for the database.","Url":"https://github.com/aspnet/Templates/issues/855","RelatedDescription":"Closed issue \"File new template error for Windows 8.1 32 bit for individual auth.\" (#855)"},{"Id":"244047453","IsPullRequest":false,"CreatedAt":"2017-07-20T08:45:31","Actor":"dazinator","Number":"854","RawContent":null,"Title":"typescript confiugration file item template","State":"closed","Body":"When the typescript configuration file is added to a project, by default it is \"content\" which also by default means it ends up being included in the nuget package when you do a `dotnet pack`. Given that the typescript configuration file is used primarily at build time, I don't think it should be included in a resulting nuget pack by default. Can it be changed to create this in the `csproj`:\r\n\r\n```\r\n <ItemGroup>\r\n    <Content Update=\"Scripts\\tsconfig.json\">\r\n      <Pack>false</Pack>\r\n    </Content>\r\n  </ItemGroup>\r\n```\r\n\r\nWithout this, if another project takes a dependency on this nuget package, you get build errors like this:\r\n\r\n```\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tTS18003\tBuild:No inputs were found in config file 'C:/Users/darrell.tunnell/.nuget/packages/gluon.module.themeswitcher/2.0.0/contentFiles/any/net452/Scripts/tsconfig.json'. Specified 'include' paths were '[\"**/*\"]' and 'exclude' paths were '[\"node_modules\",\"wwwroot\"]'.\tReach.GCv3.Mvc.Module.CompanyLogo\tC:\\Users\\darrell.tunnell\\Source\\Repos\\gc3-website\\src\\Reach.GCv3.Mvc.Module.CompanyLogo\\tsc\t1\t\r\n\r\n\r\n```\r\n\r\ni.e VS is doscovering the typescript configuration files within referenced nuget packages!","Url":"https://github.com/aspnet/Templates/issues/854","RelatedDescription":"Closed issue \"typescript confiugration file item template\" (#854)"},{"Id":"240276652","IsPullRequest":true,"CreatedAt":"2017-07-05T16:50:58","Actor":"ryanbrandenburg","Number":"853","RawContent":null,"Title":"Remove PackageTargetFallback","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/853","RelatedDescription":"Closed or merged PR \"Remove PackageTargetFallback\" (#853)"},{"Id":"239518221","IsPullRequest":true,"CreatedAt":"2017-07-05T14:09:36","Actor":"scottaddie","Number":"852","RawContent":null,"Title":"Clarify password reset sentence in ForgotPassword view","State":"closed","Body":"The `ForgotPassword.cshtml` view includes a sentence which was missing a comma and reversed the words \"reset\" and \"password\".\r\n\r\n/cc: @phenning @mlorbetske ","Url":"https://github.com/aspnet/Templates/pull/852","RelatedDescription":"Closed or merged PR \"Clarify password reset sentence in ForgotPassword view\" (#852)"},{"Id":"233959214","IsPullRequest":false,"CreatedAt":"2017-06-06T16:59:43","Actor":"mlorbetske","Number":"850","RawContent":null,"Title":"File new default names inconsistency.","State":"open","Body":"_From @Bartmax on July 24, 2015 2:48_\n\nAll items in the file new dialog (client side) default names kind of follows a pattern but it's not consistent:\n\nStyleSheet.css\nJavaScript.js\nhtmlpage.html (all lowercase)\nCoffeeScript.coffee\njson-schema.json\npackage.json\netc.\n\nSome must have a specific name (like package.json) while others just reflect the file type. \n\nI see 2 inconsistencies here:\n\n1) casing is inconsistent.\n2) TypeScript it suggest file.ts instead of TypeScript.ts\n\n\n_Copied from original issue: aspnet/Tooling#118_","Url":"https://github.com/aspnet/Templates/issues/850","RelatedDescription":"Open issue \"File new default names inconsistency.\" (#850)"},{"Id":"233568569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:14:20","Actor":"neman","Number":"849","RawContent":null,"Title":"Unable to install nuget template","State":"closed","Body":"I created nuget template. When I try to install it, I got the following error at the end\r\n\r\n```C:\\Program Files\\dotnet\\sdk\\1.0.4\\NuGet.targets(97,5): error : Unable to resolve 'Test.Templates' for '.NETCoreApp,Version=v1.0'. [C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj]\r\n\r\nGenerating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.targets.\r\n  Writing lock file to disk. Path: C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\project.assets.json\r\n  Restore failed in 13,16 sec for C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj.\r\n\r\n  Errors in C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj\r\n      Unable to resolve 'BIB.Templates' for '.NETCoreApp,Version=v1.0'.\r\n\r\n  NuGet Config files used:\r\n      C:\\Users\\nemke\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n      C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n\r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\n      C:\\local-nuget\r\n      C:\\Users\\nemke\\.dotnet\\NuGetFallbackFolder\r\n      C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n```\r\n\r\n#### dotnetinfo\r\n\r\n```\r\nC:\\Temp> dotnet --info\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002111-00\r\n  Build    : 1ff021936263d492539399688f46fd3827169983\r\n``` \r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/849","RelatedDescription":"Closed issue \"Unable to install nuget template\" (#849)"},{"Id":"233555569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:13:42","Actor":"neman","Number":"848","RawContent":null,"Title":"Wrong CLI command for template installation at nuget.org","State":"closed","Body":"When I go tu nuget.org to search for some template I got the following page for link https://www.nuget.org/packages/NetEscapades.Templates/\r\n\r\n![image](https://cloud.githubusercontent.com/assets/350314/26781234/bf4cc98c-49ed-11e7-9e4a-08bb168b6c62.png)\r\n\r\nThe command instruct to use `Install-Package NetEscapades.Templates` which does not work. \r\n\r\n```\r\nInstall-Package NetEscapades.Templates\r\nInstall-Package : No match was found for the specified search criteria and package name 'NetEscapades.Templates'. Try Get-PackageSource to see all available registered p ackage sources.\r\nAt line:1 char:1\r\n+ Install-Package NetEscapades.Templates\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n```\r\nThe correct command is `dotnet new --install \"NetEscapades.Templates::*\"`\r\n\r\nWill this be fixed in future release?  Which will be the correct CLI command?\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/848","RelatedDescription":"Closed issue \"Wrong CLI command for template installation at nuget.org\" (#848)"},{"Id":"226082169","IsPullRequest":true,"CreatedAt":"2017-05-03T18:58:53","Actor":"phenning","Number":"846","RawContent":null,"Title":"Revert \"Add MVC precompilation package for 1.1\"","State":"closed","Body":"This reverts commit 461cd822646505fb53c6b0ac416af3780e32578f.\r\n\r\n# Conflicts:\r\n#\tsrc/BaseTemplates/StarterWeb/StarterWeb.csproj\r\n#\tsrc/Templates.xml","Url":"https://github.com/aspnet/Templates/pull/846","RelatedDescription":"Closed or merged PR \"Revert \"Add MVC precompilation package for 1.1\"\" (#846)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"329605262","IsPullRequest":false,"CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Number":"1075","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"open","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","Url":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Open issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#1075)"},{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"268293817","IsPullRequest":false,"CreatedAt":"2018-05-17T02:25:02","Actor":"Pichasepong","Number":"1060","RawContent":null,"Title":"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. ","State":"closed","Body":"Problems installing on Server 2012 R2 ,Dot net core 1.0.1 vs 2015 tooling preview 2 error logs file.\r\n\r\n![product_dotnetcoreerror](https://user-images.githubusercontent.com/12063904/31985990-040a5f72-b991-11e7-9356-ddd06160a87c.jpg)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1060","RelatedDescription":"Closed issue \"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. \" (#1060)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"TheConservativeCoder","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"},{"Id":"273994049","IsPullRequest":true,"CreatedAt":"2018-01-07T03:48:49","Actor":"cartermp","Number":"1062","RawContent":null,"Title":"Update migrate-sql-server.md","State":"closed","Body":"Removed product links in favor of all docs links, changed wording slightly, and moved Get Started to be at the top.","Url":"https://github.com/aspnet/Tooling/pull/1062","RelatedDescription":"Closed or merged PR \"Update migrate-sql-server.md\" (#1062)"},{"Id":"274003770","IsPullRequest":true,"CreatedAt":"2017-11-15T02:15:11","Actor":"cristy","Number":"1064","RawContent":null,"Title":"Re adding","State":"closed","Body":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end...","Url":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Closed or merged PR \"Re adding\" (#1064)"},{"Id":"273996633","IsPullRequest":true,"CreatedAt":"2017-11-15T01:03:12","Actor":"cristy","Number":"1063","RawContent":null,"Title":"Webapp landing page","State":"closed","Body":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make.","Url":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Closed or merged PR \"Webapp landing page\" (#1063)"},{"Id":"273873058","IsPullRequest":true,"CreatedAt":"2017-11-14T17:26:42","Actor":"cartermp","Number":"1061","RawContent":null,"Title":"Create migrate-sql-server.md","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1061","RelatedDescription":"Closed or merged PR \"Create migrate-sql-server.md\" (#1061)"},{"Id":"258233429","IsPullRequest":false,"CreatedAt":"2017-09-16T14:09:00","Actor":"ctopher31","Number":"1059","RawContent":null,"Title":"Turn off file nesting in Visual Studio 2017","State":"closed","Body":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n","Url":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Closed issue \"Turn off file nesting in Visual Studio 2017\" (#1059)"},{"Id":"257312054","IsPullRequest":false,"CreatedAt":"2017-09-14T00:50:29","Actor":"svallis","Number":"1058","RawContent":null,"Title":"Views in class libraries removed from embedded resources under certain circumstances","State":"closed","Body":"I have a test repo which should hopefully demonstrate this problem, and I hope this is the correct repo for the issue.\r\n\r\nhttps://github.com/svallis/precompilation-classlib\r\n\r\nIf you clone and open this solution and perform the following, the issue should be clear. First, the expected results is what happens when adding views to `app`:\r\n\r\n- Go to `app1\\Views\\Home` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `app1` remains unchanged\r\n\r\nNow perform the same process on `lib1`:\r\n\r\n- Go to `lib1\\Views\\Shared` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `lib1` has the following added to it\r\n\r\n```\r\n<ItemGroup>\r\n    <EmbeddedResource Remove=\"Views\\Shared\\Test - Copy.cshtml\" />\r\n</ItemGroup>\r\n```\r\n\r\nAs you can imagine this is highly frustrating during development, and we're constantly running into it while developing features within a library. I don't know if it's an outright bug, or whether we could improve the existing rules in the `.csproj` for the library. Whatever changes are made to the library project file need to preserve existing functionality though, so that views are not included in the publish output and are embedded in the assembly. This allows everything to work both during development and after publishing with precompiled views.","Url":"https://github.com/aspnet/Tooling/issues/1058","RelatedDescription":"Closed issue \"Views in class libraries removed from embedded resources under certain circumstances\" (#1058)"},{"Id":"257171895","IsPullRequest":false,"CreatedAt":"2017-09-12T20:33:21","Actor":"shirhatti","Number":"1057","RawContent":null,"Title":"Support for multi-line string values","State":"open","Body":"_From @alexvy86 on August 3, 2017 21:11_\n\nI'm using Akka.NET in a project and the way they do configuration is not-quite-JSON, but still a hierarchical structure, which I haven't been able to successfully integrate into `appsettings.json`. The only way I've been able to do it is to collapse all of their hierarchy into a single-line string value, which makes it a bit of a pain to work with.\r\n\r\nFor now I just put the whole thing as CDATA in an XML file and use the `AddXmlFile()` extension from `Microsoft.Extensions.Configuration.Xml` to read it, but it'd be preferable to have it in `appsetings.json`.\n\n_Copied from original issue: aspnet/Configuration#703_","Url":"https://github.com/aspnet/Tooling/issues/1057","RelatedDescription":"Open issue \"Support for multi-line string values\" (#1057)"},{"Id":"254062749","IsPullRequest":false,"CreatedAt":"2017-08-31T04:38:52","Actor":"matthewDDennis","Number":"1056","RawContent":null,"Title":"Docker tools fail if multiple TFMs in project file","State":"closed","Body":"If you modify your projects to have multiple frameworks with the `<TargetFrameworks>` tag, then the Docker tools does not know which framework to use as there is no `<TargetFramework>` tag.\r\n\r\nAdding the `<TargetFramework>`netcoreapp1.1`<...>` fixes the problem in Visual Studio and all the frameworks build and can debug with Docker.\r\n\r\nHowever, if you try and build a framework other than the netcoreapp1.1 with the DotNet CLI, it fails as it, as the documentation states, will ignore the `<TargetFrameworks>` tag if the `<TargetFramework>` tag is present \r\n","Url":"https://github.com/aspnet/Tooling/issues/1056","RelatedDescription":"Closed issue \"Docker tools fail if multiple TFMs in project file\" (#1056)"},{"Id":"249781859","IsPullRequest":true,"CreatedAt":"2017-08-14T15:57:44","Actor":"balachir","Number":"1055","RawContent":null,"Title":"Update known-issues-vs2017.md for VS 15.3 RTW","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1055","RelatedDescription":"Closed or merged PR \"Update known-issues-vs2017.md for VS 15.3 RTW\" (#1055)"},{"Id":"247941709","IsPullRequest":false,"CreatedAt":"2017-08-05T03:07:41","Actor":"snebjorn","Number":"1054","RawContent":null,"Title":"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime","State":"closed","Body":"Hi, I'm curious about how you made Browser Link inject a custom script into the page body at runtime.\r\nI have to do something similar (ritterim/stuntman#158) so wondering if you've willing to share the implementation :)\r\n\r\nI also made a [stackoverflow post](https://stackoverflow.com/questions/45501245/programmatically-inject-custom-script-into-page-body-at-runtime-like-browser-l)\r\n\r\nThanks","Url":"https://github.com/aspnet/Tooling/issues/1054","RelatedDescription":"Closed issue \"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime\" (#1054)"},{"Id":"247229183","IsPullRequest":false,"CreatedAt":"2017-08-02T06:18:35","Actor":"halter73","Number":"1053","RawContent":null,"Title":"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly","State":"closed","Body":"Given the launchSettings.json and Program.cs below, it seems that the ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly when launching both the \"IIS Express\" or \"WebApplication1\" profiles from VS 2017 26730.0.d15rel and dotnet sdk 2.0.0-preview3-006889.\r\n\r\n\r\n#### Expected output for \"IIS Express\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"IIS Express\" profile launched from VS (App Insights is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration'\r\n```\r\n\r\n#### Expected output for \"WebApplication1\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched from VS (HostingStartup1 is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched using \"dotnet run\" (Behaves as expected)\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1'\r\n```\r\n\r\n#### launchSettings.json\r\n```json\r\n{\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:61008/\",\r\n      \"sslPort\": 0\r\n    }\r\n  },\r\n  \"profiles\": {\r\n    \"IIS Express\": {\r\n      \"commandName\": \"IISExpress\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      }\r\n    },\r\n    \"WebApplication1\": {\r\n      \"commandName\": \"Project\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      },\r\n      \"applicationUrl\": \"http://localhost:61010/\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Program.cs\r\n```C#\r\nusing Microsoft.AspNetCore;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing System;\r\n\r\nnamespace WebApplication1\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            BuildWebHost(args).Run();\r\n        }\r\n\r\n        public static IWebHost BuildWebHost(string[] args)\r\n        {\r\n            Console.WriteLine(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES: '{0}'\", Environment.GetEnvironmentVariable(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\"));\r\n\r\n            return WebHost.CreateDefaultBuilder(args)\r\n                .UseStartup<Startup>()\r\n                .Build();\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1053","RelatedDescription":"Closed issue \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly\" (#1053)"},{"Id":"245422589","IsPullRequest":false,"CreatedAt":"2017-07-28T17:44:59","Actor":"varora1406","Number":"1052","RawContent":null,"Title":"Add-Migration command not working.","State":"closed","Body":"IDE : visual studio 15.3 preview 5.0\r\n.net core 2.0\r\nProject : .Net core web application (Angular template) including (Angular v4)\r\n\r\nSteps to reproduce:\r\n* Create a new project and all required nuget packages.\r\n![image](https://user-images.githubusercontent.com/24986539/28577409-559354a8-7174-11e7-9dfb-26cc7efc1228.png)\r\n\r\n* Try to use Add-Migration command. (Don't worry, context classes and rest have been done)\r\n- Result : The term 'Add-Migration' is not recognized as the name of a cmdlet, function, script file, or operable program. \r\n![image](https://user-images.githubusercontent.com/24986539/28577463-81e914c0-7174-11e7-97eb-5cd2a5fb3e28.png)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1052","RelatedDescription":"Closed issue \"Add-Migration command not working.\" (#1052)"},{"Id":"241453336","IsPullRequest":false,"CreatedAt":"2017-07-08T14:19:58","Actor":"RandyBuchholz","Number":"1051","RawContent":null,"Title":"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"","State":"open","Body":"There was a compatibility error with Microsoft.Composition. This is being addressed https://github.com/dotnet/corefx/issues/18452.\r\n\r\nCodeGeneration.Design is still referencing the old version and gives:\r\nPackage 'Microsoft.Composition 1.0.27' was restored using '.NETFramework,Version=v4.6.1' instead the project target framework...\r\n\r\nThe correct version is 1.0.31.\r\n\r\n![image](https://user-images.githubusercontent.com/13967891/27986052-85abdeee-63be-11e7-9b53-ec7a6199d628.png)\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1051","RelatedDescription":"Open issue \"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"\" (#1051)"},{"Id":"237065229","IsPullRequest":false,"CreatedAt":"2017-07-05T16:21:28","Actor":"Jerajo","Number":"1047","RawContent":null,"Title":"Tooling Preview 2 don't recognize VS 2015 Update 3","State":"closed","Body":"Here is my VS 2015.\r\n\r\n![image](https://user-images.githubusercontent.com/26252994/27312048-4fe10f30-5533-11e7-8319-e09f99059615.png)\r\n\r\nHere is the Error.\r\n\r\n![image](https://user-images.githubusercontent.com/26252994/27312066-8be0e6ea-5533-11e7-9f9e-ada4da2187e4.png)\r\n\r\nLook the Log File.\r\n\r\netc...\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: WebToolsAzureVWD14_trk, state: Absent, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: DotNetToolsVS14_trk, state: Absent, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: DotNetToolsVWD14_trk, state: Absent, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: Preparation_ASPNET, state: Absent, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: SetupBlocked_Uninstall, state: Present, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i052: Condition 'WixBundleInstalled OR NOT(NetFx45Release < 378675) OR (WixBundleAction=2)' evaluates to true.\r\n[0DBC:1AB0][2017-06-19T21:09:04]i052: Condition 'WixBundleInstalled OR VS2015DevEnvExists OR VS2015WebExpressExists OR (WixBundleAction=2)' evaluates to true.\r\n[0DBC:1AB0][2017-06-19T21:09:04]i052: Condition 'WixBundleInstalled OR (((VS2015CommunityUpdateVersion >= v14.0.25420) OR (VS2015ProfessionalUpdateVersion >= v14.0.25420) OR (VS2015EnterpriseUpdateVersion >= v14.0.25420)) OR (VS2015WebExpressUpdateVersion >= v14.0.25420)) OR (SKIP_VSU_CHECK=1) OR (WixBundleAction=2)' evaluates to false.\r\n[0DBC:1AB0][2017-06-19T21:09:04]e000: \r\n### This product requires Visual Studio 2015 Update 3 or later. Please install Visual Studio 2015 Update 3 or later, then install this product again.\r\n[0DBC:1AB0][2017-06-19T21:09:04]e000: Error 0x81f40001: Bundle condition evaluated to false: WixBundleInstalled OR (((VS2015CommunityUpdateVersion >= v14.0.25420) OR (VS2015ProfessionalUpdateVersion >= v14.0.25420) OR (VS2015EnterpriseUpdateVersion >= v14.0.25420)) OR (VS2015WebExpressUpdateVersion >= v14.0.25420)) OR (SKIP_VSU_CHECK=1) OR (WixBundleAction=2)\r\n[0DBC:1AB0][2017-06-19T21:09:04]i199: Detect complete, result: 0x0","Url":"https://github.com/aspnet/Tooling/issues/1047","RelatedDescription":"Closed issue \"Tooling Preview 2 don't recognize VS 2015 Update 3\" (#1047)"},{"Id":"235890200","IsPullRequest":false,"CreatedAt":"2017-07-04T19:25:48","Actor":"guylando","Number":"1046","RawContent":null,"Title":"visual studio 2017 built in web code analysis disabled for big files","State":"closed","Body":"I can't find the configuration where i could specify the file size for this limitation. any ideas?\r\nThe right click on a big css\\js file has the \"run code analysis\" button missing and the auto analysis is disabled too.\r\nNo documentation anywhere.\r\nBarely any relevant google results for visual studio \"web code analysis\".\r\nWhere is this feature documentation??","Url":"https://github.com/aspnet/Tooling/issues/1046","RelatedDescription":"Closed issue \"visual studio 2017 built in web code analysis disabled for big files\" (#1046)"},{"Id":"238392758","IsPullRequest":false,"CreatedAt":"2017-07-04T19:13:11","Actor":"miloush","Number":"1048","RawContent":null,"Title":"Adding application manifest ","State":"closed","Body":"The project properties designer asks me to add manifest to the project first before it can be selected:\r\n![untitled](https://user-images.githubusercontent.com/10546952/27518138-8a52e322-59d0-11e7-99b8-78a31d72e1a3.png)\r\n\r\nHowever, there does not seem to be a manifest template in the Add New Item list for ASP.NET Core projects.\r\n\r\nEither add the manifest template, or let the properties designer generate it, or change the \"default settings\" to declare newer OS support.","Url":"https://github.com/aspnet/Tooling/issues/1048","RelatedDescription":"Closed issue \"Adding application manifest \" (#1048)"},{"Id":"239635705","IsPullRequest":true,"CreatedAt":"2017-06-29T23:09:22","Actor":"anangaur","Number":"1050","RawContent":null,"Title":"Update known-issues-vs2017-preview.md","State":"open","Body":"Removed \"No workaround...\" as there is a workaround","Url":"https://github.com/aspnet/Tooling/pull/1050","RelatedDescription":"Open PR \"Update known-issues-vs2017-preview.md\" (#1050)"},{"Id":"239016783","IsPullRequest":true,"CreatedAt":"2017-06-28T20:04:41","Actor":"balachir","Number":"1049","RawContent":null,"Title":"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1049","RelatedDescription":"Closed or merged PR \"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2\" (#1049)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"329851587","IsPullRequest":false,"CreatedAt":"2018-06-06T13:30:30","Actor":"ToLearnMoe","Number":"304","RawContent":null,"Title":"怎么找工作啊","State":"closed","Body":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n","Url":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Closed issue \"怎么找工作啊\" (#304)"},{"Id":"329603099","IsPullRequest":false,"CreatedAt":"2018-06-05T20:11:55","Actor":"AngelosP","Number":"303","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"closed","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\r\n\r\nFor discussion, use https://github.com/aspnet/Tooling/issues/1075","Url":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Closed issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303)"},{"Id":"327435771","IsPullRequest":false,"CreatedAt":"2018-05-29T18:26:40","Actor":"shirhatti","Number":"302","RawContent":null,"Title":"IIS in-process hosting moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving IIS in-process hosting out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will ship IIS in-process hosting as part of the ASP.NET Core 2.2 release.\r\n\r\n### Why?\r\n\r\nIIS in-process hosting  is a brand new server implementation and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/IISIntegration/issues/878","Url":"https://github.com/aspnet/Announcements/issues/302","RelatedDescription":"Open issue \"IIS in-process hosting moved out of ASP.NET Core 2.1\" (#302)"},{"Id":"322891671","IsPullRequest":false,"CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Number":"301","RawContent":null,"Title":"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available","State":"open","Body":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Open issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301)"},{"Id":"321270218","IsPullRequest":false,"CreatedAt":"2018-05-08T17:07:04","Actor":"blowdart","Number":"300","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2553\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_","Url":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300)"},{"Id":"320441265","IsPullRequest":false,"CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Number":"299","RawContent":null,"Title":"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/WebHooks/issues/296","Url":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Open issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299)"},{"Id":"309862672","IsPullRequest":false,"CreatedAt":"2018-03-29T18:44:48","Actor":"glennc","Number":"298","RawContent":null,"Title":"Migrating from aspnetcore docker repos to dotnet","State":"open","Body":"Starting with .NET Core 2.1-preview2, we intend to migrate from using the microsoft/aspnetcore-build and microsoft/aspnetcore Docker repos to the microsoft/dotnet Docker repo.  We will continue to ship patches and security fixes for the existing aspnetcore images but any new images for 2.1 and higher will be pushed to microsoft/dotnet.\r\n\r\nDockerfiles using `microsoft/aspnetcore:<version>` should change to `microsoft/dotnet:<version>-aspnetcore-runtime`.\r\n\r\nDockerfiles using `microsoft/aspnetcore-build` that do not require Node should just change to `microsoft/dotnet:<version>-sdk`.\r\n\r\nDockerfiles using Node from the `microsoft/aspnetcore-build` image will either need to install Node into their own image or use mult-stage builds as described in the Dockerfile examples at the end of this announcement.\r\n\r\nThe `ASPNETCORE_URLS` env var that allows ASP.NET Core apps to accept traffic from outside the container will be set in all the `dotnet` images, which was a common early stumbling block for people getting started with ASP.NET Core and Docker. PR is [here](https://github.com/dotnet/dotnet-docker/pull/450)\r\n\r\n### Why the merge?\r\n\r\nFor some time we have been seeing people search for and find the `microsoft/dotnet` images and never realise that there are aspnetcore ones. This could be problematic in the past as the dotnet images were not optimised for ASP.NET Core, making things a little harder or slower. But with changes in the way ASP.NET Core works in 2.1 it was going to be much more impactful, in that ASP.NET Core applications were not likely to run on the base dotnet image. Given that we also thought it made more sense to have a single repository for all images, as ASP.NET is just part of .NET, we are taking this opportunity to remove the potential source of confusion and wasted time for our customers.\r\n\r\n### Why no Node?\r\nThere are two main reasons for this:\r\n\r\n  1. Multi-stage build now makes it easier to pull in the Node image for purely build concerns.\r\n  2. The ASP.NET Core templates no longer have a hard dependency on Node.\r\n\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n\r\n### Dockerfile examples\r\n\r\nIf you need Node then you will need to add it in your own Dockerfile, like this:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n#setup node\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\n# copy everything else and build\r\nCOPY . ./\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n#setup node, this is only needed if you use Node both at runtime and build time. Some people may only need the build part.\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nIf you only need Node at build then you may also be able to take advantage of multi-stage build like the following:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\nFROM node as clientBuild\r\n#Do npm restore and other Node stuff.\r\n\r\n#Merge the contents of your .NET build env and your clientBuild and publish.\r\nFROM build-env as publish\r\n# copy everything else and build\r\nCOPY --from=clientBuild . .\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n\r\nCOPY --from=publish /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n","Url":"https://github.com/aspnet/Announcements/issues/298","RelatedDescription":"Open issue \"Migrating from aspnetcore docker repos to dotnet\" (#298)"},{"Id":"305936138","IsPullRequest":false,"CreatedAt":"2018-03-16T14:09:54","Actor":"mnmr","Number":"297","RawContent":null,"Title":"Model binding accesses read-only properties in post-back","State":"closed","Body":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355.","Url":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297)"},{"Id":"305310538","IsPullRequest":false,"CreatedAt":"2018-03-14T20:08:36","Actor":"halter73","Number":"296","RawContent":null,"Title":"Managed sockets will replace libuv as Kestrel's default transport","State":"open","Body":"Starting in ASP.NET Core 2.1.0, managed sockets will be replacing libuv as Kestrel's default transport.\r\n\r\nThis change should only break applications that bind to non-TCP endpoints or explicitly call `IWebHostBuilder.UseLibuv()` and reference the libuv transport transitively through the Microsoft.AspNetCore.App and/or Microsoft.AspNetCore.Server.Kestrel NuGet packages.\r\n\r\nTo fix the break simply add a reference to Microsoft.AspNetCore.All and/or Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nWhile switching to the managed socket transport should be seamless<sup>1</sup>, if you want to continue using the libuv transport in 2.1.0 you will need to explicitly call `UseLibuv()` and reference the libuv transport either directly or through the \"All\" metapackage.\r\n\r\n<sup>1</sup> Unless you are trying to bind to a Unix domain socket or use systemd socket activation. As of 2.1, only the libuv transport supports binding to these kinds of endpoints.\r\n\r\n---\r\n\r\n*Please use aspnet/KestrelHttpServer#2360 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/296","RelatedDescription":"Open issue \"Managed sockets will replace libuv as Kestrel's default transport\" (#296)"},{"Id":"304854672","IsPullRequest":false,"CreatedAt":"2018-03-13T17:07:23","Actor":"blowdart","Number":"295","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\r\n\r\n## Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core versions 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where an elevation of privilege vulnerability exists when a ASP.NET Core web application fails to validate web requests correctly.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Home/issues/2954\r\n\r\n### Mitigation factors\r\n\r\nSites are not vulnerable to this elevation of privilege when:\r\n\r\n* The site is hosted behind a proxy, such as Internet Information Services (IIS), NGINX, or Apache, where:\r\n\r\n  * The proxy validates the host header, and\r\n  * The proxy is configured to listen on fully qualified domain names or\r\n  * The proxy is configured with a wildcard subdomain where the root domain is fully controlled by the site owner.\r\n\r\nFor example, if IIS is configured to respond to requests for `contoso.com` or `*.contoso.com` hosts, the application is protected.\r\n\r\nIf IIS is configured to respond to any request from any host, the application is vulnerable.\r\n\r\nKestrel does not have the capability to validate host headers and is vulnerable if not placed behind a proxy that performs the host header validation.\r\n\r\nApps hosted in Azure Web Apps are not susceptible to this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core hosted application which is directly exposed to the internet, or hosted behind a proxy which does not validate or restict host headers to known good values.\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.HttpOverrides | 2.0.0, 2.0.1 |  2.0.2 and later\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1 |  2.0.2 and later\r\n\r\n*No patches are available for ASP.NET Core 1.0.x or ASP.NET Core 1.1.x. Microsoft requires that you place your 1.x ASP.NET Core application behind a proxy.\r\nYou must address the configuration of your proxy to protect your application. If you're not running ASP.NET Core 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0.\r\nand add the host validating middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/.*\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected?\r\n\r\nReview the server and proxy configuration [instructions](#configuration) below to see if your system is configured correctly, and adjust the configuration if necessary.\r\n\r\n### How do I fix the issue?\r\n\r\nYou must address the [configuration](#configuration) of your server or proxy to protect your application to limit requests to known hosts.\r\n\r\nIf you're not running Kestrel 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0 and follow the 2.0 instructions below.\r\n\r\nASP.NET Core 2.0.x applications must [update your code](#app-update) to fully protect your application.\r\n\r\n#### <a name=\"configuration\"></a> Server and Proxy configuration\r\n\r\nYou must examine your externally facing server or proxy configuration and ensure it requires host headers with fully qualified domain names, or known sub-domains if you are using sub-domain wild cards.\r\n\r\n##### ASP.NET Core applications behind [IIS](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/)\r\n\r\nTo configure IIS to only respond to know hosts:\r\n\r\n* Open IIS Manager.\r\n* Expand the **Sites** node for the machine you want to configure.\r\n* Select the site by clicking on the site.\r\n* In the **Actions** list on the right-hand side of IIS Manager, click **Bindings**.\r\n* Edit any bindings that do not have a host name to specify one. Do not use a `*` wildcard unless it's against a domain under your control. For example, `*.contoso.com` is safe, `*.com` is not.\r\n\r\n##### ASP.NET Core applications running publicly on [Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel)\r\n\r\nKestrel does not have the capability to validate host headers. It must either be placed behind a proxy that performs the host header validation or the validation must be performed within the application by adding  host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/. You must also [update your dependencies](#app-update) to fully protect your application.\r\n\r\n##### ASP.NET Core applications running on [HTTP.SYS](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys)\r\n\r\nTo configure URL prefixes and ports, you can use the `UseUrls` extension method, the `urls` command-line argument, the ASPNETCORE_URLS environment variable, or the `UrlPrefixes` property on [HttpSysOptions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.httpsys.httpsysoptions). The following code example uses `UrlPrefixes`.\r\n\r\n```c#\r\npublic static IWebHost BuildWebHost(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n        .UseStartup<Startup>()\r\n        .UseHttpSys(options =>\r\n        {\r\n            // The following options are set to default values.\r\n            options.Authentication.Schemes = AuthenticationSchemes.None;\r\n            options.Authentication.AllowAnonymous = true;\r\n            options.MaxConnections = null;\r\n            options.MaxRequestBodySize = 30000000;\r\n            options.UrlPrefixes.Add(\"http://localhost:5000\");\r\n        })\r\n        .Build();\r\n```\r\n\r\n##### ASP.NET Core applications behind [NGINX](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx)\r\n\r\nTo configure NGINX as a reverse proxy to forward requests to your ASP.NET Core app, replace the contents */etc/nginx/sites-available/default* with the following:\r\n\r\n```NGINX\r\nserver {\r\n    listen        80;\r\n    server_name   example.com *.example.com;\r\n    location / {\r\n        proxy_pass         http://localhost:5000;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header   Upgrade $http_upgrade;\r\n        proxy_set_header   Connection keep-alive;\r\n        proxy_set_header   Host $host;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n}\r\n```\r\n\r\nNote that with NGINX, when there is no match for `server_name`, NGINX will pick the default server. If no default server has been defined, the first server in the conf file is the default server. Best practice is to add a specific default server which returns a status code of 444 in the conf file. An example default server configuration would be as follows:\r\n\r\n```NGINX\r\nserver {\r\n    listen   80 default_server;\r\n    # listen [::]:80 default_server deferred;\r\n    return   444;\r\n}\r\n```\r\n\r\nWith the preceding configuration file and default server, NGINX accepts public traffic on port 80 with host header `example.com` or `*.example.com`. Requests not matching these hosts won't get forwarded to Kestrel. NGINX forwards the matching requests to Kestrel at `http://localhost:5000`. See [How nginx processes a request](https://nginx.org/docs/http/request_processing.html) for more information.\r\n\r\nOnce the NGINX configuration is established, run `sudo nginx -t` to verify the syntax of the configuration files. If the configuration file test is successful, force NGINX to pick up the changes by running `sudo nginx -s reload`.\r\n\r\n##### ASP.NET Core applications behind [Apache](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache)\r\n\r\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the `*.conf*` extension:\r\n\r\n* Is processed in alphabetical order, and\r\n* The module configuration files in `/etc/httpd/conf.modules.d/` are processed. The module configuration files in `/etc/httpd/conf.modules.d/` contain any configuration files necessary to load modules.\r\n\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyPass / http://127.0.0.1:5000/\r\n    ProxyPassReverse / http://127.0.0.1:5000/\r\n    ServerName www.example.com\r\n    ServerAlias *.example.com\r\n</VirtualHost>\r\n```\r\n\r\nThe `VirtualHost` block can appear multiple times, in one or more files on a server. In the preceding configuration file, Apache accepts public traffic on port 80. The domain `www.example.com` is being served, and the `*.example.com` alias resolves to the same website. See [Name-based virtual host support](https://httpd.apache.org/docs/current/vhosts/name-based.html) for more information. Requests are proxied at the root to port 5000 of the server at 127.0.0.1. For bi-directional communication, `ProxyPass` and `ProxyPassReverse` are required.\r\n\r\nSave the file and test the configuration. If everything passes, the response is `Syntax [OK]`.\r\n\r\n```bash\r\nsudo service httpd configtest\r\n```\r\n\r\nRestart Apache:\r\n\r\n```bash\r\nsudo systemctl restart httpd\r\nsudo systemctl enable httpd\r\n```\r\n\r\n\r\n#### <a name=\"app-update\"></a> ASP.NET Core 2.0 application code updates\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.6 or later.\r\n* Updating will pull in the fixed packages listed above.\r\n\r\nIf you're targeting .NET Framework, update the packages listed above to their safe version or later.\r\n\r\nIf your application is using Kestrel without a proxy or the HttpOverrides functionality (UseForwardedHeaders with ForwardedHost) you must also add the host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/tree/release/2.0/samples/HostFilteringSample/.\r\n\r\n---\r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. You must follow the update instructions below to address both types of dependency.\r\n\r\n### Direct dependencies\r\n\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on `Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file.\r\n\r\n### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Core\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the vulnerable metapackage, as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.5.\r\n\r\nTo update the version to the secure package, change the version number to a secure package version. In this example, update `Microsoft.AspNetCore.All` to 2.0.6 or later. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Framework\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a reference to a single package, as seen by the `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.HttpOverrides` version 2.0.1.\r\n\r\nTo update to the secure package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.HttpOverrides` to 2.0.2 and later. Save the *csproj* file. The updated and secure *csproj* look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependency version.\r\n\r\n##### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to a compatible version. \r\n\r\nFor example if your project refers directly to `Microsoft.AspNetCore.Mvc.Cors` with a version number of `2.0.0`, when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your *project.json* in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n###### Reviewing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review the *project.assets.json* file.\r\n\r\n###### Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names above and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example, the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n###### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file. Visual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the vulnerable versions table above.\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your *project.assets.json* file includes references to any of the vulnerable packages shown above, then you need to fix the transitive dependencies.\r\n\r\n###### Overriding transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages this means:\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned, you must add a direct dependency to the updated version by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referring the fixed version.\r\nFor example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.HttpOverrides` version 2.0.0 you would add a reference to the fixed version, that is, 2.0.2 or later.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverride\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n###### Rebuilding your application\r\n\r\nRebuild your application. Test and deploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0787)\r\n\r\n### Revisions\r\n\r\nV1.1 (Mar 15, 2018): NGINX configuration instructions updated, thanks to @buglloc\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-03-15_","Url":"https://github.com/aspnet/Announcements/issues/295","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\" (#295)"},{"Id":"304853568","IsPullRequest":false,"CreatedAt":"2018-03-13T17:04:23","Actor":"blowdart","Number":"294","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_","Url":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294)"},{"Id":"303604146","IsPullRequest":false,"CreatedAt":"2018-03-08T19:36:01","Actor":"natemcmaster","Number":"293","RawContent":null,"Title":"Moving official daily builds to the dotnet-core MyGet feed ","State":"open","Body":"As part of ongoing infrastructural changes, we will be moving official daily of ASP.NET Core to the dotnet-core myget feed. This transition will happen over the next few weeks.\r\n\r\n**Old feed:** https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\n**New feed:** https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\nWe recommend updating to use the dotnet-core feed to continue getting the latest daily builds of ASP.NET Core.\r\n\r\nWe are making this change to make it easier for you to pull daily builds that align with the .NET Core CLI and .NET Core runtime. Some of our existing MyGet feeds will continue to exist, but will not be used for official daily builds. Instead, those feeds will only be used for builds of experimental branches of aspnetcore.\r\n\r\nOther useful links:\r\nGallery: https://dotnet.myget.org/gallery/dotnet-core\r\nNuGet v2 source: https://dotnet.myget.org/F/dotnet-core/api/v2\r\nNPM feed: https://dotnet.myget.org/F/dotnet-core/npm/\r\n\r\nPlease use https://github.com/aspnet/Home/issues/2937 for discussion.","Url":"https://github.com/aspnet/Announcements/issues/293","RelatedDescription":"Open issue \"Moving official daily builds to the dotnet-core MyGet feed \" (#293)"},{"Id":"302846756","IsPullRequest":false,"CreatedAt":"2018-03-06T20:07:15","Actor":"natemcmaster","Number":"292","RawContent":null,"Title":"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image","State":"open","Body":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349","Url":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Open issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292)"},{"Id":"301939059","IsPullRequest":false,"CreatedAt":"2018-03-02T23:33:38","Actor":"blowdart","Number":"291","RawContent":null,"Title":"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.","State":"open","Body":"This week saw an announcement of vulnerabilities in  SAML parsing libraries by [DUO Labs](https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations). Whilst no Microsoft implementations were listed we've seen a number of customer questions about this, especially given the recent WS-Fed support added to ASP.NET Core. \r\n\r\nASP.NET and ASP.NET Core rely on libraries from the Windows Identity team. Their investigation shows [their libraries are not vulnerable](https://cloudblogs.microsoft.com/enterprisemobility/2018/03/02/latest-saml-vulnerability-not-present-in-azure-ad-and-adfs/) to this parsing vulnerability, thus any ASP.NET or ASP.NET Core application which uses the default Microsoft SAML libraries or authentication handlers are safe from this exploit.\r\n","Url":"https://github.com/aspnet/Announcements/issues/291","RelatedDescription":"Open issue \"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.\" (#291)"},{"Id":"300752371","IsPullRequest":false,"CreatedAt":"2018-02-27T18:58:59","Actor":"natemcmaster","Number":"290","RawContent":null,"Title":"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300","State":"open","Body":"Starting in .NET Core CLI 2.1.300-preview2, the following tools were added as bundled, top-level commands. These tools previously shipped as NuGet packages.\r\n\r\n - Microsoft.DotNet.Watcher.Tools (aka dotnet-watch)\r\n - Microsoft.EntityFrameworkCore.Tools.DotNet (aka dotnet-ef)\r\n - Microsoft.Extensions.SecretManager.Tools (aka dotnet-user-secrets)\r\n - Microsoft.Extensions.Caching.SqlConfig.Tools (aka dotnet-sql-cache)\r\n\r\nCommands like `dotnet watch`, `dotnet ef`, and `dotnet user-secrets` can be executed on any project without needing to install the command via \"dotnet restore\" or \"dotnet install tool\". The commands are available by default in all projects.\r\n\r\n### Upgrading from stable releases of .NET Core CLI (e.g. 2.1.5)\r\n\r\nUsing these tools as a DotNetCliToolReference will no longer work. If your .csproj file has the following lines, they can be removed.\r\n```xml\r\n<ItemGroup>\r\n   <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.Caching.SqlConfig.Tools\" Version=\"(all versions)\" />\r\n</ItemGroup>\r\n```\r\n\r\n### Upgrading from .NET Core CLI 2.1.300-preview1\r\nFor early-adopters who tried the 2.1.300-preview1 release, you will no longer need to run `dotnet install tool -g` to acquire the following tools:\r\n - dotnet-watch\r\n - dotnet-user-secrets\r\n - dotnet-dev-certs\r\n - dotnet-sql-cache\r\n - dotnet-ef\r\n\r\nIf you had installed these tools in 2.1.300-preview1, you can uninstall them manually by deleting corresponding files from `%USERPROFILE%\\.dotnet\\tools\\` (Windows) or `$HOME/.dotnet/tools` (macOS/Linux).\r\n\r\n**For discussion use https://github.com/aspnet/DotNetTools/issues/399**","Url":"https://github.com/aspnet/Announcements/issues/290","RelatedDescription":"Open issue \"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300\" (#290)"},{"Id":"295436695","IsPullRequest":false,"CreatedAt":"2018-02-08T09:18:21","Actor":"SteveSandersonMS","Number":"289","RawContent":null,"Title":"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)","State":"open","Body":"The `Microsoft.AspNetCore.SpaTemplates` package never shipped in the .NET Core SDK, and never reached an official level of support. The ASP.NET team's development resources are finite, and we think we can deliver more valuable features to ASP.NET developers by focusing elsewhere.\r\n\r\nSo:\r\n\r\n* The `Microsoft.DotNet.Web.Spa.ProjectTemplates` package, containing **Angular**, **React**, and **React+Redux** templates, is **not affected**. This ships in the .NET Core SDK and is officially supported. We continue to invest development effort in this package. We can put *more* time and effort into these SPA templates now the effort isn't so spread out.\r\n* If you have an existing Aurelia/Knockout/Vue project based on our SPA templates, you're not directly affected because these templates are only used to create new projects. You can continue building and shipping your app forever. Obviously we still support and enhance the underlying ASP.NET Core APIs (such as those in JavaScriptServices) that you are using.\r\n* The `Microsoft.AspNetCore.SpaTemplates` package, containing Aurelia, Knockout, and Vue templates, continues to be available, but we'll no longer update it or work on issues related to it.\r\n* We encourage enthusiastic community members to [ship your own `dotnet new` templates](https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates). The `dotnet new` system is extensible for this exact reason. If you want to own the go-to Aurelia/Knockout/Vue project template, now's your chance! You could [fork the ones from `Microsoft.AspNetCore.SpaTemplates`](https://github.com/aspnet/templating/tree/dev/src/Microsoft.AspNetCore.SpaTemplates), or start from scratch depending on what you prefer.\r\n* In the long term, if another JavaScript SPA framework becomes dominant, we will of course consider adding a template for it to the SDK templates package.\r\n\r\nI know this will be irritating to some people, especially those who have worked on PRs for the Aurelia/Knockout/Vue templates. I'm sorry about that! I hope you can understand that our goal is to offer the overall maximum benefit for ASP.NET developers based on the resources available.\r\n\r\nDiscussion for this issue is at https://github.com/aspnet/JavaScriptServices/issues/1522","Url":"https://github.com/aspnet/Announcements/issues/289","RelatedDescription":"Open issue \"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)\" (#289)"},{"Id":"294037619","IsPullRequest":false,"CreatedAt":"2018-02-02T22:04:23","Actor":"danroth27","Number":"288","RawContent":null,"Title":"ASP.NET Core 2.1 high-level planning","State":"open","Body":"*This is high-level only and doesn't include all issues, bugs, etc. from every repo, just intended to give a general idea of release scope and direction.*\r\n\r\nThe following high-level features are planned for the ASP.NET Core 2.1 release:\r\n- **SignalR** - Real-time web framework on ASP.NET Core (https://github.com/aspnet/SignalR/issues/394)\r\n- **HTTPS** - On by default and easy to configure (https://github.com/aspnet/Home/issues/2308)\r\n- **GDPR compliance** - Templates updated with new privacy features (https://github.com/aspnet/Security/issues/1561, https://github.com/aspnet/Identity/issues/1341)\r\n- **Web API conventions** - Rich Swagger support without attributes (https://github.com/aspnet/Mvc/issues/6870, https://github.com/aspnet/Mvc/issues/6784)\r\n- **IHttpClientFactory** - HttpClient as a service, handle cross-cutting concerns like caching, retry logic, timeouts and circuit breakers (https://github.com/aspnet/HttpClientFactory/issues/42)\r\n- **ASP.NET Core Module in-proc hosting** - 6x the throughput on IIS! Better startup error handling (https://github.com/aspnet/AspNetCoreModule/issues/265)\r\n- **Razor pages improvements** - Support for areas, ~/Pages/Shared (https://github.com/aspnet/Mvc/issues/6926, https://github.com/aspnet/Mvc/issues/6604)\r\n- **MVC functional test fixture** - Easily test your MVC apps end-to-end (https://github.com/aspnet/Mvc/issues/6233)\r\n- **Build-time Razor** - Compile Razor pages and views as part of your build, improved startup performance (https://github.com/aspnet/Razor/issues/1809)\r\n- **UI as a library** - Package Razor pages and views as reusable libraries (https://github.com/aspnet/Razor/issues/1809)\r\n- **Identity UI package and scaffolder** - Add identity to any application (https://github.com/aspnet/Home/issues/2311)\r\n- **WebHooks** - Handle WebHook notifications from ASP.NET Core apps (https://github.com/aspnet/WebHooks/issues/5)\r\n\r\nFor more details on each of these features see the [ASP.NET Core 2.1 roadmap](https://blogs.msdn.microsoft.com/webdev/2018/02/02/asp-net-core-2-1-roadmap/) post on the ASP.NET team blog.\r\n\r\nDiscussion for this issue is at aspnet/Home#2846","Url":"https://github.com/aspnet/Announcements/issues/288","RelatedDescription":"Open issue \"ASP.NET Core 2.1 high-level planning\" (#288)"},{"Id":"292632569","IsPullRequest":false,"CreatedAt":"2018-01-30T02:33:11","Actor":"DamianEdwards","Number":"287","RawContent":null,"Title":"Introduction of new meta-package \"Microsoft.AspNetCore.App\"","State":"open","Body":"## Overview\r\nASP.NET Core 2.1 will introduce a new meta-package for use by applications: *Microsoft.AspNetCore.App*. Additionally, new projects created that target 2.1 will use this meta-package by default, rather than the existing meta-package *Microsoft.AspNetCore.All*.\r\n\r\nThe new meta-package differs from the existing meta-package in that it reduces the number of dependencies of packages not owned or supported by the ASP.NET or .NET teams to just those deemed necessary to ensure the major frameworks features function. The full list of packages being removed compared to *Microsoft.AspNetCore.All* can be seen below.\r\n\r\nThe existing *Microsoft.AspNetCore.All* meta-package will continue to be made available throughout the 2.x lifecycle, but we recommend customers move to the new *Microsoft.AspNetCore.App* meta-pacakge and then add individual references to any of the removed packages if their app requires it.\r\n\r\n## Package references not in \"Microsoft.AspNetCore.App\", compared to \"Microsoft.AspNetCore.All\"\r\nThe following packages are direct dependencies of *Microsoft.AspNetCore.All* but **not** of *Microsoft.AspNetCore.App*. Note that any dependencies of these packages that otherwise aren't dependencies of *Microsoft.AspNetCore.App* will now **not** be included implicitly, e.g. *StackExchange.Redis* as a dependency of *Microsoft.Extensions.Caching.Redis*, *Microsoft.ApplicationInsights* as a dependency of *Microsoft.AspNetCore.ApplicationInsights.HostingStartup*:\r\n- Microsoft.Data.Sqlite\r\n- Microsoft.Data.Sqlite.Core\r\n- Microsoft.EntityFrameworkCore.Sqlite\r\n- Microsoft.EntityFrameworkCore.Sqlite.Core\r\n- Microsoft.Extensions.Caching.Redis\r\n- Microsoft.AspNetCore.DataProtection.AzureStorage\r\n- Microsoft.Extensions.Configuration.AzureKeyVault\r\n- Microsoft.AspNetCore.DataProtection.AzureKeyVault\r\n- Microsoft.AspNetCore.Identity.Service.AzureKeyVault\r\n- Microsoft.AspNetCore.AzureKeyVault.HostingStartup\r\n- Microsoft.AspNetCore.ApplicationInsights.HostingStartup\r\n\r\nWhen moving from *Microsoft.AspNetCore.All* to *Microsoft.AspNetCore.App*, if your application uses any APIs from the above packages, or packages brought in by those packages, you'll now need to add references to those packages in your project manually.\r\n\r\nDiscussion for this issue at https://github.com/aspnet/MetaPackages/issues/255","Url":"https://github.com/aspnet/Announcements/issues/287","RelatedDescription":"Open issue \"Introduction of new meta-package \"Microsoft.AspNetCore.App\"\" (#287)"},{"Id":"287579430","IsPullRequest":false,"CreatedAt":"2018-01-10T21:14:16","Actor":"dougbu","Number":"286","RawContent":null,"Title":"Remove project file elements added for WebApiCompatShim in 2.0","State":"open","Body":"The Microsoft.AspNetCore.Mvc.WebApiCompatShim package now depends on the latest (5.2.4-preview1) Microsoft.AspNet.WebApi.Client package. That dependency includes a new .NET Standard 2.0 assembly. This assembly supports all platforms the Microsoft.AspNetCore.Mvc.WebApiCompatShim package supports and includes the full Web API Client feature set.\r\n\r\nWhen upgrading projects using the Microsoft.AspNetCore.Mvc.WebApiCompatShim package to our nightly builds or the forthcoming 2.1.0-preview1 release, we recommend removing the following elements from the project file. (Of course, some projects may need the elements for other reasons.)\r\n``` xml\r\n<PackageTargetFallback>$(PackageTargetFallback);portable-net451+win8</PackageTargetFallback>\r\n<DisableImplicitAssetTargetFallback>true</DisableImplicitAssetTargetFallback>\r\n```\r\n\r\nFYI the `<PackageTargetFallback>` element caused the application to build and run against the Portable Class Library (PCL) assembly from the Microsoft.AspNet.WebApi.Client package.\r\n\r\nFor discussion of this change, see aspnet/Mvc#7229.","Url":"https://github.com/aspnet/Announcements/issues/286","RelatedDescription":"Open issue \"Remove project file elements added for WebApiCompatShim in 2.0\" (#286)"},{"Id":"287180286","IsPullRequest":false,"CreatedAt":"2018-01-09T18:08:18","Actor":"blowdart","Number":"285","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0784 - ASP.NET Core Templates enable Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0784\r\n##  ASP.NET Core Templates enable Elevation Of Privilege Vulnerability\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of ASP.NET Core  2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of an elevation of privilege vulnerability exists when a ASP.NET Core web application, created using vulnerable project templates, fails to properly sanitize web requests. An attacker who successfully exploited this vulnerability could perform content injection attacks and run script in the security context of the logged-on user.\r\n\r\nTo exploit the vulnerability, an attacker could send a specially crafted email, containing a malicious link, to a user. Alternatively, an attacker could use a chat client to social engineer a user into clicking the malicious link. However, in all cases to exploit this vulnerability a user must click a maliciously crafted link from an attacker.\r\n\r\nThe security update addresses the vulnerability by correcting the ASP.NET Core project templates.\r\n\r\nDevelopers who have generated applications from the vulnerable templates should change their code using the following instructions. They should also change their code to address a further vulnerability,  [CVE-2018-0785](https://github.com/aspnet/Announcements/issues/284), which is in the same templates. Finally installing the latest .NET Core SDK, version 2.1.4, from https://www.microsoft.com/net/download/ will update the templates to correct the issue for any new applications created.\r\n\r\n### Discussion\r\n\r\nPlease use https://github.com/aspnet/templating/issues/225 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications which are not created using the ASP.NET Core 2.0 Individual Authentication templates are not vulnerable to this issue.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed below and have generated applications using Individual Authentication with usernames and passwords stored within the application. Applications which use Azure Active Directory, or Azure Active Directory B2C are not affected.\r\n\r\nVulnerable .NET SDK Version | Fixed SDK Version\r\n----------------| -------------------------\r\n2.0.0, 2.0.2, 2.0.3, 2.1.2, 2.1.3 |  2.1.4\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nYour application will be affected if you generated it using the ASP.NET 2.0 Web Application template or the ASP.NET 2.0 Web Application (Model/View/Controller) template from a vulnerable SDK version where you have selected individual authentication where user accounts are stored in-app.\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\sdk\\ |\r\n| macOS | /usr/local/share/dotnet/sdk/    |\r\n| Supported Linux platforms | /usr/share/dotnet/sdk/   |\r\n\r\nEach SDK version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 2.1.4 then any applications generated for ASP.NET Core 2.0 using Individual Authentication may be vulnerable.. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by changing the code created during application generation using the following instructions.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Razor Pages)\r\n\r\n1. Open `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` find the `OnPostAsync()` method and search for the following line\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Html.Raw(Model.AuthenticatorUri)\"></div>\r\n```\r\n\r\nReplace this line with the following code, removing the call to `Html.Raw()`\r\n\r\n```C#\r\n<div id=\"qrCodeData\" data-url=\"@Model.AuthenticatorUri\"></div>\r\n```\r\n\r\n2. Open the `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` and search for the following line, inside the `OnGetAsync()` method;\r\n\r\n```C#\r\nawait LoadSharedKeyAndQrCodeUriAsync(user);\r\n```\r\n\r\nRemove the code shown below which follows the call to `LoadSharedKeyAndQrCodeUriAsync(user);`\r\n\r\n```C#\r\nif (string.IsNullOrEmpty(SharedKey))\t\t\r\n{\t\t\r\n    await _userManager.ResetAuthenticatorKeyAsync(user);\t\t\r\n    await LoadSharedKeyAndQrCodeUriAsync(user);\t\t\r\n}\r\n```\r\n\r\nThe `OnGetAsync()` method should now look like\r\n\r\n```C#\r\npublic async Task<IActionResult> OnGetAsync()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    await LoadSharedKeyAndQrCodeUriAsync(user);\r\n\r\n    return Page();\r\n}\r\n```\r\n\r\n3. Still in the `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` file  and search for the `LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user) function` and replace it with \r\n\r\n```C#\r\nprivate async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)\r\n{\r\n    // Load the authenticator key & QR code URI to display on the form\r\n    var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    if (string.IsNullOrEmpty(unformattedKey))\r\n    {\r\n        await _userManager.ResetAuthenticatorKeyAsync(user);\r\n        unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n     }\r\n\r\n    SharedKey = FormatKey(unformattedKey);\r\n    AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey);\r\n }\r\n```\r\n\r\n4. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Model/View/Controller)\r\n\r\n1. Open the `Controllers\\ManageController.cs` file and find the declaration for `private const string AuthenticatorUriFormat`. Add the following new const declaration below it;\r\n\r\n```C#\r\nprivate const string RecoveryCodesKey = nameof(RecoveryCodesKey);\r\n```\r\n\r\n2. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator()` function. Replace its contents with\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> EnableAuthenticator()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    var model = new EnableAuthenticatorViewModel();\r\n    await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n\r\n    return View(model);\r\n}\r\n```\r\n\r\n3. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator(EnableAuthenticatorViewModel model)` method. Replace its contents with\r\n\r\n```C#\r\n[HttpPost]\r\n[ValidateAntiForgeryToken]\r\npublic async Task<IActionResult> EnableAuthenticator(EnableAuthenticatorViewModel model)\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!ModelState.IsValid)\r\n    {\r\n        await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n        return View(model);\r\n     }\r\n\r\n    // Strip spaces and hypens\r\n    var verificationCode = model.Code.Replace(\" \", string.Empty).Replace(\"-\", string.Empty);\r\n\r\n    var is2faTokenValid = await _userManager.VerifyTwoFactorTokenAsync(\r\n        user, _userManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);\r\n\r\n    if (!is2faTokenValid)\r\n    {\r\n        ModelState.AddModelError(\"Code\", \"Verification code is invalid.\");\r\n        await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n        return View(model);\r\n    }\r\n\r\n    await _userManager.SetTwoFactorEnabledAsync(user, true);\r\n    _logger.LogInformation(\"User with ID {UserId} has enabled 2FA with an authenticator app.\", user.Id);\r\n    var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n    TempData[RecoveryCodesKey] = recoveryCodes.ToArray();\r\n\r\n    return RedirectToAction(nameof(ShowRecoveryCodes));\r\n}\r\n```\r\n\r\n4. Still in `Controllers\\ManageController.cs` file create the following method after `EnableAuthenticator(EnableAuthenticatorViewModel model)`;\r\n\r\n```C#\r\n[HttpGet]\r\npublic IActionResult ShowRecoveryCodes()\r\n{\r\n    var recoveryCodes = (string[])TempData[RecoveryCodesKey];\r\n    if (recoveryCodes == null)\r\n    {\r\n        return RedirectToAction(nameof(TwoFactorAuthentication));\r\n    }\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes };\r\n    return View(model);\r\n}\r\n```\r\n\r\n5. Still in `Controllers\\ManageController.cs` file create the following method after the `GenerateQrCodeUri(string email, string unformattedKey)` method\r\n\r\n```C#\r\nprivate async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user, EnableAuthenticatorViewModel model)\r\n{\r\n    var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    if (string.IsNullOrEmpty(unformattedKey))\r\n    {\r\n        await _userManager.ResetAuthenticatorKeyAsync(user);\r\n        unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    }\r\n\r\n    model.SharedKey = FormatKey(unformattedKey);\r\n    model.AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey);\r\n}\r\n```\r\n\r\n6. Still in `Controllers\\ManageController.cs` Create a new action method in the controller file, `GenerateRecoveryCodesWarning()` containing the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodesWarning()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n    }\r\n\r\n    return View(nameof(GenerateRecoveryCodesWarning));\r\n}\r\n```\r\n\r\n7. Open the `Models\\ManageViewModels\\EnableAuthenticatorViewModel.cs` file and add the following `using` reference;\r\n\r\n```C#\r\nusing Microsoft.AspNetCore.Mvc.ModelBinding;\r\n```\r\n\r\nthen replace the class declaration with \r\n\r\n```C# \r\npublic class EnableAuthenticatorViewModel\r\n{\r\n    [Required]\r\n    [StringLength(7, ErrorMessage = \"The {0} must be at least {2} and at max {1} characters long.\", MinimumLength = 6)]\r\n    [DataType(DataType.Text)]\r\n    [Display(Name = \"Verification Code\")]\r\n    public string Code { get; set; }\r\n\r\n    [BindNever]\r\n    public string SharedKey { get; set; }\r\n\r\n    [BindNever]\r\n    public string AuthenticatorUri { get; set; }\r\n}\r\n```\r\n\r\n8. Open the `Views\\Manage\\EnableAuthenticator.cshtml` file and replace the following line\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Html.Raw(Model.AuthenticatorUri)\"></div>\r\n```\r\n\r\nwith\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Model.AuthenticatorUri\"></div>\r\n```\r\n\r\nremove the call to `Html.Raw()`.\r\n\r\n9. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Acknowledgments\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0784](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0784)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Corrected text in link to CVE-2018-0785.\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-01-10_","Url":"https://github.com/aspnet/Announcements/issues/285","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0784 - ASP.NET Core Templates enable Elevation Of Privilege Vulnerability\" (#285)"},{"Id":"287180045","IsPullRequest":false,"CreatedAt":"2018-01-09T18:07:26","Actor":"blowdart","Number":"284","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0785 - ASP.NET Core Templates enable Cross Site Request Forgery","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0785\r\n## ASP.NET Core Templates enable Cross Site Request Forgery\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of ASP.NET Core  2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Cross Site Request Forgery vulnerability in the individual authentication templates for ASP.NET Core 2.0. An attacker who successfully exploited this vulnerability could change the recovery codes associated with the victim's user account without his/her consent. As a result, a victim of this attack may be permanently locked out of his/her account after loosing access to his/her 2FA device, as the initial recovery codes would be no longer valid.\r\n\r\nThe security update addresses the vulnerability by correcting the ASP.NET Core project templates.\r\n\r\nDevelopers who have generated applications from the vulnerable templates should change their code using the following instructions. They should also change their code to address a further vulnerability,  [CVE-2018-0784](https://github.com/aspnet/Announcements/issues/284), which is in the same templates.\r\n\r\nYou should also install the latest .NET Core SDK, version 2.1.4, from https://www.microsoft.com/net/download/ as will update the templates to correct the issue for any _new_ applications created after its installation. Existing applications must be manually updated using the instructions below.\r\n\r\n### Discussion\r\n\r\nPlease use https://github.com/aspnet/templating/issues/224 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications which are not created using the ASP.NET Core 2.0 Individual Authentication templates are not vulnerable to this issue.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed below and have generated applications using Individual Authentication with usernames and passwords stored within the application. Applications which use Azure Active Directory, or Azure Active Directory B2C are not affected.\r\n\r\nVulnerable .NET SDK Version | Fixed SDK Version\r\n----------------| -------------------------\r\n2.0.0, 2.0.2, 2.0.3, 2.1.2, 2.1.3 |  2.1.4\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nYour application will be affected if you generated it using the ASP.NET 2.0 Web Application template or the ASP.NET 2.0 Web Application (Model/View/Controller) template from a vulnerable SDK version where you have selected individual authentication where user accounts are stored in-app.\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\sdk\\ |\r\n| macOS | /usr/local/share/dotnet/sdk/    |\r\n| Supported Linux platforms | /usr/share/dotnet/sdk/   |\r\n\r\nEach SDK version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 2.1.4 then any applications generated for ASP.NET Core 2.0 using Individual Authentication may be vulnerable.. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by changing the code created during application generation using the following instructions.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Razor Pages)\r\n\r\n1. Open `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` find the `OnPostAsync()` method. The last line of this file should be\r\n\r\n```C#\r\nreturn RedirectToPage(\"./GenerateRecoveryCodes\");\r\n```\r\n\r\nReplace this line with the following code\r\n\r\n```C#\r\nvar recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\nTempData[\"RecoveryCodes\"] = recoveryCodes.ToArray();\r\nreturn RedirectToPage(\"./ShowRecoveryCodes\");\r\n```\r\n\r\n2. Open the `Pages\\Account\\Manage\\GenerateRecoveryCodes.cshtml` and replace its contents with \r\n\r\n```C#\r\n@page\r\n@model GenerateRecoveryCodesModel\r\n@{\r\n    ViewData[\"Title\"] = \"Generate two-factor authentication (2FA) recovery codes\";\r\n    ViewData[\"ActivePage\"] = \"TwoFactorAuthentication\";\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>This action generates new recovery codes.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n    <p>\r\n        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key\r\n        used in an authenticator app you should <a asp-page=\"./ResetAuthenticator\">reset your authenticator keys</a>.\r\n    </p>\r\n</div>\r\n\r\n<div>\r\n    <form method=\"post\" class=\"form-group\">\r\n        <button class=\"btn btn-danger\" type=\"submit\">Generate Recovery Codes</button>\r\n    </form>\r\n</div>\r\n```\r\n3. Open the `Pages\\Account\\Manage\\GenerateRecoveryCodes.cshtml.cs` file. Replace its contents with\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.RazorPages;\r\nusing Microsoft.Extensions.Logging;\r\nusing Company.WebApplication1.Data;\r\n\r\nnamespace Company.WebApplication1.Pages.Account.Manage\r\n{\r\n    public class GenerateRecoveryCodesModel : PageModel\r\n    {\r\n        private readonly UserManager<ApplicationUser> _userManager;\r\n        private readonly ILogger<GenerateRecoveryCodesModel> _logger;\r\n\r\n        public GenerateRecoveryCodesModel(\r\n            UserManager<ApplicationUser> userManager,\r\n            ILogger<GenerateRecoveryCodesModel> logger)\r\n        {\r\n            _userManager = userManager;\r\n            _logger = logger;\r\n        }\r\n\r\n        public async Task<IActionResult> OnGetAsync()\r\n        {\r\n            var user = await _userManager.GetUserAsync(User);\r\n            if (user == null)\r\n            {\r\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n            }\r\n\r\n            if (!user.TwoFactorEnabled)\r\n            {\r\n                throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n            }\r\n\r\n            return Page();\r\n        }\r\n\r\n        public async Task<IActionResult> OnPostAsync()\r\n        {\r\n            var user = await _userManager.GetUserAsync(User);\r\n            if (user == null)\r\n            {\r\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n            }\r\n\r\n            if (!user.TwoFactorEnabled)\r\n            {\r\n                throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled.\");\r\n            }\r\n\r\n            var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n            TempData[\"RecoveryCodes\"] = recoveryCodes.ToArray();\r\n\r\n            _logger.LogInformation(\"User with ID '{UserId}' has generated new 2FA recovery codes.\", user.Id);\r\n\r\n            return RedirectToPage(\"./ShowRecoveryCodes\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n4. Create a new file, `Pages\\Account\\Manage\\ShowRecoveryCodes.cshtml` with the following contents \r\n\r\n```C#\r\n@page\r\n@model ShowRecoveryCodesModel\r\n@{\r\n    ViewData[\"Title\"] = \"Recovery codes\";\r\n    ViewData[\"ActivePage\"] = \"TwoFactorAuthentication\";\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>Put these codes in a safe place.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        @for (var row = 0; row < Model.RecoveryCodes.Length; row += 2)\r\n        {\r\n            <code>@Model.RecoveryCodes[row]</code><text>&nbsp;</text><code>@Model.RecoveryCodes[row + 1]</code><br />\r\n        }\r\n    </div>\r\n</div>\r\n```\r\n\r\n5. Create a new file `Pages\\Account\\Manage\\ShowRecoveryCodes.cshtml.cs` with the following contents\r\n\r\n```C#\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.RazorPages;\r\n\r\nnamespace Company.WebApplication1.Pages.Account.Manage\r\n{\r\n    public class ShowRecoveryCodesModel : PageModel\r\n    {\r\n        public string[] RecoveryCodes { get; private set; }\r\n\r\n        public IActionResult OnGet()\r\n        {\r\n            RecoveryCodes = (string[])TempData[\"RecoveryCodes\"];\r\n            if (RecoveryCodes == null)\r\n            {\r\n                return RedirectToPage(\"TwoFactorAuthentication\");\r\n            }\r\n\r\n            return Page();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n6. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Model/View/Controller)\r\n\r\n1. Open the `Controllers\\ManageController.cs` file and find \r\n\r\n```C#\r\nprivate const string AuthenicatorUriFormat = \"otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6\";\r\n```\r\n  and add a new declaration underneath,\r\n\r\n```C#\r\nprivate const string AuthenicatorUriFormat = \"otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6\";\r\nprivate const string RecoveryCodesKey = nameof(RecoveryCodesKey);\r\n```\r\n\r\n2. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator(EnableAuthenticatorViewModel model)` method. The last line in this method should be\r\n\r\n```C#\r\nreturn RedirectToAction(nameof(GenerateRecoveryCodes));\r\n```\r\n\r\nReplace this final line with\r\n\r\n```C#\r\nvar recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\nTempData[RecoveryCodesKey] = recoveryCodes.ToArray();\r\nreturn RedirectToAction(nameof(ShowRecoveryCodes));\r\n```\r\n\r\n3. Create a new method in `Controllers\\ManageController.cs` called `ShowRecoveryCodes()` with the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic IActionResult ShowRecoveryCodes()\r\n{\r\n    var recoveryCodes = (string[])TempData[RecoveryCodesKey];\r\n    if (recoveryCodes == null)\r\n    {\r\n        return RedirectToAction(nameof(TwoFactorAuthentication));\r\n    }\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes };\r\n    return View(model);\r\n}\r\n```\r\n\r\n4. Still in `Controllers\\ManageController.cs` Create a new action method in the controller file, `GenerateRecoveryCodesWarning()` containing the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodesWarning()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n    }\r\n\r\n    return View(nameof(GenerateRecoveryCodesWarning));\r\n}\r\n```\r\n\r\n5. Still in `Controllers\\ManageController.cs` file and find the `GenerateRecoveryCodes()` method. The code should look as follows\r\n\r\n```C# \r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodes()\r\n{\r\n    ...\r\n}\r\n```\r\nReplace the method with the following\r\n\r\n```C#\r\n[HttpPost]\r\n[ValidateAntiForgeryToken]\r\npublic async Task<IActionResult> GenerateRecoveryCodes()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled.\");\r\n    }\r\n\r\n    var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n    _logger.LogInformation(\"User with ID {UserId} has generated new 2FA recovery codes.\", user.Id);\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes.ToArray() };\r\n\r\n    return View(nameof(ShowRecoveryCodes), model);\r\n}\r\n```\r\n\r\n6. Create a new View in `Views\\Manage\\ShowRecoveryCodes.cshtml` with the following content\r\n\r\n```\r\n@model ShowRecoveryCodesViewModel\r\n@{\r\n    ViewData[\"Title\"] = \"Recovery codes\";\r\n    ViewData.AddActivePage(ManageNavPages.TwoFactorAuthentication);\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>Put these codes in a safe place.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        @for (var row = 0; row < Model.RecoveryCodes.Length; row += 2)\r\n        {\r\n            <code>@Model.RecoveryCodes[row]</code><text>&nbsp;</text><code>@Model.RecoveryCodes[row + 1]</code><br />\r\n        }\r\n    </div>\r\n</div>\r\n```\r\n\r\n7. Create a new `ShowRecoveryCodesViewModel` class in the `Models\\ManageViewModels` folder and create the class as follows\r\n\r\n```c#\r\npublic class ShowRecoveryCodesViewModel\r\n{\r\n    public string[] RecoveryCodes { get; set; }\r\n}\r\n``` \r\n\r\n8.  Delete the `Models\\ManageViewModels\\generateRecoveryCodesViewModel.cs` file.\r\n\r\n9. Open the `Views\\Manage\\GenerateRecoveryCodes.cshtml` file. Replace the contents with \r\n\r\n```\r\n@{\r\n    ViewData[\"Title\"] = \"Generate two-factor authentication (2FA) recovery codes\";\r\n    ViewData.AddActivePage(ManageNavPages.TwoFactorAuthentication);\r\n}\r\n\r\n<h2>@ViewData[\"Title\"]</h2>\r\n\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>This action generates new recovery codes.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n    <p>\r\n        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key\r\n        used in an authenticator app you should <a asp-action=\"ResetAuthenticatorWarning\">reset your authenticator keys.</a>\r\n    </p>\r\n</div>\r\n\r\n<div>\r\n    <form asp-action=\"GenerateRecoveryCodes\" method=\"post\" class=\"form-group\">\r\n        <button class=\"btn btn-danger\" type=\"submit\">Generate Recovery Codes</button>\r\n    </form>\r\n</div>\r\n```\r\n\r\n10. Edit `Views\\Manage\\TwoFactorAuthentication.cshtml` to change `<a asp-action=\"GenerateRecoveryCodes\" class=\"btn btn-default\">Reset recovery codes</a>` to ` <a asp-action=\"GenerateRecoveryCodesWarning\" class=\"btn btn-default\">Reset recovery codes</a>`.\r\n\r\n11. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Acknowledgments\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0785](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0785)\r\n\r\n### Revisions\r\n\r\nV1.1 (Jan 9, 2018): Updated Razor Pages fix to be correct. Note that [new generated applications will have the incorrect link](https://github.com/aspnet/templating/issues/226).  Thanks @scottsauber.\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-01-09_\r\n\r\n  \r\n  \r\n  \r\n  \r\n  ","Url":"https://github.com/aspnet/Announcements/issues/284","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0785 - ASP.NET Core Templates enable Cross Site Request Forgery\" (#284)"},{"Id":"285489159","IsPullRequest":false,"CreatedAt":"2018-01-02T17:28:55","Actor":"Eilon","Number":"283","RawContent":null,"Title":"Using the \"Home\" repo for issue management of other repos","State":"open","Body":"Hi all,\r\n\r\nWe are experimenting to try and use the [Home repo's issue tracker](https://github.com/aspnet/Home/issues) to manage issues for multiple repos. To start with, we have moved the bugs from several other repos to the Home repo, and we will retire the issue trackers of those other repos.\r\n\r\nWe are doing this to try to improve the experience of logging issues for ASP.NET Core.\r\n\r\n* Labels in the form of `repo:RepoName` are used to associate the bug with a product/feature area\r\n* For issue trackers that moved to the Home repo, please log new issues in the Home repo. If a bug is logged in a moved issue tracker, it will be closed.\r\n* Over time, we plan to consolidate more issue trackers into the Home repo\r\n\r\nFor discussions on this topic, please go to https://github.com/aspnet/Home/issues/2736.\r\n\r\nThanks,\r\nEilon\r\n","Url":"https://github.com/aspnet/Announcements/issues/283","RelatedDescription":"Open issue \"Using the \"Home\" repo for issue management of other repos\" (#283)"},{"Id":"277159697","IsPullRequest":false,"CreatedAt":"2017-11-27T20:34:07","Actor":"pranavkm","Number":"282","RawContent":null,"Title":"aspnetcore-ci-*, aspnetcore-volatile-* feeds being deprecated","State":"open","Body":"As part of some of our infrastructural changes, we're discontinuing the use of the following feeds and may remove them entirely in the future:\r\n* https://dotnet.myget.org/f/aspnetcore-ci-dev \r\n* https://dotnet.myget.org/f/aspnetcore-ci-release\r\n* https://dotnet.myget.org/f/aspnetcore-volatile-dev\r\n* https://dotnet.myget.org/f/aspnetcore-volatile-release\r\n\r\nIf you're currently using one of these feeds in your projects to pick up our daily builds, we recommend migrating to https://dotnet.myget.org/f/aspnetcore-dev.\r\n\r\nPlease use this discussion topic - https://github.com/aspnet/Home/issues/2292 - for feedback and questions. ","Url":"https://github.com/aspnet/Announcements/issues/282","RelatedDescription":"Open issue \"aspnetcore-ci-*, aspnetcore-volatile-* feeds being deprecated\" (#282)"},{"Id":"273832346","IsPullRequest":false,"CreatedAt":"2017-11-14T15:25:58","Actor":"blowdart","Number":"281","RawContent":null,"Title":"Reserved","State":"closed","Body":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n","Url":"https://github.com/aspnet/Announcements/issues/281","RelatedDescription":"Closed issue \"Reserved\" (#281)"},{"Id":"273832234","IsPullRequest":false,"CreatedAt":"2017-11-14T15:25:44","Actor":"blowdart","Number":"280","RawContent":null,"Title":"Reserved","State":"closed","Body":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n","Url":"https://github.com/aspnet/Announcements/issues/280","RelatedDescription":"Closed issue \"Reserved\" (#280)"},{"Id":"273832132","IsPullRequest":false,"CreatedAt":"2017-11-14T15:25:23","Actor":"blowdart","Number":"279","RawContent":null,"Title":"Microsoft Security Advisory CVE-2017-8700: CORS bypass can enable Information Disclosure","State":"open","Body":"# Microsoft Security Advisory CVE-2017-8700 CORS Bypass can enable Information Disclosure\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in some public versions of ASP.NET Core where Cross-Origin Resource Sharing (CORS) can be bypassed, leading to information disclosure.\r\n\r\n## Discussion\r\n\r\nPlease use https://github.com/aspnet/Mvc/issues/7054 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 2.0.0 or higher are not vulnerable.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Mvc.Core | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.6\r\nMicrosoft.AspNetCore.Mvc.Cors | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.6\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\nNote: As part of patching ASP.NET Core MVC we update every Microsoft.AspNetCore.Mvc.* package. If, for example, you have a dependency on `Microsoft.AspNetCore.Mvc` you should update to the appropriate version first (1.0.x should be updated to 1.0.6, 1.1.x should be updated to 1.1.6), and it will also update any other vulnerable ` Microsoft.AspNetCore.Mvc` dependency.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\n**Note**: If you are using ASP.NET Core MVC in your projects you should first update the `Microsoft.AspNetCore.Mvc` version to the fixed version in the table above. If you are currently using version 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4 or 1.0.5  you should update your package version to 1.0.6. If you are using version 1.1.0, 1.1.1, 1.1.2, 1.1.3 or 1.1.4 you should update your package version to 1.1.6. This will update every MVC package to the fixed versions.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.1\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.Kestrel` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Core` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a single direct dependency, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single package `Microsoft.AspNetCore.Mvc.Core` version 1.1.6.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.1.3.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Cors` to 1.1.6.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Cors\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors`, version 1.1.4 you would add a reference to the appropriate fixed version, 1.1.6.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Cors\" Version=\"1.1.6\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-8700](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8700)\r\n\r\n### Revisions\r\n\r\nV1.1 (Dec 13, 2017): Updated 1.1.5 to 1.1.6 to fix a packaging issue (see https://github.com/aspnet/Mvc/issues/7070)\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2017-12-13_","Url":"https://github.com/aspnet/Announcements/issues/279","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2017-8700: CORS bypass can enable Information Disclosure\" (#279)"},{"Id":"273831995","IsPullRequest":false,"CreatedAt":"2017-11-14T15:25:03","Actor":"blowdart","Number":"278","RawContent":null,"Title":"Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability \r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where the application is hosted through Windows Http,Sys where a malformed request can lead to a Denial Of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/HttpSysServer/issues/416\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications hosted using Kestrel as their web server are not affected. By default ASP.NET Core Web applications are hosted with Kestrel. Developers must make specific decisions to switch to using HTTP.SYS and as this hosting option is only available on Windows this advisory does not affect Linux or macOS.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.WebListener<br /> Microsoft.Net.Http.Server | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3 | 1.0.6<br />1.1.4\r\nMicrosoft.AspNetCore.Server.HttpSys | 2.0.0, 2.0.1 |  2.0.2\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.6\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.WebListener` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Server.WebListener` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Server.WebListener` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Net.Http.Server\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a two direct dependencies, as seen by the two `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. The example shows a direct reference to the vulnerable package `Microsoft.Net.Http.Server` version 1.1.1.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.Net.Http.Server` to 1.1.4.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Net.Http.Server\" Version=\"1.1.4\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Server.WebListener` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Server.WebListener` version 1.1.0 you would add a reference to the appropriate fixed version 1.1.4.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.4\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11883](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11883)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\nV1.1 (Nov 14, 2017): Mitigation clarification that HTTP.SYS is only available on Windows.\r\nV1.2 (Nov 14, 2017): Added Http.Server package for v1.x platform.\r\nV1.3 (Nov 15, 2017): Updated package version numbers for correctness.\r\n\r\n_Version 1.3_\r\n_Last Updated 2017-11-15_","Url":"https://github.com/aspnet/Announcements/issues/278","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability\" (#278)"},{"Id":"273831890","IsPullRequest":false,"CreatedAt":"2017-11-14T15:24:44","Actor":"blowdart","Number":"277","RawContent":null,"Title":"Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege","State":"open","Body":"# Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege \r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability some public versions of ASP.NET Core where an Open Redirect exists, leading to Elevation Of Privilege.\r\n\r\n## Discussion\r\n\r\nPlease use https://github.com/aspnet/Mvc/issues/7053 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 1.0.x or 1.1.x are not affected.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.0.0 |  2.0.3\r\nMicrosoft.AspNetCore.Mvc.Core | 2.0.0 |  2.0.1\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\nIf you are targeting .NET Core a \"meta-package\" is used, `Microsoft.AspNetCore.All`. You should begin by updating its version number to 2.0.3, this will pull in the fixed `Microsoft.AspNetCore.Mvc.Core` package.\r\n\r\nIf you are targeting .NET Framework you should first update the `Microsoft.AspNetCore` version to the version number to 2.0.1, then adjust the version number for any other packages beginning with `Microsoft.AspNetCore.` to 2.0.3.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – Projects targeting .NET Core\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has has a reference to the vulnerable metapackage, as seen by the single `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update to the fixed package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.All` to 2.0.3.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### Fixing Direct Dependencies – Projects targeting .NET Framework\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has has a reference a single packages, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.Core` version 2.0.0.\r\n\r\nTo update to the fixed package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.Core` to 2.0.1.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers a direct reference to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 2.0.0 when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.assets.json` file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Core` version 2.0.0 you would add a reference to the fixed version, 2.0.1.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11879:](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11879)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\nV1.1 (Nov 14, 2017): Fixed metapackage version.\r\nV1,2  (Nov 14, 2017): Fixed metapackage version in samples. \r\n\r\n_Version 1.2_\r\n_Last Updated 2017-11-14_","Url":"https://github.com/aspnet/Announcements/issues/277","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege\" (#277)"},{"Id":"269377674","IsPullRequest":false,"CreatedAt":"2017-10-29T14:10:49","Actor":"searus","Number":"276","RawContent":null,"Title":"Improved end to end testing support for MVC applications: Typo?","State":"closed","Body":"Hi @javiercn, I think the constructor name is wrong in the first example code block in #275\r\n\r\nShouldn't it be \r\n```\r\n        public MyApplicationFunctionalTests (WebApplicationTestFixture<Startup> fixture)\r\n        {\r\n            Client = fixture.Client;\r\n        }\r\n```\r\n\r\n","Url":"https://github.com/aspnet/Announcements/issues/276","RelatedDescription":"Closed issue \"Improved end to end testing support for MVC applications: Typo?\" (#276)"},{"Id":"269251366","IsPullRequest":false,"CreatedAt":"2017-10-27T22:12:29","Actor":"javiercn","Number":"275","RawContent":null,"Title":"Improved end to end testing support for MVC applications","State":"open","Body":"# Improved end to end testing support for MVC applications\r\n\r\nIn this release we have created a new package Microsoft.AspNetCore.Mvc.Testing to help streamline\r\nend to end testing of MVC applications using TestServer.\r\n\r\nThis package takes care of some of the typical pitfalls users run into when trying to test MVC applications\r\nusing TestServer.\r\n* It copies the .deps file from your project into the test assembly bin folder.\r\n* It sets the content root the application's project root so that static files and views can be found.\r\n* It provides a class `WebApplicationTestFixture<TStartup>` that streamlines the bootstrapping of your app on\r\nTestServer.\r\n\r\n## Sample end to end in memory test using xUnit\r\n\r\n```csharp\r\nusing Xunit;\r\n\r\nnamespace MyApplication.FunctionalTests\r\n{\r\n    public class MyApplicationFunctionalTests : IClassFixture<WebApplicationTestFixture<Startup>>\r\n    {\r\n        public MyApplicationFunctionalTests(WebApplicationTestFixture<Startup> fixture)\r\n        {\r\n            Client = fixture.Client;\r\n        }\r\n\r\n        public HttpClient Client { get; }\r\n\r\n        [Fact]\r\n        public async Task GetHomePage()\r\n        {\r\n            // Arrange & Act\r\n            var response = await Client.GetAsync(\"/\");\r\n\r\n            // Assert\r\n            Assert.Equal(HttpStatusCodes.OK, response.StatusCode);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Important notes\r\n\r\n### Shadow copying needs to be disabled\r\nFor end to end in-memory tests to work properly, shadow copying needs to be disabled on your test framework of choice, as it causes the tests to execute in a different folder than the output folder.\r\nFor instructions on how to do this on xUnit see https://xunit.github.io/docs/configuring-with-json.html.\r\n\r\n### Your app needs to have a CreateWebHostBuilderMethod on the Program class\r\nBy convention our ```WebApplicationTestFixture<TStartup>``` tries to find a method with the signature ```public static IWebHostBuilder CreateWebHostBuilder(string [] args)``` on the entry point class of the assembly where Startup is located. (Typically your Program class) If you don't have this method ```WebApplicationTestFixture<TStartup>``` won't be able to initialize your app in the same way it is done on a normal run. You can configure the WebHostBuilder yourself by overriding CreateWebHostBuilder on ```WebApplicationTestFixture<TStartup>```.\r\n\r\n### The test infrastructure needs to know the content root of the application under test\r\nTo set the content root for your app, ```WebApplicationTestFixture<TStartup>``` first locate your solution file ```(.sln)``` and then make a guess about where project might be. The Content Root of the application is defined by convention as ```<<SolutionFolder>>/<<ProjectAssemblyName>>```. For example, based on the folder structure defined below, the content root of the application is defined as ```c:\\work\\MyApp```. This is important because if not set correctly to the root folder of your application under test all views and static files will not be found.\r\n\r\n```\r\nc:/work/\r\n    MyApp.sln\r\n    MyApp/MyApp.csproj\r\n    MyApp.FunctionalTests/MyApp.FunctionalTests.csproj\r\n```\r\n\r\nThe process for determining the folder to use as the content root when running the tests is the following:\r\n* ```WebApplicationTestFixture<TStartup>``` starts on the bin folder of the test project, in the example above ```c:/work/MyApp.FunctionalTests/MyApp.FunctionalTests/bin/<<Configuration>>/<<Framework>>```\r\n* It navigates to the parent folder until it finds a ```.sln``` file.\r\n* It appends ```<<AssemblyName>>``` to the folder in which it found the ```.sln``` file and set that as the content root.\r\n\r\nIf you happen to be using a different convention for the layout of your projects, you can inherit from WebApplicationTestFixture and pass in the relative path from your solution to the application under test when calling the constructor. For example ```\"/src/MyApp\"```\r\n\r\n```csharp\r\npublic class MyAppTestFixture<TStartup> : WebApplicationTestFixture<TStartup> where TStartup : class\r\n{\r\n    public MyAppTestFixture(string solutionRelativePath)\r\n        : base(\"/src/MyApp\") { }\r\n}\r\n```","Url":"https://github.com/aspnet/Announcements/issues/275","RelatedDescription":"Open issue \"Improved end to end testing support for MVC applications\" (#275)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1006309084402995205","CreatedAt":"2018-06-11T22:55:56+00:00","UserScreenname":"aspnet","Text":"Don't miss this week's #ASPNET Community Standup with THE WHOLE BLAZOR TEAM!!!\n\nTuesday at 10 Pacific / 18 GMT… https://t.co/rwDAHrIXMu","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":30,"FavoriteCount":19,"RawContent":null},{"Id":"1005426223554662400","CreatedAt":"2018-06-09T12:27:46+00:00","UserScreenname":"aspnet","Text":"Tune in today at 10a ET / 7a PT / 14:00 UTC / 8p IST and learn about global tools along with Jeff. https://t.co/J9tTYva6s6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null},{"Id":"1004839694465548288","CreatedAt":"2018-06-07T21:37:06+00:00","UserScreenname":"aspnet","Text":"Blazor 0.4.0 experimental release now available https://t.co/bmpsCos7xn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":203,"FavoriteCount":122,"RawContent":null},{"Id":"1004123317446381568","CreatedAt":"2018-06-05T22:10:29+00:00","UserScreenname":"aspnet","Text":"The #ASPNET Community Standup is live now at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"1003773072996909056","CreatedAt":"2018-06-04T22:58:44+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup Tuesday at 3:00 PM Pacific / 23:00 GMT at https://t.co/4Ioo9jNSN2 https://t.co/56UGvtmJC0","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":5,"RawContent":null},{"Id":"1001877838369382400","CreatedAt":"2018-05-30T17:27:45+00:00","UserScreenname":"aspnet","Text":"Our latest release is now available.  Read all about the new #ASP.NET Core 2.1 at https://t.co/n1ZJsZ2YcE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":209,"FavoriteCount":123,"RawContent":null},{"Id":"996435611354447872","CreatedAt":"2018-05-15T17:02:17+00:00","UserScreenname":"aspnet","Text":"And we're live! Join us as https://t.co/3dFxSj11IQ https://t.co/PAZDWtuk1r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"996432221497057285","CreatedAt":"2018-05-15T16:48:49+00:00","UserScreenname":"aspnet","Text":"Starting soon - join us for an MVC Functional Testing overview with Javier Calvarro Nelson at… https://t.co/FavBvWbz0w","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"996146847939883009","CreatedAt":"2018-05-14T21:54:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nMVC Functional Testing with Javier Calvarro Nelson… https://t.co/twYeUUd1RO","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":15,"RawContent":null},{"Id":"993841130545426433","CreatedAt":"2018-05-08T13:12:44+00:00","UserScreenname":"aspnet","Text":"Jeff will be pair-programming using @VisualStudio Live Share on an @aspnet Core project with YOU at the Live Share… https://t.co/i0sm9cCOGz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":2,"RawContent":null},{"Id":"991768334419902464","CreatedAt":"2018-05-02T19:56:11+00:00","UserScreenname":"aspnet","Text":"Blazor 0.3.0 experimental release now available\n\nhttps://t.co/2ixEeVbBbN https://t.co/3VB4sDxvwR","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":484,"FavoriteCount":272,"RawContent":null},{"Id":"991361559426314241","CreatedAt":"2018-05-01T16:59:49+00:00","UserScreenname":"aspnet","Text":"We're live! Join us at https://t.co/4Ioo9jNSN2 https://t.co/uGAnWHOWD5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":4,"RawContent":null},{"Id":"991092623849865217","CreatedAt":"2018-04-30T23:11:09+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nSignalR and Project Bedrock updates with @davidfowl… https://t.co/B8XmP5YkCW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":35,"RawContent":null},{"Id":"989160632908791808","CreatedAt":"2018-04-25T15:14:07+00:00","UserScreenname":"aspnet","Text":"Do you have questions about how to work with ASPNet Core Identity?  Check out the video from yesterday's session wi… https://t.co/hjaoJRCR7l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":14,"RawContent":null},{"Id":"988913487190544384","CreatedAt":"2018-04-24T22:52:03+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2018-06-12T05:30:21.9791585Z","RunDurationInMilliseconds":16622}