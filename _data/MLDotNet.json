{"Data":{"GitHub":{"Issues":[{"Id":"333103042","IsPullRequest":false,"CreatedAt":"2018-06-17T23:54:32","Actor":"mjmckp","Number":"367","RawContent":null,"Title":"Temporary file created by HybridMemoryStream in Transposer not deleted","State":"open","Body":"The `HybridMemoryStream` created in the `Transposer` https://github.com/dotnet/machinelearning/blob/c023727b76970ab913ec1ce38276508835c17bcf/src/Microsoft.ML.Data/DataView/Transposer.cs#L173\r\nis closed, but never disposed.  This is because the `Dispose` implementation of the `BinaryLoader` here\r\nhttps://github.com/dotnet/machinelearning/blob/c023727b76970ab913ec1ce38276508835c17bcf/src/Microsoft.ML.Data/DataLoadSave/Binary/BinaryLoader.cs#L1184\r\nonly calls `Dispose` on the `System.IO.BinaryReader` it contains, which in turn only calls `Close` on `HybridMemoryStream`, but **not** `Dispose` (see https://referencesource.microsoft.com/#mscorlib/system/io/binaryreader.cs,91).  Therefore, the deletion of the temporary file here\r\nhttps://github.com/dotnet/machinelearning/blob/c023727b76970ab913ec1ce38276508835c17bcf/src/Microsoft.ML.Core/Utilities/HybridMemoryStream.cs#L127\r\nis never reached.\r\n\r\nThis is causing the temporary directory on my PC to fill up all the available space on the disk.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/367","RelatedDescription":"Open issue \"Temporary file created by HybridMemoryStream in Transposer not deleted\" (#367)"},{"Id":"333102248","IsPullRequest":false,"CreatedAt":"2018-06-17T23:41:13","Actor":"SharPiy","Number":"366","RawContent":null,"Title":".NET Framework 4.6.1 - ML.NET package does't show up in references, thus can't use its assembly references. ","State":"open","Body":"### System information\r\n\r\n- Windows 7/ 64 bit OS\r\n- .NET Framework 4.6.1 \r\n\r\n### Issue\r\n\r\n- I created a console App to use Microsoft.ML. I tried to install ML.NET package -  the package manager successfully installed it but it never shows up in references. \r\n- I am not able to use ML.NET libraries, as even after successfully installing it the using statements gives me red lines to show missing assembly reference error.\r\n![capture](https://user-images.githubusercontent.com/39928473/41513174-d9a50140-724c-11e8-9ec4-8a297304b014.PNG)\r\n![image](https://user-images.githubusercontent.com/39928473/41513187-084c47e2-724d-11e8-8b42-1d248c98ad7b.png)\r\n![image](https://user-images.githubusercontent.com/39928473/41513204-3986b1ee-724d-11e8-9435-c1bb66003d72.png)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/366","RelatedDescription":"Open issue \".NET Framework 4.6.1 - ML.NET package does't show up in references, thus can't use its assembly references. \" (#366)"},{"Id":"332962253","IsPullRequest":true,"CreatedAt":"2018-06-16T05:26:12","Actor":"Nepomuceno","Number":"365","RawContent":null,"Title":"Propose sweep","State":"open","Body":"This pr it is to solve #215 \r\n\r\nThis guarantees that ProposeSweeps will generate just distinct values. Also there were tests created to guarantee that this is the case.\r\n\r\nThanks to @ross-p-smith that also wored in this pr.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/365","RelatedDescription":"Open PR \"Propose sweep\" (#365)"},{"Id":"332859834","IsPullRequest":true,"CreatedAt":"2018-06-15T17:39:09","Actor":"yaeldekel","Number":"364","RawContent":null,"Title":"Combine multiple tree ensemble models into a single tree ensemble","State":"open","Body":"Create a single tree ensemble, by dividing the leaf outputs by the number of ensembles being combined, and multiplying by the calibration parameter if it exists.","Url":"https://github.com/dotnet/machinelearning/pull/364","RelatedDescription":"Open PR \"Combine multiple tree ensemble models into a single tree ensemble\" (#364)"},{"Id":"332537019","IsPullRequest":true,"CreatedAt":"2018-06-14T19:38:44","Actor":"Ivanidzo4ka","Number":"363","RawContent":null,"Title":"add pipelineitem for Ova","State":"open","Body":"Address #34.\r\nThis PR add wrapper on top of OVA to make it pipeline friendly.","Url":"https://github.com/dotnet/machinelearning/pull/363","RelatedDescription":"Open PR \"add pipelineitem for Ova\" (#363)"},{"Id":"332465037","IsPullRequest":true,"CreatedAt":"2018-06-14T15:58:46","Actor":"Nepomuceno","Number":"362","RawContent":null,"Title":"Removing non source files from solution","State":"open","Body":"According to the discussion on the issue #322 I am proposing removing all non source files from the solution file in order to keep consistency and to keep the solution clean.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/362","RelatedDescription":"Open PR \"Removing non source files from solution\" (#362)"},{"Id":"332453998","IsPullRequest":true,"CreatedAt":"2018-06-14T15:30:52","Actor":"Nepomuceno","Number":"361","RawContent":null,"Title":"Correcting error messages according to the instructions on ","State":"open","Body":"#258 \r\n\r\nCorrecting error messages to reflect the issues page. ","Url":"https://github.com/dotnet/machinelearning/pull/361","RelatedDescription":"Open PR \"Correcting error messages according to the instructions on \" (#361)"},{"Id":"332411141","IsPullRequest":false,"CreatedAt":"2018-06-14T13:48:15","Actor":"nsulikowski","Number":"360","RawContent":null,"Title":"Problem with ColumnCopier","State":"open","Body":"I wrapped ML.NET as Excel functions using ExcelDNA.\r\nEverything works except ColumnCopier (for some strange reason).\r\nMay be ColumnCopier tries to emit code which might now work in that context?\r\nIt'll take me too long to create a replication example... but hopefully this general comment is enough to find the problem.","Url":"https://github.com/dotnet/machinelearning/issues/360","RelatedDescription":"Open issue \"Problem with ColumnCopier\" (#360)"},{"Id":"332374252","IsPullRequest":true,"CreatedAt":"2018-06-14T12:09:29","Actor":"jwood803","Number":"359","RawContent":null,"Title":"Update error messages to point to GitHub issues instead of support group","State":"open","Body":"Fix for issue #258 by replacing `tlcsupp` with a link to https://aka.ms/MLNetIssue.\r\n\r\nDue to my lacking git skills, some commits from #358 got in, but I believe that can get cleaned up if/when it gets merged.","Url":"https://github.com/dotnet/machinelearning/pull/359","RelatedDescription":"Open PR \"Update error messages to point to GitHub issues instead of support group\" (#359)"},{"Id":"332350860","IsPullRequest":true,"CreatedAt":"2018-06-14T10:52:49","Actor":"jwood803","Number":"358","RawContent":null,"Title":"[WIP] Update ProposeSweeps to have unique entries","State":"open","Body":"Proposed fix for issue #215.\r\n\r\nUpdated the `ProposeSweeps` virtual and override methods to not add to the collection if it already exists to prevent duplicates.\r\n\r\nPut this as a work in progress PR since I'm sure I'll need some guidance as to if this solution is even a good one and how it can be further improved.\r\n\r\nIf anything else is needed, I'll be glad to update this PR.","Url":"https://github.com/dotnet/machinelearning/pull/358","RelatedDescription":"Open PR \"[WIP] Update ProposeSweeps to have unique entries\" (#358)"},{"Id":"332239075","IsPullRequest":false,"CreatedAt":"2018-06-14T03:26:35","Actor":"mairaw","Number":"357","RawContent":null,"Title":"Using ML.Net in Classic Windows Console or WPF App","State":"open","Body":"@Dirkster99 commented on [Wed Jun 13 2018](https://github.com/dotnet/docs/issues/5937)\n\nI am currently evaluating the ML.Net library and get it to run with .Net Core:\r\nhttps://github.com/Dirkster99/ML\r\n\r\nbut I would like to also run it within a classic Windows console or WPF app (eg .Net 4.5.2).\r\n\r\nIs it possible to do this with the current Nuget?\r\nMy problem is that when I try to install the ML.Net Nuget package - the package manager says its installed (see output below). But the ML.Net package never shows up in the references section and I find it, thus, hard to use it in this context.\r\n\r\nIs this a current limitation of VS or an issue with the ML.Net nuget package? Is there a workaround solution?\r\n\r\n\r\nPackage Manager output log:\r\nAttempting to gather dependency information for package 'Microsoft.ML.0.2.0' with respect to project 'Classifier', targeting '.NETFramework,Version=v4.5.2'\r\nGathering dependency information took 70.64 ms\r\nAttempting to resolve dependencies for package 'Microsoft.ML.0.2.0' with DependencyBehavior 'Lowest'\r\nResolving dependency information took 0 ms\r\nResolving actions to install package 'Microsoft.ML.0.2.0'\r\nResolved actions to install package 'Microsoft.ML.0.2.0'\r\nRetrieving package 'Microsoft.ML 0.2.0' from 'nuget.org'.\r\nAdding package 'Microsoft.ML.0.2.0' to folder 'C:\\Users\\NOP\\Desktop\\Classifier\\packages'\r\nAdded package 'Microsoft.ML.0.2.0' to folder 'C:\\Users\\NOP\\Desktop\\Classifier\\packages'\r\nAdded package 'Microsoft.ML.0.2.0' to 'packages.config'\r\nSuccessfully installed 'Microsoft.ML 0.2.0' to Classifier\r\nExecuting nuget actions took 1.05 sec\r\nTime Elapsed: 00:00:01.3016144\r\n========== Finished ==========\r\n![screenshot](https://user-images.githubusercontent.com/2129700/41371517-e0e3db16-6f4a-11e8-975e-ca96a9390ee4.png)\r\n\n\n","Url":"https://github.com/dotnet/machinelearning/issues/357","RelatedDescription":"Open issue \"Using ML.Net in Classic Windows Console or WPF App\" (#357)"},{"Id":"332197383","IsPullRequest":true,"CreatedAt":"2018-06-13T23:13:00","Actor":"TomFinley","Number":"356","RawContent":null,"Title":"Use HideEnumValueAttribute for both manifest and C# API generation.","State":"open","Body":"Fixes #341, so that `HideEnumValueAttribute` is used not only in command line help usage but also the other late binding scheme depending on arguments, entry-points. This PR will also allow a more natural solution to #293 to be engineered.","Url":"https://github.com/dotnet/machinelearning/pull/356","RelatedDescription":"Open PR \"Use HideEnumValueAttribute for both manifest and C# API generation.\" (#356)"},{"Id":"332076809","IsPullRequest":true,"CreatedAt":"2018-06-13T21:33:45","Actor":"danmosemsft","Number":"355","RawContent":null,"Title":"Add link to samples","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/355","RelatedDescription":"Closed or merged PR \"Add link to samples\" (#355)"},{"Id":"331752523","IsPullRequest":false,"CreatedAt":"2018-06-13T19:37:58","Actor":"Ivanidzo4ka","Number":"350","RawContent":null,"Title":"We no longer need dependency on System.ValueTuple","State":"closed","Body":"No point to drag additional dependency for package which we no longer consume.","Url":"https://github.com/dotnet/machinelearning/issues/350","RelatedDescription":"Closed issue \"We no longer need dependency on System.ValueTuple\" (#350)"},{"Id":"331752651","IsPullRequest":true,"CreatedAt":"2018-06-13T19:37:52","Actor":"Ivanidzo4ka","Number":"351","RawContent":null,"Title":"Remove reference and dependency on System.ValueTuple","State":"closed","Body":"address #350 ","Url":"https://github.com/dotnet/machinelearning/pull/351","RelatedDescription":"Closed or merged PR \"Remove reference and dependency on System.ValueTuple\" (#351)"},{"Id":"330789524","IsPullRequest":true,"CreatedAt":"2018-06-13T17:51:20","Actor":"yaeldekel","Number":"338","RawContent":null,"Title":"Create CalibratedPredictor instead of SchemaBindableCalibratedPredictor","State":"closed","Body":"Whenever the predictor implements IValueMapper, we create a calibrated predictor that implements IValueMapperDist. If the predictor is not an IValueMapper, we create SchemaBindableCalibratedPredictor.\r\nFixes #337 .","Url":"https://github.com/dotnet/machinelearning/pull/338","RelatedDescription":"Closed or merged PR \"Create CalibratedPredictor instead of SchemaBindableCalibratedPredictor\" (#338)"},{"Id":"332074884","IsPullRequest":false,"CreatedAt":"2018-06-13T16:37:48","Actor":"jfcarr","Number":"354","RawContent":null,"Title":"TextLoader CreateFrom useHeader usage is confusing","State":"open","Body":"Example:\r\n\r\n`pipeline.Add(new TextLoader(_datapath).CreateFrom<SampleModel>(useHeader: true, separator: ','));`\r\n\r\nThe usage of the useHeader argument is not intuitive, based on the name.  The name \"useHeader\" implies that a value of **true** will cause the header line to be included when loading the model.  In reality, setting useHeader to **true** causes the header line to be skipped.  Perhaps something like \"excludeHeader\", or \"ignoreHeader\", instead?  Or, if you'd prefer something that simply indicates the presence of a header line, versus an action to be taken, maybe \"containsHeader\"?\r\n\r\nUsing ML version 0.2.0 in a .NET Core 2 console app.","Url":"https://github.com/dotnet/machinelearning/issues/354","RelatedDescription":"Open issue \"TextLoader CreateFrom useHeader usage is confusing\" (#354)"},{"Id":"332030298","IsPullRequest":false,"CreatedAt":"2018-06-13T14:49:44","Actor":"atotalnoob","Number":"353","RawContent":null,"Title":"Need better support for using JSON files as a training dataset","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: Version 2.1.200 \r\n\r\n### Issue\r\n\r\n- **What did you do?** I want to use a JSON file as my training data. \r\n- **What happened?** Throws error `System.ArgumentOutOfRangeException: 'Could not determine an IDataView type for member Patterns'`\r\n- **What did you expect?** To be able to use my json file to train a ML model. \r\n\r\n### Source code / logs\r\n\r\nJSON File (Abbreviated here for brevity, but its all the same):\r\n```\r\n[\r\n    {\r\n      \"Label\": \"greeting\",\r\n      \"Patterns\": [ \"Hi\", \"How are you\", \"Is anyone there?\", \"Hello\", \"Good day\" ]\r\n    },\r\n    {\r\n      \"Label\": \"goodbye\",\r\n      \"Patterns\": [ \"Bye\", \"See you later\", \"Goodbye\" ]\r\n    }\r\n]\r\n\r\n```\r\n\r\nClass I am deserializing into: \r\n\r\n```\r\n  public class Intent\r\n    {\r\n        [Column(\"0\")]\r\n        [ColumnName(\"Label\")]\r\n        public string Label;\r\n        [Column(\"1\")]\r\n        public List<string> Patterns = new List<string>();\r\n    }\r\n```\r\n\r\nLoading in the data using:\r\n```\r\n    public static class IntentLoader\r\n    {\r\n\r\n        public static List<Intent> LoadIntentData()\r\n        {\r\n            var fileContents = System.IO.File.ReadAllText(\"intents.json\");\r\n\r\n            try\r\n            {\r\n               var intents = JsonConvert.DeserializeObject<List<Intent>>(fileContents);\r\n                return intents;\r\n            }\r\n            catch (Exception e)\r\n            {\r\n\r\n                throw e;\r\n            }\r\n            \r\n        }\r\n    }\r\n```\r\npipeline:\r\n```\r\n public LearningPipeline GetPipeline()\r\n        {\r\n            var intents = IntentLoader.LoadIntentData();\r\n            var collection = CollectionDataSource.Create(intents);\r\n            var pipeline = new LearningPipeline();\r\n            pipeline.Add(collection);\r\n            pipeline.Add(new ColumnConcatenator(outputColumn: \"Features\", \"Patterns\"));\r\n            pipeline.Add(new Dictionarizer(\"Label\"));\r\n            pipeline.Add(new StochasticDualCoordinateAscentClassifier());\r\n            pipeline.Add(new PredictedLabelColumnOriginalValueConverter() { PredictedLabelColumn = \"PredictedLabel\" });\r\n\r\n            return pipeline;\r\n        }\r\n```\r\nModel training (exception happens here):\r\n```\r\n public PredictionModel<Intent, IntentPrediction> Train()\r\n        {\r\n            var pipeline = GetPipeline();\r\n            var model = pipeline.Train<Intent, IntentPrediction>(); //exception thrown here\r\n            return model;\r\n        }\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/353","RelatedDescription":"Open issue \"Need better support for using JSON files as a training dataset\" (#353)"},{"Id":"332027543","IsPullRequest":false,"CreatedAt":"2018-06-13T14:43:44","Actor":"atotalnoob","Number":"352","RawContent":null,"Title":"Can't use getter/setters in objects ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 2.1.200\r\n\r\n### Issue\r\n\r\n- **What did you do?** Trying to use a JSON object that has been deserialized into C# classes\r\n- **What happened?** Using getter/setters causes errors with trying to decorate the columns. \r\nOkay:\r\n[Column(\"0\")]\r\npublic string Label;\r\nNot okay:\r\n[Column(\"0\")]\r\npublic string Label { get; set; }\r\n\r\n- **What did you expect?** To be able to use getter/setters. Without them, it makes everything a PITA\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\nClass I am using to deserialize: \r\n\r\n```\r\n    public class Intent\r\n    {\r\n        [Column(\"0\")]\r\n        [ColumnName(\"Label\")]\r\n        public string Label;\r\n        [Column(\"1\")]\r\n        public List<string> Patterns = new List<string>();\r\n    }\r\n\r\n```\r\n\r\nLoading in intent data with this:\r\n\r\n```\r\n public static class IntentLoader\r\n    {\r\n\r\n        public static List<Intent> LoadIntentData()\r\n        {\r\n            var fileContents = System.IO.File.ReadAllText(\"intents.json\");\r\n\r\n            try\r\n            {\r\n               var intents = JsonConvert.DeserializeObject<List<Intent>>(fileContents);\r\n                return intents;\r\n            }\r\n            catch (Exception e)\r\n            {\r\n\r\n                throw e;\r\n            }\r\n            \r\n        }\r\n    }\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/352","RelatedDescription":"Open issue \"Can't use getter/setters in objects \" (#352)"},{"Id":"331484059","IsPullRequest":true,"CreatedAt":"2018-06-12T23:22:43","Actor":"justinormont","Number":"348","RawContent":null,"Title":"Minor formatting in CollectionDataSourceTests.cs","State":"closed","Body":"Corrects misplaced spaces in CollectionDataSourceTests.cs","Url":"https://github.com/dotnet/machinelearning/pull/348","RelatedDescription":"Closed or merged PR \"Minor formatting in CollectionDataSourceTests.cs\" (#348)"},{"Id":"331705127","IsPullRequest":false,"CreatedAt":"2018-06-12T18:36:29","Actor":"rogancarr","Number":"349","RawContent":null,"Title":"Enable fault tolerance in FastTree for distributed learning","State":"open","Body":"As we plan to add distributed training to ML.NET, we have to consider Fault Tolerance of the individual worker nodes. In the case of FastTree, fault tolerance for individual workers has two requirements:\r\n- Failed FastTree workers must be restarted in the current state of the calculation\r\n- Non-failing workers must respond to failures in the IParallelTraining components*\r\n\r\n*This response depends on the implementation of fault tolerance.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/349","RelatedDescription":"Open issue \"Enable fault tolerance in FastTree for distributed learning\" (#349)"},{"Id":"331285976","IsPullRequest":false,"CreatedAt":"2018-06-12T17:20:49","Actor":"zeahmed","Number":"345","RawContent":null,"Title":"CSharpApiGenerator.cs does not generate compile-able code...","State":"closed","Body":"CSharpApiGenerator.cs does not generate compile-able code. Some types have been moved around in different namespaces which are causing error during compilation.\r\n\r\nThis happened after the PR #61 was merged. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/345","RelatedDescription":"Closed issue \"CSharpApiGenerator.cs does not generate compile-able code...\" (#345)"},{"Id":"330811369","IsPullRequest":true,"CreatedAt":"2018-06-12T17:20:33","Actor":"Ivanidzo4ka","Number":"339","RawContent":null,"Title":"fix namespace issue in CSharpGenerator and some refactoring","State":"closed","Body":"address #202 #345","Url":"https://github.com/dotnet/machinelearning/pull/339","RelatedDescription":"Closed or merged PR \"fix namespace issue in CSharpGenerator and some refactoring\" (#339)"},{"Id":"331043393","IsPullRequest":true,"CreatedAt":"2018-06-12T03:17:49","Actor":"BeanHsiang","Number":"344","RawContent":null,"Title":"enabled developer naming their column same as valid v…","State":"closed","Body":"fiexed for #318，enabled developer naming their column same as valid variable name","Url":"https://github.com/dotnet/machinelearning/pull/344","RelatedDescription":"Closed or merged PR \"enabled developer naming their column same as valid v…\" (#344)"},{"Id":"331369471","IsPullRequest":false,"CreatedAt":"2018-06-11T22:14:20","Actor":"zeahmed","Number":"347","RawContent":null,"Title":"Use schema from trained model instead of inferring it again from type when creating prediction engine.","State":"open","Body":"### System information\r\n\r\n- **Windows/Linux/MacOS**:\r\n- **.NET Version: 2.1.200**: \r\n\r\n### Issue\r\n\r\n- **Defining custom schema using TextLoaderArguments in TextLoader?**\r\n- **Training failed when creating prediction engine?**\r\n- **Expect that `CreateBatchPredictionEngine` should use schema from trained model instead of inferring schema again from input type?**\r\n\r\n### Source code / logs\r\n\r\n``` C#\r\npublic class IrisData\r\n{\r\n    public float Label;\r\n\r\n    public float[] Features;\r\n}\r\n\r\npublic class IrisPrediction\r\n{\r\n    [ColumnName(\"Score\")]\r\n    public float[] PredictedLabels;\r\n}\r\n        \r\npublic void SampleTest()\r\n{\r\n    string dataPath = GetDataPath(\"iris.txt\");\r\n\r\n    var pipeline = new LearningPipeline(seed: 1, conc: 1);\r\n\r\n    pipeline.Add(new TextLoader(dataPath)\r\n    {\r\n        Arguments = new TextLoaderArguments\r\n        {\r\n            Separator = new[] { '\\t' },\r\n            HasHeader = true,\r\n            Column = new[]\r\n            {\r\n                new TextLoaderColumn()\r\n                {\r\n                    Name = \"Label\",\r\n                    Source = new [] { new TextLoaderRange(0) },\r\n                    Type = Runtime.Data.DataKind.Num\r\n                },\r\n\r\n                new TextLoaderColumn()\r\n                {\r\n                    Name = \"Features\",\r\n                    Source = new [] { new TextLoaderRange(1,4) },\r\n                    Type = Runtime.Data.DataKind.Num\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    pipeline.Add(new StochasticDualCoordinateAscentClassifier()\r\n    {\r\n        NormalizeFeatures = NormalizeOption.No\r\n    });\r\n\r\n    PredictionModel<IrisData, IrisPrediction> model = pipeline.Train<IrisData, IrisPrediction>();\r\n\r\n    IrisPrediction prediction = model.Predict(new IrisData()\r\n    {\r\n        Features = new[] { 3.3f, 1.6f, 0.2f, 5.1f }\r\n    });\r\n\r\n    Assert.Equal(1, prediction.PredictedLabels[0], 2);\r\n    Assert.Equal(0, prediction.PredictedLabels[1], 2);\r\n    Assert.Equal(0, prediction.PredictedLabels[2], 2);\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/347","RelatedDescription":"Open issue \"Use schema from trained model instead of inferring it again from type when creating prediction engine.\" (#347)"},{"Id":"331310502","IsPullRequest":false,"CreatedAt":"2018-06-11T19:01:13","Actor":"helloguo","Number":"346","RawContent":null,"Title":"ParallelTraining API","State":"open","Body":"Can anyone explain what `ParallelTraining` is and how to use it? And what's the difference between `ParallelTraining` and `SingleParallelTraining`?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/346","RelatedDescription":"Open issue \"ParallelTraining API\" (#346)"},{"Id":"330990596","IsPullRequest":false,"CreatedAt":"2018-06-10T18:19:42","Actor":"cosmincatalin","Number":"343","RawContent":null,"Title":"Predict hangs indefinetly","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Mac OS X 10.13\r\n- **.NET Version (eg., dotnet --info)**:  2.0.5\r\n\r\n### Issue\r\n\r\n- I have a `.csv` file with data that I use for individual predictions. I use a `FastTreeRegressor` model loaded from disk. I make individual predictions and not batch predictions because I need the absolute error histogram. At first, predicting works fine, but then, after what appears to be a random number of executions, the `Predict` method hangs without anything else happening.\r\n- I expect either `Predict` failing with some Exception, or better, fail for the same example or, even better, `Predict` to work for all my examples, which it should.\r\n\r\nBy _random_ I mean that I have a few million examples I have to go through, but predicting stops anywhere between after a few hundreds predictions or at best after a few thousands.\r\n\r\n### Source code / logs\r\n\r\nThe stripped down source code for `Program.cs`. Note that I have also tried with version `0.2`\r\n\r\n```\r\nusing System;\r\nusing System.IO;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.ML;\r\nusing PredictionModelling;\r\n\r\nnamespace PredictionMetrics\r\n{\r\n    class Program\r\n    {\r\n\r\n        static async Task Main(string[] args)\r\n        {\r\n            foreach (string culture in cultures)\r\n            {\r\n                var model = await PredictionModel.ReadAsync<Data, DataPrediction>(\"model.zip\");\r\n                StreamReader file = new StreamReader(\"test.csv\");\r\n\r\n                file.ReadLine(); // This is for the header\r\n\r\n                string line;\r\n\r\n                using (StreamWriter outputFile = new StreamWriter(\"test-predictions.csv\"))\r\n                {\r\n                    var i = 0;\r\n                    outputFile.WriteLine($\"actual-value,predicted-value\");\r\n                    while ((line = file.ReadLine()) != null)\r\n                    {\r\n                        var data = line.Split(new[] { ',' });\r\n                        var data = new Data()\r\n                        {\r\n                            Feature0 = float.Parse(data[0]),\r\n                            Feature1 = float.Parse(data[1])\r\n                        };\r\n                        var csvLine = $\"{data[2]},{model.Predict(data).Value}\";\r\n                        outputFile.WriteLine(csvLine);\r\n                        i++;\r\n                        if (i % 100 == 0)\r\n                        {\r\n                            outputFile.Flush();\r\n                        }\r\n                    }\r\n                }\r\n                file.Close();\r\n            }\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/343","RelatedDescription":"Open issue \"Predict hangs indefinetly\" (#343)"},{"Id":"330952887","IsPullRequest":false,"CreatedAt":"2018-06-10T09:10:07","Actor":"BeanHsiang","Number":"342","RawContent":null,"Title":"Could TrainTestSplit support Shuffle?","State":"open","Body":"the class \"TrainTestSplit\" only support \"Fraction\" in TrainTestSplit.Input current, \"Shuffle\" is other important attribute. \r\nCould ML.NET support \"Shuffle & Split\" next version?","Url":"https://github.com/dotnet/machinelearning/issues/342","RelatedDescription":"Open issue \"Could TrainTestSplit support Shuffle?\" (#342)"},{"Id":"330843823","IsPullRequest":false,"CreatedAt":"2018-06-09T02:01:28","Actor":"TomFinley","Number":"341","RawContent":null,"Title":"Should entry-points respect `HideEnumValueAttribute` information?","State":"open","Body":"The `HideEnumValueAttribute` is currently only respected by the command line help tool. Here is an example of it:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/c023727b76970ab913ec1ce38276508835c17bcf/src/Microsoft.ML.Transforms/NAHandleTransform.cs#L45-L52\r\n\r\nYet in the entry-point manifest I see is polluted with these shorter forms. I feel like these *probably* ought to be suppressed here during manifest generation as well.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/20099c31a9ca2d9c50eff299b8ce6f7be5d72346/test/BaselineOutput/Common/EntryPoints/core_manifest.json#L15620-L15632\r\n\r\nAlso the entry-point based API is affected by the same issue, of course.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/20099c31a9ca2d9c50eff299b8ce6f7be5d72346/src/Microsoft.ML/CSharpApi.cs#L11162-L11169","Url":"https://github.com/dotnet/machinelearning/issues/341","RelatedDescription":"Open issue \"Should entry-points respect `HideEnumValueAttribute` information?\" (#341)"},{"Id":"330842719","IsPullRequest":false,"CreatedAt":"2018-06-09T01:43:58","Actor":"rlingineni","Number":"340","RawContent":null,"Title":"Will this work with PCL Projects? ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: iOS/Android\r\n\r\n### Issue\r\n- **What did you do?**\r\nI was experimenting running this on a Xamarin Mobile app (Xam.Forms). I was able to install the nuget package into my project, which targets PCL. However, no luck in getting it to work.\r\n\r\n- **What happened?**\r\nEntry point 'Trainers.StochasticDualCoordinateAscentClassifier' not found\r\n\r\n- **What did you expect?**\r\nI expected the program to run.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\n```\r\nvar pipeline = new LearningPipeline();\r\nvar data = new List<TranscriptionData>() {\r\n    new TranscriptionData { Transcription=\"This is a Happy presnetation!!\" , clicked=1},\r\n    new TranscriptionData { Transcription=\"Very sad now\" , clicked=0},\r\n    new TranscriptionData { Transcription=\"This is sad also\" , clicked=0}\r\n };\r\n\r\n     var collection = CollectionDataSource.Create(data);\r\n     pipeline.Add(collection);\r\n     pipeline.Add(new ColumnConcatenator(\"Features\", \"Transcription\"));\r\n     pipeline.Add(new StochasticDualCoordinateAscentClassifier()); //ERROR: any classifier here fails with entry point\r\n     PredictionModel<TranscriptionData, TranscriptionPrediction> model = pipeline.Train<TranscriptionData,TranscriptionPrediction>();\r\n\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/340","RelatedDescription":"Open issue \"Will this work with PCL Projects? \" (#340)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-06-18T05:30:38.9123798Z","RunDurationInMilliseconds":1018}