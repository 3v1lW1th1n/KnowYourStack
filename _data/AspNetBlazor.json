{"Data":{"GitHubIssues":{"Issues":[{"Id":"346353187","IsPullRequest":false,"CreatedAt":"2018-07-31T21:57:49","Actor":"RE-Butler","Number":"1239","RawContent":null,"Title":"<ClassName> contains multiple public properties with names case-insensitively matching 'children'. Such types cannot be used for JSON deserialization","State":"closed","Body":"This error occurs in the JS console on this line:\r\n\r\n`Containers = await Http.GetJsonAsync<Namespace.dto.Container>(\"apiURL\");`\r\n\r\nHere is Namespace.Container:\r\n\r\n```csharp\r\nnamespace Namespace  \r\n{\r\n    public class Container\r\n    {\r\n        public Guid ContainerId { get; set; }\r\n        public string Name { get; set; }\r\n        public Guid ParentId { get; set; }\r\n        public string Barcode { get; set; }\r\n        public float Height { get; set; }\r\n        public float Width { get; set; }\r\n        public float Length { get; set; }\r\n        public Guid ContainerTypeId { get; set; }\r\n        public Guid LoadId { get; set; }\r\n        public Guid AreaId { get; set; }\r\n\r\n        public Container Parent { get; set; }\r\n        public ICollection<Container> Children { get; set; }\r\n        public ICollection<Inventory.Item> Items { get; set; }\r\n        public Area Area { get; set; }\r\n        public ContainerType ContainerType { get; set; }\r\n        public Orders.Load Load { get; set; }\r\n\r\n    }\r\n}\r\nnamespace Namespace.dto {\r\n    public class Container : Namespace.Container\r\n    {\r\n        public bool Included { get; set; }\r\n        public new ICollection<Dto.Container> Children { get; set; }\r\n        public new ICollection<Inventory.Dto.Item> Items { get; set; }\r\n    }\r\n}\r\n```\r\n\r\nAll I am doing in the controller is instantiating a Namespace.Container, putting some values in the properties, and then returning it.\r\n\r\nWhen I use Http.GetStringAsync, I can see the JSON as expected. ","Url":"https://github.com/aspnet/Blazor/issues/1239","RelatedDescription":"Closed issue \"<ClassName> contains multiple public properties with names case-insensitively matching 'children'. Such types cannot be used for JSON deserialization\" (#1239)"},{"Id":"346298544","IsPullRequest":false,"CreatedAt":"2018-07-31T20:24:16","Actor":"foximoxi","Number":"1237","RawContent":null,"Title":"Missing event sender","State":"closed","Body":"Hi,\r\nHow I can identify which button was clicked?\r\n\r\n```c#\r\n@for (int i=0;i<5;i++)\r\n{\r\n    <button onclick=\"@Clicked\"/>\r\n}\r\n\r\n@functions {\r\n\r\nvoid Clicked(UIEventArgs args)\r\n{\r\n     //args does not have sender, HTML id or any other identifier...\r\n}\r\n\r\n}\r\n","Url":"https://github.com/aspnet/Blazor/issues/1237","RelatedDescription":"Closed issue \"Missing event sender\" (#1237)"},{"Id":"346325606","IsPullRequest":false,"CreatedAt":"2018-07-31T19:51:22","Actor":"MarkStega","Number":"1238","RawContent":null,"Title":"Linker error in 0.5.1","State":"closed","Body":"Building from VS2017 15.7.5 on Windows 10\r\n\r\nI just added a few files to a previously working project and am getting the following linker error:\r\n\r\n```\r\n5>------ Build started: Project: Optimiser.NG.Blazor, Configuration: Debug Any CPU ------\r\n5>Views\\ORManagerView\\ORManagerView.cshtml(12,31,12,42): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.\r\n5>ViewModels\\ORManagerViewModel\\ORManagerViewModel.cs(192,30,192,32): warning CS0168: The variable 'ex' is declared but never used\r\n5>Views\\ORManagerView\\ORManagerView.cshtml(12,31,12,42): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.\r\n5>ViewModels\\ORManagerViewModel\\ORManagerViewModel.cs(192,30,192,32): warning CS0168: The variable 'ex' is declared but never used\r\n5>Views\\ORManagerView\\ORManagerView.cshtml(10,19,10,28): warning CS0169: The field 'ORManagerView.forecasts' is never used\r\n5>Optimiser.NG.Blazor -> C:\\Solutions\\OHI\\Optimiser\\Optimiser.NG.Blazor\\bin\\Debug\\netstandard2.0\\Optimiser.NG.Blazor.dll\r\n5>Fatal error in IL Linker\r\n5>Mono.Cecil.AssemblyResolutionException: Failed to resolve assembly: 'System.Private.ServiceModel, Version=4.5.0.3, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n5>   at Mono.Linker.DirectoryAssemblyResolver.Resolve(AssemblyNameReference name, ReaderParameters parameters)\r\n5>   at Mono.Linker.AssemblyResolver.Resolve(AssemblyNameReference name, ReaderParameters parameters)\r\n5>   at Mono.Linker.DirectoryAssemblyResolver.Resolve(AssemblyNameReference name)\r\n5>   at Mono.Cecil.MetadataResolver.Resolve(TypeReference type)\r\n5>   at Mono.Linker.Steps.ResolveFromAssemblyStep.ProcessLibrary(LinkContext context, AssemblyDefinition assembly, RootVisibility rootVisibility)\r\n5>   at Mono.Linker.Steps.ResolveFromAssemblyStep.ProcessLibrary(AssemblyDefinition assembly)\r\n5>   at Mono.Linker.Steps.ResolveFromAssemblyStep.Process()\r\n5>   at Mono.Linker.Steps.BaseStep.Process(LinkContext context)\r\n5>   at Mono.Linker.Pipeline.Process(LinkContext context)\r\n5>   at Mono.Linker.Driver.Run(ILogger customLogger)\r\n5>   at Mono.Linker.Driver.Execute(String[] args, ILogger customLogger)\r\n5>C:\\Users\\ms\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\Blazor.MonoRuntime.targets(441,5): error MSB3073: The command \"dotnet \"C:\\Users\\ms\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/illink/illink.dll\" -l none -c link -u link -b true -t --verbose  -d \"C:\\Users\\ms\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/mono/bcl/\" -d \"C:\\Users\\ms\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/mono/bcl/Facades/\" -o \"C:\\Solutions\\OHI\\Optimiser\\Optimiser.NG.Blazor\\obj\\Debug\\netstandard2.0\\blazor/linker/\" -x \"C:\\Users\\ms\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\BuiltInBclLinkerDescriptor.xml\" -x \"C:\\Solutions\\OHI\\Optimiser\\Optimiser.NG.Blazor\\obj\\Debug\\netstandard2.0\\blazor\\linker.descriptor.xml\" -a \"C:\\Users\\ms\\.nuget\\packages\\microsoft.aspnetcore.blazor\\0.5.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\microsoft.aspnetcore.blazor.browser\\0.5.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.Browser.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\microsoft.jsinterop\\0.5.1\\lib\\netstandard2.0\\Microsoft.JSInterop.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\mono.webassembly.interop\\0.5.1\\lib\\netstandard2.0\\Mono.WebAssembly.Interop.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\nlog\\4.5.7\\lib\\netstandard2.0\\NLog.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\system.reflection.dispatchproxy\\4.5.0\\lib\\netstandard2.0\\System.Reflection.DispatchProxy.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\system.security.principal.windows\\4.5.0\\lib\\netstandard2.0\\System.Security.Principal.Windows.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\system.servicemodel.duplex\\4.5.3\\lib\\netstandard2.0\\System.ServiceModel.Duplex.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\system.servicemodel.http\\4.5.3\\lib\\netstandard2.0\\System.ServiceModel.Http.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\system.servicemodel.nettcp\\4.5.3\\lib\\netstandard2.0\\System.ServiceModel.NetTcp.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\system.servicemodel.primitives\\4.5.3\\lib\\netstandard2.0\\System.ServiceModel.Primitives.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\system.servicemodel.primitives\\4.5.3\\lib\\netstandard2.0\\System.ServiceModel.dll\" -a \"C:\\Users\\ms\\.nuget\\packages\\system.servicemodel.security\\4.5.3\\lib\\netstandard2.0\\System.ServiceModel.Security.dll\" -a \"C:\\Solutions\\OHI\\Optimiser\\DataTier.NG\\bin\\Debug\\netstandard2.0\\DataTier.NG.dll\" -a \"C:\\Solutions\\OHI\\Optimiser\\Optimiser.NG.Blazor.Shared\\bin\\Debug\\netstandard2.0\\Optimiser.NG.Blazor.Shared.dll\" -a \"C:\\Solutions\\OHI\\Optimiser\\SharedUtilities.NG\\bin\\Debug\\netstandard2.0\\SharedUtilities.NG.dll\" -a \"C:\\Solutions\\OHI\\Optimiser\\SystemFramework.NG\\bin\\Debug\\netstandard2.0\\SystemFramework.NG.dll\" -a \"C:\\Solutions\\OHI\\Optimiser\\Optimiser.NG.Blazor\\obj\\Debug\\netstandard2.0\\Optimiser.NG.Blazor.dll\"\" exited with code 1.\r\n5>Done building project \"Optimiser.NG.Blazor.csproj\" -- FAILED.\r\n```\r\n\r\nWhat is the appropriate way to track down the cause of this error?","Url":"https://github.com/aspnet/Blazor/issues/1238","RelatedDescription":"Closed issue \"Linker error in 0.5.1\" (#1238)"},{"Id":"346256045","IsPullRequest":false,"CreatedAt":"2018-07-31T16:15:15","Actor":"danroth27","Number":"1236","RawContent":null,"Title":"Provide a way to get the changed value when handling oninput event","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/issues/1236","RelatedDescription":"Closed issue \"Provide a way to get the changed value when handling oninput event\" (#1236)"},{"Id":"346206208","IsPullRequest":false,"CreatedAt":"2018-07-31T16:08:12","Actor":"Knudel","Number":"1235","RawContent":null,"Title":"What's the best way to access innerhtml of a div","State":"closed","Body":"I am creating an HTML editor like this:\r\n\r\n`<div id=\"mytextarea\" class=\"CoreEditor\" contenteditable=\"true\" spellcheck=\"false\"></div>`\r\n\r\nThe editor is in a component.\r\nI want to bind (two way) to the InnerHTML of the div, but how can I do that?\r\n\r\nReading and writing the innerHtml through javascript:\"\r\n\r\n`document.getElementById(selector).innerHTML = value;`\r\n\r\nis resulting that the dom seems not always be ready when I bind.\r\n\r\nThere doesn't seem to be a bindable InnerHTML?\r\n\r\nWhat is the best way?\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1235","RelatedDescription":"Closed issue \"What's the best way to access innerhtml of a div\" (#1235)"},{"Id":"346178874","IsPullRequest":true,"CreatedAt":"2018-07-31T13:05:54","Actor":"sebbert","Number":"1234","RawContent":null,"Title":"Marshal oninput events as UIChangeEventArgs","State":"open","Body":"Blazor does handle the oninput event, but it is marshalled as a regular UIEventArgs. This means that we cannot access the new value of the input element from inside our oninput handler. This changes the type of `oninput` events to `UIChangeEventArgs`, so that we can access the new value from our event handler.\r\n\r\nAddresses #821","Url":"https://github.com/aspnet/Blazor/pull/1234","RelatedDescription":"Open PR \"Marshal oninput events as UIChangeEventArgs\" (#1234)"},{"Id":"345649264","IsPullRequest":false,"CreatedAt":"2018-07-31T12:43:54","Actor":"Knudel","Number":"1229","RawContent":null,"Title":"text is not updated when in a ref interface","State":"closed","Body":"The ref of a component is set after Onit or after OnParametersSet.\r\n\r\nExample, I have a demo Component like:\r\n\r\n```\r\n@using Microsoft.AspNetCore.Blazor.Components\r\n@implements IDemo\r\n\r\n@DemoText\r\n\r\n@functions\r\n{\r\n    [Parameter]\r\n    public string DemoText { get; set; } = \"\";\r\n}\r\n\r\n```\r\n\r\nIt implements interface:\r\n```\r\n  interface IDemo\r\n    {\r\n        string DemoText { get; set; }\r\n    }\r\n```\r\n\r\nOn Index.cshtml:\r\n\r\n```\r\n@page \"/\"\r\n\r\n<Demo ref=\"@demo\"></Demo>\r\n\r\n@functions\r\n{\r\n    IDemo demo;\r\n    \r\n    protected override void OnParametersSet()\r\n    {                \r\n            demo.DemoText = \"This fails\";        \r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\nDemo isn’t created after OnInit or after OnParametersSet and the line:\r\n\r\n         `   demo.DemoText = \"This fails\";       ` \r\n\r\nfails.\r\n\r\nIs this the right way?\r\n\r\nMaybe OnInit can be called after the initiation of refs or can there be a override which is called before rendering but after the initiation of ref, something like OnPreRender?\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1229","RelatedDescription":"Closed issue \"text is not updated when in a ref interface\" (#1229)"},{"Id":"346040452","IsPullRequest":false,"CreatedAt":"2018-07-31T05:28:28","Actor":"danroth27","Number":"1233","RawContent":null,"Title":"Don't include list of reference assemblies in blazor.boot.json for server-side apps","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/1233","RelatedDescription":"Open issue \"Don't include list of reference assemblies in blazor.boot.json for server-side apps\" (#1233)"},{"Id":"345602905","IsPullRequest":false,"CreatedAt":"2018-07-30T23:50:45","Actor":"treenew","Number":"1228","RawContent":null,"Title":"How work blazor on iOS version 9?","State":"closed","Body":"iOS11+  It's work.\r\niOS10+ and  Blazor.Polyfill.js   It's work.\r\niOS9 Is't not work.","Url":"https://github.com/aspnet/Blazor/issues/1228","RelatedDescription":"Closed issue \"How work blazor on iOS version 9?\" (#1228)"},{"Id":"345774177","IsPullRequest":false,"CreatedAt":"2018-07-30T22:12:17","Actor":"MarkStega","Number":"1231","RawContent":null,"Title":"Project build failing in 0.5.1","State":"closed","Body":"I am trying to bring a project forward from 0.3.0 to 0.5.1. Only about 25% of the pages in the project are generating output in the obj directory. This made me open the csproj file for the project. I found one Itemgroup that listed all of the source files as\r\n```  \r\n<ItemGroup>\r\n    <None Include=\"Pages\\Alerts.cshtml\" />\r\n    <None Include=\"Pages\\ButtonGroups.cshtml\" />\r\n    <None Include=\"Pages\\Buttons.cshtml\" />\r\n    ...\r\n</ItemGroup>\r\n\r\n```\r\n\r\nand then for each source file\r\n\r\n```\r\n  <ItemGroup>\r\n    <BlazorGenerate Remove=\"Pages\\Alerts.cshtml\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Content Remove=\"Pages\\Alerts.cshtml\" />\r\n  </ItemGroup>\r\n```\r\n\r\nnot having either of those two constructs in a newly generated Blazor project I removed them. Now, when I try to build ht project I get\r\n```\r\n1>------ Build started: Project: Sample, Configuration: Debug Any CPU ------\r\n1>One or more errors occurred. (Stack empty.)\r\n1>   at System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)\r\n1>   at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n1>--- End of stack trace from previous location where exception was thrown ---\r\n1>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n1>   at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)\r\n1>   at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n1>   at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)\r\n1>   at Microsoft.AspNetCore.Razor.Tools.GenerateCommand.GenerateCode(RazorProjectEngine engine, SourceItem[] inputs)\r\n1>   at Microsoft.AspNetCore.Razor.Tools.GenerateCommand.ExecuteCore(RazorConfiguration configuration, String projectDirectory, String tagHelperManifest, List`1 sources, List`1 outputs, List`1 relativePaths)\r\n1>   at Microsoft.AspNetCore.Razor.Tools.GenerateCommand.ExecuteCoreAsync()\r\n1>   at Microsoft.AspNetCore.Razor.Tools.CommandBase.<ExecuteAsync>d__13.MoveNext()\r\n1>C:\\Users\\ms\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\RazorCompilation.targets(184,5): error : rzc generate exited with code 1.\r\n1>Done building project \"Sample.csproj\" -- FAILED.\r\n2>------ Build started: Project: WebHost.Server, Configuration: Debug Any CPU ------\r\n2>CSC : error CS0006: Metadata file 'C:\\Solutions\\OHI\\BlazorStrap\\src\\Sample\\bin\\Debug\\netstandard2.0\\Sample.dll' could not be found\r\n2>Done building project \"WebHost.Server.csproj\" -- FAILED.\r\n========== Build: 0 succeeded, 2 failed, 1 up-to-date, 0 skipped ==========\r\n```\r\n\r\nVS2017 15.7.5 on Windows 10","Url":"https://github.com/aspnet/Blazor/issues/1231","RelatedDescription":"Closed issue \"Project build failing in 0.5.1\" (#1231)"},{"Id":"345951108","IsPullRequest":false,"CreatedAt":"2018-07-30T21:56:42","Actor":"Suchiman","Number":"1232","RawContent":null,"Title":"JSInterop cannot invoke instance methods","State":"open","Body":"Right now if you try to invoke an instance method, like `localStorage.setItem`, then you'll receive an rather obscure error like `'setItem' called on an object that does not implement interface Storage.` which means that this line https://github.com/aspnet/Blazor/blob/f2232e0699dae28485e07244403385219c1a3832/src/Microsoft.JSInterop/JavaScriptRuntime/src/Microsoft.JSInterop.ts#L160\r\nuses apply to invoke the method on a null reference which isn't supported.","Url":"https://github.com/aspnet/Blazor/issues/1232","RelatedDescription":"Open issue \"JSInterop cannot invoke instance methods\" (#1232)"},{"Id":"345730589","IsPullRequest":false,"CreatedAt":"2018-07-30T15:04:33","Actor":"Worble","Number":"1230","RawContent":null,"Title":"MarkupString automatically closes tags?","State":"closed","Body":"Basic recreation:\r\n```html\r\n@((MarkupString)\"<p style=\\\"background-color:red;\\\">\")\r\n@test\r\n@((MarkupString)\"</p>\")\r\n\r\n@functions {\r\n    string test = \"test test test\";\r\n}\r\n```\r\nExpected:\r\nHtml markup should look like:\r\n```html\r\n<p style=\"background-color:red;\">test test test</p>\r\n```\r\n\r\nActual:\r\nHtml markup is instead:\r\n```html\r\n<p style=\"background-color:red;\"></p>test test test\r\n```\r\n\r\nUsing Blazor 5.1","Url":"https://github.com/aspnet/Blazor/issues/1230","RelatedDescription":"Closed issue \"MarkupString automatically closes tags?\" (#1230)"},{"Id":"345578533","IsPullRequest":false,"CreatedAt":"2018-07-30T06:28:28","Actor":"RickStrahl","Number":"1226","RawContent":null,"Title":"Detect Component Unload Event - OnUnloadAsync()?","State":"closed","Body":"I think there needs to be some way to detect when a component is unloaded so that any code that's running in the background can appropriately check whether the components exists.\r\n\r\nAs it is in experimenting with a background timer, I ended up creating a component that never releases due to a circular reference and there's no way to check to see whether resources should be released when the component unloads.","Url":"https://github.com/aspnet/Blazor/issues/1226","RelatedDescription":"Closed issue \"Detect Component Unload Event - OnUnloadAsync()?\" (#1226)"},{"Id":"345581506","IsPullRequest":false,"CreatedAt":"2018-07-30T01:21:03","Actor":"iAmBipinPaul","Number":"1227","RawContent":null,"Title":"Option to plug Azure SignalR in server side rendering.","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/1227","RelatedDescription":"Open issue \"Option to plug Azure SignalR in server side rendering.\" (#1227)"},{"Id":"345514154","IsPullRequest":false,"CreatedAt":"2018-07-29T08:49:43","Actor":"ghost","Number":"1225","RawContent":null,"Title":"can't build default blazor project in 0.5.1","State":"open","Body":"can't seem to build the default blazor project in 0.5.1:\r\n\r\n```\r\nError\tMSB3073\tThe command \"dotnet \"C:\\Users\\R\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/Microsoft.AspNetCore.Blazor.Build.dll\" write-boot-json obj\\Debug\\netstandard2.0\\WebApplication6.dll --references \"C:\\Users\\R\\Source\\Repos\\WebApplication6\\WebApplication6\\obj\\Debug\\netstandard2.0\\blazor/bootjson-references.txt\" --embedded-resources \"C:\\Users\\R\\Source\\Repos\\WebApplication6\\WebApplication6\\obj\\Debug\\netstandard2.0\\blazor/embedded.resources.txt\" --linker-enabled --output \"C:\\Users\\R\\Source\\Repos\\WebApplication6\\WebApplication6\\obj\\Debug\\netstandard2.0\\blazor/blazor.boot.json\"\" exited with code -2147450730.\tWebApplication6\tC:\\Users\\R\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\Blazor.MonoRuntime.targets\t635\t\r\n```\r\n","Url":"https://github.com/aspnet/Blazor/issues/1225","RelatedDescription":"Open issue \"can't build default blazor project in 0.5.1\" (#1225)"},{"Id":"345484169","IsPullRequest":false,"CreatedAt":"2018-07-28T22:39:48","Actor":"vertonghenb","Number":"1224","RawContent":null,"Title":"Set @layout null","State":"open","Body":"Currently it's not possible to set a component's layout to null\r\nIn Razor we used to do something like this:\r\n```\r\n@{\r\nLayout = null\r\n}\r\n```\r\n\r\nIn Blazor we should be able to do something like this:\r\n`@layout null`\r\n\r\nThe workaround is to create an EmptyLayout component which is used. ","Url":"https://github.com/aspnet/Blazor/issues/1224","RelatedDescription":"Open issue \"Set @layout null\" (#1224)"},{"Id":"345477024","IsPullRequest":false,"CreatedAt":"2018-07-28T20:35:09","Actor":"Andrzej-W","Number":"1223","RawContent":null,"Title":"Server-side Blazor 0.5.1 doesn't update active class on NavLink element","State":"open","Body":"I have just published \"default\" server side application to Azure. I have made only one change in WeatherForecastService.cs\r\n```c#\r\nreturn Task.FromResult(Enumerable.Range(1, 500).Select(index => new WeatherForecast\r\n```\r\nAs you can see service now returns 500 instead of 5 forecasts.\r\n\r\nWe can click on `Home` and `Counter` menu links and everything works as expected. Try to click on `Fetch data`. At first everything works, but `active` class on `NavLink` (strictly speaking on `<a>` element) is not removed from `Home` or `Counter` and not added to `Fetch data`.\r\n\r\nhttp://blazorserwer.azurewebsites.net/\r\n","Url":"https://github.com/aspnet/Blazor/issues/1223","RelatedDescription":"Open issue \"Server-side Blazor 0.5.1 doesn't update active class on NavLink element\" (#1223)"},{"Id":"345455861","IsPullRequest":false,"CreatedAt":"2018-07-28T15:15:58","Actor":"chris-ray","Number":"1222","RawContent":null,"Title":"Server-side blazor needs to handle reconnection of websocket","State":"open","Body":"If after a delay, or a lost network connection the websocket disconnects. It seems it will never reconnect.\r\n\r\n![image](https://user-images.githubusercontent.com/4673182/43357925-3038f85a-924f-11e8-981f-1b5cc50086c1.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1222","RelatedDescription":"Open issue \"Server-side blazor needs to handle reconnection of websocket\" (#1222)"},{"Id":"345396287","IsPullRequest":false,"CreatedAt":"2018-07-28T11:27:28","Actor":"gvatsov","Number":"1220","RawContent":null,"Title":"Is it possible to trigger UI changes from the server's background worker?","State":"closed","Body":"Hello,\r\nToday is the day I understood about existence of Blazor and I read the documentations and running some demo projects all day long. Great idea, guys. Thank you!\r\nI've read in the [ASP.NET blog](https://blogs.msdn.microsoft.com/webdev/2018/07/25/blazor-0-5-0-experimental-release-now-available/) the following: \r\n\r\n> Blazor 0.5.0 takes the out-of-process model for Blazor and streeeetches it over a network connection so that you can run Blazor on the server. With Blazor 0.5.0 you can run your Blazor components server-side on .NET Core while UI updates, event handling, and JavaScript interop calls are handled over a SignalR connection.\r\n\r\n \r\nThe problem is I can't find any documentation how this is supposed to work. Would you assist me where should I look for more details how to implement this. My scenario includes a background worker which using SignalR to add some items to the client. I wonder if this is possible at this state of the project, because a few lines above in the same post it is said: \r\n\r\n> For example, you might run Blazor in a Web Worker thread so that it runs separately from the UI thread. Events would get pushed from the UI thread to the Blazor worker thread, and Blazor would push UI updates to the UI thread as needed. This scenario isn't supported yet, but it's something Blazor was designed to handle.\r\n\r\n\r\nI honestly can't tell the difference of these two statements, so any help would be greatly appreciated.\r\nThanks and keep the good work going :)\r\nGeorgi","Url":"https://github.com/aspnet/Blazor/issues/1220","RelatedDescription":"Closed issue \"Is it possible to trigger UI changes from the server's background worker?\" (#1220)"},{"Id":"345434765","IsPullRequest":false,"CreatedAt":"2018-07-28T09:25:18","Actor":"uazo","Number":"1221","RawContent":null,"Title":"[Server side] memory leak: invalid disposed IdsEntry in OutOfProcessRenderBatch","State":"open","Body":"With server side Blazor, the out of process render returns invalid id values for disposing component and event handler.\r\n\r\n![image](https://user-images.githubusercontent.com/29201891/43355191-89886dce-9258-11e8-99f0-96dae0128397.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1221","RelatedDescription":"Open issue \"[Server side] memory leak: invalid disposed IdsEntry in OutOfProcessRenderBatch\" (#1221)"},{"Id":"345393991","IsPullRequest":false,"CreatedAt":"2018-07-27T23:30:10","Actor":"Andrzej-W","Number":"1219","RawContent":null,"Title":"Experiment: Blazor Client vs Server performance","State":"open","Body":"Default Blazor application is relatively simple, but for those interested I have just published two versions:\r\n\r\nhttp://blazorserwer.azurewebsites.net/ (blazorserver name is already taken)\r\nhttp://blazorclient.azurewebsites.net/\r\n\r\nBoth applications are in the same S1 plan in Western Europe data centre. Blazor version 0.5.1.\r\n\r\nWhat is worth testing?\r\n1. Click on `Home` and `Counter` menu. In Blazor client version there is no internet transmission at all. In server version `click` is transmitted to the server and server responds with updated page. About 1.5 - 2 KB.\r\n2. You can also click on `Click me` button in `Counter` page. Yet again no transmission in client version and about 600 bytes in server version on every click.\r\n3. Select `Fetch data`. In client version data is transmitted from the server in JSON format - about 5 KB. In server version we receive 26 KB. I have increased number of items to 50.\r\n\r\nIn my opinion server version looks responsive. It is normal that some transmission is required in experiment number 1 and 2. **But I think that in experiment number 3 server version transmits to much data.** If I understand correctly server has to send whole table in HTML format. This table is very simple:\r\n```html\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>Date</th>\r\n                <th>Temp. (C)</th>\r\n                <th>Temp. (F)</th>\r\n                <th>Summary</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n                <tr>\r\n                    <td>7/28/2018</td>\r\n                    <td>28</td>\r\n                    <td>0</td>\r\n                    <td>Freezing</td>\r\n                </tr>\r\n                ~~~~\r\n```\r\nSingle table row has about 65-70 characters. Multiply this by 50, add ~200 bytes for page header and first paragraph, and we are well below 5 KB. Why do you need 26 KB to send it.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1219","RelatedDescription":"Open issue \"Experiment: Blazor Client vs Server performance\" (#1219)"},{"Id":"345392923","IsPullRequest":false,"CreatedAt":"2018-07-27T23:22:09","Actor":"galvesribeiro","Number":"1218","RawContent":null,"Title":"Allow internal types to be invoked by JavaScript interop","State":"open","Body":"We should be able to mark `public` methods on `internal` types as `[JSInvokable]` since most of the lib developer, like myself, don't want to expose internal types to the end user.\r\n\r\nI know that there is the idea that `JSInvokable` is inherently `public` and that mislead the idea that the types using it should be as well. I also know that you can hide a member with `EditorBrowseableAttribute(false)`, but that is just an IDE thing and not truly protecting internal APIs from misuse.\r\n\r\nSo, please consider change the scan logic to also look into `internal` types.\r\n\r\nThanks!","Url":"https://github.com/aspnet/Blazor/issues/1218","RelatedDescription":"Open issue \"Allow internal types to be invoked by JavaScript interop\" (#1218)"},{"Id":"345322083","IsPullRequest":false,"CreatedAt":"2018-07-27T18:22:52","Actor":"chucker","Number":"1217","RawContent":null,"Title":"Chrome debug proxy apparently _requires_ to load debug symbols for all referenced assemblies","State":"open","Body":"(See also #1199?)\r\n\r\nDebugging a Blazor project in Chrome as described in the 0.5 release notes fails as soon as a DLL is referenced for which debug symbols don't exist. (In my case, I had BlazorExtensions.Logging referenced.)\r\n\r\nMono/Cecil reports an error of:\r\n\r\n```\r\ngot exception System.AggregateException: One or more errors occurred. (Format of the executable (.exe) or library (.dll) is invalid.) ---> System.BadImageFormatException: Format of the executable (.exe) or library (.dll) is invalid.\r\n```\r\n\r\nAnd Chrome's debug session closes immediately, with:\r\n\r\n>Debugging connection was closed. reason: WebSocket disconnected\r\n\r\nBlazor should probably skip trying to debug assemblies for which debug symbols cannot be loaded.\r\n\r\nThis is distinct from #1199 in that @galvesribeiro hadn't actually even _tried_ to debug code (but I did), in which case loading debug symbols probably shouldn't happen at all.","Url":"https://github.com/aspnet/Blazor/issues/1217","RelatedDescription":"Open issue \"Chrome debug proxy apparently _requires_ to load debug symbols for all referenced assemblies\" (#1217)"},{"Id":"345321896","IsPullRequest":false,"CreatedAt":"2018-07-27T18:22:14","Actor":"SteveSandersonMS","Number":"1216","RawContent":null,"Title":"Referencing Microsoft.AspNetCore.Blazor.Server disables server-side tag helpers","State":"open","Body":"Repro:\r\n\r\n * Create a Blazor hosted or server-side app\r\n * In the server project, make it render a Razor page on the server (add `AddMvc` if not already present, then put `Index.cshtml` into a `Pages` directory)\r\n * Add `@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers` if you don't have it in `_ViewImports.cshtml` already\r\n * Observe that if you have syntax like `<img src=\"~/blah.jpg\" />`, it does *not* resolve the `~` - it literally emits the URL `~/blah.jpg`\r\n\r\nI expect that Blazor's MSBuild targets are hijacking the server-side Razor compilation process, eliminating the normal server-side tag helpers, or something of that sort.","Url":"https://github.com/aspnet/Blazor/issues/1216","RelatedDescription":"Open issue \"Referencing Microsoft.AspNetCore.Blazor.Server disables server-side tag helpers\" (#1216)"},{"Id":"345298595","IsPullRequest":true,"CreatedAt":"2018-07-27T17:13:50","Actor":"SteveSandersonMS","Number":"1214","RawContent":null,"Title":"Fix JS interop returning arrays","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1214","RelatedDescription":"Closed or merged PR \"Fix JS interop returning arrays\" (#1214)"},{"Id":"345302048","IsPullRequest":false,"CreatedAt":"2018-07-27T17:12:12","Actor":"Eilon","Number":"1215","RawContent":null,"Title":"The NuGet package description shouldn't be \"package description\" but rather a description of the package","State":"open","Body":"Example: https://www.nuget.org/packages/Microsoft.AspNetCore.Blazor.Server/0.5.0\r\n\r\nBut it affects many or even all of the packages.","Url":"https://github.com/aspnet/Blazor/issues/1215","RelatedDescription":"Open issue \"The NuGet package description shouldn't be \"package description\" but rather a description of the package\" (#1215)"},{"Id":"345200191","IsPullRequest":false,"CreatedAt":"2018-07-27T16:10:54","Actor":"MarkStega","Number":"1211","RawContent":null,"Title":"Bootstrap menu not functioning properly in Blazor 0.5","State":"closed","Body":"Extracted from #1203 as I had what should have been two separate issues in the same issue report. See #1203 for the html source.\r\n\r\nIf one encodes a responsive bootstrap menu then two function fail in Blazor. The first is that the menu items disappear before the hamburger appears. The second is that the hamburger menu does nothing.\r\n\r\nBoth issues are due to the lack of the bootstrap required js code.\r\n\r\nIn index.html I replaced\r\n`link href=\"css/bootstrap/bootstrap.min.css\" rel=\"stylesheet\"`\r\nwith\r\n`link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\"\r\n\r\nscript src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"\r\n\r\nscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\"\r\n\r\nscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\"`\r\n\r\nThere are less than & greater than symbols starting each line, I haven't figured out how to show html source.\r\n\r\nIn any case, I still have the odd styling, but the hamburger is functional.\r\n\r\nSince the intent is to support bootstrap shouldn't index.html have references to the js (either from local source or  the CDNs) since it is needed for full functionality?","Url":"https://github.com/aspnet/Blazor/issues/1211","RelatedDescription":"Closed issue \"Bootstrap menu not functioning properly in Blazor 0.5\" (#1211)"},{"Id":"345278468","IsPullRequest":false,"CreatedAt":"2018-07-27T15:53:07","Actor":"uazo","Number":"1213","RawContent":null,"Title":"How to retain EventHandlerId","State":"open","Body":"Consider this:\r\n\r\n```\r\n<button class=\"btn btn-primary\"\r\n        onclick=\"@(e => IncrementCount(1))\">\r\n    Click me +1\r\n</button>\r\n\r\n@for (int t = 2; t != 4; t++)\r\n{\r\n    <button class=\"btn btn-primary\"\r\n            onclick=\"@(e => IncrementCount(t))\">\r\n        Click me +@t\r\n    </button>\r\n}\r\n\r\n@functions {\r\n  int currentCount = 0;\r\n\r\n  void IncrementCount(int t)\r\n  {\r\n      currentCount += t;\r\n      this.StateHasChanged();\r\n  }\r\n```\r\n\r\nblazor will generate three `EventHandlerId`. \r\nWhen I press the button, the first `EventHandlerId` is retained (just because the ladba \"point\" at the same address) but the others are simple new labda expression, so blazor will delete and recreate the handler. In a list with many elements and many handler, it's a performance problem.\r\n\r\na way to retain can be:\r\n\r\n```\r\n@for (int t = 2; t != 4; t++)\r\n{\r\n    <button class=\"btn btn-primary\"\r\n            onclick=\"@Action(t, e => IncrementCount(t))\">\r\n        Click me +@t\r\n    </button>\r\n}\r\n\r\n\r\n  Dictionary<MethodInfo, Dictionary<object, Action<UIEventArgs>>>\r\n    _retainedActions = new Dictionary<MethodInfo, Dictionary<object, Action<UIEventArgs>>>();\r\n\r\n  public Action<UIEventArgs> Action<T>(T args1, Action<UIEventArgs> action)\r\n  {\r\n      if (_retainedActions.TryGetValue(action.Method, out var list) == false)\r\n      {\r\n          list = new System.Collections.Generic.Dictionary<object, Action<UIEventArgs>>();\r\n          _retainedActions[action.Method] = list;\r\n      }\r\n\r\n      if (list.TryGetValue(args1, out var value) == false)\r\n      {\r\n          value = (e) => action(e);\r\n          list[args1] = value;\r\n      }\r\n      return value;\r\n  }\r\n```\r\n\r\nother ideas? ","Url":"https://github.com/aspnet/Blazor/issues/1213","RelatedDescription":"Open issue \"How to retain EventHandlerId\" (#1213)"},{"Id":"345160339","IsPullRequest":false,"CreatedAt":"2018-07-27T15:27:16","Actor":"osintsevvladimir","Number":"1210","RawContent":null,"Title":"[Server-side] Property binding does not work in 0.5.0","State":"closed","Body":"Loading property in the KBPButton.cshtml file is always **false**.\r\n\r\nExample:\r\n\r\n**Index.cshtml**\r\n```\r\n@page \"/\"\r\n\r\n<KBPButton Text=\"Test button 1\" Click=\"@ClickHandler\"></KBPButton>\r\n<KBPButton Text=\"Test button 2\" Loading=\"@Loading\"></KBPButton>\r\n\r\n@functions {\r\n\r\n    [Parameter] protected bool Loading { get; set; }\r\n\r\n    public void ClickHandler()\r\n    {\r\n        Loading = !Loading;\r\n    }\r\n}\r\n```\r\n\r\n**KBPButtonComponent.cs**\r\n```\r\npublic abstract class KBPButtonComponent : BlazorComponent\r\n{\r\n    [Parameter]\r\n    protected string Text { get; set; }\r\n\r\n    [Parameter]\r\n    public bool Loading { get; set; }\r\n\r\n    [Parameter]\r\n    protected Action<bool> LoadingChanged { get; set; }\r\n\r\n    [Parameter]\r\n    protected Action Click { get; set; }\r\n\r\n    protected void ClickHandler()\r\n    {\r\n        Click?.Invoke();\r\n    }\r\n}\r\n```\r\n\r\n**KBPButton.cshtml**\r\n```\r\n@inherits Controls.KBPButtonComponent;\r\n\r\n<a class=\"kbpbutton\" onclick=\"@ClickHandler\">\r\n    @if (Loading)\r\n    {\r\n        <span class=\"kbpbutton__loading\">\r\n            <i class=\"fa fa-spinner fa-spin\"></i>\r\n        </span>\r\n    }\r\n    @Text\r\n</a>\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1210","RelatedDescription":"Closed issue \"[Server-side] Property binding does not work in 0.5.0\" (#1210)"},{"Id":"345238175","IsPullRequest":false,"CreatedAt":"2018-07-27T14:02:22","Actor":"uazo","Number":"1212","RawContent":null,"Title":"Blazor Server and Client side and Javascript","State":"open","Body":"Blazor Server and Client side, yes, and now?\r\n\r\n### PRO CLIENT SIDE\r\n\r\n- Speed? **N/A** (firefox is ok, chrome no)\r\nmono interpret is slow, and there are no forecasts about compiling with AOT or directly in WASM\r\n\r\n- Quick startup? **No**\r\n\r\n- Remove JS? **No**\r\nWASM does not have access to the DOM yet, so JS is always in the way\r\n\r\n- Does it work anywhere? **No**\r\nOnly latest browsers and devices\r\n\r\n\r\n### PRO SERVER SIDE\r\n\r\n- Speed? **Yup**\r\nThe same project in Server Mode is a splinter\r\n\r\n- Quick startup? **Yup**\r\nDownload only static elements.\r\n\r\n- Remove JS? **No**\r\nJS is always there. And accessing the DOM remotely (when it will be implemented) will give performance problems certainty.\r\n\r\n- Does it work anywhere? **Yup**\r\nEureka!\r\n\r\n\r\nin the medium term, therefore, for the Blazor development of enterprise applications, the Server Mode is definitely to be preferred, at least until WASM will have access to the DOM (without js) and Mono will permit it, and always that the compiler in the meantime will have WASM targets (because current performance is really low when compared to javascript).\r\n\r\nBut the biggest problem with Server Mode is to interact with the DOM to create the interfaces, which is essential. Developing a new UI library with Blazor without javascript really means starting all over again (unless there are tools from ts to c #, do they exist?).\r\n\r\nCurrently with Blazor it is not possible to reuse ready-made UI libraries, developed in javascript, except for very complicated DOTNET-JS calls (just thinking about it I get a headache).\r\n\r\nWhat is missing is the ability to abstract the js portion of blazor making it extensible using typescript, to allow a dotnet side component (local or remote) to have associated a custom component in the javascript side.\r\n\r\nAt this address https://uazo.github.io/BlazorFX/StandaloneApp/ an application test that uses DevExpress components for rendering: the blazor side components are dotnet (without any reference to interop with js), while rendering is done from javascript elements (DevExtreme from the react version). The dotnet component and the javascript component talks through exchange of custom properties and events (like react). In effect, the glue is a middleware beetween blazor and react, simple to do because DevExtreme is not a native react library but the implementation is simple.\r\n\r\nSo what do you say? Have you ever thought about it? It could also be a temporary solution, which would not deny in future having even full dotnet components (as today for react, not all components are full react made)\r\n\r\nFor those who want the repo is available with all the changes to the base code of blazor (https://github.com/uazo/Blazor/tree/remove-custom-tag).","Url":"https://github.com/aspnet/Blazor/issues/1212","RelatedDescription":"Open issue \"Blazor Server and Client side and Javascript\" (#1212)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-08-01T05:30:02.9307207Z","RunDurationInMilliseconds":1203}