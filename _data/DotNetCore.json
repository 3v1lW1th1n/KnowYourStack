{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework October 2019 Security and Quality Rollup","PublishedOn":"2019-10-08T19:10:44+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the October 2019 Security and Quality Rollup and Cumulative Updates for .NET Framework.\nSecurity\nNo new security fixes. See September 2019 Security and Quality Rollup for the...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Introducing .NET Core Windows Forms Designer Preview 1","PublishedOn":"2019-09-30T21:00:10+00:00","CommentsCount":74,"FacebookCount":0,"Summary":"Introducing .NET Core Windows Forms Designer Preview 1\nWe just released a GA version of .NET Core 3.0 that includes support for Windows Forms and WPF. And along with that release we&#8217;re happy to...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-core-windows-forms-designer-preview-1/","RawContent":null},{"Title":".NET Framework September 2019 Preview of Quality Rollup","PublishedOn":"2019-09-26T19:36:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We have released the September 2019 Preview of Quality Rollup and Cumulative Updates for .NET Framework for Windows 10\nQuality and Reliability\nThis release contains the following quality and...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"ML.NET and Model Builder at .NET Conf 2019 (Machine Learning for .NET)","PublishedOn":"2019-09-24T19:48:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited today to announce updates to Model Builder and improvements in ML.NET. You can learn more in the “What’s new in ML.NET?.” session at .NET Conf.\nML.NET is an open-source and...","Href":"https://devblogs.microsoft.com/dotnet/ml-net-and-model-builder-at-net-conf-2019-machine-learning-for-net/","RawContent":null},{"Title":"Joining the .NET Foundation Maturity Model Pilot","PublishedOn":"2019-09-23T16:59:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Joining the .NET Foundation Maturity Model Pilot\nThe .NET Foundation is starting a new pilot program to increase quality and user confidence in open source projects, using a new project maturity...","Href":"https://devblogs.microsoft.com/dotnet/joining-the-net-foundation-maturity-model-pilot/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 and Entity Framework 6.3 General Availability","PublishedOn":"2019-09-23T16:20:13+00:00","CommentsCount":46,"FacebookCount":0,"Summary":"We are extremely excited to announce the general availability of EF Core 3.0and EF 6.3 on nuget.org.\nThe final versions of .NET Core 3.0 and ASP.NET Core 3.0 are also available now.\nHow to get EF Core...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ef-core-3-0-and-ef-6-3-general-availability/","RawContent":null},{"Title":"Announcing F# 4.7","PublishedOn":"2019-09-23T16:06:23+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"We’re excited to announce general availability of F# 4.7 in conjunction with the .NET Core 3.0 release! In this post, I’ll show you how to get started, explain everything in F# 4.7 and give you a...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-7/","RawContent":null},{"Title":"Announcing .NET Core 3.0","PublishedOn":"2019-09-23T16:00:29+00:00","CommentsCount":120,"FacebookCount":0,"Summary":"Announcing .NET Core 3.0\nWe’re excited to announce the release of .NET Core 3.0. It includes many improvements, including adding Windows Forms and WPF, adding new JSON APIs, support for ARM64 and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/","RawContent":null},{"Title":"Release Candidate builds of Entity Framework Core 3.0 and Entity Framework 6.3 are now available","PublishedOn":"2019-09-16T21:47:32+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We previously said that preview 9 would be your last chance to test EF Core 3.0 and EF 6.3 before general availability. But it turns out that we made enough improvements to our libraries and across...","Href":"https://devblogs.microsoft.com/dotnet/release-candidate-builds-of-entity-framework-core-3-0-and-entity-framework-6-3-are-now-available/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Release Candidate 1","PublishedOn":"2019-09-16T18:45:09+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.0 Release Candidate 1. Just like with Preview 9, we&#8217;ve focused on polishing .NET Core 3.0 for a final release. We are now getting very, very close. We...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10537155256","Type":"PullRequestEvent","CreatedAt":"2019-10-01T20:30:21","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Opened pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10530380699","Type":"PullRequestEvent","CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Opened pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""},{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10627611219","Type":"IssuesEvent","CreatedAt":"2019-10-14T19:26:11","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/130","RelatedDescription":"Opened issue \".NET Core 3.0 concludes the .NET Framework API porting project\" (#130) at dotnet/announcements","RelatedBody":"We started in .NET Core 1.0 with a very minimal API set that only included \\~18K of the .NET Framework APIs. With [.NET Standard 2.0](https://devblogs.microsoft.com/dotnet/announcing-net-standard-2-0/), we tried to make it much more viable to share code between .NET Framework, .NET Core, and Xamarin which resulted in approximately 38K .NET Frameworks APIs being available in .NET Core 2.0. We also built the [Windows Compatibility Pack](https://devblogs.microsoft.com/dotnet/announcing-the-windows-compatibility-pack-for-net-core/) which made another 21K .NET Framework APIs available to .NET Core, resulting in almost 60K additional APIs. And in .NET Core 3.0 we added WPF and WinForms, which increased the number of .NET Framework APIs ported to .NET Core to over 120k, which is more than half of all .NET Framework APIs.\r\n\r\nIt’s also worth pointing out that we added about 62K APIs to .NET Core that don’t exist in .NET Framework. If we compare their total number of APIs, .NET Core has about 80% of the API surface of .NET Framework.\r\n\r\n<p align=\"center\">\r\n<img src=\"https://user-images.githubusercontent.com/5169960/66777114-f8db7c80-ee7c-11e9-9161-acfe1c491586.png\" width=\"600\" align=\"center\">\r\n</p>\r\n\r\nWe announced that the [future of .NET](https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/) will be based on .NET Core. And at Build 2019, [Scott Hunter stated](https://www.youtube.com/watch?v=ZlO1utbB2GQ&t=54m20s) that AppDomains, remoting, Web Forms, WCF server, and Windows Workflow won’t be ported to .NET Core.\r\n\r\nWith .NET Core 3.0, we’re at the point where we’ve ported all technologies that are required for modern workloads, be that desktop apps, mobile apps, console apps, web sites, or cloud services. That’s not to say that we don’t have any gaps or opportunities for new technologies, but we generally believe we won’t be finding them in the .NET Framework code base anymore. Moving forward, we’re focusing our resources on incorporating new technologies.\r\n\r\nSimultaneously, we’re looking into releasing more of the [.NET Framework code base under the MIT license](https://github.com/microsoft/referencesource) on GitHub to allow the community to create OSS projects for technologies we’re not intending to bring to .NET Core. For example, there already are community projects for [CoreWF](https://github.com/UiPath/corewf) and [CoreWCF](https://github.com/CoreWCF/CoreWCF).\r\n\r\nWe’d like to thank everyone who filed issues with requests for APIs being ported. Those issues allowed us to prioritize and close the gaps that prevented people from porting to .NET Core.\r\n\r\nBut since we generally no longer plan to bring existing technologies from .NET Framework to .NET Core we’ll be closing all issues that are [labeled with port-to-core](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Aport-to-core).\r\n\r\n### Discussion\r\n\r\nTo discuss this issue, please comment on the corresponding issue at https://github.com/dotnet/corefx/issues/41769."},{"Id":"10604698685","Type":"IssuesEvent","CreatedAt":"2019-10-10T18:45:56","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/129","RelatedDescription":"Opened issue \"October 2019 .NET Updates\" (#129) at dotnet/announcements","RelatedBody":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework October 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"10603083871","Type":"IssuesEvent","CreatedAt":"2019-10-10T15:19:56","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/128","RelatedDescription":"Closed issue \"Docker Stop return status Exited \"(3221225786)\"\" (#128) at dotnet/announcements","RelatedBody":"Hi\r\nI'm investigating a issue regarding official MCR images on a Win2019 server with Docker EE engine 19.03.2.\r\n\r\nThe images that I'm unsing are:\r\nmcr.microsoft.com/windows/servercore:1809\r\nmcr.microsoft.com/dotnet/framework/aspnet:4.8\r\n\r\nStopping containers based on these images (\"docker stop\" command) I'm getting: \r\n\"Exited (3221225786)\"\r\n\r\nOn linux a stop command normally return: \"Exited (137)\"\r\n\r\nIs it a normal behaviour? What's means 3221225786?\r\n\r\nThanks for any support\r\n\r\nCarlo"},{"Id":"10602877059","Type":"IssuesEvent","CreatedAt":"2019-10-10T14:58:26","Actor":"carloreggiani","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/128","RelatedDescription":"Opened issue \"Docker Stop return status Exited \"(3221225786)\"\" (#128) at dotnet/announcements","RelatedBody":"Hi\r\nI'm investigating a issue regarding official MCR images on a Win2019 server with Docker EE engine 19.03.2.\r\n\r\nThe images that I'm unsing are:\r\nmcr.microsoft.com/windows/servercore:1809\r\nmcr.microsoft.com/dotnet/framework/aspnet:4.8\r\n\r\nStopping containers based on these images (\"docker stop\" command) I'm getting: \r\n\"Exited (3221225786)\"\r\n\r\nOn linux a stop command normally return: \"Exited (137)\"\r\n\r\nIs it a normal behaviour? What's means 3221225786?\r\n\r\nThanks for any support\r\n\r\nCarlo"},{"Id":"10587763637","Type":"IssuesEvent","CreatedAt":"2019-10-08T23:14:12","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/127","RelatedDescription":"Opened issue \"Consolidated repo names\" (#127) at dotnet/announcements","RelatedBody":"[ann]: https://github.com/dotnet/announcements/issues/119\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions),\r\n\tand some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarify\r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarify\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!\r\n\r\n### Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27096."},{"Id":"10587423911","Type":"IssuesEvent","CreatedAt":"2019-10-08T22:06:08","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/126","RelatedDescription":"Opened issue \"4.7.x .NET Framework SDK Docker images no longer published\" (#126) at dotnet/announcements","RelatedBody":"# 4.7.x .NET Framework SDK Docker images no longer published\r\n\r\nThe [4.7.x .NET Framework SDK Docker images](https://hub.docker.com/_/microsoft-dotnet-framework-sdk) will no longer be published after Oct. 8, 2019.  The 4.8 image tags should be used as a replacement.\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [microsoft/dotnet-framework-docker#428](https://github.com/microsoft/dotnet-framework-docker/issues/428)\r\n\r\n## Details\r\n\r\nAny references to the following SDK tags should be updated to reference `4.8` instead:\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2019`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2019`\r\n\r\nIf you haven't migrated to using images from [MCR](https://github.com/dotnet/announcements/issues/101) and are still using the .NET Framework repos on Docker Hub, you will need to update your tag references to MCR.  This is because the 4.8 images only exist on MCR.  These are the following Docker Hub tags that are affected and should be updated to reference the [4.8 tags at the MCR location](https://hub.docker.com/_/microsoft-dotnet-framework-sdk):\r\n* `microsoft/dotnet-framework:4.7.1-sdk`\r\n* `microsoft/dotnet-framework:4.7.1-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-1803`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019`"},{"Id":"10552065128","Type":"IssuesEvent","CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Opened issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125) at dotnet/announcements","RelatedBody":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n"},{"Id":"10486020433","Type":"IssuesEvent","CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Opened issue \".NET Core `latest` Docker tags updated to 3.0\" (#124) at dotnet/announcements","RelatedBody":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n"},{"Id":"10427072993","Type":"IssuesEvent","CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Opened issue \".NET Core 3.0 RC 1\" (#123) at dotnet/announcements","RelatedBody":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10630268226","Type":"PullRequestEvent","CreatedAt":"2019-10-15T05:04:00","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27195","RelatedDescription":"Opened pull request \"Improve Dictionary TryGetValue size/perfomance\" (#27195) at dotnet/coreclr","RelatedBody":"From https://github.com/dotnet/coreclr/pull/27149 without the hashcode-to-bucket mapping changes\r\n\r\n* Dictionary avoid second bounds check in TryGetValue/indexer get methods\r\n* Return `ref` from FindValue so ContainsKey doesn't pay a struct copy cost when using same method.\r\n* Rearrange FindValue return block to be a straighter flow for the common path of found item\r\n* Rearrange `Entry` struct to match access order; however change to `Auto` layout in-case it doesn't pack well (e.g. `TKey` and `TValue` both being byte/short)\r\n* Use `(uint)entries.Length` test for `collisionCount` count to match `i` test so same `uint` register can be used\r\n* move `collisionCount++` before `collisionCount` test so the Jit *could* micro-fuse them (though doesn't currently https://github.com/dotnet/coreclr/issues/7566)\r\n\r\nSize improvements\r\n```\r\nTotal bytes of diff: -1441 (-0.05% of base)\r\n    diff is an improvement.\r\n\r\nTotal byte diff includes -166 bytes from reconciling methods\r\n        Base had    4 unique methods,     3935 unique bytes\r\n        Diff had    4 unique methods,     3769 unique bytes\r\n\r\nTop file improvements by size (bytes):\r\n       -1441 : System.Private.CoreLib.dasm (-0.05% of base)\r\n```\r\n\r\n/cc @jkotas @AntonLapounov @GrabYourPitchforks "},{"Id":"10630097147","Type":"PullRequestEvent","CreatedAt":"2019-10-15T04:20:36","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27164","RelatedDescription":"Merged pull request \"find src/jit -type f -exec sed -i -e 's/gtArrLen\\./AsArrLen()\\./g' {} \\;\" (#27164) at dotnet/coreclr","RelatedBody":""},{"Id":"10630088201","Type":"PullRequestEvent","CreatedAt":"2019-10-15T04:18:07","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27161","RelatedDescription":"Merged pull request \"Replace gtBox. with AsBox()\" (#27161) at dotnet/coreclr","RelatedBody":"@am11 @jkotas @janvorli @sandreenko "},{"Id":"10629967325","Type":"PullRequestEvent","CreatedAt":"2019-10-15T03:46:13","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27194","RelatedDescription":"Opened pull request \"Use stackalloc expressions with builder ctors\" (#27194) at dotnet/coreclr","RelatedBody":""},{"Id":"10629867142","Type":"PullRequestEvent","CreatedAt":"2019-10-15T03:21:21","Actor":"davidwrighton","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26960","RelatedDescription":"Merged pull request \"Buildwork to remove dir.props files\" (#26960) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10629174698","Type":"IssuesEvent","CreatedAt":"2019-10-15T00:26:23","Actor":"MisinformedDNA","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12888","RelatedDescription":"Opened issue \"tool install can't find package in private NuGet feed\" (#12888) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Create an Azure Artifacts feed\r\n2. Push a pre-release global tool to the feed\r\n3. Click \"Connect Feed\" to get URL\r\n4. Set up Feed in VS to see that the package does exist and is marked pre-release\r\n5. Install the tool via Azure Pipelines\r\n\r\n```yaml\r\n  - task: NuGetCommand@2\r\n    displayName: 'Add auth values'\r\n    inputs:\r\n      command: custom\r\n      arguments: sources update -Name \"SomeName\" -Username \"vsts\" -Password \"$(System.AccessToken)\" -StorePasswordInClearText -ConfigFile NuGet.Config\r\n   \r\n  - pwsh: cat Nuget.config\r\n\r\n  - pwsh: dotnet tool install --global ToolName --version 1.0.1-ci-20191014-185132 --configfile NuGet.config\r\n```\r\n\r\n## Expected  behavior\r\n\r\nTool is successfully installed.\r\n\r\n## Actual behavior\r\n\r\nReceive an error that package can't be found:\r\n\r\n> error NU1101: Unable to find package ToolName. No packages exist with this id in source(s): FeedName, C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\r\n> The tool package could not be restored.\r\n> Tool 'ToolName' failed to install. This failure may have been caused by:\r\n> \r\n> * You are attempting to install a preview release and did not use the --version option to specify the version.\r\n> * A package by this name was found, but it was not a .NET Core tool.\r\n> * The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n> * You mistyped the name of the tool.\r\n> \r\n> For more reasons, including package naming enforcement, visit https://aka.ms/failure-installing-tool\r\n> ##[debug]$LASTEXITCODE: 1\r\n> \r\n\r\nNot getting a 401 anymore, so auth doesn't appear to be the problem.\r\n\r\nNuGet.config:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n   <packageSources>\r\n      <add key=\"FeedName\" value=\"https://OrgName.pkgs.visualstudio.com/_packaging/FeedName/nuget/v3/index.json\" />\r\n   </packageSources>\r\n  <packageSourceCredentials>\r\n    <FeedName>\r\n      <add key=\"Username\" value=\"vsts\" />\r\n      <add key=\"ClearTextPassword\" value=*** />\r\n    </FeedName>\r\n  </packageSourceCredentials>\r\n</configuration>\r\n```\r\n\r\nThe package name and version are definitely correct. Am I missing something? Is there a better way to do this?\r\n\r\n## Environment data\r\nAzure DevOps\r\ndotnet SDK 3.0.100\r\n\r\n@wli3 "},{"Id":"10628981824","Type":"IssuesEvent","CreatedAt":"2019-10-14T23:36:03","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/12860","RelatedDescription":"Closed issue \"Calling dotnet test from a shell script fails on Ubuntu server with net core 3\" (#12860) at dotnet/cli","RelatedBody":"We have a shell script that runs our .net core 3 integration tests on a Ubuntu server: it was running just fine, but since upgrading to .net core 3 it has stopped working.\r\n\r\nIt still works on OSX and in WSL using net core 3 (and the equivalent .bat file works on Windows). \r\n\r\nI have reinstalled .net core 3 on the server but to no effect.\r\n\r\nThere are two problems, which are detailed below:\r\n\r\n1. Calling `dotnet test` from a shell script fails with a permissions error in net core 3, but when calling it from the command line it will run - however..\r\n2. Parameters to `dotnet test` are somehow mangled when running from the command line.\r\n\r\n## Permissions error\r\n\r\nThe shell script is just this:\r\n\r\n```bash\r\n# this works just fine\r\ngit pull\r\n\r\n# run the project which gets the repo path, CDs to the test project folder, \r\n# and runs the tests, passing along any parameters as a test filter\r\ndotnet run --project TestRunner/TestRunner.csproj $@ \r\n\r\n# run the project which analyzes the test results and generates a results page\r\ndotnet run --project TestResultAnalyzer/TestResultAnalyzer/TestResultAnalyzer.csproj \r\n```\r\n\r\nThe first issue is a permissions error calling `dotnet test` from the script: this is the diagnostic output of the TestRunner project:\r\n\r\n```\r\nCurrent directory: /home/username/code/codename/src/API/App/App.Tests\r\nTest command:\r\ndotnet test --filter skeleton -l:trx;LogFileName=App_Test_Run_2019-10-10-11-40.trx -r /home/username/code/codename/src/API/TestRuns/App\r\nStarting process\r\n```\r\nAnd this is the error which occurs when starting the process:\r\n\r\n> Unhandled exception. System.ComponentModel.Win32Exception (13): Permission denied\r\n   at System.Diagnostics.Process.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean usesTerminal, Boolean throwOnNoExec)\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at TestRunner.Program.Main(String[] args) in /home/username/code/codename/src/Misc/TestRunner/Program.cs:line 77\r\n   \r\nAnd this is the code:\r\n\r\n```cs\r\nprocess = new Process {\r\n\tStartInfo = {\r\n\t\tArguments = $\"test {arguments} -l:trx;LogFileName={testRunName}.trx -r {testResultFolder}\",\r\n\t\tFileName = \"dotnet\",\r\n\t\tUseShellExecute = false\r\n\t}\r\n};\r\n                      \r\nvar commandDebug = $\"{process.StartInfo.FileName} {process.StartInfo.Arguments}\";\r\n\r\nConsole.WriteLine(\"Test command\");\r\nConsole.WriteLine(commandDebug);\r\nConsole.WriteLine(\"Starting process\");\r\nprocess.Start(); // boom\r\n```\r\n   \r\nSo, my first issue is:\r\n\r\nWhy is calling `dotnet test` from a shell script resulting in a permissions error, when calling it from the command line does not?\r\n\r\n## Test parameter mangling\r\n\r\nAnd that leads to my second issue.\r\n\r\nIf I run the above from the command line (note we are using NUnit as the test runner)\r\n\r\n`dotnet test --filter skeleton -l:trx;LogFileName=App_Test_Run_2019-10-10-11-40.trx -r /home/username/code/codename/src/API/TestRuns/App`\r\n\r\nThen the tests run, but I get this error message:\r\n\r\n> -r: command not found\r\n\r\nAs per [the documentation](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test), `-r` specifies the location of the test output file:\r\n \r\n> Directory in which to find the binaries to run.\r\n> -r|--results-directory <PATH>\r\n\r\nAnd indeed the file is not put in the right place, it ends out here, instead of in the `TestRuns/App` folder as specified:\r\n\r\n> /home/username/code/codename/src/API/App/App.Tests/TestResults/_servername_2019-10-10_11_46_36.trx\r\n\r\nAnd thus the analyzer can't find it, as it's not in the right place.\r\n\r\nNow as I said above, this exact same code works in Windows, OSX and WSL and worked on Ubuntu with net core 2.2 - but on the Ubuntu server it Just. Will. Not. Work. with net core 3.\r\n\r\nSo the second issue is:\r\n\r\nWhy is this test syntax not working on Ubuntu under net core 3?\r\n\r\nSupplementary info:\r\n\r\n#### Output of `dotnet --info`\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /snap/dotnet-sdk/49/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/snap/dotnet-sdk/49/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/snap/dotnet-sdk/49/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/snap/dotnet-sdk/49/shared/Microsoft.NETCore.App]\r\n```\r\n  \r\n#### Package references in the test project\r\n\r\n```xml\r\n<ItemGroup>\r\n  <PackageReference Include=\"FluentAssertions\" Version=\"5.9.0\" />\r\n  <PackageReference Include=\"JetBrains.DotMemoryUnit\" Version=\"3.0.20171219.105559\" />\r\n  <PackageReference Include=\"nunit\" Version=\"3.12.0\" />\r\n  <PackageReference Include=\"NUnit.ConsoleRunner\" Version=\"3.10.0\" />\r\n  <PackageReference Include=\"NUnit3TestAdapter\" Version=\"3.15.1\" />\r\n  <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.3.0\" />\r\n</ItemGroup>\r\n```  \r\n\r\n### Server culture\r\n\r\nThe server culture is en-US-POSIX (which hates humans and their puny case-sensitivity, but I digress..)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n"},{"Id":"10628965782","Type":"IssuesEvent","CreatedAt":"2019-10-14T23:31:57","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/12873","RelatedDescription":"Closed issue \"X509Extension.Format() doesn't work well in macOS system\" (#12873) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nMacOs:\r\nPS > $ext.Format($false)\r\n3042304006082B06010505073002863468747470733A2F2F73632D7072642D636F6D702D76633035342E656E672E766D776172652E636F6D2F6166642F766563732F6361\r\n\r\nWhile the same certificate in Ubuntu:\r\nPS > $ext.Format($false) CA Issuers - URI:https://sc-prd-comp-vc054.eng.vmware.com/afd/vecs/ca\r\n\r\n## Expected  behavior\r\nIn the MacOs, it should return the same result with the one in Ubuntu\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10628959932","Type":"IssuesEvent","CreatedAt":"2019-10-14T23:30:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/12858","RelatedDescription":"Closed issue \"Consdering Adding dotnet sln sort\" (#12858) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nHave The following:\r\n\r\n1.  One Solution File (`Common.sln`)\r\n2.  Two Branches (`FeatureA` / `FeatureB`)\r\n3.  Two Projects (`A.csproj` / `B.csproj` )\r\n\r\nOn `FeatureA` Branch Developer X realizes that they need to add components `A.csproj` and `B.csproj` to `Common.sln` to support a feature they are working on. They perform an `dotnet sln add` in the order `A.csproj` and `B.csproj`\r\n\r\nOn `FeatureB` Branch Developer Y realizes that they also need to add components `A.csproj` and `B.csproj` to `Common.sln` to support their feature. They perform an `dotnet sln add` in the order `B.csproj` and `A.csproj`.\r\n\r\nWhen they go to merge this change they now have a conflict that needs to be resolved, whereas if there had been some deterministic sort order you'd give your merging tool a better chance to resolve this (and at very least allow the human using the tool a clearer picture of what happened).\r\n\r\nOur scenarios are obviously much more complex (due to the deep dependency tree) but the above is a simple illustration.\r\n\r\nThe below commands will simulate this:\r\n\r\n```\r\ndotnet new sln -n Common\r\ndotnet new sln -n Common2\r\ndotnet new console -n A\r\ndotnet new console -n B\r\ndotnet sln Common.sln add A\\A.csproj\r\ndotnet sln Common.sln add B\\B.csproj\r\ndotnet sln Common2.sln add B\\B.csproj\r\ndotnet sln Common2.sln add A\\A.csproj\r\n```\r\n\r\nTry comparing `Common2.sln` to `Common.sln` (simulating a branch merge).\r\n\r\n## Expected  behavior\r\nA deterministic sort to Solution files. The sort really doesn't matter so long as it is deterministic across files (you sort both sides before committing/comparing).\r\n\r\n## Actual behavior\r\n`dotnet sln add` will perform appending operations (this is the same behavior in Visual Studio). A long time ago there was a UserVoice (and before that a Connect) issue to ask for this feature as well within Visual Studio.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.507\r\n Commit:    e8520940d7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.507\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.11\r\n  Commit:  d6a5616240\r\n\r\n.NET Core SDKs installed:\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10628576780","Type":"IssuesEvent","CreatedAt":"2019-10-14T22:04:32","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/12870","RelatedDescription":"Closed issue \"error MSB6006: \"csc.dll\" exited with code 137\" (#12870) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n![Screenshot from 2019-10-11 10-54-24](https://user-images.githubusercontent.com/3871483/66621543-3e970b80-ec17-11e9-925d-7a2ac8db224f.png)\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n$ dn --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  19.04\r\n OS Platform: Linux\r\n RID:         ubuntu.19.04-x64\r\n Base Path:   /usr/share/dotnet-3.0.100/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/usr/share/dotnet-3.0.100/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10624407194","Type":"PullRequestEvent","CreatedAt":"2019-10-14T12:25:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1609","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1609) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191013.1\r\n- **Date Produced**: 10/13/2019 1:26 PM\r\n- **Commit**: 437d9bc76489ff18bd9ce04f287e07591f6bc38c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19513.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19513.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19513.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10624335212","Type":"PullRequestEvent","CreatedAt":"2019-10-14T12:14:59","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1609","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1609) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191013.1\r\n- **Date Produced**: 10/13/2019 1:26 PM\r\n- **Commit**: 437d9bc76489ff18bd9ce04f287e07591f6bc38c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19513.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19513.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19513.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10619311545","Type":"PullRequestEvent","CreatedAt":"2019-10-13T12:25:39","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1608","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1608) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191012.1\r\n- **Date Produced**: 10/12/2019 1:32 PM\r\n- **Commit**: 8d21b79b924d29088dbde46d42737a657d466b5e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19512.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19512.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19512.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10619290361","Type":"PullRequestEvent","CreatedAt":"2019-10-13T12:15:34","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1608","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1608) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191012.1\r\n- **Date Produced**: 10/12/2019 1:32 PM\r\n- **Commit**: 8d21b79b924d29088dbde46d42737a657d466b5e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19512.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19512.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19512.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10616533825","Type":"PullRequestEvent","CreatedAt":"2019-10-12T12:30:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1607","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1607) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191011.6\r\n- **Date Produced**: 10/12/2019 12:05 AM\r\n- **Commit**: 57ae5430e0e6cbf16b5c7b7def4fc95015b2b722\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19511.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19511.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19511.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10616513021","Type":"PullRequestEvent","CreatedAt":"2019-10-12T12:20:16","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1607","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1607) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191011.6\r\n- **Date Produced**: 10/12/2019 12:05 AM\r\n- **Commit**: 57ae5430e0e6cbf16b5c7b7def4fc95015b2b722\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19511.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19511.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19511.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10616505376","Type":"PullRequestEvent","CreatedAt":"2019-10-12T12:16:34","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1606","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1606) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191011.1\r\n- **Date Produced**: 10/11/2019 12:51 PM\r\n- **Commit**: 64a027b8d8b3a8e8e214bb00da02148335e3bd92\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19511.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10630200156","Type":"PullRequestEvent","CreatedAt":"2019-10-15T04:47:11","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41776","RelatedDescription":"Opened pull request \"Fix cast in CacheMemoryMonitor\" (#41776) at dotnet/corefx","RelatedBody":"Avoid overflow.\r\ncc: @KKhurin "},{"Id":"10630080212","Type":"PullRequestEvent","CreatedAt":"2019-10-15T04:15:54","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41715","RelatedDescription":"Merged pull request \"Fix branch distance calculation\" (#41715) at dotnet/corefx","RelatedBody":"Port fix https://github.com/dotnet/corefx/pull/28493 of https://github.com/dotnet/corefx/issues/26621 from release/2.1 to release/3.1.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/41710\r\n\r\nThe original fix was merged to release/2.1, but not to master at that time and did not flow to 3.0.\r\n3.0 thus regressed because it didn't contain the fix. This change is bringing the fix back in 3.1."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10629969796","Type":"IssuesEvent","CreatedAt":"2019-10-15T03:46:51","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39235","RelatedDescription":"Reopened issue \"LanguageVersionFacts.MapSpecifiedToEffectiveVersion(LanguageVersion.Preview) returns LanguageVersion.Preview\" (#39235) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nMicrosoft.CodeAnalysis.CSharp v3.3.0.0 (C# 8 RTM, VS 16.3.3)\r\n\r\n**Steps to Reproduce**:\r\n\r\nCall `LanguageVersionFacts.MapSpecifiedToEffectiveVersion(LanguageVersion.Preview)`\r\n\r\n**Expected Behavior**:\r\n\r\nShould return LanguageVersion.CSharp8\r\n\r\n**Actual Behavior**:\r\n\r\nReturns LanguageVersion.Preview"},{"Id":"10629395278","Type":"PullRequestEvent","CreatedAt":"2019-10-15T01:25:05","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39284","RelatedDescription":"Opened pull request \"Merge master to features/static-lambdas\" (#39284) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/static-lambdas.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/static-lambdas\ngit reset --hard upstream/features/static-lambdas\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/static-lambdas --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10629394744","Type":"PullRequestEvent","CreatedAt":"2019-10-15T01:24:57","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39283","RelatedDescription":"Opened pull request \"Merge master to features/local-function-attributes\" (#39283) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10629394236","Type":"PullRequestEvent","CreatedAt":"2019-10-15T01:24:49","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39282","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#39282) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10629373663","Type":"PullRequestEvent","CreatedAt":"2019-10-15T01:19:36","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39281","RelatedDescription":"Opened pull request \"Switch source writer entirely over to using interpolations.\" (#39281) at dotnet/roslyn","RelatedBody":""},{"Id":"10629270983","Type":"PullRequestEvent","CreatedAt":"2019-10-15T00:52:30","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39223","RelatedDescription":"Merged pull request \"EnC: Recover from unexpected exceptions in Emit, ReadChecksum\" (#39223) at dotnet/roslyn","RelatedBody":""},{"Id":"10629258878","Type":"IssuesEvent","CreatedAt":"2019-10-15T00:49:19","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39255","RelatedDescription":"Closed issue \"Signature help sometimes fails to wrap, preventing the current parameter from being seen\" (#39255) at dotnet/roslyn","RelatedBody":"**Version Used**: VS 16.3.4\r\n\r\nRepro:\r\n\r\n```cs\r\npublic static class C\r\n{\r\n    public static void M()\r\n    {\r\n        var longVariableNameForSpacing = Method([||]\r\n    }\r\n\r\n    public static object Method(\r\n        System.Collections.Generic.Dictionary<string, string> a,\r\n        System.Collections.Generic.Dictionary<string, string> b,\r\n        System.Collections.Generic.Dictionary<string, string> c,\r\n        System.Collections.Generic.Dictionary<string, string> d,\r\n        System.Collections.Generic.Dictionary<string, string> e)\r\n    {\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/8040367/66706586-8c3c7280-ed02-11e9-9962-00880c4d2de7.png)\r\n\r\nPixel density is at 125% for these monitors, resolution 2560x1440."},{"Id":"10629244774","Type":"IssuesEvent","CreatedAt":"2019-10-15T00:45:35","Actor":"gundermanc","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39280","RelatedDescription":"Opened issue \"Roslyn C#/VB language server fails to start\" (#39280) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVisual Studio 2019 16.3 and later\r\n\r\n**Steps to Reproduce**:\r\n\r\nThis is an intermittent repro that appears to be the result of the Roslyn language server returning a null connection when its ILanguageClient is called.\r\n\r\n1. Open a C# or VB solution\r\n2. Attempt to search for code in Ctrl+Q search box\r\n\r\n**Expected Behavior**:\r\nSymbols appear in the box.\r\n\r\n**Actual Behavior**:\r\nOccasionally, the language client fails to start due to a null connection being returned by Roslyn's language client."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10627984673","Type":"IssuesEvent","CreatedAt":"2019-10-14T20:24:49","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7824","RelatedDescription":"Closed issue \"Debugger.Launch() on macOS\" (#7824) at dotnet/corert","RelatedBody":"Is `Debugger.Launch()` supported on macOS? I tested on macOS 10.15 with .NET Core 3.0.100 and it doesn't appear to work.\r\n\r\nIf it is not supported, is there a plan to support?\r\n\r\nThanks!\r\n\r\ncc: @rapoth\r\n\r\n"},{"Id":"10625366540","Type":"IssuesEvent","CreatedAt":"2019-10-14T14:21:45","Actor":"imback82","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7824","RelatedDescription":"Opened issue \"Debugger.Launch() on macOS\" (#7824) at dotnet/corert","RelatedBody":"Is `Debugger.Launch()` supported on macOS? I tested on macOS 10.15 with .NET Core 3.0.100 and it doesn't appear to work.\r\n\r\nIf it is not supported, is there a plan to support?\r\n\r\nThanks!\r\n\r\ncc: @rapoth\r\n\r\n"},{"Id":"10616883770","Type":"PullRequestEvent","CreatedAt":"2019-10-12T15:06:11","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7823","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7823) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo"},{"Id":"10614032565","Type":"PullRequestEvent","CreatedAt":"2019-10-11T20:37:56","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7823","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7823) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10608939903","Type":"PullRequestEvent","CreatedAt":"2019-10-11T08:45:30","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7822","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7822) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding"},{"Id":"10607447761","Type":"PullRequestEvent","CreatedAt":"2019-10-11T03:49:41","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7822","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7822) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10592232499","Type":"PullRequestEvent","CreatedAt":"2019-10-09T12:42:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7821","RelatedDescription":"Merged pull request \"Delete unused method\" (#7821) at dotnet/corert","RelatedBody":"Supplements #7819."},{"Id":"10590790043","Type":"PullRequestEvent","CreatedAt":"2019-10-09T09:29:22","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7821","RelatedDescription":"Opened pull request \"Delete unused method\" (#7821) at dotnet/corert","RelatedBody":"Supplements #7819."},{"Id":"10590779874","Type":"PullRequestEvent","CreatedAt":"2019-10-09T09:28:11","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7820","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7820) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo"},{"Id":"10590775020","Type":"PullRequestEvent","CreatedAt":"2019-10-09T09:27:35","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7818","RelatedDescription":"Merged pull request \"Fix exit code of build-native.sh\" (#7818) at dotnet/corert","RelatedBody":"I noticed it in the docker container, that the failed build was successfully committing the container (false positive)."},{"Id":"10588290498","Type":"PullRequestEvent","CreatedAt":"2019-10-09T01:22:40","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7820","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7820) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10588267846","Type":"PullRequestEvent","CreatedAt":"2019-10-09T01:16:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7819","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7819) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @CoffeeFlux"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10628249473","Type":"PullRequestEvent","CreatedAt":"2019-10-14T21:06:42","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3747","RelatedDescription":"Merged pull request \"Update branding to 3.1.100-preview2\" (#3747) at dotnet/sdk","RelatedBody":""},{"Id":"10627338659","Type":"PullRequestEvent","CreatedAt":"2019-10-14T18:43:51","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3747","RelatedDescription":"Opened pull request \"Update branding to 3.1.100-preview2\" (#3747) at dotnet/sdk","RelatedBody":""},{"Id":"10627117160","Type":"PullRequestEvent","CreatedAt":"2019-10-14T18:10:25","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3745","RelatedDescription":null,"RelatedBody":""},{"Id":"10627117005","Type":"PullRequestEvent","CreatedAt":"2019-10-14T18:10:23","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3745","RelatedDescription":"Closed pull request \"WIP helix\" (#3745) at dotnet/sdk","RelatedBody":""},{"Id":"10627088967","Type":"PullRequestEvent","CreatedAt":"2019-10-14T18:06:12","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3697","RelatedDescription":"Merged pull request \"Implement writing includedFrameworks references for self-contained apps\" (#3697) at dotnet/sdk","RelatedBody":"For self-contained apps which are of the right version (to maintain backward compat), write the framework references to a new `includedFrameworks` property in `.runtimeconfig.json`.\r\n\r\nWhen the native hosting APIs are used to load a managed component into a process which is running a .NET Core app, the hosting layer should validate that the new component framework requirements are met by the frameworks loaded into the process already. This is to allow the new component to communicate with the app (same FX types), but also to overcome the fact that we don't want to load frameworks twice ever.\r\n\r\nIn order to validate the framework references declared by the new component, the host must know what frameworks are loaded into the process. For framework dependent apps this works fine as the host knows which frameworks it resolved during the app startup. But for self-contained apps, the host doesn't know as everything looks like an app to it.\r\n\r\nThis change adds he new `includedFrameworks` property to the `.runtimeconfig.json` which will be used for self-contained apps (only, it should not occur when `framework` or `frameworks` properties are used). It will contain the list of frameworks which were used to build the self-contained apps. The format is the same as `frameworks` property content.\r\n\r\nTo maintain strict backward compatibility, this change will only write the new property to projects targeting `netcoreapp3.1` or higher.\r\n\r\nAs coded this assumes the change will be approved for 3.1. If it's rejected, I will follow up with a change which will make the new property occur only for 5.0 and above.\r\n\r\n#3541 - master (5.0) version"},{"Id":"10626217762","Type":"IssuesEvent","CreatedAt":"2019-10-14T15:59:56","Actor":"mwpowellhtx","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3746","RelatedDescription":"Opened issue \"Build pipeline failed to resolve CLI tooling after VS2019 installation\" (#3746) at dotnet/sdk","RelatedBody":"We got errors in our build pipeline related to our internal CLI tooling failing to resolve correctly, in our estimation, following VS2019 installation.\r\n\r\nRunning the latest NuGet: `Version: 5.3.0.6260`\r\n\r\nIf it helps, our `dotnet --info` looks like this:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.508 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.509 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```"},{"Id":"10626133644","Type":"IssuesEvent","CreatedAt":"2019-10-14T15:49:32","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3076","RelatedDescription":"Closed issue \"Build errors in VS2017 after installing VS2019\" (#3076) at dotnet/sdk","RelatedBody":"I have an existing solution containing some projects targeting .Net Core 2.1 and .Net Standard 2.0.\r\n\r\nI installed VS2019, and the solution builds.  If I open VS2017 and try to build the same solution, I get errors saying:\r\nThe current .NET SDK does not support targeting .NET Core 2.1.  Either target .NET Core 1.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.\t\r\nand\r\nThe current .NET SDK does not support targeting .NET Standard 2.0.  Either target .NET Standard 1.6 or lower, or use a version of the .NET SDK that supports .NET Standard 2.0.\t\r\n\r\nThis was working before install of VS2019, and still works in VS2019, just not in VS2017."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"501128777","IsPullRequest":true,"CreatedAt":"2019-10-01T20:30:20","Actor":"gep13","Number":"150","RawContent":null,"Title":"Add new Cake Maintainer","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Open PR \"Add new Cake Maintainer\" (#150)"},{"Id":"500670461","IsPullRequest":true,"CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Number":"149","RawContent":null,"Title":"Add ImageSharp","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Open PR \"Add ImageSharp\" (#149)"},{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"507007512","IsPullRequest":true,"CreatedAt":"2019-10-15T05:03:58","Actor":"benaadams","Number":"27195","RawContent":null,"Title":"Improve Dictionary TryGetValue size/perfomance","State":"open","Body":"From https://github.com/dotnet/coreclr/pull/27149 without the hashcode-to-bucket mapping changes\r\n\r\n* Dictionary avoid second bounds check in TryGetValue/indexer get methods\r\n* Return `ref` from FindValue so ContainsKey doesn't pay a struct copy cost when using same method.\r\n* Rearrange FindValue return block to be a straighter flow for the common path of found item\r\n* Rearrange `Entry` struct to match access order; however change to `Auto` layout in-case it doesn't pack well (e.g. `TKey` and `TValue` both being byte/short)\r\n* Use `(uint)entries.Length` test for `collisionCount` count to match `i` test so same `uint` register can be used\r\n* move `collisionCount++` before `collisionCount` test so the Jit *could* micro-fuse them (though doesn't currently https://github.com/dotnet/coreclr/issues/7566)\r\n\r\nSize improvements\r\n```\r\nTotal bytes of diff: -1441 (-0.05% of base)\r\n    diff is an improvement.\r\n\r\nTotal byte diff includes -166 bytes from reconciling methods\r\n        Base had    4 unique methods,     3935 unique bytes\r\n        Diff had    4 unique methods,     3769 unique bytes\r\n\r\nTop file improvements by size (bytes):\r\n       -1441 : System.Private.CoreLib.dasm (-0.05% of base)\r\n```\r\n\r\n/cc @jkotas @AntonLapounov @GrabYourPitchforks ","Url":"https://github.com/dotnet/coreclr/pull/27195","RelatedDescription":"Open PR \"Improve Dictionary TryGetValue size/perfomance\" (#27195)"},{"Id":"506986656","IsPullRequest":true,"CreatedAt":"2019-10-15T03:46:12","Actor":"stephentoub","Number":"27194","RawContent":null,"Title":"Use stackalloc expressions with builder ctors","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27194","RelatedDescription":"Open PR \"Use stackalloc expressions with builder ctors\" (#27194)"},{"Id":"506954826","IsPullRequest":true,"CreatedAt":"2019-10-15T01:44:44","Actor":"sandreenko","Number":"27193","RawContent":null,"Title":"Fix some optimization warnings in jit.","State":"open","Body":"Fix inefficient x64 struct layouts and passings by value.\r\nIt gives a tiny IR (-0.03%) and memory consumption (-0.09%) improvement.\r\n\r\nThat is an optimization follow-up from the Friday learning day, thanks to PVS-Studio.\r\n\r\nCorrectness fixes will be later.","Url":"https://github.com/dotnet/coreclr/pull/27193","RelatedDescription":"Open PR \"Fix some optimization warnings in jit.\" (#27193)"},{"Id":"506938478","IsPullRequest":true,"CreatedAt":"2019-10-15T00:37:37","Actor":"VSadov","Number":"27192","RawContent":null,"Title":"[WIP] Turn `GCSimulatorTest` tests into `LongRunningGCTest` tests","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27192","RelatedDescription":"Open PR \"[WIP] Turn `GCSimulatorTest` tests into `LongRunningGCTest` tests\" (#27192)"},{"Id":"506936210","IsPullRequest":false,"CreatedAt":"2019-10-15T00:27:37","Actor":"GrabYourPitchforks","Number":"27191","RawContent":null,"Title":"DecoderNLS.Convert doesn't always out the correct value for 'completed'","State":"open","Body":"This is pretty much the same issue as https://github.com/dotnet/coreclr/issues/23020, but we forgot to apply the same fix to the `DecoderNLS` class.\r\n\r\nRepro code:\r\n\r\n```cs\r\nEncoder encoder = Encoding.UTF8.GetEncoder();\r\nencoder.Convert(new char[] { '\\ud800' }, 0, 1, new byte[0], 0, 0, flush: false, out int charsUsed, out int bytesUsed, out bool completed);\r\nConsole.WriteLine(charsUsed);\r\nConsole.WriteLine(bytesUsed);\r\nConsole.WriteLine(completed);\r\nConsole.WriteLine();\r\n\r\nDecoder decoder = Encoding.UTF8.GetDecoder();\r\ndecoder.Convert(new byte[] { 0xF0 }, 0, 1, new char[0], 0, 0, flush: false, out bytesUsed, out charsUsed, out completed);\r\nConsole.WriteLine(bytesUsed);\r\nConsole.WriteLine(charsUsed);\r\nConsole.WriteLine(completed);\r\n```\r\n\r\nOutput on .NET Framework 4.8:\r\n\r\n```txt\r\n1\r\n0\r\nTrue     <-- this is incorrect\r\n\r\n1\r\n0\r\nTrue     <-- this is incorrect\r\n```\r\n\r\nOutput on .NET Core 3.0:\r\n\r\n```txt\r\n1\r\n0\r\nFalse    <-- this is correct\r\n\r\n1\r\n0\r\nTrue     <-- this is still incorrect\r\n```\r\n\r\n/cc @tarekgh as FYI","Url":"https://github.com/dotnet/coreclr/issues/27191","RelatedDescription":"Open issue \"DecoderNLS.Convert doesn't always out the correct value for 'completed'\" (#27191)"},{"Id":"506934315","IsPullRequest":true,"CreatedAt":"2019-10-15T00:19:42","Actor":"echesakovMSFT","Number":"27190","RawContent":null,"Title":"Fix RBM_PROFILER_TAILCALL_TRASH on x86","State":"open","Body":"Fix `RBM_PROFILER_TAILCALL_TRASH` as it claims that ProfileTailcall helper will trash non-volatile registers on x86.","Url":"https://github.com/dotnet/coreclr/pull/27190","RelatedDescription":"Open PR \"Fix RBM_PROFILER_TAILCALL_TRASH on x86\" (#27190)"},{"Id":"506932805","IsPullRequest":true,"CreatedAt":"2019-10-15T00:14:47","Actor":"CarolEidt","Number":"27189","RawContent":null,"Title":"Update first-class-structs doc","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27189","RelatedDescription":"Closed or merged PR \"Update first-class-structs doc\" (#27189)"},{"Id":"506924539","IsPullRequest":false,"CreatedAt":"2019-10-14T23:39:53","Actor":"AaronRobinsonMSFT","Number":"27188","RawContent":null,"Title":"Add support for suppression of GC transition in crossgen2","State":"open","Body":"[Work was done](https://github.com/dotnet/coreclr/pull/26458) to add support in crossgen for the suppression of GC transitions. This should also be done in crossgen2.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/0f71a90f41cfae2a9675bb37150d3a7d4e8b1423/src/zap/zapimport.cpp#L1404-L1421\r\n\r\n/cc @MichalStrehovsky @davidwrighton @sergiy-k ","Url":"https://github.com/dotnet/coreclr/issues/27188","RelatedDescription":"Open issue \"Add support for suppression of GC transition in crossgen2\" (#27188)"},{"Id":"506918175","IsPullRequest":false,"CreatedAt":"2019-10-14T23:15:36","Actor":"cshung","Number":"27187","RawContent":null,"Title":"[crossgen2] Handle TypeSpec in AttributePresenceFilterNode.ReadCustomAttributeTypeNameWithoutResolving","State":"open","Body":"[Here](https://github.com/dotnet/coreclr/blob/0f71a90f41cfae2a9675bb37150d3a7d4e8b1423/src/tools/crossgen2/ILCompiler.ReadyToRun/Compiler/DependencyAnalysis/ReadyToRun/AttributePresenceFilterNode.cs#L131) I have assumed that when the parent of the constructor is a `MemberRef`, then the parent of the `MemberRef` has to be a `TypeRef`. \r\nIn case of generic attribute, it could be a `TypeSpec`, and we should handle it as well.","Url":"https://github.com/dotnet/coreclr/issues/27187","RelatedDescription":"Open issue \"[crossgen2] Handle TypeSpec in AttributePresenceFilterNode.ReadCustomAttributeTypeNameWithoutResolving\" (#27187)"},{"Id":"506871125","IsPullRequest":true,"CreatedAt":"2019-10-14T23:10:23","Actor":"mikedn","Number":"27183","RawContent":null,"Title":"Fix 2 small Statement issues","State":"closed","Body":"1. Statement data members have \"incorrect\" order that leads to unnecessary alignment holes\r\n2. LocalAddressVisitor dumps the statement tree twice","Url":"https://github.com/dotnet/coreclr/pull/27183","RelatedDescription":"Closed or merged PR \"Fix 2 small Statement issues\" (#27183)"},{"Id":"506856158","IsPullRequest":true,"CreatedAt":"2019-10-14T23:06:54","Actor":"cshung","Number":"27181","RawContent":null,"Title":"Handle the case where customAttributeConstructorHandle could be a MemberRef","State":"closed","Body":"Fixes #27118 \r\n\r\n@dotnet/crossgen-contrib ","Url":"https://github.com/dotnet/coreclr/pull/27181","RelatedDescription":"Closed or merged PR \"Handle the case where customAttributeConstructorHandle could be a MemberRef\" (#27181)"},{"Id":"506914739","IsPullRequest":false,"CreatedAt":"2019-10-14T23:03:24","Actor":"AaronRobinsonMSFT","Number":"27186","RawContent":null,"Title":"The GC_Poll Create/Insert logic appears to be flawed","State":"open","Body":"The code responsible for creating and inserting GC_Poll instances appears to have degraded since porting over from .NET Framework.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/45a136968ab6e0446f5309852008b3cf151f83a6/src/jit/flowgraph.cpp#L3574\r\n\r\nCalling the above function when either `GCPOLL_CALL` or `GCPOLL_INLINE` is set results in multiple asserts being fired. This was discovered during the suppress GC work - https://github.com/dotnet/coreclr/pull/26458. The result of this was to manually insert `GCPOLL_CALL` instances instead of `GCPOLL_INLINE`.\r\n\r\n/cc @briansull @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/issues/27186","RelatedDescription":"Open issue \"The GC_Poll Create/Insert logic appears to be flawed\" (#27186)"},{"Id":"506906558","IsPullRequest":false,"CreatedAt":"2019-10-14T22:35:02","Actor":"AaronRobinsonMSFT","Number":"27185","RawContent":null,"Title":"Apply new GC suppression attribute","State":"open","Body":"Once https://github.com/dotnet/corefx/issues/40740 is completed, the new API should be applied to the following APIs:\r\n\r\n[Interop.GetCurrentProcessId](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/Interop/Windows/Kernel32/Interop.GetCurrentProcessId.cs)\r\n[Interop.GetCurrentThreadId](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/Interop/Windows/Kernel32/Interop.GetCurrentThreadId.cs)\r\n[Interop.GetStdHandle](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/Interop/Windows/Kernel32/Interop.GetStdHandle.cs)\r\n[Interop.SetThreadErrorMode](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/Interop/Windows/Kernel32/Interop.SetThreadErrorMode.cs)\r\n\r\nAll instances of the previous attribute name should be updated as well - see https://github.com/dotnet/coreclr/pull/26458.","Url":"https://github.com/dotnet/coreclr/issues/27185","RelatedDescription":"Open issue \"Apply new GC suppression attribute\" (#27185)"},{"Id":"506810740","IsPullRequest":true,"CreatedAt":"2019-10-14T21:56:10","Actor":"elinor-fung","Number":"27180","RawContent":null,"Title":"Remove unused binder code","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27180","RelatedDescription":"Closed or merged PR \"Remove unused binder code\" (#27180)"},{"Id":"506872229","IsPullRequest":true,"CreatedAt":"2019-10-14T21:01:26","Actor":"echesakovMSFT","Number":"27184","RawContent":null,"Title":"Implement stack probing using helpers","State":"open","Body":"This *partially* addresses https://github.com/dotnet/coreclr/issues/26996\r\n1. Splits `CodeGen::genAllocLclFrame` into Arm32 and Arm64 specific functions\r\n2. Implements stack probing on Arm32 via helpers\r\n\r\nImplementation of stack probing via helpers on Arm64 is complicated...\r\nIt is related to how we establish frame pointer in a function prolog and the fact that stack probing currently happens before `lr` is saved on stack.\r\nThe latter means that we can not call any function until that moment - every call will previous value of `lr`.\r\nWe also can not defer the stack probing until after we save the frame record (i.e. `fp`, `lr` pair) on stack - some types of stack frames store the frame record at the lowest address on the stack.\r\n\r\nI tried to consider ways of calling the helper without advancing `sp`:\r\n1. Do jump instead of call to the helper (i.e. replacing `bl` with `b`). This requires computing return address manually and passing it to the helper. It seems we can't do this in JIT right now (at least I could not find a way to emit INS_adr and specify PCRelOffset). This approach would probably confuse unwinder when SO happens.\r\n2. Store `lr` in red zone before call to the helper and restore original value of `lr` inside the helper. It is not going to work - unwind codes on Arm64 doesn't support negative offsets.\r\n3. Store original value of `lr` into another register - not supported by unwind codes.\r\n\r\nThe only choice I have left is to store `lr` on the stack, adjust `sp`, call to the helper and restore `lr` and `sp` after the call (or in the helper).\r\n\r\n@dotnet/jit-contrib @janvorli I would value your feedback on the proposal. For now I would like to merge Arm32 stack probing logic only.","Url":"https://github.com/dotnet/coreclr/pull/27184","RelatedDescription":"Open PR \"Implement stack probing using helpers\" (#27184)"},{"Id":"506870977","IsPullRequest":true,"CreatedAt":"2019-10-14T20:58:27","Actor":"PJB3005","Number":"27182","RawContent":null,"Title":"Implement SetThreadName in PAL for Linux.","State":"open","Body":"This means thread names will now show up in gdb, htop, etc... on Linux.\r\n\r\nI did not implement this for any other platforms:\r\nI did not have anything to test them with, and `pthread_setname_np`'s API varies wildly across platform. (Hell, on macOS you can't call it from any thread except the thread in question..)\r\n\r\nI'm not very familiar with C/C++ and this is my first time contributing, so extra scrutiny would be very much appreciated.","Url":"https://github.com/dotnet/coreclr/pull/27182","RelatedDescription":"Open PR \"Implement SetThreadName in PAL for Linux.\" (#27182)"},{"Id":"506715809","IsPullRequest":true,"CreatedAt":"2019-10-14T20:08:07","Actor":"MichalStrehovsky","Number":"27177","RawContent":null,"Title":"Wrap PerfEventSource usage in IsEnabled checks","State":"closed","Body":"After the recent start/stop event refactoring, this is the only use of PerfEventSource that is not wrapped in a IsEnabled call.\r\n\r\nTools like IL Linker are able to strip EventSource usage to make the app smaller and the way they do it is by replacing IsEnabled to always return false and making Write methods always throw. If we don't wrap EventSource usage in IsEnabled checks, this results in a broken app.","Url":"https://github.com/dotnet/coreclr/pull/27177","RelatedDescription":"Closed or merged PR \"Wrap PerfEventSource usage in IsEnabled checks\" (#27177)"},{"Id":"506413170","IsPullRequest":false,"CreatedAt":"2019-10-14T18:18:18","Actor":"VincentBu","Number":"27174","RawContent":null,"Title":"Test failed: CoreMangLib\\system\\span\\SlowTailCallArgs\\SlowTailCallArgs.cmd","State":"closed","Body":"**Job:**\r\n[coreclr-jitstress #20191012.1 Run Test Pri1 Windows_NT x86 checked](https://dev.azure.com/dnceng/public/_build/results?buildId=386564&view=logs)\r\n\r\n**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/58e2e07f-0e2c-4512-aeff-e27f677bf2b7/workitems/PayloadGroup0/console\r\n\r\n**OS & Arch:**\r\nwindows x86\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_JitStress=2\r\n\r\n**Note:**\r\nThis failure **doesn't repro** on our windows x64 machine.\r\n\r\n**Log:**\r\n```\r\nCoreMangLib\\system\\span\\SlowTailCallArgs\\SlowTailCallArgs.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\58e2e07f-0e2c-4512-aeff-e27f677bf2b7\\Work\\a232c5b9-f36d-4560-bde3-8fa50ad02132\\Exec\\CoreMangLib\\system\\Reports\\CoreMangLib.system\\span\\SlowTailCallArgs\\SlowTailCallArgs.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\58e2e07f-0e2c-4512-aeff-e27f677bf2b7\\Payload\\corerun.exe\" SlowTailCallArgs.dll \r\n          SpanTest: pass\r\n          ByRefLikeTest: fail\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27174","RelatedDescription":"Closed issue \"Test failed: CoreMangLib\\system\\span\\SlowTailCallArgs\\SlowTailCallArgs.cmd\" (#27174)"},{"Id":"506411431","IsPullRequest":true,"CreatedAt":"2019-10-14T18:08:22","Actor":"franksinankaya","Number":"27173","RawContent":null,"Title":"Fix integer conversion issues","State":"closed","Body":"@am11 @jkotas @janvorli ","Url":"https://github.com/dotnet/coreclr/pull/27173","RelatedDescription":"Closed or merged PR \"Fix integer conversion issues\" (#27173)"},{"Id":"506709512","IsPullRequest":true,"CreatedAt":"2019-10-14T18:07:17","Actor":"MichalStrehovsky","Number":"27176","RawContent":null,"Title":"Copy exception regions in the copy constructor","State":"closed","Body":"This is used to create MethodIL for the interop stubs. I introduced this field in #27109 but forgot to make a copy here.","Url":"https://github.com/dotnet/coreclr/pull/27176","RelatedDescription":"Closed or merged PR \"Copy exception regions in the copy constructor\" (#27176)"},{"Id":"506795883","IsPullRequest":true,"CreatedAt":"2019-10-14T18:00:03","Actor":"dotnet-maestro-bot","Number":"27179","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @jashook\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/27179","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#27179)"},{"Id":"506782895","IsPullRequest":true,"CreatedAt":"2019-10-14T17:56:56","Actor":"jashook","Number":"27178","RawContent":null,"Title":"[Release/2.1] Update alpine test queue to alpine 3.10","State":"closed","Body":"@mmitche let me know if we want to automatically merge this to 2.2 or if I should open another PR.\r\n\r\n@jkoritzinsky ptal\r\n/cc @dotnet/coreclr-infra @MeiChin-Tsai ","Url":"https://github.com/dotnet/coreclr/pull/27178","RelatedDescription":"Closed or merged PR \"[Release/2.1] Update alpine test queue to alpine 3.10\" (#27178)"},{"Id":"506458892","IsPullRequest":true,"CreatedAt":"2019-10-14T05:49:02","Actor":"VSadov","Number":"27175","RawContent":null,"Title":"[WIP] Ported HighPerformanceCounter internal API from CoreRt","State":"open","Body":"There is no access to a high precision timer in corlib, which is very limiting for time-sensitive features in managed code.\r\nCoreRt HighPerformanceCounter is lean, yet seems sufficient for most needs.","Url":"https://github.com/dotnet/coreclr/pull/27175","RelatedDescription":"Open PR \"[WIP] Ported HighPerformanceCounter internal API from CoreRt\" (#27175)"},{"Id":"506397598","IsPullRequest":true,"CreatedAt":"2019-10-13T23:34:05","Actor":"franksinankaya","Number":"27172","RawContent":null,"Title":"find src/jit -type f -exec sed -i -e 's/gtCall\\./AsCall()\\./g' {} \\;","State":"open","Body":"ascall","Url":"https://github.com/dotnet/coreclr/pull/27172","RelatedDescription":"Open PR \"find src/jit -type f -exec sed -i -e 's/gtCall\\./AsCall()\\./g' {} \\;\" (#27172)"},{"Id":"506351514","IsPullRequest":true,"CreatedAt":"2019-10-13T23:01:24","Actor":"benaadams","Number":"27171","RawContent":null,"Title":"Update Jit formatting link","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27171","RelatedDescription":"Closed or merged PR \"Update Jit formatting link\" (#27171)"},{"Id":"506279943","IsPullRequest":false,"CreatedAt":"2019-10-13T22:58:18","Actor":"hamarb123","Number":"27168","RawContent":null,"Title":"GetDelegateForFunctionPointer should allow generic types which have all parameters set","State":"closed","Body":"When you call `Marshal.GetDelegateForFunctionPointer(IntPtr, Type)`, it does a series of checks to ensure your parameters are valid and make sense (see [Marshal.cs](https://github.com/dotnet/corefx/blob/d58a51f911efb3c98beca21b6cf08cc703424fdf/src/Common/src/CoreLib/System/Runtime/InteropServices/Marshal.cs#L857)).\r\nBut one of these checks does not make complete sense, the check I am talking about is:\r\n```cs\r\nif (t.IsGenericType)\r\n{\r\n    throw new ArgumentException(SR.Argument_NeedNonGenericType, nameof(t));\r\n}\r\n```\r\nMy problem with this check is that the code should work on constructed generic types (eg. `Action<int>` instead of `Action<T>`), and it does if you write some code that directly uses `GetDelegateForFunctionPointerInternal(IntPtr, Type)` (shown at the bottom of this issue), but the public member `GetDelegateForFunctionPointer(IntPtr, Type)` does not allow it as it checks if it is a generic type.\r\n\r\nHere is what the check should be:\r\n```cs\r\nif (t.IsGenericType && !t.IsConstructedGenericType)\r\n{\r\n    throw new ArgumentException(SR.Argument_NeedNonGenericType, nameof(t));\r\n}\r\n```\r\nThe reason this is annoying to me is that I have some code that needs to be able to dynamically load a native function with a delegate specified on the go and they are always either a `Func` or an `Action` (usually with generic parameters); I cannot do this without either using my workaround which could break if `GetDelegateForFunctionPointerInternal` is renamed or the suggested change to Marshal.cs.\r\n\r\nHere is some sample code that should work:\r\n```cs\r\n[DllImport(\"kernel32\", CharSet = CharSet.Unicode)]\r\npublic static extern IntPtr LoadLibrary(string fileName);\r\n  \r\n[DllImport(\"kernel32\", CharSet = CharSet.Ansi)]\r\npublic static extern IntPtr GetProcAddress(IntPtr module, string procName);\r\n\r\n...\r\n\r\nvar x = Marshal.GetDelegateForFunctionPointer<Func<uint, uint, int>>(GetProcAddress(LoadLibrary(\"kernel32.dll\"), \"Beep\"));\r\nx(440, 1000);\r\n```\r\nBut it throws the following error: `System.ArgumentException: 'The specified Type must not be a generic type definition. '`, so here is my current solution\r\n```cs\r\n[DllImport(\"kernel32\", CharSet = CharSet.Unicode)]\r\npublic static extern IntPtr LoadLibrary(string fileName);\r\n  \r\n[DllImport(\"kernel32\", CharSet = CharSet.Ansi)]\r\npublic static extern IntPtr GetProcAddress(IntPtr module, string procName);\r\n\r\n...\r\n\r\nvar x = (Func<uint, uint, int>)GetDelegateForFunctionPointerFix(GetProcAddress(LoadLibrary(\"kernel32.dll\"), \"Beep\"), typeof(Func<uint, uint, int>));\r\nx(440, 1000);\r\n```\r\n\r\nSo basically, all I want to change is in [Marshal.cs](https://github.com/dotnet/corefx/blob/d58a51f911efb3c98beca21b6cf08cc703424fdf/src/Common/src/CoreLib/System/Runtime/InteropServices/Marshal.cs#L871 from `if (t.IsGenericType)` to `t.IsGenericType && !t.IsConstructedGenericType`\r\n\r\nMy current solution:\r\n```cs\r\nprivate static Func<IntPtr, Type, Delegate> GetDelegateForFunctionPointerInternalPointer;\r\npublic static Delegate GetDelegateForFunctionPointerFix(IntPtr ptr, Type t)\r\n{\r\n    //Validate the parameters (modified from https://referencesource.microsoft.com/#mscorlib/system/runtime/interopservices/marshal.cs)\r\n    if (ptr == IntPtr.Zero)\r\n    {\r\n        throw new ArgumentNullException(nameof(ptr));\r\n    }\r\n\r\n    if (t is null)\r\n    {\r\n        throw new ArgumentNullException(nameof(t));\r\n    }\r\n\t\r\n    //skip the IsRuntimeImplemented check as IsRuntimeImplemented is not visible and I cannot be bothered\r\n\t\r\n    if (t.IsGenericType && !t.IsConstructedGenericType)\r\n    {\r\n        throw new ArgumentException(\"The specified Type must not be an open generic type definition.\", nameof(t));\r\n    }\r\n\r\n    Type? c = t.BaseType;\r\n    if (c != typeof(Delegate) && c != typeof(MulticastDelegate))\r\n    {\r\n        throw new ArgumentException(\"Type must derive from Delegate or MulticastDelegate.\", nameof(t));\r\n    }\r\n\t\r\n    if (GetDelegateForFunctionPointerInternalPointer is null)\r\n    {\r\n        GetDelegateForFunctionPointerInternalPointer = (Func<IntPtr, Type, Delegate>)typeof(Marshal).GetMethod(\"GetDelegateForFunctionPointerInternal\", BindingFlags.Static | BindingFlags.NonPublic).MakeDelegate(null);\r\n    }\r\n\r\n    return GetDelegateForFunctionPointerInternalPointer(ptr, t);\r\n}\r\n```\r\n\r\nTested on .NET Core 3.0 on Windows 10 x64 (running as AnyCPU though).\r\nIf there are any issues/problems with this idea, please let me know!","Url":"https://github.com/dotnet/coreclr/issues/27168","RelatedDescription":"Closed issue \"GetDelegateForFunctionPointer should allow generic types which have all parameters set\" (#27168)"},{"Id":"506290192","IsPullRequest":true,"CreatedAt":"2019-10-13T08:11:52","Actor":"mikedn","Number":"27170","RawContent":null,"Title":"Cleanup LowerBlockStore","State":"open","Body":"Extracted from #27035\r\n\r\nFixes #27169","Url":"https://github.com/dotnet/coreclr/pull/27170","RelatedDescription":"Open PR \"Cleanup LowerBlockStore\" (#27170)"},{"Id":"506287973","IsPullRequest":false,"CreatedAt":"2019-10-13T07:46:27","Actor":"mikedn","Number":"27169","RawContent":null,"Title":"initblk incorrectly handles 0 fill on ARM64","State":"open","Body":"The fill values passed to initblk is supposed to be a byte but ARM64 block store lowering fails to mask the upper bytes resulting in incorrect initialization:\r\n```\r\nldloca V_0\r\nldc.i4 0x11100\r\nldc.i4 15\r\ninitblk\r\n```\r\ngenerates:\r\n```asm\r\n52822000          movz    w0, #0x1100\r\n72A00020          movk    w0, #1 LSL #16\r\n9101C3A1          add     x1, fp, #112  // [V05 loc0]\r\nF9000020          str     x0, [x1]     ; stores 0x0000000000011100\r\nB9000820          str     w0, [x1,#8]  ; stores 0x00011100\r\n79001820          strh    w0, [x1,#12] ; stores 0x1100\r\n39003820          strb    w0, [x1,#14] ; stores 0x00\r\n```\r\n\r\nhttps://github.com/dotnet/coreclr/pull/27035#discussion_r331629601","Url":"https://github.com/dotnet/coreclr/issues/27169","RelatedDescription":"Open issue \"initblk incorrectly handles 0 fill on ARM64\" (#27169)"},{"Id":"506259815","IsPullRequest":true,"CreatedAt":"2019-10-13T01:23:57","Actor":"EgorBo","Number":"27167","RawContent":null,"Title":"Expand BBJ_RETURN blocks with bool conditions","State":"open","Body":"This PR consists of:\r\n1) Recognize `GT_NE` early in the `importer.cpp` (roslyn replaces `x!=0` with `(uint)x>0` and it messes up some optimizations) - [jit-diff](https://gist.github.com/EgorBo/e741488f563ac44f5322a3d2fda5bfa0)\r\n2) Don't replace with `GT_NE` if `GT_ARR_LENGTH` is around - it removes a bound check for [this case](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIGYACMhgYQYG8aHuGuf6m5JAwCWAOwwMAchAwB1aAGtxAcwAU4jAG0Aug2xQo2AJ4BKDnx48RAMwZq1AV02mDR4wDoAMjDEqMABYMAHwMAAymllbRxADs+oYmWmE6ANxRVnHh6dRWAL5Rhbn8jMRCohIMClDKfhoSugnu5pzF0aJ2amEMADz2zhKuiZ4+foGRbe388W5JKTlTTPFhCzwF1HlAA). This change has 0 diffs for BCL in jit-diff and looks more like a hack and needs to be addressed in the rangecheck instead I guess but it does fix that [case](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIGYACMhgYQYG8aHuGuf6m5JAwCWAOwwMAchAwB1aAGtxAcwAU4jAG0Aug2xQo2AJ4BKDnx48RAMwZq1AV02mDR4wDoAMjDEqMABYMAHwMAAymllbRxADs+oYmWmE6ANxRVnHh6dRWAL5Rhbn8jMRCohIMClDKfhoSugnu5pzF0aJ2amEMADz2zhKuiZ4+foGRbe388W5JKTlTTPFhCzwF1HlAA).\r\n3) Expand `BBJ_RETURN` basic blocks with boolean conditions, let me explain it via a pic:\r\n\r\n![image](https://user-images.githubusercontent.com/523221/66714025-ed734d00-edb9-11e9-85a2-ddb8b3d2e39b.png)\r\n\r\nSo it basically de-optimizes the control flow (optimized by Roslyn) but makes it a bit more friendly for optimizations, e.g. now both `BB1` and `BB2` jump into the same block and can be now handled by the [optOptimizeBools](https://github.com/dotnet/coreclr/blob/fd0ca99c4214538de6f821db6a38c9b6aca5ee62/src/jit/optimizer.cpp#L8851) optimizations, e.g.:\r\n```csharp\r\nstatic bool AreZero(int x, int y)\r\n{\r\n    return x == 0 && y == 0;\r\n}\r\n```\r\nWas:\r\n```asm\r\nG_M22205_IG01:\r\nG_M22205_IG02:\r\n       test     ecx, ecx\r\n       jne      SHORT G_M22205_IG05\r\nG_M22205_IG03:\t\t;; bbWeight=0.50\r\n       test     edx, edx\r\n       sete     al\r\n       movzx    rax, al\r\nG_M22205_IG04:\t\t;; bbWeight=0.50\r\n       ret      \r\nG_M22205_IG05:\t\t;; bbWeight=0.50\r\n       xor      eax, eax\r\nG_M22205_IG06:\t\t;; bbWeight=0.50\r\n       ret      \r\n; Total bytes of code: 16\r\n```\r\nNow (without `optMergeBoolReturns`):\r\n```asm\r\nG_M22205_IG01:\r\nG_M22205_IG02:\r\n       or       edx, ecx\r\n       jne      SHORT G_M22205_IG05\r\nG_M22205_IG03:\r\n       mov      eax, 1\r\nG_M22205_IG04:\r\n       ret      \r\nG_M22205_IG05:\r\n       xor      eax, eax\r\nG_M22205_IG06:\r\n       ret   \r\n```\r\nWith `optMergeBoolReturns`:\r\n```asm\r\nG_M22205_IG01:\r\nG_M22205_IG02:\r\n       or       edx, ecx\r\n       sete    al\r\n       movzx    rax, al\r\nG_M22205_IG03:\r\n       ret      \r\n```\r\n\r\nSo my de-optimization basically helped `optOptimizeBools` and now it's easier to go further and replace it with just `return x | y != 0` without jumps (see https://github.com/dotnet/coreclr/issues/27148). \r\n\r\n![image](https://user-images.githubusercontent.com/523221/66721874-ed9e3780-ee0f-11e9-829b-752206d71759.png)\r\n\r\nThe `fgExpandBoolReturns` and `optMergeBoolReturns` impl are just proof of concept so let me know please if I am moving in a wrong direction 🙂 \r\n\r\nJit diff:\r\n```\r\nFound 76 files with textual diffs.\r\n\r\nSummary:\r\n(Lower is better)\r\n\r\nTotal bytes of diff: -4452 (-0.01% of base)\r\n    diff is an improvement.\r\n\r\nTop file regressions by size (bytes):\r\n          59 : System.Private.DataContractSerialization.dasm (0.01% of base)\r\n           7 : System.Net.Requests.dasm (0.01% of base)\r\n           5 : System.Reflection.Metadata.dasm (0.00% of base)\r\n           2 : System.Security.Permissions.dasm (0.01% of base)\r\n           1 : NuGet.DependencyResolver.Core.dasm (0.00% of base)\r\n\r\nTop file improvements by size (bytes):\r\n        -665 : Microsoft.CodeAnalysis.CSharp.dasm (-0.02% of base)\r\n        -359 : System.Private.CoreLib.dasm (-0.01% of base)\r\n        -318 : System.Collections.dasm (-0.06% of base)\r\n        -310 : Microsoft.CodeAnalysis.dasm (-0.02% of base)\r\n        -282 : System.Private.Xml.dasm (-0.01% of base)\r\n\r\n74 total files with size differences (64 improved, 10 regressed), 55 unchanged.\r\n\r\nTop method regressions by size (bytes):\r\n          94 (16.52% of base) : System.Private.DataContractSerialization.dasm - System.Xml.XmlBufferReader:Equals2(int,int,ref):bool:this (3 methods)\r\n          27 (21.95% of base) : Microsoft.CodeAnalysis.CSharp.dasm - Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator:FieldLoadMustUseRef(ref):bool\r\n          18 ( 5.75% of base) : System.Reflection.Metadata.dasm - System.Reflection.Metadata.MetadataReader:ImplementsRedirectedInterface(struct,byref):bool:this\r\n          16 ( 1.48% of base) : Microsoft.CodeAnalysis.CSharp.dasm - Microsoft.CodeAnalysis.CSharp.Symbol:MatchAttributeTarget(ref,short,ref,ref):bool\r\n          15 ( 2.60% of base) : System.Reflection.Metadata.dasm - System.Reflection.Metadata.Ecma335.BlobHeap:DocumentNameEquals(struct,ref,bool):bool:this\r\n\r\nTop method improvements by size (bytes):\r\n         -95 (-2.45% of base) : Microsoft.CodeAnalysis.dasm - Roslyn.Utilities.EnumerableExtensions:IsEmpty(ref):bool (36 methods)\r\n         -56 (-2.35% of base) : Microsoft.CodeAnalysis.dasm - Microsoft.CodeAnalysis.ImmutableArrayExtensions:SetEquals(struct,struct,ref):bool (7 methods)\r\n         -50 (-12.02% of base) : System.Private.CoreLib.dasm - System.IO.PathInternal:IsPartiallyQualified(struct):bool (2 methods)\r\n         -41 (-9.43% of base) : Microsoft.CodeAnalysis.CSharp.dasm - Microsoft.CodeAnalysis.CSharp.ConversionsBase:HasImplicitConstantExpressionConversion(ref,ref):bool\r\n         -41 (-6.47% of base) : NuGet.Versioning.dasm - NuGet.Versioning.FloatRange:Satisfies(ref):bool:this\r\n\r\nTop method regressions by size (percentage):\r\n          27 (21.95% of base) : Microsoft.CodeAnalysis.CSharp.dasm - Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator:FieldLoadMustUseRef(ref):bool\r\n          94 (16.52% of base) : System.Private.DataContractSerialization.dasm - System.Xml.XmlBufferReader:Equals2(int,int,ref):bool:this (3 methods)\r\n           2 (10.53% of base) : Microsoft.CodeAnalysis.dasm - Microsoft.CodeAnalysis.UnicodeCharacterUtilities:IsCombiningChar(int):bool\r\n           2 (10.53% of base) : Microsoft.CodeAnalysis.dasm - Microsoft.CodeAnalysis.PrimitiveTypeCodeExtensions:Is64BitIntegral(int):bool\r\n\r\nTop method improvements by size (percentage):\r\n         -15 (-33.33% of base) : System.Net.Http.dasm - System.Net.Http.WinInetProxyHelper:get_AutoSettingsUsed():bool:this\r\n         -12 (-28.57% of base) : System.CommandLine.dasm - <>c:<GetUnreadOptionNames>b__13_0(ref):bool:this\r\n         -12 (-28.57% of base) : System.CommandLine.dasm - <>c:<GetUnreadParameters>b__14_0(ref):bool:this\r\n         -15 (-27.27% of base) : Newtonsoft.Json.dasm - Newtonsoft.Json.Serialization.JsonArrayContract:get_HasParameterizedCreatorInternal():bool:this\r\n         -15 (-27.27% of base) : Newtonsoft.Json.dasm - Newtonsoft.Json.Serialization.JsonDictionaryContract:get_HasParameterizedCreatorInternal():bool:this\r\n\r\n980 total methods with size differences (638 improved, 342 regressed), 249215 unchanged.\r\n```\r\n[full diff](https://gist.github.com/EgorBo/002756411a9a69e760068bf0d72a19c2).","Url":"https://github.com/dotnet/coreclr/pull/27167","RelatedDescription":"Open PR \"Expand BBJ_RETURN blocks with bool conditions\" (#27167)"},{"Id":"506235198","IsPullRequest":true,"CreatedAt":"2019-10-12T20:40:07","Actor":"franksinankaya","Number":"27166","RawContent":null,"Title":"find src/jit -type f -exec sed -i -e 's/gtCast\\./AsCast()\\./g' {} \\;","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27166","RelatedDescription":"Open PR \"find src/jit -type f -exec sed -i -e 's/gtCast\\./AsCast()\\./g' {} \\;\" (#27166)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"506935932","IsPullRequest":false,"CreatedAt":"2019-10-15T00:26:23","Actor":"MisinformedDNA","Number":"12888","RawContent":null,"Title":"tool install can't find package in private NuGet feed","State":"open","Body":"## Steps to reproduce\r\n1. Create an Azure Artifacts feed\r\n2. Push a pre-release global tool to the feed\r\n3. Click \"Connect Feed\" to get URL\r\n4. Set up Feed in VS to see that the package does exist and is marked pre-release\r\n5. Install the tool via Azure Pipelines\r\n\r\n```yaml\r\n  - task: NuGetCommand@2\r\n    displayName: 'Add auth values'\r\n    inputs:\r\n      command: custom\r\n      arguments: sources update -Name \"SomeName\" -Username \"vsts\" -Password \"$(System.AccessToken)\" -StorePasswordInClearText -ConfigFile NuGet.Config\r\n   \r\n  - pwsh: cat Nuget.config\r\n\r\n  - pwsh: dotnet tool install --global ToolName --version 1.0.1-ci-20191014-185132 --configfile NuGet.config\r\n```\r\n\r\n## Expected  behavior\r\n\r\nTool is successfully installed.\r\n\r\n## Actual behavior\r\n\r\nReceive an error that package can't be found:\r\n\r\n> error NU1101: Unable to find package ToolName. No packages exist with this id in source(s): FeedName, C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\r\n> The tool package could not be restored.\r\n> Tool 'ToolName' failed to install. This failure may have been caused by:\r\n> \r\n> * You are attempting to install a preview release and did not use the --version option to specify the version.\r\n> * A package by this name was found, but it was not a .NET Core tool.\r\n> * The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n> * You mistyped the name of the tool.\r\n> \r\n> For more reasons, including package naming enforcement, visit https://aka.ms/failure-installing-tool\r\n> ##[debug]$LASTEXITCODE: 1\r\n> \r\n\r\nNot getting a 401 anymore, so auth doesn't appear to be the problem.\r\n\r\nNuGet.config:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n   <packageSources>\r\n      <add key=\"FeedName\" value=\"https://OrgName.pkgs.visualstudio.com/_packaging/FeedName/nuget/v3/index.json\" />\r\n   </packageSources>\r\n  <packageSourceCredentials>\r\n    <FeedName>\r\n      <add key=\"Username\" value=\"vsts\" />\r\n      <add key=\"ClearTextPassword\" value=*** />\r\n    </FeedName>\r\n  </packageSourceCredentials>\r\n</configuration>\r\n```\r\n\r\nThe package name and version are definitely correct. Am I missing something? Is there a better way to do this?\r\n\r\n## Environment data\r\nAzure DevOps\r\ndotnet SDK 3.0.100\r\n\r\n@wli3 ","Url":"https://github.com/dotnet/cli/issues/12888","RelatedDescription":"Open issue \"tool install can't find package in private NuGet feed\" (#12888)"},{"Id":"505370205","IsPullRequest":false,"CreatedAt":"2019-10-14T23:36:02","Actor":"stuartd","Number":"12860","RawContent":null,"Title":"Calling dotnet test from a shell script fails on Ubuntu server with net core 3","State":"closed","Body":"We have a shell script that runs our .net core 3 integration tests on a Ubuntu server: it was running just fine, but since upgrading to .net core 3 it has stopped working.\r\n\r\nIt still works on OSX and in WSL using net core 3 (and the equivalent .bat file works on Windows). \r\n\r\nI have reinstalled .net core 3 on the server but to no effect.\r\n\r\nThere are two problems, which are detailed below:\r\n\r\n1. Calling `dotnet test` from a shell script fails with a permissions error in net core 3, but when calling it from the command line it will run - however..\r\n2. Parameters to `dotnet test` are somehow mangled when running from the command line.\r\n\r\n## Permissions error\r\n\r\nThe shell script is just this:\r\n\r\n```bash\r\n# this works just fine\r\ngit pull\r\n\r\n# run the project which gets the repo path, CDs to the test project folder, \r\n# and runs the tests, passing along any parameters as a test filter\r\ndotnet run --project TestRunner/TestRunner.csproj $@ \r\n\r\n# run the project which analyzes the test results and generates a results page\r\ndotnet run --project TestResultAnalyzer/TestResultAnalyzer/TestResultAnalyzer.csproj \r\n```\r\n\r\nThe first issue is a permissions error calling `dotnet test` from the script: this is the diagnostic output of the TestRunner project:\r\n\r\n```\r\nCurrent directory: /home/username/code/codename/src/API/App/App.Tests\r\nTest command:\r\ndotnet test --filter skeleton -l:trx;LogFileName=App_Test_Run_2019-10-10-11-40.trx -r /home/username/code/codename/src/API/TestRuns/App\r\nStarting process\r\n```\r\nAnd this is the error which occurs when starting the process:\r\n\r\n> Unhandled exception. System.ComponentModel.Win32Exception (13): Permission denied\r\n   at System.Diagnostics.Process.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean usesTerminal, Boolean throwOnNoExec)\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at TestRunner.Program.Main(String[] args) in /home/username/code/codename/src/Misc/TestRunner/Program.cs:line 77\r\n   \r\nAnd this is the code:\r\n\r\n```cs\r\nprocess = new Process {\r\n\tStartInfo = {\r\n\t\tArguments = $\"test {arguments} -l:trx;LogFileName={testRunName}.trx -r {testResultFolder}\",\r\n\t\tFileName = \"dotnet\",\r\n\t\tUseShellExecute = false\r\n\t}\r\n};\r\n                      \r\nvar commandDebug = $\"{process.StartInfo.FileName} {process.StartInfo.Arguments}\";\r\n\r\nConsole.WriteLine(\"Test command\");\r\nConsole.WriteLine(commandDebug);\r\nConsole.WriteLine(\"Starting process\");\r\nprocess.Start(); // boom\r\n```\r\n   \r\nSo, my first issue is:\r\n\r\nWhy is calling `dotnet test` from a shell script resulting in a permissions error, when calling it from the command line does not?\r\n\r\n## Test parameter mangling\r\n\r\nAnd that leads to my second issue.\r\n\r\nIf I run the above from the command line (note we are using NUnit as the test runner)\r\n\r\n`dotnet test --filter skeleton -l:trx;LogFileName=App_Test_Run_2019-10-10-11-40.trx -r /home/username/code/codename/src/API/TestRuns/App`\r\n\r\nThen the tests run, but I get this error message:\r\n\r\n> -r: command not found\r\n\r\nAs per [the documentation](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test), `-r` specifies the location of the test output file:\r\n \r\n> Directory in which to find the binaries to run.\r\n> -r|--results-directory <PATH>\r\n\r\nAnd indeed the file is not put in the right place, it ends out here, instead of in the `TestRuns/App` folder as specified:\r\n\r\n> /home/username/code/codename/src/API/App/App.Tests/TestResults/_servername_2019-10-10_11_46_36.trx\r\n\r\nAnd thus the analyzer can't find it, as it's not in the right place.\r\n\r\nNow as I said above, this exact same code works in Windows, OSX and WSL and worked on Ubuntu with net core 2.2 - but on the Ubuntu server it Just. Will. Not. Work. with net core 3.\r\n\r\nSo the second issue is:\r\n\r\nWhy is this test syntax not working on Ubuntu under net core 3?\r\n\r\nSupplementary info:\r\n\r\n#### Output of `dotnet --info`\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /snap/dotnet-sdk/49/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/snap/dotnet-sdk/49/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/snap/dotnet-sdk/49/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/snap/dotnet-sdk/49/shared/Microsoft.NETCore.App]\r\n```\r\n  \r\n#### Package references in the test project\r\n\r\n```xml\r\n<ItemGroup>\r\n  <PackageReference Include=\"FluentAssertions\" Version=\"5.9.0\" />\r\n  <PackageReference Include=\"JetBrains.DotMemoryUnit\" Version=\"3.0.20171219.105559\" />\r\n  <PackageReference Include=\"nunit\" Version=\"3.12.0\" />\r\n  <PackageReference Include=\"NUnit.ConsoleRunner\" Version=\"3.10.0\" />\r\n  <PackageReference Include=\"NUnit3TestAdapter\" Version=\"3.15.1\" />\r\n  <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.3.0\" />\r\n</ItemGroup>\r\n```  \r\n\r\n### Server culture\r\n\r\nThe server culture is en-US-POSIX (which hates humans and their puny case-sensitivity, but I digress..)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12860","RelatedDescription":"Closed issue \"Calling dotnet test from a shell script fails on Ubuntu server with net core 3\" (#12860)"},{"Id":"505735454","IsPullRequest":false,"CreatedAt":"2019-10-14T23:31:57","Actor":"shidouli","Number":"12873","RawContent":null,"Title":"X509Extension.Format() doesn't work well in macOS system","State":"closed","Body":"## Steps to reproduce\r\nMacOs:\r\nPS > $ext.Format($false)\r\n3042304006082B06010505073002863468747470733A2F2F73632D7072642D636F6D702D76633035342E656E672E766D776172652E636F6D2F6166642F766563732F6361\r\n\r\nWhile the same certificate in Ubuntu:\r\nPS > $ext.Format($false) CA Issuers - URI:https://sc-prd-comp-vc054.eng.vmware.com/afd/vecs/ca\r\n\r\n## Expected  behavior\r\nIn the MacOs, it should return the same result with the one in Ubuntu\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12873","RelatedDescription":"Closed issue \"X509Extension.Format() doesn't work well in macOS system\" (#12873)"},{"Id":"505611218","IsPullRequest":false,"CreatedAt":"2019-10-14T22:04:32","Actor":"khteh","Number":"12870","RawContent":null,"Title":"error MSB6006: \"csc.dll\" exited with code 137","State":"closed","Body":"## Steps to reproduce\r\n\r\n![Screenshot from 2019-10-11 10-54-24](https://user-images.githubusercontent.com/3871483/66621543-3e970b80-ec17-11e9-925d-7a2ac8db224f.png)\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n$ dn --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  19.04\r\n OS Platform: Linux\r\n RID:         ubuntu.19.04-x64\r\n Base Path:   /usr/share/dotnet-3.0.100/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/usr/share/dotnet-3.0.100/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12870","RelatedDescription":"Closed issue \"error MSB6006: \"csc.dll\" exited with code 137\" (#12870)"},{"Id":"506495909","IsPullRequest":false,"CreatedAt":"2019-10-14T21:52:21","Actor":"John0King","Number":"12885","RawContent":null,"Title":"Does consume COM component be supported?","State":"closed","Body":"## Steps to reproduce\r\n1. create a class library that use com, and target net461\r\n2. dotnet build\r\n\r\n## Expected  behavior\r\nbuild success and there's a com dll in the project\r\n\r\n## Actual behavior\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Microsoft.Common.CurrentVersion.targets(2726,5): error : MSB4803: .NET Core 版本的 MSBuild 不支持“ResolveComReference”。请使用 .NET Framework 版本的 MSBuild。有关更多详细信息，请参阅 https://aka.ms/msbuild/MSB4803。 [E:\\Projects\\FingerprintConnector\\src\\FingerprintConnector.Services\\FingerprintConnector.Services.csproj]\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12885","RelatedDescription":"Closed issue \"Does consume COM component be supported?\" (#12885)"},{"Id":"506815973","IsPullRequest":true,"CreatedAt":"2019-10-14T21:06:38","Actor":"dsplaisted","Number":"12887","RawContent":null,"Title":"Update branding to 3.1.100-preview2","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12887","RelatedDescription":"Closed or merged PR \"Update branding to 3.1.100-preview2\" (#12887)"},{"Id":"506343288","IsPullRequest":true,"CreatedAt":"2019-10-14T10:27:45","Actor":"dotnet-maestro[bot]","Number":"12884","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191014.1\r\n- **Date Produced**: 10/14/2019 8:54 AM\r\n- **Commit**: 4ace84dbf94128b4825c76cdd09b46dba7473478\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19514.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19514.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19514.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19514.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19514.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12884","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12884)"},{"Id":"506498982","IsPullRequest":false,"CreatedAt":"2019-10-14T07:58:10","Actor":"khteh","Number":"12886","RawContent":null,"Title":"publish -f netcoreapp3.0 errorneously looks for 'Microsoft.NETCore.App', version '2.0.0-preview1-002111-00'","State":"open","Body":"```\r\n$ dn publish -f netcoreapp3.0 -c Release --no-restore --no-build src/Biz4x.Frontend.Web/\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  bower font-awesome    extra-resolution Unnecessary resolution: font-awesome#5.0.8\r\n  bower popper.js       extra-resolution Unnecessary resolution: popper.js#v1.14.1\r\n  It was not possible to find any compatible framework version\r\n  The specified framework 'Microsoft.NETCore.App', version '2.0.0-preview1-002111-00' was not found.\r\n    - The following frameworks were found:\r\n        3.0.0 at [/usr/share/dotnet-3.0.100/shared/Microsoft.NETCore.App]\r\n  \r\n  You can resolve the problem by installing the specified framework and/or SDK.\r\n  \r\n  The .NET Core frameworks can be found at:\r\n    - https://aka.ms/dotnet-download\r\n/usr/src/4xlabs/bz-frontend/src/Biz4x.Frontend.Web/Biz4x.Frontend.Web.csproj(89,5): error MSB3073: The command \"dotnet bundle\" exited with code 150.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n$ dn --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  19.04\r\n OS Platform: Linux\r\n RID:         ubuntu.19.04-x64\r\n Base Path:   /usr/share/dotnet-3.0.100/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/usr/share/dotnet-3.0.100/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12886","RelatedDescription":"Open issue \"publish -f netcoreapp3.0 errorneously looks for 'Microsoft.NETCore.App', version '2.0.0-preview1-002111-00'\" (#12886)"},{"Id":"506316072","IsPullRequest":true,"CreatedAt":"2019-10-13T12:03:51","Actor":"dotnet-bot","Number":"12883","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12883","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#12883)"},{"Id":"506308966","IsPullRequest":true,"CreatedAt":"2019-10-13T11:35:24","Actor":"dotnet-maestro[bot]","Number":"12882","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191013.1\r\n- **Date Produced**: 10/13/2019 10:00 AM\r\n- **Commit**: 17c01271d621e2947dbf702dda0d61e43c5ec150\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19513.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19513.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19513.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19513.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19513.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12882","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12882)"},{"Id":"505568881","IsPullRequest":true,"CreatedAt":"2019-10-13T04:31:53","Actor":"dotnet-bot","Number":"12865","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12865","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#12865)"},{"Id":"506220812","IsPullRequest":true,"CreatedAt":"2019-10-12T18:55:23","Actor":"dotnet-maestro[bot]","Number":"12881","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191012.2\r\n- **Date Produced**: 10/12/2019 5:16 PM\r\n- **Commit**: 45672e39189b07c5f5928d287e097e136acbed20\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19512.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19512.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19512.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19512.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19512.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12881","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12881)"},{"Id":"506220726","IsPullRequest":true,"CreatedAt":"2019-10-12T18:24:27","Actor":"omajid","Number":"12880","RawContent":null,"Title":"Handle linux distributions without a VERSION_ID in dotnet-install.sh","State":"open","Body":"Some examples of such rolling distributions include Gentoo (`gentoo-x64` in the RID catalog) and Arch Linux.\r\n\r\nThis uses the [alternate value for a parameter expansion](https://wiki.bash-hackers.org/syntax/pe#use_an_alternate_value) syntax for bash, basically saying \"if `VERSION_ID` is set and not empty, expand this value to `.${VERSION_ID}`\".\r\n\r\ncc @alucryd \r\n","Url":"https://github.com/dotnet/cli/pull/12880","RelatedDescription":"Open PR \"Handle linux distributions without a VERSION_ID in dotnet-install.sh\" (#12880)"},{"Id":"506095089","IsPullRequest":true,"CreatedAt":"2019-10-12T16:31:56","Actor":"dotnet-maestro[bot]","Number":"12879","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191012.1\r\n- **Date Produced**: 10/12/2019 2:52 PM\r\n- **Commit**: f316dff97b89c97596555b1b7c0d1d7adb077ffb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19512.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19512.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19512.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19512.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19512.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12879","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12879)"},{"Id":"506064396","IsPullRequest":true,"CreatedAt":"2019-10-11T21:55:27","Actor":"dotnet-maestro[bot]","Number":"12878","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191011.5\r\n- **Date Produced**: 10/11/2019 8:15 PM\r\n- **Commit**: d984761132ae48859c271bc66e5bb886e61fa84a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19511.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19511.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19511.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19511.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19511.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12878","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12878)"},{"Id":"506040319","IsPullRequest":false,"CreatedAt":"2019-10-11T20:27:38","Actor":"MisinformedDNA","Number":"12877","RawContent":null,"Title":"Run selenium in a global tool","State":"closed","Body":"# Steps to reproduce\r\n\r\n1. Create a console app (.NET Core 2.1)\r\n2. Add NuGet references for `Selenium.WebDriver`, `Selenium.WebDriver.ChromeDriver`\r\n3. Add this code to instantiate the driver: `_ = new ChromeDriver(\".\");`\r\n4. Go to command line\r\n5. Run `dotnet pack`\r\n6. Unzip the packed file and verify that `chromedriver.exe` is there\r\n7. Run `dotnet tool install --global --add-source ./nupkg SeleniumToolPoC`\r\n8. Run `SeleniumToolPoC`\r\n\r\n## Expected  behavior\r\n\r\nApp initiates the chrome driver and then completes successfully\r\n\r\n## Actual behavior\r\n\r\n> Unhandled Exception: OpenQA.Selenium.DriverServiceNotFoundException: The file .\\chromedriver.exe does not exist. The driver can be downloaded at http://chromedriver.storage.googleapis.com/index.html\r\n\r\n \r\n`chromedriver.exe` is in `%USERPROFILE%\\.dotnet\\tools\\.store\\seleniumtoolpoc\\1.0.0\\seleniumtoolpoc\\1.0.0\\tools\\netcoreapp2.1\\any`, but not in `%USERPROFILE%\\.dotnet\\tools`\r\n\r\nI'm guessing this is my fault and not a bug, but I can't figure out how to accomplish it.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007517 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007597 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview2-008533 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.601 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.108 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-rc1-014190 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-rc1.19457.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26406-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-rc1-19456-20 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-rc1-19456-20 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\nOP: https://stackoverflow.com/questions/58227979/how-to-embed-a-selenium-exe-into-a-nuget-package\r\n\r\nSample project: \r\n[SeleniumToolPoC.zip](https://github.com/dotnet/cli/files/3719482/SeleniumToolPoC.zip)\r\n\r\n@wli3 ","Url":"https://github.com/dotnet/cli/issues/12877","RelatedDescription":"Closed issue \"Run selenium in a global tool\" (#12877)"},{"Id":"506009206","IsPullRequest":true,"CreatedAt":"2019-10-11T19:30:27","Actor":"dotnet-maestro[bot]","Number":"12876","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191011.3\r\n- **Date Produced**: 10/11/2019 5:55 PM\r\n- **Commit**: 406ed933a6cca478ec06ae0af23ab4fae6057085\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19511.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19511.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19511.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19511.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19511.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12876","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12876)"},{"Id":"505945823","IsPullRequest":true,"CreatedAt":"2019-10-11T16:55:39","Actor":"dotnet-maestro[bot]","Number":"12875","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191011.1\r\n- **Date Produced**: 10/11/2019 3:15 PM\r\n- **Commit**: 71379b3b002cbab7f70b1a28cf8ef625b09cec95\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19511.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19511.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19511.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19511.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19511.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12875","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12875)"},{"Id":"505812106","IsPullRequest":true,"CreatedAt":"2019-10-11T12:04:00","Actor":"dotnet-bot","Number":"12874","RawContent":null,"Title":"Merge release/2.1.8xx to release/2.2.4xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.8xx into release/2.2.4xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.8xx-to-release/2.2.4xx\ngit reset --hard upstream/release/2.2.4xx\ngit merge upstream/release/2.1.8xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.8xx-to-release/2.2.4xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12874","RelatedDescription":"Open PR \"Merge release/2.1.8xx to release/2.2.4xx\" (#12874)"},{"Id":"505719703","IsPullRequest":false,"CreatedAt":"2019-10-11T08:44:05","Actor":"TimonDDD","Number":"12872","RawContent":null,"Title":"\"dotnet publish\" doesn't add file version, product name in properties of executable","State":"open","Body":"## Steps to reproduce\r\nCreate F# console app, target netcoreapp3.0\r\nspecify Version, FileVersion, AssemblyVersion, etc in the .fsproj file\r\nrun `dotnet publish -f netcoreapp3.0 -r win10-x64 -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true --self-contained`\r\nto make executable\r\n## Expected  behavior\r\nexecutable should have file version, product name, etc in properties\r\n## Actual behavior\r\nexecutable doesn't have file version, product name, etc in properties\r\n##\r\n`dotnet --list-sdks` output\r\n```\r\n2.2.401 [C:\\Program Files (x86)\\dotnet\\sdk]\r\n3.0.100 [C:\\Program Files (x86)\\dotnet\\sdk]\r\n```\r\n\r\nAn example of .fsproj file\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <AssemblyVersion>1.0.0.99</AssemblyVersion>\r\n    <FileVersion>1.0.0.99</FileVersion>\r\n    <Version>1.0.0.99</Version>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"Program.fs\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nThe same command against C# console app produces executable with file version.\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12872","RelatedDescription":"Open issue \"\"dotnet publish\" doesn't add file version, product name in properties of executable\" (#12872)"},{"Id":"505628357","IsPullRequest":true,"CreatedAt":"2019-10-11T04:20:12","Actor":"dotnet-maestro[bot]","Number":"12871","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191011.6\r\n- **Date Produced**: 10/11/2019 9:07 PM\r\n- **Commit**: f15311bdc5e9fbf4026a3099c32c5ea6b50d6236\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19511.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview2.19511.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview2.19511.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview2.19511.6\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview2.19511.6\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview2.19511.4 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12871","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12871)"},{"Id":"505568929","IsPullRequest":true,"CreatedAt":"2019-10-11T03:48:59","Actor":"dotnet-bot","Number":"12866","RawContent":null,"Title":"Merge release/2.1.8xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.8xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.8xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.8xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.8xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12866","RelatedDescription":"Closed or merged PR \"Merge release/2.1.8xx to release/2.2.2xx\" (#12866)"},{"Id":"505569074","IsPullRequest":true,"CreatedAt":"2019-10-11T00:04:33","Actor":"dotnet-bot","Number":"12869","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12869","RelatedDescription":"Open PR \"Merge release/3.1.1xx to master\" (#12869)"},{"Id":"505569044","IsPullRequest":true,"CreatedAt":"2019-10-11T00:04:26","Actor":"dotnet-bot","Number":"12868","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12868","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#12868)"},{"Id":"505569015","IsPullRequest":true,"CreatedAt":"2019-10-11T00:04:19","Actor":"dotnet-bot","Number":"12867","RawContent":null,"Title":"Merge release/2.2.4xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.4xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.4xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.4xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.4xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12867","RelatedDescription":"Open PR \"Merge release/2.2.4xx to release/3.0.1xx\" (#12867)"},{"Id":"505529212","IsPullRequest":true,"CreatedAt":"2019-10-10T22:30:52","Actor":"mmitche","Number":"12864","RawContent":null,"Title":"[release/2.2.4xx] Merge from release/2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12864","RelatedDescription":"Closed or merged PR \"[release/2.2.4xx] Merge from release/2.2.2xx\" (#12864)"},{"Id":"505512064","IsPullRequest":true,"CreatedAt":"2019-10-10T22:30:23","Actor":"mmitche","Number":"12863","RawContent":null,"Title":"[release/2.1.8xx] Merge from 2.1.6xx","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/12863","RelatedDescription":"Closed or merged PR \"[release/2.1.8xx] Merge from 2.1.6xx\" (#12863)"},{"Id":"505493503","IsPullRequest":true,"CreatedAt":"2019-10-10T21:47:30","Actor":"nguerrera","Number":"12862","RawContent":null,"Title":"Merge 2.2.1xx to 2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12862","RelatedDescription":"Closed or merged PR \"Merge 2.2.1xx to 2.2.2xx\" (#12862)"},{"Id":"505398217","IsPullRequest":true,"CreatedAt":"2019-10-10T17:45:30","Actor":"dotnet-maestro[bot]","Number":"12861","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191010.2\r\n- **Date Produced**: 10/10/2019 3:56 PM\r\n- **Commit**: 54dcbe32cfe5db393e1e6cc6a52593e98e96e94a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19510.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19510.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19510.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19510.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19510.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12861","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12861)"},{"Id":"505334552","IsPullRequest":true,"CreatedAt":"2019-10-10T15:13:36","Actor":"mmitche","Number":"12859","RawContent":null,"Title":"Switch to correct SHA2 cert (#12855)","State":"closed","Body":"SHA1 certs were deprecated and removed from ESRP. Move to the correct cert for external assemblies\r\n\r\nPort from 2.2.1xx\r\n","Url":"https://github.com/dotnet/cli/pull/12859","RelatedDescription":"Closed or merged PR \"Switch to correct SHA2 cert (#12855)\" (#12859)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"506615487","IsPullRequest":true,"CreatedAt":"2019-10-14T12:25:04","Actor":"dotnet-maestro[bot]","Number":"1609","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191013.1\r\n- **Date Produced**: 10/13/2019 1:26 PM\r\n- **Commit**: 437d9bc76489ff18bd9ce04f287e07591f6bc38c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19513.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19513.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19513.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1609","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1609)"},{"Id":"506317458","IsPullRequest":true,"CreatedAt":"2019-10-13T12:25:39","Actor":"dotnet-maestro[bot]","Number":"1608","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191012.1\r\n- **Date Produced**: 10/12/2019 1:32 PM\r\n- **Commit**: 8d21b79b924d29088dbde46d42737a657d466b5e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19512.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19512.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19512.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1608","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1608)"},{"Id":"506180021","IsPullRequest":true,"CreatedAt":"2019-10-12T12:30:20","Actor":"dotnet-maestro[bot]","Number":"1607","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191011.6\r\n- **Date Produced**: 10/12/2019 12:05 AM\r\n- **Commit**: 57ae5430e0e6cbf16b5c7b7def4fc95015b2b722\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19511.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19511.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19511.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1607","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1607)"},{"Id":"506178147","IsPullRequest":true,"CreatedAt":"2019-10-12T12:16:34","Actor":"dotnet-maestro[bot]","Number":"1606","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191011.1\r\n- **Date Produced**: 10/11/2019 12:51 PM\r\n- **Commit**: 64a027b8d8b3a8e8e214bb00da02148335e3bd92\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19511.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1606","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1606)"},{"Id":"505819610","IsPullRequest":true,"CreatedAt":"2019-10-11T12:31:35","Actor":"dotnet-maestro[bot]","Number":"1605","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191010.15\r\n- **Date Produced**: 10/11/2019 6:45 AM\r\n- **Commit**: 901c370c2379ad0885bcc5a1921c4164104586aa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19510.15\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19510.15\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19510.15\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1605","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1605)"},{"Id":"505811013","IsPullRequest":true,"CreatedAt":"2019-10-11T12:11:39","Actor":"dotnet-maestro[bot]","Number":"1604","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191010.4\r\n- **Date Produced**: 10/10/2019 5:59 PM\r\n- **Commit**: 8cd48078f550fbcbd4f684b897b14db207397b52\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19510.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19510.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19510.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19510.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19510.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19510.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1604","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1604)"},{"Id":"505304835","IsPullRequest":false,"CreatedAt":"2019-10-10T14:21:00","Actor":"Sumeetkumawat","Number":"1603","RawContent":null,"Title":"Issue while Referencing iOS native library to .net standard library","State":"open","Body":"I have three projects in my solution. I have added .net standard library say 'A'. I have some code there. Then i added ios library 'B' and added project reference of 'A' here.\r\nNow I have another .net standard library 'C' and here I would like to add reference of 'A' & 'B' projects not dll's. Reference of 'A' is added successfully but while adding reference of 'B', I \r\nsee 'Incompatible Target Framework' message.\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1603","RelatedDescription":"Open issue \"Issue while Referencing iOS native library to .net standard library\" (#1603)"},{"Id":"505235113","IsPullRequest":true,"CreatedAt":"2019-10-10T12:33:39","Actor":"dotnet-maestro[bot]","Number":"1602","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191009.26\r\n- **Date Produced**: 10/10/2019 3:16 AM\r\n- **Commit**: 30280e07adc3c1f0776ef9531b47a769e2b45420\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19509.26\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19509.26\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19509.26\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1602","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1602)"},{"Id":"505224197","IsPullRequest":true,"CreatedAt":"2019-10-10T12:11:42","Actor":"dotnet-maestro[bot]","Number":"1601","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191009.5\r\n- **Date Produced**: 10/9/2019 10:22 PM\r\n- **Commit**: 1acb4c3ce4c6497388752adad31825ae7cdb7e2a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19509.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1601","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1601)"},{"Id":"505206761","IsPullRequest":false,"CreatedAt":"2019-10-10T11:24:37","Actor":"manijak","Number":"1600","RawContent":null,"Title":"The state of X509Certificate management with netstandard, xamarin, win & macOS","State":"open","Body":"First, my apologies if this is the wrong channel to post this. I've been digging and trying to understand for weeks where the issue/limitation is to our problem, figured this would be the most suitable place to ask. We are not sure if this is a limitation with the frameworks, or the platform, or due to our limited knowledge, or a combination of all. But things are very confusing right now, and we just need proper guidance on what direction to take.\r\n\r\nEDIT: Would appreciate if @bartonjs or @filipnavara could pitch in 👍 \r\n\r\n### **Background** 💡 \r\nWe are creating a small, cross-platform (win & macos), desktop application that will act as a websocket server running only on localhost (https). This application is a bridge between our web applications and the local machine hardware (e.g. printers). In order to provide a secure connection, `SslStream` requires a `X509Certificate2` class with a `PrivateKey`.\r\n\r\nThe idea is to let the app itself generate a self-signed certificate with private key and use that to start the secure websocket service. After the certificate has been generated for the first time, we store it in the local certificate store and reuse it when the app restarts. \r\n\r\n### **Project structure & frameworks** 📦 \r\nThis is how our solution is defined. `SharedProject` is a shared lib referenced by both `AppWin` & `AppMac`. The Win & Mac projects are startup-projects for their respective platform. \r\n```\r\nOurApp.sln\r\n  |---- SharedProject (netstandard2.1)\r\n        Creates & runs the websocket service, generates certificate (win), communicates with local hardware, ect\r\n\r\n  |---- AppWin (netcore3.0)\r\n        Startup project for Windows platform. Contains platform-specific code, if any.\r\n\r\n  |---- AppMac (Xamarin.Mac)\r\n        Startup project for macOS platform. Contains platform-specific code (generates certificate).\r\n```\r\n\r\n### **How it runs** 🏃 \r\nIn our `SharedProject` we have a class taking care of certificate generation and storing. The idea was that both the Win & Mac platforms could use this to manage the certificates. It uses the `X509Certificate2` & `CertificateRequest` provided by the framework. Plus the `X509Store` to save and retrieve the certificate.\r\n\r\n**Windows** ✔️ \r\nOn Windows there are no issues. With minimum amount of code we are able to generate a self-signed certificate with private-key, store it, and run the service with it. Also re-using the certificate when the app restarts by retrieving the certificate works very well. The `X509Store` returns the certificate with the _private key_, and we can easily use it with our `SslStream`. \r\n\r\n**macOS** ❌ \r\nThings are not so clear here... We could not use the above mentioned shared class to manage certificates (that works just fine on Windows):\r\n* First issue was that we got a `PlatformNotSupportedException` when the application was trying to use the `CertificateRequest`. \r\n* Second \"issue\" was that the `X509Store` did not store or retrieve certificates from the macOS keychain, but instead it uses some local mono certificate-store that the browsers do not see (at least in our tests). And it only stored the certificate (.cer) not the private-key that was included in the `X509Certificate2` object. Plus it seemed difficult to \"Trust\" the stored certificate.\r\n\r\nSo we created a separate class to take care of certificate management for macOS inside the `AppMac (Xamarin.Mac)` project. By using `BouncyCastle` we generated an identical self-signed certificate with private-key and used that to run our secure websocket service:\r\n\r\n* When launching our Secure Websocket service on macOS, the certificate used here is automatically added to the local macOS login keychain. For us this is great, since we could not use `X509Store` to add it there in the first place.\r\n* The only way we could retrieve the certificate from the keychain was to use the `SecKeyChain` class and query for it. Thankfully the `SecCertificate` object has a `ToX509Certificate2()` function. But that still left us without the `PrivateKey` that is needed by `SslStream`. \r\n* We also tried using `SecKeyChain.FindIdentity` to retrieve both, but even tho it is easy to convert `SecCertificate` to `X509Certificate2`, there seems to be no way to convert a `SecKey` to something useful like `RSA` or `RSACryptoServiceProvider` or something that can be embedded to the `X509Certificate2`\r\n\r\n### What to do? 😭 \r\nWe are pretty much stuck when it comes to the macOS platform. There seems to be no way for us to retrieve our own X509Certificate2 with the private-key embedded. Not sure if this is because we are using Xamarin.Mac & netstandard2.1, perhaps things are easier on netcore3? But still, Xamarin & mono have been around for a long time, there should be a way for us to do this today. Must be something we are missing here and would appreciate if someone could guide us. ","Url":"https://github.com/dotnet/standard/issues/1600","RelatedDescription":"Open issue \"The state of X509Certificate management with netstandard, xamarin, win & macOS\" (#1600)"},{"Id":"504399207","IsPullRequest":false,"CreatedAt":"2019-10-09T12:43:05","Actor":"2300070","Number":"1598","RawContent":null,"Title":"FiledInfo.SetValue Not Working For Static ReadOnly Fileds.","State":"closed","Body":"    private class TestReadOnly\r\n    {\r\n        public static readonly int Field;\r\n    }\r\n    [TestMethod]\r\n    public void TestReadOnlyField()\r\n    {\r\n        FieldInfo field = typeof(TestReadOnly).GetField(nameof(TestReadOnly.Field));\r\n\r\n        Console.WriteLine(field.GetValue(null));\r\n\r\n        field.SetValue(null, 0xFF);\r\n\r\n        Console.WriteLine(field.GetValue(null));\r\n\r\n        Console.WriteLine(TestReadOnly.Field);\r\n    }\r\n\r\nOutput:\r\n\r\n0\r\n255\r\n255\r\n0\r\n","Url":"https://github.com/dotnet/standard/issues/1598","RelatedDescription":"Closed issue \"FiledInfo.SetValue Not Working For Static ReadOnly Fileds.\" (#1598)"},{"Id":"504610278","IsPullRequest":true,"CreatedAt":"2019-10-09T12:21:49","Actor":"dotnet-maestro[bot]","Number":"1599","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191009.1\r\n- **Date Produced**: 10/9/2019 9:11 AM\r\n- **Commit**: a7ee8cdccce7d2607d58f9b93ce319209a238f7a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19509.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19509.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19509.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1599","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1599)"},{"Id":"504006427","IsPullRequest":true,"CreatedAt":"2019-10-08T12:28:23","Actor":"dotnet-maestro[bot]","Number":"1597","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191008.1\r\n- **Date Produced**: 10/8/2019 8:59 AM\r\n- **Commit**: c1092870c306b8da256e455cec0814486255d0c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19508.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19508.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19508.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1597","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1597)"},{"Id":"503415647","IsPullRequest":true,"CreatedAt":"2019-10-07T12:29:27","Actor":"dotnet-maestro[bot]","Number":"1596","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191006.4\r\n- **Date Produced**: 10/7/2019 1:07 AM\r\n- **Commit**: 38aa9151607cb63bb569beb42880057ba2cd3da0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19506.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1596","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1596)"},{"Id":"503407217","IsPullRequest":true,"CreatedAt":"2019-10-07T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1595","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 12:59 PM\r\n- **Commit**: 7acc732c615d2c2326cd347c8c1841a300a632cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19506.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1595","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1595)"},{"Id":"503093090","IsPullRequest":true,"CreatedAt":"2019-10-06T12:23:42","Actor":"dotnet-maestro[bot]","Number":"1594","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 3:54 AM\r\n- **Commit**: 6de42378223c6cb138d28f812c440092718c7a19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19505.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1594","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1594)"},{"Id":"503091277","IsPullRequest":true,"CreatedAt":"2019-10-06T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1593","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 12:53 PM\r\n- **Commit**: 13e1dbd86223eaa797655bf14070ea28ce6461e3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19505.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1593","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1593)"},{"Id":"502956371","IsPullRequest":true,"CreatedAt":"2019-10-05T12:29:24","Actor":"dotnet-maestro[bot]","Number":"1592","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191004.9\r\n- **Date Produced**: 10/5/2019 3:05 AM\r\n- **Commit**: 99ea2b5aebf7361a5baa638c978cb6214fca5217\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19504.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19504.9\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19504.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1592","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1592)"},{"Id":"502954708","IsPullRequest":true,"CreatedAt":"2019-10-05T12:06:58","Actor":"dotnet-maestro[bot]","Number":"1591","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191004.2\r\n- **Date Produced**: 10/5/2019 1:24 AM\r\n- **Commit**: 380eaaf663b425943754a15b29e814df0bb1b078\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19504.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1591","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1591)"},{"Id":"502952894","IsPullRequest":false,"CreatedAt":"2019-10-05T11:42:25","Actor":"axanth","Number":"1590","RawContent":null,"Title":"Any specific date about support of Universal Windows Platform in .net Standard 2.1?","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1590","RelatedDescription":"Open issue \"Any specific date about support of Universal Windows Platform in .net Standard 2.1?\" (#1590)"},{"Id":"502601357","IsPullRequest":true,"CreatedAt":"2019-10-04T12:26:51","Actor":"dotnet-maestro[bot]","Number":"1589","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191003.5\r\n- **Date Produced**: 10/4/2019 1:12 AM\r\n- **Commit**: eff9fbf446468ca411bf5e0475916f316eea7223\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19503.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19503.5\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19503.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1589","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1589)"},{"Id":"502231307","IsPullRequest":false,"CreatedAt":"2019-10-03T18:40:35","Actor":"lucbueno54","Number":"1588","RawContent":null,"Title":"When referring to a net462 project in NETStandard of ProjectReference, it is supplied with AssemblyName in nuget generation","State":"open","Body":"Create references to two net462 projects in NETStandard and enable automatic nuget generation (GeneratePackageOnBuild = true). \r\n\r\nAn important detail that is AssemblyName is different from the csproj file. \r\n\r\nExample: \r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>Nuget.NetStandardClassLibrary</id>\r\n    <version>19.9.0</version>\r\n    <authors>Nuget.NetStandardClassLibrary</authors>\r\n    <owners>Nuget.NetStandardClassLibrary</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Package Description</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard2.0\">\r\n        <dependency id=\"nuget.AnotherStandardClassLibrary\" version=\"198.0.0\" exclude=\"Build,Analyzers\" />    <= NETStandard\r\n        <dependency id=\"FrameworkClassLibrary\" version=\"1.0.0\" exclude=\"Build,Analyzers\" /> <= net462 \r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\n\r\n\r\nhttps://github.com/lucbueno54/dotnetStandardReferencesTest ","Url":"https://github.com/dotnet/standard/issues/1588","RelatedDescription":"Open issue \"When referring to a net462 project in NETStandard of ProjectReference, it is supplied with AssemblyName in nuget generation\" (#1588)"},{"Id":"502031073","IsPullRequest":true,"CreatedAt":"2019-10-03T12:29:49","Actor":"dotnet-maestro[bot]","Number":"1587","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191002.6\r\n- **Date Produced**: 10/3/2019 2:33 AM\r\n- **Commit**: c8c2917540a568869ba761afa6e4dba6edeb433b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19502.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19502.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19502.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1587","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1587)"},{"Id":"502022842","IsPullRequest":true,"CreatedAt":"2019-10-03T12:11:49","Actor":"dotnet-maestro[bot]","Number":"1586","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191002.11\r\n- **Date Produced**: 10/2/2019 11:34 PM\r\n- **Commit**: da75c6547c64a91eb8a9cecf8c503331c2cc394a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19502.11\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1586","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1586)"},{"Id":"501454733","IsPullRequest":true,"CreatedAt":"2019-10-02T12:30:46","Actor":"dotnet-maestro[bot]","Number":"1585","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191001.13\r\n- **Date Produced**: 10/2/2019 4:05 AM\r\n- **Commit**: dcc9f626eeb0751d4ba4499f623aac42d2e95c10\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19501.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1585","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1585)"},{"Id":"501445824","IsPullRequest":true,"CreatedAt":"2019-10-02T12:11:47","Actor":"dotnet-maestro[bot]","Number":"1584","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191001.4\r\n- **Date Produced**: 10/1/2019 10:24 PM\r\n- **Commit**: c21a409f11386d22c6083198176868d3974de832\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19501.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1584","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1584)"},{"Id":"500858343","IsPullRequest":true,"CreatedAt":"2019-10-01T12:30:06","Actor":"dotnet-maestro[bot]","Number":"1583","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190930.12\r\n- **Date Produced**: 10/1/2019 3:39 AM\r\n- **Commit**: 969ce665afee70b2d591e5c271525c927a8834d0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19480.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1583","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1583)"},{"Id":"500849552","IsPullRequest":true,"CreatedAt":"2019-10-01T12:11:41","Actor":"dotnet-maestro[bot]","Number":"1582","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190930.3\r\n- **Date Produced**: 9/30/2019 8:25 PM\r\n- **Commit**: 238f1bbb23ba67616818d0b242c5b55a18edec55\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19480.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1582","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1582)"},{"Id":"499857194","IsPullRequest":false,"CreatedAt":"2019-09-29T04:57:44","Actor":"B16180339","Number":"1581","RawContent":null,"Title":"Dotnet","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1581","RelatedDescription":"Closed issue \"Dotnet\" (#1581)"},{"Id":"499764886","IsPullRequest":true,"CreatedAt":"2019-09-28T12:28:37","Actor":"dotnet-maestro[bot]","Number":"1580","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190927.7\r\n- **Date Produced**: 9/28/2019 1:48 AM\r\n- **Commit**: 7e9a177824cbefaee8985a9b517ebb0ea2e17a81\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19477.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1580","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1580)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"507002663","IsPullRequest":true,"CreatedAt":"2019-10-15T04:47:11","Actor":"stephentoub","Number":"41776","RawContent":null,"Title":"Fix cast in CacheMemoryMonitor","State":"open","Body":"Avoid overflow.\r\ncc: @KKhurin ","Url":"https://github.com/dotnet/corefx/pull/41776","RelatedDescription":"Open PR \"Fix cast in CacheMemoryMonitor\" (#41776)"},{"Id":"506207426","IsPullRequest":true,"CreatedAt":"2019-10-15T04:02:03","Actor":"stephentoub","Number":"41749","RawContent":null,"Title":"Test ci","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/41749","RelatedDescription":"Closed or merged PR \"Test ci\" (#41749)"},{"Id":"506958131","IsPullRequest":false,"CreatedAt":"2019-10-15T01:58:11","Actor":"shidouli","Number":"41775","RawContent":null,"Title":"X509Extension.Format() doesn't work well in macOS system ","State":"open","Body":"MacOs:\r\nPS > $ext.Format($false)\r\n3042304006082B06010505073002863468747470733A2F2F73632D7072642D636F6D702D76633035342E656E672E766D776172652E636F6D2F6166642F766563732F6361\r\n\r\nWhile the same certificate in Ubuntu:\r\nPS > $ext.Format($false) CA Issuers - URI:https://sc-prd-comp-vc054.eng.vmware.com/afd/vecs/ca\r\n\r\nExpected behavior\r\nIn the MacOs, it should return the same result with the one in Ubuntu","Url":"https://github.com/dotnet/corefx/issues/41775","RelatedDescription":"Open issue \"X509Extension.Format() doesn't work well in macOS system \" (#41775)"},{"Id":"506926127","IsPullRequest":true,"CreatedAt":"2019-10-14T23:45:37","Actor":"carlossanlop","Number":"41774","RawContent":null,"Title":"Backup important wiki information","State":"open","Body":"Fixes: https://github.com/dotnet/corefx/issues/36057\r\n\r\nThe following documents had information good enough to get moved to corefx before the repo consolidation:\r\n\r\n- [Building .NET Core 2.X on FreeBSD](https://github.com/dotnet/corefx/wiki/Building-.NET-Core--2.x-on-FreeBSD) - The whole document. Might need some updates, but it has a disclaimer at the top.\r\n- [Building .NET Core 3.X on FreeBSD](https://github.com/dotnet/corefx/wiki/Building-.NET-Core-3.x-on-FreeBSD) - The whole document. Might also need some updates. We did not have this documented in corefx, even though we were mentioning in the unix-instructions.md title.\r\n- [Links](https://github.com/dotnet/corefx/wiki/Links) - Renamed it to conferences.md. Contains a list of historic MS Build Conferences and Announcements.\r\n- [Pick Issue](https://github.com/dotnet/corefx/wiki/Pick-issue) - Only rescued two labels mentioned here that we were not mentioning in the CoreFX documentation.\r\n- Also added the links to the FreeBSD instructions in unix-instructions.md.\r\n","Url":"https://github.com/dotnet/corefx/pull/41774","RelatedDescription":"Open PR \"Backup important wiki information\" (#41774)"},{"Id":"506880674","IsPullRequest":true,"CreatedAt":"2019-10-14T21:21:30","Actor":"stephentoub","Number":"41772","RawContent":null,"Title":"Rewrite Uri.EscapeString","State":"open","Body":"Several public methods (Uri.EscapeDataString, Uri.EscapeUriString) and a bunch of internal call sites rely on the internal EscapeString helper.  This helper has several issues with it:\r\n- It uses unsafe code.\r\n- It unnecessarily requires and copies through a char[] to get to a string when a string is the required result.\r\n- It has a lot of complexity around the handling of unicode.\r\n\r\nThis PR rewrites it to utilize Span, Rune, and other newer features in a way that enables it to be both safe and efficient.  Most inputs ends up being faster, and for very long inputs, it's much, much faster.  The use of ValueStringBuilder also results in less memory allocation, in some cases significantly.\r\n\r\nThe use of Rune also fixes two arguable bugs in the existing implementation around invalid Unicode sequences, which is why a couple tests were tweaked:\r\n- Some but not all invalid unicode patterns result in replacement characters being used: a few invalid sequences (e.g. just a high surrogate) result in an exception.  We should be standardized on using replacement characters for all such invalid sequences.\r\n- Some patterns with invalid unicode patterns actually result in unnecessary encoding, e.g. `Uri.EscapeDataString(\"\\uD800\\uD800a\")` results in `a` being encoded.\r\n\r\n|     Method | Tool | Length |                 Kind |                Mean | Ratio |    Allocated |\r\n|----------- |---------- |------- |--------------------- |--------------------:|------:|-------------:|\r\n| EscapeData | new       |     10 |           Unreserved |            19.92 ns |  0.23 |            - |\r\n| EscapeData | old       |     10 |           Unreserved |            84.86 ns |  1.00 |            - |\r\n|            |           |        |                      |                     |       |              |\r\n|  EscapeUri | new       |     10 |           Unreserved |            17.00 ns |  0.17 |            - |\r\n|  EscapeUri | old       |     10 |           Unreserved |           103.09 ns |  1.00 |            - |\r\n|            |           |        |                      |                     |       |              |\r\n| EscapeData | new       |     10 |              Unicode |           316.53 ns |  0.96 |        264 B |\r\n| EscapeData | old       |     10 |              Unicode |           330.18 ns |  1.00 |       1248 B |\r\n|            |           |        |                      |                     |       |              |\r\n|  EscapeUri | new       |     10 |              Unicode |           313.91 ns |  0.95 |        264 B |\r\n|  EscapeUri | old       |     10 |              Unicode |           328.76 ns |  1.00 |       1248 B |\r\n|            |           |        |                      |                     |       |              |\r\n| EscapeData | new       |     10 | OneRe(...)erved [25] |           154.93 ns |  1.04 |         48 B |\r\n| EscapeData | old       |     10 | OneRe(...)erved [25] |           149.36 ns |  1.00 |        312 B |\r\n|            |           |        |                      |                     |       |              |\r\n|  EscapeUri | new       |     10 | OneRe(...)erved [25] |           152.34 ns |  0.85 |         48 B |\r\n|  EscapeUri | old       |     10 | OneRe(...)erved [25] |           179.05 ns |  1.00 |        312 B |\r\n|            |           |        |                      |                     |       |              |\r\n| EscapeData | new       |     10 |          Alternating |           192.87 ns |  0.73 |        120 B |\r\n| EscapeData | old       |     10 |          Alternating |           262.74 ns |  1.00 |        392 B |\r\n|            |           |        |                      |                     |       |              |\r\n|  EscapeUri | new       |     10 |          Alternating |           189.67 ns |  0.65 |        120 B |\r\n|  EscapeUri | old       |     10 |          Alternating |           289.09 ns |  1.00 |        392 B |\r\n|            |           |        |                      |                     |       |              |\r\n| EscapeData | new       |    100 |           Unreserved |            83.99 ns |  0.13 |            - |\r\n| EscapeData | old       |    100 |           Unreserved |           660.66 ns |  1.00 |            - |\r\n|            |           |        |                      |                     |       |              |\r\n|  EscapeUri | new       |    100 |           Unreserved |            83.69 ns |  0.09 |            - |\r\n|  EscapeUri | old       |    100 |           Unreserved |           943.46 ns |  1.00 |            - |\r\n|            |           |        |                      |                     |       |              |\r\n| EscapeData | new       |    100 |              Unicode |         3,015.49 ns |  0.96 |       2424 B |\r\n| EscapeData | old       |    100 |              Unicode |         3,150.40 ns |  1.00 |      12144 B |\r\n|            |           |        |                      |                     |       |              |\r\n|  EscapeUri | new       |    100 |              Unicode |         3,004.75 ns |  0.90 |       2424 B |\r\n|  EscapeUri | old       |    100 |              Unicode |         3,334.80 ns |  1.00 |      12144 B |\r\n|            |           |        |                      |                     |       |              |\r\n| EscapeData | new       |    100 | OneRe(...)erved [25] |           997.48 ns |  0.96 |        232 B |\r\n| EscapeData | old       |    100 | OneRe(...)erved [25] |         1,034.85 ns |  1.00 |        496 B |\r\n|            |           |        |                      |                     |       |              |\r\n|  EscapeUri | new       |    100 | OneRe(...)erved [25] |         1,009.19 ns |  0.89 |        232 B |\r\n|  EscapeUri | old       |    100 | OneRe(...)erved [25] |         1,126.74 ns |  1.00 |        496 B |\r\n|            |           |        |                      |                     |       |              |\r\n| EscapeData | new       |    100 |          Alternating |         1,705.95 ns |  0.72 |       1080 B |\r\n| EscapeData | old       |    100 |          Alternating |         2,361.35 ns |  1.00 |       2536 B |\r\n|            |           |        |                      |                     |       |              |\r\n|  EscapeUri | new       |    100 |          Alternating |         1,690.50 ns |  0.63 |       1080 B |\r\n|  EscapeUri | old       |    100 |          Alternating |         2,691.28 ns |  1.00 |       2536 B |\r\n|            |           |        |                      |                     |       |              |\r\n| EscapeData | new       | 100000 |           Unreserved |        66,052.21 ns |  0.09 |            - |\r\n| EscapeData | old       | 100000 |           Unreserved |       710,216.92 ns |  1.00 |            - |\r\n|            |           |        |                      |                     |       |              |\r\n|  EscapeUri | new       | 100000 |           Unreserved |        66,393.07 ns |  0.08 |            - |\r\n|  EscapeUri | old       | 100000 |           Unreserved |       874,426.80 ns |  1.00 |          1 B |\r\n|            |           |        |                      |                     |       |              |\r\n| EscapeData | new       | 100000 |              Unicode |     4,295,295.08 ns | 0.003 |    6594352 B |\r\n| EscapeData | old       | 100000 |              Unicode | 1,490,528,971.72 ns | 1.000 | 6006095568 B |\r\n|            |           |        |                      |                     |       |              |\r\n|  EscapeUri | new       | 100000 |              Unicode |     4,214,907.36 ns | 0.003 |    6594359 B |\r\n|  EscapeUri | old       | 100000 |              Unicode | 1,517,378,125.77 ns | 1.000 | 6006096360 B |\r\n|            |           |        |                      |                     |       |              |\r\n| EscapeData | new       | 100000 | OneRe(...)erved [25] |       939,019.21 ns |  0.94 |     200033 B |\r\n| EscapeData | old       | 100000 | OneRe(...)erved [25] |       984,792.58 ns |  1.00 |     400328 B |\r\n|            |           |        |                      |                     |       |              |\r\n|  EscapeUri | new       | 100000 | OneRe(...)erved [25] |       966,883.99 ns |  0.89 |     200040 B |\r\n|  EscapeUri | old       | 100000 | OneRe(...)erved [25] |     1,082,288.94 ns |  1.00 |     400331 B |\r\n|            |           |        |                      |                     |       |              |\r\n| EscapeData | new       | 100000 |          Alternating |     1,751,153.61 ns |  0.01 |    1066679 B |\r\n| EscapeData | old       | 100000 |          Alternating |   146,994,750.75 ns |  1.00 |  615528622 B |\r\n|            |           |        |                      |                     |       |              |\r\n|  EscapeUri | new       | 100000 |          Alternating |     1,735,597.85 ns |  0.01 |    1066676 B |\r\n|  EscapeUri | old       | 100000 |          Alternating |   151,358,658.00 ns |  1.00 |  615528920 B |\r\n\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Diagnosers;\r\nusing BenchmarkDotNet.Running;\r\nusing System;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\n[MemoryDiagnoser]\r\npublic class Program\r\n{\r\n    static void Main(string[] args) => BenchmarkSwitcher.FromTypes(new[] { typeof(Program) }).Run(args);\r\n\r\n    [Params(10, 100, 100_000)]\r\n    public int Length { get; set; }\r\n\r\n    [Params(InputKind.Unreserved, InputKind.Unicode, InputKind.OneReservedThenUnreserved, InputKind.Alternating)]\r\n    public InputKind Kind { get; set; }\r\n\r\n    public enum InputKind\r\n    {\r\n        Unreserved, Unicode, OneReservedThenUnreserved, Alternating\r\n    }\r\n\r\n    [GlobalSetup]\r\n    public void Setup()\r\n    {\r\n        switch (Kind)\r\n        {\r\n            case InputKind.Unreserved: _input = new string('s', Length); break;\r\n            case InputKind.Unicode: _input = string.Concat(Enumerable.Repeat(\"\\xD83D\\xDE00\", Length)); break;\r\n            case InputKind.OneReservedThenUnreserved: _input = \"<\" + new string('s', Length - 1); break;\r\n            case InputKind.Alternating:\r\n                var sb = new StringBuilder(Length);\r\n                for (int i = 0; i < Length; i++)\r\n                {\r\n                    switch (i % 3)\r\n                    {\r\n                        case 0: sb.Append('s'); break;\r\n                        case 1: sb.Append('<'); break;\r\n                        default: sb.Append(\"\\xD83D\\xDE00\"); break;\r\n                    }\r\n                }\r\n                _input = sb.ToString();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private string _input;\r\n\r\n    [Benchmark] public string EscapeData() => Uri.EscapeDataString(_input);\r\n    [Benchmark] public string EscapeUri() => Uri.EscapeUriString(_input);\r\n}\r\n```\r\n\r\ncc: @davidsh, @GrabYourPitchforks, @alnikola \r\n\r\n@alnikola, I realize this conflicts with your PR.  Apologies.  But seeing your PR is what led me to want to do this.  I suggest we look at doing something similar to this PR for the \"Unescape\" paths as well.","Url":"https://github.com/dotnet/corefx/pull/41772","RelatedDescription":"Open PR \"Rewrite Uri.EscapeString\" (#41772)"},{"Id":"506847150","IsPullRequest":true,"CreatedAt":"2019-10-14T20:01:09","Actor":"steveharter","Number":"41771","RawContent":null,"Title":"Port perf changes and issues","State":"open","Body":"The \"No Merge\" label is there to ensure when this is merged,the individual commits are NOT squashed (one commit here per original commit in master).\r\n\r\nPeformance and three bug fixes:\r\nFixes #40449\r\nFixes #40704 \r\nFixes #41425 \r\n\r\nOn performance:\r\n•\tSerialization is ~1.2x to ~1.5x faster than 3.0\r\n•\tDeserialization is ~1.2x faster than 3.0\r\n\r\nPorts the following:\r\n\r\nIssue | Type | 5.0 PR | 5.0 Commit | Description | Customer Impact | Risk\r\n-- | -- | -- | -- | -- | -- | --\r\n40449 | Bug | 40501 | 5dbbdfa | Change a NullReferenceException to   JsonException when invalid JSON is encountered in certain cases. | Reported by the community. Invalid   JSON can result in a NullReferenceException which is not expected and likely   not in any Try\\Catch. | Low. The fix has been in master   for several weeks. Not likely to be “breaking” since changing from   NullReferenceException to another (valid) exception is not considered   breaking.\r\n40704 | Bug | 40787 | 7829d4a | Non-ASCII dictionary key names and   object property names are always escaped. | Reported by the community.   Non-ASCII locales have additional JSON payload size and in general this is   not expected. | Low. The fix has been in master   for several weeks. Appropriate tests added.\r\n  | Perf | 40889 | 27ddbe9 | Minor deserialization perf   improvements for collection by removing unnecessary allocations. | (perf) | Low. The fix has been in master   for several weeks.\r\n  | Perf | 40998 | d3c6628 | Major perf deserialzation perf   gains primarily due to changes to property name lookup. | (perf) | Low. The fix has been in master   for several weeks. Appropriate tests added.\r\n  | Perf | 41098 | 017a038 | Major serialization perf   improvements based on [AggressiveInlining] and enumerator changes. | (perf) | Low. The fix has been in master   for several weeks.\r\n  | Perf | 41238 | 527595f | Medium perf gains on deserialize   and serialize using a variety of changes. | (perf) | Low. The fix has been in master   for two weeks. Appropriate tests added.\r\n  | Perf | 41363 | 4cfc7ec | Minor perf gains with the   JsonCamelCaseNamingPolicy. This decreases warmup time but can help at runtime   when using the naming policy on Dictionaries. | (perf) | Low. The fix has been in master   for two weeks.\r\n  | Perf | 41414 | 8655ef9 | Minor perf gains on   deserialization; includes some clean-up and addresses late comments from   previous PR. | (perf) | Low. Appropriate tests added.\r\n41425 | Bug | 41653 | 4580a4d | A [JsonConverter] attribute when   applied to a collection property to specify a custom converter does not work   (does nothing). | Reported by the community. Having   a broken feature is confusing\\not expected when encountered. Note there is a   work-around to add the converter at run-time (instead of an attribute). | Low. The fix is contained in a   single method and new tests added.\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41771","RelatedDescription":"Open PR \"Port perf changes and issues\" (#41771)"},{"Id":"506837697","IsPullRequest":false,"CreatedAt":"2019-10-14T19:37:53","Actor":"BellBellRing","Number":"41770","RawContent":null,"Title":"HttpClient connection refused on Debian","State":"open","Body":"Hi,\r\n\r\nI'v copy pasted this code:\r\n\r\n```\r\nusing System; using System.Net.Http; using System.Threading.Tasks; class Program { static void Main() { Task t = new Task(DownloadPageAsync); t.Start(); Console.WriteLine(\"Downloading page...\"); Console.ReadLine(); } static async void DownloadPageAsync() {\r\n        // ... Target page.\r\n        string page = \"http://en.wikipedia.org/\";\r\n\r\n        // ... Use HttpClient.\r\n        using (HttpClient client = new HttpClient()) using (HttpResponseMessage response = await client.GetAsync(page)) using (HttpContent content = response.Content) {\r\n            // ... Read the string.\r\n            string result = await content.ReadAsStringAsync();\r\n\r\n            // ... Display the result.\r\n            if (result != null && result.Length >= 50) { Console.WriteLine(result.Substring(0, 50) + \"...\"); } } } }\r\n```\r\n\r\nfrom [here](https://www.dotnetperls.com/httpclient) and I'm getting error:\r\n\r\n```\r\nUnhandled exception. System.Net.Http.HttpRequestException: Connection refused\r\n ---> System.Net.Sockets.SocketException (111): Connection refused\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at test.httpclient.Program.DownloadPageAsync() in /home/donatas/scripts/dotnet/scraper/scraper/test.httpclient/Program.cs:line 21\r\n   at test.httpclient.Program.Main() in /home/donatas/scripts/dotnet/scraper/scraper/test.httpclient/Program.cs:line 11\r\n   at test.httpclient.Program.<Main>()\r\n```\r\n\r\n----------\r\n\r\nOperating System: Debian GNU/Linux 9 (stretch)\r\nKernel: Linux 4.9.0-11-amd64\r\nArchitecture: x86-64\r\n\r\ndotnet --version\r\n3.0.100","Url":"https://github.com/dotnet/corefx/issues/41770","RelatedDescription":"Open issue \"HttpClient connection refused on Debian\" (#41770)"},{"Id":"506832404","IsPullRequest":false,"CreatedAt":"2019-10-14T19:25:12","Actor":"terrajobst","Number":"41769","RawContent":null,"Title":"Announcement: .NET Core 3.0 concludes the .NET Framework API porting project","State":"open","Body":"We started in .NET Core 1.0 with a very minimal API set that only included \\~18K of the .NET Framework APIs. With [.NET Standard 2.0](https://devblogs.microsoft.com/dotnet/announcing-net-standard-2-0/), we tried to make it much more viable to share code between .NET Framework, .NET Core, and Xamarin which resulted in approximately 38K .NET Frameworks APIs being available in .NET Core 2.0. We also built the [Windows Compatibility Pack](https://devblogs.microsoft.com/dotnet/announcing-the-windows-compatibility-pack-for-net-core/) which made another 21K .NET Framework APIs available to .NET Core, resulting in almost 60K additional APIs. And in .NET Core 3.0 we added WPF and WinForms, which increased the number of .NET Framework APIs ported to .NET Core to over 120k, which is more than half of all .NET Framework APIs.\r\n\r\nIt’s also worth pointing out that we added about 62K APIs to .NET Core that don’t exist in .NET Framework. If we compare their total number of APIs, .NET Core has about 80% of the API surface of .NET Framework.\r\n\r\n<p align=\"center\">\r\n<img src=\"https://user-images.githubusercontent.com/5169960/66777114-f8db7c80-ee7c-11e9-9161-acfe1c491586.png\" width=\"600\" align=\"center\">\r\n</p>\r\n\r\nWe announced that the [future of .NET](https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/) will be based on .NET Core. And at Build 2019, [Scott Hunter stated](https://www.youtube.com/watch?v=ZlO1utbB2GQ&t=54m20s) that AppDomains, remoting, Web Forms, WCF server, and Windows Workflow won’t be ported to .NET Core.\r\n\r\nWith .NET Core 3.0, we’re at the point where we’ve ported all technologies that are required for modern workloads, be that desktop apps, mobile apps, console apps, web sites, or cloud services. That’s not to say that we don’t have any gaps or opportunities for new technologies, but we generally believe we won’t be finding them in the .NET Framework code base anymore. Moving forward, we’re focusing our resources on incorporating new technologies.\r\n\r\nSimultaneously, we’re looking into releasing more of the [.NET Framework code base under the MIT license](https://github.com/microsoft/referencesource) on GitHub to allow the community to create OSS projects for technologies we’re not intending to bring to .NET Core. For example, there already are community projects for [CoreWF](https://github.com/UiPath/corewf) and [CoreWCF](https://github.com/CoreWCF/CoreWCF).\r\n\r\nWe’d like to thank everyone who filed issues with requests for APIs being ported. Those issues allowed us to prioritize and close the gaps that prevented people from porting to .NET Core.\r\n\r\nBut since we generally no longer plan to bring existing technologies from .NET Framework to .NET Core we’ll be closing all issues that are [labeled with port-to-core](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Aport-to-core).","Url":"https://github.com/dotnet/corefx/issues/41769","RelatedDescription":"Open issue \"Announcement: .NET Core 3.0 concludes the .NET Framework API porting project\" (#41769)"},{"Id":"506827712","IsPullRequest":true,"CreatedAt":"2019-10-14T19:14:29","Actor":"wfurt","Number":"41768","RawContent":null,"Title":"use background thread to wait for address changes on OSX","State":"open","Body":"we should not block process exit. \r\n\r\nfixes #41740\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41768","RelatedDescription":"Open PR \"use background thread to wait for address changes on OSX\" (#41768)"},{"Id":"506760320","IsPullRequest":true,"CreatedAt":"2019-10-14T16:37:26","Actor":"AntonLandor","Number":"41767","RawContent":null,"Title":"System.IO.FileSystem.MoveFile(...) Delete Source File When Overwrite is True","State":"open","Body":"Solves #41009. System.IO.FileSystem.MoveFile(...) did not remove the source file after copying the file to a different file system.\r\n\r\nNo tests added since it requires two filesystems, but it was tested locally on my own machine and it worked. No tests cover this branch since before, and therefore I assume that a test is not necessary. If you have suggestions for how it can be tested, feel free to point it out.","Url":"https://github.com/dotnet/corefx/pull/41767","RelatedDescription":"Open PR \"System.IO.FileSystem.MoveFile(...) Delete Source File When Overwrite is True\" (#41767)"},{"Id":"506747597","IsPullRequest":true,"CreatedAt":"2019-10-14T16:09:53","Actor":"ViktorHofer","Number":"41766","RawContent":null,"Title":"[release/2.2] Add alpine 3.10 to testing matrix","State":"open","Body":"cc @leecow ","Url":"https://github.com/dotnet/corefx/pull/41766","RelatedDescription":"Open PR \"[release/2.2] Add alpine 3.10 to testing matrix\" (#41766)"},{"Id":"506746570","IsPullRequest":true,"CreatedAt":"2019-10-14T16:07:42","Actor":"ViktorHofer","Number":"41765","RawContent":null,"Title":"[release/2.1] Add alpine 3.10 to testing matrix","State":"open","Body":"cc @leecow ","Url":"https://github.com/dotnet/corefx/pull/41765","RelatedDescription":"Open PR \"[release/2.1] Add alpine 3.10 to testing matrix\" (#41765)"},{"Id":"506690207","IsPullRequest":true,"CreatedAt":"2019-10-14T14:29:43","Actor":"ManickaP","Number":"41764","RawContent":null,"Title":"Return all local IPs on Linux","State":"open","Body":"As per discussion in the #32611, for local host name return also `getifaddrs` IPs and not just `getaddrinfo` ones.\r\nThe current fix has been benchmarked against the master.\r\nThe fix:\r\n\r\nMethod | hostName | Mean | Error | StdDev | Median | Gen 0 | Gen 1 | Gen 2 | Allocated\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\nGetHostName | ? | 515.0 ns | 3.339 ns | 2.788 ns | 514.2 ns | 0.0105 | - | - | 48 B\r\nAdapters | ? | 426,529.4 ns | 1,572.995 ns | 1,471.381 ns | 426,984.1 ns | 41.5039 | - | - | 175856 B\r\ngetifaddrs | ? | 38,262.4 ns | 326.961 ns | 305.839 ns | 38,169.9 ns | 0.0610 | - | - | 384 B\r\nGetHostAddresses | ibm.com | 160,548,952.9 ns | 40,232,817.945 ns | 113,477,376.838 ns | 133,815,611.3 ns | - | - | - | 72 B\r\ngetaddrinfo | ibm.com | 121,347,416.4 ns | 30,647,103.141 ns | 87,932,283.906 ns | 94,461,035.3 ns | - | - | - | 168 B\r\nGetHostAddresses | manicka-pc | 49,736.0 ns | 475.718 ns | 444.986 ns | 49,494.6 ns | 0.0610 | - | - | 432 B\r\ngetaddrinfo | manicka-pc | 6,516.5 ns | 17.000 ns | 14.196 ns | 6,516.5 ns | 0.0381 | - | - | 168 B\r\nGetHostAddresses | microsoft.com | 7,264.0 ns | 32.249 ns | 30.166 ns | 7,261.7 ns | 0.0153 | - | - | 72 B\r\ngetaddrinfo | microsoft.com | 6,689.2 ns | 30.766 ns | 24.020 ns | 6,688.9 ns | 0.0381 | - | - | 168 B\r\n\r\nThe master:\r\n\r\nMethod | hostName | Mean | Error | StdDev | Median | Gen 0 | Gen 1 | Gen 2 | Allocated\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\nGetHostName | ? | 558.0 ns | 10.93 ns | 13.42 ns | 551.7 ns | 0.0114 | - | - | 48 B\r\nAdapters | ? | 471,709.3 ns | 9,209.42 ns | 14,063.76 ns | 467,884.4 ns | 41.5039 | - | - | 175688 B\r\ngetifaddrs | ? | 41,697.4 ns | 818.68 ns | 1,005.41 ns | 41,385.4 ns | 0.0610 | - | - | 384 B\r\nGetHostAddresses | ibm.com | 31,173,248.4 ns | 2,757,460.81 ns | 7,264,254.71 ns | 30,084,315.6 ns | - | - | - | 168 B\r\ngetaddrinfo | ibm.com | 34,948,165.7 ns | 3,831,926.31 ns | 10,294,221.19 ns | 31,398,652.5 ns | - | - | - | 168 B\r\nGetHostAddresses | manicka-pc | 7,567.3 ns | 147.82 ns | 145.18 ns | 7,572.7 ns | 0.0305 | - | - | 168 B\r\ngetaddrinfo | manicka-pc | 7,568.3 ns | 151.08 ns | 398.00 ns | 7,510.9 ns | 0.0381 | - | - | 168 B\r\nGetHostAddresses | microsoft.com | 7,310.1 ns | 137.50 ns | 147.12 ns | 7,284.0 ns | 0.0381 | - | - | 168 B\r\ngetaddrinfo | microsoft.com | 7,024.3 ns | 139.63 ns | 155.20 ns | 7,011.7 ns | 0.0381 | - | - | 168 B\r\n\r\nThe fixed version is ~49us which contains ~38us for getifaddrs and ~6us for getaddrinfo.\r\n\r\nFixes #32611","Url":"https://github.com/dotnet/corefx/pull/41764","RelatedDescription":"Open PR \"Return all local IPs on Linux\" (#41764)"},{"Id":"506641157","IsPullRequest":true,"CreatedAt":"2019-10-14T13:05:08","Actor":"tmds","Number":"41763","RawContent":null,"Title":"Socket.Select: increase ref count while the handle is in use","State":"open","Body":"CC @stephentoub ","Url":"https://github.com/dotnet/corefx/pull/41763","RelatedDescription":"Open PR \"Socket.Select: increase ref count while the handle is in use\" (#41763)"},{"Id":"506345848","IsPullRequest":false,"CreatedAt":"2019-10-14T12:59:07","Actor":"0Keith","Number":"41757","RawContent":null,"Title":"Invalid file path generated from valid file path string","State":"closed","Body":"```\r\nvar expected = \"C:\\\\PRN.json\";\r\nvar path = Path.GetFullPath(expected);\r\nAssert.AreEqual(expected, path);\r\n```\r\n```\r\nAssert.AreEqual failed.\r\nExpected:<C:\\PRN.json>.\r\nActual:<\\\\.\\PRN>.\r\n```","Url":"https://github.com/dotnet/corefx/issues/41757","RelatedDescription":"Closed issue \"Invalid file path generated from valid file path string\" (#41757)"},{"Id":"506618742","IsPullRequest":false,"CreatedAt":"2019-10-14T12:21:46","Actor":"adamsitnik","Number":"41762","RawContent":null,"Title":"Finish BitArray performance optimizations using AVX from #39173","State":"open","Body":"@BruceForstall has done some great job optimizing `BitArray` in  https://github.com/dotnet/corefx/pull/39173 . The PR was closed because Bruce has currently no time to finish it.\r\n\r\nA contributor who would like to work on this issue should:\r\n\r\n* pick Bruce's work from https://github.com/dotnet/corefx/pull/39173\r\n* finish the todo mentioned in this comment: https://github.com/dotnet/corefx/pull/39173#issuecomment-509328893\r\n* run [these](https://github.com/dotnet/performance/blob/master/src/benchmarks/micro/corefx/System.Collections/Perf.BitArray.cs) micro benchmarks from the performance repo and provide updated results (before & after)\r\n\r\nThe issue should be a great excercie for somebody who wants to learn more about vectorizing code using the new .NET Core 3.0 CPU [Intrinsics API](https://devblogs.microsoft.com/dotnet/hardware-intrinsics-in-net-core/)","Url":"https://github.com/dotnet/corefx/issues/41762","RelatedDescription":"Open issue \"Finish BitArray performance optimizations using AVX from #39173\" (#41762)"},{"Id":"506613809","IsPullRequest":true,"CreatedAt":"2019-10-14T12:11:26","Actor":"dotnet-maestro[bot]","Number":"41761","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191013.3\r\n- **Date Produced**: 10/14/2019 12:56 AM\r\n- **Commit**: b415b57a15b0c6ba77e63df901823bb46b8aafda\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19513.3\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19513.3\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19513.3\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41761","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/coreclr\" (#41761)"},{"Id":"506513231","IsPullRequest":true,"CreatedAt":"2019-10-14T08:32:02","Actor":"tmds","Number":"41760","RawContent":null,"Title":"Socket: consider handle exposed when user gets Socket.SafeHandle.","State":"open","Body":"CC @stephentoub ","Url":"https://github.com/dotnet/corefx/pull/41760","RelatedDescription":"Open PR \"Socket: consider handle exposed when user gets Socket.SafeHandle.\" (#41760)"},{"Id":"506369313","IsPullRequest":true,"CreatedAt":"2019-10-13T19:25:09","Actor":"ViktorHofer","Number":"41759","RawContent":null,"Title":"Remove UAP target","State":"open","Body":"cc @safern @danmosemsft","Url":"https://github.com/dotnet/corefx/pull/41759","RelatedDescription":"Open PR \"Remove UAP target\" (#41759)"},{"Id":"506349130","IsPullRequest":false,"CreatedAt":"2019-10-13T16:44:30","Actor":"robertmuehsig","Number":"41758","RawContent":null,"Title":"System.Text.Json ignores JsonPropertyName on BaseClass","State":"open","Body":"I'm not sure if this is a bug or by design, but while moving from JSON.NET to System.Text.Json I discovered the following behavior: \r\n\r\n\"JsonPropertyNames\" are ignored on base classes.\r\n\r\n```\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            RealClass test = new RealClass();\r\n\r\n            // output will be \"{\"Link\":\"Foo\"}\" \r\n            // and not {\"_LinkFromBaseClass\":\"Foo\"}\r\n\r\n            Console.WriteLine(JsonSerializer.Serialize(test));\r\n\r\n\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n\r\n    public abstract class SomeBaseClass\r\n    {\r\n        [JsonPropertyName(\"_LinkFromBaseClass\")]\r\n        public virtual string Link { get;  }\r\n    }\r\n\r\n    public class RealClass : SomeBaseClass\r\n    {\r\n        public RealClass()\r\n        {\r\n        }\r\n\r\n        public override string Link { get { return \"Foo\"; } }\r\n    }\r\n```\r\n\r\nIs this \"by design\"? Currently we just put the \"JsonPropertyName\" attribute on all implementations for the baseclass, but it's quite easy to miss.\r\nI also checked the JsonSerializerOptions, but didn't find anything useful, but maybe I miss something.","Url":"https://github.com/dotnet/corefx/issues/41758","RelatedDescription":"Open issue \"System.Text.Json ignores JsonPropertyName on BaseClass\" (#41758)"},{"Id":"506312221","IsPullRequest":false,"CreatedAt":"2019-10-13T11:29:55","Actor":"lobster2012-user","Number":"41756","RawContent":null,"Title":"BoundedChannel. Initial size of Deque ","State":"open","Body":"```BoundedChannel``` uses ```Deque<T>``` as a buffer.\r\n```Deque<T>``` represents an ring buffer that expands 2 times if necessary (and copies items).\r\nIt`s initial size is 0.\r\nI suggest adding a parameter - the initial size of the queue, to prevent unnecessary costs at startup.\r\n\r\n\r\n**Proposed API**\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Threading.Channels/src/System/Threading/Channels/ChannelOptions.cs\r\n\r\n```csharp\r\npublic abstract class BoundedChannelOptions\r\n{\r\n     public InitialBufferSize {get; set;} // check >=0\r\n     ....\r\n}\r\n```\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Threading.Channels/src/System/Collections/Generic/Deque.cs\r\n\r\n```csharp\r\n\r\ninternal sealed class Deque<T>\r\n{\r\n        public Deque(int initialBufferSize)\r\n        {\r\n              _array = initialBufferSize > 0 ?new T[initialBufferSize] : Array.Empty<T>();\r\n              //tail..\r\n             //head..\r\n        }\r\n}\r\n\r\n\r\n```\r\n\r\nRelated issues.\r\n```RingBuffer<T>``` https://github.com/dotnet/corefx/issues/40489\r\n```Deque<T>``` https://github.com/dotnet/corefx/issues/32790\r\n\r\n\r\n\r\n**P.S.**\r\nIn the implementation of the queue, you can replace the whole array with chunks, use the pool.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/41756","RelatedDescription":"Open issue \"BoundedChannel. Initial size of Deque \" (#41756)"},{"Id":"506307742","IsPullRequest":false,"CreatedAt":"2019-10-13T10:56:57","Actor":"Gnbrkm41","Number":"41755","RawContent":null,"Title":"Consider marking HandleProcessCorruptedStateExceptionsAttribute as obsolete/hidden","State":"open","Body":"[`System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute`](https://docs.microsoft.com/en-gb/dotnet/api/system.runtime.exceptionservices.handleprocesscorruptedstateexceptionsattribute) is an attribute used to enable handling of corrupted state exception (e.g. `AccessViolationException`) from the managed code, introduced in .NET Framework 4.0. This allows the consumers to deal with `AccessViolationException`s with the `try-catch`/`try-finally` clause and either swallow or log the exception instead of `FailFast`ing. However, I personally have not seen legitimate use of the attribute but to work around crashes caused by flaky libraries or unsafe codes, and swallowing exceptions in such case can introduce a security risk.\r\n\r\n[Furthermore, there was a decision to disable the handling mechanisms of corrupted state exceptions in .NET Core.](https://github.com/dotnet/coreclr/issues/9045#issuecomment-290159433)\r\n\r\n> Handling of corrupted state exceptions is set of low-level desktop features that tried to make it possible to write managed code for what would be best written in plain C. We have abandoned this direction and not included features from this set in .NET Core whenever we had opportunity to do so. Constrained Execution Regions (CERs) or stack overflow handling are other features in this set. None of them are in .NET Core, so we are differing in this area from desktop in general. Also, the different features in this set are tied together e.g. if you really want to write robust handler for corrupted exceptions, you would need CERs for that in desktop, so it does not make sense to pick and choose them in isolation. \r\n\r\nGiven that this attribute does not work anymore on .NET Core & it is inherently dangerous to use this attribute to handle such exceptions in the first place, I think the attribute should be obsoleted or hidden from the IDE to discourage the use of it. At the moment, it does not appear that this incompatibility is not so widely known (Searching on Bing/Google or looking at MS docs barely give any information about the state of the attribute on .NET Core). I believe that either of those options would effectively discourage the use of the type.","Url":"https://github.com/dotnet/corefx/issues/41755","RelatedDescription":"Open issue \"Consider marking HandleProcessCorruptedStateExceptionsAttribute as obsolete/hidden\" (#41755)"},{"Id":"506304210","IsPullRequest":true,"CreatedAt":"2019-10-13T10:29:38","Actor":"eugenesmlv","Number":"41754","RawContent":null,"Title":"Add tests to verify that JSON deserializer doesn't do any multiplication or addition on the string length","State":"open","Body":"Fixes #41687\r\n\r\nUnfortuntately, I'm unable to run these tests locally due to OutOfMemoryException.\r\n\r\ncc @steveharter @ahsonkhan","Url":"https://github.com/dotnet/corefx/pull/41754","RelatedDescription":"Open PR \"Add tests to verify that JSON deserializer doesn't do any multiplication or addition on the string length\" (#41754)"},{"Id":"506289765","IsPullRequest":true,"CreatedAt":"2019-10-13T08:07:21","Actor":"svick","Number":"41753","RawContent":null,"Title":"Cache polymorphic properties","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/41638.\r\n\r\nWhen a polymorphic property (i.e. one whose type is `object`) is serialized, its `JsonPropertyInfo` is created every time, based on the runtime type of the property. This is a problem, because it means accessing the property will JIT compile the `Get` delegate every time, which takes a lot of time.\r\n\r\nThis PR changes that, by caching the `JsonPropertyInfo` for each encountered runtime type. This should be an okay thing to do, since most polymorphic properties should only use a small number of types.\r\n\r\nOne case where this could cause an issue is if doing this prevents the type from unloading. But, as far as I can tell, that is already a problem with System.Text.Json, and one that can be solved by switching the instance of `JsonSerializerOptions` that's used.\r\n\r\nAfter [adding a benchmark for this case](https://github.com/svick/performance/commit/7ffcc2c) the results of comparing System.Text.Json.Serialization microbenchmarks show clear improvement (up to 68x) for the new benchmark and no real change for other benchmarks:\r\n\r\nsummary:\r\nbetter: 17, geomean: 5.809\r\nworse: 4, geomean: 1.041\r\ntotal diff: 21\r\n\r\n| Slower                                                                           | diff/base | Base Median (ns) | Diff Median (ns) | Modality|\r\n| -------------------------------------------------------------------------------- | ---------:| ----------------:| ----------------:| --------:|\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<Location>.SerializeToUtf8Bytes    |      1.05 |          1855.03 |          1944.15 |         |\r\n| System.Text.Json.Serialization.Tests.ReadJson\\<MyEventsListerViewModel>.Deseriali |      1.05 |       1310030.00 |       1370308.74 |         |\r\n| System.Text.Json.Serialization.Tests.ReadJson\\<Hashtable>.DeserializeFromString   |      1.04 |        163849.84 |        171039.26 |         |\r\n| System.Text.Json.Serialization.Tests.ReadJson\\<IndexViewModel>.DeserializeFromStr |      1.03 |        100573.41 |        103365.76 |         |\r\n\r\n| Faster                                                                           | base/diff | Base Median (ns) | Diff Median (ns) | Modality|\r\n| -------------------------------------------------------------------------------- | ---------:| ----------------:| ----------------:| --------:|\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<HashSet\\<String>>.SerializeObjectP |     68.80 |       2275620.83 |         33077.25 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<ArrayList>.SerializeObjectPropert |     52.81 |       2110367.71 |         39958.59 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<Dictionary\\<String, String>>.Seria |     45.75 |       2337101.79 |         51079.52 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<Hashtable>.SerializeObjectPropert |     30.13 |       2100212.50 |         69707.29 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<ImmutableSortedDictionary\\<String, |     24.85 |       2287553.75 |         92056.69 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<ImmutableDictionary\\<String, Strin |     20.94 |       2423108.75 |        115724.54 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<LoginViewModel>.SerializeObjectPr |     17.77 |         21066.59 |          1185.80 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<BinaryData>.SerializeObjectProper |     12.87 |         21884.38 |          1700.18 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<Location>.SerializeObjectProperty |      9.01 |         21679.90 |          2404.95 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<IndexViewModel>.SerializeObjectPr |      1.42 |         79311.34 |         56018.97 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<Location>.SerializeToStream       |      1.04 |          2222.72 |          2127.47 |         |\r\n| System.Text.Json.Serialization.Tests.ReadJson\\<ArrayList>.DeserializeFromStream   |      1.04 |        116964.02 |        112564.32 |         |\r\n| System.Text.Json.Serialization.Tests.ReadJson\\<ImmutableSortedDictionary\\<String,  |      1.04 |        374212.71 |        360219.74 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<HashSet\\<String>>.SerializeToStrea |      1.04 |         26759.54 |         25804.20 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<MyEventsListerViewModel>.Serializ |      1.04 |       1186575.00 |       1144969.42 |         |\r\n| System.Text.Json.Serialization.Tests.ReadJson\\<Location>.DeserializeFromStream    |      1.03 |          3750.12 |          3632.62 |         |\r\n| System.Text.Json.Serialization.Tests.WriteJson\\<MyEventsListerViewModel>.Serializ |      1.03 |       1191000.89 |       1159996.21 |         |","Url":"https://github.com/dotnet/corefx/pull/41753","RelatedDescription":"Open PR \"Cache polymorphic properties\" (#41753)"},{"Id":"506248251","IsPullRequest":false,"CreatedAt":"2019-10-12T23:11:09","Actor":"Reza1024","Number":"41751","RawContent":null,"Title":"LINQ IndexOf extension method","State":"open","Body":"I keep finding myself writing an `IndexOf` LINQ expression for `IEnumerable<T>` that is predicate based to find the index of the first item in a collection that satisfy a criteria\r\n\r\nCurrently, this could be achieved using ⏬ combo which is not ideal and not very readable at first glance:\r\n``` C#\r\nsource\r\n   .Select((item, index) => new { item, index })\r\n   .FirstOrDefault(x => predicate(x.item))?.index ?? -1;\r\n```\r\nLet's add new LINQ extensions for this purpose that work exactly like `First` except it returns the index.\r\n\r\nA reference implementation:\r\n\r\n``` C#\r\npublic static int IndexOf<T>(this IEnumerable<T> source, Func<T, bool> predicate)\r\n{\r\n   int i = 0;\r\n   foreach (var item in source)\r\n   {\r\n      if (predicate(item))\r\n         return i;\r\n      i++;\r\n   }\r\n   return -1;\r\n}\r\n\r\npublic static int IndexOf<T>(this IEnumerable<T> source, Func<T, bool> predicate, int start)\r\n{\r\n    var index = source.Skip(start).IndexOf(predicate);\r\n    return index == -1 ? -1 : index + start;\r\n}\r\n```\r\n\r\nRelated to https://github.com/dotnet/corefx/issues/39689 and https://github.com/dotnet/corefx/issues/25459\r\n","Url":"https://github.com/dotnet/corefx/issues/41751","RelatedDescription":"Open issue \"LINQ IndexOf extension method\" (#41751)"},{"Id":"506187854","IsPullRequest":false,"CreatedAt":"2019-10-12T19:39:22","Actor":"bashocz","Number":"41747","RawContent":null,"Title":"System.Text.Json.JsonSerializer exception for derived objects","State":"closed","Body":"I don't know if this is an issue or it is the behavior by design. However Newtonsoft.Json works well in described example below.\r\nNew JsonSerializer throws an exception (The JSON property name for '{propertyName}' collides with another property.) in both if deserializes json to object as well as serializes object to json.\r\nExample:\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var obj1 = System.Text.Json.JsonSerializer.Deserialize<Bar>(\"{ \\\"Value\\\": 1.23 }\"); // throws an exception\r\n\r\n            var obj2 = new Bar { Value = 1.23, };\r\n            var text = System.Text.Json.JsonSerializer.Serialize(obj2); // throws an exception as well\r\n        }\r\n    }\r\n\r\n    public class Foo\r\n    {\r\n        public int Value { get; set; }\r\n    }\r\n\r\n    public class Bar : Foo\r\n    {\r\n        public new double Value { get; set; }\r\n    }\r\n","Url":"https://github.com/dotnet/corefx/issues/41747","RelatedDescription":"Closed issue \"System.Text.Json.JsonSerializer exception for derived objects\" (#41747)"},{"Id":"506224639","IsPullRequest":true,"CreatedAt":"2019-10-12T18:59:30","Actor":"omajid","Number":"41750","RawContent":null,"Title":"Add runtime id for Arch Linux","State":"open","Body":"Like gentoo, Arch Linux is a rolling release and doesn't have explicit version numbers.\r\n\r\n```\r\n$ docker run -it archlinux/base cat /etc/os-release\r\nNAME=\"Arch Linux\"\r\nPRETTY_NAME=\"Arch Linux\"\r\nID=arch\r\nBUILD_ID=rolling\r\nANSI_COLOR=\"0;36\"\r\nHOME_URL=\"https://www.archlinux.org/\"\r\nDOCUMENTATION_URL=\"https://wiki.archlinux.org/\"\r\nSUPPORT_URL=\"https://bbs.archlinux.org/\"\r\nBUG_REPORT_URL=\"https://bugs.archlinux.org/\"\r\nLOGO=archlinux\r\n```\r\n\r\ncc @alucryd","Url":"https://github.com/dotnet/corefx/pull/41750","RelatedDescription":"Open PR \"Add runtime id for Arch Linux\" (#41750)"},{"Id":"506200285","IsPullRequest":false,"CreatedAt":"2019-10-12T15:23:24","Actor":"vintzl","Number":"41748","RawContent":null,"Title":"dotnet 3.1 Release date","State":"open","Body":"Some questions:\r\n\r\n1. When is due 3.1? I can read \"Scheduled for November 2019\" here:\r\n   - https://github.com/dotnet/core/blob/master/roadmap.md\r\n   - https://dotnet.microsoft.com/platform/support/policy/dotnet-core\r\n\r\n  But I can see here:\r\n   - https://github.com/aspnet/AspNetCore/milestone/64\r\n  \"_3.1.0-preview3 Due by December 03, 2019_\"\r\n\r\n 2. Will System.Text.Json support no default parameter-less constructors in 3.1?\r\n\r\n 3. Is there any 3.1 preview package now?","Url":"https://github.com/dotnet/corefx/issues/41748","RelatedDescription":"Open issue \"dotnet 3.1 Release date\" (#41748)"},{"Id":"506180645","IsPullRequest":true,"CreatedAt":"2019-10-12T12:26:23","Actor":"stephentoub","Number":"41746","RawContent":null,"Title":"Make WebRequest.GetSystemWebProxy() return a working proxy (#41692)","State":"open","Body":"Port #41692 to release/3.0\r\n\r\n## Description\r\n\r\nLibraries like the Azure AMQP lib are using WebRequest.DefaultWebProxy with ClientWebSocket as a way to set the default web proxy.  This works with .NET Framework because ClientWebSocket under the covers on netfx establishes its connection with WebRequest, but on .NET Core it uses different mechanisms.  In fact, with netstandard2.0 APIs, there is no way to specify that ClientWebSocket should use the default proxy.  This breaks such libraries in environments such as those in enterprises where proxies are common and configured implicitly for everyone on the network.\r\n\r\nIn .NET Core 3.0 we added HttpClient.DefaultProxy, which implements IWebProxy and serves as a full cross-platform implementation for the default proxy.  The change is to make WebRequest.DefaultWebProxy return it, rather than just returning a dummy singleton used only for its reference identity.\r\n\r\n## Customer Impact\r\n\r\nLibraries like the Azure AMQP library don't work in enterprise environments, or any environments where default proxies are needed.\r\n\r\n## Regression?\r\n\r\nYes, from .NET Framework.\r\n\r\n## Testing\r\n\r\nAll existing tests, plus a new test.\r\n\r\n## Risk\r\n\r\nOur automated testing around proxies isn't great; this change, however, isn't changing any logic to do with actual proxy resolution or discovery, just using the same class in more places.  This change also stops throwing a NotSupportedException on some platforms that was previously thrown, though it's unlikely someone took a real dependency on that.\r\n\r\ncc: @Petermarcu ","Url":"https://github.com/dotnet/corefx/pull/41746","RelatedDescription":"Open PR \"Make WebRequest.GetSystemWebProxy() return a working proxy (#41692)\" (#41746)"},{"Id":"506907924","IsPullRequest":false,"CreatedAt":"2019-10-08T13:46:07","Actor":"hivanov","Number":"41773","RawContent":null,"Title":"Support Generic Methods in Expression Trees","State":"open","Body":"Currently, S.L.Expressions.Expression and subclasses cannot infer the types of generic methods. This makes the generated lambdas unsuitable for dealing with code-generation not available at run-time. \r\n\r\nGiven the following:\r\n```c#\r\nstatic class Class1\r\n{\r\n  public static T MethodName<T>(T instance)\r\n  {\r\n    return instance;\r\n  }\r\n}\r\n```\r\nOne cannot create a lambda that invokes MethodName, without knowing the binding parameter first, like this:\r\n```c#\r\nvar method = typeof(Class1).GetMethod(nameof(Class1.MethodName), BindgingFlags.Public | BindingFlags.Static);\r\nvar parameter = Expression.Parameter(typeof(??));\r\nvar lambda = Expression.Lambda(Expression.Call(method, parameter), parameter), parameter);\r\n```\r\nTo do so, one must know the generic type first (in the double question marks). Unfortunately, this makes a whole class of code generation strategies very cumbersome, since, in order to compile (and invoke) the methods, one must do expression generation, compilation, etc., at every first unique binding at least:\r\n```c#\r\nExpression<Lambda<Func<T, T>> MakeLambda<T>()\r\n{\r\n  var compiledLambdas = new ConcurrentDictionary<Type, Delegate>();\r\n  var method = typeof(Class1).GetMethod(nameof(Class1.MethodName), BindgingFlags.Public | BindingFlags.Static);\r\n\r\n  var parameter = Expression.Parameter(typeof(T));\r\n  var lambda = Expression.Lambda(Expression.Call(method, parameter), parameter), parameter);\r\n}\r\n\r\nprivate readonly ConcurrentDictionary<Type, Func<object, object>> m_Lambdas;\r\n\r\nExpression<Func<object, object>> MakeGenericLambda(Type type)\r\n{\r\n  return m_Lambdas.TryGetValue(type,\r\n    key => \r\n    {\r\n      var parameter = Expression.Parameter(typeof(object));\r\n      return Expression.Lambda<Func<object, object>>(\r\n        Expression.Convert(\r\n          Expression.Invoke(\r\n            typeof(this)\r\n              .GetMethod(nameof(MakeLambda), BindingFlags.NonPublic | BindingFlags.Instance)\r\n              .MakeGenericMethod(type)\r\n              .Invoke(this, null),\r\n            parameter),\r\n          typeof(object)), parameter);\r\n   });\r\n}\r\n```\r\nIt gets worse if one considers more complex scenarios, with multiple generic type arguments.\r\n\r\nThe proposition:\r\n1. Add GenericTypeParameterExpression, created with Expression.GenericTypeParameter(string typeName);\r\n2. Change Expression.Parameter, Expression.Variable, to accept also a variant with GenericTypeParameterExpression as well;\r\n3. Change Expression.Lambda to support GenericTypeParameterExpression:\r\n```c#\r\nExpression.Lambda(body, GenericTypeParameter[] genericTypeArguments, params ParameterExpression parameters);\r\n```\r\n4. Add Expression.Lambda<TDelegate, T1, T2, ...> variants, with type binding.\r\nThis would be especially useful in combination with Expression.CompileToMethod (which would be a nice addition to .net core as well), and would greatly eliminate the need to write complex boxing/unboxing, cached lambdas, etc.","Url":"https://github.com/dotnet/corefx/issues/41773","RelatedDescription":"Open issue \"Support Generic Methods in Expression Trees\" (#41773)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"506949793","IsPullRequest":true,"CreatedAt":"2019-10-15T01:25:04","Actor":"dotnet-bot","Number":"39284","RawContent":null,"Title":"Merge master to features/static-lambdas","State":"open","Body":"\nThis is an automatically generated pull request from master into features/static-lambdas.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/static-lambdas\ngit reset --hard upstream/features/static-lambdas\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/static-lambdas --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39284","RelatedDescription":"Open PR \"Merge master to features/static-lambdas\" (#39284)"},{"Id":"506949763","IsPullRequest":true,"CreatedAt":"2019-10-15T01:24:56","Actor":"dotnet-bot","Number":"39283","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"open","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39283","RelatedDescription":"Open PR \"Merge master to features/local-function-attributes\" (#39283)"},{"Id":"506949729","IsPullRequest":true,"CreatedAt":"2019-10-15T01:24:47","Actor":"dotnet-bot","Number":"39282","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39282","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#39282)"},{"Id":"506948428","IsPullRequest":true,"CreatedAt":"2019-10-15T01:19:35","Actor":"CyrusNajmabadi","Number":"39281","RawContent":null,"Title":"Switch source writer entirely over to using interpolations.","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39281","RelatedDescription":"Open PR \"Switch source writer entirely over to using interpolations.\" (#39281)"},{"Id":"506223752","IsPullRequest":false,"CreatedAt":"2019-10-15T00:49:19","Actor":"jnm2","Number":"39255","RawContent":null,"Title":"Signature help sometimes fails to wrap, preventing the current parameter from being seen","State":"closed","Body":"**Version Used**: VS 16.3.4\r\n\r\nRepro:\r\n\r\n```cs\r\npublic static class C\r\n{\r\n    public static void M()\r\n    {\r\n        var longVariableNameForSpacing = Method([||]\r\n    }\r\n\r\n    public static object Method(\r\n        System.Collections.Generic.Dictionary<string, string> a,\r\n        System.Collections.Generic.Dictionary<string, string> b,\r\n        System.Collections.Generic.Dictionary<string, string> c,\r\n        System.Collections.Generic.Dictionary<string, string> d,\r\n        System.Collections.Generic.Dictionary<string, string> e)\r\n    {\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/8040367/66706586-8c3c7280-ed02-11e9-9962-00880c4d2de7.png)\r\n\r\nPixel density is at 125% for these monitors, resolution 2560x1440.","Url":"https://github.com/dotnet/roslyn/issues/39255","RelatedDescription":"Closed issue \"Signature help sometimes fails to wrap, preventing the current parameter from being seen\" (#39255)"},{"Id":"506940283","IsPullRequest":false,"CreatedAt":"2019-10-15T00:45:35","Actor":"gundermanc","Number":"39280","RawContent":null,"Title":"Roslyn C#/VB language server fails to start","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 16.3 and later\r\n\r\n**Steps to Reproduce**:\r\n\r\nThis is an intermittent repro that appears to be the result of the Roslyn language server returning a null connection when its ILanguageClient is called.\r\n\r\n1. Open a C# or VB solution\r\n2. Attempt to search for code in Ctrl+Q search box\r\n\r\n**Expected Behavior**:\r\nSymbols appear in the box.\r\n\r\n**Actual Behavior**:\r\nOccasionally, the language client fails to start due to a null connection being returned by Roslyn's language client.","Url":"https://github.com/dotnet/roslyn/issues/39280","RelatedDescription":"Open issue \"Roslyn C#/VB language server fails to start\" (#39280)"},{"Id":"506609106","IsPullRequest":true,"CreatedAt":"2019-10-15T00:35:07","Actor":"dotnet-bot","Number":"39266","RawContent":null,"Title":"Merge master to release/dev16.5-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.5-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.5-preview1\ngit reset --hard upstream/release/dev16.5-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.5-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39266","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.5-preview1\" (#39266)"},{"Id":"506609850","IsPullRequest":true,"CreatedAt":"2019-10-15T00:35:00","Actor":"dotnet-bot","Number":"39267","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39267","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#39267)"},{"Id":"506609906","IsPullRequest":true,"CreatedAt":"2019-10-15T00:34:54","Actor":"dotnet-bot","Number":"39268","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39268","RelatedDescription":"Closed or merged PR \"Merge master to features/local-function-attributes\" (#39268)"},{"Id":"506609961","IsPullRequest":true,"CreatedAt":"2019-10-15T00:34:46","Actor":"dotnet-bot","Number":"39269","RawContent":null,"Title":"Merge master to features/static-lambdas","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/static-lambdas.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/static-lambdas\ngit reset --hard upstream/features/static-lambdas\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/static-lambdas --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39269","RelatedDescription":"Closed or merged PR \"Merge master to features/static-lambdas\" (#39269)"},{"Id":"506930067","IsPullRequest":false,"CreatedAt":"2019-10-15T00:02:11","Actor":"tmat","Number":"39279","RawContent":null,"Title":"Publish packages to Azure DevOps public feeds instead of MyGet","State":"open","Body":"**[dotnet5](https://dev.azure.com/dnceng/public/_packaging?_a=feed&feed=dotnet5)** feed\r\n\r\n- Microsoft.CodeAnalysis.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.Common.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.Compilers.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.Scripting.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.Scripting.Common.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.Workspaces.Common.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.Workspaces.MSBuild.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.CSharp.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.CSharp.CodeStyle.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.CSharp.Features.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.CSharp.Scripting.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.CSharp.Workspaces.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.VisualBasic.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.VisualBasic.CodeStyle.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.VisualBasic.Features.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.VisualBasic.Workspaces.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.Build.Tasks.3.4.0-beta3-final.nupkg\r\n- Microsoft.Net.Compilers.3.4.0-beta3-final.nupkg\r\n- Microsoft.Net.Compilers.Toolset.3.4.0-beta3-final.nupkg\r\n- Microsoft.NETCore.Compilers.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.Debugging.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.PooledObjects.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.Features.3.4.0-beta3-final.nupkg\r\n\r\n[**vssdk**](https://dev.azure.com/azure-public/vside/_packaging?_a=feed&feed=vssdk) feed\r\n\r\n- Microsoft.CodeAnalysis.EditorFeatures.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.EditorFeatures.Common.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.EditorFeatures.Text.3.4.0-beta3-final.nupkg\r\n- Microsoft.VisualStudio.LanguageServices.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.CSharp.EditorFeatures.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.InteractiveHost.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.EditorFeatures.Wpf.3.4.0-beta3-final.nupkg\r\n\r\n[**vs-impl**](https://dev.azure.com/azure-public/vside/_packaging?_a=feed&feed=vs-impl) feed\r\n\r\n- Microsoft.VisualStudio.IntegrationTest.Utilities.3.4.0-beta3-19514-03.nupkg\r\n- Microsoft.CodeAnalysis.LanguageServer.Protocol.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.ExternalAccess.Apex.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.ExternalAccess.CodeLens.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.ExternalAccess.Debugger.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.ExternalAccess.FSharp.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.ExternalAccess.IntelliTrace.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.ExternalAccess.ProjectSystem.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.ExternalAccess.Razor.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.ExternalAccess.TypeScript.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.ExternalAccess.UnitTesting.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.ExternalAccess.Xamarin.Remote.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.Remote.Razor.ServiceHub.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.Remote.ServiceHub.3.4.0-beta3-final.nupkg\r\n- Microsoft.CodeAnalysis.Remote.Workspaces.3.4.0-beta3-final.nupkg\r\n- Microsoft.VisualStudio.LanguageServices.LiveShare.3.4.0-beta3-final.nupkg\r\n- Microsoft.VisualStudio.LanguageServices.Razor.RemoteClient.3.4.0-beta3-final.nupkg\r\n\r\nTODO:\r\n- Should Feetures/EditorFeatures be published to `dotnet-core` or `vssdk` feed?\r\n","Url":"https://github.com/dotnet/roslyn/issues/39279","RelatedDescription":"Open issue \"Publish packages to Azure DevOps public feeds instead of MyGet\" (#39279)"},{"Id":"506924110","IsPullRequest":false,"CreatedAt":"2019-10-14T23:38:15","Actor":"RikkiGibson","Number":"39278","RawContent":null,"Title":"Disable /warnAsError in non-Correctness runs","State":"open","Body":"I have had a few instances lately where my build is fine locally, but I get warnings in CI due to nullability changes in the base branch. This means I have to merge the base branch in, fix it locally, and push back up before getting any test results.\r\n\r\nIt feels like we might as well put warnAsError in the Correctness build *only* so this kind of thing does not prevent developers from getting test results.\r\n\r\n/cc @jaredpar @JoeRobich @dotnet/roslyn-infrastructure ","Url":"https://github.com/dotnet/roslyn/issues/39278","RelatedDescription":"Open issue \"Disable /warnAsError in non-Correctness runs\" (#39278)"},{"Id":"506923647","IsPullRequest":true,"CreatedAt":"2019-10-14T23:36:24","Actor":"RikkiGibson","Number":"39277","RawContent":null,"Title":"Test CI error messages","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39277","RelatedDescription":"Open PR \"Test CI error messages\" (#39277)"},{"Id":"506896875","IsPullRequest":false,"CreatedAt":"2019-10-14T22:04:31","Actor":"livarcocc","Number":"39276","RawContent":null,"Title":"error MSB6006: \"csc.dll\" exited with code 137","State":"open","Body":"@khteh commented on [Thu Oct 10 2019](https://github.com/dotnet/cli/issues/12870)\n\n## Steps to reproduce\r\n\r\n![Screenshot from 2019-10-11 10-54-24](https://user-images.githubusercontent.com/3871483/66621543-3e970b80-ec17-11e9-925d-7a2ac8db224f.png)\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n$ dn --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  19.04\r\n OS Platform: Linux\r\n RID:         ubuntu.19.04-x64\r\n Base Path:   /usr/share/dotnet-3.0.100/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/usr/share/dotnet-3.0.100/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\n\n","Url":"https://github.com/dotnet/roslyn/issues/39276","RelatedDescription":"Open issue \"error MSB6006: \"csc.dll\" exited with code 137\" (#39276)"},{"Id":"506896677","IsPullRequest":false,"CreatedAt":"2019-10-14T22:03:54","Actor":"RikkiGibson","Number":"39275","RawContent":null,"Title":"Fix multi-line error messages in Azure DevOps runs","State":"open","Body":"Example test failure message: https://dev.azure.com/dnceng/public/_build/results?buildId=381807&view=ms.vss-test-web.build-test-results-tab&runId=11806886&paneView=debug&resultId=122183\r\n\r\nIt appears as:\r\n`\\r\\nExpected:\\r\\n                Diagnostic(ErrorCode.ERR_AttributesInLocalFuncDecl, \\\"[EnumeratorCancellation]\\\").WithLocation(13, 70)\\r\\nActual:\\r\\n                // (13,70): error CS8652: The feature 'local function attributes' is currently in Preview and *unsupported*. To use Preview features, use the 'preview' language version.\\r\\n                //         async System.Collections.Generic.IAsyncEnumerable<int> local([EnumeratorCancellation] CancellationToken token)\\r\\n                Diagnostic(ErrorCode.ERR_FeatureInPreview, \\\"[EnumeratorCancellation]\\\").WithArguments(\\\"local function attributes\\\").WithLocation(13, 70)\\r\\nDiff:\\r\\n++>                 Diagnostic(ErrorCode.ERR_FeatureInPreview, \\\"[EnumeratorCancellation]\\\").WithArguments(\\\"local function attributes\\\").WithLocation(13, 70)\\r\\n-->                 Diagnostic(ErrorCode.ERR_AttributesInLocalFuncDecl, \\\"[EnumeratorCancellation]\\\").WithLocation(13, 70)\\r\\nExpected: True\\r\\nActual:   False\r\n`\r\n\r\nBut it's expected to render the line breaks like so:\r\n\r\n```\r\nExpected:\r\n                Diagnostic(ErrorCode.ERR_AttributesInLocalFuncDecl, \"[EnumeratorCancellation]\").WithLocation(13, 70)\r\nActual:\r\n                // (13,70): error CS8652: The feature 'local function attributes' is currently in Preview and *unsupported*. To use Preview features, use the 'preview' language version.\r\n                //         async System.Collections.Generic.IAsyncEnumerable<int> local([EnumeratorCancellation] CancellationToken token)\r\n                Diagnostic(ErrorCode.ERR_FeatureInPreview, \"[EnumeratorCancellation]\").WithArguments(\"local function attributes\").WithLocation(13, 70)\r\nDiff:\r\n++>                 Diagnostic(ErrorCode.ERR_FeatureInPreview, \"[EnumeratorCancellation]\").WithArguments(\"local function attributes\").WithLocation(13, 70)\r\n-->                 Diagnostic(ErrorCode.ERR_AttributesInLocalFuncDecl, \"[EnumeratorCancellation]\").WithLocation(13, 70)\r\nExpected: True\r\nActual:   False debugger eval code:1:9\r\n```\r\n\r\nLet's play with emitting some multiline error messages manually, try different line endings, maybe check that nothing is interfering/rewriting the error message such as a trace listener.","Url":"https://github.com/dotnet/roslyn/issues/39275","RelatedDescription":"Open issue \"Fix multi-line error messages in Azure DevOps runs\" (#39275)"},{"Id":"506825166","IsPullRequest":true,"CreatedAt":"2019-10-14T20:52:48","Actor":"dibarbet","Number":"39273","RawContent":null,"Title":"Disable optprof check for flow analysis assembly","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39273","RelatedDescription":"Closed or merged PR \"Disable optprof check for flow analysis assembly\" (#39273)"},{"Id":"506836076","IsPullRequest":true,"CreatedAt":"2019-10-14T19:33:53","Actor":"agocke","Number":"39274","RawContent":null,"Title":"Attempt to normalize Location paths before creating URIs","State":"open","Body":"The URI path parsing is not the same as Windows path parsing and\r\nsometimes produces incorrect results. However, a canonical Windows\r\npath should produce an equivalent URI. This change uses GetFullPath\r\nfor absolute paths passed to the ErrorLogger to normalize the path\r\nbefore passing it to URIs. For relative paths we try to normalize\r\nthe directory separators, but there's no equivalent transformation\r\nthat guarantees correctness.\r\n\r\nFixes #37737","Url":"https://github.com/dotnet/roslyn/pull/39274","RelatedDescription":"Open PR \"Attempt to normalize Location paths before creating URIs\" (#39274)"},{"Id":"506820922","IsPullRequest":true,"CreatedAt":"2019-10-14T18:57:58","Actor":"jaredpar","Number":"39272","RawContent":null,"Title":"Document compiler package usage","State":"open","Body":"Cleaning up the documentation on our compiler toolset packages to make\r\nthe supported use cases explicitly clear. Previously this information\r\nwas only avaliable in scattered issues throughout the repsitory\r\n([example](https://github.com/dotnet/roslyn/issues/38312)).\r\n\r\nThe package description is likely the best place for this information.","Url":"https://github.com/dotnet/roslyn/pull/39272","RelatedDescription":"Open PR \"Document compiler package usage\" (#39272)"},{"Id":"506814660","IsPullRequest":false,"CreatedAt":"2019-10-14T18:43:24","Actor":"ivanbasov","Number":"39271","RawContent":null,"Title":"EnC does not show diagnostic when editing files without method bodies","State":"open","Body":"After adding files without method bodies to PDBs (https://github.com/dotnet/roslyn/pull/39136), \r\n`BreakMode_RudeEdits_DocumentWithoutSequencePoints` fails with no diagnostics (rude edits) on editing a file without method bodies. It seems more work to be done with `CommitedSolution.cs`","Url":"https://github.com/dotnet/roslyn/issues/39271","RelatedDescription":"Open issue \"EnC does not show diagnostic when editing files without method bodies\" (#39271)"},{"Id":"506808151","IsPullRequest":false,"CreatedAt":"2019-10-14T18:28:11","Actor":"vsfeedback","Number":"39270","RawContent":null,"Title":"'Add parameter to method' Quick Action can add wrong parameter","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/772301/add-parameter-to-method-quick-action-can-add-wrong.html)._\n\n---\nThe 'Add parameter' Quick Action can add the wrong parameter in specific situations.\nFor instance, this will happen when an existing parameter accepts a base class of the passed argument type. \nIs this behaviour by design, or can this be fixed/improved?\n\nHere is some code sample to reproduce the problem:\n```\nclass BaseClass { }\n\nclass MyClass : BaseClass\n{\n    void TestFunc()\n    {\n        MyClass param1 = new MyClass();\n        int newparam = 1;\n\n// The 'Add parameter' Quick Action on the following method call adds the wrong parameter.\n        // It should add an 'int newparam' parameter.\n        // But instead it adds a 'MyClass param11' parameter.\n        MyFunc(param1, newparam);\n    }\n\nvoid MyFunc(BaseClass param1) { }\n}\n\n```\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 10/10/2019, 08:06 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39270","RelatedDescription":"Open issue \"'Add parameter to method' Quick Action can add wrong parameter\" (#39270)"},{"Id":"506601886","IsPullRequest":false,"CreatedAt":"2019-10-14T11:44:48","Actor":"huoyaoyuan","Number":"39265","RawContent":null,"Title":"Keyword recommender doesn't know about struct's readonly members","State":"open","Body":"**Version Used**: \r\nVS 16.3.4\r\n\r\n```csharp\r\nstruct S\r\n{\r\n    readonly $$\r\n}\r\n```\r\nNo `void` keyword here. A `readonly void` method could still modify global state using the value of instance state, so still meaningful.\r\n\r\n---\r\n\r\n```csharp\r\nstruct S\r\n{\r\n    public $$ int X() => 1;\r\n}\r\n```\r\n`readonly` presents here.\r\n\r\n---\r\n\r\n```csharp\r\nstruct S\r\n{\r\n    public int X\r\n    {\r\n        $$ get => 1;\r\n    }\r\n}\r\n```\r\nNo `readonly` here.\r\n\r\n---\r\n\r\n```csharp\r\nstruct S\r\n{\r\n    public int X\r\n    {\r\n        $$\r\n    }\r\n}\r\n```\r\nNo `readonly` here.\r\n\r\n---\r\n\r\n```csharp\r\nstruct S\r\n{\r\n    public int X\r\n    {\r\n        readonly $$\r\n    }\r\n}\r\n```\r\nRecommending types instead of accessor keywords.","Url":"https://github.com/dotnet/roslyn/issues/39265","RelatedDescription":"Open issue \"Keyword recommender doesn't know about struct's readonly members\" (#39265)"},{"Id":"506561800","IsPullRequest":false,"CreatedAt":"2019-10-14T10:13:41","Actor":"TessenR","Number":"39264","RawContent":null,"Title":"Roslyn doesn't understand pattern-matching null check for properties","State":"open","Body":"**Version Used**: \r\n\r\n```\r\nBranch master (23 Sep 2019)\r\nLatest commit 89b4f60 by Charles Stoner:\r\nAllow conversion of collection initializer Add extension method this arg (#38732)\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code:\r\n```cs\r\n#nullable enable\r\nclass C\r\n{\r\n    string? field;\r\n\r\n    void M1(C c)\r\n    {\r\n        if (c.field == null) return;\r\n        \r\n        c.field.ToString();\r\n    }\r\n    \r\n    void M2(C c)\r\n    {\r\n        if (c is { field: null }) return;\r\n        \r\n        c.field.ToString(); // incorrect CS8602\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nBoth methods report no warnings; If `c.field` is null method returns in both cases before using it.\r\n\r\n**Actual Behavior**:\r\n`M2` has an incorrect warning `CS8602: Dereference of a possibly null reference` reported for `c.field.ToString()`\r\n\r\n**Notes**\r\nIt's actually even worse since such null checks makes Roslyn think that `field` is checked for null but does not update it to non-null on the false branch. Consequently Roslyn reports the warning even if `field` is declared as **non-nullable** `string`\r\ni.e.\r\n```\r\n#nullable enable\r\nclass C\r\n{\r\n    string field;\r\n    \r\n    void M2(C c)\r\n    {\r\n        if (c is { field: null }) return;\r\n        \r\n        c.field.ToString(); // incorrect CS8602\r\n    }\r\n}\r\n```\r\n\r\nNote that current behavior is quite annoyting since it does not allow me to hande nulls hvia separate patterns in switches e.g.:\r\n```cs\r\n#nullable enable\r\nclass C\r\n{\r\n    string? field;\r\n    \r\n    void M2(C c)\r\n    {\r\n        switch (c)\r\n        {\r\n            case { field: null }: break;\r\n            case var copy:\r\n            {\r\n              copy.field.ToString(); // CS8602\r\n              c.field.ToString(); // CS8602\r\n              break;\r\n            }\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/39264","RelatedDescription":"Open issue \"Roslyn doesn't understand pattern-matching null check for properties\" (#39264)"},{"Id":"506485575","IsPullRequest":false,"CreatedAt":"2019-10-14T07:20:22","Actor":"NextTurn","Number":"39263","RawContent":null,"Title":"C# virtual keyword recommender does not support private protected members","State":"open","Body":"**Version Used**: Visual Studio 2019 Version 16.4\r\n\r\nhttps://github.com/dotnet/roslyn/blob/7bc44488c661fd6bbb6c53f39512a6fe0cc5ef84/src/Features/CSharp/Portable/Completion/KeywordRecommenders/VirtualKeywordRecommender.cs#L12-L20","Url":"https://github.com/dotnet/roslyn/issues/39263","RelatedDescription":"Open issue \"C# virtual keyword recommender does not support private protected members\" (#39263)"},{"Id":"506457571","IsPullRequest":false,"CreatedAt":"2019-10-14T05:44:05","Actor":"vsfeedback","Number":"39262","RawContent":null,"Title":"VB.NET code window doesn't scroll to the handler when selecting a control from the drop-down","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/21762/vbnet-code-window-doesnt-scroll-to-the-handler-whe.html)._\n\n---\nIn VS2013, in the VB.NET code window, selecting a control from the controls list drop-down would cause the code window to auto-scroll to the handler for that control, if that control only had one handler.\n\nThis behaviour is no longer present in VS2017 RC - you have to select the event from the events drop-down to make the code window scroll.\n\nI've illustrated the problem in the following video:\n\nhttps://youtu.be/PhGAI_jw9PY\n\nI've also attached a test case.\n\nAs I explain in the video, when a control has multiple handlers, fair enough - it wouldn't know which section of the code to jump to.  But for buttons there's usually only one, and for other controls too - combo boxes for instance often only have a SelectedIndexChanged event.\n\nIt would be great to put the auto-scroll behaviour from VS2013 back in - it's a small thing but makes a significant difference over time.\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/9/2019, 03:17 AM: \n\nAfter 90 days of no priority changing activity, we’ve closed this report. We prioritize based on severity, similar reports, and the overall impact on users and scenarios. We've also learned that reports without fresh activity could indicate that the problem isn't a problem anymore. One of our goals is to give you more transparency around these decisions as resolving every problem that gets reported isn't always possible. Closing low priority tickets helps us manage our workload and focus on problems that impact most users. If you still face this issue in our latest version, please report it as a new problem.\n\n#### Paul Haffner on 10/9/2019, 03:44 PM: \n\n<p>How are we meant to vote on this issue if it has been closed? This is a serious question, because the issue I raised, which is admittedly a duplicate of this one, has just been answered with the seemingly ridiculous request that I could come to this issue and vote for it.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39262","RelatedDescription":"Open issue \"VB.NET code window doesn't scroll to the handler when selecting a control from the drop-down\" (#39262)"},{"Id":"506306196","IsPullRequest":false,"CreatedAt":"2019-10-13T13:42:32","Actor":"huoyaoyuan","Number":"39259","RawContent":null,"Title":"Completion doesn't show non-static local method in static method","State":"closed","Body":"**Version Used**: \r\nVisual Studio 16.3.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(\"Hello World!\");\r\n        int X(int y) => y + 1;\r\n        static int XS(int y) => y + 1;\r\n        // caret here\r\n    }\r\n\r\n    void M()\r\n    {\r\n        int X(int y) => y + 1;\r\n        // caret here, for comparison\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nBoth `X` and `XS` should be available in the static method.\r\n**Actual Behavior**:\r\nOnly `X` is available.\r\n\r\nThere should be misusage of `IsStatic` on static local methods.","Url":"https://github.com/dotnet/roslyn/issues/39259","RelatedDescription":"Closed issue \"Completion doesn't show non-static local method in static method\" (#39259)"},{"Id":"506312629","IsPullRequest":true,"CreatedAt":"2019-10-13T11:34:03","Actor":"huoyaoyuan","Number":"39261","RawContent":null,"Title":"Fix dead class diagram","State":"open","Body":"Is there anyone actually mentioning it? It hasn't changed for 4 years.\r\nVisual editor in IDE always picks alphabetically first file for the partial classes.\r\nOr we should get the outdated diagram removed instead?","Url":"https://github.com/dotnet/roslyn/pull/39261","RelatedDescription":"Open PR \"Fix dead class diagram\" (#39261)"},{"Id":"506307827","IsPullRequest":false,"CreatedAt":"2019-10-13T10:57:35","Actor":"svick","Number":"39260","RawContent":null,"Title":"The \"Convert to conditional expression\" refactoring is sometimes mislabeled","State":"open","Body":"**Version Used**: VS 16.4.0 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\n\r\nHave code like the following:\r\n\r\n```c#\r\nif (AreSimilarCore(node1, node2))\r\n{\r\n    return true;\r\n}\r\n\r\nreturn false;\r\n```\r\n\r\nInvoke refactoring on the `if`.\r\n\r\n**Actual Behavior**:\r\n\r\nVS offers to simplify the code, with the suggestion being labeled as \"Convert to conditional expression\", even though the refactored code does not contain the conditional expression:\r\n\r\n![](https://user-images.githubusercontent.com/287848/66714599-bbadb680-edb8-11e9-80e5-3bec4d6d4164.png)\r\n\r\n**Expected Behavior**:\r\n\r\nThe refactoring is labeled accurately, e.g. with \"Simplify if statement\".","Url":"https://github.com/dotnet/roslyn/issues/39260","RelatedDescription":"Open issue \"The \"Convert to conditional expression\" refactoring is sometimes mislabeled\" (#39260)"},{"Id":"506255128","IsPullRequest":true,"CreatedAt":"2019-10-13T00:22:34","Actor":"ashmind","Number":"39258","RawContent":null,"Title":"Fix SourceText.GetChanges exception on merging certain changes","State":"open","Body":"See #22289 for full details on the bug.\r\n\r\n#### Summary\r\nAfter certain `WithChanges` calls, `SourceText.GetChanges` is no longer able to handle the `SourceText` state and throws `ArgumentOutOfRangeException` when called.\r\n\r\n#### Notes\r\n- Three of the new tests are failing without my change, other tests added just in case.\r\n- I didn't follow \"Hello World\" pattern in tests, sorry. I found it a bit hard to remember the offsets when using actual words.\r\n- Not fully confident in the change even though the tests pass. The flow is quite complicated and I feel the current coverage might be insufficient.","Url":"https://github.com/dotnet/roslyn/pull/39258","RelatedDescription":"Open PR \"Fix SourceText.GetChanges exception on merging certain changes\" (#39258)"},{"Id":"506250395","IsPullRequest":true,"CreatedAt":"2019-10-12T23:38:59","Actor":"castholm","Number":"39257","RawContent":null,"Title":"Include severity values when generating preferred modifier order EditorConfig options","State":"open","Body":"Currently, severity values for `*_preferred_modifier_order` options are not written when generating EditorConfig files. This PR fixes that.\r\n\r\nI also updated the `CodeStyleOption.NotificationOption` property to throw when it is assigned to null (it can't be made read-only since the setter is part of the shipped API). I'm not sure how much of a breaking change this is, so please let me know if you want me to revert these changes.","Url":"https://github.com/dotnet/roslyn/pull/39257","RelatedDescription":"Open PR \"Include severity values when generating preferred modifier order EditorConfig options\" (#39257)"},{"Id":"506235316","IsPullRequest":false,"CreatedAt":"2019-10-12T20:41:25","Actor":"jnm2","Number":"39256","RawContent":null,"Title":"'Implement interface' doesn't handle NRT annotations when constructing a generic interface","State":"open","Body":"**Version Used**: VS 16.3.4\r\n\r\nUsing 'Implement interface` on classes A, B, C, and D adds incorrect or redundant annotations:\r\n\r\n```cs\r\ninterface IFoo<T>\r\n{\r\n    [return: NotNull]\r\n    T Bar([DisallowNull] T bar);\r\n\r\n    [return: MaybeNull]\r\n    T Baz([AllowNull] T bar);\r\n}\r\n\r\nclass A : IFoo<int>\r\n{\r\n    [return: NotNull]\r\n    public int Bar([DisallowNull] int bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    [return: MaybeNull]\r\n    public int Baz([AllowNull] int bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n\r\nclass B : IFoo<int?>\r\n{\r\n    [return: NotNull]\r\n    public int? Bar([DisallowNull] int? bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    [return: MaybeNull]\r\n    public int? Baz([AllowNull] int? bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n\r\nclass C : IFoo<string>\r\n{\r\n    [return: NotNull]\r\n    public string Bar([DisallowNull] string bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    [return: MaybeNull]\r\n    public string Baz([AllowNull] string bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n\r\nclass D : IFoo<string?>\r\n{\r\n    [return: NotNull]\r\n    public string? Bar([DisallowNull] string? bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    [return: MaybeNull]\r\n    public string? Baz([AllowNull] string? bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n```\r\n\r\nExpected:\r\n\r\n```cs\r\nclass A : IFoo<int>\r\n{\r\n    public int Bar(int bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public int Baz(int bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n\r\nclass B : IFoo<int?>\r\n{\r\n    [return: NotNull]\r\n    public int? Bar([DisallowNull] int? bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public int? Baz(int? bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n\r\nclass C : IFoo<string>\r\n{\r\n    public string Bar(string bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    // Would be nice to replace attributes with `string?`, but this causes \"CS8613 Nullability\r\n    // of reference types in return type doesn't match implicitly implemented member.\"\r\n    // Point-in-time issue maybe?\r\n    [return: MaybeNull]\r\n    public string Baz([AllowNull] string bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n\r\nclass D : IFoo<string?>\r\n{\r\n    // Would be nice to replace attributes with `string`, but this causes \"CS8613 Nullability\r\n    // of reference types in return type doesn't match implicitly implemented member.\"\r\n    // Point-in-time issue maybe?\r\n    [return: NotNull]\r\n    public string? Bar([DisallowNull] string? bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public string? Baz(string? bar)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/39256","RelatedDescription":"Open issue \"'Implement interface' doesn't handle NRT annotations when constructing a generic interface\" (#39256)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"506685516","IsPullRequest":false,"CreatedAt":"2019-10-14T20:24:48","Actor":"imback82","Number":"7824","RawContent":null,"Title":"Debugger.Launch() on macOS","State":"closed","Body":"Is `Debugger.Launch()` supported on macOS? I tested on macOS 10.15 with .NET Core 3.0.100 and it doesn't appear to work.\r\n\r\nIf it is not supported, is there a plan to support?\r\n\r\nThanks!\r\n\r\ncc: @rapoth\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7824","RelatedDescription":"Closed issue \"Debugger.Launch() on macOS\" (#7824)"},{"Id":"506047436","IsPullRequest":true,"CreatedAt":"2019-10-12T15:06:11","Actor":"Dotnet-GitSync-Bot","Number":"7823","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7823","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7823)"},{"Id":"505621245","IsPullRequest":true,"CreatedAt":"2019-10-11T08:45:30","Actor":"Dotnet-GitSync-Bot","Number":"7822","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7822","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7822)"},{"Id":"504527034","IsPullRequest":true,"CreatedAt":"2019-10-09T12:42:07","Actor":"MichalStrehovsky","Number":"7821","RawContent":null,"Title":"Delete unused method","State":"closed","Body":"Supplements #7819.","Url":"https://github.com/dotnet/corert/pull/7821","RelatedDescription":"Closed or merged PR \"Delete unused method\" (#7821)"},{"Id":"504357120","IsPullRequest":true,"CreatedAt":"2019-10-09T09:28:10","Actor":"Dotnet-GitSync-Bot","Number":"7820","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7820","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7820)"},{"Id":"504158790","IsPullRequest":true,"CreatedAt":"2019-10-09T09:27:34","Actor":"am11","Number":"7818","RawContent":null,"Title":"Fix exit code of build-native.sh","State":"closed","Body":"I noticed it in the docker container, that the failed build was successfully committing the container (false positive).","Url":"https://github.com/dotnet/corert/pull/7818","RelatedDescription":"Closed or merged PR \"Fix exit code of build-native.sh\" (#7818)"},{"Id":"504330608","IsPullRequest":true,"CreatedAt":"2019-10-09T01:16:45","Actor":"Dotnet-GitSync-Bot","Number":"7819","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @CoffeeFlux","Url":"https://github.com/dotnet/corert/pull/7819","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7819)"},{"Id":"503784732","IsPullRequest":false,"CreatedAt":"2019-10-08T02:17:07","Actor":"ZacharyJia","Number":"7817","RawContent":null,"Title":"Call generated dll from cpp crash","State":"open","Body":"I use a dll generated by corert in a cpp program, but it crashed when any statement runs.\r\nI'm using the `.net core 3.0` and the ilcompiler version is `1.0.0-alpha-28207-01`\r\n\r\nThe call stack is:\r\n```\r\ngenet.net.exe!S_P_CoreLib_System_Threading_LockHolder__Hold()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner_Cctor__GetCctor()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__EnsureClassConstructorRun()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__CheckStaticClassConstructionReturnGCStaticBase()\r\ngenet.net.exe!S_P_CoreLib_System_Text_Encoding__get_UTF8()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__GetModuleName()genet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__FixupModuleCell()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvokeSlow()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvoke()\r\ngenet.net.exe!genet_net_genet_net_Program__LoadLibrary()\r\ngenet.net.exe!genet_net_genet_net_Program__show()\r\ndlldemo-cpp.exe!main()  line 17\tC++\r\n```\r\n\r\nThe crash message is:\r\n```\r\n0x00007FF9C9416408 (genet.net.exe)处(位于 dlldemo-cpp.exe 中)引发的异常: 0xC0000005: 读取位置 0x0000000000000000 时发生访问冲突。\r\n```","Url":"https://github.com/dotnet/corert/issues/7817","RelatedDescription":"Open issue \"Call generated dll from cpp crash\" (#7817)"},{"Id":"503304688","IsPullRequest":false,"CreatedAt":"2019-10-07T08:30:51","Actor":"yunekit","Number":"7816","RawContent":null,"Title":"sched_yield infinite loop","State":"open","Body":"The sched_yield()==0 infinite loop occurred during the running of the application, causing the process to block and fail to work.","Url":"https://github.com/dotnet/corert/issues/7816","RelatedDescription":"Open issue \"sched_yield infinite loop\" (#7816)"},{"Id":"503145779","IsPullRequest":true,"CreatedAt":"2019-10-06T21:09:25","Actor":"Dotnet-GitSync-Bot","Number":"7815","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7815","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7815)"},{"Id":"503134823","IsPullRequest":true,"CreatedAt":"2019-10-06T19:30:50","Actor":"MichalStrehovsky","Number":"7814","RawContent":null,"Title":"Add support for multithreaded compilation to ILC","State":"closed","Body":"Improves native compilation throughput by about 33%.\r\n\r\nValidated that the output with multithreading enabled (the new default) is byte-by-byte identical with the output produced by `--singlethreaded` (new command line option to ILC that disables multithreading).\r\n\r\nWe still can do a lot more in terms of compilation throughput (virtual method resolution is really slow and runs in one of the single threaded phases, and the object writing phase is pretty slow too and is fully single threaded too).\r\n\r\nContributes to #3925 (what's left is the extra-credit stuff).","Url":"https://github.com/dotnet/corert/pull/7814","RelatedDescription":"Closed or merged PR \"Add support for multithreaded compilation to ILC\" (#7814)"},{"Id":"502963591","IsPullRequest":true,"CreatedAt":"2019-10-06T04:53:29","Actor":"MichalStrehovsky","Number":"7811","RawContent":null,"Title":"Port fixes from CoreCLR","State":"closed","Body":"Skipping dotnet/coreclr#26792 and dotnet/coreclr#26793.","Url":"https://github.com/dotnet/corert/pull/7811","RelatedDescription":"Closed or merged PR \"Port fixes from CoreCLR\" (#7811)"},{"Id":"502974204","IsPullRequest":true,"CreatedAt":"2019-10-05T16:06:41","Actor":"MichalStrehovsky","Number":"7812","RawContent":null,"Title":"Remove global state tracking in DynamicInvokeTemplateDataNode","State":"closed","Body":"DynamicInvokeTemplateDataNode populated _methodToTemplateIndex in `GetIdForMethod` which is pretty bad from multithreading perspective (non-concurrent dictionary + ID that depends on ordering).\r\n\r\nI've moved this tracking into a separate node so that this is more explicit and properly sortable.","Url":"https://github.com/dotnet/corert/pull/7812","RelatedDescription":"Closed or merged PR \"Remove global state tracking in DynamicInvokeTemplateDataNode\" (#7812)"},{"Id":"502974267","IsPullRequest":true,"CreatedAt":"2019-10-05T16:04:50","Actor":"MichalStrehovsky","Number":"7813","RawContent":null,"Title":"Cache helpers used in IL scanner","State":"closed","Body":"We have a cache for these in CorInfoImpl (when compiling), but there's no cache in the scanner. This means we're re-resolving various named helpers in CoreLib. It's a bit of a waste of CPU time. Noticed this when running the compiler under a profiler.","Url":"https://github.com/dotnet/corert/pull/7813","RelatedDescription":"Closed or merged PR \"Cache helpers used in IL scanner\" (#7813)"},{"Id":"502935521","IsPullRequest":true,"CreatedAt":"2019-10-05T12:47:51","Actor":"MichalStrehovsky","Number":"7810","RawContent":null,"Title":"Update ObjWriter","State":"closed","Body":"Picks up #7802.","Url":"https://github.com/dotnet/corert/pull/7810","RelatedDescription":"Closed or merged PR \"Update ObjWriter\" (#7810)"},{"Id":"502780858","IsPullRequest":true,"CreatedAt":"2019-10-05T06:01:27","Actor":"Dotnet-GitSync-Bot","Number":"7809","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @idlerboris @stephentoub","Url":"https://github.com/dotnet/corert/pull/7809","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7809)"},{"Id":"502527358","IsPullRequest":false,"CreatedAt":"2019-10-04T12:27:49","Actor":"kstreichergb","Number":"7808","RawContent":null,"Title":"dotnet.exe hangs during shutdown","State":"closed","Body":"A hosted application using `BackgroundService` is hanging infinetly on shutdown, in particular when the console application is killed with ctrl+z.\r\n\r\nThe \"finish\" log in the finally in Main will be seen, but the dotnet.exe process keeps running\r\n\r\n```\r\npublic class BaseBackgroundService: BackgroundService{\r\n  private readonly IHostLifetime _hostLifetime;\r\n  private readonly IHostApplicationLifetime _iHostApplicationLifetime;\r\n  \r\n  public BaseBackgroundService(IHostLifetime hostLifetime,\r\n\t\t                             IHostApplicationLifetime iHostApplicationLifetime){\r\n    _hostLifetime = hostLifetime;\r\n    _iHostApplicationLifetime = iHostApplicationLifetime;\r\n }\r\n\r\n  protected override async Task ExecuteAsync(CancellationToken ct)\r\n  {\r\n  try{\r\n        await DoSomething();\r\n  }catch(OperationCanceledException ex)\r\n{\r\n /** ... Reached on CTRL+Z .... **/\r\n}\r\nfinally{\r\n       _iHostApplicationLifetime.StopApplication();\r\n        await _hostLifetime.StopAsync(ct); // clean exit\r\n  \tConsole.WriteLine(\"Completes as expected\");    \r\n  }\r\n/*...*/\r\n}\r\n\r\n```\r\n\tProgram.cs \r\n\tpublic static async Task Main(string[] args){\r\n\ttry\r\n\t{\r\n\t\tIHostBuilder hostBuilder = CreateHostBuilder(args);\r\n\r\n\t\tusing (IHost host = hostBuilder.UseConsoleLifetime().Build())\r\n\t\t{\r\n\t\t\tawait host.RunAsync();\r\n\t\t}\r\n\t}\r\n\t}finally{\r\n\t\tConsole.WriteLine(\"Finished - will be seen. Therefore main exits, but dotnet.exe keeps running\");\r\n\t}\r\n\t}\r\n```\r\n\r\nThe hosted BackgroundService will finish (OperationCanceledException) but the host.RunAsync() will never finish.\r\n\r\nUsing visual and break all\r\n\r\n![image](https://user-images.githubusercontent.com/50991928/66196903-9ecb0200-e699-11e9-812f-d3773be75aa4.png)\r\n\r\nAnd repeating it shows the Task ID changes, but the structure remains the same\r\n\r\n![image](https://user-images.githubusercontent.com/50991928/66197013-cf12a080-e699-11e9-8529-6ee9df7266ee.png)","Url":"https://github.com/dotnet/corert/issues/7808","RelatedDescription":"Closed issue \"dotnet.exe hangs during shutdown\" (#7808)"},{"Id":"501662946","IsPullRequest":false,"CreatedAt":"2019-10-02T18:48:52","Actor":"RalfKornmannEnvision","Number":"7807","RawContent":null,"Title":"GC thread suspension","State":"open","Body":"Maybe I just got something wrong here and I am looking at the wrong place.\r\n\r\nMy somewhat bigger test code finally runs stable for hours on my ARM64 system without trashing the heap or consuming all the physical memory. But so far it was only a single thread console application. For my use case I would need some threads.\r\n\r\nAs expected the GC need to suspend all managed threads to do a collection. For Windows there is some hijack code but the function for unix only contains a todo. I assume the reason for this is that the necessary os functions are missing. My target system has the same issue as I cannot suspend and resume threads there. As .net core should have the same issue on other posix systems I checked there and noticed that the jit engine has an option to inject gc probes. I assume that this is the only way to get the GC working in a multi thread environment were hijacking is not possible. Or did I missed something?\r\n\r\nIn the case I am right a short check showed me that the ilcompiler doesn't support the flags and callbacks for this yet?\r\n\r\nDo I need to add this to get the GC working with multiple threads or have I looked at the wrong place?\r\n\r\nIf this the right place does it make any sense to aim for the inline version of the gc probe or can this never work with corert and the call variant is the only solution? I already checked the code and noticed that even if the inline variant can work the call needs still be implemented as it is used in more complicated cases.","Url":"https://github.com/dotnet/corert/issues/7807","RelatedDescription":"Open issue \"GC thread suspension\" (#7807)"},{"Id":"501011867","IsPullRequest":true,"CreatedAt":"2019-10-01T18:56:37","Actor":"Dotnet-GitSync-Bot","Number":"7806","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7806","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7806)"},{"Id":"500653866","IsPullRequest":true,"CreatedAt":"2019-10-01T15:25:51","Actor":"Dotnet-GitSync-Bot","Number":"7805","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @adamsitnik","Url":"https://github.com/dotnet/corert/pull/7805","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7805)"},{"Id":"500408911","IsPullRequest":true,"CreatedAt":"2019-10-01T04:22:31","Actor":"Dotnet-GitSync-Bot","Number":"7804","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @Youssef1313 @safern","Url":"https://github.com/dotnet/corert/pull/7804","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7804)"},{"Id":"499907137","IsPullRequest":true,"CreatedAt":"2019-09-29T14:16:14","Actor":"MichalStrehovsky","Number":"7803","RawContent":null,"Title":"Delete ReadyToRun portions of the compiler and test tree","State":"closed","Body":"The development of the ReadyToRun compiler moved to the CoreCLR repo. Keeping the sources here is just making it harder to keep the repos in sync.\r\n\r\nDeleting the testing speeds up the CI considerably.","Url":"https://github.com/dotnet/corert/pull/7803","RelatedDescription":"Closed or merged PR \"Delete ReadyToRun portions of the compiler and test tree\" (#7803)"},{"Id":"499773007","IsPullRequest":true,"CreatedAt":"2019-09-29T11:58:37","Actor":"MichalStrehovsky","Number":"7802","RawContent":null,"Title":"Fix Windows debug information for classes","State":"closed","Body":"Fixes a longstanding issue where we were emitting erroneous vfptr debug entries and incorrectly mangling class names. One could only inspect things as they were statically typed in the source (so if a variable was typed as `object` in the sources, you wouldn't see any fields in the native debugger, no matter what was assigned to it).\r\n\r\nIt wasn't too terrible, so I sort of just lived with it, but this should work.\r\n\r\nWith this, casting to base classes in the debugger works.\r\n\r\n## Before\r\n\r\n![before](https://user-images.githubusercontent.com/13110571/65817093-98550a00-e203-11e9-88ce-efd8109ae303.gif)\r\n\r\n\r\n## After\r\n\r\n![after](https://user-images.githubusercontent.com/13110571/65817095-9d19be00-e203-11e9-9ec7-73ffe4587b62.gif)\r\n","Url":"https://github.com/dotnet/corert/pull/7802","RelatedDescription":"Closed or merged PR \"Fix Windows debug information for classes\" (#7802)"},{"Id":"499146410","IsPullRequest":true,"CreatedAt":"2019-09-27T23:17:06","Actor":"Dotnet-GitSync-Bot","Number":"7800","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams","Url":"https://github.com/dotnet/corert/pull/7800","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7800)"},{"Id":"499434828","IsPullRequest":true,"CreatedAt":"2019-09-27T15:09:03","Actor":"am11","Number":"7801","RawContent":null,"Title":"Remove duplicate enum SystemVClassificationType","State":"closed","Body":"Found the duplicate definition at: https://github.com/dotnet/corert/blob/a7ce92678876ba55a1c7a65c464363b51d777b4f/src/JitInterface/src/CorInfoTypes.cs#L1170","Url":"https://github.com/dotnet/corert/pull/7801","RelatedDescription":"Closed or merged PR \"Remove duplicate enum SystemVClassificationType\" (#7801)"},{"Id":"498529328","IsPullRequest":true,"CreatedAt":"2019-09-26T22:29:33","Actor":"Dotnet-GitSync-Bot","Number":"7798","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams @stephentoub","Url":"https://github.com/dotnet/corert/pull/7798","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7798)"},{"Id":"499086023","IsPullRequest":false,"CreatedAt":"2019-09-26T19:57:16","Actor":"jkotas","Number":"7799","RawContent":null,"Title":"CppCodeGen: Implement RVA-backed static fields","State":"open","Body":"E.g. `private static ReadOnlySpan<byte> CategoryForLatin1 => new byte[] { 1, 2, 3, ... };`. CppCodeGen allocates space for these, but does not initialize it.","Url":"https://github.com/dotnet/corert/issues/7799","RelatedDescription":"Open issue \"CppCodeGen: Implement RVA-backed static fields\" (#7799)"},{"Id":"497810701","IsPullRequest":true,"CreatedAt":"2019-09-25T21:17:24","Actor":"Dotnet-GitSync-Bot","Number":"7797","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7797","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7797)"},{"Id":"496108391","IsPullRequest":false,"CreatedAt":"2019-09-24T00:16:58","Actor":"Unreal-System","Number":"7795","RawContent":null,"Title":".NET Core 3 ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner.","State":"closed","Body":"[Demo.zip](https://github.com/dotnet/corert/files/3633903/Demo.zip)\r\ndotnet --version\r\n3.0.100-rc1-014190\r\n\r\n用于 .NET Core 的 Microsoft (R) 生成引擎版本 16.3.0-preview-19455-02+4a2d77107\r\n版权所有(C) Microsoft Corporation。保留所有权利。\r\n\r\n  C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj 的还原在 101.78 ms 内完成。\r\n  你正在使用 .NET Core 的预览版。请查看 https://aka.ms/dotnet-core-preview\r\n  LoginNet -> C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\bin\\Release\\netcoreapp3.0\\win-x64\\LoginNet.dll\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : Code generation failed [C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj]\r\n  ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner. You can work around by running the compilation with scanner disabled.\r\n     at ILCompiler.ILScanResults.ScannedVTableProvider.GetSlice(TypeDesc type)\r\n     at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n     at ILCompiler.Compilation.HasFixedSlotVTable(TypeDesc type)\r\n     at Internal.JitInterface.CorInfoImpl.getCallInfo(CORINFO_RESOLVED_TOKEN& pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult)\r\n     at Internal.JitInterface.CorInfoImpl._getCallInfo(IntPtr thisHandle, IntPtr* ppException, CORINFO_RESOLVED_TOKEN& pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult)\r\n     --- End of inner exception stack trace ---\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\Admin\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\build\\Microsoft.NETCore.Native.targets(239,5): error MSB3073: The command \"\"C:\\Users\\Admin\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\tools\\ilc\" @\"obj\\Release\\netcoreapp3.0\\win-x64\\native\\LoginNet.ilc.rsp\"”exited with code 1. [C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj]\r\n\r\nCan be compiled on earlier .NET Core 3 previews and CoreRT daily builds.","Url":"https://github.com/dotnet/corert/issues/7795","RelatedDescription":"Closed issue \".NET Core 3 ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner.\" (#7795)"},{"Id":"496830692","IsPullRequest":false,"CreatedAt":"2019-09-22T20:46:12","Actor":"genifycom","Number":"7796","RawContent":null,"Title":"[TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure","State":"open","Body":"Now getting this strange error:\r\n\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure [C:\\xxx.csproj]\r\n  Internal.TypeSystem.TypeSystemException+FileNotFoundException: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure\r\n     at Internal.TypeSystem.ThrowHelper.ThrowFileNotFoundException(ExceptionStringID id, String fileName)\r\n     at ILCompiler.CompilerTypeSystemContext.GetModuleForSimpleName(String simpleName, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveAssemblyReference(AssemblyReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(SignatureTypeCode typeCode)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseMethodSignature()\r\n     at Internal.TypeSystem.Ecma.EcmaMethod.InitializeSignature()\r\n     at ILCompiler.DependencyAnalysis.MethodMetadataNode.GetStaticDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ProcessMarkStack()\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\DAnderson\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-28121-01\\build\\Microsoft.NETCore.Native.targets(253,5): error MSB3073: The command \"\"C:\\...\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-28121-01\\tools\\ilc\" @\"obj\\Debug\\netcoreapp2.1\\win-x64\\native\\xxx.ilc.rsp\"\" exited with code 1. [C:\\xxx.csproj]","Url":"https://github.com/dotnet/corert/issues/7796","RelatedDescription":"Open issue \"[TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure\" (#7796)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"506814823","IsPullRequest":true,"CreatedAt":"2019-10-14T21:06:42","Actor":"dsplaisted","Number":"3747","RawContent":null,"Title":"Update branding to 3.1.100-preview2","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3747","RelatedDescription":"Closed or merged PR \"Update branding to 3.1.100-preview2\" (#3747)"},{"Id":"506742575","IsPullRequest":false,"CreatedAt":"2019-10-14T15:59:55","Actor":"mwpowellhtx","Number":"3746","RawContent":null,"Title":"Build pipeline failed to resolve CLI tooling after VS2019 installation","State":"open","Body":"We got errors in our build pipeline related to our internal CLI tooling failing to resolve correctly, in our estimation, following VS2019 installation.\r\n\r\nRunning the latest NuGet: `Version: 5.3.0.6260`\r\n\r\nIf it helps, our `dotnet --info` looks like this:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.508 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.509 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3746","RelatedDescription":"Open issue \"Build pipeline failed to resolve CLI tooling after VS2019 installation\" (#3746)"},{"Id":"506392857","IsPullRequest":true,"CreatedAt":"2019-10-13T22:49:14","Actor":"wli3","Number":"3745","RawContent":null,"Title":"WIP helix","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3745","RelatedDescription":"Open PR \"WIP helix\" (#3745)"},{"Id":"505951909","IsPullRequest":true,"CreatedAt":"2019-10-11T23:43:10","Actor":"dotnet-maestro[bot]","Number":"3744","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191011.02\r\n- **Date Produced**: 10/11/2019 3:47 PM\r\n- **Commit**: 19942e71998242599a0b6d4496066eaa38588af5\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3744","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3744)"},{"Id":"505950895","IsPullRequest":false,"CreatedAt":"2019-10-11T16:37:45","Actor":"AArnott","Number":"3743","RawContent":null,"Title":"NETSDK1085: SatelliteDllsProjectOutputGroupDependencies causes P2P build during pack","State":"open","Body":"The SatelliteDllsProjectOutputGroupDependencies target results in P2Ps doing a build even when NoBuild=true, as caught by the NETSDK1085 error.\r\n\r\nSimple repro sln: [NETSDK1085Bug.zip](https://github.com/dotnet/sdk/files/3718674/NETSDK1085Bug.zip)\r\n\r\nTo repro:\r\n```\r\ndotnet build\r\ndotnet pack --no-build\r\n```\r\n\r\nScenario: I'm building an analyzer package which includes code fixes in one assembly and analyzers in a P2P reference. I need to gather satellite assemblies from the analyzer project, which is exactly what the `SatelliteDllsProjectOutputGroupDependencies` target is for and what I've been using for years in many projects. But apparently it results in triggering a build in the analyzer project even when I'm using `dotnet pack --no-build`.\r\n\r\nThis came up in my upgrade from .NET Core SDK 2.2.401 to 3.0.100.","Url":"https://github.com/dotnet/sdk/issues/3743","RelatedDescription":"Open issue \"NETSDK1085: SatelliteDllsProjectOutputGroupDependencies causes P2P build during pack\" (#3743)"},{"Id":"505812663","IsPullRequest":true,"CreatedAt":"2019-10-11T12:05:14","Actor":"dotnet-bot","Number":"3742","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3742","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3742)"},{"Id":"505812496","IsPullRequest":true,"CreatedAt":"2019-10-11T12:04:50","Actor":"dotnet-bot","Number":"3741","RawContent":null,"Title":"Merge release/2.1.8xx to release/2.2.4xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.8xx into release/2.2.4xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.8xx-to-release/2.2.4xx\ngit reset --hard upstream/release/2.2.4xx\ngit merge upstream/release/2.1.8xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.8xx-to-release/2.2.4xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3741","RelatedDescription":"Open PR \"Merge release/2.1.8xx to release/2.2.4xx\" (#3741)"},{"Id":"505569243","IsPullRequest":true,"CreatedAt":"2019-10-11T04:31:39","Actor":"dotnet-bot","Number":"3736","RawContent":null,"Title":"Merge release/2.2.2xx to release/2.2.4xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/2.2.4xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/2.2.4xx\ngit reset --hard upstream/release/2.2.4xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/2.2.4xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3736","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/2.2.4xx\" (#3736)"},{"Id":"505628347","IsPullRequest":true,"CreatedAt":"2019-10-11T04:20:10","Actor":"dotnet-maestro[bot]","Number":"3740","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191011.6\r\n- **Date Produced**: 10/11/2019 9:07 PM\r\n- **Commit**: f15311bdc5e9fbf4026a3099c32c5ea6b50d6236\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19511.6\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3740","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3740)"},{"Id":"505569183","IsPullRequest":true,"CreatedAt":"2019-10-11T03:48:26","Actor":"dotnet-bot","Number":"3735","RawContent":null,"Title":"Merge release/2.1.8xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.8xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.8xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.8xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.8xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3735","RelatedDescription":"Closed or merged PR \"Merge release/2.1.8xx to release/2.2.2xx\" (#3735)"},{"Id":"505569308","IsPullRequest":true,"CreatedAt":"2019-10-11T03:30:40","Actor":"dotnet-bot","Number":"3738","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3738","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3738)"},{"Id":"505532879","IsPullRequest":true,"CreatedAt":"2019-10-11T03:30:23","Actor":"nguerrera","Number":"3733","RawContent":null,"Title":"Merge 3.0.1xx to 3.1.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3733","RelatedDescription":"Closed or merged PR \"Merge 3.0.1xx to 3.1.1xx\" (#3733)"},{"Id":"505536771","IsPullRequest":true,"CreatedAt":"2019-10-11T01:11:26","Actor":"dotnet-maestro[bot]","Number":"3734","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191010.13\r\n- **Date Produced**: 10/10/2019 9:15 PM\r\n- **Commit**: ee7dbc9e064bf59f822c5310b89e0e996ccc0d58\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3734","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3734)"},{"Id":"505569333","IsPullRequest":true,"CreatedAt":"2019-10-11T00:05:30","Actor":"dotnet-bot","Number":"3739","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3739","RelatedDescription":"Open PR \"Merge release/3.1.1xx to master\" (#3739)"},{"Id":"505569280","IsPullRequest":true,"CreatedAt":"2019-10-11T00:05:17","Actor":"dotnet-bot","Number":"3737","RawContent":null,"Title":"Merge release/2.2.4xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.4xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.4xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.4xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.4xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3737","RelatedDescription":"Open PR \"Merge release/2.2.4xx to release/3.0.1xx\" (#3737)"},{"Id":"505491895","IsPullRequest":true,"CreatedAt":"2019-10-10T21:55:54","Actor":"dotnet-maestro[bot]","Number":"3732","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191010.08\r\n- **Date Produced**: 10/10/2019 7:27 PM\r\n- **Commit**: 903ca49e3ffddc551e12d2f94d7cca95f9a340bf\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3732","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3732)"},{"Id":"505082701","IsPullRequest":false,"CreatedAt":"2019-10-10T07:14:25","Actor":"hanslai","Number":"3731","RawContent":null,"Title":"dotnet cli: dotnet new failed when there is a private nuget package","State":"open","Body":"I have a private nuget package setup in Visual Studio.\r\n\r\n![AIS Internal nuget](https://user-images.githubusercontent.com/20576491/66546180-0b00a680-eb6f-11e9-9ab5-43dcae189c23.png)\r\n\r\nWhen I run the following CLI command `dotnet new -i \"Amazon.Lambda.Templates::*\"` in Powershell , `dotnet new `will failed with Status Code 401.   Please see error message below.\r\n\r\n![Dotnet new failed with private nuget](https://user-images.githubusercontent.com/20576491/66546448-a0039f80-eb6f-11e9-8847-8edc5ed3c94b.png)\r\n\r\nBut if I unchecked my private nuget in Nuget Package Manager from Visual Studio.  Then the above `dotnet new` command will successfully restore the Templates.\r\n\r\nSince having a private nuget package or not should not have anything to do with `dotnet new`. This CLI command should not failed.\r\n\r\nThanks\r\n","Url":"https://github.com/dotnet/sdk/issues/3731","RelatedDescription":"Open issue \"dotnet cli: dotnet new failed when there is a private nuget package\" (#3731)"},{"Id":"503817875","IsPullRequest":false,"CreatedAt":"2019-10-08T21:16:17","Actor":"Codex-","Number":"3725","RawContent":null,"Title":"Can only build 2.2 Tests with 3.0 installed with RuntimeIdentifier specified","State":"closed","Body":"I came across this issue today when Visual Studio updated to 16.3 and forced the installation of .NetCore 3.0\r\n\r\nWhen 3.0 is installed I found I was unable to build 2.2 apps/test projects as they resulted in the error `System.BadImageFormatException : Bad IL format.`. Removing 3.0 'resolved' this. \r\n\r\nWith 3.0 being forcibly installed now I've managed to find that adding `<RuntimeIdentifier>win-x64</RuntimeIdentifier>` to the project configuration I was then able to build again, but this seems wrong too.\r\n\r\nthe config is:\r\n```\r\n<PropertyGroup>\r\n\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n\t<IsPackable>false</IsPackable>\r\n\t<RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n</PropertyGroup>\r\n```\r\n\r\nI suspect that this framework target with the use of `CopyLocalLockFileAssemblies` results in the problem, but in my case I can't build without it (and historically this has worked until now).\r\n\r\nRemoving `RuntimeIdentifier` brings back the original error, rolling back to VS 16.2 without 3.0 installed works as expected.\r\n\r\nI feel like I'm missing something, unless this is a bug. \r\n\r\nAny ideas/thoughts are appreciated","Url":"https://github.com/dotnet/sdk/issues/3725","RelatedDescription":"Closed issue \"Can only build 2.2 Tests with 3.0 installed with RuntimeIdentifier specified\" (#3725)"},{"Id":"504289407","IsPullRequest":false,"CreatedAt":"2019-10-08T17:33:19","Actor":"davidmatson","Number":"3729","RawContent":null,"Title":"Process.Start on exe via ProjectReference no longer works in .NET Core","State":"open","Body":"**Visual Studio Version**:\r\n16.2.5\r\n\r\n**Summary**:\r\nHaving a ProjectReference to an .exe was sufficient to have Process.Start work in .NET Framework (both old- and new-style csprojs). With .NET Core, it fails (with both SelfContained=true and false and with or without running Publish first).\r\n\r\n**Steps to Reproduce**:\r\n1. Create an exe project in a new solution.\r\n2. Create a second exe project in the same solution.\r\n3. Add a ProjectReference from the first project to the second project.\r\n4. Have the first project call Process.Start on the second project's exe.\r\n\r\n**Expected Behavior**:\r\nThe process runs successfully.\r\n\r\n**Actual Behavior**:\r\nProcess.Start fails with:\r\n```\r\nA fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Program Files\\dotnet'.\r\n```\r\n\r\nor (if SelfContained=true):\r\n```\r\nCould not resolve CoreCLR path. For more details, enable tracing by setting COREHOST_TRACE environment variable to 1\r\n```\r\n\r\nor (after Publish):\r\n```\r\nUnhandled Exception: System.ComponentModel.Win32Exception: The system cannot find the file specified\r\n```\r\n\r\n**User Impact**:\r\nWe heavily use the pattern of a long-running exe (for a container service) calling short-lived exes to do work. Ctrl+F5 used to work in .NET Framework; it doesn't in .NET Core.\r\n\r\nNote also some odd behavior with SelfContained=false - NuGet package dependencies of the child project do not get placed in the bin directory of the referencing project (prior to Publish; they do after).\r\n\r\nSee the attached zip for repro projects for full .NET Framework with a traditional csproj, full .NET Framework with a new-style (Common Project System) csproj, and .NET Core.\r\n[repro.zip](https://github.com/dotnet/project-system/files/3703783/repro.zip)","Url":"https://github.com/dotnet/sdk/issues/3729","RelatedDescription":"Open issue \"Process.Start on exe via ProjectReference no longer works in .NET Core\" (#3729)"},{"Id":"504072077","IsPullRequest":true,"CreatedAt":"2019-10-08T14:25:49","Actor":"nguerrera","Number":"3727","RawContent":null,"Title":" Pinned host model 3.0.0 for 3.0.x servicing","State":"closed","Body":"@mmitche  @livarcocc ","Url":"https://github.com/dotnet/sdk/pull/3727","RelatedDescription":"Closed or merged PR \" Pinned host model 3.0.0 for 3.0.x servicing\" (#3727)"},{"Id":"504301070","IsPullRequest":false,"CreatedAt":"2019-10-08T14:23:27","Actor":"ds1709","Number":"3730","RawContent":null,"Title":"Use ResXFileCodeGenerator as default custom tool fo resx files if Designer.cs file exists","State":"open","Body":"**Summary**:\r\nWe need to specify `CustomTool` attribute for resx files. Generally it's `ResXFileCodeGenerator`. If `CustomTool` not specified, then code generator is not working. Offer to make `ResXFileCodeGenerator` as default custom tool for resx files, whict has paired Designer.cs file (e.g. the most common Propertiest\\Resources.resx and Properties\\Resources.Designer.cs).","Url":"https://github.com/dotnet/sdk/issues/3730","RelatedDescription":"Open issue \"Use ResXFileCodeGenerator as default custom tool fo resx files if Designer.cs file exists\" (#3730)"},{"Id":"503850577","IsPullRequest":false,"CreatedAt":"2019-10-08T06:17:11","Actor":"davidwengier","Number":"3726","RawContent":null,"Title":"Review translation of \"Assets file\" for portuguese","State":"open","Body":"tag @tmeschter\r\n\r\nThis is just one person, but they speak portuguese better than me, so thought I'd report it. Not sure if there is some way to get the LOC team to verify that translations make sense? It looks like in this case the translation is technically correct, but perhaps not helpful.\r\n\r\nFrom the C# discord today:\r\n\r\n\r\n-----\r\n\r\n@marcussacana : \r\nI got a error\r\nit's in portuguese, a sec to me translate\r\n\"The file of active '....' don't have the same destination to '.netcoreapp,ver=v3/win-x86' verify if the restoration has executed and if you included the 'netcoreapp3.0' in the TargetFrameworks of the project, Maybe you will need include the 'win-x86' in the RuntimeIdentifiers of the project.\"\r\nI don't get this 'actives' anyway\r\n \r\n@davidwengier : \r\nit would be \"file of assets\" i guess? the english version of the message just says \"Assets file\"\r\n \r\n@marcussacana : \r\nthen the portuguese message is wrong, because don't make much sense to me...\r\nas far I know 'ativos' can be translated only to 'active/enabled'... the english version said assets, right?\r\n \r\n@davidwengier : \r\nyes\r\nand in this case \"assets\" is a technical term, so i think the translation should be reviewed\r\nlike its literally \"project.assets.json\"\r\n \r\n@marcussacana : \r\nwell, I never see a translation to assets before, usually here we speak 'assets' too, but isn't a word recognized in our dictionary\r\n\r\nthe google translate said it's rigth\r\n![image](https://user-images.githubusercontent.com/754264/66371253-6fe0c300-e9ee-11e9-8854-ccfdaeb5ce7e.png)\r\n\r\nbut well\r\n![image](https://user-images.githubusercontent.com/754264/66371266-7707d100-e9ee-11e9-909d-91b86725586d.png)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3726","RelatedDescription":"Open issue \"Review translation of \"Assets file\" for portuguese\" (#3726)"},{"Id":"503747398","IsPullRequest":false,"CreatedAt":"2019-10-07T23:43:25","Actor":"wli3","Number":"3724","RawContent":null,"Title":"BuildWebLarge and similar perf test have wrong snapshot folder","State":"open","Body":"https://github.com/dotnet/sdk/blob/260f37383a4974b478cba2ba67ac7908578f5b07/src/Tests/Microsoft.NET.PerformanceTests/BuildPerf.cs#L68\r\n\r\nAnd possibly other similar tests. We use the same folder to find the csproj (which is correct), and to do snapshot (not correct). As a result, in BuildWebLarge, only the mvc folder is under snapshot/restore while there are many other projects in the solution are not properly cleaned between test runs. \r\n\r\nHowever, the perf lab has different infra to do this. So once we moved to perf lab, this will no longer be a problem.\r\n\r\nI think this is a low priority issue.","Url":"https://github.com/dotnet/sdk/issues/3724","RelatedDescription":"Open issue \"BuildWebLarge and similar perf test have wrong snapshot folder\" (#3724)"},{"Id":"502980437","IsPullRequest":false,"CreatedAt":"2019-10-07T21:49:49","Actor":"smoothdeveloper","Number":"3718","RawContent":null,"Title":"dotnet build --help failing due to sdk version","State":"closed","Body":"When I attempt a command with the `--help` argument, it fails due to mismatch of SDK version \r\n\r\nWould making it work disregarding potential mismatch be more user friendly / sensible?\r\n\r\nCurrently:\r\n\r\n```console\r\nC:\\tmp\\testdotnetnew>dotnet build --help\r\nA compatible installed .NET Core SDK for global.json version [4.2.100] from [C:\\tmp\\testdotnetnew\\global.json] was not found\r\nInstall the [4.2.100] .NET Core SDK or update [C:\\tmp\\testdotnetnew\\global.json] with an installed .NET Core SDK:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n\r\nAlso, is there a way to force the sdk to \"go ahead\"? if so, it would be good to be pointed at that in the mismatch error message (with a bit of caution).","Url":"https://github.com/dotnet/sdk/issues/3718","RelatedDescription":"Closed issue \"dotnet build --help failing due to sdk version\" (#3718)"},{"Id":"503665613","IsPullRequest":true,"CreatedAt":"2019-10-07T20:12:15","Actor":"sfoslund","Number":"3723","RawContent":null,"Title":"Confirm DisableImplicitNamespaceImports solves inferred type variable name issue","State":"open","Body":"Add test for #3615 to ensure the DisableImplicitNamespaceImports property solves inferred type variable name issue","Url":"https://github.com/dotnet/sdk/pull/3723","RelatedDescription":"Open PR \"Confirm DisableImplicitNamespaceImports solves inferred type variable name issue\" (#3723)"},{"Id":"503097561","IsPullRequest":true,"CreatedAt":"2019-10-06T14:55:57","Actor":"dotnet-maestro[bot]","Number":"3722","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 11:53 AM\r\n- **Commit**: bbf5542781136f9f3a1f30b010cb782e775d54c7\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19506.1\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3722","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3722)"},{"Id":"503047091","IsPullRequest":true,"CreatedAt":"2019-10-06T06:46:26","Actor":"dotnet-maestro[bot]","Number":"3721","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 2:24 AM\r\n- **Commit**: 994c4d01e6970e7110e2f0ecf95cc184dfa7569c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19505.5\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3721","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3721)"},{"Id":"503038463","IsPullRequest":true,"CreatedAt":"2019-10-06T02:50:44","Actor":"dotnet-maestro[bot]","Number":"3720","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.4\r\n- **Date Produced**: 10/6/2019 12:21 AM\r\n- **Commit**: f046fe0e33340def6bf72f939126012f740ea5b5\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19505.4\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3720","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3720)"},{"Id":"502982974","IsPullRequest":false,"CreatedAt":"2019-10-05T16:18:41","Actor":"megakid","Number":"3719","RawContent":null,"Title":"*.pp contentFiles not copied to output directory in 3.0 SDK","State":"open","Body":"I've been digging into this issue whereby a `.pp` file inside a package `contentFiles` (with `copyToOutput=\"true\"`) via `PackageReference` is not copied into the output directory during a `dotnet publish` / `dotnet build`.  This works fine with .NET Core SDK `2.2.*` but is broken in `3.0.100`.  Non-`.pp` files work fine.\r\n\r\nI have debugged the MSBuild process and can see that the files are transformed successfully but they do not get copied to the output unlike non-`.pp` files.\r\n\r\nMy test project/package structure is basic and looks like this:\r\n\r\n`[Library A (TestAbc)] <== (PackageReference) == [Exe B]`\r\n\r\nLibrary A's `.nuspec`:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>TestAbc</id>\r\n    <version>160.0.0</version>\r\n    <authors>TestAbc</authors>\r\n    <owners>TestAbc</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Package Description</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETFramework4.7.1\" />\r\n    </dependencies>\r\n    <contentFiles>\r\n      <files include=\"any/any/Test.ps1.pp\" buildAction=\"Content\" copyToOutput=\"true\" />\r\n      <files include=\"any/any/NonTransformed.ps1\" buildAction=\"Content\" copyToOutput=\"true\" />\r\n    </contentFiles>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\nExe B's `csproj` (I've also tried targeting `netcoreapp3.0`)\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net472</TargetFrameworks>\r\n    <OutputType>Exe</OutputType>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"TestAbc\" Version=\"163.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nMy dotnet version:\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional>dotnet --version\r\n3.0.100\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional>dotnet --list-sdks\r\n3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n\r\nMy build command - I couldn't figure out how to get binlogs from msbuild via the dotnet publish command so I used the `CopyLocalLockFileAssemblies` property workaround although I'm not sure this is required with 3.0 SDK (see [here](https://github.com/dotnet/sdk/pull/2646)):\r\n\r\n`C:/Program Files/dotnet/dotnet.exe --diagnostics msbuild /target:Build /property:PackageOutputPath=C:/Projects/test/bin/packages /property:IncludeSymbols=true /property:IncludeSource=true /property:CopyLocalLockFileAssemblies=true /property:Version=1.0.0 /property:configuration=Release \"C:/Projects/squid2/src/ExeA/ExeA.csproj\" -restore /bl:build.binlog -v:diag`\r\n\r\nAfter this command I see `NonTransformed.ps1` in the output folder but not `Test.ps1` (or `Test.ps1.pp`).\r\nI would expect to see both `.ps1`s in my output folder at that point.\r\n\r\nHere's my debugging so far:\r\n\r\nI see the .pp file getting picked up:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66257599-1d579a80-e793-11e9-9f82-74730dc52175.png)\r\n\r\nIt gets copied to a temp directory without the .pp extension (`obj\\Release\\net472\\NuGet\\9374D6CD1CF741AA241FA0906DC657D57C8CB116\\TestAbc\\165.0.0\\Test.ps1` in this case).\r\n\r\nThen I see the preprocessor task running and see that the file has now been overwritten/updated with the template tokens replaced.\r\n \r\n![image](https://user-images.githubusercontent.com/1478003/66257582-f600cd80-e792-11e9-8a0b-9a481c9bab8a.png)\r\n\r\nI notice later in the process that the 2 files are listed side by side but the `TargetPath` looks wrong (to my untrained eye) under the `Test.ps1` element - first difference is the content path is an absolute path for the `NonTransformed.ps1` but a relative path for `Test.ps1`.  The task `AssignTargetPath` is used to generate a `TargetPath` (see [here](https://github.com/microsoft/msbuild/blob/vs16.3/src/Tasks/AssignTargetPath.cs)) which generates the correct one on `NonTransformed.ps1` but not `Test.ps1`.  **UPDATE** From tracing the 2.2 build, I can see it is the same in 2.2 so this is fine.\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66257667-fd74a680-e793-11e9-9b07-28edda0a4a23.png)\r\n\r\nI can't figure out where `Test.ps1` is being dropped but later on I clearly see `NonTransformed.ps1` alone in the copy task:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66257561-c94cb600-e792-11e9-8f5d-f8bd7aed22e6.png)\r\n\r\nMy output dir afterwards:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66258015-0e271b80-e798-11e9-919b-c90d8b39c2bf.png)\r\n\r\nExact same build but with `SDK 2.2.402`:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66258002-e46df480-e797-11e9-9d34-cdae57598bac.png)\r\n\r\nI've included my 2.2 and 3.0 binlogs here for comparison:\r\n\r\n[msbuild-binlogs.zip](https://github.com/dotnet/sdk/files/3693524/msbuild-binlogs.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3719","RelatedDescription":"Open issue \"*.pp contentFiles not copied to output directory in 3.0 SDK\" (#3719)"},{"Id":"504235087","IsPullRequest":false,"CreatedAt":"2019-09-30T15:55:55","Actor":"genifycom","Number":"3728","RawContent":null,"Title":"How to debug \"GenerateBundle\" task failed unexpectedly","State":"open","Body":"# Issue Title\r\n\r\ndotnet publish xxx.csproj -r win-x64 -c Release /p:PublishSingleFile=true\r\n\r\ngives me the following:\r\n\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018: The \"GenerateBundle\" task failed unexpectedly. [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018: Microsoft.NET.HostModel.AppHost.PlaceHolderNotFoundInAppHostException: Exception of type 'Microsoft.NET.HostModel.AppHost.PlaceHolderNotFoundInAppHostException' was thrown. [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.AppHost.BinaryUtils.SearchAndReplace(MemoryMappedViewAccessor accessor, Byte[] searchPattern, Byte[] patternToReplace, Boolean pad0s) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.AppHost.BinaryUtils.SearchAndReplace(String filePath, Byte[] searchPattern, Byte[] patternToReplace, Boolean pad0s) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.AppHost.HostWriter.<>c__DisplayClass3_0.<SetAsBundle>b__0() [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.RetryUtil.RetryOnIOError(Action func) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.AppHost.HostWriter.SetAsBundle(String appHostPath, Int64 bundleHeaderOffset) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.Bundle.Bundler.GenerateBundle(IReadOnlyList`1 fileSpecs) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateBundle.ExecuteCore() [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\\xxx.csproj]\r\n\r\n# General\r\n\r\nWould love to be able to provide more info, but how?\r\n\r\nIs there a debug publish switch?\r\n","Url":"https://github.com/dotnet/sdk/issues/3728","RelatedDescription":"Open issue \"How to debug \"GenerateBundle\" task failed unexpectedly\" (#3728)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"506832844","IsPullRequest":false,"CreatedAt":"2019-10-14T19:26:10","Actor":"terrajobst","Number":"130","RawContent":null,"Title":".NET Core 3.0 concludes the .NET Framework API porting project","State":"open","Body":"We started in .NET Core 1.0 with a very minimal API set that only included \\~18K of the .NET Framework APIs. With [.NET Standard 2.0](https://devblogs.microsoft.com/dotnet/announcing-net-standard-2-0/), we tried to make it much more viable to share code between .NET Framework, .NET Core, and Xamarin which resulted in approximately 38K .NET Frameworks APIs being available in .NET Core 2.0. We also built the [Windows Compatibility Pack](https://devblogs.microsoft.com/dotnet/announcing-the-windows-compatibility-pack-for-net-core/) which made another 21K .NET Framework APIs available to .NET Core, resulting in almost 60K additional APIs. And in .NET Core 3.0 we added WPF and WinForms, which increased the number of .NET Framework APIs ported to .NET Core to over 120k, which is more than half of all .NET Framework APIs.\r\n\r\nIt’s also worth pointing out that we added about 62K APIs to .NET Core that don’t exist in .NET Framework. If we compare their total number of APIs, .NET Core has about 80% of the API surface of .NET Framework.\r\n\r\n<p align=\"center\">\r\n<img src=\"https://user-images.githubusercontent.com/5169960/66777114-f8db7c80-ee7c-11e9-9161-acfe1c491586.png\" width=\"600\" align=\"center\">\r\n</p>\r\n\r\nWe announced that the [future of .NET](https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/) will be based on .NET Core. And at Build 2019, [Scott Hunter stated](https://www.youtube.com/watch?v=ZlO1utbB2GQ&t=54m20s) that AppDomains, remoting, Web Forms, WCF server, and Windows Workflow won’t be ported to .NET Core.\r\n\r\nWith .NET Core 3.0, we’re at the point where we’ve ported all technologies that are required for modern workloads, be that desktop apps, mobile apps, console apps, web sites, or cloud services. That’s not to say that we don’t have any gaps or opportunities for new technologies, but we generally believe we won’t be finding them in the .NET Framework code base anymore. Moving forward, we’re focusing our resources on incorporating new technologies.\r\n\r\nSimultaneously, we’re looking into releasing more of the [.NET Framework code base under the MIT license](https://github.com/microsoft/referencesource) on GitHub to allow the community to create OSS projects for technologies we’re not intending to bring to .NET Core. For example, there already are community projects for [CoreWF](https://github.com/UiPath/corewf) and [CoreWCF](https://github.com/CoreWCF/CoreWCF).\r\n\r\nWe’d like to thank everyone who filed issues with requests for APIs being ported. Those issues allowed us to prioritize and close the gaps that prevented people from porting to .NET Core.\r\n\r\nBut since we generally no longer plan to bring existing technologies from .NET Framework to .NET Core we’ll be closing all issues that are [labeled with port-to-core](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Aport-to-core).\r\n\r\n### Discussion\r\n\r\nTo discuss this issue, please comment on the corresponding issue at https://github.com/dotnet/corefx/issues/41769.","Url":"https://github.com/dotnet/announcements/issues/130","RelatedDescription":"Open issue \".NET Core 3.0 concludes the .NET Framework API porting project\" (#130)"},{"Id":"505445666","IsPullRequest":false,"CreatedAt":"2019-10-10T18:45:56","Actor":"TaraOverfield","Number":"129","RawContent":null,"Title":"October 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework October 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/129","RelatedDescription":"Open issue \"October 2019 .NET Updates\" (#129)"},{"Id":"505328689","IsPullRequest":false,"CreatedAt":"2019-10-10T15:19:53","Actor":"carloreggiani","Number":"128","RawContent":null,"Title":"Docker Stop return status Exited \"(3221225786)\"","State":"closed","Body":"Hi\r\nI'm investigating a issue regarding official MCR images on a Win2019 server with Docker EE engine 19.03.2.\r\n\r\nThe images that I'm unsing are:\r\nmcr.microsoft.com/windows/servercore:1809\r\nmcr.microsoft.com/dotnet/framework/aspnet:4.8\r\n\r\nStopping containers based on these images (\"docker stop\" command) I'm getting: \r\n\"Exited (3221225786)\"\r\n\r\nOn linux a stop command normally return: \"Exited (137)\"\r\n\r\nIs it a normal behaviour? What's means 3221225786?\r\n\r\nThanks for any support\r\n\r\nCarlo","Url":"https://github.com/dotnet/announcements/issues/128","RelatedDescription":"Closed issue \"Docker Stop return status Exited \"(3221225786)\"\" (#128)"},{"Id":"504325600","IsPullRequest":false,"CreatedAt":"2019-10-08T23:14:11","Actor":"terrajobst","Number":"127","RawContent":null,"Title":"Consolidated repo names","State":"open","Body":"[ann]: https://github.com/dotnet/announcements/issues/119\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions), and some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarity \r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarity\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!\r\n\r\n### Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27096.","Url":"https://github.com/dotnet/announcements/issues/127","RelatedDescription":"Open issue \"Consolidated repo names\" (#127)"},{"Id":"504304108","IsPullRequest":false,"CreatedAt":"2019-10-08T22:06:07","Actor":"MichaelSimons","Number":"126","RawContent":null,"Title":"4.7.x .NET Framework SDK Docker images no longer published","State":"open","Body":"# 4.7.x .NET Framework SDK Docker images no longer published\r\n\r\nThe [4.7.x .NET Framework SDK Docker images](https://hub.docker.com/_/microsoft-dotnet-framework-sdk) will no longer be published after Oct. 8, 2019.  The 4.8 image tags should be used as a replacement.\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [microsoft/dotnet-framework-docker#428](https://github.com/microsoft/dotnet-framework-docker/issues/428)\r\n\r\n## Details\r\n\r\nAny references to the following SDK tags should be updated to reference `4.8` instead:\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2019`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2019`\r\n\r\nIf you haven't migrated to using images from [MCR](https://github.com/dotnet/announcements/issues/101) and are still using the .NET Framework repos on Docker Hub, you will need to update your tag references to MCR.  This is because the 4.8 images only exist on MCR.  These are the following Docker Hub tags that are affected and should be updated to reference the [4.8 tags at the MCR location](https://hub.docker.com/_/microsoft-dotnet-framework-sdk):\r\n* `microsoft/dotnet-framework:4.7.1-sdk`\r\n* `microsoft/dotnet-framework:4.7.1-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-1803`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019`","Url":"https://github.com/dotnet/announcements/issues/126","RelatedDescription":"Open issue \"4.7.x .NET Framework SDK Docker images no longer published\" (#126)"},{"Id":"502102886","IsPullRequest":false,"CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Number":"125","RawContent":null,"Title":"Alpine Docker images no longer include the tzdata package in 3.0","State":"open","Body":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Open issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125)"},{"Id":"497868605","IsPullRequest":false,"CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Number":"124","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.0","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n","Url":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.0\" (#124)"},{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework September 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-security-and-quality-rollup/)\r\n* [.NET Framework September 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1182709231746727941","CreatedAt":"2019-10-11T17:27:09+00:00","UserScreenname":"dotnet","Text":"We've been working hard to make IoT development on .NET a great experience.\n\nIn this episode of #OnDotNet… https://t.co/psNXS59gtS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":69,"FavoriteCount":31,"RawContent":null},{"Id":"1181935602410897408","CreatedAt":"2019-10-09T14:13:01+00:00","UserScreenname":"dotnet","Text":"Hey folks. We'll be building out the WeatherApp from #dotNETConf; from the API and configuration, all the way to bu… https://t.co/zd90XbTV5c","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":42,"FavoriteCount":10,"RawContent":null},{"Id":"1181701006347735040","CreatedAt":"2019-10-08T22:40:49+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":12,"FavoriteCount":3,"RawContent":null},{"Id":"1181691179663949824","CreatedAt":"2019-10-08T22:01:46+00:00","UserScreenname":"dotnet","Text":"We're developing documentation for the new System.Text.Json serializer. See the first installment at… https://t.co/aHX6GMXqSz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":80,"FavoriteCount":39,"RawContent":null},{"Id":"1181036647447580672","CreatedAt":"2019-10-07T02:40:54+00:00","UserScreenname":"dotnet","Text":"Nice! 😀 https://t.co/EzPOxi6RQM","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":31,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2019-10-15T05:30:36.7202401Z","RunDurationInMilliseconds":14912}