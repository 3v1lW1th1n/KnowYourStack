{"Data":{"Blog":{"FeedItems":[{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null},{"Title":"Introducing API Analyzer","PublishedOn":"2017-10-31T23:24:24+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"This post was written by Olia Gavrysh. Have you ever wondered which APIs are deprecated and which should you use instead? Or have you ever used an API and then found out it didn&#8217;t work on Mac or...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/","RawContent":null},{"Title":"Welcome to C# 7.1","PublishedOn":"2017-10-31T22:39:48+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"With C# we have always tended towards major releases: bundle a lot of features up, and release less frequently. We even went so far as routinely omitting the traditional &#34;.0&#34; when we talked...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/","RawContent":null},{"Title":"Moving to real time test discovery in Test Explorer","PublishedOn":"2017-10-30T22:46:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Real time test discovery is a new Visual Studio feature that uses a Roslyn analyzer to discover tests and populate the test explorer in real time without requiring you to build your project. This...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/","RawContent":null},{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6803910341","Type":"IssuesEvent","CreatedAt":"2017-11-03T04:47:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/37","RelatedDescription":"Opened issue \"microsoft/dotnet nanoserver images now support Windows Server 1709\" (#37) at dotnet/announcements","RelatedBody":"# microsoft/dotnet nanoserver images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released in October. [microsoft/nanoserver](https://hub.docker.com/r/microsoft/nanoserver/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `nanoserver-1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/) substring.\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #330](https://github.com/dotnet/dotnet-docker/issues/330)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker #321](https://github.com/dotnet/dotnet-docker/pull/321)\r\n* [dotnet/dotnet-docker #322](https://github.com/dotnet/dotnet-docker/issues/322)\r\n* [dotnet/dotnet-docker #329](https://github.com/dotnet/dotnet-docker/pull/329)\r\n\r\n.NET Core Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\nYou can see an example of 1709-based images in the following example.\r\n\r\n![.NET Core nanoserver 1709 images](https://user-images.githubusercontent.com/2608468/32360772-61680cec-c016-11e7-851d-0d962c35fe41.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Core images with the tag substring `nanoserver-1709` and Windows Server 2016 images with the tag substring `nanoserver-sac2016`.\r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Core images will adopt [manifest lists](https://github.com/dotnet/dotnet-docker/issues/322) so that a single logical tag, like `2.0-runtime`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet:2.0-runtime` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines.\r\n\r\n[.NET Framework](https://github.com/dotnet/announcements/issues/36) Docker images are also using manifest lists for the same reason.\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be.\r\n"},{"Id":"6766996801","Type":"IssuesEvent","CreatedAt":"2017-10-26T00:24:01","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/36","RelatedDescription":"Opened issue \"microsoft/dotnet-framework images now support Windows Server 1709\" (#36) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released earlier this month. [microsoft/windowsservercore](https://hub.docker.com/r/microsoft/windowsservercore/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/).\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnet](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #35](https://github.com/Microsoft/dotnet-framework-docker/issues/35)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #31](https://github.com/Microsoft/dotnet-framework-docker/pull/31)\r\n* [microsoft/dotnet-framework-docker #34](https://github.com/Microsoft/dotnet-framework-docker/pull/34)\r\n* [microsoft/dotnet-framework-docker #32](https://github.com/Microsoft/dotnet-framework-docker/issues/32)\r\n\r\n.NET Framework Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\n.NET Framework 3.5 and 4.7.1 images are available for Windows Server 1709. Windows Server 1709 includes the .NET Framework 4.7.1. .NET Framework 4.6.2 and .NET Framework 4.7 images are only available with Windows Server 2016 images. You can see an example of 1709-based images in the following example.\r\n\r\n![.NET Framework Windows 1709 images](https://user-images.githubusercontent.com/2608468/32028249-6684a82c-b9a2-11e7-8afa-1b1abf89eb3b.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Framework images with the tag substring `windowsservercore-1709` and Windows Server 2016 images with the tag substring `windowsservercore-10.0.14393`. You will likely notice that the 1709-based images are easier to identify than the Windows Server 2016 ones. \r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Framework images will adopt [manifest lists](https://github.com/Microsoft/dotnet-framework-docker/issues/32) so that a single logical tag, like `4.7.1`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet-framework:4.7.1` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines. [.NET Core](https://hub.docker.com/r/microsoft/dotnet) Docker images use this same feature to support Linux and Windows hosts and AMD64 and ARM32 hosts with the same logical tag, like `2.0-runtime`.\r\n\r\nThe following tags will be updated to use manifest lists:\r\n\r\n- `latest`\r\n- `4.7.1`\r\n- `3.5`\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be."},{"Id":"6761784781","Type":"IssuesEvent","CreatedAt":"2017-10-25T04:03:38","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/35","RelatedDescription":"Opened issue \"microsoft/dotnet-framework latest tag updated to 4.7.1\" (#35) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework latest tag updated to 4.7.1\r\n\r\nThe [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/) was released earlier this month. The [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework) `latest` [tag](https://hub.docker.com/r/microsoft/dotnet-framework/tags/) was also updated.\r\n\r\nThe .NET Framework 4.7.1 is represented by the `microsoft/dotnet-framework:4.7.1` tag.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #33](https://github.com/Microsoft/dotnet-framework-docker/issues/33)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #28](https://github.com/Microsoft/dotnet-framework-docker/pull/28)\r\n* [microsoft/dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework 4.7.1 image is now available as a Docker image. The `latest` tag points to the same image.\r\n\r\nThe following repos were updated:\r\n\r\n* [microsoft/asp](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\nThe [microsoft/dotnet-framework-samples](https://hub.docker.com/r/microsoft/dotnet-framework-samples) repo has not yet been updated.\r\n\r\nWe recommend that you use version-specific tags for production apps. For experimentation or while an application is in development, using the `latest` tag is a fine practice.\r\n\r\nWe recently found a [significant performance issue with .NET Framework Docker images](https://github.com/dotnet/announcements/issues/33). The .NET Framework 4.7.1 image includes the fix for that problem.\r\n"},{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6808532539","Type":"PullRequestEvent","CreatedAt":"2017-11-04T04:10:57","Actor":"jcdickinson","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14863","RelatedDescription":"Opened pull request \"HashCode based on xxHash32\" (#14863) at dotnet/coreclr","RelatedBody":"## [Migrated Pull Request](https://github.com/dotnet/corefx/pull/25013)\r\n\r\nSee the original PR for full discussion on the code.\r\n\r\nFixes [\"Proposal: Add System.HashCode to make it easier to generate good hash codes.\"](https://github.com/dotnet/corefx/issues/14354) in corefx.\r\n\r\nWorks by maintaining the xxHash32 state variables (v1 -> v4, length) as well as a queue of values that fall outside of the block size (16 bytes/4 ints). The seed is initialized to random bytes.\r\n\r\nTests against known xxHash32 vectors are provided in the original pull request.\r\n\r\n## [Performance](https://github.com/jcdickinson/Benchmarks/tree/corefx-hashcode)\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.9, OS=Windows 10 Redstone 2 (10.0.15063)\r\nProcessor=Intel Core i7-4800MQ CPU 2.70GHz (Haswell), ProcessorCount=8\r\nFrequency=2630627 Hz, Resolution=380.1375 ns, Timer=TSC\r\n.NET Core SDK=2.0.2\r\n  [Host]     : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT\r\n  DefaultJob : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT\r\n\r\n\r\n```\r\n |                  Method |     Mean |     Error |    StdDev | Scaled |\r\n |------------------------ |---------:|----------:|----------:|-------:|\r\n |                  Unsafe | 79.98 ns | 1.4723 ns | 1.3772 ns |   1.00 |\r\n |    'Calls, No Inlining' | 40.34 ns | 0.1778 ns | 0.1576 ns |   0.50 |\r\n | 'Unrolled, No Inlining' | 12.19 ns | 0.0433 ns | 0.0384 ns |   0.15 |\r\n |       'Calls, Inlining' | 34.55 ns | 0.1372 ns | 0.1216 ns |   0.43 |\r\n |    'Unrolled, Inlining' | 12.22 ns | 0.0885 ns | 0.0785 ns |   0.15 |\r\n\r\n## Deviations from xxHash32\r\n\r\n* Length is stored as the number of hashed fields (not bytes). It is multiplied at the end by 4 so that it behaves exactly like xxHash32.\r\n* The structure won't accept more than `uint.MaxValue` values, failing with an `OverflowException`. This is to prevent the possibility of it re-initializing.\r\n* The code that mixes in individual bytes is omitted - this struct only accepts `int`.\r\n\r\n\r\n## 3rd Party Code\r\n\r\nSubmission containing materials of a third party: \r\n\r\n | Author | Project | License | Comments |\r\n |------- |--------:|--------:|---------:|\r\n | Cyan4973 | [xxHash](https://github.com/Cyan4973/xxHash) | BSD | Reference, not copied code |\r\n\r\ncc: @morganbr"},{"Id":"6808312221","Type":"PullRequestEvent","CreatedAt":"2017-11-04T01:01:53","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/11291","RelatedDescription":"Closed pull request \"[WIP] Re-enable queryperformancecounter PAL test\" (#11291) at dotnet/coreclr","RelatedBody":"I was unable to reproduce an issue with the test locally on OSX, so I am\r\ntrying to re-enable the test again and see if the problem due to which the test was disabled still repros\r\nin the lab."},{"Id":"6808279206","Type":"PullRequestEvent","CreatedAt":"2017-11-04T00:39:40","Actor":"adiaaida","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14845","RelatedDescription":"Merged pull request \"Fix perf-prep for throughput\" (#14845) at dotnet/coreclr","RelatedBody":"There is a missing ! before checking to see if the throughput benchmarks\r\nhave already been downloaded. Currently, we download them if they\r\nalready exist, where we want to download them if they don't already\r\nexist. This change fixes that."},{"Id":"6808239348","Type":"PullRequestEvent","CreatedAt":"2017-11-04T00:16:55","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/11291","RelatedDescription":null,"RelatedBody":"I was unable to reproduce an issue with the test locally on OSX, so I am\r\ntrying to re-enable the test again and see if the problem due to which the test was disabled still repros\r\nin the lab."},{"Id":"6808222365","Type":"PullRequestEvent","CreatedAt":"2017-11-04T00:08:06","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14489","RelatedDescription":"Merged pull request \"Print duration to xunit output from `runtest.sh`\" (#14489) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6808114802","Type":"IssuesEvent","CreatedAt":"2017-11-03T23:18:14","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7892","RelatedDescription":"Closed issue \"error NU1605:   Microsoft.AspNetCore.All (>= 2.0.0) -> Microsoft.EntityFrameworkCore.SqlServer (>= 2.0.0) \\r\" (#7892) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet restore`\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n` Restoring packages for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj...\r\n  Restoring packages for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\ClassLibrary.csproj...\r\n  Restoring packages for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj...\r\n  Restore completed in 110.05 ms for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\ClassLibrary.csproj.\r\n  Restore completed in 111.51 ms for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\ClassLibrary.csproj.\r\n  Generating MSBuild file C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\obj\\ClassLibrary.csproj.nuget.g.props.\r\n  Restore completed in 1.18 sec for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\ClassLibrary.csproj.\r\n  Restore completed in 1.89 sec for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj.\r\nC:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj : error NU1102: Unable to find package Microsoft.EntityFrameworkCore.SqlServer.Design with version (>= 2.0.0)\\r\r\nC:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj : error NU1102:   - Found 14 version(s) in nuget.org [ Nearest version: 2.0.0-preview1-final ]\\r\r\nC:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj : error NU1102:   - Found 1 version(s) in CliFallbackFolder [ Nearest version: 2.0.0-preview1-final ]\r\n  Generating MSBuild file C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\obj\\LibraryCore.csproj.nuget.g.props.\r\n  Restore failed in 8.64 sec for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj.`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n`.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.10586\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n`\r\n\r\n\r\n\r\n\r\n"},{"Id":"6808088196","Type":"PullRequestEvent","CreatedAt":"2017-11-03T23:06:54","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7962","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#7962) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171103-070036\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171103-070036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6808077662","Type":"PullRequestEvent","CreatedAt":"2017-11-03T23:02:53","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7963","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25903-02 (master)\" (#7963) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6806600729","Type":"IssuesEvent","CreatedAt":"2017-11-03T16:43:01","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7956","RelatedDescription":"Closed issue \"Want to migrate on dnx to cli with entity framework core #7942\" (#7956) at dotnet/cli","RelatedBody":"Hi Livar,\r\nThanks for updating my previous issue #7942  !!\r\nI am facing issue so reopen it again and I have taken  reference below url\r\nhttps://github.com/dotnet/cli/blob/master/Documentation/ProjectJsonToCSProj.md\r\n\r\nand found below issue with migrate command\r\nError :\r\nPS C:\\yoyo-center-management-system-master\\CenterManagementSystem\\DEV\\src\\CenterManagementSystem.Platform> dotnet migrate\r\nNo executable found matching command \"dotnet-migrate\"\r\n\r\nI have created separate console application with the use of below cli command\r\n\r\ndotnet new\r\ndotnet restore\r\ndotnet build\r\ndotnet run\r\n\r\nAll command working fine but unable to proceed further like What is my next step ?\r\nI am sharing you my powershall command and status as below\r\n\r\nPS C:\\test3\\myApp> dotnet build\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nmyApp -> C:\\test3\\myApp\\bin\\Debug\\netcoreapp2.0\\myApp.dll\r\n\r\nBuild succeeded.\r\n0 Warning(s)\r\n0 Error(s)\r\n\r\nTime Elapsed 00:00:01.02\r\nPS C:\\test3\\myApp> dotnet run\r\nHello World!\r\nPS C:\\test3\\myApp> dotnet migrate\r\nNo project.json file found in 'C:\\test3\\myApp'.\r\nMigration failed.\r\nPS C:\\test3\\myApp>\r\n\r\nPlease suggest me for same ?"},{"Id":"6805975259","Type":"PullRequestEvent","CreatedAt":"2017-11-03T14:47:18","Actor":"eerhardt","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7960","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25902-04 (master)\" (#7960) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6804167361","Type":"PullRequestEvent","CreatedAt":"2017-11-03T07:00:38","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7962","RelatedDescription":"Opened pull request \"Merge release/15.5 to master\" (#7962) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171103-070036\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171103-070036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6799906039","Type":"IssuesEvent","CreatedAt":"2017-11-02T12:07:20","Actor":"rebulanyum","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/571","RelatedDescription":"Opened issue \"System.Runtime.Serialization.Json nuget package error\" (#571) at dotnet/standard","RelatedBody":"Hello.\r\n\r\nI've started to use .NetCore version=1.0.0-preview2-003121 with Visual Studio 2015. My project.json file is below:\r\n\r\n```javascript\r\n{\r\n  \"version\": \"1.0.0-*\",\r\n  \"frameworks\": {\r\n    \"netstandard2.0\": {\r\n      \"dependencies\": {\r\n        \"System.Runtime.Serialization.Xml\": \"4.3.0\",\r\n        \"System.Runtime.Serialization.Json\": \"4.3.0\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nMy code file is below:\r\n```csharp\r\nusing System.Runtime.Serialization;\r\nusing System.Runtime.Serialization.Json;\r\n\r\nnamespace NetCoreTests\r\n{\r\n    public class Class1\r\n    {\r\n        public Class1()\r\n        {\r\n            XmlObjectSerializer ser = new DataContractJsonSerializer(typeof(int));\r\n        }\r\n    }\r\n}\r\n```\r\nAnd this is the error I get when I try to build the solution:\r\n```\r\nCS0029\tCannot implicitly convert type 'System.Runtime.Serialization.Json.DataContractJsonSerializer' to 'System.Runtime.Serialization.XmlObjectSerializer'\tNetCoreTests..NETStandard,Version=v2.0\r\n```\r\n\r\nLooks like `DataContractJsonSerializer` class in System.Runtime.Serialization.Json nuget package doesn't inherit `XmlObjectSerializer` class in System.Runtime.Serialization.Xml nuget package. I can see that in general there's no dependency between these 2 nuget packages; however, if you check 4 and later versions of .Net Framework `DataContractJsonSerializer` always inherits from `XmlObjectSerializer` because as far as I know every DataContractSerializer inherits from `XmlObjectSerializer`. Even in this repository this inheritance exists:\r\nhttps://github.com/dotnet/standard/blob/master/netstandard/ref/System.Runtime.Serialization.cs#L332\r\n\r\nCan you please fix the nuget packages?"},{"Id":"6797584525","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:43:27","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/570","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02201-04 (master)\" (#570) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6808475285","Type":"IssuesEvent","CreatedAt":"2017-11-04T03:17:46","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24874","RelatedDescription":"Closed issue \"EventLogEntryCollectionTests.CheckingEntryEqualityAndIndex failed with ArgumentException\" (#24874) at dotnet/corefx","RelatedBody":"https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/94474b7e9325802a019eace4ffce5cb6add96b0b/workItem/System.Diagnostics.EventLog.Tests/analysis/xunit/System.Diagnostics.Tests.EventLogEntryCollectionTests~2FCheckingEntryEqualityAndIndex\r\n```\r\nUnhandled Exception of Type System.ArgumentException\r\nMessage :\r\nSystem.ArgumentException : Index -1 is out of bounds.\r\nStack Trace :\r\n   at System.Diagnostics.EventLogInternal.GetEntryAt(Int32 index)\r\n   at System.Diagnostics.EventLogEntryCollection.get_Item(Int32 index)\r\n   at System.Diagnostics.Tests.EventLogEntryCollectionTests.CheckingEntryEqualityAndIndex()\r\n```"},{"Id":"6808475275","Type":"PullRequestEvent","CreatedAt":"2017-11-04T03:17:46","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25048","RelatedDescription":"Merged pull request \"EventLog GetEntry Exception\" (#25048) at dotnet/corefx","RelatedBody":"This Pr deals with the issue of system.argument exception while retrieving entry from the eventlog.\r\n\r\nFixes #24874 "},{"Id":"6808292241","Type":"IssuesEvent","CreatedAt":"2017-11-04T00:48:15","Actor":"krwq","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25046","RelatedDescription":"Closed issue \"Port back improvements made to PlatformDetection related to version detection\" (#25046) at dotnet/corefx","RelatedBody":"Changes: https://github.com/dotnet/corefx/pull/24340/files\r\nThis is already in PR: https://github.com/dotnet/corefx/pull/24531\r\n"},{"Id":"6808268060","Type":"PullRequestEvent","CreatedAt":"2017-11-04T00:33:10","Actor":"krwq","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25057","RelatedDescription":"Merged pull request \"Rename PlatformDetection.OSXKernelVersion to PlatformDetection.OSXVersion\" (#25057) at dotnet/corefx","RelatedBody":"This is addressing feedback which was missed in https://github.com/dotnet/corefx/pull/24531\r\n\r\nBackground: My previous PR has changed underlying implementation of OSXKernelVersion to use core-setup implementation which uses OSX versioning system instead of OSX kernel versioning system. I've changed tests to use new numbers but did not update the name of the property\r\n\r\ncc: @tarekgh"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6808141224","Type":"IssuesEvent","CreatedAt":"2017-11-03T23:29:27","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/11737","RelatedDescription":"Closed issue \"Unexpected behavior of IOperation\" (#11737) at dotnet/roslyn","RelatedBody":"IOperation routinely returns IInvalidExpression instance on expressions that are valid.  For example, in the following code:\n\n``` vb\nOption Strict On\nImports System.Runtime.CompilerServices\n\nNamespace NS1\n    Class C\n        Sub Bar()\n            Test(5)  ' Test(5) is invalid because there is no appropriate Import to bring it in.\n        End Sub\n    End Class\nEnd Namespace\nNamespace NS2\n    Module A\n        <Extension()>\n        Sub Test(ByVal ec As NS1.C, ByVal n As Integer)\n        End Sub\n    End Module\nEnd Namespace\n```\n\nThis was unexpected to us when using the API.  While i could understand that 'Test' could not be resolved, we still expected to get an IInvocationExpression with appropriate ArgumentsInSourceOrder.  It was also expected that .TargetMethod could be null here as we could not find a suitable method.\n\nThe primary problem is that once you get an IInvalidExpression back, there's effectively nothing you can glean from it.  This means that it's harder to write features that operate on VB/C# agnostically in the presence of errors.  Instead, specific code has to be written again for each language again.\n\nIdeally, in the presence of errors, the information reported back would still be as accurate as possible, without falling back to InvalidExpression/InvalidStatement and the like.\n## \n\nAnother example is:   \"foo *= x\".  If 'x' fails to bind, then we have an ICompoundAssignmentExpression (yaay,) that has a BinaryExpressionKind of Invalid (boo).  That means we have no way to tell at the IOperation level that this was even an attempt to Multiply.\n\nNote: it's understandable that other information would be missing.  For example, it makes sense that we can't tell if this is int-multiple versus a long-multiply.  Similarly, we can't know if there was some operator that was invoked here.  However, we can still tell that this was a multiply, but that information gets lost due to the error below.\n"},{"Id":"6808138967","Type":"IssuesEvent","CreatedAt":"2017-11-03T23:28:27","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18722","RelatedDescription":"Reopened issue \"Add `IInvalidInvocationExpression` interafce\" (#18722) at dotnet/roslyn","RelatedBody":"Currently in C#, an invalid invocation is represented by an `IInvocationExpression` operation, but it might violate the contract of `IInvocationExpression`. For example, we can't provide a list of arguments in evaluation order correctly if we have extra arguments that don't match any parameter, or multiple arguments are matching to a single parameter, etc. On the other hand, making an invalid invocation an `IInvalidExpression` would solve the problem but it would be unnecessarily lossy since in many cases compiler does have more details that users might find useful to do further analysis.\r\n\r\nThe goal would be to expose as much information of a invalid invocation as possible at best effort, without violating the API contract of `IInvocationExpression`, hence the new `IInvalidInvocationExpression` interface.\r\n\r\nHere's the notes from our discussion:\r\n- Will be a sibling of `IInvocationExpression` (child of `IHasArgumentExpression`)\r\n- Should contain candidate symbols and candidate reason.\r\n- Has a list `ArgumentValues` of type `IOperation` that were passed to the invocation.\r\n- And a receiver of type` IOperatoin`\r\n- We would also like an api/extension `TryGetParameterForArgumentValue`, indicating it's best effort and may fail\r\n\r\n@dotnet/analyzer-ioperation "},{"Id":"6808110503","Type":"IssuesEvent","CreatedAt":"2017-11-03T23:16:24","Actor":"MkazemAkhgary","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23012","RelatedDescription":"Opened issue \"Add Go To Implementation option for Deconstruct calls\" (#23012) at dotnet/roslyn","RelatedBody":"Currently (without use of resharper) there is no convenient way to know which deconstruct is being resolved when you for example write this.\r\n\r\n    var (x, y) = GetResult();\r\n\r\nit would be nice if there was a easy an convenient way to navigate to deconstruct overload that is being used.\r\n"},{"Id":"6808007721","Type":"IssuesEvent","CreatedAt":"2017-11-03T22:36:37","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21740","RelatedDescription":"Closed issue \"Handle checked conversions in VB\" (#21740) at dotnet/roslyn","RelatedBody":"See https://github.com/dotnet/roslyn/pull/21407#discussion_r135122873"},{"Id":"6807979948","Type":"PullRequestEvent","CreatedAt":"2017-11-03T22:26:17","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22764","RelatedDescription":"Closed pull request \"Enable concurrent GC for VBCSCompiler\" (#22764) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6808505938","Type":"PullRequestEvent","CreatedAt":"2017-11-04T03:46:19","Actor":"hippiehunter","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4872","RelatedDescription":"Opened pull request \"implement newobj for WASM using malloc\" (#4872) at dotnet/corert","RelatedBody":"@morganbr\r\nThis implements the remainder of #4551 but I don't see a way to test it without Reflection.\r\nFixes #4539, it's somewhat unrelated except that the lack of an initobj implementation was wrecking the evaluation stack in the main test program. \r\nNo longer breaks #4863 \r\nFixes #4512"},{"Id":"6808285792","Type":"PullRequestEvent","CreatedAt":"2017-11-04T00:43:55","Actor":"adityamandaleeka","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4871","RelatedDescription":"Opened pull request \"Improve unwinder initialization perf\" (#4871) at dotnet/corert","RelatedBody":"This changes `InitializeUnwindContextAndCursor` so that the IP register is set correctly prior to initializing the unwind cursor, rather than having it be an incorrect value at first and then fixing it after initialization. Libunwind sets a bunch of internal structures based on the value of the IP register, so by setting the IP after initialization, we were effectively making it do double the work (once for the \"wrong\" IP during cursor initialization, and then later for the correct one). This makes a sizeable difference in how fast we are able to do `VirtualUnwind`.\r\n\r\nThis change, coupled with the speedup to `FindMethodInfo` done in #4869, makes the allocation benchmark mentioned in that PR (with 100 inactive threads) run about 26% faster on my machine. The perf improvement on that benchmark with this change relative to what's checked in now (which includes the work done in #4869) is ~12%.\r\n\r\n@janvorli @jkotas @sergiy-k "},{"Id":"6808211162","Type":"PullRequestEvent","CreatedAt":"2017-11-04T00:02:12","Actor":"adityamandaleeka","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4869","RelatedDescription":"Merged pull request \"Speed up locating method info on Unix\" (#4869) at dotnet/corert","RelatedBody":"`InitializeUnwindContextAndCursor` was being used from `FindProcInfo`, which gets called on some perf-critical paths (such as when scanning for GC roots). However, it does some extra work which we don't need when just trying to find the info for an IP which was causing it to be much slower than it needs to be.\r\n\r\nThis change adds a new routine to get the `unw_proc_info_t`. This is used in the case where we are just trying to find the MethodInfo for a PC. Before, we were unnecessarily allocating stack space for a full-on REGDISPLAY which was all zeroes except for the IP portion, and then (after cursor initialization) copying the zeroed registers to the unwind cursor which didn't serve any purpose since all we wanted was the proc info.\r\n\r\nI've been measuring the performance using a simple allocation benchmark to which I added 100 threads that are just waiting (but will still get scanned during GCs). The total duration to run the benchmark goes down about 16% with just this one change. The gains are obviously smaller with fewer threads, but still very significant. Profiling data revealed that the extra work removed by this change accounted for roughly a quarter of what was being done by the `GcScanRootsWorker`, so we get a sizeable perf gain there.\r\n\r\nThis is only the first change I'm making in this area. I have a few more changes and perf improvements to all of this unwind-related code that I'll be sending out.\r\n\r\n@janvorli @jkotas @sergiy-k PTAL"},{"Id":"6808079962","Type":"PullRequestEvent","CreatedAt":"2017-11-03T23:03:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4868","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4868) at dotnet/corert","RelatedBody":""},{"Id":"6807963433","Type":"PullRequestEvent","CreatedAt":"2017-11-03T22:20:31","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4870","RelatedDescription":"Opened pull request \"Support for dotnet publish\" (#4870) at dotnet/corert","RelatedBody":"Support for the dotnet publish command. Built on top of changes made by @nattress .\r\n\r\nNuGet packages that target .NETCore specifically can be published safely, but most others targeting the .NETFramework cannot. Specifically anything to do with Reflection.Emit will fail at compile-time. Is this something we can/want to support? \r\n\r\nAs an aside, I'm certain there is a more elegant switch implementation than the one below. \r\n\r\ncc @MichalStrehovsky @nattress "},{"Id":"6807712986","Type":"PullRequestEvent","CreatedAt":"2017-11-03T21:04:18","Actor":"adityamandaleeka","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4869","RelatedDescription":"Opened pull request \"Speed up locating method info on Unix\" (#4869) at dotnet/corert","RelatedBody":"`InitializeUnwindContextAndCursor` was being used from `FindProcInfo`, which gets called on some perf-critical paths (such as when scanning for GC roots). However, it does some extra work which we don't need when just trying to find the info for an IP which was causing it to be much slower than it needs to be.\r\n\r\nThis change adds a new routine to get the `unw_proc_info_t`. This is used in the case where we are just trying to find the MethodInfo for a PC. Before, we were unnecessarily allocating stack space for a full-on REGDISPLAY which was all zeroes except for the IP portion, and then (after cursor initialization) copying the zeroed registers to the unwind cursor which didn't serve any purpose since all we wanted was the proc info.\r\n\r\nI've been measuring the performance using a simple allocation benchmark to which I added 100 threads that are just waiting (but will still get scanned during GCs). The total duration to run the benchmark goes down about 16% with just this one change. The gains are obviously smaller with fewer threads, but still very significant. Profiling data revealed that the extra work removed by this change accounted for roughly a quarter of what was being done by the `GcScanRootsWorker`, so we get a sizeable perf gain there.\r\n\r\nThis is only the first change I'm making in this area. I have a few more changes and perf improvements to all of this unwind-related code that I'll be sending out.\r\n\r\n@janvorli @jkotas @sergiy-k PTAL"},{"Id":"6807649730","Type":"PullRequestEvent","CreatedAt":"2017-11-03T20:48:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4868","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4868) at dotnet/corert","RelatedBody":""},{"Id":"6807648835","Type":"PullRequestEvent","CreatedAt":"2017-11-03T20:47:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4865","RelatedDescription":"Merged pull request \"[armel][cross] Documentation how to use cross compilation\" (#4865) at dotnet/corert","RelatedBody":"Added documentations and fixed few typos\r\n\r\n@dotnet/arm32-corert-contrib PTAL, any suggestions and fixes are welcome"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6802147263","Type":"PullRequestEvent","CreatedAt":"2017-11-02T19:08:29","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1710","RelatedDescription":"Opened pull request \"Don't exclude \"packages\" folder from default globs\" (#1710) at dotnet/sdk","RelatedBody":"Fixes #1708 \r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"926165116084658176","CreatedAt":"2017-11-02T19:12:25+00:00","UserScreenname":"dotnet","Text":"Great post and resources by @cesardelatorre: Modernize existing .NET apps with Windows Containers and #Azure https://t.co/c8HL8dfH4d #dotnet","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":69,"FavoriteCount":39,"RawContent":null},{"Id":"925135073921310720","CreatedAt":"2017-10-30T22:59:24+00:00","UserScreenname":"dotnet","Text":"Experience real time test discovery in Test Explorer https://t.co/niKJvslM5p #visualstudio","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":61,"FavoriteCount":38,"RawContent":null},{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":130,"FavoriteCount":78,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":22,"RawContent":null},{"Id":"923037554265296896","CreatedAt":"2017-10-25T04:04:36+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework latest tag updated to 4.7.1 https://t.co/NuV11juPrm /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null},{"Id":"922503653402882049","CreatedAt":"2017-10-23T16:43:04+00:00","UserScreenname":"dotnet","Text":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018  https://t.co/TPKfGvwNLH /cc @intel","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":96,"FavoriteCount":56,"RawContent":null},{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":20,"RawContent":null},{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":387,"FavoriteCount":347,"RawContent":null}]}},"RunOn":"2017-11-04T05:30:20.950296Z","RunDurationInMilliseconds":7664}