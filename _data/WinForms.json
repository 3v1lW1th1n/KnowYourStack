{"Data":{"GitHub":{"Issues":[{"Id":"394632123","IsPullRequest":true,"CreatedAt":"2018-12-28T19:52:22","Actor":"dotnet-maestro[bot]","Number":"271","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18621.6\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/271","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#271)"},{"Id":"394687412","IsPullRequest":false,"CreatedAt":"2018-12-28T17:47:29","Actor":"hughbe","Number":"272","RawContent":null,"Title":"Public DataGridViewCellPaintingEventArgs constructor does not set the `dataGridView` field causing NullRefs","State":"open","Body":"The following constructor is broken:\r\n```cs\r\n        public DataGridViewCellPaintingEventArgs(DataGridView dataGridView,\r\n                                                 Graphics graphics, \r\n                                                 Rectangle clipBounds,\r\n                                                 Rectangle cellBounds, \r\n                                                 int rowIndex, \r\n                                                 int columnIndex, \r\n                                                 DataGridViewElementStates cellState,\r\n                                                 object value,\r\n                                                 object formattedValue,\r\n                                                 string errorText,\r\n                                                 DataGridViewCellStyle cellStyle,\r\n                                                 DataGridViewAdvancedBorderStyle advancedBorderStyle,\r\n                                                 DataGridViewPaintParts paintParts)\r\n        {\r\n            if (dataGridView == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(dataGridView));\r\n            }\r\n            if (graphics == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(graphics));\r\n            }\r\n            if (cellStyle == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(cellStyle));\r\n            }\r\n            if ((paintParts & ~DataGridViewPaintParts.All) != 0)\r\n            {\r\n                throw new ArgumentException(string.Format(SR.DataGridView_InvalidDataGridViewPaintPartsCombination, \"paintParts\"));\r\n            }\r\n            this.graphics = graphics;\r\n            this.clipBounds = clipBounds;\r\n            this.cellBounds = cellBounds;\r\n            this.rowIndex = rowIndex;\r\n            this.columnIndex = columnIndex;\r\n            this.cellState = cellState;\r\n            this.value = value;\r\n            this.formattedValue = formattedValue;\r\n            this.errorText = errorText;\r\n            this.cellStyle = cellStyle;\r\n            this.advancedBorderStyle = advancedBorderStyle;\r\n            this.paintParts = paintParts;\r\n        }\r\n```\r\n\r\nThe `private DataGridView dataGridView;` field of `DataGridViewCellPaintingEventArgs` is not set so defaults to `null`, so all methods using the args cause a NullReferenceException!!","Url":"https://github.com/dotnet/winforms/issues/272","RelatedDescription":"Open issue \"Public DataGridViewCellPaintingEventArgs constructor does not set the `dataGridView` field causing NullRefs\" (#272)"},{"Id":"393901974","IsPullRequest":true,"CreatedAt":"2018-12-27T22:06:55","Actor":"reaction1989","Number":"268","RawContent":null,"Title":"Remove PackageReference of System.Drawing.Primitives","State":"closed","Body":"#194 ","Url":"https://github.com/dotnet/winforms/pull/268","RelatedDescription":"Closed or merged PR \"Remove PackageReference of System.Drawing.Primitives\" (#268)"},{"Id":"393671543","IsPullRequest":true,"CreatedAt":"2018-12-27T22:06:26","Actor":"dotnet-maestro[bot]","Number":"265","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18621.6\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/265","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#265)"},{"Id":"394162964","IsPullRequest":false,"CreatedAt":"2018-12-26T12:58:47","Actor":"Lohnegrim","Number":"270","RawContent":null,"Title":"C1FlexGrid needs System.Drawing.Design.UITypeEditorEditStyle in System.Drawing","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\nI tried to convert one of our project to .Net Core 3.0 with WinForms, and it compiles and works fine for the most parts, but one of the external components(C1FlexGrid) we use always throws a error:\r\nSystem.TypeLoadException: Could not load type 'System.Drawing.Design.UITypeEditorEditStyle' from assembly 'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\nEven if I add a different Assembly that Implements 'System.Drawing.Design.UITypeEditorEditStyle' then the Error Persists.\r\n\r\n**Actual behavior:**\r\nSystem.TypeLoadException: Could not load type 'System.Drawing.Design.UITypeEditorEditStyle' from assembly 'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n   at #s5.#m7.#R6(Int32 #j, Int32 #l)\r\n   at #s5.#Ojb.HitTest(Int32 #zq, Int32 #rP)\r\n   at #s5.#Ojb.#8ib(MouseEventArgs #tQ)\r\n   at C1.Win.C1FlexGrid.C1Flex\r\nGridBase.OnMouseMove(MouseEventArgs e)\r\n\r\n**Expected behavior:**\r\nNo Error\r\n\r\n**Minimal repro:**\r\n[vbc.zip](https://github.com/dotnet/winforms/files/2710257/vbc.zip)\r\nI have attached a Sample Project, if it doesn't work, then you could try to download a trial from https://www.grapecity.com/en/download/componentone-studio and folow these steps to recrerate the sample:\r\n1. dotnet new winforms\r\n2. Edit 'Form1.Designer.cs' and add these lines at the end of 'InitializeComponent':\r\nC1.Win.C1FlexGrid.C1FlexGrid fg = new C1.Win.C1FlexGrid.C1FlexGrid();\r\n            this.Controls.Add(fg);\r\n            fg.Dock= System.Windows.Forms.DockStyle.Fill;\r\n            fg.BringToFront();\r\n","Url":"https://github.com/dotnet/winforms/issues/270","RelatedDescription":"Open issue \"C1FlexGrid needs System.Drawing.Design.UITypeEditorEditStyle in System.Drawing\" (#270)"},{"Id":"393920920","IsPullRequest":false,"CreatedAt":"2018-12-24T18:55:21","Actor":"Symbai","Number":"269","RawContent":null,"Title":"FolderBrowserDialog - Multiselect","State":"open","Body":"Thanks for https://github.com/dotnet/winforms/issues/1. While the design from CommonOpenFileDialog from Windows API Codec pack has now shipped into the Folderbrowserdialog which is really amazing, sadly it does not support multiselection where CommonOpenFileDialog from the windows API codec pack does.\r\n\r\nIt would be nice to have support for selecting multiple folders, just like with CommonOpenFileDialog { IsFolderPicker = true }. It would needs a new property called SelectedPaths and a boolean to enable multi selection.","Url":"https://github.com/dotnet/winforms/issues/269","RelatedDescription":"Open issue \"FolderBrowserDialog - Multiselect\" (#269)"},{"Id":"393830320","IsPullRequest":false,"CreatedAt":"2018-12-24T18:49:40","Actor":"zangxx66","Number":"267","RawContent":null,"Title":"Winforms application for .Net Core 3.0 cant run in OSX","State":"closed","Body":"* .NET Core Version: 3.0 Preview1\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:** cant work\r\n\r\n**Actual behavior:** exceptions \r\n\r\n**Expected behavior:** Could not load file or assembly \"System.Windows.Forms\" The System cannot the file specified\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/267","RelatedDescription":"Closed issue \"Winforms application for .Net Core 3.0 cant run in OSX\" (#267)"},{"Id":"393768100","IsPullRequest":false,"CreatedAt":"2018-12-23T17:40:11","Actor":"zangxx66","Number":"266","RawContent":null,"Title":"Publish winforms application miss file in .Net Core 3.0","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:** I set a icon,but it dont work atfer publish,expction is cant found icon file.\r\n\r\n**Actual behavior:** exceptions\r\n\r\n**Expected behavior:** can't find file \"xxx.ico\"\r\n\r\n**Minimal repro:** Publish action not include reference file,and run exe file must cmd,this isnot reasonable\r\n","Url":"https://github.com/dotnet/winforms/issues/266","RelatedDescription":"Open issue \"Publish winforms application miss file in .Net Core 3.0\" (#266)"},{"Id":"393451370","IsPullRequest":true,"CreatedAt":"2018-12-21T17:29:12","Actor":"dotnet-maestro[bot]","Number":"264","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18620.6\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/264","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#264)"},{"Id":"392861490","IsPullRequest":false,"CreatedAt":"2018-12-20T19:53:11","Actor":"Botao-Liu","Number":"262","RawContent":null,"Title":"Cannot open the Winforms .Net Core application in d15.9 version of VS","State":"closed","Body":"**OS**: RS5 X64\r\n**VS**: Dev15 d15.9 28307.253 + .Net Core 3.0.100-Preview-009844\r\n\r\n**More Info**: This issue cannot repro in Dev16 d16.0stg latest build.\r\n\r\n**Steps to Reproduce**:\r\n1. install d15.9 version of VS and .net core 3.0\r\n2. Create a Winforms NETCore template application using command: dotnet new winforms -o MyWinformsApp\r\n3. open the application using VS.\r\n\r\n**Actual:**\r\nVS cannot open the Winforms .Net Core application, and receive following error:\r\n![11121121](https://user-images.githubusercontent.com/45864989/50259842-c6214d00-0440-11e9-8b30-3db58bad5552.png)\r\n\r\n**Expected:**\r\nVS can open the Winforms .Net Core application successfully.","Url":"https://github.com/dotnet/winforms/issues/262","RelatedDescription":"Closed issue \"Cannot open the Winforms .Net Core application in d15.9 version of VS\" (#262)"},{"Id":"393037473","IsPullRequest":true,"CreatedAt":"2018-12-20T16:29:14","Actor":"dotnet-maestro[bot]","Number":"263","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18619.4\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/263","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#263)"},{"Id":"392155233","IsPullRequest":true,"CreatedAt":"2018-12-19T18:42:36","Actor":"StevenLiekens","Number":"256","RawContent":null,"Title":"Make WebBrowserUriTypeConverter secure by default","State":"closed","Body":"Previously, a string like `\"www.microsoft.com\"` would be converted to `\"http://www.microsoft.com\"`. This PR changes that behavior to use HTTPS.","Url":"https://github.com/dotnet/winforms/pull/256","RelatedDescription":"Closed or merged PR \"Make WebBrowserUriTypeConverter secure by default\" (#256)"},{"Id":"392592053","IsPullRequest":true,"CreatedAt":"2018-12-19T16:44:57","Actor":"dotnet-maestro[bot]","Number":"261","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/261","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#261)"},{"Id":"391781536","IsPullRequest":false,"CreatedAt":"2018-12-19T16:39:29","Actor":"pottereric","Number":"252","RawContent":null,"Title":"'PermissionSet' could not be found.","State":"closed","Body":"I just cloned the repo last night. When I try to build the application, I get 4 errors that say:\r\n\"The type or namespace name 'PermissionSet' could not be found\".\r\n\r\nI have the latest preview of the SDK installed. (3.0.100-preview-009812)\r\n\r\nIs there something else that I need?","Url":"https://github.com/dotnet/winforms/issues/252","RelatedDescription":"Closed issue \"'PermissionSet' could not be found.\" (#252)"},{"Id":"392411007","IsPullRequest":true,"CreatedAt":"2018-12-19T02:06:13","Actor":"ArrowCase","Number":"260","RawContent":null,"Title":"Add Ctrl+Backspace handler","State":"open","Body":"Add new handler to `ProcessCmdKey` of `TextBoxBase` and `ComboBox` controls which intercepts `Ctrl+Backspace` (or `Ctrl+Shift+Backspace`) and sends keystrokes to select and delete the word immediately preceding the text cursor.\r\n\r\nPreviously, for [weird historical reasons](https://blogs.msdn.microsoft.com/oldnewthing/20071011-00/?p=24823), the win32 API implicitly gave `Ctrl+Backspace` this kind of behavior only in single-line, autocomplete-enabled `TextBox` controls. In other cases, it would insert an ASCII `DELETE` character instead.\r\n\r\nIf a text selection is present, only the selection is deleted. This behavior is consistent with the `Ctrl+Delete` shortcut.\r\n\r\n(OUTDATED) Some notes on this implementation:\r\n* Using `SendKeys` does not suffice.\r\n    * If `^+{LEFT}{BACKSPACE}` were sent, the Control key would be considered released afterward. If the user continued holding Control and pressed Backspace a second time, it would act as a normal Backspace.\r\n    * If `+{LEFT}{BACKSAPCE}` were sent (with the safe assumption of the Control key already being active), then nothing would actually happen until the user *released* the Control key.\r\n* Since the Control key must be held to initiate this shortcut, we only send `Shift+Left`, not `Ctrl+Shift+Left`.\r\n* Since the Control key is held, we can't send `Backspace` to do the deletion or we would trigger the shortcut recursively. `Delete` is sent instead, which actually becomes `Ctrl+Delete`. Luckily, the `Ctrl+Delete` shortcut already has the behavior of just deleting the current selection if one exists.\r\n* `DeletePrecedingWord` is currently duplicated as I'm not sure of a good common location for it.\r\n\r\nResolves #259.","Url":"https://github.com/dotnet/winforms/pull/260","RelatedDescription":"Open PR \"Add Ctrl+Backspace handler\" (#260)"},{"Id":"392410849","IsPullRequest":false,"CreatedAt":"2018-12-19T02:05:25","Actor":"ArrowCase","Number":"259","RawContent":null,"Title":"Create proper Ctrl+Backspace shortcut in TextBox","State":"open","Body":"In Windows, `Ctrl+Backspace` commonly serves as a shortcut to delete the word immediately preceding the cursor. It is equivalent to `Ctrl+Shift+Left` followed by `Backspace`.\r\n\r\nIn WinForms, this shortcut works only in single-line `TextBox` controls which have autocomplete enabled. This is actually built into `SHAutoComplete` somewhere in the win32 API, and is a \"rogue feature\" with no documentation (some history [here](https://blogs.msdn.microsoft.com/oldnewthing/20071011-00/?p=24823)). If the `TextBox` is multi-line or doesn't have autocomplete on, `Ctrl+Backspace` inserts a DELETE character (ASCII 127) instead.\r\n\r\nNote: The `Ctrl+Delete` shortcut (which deletes the word following the cursor) works in all relevant WinForms controls.\r\n\r\nOutside of WinForms, the `Ctrl+Backspace` shortcut is nearly ubiquitous on Windows (as of October 2018, even Notepad finally has it!). As such, I propose properly implementing it in WinForms controls such as `TextBoxBase` and `ComboBox` with a custom handler for `Ctrl+Backspace`.\r\n\r\n***\r\n\r\nI've submitted a PR with one approach to add this shortcut, namely ~~using `SendInput`~~ sending native messages to simulate the aforementioned `Ctrl+Shift+Left, Backspace` keystrokes. I believe this is the right approach — as even the current autocomplete `TextBox` \"feature\" seems to be selecting the text and then deleting it if you watch closely.\r\n\r\nAnother possibility would be to use internal text selection functions rather than sending keystrokes. However, that requires replicating the logic dealing with word boundaries/punctuation currently used by `Ctrl+Shift+Left`, which is a bit quirky, not to mention wildly inconsistent between different Windows programs. We can consider this approach if the current PR is lacking.","Url":"https://github.com/dotnet/winforms/issues/259","RelatedDescription":"Open issue \"Create proper Ctrl+Backspace shortcut in TextBox\" (#259)"},{"Id":"392371153","IsPullRequest":true,"CreatedAt":"2018-12-18T23:01:37","Actor":"zsd4yr","Number":"258","RawContent":null,"Title":"Add License badge to readme","State":"closed","Body":"There was no license badge in the readme; it is common practice among github repositories to have this, especially among popular repos. \r\n\r\nexamples:\r\n- https://github.com/hyperium/hyper\r\n- https://github.com/GokuMohandas/practicalAI","Url":"https://github.com/dotnet/winforms/pull/258","RelatedDescription":"Closed or merged PR \"Add License badge to readme\" (#258)"},{"Id":"392237190","IsPullRequest":false,"CreatedAt":"2018-12-18T19:55:02","Actor":"ArrowCase","Number":"257","RawContent":null,"Title":"MissingMethodException from System.Security.Permissions when running application","State":"closed","Body":"This is an issue with running the hello world WinForms application after replacing the System.Windows.Forms binary with my locally built copy (i.e. to debug changes).\r\n\r\nSteps followed:\r\n\r\n* Install .NET Core 3.0.0 Preview 1 SDK with [x64 Installer](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview1-download.md) (can't use latest build due to #249)\r\n* `dotnet new winforms -o winformstest`\r\n* Run winformstest with `dotnet run`\r\n\r\nAt this point, the hello world application starts up and everything is fine.\r\n\r\n* Build winforms repo locally per [Developer Guide](https://github.com/dotnet/winforms/blob/master/Documentation/developer-guide.md) (completes with no errors or warnings)\r\n* Copy contents of `winforms\\artifacts\\bin\\System.Windows.Forms\\Debug\\netcoreapp3.0` to `Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App\\3.0.0-alpha-27128-4`\r\n* Run winformstest with `dotnet run`\r\n\r\nExpected results:\r\n\r\nThe hello world application still runs successfully.\r\n\r\nActual results:\r\n\r\n```\r\nSystem.MissingMethodException: Method not found: 'Void System.Security.Permissions.FileIOPermission..ctor(System.Security.Permissions.PermissionState)'.\r\n   at System.Windows.Forms.Application.EnableVisualStyles()\r\n   at winformstest.Program.Main(String[] args) in C:\\redacted\\winformstest\\Program.cs:line 20\r\n```\r\n\r\nWhen EnableVisualStyles is commented out, the application instead fails with `Could not load type 'System.Security.PermissionSet' from assembly 'System.Runtime.Extensions'`. #252 has that same issue, although it's a build rather than runtime failure.","Url":"https://github.com/dotnet/winforms/issues/257","RelatedDescription":"Closed issue \"MissingMethodException from System.Security.Permissions when running application\" (#257)"},{"Id":"391599539","IsPullRequest":false,"CreatedAt":"2018-12-18T18:30:47","Actor":"0xd4d","Number":"249","RawContent":null,"Title":".NET Core 3.0 daily build includes WinForms reference assemblies instead of runtime assemblies","State":"closed","Body":"3.0.100-preview-009839 (latest daily build)\r\n\r\nThe following assemblies are reference assemblies:\r\n\r\n- System.Windows.Forms\r\n- System.Windows.Forms.Design\r\n- System.Windows.Forms.Design.Editors\r\n\r\nAn exception is thrown at runtime if you try to run a WinForms application.","Url":"https://github.com/dotnet/winforms/issues/249","RelatedDescription":"Closed issue \".NET Core 3.0 daily build includes WinForms reference assemblies instead of runtime assemblies\" (#249)"},{"Id":"392146931","IsPullRequest":true,"CreatedAt":"2018-12-18T16:19:46","Actor":"dotnet-maestro[bot]","Number":"255","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/255","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#255)"},{"Id":"392107886","IsPullRequest":false,"CreatedAt":"2018-12-18T11:13:38","Actor":"Olina-Zhang","Number":"254","RawContent":null,"Title":"Winforms controls’ ProductName property should have a meaningful description in .Net Core, compared to .Net Framework","State":"open","Body":"**OS:** RS5/RS6 \r\n**VS:** 16.0.0.0 Preview 2.0 [28416.104.d16.0stg] + .Net Core 3.0 latest build\r\n\r\n**Steps to Reproduce:**\r\n1. Create a Winforms .Net Core application by command: dotnet new winforms –o “xxx”\r\n2. Write code to check any Winforms control’s productName property\r\n\t_System.Windows.Forms.Button button = new Button();\r\n       string productName = button.ProductName;_\r\n\r\n**Actual:** \r\n In .Net Core, it should have a meaningful description for controls’ ProductName property, not just “System.Windows.Forms”\r\n![netcore](https://user-images.githubusercontent.com/26474449/50150409-b8b66800-0272-11e9-841d-9a2205e7f1ba.png)\r\n\r\n**Expected:**\r\nIn .Net framework, the controls’ ProductName is “Microsoft® .NET Framework”.\r\n![netframework](https://user-images.githubusercontent.com/26474449/50150428-d1268280-0272-11e9-872d-f22730928afd.png)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/254","RelatedDescription":"Open issue \"Winforms controls’ ProductName property should have a meaningful description in .Net Core, compared to .Net Framework\" (#254)"},{"Id":"392102363","IsPullRequest":false,"CreatedAt":"2018-12-18T10:58:59","Actor":"VasylRudnitskyi","Number":"253","RawContent":null,"Title":"ListViewItem haven't name property value if there is image instead of text","State":"open","Body":".Net Framework 4.7.2\r\n\r\nListViewItem doesn't have value of accessible name property when it contains image, so screen reader cannot read it.\r\n\r\nRepro\r\nCreate new windows form application .net 4.7.2\r\nCreate ImageList, add few images.\r\nCreate new Listview, add few list items with provided imageindex property.\r\nOpen Keros for Desktop and validate list.\r\n\r\nActual result: Name property is empty.\r\nExpected result: Name property should to has a value.\r\n\r\n![1](https://user-images.githubusercontent.com/45966665/50149481-fbecf700-02c3-11e9-9ce2-068dcd508f8c.png)\r\n![2](https://user-images.githubusercontent.com/45966665/50149482-fbecf700-02c3-11e9-81bd-732605cc36c5.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/253","RelatedDescription":"Open issue \"ListViewItem haven't name property value if there is image instead of text\" (#253)"},{"Id":"391376400","IsPullRequest":true,"CreatedAt":"2018-12-17T17:36:22","Actor":"dotnet-maestro[bot]","Number":"246","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/246","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#246)"},{"Id":"391731930","IsPullRequest":false,"CreatedAt":"2018-12-17T14:17:00","Actor":"radiy","Number":"251","RawContent":null,"Title":"Fail to create resource file with image. ","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n\r\n3.0 Preview1, vs 2019 preview 1.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: Yes/No\r\n\r\nno\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\n\r\nFail to create resource file with image. \r\n\r\n**Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nBuild will fail with error:\r\n1>C:\\Users\\kvasov2\\projects\\tmp\\res-bug\\Form1.resx(123,5): error MSB3103: Invalid Resx file. Could not load file or assembly 'System.Drawing.Common, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (Exception from HRESULT: 0x80131058) Line 123, position 5.\r\n\r\n**Expected behavior:**\r\n\r\nSuccessful build.\r\n\r\n**Minimal repro:**\r\n\r\n* dotnet new winforms\r\n* open vs 2019\r\n* add jpg to Form1.resx\r\n* build","Url":"https://github.com/dotnet/winforms/issues/251","RelatedDescription":"Open issue \"Fail to create resource file with image. \" (#251)"},{"Id":"391715381","IsPullRequest":false,"CreatedAt":"2018-12-17T13:36:45","Actor":"DmitryGaravsky","Number":"250","RawContent":null,"Title":"PlatformNotSupported Exception thrown by Delegate.BeginInvoke() method","State":"open","Body":"* .NET Core Version: (Version:   3.0.100-preview-009812)\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\nThe call of the `Delegate.BeginInvoke` method fires the `System.PlatformNotSupportedException`:  \r\n    `Operation is not supported on this platform.`\r\n\r\nIt looks like a compatibility bug.\r\n\r\n**Minimal repro:**\r\n1. Create a new WinForms Core App.\r\n2. Add the following Code to the Form's code-behind:\r\n```\r\nprotected override void OnShown(EventArgs e) {\r\n    base.OnShown(e);\r\n    Action action = new Action(() => {\r\n        /* do nothing */\r\n    });\r\n    action.BeginInvoke(null, this); // PlatformNotSupportedException thrown here\r\n}\r\n```\r\n**Actual Result:**\r\nThe PlatformNotSupported exception thrown.\r\n\r\n**Expected behavior:**\r\nThe action should be executed without exception.\r\n\r\n**P.S.**\r\nThis issue is also cause the [#142 issue ](https://github.com/dotnet/winforms/issues/242) with `PictureBox.LoadAsync` method due to following call:\r\n```\r\nnew WaitCallback(this.BeginGetResponseDelegate).BeginInvoke(state, null, null);\r\n```\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/250","RelatedDescription":"Open issue \"PlatformNotSupported Exception thrown by Delegate.BeginInvoke() method\" (#250)"},{"Id":"391539656","IsPullRequest":false,"CreatedAt":"2018-12-17T02:53:04","Actor":"albahari","Number":"248","RawContent":null,"Title":"WebBrowser.ObjectForScripting doesn't work","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\nMicrosoft.WindowsDesktop.App 3.0.0-alpha-27128-4\r\n\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem Description**\r\n\r\nWhen you set the ObjectForScripting property on a WebBrowser control and then click a link that calls a method on the ObjectForScripting, it displays a script error dialog instead of calling the specified method.\r\n\r\n**Actual behavior:** \r\n\r\nScript error dialog - \"An error has occurred in the script on this page. Unexpected call to method or property access\"\r\n\r\n**Expected behavior:**\r\n\r\nIt should call the specified method on ObjectForScripting as it does in .NET Framework\r\n\r\n**Minimal repro:**\r\n\r\n[ObjectForScripting.zip](https://github.com/dotnet/winforms/files/2684303/ObjectForScripting.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/248","RelatedDescription":"Open issue \"WebBrowser.ObjectForScripting doesn't work\" (#248)"},{"Id":"391475875","IsPullRequest":false,"CreatedAt":"2018-12-16T15:06:39","Actor":"kevingosse","Number":"247","RawContent":null,"Title":"RuntimeEnvironment.GetRuntimeInterfaceAsObject is not supported","State":"open","Body":"Running the Microsoft.DotNet.Analyzers.Compatibility, I found one occurence of API that is not supported on .NET Core. \r\nIn `ComponentManagerBroker` we call [`RuntimeEnvironment.GetRuntimeInterfaceAsObject`](https://github.com/dotnet/winforms/blob/master/src/System.Windows.Forms/src/System/Windows/Forms/ComponentManagerBroker.cs#L192). This method [throws a PlatformNotSupportedException](https://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/RuntimeEnvironment.cs#L28).\r\n\r\nI wasn't actually capable of writing a repro. This code is hit [only in the case where there is a \"native component manager\" ](https://github.com/dotnet/winforms/blob/master/src/System.Windows.Forms/src/System/Windows/Forms/Application.cs#L2488). Since we're trying to retrieve a [`IMsoComponentManager`](https://docs.microsoft.com/en-us/previous-versions/office/developer/office-2010/gg702934(v=office.14)), I'm guessing this is specific to hosting scenarios in Microsoft Office. ","Url":"https://github.com/dotnet/winforms/issues/247","RelatedDescription":"Open issue \"RuntimeEnvironment.GetRuntimeInterfaceAsObject is not supported\" (#247)"},{"Id":"391213625","IsPullRequest":true,"CreatedAt":"2018-12-14T18:17:02","Actor":"zsd4yr","Number":"245","RawContent":null,"Title":"fix unreadable unicode chars in winforms-designer.md and add images the markdown way","State":"closed","Body":"Some unicode characters in this file were not readable, also we shoudl avoid html in the markdown if there is a way to perform the same operations without it \r\n\r\nChanging some characters to diacritic, some to em-dash, some to apostrophe (grave accent)","Url":"https://github.com/dotnet/winforms/pull/245","RelatedDescription":"Closed or merged PR \"fix unreadable unicode chars in winforms-designer.md and add images the markdown way\" (#245)"},{"Id":"391102676","IsPullRequest":true,"CreatedAt":"2018-12-14T16:54:59","Actor":"dotnet-maestro[bot]","Number":"244","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/244","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#244)"},{"Id":"390669203","IsPullRequest":true,"CreatedAt":"2018-12-13T16:20:53","Actor":"dotnet-maestro[bot]","Number":"243","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/243","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#243)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-29T05:31:06.785402Z","RunDurationInMilliseconds":934}