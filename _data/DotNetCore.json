{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.8 Early Access Build 3745","PublishedOn":"2019-02-21T19:27:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As we get closer to the final version, our efforts are focused on stabilizing the release over the coming weeks. Please keep up the support by trying out our latest preview 3745 and provide any...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-framework-4-8-early-access-build-3745/","RawContent":null},{"Title":".NET Framework February 2019 Preview of Quality Rollup","PublishedOn":"2019-02-19T15:19:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the February 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-february-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core 1.0 and 1.1 will reach End of Life on June 27, 2019","PublishedOn":"2019-02-19T15:00:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Core 1.0 was released on June 27, 2016 and .NET Core 1.1 was released on November 16, 2016. As an LTS release, .NET Core 1.0 is supported for three years. .NET Core 1.1 fits into the same support...","Href":"https://devblogs.microsoft.com/dotnet/net-core-1-0-and-1-1-will-reach-end-of-life-on-june-27-2019/","RawContent":null},{"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","PublishedOn":"2019-02-15T13:03:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Final Update 2/19/19 @1:30 PM (PST): This advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no...","Href":"https://devblogs.microsoft.com/dotnet/advisory-on-february-2019-security-update-for-windows-10-update-1809/","RawContent":null},{"Title":"Help us make the .NET Architecture guides better for you!","PublishedOn":"2019-02-13T15:47:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the last couple of years, we worked with experts to create some incredible architecture guides &#38; reference samples for .NET developers. We focused on Microservices Architecture, Modernizing...","Href":"https://devblogs.microsoft.com/dotnet/help-us-make-the-net-architecture-guides-better-for-you/","RawContent":null},{"Title":".NET Framework February 2019 Security and Quality Rollup","PublishedOn":"2019-02-13T13:45:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Updated: February 15, 2019\n\nA new Advisory on February 2019 Security update for Windows 10 update 1809 has been released today for issues customers have reported with .NET 4.8 Preview and this...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-february-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core February 2019 Updates – 1.0.14, 1.1.11, 2.1.8 and 2.2.2","PublishedOn":"2019-02-12T18:30:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core February 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes.\n\n.NET Core...","Href":"https://devblogs.microsoft.com/dotnet/net-core-february-2019/","RawContent":null},{"Title":"Announcing ML.NET 0.10 – Machine Learning for .NET","PublishedOn":"2019-02-08T07:07:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-0-10-machine-learning-for-net/","RawContent":null},{"Title":"Submit to the Applied F# Challenge!","PublishedOn":"2019-02-05T15:17:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Lena Hall, a Senior Cloud Developer Advocate at Microsoft.\nF# Software Foundation has recently announced their new initiative — Applied F# Challenge! We encourage you to...","Href":"https://devblogs.microsoft.com/dotnet/submit-to-the-applied-f-challenge/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 2","PublishedOn":"2019-01-29T16:57:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 2. It includes new features in .NET Core 3.0 and C# 8, in addition to the large number of new features in Preview 1. ASP.NET Core 3.0 Preview 2  is...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-2/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9089021734","Type":"PullRequestEvent","CreatedAt":"2019-02-18T17:45:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Merged pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"},{"Id":"9089021716","Type":"IssuesEvent","CreatedAt":"2019-02-18T17:45:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125) at dotnet/foundation","RelatedBody":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139"},{"Id":"9089015890","Type":"PullRequestEvent","CreatedAt":"2019-02-18T17:44:39","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Merged pull request \"Update links\" (#131) at dotnet/foundation","RelatedBody":"Replace http links with https where possible - both returned 200 OK."},{"Id":"9018375188","Type":"PullRequestEvent","CreatedAt":"2019-02-06T14:07:17","Actor":"Potapy4","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Opened pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"},{"Id":"9001989260","Type":"PullRequestEvent","CreatedAt":"2019-02-04T07:33:23","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Opened pull request \"Update links\" (#131) at dotnet/foundation","RelatedBody":"Replace http links with https where possible - both returned 200 OK."},{"Id":"8997330482","Type":"PullRequestEvent","CreatedAt":"2019-02-02T11:04:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Merged pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8887340703","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Opened pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9078417647","Type":"IssuesEvent","CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Opened issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101) at dotnet/announcements","RelatedBody":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition."},{"Id":"9075495754","Type":"IssuesEvent","CreatedAt":"2019-02-15T14:06:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Opened issue \"Advisory on February 2019 Security update for Windows 10 update 1809\" (#100) at dotnet/announcements","RelatedBody":"<span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.\r\n\r\nWe are actively working on fixing and re-shipping a correction for this issue. If you installed the February 2019 security update and have not yet seen any negative behavior, we recommend that you leave your system as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We are working to improve our testing infrastructure to prevent these type of issues in the future. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this <a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/\" rel=\"nofollow\">post</a> as we have new information.\r\n<h2>Guidance</h2>\r\nWe are working on guidance and will update this pose and as we have new information.\r\n<h2>Workaround</h2>\r\nThere are no known workarounds at this time.\r\n<h2>Symptoms</h2>\r\nAfter installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:\r\n<p class=\"xxxxxmsonormal\"><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></p>\r\n"},{"Id":"9070407129","Type":"IssuesEvent","CreatedAt":"2019-02-14T19:28:26","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Opened issue \"Supporting new Alpine versions (for containers)\" (#99) at dotnet/announcements","RelatedBody":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread."},{"Id":"9060710562","Type":"IssuesEvent","CreatedAt":"2019-02-13T14:48:22","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Opened issue \"February 2019 .NET Updates\" (#98) at dotnet/announcements","RelatedBody":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework January 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9115280130","Type":"PullRequestEvent","CreatedAt":"2019-02-22T04:05:14","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22782","RelatedDescription":"Opened pull request \"Remove 'from HRESULT' string\" (#22782) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/35456\r\n\r\nHRESULT is a Windows specific concept, and as the issue shows, the value marked as HRESULT is sometimes not even in HRESULT form.\r\n\r\nChange eg `Could not load file or assembly 'System.Runtime.Loader.Test.Assembly, Culture=neutral, PublicKeyToken=null'. Error 28 (Exception from HRESULT: 0x0000001C)` to `Could not load file or assembly 'System.Runtime.Loader.Test.Assembly, Culture=neutral, PublicKeyToken=null'. Error 28 (0x0000001C)`"},{"Id":"9114897228","Type":"PullRequestEvent","CreatedAt":"2019-02-22T02:19:01","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22781","RelatedDescription":"Opened pull request \"Delete unused FEATURE flags\" (#22781) at dotnet/coreclr","RelatedBody":""},{"Id":"9114886316","Type":"PullRequestEvent","CreatedAt":"2019-02-22T02:16:17","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22759","RelatedDescription":"Merged pull request \"Cleanup unnecessary COUNTER_ONLY\" (#22759) at dotnet/coreclr","RelatedBody":""},{"Id":"9114847495","Type":"IssuesEvent","CreatedAt":"2019-02-22T02:06:17","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22780","RelatedDescription":"Opened issue \"[x64] Test failed: JIT_Methodical._MDArray_basics_stringarr_cs_d_stringarr_cs_d_._MDArray_basics_stringarr_cs_d_stringarr_cs_d_cmd\" (#22780) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_zapdisable_jitstress2/125/\r\n\r\n**Failed tests:**\r\nJIT_Methodical._MDArray_basics_stringarr_cs_d_stringarr_cs_d_._MDArray_basics_stringarr_cs_d_stringarr_cs_d_cmd\r\n\r\n**Log:**\r\n```\r\n> set CORE_ROOT=D:\\j\\workspace\\x64_checked_w---23ee0b70\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n  > D:\\j\\workspace\\x64_checked_w---23ee0b70\\bin\\tests\\Windows_NT.x64.Checked\\JIT\\Methodical\\MDArray\\basics\\stringarr_cs_d\\stringarr_cs_d.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_checked_w---23ee0b70\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\JIT.Methodical\\JIT.Methodical.XUnitWrapper.cs(107069,0): at JIT_Methodical._MDArray_basics_stringarr_cs_d_stringarr_cs_d_._MDArray_basics_stringarr_cs_d_stringarr_cs_d_cmd()\r\n      JIT_Methodical._MDArray_basics_stringarr_cs_d_stringarr_cs_d_._MDArray_basics_stringarr_cs_d_stringarr_cs_d_cmd [FAIL]\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9113865730","Type":"IssuesEvent","CreatedAt":"2019-02-21T22:14:21","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1081","RelatedDescription":"Opened issue \"Use Arcade defaults for DebugType, etc\" (#1081) at dotnet/standard","RelatedBody":"https://github.com/dotnet/standard/blob/4a006e962fc5c5651b7712028e0e352b1e011a58/Directory.Build.props#L86-L104\r\n\r\nCC @tmat "},{"Id":"9113854601","Type":"PullRequestEvent","CreatedAt":"2019-02-21T22:12:17","Actor":"tmat","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1078","RelatedDescription":"Merged pull request \"Set copyright and package license\" (#1078) at dotnet/standard","RelatedBody":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n"},{"Id":"9112939834","Type":"PullRequestEvent","CreatedAt":"2019-02-21T19:39:58","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1074","RelatedDescription":"Merged pull request \"Fix link to build logs in build status badge\" (#1074) at dotnet/standard","RelatedBody":"The PR which added the build status badges used the status from the public project but linked to the internal project: https://github.com/dotnet/standard/pull/1062\r\nUpdated to link to point to the public project.\r\n\r\nFixes https://github.com/dotnet/standard/issues/1065\r\n\r\n/cc @wtgodbe "},{"Id":"9112939821","Type":"IssuesEvent","CreatedAt":"2019-02-21T19:39:58","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1065","RelatedDescription":"Closed issue \"CI build status log is not public\" (#1065) at dotnet/standard","RelatedBody":"Readme.md now includes a CI build status (https://github.com/dotnet/standard/commit/1e445e1f69f0fe37a7562bc59c054e7d0e15761f#diff-04c6e90faac2675aa89e2176d2eec7d8). This is good, but when I click on it, I get a \"401\" page because I am not an MS employee. Status of the build should not be opaque, and generally, if you go around to other projects on the web, the links are to the output of the build, not to 401. The badge links in the .../standard/readme.md page should to a public build so I can understand what is going on here. Roslyn does it correctly (https://github.com/dotnet/roslyn/blob/master/README.md); others, such as Corefx do not. Coreclr doesn't even have a badge for build status. Mono's readme.md page has them, and the links work."},{"Id":"9112868287","Type":"PullRequestEvent","CreatedAt":"2019-02-21T19:28:37","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1080","RelatedDescription":"Opened pull request \"Add SwitchExpressionException\" (#1080) at dotnet/standard","RelatedBody":"This adds `SwitchExpressionException` that was added for supporting C#'s [`switch` expression construct](https://github.com/dotnet/csharplang/blob/master/proposals/patterns.md#switch-expression). The exception type was discussed in CoreFX in [this API request](https://github.com/dotnet/corefx/issues/33284)."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9115442665","Type":"IssuesEvent","CreatedAt":"2019-02-22T04:59:48","Actor":"chukunx","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/35515","RelatedDescription":"Opened issue \"Queue<T>: why set GrowFactor to 200 and divide by 100?\" (#35515) at dotnet/corefx","RelatedBody":"hi guys, this isn't an issue, but just me being curious about a configuration setup in `Queue<T>` class. may i ask why do we want to double the size of array by initiating the GrowFactor as 200 and multiplying the original size by `GrowFactor / 100` here? what's the downside of using `2` directly? thanks.\r\nhttps://github.com/dotnet/corefx/blob/bca44089343cf14cffd3cb0982b7e209692f6731/src/System.Collections/src/System/Collections/Generic/Queue.cs#L188"},{"Id":"9115241707","Type":"PullRequestEvent","CreatedAt":"2019-02-22T03:53:07","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/35477","RelatedDescription":"Closed pull request \"Update BuildTools, CoreClr, CoreFx, ProjectNTfs, ProjectNTfsTestILC to rc1-03131-06, uwp62-27322-01, servicing-27317-03, rel-27420-00, rel-27420-00, respectively (release/uwp6.2)\" (#35477) at dotnet/corefx","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"9115240763","Type":"PullRequestEvent","CreatedAt":"2019-02-22T03:52:48","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/35511","RelatedDescription":"Closed pull request \"NO MERGE: CI test\" (#35511) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9115403519","Type":"PullRequestEvent","CreatedAt":"2019-02-22T04:46:22","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33594","RelatedDescription":"Opened pull request \"Add support for partial methods in interfaces\" (#33594) at dotnet/roslyn","RelatedBody":""},{"Id":"9115166289","Type":"PullRequestEvent","CreatedAt":"2019-02-22T03:30:05","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33592","RelatedDescription":"Merged pull request \"Merge dev16.0 to dev16.0-vs-deps\" (#33592) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9114929048","Type":"PullRequestEvent","CreatedAt":"2019-02-22T02:26:27","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33593","RelatedDescription":"Opened pull request \"Fix VS bootstrapper branch selection\" (#33593) at dotnet/roslyn","RelatedBody":"Do not assume that the branch we get IBC data from is the same as the one we produce VS bootstrapper for. The VS bootstrapper should always be produced from VS branch we insert to, while IBC data generated by another branch might be needed."},{"Id":"9114757805","Type":"PullRequestEvent","CreatedAt":"2019-02-22T01:41:41","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33592","RelatedDescription":"Opened pull request \"Merge dev16.0 to dev16.0-vs-deps\" (#33592) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9113920403","Type":"PullRequestEvent","CreatedAt":"2019-02-21T22:24:06","Actor":"filipnavara","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7067","RelatedDescription":"Opened pull request \"WIP: Move Thread to shared CoreLib\" (#7067) at dotnet/corert","RelatedBody":"Counter-part to https://github.com/dotnet/coreclr/pull/22744."},{"Id":"9113350288","Type":"PullRequestEvent","CreatedAt":"2019-02-21T20:47:43","Actor":"kouvel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7066","RelatedDescription":"Opened pull request \"Implement APIs for some threading metrics (CoreRT), fix `Timer` on Unixes\" (#7066) at dotnet/corert","RelatedBody":"- API review: https://github.com/dotnet/corefx/issues/35500\r\n- May depend on https://github.com/dotnet/coreclr/pull/22754\r\n- Fixed `Timer` implementation on Unixes. Previously there was only ever one timer request from the upper-level implementation and that is not the case anymore, so the lower-level \"app domain timer\" implementation needed to handle multiple timer requests."},{"Id":"9108160212","Type":"PullRequestEvent","CreatedAt":"2019-02-21T07:38:30","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7065","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7065) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9108158739","Type":"PullRequestEvent","CreatedAt":"2019-02-21T07:38:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7062","RelatedDescription":"Merged pull request \"Wasm: fix to enable multidimensional array get and set operations\" (#7062) at dotnet/corert","RelatedBody":"Enables get and set operations on multidimensional arrays.  Fixes https://github.com/dotnet/corert/issues/6263"},{"Id":"9108158687","Type":"IssuesEvent","CreatedAt":"2019-02-21T07:38:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6263","RelatedDescription":"Closed issue \"WASM: Getting and setting elements of multidimensional arrays causes runtime failure\" (#6263) at dotnet/corert","RelatedBody":"As mentioned in #6096 discussion, accessing to elements of multidimensional arrays will fail at runtime."},{"Id":"9108154537","Type":"PullRequestEvent","CreatedAt":"2019-02-21T07:37:17","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7063","RelatedDescription":"Merged pull request \"wasm: Add test for using\" (#7063) at dotnet/corert","RelatedBody":"Fixes https://github.com/dotnet/corert/issues/6474.  Or rather just adds a test for it as it was already working.  There was a test for `try/finally`, but not explicitly `using`.  That test is added here."},{"Id":"9108154475","Type":"IssuesEvent","CreatedAt":"2019-02-21T07:37:17","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6474","RelatedDescription":"Closed issue \"wasm: finally/using statement for IDisposable is not calling Dispose\" (#6474) at dotnet/corert","RelatedBody":"To the wasm test Program.cs add a test for using(), e.g.\r\n\r\n```\r\npublic class DisposableTest : IDisposable\r\n{\r\n    public bool Disposed;\r\n\r\n    public void Dispose()\r\n    {\r\n        Disposed = true;\r\n    }\r\n}\r\n```\r\nThen put that in a using :\r\n```\r\n        var disposable = new DisposableTest();\r\n        using (disposable)\r\n        {\r\n        }\r\n        if (disposable.Disposed)\r\n        {\r\n            PrintLine(\"Ok.\");\r\n        }\r\n        else\r\n        {\r\n            PrintLine(\"Failed.\");\r\n        }\r\n```\r\nAnd it will print \"Failed.\" where the using end block } should call the `IDisposable.Dispose` and set `Disposed` to true.  Calling Dispose() manually does set `Disposed`.\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9114825832","Type":"PullRequestEvent","CreatedAt":"2019-02-22T02:00:21","Actor":"dotnet-automerge-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2975","RelatedDescription":"Merged pull request \"Merge release/3.0.1xx to master\" (#2975) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9114663833","Type":"IssuesEvent","CreatedAt":"2019-02-22T01:16:11","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2976","RelatedDescription":"Opened issue \"All packages targeting netcoreapp3.0 have a 'Microsoft.NETCore.Platforms' dependency in nuspec\" (#2976) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/blob/0690b28e426f5b7e6dfe7ab4200b83ce3c96bc95/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.props#L81-L87\r\n\r\nThis should probably have been 'PrivateAssets=All'. \r\n\r\nAll aspnet 3.0 Preview 3 packages which target netcoreapp3.0 have this dependency in their nuspec. cc @Eilon @livarcocc \r\n\r\n![image](https://user-images.githubusercontent.com/2696087/53213059-4e1c0280-35fc-11e9-9591-32f81f33502c.png)\r\n"},{"Id":"9114380796","Type":"PullRequestEvent","CreatedAt":"2019-02-22T00:01:33","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2975","RelatedDescription":"Opened pull request \"Merge release/3.0.1xx to master\" (#2975) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Update links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Update links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"413233964","IsPullRequest":true,"CreatedAt":"2019-02-22T04:05:14","Actor":"danmosemsft","Number":"22782","RawContent":null,"Title":"Remove 'from HRESULT' string","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/35456\r\n\r\nHRESULT is a Windows specific concept, and as the issue shows, the value marked as HRESULT is sometimes not even in HRESULT form.\r\n\r\nChange eg \r\n`Could not load file or assembly 'System.Runtime.Loader.Test.Assembly, Culture=neutral, PublicKeyToken=null'. Error 28 (Exception from HRESULT: 0x0000001C)`\r\nto \r\n`Could not load file or assembly 'System.Runtime.Loader.Test.Assembly, Culture=neutral, PublicKeyToken=null'. Error 28 (0x0000001C)`\r\n\r\nSome future change could possibly reduce the redundancy in cases like the specific example.","Url":"https://github.com/dotnet/coreclr/pull/22782","RelatedDescription":"Open PR \"Remove 'from HRESULT' string\" (#22782)"},{"Id":"413211449","IsPullRequest":true,"CreatedAt":"2019-02-22T02:19:00","Actor":"jkotas","Number":"22781","RawContent":null,"Title":"Delete unused FEATURE flags","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22781","RelatedDescription":"Open PR \"Delete unused FEATURE flags\" (#22781)"},{"Id":"413156365","IsPullRequest":true,"CreatedAt":"2019-02-22T02:16:17","Actor":"jkotas","Number":"22759","RawContent":null,"Title":"Cleanup unnecessary COUNTER_ONLY","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22759","RelatedDescription":"Closed or merged PR \"Cleanup unnecessary COUNTER_ONLY\" (#22759)"},{"Id":"413208724","IsPullRequest":false,"CreatedAt":"2019-02-22T02:06:16","Actor":"VincentBu","Number":"22780","RawContent":null,"Title":"[x64] Test failed: JIT_Methodical._MDArray_basics_stringarr_cs_d_stringarr_cs_d_._MDArray_basics_stringarr_cs_d_stringarr_cs_d_cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_zapdisable_jitstress2/125/\r\n\r\n**Failed tests:**\r\nJIT_Methodical._MDArray_basics_stringarr_cs_d_stringarr_cs_d_._MDArray_basics_stringarr_cs_d_stringarr_cs_d_cmd\r\n\r\n**Log:**\r\n```\r\n> set CORE_ROOT=D:\\j\\workspace\\x64_checked_w---23ee0b70\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n  > D:\\j\\workspace\\x64_checked_w---23ee0b70\\bin\\tests\\Windows_NT.x64.Checked\\JIT\\Methodical\\MDArray\\basics\\stringarr_cs_d\\stringarr_cs_d.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_checked_w---23ee0b70\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\JIT.Methodical\\JIT.Methodical.XUnitWrapper.cs(107069,0): at JIT_Methodical._MDArray_basics_stringarr_cs_d_stringarr_cs_d_._MDArray_basics_stringarr_cs_d_stringarr_cs_d_cmd()\r\n      JIT_Methodical._MDArray_basics_stringarr_cs_d_stringarr_cs_d_._MDArray_basics_stringarr_cs_d_stringarr_cs_d_cmd [FAIL]\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22780","RelatedDescription":"Open issue \"[x64] Test failed: JIT_Methodical._MDArray_basics_stringarr_cs_d_stringarr_cs_d_._MDArray_basics_stringarr_cs_d_stringarr_cs_d_cmd\" (#22780)"},{"Id":"413202623","IsPullRequest":true,"CreatedAt":"2019-02-22T01:38:25","Actor":"jkoritzinsky","Number":"22779","RawContent":null,"Title":"Disable IJW tests on Windows 7.","State":"open","Body":"Windows 7 loads desktop mscoree.dll when loading System.Private.CoreLib, before we can load our fake mscoree. So, when IJW modules are loaded, they load the real mscoree.dll, which breaks coreclr's IJW loading. Once we have true .NET Core IJW support in the MSVC++ compiler and .NET Core, then we'll be able to reenable these tests on Win7.\r\n\r\nFixes #21796.\r\n\r\ncc: @RussKeldorph @echesakovMSFT \r\n","Url":"https://github.com/dotnet/coreclr/pull/22779","RelatedDescription":"Open PR \"Disable IJW tests on Windows 7.\" (#22779)"},{"Id":"413157720","IsPullRequest":true,"CreatedAt":"2019-02-22T01:38:02","Actor":"benaadams","Number":"22761","RawContent":null,"Title":"Test PR","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22761","RelatedDescription":"Closed or merged PR \"Test PR\" (#22761)"},{"Id":"413200745","IsPullRequest":false,"CreatedAt":"2019-02-22T01:29:55","Actor":"VincentBu","Number":"22778","RawContent":null,"Title":"[x64] Error occured when running run-corefx-tests.py","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_jitstress1/862/\r\n\r\n**Log:**\r\n```\r\n[/mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstress1/tests/scripts/run-corefx-tests.py]: Error: exit code 256\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22778","RelatedDescription":"Open issue \"[x64] Error occured when running run-corefx-tests.py\" (#22778)"},{"Id":"413198503","IsPullRequest":false,"CreatedAt":"2019-02-22T01:19:47","Actor":"VincentBu","Number":"22777","RawContent":null,"Title":"Test failed: System.Globalization.Tests.GregorianCalendarMiddleEastFrenchTests.CalendarType_SetInvalidValue_ThrowsArgumentOutOfRangeException(type: 0)","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_baseline/847/\r\n\r\n**Failed tests:**\r\nSystem.Globalization.Tests.GregorianCalendarMiddleEastFrenchTests.CalendarType_SetInvalidValue_ThrowsArgumentOutOfRangeException\r\n\r\n**Log:**\r\n```\r\nSystem.Globalization.Tests.GregorianCalendarMiddleEastFrenchTests.CalendarType_SetInvalidValue_ThrowsArgumentOutOfRangeException(type: 0) [FAIL]\r\n  [m[31;1m[m[37m      Assert.Equal() Failure\r\n  [m[37m                ↓ (pos 0)\r\n  [m[37m      Expected: m_type\r\n  [m[37m      Actual:   value\r\n  [m[37m                ↑ (pos 0)\r\n  [m[30;1m      Stack Trace:\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline/_/fx/src/CoreFx.Private.TestUtilities/src/System/AssertExtensions.cs(88,0): at System.AssertExtensions.Throws[T](String paramName, Func`1 testCode)\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline/_/fx/src/System.Globalization.Calendars/tests/System/Globalization/GregorianCalendarTests.cs(54,0): at System.Globalization.Tests.GregorianCalendarTestBase.CalendarType_SetInvalidValue_ThrowsArgumentOutOfRangeException(GregorianCalendarTypes type)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22777","RelatedDescription":"Open issue \"Test failed: System.Globalization.Tests.GregorianCalendarMiddleEastFrenchTests.CalendarType_SetInvalidValue_ThrowsArgumentOutOfRangeException(type: 0)\" (#22777)"},{"Id":"413198047","IsPullRequest":true,"CreatedAt":"2019-02-22T01:17:55","Actor":"mjsabby","Number":"22776","RawContent":null,"Title":"Enable FEATURE_BASICFREEZE and expose private QCalls","State":"open","Body":"Reflection can be used to access this experimental functionality.\r\n\r\nMy medium term goal is to get out the document for `Frozen Objects` that I've been working offline with @Maoni0 @jkotas.","Url":"https://github.com/dotnet/coreclr/pull/22776","RelatedDescription":"Open PR \"Enable FEATURE_BASICFREEZE and expose private QCalls\" (#22776)"},{"Id":"413197754","IsPullRequest":true,"CreatedAt":"2019-02-22T01:16:42","Actor":"jashook","Number":"22775","RawContent":null,"Title":"Set flag in comp info to signal that a caller has >8 byte struct args","State":"open","Body":"This will be used by fgCanFastTailCall to correctly determine whether an arm64\r\nor x64 linux caller/callee can fastTailCall.\r\n\r\nIt is also a workaround to #12468 to catch early any slot shuffling that would happen in LowerFastTailCall. Which currently assumes all parameters are one slot size.\r\n\r\nFixes #22330.","Url":"https://github.com/dotnet/coreclr/pull/22775","RelatedDescription":"Open PR \"Set flag in comp info to signal that a caller has >8 byte struct args\" (#22775)"},{"Id":"413188813","IsPullRequest":true,"CreatedAt":"2019-02-22T00:36:37","Actor":"jashook","Number":"22774","RawContent":null,"Title":"Disable tests that fail to build under 3.0.0-preview3","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22774","RelatedDescription":"Open PR \"Disable tests that fail to build under 3.0.0-preview3\" (#22774)"},{"Id":"413177716","IsPullRequest":true,"CreatedAt":"2019-02-22T00:30:00","Actor":"jashook","Number":"22769","RawContent":null,"Title":"Correct __CrossBuild in build-packages to be 0 or 1","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22769","RelatedDescription":"Closed or merged PR \"Correct __CrossBuild in build-packages to be 0 or 1\" (#22769)"},{"Id":"413181523","IsPullRequest":true,"CreatedAt":"2019-02-22T00:03:55","Actor":"sandreenko","Number":"22773","RawContent":null,"Title":"Fix CoreFX build break.","State":"open","Body":"Introduced by https://github.com/dotnet/corefx/pull/34385.","Url":"https://github.com/dotnet/coreclr/pull/22773","RelatedDescription":"Open PR \"Fix CoreFX build break.\" (#22773)"},{"Id":"413181321","IsPullRequest":false,"CreatedAt":"2019-02-22T00:03:09","Actor":"fadimounir","Number":"22772","RawContent":null,"Title":"Replace calls to GetThread with INLINE_GETTHREAD in arm/arm64 assembly stubs","State":"open","Body":"INLINE_GETTHREAD will be available when #22560 gets merged","Url":"https://github.com/dotnet/coreclr/issues/22772","RelatedDescription":"Open issue \"Replace calls to GetThread with INLINE_GETTHREAD in arm/arm64 assembly stubs\" (#22772)"},{"Id":"413180562","IsPullRequest":true,"CreatedAt":"2019-02-22T00:00:12","Actor":"AndyAyersMS","Number":"22771","RawContent":null,"Title":"Fix and re-enable some finalizer tests","State":"open","Body":"Mark key allocating methods noinline, otherwise they may get inlined\r\nunder jit stress and leave jit temps referring to allocations that the test\r\nexpects should be collectible.\r\n\r\nResolves #19218.","Url":"https://github.com/dotnet/coreclr/pull/22771","RelatedDescription":"Open PR \"Fix and re-enable some finalizer tests\" (#22771)"},{"Id":"413179903","IsPullRequest":true,"CreatedAt":"2019-02-21T23:57:27","Actor":"BrianBohe","Number":"22770","RawContent":null,"Title":"Improving local variable debugging experience on optimized code [WIP]","State":"open","Body":"I am reporting local variables now and the integration has been checked from VS IDE. I am opening this PR to start iterating the solution, but there are changes needed:\r\n\r\nDONE:\r\n1. Move instantiation of VariableLiveRange to when LclVarDsc is been created.\r\n2. Only store the home's history of the variables that are in the IL (now I am tracking all the variables used in the linear scan register allocation).\r\n\r\nTODO:\r\n3. See what changes are done with the stack level when the stackframe is not using the ebp and if this is not affecting one of my offsets.\r\n4. Review the changes applied on \"psiScopeList\" after genCodeForBBList. I have read there are some changes on the prolog and I am not updating offset info of args nor variables.\r\n5. Measure Time/Memory performance changes of the solution\r\n6. Add documentation\r\n7. Probably more refactor (maybe this should be in other part than compiler.h/compiler.cpp if we are trying to move things out of compiler.cpp)\r\n8. Add at least a test to the project so the functionality is not affected with next changes.\r\n9. See how scopes are reported for promoted structs. Are they considered in the amount of local variables to report? The struct's attributes would not have a IL matching, so, Do I need to care about?\r\n\r\nThe items are commutative and the list is not complete.\r\nPlease fill free to send reviews.","Url":"https://github.com/dotnet/coreclr/pull/22770","RelatedDescription":"Open PR \"Improving local variable debugging experience on optimized code [WIP]\" (#22770)"},{"Id":"413177270","IsPullRequest":false,"CreatedAt":"2019-02-21T23:47:04","Actor":"AndyAyersMS","Number":"22768","RawContent":null,"Title":"JIT: morph late canonicalization of assign foils local assertion prop","State":"open","Body":"Morph propagates assertions before morphing, and assertion prop doesn't handle copy assertions for copies with sources in `obj(addr(lcl))` form. Morph then transforms some of these into simple copies:\r\n```\r\nIn BB01 New Local Copy     Assertion: V02 == V01 index=#02, mask=0000000000000002\r\n....      \r\nfgMorphTree BB01, stmt 9 (before)\r\n               [000025] n-----------              /--*  OBJ(24)   struct\r\n               [000024] ------------              |  \\--*  ADDR      byref \r\n               [000023] ------------              |     \\--*  LCL_VAR   struct V02 tmp2         \r\n               [000081] -A----------              *  ASG       struct (copy)\r\n               [000079] D-----------              \\--*  LCL_VAR   struct V04 tmp4         \r\n...\r\nfgMorphTree BB01, stmt 9 (after)\r\n               [000023] -----+-N----              /--*  LCL_VAR   struct V02 tmp2         \r\n               [000081] -A---+------              *  ASG       struct (copy)\r\n               [000079] D----+-N----              \\--*  LCL_VAR   struct V04 tmp4         \r\n```\r\nIf we re-ran assertion prop at this point we'd change the source to `tmp1` and quite possibly avoid a struct copy.\r\n\r\nPerhaps it makes sense to either retry assertion prop after morphing (at least for this case), or work harder to produce the simple struct copy forms upstream. One common source of these is inlining args....\r\n\r\ncc @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/issues/22768","RelatedDescription":"Open issue \"JIT: morph late canonicalization of assign foils local assertion prop\" (#22768)"},{"Id":"413159475","IsPullRequest":false,"CreatedAt":"2019-02-21T22:45:06","Actor":"benaadams","Number":"22767","RawContent":null,"Title":"Use Intrinsics.X86 for SpanHelpers.IndexOfAny(char,char,char,char,char)","State":"open","Body":"Tracking issue\r\n\r\nImplementation available https://github.com/dotnet/coreclr/pull/22187, pending https://github.com/dotnet/coreclr/pull/22505","Url":"https://github.com/dotnet/coreclr/issues/22767","RelatedDescription":"Open issue \"Use Intrinsics.X86 for SpanHelpers.IndexOfAny(char,char,char,char,char)\" (#22767)"},{"Id":"413159356","IsPullRequest":false,"CreatedAt":"2019-02-21T22:44:48","Actor":"benaadams","Number":"22766","RawContent":null,"Title":"Use Intrinsics.X86 for SpanHelpers.IndexOfAny(char,char,char,char)","State":"open","Body":"Tracking issue\r\n\r\nImplementation available https://github.com/dotnet/coreclr/pull/22187, pending https://github.com/dotnet/coreclr/pull/22505","Url":"https://github.com/dotnet/coreclr/issues/22766","RelatedDescription":"Open issue \"Use Intrinsics.X86 for SpanHelpers.IndexOfAny(char,char,char,char)\" (#22766)"},{"Id":"413158892","IsPullRequest":false,"CreatedAt":"2019-02-21T22:43:28","Actor":"benaadams","Number":"22765","RawContent":null,"Title":"Use Intrinsics.X86 for SpanHelpers.IndexOfAny(char,char,char)","State":"open","Body":"Tracking issue\r\n\r\nImplementation available https://github.com/dotnet/coreclr/pull/22187, pending https://github.com/dotnet/coreclr/pull/22505","Url":"https://github.com/dotnet/coreclr/issues/22765","RelatedDescription":"Open issue \"Use Intrinsics.X86 for SpanHelpers.IndexOfAny(char,char,char)\" (#22765)"},{"Id":"413158807","IsPullRequest":false,"CreatedAt":"2019-02-21T22:43:12","Actor":"benaadams","Number":"22764","RawContent":null,"Title":"Use Intrinsics.X86 for SpanHelpers.IndexOfAny(char,char)","State":"open","Body":"Tracking issue\r\n\r\nImplementation available https://github.com/dotnet/coreclr/pull/22187, pending https://github.com/dotnet/coreclr/pull/22505","Url":"https://github.com/dotnet/coreclr/issues/22764","RelatedDescription":"Open issue \"Use Intrinsics.X86 for SpanHelpers.IndexOfAny(char,char)\" (#22764)"},{"Id":"413158582","IsPullRequest":false,"CreatedAt":"2019-02-21T22:42:31","Actor":"benaadams","Number":"22763","RawContent":null,"Title":"Use Intrinsics.X86 for SpanHelpers.SequenceCompareTo(char)","State":"open","Body":"Tracking issue\r\n\r\nImplementation available https://github.com/dotnet/coreclr/pull/22187, pending https://github.com/dotnet/coreclr/pull/22505","Url":"https://github.com/dotnet/coreclr/issues/22763","RelatedDescription":"Open issue \"Use Intrinsics.X86 for SpanHelpers.SequenceCompareTo(char)\" (#22763)"},{"Id":"413158367","IsPullRequest":false,"CreatedAt":"2019-02-21T22:41:52","Actor":"benaadams","Number":"22762","RawContent":null,"Title":"Use Intrinsics.X86 for SpanHelpers.IndexOf(char)","State":"open","Body":"Tracking issue","Url":"https://github.com/dotnet/coreclr/issues/22762","RelatedDescription":"Open issue \"Use Intrinsics.X86 for SpanHelpers.IndexOf(char)\" (#22762)"},{"Id":"413157496","IsPullRequest":true,"CreatedAt":"2019-02-21T22:41:41","Actor":"jashook","Number":"22760","RawContent":null,"Title":"Do not use portablebuild=false for linux-musl","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22760","RelatedDescription":"Closed or merged PR \"Do not use portablebuild=false for linux-musl\" (#22760)"},{"Id":"413154978","IsPullRequest":false,"CreatedAt":"2019-02-21T22:32:14","Actor":"CarolEidt","Number":"22758","RawContent":null,"Title":"Ensure that HW Intrinsics producing small int results have casts as needed","State":"open","Body":"See #22666 and #22667 for discussion","Url":"https://github.com/dotnet/coreclr/issues/22758","RelatedDescription":"Open issue \"Ensure that HW Intrinsics producing small int results have casts as needed\" (#22758)"},{"Id":"413140983","IsPullRequest":false,"CreatedAt":"2019-02-21T21:53:39","Actor":"robertborr","Number":"22757","RawContent":null,"Title":"ToolsError build failures in 'official/dotnet/coreclr/refs/heads/master' - '20190221.71'","State":"open","Body":"@dotnet-mc-bot commented on [Thu Feb 21 2019](https://github.com/dotnet/core-eng/issues/5271)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://dnceng.visualstudio.com/internal/_build/results?buildId=102250\r\n  - **Agent:** Hosted Mac Internal 1\r\n  - **Error log:** /Users/vsts/agent/2.147.1/work/0/s/packages/microsoft.netcore.compilers/3.0.0-beta3-final/tools/Microsoft.CSharp.Core.targets(0,0): error : Process is terminating due to StackOverflowException. [/Users/vsts/agent/2.147.1/work/0/s/...\r\n\r\n@robertborr\r\n\n\n---\n\n@robertborr commented on [Thu Feb 21 2019](https://github.com/dotnet/core-eng/issues/5271#issuecomment-466173966)\n\nBuild FAILED.\r\n\r\n/root/.nuget/packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19115.1/tools/azure-pipelines/AzurePipelines.MultiQueue.targets(39,5): error : Test run 2277176 has one or more failing tests. [/__w/1/s/tests/helixpublishwitharcade.proj]\r\n/root/.nuget/packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19115.1/tools/azure-pipelines/AzurePipelines.MultiQueue.targets(39,5): error : Test run 2277180 has one or more failing tests. [/__w/1/s/tests/helixpublishwitharcade.proj]\r\n    0 Warning(s)\r\n    2 Error(s)\n\n---\n\n@robertborr commented on [Thu Feb 21 2019](https://github.com/dotnet/core-eng/issues/5271#issuecomment-466177884)\n\nTesting on the build machine is advised against\n\n---\n\n@robertborr commented on [Thu Feb 21 2019](https://github.com/dotnet/core-eng/issues/5271#issuecomment-466178362)\n\n@RussKeldorph \n\n---\n\n@RussKeldorph commented on [Thu Feb 21 2019](https://github.com/dotnet/core-eng/issues/5271#issuecomment-466181780)\n\n@robertorr We don't test on build machines.\r\n\r\nYes, you can move this to coreclr.\r\n\r\n@jashook \n\n","Url":"https://github.com/dotnet/coreclr/issues/22757","RelatedDescription":"Open issue \"ToolsError build failures in 'official/dotnet/coreclr/refs/heads/master' - '20190221.71'\" (#22757)"},{"Id":"413136831","IsPullRequest":true,"CreatedAt":"2019-02-21T21:42:13","Actor":"nattress","Number":"22756","RawContent":null,"Title":"R2RDump - Gracefully handle inability to parse GC Info","State":"open","Body":"The Amd64 GC Info parser is not complete in its implementation and\r\nsometimes will index to a location beyond the size of the image.\r\n\r\nIf we fail to parse the GC info for a method, continue dumping the rest\r\nof the image.\r\n\r\nEmit a warning when this happens so we don't forget about this.","Url":"https://github.com/dotnet/coreclr/pull/22756","RelatedDescription":"Open PR \"R2RDump - Gracefully handle inability to parse GC Info\" (#22756)"},{"Id":"413119134","IsPullRequest":true,"CreatedAt":"2019-02-21T20:54:14","Actor":"sdmaclea","Number":"22755","RawContent":null,"Title":"Use arcade's version of dotnet to build","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22755","RelatedDescription":"Open PR \"Use arcade's version of dotnet to build\" (#22755)"},{"Id":"413115517","IsPullRequest":true,"CreatedAt":"2019-02-21T20:44:30","Actor":"kouvel","Number":"22754","RawContent":null,"Title":"Implement APIs for some threading metrics (CoreCLR)","State":"open","Body":"- API review: https://github.com/dotnet/corefx/issues/35500","Url":"https://github.com/dotnet/coreclr/pull/22754","RelatedDescription":"Open PR \"Implement APIs for some threading metrics (CoreCLR)\" (#22754)"},{"Id":"413110535","IsPullRequest":true,"CreatedAt":"2019-02-21T20:31:20","Actor":"AndyAyersMS","Number":"22753","RawContent":null,"Title":"JIT: Update DefineLocal to not return true for block nodes","State":"open","Body":"Only return true for actual assignments.\r\n\r\nResolves #22747.","Url":"https://github.com/dotnet/coreclr/pull/22753","RelatedDescription":"Open PR \"JIT: Update DefineLocal to not return true for block nodes\" (#22753)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"413037854","IsPullRequest":false,"CreatedAt":"2019-02-21T17:23:31","Actor":"KathleenDollard","Number":"10863","RawContent":null,"Title":"Nicer message for `dotnet tool install` failure","State":"open","Body":"## Steps to reproduce\r\n\r\nIn a directory that does not have a manifest file, enter\r\n\r\n```\r\n$ dotnet tool install dotnet-format\r\n```\r\n\r\nNote, I neglected to enter `-g`\r\n\r\n## Expected  behavior\r\n\r\nSomething nice, and not a list of places searched. Suggestion below.\r\n\r\n(Note: Since this is a common mistake, I think we made the right decision not to create a manifest automatically). \r\n\r\n## Actual behavior\r\n\r\n```\r\n$ dotnet tool install dotnet-format\r\nCannot find any manifests file. Searched:\r\n/Users/kathleen/repos/designs-microsoft/designs-microsoft/.config/dotnet-tools.json\r\n/Users/kathleen/repos/designs-microsoft/designs-microsoft/dotnet-tools.json\r\n/Users/kathleen/repos/designs-microsoft/.config/dotnet-tools.json\r\n/Users/kathleen/repos/designs-microsoft/dotnet-tools.json\r\n/Users/kathleen/repos/.config/dotnet-tools.json\r\n/Users/kathleen/repos/dotnet-tools.json\r\n/Users/kathleen/.config/dotnet-tools.json\r\n/Users/kathleen/dotnet-tools.json\r\n/Users/.config/dotnet-tools.json\r\n/Users/dotnet-tools.json\r\n/.config/dotnet-tools.json\r\n/dotnet-tools.json\r\n```\r\n\r\n## Suggested message \r\n\r\n```\r\nCannot find a manifest file. \r\nIf you intended to install a global tool, add `--global` to the command.\r\nIf you would like to create a manifest, use `dotnet new tool-manifest` first, usually in the repo root directory\r\nFor a list of locations searched, use `dotnet tool install <toolname> -v`\r\n```\r\n\r\n-v would add the places searched before or after this message. \r\n\r\n## Environment data\r\n```\r\ndotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009988\r\n Commit:    8d071f3d19\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview-009988/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-009812 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009988 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10863","RelatedDescription":"Open issue \"Nicer message for `dotnet tool install` failure\" (#10863)"},{"Id":"412130498","IsPullRequest":true,"CreatedAt":"2019-02-21T16:55:51","Actor":"dotnet-bot","Number":"10836","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10836","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#10836)"},{"Id":"412919223","IsPullRequest":true,"CreatedAt":"2019-02-21T13:16:30","Actor":"dotnet-maestro[bot]","Number":"10862","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19121.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10862","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#10862)"},{"Id":"412906588","IsPullRequest":false,"CreatedAt":"2019-02-21T12:44:21","Actor":"shai-glat","Number":"10861","RawContent":null,"Title":"Creating nuget package using dotnet pack command and <NuspecFile> tag creates a package targeting .Net Framework","State":"open","Body":"## Steps to reproduce\r\n1. Create a csproj and generated a nuget package from it - works as expected\r\n2. Open the package and take out the generated nuspec file.\r\n3. Add the following tag to csproj:\r\n`\t<PropertyGroup>\r\n\t\t<NuspecFile>nuspec\\MyProj.nuspec</NuspecFile>\r\n\t</PropertyGroup>\r\n`\r\n4. Add the `files` tag to nuspec file as follows:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n..... (unmodified)\r\n  </metadata>\r\n\t<files>\r\n\t\t<file src=\"<Path>/MyProj.dll\" target=\"lib\" />\r\n\t\t<file src=\"<Path>/OtherFile.dll\" target=\"lib\" />\r\n\t</files>\r\n</package>\r\n```\r\n5. run `dotnet pack MyProj.csproj -o out /p:Version=1.0.1`\r\n## Expected  behavior\r\nGenerated package is a valid .NET Core package\r\n\r\n## Actual behavior\r\nPackage contents are all .NET Core dlls, but when adding the package visual studio it states the package was restored using .NetFramework 4.6 instead of .Net Core 2.1\r\n\r\n## Environment data\r\n`dotnet --info` output: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n## Additional notes\r\nI had the same problem when adding NuspecFile via dotnet CLI, as well as when i started with an empty nuspec file and simply added the files tag as stated above","Url":"https://github.com/dotnet/cli/issues/10861","RelatedDescription":"Open issue \"Creating nuget package using dotnet pack command and <NuspecFile> tag creates a package targeting .Net Framework\" (#10861)"},{"Id":"412864127","IsPullRequest":false,"CreatedAt":"2019-02-21T10:54:52","Actor":"couven92","Number":"10860","RawContent":null,"Title":"Add `dotnet tool update --all` option","State":"open","Body":"## Request\r\n\r\nWhen multiple tools are installed, either globally or locally, it becomes hard to keep track of which tools are outdated and which are not, and updating all outdated tools is time-consuming and boring copy-paste work, since the package id of each installed package needs to be provided to the `dotnet tool update` command.\r\n\r\nI propose to add the `--all` (alias: `-a`) option to the `dotnet tool update` command. This option would simply run `dotnet tool list` internally and use the results obtained from that command to get the package ids that are installed. Then the `dotnet tool update` command could be called with each of these package ids.\r\n\r\n## Background\r\n\r\nUpdating all installed programs is very usual operation for package maintance application to do. `apt upgrade` on Debian/Ubuntu, `npm upgrade` for NPM, etc.\r\n\r\nI have encountered the same problem in Python, however, there one can (semi-)easily write a Windows CMD `FOR` command that uses the `pip list --outdated --format=freeze` command.\r\n\r\nCurrently, the only way to update all packages installed with `dotnet tool` is to parse the output of `dotnet tool list`. That means I now have to write a PowerShell script that ignores the first two lines (the header and header-splitter) and parses the package id from the start of the line to the first whitespace. Yes, it's doable, but it would be much more convenient to have a command that just does all that for you. Also, adding an option in the actual executable means that `dotnet` can use it's own data representation of the information on the installed packages, and thus does not have to be subject to changes in the output format, invalid characters when printed to the console, and all that stuff.\r\n\r\n## Environment data\r\n\r\n`dotnet --info` output:\r\n``` txt\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.1 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100-preview1-009349 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview1-35029 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview1-35029 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview-26820-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```","Url":"https://github.com/dotnet/cli/issues/10860","RelatedDescription":"Open issue \"Add `dotnet tool update --all` option\" (#10860)"},{"Id":"412721216","IsPullRequest":true,"CreatedAt":"2019-02-21T08:10:17","Actor":"livarcocc","Number":"10857","RawContent":null,"Title":"SDK 1.1.1-svc-20190221-1","State":"closed","Body":"@peterhuene once this gets merged you should be good to merge cli into the closed source and build with the runtime.","Url":"https://github.com/dotnet/cli/pull/10857","RelatedDescription":"Closed or merged PR \"SDK 1.1.1-svc-20190221-1\" (#10857)"},{"Id":"412779633","IsPullRequest":true,"CreatedAt":"2019-02-21T07:56:41","Actor":"livarcocc","Number":"10858","RawContent":null,"Title":"SDK 2.2.200-preview-63821-01","State":"closed","Body":"This SDK contains a matching NuGet.\r\n","Url":"https://github.com/dotnet/cli/pull/10858","RelatedDescription":"Closed or merged PR \"SDK 2.2.200-preview-63821-01\" (#10858)"},{"Id":"412780084","IsPullRequest":true,"CreatedAt":"2019-02-21T07:53:47","Actor":"livarcocc","Number":"10859","RawContent":null,"Title":"SDK 2.1.600-preview-63821-02","State":"closed","Body":"This contains a matching NuGet version.\r\n","Url":"https://github.com/dotnet/cli/pull/10859","RelatedDescription":"Closed or merged PR \"SDK 2.1.600-preview-63821-02\" (#10859)"},{"Id":"412709325","IsPullRequest":true,"CreatedAt":"2019-02-21T05:14:27","Actor":"dotnet-maestro[bot]","Number":"10855","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview3.19120.3\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview3.19120.4\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10855","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#10855)"},{"Id":"412700735","IsPullRequest":true,"CreatedAt":"2019-02-21T02:23:24","Actor":"livarcocc","Number":"10853","RawContent":null,"Title":"Roslyn 3.0.0-beta4-19120-05","State":"closed","Body":"We need one more for Loc.","Url":"https://github.com/dotnet/cli/pull/10853","RelatedDescription":"Closed or merged PR \"Roslyn 3.0.0-beta4-19120-05\" (#10853)"},{"Id":"412685392","IsPullRequest":true,"CreatedAt":"2019-02-21T02:22:58","Actor":"nugetlurker","Number":"10851","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5856 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5856 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/10851","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5856 into cli\" (#10851)"},{"Id":"412716639","IsPullRequest":true,"CreatedAt":"2019-02-21T02:16:33","Actor":"tmat","Number":"10856","RawContent":null,"Title":"Set copyright and package license","State":"open","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/cli/pull/10856","RelatedDescription":"Open PR \"Set copyright and package license\" (#10856)"},{"Id":"412685402","IsPullRequest":true,"CreatedAt":"2019-02-21T02:14:07","Actor":"nugetlurker","Number":"10852","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5856 into cli","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5856 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/10852","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5856 into cli\" (#10852)"},{"Id":"412700934","IsPullRequest":true,"CreatedAt":"2019-02-21T02:11:16","Actor":"livarcocc","Number":"10854","RawContent":null,"Title":"Roslyn 3.0.0-beta4-19120-05","State":"closed","Body":"One more for loc.\r\n","Url":"https://github.com/dotnet/cli/pull/10854","RelatedDescription":"Closed or merged PR \"Roslyn 3.0.0-beta4-19120-05\" (#10854)"},{"Id":"412677022","IsPullRequest":true,"CreatedAt":"2019-02-21T00:32:42","Actor":"livarcocc","Number":"10850","RawContent":null,"Title":"Porting a change we already have in 2.x where we skip tests for native installers.","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/10850","RelatedDescription":"Closed or merged PR \"Porting a change we already have in 2.x where we skip tests for native installers.\" (#10850)"},{"Id":"412622957","IsPullRequest":true,"CreatedAt":"2019-02-20T22:59:23","Actor":"livarcocc","Number":"10849","RawContent":null,"Title":"Roslyn 3.0.0-beta4-19120-02.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10849","RelatedDescription":"Closed or merged PR \"Roslyn 3.0.0-beta4-19120-02.\" (#10849)"},{"Id":"412622764","IsPullRequest":true,"CreatedAt":"2019-02-20T22:59:09","Actor":"livarcocc","Number":"10848","RawContent":null,"Title":"Roslyn 3.0.0-beta4-19120-02.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10848","RelatedDescription":"Closed or merged PR \"Roslyn 3.0.0-beta4-19120-02.\" (#10848)"},{"Id":"412599390","IsPullRequest":true,"CreatedAt":"2019-02-20T20:37:14","Actor":"peterhuene","Number":"10847","RawContent":null,"Title":"Merge branch 'rel/1.1.0-MSRC' into rel/1.1.0","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10847","RelatedDescription":"Closed or merged PR \"Merge branch 'rel/1.1.0-MSRC' into rel/1.1.0\" (#10847)"},{"Id":"412565267","IsPullRequest":false,"CreatedAt":"2019-02-20T18:25:01","Actor":"stevenreddie","Number":"10846","RawContent":null,"Title":"dotnet build fails if cwd contains a colon (macOS)","State":"open","Body":"It fails if the cwd contains a colon, or any of the parent directories contain a colon. Possibly it also fails if other referenced paths contain colons. I'm guessing that this is due to colons being illegal in file/directory names on Windows, but they are valid on macOS and Linux.\r\n\r\n## Steps to reproduce\r\n```\r\nmkdir '/tmp/scratch_a:b'\r\ncd '/tmp/scratch_a:b'\r\ndotnet new classlib\r\ndotnet build\r\n```\r\n\r\n## Expected  behavior\r\nSuccessful build\r\n\r\n## Actual behavior\r\n```\r\n$ mkdir '/tmp/scratch_a:b'\r\n$ cd '/tmp/scratch_a:b'\r\n$ dotnet new classlib\r\nThe template \"Class library\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on /private/tmp/scratch_a:b/scratch_a:b.csproj...\r\n  Restoring packages for /private/tmp/scratch_a:b/scratch_a:b.csproj...\r\n  Generating MSBuild file /private/tmp/scratch_a:b/obj/scratch_a:b.csproj.nuget.g.props.\r\n  Generating MSBuild file /private/tmp/scratch_a:b/obj/scratch_a:b.csproj.nuget.g.targets.\r\n  Restore completed in 192.71 ms for /private/tmp/scratch_a:b/scratch_a:b.csproj.\r\n\r\nRestore succeeded.\r\n\r\n$ dotnet build\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 40.63 ms for /private/tmp/scratch_a:b/scratch_a:b.csproj.\r\n/usr/local/share/dotnet/sdk/2.2.104/15.0/Microsoft.Common.props(66,3): error MSB4019: The imported project \"/private/tmp/scratch_a:b/obj/scratch_a:b.csproj.*.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk. [/private/tmp/scratch_a:b/scratch_a:b.csproj]\r\n\r\nBuild FAILED.\r\n\r\n/usr/local/share/dotnet/sdk/2.2.104/15.0/Microsoft.Common.props(66,3): error MSB4019: The imported project \"/private/tmp/scratch_a:b/obj/scratch_a:b.csproj.*.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk. [/private/tmp/scratch_a:b/scratch_a:b.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.60\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.104/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n","Url":"https://github.com/dotnet/cli/issues/10846","RelatedDescription":"Open issue \"dotnet build fails if cwd contains a colon (macOS)\" (#10846)"},{"Id":"412499488","IsPullRequest":false,"CreatedAt":"2019-02-20T15:56:55","Actor":"natemcmaster","Number":"10845","RawContent":null,"Title":"Support for piping the output of `dotnet sln list`","State":"open","Body":"I would like to use `dotnet sln list` in a script to automate some actions on projects. Unfortunately, the output of `dotnet sln list` is not suitable for piping into a script variable because it contains extraneous information.\r\n\r\n## Steps to reproduce\r\n\r\n```ps1\r\n# powershell\r\n$projectFiles = dotnet sln list\r\n```\r\n```bash\r\n# bash\r\nproject_files=$(dotnet sln list)\r\n```\r\n\r\n## Expected  behavior\r\n`dotnet sln list` should only produce output that lists the files, or support a flag like `dotnet sln list --porcelain` which suppresses the other info that breaks scripting.\r\n\r\n## Actual behavior\r\n\r\nThe first two lines of output are always irrelevant, and one first use, the output contains a welcome message that cannot be suppressed.\r\n\r\n```\r\n$ dotnet sln list\r\n\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous. It is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\nProject(s)\r\n----------\r\nAbstractions/src/Microsoft.AspNetCore.DataProtection.Abstractions.csproj\r\nAbstractions/test/Microsoft.AspNetCore.DataProtection.Abstractions.Tests.csproj\r\nAzureKeyVault/src/Microsoft.AspNetCore.DataProtection.AzureKeyVault.csproj\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /Users/namc/src/aspnet/AspNetCore/.dotnet/sdk/3.0.100-preview-010184/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27414-8\r\n  Commit:  2c740c0ea8\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-010184 [/Users/namc/src/aspnet/AspNetCore/.dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [/Users/namc/src/aspnet/AspNetCore/.dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [/Users/namc/src/aspnet/AspNetCore/.dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [/Users/namc/src/aspnet/AspNetCore/.dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27414-8 [/Users/namc/src/aspnet/AspNetCore/.dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10845","RelatedDescription":"Open issue \"Support for piping the output of `dotnet sln list`\" (#10845)"},{"Id":"412420505","IsPullRequest":true,"CreatedAt":"2019-02-20T13:53:27","Actor":"dotnet-maestro[bot]","Number":"10844","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/clicommandlineparser\r\n\r\n- Microsoft.DotNet.Cli.CommandLine - 1.0.0-preview.19120.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10844","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/clicommandlineparser\" (#10844)"},{"Id":"412137610","IsPullRequest":true,"CreatedAt":"2019-02-20T05:35:59","Actor":"nguerrera","Number":"10840","RawContent":null,"Title":"Final localization for 2.1.600","State":"closed","Body":"1. Backport translation from 2.1.200\r\n2. Recycle translation moved between files after deadline","Url":"https://github.com/dotnet/cli/pull/10840","RelatedDescription":"Closed or merged PR \"Final localization for 2.1.600\" (#10840)"},{"Id":"412147688","IsPullRequest":true,"CreatedAt":"2019-02-20T04:32:30","Actor":"nguerrera","Number":"10841","RawContent":null,"Title":"Insert dotnet/sdk release/2.2.2xx for localization","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10841","RelatedDescription":"Closed or merged PR \"Insert dotnet/sdk release/2.2.2xx for localization\" (#10841)"},{"Id":"412178745","IsPullRequest":true,"CreatedAt":"2019-02-20T00:59:45","Actor":"wli3","Number":"10843","RawContent":null,"Title":"Update sdk to 3.0.100-preview3.19119.2","State":"closed","Body":"part of #10628\r\n\r\ncontinue of https://github.com/dotnet/cli/pull/10818","Url":"https://github.com/dotnet/cli/pull/10843","RelatedDescription":"Closed or merged PR \"Update sdk to 3.0.100-preview3.19119.2\" (#10843)"},{"Id":"412108145","IsPullRequest":true,"CreatedAt":"2019-02-20T00:17:26","Actor":"livarcocc","Number":"10834","RawContent":null,"Title":"Making Dev16 required for SDK 2.1.6xx.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10834","RelatedDescription":"Closed or merged PR \"Making Dev16 required for SDK 2.1.6xx.\" (#10834)"},{"Id":"412129280","IsPullRequest":true,"CreatedAt":"2019-02-20T00:15:57","Actor":"livarcocc","Number":"10835","RawContent":null,"Title":"Making Dev16 required for SDK 2.2.2xx.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10835","RelatedDescription":"Closed or merged PR \"Making Dev16 required for SDK 2.2.2xx.\" (#10835)"},{"Id":"412148431","IsPullRequest":false,"CreatedAt":"2019-02-19T22:11:06","Actor":"dsplaisted","Number":"10842","RawContent":null,"Title":"Fail with graceful error message when trying to build WindowsDesktop project on non-Windows","State":"open","Body":"The Microsoft.NET.Sdk.WindowsDesktop SDK is only available on Windows.  This means that you will get an error that the SDK can't be found if you try to build a project that uses WindowsDesktop on Mac or Linux.  We should have a better error here, for example by having a \"stub\" version of the WindowsDesktop SDK on Mac and Linux that generates an error indicating that the SDK isn't supported on the current operating system.\r\n\r\nRelated: https://github.com/dotnet/wpf/issues/57#issuecomment-464415785","Url":"https://github.com/dotnet/cli/issues/10842","RelatedDescription":"Open issue \"Fail with graceful error message when trying to build WindowsDesktop project on non-Windows\" (#10842)"},{"Id":"412130556","IsPullRequest":true,"CreatedAt":"2019-02-19T21:23:02","Actor":"dotnet-bot","Number":"10839","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10839","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10839)"},{"Id":"412130534","IsPullRequest":true,"CreatedAt":"2019-02-19T21:22:59","Actor":"dotnet-bot","Number":"10838","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10838","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10838)"},{"Id":"412130520","IsPullRequest":true,"CreatedAt":"2019-02-19T21:22:56","Actor":"dotnet-bot","Number":"10837","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10837","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10837)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"413148623","IsPullRequest":false,"CreatedAt":"2019-02-21T22:14:20","Actor":"wtgodbe","Number":"1081","RawContent":null,"Title":"Use Arcade defaults for DebugType, etc","State":"open","Body":"https://github.com/dotnet/standard/blob/4a006e962fc5c5651b7712028e0e352b1e011a58/Directory.Build.props#L86-L104\r\n\r\nCC @tmat ","Url":"https://github.com/dotnet/standard/issues/1081","RelatedDescription":"Open issue \"Use Arcade defaults for DebugType, etc\" (#1081)"},{"Id":"412718646","IsPullRequest":true,"CreatedAt":"2019-02-21T22:12:16","Actor":"tmat","Number":"1078","RawContent":null,"Title":"Set copyright and package license","State":"closed","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/standard/pull/1078","RelatedDescription":"Closed or merged PR \"Set copyright and package license\" (#1078)"},{"Id":"411583193","IsPullRequest":true,"CreatedAt":"2019-02-21T19:39:58","Actor":"akoeplinger","Number":"1074","RawContent":null,"Title":"Fix link to build logs in build status badge","State":"closed","Body":"The PR which added the build status badges used the status from the public project but linked to the internal project: https://github.com/dotnet/standard/pull/1062\r\nUpdated to link to point to the public project.\r\n\r\nFixes https://github.com/dotnet/standard/issues/1065\r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1074","RelatedDescription":"Closed or merged PR \"Fix link to build logs in build status badge\" (#1074)"},{"Id":"408429514","IsPullRequest":false,"CreatedAt":"2019-02-21T19:39:58","Actor":"kaby76","Number":"1065","RawContent":null,"Title":"CI build status log is not public","State":"closed","Body":"Readme.md now includes a CI build status (https://github.com/dotnet/standard/commit/1e445e1f69f0fe37a7562bc59c054e7d0e15761f#diff-04c6e90faac2675aa89e2176d2eec7d8). This is good, but when I click on it, I get a \"401\" page because I am not an MS employee. Status of the build should not be opaque, and generally, if you go around to other projects on the web, the links are to the output of the build, not to 401. The badge links in the .../standard/readme.md page should to a public build so I can understand what is going on here. Roslyn does it correctly (https://github.com/dotnet/roslyn/blob/master/README.md); others, such as Corefx do not. Coreclr doesn't even have a badge for build status. Mono's readme.md page has them, and the links work.","Url":"https://github.com/dotnet/standard/issues/1065","RelatedDescription":"Closed issue \"CI build status log is not public\" (#1065)"},{"Id":"413086694","IsPullRequest":true,"CreatedAt":"2019-02-21T19:28:36","Actor":"terrajobst","Number":"1080","RawContent":null,"Title":"Add SwitchExpressionException","State":"open","Body":"Fixes #1077\r\n\r\nThis adds `SwitchExpressionException` that was added for supporting C#'s [`switch` expression construct](https://github.com/dotnet/csharplang/blob/master/proposals/patterns.md#switch-expression). The exception type was discussed in CoreFX in [this API request](https://github.com/dotnet/corefx/issues/33284).","Url":"https://github.com/dotnet/standard/pull/1080","RelatedDescription":"Open PR \"Add SwitchExpressionException\" (#1080)"},{"Id":"412912955","IsPullRequest":true,"CreatedAt":"2019-02-21T13:10:49","Actor":"dotnet-maestro[bot]","Number":"1079","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1079","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1079)"},{"Id":"412707494","IsPullRequest":false,"CreatedAt":"2019-02-21T01:34:24","Actor":"terrajobst","Number":"1077","RawContent":null,"Title":"Include SwitchExpression added for C# 8","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1077","RelatedDescription":"Open issue \"Include SwitchExpression added for C# 8\" (#1077)"},{"Id":"410901729","IsPullRequest":false,"CreatedAt":"2019-02-20T21:32:22","Actor":"mpetrinidev","Number":"1071","RawContent":null,"Title":"Cannot use linq in MatchCollection regex with .NET Standard 2.0","State":"closed","Body":"Hi everyone,\r\n\r\nI have the following problem with a .NET Standard 2.0 class library\r\n\r\n'MatchCollection' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type 'MatchCollection' could be found (are you missing a using directive or an assembly reference?)\r\n\r\n**Code**\r\n\r\n`IEnumerable<string> words = Regex.Matches(text, @\"([\\w]+\\.)+[\\w]+(?=[\\s]|$)\").Select(p => p.Value);`\r\n\r\nI had to move this code from a project that is develope with .NET Core 2.1.\r\n\r\nHow do I solve this problem? I read [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.matchcollection?view=netstandard-2.0](url) but I cannot find what the problem is\r\n\r\nThanks in advance","Url":"https://github.com/dotnet/standard/issues/1071","RelatedDescription":"Closed issue \"Cannot use linq in MatchCollection regex with .NET Standard 2.0\" (#1071)"},{"Id":"412413302","IsPullRequest":true,"CreatedAt":"2019-02-20T13:10:57","Actor":"dotnet-maestro[bot]","Number":"1076","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19119.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1076","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1076)"},{"Id":"412032685","IsPullRequest":false,"CreatedAt":"2019-02-19T17:11:56","Actor":"YairHalberstadt","Number":"1075","RawContent":null,"Title":"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit","State":"closed","Body":"I'm currently looking into targeting .Net Standard for Iron Python: https://github.com/IronLanguages/dlr/issues/175\r\n\r\nSome of the required Reflection.Emit APIs are missing from the System.Reflection.Emit nuget package when targeting .Net Standard 2.0, such as `DynamicMethod` and `TypeBuilder.CreateType()`. However they exist in both .Net Core and .Net Framework, and I believe it was decided in https://github.com/dotnet/corefx/issues/29365 (specifically from https://github.com/dotnet/corefx/issues/29365#issuecomment-398256162  and onwards) that such APIs should be included in the Nuget Package, and should throw when used from an AOT runtime.\r\n\r\nThe work to do that was completed in https://github.com/dotnet/corefx/pull/30741.\r\n\r\nIs there any reason why the Nuget package doesn't seem to reflect this?\r\n\r\nThanks","Url":"https://github.com/dotnet/standard/issues/1075","RelatedDescription":"Closed issue \"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit\" (#1075)"},{"Id":"411518831","IsPullRequest":false,"CreatedAt":"2019-02-18T15:04:17","Actor":"kjpou1","Number":"1073","RawContent":null,"Title":".NET Standard for WebAssembly","State":"open","Body":"### Rationale and Usage\r\n\r\nAs WebAssembly support in Mono is being worked on there is a need to consider it as a platform for NS2.1.  `PlatformID.WebAssembly`\r\n \r\n### Proposed API\r\n\r\n#### PlatformID\r\n\r\nThis adds WebAssembly enum to `PlatformID`\r\n\r\n```\r\n    public enum PlatformID\r\n    {\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32S = 0,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32Windows = 1,\r\n        Win32NT = 2,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WinCE = 3,\r\n        Unix = 4,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Xbox = 5,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] MacOSX = 6\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WebAssembly = 7\r\n    }\r\n```\r\n\r\n#### OSPlatform\r\n\r\nThis adds `OSPlatform.WebAssembly`.\r\n\r\n```\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    public readonly struct OSPlatform : IEquatable<OSPlatform>\r\n    {\r\n        private readonly string _osPlatform;\r\n\r\n        public static OSPlatform WebAssembly { get; } = new OSPlatform(\"WEBASSEMBLY\");\r\n\r\n        public static OSPlatform FreeBSD { get; } = new OSPlatform(\"FREEBSD\");\r\n\r\n        public static OSPlatform Linux { get; } = new OSPlatform(\"LINUX\");\r\n\r\n        public static OSPlatform OSX { get; } = new OSPlatform(\"OSX\");\r\n\r\n        public static OSPlatform Windows { get; } = new OSPlatform(\"WINDOWS\");\r\n\r\n```\r\n\r\nIssue from Blazor: https://github.com/mono/mono/issues/13002\r\n\r\n@terrajobst @marek-safar @lewing\r\n","Url":"https://github.com/dotnet/standard/issues/1073","RelatedDescription":"Open issue \".NET Standard for WebAssembly\" (#1073)"},{"Id":"411070793","IsPullRequest":true,"CreatedAt":"2019-02-16T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1072","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19115.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1072","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1072)"},{"Id":"410533703","IsPullRequest":true,"CreatedAt":"2019-02-15T20:32:52","Actor":"wtgodbe","Number":"1069","RawContent":null,"Title":"Label package as 'preview3'","State":"closed","Body":"Change label from `preview1` to `preview3` for upcoming release\r\n\r\nCC @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/pull/1069","RelatedDescription":"Closed or merged PR \"Label package as 'preview3'\" (#1069)"},{"Id":"410527393","IsPullRequest":true,"CreatedAt":"2019-02-15T20:32:45","Actor":"wtgodbe","Number":"1067","RawContent":null,"Title":"Add netstandard.xml Intellisense file back to NetStandard.Library","State":"closed","Body":"The SDK expects `XmlDocFileRoot` to be defined by the repo so that it can find the intellisense file to binplace into the package - redefining this property makes it so we get `netstandard.xml` in the package again for 2.1.\r\n\r\nCC @dsplaisted @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1067","RelatedDescription":"Closed or merged PR \"Add netstandard.xml Intellisense file back to NetStandard.Library\" (#1067)"},{"Id":"410759394","IsPullRequest":true,"CreatedAt":"2019-02-15T13:10:55","Actor":"dotnet-maestro[bot]","Number":"1070","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19114.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1070","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1070)"},{"Id":"410528981","IsPullRequest":true,"CreatedAt":"2019-02-14T23:12:42","Actor":"dotnet-maestro[bot]","Number":"1068","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19113.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1068","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#1068)"},{"Id":"408526522","IsPullRequest":false,"CreatedAt":"2019-02-10T11:39:52","Actor":"jmroyb","Number":"1066","RawContent":null,"Title":"Will be supported System.Web.Services.Discovery and System.Web.Services.Description?","State":"open","Body":"Hi folks,\r\n\r\nI need make portability from .NET FW 4.5 to .NET Standard. My lib uses System.Web.Services.Discovery and System.Web.Services.Description. Do you plan to migrate them to .NET Standard?\r\n\r\nCheers","Url":"https://github.com/dotnet/standard/issues/1066","RelatedDescription":"Open issue \"Will be supported System.Web.Services.Discovery and System.Web.Services.Description?\" (#1066)"},{"Id":"405434278","IsPullRequest":false,"CreatedAt":"2019-01-31T20:48:53","Actor":"botrif","Number":"1064","RawContent":null,"Title":"NETStandard, T4 templates, and System.Numerics.Vectors","State":"open","Body":"We have a T4 template to generate code based on reflection of another project. The template project and the other project are SDK style, multitargeted: &lt;TargetFrameworks&gt;net46;netstandard2.0;uap10.0.14393&lt;/TargetFramework&gt;\r\nThe assembly to reflect on is loaded with &lt;#@ assembly name=…\r\nIf the first target in the list is net46, reflection works fine: typeof(MyClass).Assembly.GetTypes()\r\nBut with netstandard first in the list, we get ReflectionTypeLoadException containing the following:\r\n\r\nCould not load file or assembly 'System.Numerics.Vectors, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n\r\n(the reflected-on assembly uses System.Vector.Numerics: &lt;PackageReference Include=\"System.Numerics.Vectors\" Version=\"4.5.0\" Condition=\" '$(TargetFramework)' == 'netstandard2.0' \" /&gt;\r\nOur previous workaround was to do the design-time code generation on net46, but we want to move to netstandard builds soon. How can this error be dealt with?","Url":"https://github.com/dotnet/standard/issues/1064","RelatedDescription":"Open issue \"NETStandard, T4 templates, and System.Numerics.Vectors\" (#1064)"},{"Id":"403988291","IsPullRequest":true,"CreatedAt":"2019-01-28T22:28:27","Actor":"wtgodbe","Number":"1062","RawContent":null,"Title":"Add build status badge to Repo home page","State":"closed","Body":"CC @danmosemsft @terrajobst @safern @ViktorHofer ","Url":"https://github.com/dotnet/standard/pull/1062","RelatedDescription":"Closed or merged PR \"Add build status badge to Repo home page\" (#1062)"},{"Id":"404008513","IsPullRequest":false,"CreatedAt":"2019-01-28T21:10:37","Actor":"wtgodbe","Number":"1063","RawContent":null,"Title":"Create shims for new netstandard2.1 assemblies","State":"open","Body":"We need to create Shims for the assemblies added to netstandard2.1 that weren't in netstandard2.0 - This means (as far as I know):\r\n\r\n- System.Memory\r\n- System.Threading.Tasks.Extensions\r\n- System.Reflection.DispatchProxy\r\n- System.Reflection.Emit\r\n- System.Reflection.Emit.ILGeneration\r\n- System.Reflection.Emit.Lightweight\r\n- System.Numerics.Vectors\r\n- System.Buffers\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1063","RelatedDescription":"Open issue \"Create shims for new netstandard2.1 assemblies\" (#1063)"},{"Id":"398564136","IsPullRequest":false,"CreatedAt":"2019-01-24T23:36:09","Actor":"netspiri","Number":"1052","RawContent":null,"Title":"Incorrect dll being copied","State":"closed","Body":"I have\r\n\r\n- ProjectA targeting .Net Standard 2.0 making use of nuget library where the dlls for the different frameworks are named differently\r\n- ProjectB targeting .Net Standard 2.0 references ProjectA\r\n- ProjectC targeting .Net Framework 4.7.2 references ProjectB\r\n- ProjectD targeting .Net Framework 4.7.2 and is a Console app referencing ProjectC\r\n\r\nIf I run ProjectD I get the infamous \"Could not load file or assembly\" for Aspose.Email.Core.dll.\r\n\r\nI played around <RestoreProjectStyle>PackageReference</RestoreProjectStyle> in ProjectC and ProjectD but this results in .net framework dll (i.e Aspose.Email.dll) being copied over from the nuget package and not the .net standard dll (Aspose.Email.Core.dll).  I did not play with binding redirects because I do not think this is related.\r\n\r\nI've migrated manually ProjectC and ProjectD to the new csproj style but this had no effect.\r\n\r\nI do not want to end up with ProjectD referencing the required dlls directly because there must \"the proper way of doing it\".\r\n\r\nI have therefore uploaded a clean barebones project to https://bitbucket.org/netspiri/projectreferencestest.git , so as to see how the experts would do it, in the hope that this might help others. \r\n\r\nI've attached also the output of msbuild ProjectD.csproj /t:rebuild /bl\r\n\r\nIt would be nice if the experts would guide trough thier troubleshooting process.\r\n\r\n[log.txt](https://github.com/dotnet/standard/files/2752202/log.txt)\r\n[msbuild.zip](https://github.com/dotnet/standard/files/2752203/msbuild.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1052","RelatedDescription":"Closed issue \"Incorrect dll being copied\" (#1052)"},{"Id":"402932649","IsPullRequest":true,"CreatedAt":"2019-01-24T23:21:33","Actor":"wtgodbe","Number":"1060","RawContent":null,"Title":"Set StrongNameKeyID after import sdk.props","State":"closed","Body":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj ","Url":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Closed or merged PR \"Set StrongNameKeyID after import sdk.props\" (#1060)"},{"Id":"402860962","IsPullRequest":true,"CreatedAt":"2019-01-24T21:43:12","Actor":"terrajobst","Number":"1059","RawContent":null,"Title":"Add missing dummy fields","State":"closed","Body":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff.","Url":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Closed or merged PR \"Add missing dummy fields\" (#1059)"},{"Id":"402275150","IsPullRequest":false,"CreatedAt":"2019-01-24T19:47:05","Actor":"jacobmohl","Number":"1056","RawContent":null,"Title":"Add support for HttpClient.PatchAsync()","State":"closed","Body":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync().","Url":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Closed issue \"Add support for HttpClient.PatchAsync()\" (#1056)"},{"Id":"402847550","IsPullRequest":true,"CreatedAt":"2019-01-24T19:39:46","Actor":"wtgodbe","Number":"1058","RawContent":null,"Title":"Re-enable APICompat for netstandard1.x/2.0","State":"closed","Body":"This causes netstandard1.x/2.0 assets to be binplaced at `artifacts\\obj\\CompatShims\\ref` again, which will re-enable the APICompat runs for those TFMs. @ViktorHofer I noticed you removed this line here: https://github.com/dotnet/standard/pull/1040/files#diff-1fea8681058f11db0ecbfc2fc8a5be52L7 - was that intentional?","Url":"https://github.com/dotnet/standard/pull/1058","RelatedDescription":"Closed or merged PR \"Re-enable APICompat for netstandard1.x/2.0\" (#1058)"},{"Id":"400369663","IsPullRequest":false,"CreatedAt":"2019-01-24T19:21:03","Actor":"UnreachableCode","Number":"1055","RawContent":null,"Title":"Android implementation of HTTPClient throwing up java.io.IOException ","State":"closed","Body":"I believe this relates to the bug detailed in Xamarin's old Bugzilla:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41100\r\n\r\nand is also similar to the issue discussed here:\r\nhttps://github.com/square/okhttp/issues/1517\r\n\r\nHere is the main stacktrace of my issue:\r\n\r\nLoginProvider+<LoginAsync>d__1.MoveNext () C:\\source\\repos\\{MyApp}\\{MyApp}\\{MyApp}\\Services\\LoginProvider.cs:35\r\njava.io.IOException: unexpected end of stream on Connection{testclarity.i-menzies.com:443, proxy=DIRECT@ hostAddress=62.244.173.166 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1} (recycle count=0)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\r\ncom.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\r\ncom.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:905)\r\ncom.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:789)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:443)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:388)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:501)\r\ncom.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\r\ncom.android.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\r\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\r\ncom.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\r\n\r\nI have tried setting the connection closed header and setting chunked transfer encoding but neither of these fixes work. I would try to set the OkHTTP.setRetryOnConnectionFailure(true) but I don't think there is a way to do this in the referenced Java source.","Url":"https://github.com/dotnet/standard/issues/1055","RelatedDescription":"Closed issue \"Android implementation of HTTPClient throwing up java.io.IOException \" (#1055)"},{"Id":"402566640","IsPullRequest":true,"CreatedAt":"2019-01-24T06:55:33","Actor":"wtgodbe","Number":"1057","RawContent":null,"Title":"Dummy commit to trigger CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1057","RelatedDescription":"Closed or merged PR \"Dummy commit to trigger CI\" (#1057)"},{"Id":"400334291","IsPullRequest":false,"CreatedAt":"2019-01-18T13:36:41","Actor":"aday12345","Number":"1054","RawContent":null,"Title":".net standard 2.1 targeting question","State":"closed","Body":"i have the .net core 2.2 sdk installed and can target it with no issue, but should i be able to target the netStandard 2.1 library when creating a class library? i only see 2.0 as an option.","Url":"https://github.com/dotnet/standard/issues/1054","RelatedDescription":"Closed issue \".net standard 2.1 targeting question\" (#1054)"},{"Id":"399549465","IsPullRequest":false,"CreatedAt":"2019-01-15T21:45:54","Actor":"kaby76","Number":"1053","RawContent":null,"Title":"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.","State":"open","Body":"I've started porting (rewriting) the Net Core framework to the GPU. Part of this very large task is to go through the framework and verify that it indeed satisfies the Net Standard specification because I really don't trust anything/anyone. So, I have several questions regarding Net Standard.\r\n\r\n1) According to Microsoft documentation (https://docs.microsoft.com/en-us/dotnet/standard/net-standard), “[t]he .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations. The motivation behind the .NET Standard is establishing greater uniformity in the .NET ecosystem. ECMA 335 continues to establish uniformity for .NET implementation behavior, but there's no similar spec for the .NET Base Class Libraries (BCL) for .NET library implementations.”\r\n\r\nQ: Exactly where is the “formal specification” of the API? Is it the MD file for a particular version (e.g., https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md)? Is it the collection of C# files with stub implementations (e.g., the files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref)? Or, is it something else?\r\n\r\n2) Assuming that the C# files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref is the formal definition. I wrote a CSPROJ to build an assembly for the current state of the decls. Then, I wrote a program to go through a framework, following reference assemblies to implementation assemblies, and output a sorted list of all types, all methods, all attributes, for public decls. I compared the reference and implementation assemblies for Net Core with the Standard set forth in the C# code. And yes, there are some non-trivial differences, mostly because the standard is evolving.\r\n\r\nThe following are general questions of type equivalence.\r\n\r\nQ: If there's an attribute (\"[...]\") on a type is in Standard, but missing on the type in Core, does Core still satisfy the Standard?\r\n\r\nQ: If a method and/or type exists in Core, but not in Standard, does the implementation still satisfy the Standard? In other words, can an implementation provide \"extra\" and still satisfy Standard?\r\n\r\nThe full list of the type dump for Standard and Core assemblies is here (https://1drv.ms/f/s!Atb3HX_AxX9ZgaxT-m221N6ut285Vw).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1053","RelatedDescription":"Open issue \"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.\" (#1053)"},{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"413244410","IsPullRequest":false,"CreatedAt":"2019-02-22T04:59:47","Actor":"chukunx","Number":"35515","RawContent":null,"Title":"Queue<T>: why set GrowFactor to 200 and divide by 100?","State":"open","Body":"hi guys, this isn't an issue, but just me being curious about a configuration setup in `Queue<T>` class. may i ask why do we want to double the size of array by initiating the GrowFactor as 200 and multiplying the original size by `GrowFactor / 100` here? what's the downside of using `2` directly? thanks.\r\nhttps://github.com/dotnet/corefx/blob/bca44089343cf14cffd3cb0982b7e209692f6731/src/System.Collections/src/System/Collections/Generic/Queue.cs#L188","Url":"https://github.com/dotnet/corefx/issues/35515","RelatedDescription":"Open issue \"Queue<T>: why set GrowFactor to 200 and divide by 100?\" (#35515)"},{"Id":"413211922","IsPullRequest":true,"CreatedAt":"2019-02-22T03:52:48","Actor":"stephentoub","Number":"35511","RawContent":null,"Title":"NO MERGE: CI test","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/35511","RelatedDescription":"Closed or merged PR \"NO MERGE: CI test\" (#35511)"},{"Id":"413016840","IsPullRequest":false,"CreatedAt":"2019-02-22T03:45:46","Actor":"baal2000","Number":"35495","RawContent":null,"Title":"Fake async implementation of TextWriter.FlushAsync","State":"closed","Body":"[TextWriter.FlushAsync](https://github.com/dotnet/corefx/blob/6622937a3ccdb0ebe81747e92903a009e1702575/src/Common/src/CoreLib/System/IO/TextWriter.cs#L617) wraps synchronous counterpart `TextWriter.Flush()` into `Task.Run()`. Would it be rather more honest to not implement and let the users deal when needed?\r\n","Url":"https://github.com/dotnet/corefx/issues/35495","RelatedDescription":"Closed issue \"Fake async implementation of TextWriter.FlushAsync\" (#35495)"},{"Id":"413226846","IsPullRequest":false,"CreatedAt":"2019-02-22T03:29:36","Actor":"ahsonkhan","Number":"35514","RawContent":null,"Title":"Consider moving System.IO.Pipelines into the shared framework","State":"open","Body":"**Motivation:**\r\nThe recent in-box JSON serializer APIs (see https://github.com/dotnet/corefx/issues/34372 / https://github.com/dotnet/apireviews/tree/master/2019/System.Text.Json-Serialization) expect to take `PipeReader`/`PipeWriter`. This results in `System.Text.Json` depending on `System.IO.Pipelines`. However, the Pipelines package is not part of the shared framework and hence cannot be referenced by S.T.Json.\r\n\r\nSee discussion here:\r\nhttps://github.com/dotnet/apireviews/pull/91#discussion_r256595035\r\n\r\n**Can we move parts of `System.IO.Pipelines` (or all of it) in-box?**\r\n\r\nIf we consider Pipeline APIs \"siblings\" to streams, then they could be pushed down low enough within the stack for S.T.Json to take a dependency on it (but maybe not low enough to be pushed to corelib). Is that an appropriate view of pipelines? What are the risks/constraints with moving System.IO.Pipelines inbox?\r\n\r\n**Possible alternatives to resolve the motivation differently:**\r\n1) The JSON serializer instead accepts some other abstraction that is implemented within System.Memory (an assembly it already depends on).\r\n    - For example, on the writer/serializer side, an extension of the `IBufferWriter` interface, `IAsyncBufferWriter` which `PipeWriter` would implement (TBD for the reader/deserializer side).\r\n2) We invert the dependency where Pipelines depends on S.T.Json and PipeReader/Writer themselves provide serialize methods.\r\n3) We only move parts of S.IO.Pipelines in-box (i.e. only what's required - PipeReader/PipeWriter) as part of a new assembly. Does that result in freezing the OOB package?\r\n4) The JSON serializer doesn't provide direct `PipeReader`/`PipeWriter` support at all (less than ideal).\r\n\r\ncc @davidfowl, @steveharter, @pakrym, @joshfree, @terrajobst, @jkotas, @stephentoub, @bartonjs, @ericstj, @KrzysztofCwalina ","Url":"https://github.com/dotnet/corefx/issues/35514","RelatedDescription":"Open issue \"Consider moving System.IO.Pipelines into the shared framework\" (#35514)"},{"Id":"412993770","IsPullRequest":true,"CreatedAt":"2019-02-22T03:16:05","Actor":"stephentoub","Number":"35492","RawContent":null,"Title":"Use a pooled buffer in BrotliStream","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/35487\r\ncc: @buyaa-n, @ahsonkhan, @ViktorHofer","Url":"https://github.com/dotnet/corefx/pull/35492","RelatedDescription":"Closed or merged PR \"Use a pooled buffer in BrotliStream\" (#35492)"},{"Id":"412911764","IsPullRequest":false,"CreatedAt":"2019-02-22T03:16:05","Actor":"Timovzl","Number":"35487","RawContent":null,"Title":"BrotliStream allocates 65K buffer","State":"closed","Body":"`BrotliStream` allocates a `byte[]` buffer of `DefaultInternalBufferSize`=65K, as can be seen in the source:\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.IO.Compression.Brotli/src/System/IO/Compression/BrotliStream.cs\r\n\r\nThis seems like a sizeable allocation for every stream. The stream option is attractive because it makes it very easy to use the algorithm correctly. It is made less attractive by the buffer allocation.\r\n\r\nThe stream is already disposable, so its seems trivial to _rent_ a buffer instead of allocating one. To rent from `MemoryPool`, the buffer's type would have to change to `Memory<byte>`. Alternatively, `ArrayPool` might be used, although the former seems preferable.","Url":"https://github.com/dotnet/corefx/issues/35487","RelatedDescription":"Closed issue \"BrotliStream allocates 65K buffer\" (#35487)"},{"Id":"413203140","IsPullRequest":true,"CreatedAt":"2019-02-22T03:15:41","Actor":"davidfowl","Number":"35509","RawContent":null,"Title":"Reduce the amount of exceptions throw in Advance","State":"closed","Body":"- Advance checks for 3 error conditions today, no writing head (no body called GetMemory()), bytesWritten being a positive number and that Advance is called with a bytesWritten between 0 and _writingMemory.Length. Instead, just unify those into a single ArgumentOutOfRangeException.","Url":"https://github.com/dotnet/corefx/pull/35509","RelatedDescription":"Closed or merged PR \"Reduce the amount of exceptions throw in Advance\" (#35509)"},{"Id":"413220109","IsPullRequest":false,"CreatedAt":"2019-02-22T02:56:24","Actor":"davidfowl","Number":"35513","RawContent":null,"Title":"API Proposal: Add CopyToAsync methods to write from PipeReader to PipeWriter","State":"open","Body":"https://github.com/dotnet/corefx/issues/27246 adds methods for copying from the PipeReader to a Stream and from a Stream to a PipeWriter but we haven't yet added APIs to copy from a PipeReader to a PipeWriter:\r\n\r\n```C#\r\npublic abstract class PipeReader\r\n{\r\n      public virtual CopyToAsync(PipeWriter writer, CancellationToken cancellationToken = default);\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/35513","RelatedDescription":"Open issue \"API Proposal: Add CopyToAsync methods to write from PipeReader to PipeWriter\" (#35513)"},{"Id":"413219375","IsPullRequest":true,"CreatedAt":"2019-02-22T02:52:38","Actor":"jkotas","Number":"35512","RawContent":null,"Title":"Update Environment.Version test to not expect hardcoded version","State":"open","Body":"Contributes to https://github.com/dotnet/corefx/issues/31099","Url":"https://github.com/dotnet/corefx/pull/35512","RelatedDescription":"Open PR \"Update Environment.Version test to not expect hardcoded version\" (#35512)"},{"Id":"413203683","IsPullRequest":true,"CreatedAt":"2019-02-22T02:17:12","Actor":"stephentoub","Number":"35510","RawContent":null,"Title":"Reduce PLINQ outerloop test execution time","State":"closed","Body":"Our PLINQ test suite has a ridiculously large number of test cases, in particular in outerloop (~200K), and as such it takes a long time to run.  In outerloop CI legs on some machines we're currently bumping up against time limits, causing spurious failures.  While more may be needed, these two small tweaks shrink execution time on my machine by 50%.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/35333 (hopefully... we may need to cut more and/or increase the timeout)\r\ncc: @tarekgh, @benaadams ","Url":"https://github.com/dotnet/corefx/pull/35510","RelatedDescription":"Closed or merged PR \"Reduce PLINQ outerloop test execution time\" (#35510)"},{"Id":"413169573","IsPullRequest":false,"CreatedAt":"2019-02-21T23:18:05","Actor":"terrajobst","Number":"35508","RawContent":null,"Title":"Consider removing Range.OffsetAndLength","State":"open","Body":"We currently have this nested type for `Range`:\r\n\r\n```C#\r\nnamespace System\r\n{\r\n    public partial struct Range\r\n    {\r\n        public OffsetAndLength GetOffsetAndLength(int length);\r\n\r\n        public readonly struct OffsetAndLength\r\n        {\r\n            public int Offset { get; }\r\n            public int Length { get; }\r\n \r\n            public OffsetAndLength(int offset, int length);\r\n            public void Deconstruct(out int offset, out int length);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nHowever, considering that the outputs are fixed, we should consider making this simply a tuple:\r\n\r\n```C#\r\nnamespace System\r\n{\r\n    public partial struct Range\r\n    {\r\n        public (int Offset, int Length) GetOffsetAndLength(int length);\r\n    }\r\n}\r\n```\r\n\r\n/cc @tarekgh @stephentoub @dotnet/fxdc ","Url":"https://github.com/dotnet/corefx/issues/35508","RelatedDescription":"Open issue \"Consider removing Range.OffsetAndLength\" (#35508)"},{"Id":"413141877","IsPullRequest":true,"CreatedAt":"2019-02-21T23:01:03","Actor":"wfurt","Number":"35506","RawContent":null,"Title":"fix ping TTL option for OSX","State":"closed","Body":"This got missed because my machine defaults to IPv6 and that worked as expected when resolving name. \r\nCI machines do not have global IPv6 configured and test fail. I was able to reproduce the failure when forcibly disabling IPv4 on my system.  ","Url":"https://github.com/dotnet/corefx/pull/35506","RelatedDescription":"Closed or merged PR \"fix ping TTL option for OSX\" (#35506)"},{"Id":"413154256","IsPullRequest":true,"CreatedAt":"2019-02-21T22:30:14","Actor":"dotnet-maestro[bot]","Number":"35507","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview3-27421-72\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview3-27421-72\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview3-27421-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35507","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#35507)"},{"Id":"413131663","IsPullRequest":false,"CreatedAt":"2019-02-21T21:27:59","Actor":"arielmoraes","Number":"35505","RawContent":null,"Title":"HttpClient Connection Reset By Peer when using HttpClientExtensions","State":"open","Body":"Tested using .NET Core Versions 2.1 and 2.2\r\n\r\nWe have a `HttpClient` that makes some requests using the `PostAsJsonAsync ` and `PutAsJsonAsync ` from the `HttpClientExtensions` in the `System.Net.Http.Formatting` assembly but in some cases we are getting an exception with a message saying the Connection was reset by peer. The Stack Trace we have is:\r\n\r\n> System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.IO.IOException: Unable to read data from the transport connection: Connection reset by peer.\r\n> --- End of inner exception stack trace ---\r\n> at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error)\r\n> at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.GetResult(Int16 token)\r\n> at System.Net.Http.HttpConnection.FillAsync()\r\n> at System.Net.Http.HttpConnection.ReadNextResponseHeaderLineAsync(Boolean foldedHeadersAllowed)\r\n> at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, CancellationToken cancellationToken)\r\n> --- End of inner exception stack trace ---\r\n> at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, CancellationToken cancellationToken)\r\n> at System.Net.Http.HttpConnectionPool.SendWithNtConnectionAuthAsync(HttpConnection connection, HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n> at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n> at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n> at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n> at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n> at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n\r\nNow the strange and unbelievable solution we happen to achieve is to create a dummy Handler that just prints the Request and Response content to the ILogger as follows:\r\n\r\n```csharp\r\npublic class LoggingHandler : DelegatingHandler\r\n{\r\n\tILogger<TenantSeeder> logger;\r\n\r\n\tpublic LoggingHandler(HttpMessageHandler innerHandler, ILogger<TenantSeeder> logger)\r\n\t\t: base(innerHandler)\r\n\t{\r\n\t\tthis.logger = logger;\r\n\t}\r\n\r\n\tprotected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n\t{\r\n\t\tlogger.LogTrace(\"Request:\");\r\n\t\tlogger.LogTrace(request.ToString());\r\n\t\tif (request.Content != null)\r\n\t\t{\r\n\t\t\tlogger.LogTrace(await request.Content.ReadAsStringAsync());\r\n\t\t}\r\n\r\n\t\tHttpResponseMessage response = await base.SendAsync(request, cancellationToken);\r\n\r\n\t\tlogger.LogTrace(\"Response:\");\r\n\t\tlogger.LogTrace(response.ToString());\r\n\t\tif (response.Content != null)\r\n\t\t{\r\n\t\t\tlogger.LogTrace(await response.Content.ReadAsStringAsync());\r\n\t\t}\r\n\r\n\t\treturn response;\r\n\t}\r\n}\r\n```\r\n\r\nWhen using that Handler the request completes successfully. \r\n\r\nSome more info: the connection is using SSL and when called directly from Postman it works as expected and the JSON being sent is very simple: \r\n\r\n```csharp\r\nvar response = await httpClient.PostAsJsonAsync(\"api/tenants\", new\r\n{\r\n\tName = tenant.CompanyName,\r\n\tUniqueName = uniqueName,\r\n\tClientId = uniqueName,\r\n\tClientSecret = $\"{uniqueName}secret\",\r\n\tEnabled = tenant.IsActivated\r\n})\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/35505","RelatedDescription":"Open issue \"HttpClient Connection Reset By Peer when using HttpClientExtensions\" (#35505)"},{"Id":"413067483","IsPullRequest":true,"CreatedAt":"2019-02-21T21:25:42","Actor":"wtgodbe","Number":"35497","RawContent":null,"Title":"Update intellisense files for S.Mem, S.T.Json, S.Runtime based on 02-14-2019 doc build.","State":"closed","Body":"Cherry-pick of https://github.com/dotnet/corefx/pull/35467 into release/3.0 (The PR merged before 5, but after my mass code-merge at 4:15 yesterday)\r\n\r\nCC @ahsonkhan @danmosemsft @leecow ","Url":"https://github.com/dotnet/corefx/pull/35497","RelatedDescription":"Closed or merged PR \"Update intellisense files for S.Mem, S.T.Json, S.Runtime based on 02-14-2019 doc build.\" (#35497)"},{"Id":"413126776","IsPullRequest":false,"CreatedAt":"2019-02-21T21:15:05","Actor":"jchang6","Number":"35504","RawContent":null,"Title":"Common sln for both .NET framework and Core","State":"open","Body":"Ok, so I have managed to port one application from .NET Framework 4.6.1 to Core 3.0.\r\nThe same code files now work for both, but I seem to need separate sln and directories for each project, except that the Core project excludes the \\Properties\\AssemblyInfo.cs file. \r\nIf I try to have one directory with one proj file for Framework and another for Core, \r\nthe Core project builds, but the Framework project complains I am missing the Target Framework Version entry, even though it is in proj file?\r\nThis project also builds on MacOS (which was the original purpose of the port) but does not run, \"It was not possible to find any compatible framework version\"\r\nSo if there is a link to running .Net Core apps on Mac for a non-Mac person, that would be helpful","Url":"https://github.com/dotnet/corefx/issues/35504","RelatedDescription":"Open issue \"Common sln for both .NET framework and Core\" (#35504)"},{"Id":"413126138","IsPullRequest":true,"CreatedAt":"2019-02-21T21:13:20","Actor":"bartonjs","Number":"35503","RawContent":null,"Title":"Add doc comments to JsonDocument (and friends)","State":"open","Body":"* Add doc comments to all public members of JsonDocument, JsonElement, JsonProperty, and JsonValueType.\r\n* Add \"do not use this\" doc comments on all internal members, because of source-package concerns.\r\n* Change JsonElement.TokenType from internal to private because it could.\r\n\r\nFixes #35313.","Url":"https://github.com/dotnet/corefx/pull/35503","RelatedDescription":"Open PR \"Add doc comments to JsonDocument (and friends)\" (#35503)"},{"Id":"413117856","IsPullRequest":true,"CreatedAt":"2019-02-21T20:50:52","Actor":"kouvel","Number":"35502","RawContent":null,"Title":"Expose and test APIs for some threading metrics (CoreFX)","State":"open","Body":"- API review: https://github.com/dotnet/corefx/issues/35500\r\n- Depends on https://github.com/dotnet/coreclr/pull/22754, https://github.com/dotnet/corert/pull/7066","Url":"https://github.com/dotnet/corefx/pull/35502","RelatedDescription":"Open PR \"Expose and test APIs for some threading metrics (CoreFX)\" (#35502)"},{"Id":"413111696","IsPullRequest":true,"CreatedAt":"2019-02-21T20:34:27","Actor":"ostorc","Number":"35501","RawContent":null,"Title":"Adding implementation of IEquatable to Memory and ReadOnlyMemory","State":"open","Body":"Adding implementation of IEquatable to Memory and ReadOnlyMemory. Resolves #32905 ","Url":"https://github.com/dotnet/corefx/pull/35501","RelatedDescription":"Open PR \"Adding implementation of IEquatable to Memory and ReadOnlyMemory\" (#35501)"},{"Id":"413110057","IsPullRequest":false,"CreatedAt":"2019-02-21T20:30:08","Actor":"kouvel","Number":"35500","RawContent":null,"Title":"Add APIs for some threading metrics","State":"open","Body":"From https://github.com/dotnet/coreclr/issues/20372\r\n\r\n```c#\r\n    public static class ThreadPool\r\n    {\r\n        public static long CompletedWorkItemCount { get; }\r\n        public static long PendingWorkItemCount { get; }\r\n        public static int ThreadCount { get; }\r\n    }\r\n\r\n    public static class Monitor\r\n    {\r\n        public static long LockContentionCount { get; }\r\n    }\r\n```\r\n\r\n- `ThreadPool.CompletedWorkItemCount`\r\n  - Gets the number of work items that have been processed so far\r\n  - For a thread pool implementation that may have different types of work items, the count includes all types (user work items including tasks, timer callbacks, wait callbacks, and IO completions)\r\n  - Changes over units of time would be plottable and would allow calculating throughput and average work item duration\r\n  - There is some overhead in tracking this information, but it seems to be negligible\r\n- `ThreadPool.PendingWorkItemCount`\r\n  - Gets the number of work items that are currently queued to be processed\r\n  - For a thread pool implementation that may have different types of work items, the count may not include all types. The count may only include user work items including tasks. Some implementations may also include queued timer and wait callbacks in the count. On Windows, the count is unlikely to include the number of pending IO completions, as they get posted directly to an IO completion port.\r\n- `ThreadPool.ThreadCount`\r\n  - Gets the number of thread pool threads that currently exist\r\n  - For a thread pool implementation that may have different types of threads, the count includes all types\r\n- `Monitor.LockContentionCount`\r\n  - Gets the number of times there was contention upon trying to take a `Monitor`'s lock so far\r\n  - Changes over units of time would be plottable and would allow calculating frequency of contention\r\n\r\nCC @noahfalk @stephentoub @sywhang @vancem ","Url":"https://github.com/dotnet/corefx/issues/35500","RelatedDescription":"Open issue \"Add APIs for some threading metrics\" (#35500)"},{"Id":"413102831","IsPullRequest":false,"CreatedAt":"2019-02-21T20:10:40","Actor":"geoffkizer","Number":"35499","RawContent":null,"Title":"Feature request: Add Environment.LongTickCount","State":"open","Body":"Environment.TickCount rolls over, which makes it inconvenient to use. See e.g. https://github.com/dotnet/corefx/pull/35401\r\n\r\nTo remedy this, we should add Environment.LongTickCount. This is trivial to implement on Windows using GetTickCount64. \r\n\r\n```C#\r\npublic static class Environment\r\n{\r\n    public static long LongTickCount { get; } // or TickCount64\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/35499","RelatedDescription":"Open issue \"Feature request: Add Environment.LongTickCount\" (#35499)"},{"Id":"413094300","IsPullRequest":false,"CreatedAt":"2019-02-21T19:48:44","Actor":"Meir017","Number":"35498","RawContent":null,"Title":"[Feature] create ObsoleteAttribute CodeFix to replace obsolete method with new one","State":"open","Body":"@Meir017 commented on [Wed Feb 20 2019](https://github.com/dotnet/roslyn/issues/33519)\n\na possible way could be adding new properties to the `ObsoleteAttribute`\r\n\r\n```cs\r\npublic sealed class ObsoleteAttribute : Attribute\r\n{\r\n    public Type NewType { get; set; }\r\n\r\n    public ObsoleteAttribute(Type newType)\r\n    {\r\n        _message = $\"Use {newType.Name} instead.\";\r\n        _error = false;\r\n        NewType = newType;\r\n    }\r\n\r\n    public ObsoleteAttribute(Type newType, bool error)\r\n    {\r\n        _message = $\"Use {newType.Name} instead.\";\r\n        _error = error;\r\n        NewType = newType;\r\n    }\r\n}\r\n```\r\n\r\nthen the warning could also suggest a rename\n\n---\n\n@CyrusNajmabadi commented on [Wed Feb 20 2019](https://github.com/dotnet/roslyn/issues/33519#issuecomment-465718291)\n\n@Meir017 Sorry, i'm not understanding what this proposal is asking for . Can you flesh it out more (including examples of what the user would start with and what the codefix would do for them)?  Thanks!\n\n---\n\n@Meir017 commented on [Thu Feb 21 2019](https://github.com/dotnet/roslyn/issues/33519#issuecomment-466063770)\n\nan example from https://github.com/aspnet/AspNetCore/issues/7749\r\neach time the `ObsoleteAttribute` is used its called with a message that in plain text suggest the new type to be used. if the new type would be passed in as a parameter it could be used in a code-fix\r\n\r\nso instead of writing\r\n```cs\r\n[Obsolete(\"Use IHostApplicationLifetime instead.\", error: false)]\r\n```\r\nit would be\r\n```cs\r\n[Obsolete(newType: typeof(IHostApplicationLifetime))]\r\n```\r\n\r\nwith 2 new constructors:\r\n```cs\r\npublic ObsoleteAttribute(Type newType)\r\n{\r\n    _message = $\"Use {newType.Name} instead.\";\r\n    _error = false;\r\n    NewType = newType;\r\n}\r\npublic ObsoleteAttribute(Type newType, bool error)\r\n{\r\n    _message = $\"Use {newType.Name} instead.\";\r\n    _error = error;\r\n    NewType = newType;\r\n}\r\n```\n\n---\n\n@CyrusNajmabadi commented on [Thu Feb 21 2019](https://github.com/dotnet/roslyn/issues/33519#issuecomment-466139755)\n\nThis isn't an IDE feature.  You're asking for the BCL to change rt to ObsoleteAttribute.  can you please move this to the corefx repo?\n\n","Url":"https://github.com/dotnet/corefx/issues/35498","RelatedDescription":"Open issue \"[Feature] create ObsoleteAttribute CodeFix to replace obsolete method with new one\" (#35498)"},{"Id":"413052735","IsPullRequest":true,"CreatedAt":"2019-02-21T18:00:39","Actor":"wfurt","Number":"35496","RawContent":null,"Title":"no merge: add output tests to check Kusto records","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/35496","RelatedDescription":"Open PR \"no merge: add output tests to check Kusto records\" (#35496)"},{"Id":"413003185","IsPullRequest":true,"CreatedAt":"2019-02-21T17:16:36","Actor":"stephentoub","Number":"35494","RawContent":null,"Title":"Disable two Socket.Begin/EndSendFile tests","State":"closed","Body":"#35493\r\ncc: @davidsh","Url":"https://github.com/dotnet/corefx/pull/35494","RelatedDescription":"Closed or merged PR \"Disable two Socket.Begin/EndSendFile tests\" (#35494)"},{"Id":"412916316","IsPullRequest":true,"CreatedAt":"2019-02-21T16:46:01","Actor":"dotnet-maestro[bot]","Number":"35489","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27420-73\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27420-73\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27420-73\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35489","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#35489)"},{"Id":"412996959","IsPullRequest":false,"CreatedAt":"2019-02-21T15:56:56","Actor":"stephentoub","Number":"35493","RawContent":null,"Title":"BeginSendFile tests failing assert","State":"open","Body":"The tests that use BeginSendFile have started failing with a Debug.Assert.\r\n```\r\nAssertion Failed\r\nExpected non-0 error\r\n\r\n   at System.Net.Sockets.SocketPal.GetLastSocketError() in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketPal.Windows.cs:line 38\r\n   at System.Net.Sockets.BaseOverlappedAsyncResult.ProcessOverlappedResult(Boolean success, Int32 bytesTransferred) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\BaseOverlappedAsyncResult.Windows.cs:line 167\r\n   at System.Net.Sockets.SocketPal.SendFileAsync(SafeSocketHandle handle, FileStream fileStream, Byte[] preBuffer, Byte[] postBuffer, TransmitFileOptions flags, TransmitFileAsyncResult asyncResult) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketPal.Windows.cs:line 1012\r\n   at System.Net.Sockets.Socket.BeginSendFileInternal(String fileName, Byte[] preBuffer, Byte[] postBuffer, TransmitFileOptions flags, AsyncCallback callback, Object state) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.Windows.cs:line 250\r\n   at System.Net.Sockets.Socket.BeginSendFile(String fileName, Byte[] preBuffer, Byte[] postBuffer, TransmitFileOptions flags, AsyncCallback callback, Object state) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.cs:line 2728\r\n   at System.Net.Sockets.Socket.BeginSendFile(String fileName, AsyncCallback callback, Object state) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.cs:line 2709\r\n```\r\n\r\nThis has started happening in CI very frequently but not consistently. The TransmitFile P/Invoke is returning false, but then the subsequent call to GetLastError returns 0, which shouldn't happen, as that indicates success, and there's a Debug.Assert triggered as a result.  This happens only sporadically under load, and when it does happen, it appears that TransmitFile actually did succeed in sending all of the relevant data.  As a result, it appears in a release build everything ends up happening to work correctly, but only by accident.\r\n\r\nMight be a bug at the OS level.","Url":"https://github.com/dotnet/corefx/issues/35493","RelatedDescription":"Open issue \"BeginSendFile tests failing assert\" (#35493)"},{"Id":"412968292","IsPullRequest":false,"CreatedAt":"2019-02-21T15:00:13","Actor":"Metalnem","Number":"35491","RawContent":null,"Title":"BinaryFormatter.Deserialize throws many unexpected exceptions","State":"open","Body":"The [documentation](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter.deserialize?view=netcore-2.2) says that the **BinaryFormatter.Deserialize** method may throw **SerializationException** or **SecurityException**, but it can actually throw many more. Here are some of them:\r\n\r\n- **ArgumentException**\r\n- **ArgumentOutOfRangeException**\r\n- **DecoderFallbackException**\r\n- **FileLoadException**\r\n- **FormatException**\r\n- **IndexOutOfRangeException**\r\n- **IOException**\r\n- **MemberAccessException**\r\n- **NullReferenceException**\r\n- **OverflowException**\r\n\r\nTo reproduce all of these, just run the project from the [attached archive](https://github.com/dotnet/corefx/files/2889743/CoreFX.Fuzz.zip).\r\n\r\nMy environment:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.104/\r\n```\r\n\r\nFound via [SharpFuzz](https://github.com/Metalnem/sharpfuzz).","Url":"https://github.com/dotnet/corefx/issues/35491","RelatedDescription":"Open issue \"BinaryFormatter.Deserialize throws many unexpected exceptions\" (#35491)"},{"Id":"412898280","IsPullRequest":true,"CreatedAt":"2019-02-21T14:26:38","Actor":"Dotnet-GitSync-Bot","Number":"35486","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corefx/pull/35486","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,coreclr\" (#35486)"},{"Id":"412917014","IsPullRequest":false,"CreatedAt":"2019-02-21T13:11:13","Actor":"geoffkizer","Number":"35490","RawContent":null,"Title":"HTTP2: HPackDecoder has hard-coded max string size","State":"open","Body":"The HPackDecoder currently has a hard-coded limit on string size. See here:  https://github.com/dotnet/corefx/blob/55f7269536eb9c072cabd8bbcdd7644cd18bd001/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HPack/HPackDecoder.cs#L31\r\n\r\nWe should either remove this (ideally) or make this configurable.\r\n\r\nNote that we already have MaxResponseHeadersLength on SocketsHttpHandler, so it doesn't really make sense to have a separate limit here.","Url":"https://github.com/dotnet/corefx/issues/35490","RelatedDescription":"Open issue \"HTTP2: HPackDecoder has hard-coded max string size\" (#35490)"},{"Id":"412914607","IsPullRequest":false,"CreatedAt":"2019-02-21T13:04:57","Actor":"jeroen-mostert","Number":"35488","RawContent":null,"Title":"Proposal: give SqlBulkCopy a way to specify the ORDER hint","State":"open","Body":"The bulk insert functionality of SQL Server supports an `ORDER` hint to speed up inserting of already ordered data into a table with a clustered index. Without this hint, SQL Server forces an intermediate sort of the incoming data before inserting, which can add significant overhead (think `tempdb` spills). Existing unmanaged ways to bulk copy (`bcp.exe`, `BULK INSERT`, `OPENROWSET(BULK, ...)`) all offer ways to specify this hint, but `SqlBulkCopy` does not, leaving managed code out in the cold.\r\n\r\n# Proposed API\r\n\r\n```csharp\r\npublic class SqlBulkCopy \r\n{\r\n    // Existing members left out\r\n    \r\n    public SqlBulkCopyOrderHintColumnCollection OrderHintColumns { get; }\r\n}\r\n\r\n// New class\r\npublic sealed class SqlBulkCopyOrderHintColumn {\r\n    public SqlBulkCopyOrderHintColumn(string column, System.Data.SqlClient.SortOrder sortOrder);\r\n    \r\n    public string Column { get; set; }\r\n    public SortOrder SortOrder { get; set; }    // throws ArgumentException on SortOrder.Unspecified\r\n}\r\n\r\n// New class, same shape as SqlBulkCopyColumnMappingCollection\r\npublic class SqlBulkCopyOrderHintColumnCollection : System.Collections.CollectionBase {\r\n    public SqlBulkCopyOrderHintColumn Add(SqlBulkCopyOrderHintColumn bulkCopyOrderHintColumn);\r\n    \r\n    // throws ArgumentException on SortOrder.Unspecified\r\n    public SqlBulkCopyOrderHintColumn Add(string column, SortOrder sortOrder);\r\n    \r\n    public void Clear();\r\n    public bool Contains(SqlBulkCopyOrderHintColumn value);\r\n    public void CopyTo(SqlBulkCopyOrderHintColumn[] array, int index);\r\n    public System.Collections.IEnumerator GetEnumerator();\r\n    public int IndexOf(SqlBulkCopyOrderHintColumn value);\r\n    public void Insert(int index, SqlBulkCopyOrderHintColumn value);\r\n    public void Remove(SqlBulkCopyOrderHintColumn value);\r\n    public void RemoveAt(int index);\r\n}\r\n```\r\n\r\n# Sample use\r\n\r\n```csharp\r\nusing (var sqlBulkCopy = new SqlBulkCopy(connection)) {\r\n    // leaving out other options\r\n    \r\n    sqlBulkCopy.OrderHintColumns.Add(\"Column1\", SortOrder.Descending);\r\n    sqlBulkCopy.OrderHintColumns.Add(\"Column2\", SortOrder.Ascending);\r\n    sqlBulkCopy.OrderHintColumns.Add(\"Column3\", SortOrder.Descending);\r\n    sqlBulkCopy.DestinationTableName = \"Table1\";\r\n    sqlBulkCopy.WriteToServer();\r\n}\r\n```\r\n\r\nThis should result in `SqlBulkCopy` issuing a statement of the form\r\n\r\n```sql\r\ninsert bulk Table1 (...) with (ORDER ([Column1] DESC, [Column2] ASC, [Column3] DESC))\r\n```\r\n\r\nEnsuring the input rows are actually ordered according to the hint is the programmer's responsibility; SQL Server will either ignore the hint (if the table is a heap) or produce an error (if the table is clustered) and `SqlBulkCopy` need not further verify this.\r\n\r\n# Open questions\r\n\r\n* Should we make `SqlBulkCopyOrderHintColumnCollection` a strongly typed collection to get with the times, or maintain consistency with the existing `ColumnMapping` property and use a non-generic collection?\r\n* Should `SqlBulkCopyOrderHintColumn` be immutable, again, mostly getting with the times? `SqlBulkCopyColumnMapping` is very much the opposite; it even has a parameterless constructor, which seems quite undesirable.\r\n\r\n# Background\r\nSee #5114 for previous discussion.","Url":"https://github.com/dotnet/corefx/issues/35488","RelatedDescription":"Open issue \"Proposal: give SqlBulkCopy a way to specify the ORDER hint\" (#35488)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"413242029","IsPullRequest":true,"CreatedAt":"2019-02-22T04:46:21","Actor":"AlekseyTs","Number":"33594","RawContent":null,"Title":"Add support for partial methods in interfaces","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/33594","RelatedDescription":"Open PR \"Add support for partial methods in interfaces\" (#33594)"},{"Id":"413203363","IsPullRequest":true,"CreatedAt":"2019-02-22T03:30:05","Actor":"dotnet-bot","Number":"33592","RawContent":null,"Title":"Merge dev16.0 to dev16.0-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33592","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to dev16.0-vs-deps\" (#33592)"},{"Id":"413213312","IsPullRequest":true,"CreatedAt":"2019-02-22T02:26:26","Actor":"tmat","Number":"33593","RawContent":null,"Title":"Fix VS bootstrapper branch selection","State":"open","Body":"Do not assume that the branch we get IBC data from is the same as the one we produce VS bootstrapper for. The VS bootstrapper should always be produced from VS branch we insert to, while IBC data generated by another branch might be needed.","Url":"https://github.com/dotnet/roslyn/pull/33593","RelatedDescription":"Open PR \"Fix VS bootstrapper branch selection\" (#33593)"},{"Id":"413133649","IsPullRequest":true,"CreatedAt":"2019-02-22T01:36:44","Actor":"heejaechang","Number":"33576","RawContent":null,"Title":"fix classification issue on F#","State":"closed","Body":"**Customer scenario**\r\n\r\na user opens a F# file and doesn't get any keyword colorization.\r\n\r\n**Bugs this fixes:**\r\n\r\nhttps://github.com/Microsoft/visualfsharp/issues/6267\r\n\r\n**Workarounds, if any**\r\n\r\nno workaround. \r\n\r\n**Risk**\r\n\r\nlow risk\r\n\r\n**Performance impact**\r\n\r\nnone\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nyes.\r\n\r\n**Root cause analysis:**\r\n\r\nrecent fix to resolve top watson crash (https://github.com/dotnet/roslyn/pull/33168) caused one regression where F# (and potentially typescript)'s classification stop working.\r\n\r\nthe issue was when open file's extension (ex, xaml <-> cs or fs <-> cs) is renamed, there is a race between content type (editor's concept) and language name (roslyn concept) when they get updated in 2 systems (editor and roslyn workspace).\r\n\r\nwhen that happens, it is possible that editor picks up csharp tagger since editor think it is now csharp buffer, but workspace still thinks the buffer is associated with fsharp and returns fsharp document when asked.\r\n\r\nthat caused crash since some service assumed to exist in csharp document doesn't exist since it is not csharp document.\r\n\r\nthe fix mentioned above mitigate the issue by checking the issue and bailout but it was doing so too early breaking legit cases for F# and typescript.\r\n\r\nthis fix moves the check down to where it is actually crashing.\r\n\r\n**How was the bug found?**\r\n\r\ndogfooding\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/33576","RelatedDescription":"Closed or merged PR \"fix classification issue on F#\" (#33576)"},{"Id":"413198781","IsPullRequest":true,"CreatedAt":"2019-02-22T01:21:10","Actor":"333fred","Number":"33591","RawContent":null,"Title":"Nullability Rewriter Step","State":"open","Body":"This adds an initial implementation of the NullableWalker part of\r\nrewriting the bound tree with nullability information, and hooks up the\r\nrewriter to this. It additionally adds a debug verifier for the\r\nNullableWalker that will verify that we're actually visiting and\r\nrecording results for all BoundExpression nodes in the tree. Some tests\r\nare currently skipped where this does not hold true to allow the review\r\ncycle to start while work continues.\r\n\r\nAdditionally, the VerifyTypes compilation helper is hooked up to this\r\nrewritten information as a basic smoke test of the information being\r\nproduced by the rewriter.\r\n\r\nFor this PR, I'm most concerned about the general approach of getting\r\nthe information from the NullableWalker. If you have specific concerns\r\nabout some of the information from the walker being incorrect, please\r\nnote it and I'll put a prototype comment to follow up and add a test\r\nto verify the behavior, but I'm not going to correct individual\r\nscenarios in this PR.","Url":"https://github.com/dotnet/roslyn/pull/33591","RelatedDescription":"Open PR \"Nullability Rewriter Step\" (#33591)"},{"Id":"413192850","IsPullRequest":false,"CreatedAt":"2019-02-22T00:55:23","Actor":"mavasani","Number":"33590","RawContent":null,"Title":"Expose the Deconstruct method on IDeconstructionAssignmentOperation","State":"open","Body":"See http://source.roslyn.io/#Microsoft.CodeAnalysis/Operations/IDeconstructionAssignmentOperation.cs,16: \r\n\r\n```csharp\r\n    /// <summary>\r\n    /// Represents a assignment with a deconstruction.\r\n    /// <para>\r\n    /// Current usage:\r\n    ///  (1) C# deconstruction assignment expression.\r\n    /// </para>\r\n    /// </summary>\r\n    /// <remarks>\r\n    /// This interface is reserved for implementation by its associated APIs. We reserve the right to\r\n    /// change it in the future.\r\n    /// </remarks>\r\n    public interface IDeconstructionAssignmentOperation : IAssignmentOperation\r\n    {\r\n    }\r\n```\r\n\r\nWe should expose the deconstruct method similar to http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/DeconstructionInfo.cs,30 exposed via C# semantic model, which is language specific API and cannot be invoked from language agnostic IOperation layer or from a language agnostic component analyzing operations in a ControlFlowGraph.","Url":"https://github.com/dotnet/roslyn/issues/33590","RelatedDescription":"Open issue \"Expose the Deconstruct method on IDeconstructionAssignmentOperation\" (#33590)"},{"Id":"413167664","IsPullRequest":false,"CreatedAt":"2019-02-22T00:45:25","Actor":"AArnott","Number":"33580","RawContent":null,"Title":"Missing possible dereference of a null reference warning in an `if` block that guarantees its wrong","State":"closed","Body":"**Version Used**: 28620.216.d16.0\r\n\r\n**Steps to Reproduce**:\r\n\r\nCreate a C# .NET Core project with this class:\r\n\r\n```cs\r\n#nullable enable\r\n\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    public static void Foo(object o)\r\n    {\r\n        if (o == null)\r\n        {\r\n            //o = null;\r\n            o.ToString(); // I expect CS8602 here!\r\n            throw new ArgumentNullException(nameof(o));\r\n        }\r\n\r\n        o.ToString();\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nI expect CS8602 to show up on the line indicated above.\r\n\r\n**Actual Behavior**:\r\n\r\nThe warning does not show up unless I uncomment the line above it.\r\n\r\nWhile it's true that `Foo(object)` indicates the identifier is non-nullable, it is also true that there is no runtime check to guarantee that, and as a public method I need to throw `ArgumentNullException` if it is null rather than a `NullReferenceException` in case my caller passes in null. So within my `if` block that checks if it is null, if I then dereference it, the compiler should raise a warning. But it only does so if I explicitly set it to the value it is already confirmed by the compiler to be.","Url":"https://github.com/dotnet/roslyn/issues/33580","RelatedDescription":"Closed issue \"Missing possible dereference of a null reference warning in an `if` block that guarantees its wrong\" (#33580)"},{"Id":"413188219","IsPullRequest":true,"CreatedAt":"2019-02-22T00:33:50","Actor":"jasonmalinowski","Number":"33589","RawContent":null,"Title":"Add various bits of telemetry around DocumentClosed handling","State":"open","Body":"@sharwell and I have been looking at a bug for several days where we crash here:\r\n\r\nhttps://github.com/dotnet/roslyn/blob/0930558690fda8c7e9bf8a50f4e5e66995fb1380/src/EditorFeatures/Core.Wpf/Options/EditorConfigDocumentOptionsProvider.cs#L75\r\n\r\nbecause the DocumentId is already marked as open. Given there are a number of guards to ensure a document that's not open can't be opened a second time, our only guess is that a previous close was never received by the EditorConfigDocumentOptionsProvider.\r\n\r\nThis is adding some try/catches to attempt to prove that theory. Since we're really not sure which it might be and how often it might be happening, I'm adding non-fatal reporting to ensure we don't make a problem that happens during close _and then reopening_ something that crashes on the close itself.\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nSome users are experiencing crashes when the open a file that was previously opened. We don't have a good understanding of why this is happening, and Windows Error Reporting telemetry hasn't given us a full heap dump to understand it either. Our next best course of action is to add additional exception reporting points to attempt to understand it more.\r\n\r\n### Bugs this fixes\r\n\r\nThis provides extra help to diagnose https://devdiv.visualstudio.com/DevDiv/_workitems/edit/742115, but does _not_ actually fix it.\r\n\r\n### Workarounds, if any\r\n\r\nWe don't know the bug yet, but our only other option is to just keep waiting for heap dumps.\r\n\r\n### Risk\r\n\r\nLow. We're using our \"report non fatal exception but keep propagating the exception\" intentionally, so if the underlying exception is happening more often than we expect we won't make things worse.\r\n\r\n### Performance impact\r\n\r\nNone.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nRoot cause is unknown at this time.\r\n\r\n### Root cause analysis\r\n\r\nRoot cause is unknown at this time.\r\n\r\n### How was the bug found?\r\n\r\nWindows Error Reporting.\r\n\r\n</details>","Url":"https://github.com/dotnet/roslyn/pull/33589","RelatedDescription":"Open PR \"Add various bits of telemetry around DocumentClosed handling\" (#33589)"},{"Id":"413185160","IsPullRequest":true,"CreatedAt":"2019-02-22T00:19:46","Actor":"ivanbasov","Number":"33588","RawContent":null,"Title":"F# Typing '.' after fully typing out a symbol does not trigger completion","State":"open","Body":"### Customer scenario\r\nTyping `System.` in F#\r\n\r\n**Expected**\r\nHave a completion for dot\r\n\r\n**Actual**\r\nHave no completion for dot\r\n\r\n![image](https://user-images.githubusercontent.com/5455484/53211839-7f460400-35f7-11e9-8cc3-fa663c4c9e13.png)\r\n\r\n### Bugs this fixes\r\nhttps://github.com/Microsoft/visualfsharp/issues/6266\r\n\r\n### Workarounds, if any\r\nNone\r\n\r\n### Risk\r\nLow\r\n\r\n### Performance impact\r\nNone\r\n\r\n### Is this a regression from a previous update?\r\nNone\r\n\r\n### Root cause analysis\r\nDot (as some other characters) is a potential commit character in F# but it is removed from actual commit characters. Roslyn does not provide a correct support for such situations in the new completion because Roslyn does not have such cases in C# and VB. Priorities of Commit vs Filter differ between the old completion and the new completion. This causes the issue.\r\n\r\n### How was the bug found?\r\nInternal customers","Url":"https://github.com/dotnet/roslyn/pull/33588","RelatedDescription":"Open PR \"F# Typing '.' after fully typing out a symbol does not trigger completion\" (#33588)"},{"Id":"413182016","IsPullRequest":false,"CreatedAt":"2019-02-22T00:05:59","Actor":"gafter","Number":"33587","RawContent":null,"Title":"Top-level nullability of out parameter must match exactly.","State":"open","Body":"Roslyn currently permits a variable of type `object?` to be passed as an `out` parameter whose type is `object`.  But this is unsafe, as the following program (which compiles with no nullable warnings) demonstrates.\r\n\r\n/cc @dotnet/csharplangdesign @cston @MadsTorgersen \r\n\r\n``` c#\r\n#nullable enable\r\n\r\nclass C\r\n{\r\n    static void Main()\r\n    {\r\n        object? o = null;\r\n        M(ref o, out o);\r\n        o.ToString();  // throws NullReferenceException at runtime\r\n    }\r\n\r\n    static void M(ref object? o1, out object o2)\r\n    {\r\n        o2 = 1;\r\n        o1 = null;\r\n        return;\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33587","RelatedDescription":"Open issue \"Top-level nullability of out parameter must match exactly.\" (#33587)"},{"Id":"413180682","IsPullRequest":true,"CreatedAt":"2019-02-22T00:00:43","Actor":"dotnet-bot","Number":"33586","RawContent":null,"Title":"Merge master to features/readonly-members","State":"open","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33586","RelatedDescription":"Open PR \"Merge master to features/readonly-members\" (#33586)"},{"Id":"413180665","IsPullRequest":true,"CreatedAt":"2019-02-22T00:00:39","Actor":"dotnet-bot","Number":"33585","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"open","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33585","RelatedDescription":"Open PR \"Merge master to features/editorconfig-in-compiler\" (#33585)"},{"Id":"413180655","IsPullRequest":true,"CreatedAt":"2019-02-22T00:00:36","Actor":"dotnet-bot","Number":"33584","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33584","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#33584)"},{"Id":"413180594","IsPullRequest":true,"CreatedAt":"2019-02-22T00:00:21","Actor":"dotnet-bot","Number":"33583","RawContent":null,"Title":"Merge dev16.0-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33583","RelatedDescription":"Open PR \"Merge dev16.0-vs-deps to master-vs-deps\" (#33583)"},{"Id":"413180559","IsPullRequest":true,"CreatedAt":"2019-02-22T00:00:12","Actor":"dotnet-bot","Number":"33582","RawContent":null,"Title":"Merge dev16.0 to master","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33582","RelatedDescription":"Open PR \"Merge dev16.0 to master\" (#33582)"},{"Id":"413077508","IsPullRequest":true,"CreatedAt":"2019-02-22T00:00:08","Actor":"dotnet-bot","Number":"33568","RawContent":null,"Title":"Merge dev16.0 to dev16.0-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33568","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to dev16.0-vs-deps\" (#33568)"},{"Id":"413174769","IsPullRequest":true,"CreatedAt":"2019-02-21T23:37:31","Actor":"jasonmalinowski","Number":"33581","RawContent":null,"Title":"Fix deadlock with the GlobalOptionService and roaming option persister","State":"open","Body":"This deadlock is a classic deadlock where two components both have a lock, and called out to the other component while holding the lock. The two offending methods were:\r\n\r\n1. GlobalOptionService.GetOption, which acquires the global option lock and then calls into serializers. This would result in RoamingVisualStudioProfileOptionPersister.RecordObservedValueToWatchForChanges being called which would acquire the persister's lock.\r\n2. RoamingVisualStudioProfileOptionPersister.OnSettingChangedAsync would acquire the persister's lock, and then call back into the GlobalOptionService to update it.\r\n\r\nIf both of these happened at the same time, there's a small chance of deadlock. We've seen this sporatically in automation.\r\n\r\nThe classic fix for this is to fix one (or both) of the cases above to avoid calling out to another component while holding the lock. Both are easy to fix but I'm choosing (for now) to just the second case. My reasoning is the first lock is still potentially useful: if multiple components are requesting the same option at the same time, we will only be calling into the settings service once rather than calling into it multiple times simultaneously.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/20019.","Url":"https://github.com/dotnet/roslyn/pull/33581","RelatedDescription":"Open PR \"Fix deadlock with the GlobalOptionService and roaming option persister\" (#33581)"},{"Id":"413160632","IsPullRequest":false,"CreatedAt":"2019-02-21T22:48:33","Actor":"jmarolf","Number":"33579","RawContent":null,"Title":"Roslyn Package failure on Dev16 master branch","State":"open","Body":"**Version Used**: 16.0.0 Preview 4.0 [28621.89.master]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open the project system solution (presumable this will reproduce with any managed project)\r\n\r\n**Expected Behavior**:\r\n\r\nNo errors in the activity log\r\n\r\n**Actual Behavior**:\r\n\r\n```XML\r\n  <entry>\r\n    <record>933</record>\r\n    <time>2019/02/21 22:43:23.753</time>\r\n    <type>Error</type>\r\n    <source>VisualStudio</source>\r\n    <description>SetSite failed for package [Code Analysis Package]Source: &apos;System.ComponentModel.Composition&apos; Description: Cannot cast the underlying exported value of type &apos;Microsoft.VisualStudio.CodeAnalysis.IVCCodeAnalysisServiceProxy&apos; to type &apos;Microsoft.VisualStudio.CodeAnalysis.IVCCodeAnalysisServiceProxy&apos;.&#x000D;&#x000A;</description>\r\n    <guid>{B20604B0-72BC-4953-BB92-95BF26D30CFA}</guid>\r\n    <hr>80131500</hr>\r\n    <errorinfo></errorinfo>\r\n  </entry>\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33579","RelatedDescription":"Open issue \"Roslyn Package failure on Dev16 master branch\" (#33579)"},{"Id":"413158890","IsPullRequest":false,"CreatedAt":"2019-02-21T22:43:28","Actor":"gafter","Number":"33578","RawContent":null,"Title":"Compiler rejects code with class named `ValueTuple`","State":"open","Body":"The following code was accepted before C# 7, but is now rejected by the compiler.  This is therefore a breaking change in the compiler (not required by the specification).\r\n\r\nI suspect this is a symptom of https://github.com/dotnet/roslyn/issues/20648\r\n\r\n``` c#\r\nnamespace System\r\n{\r\n    public class ValueTuple<T1, T2>\r\n    {\r\n        public ValueTuple(T1 item1, T2 item2)\r\n        {\r\n            Item1 = item1;\r\n            Item2 = item2;\r\n        }\r\n        public T1 Item1;\r\n        public T2 Item2;\r\n    }\r\n    public class Derived<T> : ValueTuple<T, T> // error: cannot derive from sealed type (T, T)\r\n    {\r\n        public Derived(T t) : base(t, t) { }\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33578","RelatedDescription":"Open issue \"Compiler rejects code with class named `ValueTuple`\" (#33578)"},{"Id":"413076237","IsPullRequest":true,"CreatedAt":"2019-02-21T22:24:32","Actor":"JoeRobich","Number":"33566","RawContent":null,"Title":"Remove dotnet format tool and provide link to new repo","State":"closed","Body":"The dotnet-format global tool has a new home at https://github.com/dotnet/format. This PR removes the source and updates the readme with a link to the new repo.","Url":"https://github.com/dotnet/roslyn/pull/33566","RelatedDescription":"Closed or merged PR \"Remove dotnet format tool and provide link to new repo\" (#33566)"},{"Id":"413077424","IsPullRequest":true,"CreatedAt":"2019-02-21T22:00:09","Actor":"dotnet-bot","Number":"33567","RawContent":null,"Title":"Merge dev16.0 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33567","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to master\" (#33567)"},{"Id":"413134921","IsPullRequest":false,"CreatedAt":"2019-02-21T21:37:01","Actor":"cston","Number":"33577","RawContent":null,"Title":"Should not warn assigning anonymous type instance with trivial nullability differences","State":"open","Body":"Should not warn on the following assignments:\r\n```C#\r\n#nullable enable\r\n\r\ninterface IOut<out T> { }\r\n\r\nclass Program\r\n{\r\n    static void F1<T>(T? x, T? y) where T : struct\r\n    {\r\n        if (x == null) return;\r\n        var a = new { x, y };\r\n        var b = new { x = y, y };\r\n        b = a; // warning: mismatch\r\n    }\r\n\r\n    static void F2<T>(IOut<T> x, IOut<T?> y) where T : class\r\n    {\r\n        var a = new { F = x };\r\n        var b = new { F = y };\r\n        b = a; // warning: mismatch\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/33577","RelatedDescription":"Open issue \"Should not warn assigning anonymous type instance with trivial nullability differences\" (#33577)"},{"Id":"413077581","IsPullRequest":true,"CreatedAt":"2019-02-21T21:30:07","Actor":"dotnet-bot","Number":"33571","RawContent":null,"Title":"Merge master to features/readonly-members","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33571","RelatedDescription":"Closed or merged PR \"Merge master to features/readonly-members\" (#33571)"},{"Id":"413126615","IsPullRequest":true,"CreatedAt":"2019-02-21T21:14:39","Actor":"sharwell","Number":"33575","RawContent":null,"Title":"Fix integration tests","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/33575","RelatedDescription":"Open PR \"Fix integration tests\" (#33575)"},{"Id":"413077524","IsPullRequest":true,"CreatedAt":"2019-02-21T21:00:20","Actor":"dotnet-bot","Number":"33569","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33569","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#33569)"},{"Id":"413077548","IsPullRequest":true,"CreatedAt":"2019-02-21T21:00:09","Actor":"dotnet-bot","Number":"33570","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33570","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#33570)"},{"Id":"413118860","IsPullRequest":false,"CreatedAt":"2019-02-21T20:53:34","Actor":"cston","Number":"33574","RawContent":null,"Title":"Include nullable annotations in warning messages with anonymous types","State":"open","Body":"Nullable annotations for properties of anonymous types are not included in warning messages.\r\n```C#\r\n#nullable enable\r\n\r\nclass Program\r\n{\r\n    static void F<T>(T x, T y)\r\n    {\r\n    }\r\n\r\n    static void G<T>(T x, T? y) where T : class\r\n    {\r\n        F(new { x }, new { x = y });\r\n    }\r\n}\r\n```\r\n```\r\n(11,22): warning CS8620: Nullability of reference types in\r\n    argument of type '<anonymous type: T x>' doesn't match\r\n    target type '<anonymous type: T x>' for parameter 'y'\r\n    in 'void Program.F<<anonymous type: T x>>(<anonymous type: T x> x, <anonymous type: T x> y)'.\r\n```\r\nSee https://github.com/dotnet/roslyn/pull/33562#discussion_r259061696","Url":"https://github.com/dotnet/roslyn/issues/33574","RelatedDescription":"Open issue \"Include nullable annotations in warning messages with anonymous types\" (#33574)"},{"Id":"413100649","IsPullRequest":false,"CreatedAt":"2019-02-21T20:05:03","Actor":"vsfeedback","Number":"33573","RawContent":null,"Title":"Incorrect CS4014 shown when using the async method with System.Linq.Expression","State":"open","Body":"<p>Here is the code snippet that clearly demonstrates the issue:</p><pre>class Program {\n    static void Main(string[] args) {\n        RaiseCanExecuteChanged(() =&gt; Load());// &lt;&lt;&lt; illegal CS4014 here\n    }\n    static async Task Load() {\n        await Task.Delay(1000);\n    }\n    static void RaiseCanExecuteChanged(Expression&lt;Action&gt; selector) {\n        /* ... */\n    }\n}\n</pre> <br>The impact of this issue: <br><p>it is impossible to compile the solution when &quot;Threat warnings as errors&quot; level is set to all(our default settings).</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/447121/incorrect-cs4014-show-when-using-the-async-method.html\nVSTS ticketId: 787866_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/33573","RelatedDescription":"Open issue \"Incorrect CS4014 shown when using the async method with System.Linq.Expression\" (#33573)"},{"Id":"413081981","IsPullRequest":true,"CreatedAt":"2019-02-21T19:20:22","Actor":"jasonmalinowski","Number":"33572","RawContent":null,"Title":"Subscribe to and process rule set file changes","State":"closed","Body":"Despite all the effort to free-thread all our ruleset handling around file change notifications, we forgot to actually subscribe to the file change notifications. This fixes that.\r\n\r\nThis also adds a unit test to cover this. Unfortunately getting the tests to work require a few hacks right now, as there's some workarounds for old (and no longer applicable) problems. I've filed https://github.com/dotnet/roslyn/issues/33506 to fix those and plan to do so, just not in a branch where riskier changes aren't welcome.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/33465.","Url":"https://github.com/dotnet/roslyn/pull/33572","RelatedDescription":"Closed or merged PR \"Subscribe to and process rule set file changes\" (#33572)"},{"Id":"413075338","IsPullRequest":false,"CreatedAt":"2019-02-21T18:58:29","Actor":"jcouv","Number":"33565","RawContent":null,"Title":"Make sure that `AsMemberOfType` is complete","State":"open","Body":"A short-term workaround was put in place for https://devdiv.visualstudio.com/DevDiv/_workitems/edit/788968\r\n\r\nThis issue tracks finding a more robust/complete solution.\r\n\r\n```C#\r\n        [Fact]\r\n        [WorkItem(788968, \"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/788968\")]\r\n        public void MissingMethodOnTupleLiteral()\r\n        {\r\n            var source = @\"\r\n#nullable enable\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        (0, (string)null).Missing();\r\n    }\r\n}\r\n\";\r\n            var compilation = CreateCompilation(source);\r\n            compilation.VerifyDiagnostics(\r\n                // CRASH\r\n                );\r\n        }\r\n```","Url":"https://github.com/dotnet/roslyn/issues/33565","RelatedDescription":"Open issue \"Make sure that `AsMemberOfType` is complete\" (#33565)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"413152043","IsPullRequest":true,"CreatedAt":"2019-02-21T22:24:05","Actor":"filipnavara","Number":"7067","RawContent":null,"Title":"WIP: Move Thread to shared CoreLib","State":"open","Body":"Counter-part to https://github.com/dotnet/coreclr/pull/22744.","Url":"https://github.com/dotnet/corert/pull/7067","RelatedDescription":"Open PR \"WIP: Move Thread to shared CoreLib\" (#7067)"},{"Id":"413116684","IsPullRequest":true,"CreatedAt":"2019-02-21T20:47:42","Actor":"kouvel","Number":"7066","RawContent":null,"Title":"Implement APIs for some threading metrics (CoreRT), fix `Timer` on Unixes","State":"open","Body":"- API review: https://github.com/dotnet/corefx/issues/35500\r\n- May depend on https://github.com/dotnet/coreclr/pull/22754\r\n- Fixed `Timer` implementation on Unixes. Previously there was only ever one timer request from the upper-level implementation and that is not the case anymore, so the lower-level \"app domain timer\" implementation needed to handle multiple timer requests.","Url":"https://github.com/dotnet/corert/pull/7066","RelatedDescription":"Open PR \"Implement APIs for some threading metrics (CoreRT), fix `Timer` on Unixes\" (#7066)"},{"Id":"412787041","IsPullRequest":true,"CreatedAt":"2019-02-21T07:38:29","Actor":"Dotnet-GitSync-Bot","Number":"7065","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/7065","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#7065)"},{"Id":"412674876","IsPullRequest":true,"CreatedAt":"2019-02-21T07:38:10","Actor":"yowl","Number":"7062","RawContent":null,"Title":"Wasm: fix to enable multidimensional array get and set operations","State":"closed","Body":"Enables get and set operations on multidimensional arrays.  Fixes https://github.com/dotnet/corert/issues/6263","Url":"https://github.com/dotnet/corert/pull/7062","RelatedDescription":"Closed or merged PR \"Wasm: fix to enable multidimensional array get and set operations\" (#7062)"},{"Id":"412680770","IsPullRequest":true,"CreatedAt":"2019-02-21T07:37:14","Actor":"yowl","Number":"7063","RawContent":null,"Title":"wasm: Add test for using","State":"closed","Body":"Fixes https://github.com/dotnet/corert/issues/6474.  Or rather just adds a test for it as it was already working.  There was a test for `try/finally`, but not explicitly `using`.  That test is added here.","Url":"https://github.com/dotnet/corert/pull/7063","RelatedDescription":"Closed or merged PR \"wasm: Add test for using\" (#7063)"},{"Id":"412718852","IsPullRequest":true,"CreatedAt":"2019-02-21T07:36:24","Actor":"Dotnet-GitSync-Bot","Number":"7064","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/7064","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7064)"},{"Id":"412594199","IsPullRequest":true,"CreatedAt":"2019-02-20T23:39:35","Actor":"Dotnet-GitSync-Bot","Number":"7059","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @benaadams @stephentoub @stephentoub","Url":"https://github.com/dotnet/corert/pull/7059","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7059)"},{"Id":"412664296","IsPullRequest":false,"CreatedAt":"2019-02-20T22:44:41","Actor":"Danl2620","Number":"7061","RawContent":null,"Title":"Q: Is there any mechanism to generate C++ header files from C#/F#?","State":"open","Body":"Is there a way to build a native static library from a C# project and also generate C++ header files corresponding to certain (potentially attributed) types in the C#/F#?  I'm trying to embed a native .NET project in a C++ project but need a way to get the type declarations correct.","Url":"https://github.com/dotnet/corert/issues/7061","RelatedDescription":"Open issue \"Q: Is there any mechanism to generate C++ header files from C#/F#?\" (#7061)"},{"Id":"412634026","IsPullRequest":true,"CreatedAt":"2019-02-20T21:21:10","Actor":"yowl","Number":"7060","RawContent":null,"Title":"WIP: Wasm: fix unaligned memory access for asm.js target","State":"open","Body":"This is a resubmit of https://github.com/dotnet/corert/pull/6432.  His initial description:\r\n\r\n> Asm.js does aligned memory accesses unless forced to do otherwise. This causes occasional memory corruption on various structures that aren't 4-byte aligned (two of which get used in interface dispatch). To handle that, this change:\r\n> \r\n>     1. Changes the LLVM representation of managed structs to approximately match the managed representation. This fixes DispatchMapEntry, which is 3 uint16s that can be 2-byte aligned.\r\n> \r\n>     2. Annotates an unaligned read used by OptionalFields so the compiler can handle it.\r\n\r\nI've added a few more fixes to get the `-s WASM=0` passing the tests (which the CI doesn't do).  You'll notice a few things which you may want to comment on:\r\n\r\n1. Use of `WASM && DEBUG` to mark sections where the output may go to asm.js, depending on `-s WASM=0`.  Maybe a different directive to `DEBUG` would be more descriptive?  I'm introducing the idea that for release mode the output will always be `-s WASM=1`, i.e. wasm.  This means that it wont be able to produce release mode for asm.js for IE for example.\r\n2. Only code paths that I hit are updated, so e.g. in `src\\Common\\src\\Internal\\NativeFormat\\NativeFormatReader.Primitives.cs` I did `ReadUInt32` and `ReadUInt16` but not the 8 and 64 bit variants.\r\n3. I've not done anything for https://github.com/dotnet/corert/pull/6432#discussion_r226932894 .  Is it suggested to do another section for `#if _MSC_VER`  with the `UNALIGNED` prefix back in?  I could try putting it in unconditionally, I'm not sure what happens to these lines, will they get converted to `unaligned ldind...` ?","Url":"https://github.com/dotnet/corert/pull/7060","RelatedDescription":"Open PR \"WIP: Wasm: fix unaligned memory access for asm.js target\" (#7060)"},{"Id":"412242850","IsPullRequest":true,"CreatedAt":"2019-02-20T19:34:10","Actor":"Dotnet-GitSync-Bot","Number":"7055","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7055","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7055)"},{"Id":"412463521","IsPullRequest":true,"CreatedAt":"2019-02-20T19:33:58","Actor":"kbaladurin","Number":"7057","RawContent":null,"Title":"Include eetype.inl in gcwks.cpp","State":"closed","Body":"Without it we have following error when link against release libRuntime.a:\r\n```\r\nlibRuntime.a(gcwks.cpp.o): In function `EEType::RequiresAlign8()':\r\neetype.h:546: undefined reference to `EEType::get_RareFlags()'\r\n...\r\n```","Url":"https://github.com/dotnet/corert/pull/7057","RelatedDescription":"Closed or merged PR \"Include eetype.inl in gcwks.cpp\" (#7057)"},{"Id":"412457741","IsPullRequest":true,"CreatedAt":"2019-02-20T16:58:27","Actor":"kbaladurin","Number":"7056","RawContent":null,"Title":"Fix objwriter build","State":"closed","Body":"Add include directories for LLVM build.","Url":"https://github.com/dotnet/corert/pull/7056","RelatedDescription":"Closed or merged PR \"Fix objwriter build\" (#7056)"},{"Id":"412475420","IsPullRequest":true,"CreatedAt":"2019-02-20T16:26:16","Actor":"kbaladurin","Number":"7058","RawContent":null,"Title":"Fix tizen rootfs building","State":"closed","Body":"Move tizen-release package from base to unified repo.","Url":"https://github.com/dotnet/corert/pull/7058","RelatedDescription":"Closed or merged PR \"Fix tizen rootfs building\" (#7058)"},{"Id":"412158659","IsPullRequest":true,"CreatedAt":"2019-02-20T04:38:50","Actor":"Dotnet-GitSync-Bot","Number":"7053","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe @stephentoub","Url":"https://github.com/dotnet/corert/pull/7053","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7053)"},{"Id":"412180530","IsPullRequest":true,"CreatedAt":"2019-02-19T23:57:12","Actor":"yowl","Number":"7054","RawContent":null,"Title":"Wasm: fix operations on bytes that are stored in shorts","State":"open","Body":"The final expression type for binary ops like `add` and shift ops `<<` was incorrectly set to `byte` when the operand was of type `byte`.  These operations act on ints (or int64 - which was ok), and they were incorrectly being truncated back to `byte`.  E.g.\r\n\r\n```\r\n        byte aByte = 2;\r\n        short aShort = 0x100;\r\n        short byteAndShortResult = (short)(aByte + aShort);\r\n```\r\nwas resulting in `2`.","Url":"https://github.com/dotnet/corert/pull/7054","RelatedDescription":"Open PR \"Wasm: fix operations on bytes that are stored in shorts\" (#7054)"},{"Id":"411994564","IsPullRequest":true,"CreatedAt":"2019-02-19T17:28:30","Actor":"Dotnet-GitSync-Bot","Number":"7052","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii","Url":"https://github.com/dotnet/corert/pull/7052","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7052)"},{"Id":"411707658","IsPullRequest":false,"CreatedAt":"2019-02-19T16:56:40","Actor":"yowl","Number":"7050","RawContent":null,"Title":"WASM: question - System.Buffer.Memmove unaligned memory assignment","State":"closed","Body":"When compiling to asm.js unaligned memory access is not allowed as when loading/storing int32s the address is `>>2` and when the least significant 2 bits contain 1s they are lost.  Looking at the special case for `Memmove` when the `len` is 14 (e.g. when `wstrcpy` of a string of length 7), it goes through \r\n\r\nhttps://github.com/dotnet/corert/blob/a3469f865ed1fd6388f3680704c0a018de8ad9ec/src/System.Private.CoreLib/src/System/Buffer.cs#L280-L283\r\n\r\nAnd it copies 8 bytes from the beginning which is fine, then 8 bytes from the end using offsets of `-8` and `-4` i,e `dest + len - 8` and `dest + len - 4` which would be dest + 6 and dest + 10 which are not 4 byte aligned, and then consequently fails when compiling/running with SAFE_HEAP=1.  asm.js is a useful target right now for debugging, so the question is, would it be appropriate to add some `#if WASM` logic here (and other special points in this function where it works from the end) to, for example, do a first copy on an int16 if not 4 byte aligned? \r\n","Url":"https://github.com/dotnet/corert/issues/7050","RelatedDescription":"Closed issue \"WASM: question - System.Buffer.Memmove unaligned memory assignment\" (#7050)"},{"Id":"411899806","IsPullRequest":false,"CreatedAt":"2019-02-19T12:28:59","Actor":"mig42","Number":"7051","RawContent":null,"Title":"[x64/Linux] log4net init reports unsupported platform for Named mutex","State":"open","Body":"OS: Ubuntu Linux 18.04\r\ndotnet version: 2.1.504\r\nMicrosoft.DotNet.ILCompiler version: 1.0.0-alpha-27419-01\r\n\r\nI'm using clang-6.0 to compile via environment variable:\r\n```\r\nexport CppCompilerAndLinker=clang-6.0\r\n```\r\n\r\nI'm trying to build a native single-file executable of my app in Linux. The build itself seems to finish successfully, but when I run my app I get this on `stdout`:\r\n```\r\nlog4net:ERROR Could not create Appender [DebugAppender] of type [log4net.Appender.RollingFileAppender]. Reported error follows.\r\nSystem.PlatformNotSupportedException: The named version of this synchronization primitive is not supported on this platform.\r\n   at System.Threading.Mutex.CreateMutexCore(Boolean, String, Boolean&) + 0x62\r\n   at log4net.Appender.RollingFileAppender.ActivateOptions() + 0x1d6\r\n   at log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseAppender(XmlElement) + 0x4fd\r\n\r\nlog4net:ERROR Appender named [DebugAppender] not found.\r\n```\r\nI tried different `lockingModel` values, but none of them prevented the error from happening.\r\n\r\nThese are the contents of my `rd.xml` file:\r\n```xml\r\n<Directives xmlns=\"http://schemas.microsoft.com/netfx/2013/01/metadata\">\r\n  <Application>\r\n    <Assembly Name=\"log4net\" Dynamic=\"Required All\" />\r\n    <Assembly Name=\"System.Linq.Expressions\">\r\n      <Type Name=\"System.Linq.Expressions.ExpressionCreator`1[[Newtonsoft.Json.Serialization.ObjectConstructor`1[[System.Object,System.Private.CoreLib]],Newtonsoft.Json]]\" Dynamic=\"Required All\" />\r\n      <Type Name=\"System.Linq.Expressions.ExpressionCreator`1[[System.Func`2[[System.Object,System.Private.CoreLib],[System.Object,System.Private.CoreLib]],System.Private.CoreLib]]\" Dynamic=\"Required All\" />\r\n    </Assembly>\r\n    <Assembly Name=\"Newtonsoft.Json\" >\r\n      <Type Name=\"Newtonsoft.Json.Serialization.ObjectConstructor`1[[System.Object,System.Private.CoreLib]]\" Dynamic=\"Required All\" />\r\n    </Assembly>\r\n    <Assembly Name=\"System.ComponentModel.TypeConverter\">\r\n      <Type Name=\"System.ComponentModel.TypeConverter\" Dynamic=\"Required All\" />\r\n      <Type Name=\"System.ComponentModel.StringConverter\" Dynamic=\"Required All\" />\r\n      <Type Name=\"System.ComponentModel.Int32Converter\" Dynamic=\"Required All\" />\r\n    </Assembly>\r\n  </Application>\r\n</Directives>\r\n```\r\nRemoving the `log4net` assembly doesn't do anything either.\r\n\r\nI guess there must be something wrong with my setup or CoreRT doesn't support named mutex yet, because this code works OK if I run a self-contained publish... Do you have any idea about where to look now? Any help will be really appreciated.\r\n\r\nThanks!","Url":"https://github.com/dotnet/corert/issues/7051","RelatedDescription":"Open issue \"[x64/Linux] log4net init reports unsupported platform for Named mutex\" (#7051)"},{"Id":"411617288","IsPullRequest":true,"CreatedAt":"2019-02-19T07:51:21","Actor":"yowl","Number":"7049","RawContent":null,"Title":"wasm: Refactor simple tests and exit with error code on failure","State":"closed","Body":"There was a lot of duplication in the test pattern used and when a non-fatal error occurred the test exited with a success error code making finding errors a question of scanning the output for \"Failed\" text.  This PR removes some of the boilerplate in the tests and exits with `-1` in the case of a test failure.","Url":"https://github.com/dotnet/corert/pull/7049","RelatedDescription":"Closed or merged PR \"wasm: Refactor simple tests and exit with error code on failure\" (#7049)"},{"Id":"411348936","IsPullRequest":true,"CreatedAt":"2019-02-18T14:54:35","Actor":"jkotas","Number":"7047","RawContent":null,"Title":"Add example of custom marshaling to NativeLibrary sample","State":"closed","Body":"Fixes #7043","Url":"https://github.com/dotnet/corert/pull/7047","RelatedDescription":"Closed or merged PR \"Add example of custom marshaling to NativeLibrary sample\" (#7047)"},{"Id":"411256250","IsPullRequest":false,"CreatedAt":"2019-02-18T14:54:35","Actor":"szhaomsft","Number":"7043","RawContent":null,"Title":"NativeCallableAttribute question","State":"closed","Body":"does corert support exporting a function with callback function for other C program to call?\r\n\r\nif so, any example? \r\n\r\n**Exported methods can only naturally accept or return primitives or value types (i.e structs), they have to marshal all reference type arguments.**","Url":"https://github.com/dotnet/corert/issues/7043","RelatedDescription":"Closed issue \"NativeCallableAttribute question\" (#7043)"},{"Id":"411322887","IsPullRequest":true,"CreatedAt":"2019-02-18T10:44:07","Actor":"jkotas","Number":"7046","RawContent":null,"Title":"Fix test runs in vanilla environment","State":"closed","Body":"Fixes #7036","Url":"https://github.com/dotnet/corert/pull/7046","RelatedDescription":"Closed or merged PR \"Fix test runs in vanilla environment\" (#7046)"},{"Id":"411355456","IsPullRequest":false,"CreatedAt":"2019-02-18T08:30:11","Actor":"rainbowlee","Number":"7048","RawContent":null,"Title":" Complie error code -536852669","State":"open","Body":"I try to build a chat project. The error occuried. \r\n\r\nC:\\Users\\hqfy\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27416-01\\build\\Microsoft.NETCore.Native.targets(235,5): error MSB3073: 命令“\"C:\\Users\\hqfy\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-27416-01\\tools\\ilc\" @\"obj\\debug\\netcoreapp2.0\\win-x64\\native\\ChatServer.ilc.rsp\"”已退出，代码为 -536852669。 [D:\\guiltydomain\\guiltydomain_netcore\\Server\\Chat\\Chat_dotnet.csproj]","Url":"https://github.com/dotnet/corert/issues/7048","RelatedDescription":"Open issue \" Complie error code -536852669\" (#7048)"},{"Id":"411221984","IsPullRequest":true,"CreatedAt":"2019-02-18T08:14:32","Actor":"MichalStrehovsky","Number":"7042","RawContent":null,"Title":"Fix mapping table emission for generic types","State":"closed","Body":"We were only putting methods on instantiated types/fields into the mapping table because when the code was written, shared generics were wonky. We actually only need to emit a single entry for each canonically equivalent method/field though because the type loader can take care of the rest.\r\n\r\nThis reduces size of the mapping table for fields and methods and helps #6987 to avoid having to instantiate things over `Object`.","Url":"https://github.com/dotnet/corert/pull/7042","RelatedDescription":"Closed or merged PR \"Fix mapping table emission for generic types\" (#7042)"},{"Id":"411284368","IsPullRequest":false,"CreatedAt":"2019-02-18T06:43:40","Actor":"rainbowlee","Number":"7044","RawContent":null,"Title":"How can i run samples in tests; ","State":"closed","Body":"I changed the project, but i can not open the project, eg hello\r\n\r\ncan not import E:\\build\\Microsoft.netcore.native.targets ","Url":"https://github.com/dotnet/corert/issues/7044","RelatedDescription":"Closed issue \"How can i run samples in tests; \" (#7044)"},{"Id":"411152261","IsPullRequest":true,"CreatedAt":"2019-02-18T06:39:22","Actor":"jkotas","Number":"7039","RawContent":null,"Title":"Add SimulatedLocationInBaseDirectory quirk","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7039","RelatedDescription":"Closed or merged PR \"Add SimulatedLocationInBaseDirectory quirk\" (#7039)"},{"Id":"411309302","IsPullRequest":false,"CreatedAt":"2019-02-18T05:37:25","Actor":"szhaomsft","Number":"7045","RawContent":null,"Title":"export function in generated lib","State":"open","Body":"I saw a lot of function of dotnet are exported in static libs\r\n\r\nis this by design?\r\n\r\nupFromDict_System_Linq_Expressions_System_Linq_Expressions_Expression__Lambda_4<System___Canon>_TypeHandle_System_Linq_Expressions_System_Linq_Expressions_Expression_1<TDelegate_System___Canon>\r\n  2BB2858 __GenericLookupFromDict_System_Linq_Expressions_System_Linq_Expressions_Expression__Lambda_4<System___Canon>_TypeHandle_TDelegate_System___Canon\r\n  2BB2858 __GenericLookupFromDict_System_Linq_Expressions_System_Linq_Expressions_Interpreter_InstructionList__EmitIntSwitch<System___Canon>_TypeHandle_System_Linq_Expressions_System_Linq_Expressions_Interpreter_IntSwitchInstruction_1<T_System___Canon>\r\n  2BB2858 __GenericLookupFromDict_System_Linq_Expressions_System_Linq_Expressions_Interpreter_LabelInfo__CommonNode<System___Canon>_TypeHandle_S_P_CoreLib_System_Collections_Generic_EqualityComparer_1<T_System___Canon>\r\n  2BB2858 __GenericLookupFromDict_System_Linq_Expressions_System_Linq_Expressions_Interpreter_LabelInfo__CommonNode<System___Canon>_TypeHandle_System_Collections_System_Collections_Generic_HashSet_1<T_System___Canon>\r\n  2BB2858 __GenericLookupFromDict_System_Linq_Expressions_System_Linq_Expressions_Interpreter_LightCompiler_QuoteVisitor__VisitLambda<System___Canon>_MethodDictionary_System_Linq_Express","Url":"https://github.com/dotnet/corert/issues/7045","RelatedDescription":"Open issue \"export function in generated lib\" (#7045)"},{"Id":"411197706","IsPullRequest":true,"CreatedAt":"2019-02-17T15:13:04","Actor":"filipnavara","Number":"7041","RawContent":null,"Title":"WIP: Move WaitHandle to shared CoreLib","State":"open","Body":"Counter-part to https://github.com/dotnet/coreclr/pull/22634.","Url":"https://github.com/dotnet/corert/pull/7041","RelatedDescription":"Open PR \"WIP: Move WaitHandle to shared CoreLib\" (#7041)"},{"Id":"411154477","IsPullRequest":false,"CreatedAt":"2019-02-17T06:27:33","Actor":"szhaomsft","Number":"7040","RawContent":null,"Title":"EXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Windows.Forms","State":"open","Body":"seems like a regression \r\n\r\ni am compiling a dotnet core 2.1 console app.  why it looks for system windows forms now?\r\n\r\nusing official build \r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27414-02\" />\r\n    <PackageReference Include=\"runtime.linux-x64.Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27414-02\" />\r\n    <PackageReference Include=\"runtime.win-x64.Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27414-02\" />\r\n\r\nwhile an older build has no such error\r\n\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27322-02\" />\r\n    <PackageReference Include=\"runtime.linux-x64.Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27322-02\" />\r\n    <PackageReference Include=\"runtime.win-x64.Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-27322-02\" />","Url":"https://github.com/dotnet/corert/issues/7040","RelatedDescription":"Open issue \"EXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Windows.Forms\" (#7040)"},{"Id":"411136571","IsPullRequest":true,"CreatedAt":"2019-02-17T05:48:02","Actor":"Dotnet-GitSync-Bot","Number":"7038","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7038","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7038)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"413180902","IsPullRequest":true,"CreatedAt":"2019-02-22T02:00:20","Actor":"dotnet-bot","Number":"2975","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2975","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2975)"},{"Id":"413197636","IsPullRequest":false,"CreatedAt":"2019-02-22T01:16:10","Actor":"natemcmaster","Number":"2976","RawContent":null,"Title":"All packages targeting netcoreapp3.0 have a 'Microsoft.NETCore.Platforms' dependency in nuspec","State":"open","Body":"https://github.com/dotnet/sdk/blob/0690b28e426f5b7e6dfe7ab4200b83ce3c96bc95/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.props#L81-L87\r\n\r\nThis should probably have been 'PrivateAssets=All'. \r\n\r\nAll aspnet 3.0 Preview 3 packages which target netcoreapp3.0 have this dependency in their nuspec. cc @Eilon @livarcocc \r\n\r\n![image](https://user-images.githubusercontent.com/2696087/53213059-4e1c0280-35fc-11e9-9591-32f81f33502c.png)\r\n","Url":"https://github.com/dotnet/sdk/issues/2976","RelatedDescription":"Open issue \"All packages targeting netcoreapp3.0 have a 'Microsoft.NETCore.Platforms' dependency in nuspec\" (#2976)"},{"Id":"412792797","IsPullRequest":true,"CreatedAt":"2019-02-21T19:16:46","Actor":"dsplaisted","Number":"2972","RawContent":null,"Title":"Add test and fix self-contained app using ASP.NET Core","State":"closed","Body":"Test scenario for https://github.com/aspnet/AspNetCore/issues/7782","Url":"https://github.com/dotnet/sdk/pull/2972","RelatedDescription":"Closed or merged PR \"Add test and fix self-contained app using ASP.NET Core\" (#2972)"},{"Id":"412890450","IsPullRequest":true,"CreatedAt":"2019-02-21T15:00:25","Actor":"dotnet-bot","Number":"2973","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2973","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2973)"},{"Id":"412913042","IsPullRequest":true,"CreatedAt":"2019-02-21T14:16:41","Actor":"dotnet-maestro[bot]","Number":"2974","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19121.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2974","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2974)"},{"Id":"412680563","IsPullRequest":true,"CreatedAt":"2019-02-21T06:42:17","Actor":"nugetlurker","Number":"2970","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5856 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5856 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2970","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5856 into sdk\" (#2970)"},{"Id":"412680549","IsPullRequest":true,"CreatedAt":"2019-02-21T06:41:58","Actor":"nugetlurker","Number":"2969","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5856 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5856 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2969","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5856 into sdk\" (#2969)"},{"Id":"411149954","IsPullRequest":true,"CreatedAt":"2019-02-21T03:04:07","Actor":"wli3","Number":"2954","RawContent":null,"Title":"merge release/2.2.2xx to release/release/3.0.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2954","RelatedDescription":"Closed or merged PR \"merge release/2.2.2xx to release/release/3.0.1xx\" (#2954)"},{"Id":"412718584","IsPullRequest":true,"CreatedAt":"2019-02-21T02:25:14","Actor":"tmat","Number":"2971","RawContent":null,"Title":"Set copyright and package license","State":"open","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/sdk/pull/2971","RelatedDescription":"Open PR \"Set copyright and package license\" (#2971)"},{"Id":"410997416","IsPullRequest":true,"CreatedAt":"2019-02-21T02:10:50","Actor":"zivkan","Number":"2951","RawContent":null,"Title":"Insert NuGet Build 4.3.1-rtm-5850 into sdk 1.1","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2951","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 4.3.1-rtm-5850 into sdk 1.1\" (#2951)"},{"Id":"412603209","IsPullRequest":true,"CreatedAt":"2019-02-21T00:12:52","Actor":"dsplaisted","Number":"2965","RawContent":null,"Title":"Update stage 0, Fix .NET Standard 2.1","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2965","RelatedDescription":"Closed or merged PR \"Update stage 0, Fix .NET Standard 2.1\" (#2965)"},{"Id":"411889520","IsPullRequest":true,"CreatedAt":"2019-02-20T22:02:54","Actor":"dotnet-bot","Number":"2959","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2959","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#2959)"},{"Id":"412613270","IsPullRequest":true,"CreatedAt":"2019-02-20T21:40:19","Actor":"wli3","Number":"2967","RawContent":null,"Title":"WIP Update stage0 and nuget","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2967","RelatedDescription":"Closed or merged PR \"WIP Update stage0 and nuget\" (#2967)"},{"Id":"412641119","IsPullRequest":true,"CreatedAt":"2019-02-20T21:39:36","Actor":"wli3","Number":"2968","RawContent":null,"Title":"WIP merge release/2.2.2xx to release/release/3.0.1xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2968","RelatedDescription":"Open PR \"WIP merge release/2.2.2xx to release/release/3.0.1xx\" (#2968)"},{"Id":"412604385","IsPullRequest":false,"CreatedAt":"2019-02-20T20:03:26","Actor":"tmat","Number":"2966","RawContent":null,"Title":"Global tool shims: Store package version in Win32 version resource ","State":"open","Body":"**Issue**\r\n\r\nCurrently the tool shim embeds a relative path to the target .dll in a `.data` section that includes package version:\r\n\r\nFor example:\r\n```\r\n.store\\microsoft.dotnet.darc\\1.1.0-beta.19081.1\\microsoft.dotnet.darc\\1.1.0-beta.19081.1\\tools\\netcoreapp2.1\\any\\Microsoft.DotNet.Darc.dll\r\n```\r\n\r\nThis design makes it very difficult to change the version number in a post-build step. \r\nThis approach is not compatible with some of our build tools and deterministic build tools that build artifacts without versions and stamp them with the version afterwards.\r\n\r\n**Proposal**\r\n\r\nInstead of embedding relative path, store the package version in a version resource, read the version and construct the path in the shim.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2966","RelatedDescription":"Open issue \"Global tool shims: Store package version in Win32 version resource \" (#2966)"},{"Id":"412390668","IsPullRequest":true,"CreatedAt":"2019-02-20T15:00:53","Actor":"dotnet-bot","Number":"2963","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2963","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2963)"},{"Id":"412413417","IsPullRequest":true,"CreatedAt":"2019-02-20T14:26:53","Actor":"dotnet-maestro[bot]","Number":"2964","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19119.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2964","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2964)"},{"Id":"411889557","IsPullRequest":true,"CreatedAt":"2019-02-20T03:00:31","Actor":"dotnet-bot","Number":"2961","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2961","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2961)"},{"Id":"412091091","IsPullRequest":false,"CreatedAt":"2019-02-19T19:39:26","Actor":"dsplaisted","Number":"2962","RawContent":null,"Title":"Remove UseRefTargetingPacks once SDK round-trips through core-sdk","State":"open","Body":"#2919 added a `UseRefTargetingPacks` flag to enable using the new .Ref targeting packs instead of the ones in the bundled versions file.  Once that PR has flowed into core-sdk, we should update the stage 0 in dotnet/sdk and remove the flag.","Url":"https://github.com/dotnet/sdk/issues/2962","RelatedDescription":"Open issue \"Remove UseRefTargetingPacks once SDK round-trips through core-sdk\" (#2962)"},{"Id":"411889540","IsPullRequest":true,"CreatedAt":"2019-02-19T12:01:55","Actor":"dotnet-bot","Number":"2960","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2960","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2960)"},{"Id":"411889504","IsPullRequest":true,"CreatedAt":"2019-02-19T12:01:50","Actor":"dotnet-bot","Number":"2958","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2958","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#2958)"},{"Id":"410900677","IsPullRequest":true,"CreatedAt":"2019-02-19T06:36:43","Actor":"zivkan","Number":"2950","RawContent":null,"Title":"Insert NuGet Build 4.9.4-rtm.5839 into SDK 2.2.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2950","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 4.9.4-rtm.5839 into SDK 2.2.1xx\" (#2950)"},{"Id":"410899716","IsPullRequest":true,"CreatedAt":"2019-02-19T06:18:55","Actor":"zivkan","Number":"2949","RawContent":null,"Title":"Insert NuGet Build 4.9.4-rtm.5839 into sdk 2.1.5xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2949","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 4.9.4-rtm.5839 into sdk 2.1.5xx\" (#2949)"},{"Id":"411070823","IsPullRequest":true,"CreatedAt":"2019-02-19T05:40:48","Actor":"dotnet-maestro[bot]","Number":"2952","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19115.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19115.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19115.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2952","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2952)"},{"Id":"410829762","IsPullRequest":true,"CreatedAt":"2019-02-19T05:24:23","Actor":"v-zbsail","Number":"2947","RawContent":null,"Title":"LOC CHECKIN | dotnet/sdk release/2.2.2xx | 20190215","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2947","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/sdk release/2.2.2xx | 20190215\" (#2947)"},{"Id":"411610498","IsPullRequest":false,"CreatedAt":"2019-02-19T03:38:12","Actor":"benaadams","Number":"2957","RawContent":null,"Title":"Using Sdk and FrameworkReference outputs Framework twice","State":"closed","Body":".csproj\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nOutputs to runtime.json\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"framework\": [\r\n        {\r\n          \"name\": \"Microsoft.AspNetCore.App\",\r\n          \"version\": \"3.0.0-preview3-19117-05\"\r\n        },\r\n        {\r\n          \"name\": \"Microsoft.AspNetCore.App\",\r\n          \"version\": \"3.0.0-preview3-19117-05\"\r\n        }\r\n    ],\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true\r\n    }\r\n  }\r\n}\r\n```\r\nWhich then fails to run with `Invalid runtimeconfig.json`\r\n\r\nIt should only output the identical framework once\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.AspNetCore.App\",\r\n      \"version\": \"3.0.0-preview3-19117-05\"\r\n    },\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true\r\n    }\r\n  }\r\n}\r\n```\r\nOr it should ignore (or only use) the last entry when it runs","Url":"https://github.com/dotnet/sdk/issues/2957","RelatedDescription":"Closed issue \"Using Sdk and FrameworkReference outputs Framework twice\" (#2957)"},{"Id":"411365559","IsPullRequest":false,"CreatedAt":"2019-02-18T08:56:55","Actor":"dsplaisted","Number":"2956","RawContent":null,"Title":"Support publishing for a RuntimeIdentifier without building for that RuntimeIdentifier","State":"open","Body":"This is similar to #2839, but also involves using the \"No Build\" option on publish.\r\n\r\nSo you have a project with:\r\n\r\n```xml\r\n<RuntimeIdentifiers>A;B;C</RuntimeIdentifiers>\r\n```\r\n\r\nAnd you do:\r\n\r\n```\r\ndotnet build\r\ndotnet publish -r A --no-restore --no-build\r\n```\r\n\r\nAfter fixing #2839, the `--no-build` scenario is still failing.  It looks like this is because the RID-specific app-host isn't in the intermediate directory and it fails when trying to copy it to the publish directory.","Url":"https://github.com/dotnet/sdk/issues/2956","RelatedDescription":"Open issue \"Support publishing for a RuntimeIdentifier without building for that RuntimeIdentifier\" (#2956)"},{"Id":"411161564","IsPullRequest":false,"CreatedAt":"2019-02-18T04:10:02","Actor":"baruchiro","Number":"2955","RawContent":null,"Title":"\"MSBuildExtensionsPath\" in \"Sdk.props\" is empty","State":"closed","Body":"https://github.com/dotnet/sdk/blob/2eb6c546931b5bcb92cd3128b93932a980553ea1/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.props#L31\r\n\r\nI create an object of [`Microsoft.Build.Evaluation.Project`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.build.evaluation.project?view=netframework-4.7.2&viewFallbackFrom=netcore-2.1) with existing `.csproj` file path.\r\nWhen I compile it in `net471` everything works fine.\r\n\r\nIf I compile it in `netcoreapp2.1`, the file `Sdk.props` throw an error because he search the file `Microsoft.Common.props` in current working directory (the folder of my executable dll) instead of in `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Microsoft.Common.props`.\r\nI think it is because the `$(MSBuildExtensionsPath)` is empty.\r\n\r\nIf you think to answer that \"this is not soppurted in *.net core*\", I will happy to know how to evulate `.csproj` files in *.net core*.","Url":"https://github.com/dotnet/sdk/issues/2955","RelatedDescription":"Closed issue \"\"MSBuildExtensionsPath\" in \"Sdk.props\" is empty\" (#2955)"},{"Id":"411087965","IsPullRequest":false,"CreatedAt":"2019-02-16T16:28:28","Actor":"nguerrera","Number":"2953","RawContent":null,"Title":"Assembly version stopped being bumped with every build in 2.1.300+","State":"open","Body":"MSBuild on desktop cannot load more than one version of our tasks unless we bump the assembly version. (MSBuild on coreclr can't either, but we have a 1:1 msbuild:sdk relationship on coreclr so it's moot. The current limitations on coreclr are even worse, can't load SxS in same load context regardless of version, but again moot here.)\r\n\r\nIf an MSBuild node is alive using a different build of the same Major.Minor.Patch release, then it will use targets from the new build and tasks from the old one. When there are contract changes between the tasks and targets, this can lead to confounding errors  like \"task X could not be loaded from Microsoft.NET.Build.Tasks.dll\" or \"task Y does not take parameter Z\". \r\n\r\nWe got around this in the past by bumping the assembly version with every build. Since tasks are always dynamically loaded and never referenced directly at compilation time, this doesn't have the usual negative consequences of requiring excessive binding redirects, etc.\r\n\r\nThis has a history of regressing with infrastructure (repo toolset, arcade, etc.,) because the infrastructure is opinionated that the build number should not be part of the assembly version, which makes sense for most things, but not build tasks. We need to add test coverage to stop this from regressing. It can go a long time unreported because 1) things might still work when mixing tasks and targets between builds and 2) msbuild nodes eventually shut down and things start working again, letting the problem get chalked up to flakiness that can't be reproduced.\r\n\r\nNow, with the move to build-to-build upgrades of patches, https://github.com/dotnet/core-sdk/pull/530, I think there will be a prompt to terminate users of older build or a prompt to reboot following the upgrade.That would mitigate this, but we should still be defensive for forced SxS patch installs (via .zip or whatever).","Url":"https://github.com/dotnet/sdk/issues/2953","RelatedDescription":"Open issue \"Assembly version stopped being bumped with every build in 2.1.300+\" (#2953)"},{"Id":"410896484","IsPullRequest":false,"CreatedAt":"2019-02-15T18:45:09","Actor":"danroth27","Number":"2948","RawContent":null,"Title":"Error when running Blazor app before running any other .NET Core 3.0 app: Unable to generate deps.json, it may have been already generated","State":"open","Body":"If you create a Blazor app after installing the .NET Core 3.0 Preview 2 SDK and you have a clean NuGet package cache you get an error when running the app: \"Unable to generate deps.json, it may have been already generated\". \r\n\r\nBlazor apps rely on a `DotNetCliToolReference` to run, but they also target .NET Standard:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <RunCommand>dotnet</RunCommand>\r\n    <RunArguments>blazor serve</RunArguments> \r\n    <LangVersion>7.3</LangVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor\" Version=\"0.8.0-preview-19104-04\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Build\" Version=\"0.8.0-preview-19104-04\" PrivateAssets=\"all\" />\r\n\r\n    <DotNetCliToolReference Include=\"Microsoft.AspNetCore.Blazor.Cli\" Version=\"0.8.0-preview-19104-04\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nIt appears that the problem is that the Microsoft.NetCore.App package doesn't get restored, which then causes the Blazor app to fail at runtime. If you create any other .NET Core app before trying to run the Blazor app, the Microsoft.NetCore.App package is then already restored and the app runs fine. At the very least the error message doesn't really help you understand what is going on here.\r\n\r\nRepro steps:\r\n- Install .NET Core 3.0 Preview 2\r\n- `dotnet new -i Microsoft.AspNetCore.Blazor.Templates::0.8.0-preview-19104-04`\r\n- `dotnet nuget locals all -c`\r\n- `dotnet new blazor -o BlazorApp1`\r\n- `cd BlazorApp1`\r\n- `dotnet run`\r\n\r\nExpected result:\r\n- Blazor app runs successfully\r\n\r\nActual result:\r\n- Unable to generate deps.json, it may have been already generated.  You can specify the \"-d\" option before the tool name for diagnostic output (for example, \"dotnet -d <toolname>\": C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010184\\Sdks\\Microsoft.NET.Sdk\\targets\\GenerateDeps\\GenerateDeps.proj\r\n\r\nTo workaround the issue you can create any .NET Core app, which will result in the missing Microsoft.AspNetCore.App package to get successfully restored.\r\n\r\nWorkaround:\r\n- `cd ..`\r\n- `dotnet new console -o ConsoleApp1`\r\n- `cd BlazorApp1`\r\n- `dotnet run`\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2948","RelatedDescription":"Open issue \"Error when running Blazor app before running any other .NET Core 3.0 app: Unable to generate deps.json, it may have been already generated\" (#2948)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1098610296367841282","CreatedAt":"2019-02-21T15:48:00+00:00","UserScreenname":"dotnet","Text":"The #dotnet blog just got a makeover!\n\nDiscover and share great content while enjoying the modern, clean design of… https://t.co/b0rdirHuPF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":41,"FavoriteCount":13,"RawContent":null},{"Id":"1098594189313363968","CreatedAt":"2019-02-21T14:44:00+00:00","UserScreenname":"dotnet","Text":". @ChristosMatskas joins #OnDotNet to share the story of an application he built using the Azure SDKs for .NET and… https://t.co/TR4ua9BnvV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":10,"RawContent":null},{"Id":"1098337450924040194","CreatedAt":"2019-02-20T21:43:49+00:00","UserScreenname":"dotnet","Text":"Check out the February updates for .NET. https://t.co/8Fz51sPyod","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":9,"RawContent":null},{"Id":"1097924819415326720","CreatedAt":"2019-02-19T18:24:10+00:00","UserScreenname":"dotnet","Text":".NET Core 1.0 and 1.1 will reach End of Life on June 27, 2019 https://t.co/45GssRCrZk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":129,"FavoriteCount":133,"RawContent":null},{"Id":"1095786421221240833","CreatedAt":"2019-02-13T20:46:56+00:00","UserScreenname":"dotnet","Text":"The #DotNet blog is getting a major update! Find more details and get a sneak peek of our new and improved blog des… https://t.co/cIC92TS7qA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":100,"FavoriteCount":37,"RawContent":null}]}},"RunOn":"2019-02-22T05:30:54.3317062Z","RunDurationInMilliseconds":20994}