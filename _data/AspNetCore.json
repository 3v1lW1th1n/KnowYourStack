{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing SignalR for ASP.NET Core 2.0","PublishedOn":"2017-09-14T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are glad to announce an alpha release of SignalR for ASP.NET Core 2.0. This is the first official release of a new SignalR that is compatible with ASP.NET Core. It consists of a server component, a .NET client targeting .NET Standard 2.0 and a JavaScript/TypeScript client. What’s New? SignalR for ASP.NET Core is... <a aria-label=\"read more about Announcing SignalR for ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/","RawContent":null},{"Title":"Welcome to the New Blog Template for ASP.NET Developers","PublishedOn":"2017-09-08T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"By Juliet Daniel, Lucas Isaza, and Uma Lakshminarayan Have you always wanted to build a blog or other web application but haven&#8217;t had the time or educational resources to learn? With our blog template, available in our GitHub repo, you can create your web application fast and effortlessly, and even learn to master the new... <a aria-label=\"read more about Welcome to the New Blog Template for ASP.NET Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/08/welcome-to-the-new-blog-template-for-asp-net-developers/","RawContent":null},{"Title":"Getting Started with Windows Containers","PublishedOn":"2017-09-07T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Containers provide a way of running an application in a controlled environment, isolated from other applications running on the machine, and from the underlying infrastructure. They are a cost-effective way of abstracting away the machine, ensuring that the application runs in the same conditions, from development, to test, to production. Containers started in Linux, as... <a aria-label=\"read more about Getting Started with Windows Containers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/07/getting-started-with-windows-containers/","RawContent":null},{"Title":"ASP.NET Core 2.0 Features","PublishedOn":"2017-08-25T00:00:00","CommentsCount":20,"FacebookCount":0,"Summary":"Last week we announced the release of ASP.NET Core 2.0 and described some top new features, including Razor Pages, new and updated templates, and Application Insights integration. In this blog post we are going to dig into more details of features in 2.0. This list is not exhaustive or in any particular order, but highlights... <a aria-label=\"read more about ASP.NET Core 2.0 Features\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/25/asp-net-core-2-0-features-1/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0","PublishedOn":"2017-08-14T00:00:00","CommentsCount":44,"FacebookCount":0,"Summary":"The ASP.NET team is proud to announce general availability of ASP.NET Core 2.0.  This release features compatibility with .NET Core 2.0, tooling support in Visual Studio 2017 version 15.3, and the new Razor Pages user-interface design paradigm.  For a full list of updates, you can read the release notes and you can check the list... <a aria-label=\"read more about Announcing ASP.NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/08/14/announcing-asp-net-core-2-0/","RawContent":null},{"Title":"Development time IIS support for ASP.NET Core Applications","PublishedOn":"2017-07-14T00:00:00","CommentsCount":13,"FacebookCount":0,"Summary":"With a recent update to Visual Studio 2017, we have added support for debugging ASP.NET Core applications against IIS. This blog post will walk you through enabling this feature and setting up your project to use this feature. Getting Started To get started: You need to install Visual Studio 2017 (version 15.3) Preview (it will... <a aria-label=\"read more about Development time IIS support for ASP.NET Core Applications\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/07/13/development-time-iis-support-for-asp-net-core-applications/","RawContent":null},{"Title":"WCF Web Service Reference Provider – Metadata Exchange Endpoint Authentication","PublishedOn":"2017-06-28T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the recent update to the WCF Service Reference tool in the VS Marketplace, support has been added for downloading metadata for a web service where the metadata exchange (MEX) endpoint has been secured with IIS authentication. The purpose of MEX endpoints is to allow clients to discover the service capabilities, including security aspects of... <a aria-label=\"read more about WCF Web Service Reference Provider – Metadata Exchange Endpoint Authentication\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/06/28/wcf-web-service-reference-mex-authentication/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/06/28/wcf-web-service-reference-mex-authentication/","RawContent":null},{"Title":"Introducing ASP.NET Core 2.0 Preview 2","PublishedOn":"2017-06-28T00:00:00","CommentsCount":41,"FacebookCount":0,"Summary":"At Build 2017, we released an initial preview version of ASP.NET Core 2.0.  Over the last two months we have incorporated your feedback and added a number of new features.  We now have a Preview 2 version of the ASP.NET Core 2.0 framework and Visual Studio tools for you to try.  In this post, we... <a aria-label=\"read more about Introducing ASP.NET Core 2.0 Preview 2\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/06/28/introducing-asp-net-core-2-0-preview-2/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/06/28/introducing-asp-net-core-2-0-preview-2/","RawContent":null},{"Title":"Announcing ASP.NET Core 2.0.0-Preview1 and Updates for .NET Web Developers","PublishedOn":"2017-05-10T00:00:00","CommentsCount":25,"FacebookCount":0,"Summary":"The ASP.NET team is pleased to share the first preview version of the ASP.NET Core 2.0 framework.  In this post, we’ll look at the new features and changes to the web framework that were announced at the Build 2017 keynote and sessions.  We will also look at some other updates that were published for ASP.NET... <a aria-label=\"read more about Announcing ASP.NET Core 2.0.0-Preview1 and Updates for .NET Web Developers\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/","RawContent":null},{"Title":"Visual Studio 2017 Tools for Azure Functions","PublishedOn":"2017-05-10T00:00:00","CommentsCount":104,"FacebookCount":0,"Summary":"Visual Studio 2017 Tools for Azure Functions are now available as part of the Azure development workload starting in the Visual Studio 2017 15.3 release. These tools: Enable creating pre-compiled C# functions that bring better cold start performance than script based functions, and opens the entire eco-system of Visual Studio tools for class libraries including code... <a aria-label=\"read more about Visual Studio 2017 Tools for Azure Functions\" href=\"https://blogs.msdn.microsoft.com/webdev/2017/05/10/azure-function-tools-for-visual-studio-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/webdev/2017/05/10/azure-function-tools-for-visual-studio-2017/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6622674531","Type":"IssuesEvent","CreatedAt":"2017-09-22T01:35:03","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2210","RelatedDescription":"Closed issue \"Controller Json response hang, improper error handling.\" (#2210) at aspnet/Home","RelatedBody":"If a controller method returns a JsonResult and the object passed into the Json call self references, it causes a \"net::ERR_INCOMPLETE_CHUNKED_ENCODING\" error in chrome. (but not firefox).\r\n\r\nUsing the Microsoft.AspNet.Buffering \"UseResponseBuffering\" app configure method fixes the chunking issue by disabling chunked responses. Then the actual error, the recursive reference in the json object is revealed.\r\n\r\nThe error should be handled the same way for the chunked response."},{"Id":"6622572679","Type":"IssuesEvent","CreatedAt":"2017-09-22T00:48:49","Actor":"Shadetheartist","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2210","RelatedDescription":"Opened issue \"Controller Json response hang, improper error handling.\" (#2210) at aspnet/Home","RelatedBody":"If a controller method returns a JsonResult and the object passed into the Json call self references, it causes a \"net::ERR_INCOMPLETE_CHUNKED_ENCODING\" error in chrome. (but not firefox).\r\n\r\nUsing the Microsoft.AspNet.Buffering \"UseResponseBuffering\" app configure method fixes the chunking issue by disabling chunked responses. Then the actual error, the recursive reference in the json object is revealed.\r\n\r\nThe error should be handled the same way for the chunked response."},{"Id":"6620895783","Type":"IssuesEvent","CreatedAt":"2017-09-21T17:06:56","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/1319","RelatedDescription":"Closed issue \"Are perf counters available?\" (#1319) at aspnet/Home","RelatedBody":"Scenario: we performed load tests using VS 2015.\n\nOne cool thing with ASP.NET of old times, was that it registered perf counters on the server, which were included by default in load tests.\n\nSo you easily got key indicators such as request queue length, avg request wait time, avg request execution time, application restarts, etc.\n\nThis was mega-useful to diagnose all kinds of problems and have a better understanding of what happened on your server.\n\nOf course, now that `System.Web` is not even loaded, those counters are worthless. IIS does not seem to offer much help either.\n\nIs there any way to get a similar set of perf counters back for ASP.NET Core? Any script to register or something?\n\nIt is very valuable to be able to monitor the server health state.\n"},{"Id":"6620780493","Type":"IssuesEvent","CreatedAt":"2017-09-21T16:40:31","Actor":"natemcmaster","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2206","RelatedDescription":"Closed issue \"why web.config in the publish folder?\" (#2206) at aspnet/Home","RelatedBody":"- VS2017\r\n- asp.net core 2.0 project\r\n- publish to folder\r\nin bin\\xx\\netcoreapp2.0 no web.config, but bin\\xx\\PublishOutput has web.config, the content:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <system.webServer>\r\n    <handlers>\r\n      <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModule\" resourceType=\"Unspecified\" />\r\n    </handlers>\r\n    <aspNetCore processPath=\"dotnet\" arguments=\".\\xxx.dll\" stdoutLogEnabled=\"false\" stdoutLogFile=\".\\logs\\stdout\" />\r\n  </system.webServer>\r\n</configuration>\r\n<!--ProjectGuid: 9e4e704c-869f-41da-9668-d4ea1d44002d-->\r\n```\r\nI try remove web.config, all thing are work fine, is this a issue?"},{"Id":"6619423483","Type":"IssuesEvent","CreatedAt":"2017-09-21T12:11:59","Actor":"lorenz31","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2202","RelatedDescription":"Closed issue \"ASP.NET CORE Web API: Value are always null when doing HTTP Post requests.\" (#2202) at aspnet/Home","RelatedBody":"I'm experiencing a problem doing post requests via ASP.NET Core Web API. I'm a bit confused of the articles I read/found while Googling.\r\n\r\nSo here's my scenario:\r\n\r\nI'm trying to do a HTTP Post request to an api endpoint with a complex parameter\r\nExample:\r\n[HttpPost]\r\n[Route(\"add\")]\r\npublic async Task<IActionResult> PostStock([FromBody]Stock model)\r\n{\r\n       if (model != null)\r\n       {\r\n               var isStockAdded = await _inventorySvc.AddStockAsync(model);\r\n\r\n                if (isStockAdded)\r\n                    return Ok();\r\n                else\r\n                    return BadRequest();\r\n            }\r\n\r\n            return BadRequest();\r\n        }\r\n}\r\n\r\nMy problem is that every time I make a post request to this endpoint the model value(s) are always null even if there's the [FromBody] parameter attribute or not.\r\n\r\nIs this a bug in ASP.NET Core 2?"},{"Id":"6618127589","Type":"IssuesEvent","CreatedAt":"2017-09-21T06:41:44","Actor":"pavlospap","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2209","RelatedDescription":"Opened issue \"Unable to resolve service when adding services dynamically through reflection\" (#2209) at aspnet/Home","RelatedBody":"Hello everybody...\r\n\r\nI'm using version 2.0 and I'm stuck with a strange issue with DI in one of my projects. Long story short I'm trying to dynamically add services (such as repository services) in my app through reflection using a base generic class so I won't have to create all those repository classes (one for every entity) and add all those implementations in my ConfigureServices method.\r\n\r\nThe entities live in many assemblies so I'm collecting entities from any assembly in current folder (all the types that inherit the base entity class), creating generic interface and implementation types on the fly and adding them to my services.\r\n\r\nYou can download a small test project which reproduces the issue : [TestDI.zip](https://github.com/aspnet/Home/files/1320144/TestDI.zip)\r\n\r\nThere are four assemblies in the test project:\r\n\r\nLib.Data with the base entity class:\r\n\r\n```\r\n// EntityBase.cs\r\nnamespace Lib.Data\r\n{\r\n    public abstract class EntityBase\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nApp.Data with the only entity class:\r\n\r\n```\r\n// School.cs\r\nusing Lib.Data;\r\n\r\nnamespace App.Data\r\n{\r\n    public class School : EntityBase\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nLib witch is where entities are collected and the repository generic classes live:\r\n\r\n```\r\n// IServiceCollectionExtensions.cs\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing Lib.Data;\r\nusing Lib.Services;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace Lib\r\n{\r\n    public static class IServiceCollectionExtensions\r\n    {\r\n        public static IServiceCollection AddRepositories(this IServiceCollection services)\r\n        {\r\n            var location = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\r\n            var types = new List<Type>();\r\n            foreach (string file in Directory.GetFiles(location, \"*.dll\"))\r\n            {\r\n                types.AddRange(Assembly.LoadFile(file).GetTypes());\r\n            }\r\n\r\n            var entityTypes = from entityType in types\r\n                              where entityType.IsSubclassOf(typeof(EntityBase)) &&\r\n                                    !entityType.GetTypeInfo().IsAbstract\r\n                              select entityType;\r\n\r\n            foreach (var entityType in entityTypes)\r\n            {\r\n                var interfaceType = typeof(IRepository<>).MakeGenericType(entityType);\r\n                var implementationType = typeof(Repository<>).MakeGenericType(entityType);\r\n                services.AddScoped(interfaceType, implementationType);\r\n            }\r\n\r\n            return services;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```\r\n// Servcices/IRepository.cs\r\nnamespace Lib.Services\r\n{\r\n    public interface IRepository<T>\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n```\r\n// Servcices/Repository.cs\r\nnamespace Lib.Services\r\n{\r\n    public class Repository<T> : IRepository<T>\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nAnd, finally, the App assembly with the Startup class and the Seeder service which uses the one and only repository:\r\n\r\n```\r\n// Startup.cs\r\nusing App.Services;\r\nusing Lib;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace App\r\n{\r\n    public class Startup\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddRepositories();\r\n            services.AddScoped<IDataSeeder, DataSeeder>();\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, IDataSeeder seeder)\r\n        {\r\n            seeder.Seed();\r\n\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n\r\n            app.Run(async (context) =>\r\n            {\r\n                await context.Response.WriteAsync(\"Hello World!\");\r\n            });\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```\r\n// IDataSeeder.cs\r\nnamespace App.Services\r\n{\r\n    public interface IDataSeeder\r\n    {\r\n        void Seed();\r\n    }\r\n}\r\n```\r\n\r\n```\r\n// DataSeeder.cs\r\nusing App.Data;\r\nusing Lib.Services;\r\n\r\nnamespace App.Services\r\n{\r\n    public class DataSeeder : IDataSeeder\r\n    {\r\n        public DataSeeder(IRepository<School> rep)\r\n        {\r\n        }\r\n\r\n        public void Seed()\r\n        {\r\n            // seed db\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIf I add the service like this\r\n```\r\n//services.AddRepositories();\r\nservices.AddScoped<IRepository<School>, Repository<School>>();\r\nservices.AddScoped<IDataSeeder, DataSeeder>();\r\n```\r\neverything works fine. But when I'm trying to dynamically add them like in the test project I can see (at the end of the ConfigureServices) that the service is there \r\n\r\n![testdi](https://user-images.githubusercontent.com/13450530/30681942-47c8e18a-9eb0-11e7-85e0-90d53e425bf2.png)\r\n\r\nbut when the Configure method is executed I get the following exception:\r\n> InvalidOperationException: Unable to resolve service for type 'Lib.Services.IRepository`1[App.Data.School]' while attempting to activate 'App.Services.DataSeeder'.\r\n\r\nAny ideas?"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"6622680445","Type":"IssuesEvent","CreatedAt":"2017-09-22T01:37:42","Actor":"jkotalik","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/928","RelatedDescription":"Opened issue \"Flaky Test: ServerSentEventsTransportTests.SSETransportStopsSendAndReceiveLoopsWhenTransportStopped\" (#928) at aspnet/SignalR","RelatedBody":"Stack trace:\r\n\r\n```\r\nFailed   Microsoft.AspNetCore.SignalR.Client.Tests.ServerSentEventsTransportTests.SSETransportStopsSendAndReceiveLoopsWhenTransportStopped\r\nError Message:\r\n System.TimeoutException : Operation in SSETransportStopsSendAndReceiveLoopsWhenTransportStopped timed out at /Users/travis/build/aspnet/SignalR/test/Microsoft.AspNetCore.SignalR.Client.Tests/ServerSentEventsTransportTests.cs:117\r\nStack Trace:\r\n   at Microsoft.AspNetCore.SignalR.Tests.Common.TaskExtensions.<OrTimeout>d__2.MoveNext() in /Users/travis/build/aspnet/SignalR/test/Common/TaskExtensions.cs:line 29\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.SignalR.Client.Tests.ServerSentEventsTransportTests.<SSETransportStopsSendAndReceiveLoopsWhenTransportStopped>d__1.MoveNext() in /Users/travis/build/aspnet/SignalR/test/Microsoft.AspNetCore.SignalR.Client.Tests/ServerSentEventsTransportTests.cs:line 117\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```"},{"Id":"6622547027","Type":"PullRequestEvent","CreatedAt":"2017-09-22T00:36:52","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/927","RelatedDescription":"Merged pull request \"add names to EventIds used by logger extensions\" (#927) at aspnet/SignalR","RelatedBody":"fixes #876 "},{"Id":"6622547026","Type":"IssuesEvent","CreatedAt":"2017-09-22T00:36:52","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/876","RelatedDescription":"Closed issue \"Use names in EventIds for logging\" (#876) at aspnet/SignalR","RelatedBody":"In https://github.com/aspnet/SignalR/blob/11cc57ee0e4ebc38c2cf5877b1df19e4e686f446/src/Microsoft.AspNetCore.SignalR.Client.Core/Internal/SignalRClientLoggerExtensions.cs we use `int`s for the `eventId` parameter, but the `EventId` type that is used can actually also support holding a name. Names are easier to query and inspect in structure log storage. So, as an example, a `LoggerMessage.Define` should change to something like this:\r\n\r\n```csharp\r\nLoggerMessage.Define<...>(LogLevel.Trace, new EventId(1, \"[Event Name]\", \"Preparing blocking invocation '{invocationId}' of '{target}', with return type '{returnType}' and {argumentCount} argument(s).\");\r\n```\r\n\r\n(Event ID names don't need a prefix because `EventId` is only unique within a Logger, so there's no need to prefix it)."},{"Id":"6622272777","Type":"PullRequestEvent","CreatedAt":"2017-09-21T22:46:44","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/927","RelatedDescription":"Opened pull request \"add names to EventIds used by logger extensions\" (#927) at aspnet/SignalR","RelatedBody":"fixes #876 "},{"Id":"6622228855","Type":"PullRequestEvent","CreatedAt":"2017-09-21T22:32:08","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/926","RelatedDescription":"Opened pull request \"camelCasing objects serialized by JsonHubProtocol\" (#926) at aspnet/SignalR","RelatedBody":"Fixes: #859"},{"Id":"6621979535","Type":"IssuesEvent","CreatedAt":"2017-09-21T21:19:55","Actor":"muratg","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/894","RelatedDescription":"Closed issue \"Bring back progress support\" (#894) at aspnet/SignalR","RelatedBody":"I'd like to see:\r\n\r\n- [ ] Progress message definitions in the protocol, possibly as a special case of streaming.\r\n- [ ] `IProgress` support for .NET server and client.\r\n- [ ] A library that provides progress support for the JavaScript client.\r\n"},{"Id":"6621965906","Type":"IssuesEvent","CreatedAt":"2017-09-21T21:16:32","Actor":"muratg","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/911","RelatedDescription":"Closed issue \"IIS Reverse Proxy\" (#911) at aspnet/SignalR","RelatedBody":"How do you reverse proxy ws channel ?\r\n\r\nI have a standalone kestrel running aspnetcore webapi + IIS in front, doing reverse proxy. With the old signalr there was an outbound rule to rewrite, but what's the case with new signalr ?\r\n\r\nJS console is clean for a while. Saying it's connected, but no single frame is moving. After a while you can notice: \r\nWebSocket connection to 'ws://endpoint/virtual-dir/myhub?id=942b7d3c-64ed-461c-b59c-1d4912c11b6e' failed: Invalid frame header\r\n\r\n```\r\n            <rules>\r\n                <rule name=\"ReverseProxyInboundRule1\" stopProcessing=\"true\">\r\n                    <match url=\"(.*)\" />\r\n                    <action type=\"Rewrite\" url=\"http://localhost:5000/{R:1}\" />\r\n                </rule>\r\n            </rules>\r\n```\r\n\r\nRemoving reverse proxy and everything works nicely.\r\n"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"6622599481","Type":"IssuesEvent","CreatedAt":"2017-09-22T01:01:10","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6872","RelatedDescription":"Opened issue \"ApiDescription requires a way to represent OperationId\" (#6872) at aspnet/Mvc","RelatedBody":"Essentially a stable name that is inferred from the controller \\ action name."},{"Id":"6622356684","Type":"PullRequestEvent","CreatedAt":"2017-09-21T23:17:07","Actor":"javiercn","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/6857","RelatedDescription":"Merged pull request \"Update WebApplicationTestFixture.cs\" (#6857) at aspnet/Mvc","RelatedBody":"removed duplicated code"},{"Id":"6622152305","Type":"IssuesEvent","CreatedAt":"2017-09-21T22:07:24","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6771","RelatedDescription":"Closed issue \"FileExtension localization problem\" (#6771) at aspnet/Mvc","RelatedBody":"_From @Stefanone91 on September 1, 2017 9:9_\n\nHello everyone,\r\nI'm trying to localize the error message of \"FileExtension\" attribute but it seems not working.\r\nI've successfully implemented the localization for \"Required\" attribute as explained in the official ASP.NET core guide.\r\nI've created a simple project to reproduce the issue:\r\nInside the \"registration\" page i've added an input elemente for file upload wich is linked to RegisterViewModel, containing the \"Immagine\" IFormFile variable.\r\nThis IFormFile has the Required attribute and the FileExtension attribute. They are working well but not the translation of FileExtension's ErrorMessage .\r\n\r\nLink to GIT:\r\nhttps://github.com/Stefanone91/LocalizationFileSizeIssue\n\n_Copied from original issue: aspnet/Localization#412_"},{"Id":"6622150109","Type":"PullRequestEvent","CreatedAt":"2017-09-21T22:06:45","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/6860","RelatedDescription":"Merged pull request \"Fixed FileExtensionsAttributeAdapter to trim(whitespaces, dot charact…\" (#6860) at aspnet/Mvc","RelatedBody":"…er) and lowercase the extensions\r\n\r\nFollow-up PR for this: https://github.com/aspnet/jquery-validation-unobtrusive/pull/70#discussion_r139861551"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"6620469682","Type":"IssuesEvent","CreatedAt":"2017-09-21T15:38:34","Actor":"NinoFloris","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1440","RelatedDescription":"Opened issue \"Why isn't the normalized name used when adding roles to the claimsidentity?\" (#1440) at aspnet/Identity","RelatedBody":"https://github.com/aspnet/Identity/blob/eb3ff7fc32dbfff65a1ba6dfdca16487e0f6fc41/src/Microsoft.Extensions.Identity.Core/UserClaimsPrincipalFactory.cs#L143\r\n\r\nAs `ClaimsPrincipal.IsInRole()` calls down to `ClaimsIdentity.HasClaim()` which uses an Ordinal comparison on the value it seems logical to save the normalized name for the role. Or if it's important to be able to display the original name to return a version of ClaimsIdentity that has an overridden `HasClaim` method with an OrdinalIgnoreCase comparison, perhaps just for the default role type."},{"Id":"6616480418","Type":"IssuesEvent","CreatedAt":"2017-09-20T20:23:21","Actor":"NinoFloris","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1439","RelatedDescription":"Opened issue \"Why are all the Get...Store functions private or don't check Supports...Store\" (#1439) at aspnet/Identity","RelatedBody":"Flabbergasted by this, as to disable a piece of functionality on a manager now requires much more overrides compared to overriding just the one method and throwing unconditionally.\r\n\r\nI see more of these flaws in places where we'd like to take away or slightly remold functionality. Take for instance the idea of the feature interfaces for stores. The stores are great as we don't want to fully create the stores functionality ourselves and we like the idea of using interfaces to detect which features are supported. Problem with it though is the combination of those two are very hard on library users as we can't take away an interface once implemented. Which as they're all already implemented on all the supplied stores (base and inherits) is a problem... Now we have to choose, do we want reusability or a nice fit for our project's supported set.\r\n\r\nExample below to disable user claims as we ignore that entity in the dbcontext modelbuilder (we have our own solution for it):\r\n![screen shot 2017-09-20 at 22 15 05](https://user-images.githubusercontent.com/4218809/30665458-5a751448-9e51-11e7-88bc-1d7f3121b31f.png)\r\n"},{"Id":"6616176089","Type":"PullRequestEvent","CreatedAt":"2017-09-20T19:10:48","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/pull/1137","RelatedDescription":"Closed pull request \"Fixed see reference\" (#1137) at aspnet/Identity","RelatedBody":"<see name=\"SignInResult\"/> -> <see cref=\"SignInResult\"/>"},{"Id":"6615908051","Type":"PullRequestEvent","CreatedAt":"2017-09-20T18:10:24","Actor":"ryanbrandenburg","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1438","RelatedDescription":"Opened pull request \"Update bootstrappers\" (#1438) at aspnet/Identity","RelatedBody":null}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"6622392524","Type":"IssuesEvent","CreatedAt":"2017-09-21T23:31:08","Actor":"muratg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2048","RelatedDescription":"Closed issue \"ConnectionResetException \" (#2048) at aspnet/KestrelHttpServer","RelatedBody":"**Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.ConnectionResetException handled at System.Net.WebSockets.ManagedWebSocket+d__61.MoveNext** \r\n\r\nI'm constantly getting this exception ReceiveAsyncPrivate method. Basically all websocket connections eventually fail due to this exception after some minutes. I'm hosting on aspnetcore 2.0 on Azure WebApp. "},{"Id":"6622274344","Type":"IssuesEvent","CreatedAt":"2017-09-21T22:47:18","Actor":"muratg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2058","RelatedDescription":"Closed issue \"Performance issue with .net core\" (#2058) at aspnet/KestrelHttpServer","RelatedBody":"_From @chintan3100 on September 5, 2017 8:39_\n\nI am downloading 400 MB file on local machine with 7 MB/Second (.net core 2.0) same code run with .net framework 4.6 download speed 100 MB/Second.\r\n\r\n  public IActionResult DownloadDocument(Guid documentUniqueId)\r\n        {\r\n            var bytes = System.IO.File.OpenRead(@\"D:\\home\\site\\wwwroot\\file\\Organizer01_2017-09-03 (14) (3).zip\");\r\n            return File(bytes, \"application/octet-stream\");\r\n\r\n}\r\n File size 400 MB .  API on local system. FIle on local system\r\n\n\n_Copied from original issue: aspnet/Home#2186_"},{"Id":"6622155818","Type":"PullRequestEvent","CreatedAt":"2017-09-21T22:08:30","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2081","RelatedDescription":"Closed pull request \"Remove explicit LangVersion\" (#2081) at aspnet/KestrelHttpServer","RelatedBody":"This is now set globally to 7.1: aspnet/BuildTools#408"},{"Id":"6622076879","Type":"PullRequestEvent","CreatedAt":"2017-09-21T21:45:43","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2081","RelatedDescription":"Opened pull request \"Remove explicit LangVersion\" (#2081) at aspnet/KestrelHttpServer","RelatedBody":"This is now set globally to 7.1: aspnet/BuildTools#408"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"6622461742","Type":"IssuesEvent","CreatedAt":"2017-09-21T23:59:45","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/1696","RelatedDescription":"Opened issue \"Create a VS for Mac Plugin for Razor binaries.\" (#1696) at aspnet/Razor","RelatedBody":""},{"Id":"6622149539","Type":"IssuesEvent","CreatedAt":"2017-09-21T22:06:35","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1586","RelatedDescription":"Closed issue \"Autocompletion gets in the way\" (#1586) at aspnet/Razor","RelatedBody":"VS 15.3.0 Preview 6\r\n\r\n1. You want to add `else` branch:\r\n![untitled1](https://user-images.githubusercontent.com/10546952/28746942-44c0e490-748c-11e7-9119-d7eb26039338.png)\r\nSo you start typing `else`:\r\n![untitled2](https://user-images.githubusercontent.com/10546952/28746951-712441da-748c-11e7-9944-2ac663d1e941.png)\r\nAnd press Enter for new line:\r\n![untitled3](https://user-images.githubusercontent.com/10546952/28746963-a38c4e4c-748c-11e7-8f09-d9a420b836d4.png)\r\n\r\n2. You want to add `@foreach (...)`:\r\n![untitled4](https://user-images.githubusercontent.com/10546952/28746982-f480a762-748c-11e7-8a31-49d5caef236c.png)\r\nSo you start typing `foreach`:\r\n![untitled5](https://user-images.githubusercontent.com/10546952/28747002-3bb8e720-748d-11e7-975f-10a3bac21650.png)\r\nAnd press space for the space before opening parenthesis:\r\n![untitled6](https://user-images.githubusercontent.com/10546952/28747006-66ded3ba-748d-11e7-8b06-9d0a0a72a9dd.png)\r\n\r\n"},{"Id":"6622143569","Type":"IssuesEvent","CreatedAt":"2017-09-21T22:04:43","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1686","RelatedDescription":"Closed issue \"Error: Invalid name for a preprocessing symbol; '' is not a valid identifier\" (#1686) at aspnet/Razor","RelatedBody":"I have recently migrated from ASP.NET Core 1.1.X to ASP.NET Core 2,  when I run my app locally everything works fine, but when running on Azure App Service I receive the following error on Razor Compilation:\r\n\r\n```\r\nAn error occurred during the compilation of a resource required to process this request. Please review the following specific error details and modify your source code appropriately.\r\n\r\nInvalid name for a preprocessing symbol; '' is not a valid identifier\r\n#pragma checksum \"D:\\home\\site\\wwwroot\\Views\\Register\\Index.cshtml\" \"{ff1816ec-aa5e-4d10-87f7-6f4963833460}\" \"3683385b8f60453d746a40cc4d8b7a6f260ae5ca\"\r\n```\r\n\r\nI tried to find a solution but couldn't find any,\r\nCan anyone help me?\r\n\r\nThank you"},{"Id":"6622097637","Type":"IssuesEvent","CreatedAt":"2017-09-21T21:51:26","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1045","RelatedDescription":"Closed issue \"Unable to hit enter after @addTagHelper directive\" (#1045) at aspnet/Razor","RelatedBody":"This is a weird one. The editor basically acts as if the enter key doesn't work immediately following this helper.\r\n\r\nVS 2017 Build: 15.0.0+26288.0\r\nRepo: https://github.com/MiniProfiler/dotnet/\r\nFile: [samples/Samples.AspNetCore/Views/Shared/_Layout.cshtml](https://github.com/MiniProfiler/dotnet/blob/4270b7fb8756a4284702d6f63069e7089945a428/samples/Samples.AspNetCore/Views/Shared/_Layout.cshtml)\r\n\r\nWhen adding a directive like this (no quotes):\r\n```c#\r\n@addTagHelper *, MiniProfiler.AspNetCore.Mvc\r\n```\r\nIf your cursor is at the end of the line right after the `c`, the enter key just doesn't work. It has no effect, no new line is inserted. The key command goes into a black hole of an uncaring cosmos never to return.\r\n\r\n#### Workarounds\r\n- Add a space, then hit enter\r\n- Use the quoted form: `@addTagHelper \"*, MiniProfiler.AspNetCore.Mvc\"`\r\n\r\nApologies if this is a duplicate, I couldn't find anything on it and just came across it today."},{"Id":"6622093854","Type":"IssuesEvent","CreatedAt":"2017-09-21T21:50:22","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1154","RelatedDescription":"Closed issue \"Razor Language Service does not highlight TagHelpers for pre-opened Razor files.\" (#1154) at aspnet/Razor","RelatedBody":"If you close a solution while having a Razor file (that has TagHelpers) open; re-open it, the TagHelper highlighting will not re-light up.\r\n\r\nReproduction steps provided by a customer:\r\n\r\nI can consistently reproduce the issue on a new project\r\n-\tOpen VS, create a new ASP.NET Core app with the MVC template.\r\n-\tOpen _Layout.cshtml: now I see the purple tags of environment, link, and attributes asp-controller, etc... and I get Intellisense if I type new taghelpers\r\n-\tClose solution, open it again. Now I get the last file I had open _Layout.cshtml: all is gone\r\n-\tIf I close and reopen the file I get taghelper Intellisense\r\n-\tSame happens if I closed the file before closing the solution. First time I open doesn’t work. Close and reopen, it shows\r\n\r\n\r\n@ToddGrun @alexgav This is probably on the editor side of things but might also exist on our side. I filed the issue here for now until we can determine which is at fault."},{"Id":"6621730498","Type":"PullRequestEvent","CreatedAt":"2017-09-21T20:20:38","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1695","RelatedDescription":"Opened pull request \"[Design] Added support for minimized boolean bound tag helper attributes\" (#1695) at aspnet/Razor","RelatedBody":"#431 \r\n\r\nAdded support for both `bool` and `Dictionary<*, bool>` types.\r\nHave not added support for `bool?`."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6585749309","Type":"IssuesEvent","CreatedAt":"2017-09-13T14:57:15","Actor":"davidfowl","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/270","RelatedDescription":"Closed issue \"Model does not serialize to the camelCase by default\" (#270) at aspnet/Announcements","RelatedBody":"I am returning a data of the IEnumerable type as a Model of View. And I wait for that a Model has will properties with camelCase formatting as when getting a data from WebApi controller."},{"Id":"6585739204","Type":"IssuesEvent","CreatedAt":"2017-09-13T14:55:30","Actor":"jsdmitry","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/270","RelatedDescription":"Opened issue \"Model does not serialize to the camelCase by default\" (#270) at aspnet/Announcements","RelatedBody":"I am returning a data of the IEnumerable type as a Model of View. And I wait for that a Model has will properties with camelCase formatting as when getting a data from WebApi controller."},{"Id":"6504000070","Type":"IssuesEvent","CreatedAt":"2017-08-23T19:03:38","Actor":"jbagga","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/269","RelatedDescription":"Opened issue \"ExpandoObjectAdapter does not assume case insensitivity\" (#269) at aspnet/Announcements","RelatedBody":"When applying a json patch to `ExpandoObject`s, case insensitive search will not be used to match the path segment to the object's dictionary keys. Instead, the path segment will be resolved using the `NamingStrategy` defined in the `IContractResolver`.\r\n\r\nAddresses https://github.com/aspnet/JsonPatch/issues/102\r\n\r\nSee https://github.com/aspnet/JsonPatch/issues/103 for discussion\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"906146139933638658","CreatedAt":"2017-09-08T13:24:09+00:00","UserScreenname":"aspnet","Text":"Getting Started with Windows Containers https://t.co/8twiZLlB5H","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":50,"FavoriteCount":26,"RawContent":null},{"Id":"897126323298209792","CreatedAt":"2017-08-14T16:02:37+00:00","UserScreenname":"aspnet","Text":"Announcing ASPNet Core 2.0 - https://t.co/5RTzwS9Ym2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":193,"FavoriteCount":158,"RawContent":null}]}},"RunOn":"2017-09-22T05:30:08.0317553Z","RunDurationInMilliseconds":6238}