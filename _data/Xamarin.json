{"Data":{"Blog":{"FeedItems":[{"Title":"Watch the .NET Conf Live!","PublishedOn":"2018-09-10T19:35:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The 3-day virtual developer conference co-organized by the .NET community and Microsoft is finally here! Now the question is how and where to watch the .NET Conf which will be completely...","Href":"https://blog.xamarin.com/watch-the-net-conf-live/","RawContent":null},{"Title":"Using Object Detection from inside your Xamarin app","PublishedOn":"2018-09-06T18:24:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Cognitive Services provide a great way to get started with AI without being a machine learning or data science expert. A common favorite of cognitive services is the Custom Vision Service....","Href":"https://blog.xamarin.com/using-object-detection-from-inside-your-xamarin-app/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in September","PublishedOn":"2018-08-31T16:42:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin and .NET developer events this September: September 10: Los Angeles, CA. USA &#124; Los Angeles .NET Developers Group: LADOTNET &#8211; The Architectural Mindset by Jeremy Cameron September...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-september/","RawContent":null},{"Title":"Using the New Xamarin.Forms Controls Toolbox","PublishedOn":"2018-08-24T14:03:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms empowers you to deliver the same experience to multiple platforms. Using a set of UI elements abstracted from common mobile app controls, like text inputs and buttons, you can quickly...","Href":"https://blog.xamarin.com/using-new-xamarin-forms-controls-toolbox/","RawContent":null},{"Title":"Getting Started with Android Pie","PublishedOn":"2018-08-21T20:19:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Google recently released Android Pie for developers to enhance their apps and build new experiences with. Previously, Microsoft released an Android 9.0 Preview for Xamarin.Android and as of today, you...","Href":"https://blog.xamarin.com/android-pie-preview-getting-started/","RawContent":null},{"Title":"Exploring New iOS 12 ARKit Capabilities With Xamarin","PublishedOn":"2018-08-20T20:04:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s summertime, which for Xamarin developers means new iOS betas to explore and learn. ARKit, which debuted last year in iOS 11, has matured over the past year and in iOS 12 is much more...","Href":"https://blog.xamarin.com/exploring-new-ios-12-arkit-capabilities-with-xamarin/","RawContent":null},{"Title":"Attend A .NET Conf Event Near You!","PublishedOn":"2018-08-15T20:29:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you have not yet heard of the .NET Conf, it is a FREE, 3-day virtual developer event co-organized by the .NET community and Microsoft. There is a wide selection of live sessions with feature...","Href":"https://blog.xamarin.com/attend-a-net-conf-event-near-you/","RawContent":null},{"Title":"Preview: iOS 12 development with Xamarin","PublishedOn":"2018-08-10T16:30:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The latest Xamarin preview release supports Xcode 10 beta 5, which includes beta SDKs for iOS 12, macOS Mojave (10.14), watchOS 5, and tvOS 12. Get Started With New iOS 12 APIs Today: iOS 12 includes...","Href":"https://blog.xamarin.com/preview-ios-12-development-with-xamarin/","RawContent":null},{"Title":"Securing network traffic with TLS 1.2","PublishedOn":"2018-08-07T15:58:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Secure and encrypted network communications are a crucial part of mobile application development. Without some kind of security around the communication layer, it is trivial for a third party to...","Href":"https://blog.xamarin.com/securing-network-traffic-with-tls-1-2/","RawContent":null},{"Title":"Adaptive Mobile Designs with FlexLayout","PublishedOn":"2018-08-03T17:33:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms is fantastic for quickly shipping a single code base to multiple platforms and devices. As soon as you are present on all those different screens, you need to make sure your UI looks as...","Href":"https://blog.xamarin.com/adaptive-mobile-designs-with-flexlayout/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8257321460","Type":"PullRequestEvent","CreatedAt":"2018-09-13T04:16:28","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2180","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Add coded error for armeabi\" (#2180) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/2173\r\nContext: https://github.com/xamarin/xamarin-android/pull/2106\r\n\r\nThis commit checks for the presence of the now unsupported armeabi architecture in the `$(AndroidSupportedAbis)` property by using a conditional error in a new target.  Another option could be to to change the error to a warning and *ignore* the \";armeabi;\" substring in the\r\nproperty.  But that seems a little risky for cases where users might not notice the warning.  They would probably be surprised later when they discovered that their APKs did not contain armeabi support.\r\n\r\nI also debated on whether it would be better to move this check into the `BuildApk` task.  I decided that since it is just a small test to look for a substring in an MSBuild property, using a conditional `Error` task in a small new target seems fine.\r\n\r\nI verified that this new error appears in the build output as desired if the `$(AndroidSupportedAbis)` property includes \"armeabi\" either by itself or at the beginning, middle, or end of a list.  I also verified that the error does *not* appear and that the `SignAndroidPackage` target completes successfully when the property is set to \"armeabi-v7a;x86\"."},{"Id":"8250461710","Type":"PullRequestEvent","CreatedAt":"2018-09-12T02:54:12","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2157","RelatedDescription":"Merged pull request \"[Mono.Android] build and reference non-PCL Java.Interop\" (#2157) at xamarin/xamarin-android","RelatedBody":"Fixes: http://work.devdiv.io/667174\r\n\r\nContext: https://github.com/xamarin/java.interop/commit/893562cb6b02031c5991ec94769db5fd1a88b53e\r\nContext: https://github.com/xamarin/java.interop/commit/659711c77407c95a27b58ff6f2c84c9fe6db0691\r\nContext: https://github.com/xamarin/java.interop/compare/b873e81...9b390bc\r\n\r\nBumped to java.interop/d15-9/9b390bc\r\n\r\nBuild `lib\\xamarin.android\\xbuild-frameworks\\MonoAndroid\\v1.0\\Java.Interop.dll`\r\nas a `MonoAndroid`-profile assembly instead of as a PCL assembly.\r\nThis decreases the assemblies referenced in a \"Hello World\"\r\nXamarin.Android project dramatically; this:\r\n\r\n\tAdding assembly reference for Java.Interop, Version=0.1.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065, recursively...\r\n\t    Adding assembly reference for System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.ComponentModel.Composition, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, recursively...\r\n\t    Adding assembly reference for System.Diagnostics.Debug, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Threading, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Collections, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Collections.Concurrent, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Reflection, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Linq.Expressions, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Reflection.Primitives, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Dynamic.Runtime, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.ObjectModel, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Linq, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Runtime.InteropServices, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Runtime.Extensions, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Reflection.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\tAdding assembly reference for Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065, recursively...\r\n\r\nnow becomes:\r\n\r\n\tAdding assembly reference for Java.Interop, Version=0.1.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065, recursively...\r\n\tAdding assembly reference for Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065, recursively...\r\n\r\nBecause fewer assemblies need to be resolved, the `Rebuild` target\r\ntimes improve by 30%-50% for the \"Hello World\" app:\r\n\r\n  - `Debug` + PCL:            8.424s\r\n  - `Debug` + *not* PCL:      4.258s (~50% faster!)\r\n  - `Release` + PCL:         13.651s\r\n  - `Release` + *not* PCL:    9.487s (~30% faster!)\r\n\r\nThe `lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Java.Interop.dll`\r\ncopy used by `Xamarin.Android.Build.Tasks.dll` remains unchanged, as\r\nit is referenced by `Xamarin.Android.Build.Tasks.csproj`."},{"Id":"8250004318","Type":"IssuesEvent","CreatedAt":"2018-09-12T00:13:29","Actor":"tajinder95","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2179","RelatedDescription":"Opened issue \"Issue in using JNI to call activity from android AAR file\" (#2179) at xamarin/xamarin-android","RelatedBody":"Hi I am facing using AAR file in xamarin android project . I have added android AAR file in my xamarin android and set its build type to \"AndroidAarLibrary\" .Following is c# code used in xamarin to call activity that is defined in AAR file.\r\n\r\nvar clsName = Java.Lang.Class.ForName(\"com.dsphotoeditor.sdk.activity.DsPhotoEditorActivity\");\r\nvar innt = new Intent(this, clsName);\r\ninnt.SetData(inputImageUri); //Set image uri\r\ninnt.PutExtra(\"ds_photo_editor_api_key\", \"26c479d17c220131bec7b6e29e070ad89f3e6cf4\");\r\ninnt.PutExtra(\"ds_photo_editor_output_directory\", \"ds_photo_editor_sample\");\r\nStartActivityForResult(innt, DS_PHOTO_EDITOR_REQUEST_CODE);\r\n\r\nNow corresponding activity is called successfully and UI showing image editor property. But when clicking filter options in UI then it throw error and application gets closed with follwing error message:\r\n\r\nCheckJNI: method to register \"rsnScriptReduce\" not in the given class. This is slow, consider changing your RegisterNatives calls.\r\nFailed to register native method android.support.v8.renderscript.RenderScript.rsnScriptReduce(JJI[JJ[I)V in /data/app/mono.samples.jnitest-1/base.apk\r\n ----- class 'Landroid/support/v8/renderscript/RenderScript;' cl=0x32c07070 -----\r\n\r\nI think some classes not included while apk generation or not accessible. Please let me know if I am doing anything or if anyone have used this approach before.\r\nThis is google drive link to corresponding xamarin project https://drive.google.com/open?id=13r5FPLhbf75ERBqJI858kubmVARitZ74\r\n\r\nLink of full log file of xamarin output : https://drive.google.com/open?id=1doDkuUR7P25TfBfGz_QHn3m_TsGQ3MNo\r\n\r\nNote:I am want to use photo-editor AAR library from https://www.dsphotoeditor.com"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8257331815","Type":"PullRequestEvent","CreatedAt":"2018-09-13T04:20:47","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2795","RelatedDescription":"Merged pull request \"Add TabStop/TabIndex\" (#2795) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdded support TabStop/TabIndex for `UWP`, `WPF`, `iOS`, `Mac` and `Android` platforms.\r\n\r\n**Screencasts:**\r\nUWP http://recordit.co/InFP4NqQAv\r\nWPF http://recordit.co/4vYd0GhOFQ\r\nAndroid http://recordit.co/qwsSribcQ5\r\niOS http://recordit.co/iOuy2RvwP3\r\n\r\n### Bugs Fixed ###\r\n\r\nFixes #1398\r\nFixes #1700\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n - bool Button.TabStop { get; set; } //Bindable Property\r\n - int Button.TabIndex { get; set; } // Bindable Property\r\n - bool DatePicker.TabStop { get; set; } //Bindable Property\r\n - int DatePicker.TabIndex { get; set; } // Bindable Property\r\n - bool Editor.TabStop { get; set; } //Bindable Property\r\n - int Editor.TabIndex { get; set; } // Bindable Property\r\n - bool Entry.TabStop { get; set; } //Bindable Property\r\n - int Entry.TabIndex { get; set; } // Bindable Property\r\n - bool InputView.TabStop { get; set; } //Bindable Property\r\n - int InputView.TabIndex { get; set; } // Bindable Property\r\n - bool NavigationPage.TabStop { get; set; } //Bindable Property\r\n - int NavigationPage.TabIndex { get; set; } // Bindable Property\r\n - bool Picker.TabStop { get; set; } //Bindable Property\r\n - int Picker.TabIndex { get; set; } // Bindable Property\r\n - bool ProgressBar.TabStop { get; set; } //Bindable Property\r\n - int ProgressBar.TabIndex { get; set; } // Bindable Property\r\n - bool SearchBar.TabStop { get; set; } //Bindable Property\r\n - int SearchBar.TabIndex { get; set; } // Bindable Property\r\n - bool Slider.TabStop { get; set; } //Bindable Property\r\n - int Slider.TabIndex { get; set; } // Bindable Property\r\n - bool Stepper.TabStop { get; set; } //Bindable Property\r\n - int Stepper.TabIndex { get; set; } // Bindable Property\r\n - bool Switch.TabStop { get; set; } //Bindable Property\r\n - int Switch.TabIndex { get; set; } // Bindable Property\r\n - bool TabbedPage.TabStop { get; set; } //Bindable Property\r\n - int TabbedPage.TabIndex { get; set; } // Bindable Property\r\n - bool TimePicker.TabStop { get; set; } //Bindable Property\r\n - int TimePicker.TabIndex { get; set; } // Bindable Property\r\n\r\n### Behavioral Changes ###\r\n\r\nAdded `TabStop` & `TabIndex` properties.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"8257331809","Type":"IssuesEvent","CreatedAt":"2018-09-13T04:20:47","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1700","RelatedDescription":"Closed issue \"[Enhancement] Desktop: TabStop/TabIndex support (for multiple Views)\" (#1700) at xamarin/Xamarin.Forms","RelatedBody":"## Rationale\r\n\r\nCurrently there is no way to  influence the tab stop behaviors on UWP. Seeing as how there are a lot of UWP controls that have this property it's very tedious to implement this across all desired elements\r\n\r\n## Implementation\r\n\r\nAdd IsTabStopProperty and TabIndexProperty to all applicable Forms controls.  IsTabStop and TabIndex are properties of Windows.UI.Xaml.Controls.Control  so all XamarinForms elements that map to a Control in UWP will need these properties added\r\n\r\n- InputView (covers Entry, Editor)\r\n- DatePicker\r\n- Button\r\n- ComboBox / Picker\r\n- CommandBar? so adding to NavigationPage\r\n- TabbedPage\r\n- ProgresBar\r\n- SearchBar\r\n- Slider\r\n- Stepper\r\n- Switch \r\n- TextCell\r\n- TimePicker\r\n- Anything I forgot?\r\n\r\n```csharp\r\npublic static readonly BindableProperty IsTabStopProperty = BindableProperty.Create(nameof(IsTabStop), typeof(bool), typeof(<view adding to>), false);\r\n\r\npublic static readonly BindableProperty TabIndexProperty = BindableProperty.Create(nameof(TabIndex), typeof(int), typeof(<view adding to>), 0);\r\n```\r\n\r\nPossibly surface the TabFocusNavigation property as well\r\n```csharp\r\n    public enum KeyboardNavigationMode\r\n    {\r\n        //\r\n        // Summary:\r\n        //     Tab indexes are considered on the local subtree only inside this container.\r\n        Local = 0,\r\n        //\r\n        // Summary:\r\n        //     Focus returns to the first or the last keyboard navigation stop inside of a container\r\n        //     when the first or last keyboard navigation stop is reached.\r\n        Cycle = 1,\r\n        //\r\n        // Summary:\r\n        //     The container and all of its child elements as a whole receive focus only once.\r\n        Once = 2\r\n    }\r\n\r\nControl.On<Windows>().SetTabFocusNavigation(KeyboardNavigationMode)\r\n\r\n\r\n```\r\n\r\n## Expected Result\r\n\r\n### Android\r\nHas \r\n```\r\nandroid:nextFocusLeft \r\nandroid:nextFocusDown\r\n```\r\n\r\nCorrelating this to TabIndex could prove difficult\r\n\r\n### iOS\r\nDoesn't appear to exist easily. Would need to attach to the tab keyboard command and manually set first responder  \r\n\r\n### UWP\r\nMap the property from the Forms element to the applicable UWP control\r\n\r\n## Implications for CSS\r\n## Backward Compatibility\r\nThird party renderers may need to be updated to ensure that this functionality is supported through the new official mechanism. Further we will need to be careful to code the changes to the renderers in a careful manner to ensure that if someone is already using an effect support this feature that the effect is as best as possible not broken by our changes.  \r\n\r\n## Difficulty : Medium\r\nThis task overall shouldn't be very difficult. Just a lot of places to get applied into UWP "},{"Id":"8257331806","Type":"IssuesEvent","CreatedAt":"2018-09-13T04:20:47","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1398","RelatedDescription":"Closed issue \"Proposal: Keyboard (tab) navigation\" (#1398) at xamarin/Xamarin.Forms","RelatedBody":"## Summary\r\nAdd support for navigating to and from controls (mainly input controls in practice, but any control can be supported in theory) using the Tab key on the keyboard. This would be done using the platform-specific tab-navigation functionality (e.g. `nextKeyView` on Cocoa). This would only be applicable for desktop platforms (WPF/GTK/MacOS).\r\n\r\n## API Changes\r\n\r\nI would suggest the following additions:\r\n\r\n```csharp\r\npublic class View {\r\n    // I'm not sure if these should be bindable properties or not.\r\n    public int TabIndex { get; set; }\r\n    public bool TabVisible { get; set; }\r\n}\r\n```\r\n\r\nIf `TabVisible == false`, then the control should be ignored by the tab-navigation infrastructure (and the `TabIndex` value is also ignored). The controls should be tabbed through in ascending order of `TabIndex`, wrapping around to the beginning once the end of the list is reached.\r\n\r\nIf a `Layout` or subclass thereof has `TabVisible == true`, then the behavior changes slightly. The layout itself is not placed into the tab order; rather, the platform subsystem makes it so that the direct child of the layout that has the lowest `TabIndex` (and `TabVisible == true`) is placed after the previous sibling of the `Layout` in tab-order; and the direct child of the layout with the highest `TabIndex` (and `TabVisible == true`) would be placed before the next sibling of the `Layout` in tab-order. The intent is that tab navigation can go \"into\" and \"out of\" the layout container without any impact to the user.\r\n\r\nIf a control has `IsVisible == false`, then it should be skipped by the tabbing mechanism (although I'm pretty sure that the platforms already do that for us).\r\n\r\nOn mobile platforms (where tab navigation generally makes no sense), the existence and values of these two properties should be silently ignored.\r\n\r\n## Intended Use Case\r\nTo enable programmer-controllable tabbing back and forth between input controls (and possibly others as well) on desktop platforms.\r\n\r\n## Notes\r\nThis is my first time proposing a change to the Xamarin.Forms core. In addition, I'm pretty sure that there is no way to accomplish this without modifying the core itself. (I could in theory vendor the platform libraries into my solution and modify them, making them reference an additional assembly containing the XAML-visible code, but then the common code might as well go into the core anyway.) If there is a way to accomplish this without modifying the core, please let me know; I have not been able to find any. Thanks!"},{"Id":"8257217727","Type":"IssuesEvent","CreatedAt":"2018-09-13T03:36:23","Actor":"rredoh","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3775","RelatedDescription":"Opened issue \"Nested Tabbed Page\" (#3775) at xamarin/Xamarin.Forms","RelatedBody":"Hi, could you please check [this](https://github.com/PrismLibrary/Prism/issues/1539)? Thanks :)"},{"Id":"8256851379","Type":"PullRequestEvent","CreatedAt":"2018-09-13T01:25:51","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3774","RelatedDescription":"Opened pull request \"[iOS] Add ability to turn off updates to native controls from another thread\" (#3774) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdded a platform specific property to iOS that allows you to direct all control layout/rendering updates to the main thread instead of to a background thread. This should be rarely needed, but in some cases, it may prevent crashes.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #1755\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n - `void On<iOS>().GetHandleControlUpdatesOnMainThread() //Platform Specific`\r\n - `bool On<iOS>().SetHandleControlUpdatesOnMainThread(true/false) //Platform Specific`\r\n\r\n### Platforms Affected ### \r\n\r\n- iOS\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nSince SkiaSharp.Views.Forms doesn't play well with our ControlGallery, you'll need to use the sample project provided in #1755 and the nuget package produced by the build.\r\n\r\n1. Get project from #1755 (CADError).\r\n2. Run project. Verify crash.\r\n3. Update Xamarin.Forms nuget package to the package created by this build.\r\n4. In `App.xaml.cs`, add `using Xamarin.Forms.PlatformConfiguration.iOSSpecific;` at the top of the file and add `On<Xamarin.Forms.PlatformConfiguration.iOS>().SetHandleControlUpdatesOnMainThread(true);` to the end of the ctor.\r\n5. Verify no crash.\r\n\r\nNote that if your connection to the remote simulator is particularly slow, you may not see the crash. I verified the crash on my device very quickly (within 10 seconds).\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8256718652","Type":"PullRequestEvent","CreatedAt":"2018-09-13T00:37:05","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3771","RelatedDescription":"Merged pull request \"Fix tests\" (#3771) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFix NRE on RenderPool  (test 3408)\r\nTry to fix some tests on android\r\n\r\n### Issues Resolved ### \r\n\r\nNone\r\n\r\n### API Changes ###\r\nNone\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n\r\n- iOS\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\nNone\r\n\r\n### Before/After Screenshots ### \r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8256005100","Type":"IssuesEvent","CreatedAt":"2018-09-12T21:14:42","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3658","RelatedDescription":"Closed issue \"System.NullReferenceException when editing XAML with Xamarin Live Reload\" (#3658) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\nWhen editing a XAML file, for instance, the background color of a ListView, with Xamarin Live Reload I get the following exception in UWP:\r\n\r\n\r\n```\r\nException thrown at 0x740DDDC2 (KernelBase.dll) in App1.UWP.exe: WinRT originate error - 0x80004003 : 'System.NullReferenceException: Object reference not set to an instance of an object.\r\n\r\nat Xamarin.Forms.Platform.UWP.ListViewRenderer.<OnCollectionChanged>b__15_0()\r\nat Xamarin.Forms.Platform.UWP.WindowsBasePlatformServices.<>c__DisplayClass2_0.<BeginInvokeOnMainThread>b__0()'.\r\n\r\nException thrown at 0x740DDDC2 (KernelBase.dll) in App1.UWP.exe: WinRT originate error - 0x80004003 : 'System.NullReferenceException: Object reference not set to an instance of an object.\r\n\r\n   at Xamarin.Forms.Platform.UWP.TaskExtensions.<>c.<WatchForError>b__2_1(Object e)\r\n   at System.Threading.WinRTSynchronizationContextBase.Invoker.InvokeCore()'.\r\n\r\nException thrown at 0x740DDDC2 (KernelBase.dll) in App1.exe: WinRT originate error - 0x80004003 : 'Object reference not set to an instance of an object.'.\r\n```\r\n\r\n### Steps to Reproduce\r\n1.  Launch UWP application with Xamarin Live Reload.\r\n2.  Edit Xaml file and save.\r\n\r\nSample XAML file:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<MasterDetailPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\r\n                  xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\r\n                  xmlns:prism=\"clr-namespace:Prism.Mvvm;assembly=Prism.Forms\"\r\n                  xmlns:local=\"clr-namespace:Northwind.Forms.Effects\"\r\n                  xmlns:behavior=\"clr-namespace:Northwind.Forms.EventToCommandBehavior\"\r\n                  prism:ViewModelLocator.AutowireViewModel=\"True\"\r\n                  x:Class=\"Northwind.Forms.Views.NorthwindMasterDetail\">\r\n    <MasterDetailPage.Master>\r\n        <ContentPage Title=\"Menu\">\r\n            <ListView BackgroundColor=\"Yellow\"  ItemsSource=\"{Binding MenuItems}\">\r\n                <ListView.Behaviors>\r\n                    <behavior:EventToCommandBehavior EventName=\"ItemSelected\" \r\n                                                     Command=\"{Binding NavigateCommand}\">\r\n                    </behavior:EventToCommandBehavior>\r\n                </ListView.Behaviors>\r\n                <ListView.ItemTemplate>\r\n                    <DataTemplate>\r\n                        <ViewCell>\r\n                            <StackLayout>\r\n                                <Label Text=\"{Binding .}\"></Label>\r\n                                <Label Text=\"{Binding .}\"></Label>\r\n                            </StackLayout>\r\n                        </ViewCell>\r\n                    </DataTemplate>\r\n                </ListView.ItemTemplate>\r\n            </ListView>\r\n        </ContentPage>\r\n    </MasterDetailPage.Master>\r\n</MasterDetailPage>\r\n\r\n```\r\n\r\nViewModel:\r\n```\r\npublic class NorthwindMasterDetailViewModel : BindableBase\r\n\t{\r\n        private DelegateCommand<SelectedItemChangedEventArgs> navigateCommand = null;\r\n        private INavigationService navigationService = null;\r\n        private ObservableCollection<string> menuItems = null;\r\n\r\n\r\n        public NorthwindMasterDetailViewModel(INavigationService navigationService)\r\n        {\r\n            this.navigationService = navigationService;\r\n            this.MenuItems = new ObservableCollection<string>(new string[] { \"Customers\",\"Products\" });\r\n            \r\n        }\r\n\r\n        public ObservableCollection<string> MenuItems {\r\n            get\r\n            {\r\n                return menuItems;\r\n            }\r\n            set\r\n            {\r\n                this.menuItems = value;\r\n            }\r\n        }\r\n\r\n\r\n        public DelegateCommand<SelectedItemChangedEventArgs> NavigateCommand {\r\n            get {\r\n                return navigateCommand ?? (navigateCommand = new DelegateCommand<SelectedItemChangedEventArgs>(async (parameter) => {\r\n                    await navigationService.NavigateAsync(parameter.SelectedItem.ToString());\r\n                }));\r\n            }\r\n        }\r\n\r\n        \r\n\t}\r\n```\r\n\r\n- IDE: Visual Studio 2017 15.8.1\r\n- Platform Target Frameworks:\r\n  - UWP:  Fall Creators Update 16299 \r\n- Nuget Packages: PRISM.Core v7.0.0.396, Xamarin Live Reload v0.3.27, Xamarin.Forms v3.1.0.697729\r\n- Affected Devices: Windows 10 Professional\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8257373920","Type":"PullRequestEvent","CreatedAt":"2018-09-13T04:38:00","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4802","RelatedDescription":"Merged pull request \"[metal] Update for Xcode 10 GM\" (#4802) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8257372939","Type":"PullRequestEvent","CreatedAt":"2018-09-13T04:37:34","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4800","RelatedDescription":"Merged pull request \"[macos][adsupport] Update for GM\" (#4800) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8257126444","Type":"PullRequestEvent","CreatedAt":"2018-09-13T03:03:20","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4799","RelatedDescription":"Merged pull request \"[watchos][watchkit] Update for GM\" (#4799) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8256986585","Type":"PullRequestEvent","CreatedAt":"2018-09-13T02:14:20","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4798","RelatedDescription":"Merged pull request \"[coreml] Update for Xcode 10 GM\" (#4798) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8256985656","Type":"PullRequestEvent","CreatedAt":"2018-09-13T02:14:01","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4797","RelatedDescription":"Merged pull request \"[arkit] Update for Xcode 10 GM\" (#4797) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8256743036","Type":"PullRequestEvent","CreatedAt":"2018-09-13T00:46:30","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4803","RelatedDescription":"Opened pull request \"[ios][coretelephony] Update for GM\" (#4803) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":89,"FavoriteCount":53,"RawContent":null},{"Id":"1037778121582419970","CreatedAt":"2018-09-06T19:02:39+00:00","UserScreenname":"xamarinhq","Text":"Get started with AI without being a machine learning or data science expert... New on the Xamarin Blog: Using Objec… https://t.co/uwpu4pUWFj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":90,"FavoriteCount":43,"RawContent":null},{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":36,"RawContent":null},{"Id":"1032375788375498753","CreatedAt":"2018-08-22T21:15:43+00:00","UserScreenname":"xamarinhq","Text":"Getting Started with Android Pie. Now you can download the support for #AndroidPie inside https://t.co/7TMjXUsU4u 9… https://t.co/sNrOIuI741","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":41,"RawContent":null},{"Id":"1031653104394096640","CreatedAt":"2018-08-20T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"Hey, Xamarin developers. It's time to explore and learn about the latest and greatest iOS 12 ARKit Capabilities w/… https://t.co/6x3vq5IuEb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":121,"FavoriteCount":78,"RawContent":null},{"Id":"1029840138099220487","CreatedAt":"2018-08-15T21:19:57+00:00","UserScreenname":"xamarinhq","Text":"Attend A #dotNETConf Event Near You - https://t.co/VrHYwnCS69\n\nIt's a FREE, 3-day virtual dev event co-organized by… https://t.co/tqMWcB8mJz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":35,"RawContent":null},{"Id":"1026898128509825024","CreatedAt":"2018-08-07T18:29:27+00:00","UserScreenname":"xamarinhq","Text":"- Authentication   - Encryption   - Integrity\n3 important requirements to securing network communications &amp; absolut… https://t.co/hDPkHLZsLA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":50,"RawContent":null},{"Id":"1025442837813518336","CreatedAt":"2018-08-03T18:06:38+00:00","UserScreenname":"xamarinhq","Text":"Want to use a single code base for multiple platforms and devices? Of course you do. ...just posted to our Xamarin… https://t.co/qJBV4vvEir","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":177,"FavoriteCount":86,"RawContent":null},{"Id":"1024752638599028736","CreatedAt":"2018-08-01T20:24:02+00:00","UserScreenname":"xamarinhq","Text":"This year’s #dotNETConf is coming 9/12-14. Live sessions w/ speakers from the community &amp; it's your chance to learn… https://t.co/Nujb04dGd4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":47,"RawContent":null},{"Id":"1024013376295452672","CreatedAt":"2018-07-30T19:26:28+00:00","UserScreenname":"xamarinhq","Text":"Here's everything you need to know to integrate automated visual UI tests into a dev toolchain that includes an… https://t.co/12Ihjj4bSN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":121,"FavoriteCount":58,"RawContent":null},{"Id":"1022882059763830784","CreatedAt":"2018-07-27T16:31:01+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/RGpgfHMoPZ -- Announcing Xamarin .Android support for Android 9.0 (P) now available for both #VS2017 &amp;… https://t.co/9clAy4LHZp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":54,"RawContent":null},{"Id":"1022866229143461888","CreatedAt":"2018-07-27T15:28:07+00:00","UserScreenname":"xamarinhq","Text":"Previewing files from inside your Xamarin .iOS app is a great way to enhance user experience. ...and adding this fe… https://t.co/tF7v5at9xo","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null}]}},"RunOn":"2018-09-13T05:30:53.3330858Z","RunDurationInMilliseconds":3869}