{"Data":{"Blog":{"FeedItems":[{"Title":"Beautiful Material Design for Android & iOS","PublishedOn":"2019-03-07T20:27:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This week, Xamarin.Forms 3.6 shipped with another round of improvements, the most exciting of which is called Visual. Visual enables developers to create beautiful, cross-platform mobile applications...","Href":"https://blog.xamarin.com/beautiful-material-design-android-ios/","RawContent":null},{"Title":"Xamarin.Forms 3.6: Visual Has Materialized","PublishedOn":"2019-03-06T20:12:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We’re pleased to announce the release of Xamarin.Forms 3.6 in the usual cadence of our regular releases. In addition to the usual enhancements and bug fixes, we’re also moving our Visual feature from...","Href":"https://blog.xamarin.com/xamarin-forms-3-6-visual-has-materialized/","RawContent":null},{"Title":"Best Practices and Tips for Using Xamarin.UITest","PublishedOn":"2019-03-04T19:35:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We can all agree that it is very important for mobile apps to have great user interfaces, be accessible, and be extremely performant. Given the plethora of devices with different screen sizes, screen...","Href":"https://blog.xamarin.com/best-practices-tips-xamarin-uitest/","RawContent":null},{"Title":"Developer Community Events in March","PublishedOn":"2019-03-01T17:59:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"User groups are getting together to learn about new, exciting releases and tooling to help jumpstart their next mobile development project. Network with your local community and you too could get all...","Href":"https://blog.xamarin.com/developer-community-events-in-march/","RawContent":null},{"Title":"View PDF Files within Your Xamarin.Forms Apps Using the Syncfusion PDF Viewer","PublishedOn":"2019-02-28T17:04:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Suresh Mohan. Suresh is the Product Manager for PDF Viewer at Syncfusion Software where he specializes in desktop and mobile app development. &#160;...","Href":"https://blog.xamarin.com/xamarin-forms-apps-syncfusion-pdf-viewer/","RawContent":null},{"Title":"Quick Tip: Debugging Local ASP.NET Core Web APIs on Android Emulators","PublishedOn":"2019-02-25T19:36:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing mobile applications with a web API backend there is always a need to debug locally on your development machine. If you are using Visual Studio for Mac and debugging iOS applications...","Href":"https://blog.xamarin.com/debug-local-asp-net-core-web-apis-android-emulators/","RawContent":null},{"Title":"Xamarin and Azure Office Hours Recap from December 2018 and January 2019","PublishedOn":"2019-02-21T18:11:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"That&#8217;s right, I ❤️ every single one of you(!) and I want to know more about your stories building mobile apps. I want to hear stories of your successes and also, the not-so-successful...","Href":"https://blog.xamarin.com/xamarin-azure-office-hours-recap-december-january/","RawContent":null},{"Title":"Persisting Settings and Preferences in Mobile Apps with Xamarin.Essentials","PublishedOn":"2019-02-19T19:56:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"An essential part of any mobile application is the ability to persist data. Sometimes that is a large amount of data that requires a database, but often it is smaller pieces of data such as settings...","Href":"https://blog.xamarin.com/persisting-settings-preferences-mobile-apps-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Developer Blog is Getting an Update!","PublishedOn":"2019-02-15T18:56:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the coming weeks, the Xamarin Developer Blog will be migrating to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great...","Href":"https://blog.xamarin.com/xamarin-developer-blog-is-getting-an-update/","RawContent":null},{"Title":"Visual Studio Mobile Developer Podcast: Releases, Previews, and Roadmaps!","PublishedOn":"2019-02-13T19:56:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. In this episode, we discuss the best of...","Href":"https://blog.xamarin.com/podcast-releases-previews-roadmaps/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9202631312","Type":"IssuesEvent","CreatedAt":"2019-03-07T23:02:57","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2804","RelatedDescription":"Opened issue \"[spec] should Xamarin.Android enable R8 by default?\" (#2804) at xamarin/xamarin-android","RelatedBody":"# R8 by default?\r\n\r\nContext: https://developer.android.com/studio/preview/features/#R8-enabled\r\n\r\nWe are already planning to enable D8 by default in some future Xamarin.Android release.\r\n\r\nIn the current Android Studio preview, R8 is enabled by default. (not just D8!)\r\n\r\nTo turn R8 off, you can add the following to your `build.gradle`:\r\n\r\n```groovy\r\n// android.enableR8 is true by default\r\nandroid.enableR8 = false\r\n```\r\n\r\nLooking through the details `minifyEnabled` also defaults to `false`.\r\n\r\nGiven R8's help output:\r\n\r\n```\r\nUsage: r8 [options] <input-files>\r\n where <input-files> are any combination of dex, class, zip, jar, or apk files\r\n and options are:\r\n  --release                # Compile without debugging information (default).\r\n  --debug                  # Compile with debugging information.\r\n  --output <file>          # Output result in <file>.\r\n                           # <file> must be an existing directory or a zip file.\r\n  --lib <file>             # Add <file> as a library resource.\r\n  --min-api                # Minimum Android API level compatibility.\r\n  --pg-conf <file>         # Proguard configuration <file>.\r\n  --pg-map-output <file>   # Output the resulting name and line mapping to <file>.\r\n  --no-tree-shaking        # Force disable tree shaking of unreachable classes.\r\n  --no-minification        # Force disable minification of names.\r\n  --no-desugaring          # Force disable desugaring.\r\n  --main-dex-rules <file>  # Proguard keep rules for classes to place in the\r\n                           # primary dex file.\r\n  --main-dex-list <file>   # List of classes to place in the primary dex file.\r\n  --main-dex-list-output <file>  # Output the full main-dex list in <file>.\r\n  --version                # Print the version of r8.\r\n  --help                   # Print this message.\r\n```\r\n\r\nWe think Android Studio is running R8 by default with `--no-minification`.\r\n\r\nThis means:\r\n\r\n* They are using \"tree shaking\" by default. (Removing unreachable classes)\r\n* They are using \"desugar\" by default.\r\n\r\nI suspect the `--no-minification` switch is used, merely because it\r\nspeeds up the build and perhaps it breaks Java debugging in some way?\r\n\r\n# Investigation\r\n\r\nTo be confident in what is actually happening, we should create a Java\r\nclass in Android Studio Preview that is using R8 by default. We should\r\ncreate an instance of the Java type and call it via Java's reflection\r\nAPIs and see if that breaks.\r\n\r\nIf such Java reflection fails, then likely the \"tree shaking\" feature\r\nis for sure being used. C# will likely fail in the exact same way as\r\nJava refection, unfortunately.\r\n\r\nWe can test such a configuration in Xamarin.Android by doing:\r\n\r\n```xml\r\n<AndroidDexTool>d8</AndroidDexTool>\r\n<AndroidLinkTool>r8</AndroidLinkTool>\r\n<AndroidR8ExtraArguments>--no-minification</AndroidR8ExtraArguments>\r\n```\r\n\r\nThe should should have no proguard configuration files.\r\n\r\nWe will need to see what happens to a \"hello world\" Xamarin.Forms app\r\nusing this combination.\r\n\r\n# Implementation\r\n\r\nA big TODO here. More investigation is needed."},{"Id":"9202538952","Type":"PullRequestEvent","CreatedAt":"2019-03-07T22:45:12","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2802","RelatedDescription":"Merged pull request \"Ignore backup files\" (#2802) at xamarin/xamarin-android","RelatedBody":""},{"Id":"9202334171","Type":"PullRequestEvent","CreatedAt":"2019-03-07T22:06:47","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2800","RelatedDescription":"Closed pull request \"[do-not-merge] backport changes to _ResolveLibraryProjectImports\" (#2800) at xamarin/xamarin-android","RelatedBody":"Context: http://work.devdiv.io/813889\r\n\r\nI think these two commits we have on `d16-1`/`master` are solving a problem the Android designer / Forms previewer are having with \"buildless\" designer usage.\r\n\r\nUnfortunately, this diff seems really huge... I will investigate if we can just do a smaller fix on `d16-0` directly."},{"Id":"9202320235","Type":"PullRequestEvent","CreatedAt":"2019-03-07T22:04:20","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2803","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] fix for \"build-less\" designer\" (#2803) at xamarin/xamarin-android","RelatedBody":"Fixes: http://work.devdiv.io/813889\r\n\r\nIn VS for Mac 2019 Preview, a specific scenario is broken:\r\n\r\n1. Download the repro (the creatively-named, perhaps legendary?\r\n   `App72.sln`)\r\n2. Delete the `bin` and `obj` directories\r\n3. Open a new VS for Mac instance. (`Automatic NuGet restore` should\r\n   be off)\r\n4. Open the solution, wait for any build progress to complete such as\r\n   `Updating resources...`, etc.\r\n5. Restore NuGet packages via `Project->Restore NuGet Packages`\r\n6. Open `MainPage.xaml`: designer displays a gray rectangle that says\r\n   \"AndroidFormsPreviewerRenderer\"\r\n\r\nDoing a full Build solves the problem, but this is the whole point of\r\nthe \"build-less\" designer/previewer feature in Dev16.\r\n\r\nBehind the scenes, the failure is the `SetupDependenciesForDesigner`\r\nMSBuild target. Opening the designer's log file, there are lots and\r\nlots of `javac` errors, such as:\r\n\r\n    ERROR: :   :  error: cannot find symbol\r\n        public Toolbar_NavigationOnClickEventDispatcher (android.support.v7.widget.Toolbar p0)\r\n    symbol:   class Toolbar\r\n    location: package android.support.v7.widget\r\n\r\nDoing more digging, I was able to reproduce the problem with a bash\r\nscript:\r\n\r\n    PROJ='App72/App72.Android/App72.Android.csproj'\r\n    SLN='App72.sln'\r\n    MSBUILD_ARGS='/nologo /v:quiet /p:DesignTimeBuild=True /p:BuildingInsideVisualStudio=True'\r\n    DESIGNER_ARGS='/p:AndroidUseManagedDesignTimeResourceGenerator=False'\r\n    MSBUILD=msbuild\r\n\r\n    # If you have a local xamarin-android build\r\n    MSBUILD=\"$HOME/Desktop/Git/xamarin-android/bin/Debug/bin/xabuild\"\r\n\r\n    rm logs.zip *.binlog\r\n    rm -r App72/App72.Android/obj App72/App72.Android/bin\r\n\r\n    $MSBUILD $PROJ $MSBUILD_ARGS \\\r\n        /t:UpdateAndroidResources /bl:dtb1.binlog\r\n\r\n    $MSBUILD $SLN $MSBUILD_ARGS /t:Restore /bl:restore.binlog\r\n\r\n    $MSBUILD $PROJ $MSBUILD_ARGS $DESIGNER_ARGS \\\r\n        /t:SetupDependenciesForDesigner /bl:designer2.binlog\r\n\r\n    zip logs.zip *.binlog\r\n\r\nAt this point, I could also reproduce the problem with\r\nxamarin-android/master. So, this is a not something we've fixed in\r\nmaster.\r\n\r\nNow... We have `DesignerTests.DesignerBeforeNuGetRestore` which does\r\nalmost *exactly* what this script is doing!\r\n\r\nBut then I tried splitting apart the NuGet restore, to more closely\r\nmatch the script. When calling `/t:Restore` in a separate MSBuild\r\ncall, the existing test we have failed in the exact same way as the\r\nscript: many `javac` errors.\r\n\r\nI reviewed the `binlog` file, looking for any interesting MSBuild\r\ntargets that were skipped:\r\n\r\n    Skipping target \"_BuildLibraryImportsCache\" because all output files are up-to-date with respect to the input files.\r\n\r\nGoing back through @alanmcgovern's notes, he could resolve the problem\r\nby deleting this file:\r\n\r\n    obj/Debug/designtime/libraryimports.cache.stamp\r\n\r\nBut then reviewing, the `Inputs` for `_BuildLibraryImportsCache`, they\r\ndidn't seem to be correct?\r\n\r\n    <Target Name=\"_BuildLibraryImportsCache\"\r\n        Inputs=\"$(MSBuildProjectFullPath);@(ReferencePath);@(ReferenceDependencyPaths);$(_AndroidBuildPropertiesCache)\"\r\n        Outputs=\"$(_AndroidLibraryImportsCache).stamp\">\r\n      <GetImportedLibraries ... CacheFile=\"$(_AndroidLibraryImportsCache)\" />\r\n      <Touch Files=\"$(_AndroidLibraryImportsCache).stamp\" AlwaysCreate=\"True\" />\r\n\r\nIf `<GetImportedLibraries/>` operates on\r\n`$(_AndroidLibraryProjectImportsCache)`, shouldn't it be an `Input`?\r\n\r\nSure enough, adding one more input solved the problem.\r\n\r\nI looked through our git history, and these `Inputs` have been this\r\nway at least since 2016. So this bug has just been here a while?"},{"Id":"9201962420","Type":"PullRequestEvent","CreatedAt":"2019-03-07T21:04:06","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2802","RelatedDescription":"Opened pull request \"Ignore backup files\" (#2802) at xamarin/xamarin-android","RelatedBody":""},{"Id":"9201937311","Type":"PullRequestEvent","CreatedAt":"2019-03-07T21:00:00","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2801","RelatedDescription":"Opened pull request \"[tools] Add jit-times tool\" (#2801) at xamarin/xamarin-android","RelatedBody":"Original project: https://github.com/radekdoulik/jit-times/\r\n\r\nAlso add jit-times script to ease the use of it"},{"Id":"9200603273","Type":"PullRequestEvent","CreatedAt":"2019-03-07T17:26:51","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2800","RelatedDescription":"Opened pull request \"[do-not-merge] backport changes to _ResolveLibraryProjectImports\" (#2800) at xamarin/xamarin-android","RelatedBody":"Context: http://work.devdiv.io/813889\r\n\r\nI think these two commits we have on `d16-1`/`master` are solving a problem the Android designer / Forms previewer are having with \"buildless\" designer usage.\r\n\r\nUnfortunately, this diff seems really huge... I will investigate if we can just do a smaller fix on `d16-0` directly."},{"Id":"9200438924","Type":"PullRequestEvent","CreatedAt":"2019-03-07T17:03:29","Actor":"alexischr","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2799","RelatedDescription":"Opened pull request \"Bump to mono:2019-02\" (#2799) at xamarin/xamarin-android","RelatedBody":""}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9202718449","Type":"IssuesEvent","CreatedAt":"2019-03-07T23:21:34","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5494","RelatedDescription":"Opened issue \"[Spec] Touch Tracking/TouchStates on VisualElements\" (#5494) at xamarin/Xamarin.Forms","RelatedBody":"_Additional credit for this spec should also go to [Chase Florell](https://github.com/ChaseFlorell), who provided the original proposal and proof-of-concept project._\r\n\r\n## Summary\r\nThe current implementation of the VisualStateManager is simple, allowing for three basic states of `Normal`, `Disabled`, and `Focused`. While these VisualStates may be useful, in the context of a Xamarin.Forms application, they do not handle the state of actively being pressed on by the user, or even unpressed and hover states. There is also the potential for multiple fingers touching the screen, as well. By extending the VSM's capabilities for handling these states, developers will be able to more easily implement complex touch or click-based behaviors in their applications, and set a foundation for other enhancements such as those discussed in issue #4232.\r\n\r\n## API\r\n\r\n#### Extend View\r\n    public class View\r\n    {\r\n        ///<summary>\r\n        /// When enabled, the View will begin listening for Touches\r\n        ///</sumary>\r\n        ///<remarks>\r\n        /// When a touch is detected, it will raise <see cref=\"Touched\" /> and also toggle the VisualState to the TouchState\r\n        ///</remarks>\r\n        public bool ObservesTouches { get; set; } // should this be bindable?\r\n\r\n        ///<summary>\r\n        /// When enabled, the tracked touches will include Views outside the bounds of the current View\r\n        ///</sumary>\r\n        ///<remarks>\r\n        /// Adding this will extend the TouchState to include <see cref=\"TouchState.Entered\" /> and <see cref=\"TouchState.Exited\" />\r\n        ///</remarks>\r\n        public bool TrackBoundaryChanges { get; set; }\r\n\r\n        ///<summary>\r\n        /// Raised when <see cref=\"ObservesTouches\"/> is enabled and a touch is detected\r\n        ///<summary>\r\n        event EventArgs<TouchEventArgs> Touched;\r\n    }\r\n\r\n#### TouchGesturerecognizer\r\n    public class TouchGestureRecognizer : BindableObject, IGestureRecognizer\r\n    {\r\n        ///<summary>\r\n        /// Raised when <see cref=\"View.ObservesTouches\"/> is enabled and a touch is detected\r\n        ///<summary>\r\n        public event EventHandler<TouchEventArgs> Touched; \r\n\r\n        ///<summary>\r\n        /// Raised when <see cref=\"View.ObservesTouches\"/> is enabled and a touch is detected\r\n        ///<summary>\r\n        public ICommand Command { get; set; }\r\n    }\r\n\r\n#### TouchState\r\n    [Flags]\r\n    public enum TouchState\r\n    {\r\n        Entered = 1<<0,\r\n        Exited = 1<<2,\r\n        Cancelled = 1<<3,\r\n        Failed = 1<<4,\r\n        Changed = 1<<5,\r\n        Pressed = 1<<6, \r\n        Released = 1<<7,\r\n        Hover = 1<<8\r\n    }\r\n\r\n#### TouchEventArgs\r\n\r\n    public class TouchEventArgs : EventArgs\r\n    {   \r\n        public TouchState TouchState { get; }\r\n        public IReadOnlyList<TouchPoint> TouchPoints { get; }\r\n        public long Id { get; }\r\n        public bool IsInContact { get; }\r\n    }\r\n\r\n#### TouchPoint\r\n    public struct TouchPoint\r\n    {\r\n        public Xamarin.Forms.Point Point { get; }\r\n        public bool IsInOriginalView { get; }\r\n    }\r\n\r\n## Usage\r\nThe `View` class will receive two additional properties and one event. \r\n`ObservesTouches` enables whether the view responds to the new states at all; `TrackBoundaryChanges` distinguishes whether the view will ignore if the press (via finger or mouse) leaves its boundaries; last is the `Touched` event which is raised when the touch is detected. \r\n\r\nA `TouchGestureRecognizer` functions similarly to the existing `TapGestureRecognizer` and exists for the user to define whether the view itself observes touches (false by default), and then define a `Command` for when the touch occurs. \r\n\r\nThe `TouchState` enum defines various states that can occur to the view, which apply to the `VisualStates`, such as the following:\r\n\r\n    <VisualStateGroup x:Name=\"PressedStates\">\r\n        <VisualState x:Name=\"Entered\" />\r\n        <VisualState x:Name=\"Exited\" />\r\n        <VisualState x:Name=\"Cancelled\" />\r\n        <VisualState x:Name=\"Failed\" />\r\n        <VisualState x:Name=\"Changed\" />\r\n        <VisualState x:Name=\"Pressed\" />\r\n        <VisualState x:Name=\"Released\" />\r\n        <VisualState x:Name=\"Hover\" />\r\n    </VisualStateGroup>\r\n\r\nA sample repo can be found [here](https://github.com/chaseflorell/pressed) that provides a basic proof of concept for how developers can benefit from these additional states. Using the following snippet of code, while remaining in a pressed state, the bottom right square's text will rotate (as shown in the below GIF):\r\n\r\n_Note: As a proof-of-concept, this project uses Effects as the functionality is not built-in, as commented._\r\n\r\n            <Grid Style=\"{StaticResource Grid}\"\r\n                  BackgroundColor=\"White\"\r\n                  HorizontalOptions=\"Center\"\r\n                  VerticalOptions=\"Center\"\r\n                  WidthRequest=\"400\"\r\n                  HeightRequest=\"200\">\r\n                <!-- we could just as easily use the VisualElement.ObservesTouches property -->\r\n                <!-- but this shows how we can do the same thing with a gesture recognizer -->\r\n                <!-- also, if this lands in Xamarin.Forms, there's no need for the Effect-->\r\n                <Grid.Effects>\r\n                    <pressed:TouchEffect Touched=\"TouchGestureRecognizer_OnTouched\" />\r\n                </Grid.Effects>\r\n                <Grid.GestureRecognizers>\r\n                    <TapGestureRecognizer Tapped=\"TapGestureRecognizer_OnTapped\" />\r\n                    <!-- adding this gesture recognizer would automatically toggle \"VisualElement.ObservesTouches = true\" for the View -->\r\n                    <pressed:TouchGestureRecognizer Command=\"{Binding OnTouchedCommand}\" />\r\n                </Grid.GestureRecognizers>\r\n\r\n                <Label x:Name=\"InnerLabel\" Style=\"{StaticResource TextStyle}\">\r\n                    <Label.Text>\r\n                    Welcome to Xamarin.Forms!\r\n\r\n                    I Rotate!\r\n                    </Label.Text>\r\n                </Label>\r\n            </Grid>\r\n\r\n            \r\n        private async void RotateTheView(VisualElement element, TouchState touchState)\r\n        {\r\n            switch (touchState)\r\n            {\r\n                case TouchState.Pressed:\r\n                    _isPressed = true;\r\n                    break;\r\n                case TouchState.Released:\r\n                    _isPressed = false;\r\n                    break;\r\n                default: return;\r\n            }\r\n\r\n            while (_isPressed)\r\n            {\r\n                await element.RotateTo(360, 500, Easing.Linear);\r\n                await element.RotateTo(0, 0); // reset to initial position\r\n            }\r\n        }\r\n\r\n![Image](https://camo.githubusercontent.com/de7d8ef2b1a168d1a14486ffdeb0643748547ced/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f394a7464564f624651366d795947754f30712f67697068792e676966)\r\n\r\n\r\n## Considerations\r\nThe most obvious consideration is to not break any current behavior involving touches/taps. With `ObservesTouches` false/disabled by default, this presumably shouldn't pose any issues.\r\n\r\n## Difficulty: Medium/High"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9203362943","Type":"PullRequestEvent","CreatedAt":"2019-03-08T02:07:36","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5739","RelatedDescription":"Merged pull request \"[d16-1] [foundation] Add missing availability attributes. Fixes #5714\" (#5739) at xamarin/xamarin-macios","RelatedBody":"verified with\n\n* NSItemProviderErrorCode: https://developer.apple.com/documentation/foundation/nsitemprovidererrorcode?language=objc\n* NSLengthFormatterUnit: https://developer.apple.com/documentation/foundation/nslengthformatterunit?language=occ\n* NSMassFormatterUnit: https://developer.apple.com/documentation/foundation/nsmassformatterunit?language=occ\n\nalso NSQualityOfService was mentioned but it already have the correct attributes\nhttps://developer.apple.com/documentation/foundation/nsqualityofservice?language=occ\n\nFixes https://github.com/xamarin/xamarin-macios/issues/5714\n\nBackport of #5736.\n\n/cc @spouliot "},{"Id":"9202222575","Type":"PullRequestEvent","CreatedAt":"2019-03-07T21:47:44","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5736","RelatedDescription":"Merged pull request \"[foundation] Add missing availability attributes. Fixes #5714\" (#5736) at xamarin/xamarin-macios","RelatedBody":"verified with\n\n* NSItemProviderErrorCode: https://developer.apple.com/documentation/foundation/nsitemprovidererrorcode?language=objc\n* NSLengthFormatterUnit: https://developer.apple.com/documentation/foundation/nslengthformatterunit?language=occ\n* NSMassFormatterUnit: https://developer.apple.com/documentation/foundation/nsmassformatterunit?language=occ\n\nalso NSQualityOfService was mentioned but it already have the correct attributes\nhttps://developer.apple.com/documentation/foundation/nsqualityofservice?language=occ\n\nFixes https://github.com/xamarin/xamarin-macios/issues/5714"},{"Id":"9202222556","Type":"IssuesEvent","CreatedAt":"2019-03-07T21:47:44","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5714","RelatedDescription":"Closed issue \"Some macOS types are missing Mac/Introduced attribute \" (#5714) at xamarin/xamarin-macios","RelatedBody":"The following types need to have an attribute signaling their provenance:\r\n\r\n`Foundation.NSItemProviderErrorCode` introduced 10.10\r\n`Foundation.NSLengthFormatterUnit` introduced 10.10\r\n`Foundation.NSMassFormatterUnit` introduced 10.10\r\n`Foundation.NSQualityOfService` introduced 10.10\r\n"},{"Id":"9202211759","Type":"PullRequestEvent","CreatedAt":"2019-03-07T21:45:51","Actor":"monojenkins","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5739","RelatedDescription":"Opened pull request \"[d16-1] [foundation] Add missing availability attributes. Fixes #5714\" (#5739) at xamarin/xamarin-macios","RelatedBody":"verified with\n\n* NSItemProviderErrorCode: https://developer.apple.com/documentation/foundation/nsitemprovidererrorcode?language=objc\n* NSLengthFormatterUnit: https://developer.apple.com/documentation/foundation/nslengthformatterunit?language=occ\n* NSMassFormatterUnit: https://developer.apple.com/documentation/foundation/nsmassformatterunit?language=occ\n\nalso NSQualityOfService was mentioned but it already have the correct attributes\nhttps://developer.apple.com/documentation/foundation/nsqualityofservice?language=occ\n\nFixes https://github.com/xamarin/xamarin-macios/issues/5714\n\nBackport of #5736.\n\n/cc @spouliot "},{"Id":"9200576362","Type":"IssuesEvent","CreatedAt":"2019-03-07T17:22:53","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5738","RelatedDescription":"Opened issue \"Expanding NSColor in debugger crashes app\" (#5738) at xamarin/xamarin-macios","RelatedBody":"\r\n### Steps to Reproduce\r\n\r\n1. New XM App\r\n2.  `\tNSColor color = NSColor.Red;` and set breakpoint on line after\r\n3.  Expand color in debugger\r\n4. Boom - https://gist.github.com/chamons/be71ccd1b887a7e246bd3b42910bef7b\r\n\r\n### Expected Behavior\r\n\r\nWe don't expand unsafe properties by default in IDE.\r\n\r\n### Actual Behavior\r\n\r\n### Environment\r\nmacios master"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1103762250509283332","CreatedAt":"2019-03-07T21:00:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing Material Design; a suite of cross-platform components in the #Xamarin.Forms 3.6 Visual feature that boo… https://t.co/gin9lpb0eQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":87,"FavoriteCount":39,"RawContent":null},{"Id":"1103750171215699968","CreatedAt":"2019-03-07T20:12:02+00:00","UserScreenname":"xamarinhq","Text":"Level up your mobile development skills at #MSBuild, May 6-8, 2019 in Seattle. Registration is now open!… https://t.co/EZNWhIn3p6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":25,"FavoriteCount":7,"RawContent":null},{"Id":"1103709031066189825","CreatedAt":"2019-03-07T17:28:33+00:00","UserScreenname":"xamarinhq","Text":"Happening right now! Join the Mobile #dotNET Teams for our community stand-up covering great community contribution… https://t.co/9HUp86ZqBU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":25,"FavoriteCount":12,"RawContent":null},{"Id":"1103701857682231296","CreatedAt":"2019-03-07T17:00:03+00:00","UserScreenname":"xamarinhq","Text":"On this week's Essential API of the week we take a look at Accelerometer, which enables you monitor the device's ac… https://t.co/UxhHHar5zN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":14,"RawContent":null},{"Id":"1103399934966067200","CreatedAt":"2019-03-06T21:00:19+00:00","UserScreenname":"xamarinhq","Text":"Announcing Xamarin.Forms 3.6:\n- we've made enhancements, cleaned up some bugs, AND, we've moved our Visual feature… https://t.co/fG4RqX25PH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":245,"FavoriteCount":122,"RawContent":null},{"Id":"1102666586194931713","CreatedAt":"2019-03-04T20:26:15+00:00","UserScreenname":"xamarinhq","Text":"Sweeky Satpathy (from the Mobile Customer Advisory Team) shares some best practices &amp; tips/tricks the team uses to… https://t.co/GSrw6zLTHZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":59,"FavoriteCount":18,"RawContent":null},{"Id":"1101572485114462220","CreatedAt":"2019-03-01T19:58:41+00:00","UserScreenname":"xamarinhq","Text":"Developer Community User Groups are gathering to learn about new, exciting releases and tooling to help jumpstart t… https://t.co/GgCWj5LttS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":47,"FavoriteCount":21,"RawContent":null},{"Id":"1101202237752258564","CreatedAt":"2019-02-28T19:27:27+00:00","UserScreenname":"xamarinhq","Text":"Want to display PDF docs w/i your #Xamarin apps? Now you can. Learn to view PDF files within your Xamarin.Forms app… https://t.co/GjuKzrvNYM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":30,"RawContent":null},{"Id":"1100455963361005570","CreatedAt":"2019-02-26T18:02:01+00:00","UserScreenname":"xamarinhq","Text":"In this episode of the #dotNETCore podcast, @jimbobbennett talks #Xamarin &amp; .NET Standard. Listen in or read the tr… https://t.co/VDFrb1excV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":14,"RawContent":null},{"Id":"1100149148282769409","CreatedAt":"2019-02-25T21:42:51+00:00","UserScreenname":"xamarinhq","Text":"Android emulators have their own networking config but now you can debug #Android apps locally regardless of whethe… https://t.co/Hbsm6gbXft","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":71,"FavoriteCount":31,"RawContent":null},{"Id":"1098996242238111745","CreatedAt":"2019-02-22T17:21:37+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @DavidOrtinau gives us all the reasons and features to &lt;3 in Xamarin.Forms 3.5. This… https://t.co/pVcHVX6LYJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":27,"RawContent":null},{"Id":"1097993381496700935","CreatedAt":"2019-02-19T22:56:36+00:00","UserScreenname":"xamarinhq","Text":"With only a few lines of code, today's #Xamarin.Essentials API of the week helps you persist settings and preferenc… https://t.co/izkl5pGL6m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":49,"FavoriteCount":21,"RawContent":null},{"Id":"1097939132532310018","CreatedAt":"2019-02-19T19:21:02+00:00","UserScreenname":"xamarinhq","Text":"On this week's #XamarinShow Essential API of the week, we take a look at Secure Storage, which enables you to easil… https://t.co/OwQSZ1QRlI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":46,"FavoriteCount":26,"RawContent":null},{"Id":"1097603017375993857","CreatedAt":"2019-02-18T21:05:26+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 101: Command Parameters: https://t.co/rwzzq9yQib\n\n.@JamesMontemagno takes us through a new mini-serie… https://t.co/ZFInvKFhSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":110,"FavoriteCount":48,"RawContent":null},{"Id":"1096561048562384898","CreatedAt":"2019-02-16T00:05:01+00:00","UserScreenname":"xamarinhq","Text":"The #Xamarin Developer Blog is migrating to a new platform with a modern, clean design and powerful features that m… https://t.co/nJUxXItfe8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":35,"RawContent":null},{"Id":"1095804816121581570","CreatedAt":"2019-02-13T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio Mobile Dev Podcast is out. In this episode, @CodeMillMatt &amp; @JamesMontemagno discuss the latest &amp;… https://t.co/SPEvfxFuLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":55,"FavoriteCount":14,"RawContent":null},{"Id":"1095445655076700162","CreatedAt":"2019-02-12T22:12:51+00:00","UserScreenname":"xamarinhq","Text":"To provide the best user experience we need access to the current network state of our users’ devices.\n\n...new from… https://t.co/w2ZGMgKqli","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":43,"FavoriteCount":25,"RawContent":null},{"Id":"1093221405917937670","CreatedAt":"2019-02-06T18:54:28+00:00","UserScreenname":"xamarinhq","Text":"Every month we survey &amp; interview our Xamarin devs, listening to your firsthand stories. Why? To make #Xamarin bett… https://t.co/Gwc32YD8qG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":42,"RawContent":null},{"Id":"1093196382901547008","CreatedAt":"2019-02-06T17:15:02+00:00","UserScreenname":"xamarinhq","Text":"On a recent #XamarinShow, Mike Parker from the Microsoft Mobile Customer Advisory Team that shows us how to easily… https://t.co/jdjf2oZXwI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":50,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-03-08T05:30:54.857213Z","RunDurationInMilliseconds":2819}