{"Data":{"GitHubIssues":{"Issues":[{"Id":"326838558","IsPullRequest":false,"CreatedAt":"2018-05-27T18:32:59","Actor":"GoranHalvarsson","Number":"891","RawContent":null,"Title":"Dynamic routes?","State":"open","Body":"Hello good people\r\n\r\nI have a request it's about routes(page directive). \r\nThe possibility to add routes(@page \"xxxx\") programmatically. \r\nSomething like this:\r\n@foreach (string item in navigationRepository.GetRelativeUrls())\r\n{\r\n    @page @item\r\n}\r\n\r\nWill this be possible?","Url":"https://github.com/aspnet/Blazor/issues/891","RelatedDescription":"Open issue \"Dynamic routes?\" (#891)"},{"Id":"326814594","IsPullRequest":false,"CreatedAt":"2018-05-27T17:21:56","Actor":"TFTomSun","Number":"890","RawContent":null,"Title":"RestSharp not working","State":"closed","Body":"I tried to use restsharp for a simple rest request against the soundcloud rest api.\r\n\r\nWhen I add the following code:\r\n```csharp\r\n            WebRequest.DefaultWebProxy = null;\r\n            var client = new RestClient(\"https://api.soundcloud.com/\");\r\n            var request = new RestRequest(\"tracks/13158665\");\r\n            request.AddQueryParameter(\"client_id\", \"****\");\r\n\r\n            var response = await client.ExecuteTaskAsync<string>(request);\r\n            this.Response =  $\"{response.StatusCode} {response.ErrorMessage} {response.Content}\";\r\n```\r\n\r\ni get as response:\r\n\r\n> 0 libc\r\n\r\nwhen I execute inside a .net core test project i get:\r\n\r\n> Unauthorized  \r\n\r\nWith a valid client id i get a full json response containing the track information in the .net core test. The result in blazor is always the same. Is there a list of not supported functionality? And how can I use 3rd Party API's if the build don't tell me whether they contain such not supported functionality?\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/890","RelatedDescription":"Closed issue \"RestSharp not working\" (#890)"},{"Id":"326769142","IsPullRequest":false,"CreatedAt":"2018-05-27T17:21:04","Actor":"ikondrasovas","Number":"888","RawContent":null,"Title":"Inline SVG element not adjusting to available width","State":"closed","Body":"The following inline SVG element is properly rendered into a regular bootstrap page:\r\n\r\n`\r\n<svg viewBox=\"0 0 3000 1500\" preserveAspectRatio=\"xMidYMin slice\"  style=\"width: 100%; padding-bottom:calc(50%); height: 1px; overflow: visible\">\r\n<rect width=\"3000\" height=\"1500\" />\r\n<line x1=\"0\" y1=\"0\" x2=\"3000\" y2=\"1500\" style=\"stroke:rgb(255,0,0);stroke-width:2\" />\r\n</svg>\r\n`\r\n\r\nHowever, when used into my Blazor project, the svg width is not properly adjusted to the available width.\r\n\r\nThere are some [necessary workarounds](https://css-tricks.com/scale-svg/) to make this width adjustment works in most  browsers and they usually work, but not with my Blazor project.\r\n\r\nIs this something known that is related to Blazor? What should I do?\r\n\r\nThank you,","Url":"https://github.com/aspnet/Blazor/issues/888","RelatedDescription":"Closed issue \"Inline SVG element not adjusting to available width\" (#888)"},{"Id":"326797396","IsPullRequest":false,"CreatedAt":"2018-05-27T08:15:39","Actor":"mahdi-ninja","Number":"889","RawContent":null,"Title":"Call unregistered JavaScript functions","State":"open","Body":"I know that Blazor currently uses a registered function approach, but I'm not sure why exactly this is required. I think It'd be nice if we could call arbitrary JavaScript functions without having to register them first. \r\n\r\nI have implemented a simple workaround for this. Please take a look and let me know if this something that you may want to implement (of course in a proper way) in Blazor. If not, can you please tell me why it's a bad idea and is there any reason for me not to use this approach?\r\n\r\nIn my implementation, I have a C# helper method called `JavaScriptInterop.Invoke` which can be used like this:\r\n```csharp\r\n// Call console.log without registering it\r\n// JS call: console.log({\"str\": \"Hello\", \"f\": 1.23, \"b\": false});\r\n// returns null\r\nJavaScriptInterop.Invoke<object>(\"console.log\", new { str = \"Hello\", f = 1.23, b = false });\r\n\r\n// Method with variable number of params\r\n// JS call: Math.max(3, 4.3, 5.1);\r\n// returns 5.1\r\nJavaScriptInterop.Invoke<double>(\"Math.max\", 3, 4.3, 5.1);\r\n\r\n// Access properties (doesn't have to be method call)\r\n// JS call: Math.PI\r\n// returns: 3.141592653589793\r\nJavaScriptInterop.Invoke<double>(\"Math.PI\");\r\n\r\n// Invalid reference\r\n// JS call: doesn't call anything\r\n// returns null\r\nJavaScriptInterop.Invoke<object>(\"invalid.ref\");\r\n```\r\n\r\nAnd here's how I implemented it\r\n* Helper method `JavaScriptInterop.Invoke` to call registered JS function `invokeUnregistered`\r\n```csharp\r\npublic static class JavaScriptInterop\r\n{\r\n    public static TRes Invoke<TRes>(string identifier, params object[] args)\r\n    {\r\n        return RegisteredFunction.Invoke<TRes>(\"invokeUnregistered\", new { identifier, args });\r\n    }\r\n}\r\n```\r\n* Registering a generic JS function invoker `invokeUnregistered`\r\n```html\r\n<script type=\"blazor-boot\"></script>\r\n<script>\r\n    Blazor.registerFunction('invokeUnregistered', data => {\r\n        var ref = data.identifier\r\n            .split('.')\r\n            .reduce((prev, curr) => prev && prev[curr], window);\r\n        return ref instanceof Function ?\r\n            ref.apply(null, data.args) :\r\n            ref;\r\n    });\r\n</script>\r\n```\r\n\r\n\r\nPS: This could also be implemented as a dynamic class, so that the call will look something like this:\r\n```csharp\r\n//this will be translated to JavaScriptInterop.Invoke<double>(\"Math.max\", 1, 2, 3);\r\nvar max = JavaScript.Math.max(1, 2, 3).As<double>();\r\n```","Url":"https://github.com/aspnet/Blazor/issues/889","RelatedDescription":"Open issue \"Call unregistered JavaScript functions\" (#889)"},{"Id":"326679428","IsPullRequest":false,"CreatedAt":"2018-05-25T22:23:24","Actor":"mikebrind","Number":"887","RawContent":null,"Title":"Question: How do you reset the selected index of a dependent select element?","State":"open","Body":"I have been playing with cascading dropdown lists, and have noticed that the dependent dropdown retains the selectedIndex value when the primary dropdown option is changed and the dependent is populated with a different set of options. I have used both the `bind` syntax and the `onchange` option with the same result.\r\n\r\nTo repro, I used the ASP.NET Core Hosted template and added a couple of classes to the Shared project:\r\n\r\n``` csharp\r\npublic class Author\r\n{\r\n    public int AuthorId { get; set; }\r\n    public string Name { get; set; }\r\n    public ICollection<Book> Books { get; set; }\r\n}\r\n\r\npublic class Book\r\n{\r\n    public int BookId { get; set; }\r\n    public string Title { get; set; }\r\n    public int YearPublished { get; set; }\r\n    public decimal Price { get; set; }\r\n    public Author Author { get; set; }\r\n}\r\n```\r\nThen a controller to the Server project:\r\n\r\n```csharp\r\nusing BlazorTests.Shared;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing System.Collections.Generic;\r\n\r\nnamespace BlazorTests.Server.Controllers\r\n{\r\n    [Produces(\"application/json\")]\r\n    [Route(\"api/book\")]\r\n    public class BookController : Controller\r\n    {\r\n        private static readonly List<Author> authors = new List<Author>{\r\n            new Author{\r\n                AuthorId = 1, Name = \"Tom Clancy\", Books = new List<Book>\r\n                {\r\n                    new Book{BookId = 1, Title = \"Sum of all Fears\",YearPublished = 1991, Price = 7.48m},\r\n                    new Book{BookId = 2, Title = \"Rainbow Six\", YearPublished = 1998, Price = 6.99m},\r\n                    new Book{BookId = 3, Title = \"Hunt for Red October\", YearPublished = 1984, Price = 4.99m}\r\n                }\r\n            },\r\n            new Author{\r\n                AuthorId = 2, Name = \"Stephen King\", Books = new List<Book>\r\n                {\r\n                    new Book{BookId = 4, Title = \"Carrie\", YearPublished = 1974, Price = 5.99m},\r\n                    new Book{BookId = 5, Title = \"The Stand\", YearPublished = 1978, Price = 4.99m},\r\n                    new Book{BookId = 6, Title = \"Black House\", YearPublished = 2001, Price = 5.99m},\r\n                    new Book{BookId = 7, Title = \"It\", YearPublished = 1986, Price = 6.99m}\r\n                }\r\n            },\r\n            new Author{\r\n                AuthorId = 3, Name = \"Robert Ludlum\", Books = new List<Book>\r\n                {\r\n                    new Book{BookId = 8, Title = \"The Bourne Ultimatum\", YearPublished = 1990, Price = 5.99m},\r\n                    new Book{BookId = 9, Title = \"The Holcroft Covenant\", YearPublished = 1978, Price = 4.99m},\r\n                    new Book{BookId = 10, Title = \"The Rhineman Exchange\", YearPublished = 1974, Price = 4.99m}\r\n                }\r\n            }\r\n        };\r\n\r\n        [HttpGet]\r\n        public IEnumerable<Author> Get()\r\n        {\r\n            return authors;\r\n        }\r\n    }\r\n}\r\n```\r\nAnd finally a Books.cshtml component to the Client project:\r\n\r\n```\r\n@using BlazorTests.Shared\r\n@page \"/books\"\r\n@inject HttpClient http\r\n\r\n<h1>Books</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n@if (authors == null)\r\n{\r\n    <p><em>Loading...</em></p>\r\n}\r\nelse\r\n{\r\n    <select id=\"authors\" onchange=\"@AuthorSelectionChanged\">\r\n        <option></option>\r\n        @foreach (var author in authors)\r\n        {\r\n            <option value=\"@author.AuthorId\">@author.Name</option>\r\n        }\r\n    </select>\r\n}\r\n@if (books != null)\r\n{\r\n    <select id=\"books\" onchange=\"@BookSelectionChanged\">\r\n        <option></option>\r\n        @foreach (var book in books)\r\n        {\r\n            <option value=\"@book.BookId\">@book.Title</option>\r\n        }\r\n    </select>\r\n}\r\n@if(selectedBook != null)\r\n{\r\n    <div>\r\n        Title: @selectedBook.Title<br />\r\n        Year published: @selectedBook.YearPublished<br />\r\n        Price: @selectedBook.Price\r\n    </div>\r\n}\r\n\r\n\r\n@functions {\r\n\r\n    Author[] authors;\r\n    Book[] books;\r\n    Book selectedBook;\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        authors = await http.GetJsonAsync<Author[]>(\"/api/book\");\r\n    }\r\n\r\n\r\n    void AuthorSelectionChanged(UIChangeEventArgs e)\r\n    {\r\n        books = null;\r\n        if (int.TryParse(e.Value.ToString(), out int id))\r\n        {\r\n            books = authors.First(a => a.AuthorId == id).Books.ToArray();\r\n        }\r\n\r\n    }\r\n\r\n    void BookSelectionChanged(UIChangeEventArgs e)\r\n    {\r\n        if (int.TryParse(e.Value.ToString(), out int id))\r\n        {\r\n            selectedBook = books.FirstOrDefault(b => b.BookId == id);\r\n        }\r\n        else\r\n        {\r\n            selectedBook = null;\r\n        }\r\n    }\r\n}\r\n```\r\nSelect an author, then select a book. Then select a different author and the books option at the selected index of the previous choice is selected. The only time this is not the case is when the author is changed after selecting the 4th book in the Stephen King list. There are only 3 books assigned to the other authors.\r\n\r\nIdeally, I'd like to be able to have the selectedIndex of the dependent set to -1 when the Author selection is changed. How do I do that?","Url":"https://github.com/aspnet/Blazor/issues/887","RelatedDescription":"Open issue \"Question: How do you reset the selected index of a dependent select element?\" (#887)"},{"Id":"326625944","IsPullRequest":true,"CreatedAt":"2018-05-25T18:41:27","Actor":"Suchiman","Number":"886","RawContent":null,"Title":"Use RestoreAdditionalProjectSources instead of RestoreSources","State":"open","Body":"`RestoreAdditionalProjectSources` is additive while `RestoreSources` replaces the existing sources, see https://github.com/NuGet/Home/wiki/%5BSpec%5D-NuGet-settings-in-MSBuild#project-properties\r\n\r\nThe readme also specifies `https://dotnet.myget.org/F/dotnet-core/api/v3/index.json; ` which the templates do not, is that one really needed?","Url":"https://github.com/aspnet/Blazor/pull/886","RelatedDescription":"Open PR \"Use RestoreAdditionalProjectSources instead of RestoreSources\" (#886)"},{"Id":"326599387","IsPullRequest":false,"CreatedAt":"2018-05-25T17:03:16","Actor":"shumas","Number":"885","RawContent":null,"Title":"string constant for @page directive","State":"open","Body":"Hi!\r\nLooks logical (and useful), if it'll be possible to use const strings in page directive- as it compiles to the route attribute (where you can use constants).","Url":"https://github.com/aspnet/Blazor/issues/885","RelatedDescription":"Open issue \"string constant for @page directive\" (#885)"},{"Id":"326148969","IsPullRequest":true,"CreatedAt":"2018-05-24T14:55:03","Actor":"SteveSandersonMS","Number":"884","RawContent":null,"Title":"Update to Mono c06c9b78c10. Fixes #831","State":"closed","Body":"Have also added notes about how to do these Mono upgrades and refactored our `driver.c` customizations to make future upgrades a bit simpler.\r\n\r\nIf you read the diff, it might look like I've made a lot of changes to the `.c` code. But I haven't really made any functional changes. The diffs are due to:\r\n\r\n * Mono changing things in their `driver.c` drop\r\n * Me factoring out our customizations into a new file, `driver_blazor.c`. But it's exactly the same code (except for changing a couple of function names to avoid clashes with the Mono originals).","Url":"https://github.com/aspnet/Blazor/pull/884","RelatedDescription":"Closed or merged PR \"Update to Mono c06c9b78c10. Fixes #831\" (#884)"},{"Id":"326123231","IsPullRequest":true,"CreatedAt":"2018-05-24T13:30:59","Actor":"reaction1989","Number":"883","RawContent":null,"Title":"Use Angelsharp Nuget Package","State":"open","Body":"Follow up of #459\r\n\r\n#458","Url":"https://github.com/aspnet/Blazor/pull/883","RelatedDescription":"Open PR \"Use Angelsharp Nuget Package\" (#883)"},{"Id":"326027236","IsPullRequest":false,"CreatedAt":"2018-05-24T12:02:59","Actor":"markcdev","Number":"882","RawContent":null,"Title":"Unable to run standard templates","State":"closed","Body":"I followed the steps as per the documentation [here ](https://marketplace.visualstudio.com/items?itemName=aspnet.blazor) but when I run a newly created example I just get a blank screen. \r\n\r\nVersions - \r\n\r\nVisual Studio Community Edition 2017 - Version 15.7.2\r\nASP.NET Core - Version 2.1.3-preview1-008174\r\nASP.NET Core Blazor Language Services - Version 0.3.0\r\n\r\nSteps to recreate - \r\n\r\n1. Open Visual Studio\r\n2. File -> New Project -> ASP.NET Core Web Application\r\n3. Select the Blazor Template\r\n4. Build/Run the project\r\n\r\nOutput - \r\n\r\n![image](https://user-images.githubusercontent.com/10827223/40475373-5a59fa06-5f39-11e8-9455-b771c3223b1c.png)\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/882","RelatedDescription":"Closed issue \"Unable to run standard templates\" (#882)"},{"Id":"326025366","IsPullRequest":false,"CreatedAt":"2018-05-24T08:58:04","Actor":"Nymeria25","Number":"881","RawContent":null,"Title":"netstandard1.4 compatibility","State":"closed","Body":"Hi,\r\n\r\nIs Blazor compatible with netstandard1.4 at all?\r\n\r\nKindest regards.","Url":"https://github.com/aspnet/Blazor/issues/881","RelatedDescription":"Closed issue \"netstandard1.4 compatibility\" (#881)"},{"Id":"325706770","IsPullRequest":true,"CreatedAt":"2018-05-24T08:54:44","Actor":"SteveSandersonMS","Number":"878","RawContent":null,"Title":"Clean up use of relative URLs. Fixes #844 and #845","State":"closed","Body":"Previously we were handling relative URLs in various inconsistent ways. Sometimes they were assumed to start with slashes, and other times they were assumed not to do so. Likewise, APIs that were meant to match or return relative URLs did inconsistent things.\r\n\r\nIn this PR I've done a pass through (hopefully) everything that is or handles relative URLs, standardizing on a consistent pattern that:\r\n\r\n * Base URLs always have a trailing slash (just like a `<base href>` value must do, if it's going to behave as people expect)\r\n * Base-relative URLs do not have a leading slash (because if they did, they are root-relative not base-relative)\r\n\r\nThere are still a couple of edge cases:\r\n\r\n * If your site has the base href `/somedir/`, we want anyone visiting `http://yoursite/somedir` to be treated the same as if they were visiting `http://yoursite/somedir/` (i.e., so the same page would be selected and the same nav links would be highlighted). That's because devs often don't have control over the webserver config and might not be able to enforce the trailing slash as canonical.\r\n * With the `@page` directive, people will still typically give values with leading-slashes (e.g., `@page \"/\"`, not `@page \"\"`). We ignore the presence or absence of a leading slash there, because it could never have any meaning, and because people will find it hard to understand what an empty string value would mean.\r\n\r\nAltogether this fixes #844 and #845, plus is just more consistent internally.\r\n\r\n@rynowak @javiercn I'm adding you for review, but I know the contents here won't be hugely interesting as it has limited overlap with your areas. Totally fine if you want to ignore this - I'll just merge it tomorrow unless anyone raises specific concerns.","Url":"https://github.com/aspnet/Blazor/pull/878","RelatedDescription":"Closed or merged PR \"Clean up use of relative URLs. Fixes #844 and #845\" (#878)"},{"Id":"325880897","IsPullRequest":true,"CreatedAt":"2018-05-23T21:31:03","Actor":"javiercn","Number":"880","RawContent":null,"Title":"[WIP] Interop","State":"open","Body":"## Goals\r\n* Introduces improved interop from calling .NET methods from JavaScript\r\n* Introduces support for calling asynchronous methods from JavaScript\r\n* Introduces support for calling asynchronous JavaScript functions from .NET\r\n## Remaining points\r\n- [ ] API cleanup.\r\n- [ ] Protocol/Implementation cleanup.\r\n- [x] Exception handling.\r\n- [ ] More unit tests.","Url":"https://github.com/aspnet/Blazor/pull/880","RelatedDescription":"Open PR \"[WIP] Interop\" (#880)"},{"Id":"325829226","IsPullRequest":false,"CreatedAt":"2018-05-23T19:13:59","Actor":"sadqiang","Number":"879","RawContent":null,"Title":"Does Blazor support Roslyn Microsoft.CodeAnalysis.CSharp.Scripting? ","State":"closed","Body":"I love creating applications with code generated on the fly by Roslyn. For example, I can evaluate mathematical expression on the fly without having to rolling my own parser.\r\n\r\n[Scripting API Samples with Roslyn](https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples) shows some examples how to evaluate mathematical expression on the fly.\r\n\r\nSo my question is:\r\n\r\n> Does Blazor support Roslyn to evaluate mathematical expression on the fly?","Url":"https://github.com/aspnet/Blazor/issues/879","RelatedDescription":"Closed issue \"Does Blazor support Roslyn Microsoft.CodeAnalysis.CSharp.Scripting? \" (#879)"},{"Id":"325462902","IsPullRequest":false,"CreatedAt":"2018-05-23T14:57:52","Actor":"stavroskasidis","Number":"875","RawContent":null,"Title":"@ChildContent issues with content that contains an html element followed by a text node (0.4.0)","State":"closed","Body":"I am using **Blazor 0.4.0-preview1-10292** and I am experiencing the following bug (it works in **0.3.0**).\r\nRendering a `RenderFragment ChildContent` that contains an html element, followed by text will not render.\r\n\r\nHere is an example and how to reproduce:\r\n\r\n#### _MyComponent.cshtml_\r\n```html\r\n<div>\r\n    @ChildContent\r\n</div>\r\n\r\n@functions{\r\n    [Parameter] RenderFragment ChildContent { get; set; }\r\n}\r\n```\r\n\r\n\r\n#### _Index.cshtml_\r\n```html\r\n<div>\r\n    <div><span class=\"oi oi-home\"></span> I am rendered !</div>\r\n    <MyComponent><span class=\"oi oi-home\"></span> I am not rendered</MyComponent>\r\n    <MyComponent><span class=\"oi oi-home\"></span>I am not rendered either</MyComponent>\r\n</div>\r\n```\r\n\r\n#### _Output_\r\n```\r\n<div>\r\n    <div><span class=\"oi oi-home\"></span> I am rendered !</div>\r\n    <!--!--><div>\r\n    \r\n</div>\r\n    <!--!--><div>\r\n    \r\n</div>\r\n</div>\r\n```\r\n","Url":"https://github.com/aspnet/Blazor/issues/875","RelatedDescription":"Closed issue \"@ChildContent issues with content that contains an html element followed by a text node (0.4.0)\" (#875)"},{"Id":"325635900","IsPullRequest":true,"CreatedAt":"2018-05-23T14:57:50","Actor":"SteveSandersonMS","Number":"876","RawContent":null,"Title":"Handle ChildContent that starts with an HTML element. Fixes #875","State":"closed","Body":"A trivial one-line fix for #875. If a component's child content started with an HTML element rather than some text, the runtime codewriter output wasn't capturing the child content correctly.\r\n\r\nThe design-time codewriter output was already fine but I've added a baseline for it anyway.","Url":"https://github.com/aspnet/Blazor/pull/876","RelatedDescription":"Closed or merged PR \"Handle ChildContent that starts with an HTML element. Fixes #875\" (#876)"},{"Id":"325659759","IsPullRequest":false,"CreatedAt":"2018-05-23T11:16:38","Actor":"ncarandini","Number":"877","RawContent":null,"Title":"CLI Template 1.0 from Blazor developer feed older than version 0.3.0 from NuGet feed?","State":"open","Body":"Hi, I've found that having an active NuGet source pointing to the Blazor developer feed (`https://dotnet.myget.org/F/blazor-dev/api/v3/index.json`) and executing `dotnet new -i Microsoft.AspNetCore.Blazor.Templates` install a `1.0 version template` that seems to be older that the template version 0.3.0 installed from the default NuGet source (https://api.nuget.org/v3/index.json).\r\n\r\nI know that adding the Blazor developer feed (`https://dotnet.myget.org/F/blazor-dev/api/v3/index.json` ) to the NuGet source list isn't necessary anymore now that it's included in the `RestoreSources` section of the project file, but having it shouldn't produce weird effects.\r\n\r\nMaybe is better to remove the CLI Template version \"1.0\" from the Blazor developer feed, because the 0.3.0 version of the CLI template found in the official NuGet feed seems newer than the 1.0 one found in the  Blazor developer feed.\r\n\r\n### Step to reproduce:\r\n1. Add the NuGet source from VS:\r\n![image](https://user-images.githubusercontent.com/139274/40420513-f40b70a0-5e88-11e8-98c7-eafc1b603c14.png)\r\n2. Open a command window and execute `dotnet new -i Microsoft.AspNetCore.Blazor.Templates`\r\n3. Check the `%userprofile%\\.templateengine\\dotnetcli\\v2.1.300-rc1-008673\\packages` folder, and verify that there is a file named `microsoft.aspnetcore.blazor.templates.1.0.0.nupkg` .\r\n4. Create from CLI a new Blazor app with `dotnet new blazor` command.\r\n5. Open the .csproj file and you'll find that the packages referenced are the 0.2.0 ones:\r\n![image](https://user-images.githubusercontent.com/139274/40420785-bc94b612-5e89-11e8-8582-ec33133a917f.png)\r\n6. Compare with a new Blazor app created with the latest \"official\" template version 0.3.0 where the packages referenced are the 0.3.0","Url":"https://github.com/aspnet/Blazor/issues/877","RelatedDescription":"Open issue \"CLI Template 1.0 from Blazor developer feed older than version 0.3.0 from NuGet feed?\" (#877)"},{"Id":"325420775","IsPullRequest":true,"CreatedAt":"2018-05-22T20:58:05","Actor":"rynowak","Number":"874","RawContent":null,"Title":"Add regression test for 609","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/874","RelatedDescription":"Closed or merged PR \"Add regression test for 609\" (#874)"},{"Id":"325383910","IsPullRequest":false,"CreatedAt":"2018-05-22T20:54:18","Actor":"SIkebe","Number":"870","RawContent":null,"Title":"Blazor uses old version of .NET Core SDK","State":"closed","Body":"Blazor 0.3.0 requires dotnet core SDK 2.1.300-preview2-008533 or later.\r\nhttps://blogs.msdn.microsoft.com/webdev/2018/05/02/blazor-0-3-0-experimental-release-now-available/\r\n\r\nHowever, Blazor itself uses 2.1.300-preview2-008367 to build.\r\nhttps://github.com/aspnet/Blazor/blob/efc737b21492d5b74157b447256396d752a5d598/global.json#L1\r\n\r\nIs there any reason to use prior version? Not RC1?","Url":"https://github.com/aspnet/Blazor/issues/870","RelatedDescription":"Closed issue \"Blazor uses old version of .NET Core SDK\" (#870)"},{"Id":"325405448","IsPullRequest":true,"CreatedAt":"2018-05-22T20:53:15","Actor":"rynowak","Number":"872","RawContent":null,"Title":"Update Korebuild","State":"closed","Body":"Related to #870","Url":"https://github.com/aspnet/Blazor/pull/872","RelatedDescription":"Closed or merged PR \"Update Korebuild\" (#872)"},{"Id":"325414891","IsPullRequest":true,"CreatedAt":"2018-05-22T18:58:47","Actor":"rynowak","Number":"873","RawContent":null,"Title":"Fix #784 - allow complex content for HTML","State":"closed","Body":"The logic that binds event handlers was interfering with the code that\r\nprevents component properties from receiving complex content.\r\n\r\nThis check was a little overzealous.","Url":"https://github.com/aspnet/Blazor/pull/873","RelatedDescription":"Closed or merged PR \"Fix #784 - allow complex content for HTML\" (#873)"},{"Id":"325404520","IsPullRequest":false,"CreatedAt":"2018-05-22T18:22:46","Actor":"timnazar","Number":"871","RawContent":null,"Title":"error CS1617: Invalid option '7.3' for /langversion","State":"closed","Body":"```\r\nprecious:~ timnazar$ dotnet new blazor -o thoughts\r\nThe template \"Blazor (standalone)\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on thoughts/thoughts.csproj...\r\n  Restoring packages for /Users/timnazar/thoughts/thoughts.csproj...\r\n  Restore completed in 168.01 ms for /Users/timnazar/thoughts/thoughts.csproj.\r\n  Generating MSBuild file /Users/timnazar/thoughts/obj/thoughts.csproj.nuget.g.props.\r\n  Generating MSBuild file /Users/timnazar/thoughts/obj/thoughts.csproj.nuget.g.targets.\r\n  Restore completed in 465.43 ms for /Users/timnazar/thoughts/thoughts.csproj.\r\n\r\nRestore succeeded.\r\n\r\nprecious:~ timnazar$ cd thoughts\r\nprecious:thoughts timnazar$ dotnet run\r\nCSC : error CS1617: Invalid option '7.3' for /langversion. Use '/langversion:?' to list supported values. [/Users/timnazar/thoughts/thoughts.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n\r\n```\r\nThe newly created project is failed on compiling. what's wrong?\r\n\r\n**.net core version: 2.1.4\r\nos: macOS 10.13.4**\r\n","Url":"https://github.com/aspnet/Blazor/issues/871","RelatedDescription":"Closed issue \"error CS1617: Invalid option '7.3' for /langversion\" (#871)"},{"Id":"325299822","IsPullRequest":false,"CreatedAt":"2018-05-22T14:25:39","Actor":"InnovationGB","Number":"869","RawContent":null,"Title":"<input type=\"date\"/> breaks when adding bind=\"@model.name\"","State":"closed","Body":"                <div class=\"formCont1\">\r\n                    <input type=\"date\" />   \r\n                </div>\r\n\r\nThis shows a datepicker with native styling from the browser,\r\n\r\nIf i make it  \r\n`<input type=\"date\" bind=\"@ath.EmailAddres\"/> `\r\n the date picker becomes  unusable, in firefox it simply keeps resetting the type to text and in chrome it resets the value to mm/dd/yyyy everytime you pick a date. Strange","Url":"https://github.com/aspnet/Blazor/issues/869","RelatedDescription":"Closed issue \"<input type=\"date\"/> breaks when adding bind=\"@model.name\"\" (#869)"},{"Id":"325274317","IsPullRequest":true,"CreatedAt":"2018-05-22T12:36:39","Actor":"RemiBou","Number":"868","RawContent":null,"Title":"manages when users clicks on a link with the control button pushed. ","State":"open","Body":"- added E2E test for checking 2 windows opened after click with ctrl hold\r\n- added E2E test for checking 1 window opened after click without ctrl hold\r\n\r\nissue #867","Url":"https://github.com/aspnet/Blazor/pull/868","RelatedDescription":"Open PR \"manages when users clicks on a link with the control button pushed. \" (#868)"},{"Id":"324703107","IsPullRequest":false,"CreatedAt":"2018-05-22T09:18:54","Actor":"a-student","Number":"862","RawContent":null,"Title":"Ability to run Blazor code inside web worker is needed","State":"closed","Body":"Currently Blazor startup code is tighted to `window` and `document` objects, but worker global object does not have these.\r\nBy the way, some optimization to startup inside a worker can be made [because](https://webassembly.org/getting-started/js-api)\r\n> A WebAssembly.Module object is stateless and supports structured cloning which means that the compiled code can be stored in IndexedDB and/or shared between windows and workers via postMessage\r\n\r\nAt the present time I am using the workaround:\r\n```js\r\nconst xhr = require(\"xhr\");\r\nconst parse5 = require(\"parse5\");\r\n\r\n// index.html content: <script type=\"blazor-boot\"></script>\r\nxhr(\"index.html\", (error, response, body) => {\r\n    if (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n\r\n    const script = parse5.parseFragment(body).childNodes[0];\r\n    const src = script.attrs.find(x => x.name === \"src\").value; // \"_framework/blazor.js\"\r\n\r\n    window = self;\r\n    document = {\r\n        currentScript: {\r\n            getAttribute: name => script.attrs.find(x => x.name === name).value\r\n        },\r\n        getElementsByTagName: () => [],\r\n        write: content => {\r\n            const script = parse5.parseFragment(content).childNodes[0];\r\n            if (script.tagName !== \"script\") throw new Error(\"Script is expected here.\");\r\n            const src = script.attrs.find(x => x.name === \"src\").value;\r\n            setTimeout(() => importScripts(src));\r\n        }\r\n    };\r\n\r\n    importScripts(src);\r\n\r\n    // handle onmessage and do some useful things\r\n});\r\n```\r\nDoesn’t it look ugly?\r\n","Url":"https://github.com/aspnet/Blazor/issues/862","RelatedDescription":"Closed issue \"Ability to run Blazor code inside web worker is needed\" (#862)"},{"Id":"324744826","IsPullRequest":false,"CreatedAt":"2018-05-22T09:17:39","Actor":"Andrzej-W","Number":"863","RawContent":null,"Title":"Blazor template and documentation improvement","State":"closed","Body":"Currently it is not so obvious how to pass arbitrary data to event handlers. I think it is not possible directly:\r\n```javascript\r\nonclick=@OnTableRowClic(referenceToCustomer)\r\n```\r\nand a small workaround is necessary (lambda expression). It would be nice to see it in default Blazor template and in the documentation. My suggestion is to add/modify a few lines in FetchData.cshtm\r\n```html\r\n<p>This component demonstrates fetching data from the server.</p>\r\n<!-- New line below -->\r\n<p>Click on any row to see selected date here: @(selectedDate != default(DateTime) ? selectedDate.ToLongDateString() : string.Empty)</p>\r\n```\r\n```html\r\n<tbody>\r\n    @foreach (var forecast in forecasts)\r\n    {\r\n        <!-- Add onclick handler -->\r\n        <tr onclick=\"@(() => OnRowClick(forecast))\">\r\n```\r\nAdd this in `@functions`\r\n```c#\r\nDateTime selectedDate;\r\nvoid OnRowClick(WeatherForecast forecast)\r\n{\r\n    selectedDate = forecast.Date;\r\n}\r\n```\r\nIn documentation (Components, Event handling) there is an information\r\n\r\n> Lambda expressions can also be used:\r\n> `<button onclick=\"@(e => Console.WriteLine(\"Hello, world!\"))\">Say hello</button>`\r\n> \r\n\r\nI think my example is a little bit better.\r\n\r\nMaybe in Blazor 0.4.0 we will have access to some useful data in event objects. If so, you can add an event object:\r\n```html\r\n<tbody>\r\n    @foreach (var forecast in forecasts)\r\n    {\r\n        <!-- Add onclick handler -->\r\n        <tr onclick=\"@((ev) => OnRowClick(ev, forecast))\">\r\n```\r\nand do something with it:\r\n```c#\r\nDateTime selectedDate;\r\nvoid OnRowClick(UIMouseEventArgs ev, WeatherForecast forecast)\r\n{\r\n    // x = ev.x ???\r\n    selectedDate = forecast.Date;\r\n}\r\n```\r\n","Url":"https://github.com/aspnet/Blazor/issues/863","RelatedDescription":"Closed issue \"Blazor template and documentation improvement\" (#863)"},{"Id":"324747168","IsPullRequest":false,"CreatedAt":"2018-05-22T09:16:08","Actor":"Andrzej-W","Number":"864","RawContent":null,"Title":"Detect component parameter name errors at compile time","State":"closed","Body":"Let's assume I have a component with parameter and I use it in some cshtml file like this:\r\n```html\r\n<MyComponent ParamName=\"something\"></MyComponent>\r\n```\r\nIntellisese works correctly and it is easy to write correct parameter name. Now let's assume I want to do some refactoring and I'm changing parameter name (in MyComponent source code) to something else.\r\n\r\nFirst, I would like to have the possibility to press `<Ctrl>+<.>` and select Rename. Unfortunately this doesn't work in cshtml files :cry: So it is easy to introduce some errors in code and those errors are not detected at compile time - we get runtime exception. It is not what we want. Blazor should be better than JavaScript.","Url":"https://github.com/aspnet/Blazor/issues/864","RelatedDescription":"Closed issue \"Detect component parameter name errors at compile time\" (#864)"},{"Id":"325062015","IsPullRequest":false,"CreatedAt":"2018-05-22T09:12:41","Actor":"WayneHiller","Number":"866","RawContent":null,"Title":"Large Projects","State":"closed","Body":"My understanding it that the entire \"client\" will be loaded into the browser. Has anyone tested how large a Blazor project can get before the browser starts having issues?\r\n\r\nI have a large project that I would like to test out in Blazor but it is too large (I think) for a single SPA. Has there been any discussion around the ability to maybe have some kind of modules that could be loaded from a URL server side? \r\n\r\nIs there any way to do this kind of thing currently? So just as an example my project might have a Sales module, Customers module, Inventory module etc.  Each module could be loaded into the browser as it's own \"Blazor\" client side package. Some how the Server would need to know what \"module\" to send to the browser when it receives a request for one.\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/866","RelatedDescription":"Closed issue \"Large Projects\" (#866)"},{"Id":"325084605","IsPullRequest":false,"CreatedAt":"2018-05-21T22:52:02","Actor":"Andrzej-W","Number":"867","RawContent":null,"Title":"Ctrl/Shift Click on internal application link doesn't open in a new browser tab/window","State":"open","Body":"Standard behaviour for Ctrl/Shift Click in Firefox/Chrome/Edge is to open link in a new browser tab or window. Unfortunately this does not work for internal links in Blazor application. Middle mouse click doesn't work either (it works like standard left click). Blazor also doesn't respect `target=\"_blank\"` attribute for internal links.\r\n\r\n**Update:** Middle Click doesn't work only in Firefox on Blazor 0.3.0. It works on 0.2.0. Ctrl+Click works in Edge.\r\n\r\nI can right-click on internal link and select \"Open in a new tab/window\" from context menu - this does work.\r\n\r\n**Why we need this behaviour?**\r\nFirst it is needed for consistency. Second, in LOB applications people often have to see related data from different modules. To do this in the browser they can Ctrl Click on the link to open it in a new browser tab and then drag this tab to the second monitor - it is very convenient.","Url":"https://github.com/aspnet/Blazor/issues/867","RelatedDescription":"Open issue \"Ctrl/Shift Click on internal application link doesn't open in a new browser tab/window\" (#867)"},{"Id":"324812420","IsPullRequest":false,"CreatedAt":"2018-05-21T09:15:27","Actor":"LaurenceFrost","Number":"865","RawContent":null,"Title":"Cannot run Blazor with .NET Core 2.1","State":"closed","Body":"When I create a new Blazor project, it will run as expected , and by default targets .NET Standard 2.0. I want to target .NET Core 2.1 specifically.\r\n\r\nHowever, when I switch it to 2.1 I get the following compiler warning:\r\n\r\n> Error\tMSB3073\tThe command \"dotnet \"C:\\Users\\laure\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.3.0\\targets\\../tools/illink/illink.dll\" -c link -u link -t --verbose  -d \"C:\\Users\\laure\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.3.0\\targets\\../tools/mono/bcl/\" -d \"C:\\Users\\laure\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.3.0\\targets\\../tools/mono/bcl/Facades/\" -o \"C:\\Users\\laure\\source\\repos\\BlazorTest2\\BlazorTest2.WebClient\\obj\\Debug\\netcoreapp2.1\\blazor/linker/\" -x \"C:\\Users\\laure\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.3.0\\targets\\BuiltInBclLinkerDescriptor.xml\" -x \"C:\\Users\\laure\\source\\repos\\BlazorTest2\\BlazorTest2.WebClient\\obj\\Debug\\netcoreapp2.1\\blazor\\linker.descriptor.xml\" -a \"C:\\Users\\laure\\.nuget\\packages\\microsoft.aspnetcore.blazor\\0.3.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.dll\" -a \"C:\\Users\\laure\\.nuget\\packages\\microsoft.aspnetcore.blazor.browser\\0.3.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.Browser.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.0.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.0.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" -a \"C:\\Users\\laure\\source\\repos\\BlazorTest2\\BlazorTest2.WebClient\\obj\\Debug\\netcoreapp2.1\\BlazorTest2.WebClient.dll\"\" exited with code 1.\tBlazorTest2.WebClient\tC:\\Users\\laure\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.3.0\\targets\\Blazor.MonoRuntime.targets\t441\t\r\n\r\nSteps to replicate this:\r\n\r\n1) Create a new Blazor project.\r\n2) Edit the .csproj file and change \"<TargetFramework>netstandard2.0</TargetFramework>\" to \"<TargetFramework>netcoreapp2.1</TargetFramework>\".\r\n\r\nIs there something I am doing incorrectly? I have the .NET core 2.1 RC1 SDK installed.","Url":"https://github.com/aspnet/Blazor/issues/865","RelatedDescription":"Closed issue \"Cannot run Blazor with .NET Core 2.1\" (#865)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-05-28T05:30:02.8932935Z","RunDurationInMilliseconds":1228}