{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7279542852","Type":"PullRequestEvent","CreatedAt":"2018-02-22T05:13:41","Actor":"dotnet-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16495","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#16495) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"7279535007","Type":"IssuesEvent","CreatedAt":"2018-02-22T05:10:25","Actor":"iSazonov","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15542","RelatedDescription":"Closed issue \"Q: How set a thread stack size?\" (#15542) at dotnet/coreclr","RelatedBody":"In PowerShell repo we catch [an recursion Issue](https://github.com/PowerShell/PowerShell/issues/4268) likely with thread stack size. PowerShell code create threads with default stack size so I tried to set a thread stack size by [COMPlus_DefaultStackSize](https://github.com/dotnet/coreclr/blob/08d39ddf02c81c99bd49c19b808c855235cbabdc/src/pal/src/init/pal.cpp#L213) env variable on Windows. But it seems the env variable is ignored - VMMap utility show 1536 KB thread stack size.\r\nAlso we have report that direct size setting in C# code does not resolve our Issue on MacOS.\r\n\r\n1. What do we wrong? How can we set thread stack size?\r\n2. How we can enable and see [the trace](https://github.com/dotnet/coreclr/blob/c440335be80ee0762856d0be6e91ec3ea2f90504/src/pal/src/thread/thread.cpp#L663) for threads?\r\n3. Does COMPlus_DefaultStackSize really work?\r\n"},{"Id":"7279523121","Type":"PullRequestEvent","CreatedAt":"2018-02-22T05:05:23","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16481","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#16481) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"7279489547","Type":"PullRequestEvent","CreatedAt":"2018-02-22T04:51:30","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16494","RelatedDescription":"Opened pull request \"Fix EventPipe Test Failures Under GCStress\" (#16494) at dotnet/coreclr","RelatedBody":" - Disable the EventPipe Induced GC test because under GCStress the induced GC count is much higher than the test expects.\r\n - Suppress the HOST_NOCALL violation in EventPipe::WalkManagedStackForThread as this contract does not apply on CoreCLR.\r\n\r\nFixes #16374.\r\n\r\ncc: @BruceForstall "},{"Id":"7279452219","Type":"PullRequestEvent","CreatedAt":"2018-02-22T04:35:26","Actor":"JeremyKuhne","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16311","RelatedDescription":"Closed pull request \"Removing the colon block that tosses out paths that are not device path.\" (#16311) at dotnet/coreclr","RelatedBody":"Fixes: dotnet/corefx#26359\r\n\r\nWill create the corefx PR updating System.Runtime.Extensions shortly.\r\nFYI, WIP: https://github.com/maryamariyan/corefx/pull/21/files"},{"Id":"7279364573","Type":"IssuesEvent","CreatedAt":"2018-02-22T03:59:50","Actor":"fiigii","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16493","RelatedDescription":"Opened issue \"[RyuJIT] SSE2 movd has incorrect JITDump\" (#16493) at dotnet/coreclr","RelatedBody":"```asm\r\nIN0006: 000030 8B4520               mov      eax, dword ptr [rbp+20H]\r\nIN0007: 000033 0FB6C0               movzx    rax, al\r\nIN0008: 000036 C4E1796EC8           vmovd    xmm1, xrax\r\nIN0009: 00003B C4E17DF3C1           vpsllq   ymm0, ymm0, ymm1\r\nIN000a: 000040 C4E17D1145D0         vmovupd  ymmword ptr[rbp-30H], ymm0\r\nIN000b: 000046 C4E17D1045D0         vmovupd  ymm0, ymmword ptr[rbp-30H]\r\n```\r\nThe encoding is correct, but JITDump should be `vmovd    xmm1, eax`.\r\n\r\nThis disasm is compiled from \r\n```\r\n               [000012] ------------              *  STMT      void  (IL 0x000...  ???)\r\n               [000007] ------------              |     /--*  HWIntrinsic simd16 int ConvertScalarToVector128Int32\r\n               [000004] ------------              |     |  \\--*  LCL_VAR   ubyte  V02 arg1         \r\n               [000008] ------------              |  /--*  HWIntrinsic simd32 ushort ShiftLeftLogical\r\n               [000006] x-----------              |  |  \\--*  OBJ(32)   simd32\r\n               [000005] L-----------              |  |     \\--*  ADDR      byref \r\n               [000003] ------------              |  |        \\--*  LCL_VAR   simd32 V01 arg0         \r\n               [000011] -A------R---              \\--*  ASG       simd32 (copy)\r\n               [000009] D-----------                 \\--*  LCL_VAR   simd32 V03 loc0     \r\n```\r\n\r\n@4creators PTAL"},{"Id":"7279166325","Type":"PullRequestEvent","CreatedAt":"2018-02-22T02:44:05","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16492","RelatedDescription":"Opened pull request \"JIT: don't trust field offsets in R2R for nullcheck bypass\" (#16492) at dotnet/coreclr","RelatedBody":"When the jit is forming an field address to pass off to points unknown\r\nit will nullcheck at the point of creation, unless it can prove that the\r\nfield is at offset zero. Unfortunately in R2R mode field offsets are not\r\nknown at jit time and so a zero value seen when prejitting may end up\r\nbeing nonzero when the code is loaded and fixed up and fool the jit into\r\nomitting a null check that is potentially needed.\r\n\r\nSo in R2R mode, always emit null checks.\r\n\r\nFixes #16454."},{"Id":"7279091057","Type":"IssuesEvent","CreatedAt":"2018-02-22T02:17:41","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16299","RelatedDescription":"Closed issue \"[Arm64] Create Bootstrap Command Line Build Tools for Preview 2.1\" (#16299) at dotnet/coreclr","RelatedBody":"@janvorli was able to help me build a bootstrap command line tool `dotnet` for Arm64 based on the 2.0 release.  Unfortunately this was unstable.\r\n\r\nNow that 2.1 release is approaching, I would like to build a new bootstrap tool chain based on the 2.1 AMD64 preview release.\r\n\r\nTo make this simple I need\r\n\r\n1. AMD64 Ubuntu 2.1 preview CLI & SDK toolchain.  Is there a 2.1 CLI/SDK actively being built?  Are there artifacts somewhere?\r\n2. Windows 2.1 CoreCLR 2.1 build with test artifacts.  Is the 2.1 branch of CoreCLR being actively built?  Are there artifacts in CI somewhere?\r\n3. A patch to CoreCLR to make it build with the AMD64 Ubuntu 2.1 preview CLI & SDK toolchain.  \r\nLinux My testing of the 2.0 CLI was based on attempting to build CoreCLR.  This seemed like a pretty rigorous test.  Is there a branch of CoreCLR which will build successfully with a preview 2.1 tool chain?  Is it difficult to build CoreCLR with a different tool chain?  \r\n\r\n@jkotas @RussKeldorph I am not sure who the correct people to ask about this or if this is premature.\r\n\r\n"},{"Id":"7279089630","Type":"IssuesEvent","CreatedAt":"2018-02-22T02:17:11","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16491","RelatedDescription":"Opened issue \"[Arm64/Ubuntu] Arm64 Bootstrap CLI is unstable\" (#16491) at dotnet/coreclr","RelatedBody":"I build a Arm64 Bootstrap CLI using https://github.com/dotnet/source-build/pull/332\r\n\r\nThe dotnet command sometimes fails,\r\n\r\nFor instance:\r\n\r\n```\r\ndotnet new console\r\ndotnet restore\r\ndotnet restore\r\ndotnet restore\r\ndotnet restore\r\n...\r\n...\r\n...\r\ndotnet restore\r\ndotnet restore\r\ndotnet restore\r\ndotnet restore\r\n```\r\nIf I run `dotnet restore` multiple times it occasionally fails. Out of about 30 runs, I saw:\r\n+ 2 hangs\r\n+ 5 exceptions which looked like GC holes\r\n\r\nSimilar issues exist with `dotnet build`\r\n\r\nI am hoping the hangs are related to the tailcall hijacking issue @janvorli fixed recently.\r\n\r\nThe GC holes look similar to some of the spurious gcStress failures.  I'll provide more details when I get back to the office.  \r\n\r\n@dotnet/arm64-contrib @dotnet/jit-contrib @Maoni0 @swgillespie "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7279053455","Type":"PullRequestEvent","CreatedAt":"2018-02-22T02:04:23","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8660","RelatedDescription":"Merged pull request \"Trigger build with unambiguous commit height\" (#8660) at dotnet/cli","RelatedBody":"The release/2.1.2xx had a few builds where it still had 2.1.100 branding. This causes 2.1.1xx builds to fail because they conflict with what 2.1.2xx published. Worse, the 2.1.2xx-produced builds look like they are 2.1.100 builds but have an inappropriate payload -- for example, a 4.7/15.7 daily build of nuget. \r\n\r\nWe are going to be discussing moving away from commit height versioning tomorrow, but we need a build tonight that is suitable for inserting into Visual Studio tomorrow morning. So, as a workaround, this adds enough commits to get a version that is greater than any of the phony 2.1.100 builds that were produced out of the wrong branch. We also need to have a better process for updating branding whenever a release branch is created.\r\n\r\nFor obvious reasons, do not squash this when merging."},{"Id":"7278845073","Type":"PullRequestEvent","CreatedAt":"2018-02-22T00:55:18","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8654","RelatedDescription":"Merged pull request \"Merge release/2.1.3xx to master\" (#8654) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7278839155","Type":"PullRequestEvent","CreatedAt":"2018-02-22T00:53:24","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8658","RelatedDescription":"Merged pull request \"Update branding to 2.1.200\" (#8658) at dotnet/cli","RelatedBody":""},{"Id":"7278795306","Type":"PullRequestEvent","CreatedAt":"2018-02-22T00:39:09","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8660","RelatedDescription":"Opened pull request \"Trigger build with unambiguous commit height\" (#8660) at dotnet/cli","RelatedBody":"The release/2.1.2xx had a few builds where it still had 2.1.100 branding. This causes 2.1.1xx builds to fail because they conflict with what 2.1.2xx published. Worse, the 2.1.2xx-produced builds look like they are 2.1.100 builds but have an inappropriate payload -- for example, a 4.7/15.7 daily build of nuget. \r\n\r\nWe are going to be discussing moving away from commit height versioning tomorrow, but we need a build tonight that is suitable for inserting into Visual Studio tomorrow morning. So, as a workaround, this adds enough commits to get a version that is greater than any of the phony 2.1.100 builds that were produced out of the wrong branch.\r\n\r\nFor obvious reasons, do not squash this when merging."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7278544876","Type":"IssuesEvent","CreatedAt":"2018-02-21T23:23:41","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/657","RelatedDescription":"Opened issue \"Update CI scripts to use vswhere\" (#657) at dotnet/standard","RelatedBody":"From a recent BuildTools change that depended on msbuild 15 features it was clear that we haven't updated the standard repo to correctly detect which msbuild to use. We should update netci.groovy to not call vsdevcmd and instead update the run scripts similar to corefx. "},{"Id":"7272997768","Type":"PullRequestEvent","CreatedAt":"2018-02-21T02:06:34","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/656","RelatedDescription":"Opened pull request \"Update BuildTools to preview2-02521-01 (master)\" (#656) at dotnet/standard","RelatedBody":""},{"Id":"7272799574","Type":"IssuesEvent","CreatedAt":"2018-02-21T00:59:04","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/655","RelatedDescription":"Closed issue \".NET Standard project does not bring its package-originated dependencies with it\" (#655) at dotnet/standard","RelatedBody":"Let's say I have two projects: A targeting .NET Framework 4.6.1 and B targeting .NET Standard 2.0\r\nThe B project has a C dependency; this dependency is supplied by the correspondent NuGet package.\r\nA also references B. When I hit 'Build' I see that B output is copied to the A output folder which is the expected result. I also expect the C dependency to be copied as well. However this doesn't happen.\r\nIs this by design?"},{"Id":"7272795258","Type":"PullRequestEvent","CreatedAt":"2018-02-21T00:57:38","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/653","RelatedDescription":"Merged pull request \"Update BuildTools to preview2-02520-02 (master)\" (#653) at dotnet/standard","RelatedBody":""},{"Id":"7267513701","Type":"IssuesEvent","CreatedAt":"2018-02-20T05:35:27","Actor":"godrose","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/655","RelatedDescription":"Opened issue \".NET Standard project does not bring its package-originated dependencies with it\" (#655) at dotnet/standard","RelatedBody":"Let's say I have two projects: A targeting .NET Framework 4.6.1 and B targeting .NET Standard 2.0\r\nThe B project has a C dependency; this dependency is supplied by the correspondent NuGet package.\r\nA also references B. When I hit 'Build' I see that B output is copied to the A output folder which is the expected result. I also expect the C dependency to be copied as well. However this doesn't happen.\r\nIs this by design?"},{"Id":"7261455638","Type":"IssuesEvent","CreatedAt":"2018-02-18T20:55:57","Actor":"JamesNK","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/654","RelatedDescription":"Closed issue \"netstandard2.0 errors - The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\" (#654) at dotnet/standard","RelatedBody":"I have a class library that is completely successful with net45 or netstandard1.3. But adding netstandard2.0 to the TargetFrameworks generates thousands of errors:\r\n\r\n```\r\n1>JSchemaValidatingReader.cs(151,13,151,26): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n1>JSchemaValidatingWriter.cs(85,16,85,24): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n1>JSchemaValidatingReader.cs(57,16,57,24): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n1>JSchemaValidatingReader.cs(121,16,121,23): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n1>JSchemaValidatingReader.cs(131,16,131,26): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n1>JSchemaValidatingWriter.cs(198,42,198,51): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n1>JSchemaValidatingWriter.cs(198,42,198,51): error CS0012: The type 'Enum' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n1>JSchemaValidatingReader.cs(250,25,250,33): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n1>JSchemaValidatingReader.cs(263,25,263,39): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n1>JSchemaValidatingReader.cs(103,35,103,44): error CS0012: The type 'Enum' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n```\r\n\r\nBuild the repo here to see the problem is action - https://github.com/JamesNK/Newtonsoft.Json.Schema/tree/netstandard2-broken"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7279535970","Type":"PullRequestEvent","CreatedAt":"2018-02-22T05:10:50","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27099","RelatedDescription":"Merged pull request \"Removed duplicated Implementation of CultureAwareComparer\" (#27099) at dotnet/corefx","RelatedBody":"Shared Coreclr Implementation PR - https://github.com/dotnet/coreclr/pull/16334\r\nRelated to dotnet/corefx#395\r\nTests PR - dotnet/corefx#27051"},{"Id":"7279409309","Type":"PullRequestEvent","CreatedAt":"2018-02-22T04:17:43","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27348","RelatedDescription":"Opened pull request \"Update tests for Path changes\" (#27348) at dotnet/corefx","RelatedBody":"Updates for https://github.com/dotnet/coreclr/pull/16478\r\n\r\nTagged these tests with #27269 as they're related. Will update for both PRs from CoreCLR.\r\n\r\ncc: @danmosemsft "},{"Id":"7279380329","Type":"IssuesEvent","CreatedAt":"2018-02-22T04:05:36","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/12892","RelatedDescription":"Closed issue \"Add a more flexible special folder API\" (#12892) at dotnet/corefx","RelatedBody":"The current `Environment.GetFolderPath()` is based on the pre Windows Vista `CSIDL` based `SHGetFolderPath`. This API was depreciated and doesn't have any of the special folders introduced in Vista and beyond. We've updated the internal implementation in CoreFX to use the new `SHGetKnownFolderPath`, which takes a Guid. If we exposed a Guid based API we would allow:\n1. Accessing newer or user registered special folders in Windows without code updates\n2. Creating entries that we map to some more abstract cross-plat concept\n3. Allow adding mappings on different runtimes/platforms that don't require updating all of the others\n\nSomething like the following:\n\n``` C#\npublic static class Environment\n{\n    public static string GetFolderPath(Guid folderIdentifier)\n    {\n    }\n}\n\npublic static class FolderGuids\n{\n     // commonly used folder ids / concepts\n\n     // potentially even have Windows/Unix specific class/subclass\n}\n```\n\nAdding values to the `SpecialFolder` enum can be complicated as there are assumptions baked into existing code that the values map directly to `CSIDL`'s. As such, the recommendation would be that the existing API be depreciated and the `Guid` API would be the primary.\n\nBehavior of asking for an unknown `Guid` would be the same as the existing API- we return `String.Empty`.\n\nI'll follow up shortly with a suggested set of predefined `Guid`s.\n"},{"Id":"7279377076","Type":"IssuesEvent","CreatedAt":"2018-02-22T04:04:17","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25536","RelatedDescription":"Closed issue \"Need Span based path join API\" (#25536) at dotnet/corefx","RelatedBody":"We need an API that does a simple join of `ReadOnlySpan<char>` segments, adding a directory separator only if needed.\r\n\r\n\r\n## Rationale and Usage\r\n\r\nWe don't have API for combining paths that works with `Span<char>`. It will become common that segments of existing strings will be combined into paths. A simple example will be getting a filename from an existing path and adding it to the directory of another.\r\n\r\n``` C#\r\n// entry being a ReadOnlySpan<char>\r\nstring path = Path.Join(directory.AsReadOnlySpan(), entry.FileName);\r\n```\r\n\r\nWe could add overloads for `Path.Combine()`, but the behavior of returning the last argument that passes `IsPathRooted()` isn't intuitive, and is not desired in the common case. If the intent was to \"resolve\" a path against another, getting the final path correct is difficult to do, particularly on Windows.  Take the following:\r\n\r\n``` C#\r\nstring result = Path.Combine(@\"C:\\Foo\", @\"\\Bar\");\r\n```\r\n\r\nThis returns `\\Bar`, which can only be correctly resolved (via `Path.GetFullPath()`) if the current directory happens to be on the `C:` drive. This can be better handled by the #25535 proposal for Path.GetFullPath().\r\n\r\nAdditionally, it is common for people to use the existing `Combine()` APIs on paths that aren't file system paths (URIs, registry paths, etc.). Adding `Join()` will allow these other scenarios to work properly.\r\n\r\n## Proposed API\r\n\r\n``` C#\r\nnamespace System.IO\r\n{\r\n    public static class Path\r\n    {\r\n        public static string Join(ReadOnlySpan<char> path1, ReadOnlySpan<char> path2);\r\n        public static string Join(ReadOnlySpan<char> path1, ReadOnlySpan<char> path2, ReadOnlySpan<char> path3);\r\n    }\r\n}\r\n```\r\n\r\n## Implementation Notes\r\n\r\n- We will add the default directory separator if either type of separator is not already present (we'll allow an existing AltDirectorySeparator to be valid)\r\n- Only spans that have a length will be combined\r\n- We will not care about rooting\r\n- This will not check the validity of the given paths in any way (character validity, etc)"},{"Id":"7279369275","Type":"IssuesEvent","CreatedAt":"2018-02-22T04:01:30","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25873","RelatedDescription":"Closed issue \"Add file enumeration extensibility points\" (#25873) at dotnet/corefx","RelatedBody":"We need low-allocating high-performance extensibility points to build solutions for enumerating files.\r\n\r\n(This is the API review for https://github.com/dotnet/designs/pull/24)\r\n\r\n## Rationale and Usage\r\n\r\nEnumerating files in .NET provides limited configurability. You can specify a simple DOS style pattern and whether or not to look recursively. More complicated filtering requires post filtering all results which can introduce a significant performance drain.\r\n\r\nRecursive enumeration is also problematic in that there is no way to handle error states such as access issues or cycles created by links.\r\n\r\nThese restrictions have a significant impact on file system intensive applications, a key example being MSBuild. This document proposes a new set of primitive file and directory traversal APIs that are optimized for providing more flexibility while keeping the overhead to a minimum so that enumeration becomes both more powerful as well as more performant.\r\n\r\nTo write a wrapper that gets files with a given set of extensions you would need to write something similar to:\r\n\r\n``` C#\r\npublic static IEnumerable<string> GetFilePathsWithExtensions(string directory, bool recursive, params string[] extensions)\r\n{\r\n    return new DirectoryInfo(directory)\r\n        .GetFiles(\"*\", recursive ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly)\r\n        .Where(f => extensions.Any(e => f.Name.EndsWith(e, StringComparison.OrdinalIgnoreCase)))\r\n        .Select(r => r.FullName);\r\n}\r\n```\r\n\r\nNot complicated to write, but this can do an enormous amount of extra allocations. You have to create full strings and `FileInfo`'s for every single item in the file system. We can cut this down significantly with the extension point:\r\n\r\n``` C#\r\npublic static IEnumerable<string> GetFileFullPathsWithExtension(string directory,\r\n    bool recursive, params string[] extensions)\r\n{\r\n    return new FileSystemEnumerable<string>(\r\n        directory,\r\n        (ref FileSystemEntry entry) => entry.ToFullPath(),\r\n        new EnumerationOptions() { RecurseSubdirectories = recursive })\r\n        {\r\n            ShouldIncludePredicate = (ref FileSystemEntry entry) =>\r\n            {\r\n                if (entry.IsDirectory) return false;\r\n                foreach (string extension in extensions)\r\n                {\r\n                    if (Path.GetExtension(entry.FileName).EndsWith(extension, StringComparison.OrdinalIgnoreCase))\r\n                        return true;\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n}\r\n```\r\n\r\nThe number of allocation reductions with the above solution is significant.\r\n\r\n- No `FileInfo` allocations\r\n- No fullpath string allocations for paths that don't match\r\n- No filename allocations for paths that don't match (as the filename will still be in the native buffer at this point)\r\n\r\n> Note that while you can write a solution that doesn't allocate a `FileInfo` by using the `string[]` APIs and `GetFullPath()` it would still allocate unneeded strings and introduce costly normalization overhead.\r\n\r\n## Proposed API\r\n\r\n``` C#\r\nnamespace System.IO\r\n{\r\n    public static partial class Directory\r\n    {\r\n        public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions);\r\n        public static IEnumerable<string> EnumerateFiles(string path, string searchPattern, EnumerationOptions enumerationOptions);\r\n        public static IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, EnumerationOptions enumerationOptions);\r\n        public static string[] GetDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions);\r\n        public static string[] GetFiles(string path, string searchPattern, EnumerationOptions enumerationOptions);\r\n        public static string[] GetFileSystemEntries(string path, string searchPattern, EnumerationOptions enumerationOptions);\r\n    }\r\n\r\n    public sealed partial class DirectoryInfo\r\n    {\r\n        public IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern, EnumerationOptions enumerationOptions);\r\n        public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern, EnumerationOptions enumerationOptions);\r\n        public IEnumerable<FileInfo> EnumerateFiles(string searchPattern, EnumerationOptions enumerationOptions);\r\n        public DirectoryInfo[] GetDirectories(string searchPattern, EnumerationOptions enumerationOptions);\r\n        public FileInfo[] GetFiles(string searchPattern, EnumerationOptions enumerationOptions);\r\n        public FileSystemInfo[] GetFileSystemInfos(string searchPattern, EnumerationOptions enumerationOptions);\r\n    }\r\n\r\n    public enum MatchType\r\n    {\r\n        /// <summary>\r\n        /// Match using '*' and '?' wildcards.\r\n        /// </summary>\r\n        Simple,\r\n\r\n        /// <summary>\r\n        /// Match using DOS style matching semantics. '*', '?', '&lt;', '&gt;', and '\"'\r\n        /// are all considered wildcards.\r\n        /// </summary>\r\n        Dos\r\n    }\r\n\r\n    public enum MatchCasing\r\n    {\r\n        /// <summary>\r\n        /// Match the default casing for the given platform\r\n        /// </summary>\r\n        PlatformDefault,\r\n\r\n        /// <summary>\r\n        /// Match respecting character casing\r\n        /// </summary>\r\n        CaseSensitive,\r\n\r\n        /// <summary>\r\n        /// Match ignoring character casing\r\n        /// </summary>\r\n        CaseInsensitive\r\n    }\r\n\r\n    public class EnumerationOptions\r\n    {\r\n        /// <summary>\r\n        /// Should we recurse into subdirectories while enumerating?\r\n        /// Default is false.\r\n        /// </summary>\r\n        public bool RecurseSubdirectories { get; set; }\r\n\r\n        /// <summary>\r\n        /// Skip files/directories when access is denied (e.g. AccessDeniedException/SecurityException).\r\n        /// Default is true.\r\n        /// </summary>\r\n        public bool IgnoreInaccessible { get; set; }\r\n\r\n        /// <summary>\r\n        /// Suggested buffer size, in bytes. Default is 0 (no suggestion).\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// Not all platforms use user allocated buffers, and some require either fixed buffers or a\r\n        /// buffer that has enough space to return a full result. One scenario where this option is\r\n        /// useful is with remote share enumeration on Windows. Having a large buffer may result in\r\n        /// better performance as more results can be batched over the wire (e.g. over a network\r\n        /// share). A \"large\" buffer, for example, would be 16K. Typical is 4K.\r\n        /// \r\n        /// We will not use the suggested buffer size if it has no meaning for the native APIs on the\r\n        /// current platform or if it would be too small for getting at least a single result.\r\n        /// </remarks>\r\n        public int BufferSize { get; set; }\r\n\r\n        /// <summary>\r\n        /// Skip entries with the given attributes. Default is FileAttributes.Hidden | FileAttributes.System.\r\n        /// </summary>\r\n        public FileAttributes AttributesToSkip { get; set; }\r\n\r\n        /// <summary>\r\n        /// For APIs that allow specifying a match expression this will allow you to specify how\r\n        /// to interpret the match expression.\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// The default is simple matching where '*' is always 0 or more characters and '?' is a single character.\r\n        /// </remarks>\r\n        public MatchType MatchType { get; set; }\r\n\r\n        /// <summary>\r\n        /// For APIs that allow specifying a match expression this will allow you to specify case matching behavior.\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// Default is to match platform defaults, which are gleaned from the case sensitivity of the temporary folder.\r\n        /// </remarks>\r\n        public MatchCasing MatchCasing { get; set; }\r\n\r\n        /// <summary>\r\n        /// Set to true to return \".\" and \"..\" directory entries. Default is false.\r\n        /// </summary>\r\n        public bool ReturnSpecialDirectories { get; set; }\r\n    }\r\n}\r\n\r\nnamespace System.IO.Enumeration\r\n{\r\n    public ref struct FileSystemEntry\r\n    {\r\n        /// <summary>\r\n        /// The full path of the directory this entry resides in.\r\n        /// </summary>\r\n        public ReadOnlySpan<char> Directory { get; }\r\n\r\n        /// <summary>\r\n        /// The full path of the root directory used for the enumeration.\r\n        /// </summary>\r\n        public ReadOnlySpan<char> RootDirectory { get; }\r\n\r\n        /// <summary>\r\n        /// The root directory for the enumeration as specified in the constructor.\r\n        /// </summary>\r\n        public ReadOnlySpan<char>  OriginalRootDirectory { get; }\r\n\r\n        public ReadOnlySpan<char> FileName { get; }\r\n        public FileAttributes Attributes { get; }\r\n        public long Length { get; }\r\n        public DateTimeOffset CreationTimeUtc { get; }\r\n        public DateTimeOffset LastAccessTimeUtc { get; }\r\n        public DateTimeOffset LastWriteTimeUtc { get; }\r\n        public bool IsDirectory { get; }\r\n        public FileSystemInfo ToFileSystemInfo();\r\n\r\n        /// <summary>\r\n        /// Returns the full path for find results, based on the initially provided path.\r\n        /// </summary>\r\n        public string ToSpecifiedFullPath();\r\n\r\n        /// <summary>\r\n        /// Returns the full path of the find result.\r\n        /// </summary>\r\n        public string ToFullPath();\r\n    }\r\n    public abstract class FileSystemEnumerator<TResult> : CriticalFinalizerObject, IEnumerator<TResult>\r\n    {\r\n        public FileSystemEnumerator(string directory, EnumerationOptions options = null);\r\n\r\n        /// <summary>\r\n        /// Return true if the given file system entry should be included in the results.\r\n        /// </summary>\r\n        protected virtual bool ShouldIncludeEntry(ref FileSystemEntry entry);\r\n\r\n        /// <summary>\r\n        /// Return true if the directory entry given should be recursed into.\r\n        /// </summary>\r\n        protected virtual bool ShouldRecurseIntoEntry(ref FileSystemEntry entry);\r\n\r\n        /// <summary>\r\n        /// Generate the result type from the current entry;\r\n        /// </summary>\r\n        protected abstract TResult TransformEntry(ref FileSystemEntry entry);\r\n\r\n        /// <summary>\r\n        /// Called whenever the end of a directory is reached.\r\n        /// </summary>\r\n        /// <param name=\"directory\">The path of the directory that finished.</param>\r\n        protected virtual void OnDirectoryFinished(ReadOnlySpan<char> directory);\r\n\r\n        /// <summary>\r\n        /// Called when a native API returns an error. Return true to continue, or false\r\n        /// to throw the default exception for the given error.\r\n        /// </summary>\r\n        /// <param name=\"error\">The native error code.</param>\r\n        protected virtual bool ContinueOnError(int error);\r\n\r\n        public TResult Current { get; }\r\n        object IEnumerator.Current { get; }\r\n        public bool MoveNext();\r\n        public void Reset();\r\n        public void Dispose();\r\n        protected virtual void Dispose(bool disposing);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Enumerable that allows utilizing custom filter predicates and tranform delegates.\r\n    /// </summary>\r\n    public class FileSystemEnumerable<TResult> : IEnumerable<TResult>\r\n    {\r\n        public FileSystemEnumerable(string directory, FindTransform transform, EnumerationOptions options = null) { }\r\n        public FindPredicate ShouldRecursePredicate { get; set; }\r\n        public FindPredicate ShouldIncludePredicate { get; set; }\r\n        public IEnumerator<TResult> GetEnumerator();\r\n        IEnumerator GetEnumerator();\r\n\r\n        /// <summary>\r\n        /// Delegate for filtering out find results.\r\n        /// </summary>\r\n        public delegate bool FindPredicate(ref FileSystemEntry entry);\r\n\r\n        /// <summary>\r\n        /// Delegate for transforming raw find data into a result.\r\n        /// </summary>\r\n        public delegate TResult FindTransform(ref FileSystemEntry entry);\r\n    }\r\n    public static class FileSystemName\r\n    {\r\n        /// <summary>\r\n        /// Change unescaped '*' and '?' to '&lt;', '&gt;' and '\"' to match Win32 behavior. For compatibility, Windows\r\n        /// changes some wildcards to provide a closer match to historical DOS 8.3 filename matching.\r\n        /// </summary>\r\n        public static string TranslateDosExpression(string expression);\r\n\r\n        /// <summary>\r\n        /// This matcher uses the Windows wildcards (which includes `*`, `?`, `>`, `<`, and `\"`).\r\n        /// </summary>\r\n        public static bool MatchesDosExpression(ReadOnlySpan<char> expression, ReadOnlySpan<char> name, bool ignoreCase = true);\r\n\r\n        /// <summary>\r\n        /// This matcher will only process `*` and `?`.\r\n        /// </summary>       \r\n        public static bool MatchesSimpleExpression(ReadOnlySpan<char> expression, ReadOnlySpan<char> name, bool ignoreCase = true);\r\n    }\r\n}\r\n```\r\n\r\n## Implementation Notes\r\n\r\n### Changes to existing behavior\r\n- Match expressions will no longer consider 8.3 filenames\r\n    - This obscure behavior is costly and gives unexpected results\r\n    - 8.3 filename generation is not always on, can be disabled\r\n    - `*.htm` will no longer match `*.html` if 8.3 filenames exist\r\n- Option defaults (when calling new APIs)\r\n    - System & hidden files/directories are skipped by default\r\n    - Access denied folders are skipped by default (no errors are thrown)\r\n    - Simple matching is used by default (`*.*` means any file with a period, `foo.*` matches `foo.txt`, not `foo`)\r\n\r\n### FileSystemEnumerable\r\n- `directory`, and `transform` will throw `ArgumentNullException` if null.\r\n- If predicates are not specified, all entries will be accepted\r\n\r\n### FileSystemEnumerator\r\n- `directory`, and `transform` will throw `ArgumentNullException` if null.\r\n- all directory entries will be returned before processing additional directories (e.g. subdirectories)\r\n- order of directory entries is not guaranteed\r\n- timing of opening subdirectories is not guaranteed\r\n\r\n### FileSystemEntry\r\n- translation of data that has non-trivial cost will be lazily done (applies specifically to Unix)\r\n    - properties that require an additional OS call\r\n    - UTF-8 to UTF-16 conversion\r\n    - initial property values can potentially be unexpected based on timing of accessing data (i.e. the underlying file could disappear)\r\n- property values will **not** change after being accessed\r\n- `FileSystemEntry` should **not** be cached\r\n    - `FileName` will only contain valid data for the duration of filter/transform calls, hence the struct being passed by ref\r\n\r\n### Matchers\r\n- Matchers will support escaping of supported wildcards and `\\` using the `\\` character\r\n    - `\\*`, `\\\\`, `?` (and `\\>`, `\\<`, `\\\"` for `MatchesDosExpression`)\r\n- Empty `expresion` will match all\r\n"},{"Id":"7279367618","Type":"IssuesEvent","CreatedAt":"2018-02-22T04:00:52","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26715","RelatedDescription":"Closed issue \"Implement Unix file enumeration extensibility\" (#26715) at dotnet/corefx","RelatedBody":"Tracking Unix work for #25873"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7279537192","Type":"IssuesEvent","CreatedAt":"2018-02-22T05:11:22","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24983","RelatedDescription":"Opened issue \"Testplan for stackalloc initializers\" (#24983) at dotnet/roslyn","RelatedBody":"I have added a testplan for stackalloc initializers.\r\n\r\nNoemally we would just create an issue, but I think issues are not all-editable, while docs can be changed in PRs.\r\nLet me know if there is a better way.\r\n\r\nThe doc is - https://github.com/dotnet/roslyn/blob/features/stackalloc-init/docs/compilers/CSharp/testplans/stackalloc_initializers.md\r\n"},{"Id":"7279389839","Type":"IssuesEvent","CreatedAt":"2018-02-22T04:09:42","Actor":"vivekkjain","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24982","RelatedDescription":"Opened issue \"C# 7.1 Build failing on Build Server.\" (#24982) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVisual Studio 2017 15.5.4\r\n\r\nUsed C# 7.1 feature. Building fine on local machine using Visual Studio 2017 15.5.4\r\n\r\nI have set language version to 7.1 explicitly still its failing .\r\n\r\n**error CS8314: An expression of type 'Employee<T>' cannot be handled by a pattern of type 'Company' in C# 7.0. Please use language version 7.1 or greater. [D:\\BuildAgent\\work\\936e0f87a6\\MyShop\\Events.csproj]**\r\n\r\n\r\n**Expected Behavior**:\r\nIt should build fine on the agent server. I have visual studio 15.5.7 on build server.\r\n\r\n**Actual Behavior**:\r\nFailing on build agent with above message.\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\bin\\Roslyn"},{"Id":"7278980044","Type":"PullRequestEvent","CreatedAt":"2018-02-22T01:39:28","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24981","RelatedDescription":"Opened pull request \"Rename the helper method to its final form - \"GetPinnableReference\"\" (#24981) at dotnet/roslyn","RelatedBody":""},{"Id":"7278940336","Type":"PullRequestEvent","CreatedAt":"2018-02-22T01:26:13","Actor":"AbhitejJohn","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24968","RelatedDescription":"Closed pull request \"Merge dev15.6.x-vs-deps to dev15.7.x-vs-deps\" (#24968) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev15.6.x-vs-deps into dev15.7.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.6.x-vs-deps-to-dev15.7.x-vs-deps\ngit reset --hard upstream/dev15.7.x-vs-deps\ngit merge upstream/dev15.6.x-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.6.x-vs-deps-to-dev15.7.x-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7279525480","Type":"PullRequestEvent","CreatedAt":"2018-02-22T05:06:23","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5423","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5423) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7279463095","Type":"PullRequestEvent","CreatedAt":"2018-02-22T04:40:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5422","RelatedDescription":"Opened pull request \"Fix F5 debugging of ILCompiler project\" (#5422) at dotnet/corert","RelatedBody":"Trying to debug ILCompiler in Visual Studio was failing with missing assemblies. The problem was caused by recently added libLLVMdep.depproj reference that made NuGet delete certain files from the output tools directory. The fix is to move the .depproj reference to a different part of the build next to other similar .depproj reference where it won't be confusing NuGet."},{"Id":"7279340616","Type":"IssuesEvent","CreatedAt":"2018-02-22T03:50:34","Actor":"Blealtan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5421","RelatedDescription":"Opened issue \"Multi-dimensional array creating leads to trap-only genereted code in WASM codegen\" (#5421) at dotnet/corert","RelatedBody":"To reproduce, simply add `var a = new int[2,2];` in HelloWasm. After added this, generated HelloWasm.html shows only `trap!` in output."},{"Id":"7278828668","Type":"PullRequestEvent","CreatedAt":"2018-02-22T00:50:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5404","RelatedDescription":"Merged pull request \"Delete unnecessary MarshalImpl abstraction\" (#5404) at dotnet/corert","RelatedBody":"MarshalImpl is an extra layer without clear purpose. Also made MarshalAdapter to be included in CoreCLR/Mono builds only."},{"Id":"7278394476","Type":"PullRequestEvent","CreatedAt":"2018-02-21T22:45:41","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5406","RelatedDescription":"Merged pull request \"Fix Marshal.GetDelegateForFunctionPointer to throw exception when it cannot create the stub\" (#5406) at dotnet/corert","RelatedBody":"- Remove WINRT ifdef from GetDelegateForFunctionPointer to consistently throw MissingInteropDataException instead of returning null. Fixes #5162.\r\n- Move McgPInvokeData set of structure to System.Private.Interop since it is MCG specific\r\n- Rename a few things for consistency (e.g. PInvokeMarshal.GetPInvokeDelegateForStub did not make sense since it operates on user supplied function pointers, not stubs)"},{"Id":"7277490880","Type":"PullRequestEvent","CreatedAt":"2018-02-21T19:37:48","Actor":"JeremyKuhne","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5420","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5420) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7277223060","Type":"PullRequestEvent","CreatedAt":"2018-02-21T18:46:18","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5420","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5420) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7278855425","Type":"IssuesEvent","CreatedAt":"2018-02-22T00:58:40","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1716","RelatedDescription":"Closed issue \"Duplicate ProjectReference's breaks cross-targeting frameworks\" (#1716) at dotnet/sdk","RelatedBody":"When there are duplicate ProjectReference's, MSBuild will use the wrong TargetFrameworks value when building P2P references. This used to work in 2.0.0 but started failing in nightly builds of 2.2.0.\r\n\r\n**Repro:**\r\n```\r\nMicrosoft.AspNetCore.Authentication.Test (netcoreapp2.0;net461) \r\n   ProjectReferences\r\n   ---> Microsoft.AspNetCore.Authentication.Cookies  (netstandard2.0)\r\n   ---> Microsoft.AspNetCore.Authentication.Facebook  (netstandard2.0)\r\n   ---> Microsoft.AspNetCore.Authentication.Google  (netstandard2.0)\r\n   ---> Microsoft.AspNetCore.Authentication.JwtBearer  (netstandard2.0)\r\n   ---> Microsoft.AspNetCore.Authentication.MicrosoftAccount  (netstandard2.0)\r\n   ---> Microsoft.AspNetCore.Authentication.OpenIdConnect  (netstandard2.0)\r\n   ---> Microsoft.AspNetCore.Authentication.MicrosoftAccount  (netstandard2.0)  (DUPLICATE)\r\n   ---> Microsoft.AspNetCore.Authentication.JwtBearer  (netstandard2.0) (DUPLICATE)\r\n   ---> Microsoft.AspNetCore.Authentication.Twitter  (netstandard2.0)\r\n```\r\n\r\n1. Install nightly build of the CLI: https://dotnetcli.blob.core.windows.net/dotnet/Sdk/2.2.0-preview1-007522/dotnet-sdk-2.2.0-preview1-007522-win-x64.zip\r\n1. `git clone https://github.com/aspnet/Security`\r\n2. `git checkout 72e1cb1385c982e6dba90c839d1a1455e2813e6c`\r\n3. `cd Security/test/Microsoft.AspNetCore.Authentication.Test`\r\n4. `dotnet restore`\r\n5. `dotnet build --no-restore`\r\n\r\n**Expected**\r\nMicrosoft.AspNetCore.Authentication.MicrosoftAccount and Microsoft.AspNetCore.Authentication.JwtBearer should be built using TargetFramework=netstandard2.0\r\n\r\nOr, produce an error about duplicate ProjectReferences are ignored or produce some kind of warning.\r\n\r\n**Actual**\r\nMSBuild attempts to compile Microsoft.AspNetCore.Authentication.MicrosoftAccount and Microsoft.AspNetCore.Authentication.JwtBearer  with both net461 and netcoreapp2.0.\r\n\r\n\r\n```\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\2.2.0-preview1-007460\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): error : Assets file 'C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.MicrosoftAccount\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.0'. Ensure that restore has run and that you have included 'netcoreapp2.0' in the TargetFrameworks for your project. [C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.MicrosoftAccount\\Microsoft.AspNetCore.Authentication.MicrosoftAccount.csproj]\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\2.2.0-preview1-007460\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): error : Assets file 'C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.JwtBearer\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.0'. Ensure that restore has run and that you have included 'netcoreapp2.0' in the TargetFrameworks for your project. [C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.JwtBearer\\Microsoft.AspNetCore.Authentication.JwtBearer.csproj]\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\2.2.0-preview1-007460\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): error : Assets file 'C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.MicrosoftAccount\\obj\\project.assets.json' doesn't have a target for '.NETFramework,Version=v4.6.1'. Ensure that restore has run and that you have included 'net461' in the TargetFrameworks for your project. [C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.MicrosoftAccount\\Microsoft.AspNetCore.Authentication.MicrosoftAccount.csproj]\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\2.2.0-preview1-007460\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): error : Assets file 'C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.JwtBearer\\obj\\project.assets.json' doesn't have a target for '.NETFramework,Version=v4.6.1'. Ensure that restore has run and that you have included 'net461' in the TargetFrameworks for your project. [C:\\dev\\aspnet\\Universe21\\modules\\Security\\src\\Microsoft.AspNetCore.Authentication.JwtBearer\\Microsoft.AspNetCore.Authentication.JwtBearer.csproj]\r\n```\r\n\r\n**Details**\r\n\r\n[Microsoft.AspNetCore.Authentication.Test.csproj](https://github.com/aspnet/Security/blob/72e1cb1385c982e6dba90c839d1a1455e2813e6c/test/Microsoft.AspNetCore.Authentication.Test/Microsoft.AspNetCore.Authentication.Test.csproj)\r\n[Microsoft.AspNetCore.Authentication.MicrosoftAccount.csproj](https://github.com/aspnet/Security/blob/72e1cb1385c982e6dba90c839d1a1455e2813e6c/src/Microsoft.AspNetCore.Authentication.MicrosoftAccount/Microsoft.AspNetCore.Authentication.MicrosoftAccount.csproj)\r\n[Microsoft.AspNetCore.Authentication.JwtBearer.csproj](https://github.com/aspnet/Security/blob/72e1cb1385c982e6dba90c839d1a1455e2813e6c/src/Microsoft.AspNetCore.Authentication.JwtBearer/Microsoft.AspNetCore.Authentication.JwtBearer.csproj)\r\n\r\nBuild log: [msbuild.binlog.zip](https://github.com/dotnet/sdk/files/1452260/msbuild.binlog.zip)\r\n\r\n"},{"Id":"7278668965","Type":"PullRequestEvent","CreatedAt":"2018-02-22T00:00:15","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1980","RelatedDescription":"Merged pull request \"Merge release/2.1.3xx to master\" (#1980) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7278629163","Type":"IssuesEvent","CreatedAt":"2018-02-21T23:47:58","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/661","RelatedDescription":"Closed issue \"Build errors/warnings in multi-targeting are ambiguous \" (#661) at dotnet/sdk","RelatedBody":"When a warning or error occurs in a multi-targeting solution, it's very hard to tell which inner build the error came from.\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netcoreapp1.0;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"BreakBuild\" BeforeTargets=\"Build\" Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Error Text=\"Inner build failing example\" />\r\n  </Target>\r\n</Project>\r\n```\r\n![i1](https://cloud.githubusercontent.com/assets/1427284/22001460/33a4b2a2-dbfa-11e6-8615-f08832c1c17a.png)\r\n![i2](https://cloud.githubusercontent.com/assets/1427284/22001459/339f8c46-dbfa-11e6-81e2-91271ec03b92.png)\r\n\r\n"},{"Id":"7278067972","Type":"PullRequestEvent","CreatedAt":"2018-02-21T21:36:03","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1981","RelatedDescription":"Merged pull request \"Fix the import clause: perf.groovy\" (#1981) at dotnet/sdk","RelatedBody":"Fixing the generate error: perf.groovy: 100: unable to resolve class TriggerBuilder "},{"Id":"7277560781","Type":"IssuesEvent","CreatedAt":"2018-02-21T19:51:25","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/531","RelatedDescription":"Closed issue \"Multi-targeting build does not surface inner errors when tasks fail\" (#531) at dotnet/sdk","RelatedBody":"In the attached project, I'm trying to build it with `msbuild /t:restore;build` on Windows (with all of the Xamarin stuff installed). The problem is that the Xamarin targets are reporting warnings (for some reason?) and while they appear to build ok and produce output dll's, the Sdk build reports it as failed and thus fails the build.\r\n\r\n[Microsoft.Identity.Client.zip](https://github.com/dotnet/sdk/files/659535/Microsoft.Identity.Client.zip)\r\n\r\n```\r\nDone Building Project \"C:\\dev\\msal\\src\\Microsoft.Identity.Client\\Microsoft.Identity.Client.csproj\" (Build target(s)) --\r\n FAILED.\r\n\r\nDone Building Project \"C:\\dev\\msal\\src\\Microsoft.Identity.Client\\Microsoft.Identity.Client.csproj\" (build target(s)) --\r\n FAILED.\r\n\r\n\r\nBuild FAILED.\r\n\r\n\"C:\\dev\\msal\\src\\Microsoft.Identity.Client\\Microsoft.Identity.Client.csproj\" (build target) (1) ->\r\n\"C:\\dev\\msal\\src\\Microsoft.Identity.Client\\Microsoft.Identity.Client.csproj\" (Build target) (1:8) ->\r\n(_GetPrimaryCpuAbi target) ->\r\n  C:\\Program Files (x86)\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.Debugging.targets(308,2): warning : One or more\r\n errors occurred. [C:\\dev\\msal\\src\\Microsoft.Identity.Client\\Microsoft.Identity.Client.csproj]\r\n\r\n\r\n\"C:\\dev\\msal\\src\\Microsoft.Identity.Client\\Microsoft.Identity.Client.csproj\" (build target) (1) ->\r\n\"C:\\dev\\msal\\src\\Microsoft.Identity.Client\\Microsoft.Identity.Client.csproj\" (Build target) (1:9) ->\r\n(_SayHello target) ->\r\n  C:\\Program Files (x86)\\MSBuild\\Xamarin\\iOS\\Xamarin.iOS.Windows.After.targets(63,5): warning VSX1000: The project Micr\r\nosoft.Identity.Client was built while disconnected from a Mac agent, so only the main assembly was compiled. Connect to\r\n a Xamarin Mac build agent to build the full application. [C:\\dev\\msal\\src\\Microsoft.Identity.Client\\Microsoft.Identity\r\n.Client.csproj]\r\n\r\n    2 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:04.01\r\n```"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"966205758831554561","CreatedAt":"2018-02-21T06:59:38+00:00","UserScreenname":"dotnet","Text":"Are you following these amazing people already? Expand your list :-) https://t.co/g02dmPDLsX","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":37,"FavoriteCount":11,"RawContent":null},{"Id":"965964952375873544","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"dotnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/ioBP2nkstm","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"965646227764232192","CreatedAt":"2018-02-19T17:56:16+00:00","UserScreenname":"dotnet","Text":"Interactive learning with Try .NET with @LadyNaggaga https://t.co/8btikidagq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":40,"FavoriteCount":24,"RawContent":null},{"Id":"964556484267868162","CreatedAt":"2018-02-16T17:46:01+00:00","UserScreenname":"dotnet","Text":"How can #VisualStudio help you get started building #dotNET apps in #Azure? Join @PaulYuki99 &amp; @andrewBrianHall at… https://t.co/Sws9Apkm6t","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":18,"FavoriteCount":14,"RawContent":null},{"Id":"963791622948388870","CreatedAt":"2018-02-14T15:06:43+00:00","UserScreenname":"dotnet","Text":"Join our @csharpfritz this FRIDAY at 10am / 15:00 UTC for a free online workshop to get started with ASPNet Core.… https://t.co/icP5AqPRuB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":46,"RawContent":null},{"Id":"963413986954895360","CreatedAt":"2018-02-13T14:06:08+00:00","UserScreenname":"dotnet","Text":"Join @csharpfritz at 10am ET / 15:00 UTC to learn more about @AspNet Core and get your .NET related questions answe… https://t.co/l9RlPrj5Ep","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":9,"RawContent":null},{"Id":"963128572595519489","CreatedAt":"2018-02-12T19:12:00+00:00","UserScreenname":"dotnet","Text":"You can run your application anywhere with .NET Core – join @coolsch as he talks about .NET in 2018 at… https://t.co/0sSc3B7yOQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":11,"RawContent":null},{"Id":"963083274636554240","CreatedAt":"2018-02-12T16:12:00+00:00","UserScreenname":"dotnet","Text":"Update your existing .NET application to take advantage of new features in Windows Forms and WPF with @csharpfritz… https://t.co/yjqbIthkKQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":17,"RawContent":null}]}},"RunOn":"2018-02-22T05:30:20.4867332Z","RunDurationInMilliseconds":8149}